File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptTreeModel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.List;
 import java.util.Map;
 import javax.swing.tree.DefaultTreeModel;
+import org.zaproxy.zap.utils.ThreadUtils;
 
 /**
  * A {@link javax.swing.tree.TreeModel TreeModel} of (user created) scripts and script templates.
@@ -175,7 +176,7 @@ public ScriptNode getNodeForScript(ScriptWrapper script) {
     public void nodeStructureChanged(ScriptWrapper script) {
         ScriptNode node = this.getNodeForScript(script);
         if (node != null) {
-            this.nodeStructureChanged(node);
+            ThreadUtils.invokeAndWaitHandled(() -> nodeStructureChanged(node));
         }
     }
 

File: zap/src/test/java/org/zaproxy/zap/extension/ascan/VariantFactoryUnitTest.java
Patch:
@@ -323,6 +323,7 @@ private static <T> T getVariant(List<Variant> variants, Class<T> clazz) {
     private static <T> CachedScript<T> createCachedScript(T script) {
         CachedScript<T> cachedScript = mock(CachedScript.class);
         given(cachedScript.getScript()).willReturn(script);
+        given(cachedScript.getScriptWrapper()).willReturn(mock(ScriptWrapper.class));
         return cachedScript;
     }
 

File: zap/src/main/java/org/zaproxy/zap/ZAP.java
Patch:
@@ -119,7 +119,7 @@ public void println(String x) {
                                 .equals(x)) {
                             return;
                         }
-                        if (x.startsWith("Multiplexing LAF")) {
+                        if (x != null && x.startsWith("Multiplexing LAF")) {
                             return;
                         }
                         super.println(x);

File: zap/src/main/java/org/zaproxy/zap/ZAP.java
Patch:
@@ -119,7 +119,7 @@ public void println(String x) {
                                 .equals(x)) {
                             return;
                         }
-                        if (x.startsWith("Multiplexing LAF")) {
+                        if (x != null && x.startsWith("Multiplexing LAF")) {
                             return;
                         }
                         super.println(x);

File: zap/src/main/java/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -74,7 +74,7 @@ public class ExtensionAlert extends ExtensionAdaptor
         implements SessionChangedListener, XmlReporterExtension, OptionsChangedListener {
 
     public static final String NAME = "ExtensionAlert";
-    private static final String ALERT_TAG_PREFIX = "ALERT-TAG:";
+    public static final String ALERT_TAG_PREFIX = "ALERT-TAG:";
     private static final Logger LOGGER = LogManager.getLogger(ExtensionAlert.class);
     private Map<Integer, HistoryReference> hrefs = new HashMap<>();
     private AlertTreeModel treeModel = null;

File: zap/src/main/java/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -74,7 +74,7 @@ public class ExtensionAlert extends ExtensionAdaptor
         implements SessionChangedListener, XmlReporterExtension, OptionsChangedListener {
 
     public static final String NAME = "ExtensionAlert";
-    private static final String ALERT_TAG_PREFIX = "ALERT-TAG:";
+    public static final String ALERT_TAG_PREFIX = "ALERT-TAG:";
     private static final Logger LOGGER = LogManager.getLogger(ExtensionAlert.class);
     private Map<Integer, HistoryReference> hrefs = new HashMap<>();
     private AlertTreeModel treeModel = null;

File: zap/src/main/java/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -527,6 +527,7 @@ private void writeAlertToDB(Alert alert, HistoryReference ref)
 
         int alertId = recordAlert.getAlertId();
         alert.setAlertId(alertId);
+        alert.setHistoryId(recordAlert.getHistoryId());
 
         TableAlertTag tableAlertTag = getModel().getDb().getTableAlertTag();
         for (Map.Entry<String, String> e : alert.getTags().entrySet()) {

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/InstalledAddOnsTableModel.java
Patch:
@@ -37,13 +37,12 @@ public class InstalledAddOnsTableModel extends AddOnsTableModel {
     private static final long serialVersionUID = 1L;
 
     private static final String[] COLUMN_NAMES = {
-        "", // Column for warning of running issues (e.g. incorrect Java version, missing
-        // dependency...)
+        Constant.messages.getString("cfu.table.header.note"),
         Constant.messages.getString("cfu.table.header.name"),
         Constant.messages.getString("cfu.table.header.version"),
         Constant.messages.getString("cfu.table.header.desc"),
         Constant.messages.getString("cfu.table.header.update"),
-        ""
+        Constant.messages.getString("cfu.table.header.selected")
     };
 
     private static final int COLUMN_COUNT = COLUMN_NAMES.length;

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/UninstalledAddOnsTableModel.java
Patch:
@@ -34,13 +34,12 @@ public class UninstalledAddOnsTableModel extends AddOnsTableModel {
     private static final long serialVersionUID = 1L;
 
     private static final String[] COLUMN_NAMES = {
-        "", // Column for warning of running issues (e.g. incorrect Java version, missing
-        // dependency...)
+        Constant.messages.getString("cfu.table.header.note"),
         Constant.messages.getString("cfu.table.header.status"),
         Constant.messages.getString("cfu.table.header.name"),
         Constant.messages.getString("cfu.table.header.desc"),
         Constant.messages.getString("cfu.table.header.update"),
-        ""
+        Constant.messages.getString("cfu.table.header.selected")
     };
 
     private static final int COLUMN_COUNT = COLUMN_NAMES.length;

File: zap/src/main/java/org/zaproxy/zap/extension/custompages/DefaultCustomPage.java
Patch:
@@ -271,7 +271,7 @@ protected static DefaultCustomPage decode(int contextId, String encodedString) {
                             Boolean.parseBoolean(pieces[4])); // Enabled
         } catch (Exception ex) {
             LOGGER.error(
-                    "An error occured while decoding DefaultCustomPage from: {}",
+                    "An error occurred while decoding DefaultCustomPage from: {}",
                     encodedString,
                     ex);
             return null;

File: zap/src/main/java/org/zaproxy/zap/extension/help/ExtensionHelp.java
Patch:
@@ -279,7 +279,7 @@ private static void loadAddOnHelpSet(AddOn addOn) {
             LOGGER.debug("Loading help for '{}' add-on and merging with core help.", addOn.getId());
             addHelpSet(addOn, new HelpSet(classLoader, helpSetUrl));
         } catch (HelpSetException e) {
-            LOGGER.error("An error occured while adding help for '{}' add-on:", addOn.getId(), e);
+            LOGGER.error("An error occurred while adding help for '{}' add-on:", addOn.getId(), e);
         }
     }
 
@@ -299,7 +299,7 @@ private static void loadExtensionHelpSet(Extension ext) {
                         ext.getAddOn(), new HelpSet(ext.getClass().getClassLoader(), helpSetUrl));
             } catch (HelpSetException e) {
                 LOGGER.error(
-                        "An error occured while adding help file of extension '{}': {}",
+                        "An error occurred while adding help file of extension '{}': {}",
                         ext.getName(),
                         e.getMessage(),
                         e);

File: zap/src/main/java/org/zaproxy/zap/users/User.java
Patch:
@@ -363,7 +363,7 @@ protected static User decode(
             cred.decode(pieces[4]);
             user.setAuthenticationCredentials(cred);
         } catch (Exception ex) {
-            LOGGER.error("An error occured while decoding user from: {}", encodedString, ex);
+            LOGGER.error("An error occurred while decoding user from: {}", encodedString, ex);
             return null;
         }
         LOGGER.debug("Decoded user: {}", user);

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantODataUnitTest.java
Patch:
@@ -299,7 +299,7 @@ private void doTestInjectParameter(
         setParameter(msg, param, hackValue, variant, originalPair);
 
         // Then
-        // Check that the msg contains now well formated URI with the injected parameter
+        // Check that the msg contains now well formatted URI with the injected parameter
         URI hackedURI = msg.getRequestHeader().getURI();
         String hackedURIasStr = hackedURI.getURI();
         assertThat("RequestHeader.uri", hackedURIasStr, is(expectedHackedURI));

File: zap/src/main/java/org/zaproxy/zap/model/StructuralNodeModifier.java
Patch:
@@ -69,7 +69,7 @@ public StructuralNodeModifier(String config) {
         JSONObject json = JSONObject.fromObject(config);
         this.name = json.getString(CONFIG_NAME);
         this.type = Type.valueOf(json.getString(CONFIG_TYPE));
-        if (json.containsKey(CONFIG_TYPE)) {
+        if (json.containsKey(CONFIG_PATTERN)) {
             pattern = Pattern.compile(json.getString(CONFIG_PATTERN));
         }
     }

File: zap/src/main/java/org/zaproxy/zap/view/ContextStructurePanel.java
Patch:
@@ -402,7 +402,7 @@ public StructuralNodeModifier showDialog(StructuralNodeModifier ddn) {
                 }
                 name = ddn.getName();
                 ro = true;
-                this.addReadOnlyField(FIELD_NAME, getModVal(type), false);
+                this.addReadOnlyField(FIELD_TYPE, getModVal(type), false);
             } else {
                 this.addComboField(
                         FIELD_TYPE,

File: zap/src/main/java/org/zaproxy/zap/extension/search/ExtensionSearch.java
Patch:
@@ -48,6 +48,7 @@ public enum Type {
         Response,
         Header,
         Tag,
+        Note,
         Custom
     }
 

File: zap/src/main/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -177,7 +177,7 @@ protected String replaceParameterValue(
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return method instanceof FormBasedAuthenticationMethod;
+        return method != null && FormBasedAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -312,7 +312,7 @@ public boolean hasCredentialsOptionsPanel() {
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return (method instanceof HttpAuthenticationMethod);
+        return method != null && HttpAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/JsonBasedAuthenticationMethodType.java
Patch:
@@ -180,7 +180,7 @@ private static void setValue(JSONObject jsonObject, String[] keys, int idx, Stri
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return method instanceof JsonBasedAuthenticationMethod;
+        return method != null && JsonBasedAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -355,7 +355,7 @@ public AbstractAuthenticationMethodOptionsPanel buildOptionsPanel(Context uiShar
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return (method instanceof ManualAuthenticationMethod);
+        return method != null && ManualAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -636,7 +636,7 @@ public boolean hasCredentialsOptionsPanel() {
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return (method instanceof ScriptBasedAuthenticationMethod);
+        return method != null && ScriptBasedAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -177,7 +177,7 @@ protected String replaceParameterValue(
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return method instanceof FormBasedAuthenticationMethod;
+        return method != null && FormBasedAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -312,7 +312,7 @@ public boolean hasCredentialsOptionsPanel() {
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return (method instanceof HttpAuthenticationMethod);
+        return method != null && HttpAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/JsonBasedAuthenticationMethodType.java
Patch:
@@ -180,7 +180,7 @@ private static void setValue(JSONObject jsonObject, String[] keys, int idx, Stri
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return method instanceof JsonBasedAuthenticationMethod;
+        return method != null && JsonBasedAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -355,7 +355,7 @@ public AbstractAuthenticationMethodOptionsPanel buildOptionsPanel(Context uiShar
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return (method instanceof ManualAuthenticationMethod);
+        return method != null && ManualAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -636,7 +636,7 @@ public boolean hasCredentialsOptionsPanel() {
 
     @Override
     public boolean isTypeForMethod(AuthenticationMethod method) {
-        return (method instanceof ScriptBasedAuthenticationMethod);
+        return method != null && ScriptBasedAuthenticationMethod.class.equals(method.getClass());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -176,9 +176,6 @@ public ExtensionScript() {
         ScriptEngine se = mgr.getEngineByName("ECMAScript");
         if (se != null) {
             this.registerScriptEngineWrapper(new JavascriptEngineWrapper(se.getFactory()));
-        } else {
-            LOGGER.warn(
-                    "No default JavaScript/ECMAScript engine found, some scripts might no longer work.");
         }
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
Patch:
@@ -709,6 +709,7 @@ public void update(StatusUpdate statusUpdate) {
                     loadScanRules(statusUpdate.getAddOn());
                     break;
 
+                case SOFT_UNINSTALL:
                 case UNINSTALL:
                     AddOn addOn = statusUpdate.getAddOn();
 

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantURLPath.java
Patch:
@@ -122,6 +122,9 @@ public void setMessage(HttpMessage msg) {
         }
         // Attack new path at the end
         stringParam.add(new NameValuePair(NameValuePair.TYPE_URL_PATH, "", "", i));
+        if (segments == null || segments.length == 0) {
+            segments = new String[] {""};
+        }
     }
 
     // Adapted from URLCodec#decodeUrl

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantURLPath.java
Patch:
@@ -122,6 +122,9 @@ public void setMessage(HttpMessage msg) {
         }
         // Attack new path at the end
         stringParam.add(new NameValuePair(NameValuePair.TYPE_URL_PATH, "", "", i));
+        if (segments == null || segments.length == 0) {
+            segments = new String[] {""};
+        }
     }
 
     // Adapted from URLCodec#decodeUrl

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/lexers/WwwFormTokenMaker.java
Patch:
@@ -367,7 +367,7 @@ private boolean zzRefill() {
      * Resets the scanner to read from a new input stream. Does not close the old reader.
      *
      * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
-     * buffer is discarded and lost). Lexical state is set to <tt>YY_INITIAL</tt>.
+     * buffer is discarded and lost). Lexical state is set to <code>YY_INITIAL</code>.
      *
      * @param reader the new input stream
      */

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/lexers/WwwFormTokenMaker.java
Patch:
@@ -367,7 +367,7 @@ private boolean zzRefill() {
      * Resets the scanner to read from a new input stream. Does not close the old reader.
      *
      * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
-     * buffer is discarded and lost). Lexical state is set to <tt>YY_INITIAL</tt>.
+     * buffer is discarded and lost). Lexical state is set to <code>YY_INITIAL</code>.
      *
      * @param reader the new input stream
      */

File: zap/src/main/java/org/zaproxy/zap/extension/search/ExtensionSearch.java
Patch:
@@ -47,6 +47,7 @@ public enum Type {
         Request,
         Response,
         Header,
+        Tag,
         Custom
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -287,7 +287,7 @@ private boolean isPermittedAddr(HttpRequestHeader requestHeader) {
      * @param requestHeader the request header
      * @param httpIn the HTTP input stream
      * @param httpOut the HTTP output stream
-     * @param force if set then always handle an an API request (will not return null)
+     * @param force if set then always handle an API request (will not return null)
      * @return null if its not an API request, an empty message if it was silently dropped or the
      *     API response sent.
      * @throws IOException

File: zap/src/main/java/org/zaproxy/zap/view/popup/ExtensionPopupMenuComponent.java
Patch:
@@ -127,8 +127,8 @@ public interface ExtensionPopupMenuComponent {
     boolean isSafe();
 
     /**
-     * Called after the pop up menu in which this pop up menu component is is dismissed, indicating
-     * the menu component that was selected or {@code null} if none.
+     * Called after the pop up menu in which this pop up menu component is dismissed, indicating the
+     * menu component that was selected or {@code null} if none.
      *
      * <p>Can be used to free any resources no longer needed (e.g. references to UI components)
      * after being shown in the pop up menu.

File: zap/src/main/java/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -287,7 +287,7 @@ private boolean isPermittedAddr(HttpRequestHeader requestHeader) {
      * @param requestHeader the request header
      * @param httpIn the HTTP input stream
      * @param httpOut the HTTP output stream
-     * @param force if set then always handle an an API request (will not return null)
+     * @param force if set then always handle an API request (will not return null)
      * @return null if its not an API request, an empty message if it was silently dropped or the
      *     API response sent.
      * @throws IOException

File: zap/src/main/java/org/zaproxy/zap/view/popup/ExtensionPopupMenuComponent.java
Patch:
@@ -127,8 +127,8 @@ public interface ExtensionPopupMenuComponent {
     boolean isSafe();
 
     /**
-     * Called after the pop up menu in which this pop up menu component is is dismissed, indicating
-     * the menu component that was selected or {@code null} if none.
+     * Called after the pop up menu in which this pop up menu component is dismissed, indicating the
+     * menu component that was selected or {@code null} if none.
      *
      * <p>Can be used to free any resources no longer needed (e.g. references to UI components)
      * after being shown in the pop up menu.

File: zap/src/main/java/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -68,6 +68,7 @@
 import org.zaproxy.zap.extension.help.ExtensionHelp;
 import org.zaproxy.zap.model.SessionStructure;
 import org.zaproxy.zap.model.Target;
+import org.zaproxy.zap.view.popup.MenuWeights;
 
 public class ExtensionAlert extends ExtensionAdaptor
         implements SessionChangedListener, XmlReporterExtension, OptionsChangedListener {
@@ -642,6 +643,7 @@ private PopupMenuAlert getPopupMenuAlertAdd() {
         if (popupMenuAlertAdd == null) {
             popupMenuAlertAdd =
                     new PopupMenuAlert(Constant.messages.getString("alert.add.popup"), this);
+            popupMenuAlertAdd.setWeight(MenuWeights.MENU_NEW_ALERT_WEIGHT);
         }
         return popupMenuAlertAdd;
     }
@@ -678,6 +680,7 @@ private PopupMenuShowAlerts getPopupMenuShowAlerts() {
         if (popupMenuShowAlerts == null) {
             popupMenuShowAlerts =
                     new PopupMenuShowAlerts(Constant.messages.getString("alerts.view.popup"), this);
+            popupMenuShowAlerts.setWeight(MenuWeights.MENU_ALERTS_NODE_WEIGHT);
         }
         return popupMenuShowAlerts;
     }

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PopupMenuActiveScanCustomWithContext.java
Patch:
@@ -24,6 +24,7 @@
 import org.zaproxy.zap.extension.stdmenus.PopupContextTreeMenu;
 import org.zaproxy.zap.model.Context;
 import org.zaproxy.zap.model.Target;
+import org.zaproxy.zap.view.popup.MenuWeights;
 
 /**
  * A {@code PopupContextTreeMenu} that allows to show the Active Scan dialogue for a selected {@link
@@ -49,5 +50,6 @@ public PopupMenuActiveScanCustomWithContext(ExtensionActiveScan extension) {
                     Context context = Model.getSingleton().getSession().getContext(getContextId());
                     extension.showCustomScanDialog(new Target(context));
                 });
+        this.setWeight(MenuWeights.MENU_CONTEXT_ACTIVE_WEIGHT);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/authentication/PopupFlagLoggedInIndicatorMenu.java
Patch:
@@ -30,6 +30,7 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.httppanel.HttpPanelResponse;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.view.popup.MenuWeights;
 
 /** The Popup Menu item used for marking a text in the response panel as Logged in indicator. */
 public class PopupFlagLoggedInIndicatorMenu extends ExtensionPopupMenuItem {
@@ -84,8 +85,8 @@ public String getParentMenuName() {
     }
 
     @Override
-    public int getParentMenuIndex() {
-        return CONTEXT_FLAG_MENU_INDEX;
+    public int getParentWeight() {
+        return MenuWeights.MENU_FLAG_CONTEXT_WEIGHT;
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/authentication/PopupFlagLoggedOutIndicatorMenu.java
Patch:
@@ -30,6 +30,7 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.httppanel.HttpPanelResponse;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.view.popup.MenuWeights;
 
 /** The Popup Menu item used for marking a text in the response panel as Logged out indicator. */
 public class PopupFlagLoggedOutIndicatorMenu extends ExtensionPopupMenuItem {
@@ -84,8 +85,8 @@ public String getParentMenuName() {
     }
 
     @Override
-    public int getParentMenuIndex() {
-        return CONTEXT_FLAG_MENU_INDEX;
+    public int getParentWeight() {
+        return MenuWeights.MENU_FLAG_CONTEXT_WEIGHT;
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/custompages/PopupFlagCustomPageIndicatorMenu.java
Patch:
@@ -29,6 +29,7 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.httppanel.HttpPanelResponse;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.view.popup.MenuWeights;
 
 /** The Popup Menu item used for marking a text in the response panel as a {@code CustomPage}. */
 public class PopupFlagCustomPageIndicatorMenu extends ExtensionPopupMenuItem {
@@ -74,8 +75,8 @@ public String getParentMenuName() {
     }
 
     @Override
-    public int getParentMenuIndex() {
-        return CONTEXT_FLAG_MENU_INDEX;
+    public int getParentWeight() {
+        return MenuWeights.MENU_FLAG_CONTEXT_WEIGHT;
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/menus/SyntaxMenu.java
Patch:
@@ -37,6 +37,7 @@
 import org.zaproxy.zap.extension.httppanel.view.syntaxhighlight.AutoDetectSyntaxHttpPanelTextArea;
 import org.zaproxy.zap.extension.httppanel.view.syntaxhighlight.HttpPanelSyntaxHighlightTextArea;
 import org.zaproxy.zap.extension.httppanel.view.syntaxhighlight.HttpPanelSyntaxHighlightTextArea.SyntaxStyle;
+import org.zaproxy.zap.view.popup.MenuWeights;
 
 @SuppressWarnings("serial")
 public class SyntaxMenu extends ExtensionPopupMenu {
@@ -90,8 +91,8 @@ public boolean isEnableForComponent(Component invoker) {
     }
 
     @Override
-    public boolean precedeWithSeparator() {
-        return true;
+    public int getWeight() {
+        return MenuWeights.MENU_SYNTAX_WEIGHT;
     }
 
     public void updateState(HttpPanelSyntaxHighlightTextArea httpPanelTextArea) {

File: zap/src/main/java/org/zaproxy/zap/extension/siterefresh/PopupMenuSitesRefresh.java
Patch:
@@ -26,6 +26,7 @@
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteMap;
+import org.zaproxy.zap.view.popup.MenuWeights;
 
 public class PopupMenuSitesRefresh extends ExtensionPopupMenuItem {
 
@@ -59,7 +60,7 @@ public boolean isEnableForComponent(Component invoker) {
     }
 
     @Override
-    public boolean precedeWithSeparator() {
-        return true;
+    public int getWeight() {
+        return MenuWeights.MENU_SITE_REFRESH_WEIGHT;
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/PopupContextMenuItemFactory.java
Patch:
@@ -71,7 +71,6 @@ public boolean isEnableForComponent(Component invoker) {
         List<Context> contexts = session.getContexts();
         for (Context context : contexts) {
             ExtensionPopupMenuItem piicm = getContextMenu(context, this.parentMenu);
-            piicm.setMenuIndex(this.getMenuIndex());
             mainPopupMenuItems.add(piicm);
             this.subMenus.add(piicm);
         }

File: zap/src/main/java/org/zaproxy/zap/view/popup/PopupMenuItemContext.java
Patch:
@@ -37,7 +37,6 @@ public abstract class PopupMenuItemContext extends PopupMenuItemSiteNodeContaine
     public PopupMenuItemContext() {
         super(Constant.messages.getString("context.new.title"), true);
         this.context = null;
-        this.setPrecedeWithSeparator(true);
     }
 
     public PopupMenuItemContext(Context context, String parentMenu, String name) {

File: zap/src/main/java/org/zaproxy/zap/view/popup/PopupMenuItemContextDataDriven.java
Patch:
@@ -84,7 +84,6 @@ protected void reCreateSubMenu(SiteNode sn) {
         for (Context context : contexts) {
             if (context.isIncluded(sn)) {
                 ExtensionPopupMenuItem piicm = createPopupDataDrivenNodeMenu(context);
-                piicm.setMenuIndex(this.getMenuIndex());
                 mainPopupMenuItems.add(piicm);
                 this.subMenus.add(piicm);
             }

File: zap/src/main/java/org/zaproxy/zap/view/popup/PopupMenuItemContextExclude.java
Patch:
@@ -81,7 +81,6 @@ protected void reCreateSubMenu() {
         List<Context> contexts = session.getContexts();
         for (Context context : contexts) {
             ExtensionPopupMenuItem piicm = createPopupExcludeFromContextMenu(context);
-            piicm.setMenuIndex(this.getMenuIndex());
             mainPopupMenuItems.add(piicm);
             this.subMenus.add(piicm);
         }

File: zap/src/main/java/org/zaproxy/zap/view/popup/PopupMenuItemSiteNodeContextMenuFactory.java
Patch:
@@ -86,7 +86,6 @@ public boolean isButtonEnabledForSiteNode(SiteNode sn) {
         List<Context> contexts = session.getContexts();
         for (Context context : contexts) {
             ExtensionPopupMenuItem piicm = getContextMenu(context, this.parentMenu);
-            piicm.setMenuIndex(this.getMenuIndex());
             mainPopupMenuItems.add(piicm);
             this.subMenus.add(piicm);
         }

File: zap/src/main/java/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -78,6 +78,7 @@
 // ZAP: 2022/08/23 Make hrefMap an instance variable.
 // ZAP: 2022/09/21 Use format specifiers instead of concatenation when logging.
 // ZAP: 2023/01/10 Tidy up logger.
+// ZAP: 2024/01/19 Store clean node name when adding leaf node.
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -567,11 +568,9 @@ private SiteNode findAndAddLeaf(
         String leafName = SessionStructure.getLeafName(model, nodeName, msg);
         SiteNode node = findChild(parent, leafName);
         if (node == null) {
+            node = new SiteNode(this, ref.getHistoryType(), leafName, nodeName);
             if (!ref.getCustomIcons().isEmpty()) {
-                node = new SiteNode(this, ref.getHistoryType(), leafName);
                 node.setCustomIcons(ref.getCustomIcons(), ref.getClearIfManual());
-            } else {
-                node = new SiteNode(this, ref.getHistoryType(), leafName);
             }
             node.setHistoryReference(ref);
 

File: zap/src/main/java/org/zaproxy/zap/model/Context.java
Patch:
@@ -123,7 +123,7 @@ public boolean isIncluded(SiteNode sn) {
         if (sn == null) {
             return false;
         }
-        return isIncluded(sn.getHierarchicNodeName());
+        return isIncluded(sn.getHierarchicNodeName(false));
     }
 
     /*
@@ -164,7 +164,7 @@ public boolean isExcluded(SiteNode sn) {
         if (sn == null) {
             return false;
         }
-        return isExcluded(sn.getHierarchicNodeName());
+        return isExcluded(sn.getHierarchicNodeName(false));
     }
 
     public boolean isExcluded(String url) {
@@ -202,7 +202,7 @@ public boolean isInContext(SiteNode sn) {
         if (sn == null) {
             return false;
         }
-        return isInContext(sn.getHierarchicNodeName());
+        return isInContext(sn.getHierarchicNodeName(false));
     }
 
     public boolean isInContext(String url) {

File: zap/src/main/java/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -78,6 +78,7 @@
 // ZAP: 2022/08/23 Make hrefMap an instance variable.
 // ZAP: 2022/09/21 Use format specifiers instead of concatenation when logging.
 // ZAP: 2023/01/10 Tidy up logger.
+// ZAP: 2024/01/19 Store clean node name when adding leaf node.
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -567,11 +568,9 @@ private SiteNode findAndAddLeaf(
         String leafName = SessionStructure.getLeafName(model, nodeName, msg);
         SiteNode node = findChild(parent, leafName);
         if (node == null) {
+            node = new SiteNode(this, ref.getHistoryType(), leafName, nodeName);
             if (!ref.getCustomIcons().isEmpty()) {
-                node = new SiteNode(this, ref.getHistoryType(), leafName);
                 node.setCustomIcons(ref.getCustomIcons(), ref.getClearIfManual());
-            } else {
-                node = new SiteNode(this, ref.getHistoryType(), leafName);
             }
             node.setHistoryReference(ref);
 

File: zap/src/main/java/org/zaproxy/zap/model/Context.java
Patch:
@@ -123,7 +123,7 @@ public boolean isIncluded(SiteNode sn) {
         if (sn == null) {
             return false;
         }
-        return isIncluded(sn.getHierarchicNodeName());
+        return isIncluded(sn.getHierarchicNodeName(false));
     }
 
     /*
@@ -164,7 +164,7 @@ public boolean isExcluded(SiteNode sn) {
         if (sn == null) {
             return false;
         }
-        return isExcluded(sn.getHierarchicNodeName());
+        return isExcluded(sn.getHierarchicNodeName(false));
     }
 
     public boolean isExcluded(String url) {
@@ -202,7 +202,7 @@ public boolean isInContext(SiteNode sn) {
         if (sn == null) {
             return false;
         }
-        return isInContext(sn.getHierarchicNodeName());
+        return isInContext(sn.getHierarchicNodeName(false));
     }
 
     public boolean isInContext(String url) {

File: zap/src/main/java/org/parosproxy/paros/control/Control.java
Patch:
@@ -304,7 +304,7 @@ public void run() {
                                     if (openOnExit != null && Desktop.isDesktopSupported()) {
                                         try {
                                             LOGGER.info(
-                                                    "Openning file {}",
+                                                    "Opening file {}",
                                                     openOnExit.getAbsolutePath());
                                             Desktop.getDesktop().open(openOnExit);
                                         } catch (IOException e) {

File: zap/src/main/java/org/parosproxy/paros/control/Control.java
Patch:
@@ -304,7 +304,7 @@ public void run() {
                                     if (openOnExit != null && Desktop.isDesktopSupported()) {
                                         try {
                                             LOGGER.info(
-                                                    "Openning file {}",
+                                                    "Opening file {}",
                                                     openOnExit.getAbsolutePath());
                                             Desktop.getDesktop().open(openOnExit);
                                         } catch (IOException e) {

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptUI.java
Patch:
@@ -156,7 +156,7 @@ default void displayScript(ScriptWrapper script, boolean allowFocus) {
      * Selects a node with focus with/without expanding.
      *
      * @param node The node to be selected.
-     * @expand {@code true} to expand the node, {@code false} otherwise.
+     * @param expand {@code true} to expand the node, {@code false} otherwise.
      */
     void selectNode(ScriptNode node, boolean expand);
 

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptUI.java
Patch:
@@ -156,7 +156,7 @@ default void displayScript(ScriptWrapper script, boolean allowFocus) {
      * Selects a node with focus with/without expanding.
      *
      * @param node The node to be selected.
-     * @expand {@code true} to expand the node, {@code false} otherwise.
+     * @param expand {@code true} to expand the node, {@code false} otherwise.
      */
     void selectNode(ScriptNode node, boolean expand);
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -279,7 +279,6 @@ public void actionPerformed(ActionEvent e) {
                                 policy = extension.getPolicyManager().getPolicy(policyName);
                                 if (policy != null) {
                                     setScanPolicy(policy);
-                                    fireScanPolicyChanged(policy);
                                 }
                             } catch (ConfigurationException e1) {
                                 LOGGER.error(e1.getMessage(), e1);
@@ -511,11 +510,12 @@ public void setScanPolicy(ScanPolicy scanPolicy) {
             throw new InvalidParameterException(
                     "Cannot change policy if the panel has not been defined as switchable");
         }
-        this.policy = scanPolicy;
         this.getPolicySelector().setSelectedItem(scanPolicy.getName());
+        this.policy = scanPolicy;
         this.setThreshold(scanPolicy.getDefaultThreshold());
         this.setStrength(scanPolicy.getDefaultStrength());
         this.getAllCategoryTableModel().setPluginFactory(scanPolicy.getPluginFactory());
+        fireScanPolicyChanged(policy);
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -279,7 +279,6 @@ public void actionPerformed(ActionEvent e) {
                                 policy = extension.getPolicyManager().getPolicy(policyName);
                                 if (policy != null) {
                                     setScanPolicy(policy);
-                                    fireScanPolicyChanged(policy);
                                 }
                             } catch (ConfigurationException e1) {
                                 LOGGER.error(e1.getMessage(), e1);
@@ -511,11 +510,12 @@ public void setScanPolicy(ScanPolicy scanPolicy) {
             throw new InvalidParameterException(
                     "Cannot change policy if the panel has not been defined as switchable");
         }
-        this.policy = scanPolicy;
         this.getPolicySelector().setSelectedItem(scanPolicy.getName());
+        this.policy = scanPolicy;
         this.setThreshold(scanPolicy.getDefaultThreshold());
         this.setStrength(scanPolicy.getDefaultStrength());
         this.getAllCategoryTableModel().setPluginFactory(scanPolicy.getPluginFactory());
+        fireScanPolicyChanged(policy);
     }
 
     @Override

File: zap/src/main/java/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -277,7 +277,7 @@ public int getExtensionCount() {
      *
      * @param proxyServer the proxy server to add, must not be null.
      * @since 2.8.0
-     * @see #removeProxyServer(ProxyServer)
+     * @see #removeProxyServer(org.parosproxy.paros.core.proxy.ProxyServer)
      */
     @SuppressWarnings("deprecation")
     public void addProxyServer(org.parosproxy.paros.core.proxy.ProxyServer proxyServer) {
@@ -320,7 +320,7 @@ private void hookProxies(ExtensionHook extHook) {
      *
      * @param proxyServer the proxy server to remove, must not be null.
      * @since 2.8.0
-     * @see #addProxyServer(ProxyServer)
+     * @see #addProxyServer(org.parosproxy.paros.core.proxy.ProxyServer)
      */
     @SuppressWarnings("deprecation")
     public void removeProxyServer(org.parosproxy.paros.core.proxy.ProxyServer proxyServer) {

File: zap/src/main/java/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -966,7 +966,7 @@ public boolean isUseSocksProxy() {
      *     false} otherwise.
      * @since 2.10.0
      * @see #isUseSocksProxy()
-     * @see #setSocksProxy(SocksProxy)
+     * @see #setSocksProxy(org.zaproxy.zap.network.SocksProxy)
      */
     public void setUseSocksProxy(boolean useSocksProxy) {
         if (this.useSocksProxy == useSocksProxy) {
@@ -986,7 +986,7 @@ public void setUseSocksProxy(boolean useSocksProxy) {
      * @return the SOCKS proxy, never {@code null}.
      * @since 2.10.0
      * @see #isUseSocksProxy()
-     * @see #setSocksProxy(SocksProxy)
+     * @see #setSocksProxy(org.zaproxy.zap.network.SocksProxy)
      */
     @ZapApiIgnore
     public org.zaproxy.zap.network.SocksProxy getSocksProxy() {

File: zap/src/main/java/org/zaproxy/zap/ZapGetMethod.java
Patch:
@@ -99,7 +99,7 @@ protected void addContentLengthRequestHeader(
     /**
      * Allow response code 101, that is Switching Protocols.
      *
-     * @see GetMethod#readResponse(HttpState, HttpConnection)
+     * @see GetMethod#readResponse(HttpState, org.apache.commons.httpclient.HttpConnection)
      */
     @Override
     protected void readResponse(HttpState state, org.apache.commons.httpclient.HttpConnection conn)

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanParam.java
Patch:
@@ -243,7 +243,7 @@ public void setScanFuzzerMessages(boolean scanFuzzerMessages) {
      *     types should be disabled (removed)
      * @since 2.8.0
      * @see #isScanFuzzerMessages()
-     * @see #setScanFuzzerMessages()
+     * @see #setScanFuzzerMessages(boolean)
      */
     private void setFuzzerOptin(boolean shouldOptin) {
         if (shouldOptin) {

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderScan.java
Patch:
@@ -88,7 +88,7 @@ private static enum State {
      *
      * <p>The counter is incremented when a new URI is found.
      *
-     * @see #foundURI(String, String, FetchStatus)
+     * @see #foundURI(String, String, org.zaproxy.zap.spider.filters.FetchFilter.FetchStatus)
      * @see #getNumberOfURIsFound()
      */
     private AtomicInteger numberOfURIsFound;
@@ -117,7 +117,7 @@ private static enum State {
      * <p>Lazily initialised.
      *
      * @see #getMessagesTableModel()
-     * @see #addMessageToMessagesTableModel(SpiderTaskResult)
+     * @see #addMessageToMessagesTableModel(org.zaproxy.zap.spider.SpiderTaskResult)
      */
     private SpiderMessagesTableModel messagesTableModel;
 

File: zap/src/main/java/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -547,7 +547,7 @@ public void start() {
      * being accessed.
      *
      * @see #seedList
-     * @see FetchFilter
+     * @see org.zaproxy.zap.spider.filters.FetchFilter
      * @see SpiderController#getFetchFilters()
      * @since 2.5.0
      */

File: zap/src/main/java/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -277,7 +277,7 @@ public int getExtensionCount() {
      *
      * @param proxyServer the proxy server to add, must not be null.
      * @since 2.8.0
-     * @see #removeProxyServer(ProxyServer)
+     * @see #removeProxyServer(org.parosproxy.paros.core.proxy.ProxyServer)
      */
     @SuppressWarnings("deprecation")
     public void addProxyServer(org.parosproxy.paros.core.proxy.ProxyServer proxyServer) {
@@ -320,7 +320,7 @@ private void hookProxies(ExtensionHook extHook) {
      *
      * @param proxyServer the proxy server to remove, must not be null.
      * @since 2.8.0
-     * @see #addProxyServer(ProxyServer)
+     * @see #addProxyServer(org.parosproxy.paros.core.proxy.ProxyServer)
      */
     @SuppressWarnings("deprecation")
     public void removeProxyServer(org.parosproxy.paros.core.proxy.ProxyServer proxyServer) {

File: zap/src/main/java/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -966,7 +966,7 @@ public boolean isUseSocksProxy() {
      *     false} otherwise.
      * @since 2.10.0
      * @see #isUseSocksProxy()
-     * @see #setSocksProxy(SocksProxy)
+     * @see #setSocksProxy(org.zaproxy.zap.network.SocksProxy)
      */
     public void setUseSocksProxy(boolean useSocksProxy) {
         if (this.useSocksProxy == useSocksProxy) {
@@ -986,7 +986,7 @@ public void setUseSocksProxy(boolean useSocksProxy) {
      * @return the SOCKS proxy, never {@code null}.
      * @since 2.10.0
      * @see #isUseSocksProxy()
-     * @see #setSocksProxy(SocksProxy)
+     * @see #setSocksProxy(org.zaproxy.zap.network.SocksProxy)
      */
     @ZapApiIgnore
     public org.zaproxy.zap.network.SocksProxy getSocksProxy() {

File: zap/src/main/java/org/zaproxy/zap/ZapGetMethod.java
Patch:
@@ -99,7 +99,7 @@ protected void addContentLengthRequestHeader(
     /**
      * Allow response code 101, that is Switching Protocols.
      *
-     * @see GetMethod#readResponse(HttpState, HttpConnection)
+     * @see GetMethod#readResponse(HttpState, org.apache.commons.httpclient.HttpConnection)
      */
     @Override
     protected void readResponse(HttpState state, org.apache.commons.httpclient.HttpConnection conn)

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanParam.java
Patch:
@@ -243,7 +243,7 @@ public void setScanFuzzerMessages(boolean scanFuzzerMessages) {
      *     types should be disabled (removed)
      * @since 2.8.0
      * @see #isScanFuzzerMessages()
-     * @see #setScanFuzzerMessages()
+     * @see #setScanFuzzerMessages(boolean)
      */
     private void setFuzzerOptin(boolean shouldOptin) {
         if (shouldOptin) {

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderScan.java
Patch:
@@ -88,7 +88,7 @@ private static enum State {
      *
      * <p>The counter is incremented when a new URI is found.
      *
-     * @see #foundURI(String, String, FetchStatus)
+     * @see #foundURI(String, String, org.zaproxy.zap.spider.filters.FetchFilter.FetchStatus)
      * @see #getNumberOfURIsFound()
      */
     private AtomicInteger numberOfURIsFound;
@@ -117,7 +117,7 @@ private static enum State {
      * <p>Lazily initialised.
      *
      * @see #getMessagesTableModel()
-     * @see #addMessageToMessagesTableModel(SpiderTaskResult)
+     * @see #addMessageToMessagesTableModel(org.zaproxy.zap.spider.SpiderTaskResult)
      */
     private SpiderMessagesTableModel messagesTableModel;
 

File: zap/src/main/java/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -547,7 +547,7 @@ public void start() {
      * being accessed.
      *
      * @see #seedList
-     * @see FetchFilter
+     * @see org.zaproxy.zap.spider.filters.FetchFilter
      * @see SpiderController#getFetchFilters()
      * @since 2.5.0
      */

File: zap/src/test/java/org/zaproxy/zap/control/AddOnTestUtils.java
Patch:
@@ -152,6 +152,7 @@ protected Path createAddOnFile(
             Consumer<StringBuilder> manifestConsumer,
             Consumer<ZipOutputStream> addOnConsumer) {
         try {
+            Files.createDirectories(dir);
             Path file = dir.resolve(fileName);
             try (ZipOutputStream zos = new ZipOutputStream(Files.newOutputStream(file))) {
                 ZipEntry manifest = new ZipEntry(AddOn.MANIFEST_FILE_NAME);

File: zap/src/main/java/org/parosproxy/paros/Constant.java
Patch:
@@ -758,7 +758,7 @@ private Locale loadLocale(ControlOverrides overrides) {
             }
 
             String[] langArray = lang.split("_");
-            return new Locale(langArray[0], langArray[1]);
+            return new Locale.Builder().setLanguage(langArray[0]).setRegion(langArray[1]).build();
 
         } catch (Exception e) {
             System.out.println("Failed to load locale " + e);
@@ -1212,7 +1212,8 @@ private static void copyPropertyIfSet(XMLConfiguration from, XMLConfiguration to
 
     public static void setLocale(String loc) {
         String[] langArray = loc.split("_");
-        Locale locale = new Locale(langArray[0], langArray[1]);
+        Locale locale =
+                new Locale.Builder().setLanguage(langArray[0]).setRegion(langArray[1]).build();
 
         Locale.setDefault(locale);
         if (messages == null) {

File: zap/src/main/java/org/parosproxy/paros/core/proxy/ProxyServer.java
Patch:
@@ -501,7 +501,7 @@ private Comparator<ArrangeableProxyListener> getListenersComparator() {
     private synchronized void createListenersComparator() {
         if (listenersComparator == null) {
             listenersComparator =
-                    new Comparator<ArrangeableProxyListener>() {
+                    new Comparator<>() {
                         @Override
                         public int compare(
                                 ArrangeableProxyListener o1, ArrangeableProxyListener o2) {

File: zap/src/main/java/org/parosproxy/paros/core/scanner/PluginFactory.java
Patch:
@@ -212,7 +212,7 @@ public static void unloadedPlugin(AbstractPlugin plugin) {
     // now order the list by the highest risk thrown, in descending order (to execute the more
     // critical checks first)
     private static final Comparator<AbstractPlugin> riskComparator =
-            new Comparator<AbstractPlugin>() {
+            new Comparator<>() {
                 @Override
                 public int compare(AbstractPlugin e1, AbstractPlugin e2) {
                     // Run stable plugins first

File: zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java
Patch:
@@ -239,7 +239,7 @@ public void process(Alert alert) {
         } else if (VIEW_ALERTS_SUMMARY.equals(name)) {
             final int[] riskSummary = {0, 0, 0, 0};
             Processor<Alert> counter =
-                    new Processor<Alert>() {
+                    new Processor<>() {
 
                         @Override
                         public void process(Alert alert) {
@@ -258,7 +258,7 @@ public void process(Alert alert) {
                 alertData.put(Alert.MSG_RISK[i], riskSummary[i]);
             }
             result =
-                    new ApiResponseSet<Object>("risk", alertData) {
+                    new ApiResponseSet<>("risk", alertData) {
 
                         @Override
                         public JSON toJSON() {

File: zap/src/main/java/org/zaproxy/zap/extension/api/ApiImplementor.java
Patch:
@@ -46,7 +46,7 @@ public abstract class ApiImplementor {
 
     static {
         METHOD_NAME_COMPARATOR =
-                new Comparator<Method>() {
+                new Comparator<>() {
 
                     @Override
                     public int compare(Method method, Method otherMethod) {

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -1736,7 +1736,7 @@ public void addOnUninstalled(AddOn addOn, boolean update, boolean uninstalled) {
                 });
 
         SwingWorker<Void, UninstallationProgressEvent> a =
-                new SwingWorker<Void, UninstallationProgressEvent>() {
+                new SwingWorker<>() {
 
                     @Override
                     protected void process(List<UninstallationProgressEvent> events) {

File: zap/src/main/java/org/zaproxy/zap/extension/callback/ui/CallbackTableModel.java
Patch:
@@ -52,7 +52,7 @@ public CallbackTableModel() {
     }
 
     private static CustomColumn<CallbackRequest> createHandlerColumn() {
-        return new CustomColumn<CallbackRequest>(
+        return new CustomColumn<>(
                 String.class, Constant.messages.getString("callback.panel.table.column.handler")) {
 
             @Override
@@ -63,7 +63,7 @@ public Object getValue(CallbackRequest model) {
     }
 
     private static CustomColumn<CallbackRequest> createRefererColumn() {
-        return new CustomColumn<CallbackRequest>(
+        return new CustomColumn<>(
                 String.class, Constant.messages.getString("callback.panel.table.column.referer")) {
 
             @Override

File: zap/src/main/java/org/zaproxy/zap/extension/callback/ui/DefaultCustomColumnHistoryReferencesTableModel.java
Patch:
@@ -77,7 +77,7 @@ private CustomColumn<T> getCustomColumnIfExists(
     }
 
     private CustomColumn<T> emptyColumn() {
-        return new CustomColumn<T>(String.class, "") {
+        return new CustomColumn<>(String.class, "") {
 
             @Override
             public Object getValue(T model) {

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -451,7 +451,7 @@ public ScriptVarsResponse(String name, Map<String, String> vars) {
             super(name);
 
             defaultResponse =
-                    new ApiResponseSet<String>(name, vars) {
+                    new ApiResponseSet<>(name, vars) {
 
                         @Override
                         public JSON toJSON() {

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantCookieUnitTest.java
Patch:
@@ -432,7 +432,7 @@ private static NameValuePair cookie(String name, String value, int position) {
     }
 
     private static Matcher<HttpMessage> containsCookieHeader(final String cookies) {
-        return new BaseMatcher<HttpMessage>() {
+        return new BaseMatcher<>() {
 
             @Override
             public boolean matches(Object actualValue) {
@@ -467,7 +467,7 @@ public void describeMismatch(Object item, Description description) {
     }
 
     private static Matcher<HttpMessage> hasNoCookieHeaders() {
-        return new BaseMatcher<HttpMessage>() {
+        return new BaseMatcher<>() {
 
             @Override
             public boolean matches(Object actualValue) {

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantHeaderUnitTest.java
Patch:
@@ -293,7 +293,7 @@ private static NameValuePair header(String name, String value, int position) {
     }
 
     private static Matcher<HttpMessage> containsHeader(final String name, final String value) {
-        return new BaseMatcher<HttpMessage>() {
+        return new BaseMatcher<>() {
 
             @Override
             public boolean matches(Object actualValue) {

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantURLPathUnitTest.java
Patch:
@@ -188,7 +188,7 @@ private static NameValuePair parameter(String value, int position) {
     }
 
     private static Matcher<HttpMessage> containsPath(String path) {
-        return new BaseMatcher<HttpMessage>() {
+        return new BaseMatcher<>() {
 
             @Override
             public boolean matches(Object actualValue) {

File: zap/src/test/java/org/zaproxy/zap/extension/ascan/filters/impl/GenericFilterUtilityTest.java
Patch:
@@ -41,7 +41,7 @@ class GenericFilterUtilityTest extends WithConfigsTest {
     @BeforeEach
     void init() {
         abstractGenericScanFilter =
-                new AbstractGenericScanFilter<String, String>() {
+                new AbstractGenericScanFilter<>() {
 
                     @Override
                     public FilterResult isFiltered(StructuralNode node) {

File: zap/src/test/java/org/zaproxy/zap/model/VulnerabilitiesLoaderUnitTest.java
Patch:
@@ -146,7 +146,7 @@ void shouldLoadFileWithSameLanguageCountryWhenAvailable() {
     @Test
     void shouldLoadDefaultFileEvenIfFileWithSameLanguageButDifferentCountryIsAvailable() {
         // Given
-        Locale.setDefault(new Locale("nl", "XX"));
+        Locale.setDefault(new Locale.Builder().setLanguage("nl").setRegion("XX").build());
         Locale locale = new Locale.Builder().setLanguage("nl").setRegion("XX").build();
         loader = new VulnerabilitiesLoader(DIRECTORY, FILE_NAME, FILE_EXTENSION);
         // When

File: zap/src/test/java/org/zaproxy/zap/network/HttpBodyTestUtils.java
Patch:
@@ -82,7 +82,7 @@ protected static byte[] concatenate(byte[] array, byte[] array2) {
     }
 
     protected static Matcher<byte[]> allZeroBytes() {
-        return new BaseMatcher<byte[]>() {
+        return new BaseMatcher<>() {
 
             @Override
             public boolean matches(Object actualValue) {

File: buildSrc/src/main/java/org/zaproxy/zap/tasks/GradleBuildWithGitRepos.java
Patch:
@@ -48,6 +48,7 @@
 import org.gradle.api.provider.Property;
 import org.gradle.api.tasks.Console;
 import org.gradle.api.tasks.Input;
+import org.gradle.api.tasks.InputDirectory;
 import org.gradle.api.tasks.InputFile;
 import org.gradle.api.tasks.Nested;
 import org.gradle.api.tasks.TaskAction;
@@ -80,7 +81,7 @@ public RegularFileProperty getRepositoriesDataFile() {
         return repositoriesDataFile;
     }
 
-    @Input
+    @InputDirectory
     public DirectoryProperty getRepositoriesDirectory() {
         return repositoriesDirectory;
     }

File: buildSrc/src/main/java/org/zaproxy/zap/tasks/GradleBuildWithGitRepos.java
Patch:
@@ -48,6 +48,7 @@
 import org.gradle.api.provider.Property;
 import org.gradle.api.tasks.Console;
 import org.gradle.api.tasks.Input;
+import org.gradle.api.tasks.InputDirectory;
 import org.gradle.api.tasks.InputFile;
 import org.gradle.api.tasks.Nested;
 import org.gradle.api.tasks.TaskAction;
@@ -80,7 +81,7 @@ public RegularFileProperty getRepositoriesDataFile() {
         return repositoriesDataFile;
     }
 
-    @Input
+    @InputDirectory
     public DirectoryProperty getRepositoriesDirectory() {
         return repositoriesDirectory;
     }

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScannerOptionsPanel.java
Patch:
@@ -23,6 +23,7 @@
 import javax.swing.JButton;
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.I18N;
@@ -60,8 +61,7 @@ public PassiveScannerOptionsPanel(ExtensionPassiveScan extPassiveScan, I18N mess
                 new JCheckBox(messages.getString("pscan.options.main.label.scanOnlyInScope"));
         scanFuzzerMessagesCheckBox =
                 new JCheckBox(messages.getString("pscan.options.main.label.scanFuzzerMessages"));
-        passiveScanThreads =
-                new ZapNumberSpinner(1, PassiveScanParam.PASSIVE_SCAN_DEFAULT_THREADS, 50);
+        passiveScanThreads = new ZapNumberSpinner(1, Constant.getDefaultThreadCount(), 50);
         maxAlertsPerRule = new ZapNumberSpinner();
         maxBodySizeInBytes = new ZapNumberSpinner();
         clearQueue = new JButton(messages.getString("pscan.options.main.label.clearQueue"));

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScannerOptionsPanel.java
Patch:
@@ -23,6 +23,7 @@
 import javax.swing.JButton;
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.I18N;
@@ -60,8 +61,7 @@ public PassiveScannerOptionsPanel(ExtensionPassiveScan extPassiveScan, I18N mess
                 new JCheckBox(messages.getString("pscan.options.main.label.scanOnlyInScope"));
         scanFuzzerMessagesCheckBox =
                 new JCheckBox(messages.getString("pscan.options.main.label.scanFuzzerMessages"));
-        passiveScanThreads =
-                new ZapNumberSpinner(1, PassiveScanParam.PASSIVE_SCAN_DEFAULT_THREADS, 50);
+        passiveScanThreads = new ZapNumberSpinner(1, Constant.getDefaultThreadCount(), 50);
         maxAlertsPerRule = new ZapNumberSpinner();
         maxBodySizeInBytes = new ZapNumberSpinner();
         clearQueue = new JButton(messages.getString("pscan.options.main.label.clearQueue"));

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -1629,7 +1629,7 @@ boolean uninstallAddOns(Window caller, Set<AddOn> addOns, boolean updates) {
 
         final Set<AddOn> failedUninstallations = new HashSet<>();
         for (AddOn addOn : addOns) {
-            if (!uninstall(addOn, false, null)) {
+            if (!uninstall(addOn, updates, null)) {
                 failedUninstallations.add(addOn);
             }
         }

File: buildSrc/src/main/java/org/zaproxy/zap/tasks/GradleBuildWithGitRepos.java
Patch:
@@ -51,7 +51,7 @@
 import org.gradle.api.tasks.InputFile;
 import org.gradle.api.tasks.Nested;
 import org.gradle.api.tasks.TaskAction;
-import org.zaproxy.zap.internal.RepoData;
+import org.zaproxy.zap.tasks.internal.RepoData;
 
 /** A task that clones Git repositories and runs Gradle tasks contained in them. */
 public class GradleBuildWithGitRepos extends DefaultTask {

File: buildSrc/src/main/java/org/zaproxy/zap/tasks/GradleBuildWithGitRepos.java
Patch:
@@ -51,7 +51,7 @@
 import org.gradle.api.tasks.InputFile;
 import org.gradle.api.tasks.Nested;
 import org.gradle.api.tasks.TaskAction;
-import org.zaproxy.zap.internal.RepoData;
+import org.zaproxy.zap.tasks.internal.RepoData;
 
 /** A task that clones Git repositories and runs Gradle tasks contained in them. */
 public class GradleBuildWithGitRepos extends DefaultTask {

File: zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -734,7 +734,7 @@ protected boolean isPageAuthIssue(HttpMessage msg) {
      * @param msg the message that will be checked
      * @return {@code true} if the message matches, {@code false} otherwise
      * @since 2.10.0
-     * @see {@code Analyser#isFileExist(HttpMessage)}
+     * @see Analyser#isFileExist(HttpMessage)
      */
     public boolean isSuccess(HttpMessage msg) {
         if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)
@@ -756,7 +756,7 @@ public boolean isSuccess(HttpMessage msg) {
      * @param msg the message that will be checked
      * @return {@code true} if the message matches, {@code false} otherwise
      * @since 2.10.0
-     * @see {@code Analyser#isFileExist(HttpMessage)}
+     * @see Analyser#isFileExist(HttpMessage)
      */
     public boolean isClientError(HttpMessage msg) {
         if (isCustomPage(msg, CustomPage.Type.OK_200)

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java
Patch:
@@ -89,7 +89,7 @@ default String getLeafName(String nodeName, HttpMessage msg) {
      * <p>By default the elements are returned for the following URL are:
      *
      * <ul>
-     *   <li><i>http://example.org/path/to/element?aa=bb&cc==dd</i> : ["path", "to", "element"]
+     *   <li><i>http://example.org/path/to/element?aa=bb&amp;cc==dd</i> : ["path", "to", "element"]
      *   <li><i>http://example.org/path/to/element</i> : ["path", "to", "element"]
      *   <li><i>http://example.org/path/to/</i> : ["path", "to"]
      *   <li><i>http://example.org/path/to</i> : ["path", "to"]

File: zap/src/main/java/org/parosproxy/paros/extension/option/SecurityProtocolsPanel.java
Patch:
@@ -33,7 +33,6 @@
 /**
  * A {@code JPanel} for selecting security protocols provided by {@code SSLConnector}.
  *
- * @see SSLConnector
  * @deprecated (2.12.0) No longer in use.
  */
 @Deprecated

File: zap/src/main/java/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -68,7 +68,6 @@
 // ZAP: 2022/09/21 Use format specifiers instead of concatenation when logging.
 package org.parosproxy.paros.model;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -450,7 +449,7 @@ public int getHistoryId() {
      *
      * @return the http message
      * @throws HttpMalformedHeaderException the http malformed header exception
-     * @throws SQLException the sQL exception
+     * @throws DatabaseException if an error occurred while reading the HTTP message.
      */
     public HttpMessage getHttpMessage() throws HttpMalformedHeaderException, DatabaseException {
         if (httpMessage != null) {

File: zap/src/main/java/org/parosproxy/paros/model/Session.java
Patch:
@@ -1721,13 +1721,13 @@ public List<NameValuePair> getFormParameters(URI uri, String formData) throws UR
         return this.getFormParamParser(uri.toString()).parseParameters(formData);
     }
 
-    /** @deprecated use {@link SessionStructure#getTeeePath(Model, URI)} */
+    /** @deprecated use {@link SessionStructure#getTreePath(Model, URI)} */
     @Deprecated
     public List<String> getTreePath(URI uri) throws URIException {
         return SessionStructure.getTreePath(Model.getSingleton(), uri);
     }
 
-    /** @deprecated use {@link SessionStructure#getTeeePath(Model, HttpMessage)} */
+    /** @deprecated use {@link SessionStructure#getTreePath(Model, HttpMessage)} */
     @Deprecated
     public List<String> getTreePath(HttpMessage msg) throws URIException {
         return SessionStructure.getTreePath(Model.getSingleton(), msg);

File: zap/src/main/java/org/parosproxy/paros/network/GenericMethod.java
Patch:
@@ -71,9 +71,9 @@ public GenericMethod(String method, String uri) {
 
 
     /**
-     * Returns <tt>"Generic"</tt>.
+     * Returns {@code Generic}.
      *
-     * @return <tt>"Generic"</tt>
+     * @return {@code Generic}
      *
      */
     @Override
@@ -83,7 +83,7 @@ public String getName() {
 
 
     /**
-     * Returns <tt>true</tt> if there is a request body to be sent.
+     * Returns {@code true} if there is a request body to be sent.
      * 
      * <P>This method must be overwritten by sub-classes that implement
      * alternative request content input methods

File: zap/src/main/java/org/parosproxy/paros/network/SSLConnector.java
Patch:
@@ -606,9 +606,6 @@ public Socket createSocket(String host, int port) throws IOException, UnknownHos
                 "Method no longer supported since it's no longer required/called by Commons HttpClient library (version >= 3.0).");
     }
 
-    /**
-     * @see SecureProtocolSocketFactory#createSocket(java.net.Socket,java.lang.String,int,boolean)
-     */
     @Override
     public Socket createSocket(Socket socket, String host, int port, boolean autoClose)
             throws IOException, UnknownHostException {

File: zap/src/main/java/org/zaproxy/zap/ZapHttpConnection.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.commons.httpclient.HostConfiguration;
 
 /**
- * Custom {@link HttpConnection} that exposes its socket and avoids closing.
+ * Custom {@code HttpConnection} that exposes its socket and avoids closing.
  *
  * @deprecated (2.12.0) Implementation details, do not use.
  */

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/filters/GenericFilterUtility.java
Patch:
@@ -38,7 +38,7 @@ public class GenericFilterUtility {
      * @param incList Include Criteria List
      * @param excList Exclude Criteria List
      * @param constructor of the ScanFilter to be populated
-     * @return List of <R> type
+     * @return List of {@code <R>} type
      */
     public static <T, V, R extends AbstractGenericScanFilter<T, V>> List<R> createScanFilter(
             List<T> incList, List<T> excList, Supplier<R> constructor) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/filters/ScanFilter.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * ScanFilter is called for each message to be scanned to check if it's filtered or not. New Filters
- * are added to the scan through {@link ExtensionActiveScan#startScan(String, Target, User,
+ * are added to the scan through {@code ExtensionActiveScan#startScan(String, Target, User,
  * Object[]) }.
  *
  * @author KSASAN preetkaran20@gmail.com

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/lexers/WwwFormTokenMaker.java
Patch:
@@ -368,7 +368,7 @@ private boolean zzRefill() {
      * Resets the scanner to read from a new input stream. Does not close the old reader.
      *
      * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
-     * buffer is discarded and lost). Lexical state is set to <tt>YY_INITIAL</tt>.
+     * buffer is discarded and lost). Lexical state is set to {@code YY_INITIAL}.
      *
      * @param reader the new input stream
      */

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java
Patch:
@@ -83,7 +83,7 @@ private static Context getContext(HttpMessage message) {
     }
 
     /**
-     * Returns an unmodifiable list of {@Code User}s for the {@code HttpMessage} being passively
+     * Returns an unmodifiable list of {@code User}s for the {@code HttpMessage} being passively
      * scanned. The list returned is based on the first {@code Context} matched.
      *
      * @return A list of users if some are available, an empty list otherwise.

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanParam.java
Patch:
@@ -295,7 +295,7 @@ public int getPassiveScanThreads() {
     /**
      * Set the number of passive scan threads
      *
-     * @param passiveScanThreads the number of passive scan threads, must be > 0
+     * @param passiveScanThreads the number of passive scan threads, must be &gt; 0
      * @since 2.12.0
      */
     public void setPassiveScanThreads(int passiveScanThreads) {

File: zap/src/main/java/org/zaproxy/zap/network/ZapDeleteMethod.java
Patch:
@@ -43,9 +43,9 @@ public ZapDeleteMethod(String uri) {
     }
 
     /**
-     * Returns <tt>"DELETE"</tt>.
+     * Returns {@code DELETE}.
      *
-     * @return <tt>"DELETE"</tt>
+     * @return {@code DELETE}
      * @since 2.0
      */
     @Override

File: zap/src/main/java/org/zaproxy/zap/network/ZapHeadMethod.java
Patch:
@@ -55,11 +55,11 @@ public String getName() {
     }
 
     /**
-     * Overrides {@link HttpMethodBase} method to <i>not</i> read a response body, despite the
-     * presence of a <tt>Content-Length</tt> or <tt>Transfer-Encoding</tt> header.
+     * Overrides {@code HttpMethodBase} method to <i>not</i> read a response body, despite the
+     * presence of a {@code Content-Length} or {@code Transfer-Encoding} header.
      *
      * @param state the {@link HttpState state} information associated with this method
-     * @param conn the {@link HttpConnection connection} used to execute this HTTP method
+     * @param conn the {@code HttpConnection connection} used to execute this HTTP method
      * @throws IOException if an I/O (transport) error occurs. Some transport exceptions can be
      *     recovered from.
      * @see #readResponse

File: zap/src/main/java/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -143,7 +143,7 @@ public class Spider {
      * @param scanContext if a scan context is set, only URIs within the context are fetched and
      *     processed
      * @since 2.6.0
-     * @deprecated (2.12.0) Use {@link #Spider(String, ExtensionSpider, SpiderParam, Model,
+     * @deprecated (2.12.0) Use {@code #Spider(String, ExtensionSpider, SpiderParam, Model,
      *     Context)} instead.
      */
     @Deprecated
@@ -803,7 +803,7 @@ protected synchronized void notifyListenersSpiderProgress(
      *
      * @param uri the uri
      * @param method the method used for fetching the resource
-     * @param status the {@link FetchStatus} stating if this uri will be processed, and, if not,
+     * @param status the {@code FetchStatus} stating if this uri will be processed, and, if not,
      *     stating the reason of the filtering
      */
     protected synchronized void notifyListenersFoundURI(

File: zap/src/main/java/org/zaproxy/zap/spider/SpiderListener.java
Patch:
@@ -45,7 +45,7 @@ public interface SpiderListener {
      *
      * @param uri the uri
      * @param method the method used for accessing the uri
-     * @param status the {@link FetchStatus} stating if this uri will be processed, and, if not,
+     * @param status the {@code FetchStatus} stating if this uri will be processed, and, if not,
      *     stating the reason of the filtering
      */
     void foundURI(

File: zap/src/main/java/org/zaproxy/zap/view/popup/PopupMenuHttpMessageContainer.java
Patch:
@@ -234,7 +234,7 @@ protected final Invoker getInvoker() {
      * be disabled if in {@code Mode.Safe} or if in {@code Mode.Protected} and not all the selected
      * messages are in scope.
      *
-     * <h3>Notifying and processing child menus</h3>
+     * <p>Notifying and processing child menus
      *
      * <p>When the method {@code isProcessExtensionPopupChildren()} returns true, the method {@code
      * isEnableForComponent(Component)} is called on all child {@code ExtensionPopupMenuComponent}s.

File: zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -734,7 +734,7 @@ protected boolean isPageAuthIssue(HttpMessage msg) {
      * @param msg the message that will be checked
      * @return {@code true} if the message matches, {@code false} otherwise
      * @since 2.10.0
-     * @see {@code Analyser#isFileExist(HttpMessage)}
+     * @see Analyser#isFileExist(HttpMessage)
      */
     public boolean isSuccess(HttpMessage msg) {
         if (isCustomPage(msg, CustomPage.Type.NOTFOUND_404)
@@ -756,7 +756,7 @@ public boolean isSuccess(HttpMessage msg) {
      * @param msg the message that will be checked
      * @return {@code true} if the message matches, {@code false} otherwise
      * @since 2.10.0
-     * @see {@code Analyser#isFileExist(HttpMessage)}
+     * @see Analyser#isFileExist(HttpMessage)
      */
     public boolean isClientError(HttpMessage msg) {
         if (isCustomPage(msg, CustomPage.Type.OK_200)

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Variant.java
Patch:
@@ -89,7 +89,7 @@ default String getLeafName(String nodeName, HttpMessage msg) {
      * <p>By default the elements are returned for the following URL are:
      *
      * <ul>
-     *   <li><i>http://example.org/path/to/element?aa=bb&cc==dd</i> : ["path", "to", "element"]
+     *   <li><i>http://example.org/path/to/element?aa=bb&amp;cc==dd</i> : ["path", "to", "element"]
      *   <li><i>http://example.org/path/to/element</i> : ["path", "to", "element"]
      *   <li><i>http://example.org/path/to/</i> : ["path", "to"]
      *   <li><i>http://example.org/path/to</i> : ["path", "to"]

File: zap/src/main/java/org/parosproxy/paros/extension/option/SecurityProtocolsPanel.java
Patch:
@@ -33,7 +33,6 @@
 /**
  * A {@code JPanel} for selecting security protocols provided by {@code SSLConnector}.
  *
- * @see SSLConnector
  * @deprecated (2.12.0) No longer in use.
  */
 @Deprecated

File: zap/src/main/java/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -68,7 +68,6 @@
 // ZAP: 2022/09/21 Use format specifiers instead of concatenation when logging.
 package org.parosproxy.paros.model;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -450,7 +449,7 @@ public int getHistoryId() {
      *
      * @return the http message
      * @throws HttpMalformedHeaderException the http malformed header exception
-     * @throws SQLException the sQL exception
+     * @throws DatabaseException if an error occurred while reading the HTTP message.
      */
     public HttpMessage getHttpMessage() throws HttpMalformedHeaderException, DatabaseException {
         if (httpMessage != null) {

File: zap/src/main/java/org/parosproxy/paros/model/Session.java
Patch:
@@ -1721,13 +1721,13 @@ public List<NameValuePair> getFormParameters(URI uri, String formData) throws UR
         return this.getFormParamParser(uri.toString()).parseParameters(formData);
     }
 
-    /** @deprecated use {@link SessionStructure#getTeeePath(Model, URI)} */
+    /** @deprecated use {@link SessionStructure#getTreePath(Model, URI)} */
     @Deprecated
     public List<String> getTreePath(URI uri) throws URIException {
         return SessionStructure.getTreePath(Model.getSingleton(), uri);
     }
 
-    /** @deprecated use {@link SessionStructure#getTeeePath(Model, HttpMessage)} */
+    /** @deprecated use {@link SessionStructure#getTreePath(Model, HttpMessage)} */
     @Deprecated
     public List<String> getTreePath(HttpMessage msg) throws URIException {
         return SessionStructure.getTreePath(Model.getSingleton(), msg);

File: zap/src/main/java/org/parosproxy/paros/network/GenericMethod.java
Patch:
@@ -71,9 +71,9 @@ public GenericMethod(String method, String uri) {
 
 
     /**
-     * Returns <tt>"Generic"</tt>.
+     * Returns {@code Generic}.
      *
-     * @return <tt>"Generic"</tt>
+     * @return {@code Generic}
      *
      */
     @Override
@@ -83,7 +83,7 @@ public String getName() {
 
 
     /**
-     * Returns <tt>true</tt> if there is a request body to be sent.
+     * Returns {@code true} if there is a request body to be sent.
      * 
      * <P>This method must be overwritten by sub-classes that implement
      * alternative request content input methods

File: zap/src/main/java/org/parosproxy/paros/network/SSLConnector.java
Patch:
@@ -606,9 +606,6 @@ public Socket createSocket(String host, int port) throws IOException, UnknownHos
                 "Method no longer supported since it's no longer required/called by Commons HttpClient library (version >= 3.0).");
     }
 
-    /**
-     * @see SecureProtocolSocketFactory#createSocket(java.net.Socket,java.lang.String,int,boolean)
-     */
     @Override
     public Socket createSocket(Socket socket, String host, int port, boolean autoClose)
             throws IOException, UnknownHostException {

File: zap/src/main/java/org/zaproxy/zap/ZapHttpConnection.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.commons.httpclient.HostConfiguration;
 
 /**
- * Custom {@link HttpConnection} that exposes its socket and avoids closing.
+ * Custom {@code HttpConnection} that exposes its socket and avoids closing.
  *
  * @deprecated (2.12.0) Implementation details, do not use.
  */

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/filters/GenericFilterUtility.java
Patch:
@@ -38,7 +38,7 @@ public class GenericFilterUtility {
      * @param incList Include Criteria List
      * @param excList Exclude Criteria List
      * @param constructor of the ScanFilter to be populated
-     * @return List of <R> type
+     * @return List of {@code <R>} type
      */
     public static <T, V, R extends AbstractGenericScanFilter<T, V>> List<R> createScanFilter(
             List<T> incList, List<T> excList, Supplier<R> constructor) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/filters/ScanFilter.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * ScanFilter is called for each message to be scanned to check if it's filtered or not. New Filters
- * are added to the scan through {@link ExtensionActiveScan#startScan(String, Target, User,
+ * are added to the scan through {@code ExtensionActiveScan#startScan(String, Target, User,
  * Object[]) }.
  *
  * @author KSASAN preetkaran20@gmail.com

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/lexers/WwwFormTokenMaker.java
Patch:
@@ -368,7 +368,7 @@ private boolean zzRefill() {
      * Resets the scanner to read from a new input stream. Does not close the old reader.
      *
      * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
-     * buffer is discarded and lost). Lexical state is set to <tt>YY_INITIAL</tt>.
+     * buffer is discarded and lost). Lexical state is set to {@code YY_INITIAL}.
      *
      * @param reader the new input stream
      */

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java
Patch:
@@ -83,7 +83,7 @@ private static Context getContext(HttpMessage message) {
     }
 
     /**
-     * Returns an unmodifiable list of {@Code User}s for the {@code HttpMessage} being passively
+     * Returns an unmodifiable list of {@code User}s for the {@code HttpMessage} being passively
      * scanned. The list returned is based on the first {@code Context} matched.
      *
      * @return A list of users if some are available, an empty list otherwise.

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanParam.java
Patch:
@@ -295,7 +295,7 @@ public int getPassiveScanThreads() {
     /**
      * Set the number of passive scan threads
      *
-     * @param passiveScanThreads the number of passive scan threads, must be > 0
+     * @param passiveScanThreads the number of passive scan threads, must be &gt; 0
      * @since 2.12.0
      */
     public void setPassiveScanThreads(int passiveScanThreads) {

File: zap/src/main/java/org/zaproxy/zap/network/ZapDeleteMethod.java
Patch:
@@ -43,9 +43,9 @@ public ZapDeleteMethod(String uri) {
     }
 
     /**
-     * Returns <tt>"DELETE"</tt>.
+     * Returns {@code DELETE}.
      *
-     * @return <tt>"DELETE"</tt>
+     * @return {@code DELETE}
      * @since 2.0
      */
     @Override

File: zap/src/main/java/org/zaproxy/zap/network/ZapHeadMethod.java
Patch:
@@ -55,11 +55,11 @@ public String getName() {
     }
 
     /**
-     * Overrides {@link HttpMethodBase} method to <i>not</i> read a response body, despite the
-     * presence of a <tt>Content-Length</tt> or <tt>Transfer-Encoding</tt> header.
+     * Overrides {@code HttpMethodBase} method to <i>not</i> read a response body, despite the
+     * presence of a {@code Content-Length} or {@code Transfer-Encoding} header.
      *
      * @param state the {@link HttpState state} information associated with this method
-     * @param conn the {@link HttpConnection connection} used to execute this HTTP method
+     * @param conn the {@code HttpConnection connection} used to execute this HTTP method
      * @throws IOException if an I/O (transport) error occurs. Some transport exceptions can be
      *     recovered from.
      * @see #readResponse

File: zap/src/main/java/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -143,7 +143,7 @@ public class Spider {
      * @param scanContext if a scan context is set, only URIs within the context are fetched and
      *     processed
      * @since 2.6.0
-     * @deprecated (2.12.0) Use {@link #Spider(String, ExtensionSpider, SpiderParam, Model,
+     * @deprecated (2.12.0) Use {@code #Spider(String, ExtensionSpider, SpiderParam, Model,
      *     Context)} instead.
      */
     @Deprecated
@@ -803,7 +803,7 @@ protected synchronized void notifyListenersSpiderProgress(
      *
      * @param uri the uri
      * @param method the method used for fetching the resource
-     * @param status the {@link FetchStatus} stating if this uri will be processed, and, if not,
+     * @param status the {@code FetchStatus} stating if this uri will be processed, and, if not,
      *     stating the reason of the filtering
      */
     protected synchronized void notifyListenersFoundURI(

File: zap/src/main/java/org/zaproxy/zap/spider/SpiderListener.java
Patch:
@@ -45,7 +45,7 @@ public interface SpiderListener {
      *
      * @param uri the uri
      * @param method the method used for accessing the uri
-     * @param status the {@link FetchStatus} stating if this uri will be processed, and, if not,
+     * @param status the {@code FetchStatus} stating if this uri will be processed, and, if not,
      *     stating the reason of the filtering
      */
     void foundURI(

File: zap/src/main/java/org/zaproxy/zap/view/popup/PopupMenuHttpMessageContainer.java
Patch:
@@ -234,7 +234,7 @@ protected final Invoker getInvoker() {
      * be disabled if in {@code Mode.Safe} or if in {@code Mode.Protected} and not all the selected
      * messages are in scope.
      *
-     * <h3>Notifying and processing child menus</h3>
+     * <p>Notifying and processing child menus
      *
      * <p>When the method {@code isProcessExtensionPopupChildren()} returns true, the method {@code
      * isEnableForComponent(Component)} is called on all child {@code ExtensionPopupMenuComponent}s.

File: zap/src/test/java/org/zaproxy/zap/control/AddOnUnitTest.java
Patch:
@@ -47,7 +47,6 @@
 import java.util.Set;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
-import org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;
 import org.junit.jupiter.api.Test;
 import org.zaproxy.zap.control.AddOn.BundleData;
 import org.zaproxy.zap.control.AddOn.HelpSetData;
@@ -973,7 +972,6 @@ void shouldSetNullFileSystemUrlToAddOnLib() throws Exception {
 
     private static ZapXmlConfiguration createZapVersionsXml() throws Exception {
         ZapXmlConfiguration zapVersionsXml = new ZapXmlConfiguration(ZAP_VERSIONS_XML);
-        zapVersionsXml.setExpressionEngine(new XPathExpressionEngine());
         return zapVersionsXml;
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/uiutils/ExtensionUiUtils.java
Patch:
@@ -59,6 +59,8 @@ public String getUIName() {
 
     @Override
     public void initView(ViewDelegate view) {
+        super.initView(view);
+
         Arrays.asList(
                         new LookAndFeelInfo("Flat Light", "com.formdev.flatlaf.FlatLightLaf"),
                         new LookAndFeelInfo("Flat Dark", "com.formdev.flatlaf.FlatDarkLaf"),

File: zap/src/main/java/org/parosproxy/paros/control/Control.java
Patch:
@@ -113,6 +113,7 @@
 import org.zaproxy.zap.control.AddOnLoader;
 import org.zaproxy.zap.control.ControlOverrides;
 import org.zaproxy.zap.control.ExtensionFactory;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 
 /** Overall control with interaction on model and view. */
 public class Control extends AbstractControl implements SessionListener {
@@ -286,7 +287,8 @@ public void exit(boolean noPrompt, final File openOnExit) {
                                 "menu.file.exit.message.activeActions", activeActions);
             }
 
-            if (message != null && view.showConfirmDialog(message) != JOptionPane.OK_OPTION) {
+            if (message != null
+                    && view.showConfirmDialog(new ZapHtmlLabel(message)) != JOptionPane.OK_OPTION) {
                 return;
             }
         }

File: zap/src/main/java/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -81,6 +81,7 @@
 import org.parosproxy.paros.view.View;
 import org.parosproxy.paros.view.WaitMessageDialog;
 import org.zaproxy.zap.model.IllegalContextNameException;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.ContextExportDialog;
 import org.zaproxy.zap.view.PersistSessionDialog;
 import org.zaproxy.zap.view.SessionTableSelectDialog;
@@ -184,7 +185,7 @@ private boolean informStopActiveActions() {
         if (!activeActions.isEmpty()) {
             String message =
                     Constant.messages.getString("menu.file.session.activeactions", activeActions);
-            if (view.showConfirmDialog(message) != JOptionPane.OK_OPTION) {
+            if (view.showConfirmDialog(new ZapHtmlLabel(message)) != JOptionPane.OK_OPTION) {
                 return false;
             }
         }

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -58,7 +58,6 @@
 import java.util.Map;
 import java.util.Objects;
 import javax.swing.JDialog;
-import javax.swing.JLabel;
 import javax.swing.JPanel;
 import javax.swing.SwingUtilities;
 import javax.swing.Timer;
@@ -73,6 +72,7 @@
 import org.parosproxy.paros.view.View;
 import org.parosproxy.paros.view.WorkbenchPanel;
 import org.zaproxy.zap.utils.FontUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 
 // ZAP: Added support for selecting the locale
 
@@ -746,7 +746,8 @@ private JPanel getMainPanel() {
             if (mainPanel == null) {
                 mainPanel = new JPanel();
                 mainPanel.add(
-                        new JLabel(Constant.messages.getString("view.options.warn.applylaf")));
+                        new ZapHtmlLabel(
+                                Constant.messages.getString("view.options.warn.applylaf")));
             }
             return mainPanel;
         }

File: zap/src/main/java/org/parosproxy/paros/view/MainFooterPanel.java
Patch:
@@ -40,6 +40,7 @@
 import javax.swing.JToolBar;
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.utils.DisplayUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 
 public class MainFooterPanel extends JPanel {
 
@@ -97,7 +98,7 @@ public void initialise() {
         add(getToolbarRight(), gbcToolbarRight);
 
         // Common alerts (Left)
-        footerToolbarLeft.add(new JLabel(Constant.messages.getString("footer.alerts.label")));
+        footerToolbarLeft.add(new ZapHtmlLabel(Constant.messages.getString("footer.alerts.label")));
 
         footerToolbarLeft.add(getAlertHigh());
 

File: zap/src/main/java/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -359,6 +359,8 @@ private void setupLookAndFeel() {
         }
         lookAndFeelSet = true;
 
+        UIManager.addAuxiliaryLookAndFeel(new ZapLookAndFeel());
+
         if (Constant.isMacOsX()) {
             OsXGui.setup();
         } else if (Constant.isWindows()) {

File: zap/src/main/java/org/zaproxy/zap/ZAP.java
Patch:
@@ -114,6 +114,9 @@ public void println(String x) {
                                 .equals(x)) {
                             return;
                         }
+                        if (x.startsWith("Multiplexing LAF")) {
+                            return;
+                        }
                         super.println(x);
                     }
                 });

File: zap/src/main/java/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -57,6 +57,7 @@
 import org.zaproxy.zap.session.WebSession;
 import org.zaproxy.zap.users.User;
 import org.zaproxy.zap.utils.ApiUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.LayoutHelper;
 
 /**
@@ -262,7 +263,7 @@ protected void initialize() {
             this.getSessionsComboBox().setRenderer(new HttpSessionRenderer());
 
             this.add(
-                    new JLabel(
+                    new ZapHtmlLabel(
                             Constant.messages.getString(
                                     "authentication.method.manual.field.description")),
                     LayoutHelper.getGBC(0, 1, 2, 0.0d, 0.0d));

File: zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java
Patch:
@@ -79,6 +79,7 @@
 import org.zaproxy.zap.session.WebSession;
 import org.zaproxy.zap.users.User;
 import org.zaproxy.zap.utils.ApiUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.LayoutHelper;
 import org.zaproxy.zap.view.NodeSelectDialog;
@@ -892,7 +893,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
             this.passwordParameterCombo.setRenderer(NameValuePairRenderer.INSTANCE);
             this.add(passwordParameterCombo, LayoutHelper.getGBC(1, 5, 1, 1.0d, 0.0d));
 
-            this.add(new JLabel(AUTH_DESCRIPTION), LayoutHelper.getGBC(0, 8, 2, 1.0d, 0.0d));
+            this.add(new ZapHtmlLabel(AUTH_DESCRIPTION), LayoutHelper.getGBC(0, 8, 2, 1.0d, 0.0d));
 
             // Make sure we update the parameters when something has been changed in the
             // postDataField

File: zap/src/main/java/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -74,6 +74,7 @@
 import org.zaproxy.zap.users.User;
 import org.zaproxy.zap.utils.ApiUtils;
 import org.zaproxy.zap.utils.EncodingUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.DynamicFieldsPanel;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -413,7 +414,7 @@ public void actionPerformed(ActionEvent e) {
 
             this.dynamicContentPanel = new JPanel(new BorderLayout());
             this.add(this.dynamicContentPanel, LayoutHelper.getGBC(0, 1, 3, 1.0d, 0.0d));
-            this.dynamicContentPanel.add(new JLabel(LABEL_NOT_LOADED));
+            this.dynamicContentPanel.add(new ZapHtmlLabel(LABEL_NOT_LOADED));
         }
 
         @Override

File: zap/src/main/java/org/zaproxy/zap/extension/anticsrf/OptionsAntiCsrfPanel.java
Patch:
@@ -22,13 +22,13 @@
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import javax.swing.JCheckBox;
-import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.SortOrder;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsTablePanel;
 
 public class OptionsAntiCsrfPanel extends AbstractParamPanel {
@@ -57,7 +57,7 @@ private void initialize() {
         gbc.anchor = GridBagConstraints.LINE_START;
         gbc.fill = GridBagConstraints.BOTH;
 
-        this.add(new JLabel(Constant.messages.getString("options.acsrf.label.tokens")), gbc);
+        this.add(new ZapHtmlLabel(Constant.messages.getString("options.acsrf.label.tokens")), gbc);
 
         tokensOptionsPanel = new AntiCsrfMultipleOptionsPanel(getAntiCsrfModel());
 

File: zap/src/main/java/org/zaproxy/zap/extension/api/OptionsApiPanel.java
Patch:
@@ -37,6 +37,7 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.network.DomainMatcher;
 import org.zaproxy.zap.utils.FontUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.AbstractMultipleOptionsTablePanel;
 import org.zaproxy.zap.view.LayoutHelper;
@@ -107,7 +108,8 @@ private JPanel getPanelMisc() {
             panelMisc.add(jPanel, LayoutHelper.getGBC(0, y++, 2, 1.0, 1.0));
 
             JLabel warning =
-                    new JLabel(Constant.messages.getString("api.options.label.testingWarning"));
+                    new ZapHtmlLabel(
+                            Constant.messages.getString("api.options.label.testingWarning"));
             warning.setForeground(Color.RED);
             panelMisc.add(warning, LayoutHelper.getGBC(0, y++, 2, 0.5D));
             panelMisc.add(getDisableKey(), LayoutHelper.getGBC(0, y++, 1, 0.5));

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/OptionsVariantPanel.java
Patch:
@@ -39,6 +39,7 @@
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.script.ExtensionScript;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsBaseTablePanel;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -353,7 +354,7 @@ private JPanel getPanelScanner() {
 
             // Excluded Parameters
             panelVariant.add(
-                    new JLabel(
+                    new ZapHtmlLabel(
                             Constant.messages.getString(
                                     "variant.options.excludedparam.label.tokens")),
                     LayoutHelper.getGBC(

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -81,6 +81,7 @@
 import org.zaproxy.zap.extension.autoupdate.UninstallationProgressDialogue.AddOnUninstallListener;
 import org.zaproxy.zap.extension.autoupdate.UninstallationProgressDialogue.UninstallationProgressEvent;
 import org.zaproxy.zap.extension.autoupdate.UninstallationProgressDialogue.UninstallationProgressHandler;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapXmlConfiguration;
 import org.zaproxy.zap.view.ScanStatus;
 import org.zaproxy.zap.view.ZapMenuItem;
@@ -1025,7 +1026,7 @@ protected boolean downloadLatestRelease() {
                 View.getSingleton()
                         .showMessageDialog(
                                 this.getAddOnsDialog(),
-                                Constant.messages.getString("cfu.kali.options"));
+                                new ZapHtmlLabel(Constant.messages.getString("cfu.kali.options")));
             }
             return false;
         }
@@ -1491,7 +1492,7 @@ boolean warnUnsavedResourcesOrActiveActions(
         if (message != null
                 && JOptionPane.showConfirmDialog(
                                 getWindowParent(caller),
-                                message,
+                                new ZapHtmlLabel(message),
                                 Constant.PROGRAM_NAME,
                                 JOptionPane.YES_NO_OPTION)
                         != JOptionPane.YES_OPTION) {

File: zap/src/main/java/org/zaproxy/zap/extension/ext/OptionsExtensionPanel.java
Patch:
@@ -40,6 +40,7 @@
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.DesktopUtils;
 import org.zaproxy.zap.utils.DisplayUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapLabel;
 import org.zaproxy.zap.view.LayoutHelper;
 import org.zaproxy.zap.view.ZapTable;
@@ -76,7 +77,7 @@ public OptionsExtensionPanel(ExtensionExtension ext) {
         gbc.insets = new Insets(0, 0, 10, 0);
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.HORIZONTAL;
-        this.add(new JLabel(Constant.messages.getString("options.ext.label.enable")), gbc);
+        this.add(new ZapHtmlLabel(Constant.messages.getString("options.ext.label.enable")), gbc);
 
         gbc.insets = new Insets(0, 0, 0, 0);
         this.add(new TableFilterPanel<>(getTableExtension()), gbc);

File: zap/src/main/java/org/zaproxy/zap/extension/globalexcludeurl/OptionsGlobalExcludeURLPanel.java
Patch:
@@ -23,13 +23,13 @@
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import javax.swing.JCheckBox;
-import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.SortOrder;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsTablePanel;
 
 public class OptionsGlobalExcludeURLPanel extends AbstractParamPanel {
@@ -57,7 +57,8 @@ private void initialize() {
         gbc.fill = GridBagConstraints.BOTH;
 
         this.add(
-                new JLabel(Constant.messages.getString("options.globalexcludeurl.label.tokens")),
+                new ZapHtmlLabel(
+                        Constant.messages.getString("options.globalexcludeurl.label.tokens")),
                 gbc);
 
         tokensOptionsPanel = new GlobalExcludeURLMultipleOptionsPanel(getGlobalExcludeURLModel());

File: zap/src/main/java/org/zaproxy/zap/extension/lang/OptionsLangPanel.java
Patch:
@@ -43,6 +43,7 @@
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.LocaleUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.ViewLocale;
 
@@ -84,7 +85,8 @@ private JPanel getPanelLang() {
 
             languageLabel = new JLabel(Constant.messages.getString("options.lang.selector.label"));
             importLabel = new JLabel(Constant.messages.getString("options.lang.importer.label"));
-            restartLabel = new JLabel(Constant.messages.getString("options.lang.label.restart"));
+            restartLabel =
+                    new ZapHtmlLabel(Constant.messages.getString("options.lang.label.restart"));
 
             panelLang.add(languageLabel, getGridBagConstraints(0, 0, 0.5, 0, 0, 0, 0));
             panelLang.add(getLocaleSelect(), getGridBagConstraints(1, 0, 0.5, 0, 0, 0, 0));

File: zap/src/main/java/org/zaproxy/zap/extension/option/OptionsLocalePanel.java
Patch:
@@ -31,6 +31,7 @@
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.LocaleUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.ViewLocale;
 
 public class OptionsLocalePanel extends AbstractParamPanel {
@@ -39,7 +40,7 @@ public class OptionsLocalePanel extends AbstractParamPanel {
     private JPanel panelMisc = null;
     private JComboBox<ViewLocale> localeSelect = null;
     private JLabel localeLabel = null;
-    private JLabel localeChangeLabel = null;
+    private ZapHtmlLabel localeChangeLabel = null;
 
     public OptionsLocalePanel() {
         super();
@@ -120,7 +121,7 @@ private JPanel getPanelMisc() {
 
             localeLabel = new JLabel(Constant.messages.getString("locale.options.label.language"));
             localeChangeLabel =
-                    new JLabel(Constant.messages.getString("locale.options.label.change"));
+                    new ZapHtmlLabel(Constant.messages.getString("locale.options.label.change"));
 
             panelMisc.add(localeLabel, gbc1_0);
             panelMisc.add(getLocaleSelect(), gbc1_1);

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/OptionsPassiveScan.java
Patch:
@@ -22,14 +22,14 @@
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import javax.swing.JCheckBox;
-import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.SortOrder;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.pscan.scanner.RegexAutoTagScanner;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsTablePanel;
 
 @SuppressWarnings("serial")
@@ -59,7 +59,7 @@ private void initialize() {
         gbc.anchor = GridBagConstraints.LINE_START;
         gbc.fill = GridBagConstraints.BOTH;
 
-        this.add(new JLabel(Constant.messages.getString("pscan.options.header")), gbc);
+        this.add(new ZapHtmlLabel(Constant.messages.getString("pscan.options.header")), gbc);
 
         scannersOptionsPanel = new ScannersMultipleOptionsPanel(getTableModel());
 

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScannerOptionsPanel.java
Patch:
@@ -26,6 +26,7 @@
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.I18N;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapNumberSpinner;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -91,7 +92,7 @@ public PassiveScannerOptionsPanel(ExtensionPassiveScan extPassiveScan, I18N mess
         this.add(maxBodySizeInBytes, LayoutHelper.getGBC(1, y, 1, 1.0));
         this.add(clearQueue, LayoutHelper.getGBC(1, ++y, 1, 0.5));
         this.add(
-                new JLabel(messages.getString("pscan.options.main.footer.threadsApply")),
+                new ZapHtmlLabel(messages.getString("pscan.options.main.footer.threadsApply")),
                 LayoutHelper.getGBC(0, ++y, 2, 1.0));
 
         this.add(new JLabel(""), LayoutHelper.getGBC(0, ++y, 2, 1.0, 1.0));

File: zap/src/main/java/org/zaproxy/zap/extension/script/OptionsScriptPanel.java
Patch:
@@ -25,13 +25,13 @@
 import java.util.List;
 import javax.swing.JCheckBox;
 import javax.swing.JFileChooser;
-import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.SortOrder;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsBaseTablePanel;
 
 @SuppressWarnings("serial")
@@ -60,7 +60,7 @@ private void initialize() {
         gbc.anchor = GridBagConstraints.LINE_START;
         gbc.fill = GridBagConstraints.BOTH;
 
-        this.add(new JLabel(Constant.messages.getString("options.script.label.dirs")), gbc);
+        this.add(new ZapHtmlLabel(Constant.messages.getString("options.script.label.dirs")), gbc);
 
         tokensOptionsPanel = new AntiCsrfMultipleOptionsPanel(this.extension, getScriptDirModel());
 

File: zap/src/main/java/org/zaproxy/zap/extension/sessions/ContextSessionManagementPanel.java
Patch:
@@ -39,6 +39,7 @@
 import org.zaproxy.zap.session.SessionManagementMethod;
 import org.zaproxy.zap.session.SessionManagementMethodType;
 import org.zaproxy.zap.utils.FontUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractContextPropertiesPanel;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -96,7 +97,7 @@ private void initialize() {
         this.setBorder(new EmptyBorder(2, 2, 2, 2));
 
         this.add(
-                new JLabel(
+                new ZapHtmlLabel(
                         Constant.messages.getString("sessionmanagement.panel.label.description")),
                 LayoutHelper.getGBC(0, 0, 1, 1.0D));
 
@@ -150,7 +151,7 @@ private void changeMethodConfigPanel(SessionManagementMethodType newMethodType)
             this.shownConfigPanel = null;
             getConfigContainerPanel()
                     .add(
-                            new JLabel("<html><p>" + CONFIG_NOT_NEEDED + "</p></html>"),
+                            new ZapHtmlLabel("<html><p>" + CONFIG_NOT_NEEDED + "</p></html>"),
                             BorderLayout.CENTER);
         }
         this.shownMethodType = newMethodType;

File: zap/src/main/java/org/zaproxy/zap/utils/I18N.java
Patch:
@@ -193,7 +193,9 @@ private String getStringImpl(String key) {
      *
      * @param key the key of the string
      * @return the string read wrapped in HTML and paragraph tags
+     * @deprecated 2.12.0 Include the HTML tags in the Message.properties file
      */
+    @Deprecated
     public String getHtmlWrappedString(String key) {
         String values = getStringImpl(key);
         if (values == null) return null;

File: zap/src/main/java/org/zaproxy/zap/view/SplashScreen.java
Patch:
@@ -87,13 +87,13 @@ public class SplashScreen extends JFrame {
     public SplashScreen() {
         super();
 
-        setSize(DisplayUtils.getScaledDimension(420, 430));
+        setSize(DisplayUtils.getScaledDimension(430, 430));
         setLocationRelativeTo(null);
         setTitle(Constant.PROGRAM_NAME);
         setIconImages(DisplayUtils.getZapIconImages());
 
         JPanel panel = new JPanel(new GridBagLayout());
-        panel.setPreferredSize(DisplayUtils.getScaledDimension(420, 430));
+        panel.setPreferredSize(DisplayUtils.getScaledDimension(430, 430));
         if (!DisplayUtils.isDarkLookAndFeel()) {
             panel.setBackground(Color.decode("#F4FAFF"));
         }

File: zap/src/main/java/org/parosproxy/paros/control/Control.java
Patch:
@@ -113,6 +113,7 @@
 import org.zaproxy.zap.control.AddOnLoader;
 import org.zaproxy.zap.control.ControlOverrides;
 import org.zaproxy.zap.control.ExtensionFactory;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 
 /** Overall control with interaction on model and view. */
 public class Control extends AbstractControl implements SessionListener {
@@ -286,7 +287,8 @@ public void exit(boolean noPrompt, final File openOnExit) {
                                 "menu.file.exit.message.activeActions", activeActions);
             }
 
-            if (message != null && view.showConfirmDialog(message) != JOptionPane.OK_OPTION) {
+            if (message != null
+                    && view.showConfirmDialog(new ZapHtmlLabel(message)) != JOptionPane.OK_OPTION) {
                 return;
             }
         }

File: zap/src/main/java/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -81,6 +81,7 @@
 import org.parosproxy.paros.view.View;
 import org.parosproxy.paros.view.WaitMessageDialog;
 import org.zaproxy.zap.model.IllegalContextNameException;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.ContextExportDialog;
 import org.zaproxy.zap.view.PersistSessionDialog;
 import org.zaproxy.zap.view.SessionTableSelectDialog;
@@ -184,7 +185,7 @@ private boolean informStopActiveActions() {
         if (!activeActions.isEmpty()) {
             String message =
                     Constant.messages.getString("menu.file.session.activeactions", activeActions);
-            if (view.showConfirmDialog(message) != JOptionPane.OK_OPTION) {
+            if (view.showConfirmDialog(new ZapHtmlLabel(message)) != JOptionPane.OK_OPTION) {
                 return false;
             }
         }

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -58,7 +58,6 @@
 import java.util.Map;
 import java.util.Objects;
 import javax.swing.JDialog;
-import javax.swing.JLabel;
 import javax.swing.JPanel;
 import javax.swing.SwingUtilities;
 import javax.swing.Timer;
@@ -73,6 +72,7 @@
 import org.parosproxy.paros.view.View;
 import org.parosproxy.paros.view.WorkbenchPanel;
 import org.zaproxy.zap.utils.FontUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 
 // ZAP: Added support for selecting the locale
 
@@ -746,7 +746,8 @@ private JPanel getMainPanel() {
             if (mainPanel == null) {
                 mainPanel = new JPanel();
                 mainPanel.add(
-                        new JLabel(Constant.messages.getString("view.options.warn.applylaf")));
+                        new ZapHtmlLabel(
+                                Constant.messages.getString("view.options.warn.applylaf")));
             }
             return mainPanel;
         }

File: zap/src/main/java/org/parosproxy/paros/view/MainFooterPanel.java
Patch:
@@ -40,6 +40,7 @@
 import javax.swing.JToolBar;
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.utils.DisplayUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 
 public class MainFooterPanel extends JPanel {
 
@@ -97,7 +98,7 @@ public void initialise() {
         add(getToolbarRight(), gbcToolbarRight);
 
         // Common alerts (Left)
-        footerToolbarLeft.add(new JLabel(Constant.messages.getString("footer.alerts.label")));
+        footerToolbarLeft.add(new ZapHtmlLabel(Constant.messages.getString("footer.alerts.label")));
 
         footerToolbarLeft.add(getAlertHigh());
 

File: zap/src/main/java/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -359,6 +359,8 @@ private void setupLookAndFeel() {
         }
         lookAndFeelSet = true;
 
+        UIManager.addAuxiliaryLookAndFeel(new ZapLookAndFeel());
+
         if (Constant.isMacOsX()) {
             OsXGui.setup();
         } else if (Constant.isWindows()) {

File: zap/src/main/java/org/zaproxy/zap/ZAP.java
Patch:
@@ -114,6 +114,9 @@ public void println(String x) {
                                 .equals(x)) {
                             return;
                         }
+                        if (x.startsWith("Multiplexing LAF")) {
+                            return;
+                        }
                         super.println(x);
                     }
                 });

File: zap/src/main/java/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -57,6 +57,7 @@
 import org.zaproxy.zap.session.WebSession;
 import org.zaproxy.zap.users.User;
 import org.zaproxy.zap.utils.ApiUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.LayoutHelper;
 
 /**
@@ -262,7 +263,7 @@ protected void initialize() {
             this.getSessionsComboBox().setRenderer(new HttpSessionRenderer());
 
             this.add(
-                    new JLabel(
+                    new ZapHtmlLabel(
                             Constant.messages.getString(
                                     "authentication.method.manual.field.description")),
                     LayoutHelper.getGBC(0, 1, 2, 0.0d, 0.0d));

File: zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java
Patch:
@@ -79,6 +79,7 @@
 import org.zaproxy.zap.session.WebSession;
 import org.zaproxy.zap.users.User;
 import org.zaproxy.zap.utils.ApiUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.LayoutHelper;
 import org.zaproxy.zap.view.NodeSelectDialog;
@@ -892,7 +893,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
             this.passwordParameterCombo.setRenderer(NameValuePairRenderer.INSTANCE);
             this.add(passwordParameterCombo, LayoutHelper.getGBC(1, 5, 1, 1.0d, 0.0d));
 
-            this.add(new JLabel(AUTH_DESCRIPTION), LayoutHelper.getGBC(0, 8, 2, 1.0d, 0.0d));
+            this.add(new ZapHtmlLabel(AUTH_DESCRIPTION), LayoutHelper.getGBC(0, 8, 2, 1.0d, 0.0d));
 
             // Make sure we update the parameters when something has been changed in the
             // postDataField

File: zap/src/main/java/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -74,6 +74,7 @@
 import org.zaproxy.zap.users.User;
 import org.zaproxy.zap.utils.ApiUtils;
 import org.zaproxy.zap.utils.EncodingUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.DynamicFieldsPanel;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -413,7 +414,7 @@ public void actionPerformed(ActionEvent e) {
 
             this.dynamicContentPanel = new JPanel(new BorderLayout());
             this.add(this.dynamicContentPanel, LayoutHelper.getGBC(0, 1, 3, 1.0d, 0.0d));
-            this.dynamicContentPanel.add(new JLabel(LABEL_NOT_LOADED));
+            this.dynamicContentPanel.add(new ZapHtmlLabel(LABEL_NOT_LOADED));
         }
 
         @Override

File: zap/src/main/java/org/zaproxy/zap/extension/anticsrf/OptionsAntiCsrfPanel.java
Patch:
@@ -22,13 +22,13 @@
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import javax.swing.JCheckBox;
-import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.SortOrder;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsTablePanel;
 
 public class OptionsAntiCsrfPanel extends AbstractParamPanel {
@@ -57,7 +57,7 @@ private void initialize() {
         gbc.anchor = GridBagConstraints.LINE_START;
         gbc.fill = GridBagConstraints.BOTH;
 
-        this.add(new JLabel(Constant.messages.getString("options.acsrf.label.tokens")), gbc);
+        this.add(new ZapHtmlLabel(Constant.messages.getString("options.acsrf.label.tokens")), gbc);
 
         tokensOptionsPanel = new AntiCsrfMultipleOptionsPanel(getAntiCsrfModel());
 

File: zap/src/main/java/org/zaproxy/zap/extension/api/OptionsApiPanel.java
Patch:
@@ -37,6 +37,7 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.network.DomainMatcher;
 import org.zaproxy.zap.utils.FontUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.AbstractMultipleOptionsTablePanel;
 import org.zaproxy.zap.view.LayoutHelper;
@@ -107,7 +108,8 @@ private JPanel getPanelMisc() {
             panelMisc.add(jPanel, LayoutHelper.getGBC(0, y++, 2, 1.0, 1.0));
 
             JLabel warning =
-                    new JLabel(Constant.messages.getString("api.options.label.testingWarning"));
+                    new ZapHtmlLabel(
+                            Constant.messages.getString("api.options.label.testingWarning"));
             warning.setForeground(Color.RED);
             panelMisc.add(warning, LayoutHelper.getGBC(0, y++, 2, 0.5D));
             panelMisc.add(getDisableKey(), LayoutHelper.getGBC(0, y++, 1, 0.5));

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/OptionsVariantPanel.java
Patch:
@@ -39,6 +39,7 @@
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.script.ExtensionScript;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsBaseTablePanel;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -353,7 +354,7 @@ private JPanel getPanelScanner() {
 
             // Excluded Parameters
             panelVariant.add(
-                    new JLabel(
+                    new ZapHtmlLabel(
                             Constant.messages.getString(
                                     "variant.options.excludedparam.label.tokens")),
                     LayoutHelper.getGBC(

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -81,6 +81,7 @@
 import org.zaproxy.zap.extension.autoupdate.UninstallationProgressDialogue.AddOnUninstallListener;
 import org.zaproxy.zap.extension.autoupdate.UninstallationProgressDialogue.UninstallationProgressEvent;
 import org.zaproxy.zap.extension.autoupdate.UninstallationProgressDialogue.UninstallationProgressHandler;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapXmlConfiguration;
 import org.zaproxy.zap.view.ScanStatus;
 import org.zaproxy.zap.view.ZapMenuItem;
@@ -1025,7 +1026,7 @@ protected boolean downloadLatestRelease() {
                 View.getSingleton()
                         .showMessageDialog(
                                 this.getAddOnsDialog(),
-                                Constant.messages.getString("cfu.kali.options"));
+                                new ZapHtmlLabel(Constant.messages.getString("cfu.kali.options")));
             }
             return false;
         }
@@ -1491,7 +1492,7 @@ boolean warnUnsavedResourcesOrActiveActions(
         if (message != null
                 && JOptionPane.showConfirmDialog(
                                 getWindowParent(caller),
-                                message,
+                                new ZapHtmlLabel(message),
                                 Constant.PROGRAM_NAME,
                                 JOptionPane.YES_NO_OPTION)
                         != JOptionPane.YES_OPTION) {

File: zap/src/main/java/org/zaproxy/zap/extension/ext/OptionsExtensionPanel.java
Patch:
@@ -40,6 +40,7 @@
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.DesktopUtils;
 import org.zaproxy.zap.utils.DisplayUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapLabel;
 import org.zaproxy.zap.view.LayoutHelper;
 import org.zaproxy.zap.view.ZapTable;
@@ -76,7 +77,7 @@ public OptionsExtensionPanel(ExtensionExtension ext) {
         gbc.insets = new Insets(0, 0, 10, 0);
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.HORIZONTAL;
-        this.add(new JLabel(Constant.messages.getString("options.ext.label.enable")), gbc);
+        this.add(new ZapHtmlLabel(Constant.messages.getString("options.ext.label.enable")), gbc);
 
         gbc.insets = new Insets(0, 0, 0, 0);
         this.add(new TableFilterPanel<>(getTableExtension()), gbc);

File: zap/src/main/java/org/zaproxy/zap/extension/globalexcludeurl/OptionsGlobalExcludeURLPanel.java
Patch:
@@ -23,13 +23,13 @@
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import javax.swing.JCheckBox;
-import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.SortOrder;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsTablePanel;
 
 public class OptionsGlobalExcludeURLPanel extends AbstractParamPanel {
@@ -57,7 +57,8 @@ private void initialize() {
         gbc.fill = GridBagConstraints.BOTH;
 
         this.add(
-                new JLabel(Constant.messages.getString("options.globalexcludeurl.label.tokens")),
+                new ZapHtmlLabel(
+                        Constant.messages.getString("options.globalexcludeurl.label.tokens")),
                 gbc);
 
         tokensOptionsPanel = new GlobalExcludeURLMultipleOptionsPanel(getGlobalExcludeURLModel());

File: zap/src/main/java/org/zaproxy/zap/extension/lang/OptionsLangPanel.java
Patch:
@@ -43,6 +43,7 @@
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.LocaleUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.ViewLocale;
 
@@ -84,7 +85,8 @@ private JPanel getPanelLang() {
 
             languageLabel = new JLabel(Constant.messages.getString("options.lang.selector.label"));
             importLabel = new JLabel(Constant.messages.getString("options.lang.importer.label"));
-            restartLabel = new JLabel(Constant.messages.getString("options.lang.label.restart"));
+            restartLabel =
+                    new ZapHtmlLabel(Constant.messages.getString("options.lang.label.restart"));
 
             panelLang.add(languageLabel, getGridBagConstraints(0, 0, 0.5, 0, 0, 0, 0));
             panelLang.add(getLocaleSelect(), getGridBagConstraints(1, 0, 0.5, 0, 0, 0, 0));

File: zap/src/main/java/org/zaproxy/zap/extension/option/OptionsLocalePanel.java
Patch:
@@ -31,6 +31,7 @@
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.LocaleUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.ViewLocale;
 
 public class OptionsLocalePanel extends AbstractParamPanel {
@@ -39,7 +40,7 @@ public class OptionsLocalePanel extends AbstractParamPanel {
     private JPanel panelMisc = null;
     private JComboBox<ViewLocale> localeSelect = null;
     private JLabel localeLabel = null;
-    private JLabel localeChangeLabel = null;
+    private ZapHtmlLabel localeChangeLabel = null;
 
     public OptionsLocalePanel() {
         super();
@@ -120,7 +121,7 @@ private JPanel getPanelMisc() {
 
             localeLabel = new JLabel(Constant.messages.getString("locale.options.label.language"));
             localeChangeLabel =
-                    new JLabel(Constant.messages.getString("locale.options.label.change"));
+                    new ZapHtmlLabel(Constant.messages.getString("locale.options.label.change"));
 
             panelMisc.add(localeLabel, gbc1_0);
             panelMisc.add(getLocaleSelect(), gbc1_1);

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/OptionsPassiveScan.java
Patch:
@@ -22,14 +22,14 @@
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import javax.swing.JCheckBox;
-import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.SortOrder;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.pscan.scanner.RegexAutoTagScanner;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsTablePanel;
 
 @SuppressWarnings("serial")
@@ -59,7 +59,7 @@ private void initialize() {
         gbc.anchor = GridBagConstraints.LINE_START;
         gbc.fill = GridBagConstraints.BOTH;
 
-        this.add(new JLabel(Constant.messages.getString("pscan.options.header")), gbc);
+        this.add(new ZapHtmlLabel(Constant.messages.getString("pscan.options.header")), gbc);
 
         scannersOptionsPanel = new ScannersMultipleOptionsPanel(getTableModel());
 

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScannerOptionsPanel.java
Patch:
@@ -26,6 +26,7 @@
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.utils.I18N;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.utils.ZapNumberSpinner;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -91,7 +92,7 @@ public PassiveScannerOptionsPanel(ExtensionPassiveScan extPassiveScan, I18N mess
         this.add(maxBodySizeInBytes, LayoutHelper.getGBC(1, y, 1, 1.0));
         this.add(clearQueue, LayoutHelper.getGBC(1, ++y, 1, 0.5));
         this.add(
-                new JLabel(messages.getString("pscan.options.main.footer.threadsApply")),
+                new ZapHtmlLabel(messages.getString("pscan.options.main.footer.threadsApply")),
                 LayoutHelper.getGBC(0, ++y, 2, 1.0));
 
         this.add(new JLabel(""), LayoutHelper.getGBC(0, ++y, 2, 1.0, 1.0));

File: zap/src/main/java/org/zaproxy/zap/extension/script/OptionsScriptPanel.java
Patch:
@@ -25,13 +25,13 @@
 import java.util.List;
 import javax.swing.JCheckBox;
 import javax.swing.JFileChooser;
-import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.SortOrder;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractMultipleOptionsBaseTablePanel;
 
 @SuppressWarnings("serial")
@@ -60,7 +60,7 @@ private void initialize() {
         gbc.anchor = GridBagConstraints.LINE_START;
         gbc.fill = GridBagConstraints.BOTH;
 
-        this.add(new JLabel(Constant.messages.getString("options.script.label.dirs")), gbc);
+        this.add(new ZapHtmlLabel(Constant.messages.getString("options.script.label.dirs")), gbc);
 
         tokensOptionsPanel = new AntiCsrfMultipleOptionsPanel(this.extension, getScriptDirModel());
 

File: zap/src/main/java/org/zaproxy/zap/extension/sessions/ContextSessionManagementPanel.java
Patch:
@@ -39,6 +39,7 @@
 import org.zaproxy.zap.session.SessionManagementMethod;
 import org.zaproxy.zap.session.SessionManagementMethodType;
 import org.zaproxy.zap.utils.FontUtils;
+import org.zaproxy.zap.utils.ZapHtmlLabel;
 import org.zaproxy.zap.view.AbstractContextPropertiesPanel;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -96,7 +97,7 @@ private void initialize() {
         this.setBorder(new EmptyBorder(2, 2, 2, 2));
 
         this.add(
-                new JLabel(
+                new ZapHtmlLabel(
                         Constant.messages.getString("sessionmanagement.panel.label.description")),
                 LayoutHelper.getGBC(0, 0, 1, 1.0D));
 
@@ -150,7 +151,7 @@ private void changeMethodConfigPanel(SessionManagementMethodType newMethodType)
             this.shownConfigPanel = null;
             getConfigContainerPanel()
                     .add(
-                            new JLabel("<html><p>" + CONFIG_NOT_NEEDED + "</p></html>"),
+                            new ZapHtmlLabel("<html><p>" + CONFIG_NOT_NEEDED + "</p></html>"),
                             BorderLayout.CENTER);
         }
         this.shownMethodType = newMethodType;

File: zap/src/main/java/org/zaproxy/zap/utils/I18N.java
Patch:
@@ -193,7 +193,9 @@ private String getStringImpl(String key) {
      *
      * @param key the key of the string
      * @return the string read wrapped in HTML and paragraph tags
+     * @deprecated 2.12.0 Include the HTML tags in the Message.properties file
      */
+    @Deprecated
     public String getHtmlWrappedString(String key) {
         String values = getStringImpl(key);
         if (values == null) return null;

File: zap/src/main/java/org/zaproxy/zap/view/SplashScreen.java
Patch:
@@ -87,13 +87,13 @@ public class SplashScreen extends JFrame {
     public SplashScreen() {
         super();
 
-        setSize(DisplayUtils.getScaledDimension(420, 430));
+        setSize(DisplayUtils.getScaledDimension(430, 430));
         setLocationRelativeTo(null);
         setTitle(Constant.PROGRAM_NAME);
         setIconImages(DisplayUtils.getZapIconImages());
 
         JPanel panel = new JPanel(new GridBagLayout());
-        panel.setPreferredSize(DisplayUtils.getScaledDimension(420, 430));
+        panel.setPreferredSize(DisplayUtils.getScaledDimension(430, 430));
         if (!DisplayUtils.isDarkLookAndFeel()) {
             panel.setBackground(Color.decode("#F4FAFF"));
         }

File: zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -41,6 +41,7 @@
 // ZAP: 2020/08/27 Moved variants into VariantFactory
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/06/16 Add support for updating multiple parameters in HttpMessage.
+// ZAP: 2022/09/08 Use format specifiers instead of concatenation when logging.
 package org.parosproxy.paros.core.scanner;
 
 import java.util.ArrayList;
@@ -87,8 +88,8 @@ public void scan() {
                 this.scan(this.variant.getParamList());
             } catch (Exception e) {
                 logger.error(
-                        "Error occurred while scanning with variant "
-                                + variant.getClass().getCanonicalName(),
+                        "Error occurred while scanning with variant {}",
+                        variant.getClass().getCanonicalName(),
                         e);
             }
 

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Analyser.java
Patch:
@@ -47,6 +47,7 @@
 // ZAP: 2022/06/09 Quote the query component used in the regular expression.
 // ZAP: 2022/06/09 Use Analyser in more circumstances.
 // ZAP: 2022/09/07 Remove unnecessary comments and address SonarLint issues
+// ZAP: 2022/09/08 Use format specifiers instead of concatenation when logging.
 package org.parosproxy.paros.core.scanner;
 
 import java.io.IOException;

File: zap/src/main/java/org/parosproxy/paros/view/AbstractParamDialog.java
Patch:
@@ -222,9 +222,7 @@ public void actionPerformed(ActionEvent e) {
                                 AbstractParamDialog.this.setVisible(false);
 
                             } catch (Exception ex) {
-                                if (LOGGER.isDebugEnabled()) {
-                                    LOGGER.debug("Failed to validate or save the panels: ", ex);
-                                }
+                                LOGGER.debug("Failed to validate or save the panels: ", ex);
                                 View.getSingleton()
                                         .showWarningDialog(
                                                 AbstractParamDialog.this,

File: zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java
Patch:
@@ -184,7 +184,9 @@ public static void replaceUserDataInRequest(
             msg.getRequestHeader().setURI(new URI(uri, true));
         } catch (Exception e) {
             log.error(
-                    "Failed to replace user data in request " + msg.getRequestHeader().getURI(), e);
+                    "Failed to replace user data in request {}",
+                    msg.getRequestHeader().getURI(),
+                    e);
         }
         if (msg.getRequestBody().length() > 0) {
             msg.setRequestBody(

File: zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -93,7 +93,7 @@ protected void parse() {
                 }
             }
         } catch (ConversionException e) {
-            logger.error("Error while loading anti CSRF tokens: " + e.getMessage(), e);
+            logger.error("Error while loading anti CSRF tokens: {}", e.getMessage(), e);
             this.tokens = new ArrayList<>(DEFAULT_TOKENS_NAMES.length);
             this.enabledTokensNames = new ArrayList<>(DEFAULT_TOKENS_NAMES.length);
         }

File: zap/src/main/java/org/zaproxy/zap/extension/api/ApiResponseConversionUtils.java
Patch:
@@ -89,7 +89,7 @@ public static ApiResponseSet<String> httpMessageToSet(
         try {
             tags = HistoryReference.getTags(historyId);
         } catch (DatabaseException e) {
-            LOGGER.warn("Failed to obtain the tags for message with ID " + historyId, e);
+            LOGGER.warn("Failed to obtain the tags for message with ID {}", historyId, e);
         }
         return new HttpMessageResponseSet(map, tags);
     }

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -293,7 +293,7 @@ public String getPrefix() {
     @SuppressWarnings({"fallthrough"})
     @Override
     public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {
-        log.debug("handleApiAction " + name + " " + params.toString());
+        log.debug("handleApiAction {} {}", name, params);
         ScanPolicy policy;
         int categoryId;
 
@@ -351,7 +351,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
                     try {
                         if (policyName != null && policyName.length() > 0) {
                             // Not specified, use the default one
-                            log.debug("handleApiAction scan policy =" + policyName);
+                            log.debug("handleApiAction scan policy ={}", policyName);
                             policy = controller.getPolicyManager().getPolicy(policyName);
                         }
                     } catch (ConfigurationException e) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -308,7 +308,7 @@ public void run() {
                             }
                         });
             } catch (InvocationTargetException | InterruptedException e) {
-                LOGGER.error("Failed to switch view: " + e.getMessage(), e);
+                LOGGER.error("Failed to switch view: {}", e.getMessage(), e);
             }
             return;
         }

File: zap/src/main/java/org/zaproxy/zap/extension/authentication/AuthenticationAPI.java
Patch:
@@ -116,7 +116,7 @@ public String getPrefix() {
 
     @Override
     public ApiResponse handleApiView(String name, JSONObject params) throws ApiException {
-        log.debug("handleApiView " + name + " " + params.toString());
+        log.debug("handleApiView {} {}", name, params);
 
         switch (name) {
             case VIEW_GET_AUTHENTICATION:
@@ -149,7 +149,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 
     @Override
     public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {
-        log.debug("handleApiAction " + name + " " + params.toString());
+        log.debug("handleApiAction {} {}", name, params);
 
         Context context;
         switch (name) {

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/AutoUpdateAPI.java
Patch:
@@ -87,7 +87,7 @@ public String getPrefix() {
 
     @Override
     public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {
-        log.debug("handleApiAction " + name + " " + params.toString());
+        log.debug("handleApiAction {} {}", name, params);
         if (ACTION_DOWNLOAD_LATEST_RELEASE.equals(name)) {
             if (this.downloadLatestRelease()) {
                 return ApiResponseElement.OK;

File: zap/src/main/java/org/zaproxy/zap/utils/ByteBuilder.java
Patch:
@@ -229,9 +229,7 @@ public ByteBuilder append(Object value) {
                 | IllegalAccessException
                 | InvocationTargetException e) {
             // shouldn't happen but in case it does log it.
-            if (logger.isDebugEnabled()) {
-                logger.debug(e.getMessage(), e);
-            }
+            logger.debug(e.getMessage(), e);
         } catch (NoSuchMethodException e) {
             // will happen, a lot
         }

File: zap/src/main/java/org/zaproxy/zap/view/panels/AbstractContextSelectToolbarStatusPanel.java
Patch:
@@ -229,7 +229,7 @@ protected int addToolBarElements(JToolBar toolBar, short location, int gridX) {
      * @param context the context that was selected
      */
     protected void contextSelected(Context context) {
-        log.debug("Selected new context: " + context);
+        log.debug("Selected new context: {}", context);
         switchViewForContext(context);
     }
 

File: zap/src/test/java/org/zaproxy/zap/extension/custompages/CustomPageUnitTest.java
Patch:
@@ -77,5 +77,6 @@ void shouldHaveExpectedI18nTypeNames() {
         assertEquals("Not Found", i18n.getString(CustomPage.Type.NOTFOUND_404.getNameKey()));
         assertEquals("Ok", i18n.getString(CustomPage.Type.OK_200.getNameKey()));
         assertEquals("Other", i18n.getString(CustomPage.Type.OTHER.getNameKey()));
+        assertEquals("Auth. Issue", i18n.getString(CustomPage.Type.AUTH_4XX.getNameKey()));
     }
 }

File: zap/src/test/java/org/zaproxy/zap/extension/custompages/DefaultCustomPageUnitTest.java
Patch:
@@ -81,7 +81,7 @@ void shouldDecodeCustomPage() {
     void shouldDecodeCustomPageWithDefaultTypeIfTypeIdInvalid() {
         // Given/When
         DefaultCustomPage actual =
-                DefaultCustomPage.decode(0, BASE64_TEST_PATTERN + ";1;true;5;true;");
+                DefaultCustomPage.decode(0, BASE64_TEST_PATTERN + ";1;true;15;true;");
         DefaultCustomPage expected =
                 new DefaultCustomPage(
                         0,

File: zap/src/test/java/org/zaproxy/zap/extension/custompages/CustomPageUnitTest.java
Patch:
@@ -77,5 +77,6 @@ void shouldHaveExpectedI18nTypeNames() {
         assertEquals("Not Found", i18n.getString(CustomPage.Type.NOTFOUND_404.getNameKey()));
         assertEquals("Ok", i18n.getString(CustomPage.Type.OK_200.getNameKey()));
         assertEquals("Other", i18n.getString(CustomPage.Type.OTHER.getNameKey()));
+        assertEquals("Auth. Issue", i18n.getString(CustomPage.Type.AUTH_4XX.getNameKey()));
     }
 }

File: zap/src/test/java/org/zaproxy/zap/extension/custompages/DefaultCustomPageUnitTest.java
Patch:
@@ -81,7 +81,7 @@ void shouldDecodeCustomPage() {
     void shouldDecodeCustomPageWithDefaultTypeIfTypeIdInvalid() {
         // Given/When
         DefaultCustomPage actual =
-                DefaultCustomPage.decode(0, BASE64_TEST_PATTERN + ";1;true;5;true;");
+                DefaultCustomPage.decode(0, BASE64_TEST_PATTERN + ";1;true;15;true;");
         DefaultCustomPage expected =
                 new DefaultCustomPage(
                         0,

File: zap/src/main/java/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -51,6 +51,7 @@
 import javax.swing.JScrollPane;
 import javax.swing.table.AbstractTableModel;
 import javax.swing.tree.TreeNode;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.jdesktop.swingx.JXTable;
@@ -1879,7 +1880,8 @@ public void setError(ScriptWrapper script, String details) {
 
     public void setError(ScriptWrapper script, Exception e) {
         script.setLastException(e);
-        setError(script, e.getMessage());
+        String message = e.getMessage();
+        setError(script, message != null ? message : ExceptionUtils.getRootCauseMessage(e));
     }
 
     public void addListener(ScriptEventListener listener) {

File: zap/src/main/java/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -51,6 +51,7 @@
 import javax.swing.JScrollPane;
 import javax.swing.table.AbstractTableModel;
 import javax.swing.tree.TreeNode;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.jdesktop.swingx.JXTable;
@@ -1879,7 +1880,8 @@ public void setError(ScriptWrapper script, String details) {
 
     public void setError(ScriptWrapper script, Exception e) {
         script.setLastException(e);
-        setError(script, e.getMessage());
+        String message = e.getMessage();
+        setError(script, message != null ? message : ExceptionUtils.getRootCauseMessage(e));
     }
 
     public void addListener(ScriptEventListener listener) {

File: zap/src/main/java/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -1494,8 +1494,10 @@ private Invocable invokeScriptImpl(ScriptWrapper script) {
         Writer writer = getWriters(script);
         se.getContext().setWriter(writer);
 
+        String scriptName = script.getName();
+        se.getContext().setAttribute(ScriptEngine.FILENAME, scriptName, ScriptContext.ENGINE_SCOPE);
         // Set the script name as a context attribute - this is used for script level variables
-        se.getContext().setAttribute(SCRIPT_NAME_ATT, script.getName(), ScriptContext.ENGINE_SCOPE);
+        se.getContext().setAttribute(SCRIPT_NAME_ATT, scriptName, ScriptContext.ENGINE_SCOPE);
 
         se.put("control", Control.getSingleton());
         se.put("model", getModel());

File: zap/src/main/java/org/parosproxy/paros/core/scanner/PluginStats.java
Patch:
@@ -45,7 +45,7 @@ public class PluginStats {
      * @see #start()
      */
     PluginStats(Plugin plugin) {
-        this.pluginName = plugin.getName() == null ? "" : plugin.getName();
+        this.pluginName = plugin.getDisplayName();
         this.pluginId = plugin.getId();
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -31,6 +31,7 @@
 // not important).
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2022/08/04 Ensure scan rule names are non-blank (Issue 7228)
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.ArrayList;
@@ -233,7 +234,7 @@ public Object getValueAt(int row, int col) {
         PluginWrapper wrapper = listTestCategory.get(row);
         switch (col) {
             case 0:
-                return wrapper.getPlugin().getName();
+                return wrapper.getPlugin().getDisplayName();
             case 1:
                 if (!wrapper.getPlugin().isEnabled()) {
                     return AlertThreshold.OFF;

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -250,7 +250,7 @@ public void persistChanges() {
         }
 
         public String getName() {
-            return scanner.getName();
+            return scanner.getDisplayName();
         }
 
         public AlertThreshold getThreshold() {

File: zap/src/main/java/org/parosproxy/paros/core/scanner/PluginStats.java
Patch:
@@ -45,7 +45,7 @@ public class PluginStats {
      * @see #start()
      */
     PluginStats(Plugin plugin) {
-        this.pluginName = plugin.getName() == null ? "" : plugin.getName();
+        this.pluginName = plugin.getDisplayName();
         this.pluginId = plugin.getId();
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -31,6 +31,7 @@
 // not important).
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2022/08/04 Ensure scan rule names are non-blank (Issue 7228)
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.ArrayList;
@@ -233,7 +234,7 @@ public Object getValueAt(int row, int col) {
         PluginWrapper wrapper = listTestCategory.get(row);
         switch (col) {
             case 0:
-                return wrapper.getPlugin().getName();
+                return wrapper.getPlugin().getDisplayName();
             case 1:
                 if (!wrapper.getPlugin().isEnabled()) {
                     return AlertThreshold.OFF;

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -250,7 +250,7 @@ public void persistChanges() {
         }
 
         public String getName() {
-            return scanner.getName();
+            return scanner.getDisplayName();
         }
 
         public AlertThreshold getThreshold() {

File: zap/src/main/java/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -64,7 +64,7 @@
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/07/07 Add TYPE_OAST.
 // ZAP: 2022/02/28 Remove code deprecated in 2.6.0
-// ZAP: 2022/06/27 Add TYPE_PARAM_MINER.
+// ZAP: 2022/06/27 Add TYPE_PARAM_DIGGER.
 package org.parosproxy.paros.model;
 
 import java.sql.SQLException;
@@ -276,11 +276,11 @@ public class HistoryReference {
     public static final int TYPE_OAST = 22;
 
     /**
-     * An HTTP message sent by the param miner.
+     * An HTTP message sent by the param digger.
      *
      * @since 2.12.0
      */
-    public static final int TYPE_PARAM_MINER = 23;
+    public static final int TYPE_PARAM_DIGGER = 23;
 
     private static java.text.DecimalFormat decimalFormat = new java.text.DecimalFormat("##0.###");
     private static TableHistory staticTableHistory = null;

File: zap/src/main/java/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -108,7 +108,7 @@
 // ZAP: 2022/06/03 Move implementation to HttpSenderParos.
 // ZAP: 2022/06/05 Remove usage of HttpException.
 // ZAP: 2022/06/07 Address deprecation warnings with HttpSenderParos.
-// ZAP: 2022/06/13 Added param miner initiator.
+// ZAP: 2022/06/13 Added param digger initiator.
 package org.parosproxy.paros.network;
 
 import java.io.IOException;
@@ -140,7 +140,7 @@ public class HttpSender {
     public static final int AUTHENTICATION_HELPER_INITIATOR = 14;
     public static final int AUTHENTICATION_POLL_INITIATOR = 15;
     public static final int OAST_INITIATOR = 16;
-    public static final int PARAM_MINER_INITIATOR = 17;
+    public static final int PARAM_DIGGER_INITIATOR = 17;
 
     private static final HttpRequestConfig NO_REDIRECTS = HttpRequestConfig.builder().build();
     private static final HttpRequestConfig FOLLOW_REDIRECTS =

File: zap/src/main/java/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -64,7 +64,7 @@
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/07/07 Add TYPE_OAST.
 // ZAP: 2022/02/28 Remove code deprecated in 2.6.0
-// ZAP: 2022/06/27 Add TYPE_PARAM_MINER.
+// ZAP: 2022/06/27 Add TYPE_PARAM_DIGGER.
 package org.parosproxy.paros.model;
 
 import java.sql.SQLException;
@@ -276,11 +276,11 @@ public class HistoryReference {
     public static final int TYPE_OAST = 22;
 
     /**
-     * An HTTP message sent by the param miner.
+     * An HTTP message sent by the param digger.
      *
      * @since 2.12.0
      */
-    public static final int TYPE_PARAM_MINER = 23;
+    public static final int TYPE_PARAM_DIGGER = 23;
 
     private static java.text.DecimalFormat decimalFormat = new java.text.DecimalFormat("##0.###");
     private static TableHistory staticTableHistory = null;

File: zap/src/main/java/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -108,7 +108,7 @@
 // ZAP: 2022/06/03 Move implementation to HttpSenderParos.
 // ZAP: 2022/06/05 Remove usage of HttpException.
 // ZAP: 2022/06/07 Address deprecation warnings with HttpSenderParos.
-// ZAP: 2022/06/13 Added param miner initiator.
+// ZAP: 2022/06/13 Added param digger initiator.
 package org.parosproxy.paros.network;
 
 import java.io.IOException;
@@ -140,7 +140,7 @@ public class HttpSender {
     public static final int AUTHENTICATION_HELPER_INITIATOR = 14;
     public static final int AUTHENTICATION_POLL_INITIATOR = 15;
     public static final int OAST_INITIATOR = 16;
-    public static final int PARAM_MINER_INITIATOR = 17;
+    public static final int PARAM_DIGGER_INITIATOR = 17;
 
     private static final HttpRequestConfig NO_REDIRECTS = HttpRequestConfig.builder().build();
     private static final HttpRequestConfig FOLLOW_REDIRECTS =

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/scanner/ScriptsPassiveScanner.java
Patch:
@@ -86,7 +86,9 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 
     @Override
     public ScriptsPassiveScanner copy() {
-        return new ScriptsPassiveScanner();
+        ScriptsPassiveScanner copy = new ScriptsPassiveScanner();
+        copy.currentHistoryType = currentHistoryType;
+        return copy;
     }
 
     private boolean appliesToCurrentHistoryType(ScriptWrapper wrapper, PassiveScript ps) {

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/scanner/ScriptsPassiveScanner.java
Patch:
@@ -86,7 +86,9 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 
     @Override
     public ScriptsPassiveScanner copy() {
-        return new ScriptsPassiveScanner();
+        ScriptsPassiveScanner copy = new ScriptsPassiveScanner();
+        copy.currentHistoryType = currentHistoryType;
+        return copy;
     }
 
     private boolean appliesToCurrentHistoryType(ScriptWrapper wrapper, PassiveScript ps) {

File: zap/src/main/java/org/zaproxy/zap/view/table/AbstractHistoryReferencesTableEntry.java
Patch:
@@ -223,7 +223,7 @@ public static Object getPrototypeValue(Column column) {
             case HREF_TYPE:
                 return Integer.toString(0);
             case HREF_TYPE_INFO:
-                return HrefTypeInfo.getFromType(HistoryReference.TYPE_ZAP_USER);
+                return "Manual";
             case METHOD:
                 return "GET";
             case URL:

File: zap/src/main/java/org/zaproxy/zap/view/table/AbstractHistoryReferencesTableEntry.java
Patch:
@@ -223,7 +223,7 @@ public static Object getPrototypeValue(Column column) {
             case HREF_TYPE:
                 return Integer.toString(0);
             case HREF_TYPE_INFO:
-                return HrefTypeInfo.getFromType(HistoryReference.TYPE_ZAP_USER);
+                return "Manual";
             case METHOD:
                 return "GET";
             case URL:

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Analyser.java
Patch:
@@ -44,6 +44,7 @@
 // ZAP: 2019/07/26 Remove null check in sendAndReceive(HttpMessage). (LGTM Issue)
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2022/06/05 Remove usage of HttpException.
+// ZAP: 2022/06/09 Quote the query component used in the regular expression.
 package org.parosproxy.paros.core.scanner;
 
 import java.io.IOException;
@@ -283,7 +284,7 @@ private String getChildSuffix(StructuralNode node, boolean performRecursiveCheck
         return resultSuffix;
     }
 
-    private String getPathRegex(URI uri) throws URIException {
+    static String getPathRegex(URI uri) throws URIException {
         URI newUri;
         // ZAP: catch CloneNotSupportedException as introduced with version 3.1 of HttpClient
         try {
@@ -302,7 +303,7 @@ private String getPathRegex(URI uri) throws URIException {
 
         sb.append(newUri.toString().replaceAll("\\.", "\\."));
         if (query != null) {
-            String queryPattern = "(\\?" + query + ")?";
+            String queryPattern = "(\\?" + Pattern.quote(query) + ")?";
             sb.append(queryPattern);
         }
 

File: zap/src/main/java/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -41,11 +41,11 @@
 // ZAP: 2020/11/20 Support Send button in response panel in tab mode
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/02/12 Add shortcut key to Send button (Issue 6448).
+// ZAP: 2022/06/08 Fix resizing issues.
 package org.parosproxy.paros.extension.manualrequest;
 
 import java.awt.BorderLayout;
 import java.awt.Component;
-import java.awt.Dimension;
 import java.awt.EventQueue;
 import java.awt.HeadlessException;
 import java.awt.event.KeyEvent;
@@ -68,6 +68,7 @@
 import org.zaproxy.zap.extension.httppanel.InvalidMessageDataException;
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.tab.Tab;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.ZapMenuItem;
 
 /** Send custom crafted messages via HTTP or other TCP based protocols. */
@@ -100,7 +101,7 @@ public ManualRequestEditorDialog(boolean isSendEnabled, String configurationKey)
         this.isSendEnabled = isSendEnabled;
         this.configurationKey = OptionsParamView.BASE_VIEW_KEY + "." + configurationKey + ".";
 
-        this.setPreferredSize(new Dimension(700, 800));
+        this.setPreferredSize(DisplayUtils.getScaledDimension(700, 800));
     }
 
     protected void initialize() {

File: zap/src/main/java/org/parosproxy/paros/view/AbstractParamContainerPanel.java
Patch:
@@ -39,6 +39,7 @@
 // ZAP: 2021/11/19 Remove empty parent nodes.
 // ZAP: 2022/02/12 Show child panel if parent has none.
 // ZAP: 2022/05/11 Use a unique ID to identify the panels instead of their name (Issue 5637).
+// ZAP: 2022/06/08 Fix resizing issues.
 package org.parosproxy.paros.view;
 
 import java.awt.BorderLayout;
@@ -156,8 +157,8 @@ private void initialize() {
         this.setContinuousLayout(true);
         this.setRightComponent(getJPanel1());
         // ZAP: added more space for readability (was 175)
-        this.setDividerLocation(200);
-        this.setDividerSize(3);
+        this.setDividerLocation(DisplayUtils.getScaledSize(200));
+        this.setDividerSize(DisplayUtils.getScaledSize(3));
         this.setResizeWeight(0.3D);
         this.setBorder(
                 javax.swing.BorderFactory.createEtchedBorder(

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyDialog.java
Patch:
@@ -32,6 +32,7 @@
 import org.parosproxy.paros.core.scanner.Category;
 import org.parosproxy.paros.view.AbstractParamDialog;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class PolicyDialog extends AbstractParamDialog {
 
@@ -58,7 +59,7 @@ public PolicyDialog(ExtensionActiveScan extension, PolicyManagerDialog pmd, Scan
 
     private void initialize() {
         this.setTitle(POLICY);
-        this.setSize(750, 420);
+        this.setSize(DisplayUtils.getScaledDimension(750, 420));
         addParamPanel(null, getPolicyAllCategoryPanel(), false);
 
         for (int i = 0; i < Category.getAllNames().length; i++) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyManagerDialog.java
Patch:
@@ -19,7 +19,6 @@
  */
 package org.zaproxy.zap.extension.ascan;
 
-import java.awt.Dimension;
 import java.awt.Frame;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
@@ -41,6 +40,7 @@
 import org.apache.logging.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.SingleColumnTableModel;
 import org.zaproxy.zap.view.StandardFieldsDialog;
 import org.zaproxy.zap.view.widgets.WritableFileChooser;
@@ -63,7 +63,7 @@ public class PolicyManagerDialog extends StandardFieldsDialog {
     private static final Logger logger = LogManager.getLogger(PolicyManagerDialog.class);
 
     public PolicyManagerDialog(Frame owner) {
-        super(owner, "ascan.policymgr.title", new Dimension(512, 400));
+        super(owner, "ascan.policymgr.title", DisplayUtils.getScaledDimension(512, 400));
     }
 
     public void init(ExtensionActiveScan extension) {

File: zap/src/main/java/org/zaproxy/zap/view/AboutPanel.java
Patch:
@@ -20,7 +20,6 @@
 package org.zaproxy.zap.view;
 
 import java.awt.Color;
-import java.awt.Dimension;
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import java.awt.Insets;
@@ -31,6 +30,7 @@
 import javax.swing.JPanel;
 import javax.swing.UIManager;
 import org.parosproxy.paros.Constant;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.FontUtils;
 
 public class AboutPanel extends JPanel {
@@ -80,7 +80,7 @@ public AboutPanel() {
         GridBagConstraints gbcLogo = new GridBagConstraints();
 
         Color backgroundColor = new Color(UIManager.getColor("TextField.background").getRGB());
-        this.setPreferredSize(new Dimension(420, 460));
+        this.setPreferredSize(DisplayUtils.getScaledDimension(420, 460));
         this.setBackground(backgroundColor);
         this.setBorder(BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
 

File: zap/src/main/java/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -41,11 +41,11 @@
 // ZAP: 2020/11/20 Support Send button in response panel in tab mode
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/02/12 Add shortcut key to Send button (Issue 6448).
+// ZAP: 2022/06/08 Fix resizing issues.
 package org.parosproxy.paros.extension.manualrequest;
 
 import java.awt.BorderLayout;
 import java.awt.Component;
-import java.awt.Dimension;
 import java.awt.EventQueue;
 import java.awt.HeadlessException;
 import java.awt.event.KeyEvent;
@@ -68,6 +68,7 @@
 import org.zaproxy.zap.extension.httppanel.InvalidMessageDataException;
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.tab.Tab;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.ZapMenuItem;
 
 /** Send custom crafted messages via HTTP or other TCP based protocols. */
@@ -100,7 +101,7 @@ public ManualRequestEditorDialog(boolean isSendEnabled, String configurationKey)
         this.isSendEnabled = isSendEnabled;
         this.configurationKey = OptionsParamView.BASE_VIEW_KEY + "." + configurationKey + ".";
 
-        this.setPreferredSize(new Dimension(700, 800));
+        this.setPreferredSize(DisplayUtils.getScaledDimension(700, 800));
     }
 
     protected void initialize() {

File: zap/src/main/java/org/parosproxy/paros/view/AbstractParamContainerPanel.java
Patch:
@@ -39,6 +39,7 @@
 // ZAP: 2021/11/19 Remove empty parent nodes.
 // ZAP: 2022/02/12 Show child panel if parent has none.
 // ZAP: 2022/05/11 Use a unique ID to identify the panels instead of their name (Issue 5637).
+// ZAP: 2022/06/08 Fix resizing issues.
 package org.parosproxy.paros.view;
 
 import java.awt.BorderLayout;
@@ -156,8 +157,8 @@ private void initialize() {
         this.setContinuousLayout(true);
         this.setRightComponent(getJPanel1());
         // ZAP: added more space for readability (was 175)
-        this.setDividerLocation(200);
-        this.setDividerSize(3);
+        this.setDividerLocation(DisplayUtils.getScaledSize(200));
+        this.setDividerSize(DisplayUtils.getScaledSize(3));
         this.setResizeWeight(0.3D);
         this.setBorder(
                 javax.swing.BorderFactory.createEtchedBorder(

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyDialog.java
Patch:
@@ -32,6 +32,7 @@
 import org.parosproxy.paros.core.scanner.Category;
 import org.parosproxy.paros.view.AbstractParamDialog;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class PolicyDialog extends AbstractParamDialog {
 
@@ -58,7 +59,7 @@ public PolicyDialog(ExtensionActiveScan extension, PolicyManagerDialog pmd, Scan
 
     private void initialize() {
         this.setTitle(POLICY);
-        this.setSize(750, 420);
+        this.setSize(DisplayUtils.getScaledDimension(750, 420));
         addParamPanel(null, getPolicyAllCategoryPanel(), false);
 
         for (int i = 0; i < Category.getAllNames().length; i++) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyManagerDialog.java
Patch:
@@ -19,7 +19,6 @@
  */
 package org.zaproxy.zap.extension.ascan;
 
-import java.awt.Dimension;
 import java.awt.Frame;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
@@ -41,6 +40,7 @@
 import org.apache.logging.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.SingleColumnTableModel;
 import org.zaproxy.zap.view.StandardFieldsDialog;
 import org.zaproxy.zap.view.widgets.WritableFileChooser;
@@ -63,7 +63,7 @@ public class PolicyManagerDialog extends StandardFieldsDialog {
     private static final Logger logger = LogManager.getLogger(PolicyManagerDialog.class);
 
     public PolicyManagerDialog(Frame owner) {
-        super(owner, "ascan.policymgr.title", new Dimension(512, 400));
+        super(owner, "ascan.policymgr.title", DisplayUtils.getScaledDimension(512, 400));
     }
 
     public void init(ExtensionActiveScan extension) {

File: zap/src/main/java/org/zaproxy/zap/view/AboutPanel.java
Patch:
@@ -20,7 +20,6 @@
 package org.zaproxy.zap.view;
 
 import java.awt.Color;
-import java.awt.Dimension;
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import java.awt.Insets;
@@ -31,6 +30,7 @@
 import javax.swing.JPanel;
 import javax.swing.UIManager;
 import org.parosproxy.paros.Constant;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.FontUtils;
 
 public class AboutPanel extends JPanel {
@@ -80,7 +80,7 @@ public AboutPanel() {
         GridBagConstraints gbcLogo = new GridBagConstraints();
 
         Color backgroundColor = new Color(UIManager.getColor("TextField.background").getRGB());
-        this.setPreferredSize(new Dimension(420, 460));
+        this.setPreferredSize(DisplayUtils.getScaledDimension(420, 460));
         this.setBackground(backgroundColor);
         this.setBorder(BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
 

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Analyser.java
Patch:
@@ -44,6 +44,7 @@
 // ZAP: 2019/07/26 Remove null check in sendAndReceive(HttpMessage). (LGTM Issue)
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2022/06/05 Remove usage of HttpException.
+// ZAP: 2022/06/09 Quote the query component used in the regular expression.
 package org.parosproxy.paros.core.scanner;
 
 import java.io.IOException;
@@ -283,7 +284,7 @@ private String getChildSuffix(StructuralNode node, boolean performRecursiveCheck
         return resultSuffix;
     }
 
-    private String getPathRegex(URI uri) throws URIException {
+    static String getPathRegex(URI uri) throws URIException {
         URI newUri;
         // ZAP: catch CloneNotSupportedException as introduced with version 3.1 of HttpClient
         try {
@@ -302,7 +303,7 @@ private String getPathRegex(URI uri) throws URIException {
 
         sb.append(newUri.toString().replaceAll("\\.", "\\."));
         if (query != null) {
-            String queryPattern = "(\\?" + query + ")?";
+            String queryPattern = "(\\?" + Pattern.quote(query) + ")?";
             sb.append(queryPattern);
         }
 

File: zap/src/main/java/org/zaproxy/zap/view/AbstractMultipleOptionsTablePanel.java
Patch:
@@ -82,7 +82,7 @@ public void tableChanged(TableModelEvent e) {
                                 if (TableModelEvent.ALL_COLUMNS == e.getColumn()
                                         || TableModelEvent.INSERT == e.getType()
                                         || TableModelEvent.DELETE == e.getType()) {
-                                    boolean enabled = getModel().getRowCount() > 0;
+                                    boolean enabled = isEnabled() && getModel().getRowCount() > 0;
 
                                     enableAllButton.setEnabled(enabled);
                                     disableAllButton.setEnabled(enabled);

File: zap/src/main/java/org/zaproxy/zap/network/ZapAuthenticator.java
Patch:
@@ -32,7 +32,9 @@
  * <p>Authenticates to HTTP and SOCKS proxies.
  *
  * @since 2.10.0
+ * @deprecated (2.12.0) No longer in use, it will be removed in a following version.
  */
+@Deprecated
 public class ZapAuthenticator extends Authenticator {
 
     private static final ZapAuthenticator SINGLETON = new ZapAuthenticator();

File: zap/src/main/java/org/zaproxy/zap/network/ZapProxySelector.java
Patch:
@@ -32,7 +32,9 @@
  * ZAP's {@link ProxySelector}.
  *
  * @since 2.10.0
+ * @deprecated (2.12.0) No longer in use, it will be removed in a following version.
  */
+@Deprecated
 public class ZapProxySelector extends ProxySelector {
 
     private static final ProxySelector DEFAULT_PROXY_SELECTOR = ProxySelector.getDefault();

File: zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -263,7 +263,9 @@ public HostProcess(
             ScannerParam scannerParam,
             ConnectionParam connectionParam,
             ScanPolicy scanPolicy,
-            RuleConfigParam ruleConfigParam) {}
+            RuleConfigParam ruleConfigParam) {
+        this(hostAndPort, parentScanner, scannerParam, scanPolicy, ruleConfigParam);
+    }
 
     /**
      * Constructs a {@code HostProcess}.

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -1061,7 +1061,9 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                 List<Plugin> scanners = policy.getPluginFactory().getAllPlugin();
 
                 categoryId = getParam(params, PARAM_CATEGORY_ID, -1);
-                verifyCategoryId(categoryId, PARAM_CATEGORY_ID);
+                if (categoryId != -1) {
+                    verifyCategoryId(categoryId, PARAM_CATEGORY_ID);
+                }
                 resultList = new ApiResponseList(name);
                 for (Plugin scanner : scanners) {
                     if (categoryId == -1 || categoryId == scanner.getCategory()) {

File: zap/src/main/java/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -241,7 +241,7 @@ public void run() {
     private static boolean isInvalid(Alert alert) {
         if (alert.getUri().isEmpty() || alert.getMessage() == null) {
             logger.error(
-                    "Attempting to raise an alert without URI and/or HTTP message, Plugin ID: "
+                    "Attempting to raise an alert without URI or HTTP message, Plugin ID: "
                             + alert.getPluginId()
                             + " Alert Name:"
                             + alert.getName()

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantJSONQuery.java
Patch:
@@ -73,6 +73,9 @@ public boolean isValidContentType(String contentType) {
 
     @Override
     public void parseContent(String content) {
+        if (content.isEmpty()) {
+            return;
+        }
         sr = new SimpleStringReader(content);
         parseObject();
     }

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantJSONQuery.java
Patch:
@@ -73,6 +73,9 @@ public boolean isValidContentType(String contentType) {
 
     @Override
     public void parseContent(String content) {
+        if (content.isEmpty()) {
+            return;
+        }
         sr = new SimpleStringReader(content);
         parseObject();
     }

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ScanPolicy.java
Patch:
@@ -96,9 +96,9 @@ public void setName(String name) {
     }
 
     public void setDefaultThreshold(AlertThreshold defaultThreshold) {
-        if (defaultThreshold == AlertThreshold.OFF || defaultThreshold == AlertThreshold.DEFAULT) {
+        if (defaultThreshold == AlertThreshold.DEFAULT) {
             throw new IllegalArgumentException(
-                    "Default threshold must be one of LOW, MEDIUM, or HIGH.");
+                    "Default threshold must be one of OFF, LOW, MEDIUM, or HIGH.");
         }
         this.defaultThreshold = defaultThreshold;
         for (Plugin plugin : pluginFactory.getAllPlugin()) {
@@ -125,7 +125,6 @@ private AlertThreshold getAlertThresholdFromConfig() {
         String alertThreshold = conf.getString("scanner.level", "");
         if (alertThreshold.isEmpty()
                 || !EnumUtils.isValidEnum(AlertThreshold.class, alertThreshold)
-                || AlertThreshold.OFF.name().equals(alertThreshold)
                 || AlertThreshold.DEFAULT.name().equals(alertThreshold)) {
             logger.warn(
                     "Found illegal value {} for alert threshold, using MEDIUM instead.",

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ScanPolicy.java
Patch:
@@ -96,9 +96,9 @@ public void setName(String name) {
     }
 
     public void setDefaultThreshold(AlertThreshold defaultThreshold) {
-        if (defaultThreshold == AlertThreshold.OFF || defaultThreshold == AlertThreshold.DEFAULT) {
+        if (defaultThreshold == AlertThreshold.DEFAULT) {
             throw new IllegalArgumentException(
-                    "Default threshold must be one of LOW, MEDIUM, or HIGH.");
+                    "Default threshold must be one of OFF, LOW, MEDIUM, or HIGH.");
         }
         this.defaultThreshold = defaultThreshold;
         for (Plugin plugin : pluginFactory.getAllPlugin()) {
@@ -125,7 +125,6 @@ private AlertThreshold getAlertThresholdFromConfig() {
         String alertThreshold = conf.getString("scanner.level", "");
         if (alertThreshold.isEmpty()
                 || !EnumUtils.isValidEnum(AlertThreshold.class, alertThreshold)
-                || AlertThreshold.OFF.name().equals(alertThreshold)
                 || AlertThreshold.DEFAULT.name().equals(alertThreshold)) {
             logger.warn(
                     "Found illegal value {} for alert threshold, using MEDIUM instead.",

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largerequest/ExtensionHttpPanelLargeRequestView.java
Patch:
@@ -31,6 +31,8 @@
 import org.zaproxy.zap.view.HttpPanelManager.HttpPanelDefaultViewSelectorFactory;
 import org.zaproxy.zap.view.HttpPanelManager.HttpPanelViewFactory;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class ExtensionHttpPanelLargeRequestView extends ExtensionAdaptor {
 
     public static final String NAME = "ExtensionHttpPanelLargeRequestView";

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largerequest/LargeRequestStringHttpPanelViewModel.java
Patch:
@@ -23,6 +23,8 @@
 import org.parosproxy.paros.network.HttpHeader;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.request.RequestStringHttpPanelViewModel;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class LargeRequestStringHttpPanelViewModel extends RequestStringHttpPanelViewModel {
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largerequest/LargeRequestUtil.java
Patch:
@@ -22,6 +22,8 @@
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.Message;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class LargeRequestUtil {
 
     public static final int DEFAULT_MIN_CONTENT_LENGTH = 100000;

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largerequest/RequestLargeRequestAllView.java
Patch:
@@ -23,6 +23,8 @@
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.httppanel.component.all.request.HttpRequestAllPanelTextView;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class RequestLargeRequestAllView extends HttpRequestAllPanelTextView {
 
     public static final String NAME = "RequestLargeRequestAllView";

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largerequest/RequestLargeRequestSplitView.java
Patch:
@@ -32,6 +32,8 @@
 import org.zaproxy.zap.extension.httppanel.view.HttpPanelViewModelListener;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpStringHttpPanelViewModel;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class RequestLargeRequestSplitView implements HttpPanelView, HttpPanelViewModelListener {
 
     public static final String NAME = "RequestLargeRequestSplitView";

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largeresponse/ExtensionHttpPanelLargeResponseView.java
Patch:
@@ -31,6 +31,8 @@
 import org.zaproxy.zap.view.HttpPanelManager.HttpPanelDefaultViewSelectorFactory;
 import org.zaproxy.zap.view.HttpPanelManager.HttpPanelViewFactory;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class ExtensionHttpPanelLargeResponseView extends ExtensionAdaptor {
 
     public static final String NAME = "ExtensionHttpPanelLargeResponseView";

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largeresponse/LargeResponseStringHttpPanelViewModel.java
Patch:
@@ -23,6 +23,8 @@
 import org.parosproxy.paros.network.HttpHeader;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.response.ResponseStringHttpPanelViewModel;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class LargeResponseStringHttpPanelViewModel extends ResponseStringHttpPanelViewModel {
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largeresponse/LargeResponseUtil.java
Patch:
@@ -22,6 +22,8 @@
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.Message;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class LargeResponseUtil {
 
     public static final int DEFAULT_MIN_CONTENT_LENGTH = 100000;

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largeresponse/ResponseLargeResponseAllView.java
Patch:
@@ -23,6 +23,8 @@
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.httppanel.component.all.response.HttpResponseAllPanelTextView;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class ResponseLargeResponseAllView extends HttpResponseAllPanelTextView {
 
     public static final String NAME = "ResponseLargeResponseAllView";

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/largeresponse/ResponseLargeResponseSplitView.java
Patch:
@@ -32,6 +32,8 @@
 import org.zaproxy.zap.extension.httppanel.view.HttpPanelViewModelListener;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpStringHttpPanelViewModel;
 
+/** @deprecated (2.12.0) No longer in use. */
+@Deprecated
 public class ResponseLargeResponseSplitView implements HttpPanelView, HttpPanelViewModelListener {
 
     public static final String NAME = "ResponseLargeResponseSplitView";

File: zap/src/main/java/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -382,8 +382,8 @@ public Class<UsernamePasswordAuthenticationCredentials> getAuthenticationCredent
     public ApiDynamicActionImplementor getSetMethodForContextApiAction() {
         return new ApiDynamicActionImplementor(
                 API_METHOD_NAME,
-                new String[] {PARAM_HOSTNAME, PARAM_REALM},
-                new String[] {PARAM_PORT}) {
+                new String[] {PARAM_HOSTNAME},
+                new String[] {PARAM_REALM, PARAM_PORT}) {
 
             @Override
             public void handleAction(JSONObject params) throws ApiException {
@@ -398,7 +398,7 @@ public void handleAction(JSONObject params) throws ApiException {
                     throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_HOSTNAME);
                 }
 
-                if (params.containsKey(PARAM_REALM)) method.realm = params.getString(PARAM_REALM);
+                method.realm = params.optString(PARAM_REALM);
 
                 if (params.containsKey(PARAM_PORT))
                     try {

File: zap/src/main/java/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -382,8 +382,8 @@ public Class<UsernamePasswordAuthenticationCredentials> getAuthenticationCredent
     public ApiDynamicActionImplementor getSetMethodForContextApiAction() {
         return new ApiDynamicActionImplementor(
                 API_METHOD_NAME,
-                new String[] {PARAM_HOSTNAME, PARAM_REALM},
-                new String[] {PARAM_PORT}) {
+                new String[] {PARAM_HOSTNAME},
+                new String[] {PARAM_REALM, PARAM_PORT}) {
 
             @Override
             public void handleAction(JSONObject params) throws ApiException {
@@ -398,7 +398,7 @@ public void handleAction(JSONObject params) throws ApiException {
                     throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_HOSTNAME);
                 }
 
-                if (params.containsKey(PARAM_REALM)) method.realm = params.getString(PARAM_REALM);
+                method.realm = params.optString(PARAM_REALM);
 
                 if (params.containsKey(PARAM_PORT))
                     try {

File: zap/src/main/java/org/zaproxy/zap/utils/Statistics.java
Patch:
@@ -23,10 +23,11 @@
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class Statistics {
 
-    private Map<String, Long> stats = new HashMap<>();
+    private Map<String, Long> stats = new ConcurrentHashMap<>();
 
     public void incCounter(String key) {
         incCounter(key, 1);

File: zap/src/main/java/org/zaproxy/zap/utils/Statistics.java
Patch:
@@ -23,10 +23,11 @@
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class Statistics {
 
-    private Map<String, Long> stats = new HashMap<>();
+    private Map<String, Long> stats = new ConcurrentHashMap<>();
 
     public void incCounter(String key) {
         incCounter(key, 1);

File: zap/src/main/java/org/parosproxy/paros/Constant.java
Patch:
@@ -297,7 +297,7 @@ public final class Constant {
     public static final String FLATPAK_NAME = "flatpak";
     private static final String SNAP_FILE = "meta/snap.yaml";
     public static final String SNAP_NAME = "snapcraft";
-    private static final String WEBSWING_ENVVAR = "WEBSWING_VERSION";
+    private static final String HOME_ENVVAR = "HOME";
     public static final String WEBSWING_NAME = "webswing";
 
     //
@@ -1604,7 +1604,8 @@ public static boolean isInContainer() {
             File snapFile = new File(SNAP_FILE);
             if (isLinux() && containerFile.exists()) {
                 inContainer = true;
-                boolean inWebSwing = System.getenv(WEBSWING_ENVVAR) != null;
+                String home = System.getenv(HOME_ENVVAR);
+                boolean inWebSwing = home != null && home.contains(WEBSWING_NAME);
                 try {
                     containerName =
                             new String(

File: zap/src/main/java/org/parosproxy/paros/Constant.java
Patch:
@@ -297,7 +297,7 @@ public final class Constant {
     public static final String FLATPAK_NAME = "flatpak";
     private static final String SNAP_FILE = "meta/snap.yaml";
     public static final String SNAP_NAME = "snapcraft";
-    private static final String WEBSWING_ENVVAR = "WEBSWING_VERSION";
+    private static final String HOME_ENVVAR = "HOME";
     public static final String WEBSWING_NAME = "webswing";
 
     //
@@ -1604,7 +1604,8 @@ public static boolean isInContainer() {
             File snapFile = new File(SNAP_FILE);
             if (isLinux() && containerFile.exists()) {
                 inContainer = true;
-                boolean inWebSwing = System.getenv(WEBSWING_ENVVAR) != null;
+                String home = System.getenv(HOME_ENVVAR);
+                boolean inWebSwing = home != null && home.contains(WEBSWING_NAME);
                 try {
                     containerName =
                             new String(

File: zap/src/main/java/org/zaproxy/zap/extension/dynssl/ExtensionDynSSL.java
Patch:
@@ -50,6 +50,7 @@
 import org.parosproxy.paros.extension.CommandLineListener;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
+import org.parosproxy.paros.network.SSLConnector;
 import org.parosproxy.paros.security.CachedSslCertifificateServiceImpl;
 import org.parosproxy.paros.security.SslCertificateService;
 
@@ -113,6 +114,8 @@ public void start() {
         if (isCertExpired(getRootCaCertificate())) {
             warnRootCaCertExpired();
         }
+
+        SSLConnector.setSslCertificateService(CachedSslCertifificateServiceImpl.getService());
     }
 
     public void createNewRootCa()

File: zap/src/main/java/org/zaproxy/zap/HeadlessBootstrap.java
Patch:
@@ -52,6 +52,7 @@ public HeadlessBootstrap(CommandLine args) {
      * Initialises the {@code Control} singleton without view and proxy.
      *
      * @return the initialised {@code Control} singleton.
+     * @throws IllegalStateException if an error occurred while initialising the {@code Control}.
      * @see Control#initSingletonWithoutViewAndProxy(org.zaproxy.zap.control.ControlOverrides)
      */
     protected Control initControl() {

File: zap/src/main/java/org/zaproxy/zap/control/CoreFunctionality.java
Patch:
@@ -54,7 +54,7 @@ public final class CoreFunctionality {
     private static List<AbstractPlugin> builtInActiveScanRules;
     private static List<PluginPassiveScanner> builtInPassiveScanRules;
 
-    private CoreFunctionality() {
+    static {
         // Register core event bus publishers asap
         ActiveScanEventPublisher.getPublisher();
         AlertEventPublisher.getPublisher();

File: zap/src/main/java/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -51,6 +51,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/04/13 Issue 6469: Add option to scan null JSON values.
+// ZAP: 2021/09/14 Enable Anti CSRF handling by default.
 package org.parosproxy.paros.core.scanner;
 
 import java.util.ArrayList;
@@ -154,7 +155,7 @@ public class ScannerParam extends AbstractParam {
     private int maxResultsToList = 1000;
     private int maxScansInUI = 5;
     private boolean injectPluginIdInHeader = false;
-    private boolean handleAntiCSRFTokens = false;
+    private boolean handleAntiCSRFTokens = true;
     private boolean promptInAttackMode = true;
     private boolean rescanInAttackMode = true;
     private boolean promptToClearFinishedScans = true;
@@ -234,7 +235,7 @@ protected void parse() {
 
         this.injectPluginIdInHeader = getBoolean(INJECT_PLUGIN_ID_IN_HEADER, false);
 
-        this.handleAntiCSRFTokens = getBoolean(HANDLE_ANTI_CSRF_TOKENS, false);
+        this.handleAntiCSRFTokens = getBoolean(HANDLE_ANTI_CSRF_TOKENS, true);
 
         this.promptInAttackMode = getBoolean(PROMPT_IN_ATTACK_MODE, true);
 

File: zap/src/main/java/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -51,6 +51,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/04/13 Issue 6469: Add option to scan null JSON values.
+// ZAP: 2021/09/14 Enable Anti CSRF handling by default.
 package org.parosproxy.paros.core.scanner;
 
 import java.util.ArrayList;
@@ -154,7 +155,7 @@ public class ScannerParam extends AbstractParam {
     private int maxResultsToList = 1000;
     private int maxScansInUI = 5;
     private boolean injectPluginIdInHeader = false;
-    private boolean handleAntiCSRFTokens = false;
+    private boolean handleAntiCSRFTokens = true;
     private boolean promptInAttackMode = true;
     private boolean rescanInAttackMode = true;
     private boolean promptToClearFinishedScans = true;
@@ -234,7 +235,7 @@ protected void parse() {
 
         this.injectPluginIdInHeader = getBoolean(INJECT_PLUGIN_ID_IN_HEADER, false);
 
-        this.handleAntiCSRFTokens = getBoolean(HANDLE_ANTI_CSRF_TOKENS, false);
+        this.handleAntiCSRFTokens = getBoolean(HANDLE_ANTI_CSRF_TOKENS, true);
 
         this.promptInAttackMode = getBoolean(PROMPT_IN_ATTACK_MODE, true);
 

File: buildSrc/src/main/java/org/zaproxy/zap/tasks/CreateTagAndGitHubRelease.java
Patch:
@@ -43,9 +43,6 @@ public CreateTagAndGitHubRelease() {
         setDescription("Creates a tag and GitHub release.");
     }
 
-    @Input
-    public abstract Property<GitHubUser> getUser();
-
     @Input
     public abstract Property<String> getTagMessage();
 

File: zap/src/main/java/org/zaproxy/zap/ZAP.java
Patch:
@@ -52,7 +52,7 @@ public class ZAP {
     /**
      * ZAP can be run in 4 different ways: cmdline: an inline process that exits when it completes
      * the tasks specified by the parameters daemon: a single process with no Swing UI, typically
-     * run as a background process desktop: a Swing based desktop tool (which is how is originated,
+     * run as a background process desktop: a Swing based desktop tool (which is how it originated,
      * as a fork of Paros Proxy) zaas: a highly scalable distributed system with a web based UI, aka
      * 'ZAP as a Service' (this is 'work in progress')
      */

File: zap/src/main/java/org/zaproxy/zap/ZAP.java
Patch:
@@ -52,7 +52,7 @@ public class ZAP {
     /**
      * ZAP can be run in 4 different ways: cmdline: an inline process that exits when it completes
      * the tasks specified by the parameters daemon: a single process with no Swing UI, typically
-     * run as a background process desktop: a Swing based desktop tool (which is how is originated,
+     * run as a background process desktop: a Swing based desktop tool (which is how it originated,
      * as a fork of Paros Proxy) zaas: a highly scalable distributed system with a web based UI, aka
      * 'ZAP as a Service' (this is 'work in progress')
      */

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/PopupPasteMenu.java
Patch:
@@ -19,7 +19,7 @@
  */
 package org.zaproxy.zap.extension.stdmenus;
 
-import java.awt.*;
+import java.awt.Component;
 import javax.swing.text.JTextComponent;
 import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
 import org.parosproxy.paros.Constant;

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/PopupPasteMenu.java
Patch:
@@ -19,7 +19,7 @@
  */
 package org.zaproxy.zap.extension.stdmenus;
 
-import java.awt.*;
+import java.awt.Component;
 import javax.swing.text.JTextComponent;
 import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
 import org.parosproxy.paros.Constant;

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestBodyStringHttpPanelViewModel.java
Patch:
@@ -38,6 +38,6 @@ public void setData(String data) {
             return;
         }
 
-        httpMessage.getRequestBody().setBody(data);
+        httpMessage.setRequestBody(data);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestStringHttpPanelViewModel.java
Patch:
@@ -64,6 +64,6 @@ public void setData(String data) {
         if (parts.length > 1) {
             body = data.substring(parts[0].length() + 2);
         }
-        httpMessage.getRequestBody().setBody(body);
+        httpMessage.setRequestBody(body);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseBodyStringHttpPanelViewModel.java
Patch:
@@ -38,6 +38,6 @@ public void setData(String data) {
             return;
         }
 
-        httpMessage.getResponseBody().setBody(data);
+        httpMessage.setResponseBody(data);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseStringHttpPanelViewModel.java
Patch:
@@ -64,6 +64,6 @@ public void setData(String data) {
         if (parts.length > 1) {
             body = data.substring(parts[0].length() + 2);
         }
-        httpMessage.getResponseBody().setBody(body);
+        httpMessage.setResponseBody(body);
     }
 }

File: zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/BodyStringHttpPanelViewModelTest.java
Patch:
@@ -67,6 +67,8 @@ void setup() {
 
     protected abstract void prepareMessage();
 
+    protected abstract void verifyBodySet(HttpMessage message, String body);
+
     @Test
     void shouldGetEmptyDataFromNullMessage() {
         // Given
@@ -104,7 +106,7 @@ void shouldSetDataIntoBodyAsContent() {
         // When
         model.setData(otherBodyContent);
         // Then
-        verify(body).setBody(otherBodyContent);
+        verifyBodySet(message, otherBodyContent);
         verify(header, times(0)).setContentLength(anyInt());
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestBodyStringHttpPanelViewModel.java
Patch:
@@ -38,6 +38,6 @@ public void setData(String data) {
             return;
         }
 
-        httpMessage.getRequestBody().setBody(data);
+        httpMessage.setRequestBody(data);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestStringHttpPanelViewModel.java
Patch:
@@ -64,6 +64,6 @@ public void setData(String data) {
         if (parts.length > 1) {
             body = data.substring(parts[0].length() + 2);
         }
-        httpMessage.getRequestBody().setBody(body);
+        httpMessage.setRequestBody(body);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseBodyStringHttpPanelViewModel.java
Patch:
@@ -38,6 +38,6 @@ public void setData(String data) {
             return;
         }
 
-        httpMessage.getResponseBody().setBody(data);
+        httpMessage.setResponseBody(data);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseStringHttpPanelViewModel.java
Patch:
@@ -64,6 +64,6 @@ public void setData(String data) {
         if (parts.length > 1) {
             body = data.substring(parts[0].length() + 2);
         }
-        httpMessage.getResponseBody().setBody(body);
+        httpMessage.setResponseBody(body);
     }
 }

File: zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/BodyStringHttpPanelViewModelTest.java
Patch:
@@ -67,6 +67,8 @@ void setup() {
 
     protected abstract void prepareMessage();
 
+    protected abstract void verifyBodySet(HttpMessage message, String body);
+
     @Test
     void shouldGetEmptyDataFromNullMessage() {
         // Given
@@ -104,7 +106,7 @@ void shouldSetDataIntoBodyAsContent() {
         // When
         model.setData(otherBodyContent);
         // Then
-        verify(body).setBody(otherBodyContent);
+        verifyBodySet(message, otherBodyContent);
         verify(header, times(0)).setContentLength(anyInt());
     }
 }

File: zap/src/main/java/org/parosproxy/paros/model/OptionsParam.java
Patch:
@@ -42,6 +42,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/25 Change the default value of userDirectory from null to the user's home directory.
 package org.parosproxy.paros.model;
 
 import ch.csnc.extension.util.OptionsParamExperimentalSliSupport;
@@ -50,6 +51,7 @@
 import java.util.Map;
 import java.util.Vector;
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.lang3.SystemUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.parosproxy.paros.common.AbstractParam;
@@ -92,7 +94,7 @@ public class OptionsParam extends AbstractParam {
     private Vector<AbstractParam> paramSetList = new Vector<>();
     private Map<Class<? extends AbstractParam>, AbstractParam> abstractParamsMap = new HashMap<>();
     private boolean gui = true;
-    private File userDirectory = null;
+    private File userDirectory = SystemUtils.getUserHome();
 
     public OptionsParam() {}
 

File: zap/src/main/java/org/apache/commons/httpclient/HttpMethodBase.java
Patch:
@@ -1393,7 +1393,7 @@ private void putAllCookiesInASingleHeader(String host, CookieSpec matcher,
     	LOG.trace("enter putAllCookiesInASingleHeader(String host, CookieSpec matcher, Cookie[] cookies)" );
     	
         //use a map to make sure we only have one cookie per name
-        HashMap<String, Cookie> mergedCookies = new HashMap<String, Cookie>();
+        HashMap<String, Cookie> mergedCookies = new HashMap<>();
         Header[] cookieLineHeaders = getRequestHeaderGroup().getHeaders(HttpHeader.COOKIE);
         for (Header cookieLineHeader : cookieLineHeaders) {
             List<Cookie> cookiesHeader = parseCookieHeader(host, cookieLineHeader.getValue());
@@ -1432,7 +1432,7 @@ static List<Cookie> parseCookieHeader(String host, String cookieHeaderValue) {
             return Collections.emptyList();
         }
         String[] cookies = cookieHeaderValue.split(";");
-        List<Cookie> cookiesList = new ArrayList<Cookie>();
+        List<Cookie> cookiesList = new ArrayList<>();
         for (String cookie : cookies){
             String[] parts = cookie.split("=");
             //manage empty value

File: zap/src/main/java/org/apache/commons/httpclient/HttpMethodDirector.java
Patch:
@@ -710,7 +710,7 @@ private boolean processRedirectResponse(final HttpMethod method)
 
         if (this.params.isParameterFalse(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS)) {
             if (this.redirectLocations == null) {
-                this.redirectLocations = new HashSet<URI>();
+                this.redirectLocations = new HashSet<>();
             }
             this.redirectLocations.add(currentUri);
             try {

File: zap/src/main/java/org/parosproxy/paros/CommandLine.java
Patch:
@@ -47,6 +47,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/10/09 Issue 5619: Ensure -configfile maintains key order
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros;
 
 import java.io.File;
@@ -414,7 +415,7 @@ private boolean parseKeywords(String[] args, int i) throws Exception {
             Properties prop =
                     new Properties() {
                         // Override methods to ensure keys returned in order
-                        List<Object> orderedKeys = new ArrayList<Object>();
+                        List<Object> orderedKeys = new ArrayList<>();
                         private static final long serialVersionUID = 1L;
 
                         @Override

File: zap/src/main/java/org/parosproxy/paros/control/Control.java
Patch:
@@ -83,6 +83,7 @@
 // 2016).
 // ZAP: 2020/11/23 Allow to initialise the singleton with an ExtensionLoader for tests.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove empty statement.
 package org.parosproxy.paros.control;
 
 import java.awt.Desktop;
@@ -114,7 +115,7 @@ public enum Mode {
         protect,
         standard,
         attack
-    };
+    }
 
     private static Logger log = LogManager.getLogger(Control.class);
 

File: zap/src/main/java/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -54,6 +54,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.control;
 
 import java.awt.EventQueue;
@@ -363,7 +364,7 @@ private void openFileBasedSession() {
 
     private void openDbBasedSession() {
         try {
-            List<String> sessionList = new ArrayList<String>();
+            List<String> sessionList = new ArrayList<>();
             for (RecordSession rs : model.getDb().getTableSession().listSessions()) {
                 sessionList.add("" + rs.getSessionId());
             }

File: zap/src/main/java/org/parosproxy/paros/core/scanner/MultipartFormParameter.java
Patch:
@@ -25,7 +25,7 @@ public static enum Type {
         GENERAL,
         FILE_NAME,
         FILE_CONTENT_TYPE
-    };
+    }
 
     private String name;
     private String value;

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Plugin.java
Patch:
@@ -33,6 +33,7 @@
 // ZAP: 2017/07/12 and 2017/09/21 JavaDoc tweaks.
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2021/05/14 Remove empty statement.
 package org.parosproxy.paros.core.scanner;
 
 import java.util.Date;
@@ -64,7 +65,7 @@ public enum AlertThreshold {
         LOW,
         MEDIUM,
         HIGH
-    };
+    }
 
     public enum AttackStrength {
         /**
@@ -76,7 +77,7 @@ public enum AttackStrength {
         MEDIUM,
         HIGH,
         INSANE
-    };
+    }
 
     /**
      * Unique Paros ID of this plugin.

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -51,6 +51,7 @@
 // ZAP: 2020/09/23 Add functionality for custom error pages handling (Issue 9).
 // ZAP: 2020/11/17 Use new TechSet#getAllTech().
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.core.scanner;
 
 import java.security.InvalidParameterException;
@@ -110,7 +111,7 @@ public class Scanner implements Runnable {
     private boolean scanChildren = true;
     private User user = null;
     private TechSet techSet;
-    private Set<ScriptCollection> scriptCollections = new HashSet<ScriptCollection>();
+    private Set<ScriptCollection> scriptCollections = new HashSet<>();
     private List<ScanFilter> scanFilters = new ArrayList<>();
     private int id;
 
@@ -249,7 +250,7 @@ public void scan(Target target) {
                     }
                 }
             } else {
-                Map<String, HostProcess> processMap = new HashMap<String, HostProcess>();
+                Map<String, HostProcess> processMap = new HashMap<>();
                 for (StructuralNode node : nodes) {
                     // Loop through the nodes creating new HostProcesss's as required
                     String hostAndPort = getHostAndPort(node);

File: zap/src/main/java/org/parosproxy/paros/core/scanner/ScannerListener.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/12/10 Issue 5278: Adding filtered messages to active scan panel.
+// ZAP: 2021/05/14 Remove empty statement.
 package org.parosproxy.paros.core.scanner;
 
 import org.parosproxy.paros.network.HttpMessage;
@@ -49,5 +50,5 @@ public interface ScannerListener {
      * @param msg
      * @param reason
      */
-    default void filteredMessage(HttpMessage msg, String reason) {};
+    default void filteredMessage(HttpMessage msg, String reason) {}
 }

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantHeader.java
Patch:
@@ -86,7 +86,7 @@ public class VariantHeader implements Variant {
     };
     // a hashset of (lowercase) headers that we can look up quickly and easily
     private static final HashSet<String> NON_INJECTABLE_HEADERS =
-            new HashSet<String>(Arrays.asList(injectablesTempArray));
+            new HashSet<>(Arrays.asList(injectablesTempArray));
 
     /**
      * The list of parameters (that is, headers) extracted from the request header of the message,

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java
Patch:
@@ -55,7 +55,7 @@ public class VariantMultipartFormParameters implements Variant {
     // insensitive & DOTALL, and hit "test")
 
     private List<NameValuePair> params = Collections.emptyList();
-    private List<MultipartFormParameter> multiPartParams = new ArrayList<MultipartFormParameter>();
+    private List<MultipartFormParameter> multiPartParams = new ArrayList<>();
 
     @Override
     public void setMessage(HttpMessage msg) {

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantUserDefined.java
Patch:
@@ -30,7 +30,7 @@
 
 public class VariantUserDefined implements Variant {
 
-    private static Map<String, int[][]> injectionPointMap = new HashMap<String, int[][]>();
+    private static Map<String, int[][]> injectionPointMap = new HashMap<>();
 
     private int headerLength;
     private int bodyLength;
@@ -63,7 +63,7 @@ public void setMessage(HttpMessage msg) {
 
     @Override
     public List<NameValuePair> getParamList() {
-        List<NameValuePair> list = new ArrayList<NameValuePair>();
+        List<NameValuePair> list = new ArrayList<>();
         if (this.injectionPoints != null) {
             for (int i = 0; i < this.injectionPoints.length; i++) {
                 if (isInHeader(this.injectionPoints[i]) || isInBody(this.injectionPoints[i])) {

File: zap/src/main/java/org/parosproxy/paros/extension/history/ProxyListenerLogEventPublisher.java
Patch:
@@ -72,7 +72,7 @@ private static synchronized void createPublisher() {
     }
 
     public void publishHrefAddedEvent(HistoryReference href) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.put(FIELD_HISTORY_REFERENCE_ID, Integer.toString(href.getHistoryId()));
         map.put(FIELD_URI, href.getURI().toString());
         map.put(FIELD_METHOD, href.getMethod());

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsConnectionPanel.java
Patch:
@@ -42,6 +42,7 @@
 // ZAP: 2020/03/24 Remove hardcoded white background on some fields (part of Issue 5542).
 // ZAP: 2020/03/25 Remove hardcoded colour in titled borders (Issue 5542).
 // ZAP: 2020/04/20 Add SocksProxyPanel (Issue 29).
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.extension.option;
 
 import java.awt.BorderLayout;
@@ -488,7 +489,7 @@ private ZapPortNumberSpinner getTxtProxyChainPort() {
 
     private JComboBox<String> getCommonUserAgents() {
         if (commonUserAgents == null) {
-            commonUserAgents = new JComboBox<String>(CommonUserAgents.getNames());
+            commonUserAgents = new JComboBox<>(CommonUserAgents.getNames());
             if (commonUserAgents.getItemCount() == 0) {
                 commonUserAgents.setEnabled(false);
             } else {

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsDatabasePanel.java
Patch:
@@ -210,7 +210,7 @@ private JCheckBox getCheckBoxNewSessionPrompt() {
 
     private JComboBox<String> comboNewSessionOption() {
         if (comboNewSessionOption == null) {
-            comboNewSessionOption = new JComboBox<String>();
+            comboNewSessionOption = new JComboBox<>();
             // Note that these need to be in the order specified in
             // org.parosproxy.paros.common.AbstractParam.DatabaseParam
             comboNewSessionOption.addItem(

File: zap/src/main/java/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -70,6 +70,7 @@
 // ZAP: 2020/08/17 Changed to use getTreePath(msg) method
 // ZAP: 2020/11/02 Do not get leaf name if finding branch nodes.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove empty statement and add missing override annotation.
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -106,7 +107,7 @@ public class SiteMap extends SortedTreeModel {
     private enum EventType {
         ADD,
         REMOVE
-    };
+    }
 
     private static Map<Integer, SiteNode> hrefMap = new HashMap<>();
 
@@ -867,6 +868,7 @@ private int findIndexFor(SiteNode child, SiteNode parent, int idx1, int idx2) {
 }
 
 class SiteNodeStringComparator implements Comparator<SiteNode> {
+    @Override
     public int compare(SiteNode sn1, SiteNode sn2) {
         String s1 = sn1.getName();
         String s2 = sn2.getName();

File: zap/src/main/java/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -57,6 +57,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -89,7 +90,7 @@ public class SiteNode extends DefaultMutableTreeNode {
     private Vector<HistoryReference> pastHistoryList = new Vector<>(10);
     // ZAP: Support for linking Alerts to SiteNodes
     private SiteMap siteMap = null;
-    private Set<Alert> alerts = Collections.synchronizedSet(new HashSet<Alert>());
+    private Set<Alert> alerts = Collections.synchronizedSet(new HashSet<>());
     private boolean justSpidered = false;
     // private boolean justAJAXSpidered = false;
     private ArrayList<String> icons = null;
@@ -164,7 +165,7 @@ public void removeCustomIcon(String resourceName) {
      * @since 2.6.0
      */
     public List<ImageIcon> getCustomIcons() {
-        List<ImageIcon> iconList = new ArrayList<ImageIcon>();
+        List<ImageIcon> iconList = new ArrayList<>();
         if (justSpidered) {
             iconList.add(new ImageIcon(Constant.class.getResource("/resource/icon/10/spider.png")));
         }

File: zap/src/main/java/org/parosproxy/paros/network/HtmlParameter.java
Patch:
@@ -29,13 +29,13 @@ public enum Type {
         url,
         header,
         multipart
-    };
+    }
 
     public enum Flags {
         anticsrf,
         session,
         structural
-    };
+    }
 
     private String name;
     private String value;

File: zap/src/main/java/org/parosproxy/paros/network/HttpResponseHeader.java
Patch:
@@ -41,6 +41,7 @@
 // ZAP: 2019/12/09 Address deprecation of getHeaders(String) Vector method.
 // ZAP: 2020/11/10 Add convenience method isCss().
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.network;
 
 import java.net.HttpCookie;
@@ -355,7 +356,7 @@ private List<HttpCookie> parseCookieString(String c, String defaultDomain) {
                 }
             }
         }
-        return new ArrayList<HttpCookie>();
+        return new ArrayList<>();
     }
 
     /**

File: zap/src/main/java/org/parosproxy/paros/view/MainMenuBar.java
Patch:
@@ -40,6 +40,7 @@
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/04/08 Remove/fix boilerplate javadocs, and un-necessary fully qualified method return
 // types.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.view;
 
 import java.awt.event.ActionEvent;
@@ -136,7 +137,7 @@ private JMenuItem getMenuEditZAPMode() {
             menuZapMode = new JMenu(Constant.messages.getString("menu.edit.zapmode"));
             menuZapModeGroup = new ButtonGroup();
             JRadioButtonMenuItem newButton;
-            menuZapModeMap = new HashMap<Mode, JRadioButtonMenuItem>();
+            menuZapModeMap = new HashMap<>();
             for (Mode modeType : Mode.values()) {
                 newButton = addZAPModeMenuItem(modeType);
                 menuZapModeGroup.add(newButton);

File: zap/src/main/java/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove empty statement.
 package org.parosproxy.paros.view;
 
 import java.awt.BorderLayout;
@@ -123,7 +124,7 @@ private JToolBar getToolBar() {
                         @Override
                         public void actionPerformed(java.awt.event.ActionEvent e) {
                             getTxtOutput().setText("");
-                        };
+                        }
                     });
 
             mainToolBar.add(clearButton);

File: zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java
Patch:
@@ -83,12 +83,12 @@ public static enum AuthCheckingStrategy {
         EACH_REQ,
         EACH_REQ_RESP,
         POLL_URL
-    };
+    }
 
     public static enum AuthPollFrequencyUnits {
         REQUESTS,
         SECONDS
-    };
+    }
 
     private AuthCheckingStrategy authCheckingStrategy = AuthCheckingStrategy.EACH_RESP;
 

File: zap/src/main/java/org/zaproxy/zap/authentication/GenericAuthenticationCredentials.java
Patch:
@@ -48,7 +48,7 @@ public class GenericAuthenticationCredentials implements AuthenticationCredentia
     public GenericAuthenticationCredentials(String[] paramNames) {
         super();
         this.paramNames = paramNames;
-        this.paramValues = new HashMap<String, String>(paramNames.length);
+        this.paramValues = new HashMap<>(paramNames.length);
     }
 
     public String getParam(String paramName) {
@@ -79,7 +79,7 @@ public void decode(String encodedCredentials) {
     public ApiResponse getApiResponseRepresentation() {
         Map<String, String> values = new HashMap<>(paramValues);
         values.put("type", API_NAME);
-        return new ApiResponseSet<String>("credentials", values);
+        return new ApiResponseSet<>("credentials", values);
     }
 
     /** The Options Panel used for configuring a {@link GenericAuthenticationCredentials}. */

File: zap/src/main/java/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -225,7 +225,7 @@ public ApiResponse getApiResponseRepresentation() {
             Map<String, String> values = new HashMap<>();
             values.put("type", API_NAME);
             values.put("sessionName", selectedSession != null ? selectedSession.getName() : "");
-            return new ApiResponseSet<String>("credentials", values);
+            return new ApiResponseSet<>("credentials", values);
         }
     }
 

File: zap/src/main/java/org/zaproxy/zap/authentication/UsernamePasswordAuthenticationCredentials.java
Patch:
@@ -211,7 +211,7 @@ public ApiResponse getApiResponseRepresentation() {
         values.put("type", API_NAME);
         values.put("username", username);
         values.put("password", password);
-        return new ApiResponseSet<String>("credentials", values);
+        return new ApiResponseSet<>("credentials", values);
     }
 
     private static final String ACTION_SET_CREDENTIALS = "formBasedAuthenticationCredentials";

File: zap/src/main/java/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -168,7 +168,7 @@ public enum Validity {
             INVALID_MANIFEST,
             /** The add-on declared a missing/invalid library. */
             INVALID_LIB,
-        };
+        }
 
         private final Validity validity;
         private final Exception exception;

File: zap/src/main/java/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -808,7 +808,7 @@ private <T> List<ClassNameWrapper> getClassNames(String packageName, Class<T> cl
      * @see #getExtensions(AddOn)
      */
     public List<Extension> getExtensions() {
-        List<Extension> list = new ArrayList<Extension>();
+        List<Extension> list = new ArrayList<>();
         for (AddOn addOn : getAddOnCollection().getAddOns()) {
             list.addAll(getExtensions(addOn));
         }

File: zap/src/main/java/org/zaproxy/zap/db/sql/DbSQL.java
Patch:
@@ -58,7 +58,7 @@ public class DbSQL implements DatabaseListener {
 
     private static final Logger logger = LogManager.getLogger(DbSQL.class);
 
-    private Map<String, StatementPool> stmtPool = new HashMap<String, StatementPool>();
+    private Map<String, StatementPool> stmtPool = new HashMap<>();
 
     public static DbSQL getSingleton() {
         if (singleton == null) {
@@ -236,8 +236,8 @@ public void releasePreparedStatement(SqlPreparedStatementWrapper psw) {
     private class StatementPool {
         private static final int MAX_FREE_POOL_SIZE = 5;
 
-        private Deque<PreparedStatement> inUsePool = new ConcurrentLinkedDeque<PreparedStatement>();
-        private Deque<PreparedStatement> freePool = new ConcurrentLinkedDeque<PreparedStatement>();
+        private Deque<PreparedStatement> inUsePool = new ConcurrentLinkedDeque<>();
+        private Deque<PreparedStatement> freePool = new ConcurrentLinkedDeque<>();
 
         public SqlPreparedStatementWrapper getPreparedStatement(String key, String sql)
                 throws SQLException {

File: zap/src/main/java/org/zaproxy/zap/db/sql/HsqldbDatabaseServer.java
Patch:
@@ -29,9 +29,8 @@
 import java.util.Properties;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import org.parosproxy.paros.db.DatabaseServer;
 
-public class HsqldbDatabaseServer extends SqlDatabaseServer implements DatabaseServer {
+public class HsqldbDatabaseServer extends SqlDatabaseServer {
 
     public static final int DEFAULT_SERVER_PORT = 9001;
 

File: zap/src/main/java/org/zaproxy/zap/db/sql/SqlTableSession.java
Patch:
@@ -80,7 +80,7 @@ public List<RecordSession> listSessions() throws DatabaseException {
         SqlPreparedStatementWrapper psList = null;
         try {
             psList = DbSQL.getSingleton().getPreparedStatement("session.ps.list");
-            List<RecordSession> result = new ArrayList<RecordSession>();
+            List<RecordSession> result = new ArrayList<>();
             try (ResultSet rs = psList.getPs().executeQuery()) {
                 RecordSession ra = build(rs);
                 while (ra != null) {

File: zap/src/main/java/org/zaproxy/zap/extension/ExtensionPopupMenu.java
Patch:
@@ -200,7 +200,7 @@ public int compare(
                                 return -1;
                             }
                             return 0;
-                        };
+                        }
                     });
 
             for (int i = 0; i < components.size(); i++) {

File: zap/src/main/java/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -855,7 +855,7 @@ public String getXml(SiteNode site) {
         StringBuilder xml = new StringBuilder();
         xml.append("<alerts>");
         List<Alert> alerts = site.getAlerts();
-        SortedSet<String> handledAlerts = new TreeSet<String>();
+        SortedSet<String> handledAlerts = new TreeSet<>();
 
         for (int i = 0; i < alerts.size(); i++) {
             Alert alert = alerts.get(i);

File: zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -265,7 +265,7 @@ public boolean requestHasToken(HttpMessage msg) {
     public boolean requestHasToken(String reqBody) {
         Set<String> values;
         synchronized (valueToToken) {
-            values = Collections.unmodifiableSet(new HashSet<String>(valueToToken.keySet()));
+            values = Collections.unmodifiableSet(new HashSet<>(valueToToken.keySet()));
         }
         for (String token : values) {
             if (reqBody.indexOf(token) >= 0) {
@@ -284,7 +284,7 @@ private List<AntiCsrfToken> getTokens(String reqBody, String targetUrl) {
         List<AntiCsrfToken> tokens = new ArrayList<>();
         Set<String> values;
         synchronized (valueToToken) {
-            values = Collections.unmodifiableSet(new HashSet<String>(valueToToken.keySet()));
+            values = Collections.unmodifiableSet(new HashSet<>(valueToToken.keySet()));
         }
 
         for (String value : values) {

File: zap/src/main/java/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -65,14 +65,14 @@ public enum Format {
         JSONP,
         UI,
         OTHER
-    };
+    }
 
     public enum RequestType {
         action,
         view,
         other,
         pconn
-    };
+    }
 
     /**
      * The custom domain to access the ZAP API while proxying through ZAP.
@@ -112,7 +112,7 @@ public enum RequestType {
 
     private Map<String, ApiImplementor> shortcuts = new HashMap<>();
 
-    private Map<String, Nonce> nonces = Collections.synchronizedMap(new HashMap<String, Nonce>());
+    private Map<String, Nonce> nonces = Collections.synchronizedMap(new HashMap<>());
 
     /**
      * The options for the API.

File: zap/src/main/java/org/zaproxy/zap/extension/api/ApiDynamicActionImplementor.java
Patch:
@@ -72,6 +72,6 @@ private static ApiResponseSet<String> buildParamMap(String paramName, boolean ma
         Map<String, String> m = new HashMap<>();
         m.put("name", paramName);
         m.put("mandatory", mandatory ? "true" : "false");
-        return new ApiResponseSet<String>("param", m);
+        return new ApiResponseSet<>("param", m);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java
Patch:
@@ -345,7 +345,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
     }
 
     private void addExcludeToContext(Context context, String regex) {
-        List<String> incRegexes = new ArrayList<String>(context.getIncludeInContextRegexs());
+        List<String> incRegexes = new ArrayList<>(context.getIncludeInContextRegexs());
         if (incRegexes.remove(regex)) {
             // Its already explicitly included, removing it from the include list is safer and more
             // useful
@@ -502,7 +502,7 @@ private ApiResponse buildResponseFromContext(Context c) {
                 "postParameterParserClass", c.getPostParamParser().getClass().getCanonicalName());
         fields.put("postParameterParserConfig", c.getPostParamParser().getConfig());
 
-        return new ApiResponseSet<String>("context", fields);
+        return new ApiResponseSet<>("context", fields);
     }
 
     private String jsonEncodeList(List<String> list) {

File: zap/src/main/java/org/zaproxy/zap/extension/api/GoAPIGenerator.java
Patch:
@@ -215,7 +215,7 @@ private void createDirAndFile(Path path) throws IOException {
 
     // Writes the function arguments
     private void writeOutArgs(List<ApiParameter> parameters, Writer out) throws IOException {
-        ArrayList<String> args = new ArrayList<String>();
+        ArrayList<String> args = new ArrayList<>();
         for (ApiParameter parameter : parameters) {
             String name = parameter.getName();
             if (name.equalsIgnoreCase("boolean")) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -92,7 +92,7 @@ public ActiveScanController(ExtensionActiveScan extension) {
         this.activeScansLock = new ReentrantLock();
         this.extension = extension;
         this.activeScanMap = new HashMap<>();
-        this.activeScanList = new ArrayList<ActiveScan>();
+        this.activeScanList = new ArrayList<>();
     }
 
     public void setExtAlert(ExtensionAlert extAlert) {
@@ -221,7 +221,7 @@ public ActiveScan getLastScan() {
 
     @Override
     public List<ActiveScan> getAllScans() {
-        List<ActiveScan> list = new ArrayList<ActiveScan>();
+        List<ActiveScan> list = new ArrayList<>();
         activeScansLock.lock();
         try {
             for (ActiveScan scan : activeScanList) {
@@ -235,7 +235,7 @@ public List<ActiveScan> getAllScans() {
 
     @Override
     public List<ActiveScan> getActiveScans() {
-        List<ActiveScan> list = new ArrayList<ActiveScan>();
+        List<ActiveScan> list = new ArrayList<>();
         activeScansLock.lock();
         try {
             for (ActiveScan scan : activeScanList) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/AttackModeScanner.java
Patch:
@@ -63,7 +63,7 @@ public class AttackModeScanner implements EventConsumer {
 
     private Logger log = LogManager.getLogger(AttackModeScanner.class);
 
-    private List<SiteNode> nodeStack = new ArrayList<SiteNode>();
+    private List<SiteNode> nodeStack = new ArrayList<>();
 
     public AttackModeScanner(ExtensionActiveScan extension) {
         this.extension = extension;
@@ -257,7 +257,7 @@ private ExtensionAlert getExtensionAlert() {
     private class AttackModeThread implements Runnable, ScannerListener, AttackModeScannerThread {
 
         private int scannerCount = 4;
-        private List<Scanner> scanners = new ArrayList<Scanner>();
+        private List<Scanner> scanners = new ArrayList<>();
         private AttackScan ascanWrapper;
         private boolean running = false;
 
@@ -336,7 +336,7 @@ public void run() {
         @Override
         public void scannerComplete(int id) {
             // Clear so we can attack the next node
-            List<Scanner> stoppedScanners = new ArrayList<Scanner>();
+            List<Scanner> stoppedScanners = new ArrayList<>();
             synchronized (this.scanners) {
                 for (Scanner scanner : this.scanners) {
                     if (scanner.isStop()) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ChallengeCallbackAPI.java
Patch:
@@ -57,7 +57,7 @@ public abstract class ChallengeCallbackAPI extends ApiImplementor {
     // The registered callbacks for this API
     // Use a synchronized collection
     private final Map<String, RegisteredCallback> regCallbacks =
-            Collections.synchronizedMap(new TreeMap<String, RegisteredCallback>());
+            Collections.synchronizedMap(new TreeMap<>());
 
     /** Default constructor */
     public ChallengeCallbackAPI() {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -808,7 +808,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
     /** Use the save method to launch a scan */
     @Override
     public void save() {
-        List<Object> contextSpecificObjects = new ArrayList<Object>();
+        List<Object> contextSpecificObjects = new ArrayList<>();
 
         techTreeState = getTechTree().getTechSet();
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -101,7 +101,7 @@ public class ExtensionActiveScan extends ExtensionAdaptor
     private CustomScanDialog customScanDialog = null;
     private PolicyManagerDialog policyManagerDialog = null;
     private PolicyManager policyManager = null;
-    private List<CustomScanPanel> customScanPanels = new ArrayList<CustomScanPanel>();
+    private List<CustomScanPanel> customScanPanels = new ArrayList<>();
 
     private List<String> excludeList = Collections.emptyList();
 
@@ -601,7 +601,7 @@ public void showCustomScanDialog(Target target) {
             // Work out the tabs
             String[] tabs = CustomScanDialog.STD_TAB_LABELS;
             if (this.customScanPanels.size() > 0) {
-                List<String> tabList = new ArrayList<String>();
+                List<String> tabList = new ArrayList<>();
                 for (String str : CustomScanDialog.STD_TAB_LABELS) {
                     tabList.add(str);
                 }

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/FilterPanel.java
Patch:
@@ -465,7 +465,7 @@ private void populateTagsInFilterPanel(Target target) {
                 }
             }
         }
-        this.setAllTags(new ArrayList<String>(tags));
+        this.setAllTags(new ArrayList<>(tags));
     }
 
     public String validateFields() {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -472,7 +472,7 @@ private JTable getTableTest() {
             tableTest.setAutoCreateRowSorter(true);
 
             // Default sort by name (column 0)
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             tableTest.getRowSorter().setSortKeys(sortKeys);
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -95,7 +95,7 @@ private JTable getTableTest() {
             tableTest.setAutoCreateRowSorter(true);
 
             // Default sort by name (column 0)
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             tableTest.getRowSorter().setSortKeys(sortKeys);
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyManager.java
Patch:
@@ -54,7 +54,7 @@ public void init() {
 
     public synchronized List<String> getAllPolicyNames() {
         if (allPolicyNames == null) {
-            allPolicyNames = new ArrayList<String>();
+            allPolicyNames = new ArrayList<>();
             String[] files = Constant.getPoliciesDir().list();
             if (files != null) {
                 for (String file : files) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ResponseCountSnapshot.java
Patch:
@@ -34,7 +34,7 @@ public enum RESPONSE_CODE_RANGE {
         RC_300,
         RC_400,
         RC_500
-    };
+    }
 
     private Date date;
     private int period;

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ScanProgressDialog.java
Patch:
@@ -93,7 +93,7 @@ public class ScanProgressDialog extends AbstractDialog {
     private boolean stopThread;
 
     private JFreeChart chart;
-    private List<String> labelsAdded = new ArrayList<String>();
+    private List<String> labelsAdded = new ArrayList<>();
     private TimeSeries seriesTotal;
     private TimeSeries series100;
     private TimeSeries series200;
@@ -511,7 +511,7 @@ public void run() {
 
     private JComboBox<String> getHostSelect() {
         if (hostSelect == null) {
-            hostSelect = new JComboBox<String>();
+            hostSelect = new JComboBox<>();
             hostSelect.addActionListener(
                     new ActionListener() {
                         @Override

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ScanProgressTableModel.java
Patch:
@@ -48,7 +48,7 @@ public class ScanProgressTableModel extends AbstractTableModel {
 
     public ScanProgressTableModel() {
         super();
-        values = new ArrayList<ScanProgressItem>();
+        values = new ArrayList<>();
         focusedAction = null;
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/VariantFactory.java
Patch:
@@ -65,7 +65,7 @@ public void removeVariant(Class<? extends Variant> variantClass) {
     }
 
     public List<Variant> createVariants(ScannerParam scanOptions, HttpMessage message) {
-        List<Variant> listVariant = new ArrayList<Variant>();
+        List<Variant> listVariant = new ArrayList<>();
 
         int targets = scanOptions.getTargetParamsInjectable();
         int enabledRPC = scanOptions.getTargetParamsEnabledRPC();
@@ -160,7 +160,7 @@ public List<Variant> createVariants(ScannerParam scanOptions, HttpMessage messag
     }
 
     public List<Variant> createSiteModifyingVariants() {
-        List<Variant> listVariant = new ArrayList<Variant>();
+        List<Variant> listVariant = new ArrayList<>();
 
         addScriptVariants(listVariant);
         addCustomVariants(listVariant);

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/filters/impl/UrlPatternScanFilter.java
Patch:
@@ -47,6 +47,7 @@ public FilterResult isFiltered(StructuralNode node) {
         return this.isFiltered(hRef.getURI().toString());
     }
 
+    @Override
     public String getFilterType() {
         return Constant.messages.getString(FILTER_TYPE);
     }

File: zap/src/main/java/org/zaproxy/zap/extension/authorization/BasicAuthorizationDetectionMethod.java
Patch:
@@ -54,7 +54,7 @@ public class BasicAuthorizationDetectionMethod implements AuthorizationDetection
     public enum LogicalOperator {
         AND,
         OR
-    };
+    }
 
     protected LogicalOperator logicalOperator;
     protected int statusCode;
@@ -262,6 +262,6 @@ public ApiResponse getApiResponseRepresentation() {
         values.put(AuthorizationAPI.PARAM_STATUS_CODE, Integer.toString(this.statusCode));
         values.put(AuthorizationAPI.PARAM_LOGICAL_OPERATOR, this.logicalOperator.name());
         values.put(AuthorizationAPI.RESPONSE_TYPE, "basic");
-        return new ApiResponseSet<String>(AuthorizationAPI.RESPONSE_TAG, values);
+        return new ApiResponseSet<>(AuthorizationAPI.RESPONSE_TAG, values);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/AddOnWrapper.java
Patch:
@@ -28,7 +28,7 @@ public class AddOnWrapper extends Enableable {
     public enum Status {
         newAddon,
         newVersion
-    };
+    }
 
     private AddOn addOn = null;
     private AddOn.InstallationStatus installationStatus;

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/AutoUpdateAPI.java
Patch:
@@ -101,7 +101,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
             if (ao == null) {
                 throw new ApiException(Type.DOES_NOT_EXIST);
             } else {
-                List<String> l = new ArrayList<String>();
+                List<String> l = new ArrayList<>();
                 l.add(id);
                 String errorMessages = extension.installAddOns(l);
                 if (errorMessages.length() == 0) {
@@ -120,7 +120,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
             if (ao == null) {
                 throw new ApiException(Type.DOES_NOT_EXIST);
             } else {
-                List<String> l = new ArrayList<String>();
+                List<String> l = new ArrayList<>();
                 l.add(id);
                 String errorMessages = extension.uninstallAddOns(l);
                 if (errorMessages.length() == 0) {
@@ -196,7 +196,7 @@ private static ApiResponseSet<String> addonToSet(AddOn ao, boolean localAddOn) {
         if (localAddOn) {
             map.put("file", ao.getFile().toString());
         }
-        return new ApiResponseSet<String>("addon", map);
+        return new ApiResponseSet<>("addon", map);
     }
 
     public String getLatestVersionNumber() {

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -1726,7 +1726,7 @@ boolean uninstallAddOns(Window caller, Set<AddOn> addOns, boolean updates) {
         }
 
         if (getView() != null) {
-            return uninstallAddOnsWithView(caller, addOns, updates, new HashSet<AddOn>());
+            return uninstallAddOnsWithView(caller, addOns, updates, new HashSet<>());
         }
 
         final Set<AddOn> failedUninstallations = new HashSet<>();
@@ -2024,7 +2024,7 @@ public synchronized String uninstallAddOns(List<String> addons) {
                 AddOnDependencyChecker addOnDependencyChecker =
                         new AddOnDependencyChecker(getLocalVersionInfo(), aoc);
 
-                Set<AddOn> addonSet = new HashSet<AddOn>();
+                Set<AddOn> addonSet = new HashSet<>();
                 addonSet.add(ao);
                 UninstallationResult result =
                         addOnDependencyChecker.calculateUninstallChanges(addonSet);
@@ -2145,7 +2145,7 @@ public void execute(CommandLineArgument[] args) {
         }
         if (arguments[ARG_CFU_LIST_IDX].isEnabled()) {
             AddOnCollection aoc = this.getLocalVersionInfo();
-            List<AddOn> aolist = new ArrayList<AddOn>(aoc.getAddOns());
+            List<AddOn> aolist = new ArrayList<>(aoc.getAddOns());
             Collections.sort(
                     aolist,
                     new Comparator<AddOn>() {

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -547,7 +547,7 @@ public void tableChanged(TableModelEvent e) {
                     .setSortable(false); // checkbox doesn't need to be sortable
 
             // Default sort by name (column 1)
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
             sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
             installedAddOnsTable.getRowSorter().setSortKeys(sortKeys);
 
@@ -664,7 +664,7 @@ && getUninstalledAddOnsTable().getSelectedRowCount()
 
             // Default sort by status (column 1) descending (Release, Beta, Alpha), and name (column
             // 2) ascending
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(2);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(2);
             sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
             sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
             uninstalledAddOnsTable.getRowSorter().setSortKeys(sortKeys);
@@ -1046,7 +1046,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
                             }
 
                             extension.uninstallAddOnsWithView(
-                                    ManageAddOnsDialog.this, addOns, false, new HashSet<AddOn>());
+                                    ManageAddOnsDialog.this, addOns, false, new HashSet<>());
                         }
                     });
         }

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/OptionsCheckForUpdatesPanel.java
Patch:
@@ -313,7 +313,7 @@ public void tableChanged(TableModelEvent e) {
 
     private JComboBox<String> getDownloadDirCombo() {
         if (downloadDir == null) {
-            downloadDir = new JComboBox<String>();
+            downloadDir = new JComboBox<>();
             repopulateDownloadDirs();
         }
         return downloadDir;

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/OptionsParamCheckForUpdates.java
Patch:
@@ -59,7 +59,7 @@ public class OptionsParamCheckForUpdates extends AbstractParam {
     private boolean reportReleaseAddons = false;
     private boolean reportBetaAddons = false;
     private boolean reportAlphaAddons = false;
-    private List<File> addonDirectories = new ArrayList<File>();
+    private List<File> addonDirectories = new ArrayList<>();
     private File downloadDirectory = new File(Constant.FOLDER_LOCAL_PLUGIN);
 
     // Day last checked is used to ensure if the user has agreed then we only check the first time

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/UninstallationProgressDialogue.java
Patch:
@@ -315,7 +315,7 @@ private enum Type {
             PASSIVE_RULE,
             EXTENSION,
             FINISHED_ADD_ON
-        };
+        }
 
         private final AddOn addOn;
         private final boolean update;

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakAPI.java
Patch:
@@ -282,6 +282,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
         }
     }
 
+    @Override
     public void handleApiPersistentConnection(
             HttpMessage msg,
             HttpInputStream httpIn,

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakEventPublisher.java
Patch:
@@ -72,7 +72,7 @@ public void publishInactiveEvent(Message msg) {
     }
 
     private void publishEvent(String event, Message msg, Map<String, String> parameters) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.putAll(parameters); // Could be an empty map
         map.put(MESSAGE_TYPE, msg.getType());
 

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakpointsOptionsPanel.java
Patch:
@@ -181,7 +181,7 @@ private ZapTextField getMultimediaUrlRegexField() {
 
     private JComboBox<String> getButtonMode() {
         if (buttonMode == null) {
-            buttonMode = new JComboBox<String>();
+            buttonMode = new JComboBox<>();
             buttonMode.addItem(
                     Constant.messages.getString("brk.optionspanel.option.breakmode.simple.label"));
             buttonMode.addItem(

File: zap/src/main/java/org/zaproxy/zap/extension/brk/impl/http/HttpBreakpointManagementDaemonImpl.java
Patch:
@@ -130,6 +130,7 @@ public void setMessage(Message msg, boolean isRequest) {
         }
     }
 
+    @Override
     public boolean isRequest() {
         return this.request;
     }

File: zap/src/main/java/org/zaproxy/zap/extension/brk/impl/http/HttpBreakpointMessage.java
Patch:
@@ -37,12 +37,12 @@ public enum Location {
         request_body,
         response_header,
         response_body
-    };
+    }
 
     public enum Match {
         contains,
         regex
-    };
+    }
 
     private static final Logger logger = LogManager.getLogger(HttpBreakpointMessage.class);
 

File: zap/src/main/java/org/zaproxy/zap/extension/callback/ExtensionCallback.java
Patch:
@@ -58,7 +58,7 @@ public class ExtensionCallback extends ExtensionAdaptor
     private CallbackParam callbackParam;
     private OptionsCallbackPanel optionsCallbackPanel;
 
-    private Map<String, CallbackImplementor> callbacks = new HashMap<String, CallbackImplementor>();
+    private Map<String, CallbackImplementor> callbacks = new HashMap<>();
     private int actualPort;
     private String currentConfigLocalAddress;
     private int currentConfigPort;

File: zap/src/main/java/org/zaproxy/zap/extension/callback/OptionsCallbackPanel.java
Patch:
@@ -134,14 +134,14 @@ private JPanel getCallbackPanel() {
 
     private JComboBox<String> getLocalAddress() {
         if (localAddress == null) {
-            localAddress = new JComboBox<String>();
+            localAddress = new JComboBox<>();
         }
         return localAddress;
     }
 
     private JComboBox<String> getRemoteAddress() {
         if (remoteAddress == null) {
-            remoteAddress = new JComboBox<String>();
+            remoteAddress = new JComboBox<>();
             remoteAddress.setEditable(true);
         }
         return remoteAddress;

File: zap/src/main/java/org/zaproxy/zap/extension/custompages/DefaultCustomPage.java
Patch:
@@ -165,6 +165,7 @@ public void setType(Type cpt) {
      * @return {@code true} if the HTTP message is a Custom Page of the type in question, {@code
      *     false} otherwise
      */
+    @Override
     public boolean isCustomPage(HttpMessage msg, Type cpt) {
         if (isEnabled() && getType() == cpt) {
             String value = getPageMatcherByType(msg);

File: zap/src/main/java/org/zaproxy/zap/extension/ext/ExtensionExtension.java
Patch:
@@ -109,7 +109,7 @@ public boolean handleFile(File file) {
     @Override
     public List<String> getHandledExtensions() {
         // Support loading sessions
-        List<String> exts = new ArrayList<String>();
+        List<String> exts = new ArrayList<>();
         exts.add("session");
         return exts;
     }

File: zap/src/main/java/org/zaproxy/zap/extension/globalexcludeurl/GlobalExcludeURLParam.java
Patch:
@@ -45,8 +45,7 @@ public class GlobalExcludeURLParam extends AbstractParam {
     private static final String CONFIRM_REMOVE_TOKEN_KEY =
             GLOBAL_EXCLUDE_URL_BASE_KEY + ".confirmRemoveToken";
 
-    private static ArrayList<GlobalExcludeURLParamToken> defaultList =
-            new ArrayList<GlobalExcludeURLParamToken>();
+    private static ArrayList<GlobalExcludeURLParamToken> defaultList = new ArrayList<>();
 
     /**
      * Fills in the list of default regexs to ignore. In a future version, this could be read from a

File: zap/src/main/java/org/zaproxy/zap/extension/history/PopupMenuExportContextURLs.java
Patch:
@@ -73,7 +73,7 @@ protected void performAction() {
         }
 
         List<Context> contexts = extension.getView().getSiteTreePanel().getSelectedContexts();
-        SortedSet<String> allUrls = new TreeSet<String>();
+        SortedSet<String> allUrls = new TreeSet<>();
 
         for (Context c : contexts) {
             this.getOutputSet(c, allUrls);

File: zap/src/main/java/org/zaproxy/zap/extension/history/PopupMenuExportSelectedURLs.java
Patch:
@@ -57,15 +57,15 @@ protected void performAction() {
 
     private SortedSet<String> getOutputSet(TreePath[] startingPoints) {
         JTree siteTree = extension.getView().getSiteTreePanel().getTreeSite();
-        ArrayList<TreePath> startingPts = new ArrayList<TreePath>();
+        ArrayList<TreePath> startingPts = new ArrayList<>();
 
         if (ArrayUtils.isEmpty(startingPoints)) {
             startingPts.add(new TreePath(siteTree.getModel().getRoot()));
         } else {
             startingPts.addAll(Arrays.asList(startingPoints));
         }
 
-        SortedSet<String> outputSet = new TreeSet<String>();
+        SortedSet<String> outputSet = new TreeSet<>();
         for (TreePath aPath : startingPts) {
             Enumeration<?> en = (((SiteNode) aPath.getLastPathComponent()).preorderEnumeration());
             while (en.hasMoreElements()) {

File: zap/src/main/java/org/zaproxy/zap/extension/history/PopupMenuExportURLs.java
Patch:
@@ -98,7 +98,7 @@ protected void performAction() {
     }
 
     protected SortedSet<String> getOutputSet(SiteNode startingPoint) {
-        SortedSet<String> outputSet = new TreeSet<String>();
+        SortedSet<String> outputSet = new TreeSet<>();
         Enumeration<?> en = (startingPoint.preorderEnumeration());
         while (en.hasMoreElements()) {
             SiteNode node = (SiteNode) en.nextElement();

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/HttpPanel.java
Patch:
@@ -66,7 +66,7 @@ public enum OptionsLocation {
         BEGIN,
         AFTER_COMPONENTS,
         END
-    };
+    }
 
     private static final long serialVersionUID = 5221591643257366570L;
 

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/HttpPanelRequest.java
Patch:
@@ -47,8 +47,7 @@ public HttpPanelRequest(boolean isEditable, String configurationKey) {
     @Override
     protected void initComponents() {
         addComponent(
-                new RequestSplitComponent<HttpMessage>(),
-                Model.getSingleton().getOptionsParam().getConfig());
+                new RequestSplitComponent<>(), Model.getSingleton().getOptionsParam().getConfig());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/HttpPanelResponse.java
Patch:
@@ -20,7 +20,6 @@
 package org.zaproxy.zap.extension.httppanel;
 
 import org.parosproxy.paros.model.Model;
-import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.component.split.response.ResponseSplitComponent;
 import org.zaproxy.zap.view.HttpPanelManager;
 
@@ -39,8 +38,7 @@ public HttpPanelResponse(boolean isEditable, String configurationKey) {
     @Override
     protected void initComponents() {
         addComponent(
-                new ResponseSplitComponent<HttpMessage>(),
-                Model.getSingleton().getOptionsParam().getConfig());
+                new ResponseSplitComponent<>(), Model.getSingleton().getOptionsParam().getConfig());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/component/HttpPanelComponentViewsManager.java
Patch:
@@ -631,7 +631,7 @@ public CustomDelegateListCellRenderer(JComboBox<ViewItem> aComboBox, String labe
 
                         @Override
                         public void propertyChange(PropertyChangeEvent evt) {
-                            delegateRenderer = new JComboBox<ViewItem>().getRenderer();
+                            delegateRenderer = new JComboBox<>().getRenderer();
                         }
                     });
         }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/component/split/request/RequestSplitComponent.java
Patch:
@@ -56,7 +56,7 @@ public class RequestSplitComponent<T extends Message>
     public enum ViewComponent {
         HEADER,
         BODY
-    };
+    }
 
     private static final String DIVIDER_LOCATION_CONFIG_KEY = "dividerLocation";
 

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/components/all/request/HttpRequestAllPanelSyntaxHighlightTextView.java
Patch:
@@ -75,7 +75,7 @@ public void show(Component invoker, int x, int y) {
                                                 HttpRequestAllPanelSyntaxHighlightTextView.this,
                                                 x,
                                                 y);
-                            };
+                            }
                         });
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/components/split/request/HttpRequestBodyPanelSyntaxHighlightTextView.java
Patch:
@@ -77,7 +77,7 @@ public void show(Component invoker, int x, int y) {
                                                 HttpRequestBodyPanelSyntaxHighlightTextView.this,
                                                 x,
                                                 y);
-                            };
+                            }
                         });
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/components/split/request/HttpRequestHeaderPanelSyntaxHighlightTextView.java
Patch:
@@ -74,7 +74,7 @@ public void show(Component invoker, int x, int y) {
                                                 HttpRequestHeaderPanelSyntaxHighlightTextView.this,
                                                 x,
                                                 y);
-                            };
+                            }
                         });
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/lexers/WwwFormTokenMaker.java
Patch:
@@ -328,6 +328,7 @@ private void addToken(int start, int end, int tokenType) {
      * @param tokenType The token's type.
      * @param startOffset The offset in the document at which this token occurs.
      */
+    @Override
     public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
         super.addToken(array, start, end, tokenType, startOffset);
         zzStartRead = zzMarkedPos;
@@ -343,6 +344,7 @@ public void addToken(char[] array, int start, int end, int tokenType, int startO
      * @return The first <code>Token</code> in a linked list representing the syntax highlighted
      *     text.
      */
+    @Override
     public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
         resetTokenList();
         this.offsetShift = -text.offset + startOffset;

File: zap/src/main/java/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -574,7 +574,7 @@ public HttpSessionTokensSet getHttpSessionTokensSetForContext(Context context) {
      * @return all of the sites with http sessions
      */
     public List<String> getSites() {
-        List<String> sites = new ArrayList<String>();
+        List<String> sites = new ArrayList<>();
         if (this.sessions == null) {
             return sites;
         }

File: zap/src/main/java/org/zaproxy/zap/extension/keyboard/DialogEditShortcut.java
Patch:
@@ -130,7 +130,7 @@ private KeyboardShortcut getDuplicate() {
     }
 
     private List<String> getKeyList() {
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         list.add(""); // Always start with a blank option - means no key set
         for (char c = 'A'; c <= 'Z'; c++) {
             list.add(String.valueOf(c));

File: zap/src/main/java/org/zaproxy/zap/extension/keyboard/ExtensionKeyboard.java
Patch:
@@ -228,7 +228,7 @@ public List<KeyboardShortcut> getShortcuts() {
 
     public List<KeyboardShortcut> getShortcuts(boolean reset) {
         if (hasView()) {
-            List<KeyboardShortcut> kss = new ArrayList<KeyboardShortcut>();
+            List<KeyboardShortcut> kss = new ArrayList<>();
             processMainMenuBarMenus(menu -> addAllMenuItems(kss, menu, reset));
             return kss;
         }

File: zap/src/main/java/org/zaproxy/zap/extension/keyboard/KeyboardParam.java
Patch:
@@ -51,7 +51,7 @@ protected void parse() {
         try {
             List<HierarchicalConfiguration> fields =
                     ((HierarchicalConfiguration) getConfig()).configurationsAt(ALL_SHORTCUTS_KEY);
-            map = new HashMap<String, KeyStroke>(fields.size());
+            map = new HashMap<>(fields.size());
             for (HierarchicalConfiguration sub : fields) {
                 String name = sub.getString(MENU_ITEM_KEY, "");
                 if (name.length() > 0) {

File: zap/src/main/java/org/zaproxy/zap/extension/params/ParamsAPI.java
Patch:
@@ -90,7 +90,7 @@ private static ApiResponseList createSiteParamStatsResponse(SiteParameters siteP
             map.put("name", param.getName());
             map.put("type", param.getType().name());
             map.put("timesUsed", String.valueOf(param.getTimesUsed()));
-            stats.addItem(new ApiResponseSet<String>("Stats", map));
+            stats.addItem(new ApiResponseSet<>("Stats", map));
 
             ApiResponseList flags = new ApiResponseList("Flags");
             for (String flag : param.getFlags()) {

File: zap/src/main/java/org/zaproxy/zap/extension/params/ParamsTableModel.java
Patch:
@@ -48,7 +48,7 @@ public ParamsTableModel() {
         columnNames.add(Constant.messages.getString("params.table.header.flags"));
         columnNames.add(Constant.messages.getString("params.table.header.values"));
 
-        paramStats = Collections.synchronizedList(new ArrayList<HtmlParameterStats>());
+        paramStats = Collections.synchronizedList(new ArrayList<>());
 
         lastAddedRow = -1;
         lastEditedRow = -1;
@@ -70,7 +70,7 @@ public String getColumnName(int col) {
     }
 
     public List<String> getColumnNames() {
-        return new ArrayList<String>(columnNames);
+        return new ArrayList<>(columnNames);
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/ExtensionProxies.java
Patch:
@@ -47,7 +47,7 @@ public class ExtensionProxies extends ExtensionAdaptor implements OptionsChanged
 
     private ProxiesParam proxiesParam = null;
     private OptionsProxiesPanel optionsProxiesPanel = null;
-    private Map<String, ProxyServer> proxyServers = new HashMap<String, ProxyServer>();
+    private Map<String, ProxyServer> proxyServers = new HashMap<>();
 
     private static Logger log = LogManager.getLogger(ExtensionProxies.class);
 
@@ -109,7 +109,7 @@ private void restartProxies() {
         List<ProxiesParamProxy> proxyParams = this.getParam().getProxies();
         Map<String, ProxiesParamProxy> newProxies = new HashMap<>();
         Map<String, ProxyServer> currentProxies = proxyServers;
-        proxyServers = new HashMap<String, ProxyServer>();
+        proxyServers = new HashMap<>();
         for (ProxiesParamProxy proxyParam : proxyParams) {
             if (proxyParam.isEnabled()) {
                 // Treat disabled proxies as if they dont really exist

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/OptionsLocalProxyPanel.java
Patch:
@@ -51,7 +51,7 @@ public OptionsLocalProxyPanel() {
 
     private JComboBox<String> getLocalAddress() {
         if (localAddress == null) {
-            localAddress = new JComboBox<String>();
+            localAddress = new JComboBox<>();
             localAddress.setEditable(true);
             List<String> allAddrs = NetworkUtils.getAvailableAddresses(false);
             localAddress.addItem("localhost");

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/ProxiesAPI.java
Patch:
@@ -71,7 +71,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
             ApiResponseList response = new ApiResponseList(name);
 
             for (ProxiesParamProxy p : (this.extension.getAdditionalProxies())) {
-                Map<String, String> map = new HashMap<String, String>();
+                Map<String, String> map = new HashMap<>();
                 map.put("address", p.getAddress());
                 map.put("port", Integer.toString(p.getPort()));
                 map.put("enabled", Boolean.toString(p.isEnabled()));
@@ -80,7 +80,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                 map.put(
                         "removeUnsupportedEncodings",
                         Boolean.toString(p.isRemoveUnsupportedEncodings()));
-                response.addItem(new ApiResponseSet<String>("proxy", map));
+                response.addItem(new ApiResponseSet<>("proxy", map));
             }
 
             return response;

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/ProxiesParam.java
Patch:
@@ -102,7 +102,7 @@ public void setSecurityProtocolsEnabled(String[] protocols) {
     }
 
     public List<ProxiesParamProxy> getProxies() {
-        List<ProxiesParamProxy> list = new ArrayList<ProxiesParamProxy>(proxies.size() + 1);
+        List<ProxiesParamProxy> list = new ArrayList<>(proxies.size() + 1);
         for (ProxiesParamProxy proxy : this.proxies) {
             list.add(new ProxiesParamProxy(proxy));
         }

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanAPI.java
Patch:
@@ -217,7 +217,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     map.put("enabled", String.valueOf(scanner.isEnabled()));
                     map.put("alertThreshold", scanner.getAlertThreshold(true).name());
                     map.put("quality", scanner.getStatus().toString());
-                    resultList.addItem(new ApiResponseSet<String>("scanner", map));
+                    resultList.addItem(new ApiResponseSet<>("scanner", map));
                 }
 
                 result = resultList;
@@ -231,7 +231,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     time = System.currentTimeMillis() - time;
                 }
                 map.put("time", String.valueOf(time));
-                result = new ApiResponseSet<String>(name, map);
+                result = new ApiResponseSet<>(name, map);
                 break;
             case VIEW_MAX_ALERTS_PER_RULE:
                 result =

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java
Patch:
@@ -167,7 +167,7 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {
             return false;
         }
         if (customPageMap == null) {
-            customPageMap = new HashMap<CustomPage.Type, Boolean>();
+            customPageMap = new HashMap<>();
         }
         return customPageMap.computeIfAbsent(
                 cpType, type -> context.isCustomPageWithFallback(msg, type));

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -57,7 +57,7 @@ public class PassiveScanThread extends Thread implements ProxyListener, SessionC
     // the HttpMessage.
     public static final int PROXY_LISTENER_ORDER = ProxyListenerLog.PROXY_LISTENER_ORDER + 1;
 
-    private static Set<Integer> optedInHistoryTypes = new HashSet<Integer>();
+    private static Set<Integer> optedInHistoryTypes = new HashSet<>();
 
     @SuppressWarnings("unused")
     private OptionsPassiveScan options = null;
@@ -80,7 +80,7 @@ public class PassiveScanThread extends Thread implements ProxyListener, SessionC
     private String currentRuleName = "";
     private String currentUrl = "";
     private long currentRuleStartTime = 0;
-    private Map<Integer, Integer> alertCounts = new HashMap<Integer, Integer>();
+    private Map<Integer, Integer> alertCounts = new HashMap<>();
 
     /**
      * Constructs a {@code PassiveScanThread} with the given data.
@@ -503,7 +503,7 @@ public static Set<Integer> getOptedInHistoryTypes() {
      * @since 2.8.0
      */
     public static Set<Integer> getApplicableHistoryTypes() {
-        Set<Integer> allApplicableTypes = new HashSet<Integer>();
+        Set<Integer> allApplicableTypes = new HashSet<>();
         allApplicableTypes.addAll(PluginPassiveScanner.getDefaultHistoryTypes());
         if (!optedInHistoryTypes.isEmpty()) {
             allApplicableTypes.addAll(optedInHistoryTypes);

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanner.java
Patch:
@@ -25,9 +25,9 @@
 
 public interface PassiveScanner {
 
-    default void scanHttpRequestSend(HttpMessage msg, int id) {};
+    default void scanHttpRequestSend(HttpMessage msg, int id) {}
 
-    default void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {};
+    default void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {}
 
     void setParent(PassiveScanThread parent);
 

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PluginPassiveScanner.java
Patch:
@@ -73,7 +73,7 @@ public abstract class PluginPassiveScanner extends Enableable
             };
 
     private static final Set<Integer> DEFAULT_HISTORY_TYPES_SET =
-            Collections.unmodifiableSet(new HashSet<Integer>(Arrays.asList(DEFAULT_HISTORY_TYPES)));
+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(DEFAULT_HISTORY_TYPES)));
 
     private AlertThreshold alertThreshold = AlertThreshold.DEFAULT;
     private AlertThreshold defaultAlertThreshold = AlertThreshold.MEDIUM;

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -67,8 +67,7 @@ private void initialize() {
             this.setSize(375, 204);
         }
         this.setName(Constant.messages.getString("pscan.options.policy.title"));
-        JPanel passiveScannersFilterPanel =
-                new TableFilterPanel<JXTable>(getPassiveScanRulesTable());
+        JPanel passiveScannersFilterPanel = new TableFilterPanel<>(getPassiveScanRulesTable());
 
         // 'Apply to' controls
         JPanel applyToPanel = new JPanel();
@@ -188,7 +187,7 @@ private JXTable getPassiveScanRulesTable() {
             passiveScanRulesTable.setAutoCreateRowSorter(true);
 
             // Default sort by name (column 0)
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             passiveScanRulesTable.getRowSorter().setSortKeys(sortKeys);
 

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScanner.java
Patch:
@@ -40,7 +40,7 @@ public enum TYPE {
         ALERT,
         TAG,
         TECH
-    };
+    }
 
     private String name = null;
     private String requestUrlRegex = null;

File: zap/src/main/java/org/zaproxy/zap/extension/ruleconfig/RuleConfigAPI.java
Patch:
@@ -127,7 +127,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     if (Constant.messages.containsKey(rc2.getKey())) {
                         map.put("description", Constant.messages.getString(rc2.getKey()));
                     }
-                    resultList.addItem(new ApiResponseSet<String>("ruleConfig", map));
+                    resultList.addItem(new ApiResponseSet<>("ruleConfig", map));
                 }
 
                 result = resultList;

File: zap/src/main/java/org/zaproxy/zap/extension/ruleconfig/RuleConfigParam.java
Patch:
@@ -95,7 +95,7 @@ public class RuleConfigParam extends AbstractParam {
     private static final String RULES_BASE_KEY = "rules";
     private static final String RULES_DEFAULT_KEY_EXT = ".default";
 
-    private Map<String, RuleConfig> ruleConfigs = new HashMap<String, RuleConfig>();
+    private Map<String, RuleConfig> ruleConfigs = new HashMap<>();
 
     public RuleConfigParam() {}
 
@@ -154,7 +154,7 @@ public RuleConfig getRuleConfig(String key) {
     }
 
     public List<RuleConfig> getAllRuleConfigs() {
-        ArrayList<RuleConfig> list = new ArrayList<RuleConfig>();
+        ArrayList<RuleConfig> list = new ArrayList<>();
         for (RuleConfig rc : ruleConfigs.values()) {
             list.add(rc.clone());
         }

File: zap/src/main/java/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -2131,7 +2131,7 @@ public boolean handleFile(File file) {
     @Override
     public List<String> getHandledExtensions() {
         // The list of all of the script extensions that can be handled from the command line
-        List<String> exts = new ArrayList<String>();
+        List<String> exts = new ArrayList<>();
         for (ScriptEngineWrapper sew : this.engineWrappers) {
             exts.addAll(sew.getExtensions());
         }

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -174,7 +174,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     if (type.isEnableable()) {
                         map.put("enabled", Boolean.toString(script.isEnabled()));
                     }
-                    result.addItem(new ApiResponseSet<String>("Script", map));
+                    result.addItem(new ApiResponseSet<>("Script", map));
                 }
             }
             return result;

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptParam.java
Patch:
@@ -101,7 +101,7 @@ protected void parse() {
         }
 
         try {
-            this.scriptDirs = new ArrayList<File>();
+            this.scriptDirs = new ArrayList<>();
             for (Object dirName : getConfig().getList(SCRIPT_DIRS)) {
                 File f = new File((String) dirName);
                 if (!f.exists() || !f.isDirectory()) {

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptType.java
Patch:
@@ -48,7 +48,7 @@ public class ScriptType {
     /** Flag that indicates if the scripts of this script type should be enabled by default. */
     private final boolean enabledByDefault;
 
-    private final Set<String> capabilitiesSet = new HashSet<String>();
+    private final Set<String> capabilitiesSet = new HashSet<>();
 
     /**
      * Constructs a {@code ScriptType} with the given data.

File: zap/src/main/java/org/zaproxy/zap/extension/search/ExtensionSearch.java
Patch:
@@ -48,7 +48,7 @@ public enum Type {
         Response,
         Header,
         Custom
-    };
+    }
 
     private SearchParam searchParam;
     private OptionsSearchPanel optionsPanel;

File: zap/src/main/java/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -216,7 +216,7 @@ public void processRecordHistory(RecordHistory recordHistory) {
                                         "code",
                                         String.valueOf(msg.getResponseHeader().getStatusCode()));
                                 map.put("time", String.valueOf(msg.getTimeElapsedMillis()));
-                                result.addItem(new ApiResponseSet<String>(name, map));
+                                result.addItem(new ApiResponseSet<>(name, map));
                             }
                         };
             }

File: zap/src/main/java/org/zaproxy/zap/extension/search/SearchMatch.java
Patch:
@@ -34,7 +34,7 @@ public enum Location {
         REQUEST_BODY,
         RESPONSE_HEAD,
         RESPONSE_BODY
-    };
+    }
 
     private Location location;
     private int start;

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -218,7 +218,7 @@ public String getHelpIndex() {
 
     @Override
     public void targetSelected(String field, Target node) {
-        List<String> ctxNames = new ArrayList<String>();
+        List<String> ctxNames = new ArrayList<>();
         if (node != null) {
             // The user has selected a new node
             this.target = node;
@@ -263,7 +263,7 @@ private User getSelectedUser() {
 
     private void setUsers() {
         Context context = this.getSelectedContext();
-        List<String> userNames = new ArrayList<String>();
+        List<String> userNames = new ArrayList<>();
         if (context != null) {
             List<User> users =
                     this.extUserMgmt.getContextUserAuthManager(context.getId()).getUsers();

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderPanelTableModel.java
Patch:
@@ -226,7 +226,7 @@ public boolean equals(Object obj) {
     }
 
     public List<String> getAddedNodes() {
-        List<String> list = new ArrayList<String>(this.scanResults.size());
+        List<String> list = new ArrayList<>(this.scanResults.size());
         for (SpiderScanResult res : this.scanResults) {
             list.add(res.uri);
         }

File: zap/src/main/java/org/zaproxy/zap/extension/stats/StatsAPI.java
Patch:
@@ -100,7 +100,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     memStats.getStats(this.getParam(params, PARAM_KEY_PREFIX, "")).entrySet()) {
                 map.put(stat.getKey(), stat.getValue().toString());
             }
-            result = new ApiResponseSet<String>(name, map);
+            result = new ApiResponseSet<>(name, map);
 
         } else if (VIEW_ALL_SITES_STATS.equals(name)) {
             result = new ApiResponseList(name);
@@ -148,7 +148,7 @@ public SiteStatsApiResponse(String site, Map<String, Long> stats) {
             super("statistics");
             this.site = site;
             this.stats = new TreeMap<>(stats);
-            this.addItem(new ApiResponseSet<Long>(site, this.stats));
+            this.addItem(new ApiResponseSet<>(site, this.stats));
         }
 
         @Override

File: zap/src/main/java/org/zaproxy/zap/extension/stats/StatsdClient.java
Patch:
@@ -144,7 +144,8 @@ public synchronized void stopFlushTimer() {
         }
     }
 
-    public void run() {     // used by Timer, we're a Runnable TimerTask
+    @Override
+	public void run() {     // used by Timer, we're a Runnable TimerTask
         flush();
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/ExtensionStdMenus.java
Patch:
@@ -250,7 +250,7 @@ private PopupContextTreeMenu getPopupContextTreeMenuDelete() {
 
                         @Override
                         protected List<Context> getContexts() {
-                            List<Context> contexts = new ArrayList<Context>();
+                            List<Context> contexts = new ArrayList<>();
                             for (Integer id : popupContextTreeMenuDelete.getContextIds()) {
                                 contexts.add(Model.getSingleton().getSession().getContext(id));
                             }

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/PopupContextTreeMenu.java
Patch:
@@ -49,7 +49,7 @@ public PopupContextTreeMenu() {
      */
     public PopupContextTreeMenu(boolean isEnabledForMultipleContexts) {
         super();
-        contextIds = new ArrayList<Integer>();
+        contextIds = new ArrayList<>();
 
         this.enabledForMultipleContexts = isEnabledForMultipleContexts;
     }

File: zap/src/main/java/org/zaproxy/zap/model/CommonUserAgents.java
Patch:
@@ -39,8 +39,8 @@ public class CommonUserAgents {
     private static final Logger logger = LogManager.getLogger(CommonUserAgents.class);
 
     static {
-        nameToString = new HashMap<String, String>();
-        stringToName = new HashMap<String, String>();
+        nameToString = new HashMap<>();
+        stringToName = new HashMap<>();
 
         String fileName =
                 Constant.getZapInstall()

File: zap/src/main/java/org/zaproxy/zap/model/SessionStructure.java
Patch:
@@ -420,8 +420,7 @@ public static String getLeafName(
 
     private static List<org.parosproxy.paros.core.scanner.NameValuePair> convertNVP(
             List<NameValuePair> nvpList, int type) {
-        List<org.parosproxy.paros.core.scanner.NameValuePair> params =
-                new ArrayList<org.parosproxy.paros.core.scanner.NameValuePair>();
+        List<org.parosproxy.paros.core.scanner.NameValuePair> params = new ArrayList<>();
         for (NameValuePair nvp : nvpList) {
             params.add(
                     new org.parosproxy.paros.core.scanner.NameValuePair(
@@ -432,7 +431,7 @@ private static List<org.parosproxy.paros.core.scanner.NameValuePair> convertNVP(
 
     private static List<NameValuePair> convertParosNVP(
             List<org.parosproxy.paros.core.scanner.NameValuePair> nvpList, int type) {
-        List<NameValuePair> params = new ArrayList<NameValuePair>();
+        List<NameValuePair> params = new ArrayList<>();
         for (org.parosproxy.paros.core.scanner.NameValuePair nvp : nvpList) {
             if (nvp.getType() == type) {
                 params.add(new DefaultNameValuePair(nvp.getName(), nvp.getValue()));

File: zap/src/main/java/org/zaproxy/zap/model/Target.java
Patch:
@@ -56,7 +56,7 @@ public Target(boolean inScopeOnly) {
 
     public Target(StructuralNode startNode) {
         super();
-        this.startNodes = new ArrayList<StructuralNode>();
+        this.startNodes = new ArrayList<>();
         this.startNodes.add(startNode);
     }
 

File: zap/src/main/java/org/zaproxy/zap/scan/BaseContextScannerThread.java
Patch:
@@ -48,7 +48,7 @@ public abstract class BaseContextScannerThread<
     public BaseContextScannerThread(int contextId) {
         super();
         this.contextId = contextId;
-        this.listeners = new LinkedHashSet<Listener>();
+        this.listeners = new LinkedHashSet<>();
     }
 
     /**

File: zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -95,7 +95,7 @@ protected SpiderController(Spider spider, List<SpiderParser> customParsers) {
         this.fetchFilters = new LinkedList<>();
         this.parseFilters = new LinkedList<>();
         this.visitedGet = new HashSet<>();
-        this.visitedPost = new HashMap<String, ArrayList<String>>();
+        this.visitedPost = new HashMap<>();
 
         prepareDefaultParsers();
         for (SpiderParser parser : customParsers) {
@@ -346,7 +346,7 @@ public void resourcePostURIFound(
                 if (visitedPost.containsKey(uri)) {
                     visitedPost.get(uri).add(requestBody);
                 } else {
-                    ArrayList<String> l = new ArrayList<String>();
+                    ArrayList<String> l = new ArrayList<>();
                     l.add(requestBody);
                     visitedPost.put(uri, l);
                 }

File: zap/src/main/java/org/zaproxy/zap/spider/SpiderParam.java
Patch:
@@ -146,7 +146,7 @@ public String getName() {
                     return null;
             }
         }
-    };
+    }
 
     /** The max depth of the crawling. */
     private int maxDepth = 5;

File: zap/src/main/java/org/zaproxy/zap/spider/filters/FetchFilter.java
Patch:
@@ -46,7 +46,7 @@ public enum FetchStatus {
         ILLEGAL_PROTOCOL,
         /** The The uri is skipped because of user rules. */
         USER_RULES
-    };
+    }
 
     /**
      * The Constant log.

File: zap/src/main/java/org/zaproxy/zap/utils/ContentMatcher.java
Patch:
@@ -96,8 +96,8 @@ public static ContentMatcher getInstance(InputStream xmlInputStream) {
      */
     protected void loadXMLPatternDefinitions(InputStream xmlInputStream)
             throws ConfigurationException {
-        strings = new ArrayList<BoyerMooreMatcher>();
-        patterns = new ArrayList<Pattern>();
+        strings = new ArrayList<>();
+        patterns = new ArrayList<>();
 
         ZapXmlConfiguration configuration = new ZapXmlConfiguration(xmlInputStream);
         for (HierarchicalConfiguration entry : configuration.configurationsAt(TAG_PATTERN)) {
@@ -146,7 +146,7 @@ public String findInContent(String content) {
      */
     public List<String> findAllInContent(String content) {
 
-        List<String> results = new LinkedList<String>();
+        List<String> results = new LinkedList<>();
 
         // First check for all simple exact occurrences
         for (BoyerMooreMatcher matcher : strings) {

File: zap/src/main/java/org/zaproxy/zap/utils/DesktopUtils.java
Patch:
@@ -29,7 +29,7 @@ public class DesktopUtils {
     private static enum BrowserInvoker {
         desktop,
         none
-    };
+    }
 
     private static BrowserInvoker invoker =
             Desktop.isDesktopSupported() ? BrowserInvoker.desktop : BrowserInvoker.none;

File: zap/src/main/java/org/zaproxy/zap/utils/EncodingUtils.java
Patch:
@@ -42,7 +42,7 @@ public static String mapToString(Map<String, String> map) {
     }
 
     public static Map<String, String> stringToMap(String input) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
 
         String[] nameValuePairs = input.split("&");
         for (String nameValuePair : nameValuePairs) {

File: zap/src/main/java/org/zaproxy/zap/utils/FontUtils.java
Patch:
@@ -37,12 +37,12 @@ public static enum Size {
         larger,
         much_larger,
         huge
-    };
+    }
 
     public static enum FontType {
         general,
         workPanels
-    };
+    }
 
     private static float scale = -1;
     private static EnumMap<FontType, Font> defaultFonts = new EnumMap<>(FontType.class);

File: zap/src/main/java/org/zaproxy/zap/utils/JsonUtil.java
Patch:
@@ -69,7 +69,7 @@ public static String getJsonFriendlyString(String value) {
     }
 
     public static List<String> toStringList(JSONArray array) {
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         Iterator<?> iter = JSONArray.toCollection(array).iterator();
         while (iter.hasNext()) {
             list.add(iter.next().toString());

File: zap/src/main/java/org/zaproxy/zap/utils/NetworkUtils.java
Patch:
@@ -36,7 +36,7 @@ private NetworkUtils() {}
     private static final Logger LOG = LogManager.getLogger(NetworkUtils.class);
 
     public static List<String> getAvailableAddresses(boolean remoteOnly) {
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         Enumeration<NetworkInterface> e;
         try {
             e = NetworkInterface.getNetworkInterfaces();

File: zap/src/main/java/org/zaproxy/zap/utils/ResettableAutoCloseableIterator.java
Patch:
@@ -30,5 +30,6 @@
  */
 public interface ResettableAutoCloseableIterator<E> extends ResettableIterator<E>, AutoCloseable {
 
+    @Override
     void close();
 }

File: zap/src/main/java/org/zaproxy/zap/utils/Statistics.java
Patch:
@@ -26,7 +26,7 @@
 
 public class Statistics {
 
-    private Map<String, Long> stats = new HashMap<String, Long>();
+    private Map<String, Long> stats = new HashMap<>();
 
     public void incCounter(String key) {
         incCounter(key, 1);
@@ -63,7 +63,7 @@ public Long getStat(String key) {
     }
 
     public Map<String, Long> getStats(String keyPrefix) {
-        Map<String, Long> map = new HashMap<String, Long>();
+        Map<String, Long> map = new HashMap<>();
         for (Entry<String, Long> stat : stats.entrySet()) {
             if (stat.getKey().startsWith(keyPrefix)) {
                 map.put(stat.getKey(), stat.getValue());

File: zap/src/main/java/org/zaproxy/zap/utils/Stats.java
Patch:
@@ -26,7 +26,7 @@
 
 public final class Stats {
 
-    private static final List<StatsListener> listeners = new ArrayList<StatsListener>();
+    private static final List<StatsListener> listeners = new ArrayList<>();
 
     private static final Logger logger = LogManager.getLogger(Stats.class);
 

File: zap/src/main/java/org/zaproxy/zap/utils/TableColumnManager.java
Patch:
@@ -430,5 +430,5 @@ public void run() {
                         }
                     });
         }
-    };
+    }
 }

File: zap/src/main/java/org/zaproxy/zap/utils/ZapTextComponentUndoManager.java
Patch:
@@ -95,7 +95,7 @@ public enum UndoManagerPolicy {
 
         /** The undoable edits are not saved. */
         ALWAYS_DISABLED
-    };
+    }
 
     private static final long serialVersionUID = -5728632360771625298L;
 

File: zap/src/main/java/org/zaproxy/zap/view/BackgroundImagePanel.java
Patch:
@@ -89,7 +89,7 @@ public final void setBackgroundImage(URL imageUrl, double scale) {
     protected void paintComponent(Graphics g) {
         if (img != null) {
             setOpaque(false);
-            Map<RenderingHints.Key, Object> hints = new HashMap<RenderingHints.Key, Object>();
+            Map<RenderingHints.Key, Object> hints = new HashMap<>();
             hints.put(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
             hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
             hints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

File: zap/src/main/java/org/zaproxy/zap/view/ContextStructurePanel.java
Patch:
@@ -244,8 +244,8 @@ public void validateContextData(Session session) throws Exception {
     private void saveToContext(Context context, boolean updateSiteStructure) {
         ParameterParser urlParamParser = context.getUrlParamParser();
         ParameterParser formParamParser = context.getPostParamParser();
-        List<String> structParams = new ArrayList<String>();
-        List<StructuralNodeModifier> ddns = new ArrayList<StructuralNodeModifier>();
+        List<String> structParams = new ArrayList<>();
+        List<StructuralNodeModifier> ddns = new ArrayList<>();
 
         for (StructuralNodeModifier snm : this.ddnTableModel.getElements()) {
             if (snm.getType().equals(StructuralNodeModifier.Type.StructuralParameter)) {

File: zap/src/main/java/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -74,7 +74,7 @@ public CheckedNode(
     }
 
     HashMap<TreePath, CheckedNode> nodesCheckingState;
-    HashSet<TreePath> checkedPaths = new HashSet<TreePath>();
+    HashSet<TreePath> checkedPaths = new HashSet<>();
 
     // Defining a new event type for the checking mechanism and preparing event-handling mechanism
 
@@ -134,8 +134,8 @@ public boolean isSelectedPartially(TreePath path) {
     }
 
     private void resetCheckingState(DefaultMutableTreeNode rootNode) {
-        nodesCheckingState = new HashMap<TreePath, CheckedNode>();
-        checkedPaths = new HashSet<TreePath>();
+        nodesCheckingState = new HashMap<>();
+        checkedPaths = new HashSet<>();
         if (rootNode == null) {
             return;
         }

File: zap/src/main/java/org/zaproxy/zap/view/MultipleRegexesOptionsPanel.java
Patch:
@@ -145,7 +145,7 @@ private static boolean validateRegexAndCheckForDuplicates(
     private void importButtonClicked() {
         File file = selectImportFile();
         if (file != null) {
-            List<String> regexes = new ArrayList<String>(getRegexes());
+            List<String> regexes = new ArrayList<>(getRegexes());
 
             try (BufferedReader br =
                     Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {

File: zap/src/main/java/org/zaproxy/zap/view/NodeSelectDialog.java
Patch:
@@ -310,7 +310,7 @@ public void mouseClicked(java.awt.event.MouseEvent e) {
                         }
                     });
 
-            treeSite.setCellRenderer(new SiteMapTreeCellRenderer(new ArrayList<SiteMapListener>()));
+            treeSite.setCellRenderer(new SiteMapTreeCellRenderer(new ArrayList<>()));
         }
         return treeSite;
     }

File: zap/src/main/java/org/zaproxy/zap/view/PopupMenuHistoryReference.java
Patch:
@@ -57,7 +57,7 @@ public static enum Invoker {
         fuzz,
         bruteforce,
         hreftable
-    };
+    }
 
     private static final long serialVersionUID = 1L;
     private JTree treeInvoker = null;

File: zap/src/main/java/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -71,7 +71,7 @@ protected enum Location {
         beforeButtons,
         beforeProgressBar,
         afterProgressBar
-    };
+    }
 
     public String prefix;
 

File: zap/src/main/java/org/zaproxy/zap/view/ScanPanel2.java
Patch:
@@ -66,7 +66,7 @@ protected enum Location {
         beforeButtons,
         beforeProgressBar,
         afterProgressBar
-    };
+    }
 
     private final String prefix;
 

File: zap/src/main/java/org/zaproxy/zap/view/StandardFieldsDialog.java
Patch:
@@ -128,7 +128,7 @@ public abstract class StandardFieldsDialog extends AbstractDialog {
 
     private List<Component> fieldList = new ArrayList<>();
     private Map<String, Component> fieldMap = new HashMap<>();
-    private Map<String, JPanel> tabNameMap = new HashMap<String, JPanel>();
+    private Map<String, JPanel> tabNameMap = new HashMap<>();
 
     /**
      * Flag that indicates whether or not the dialogue is automatically hidden when {@link #save()

File: zap/src/main/java/org/zaproxy/zap/view/StructuralNodeModifiersTableModel.java
Patch:
@@ -44,7 +44,7 @@ public class StructuralNodeModifiersTableModel
     private static final long serialVersionUID = 4463944219657112162L;
 
     /** The users. */
-    private List<StructuralNodeModifier> snms = new ArrayList<StructuralNodeModifier>();
+    private List<StructuralNodeModifier> snms = new ArrayList<>();
 
     /**
      * Instantiates a new structural node modifiers table model. An internal copy of the provided

File: zap/src/main/java/org/zaproxy/zap/view/TabbedPanel2.java
Patch:
@@ -521,7 +521,7 @@ public List<Component> getTabList() {
     }
 
     public List<Component> getSortedTabList() {
-        List<Component> copy = new ArrayList<Component>(this.fullTabList);
+        List<Component> copy = new ArrayList<>(this.fullTabList);
         Collections.sort(copy, NAME_COMPARATOR);
         return copy;
     }

File: zap/src/main/java/org/zaproxy/zap/view/messagelocation/AbstractMessageLocationsPanel.java
Patch:
@@ -372,7 +372,7 @@ public void highlightChanged(HighlightChangedEvent<T> event) {
                                 tableEntry.getLocation(), tableEntry.getHighlight());
                 tableEntry.setHighlightReference(highlightReference);
             }
-        };
+        }
     }
 
     protected class MessageLocationsFocusListener implements MessageLocationProducerFocusListener {

File: zap/src/main/java/org/zaproxy/zap/view/popup/PopupMenuHttpMessageContainer.java
Patch:
@@ -62,7 +62,7 @@ protected static enum Invoker {
         FUZZER_PANEL,
         FORCED_BROWSE_PANEL,
         UNKNOWN
-    };
+    }
 
     /** The current invoker of the menu, {@code null} if none or invalid. */
     private Invoker invoker;

File: zap/src/main/java/org/zaproxy/zap/view/popup/PopupMenuItemHttpMessageContainer.java
Patch:
@@ -71,7 +71,7 @@ protected static enum Invoker {
         FUZZER_PANEL,
         FORCED_BROWSE_PANEL,
         UNKNOWN
-    };
+    }
 
     /** The current invoker of the menu, {@code null} if none or invalid. */
     private Invoker invoker;

File: zap/src/main/java/org/zaproxy/zap/view/widgets/UsersMultiSelectList.java
Patch:
@@ -78,7 +78,7 @@ public UsersMultiSelectList(int contextId, int selectionModel) {
     public void reloadUsers(int contextId) {
         List<User> users = usersExtension.getContextUserAuthManager(contextId).getUsers();
         User[] usersArray = users.toArray(new User[users.size()]);
-        ListModel<User> usersModel = new DefaultComboBoxModel<User>(usersArray);
+        ListModel<User> usersModel = new DefaultComboBoxModel<>(usersArray);
         this.setModel(usersModel);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/view/widgets/UsersMultiSelectTable.java
Patch:
@@ -79,7 +79,7 @@ private static void loadUsersManagementExtension() {
      */
     public void reloadUsers(int contextId) {
         List<User> users =
-                new ArrayList<User>(usersExtension.getContextUserAuthManager(contextId).getUsers());
+                new ArrayList<>(usersExtension.getContextUserAuthManager(contextId).getUsers());
         tableModel = new UsersSelectTableModel(users);
         this.setModel(tableModel);
     }
@@ -123,11 +123,11 @@ private static class UsersSelectTableModel extends AbstractTableModel {
         public UsersSelectTableModel(List<User> users) {
             super();
             this.users = users;
-            this.selectedUsersIds = new HashSet<Integer>(this.users.size());
+            this.selectedUsersIds = new HashSet<>(this.users.size());
         }
 
         public List<User> generateSelectedUsers() {
-            List<User> selectedUsers = new ArrayList<User>(selectedUsersIds.size());
+            List<User> selectedUsers = new ArrayList<>(selectedUsersIds.size());
             for (User u : users) if (selectedUsersIds.contains(u.getId())) selectedUsers.add(u);
             return selectedUsers;
         }

File: zap/src/test/java/ch/csnc/extension/util/DriverConfigurationUnitTest.java
Patch:
@@ -36,10 +36,10 @@
 import org.junit.jupiter.api.io.TempDir;
 
 /** Unit test for {@link DriverConfiguration}. */
-public class DriverConfigurationUnitTest {
+class DriverConfigurationUnitTest {
 
     @Test
-    public void shouldCreateConfigurationFromFile() throws Exception {
+    void shouldCreateConfigurationFromFile() throws Exception {
         // Given
         File file = getDriversXmlFile();
         // When
@@ -52,7 +52,7 @@ public void shouldCreateConfigurationFromFile() throws Exception {
     }
 
     @Test
-    public void shouldWriteConfigurationToFile(@TempDir Path tempDir) throws Exception {
+    void shouldWriteConfigurationToFile(@TempDir Path tempDir) throws Exception {
         // Given
         File file = Files.createTempFile(tempDir, "conf", "").toFile();
         DriverConfiguration configuration = new DriverConfiguration(file);

File: zap/src/test/java/org/apache/commons/httpclient/URIUnitTest.java
Patch:
@@ -27,10 +27,10 @@
 import org.junit.jupiter.api.Test;
 
 /** Unit test for {@link URI}. */
-public class URIUnitTest {
+class URIUnitTest {
 
     @Test
-    public void shouldReturnPortFromUri() throws Exception {
+    void shouldReturnPortFromUri() throws Exception {
         // Given
         URI uri = new URI("https://example.com:8080/", true);
         // When
@@ -40,7 +40,7 @@ public void shouldReturnPortFromUri() throws Exception {
     }
 
     @Test
-    public void shouldReturnPortFromUriWithUnderscoresInHostname() throws Exception {
+    void shouldReturnPortFromUriWithUnderscoresInHostname() throws Exception {
         // Given
         URI uri = new URI("http://hive_test_00.example.com:3001/", true);
         // When

File: zap/src/test/java/org/parosproxy/paros/core/scanner/UtilUnitTest.java
Patch:
@@ -25,10 +25,10 @@
 
 import org.junit.jupiter.api.Test;
 
-public class UtilUnitTest {
+class UtilUnitTest {
 
     @Test
-    public void shouldPauseForGivenDuration() {
+    void shouldPauseForGivenDuration() {
         // Given
         int intendedPause = 500;
         // When

File: zap/src/test/java/org/zaproxy/zap/VerifyScriptTemplates.java
Patch:
@@ -44,11 +44,11 @@
 import org.junit.jupiter.api.condition.JRE;
 
 /** Verifies that the script templates are parsed without errors. */
-public class VerifyScriptTemplates {
+class VerifyScriptTemplates {
 
     @Test
     @EnabledForJreRange(max = JRE.JAVA_14)
-    public void shouldParseJsTemplates() throws Exception {
+    void shouldParseJsTemplates() throws Exception {
         // Given
         List<Path> templates = getScriptTemplates(".js");
         Compilable se = (Compilable) new ScriptEngineManager().getEngineByName("ECMAScript");

File: zap/src/test/java/org/zaproxy/zap/WithConfigsTest.java
Patch:
@@ -66,7 +66,7 @@ public abstract class WithConfigsTest extends TestUtils {
     private static String zapHomeDir;
 
     @BeforeAll
-    public static void beforeClass() throws Exception {
+    static void beforeClass() throws Exception {
         zapInstallDir =
                 Files.createDirectories(tempDir.resolve("install")).toAbsolutePath().toString();
         zapHomeDir = Files.createDirectories(tempDir.resolve("home")).toAbsolutePath().toString();
@@ -84,7 +84,7 @@ public static void beforeClass() throws Exception {
      * @throws Exception if an error occurred while setting up the dirs or core classes.
      */
     @BeforeEach
-    public void setUpZap() throws Exception {
+    void setUpZap() throws Exception {
         Constant.setZapInstall(zapInstallDir);
         Constant.setZapHome(zapHomeDir);
 

File: zap/src/test/java/org/zaproxy/zap/ZAPUnitTest.java
Patch:
@@ -43,7 +43,7 @@
 import org.zaproxy.zap.testutils.Log4jTestAppender;
 
 /** Unit test for {@link ZAP}. */
-public class ZAPUnitTest {
+class ZAPUnitTest {
 
     /** Unit test for {@link ZAP.UncaughtExceptionLogger}. */
     static class UncaughtExceptionLoggerUnitTest {

File: zap/src/test/java/org/zaproxy/zap/control/ZapReleaseComparitorUnitTest.java
Patch:
@@ -25,12 +25,12 @@
 import org.junit.jupiter.api.Test;
 
 /** Unit test for {@link ZapReleaseComparitor}. */
-public class ZapReleaseComparitorUnitTest {
+class ZapReleaseComparitorUnitTest {
 
     private static final String DEV_BUILD = "Dev Build";
 
     @Test
-    public void testComparitor() {
+    void testComparitor() {
         ZapReleaseComparitor zrc = new ZapReleaseComparitor();
 
         // Test equals

File: zap/src/test/java/org/zaproxy/zap/extension/api/ApiGeneratorUtilsTest.java
Patch:
@@ -42,12 +42,12 @@
  * Checks that all the {@link ApiImplementor}s and its options have been added to {@link
  * ApiGeneratorUtils}.
  */
-public class ApiGeneratorUtilsTest extends WithConfigsTest {
+class ApiGeneratorUtilsTest extends WithConfigsTest {
 
     private Map<String, ApiImplementor> coreApis = new HashMap<>();
 
     @BeforeEach
-    public void loadCoreApis() throws Exception {
+    void loadCoreApis() throws Exception {
         Control.initSingletonForTesting(Model.getSingleton());
         ExtensionHook hook =
                 new ExtensionHook(Model.getSingleton(), null) {
@@ -68,7 +68,7 @@ public void addApiImplementor(ApiImplementor apiImplementor) {
     }
 
     @Test
-    public void shouldHaveAllCoreApisInApiGeneratorUtils() {
+    void shouldHaveAllCoreApisInApiGeneratorUtils() {
         // Given / When
         Map<String, ApiImplementor> generatorApis =
                 ApiGeneratorUtils.getAllImplementors().stream()

File: zap/src/test/java/org/zaproxy/zap/extension/api/ApiResponseListUnitTest.java
Patch:
@@ -26,10 +26,10 @@
 import org.junit.jupiter.api.Test;
 
 /** Unit test for {@link ApiResponseList}. */
-public class ApiResponseListUnitTest {
+class ApiResponseListUnitTest {
 
     @Test
-    public void shouldReturnCorrectJsonObjectWithStdStringValues() throws ApiException {
+    void shouldReturnCorrectJsonObjectWithStdStringValues() throws ApiException {
         // Given
         List<ApiResponse> list = new ArrayList<>();
         list.add(new ApiResponseElement("key1", "val1"));
@@ -42,7 +42,7 @@ public void shouldReturnCorrectJsonObjectWithStdStringValues() throws ApiExcepti
     }
 
     @Test
-    public void shouldReturnCorrectJsonObjectWithJSONStringValues() throws ApiException {
+    void shouldReturnCorrectJsonObjectWithJSONStringValues() throws ApiException {
         // Given
         List<ApiResponse> list = new ArrayList<>();
         list.add(new ApiResponseElement("key1", "{\"name1\":\"value1\"}"));

File: zap/src/test/java/org/zaproxy/zap/extension/api/VerifyApiImplementors.java
Patch:
@@ -38,20 +38,20 @@
  * Verifies that the {@link ApiElement}s and its parameters of all core {@link ApiImplementor}s have
  * resource keys for the descriptions.
  */
-public class VerifyApiImplementors {
+class VerifyApiImplementors {
 
     private static I18N i18n;
     private static List<String> missingKeys;
 
     @BeforeAll
-    public static void setup() throws Exception {
+    static void setup() throws Exception {
         i18n = new I18N(Locale.ENGLISH);
         Constant.messages = i18n;
         missingKeys = new ArrayList<>();
     }
 
     @Test
-    public void shouldHaveDescriptionsForAllApis() {
+    void shouldHaveDescriptionsForAllApis() {
         // Given / When
         List<ApiImplementor> apis = ApiGeneratorUtils.getAllImplementors();
         apis.sort((a, b) -> a.getPrefix().compareTo(b.getPrefix()));

File: zap/src/test/java/org/zaproxy/zap/extension/ascan/ScriptsActiveScannerUnitTest.java
Patch:
@@ -57,7 +57,7 @@
 import org.zaproxy.zap.utils.I18N;
 
 /** Unit test for {@link ScriptsActiveScanner}. */
-public class ScriptsActiveScannerUnitTest extends WithConfigsTest {
+class ScriptsActiveScannerUnitTest extends WithConfigsTest {
 
     private static final String SCRIPT_TYPE = ExtensionActiveScan.SCRIPT_TYPE_ACTIVE;
     private static final Class<ActiveScript> TARGET_INTERFACE_CACHE = ActiveScript.class;

File: zap/src/test/java/org/zaproxy/zap/extension/autoupdate/OptionsParamCheckForUpdatesUnitTest.java
Patch:
@@ -32,18 +32,18 @@
 import org.zaproxy.zap.utils.ZapXmlConfiguration;
 
 /** Unit test for {@link OptionsParamCheckForUpdates}. */
-public class OptionsParamCheckForUpdatesUnitTest {
+class OptionsParamCheckForUpdatesUnitTest {
 
     @Test
-    public void shouldNotHaveConfigByDefault() {
+    void shouldNotHaveConfigByDefault() {
         // Given / When
         OptionsParamCheckForUpdates param = new OptionsParamCheckForUpdates();
         // Then
         assertThat(param.getConfig(), is(equalTo(null)));
     }
 
     @Test
-    public void shouldParseEmptyConfig() {
+    void shouldParseEmptyConfig() {
         // Given
         OptionsParamCheckForUpdates param = new OptionsParamCheckForUpdates();
         FileConfiguration config = new ZapXmlConfiguration();

File: zap/src/test/java/org/zaproxy/zap/extension/brk/BreakpointMessageHandler2UnitTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.zaproxy.zap.extension.httppanel.Message;
 
 /** Unit test for {@link BreakpointMessageHandler2}. */
-public class BreakpointMessageHandler2UnitTest {
+class BreakpointMessageHandler2UnitTest {
 
     private BreakpointManagementInterface breakpointManagementInterface;
 

File: zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/hex/HttpPanelHexModelUnitTest.java
Patch:
@@ -26,17 +26,17 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-public class HttpPanelHexModelUnitTest {
+class HttpPanelHexModelUnitTest {
 
     private HttpPanelHexModel model;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         model = new HttpPanelHexModel();
     }
 
     @Test
-    public void testGetData() {
+    void testGetData() {
         // setting value 'a0' in Hex view resulted in 'c2 a0'
         model.setData(new byte[] {(byte) 0xa0});
 

File: zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestStringHttpPanelViewModelUnitTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.zaproxy.zap.network.HttpRequestBody;
 
 /** Unit test for {@link RequestStringHttpPanelViewModel}. */
-public class RequestStringHttpPanelViewModelUnitTest
+class RequestStringHttpPanelViewModelUnitTest
         extends StringHttpPanelViewModelTest<HttpRequestHeader, HttpRequestBody> {
 
     @Override

File: zap/src/test/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseStringHttpPanelViewModelUnitTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.zaproxy.zap.network.HttpResponseBody;
 
 /** Unit test for {@link ResponseStringHttpPanelViewModel}. */
-public class ResponseStringHttpPanelViewModelUnitTest
+class ResponseStringHttpPanelViewModelUnitTest
         extends StringHttpPanelViewModelTest<HttpResponseHeader, HttpResponseBody> {
 
     @Override

File: zap/src/test/java/org/zaproxy/zap/extension/lang/LangImporterUnitTest.java
Patch:
@@ -27,10 +27,10 @@
 import org.junit.jupiter.api.Test;
 
 /** Unit test for {@link LangImporter}. */
-public class LangImporterUnitTest {
+class LangImporterUnitTest {
 
     @Test
-    public void shouldIncludeMessagesAndVulnerabilitiesFiles() {
+    void shouldIncludeMessagesAndVulnerabilitiesFiles() {
         // Given
         String[] resourceFiles = {
             "Messages.properties",
@@ -55,7 +55,7 @@ public void shouldIncludeMessagesAndVulnerabilitiesFiles() {
     }
 
     @Test
-    public void shouldNotMatchOtherFilesThanMessagesAndVulnerabilitiesFiles() {
+    void shouldNotMatchOtherFilesThanMessagesAndVulnerabilitiesFiles() {
         // Given
         String[] resourceFiles = {
             "Vulnerabilities.xml",

File: zap/src/test/java/org/zaproxy/zap/extension/pscan/scanner/ScriptsPassiveScannerUnitTest.java
Patch:
@@ -63,7 +63,7 @@
 import org.zaproxy.zap.utils.I18N;
 
 /** Unit test for {@link ScriptsPassiveScanner}. */
-public class ScriptsPassiveScannerUnitTest extends WithConfigsTest {
+class ScriptsPassiveScannerUnitTest extends WithConfigsTest {
 
     private static final String SCRIPT_TYPE = ExtensionPassiveScan.SCRIPT_TYPE_PASSIVE;
     private static final Class<PassiveScript> TARGET_INTERFACE = PassiveScript.class;

File: zap/src/test/java/org/zaproxy/zap/model/TechSetUnitTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.api.Test;
 
 /** Unit test for {@link TechSet}. */
-public class TechSetUnitTest {
+class TechSetUnitTest {
 
     @Test
     void getAllTechShouldHaveTech() {

File: zap/src/test/java/org/zaproxy/zap/model/TechUnitTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.jupiter.api.Test;
 
 /** Unit test for {@link Tech}. */
-public class TechUnitTest {
+class TechUnitTest {
 
     private static final String TOP_LEVEL = "TopLevel";
 

File: zap/src/test/java/org/zaproxy/zap/model/ValidateTranslatedVulnerabilitiesFilesUnitTest.java
Patch:
@@ -36,7 +36,7 @@
  * Validates that the translated vulnerabilities files have expected content (e.g. same number of
  * vulnerabilities as the source file).
  */
-public class ValidateTranslatedVulnerabilitiesFilesUnitTest extends TestUtils {
+class ValidateTranslatedVulnerabilitiesFilesUnitTest extends TestUtils {
 
     private static final Path DIRECTORY =
             getResourcePath(
@@ -49,7 +49,7 @@ public class ValidateTranslatedVulnerabilitiesFilesUnitTest extends TestUtils {
             new VulnerabilitiesLoader(DIRECTORY, FILE_NAME, FILE_EXTENSION);
 
     @Test
-    public void shouldLoadAllVulnerabilitiesFilesAvailable() {
+    void shouldLoadAllVulnerabilitiesFilesAvailable() {
         // Given
         Map<String, Vulnerability> mainVulns =
                 loadFile(getResourcePath("/org/zaproxy/zap/resources/" + SOURCE_FILE));

File: zap/src/test/java/org/zaproxy/zap/spider/URLResolverRfc1808ExamplesUnitTest.java
Patch:
@@ -25,14 +25,14 @@
 import org.junit.jupiter.api.Test;
 
 /** Unit test for RFC 1808 compliance of {@link org.zaproxy.zap.spider.URLResolver}. */
-public class URLResolverRfc1808ExamplesUnitTest {
+class URLResolverRfc1808ExamplesUnitTest {
 
     /**
      * @see <a href="https://tools.ietf.org/html/rfc1808#section-5.1">RFC 1808 - 5.1. Normal
      *     Examples</a>
      */
     @Test
-    public void resolveRfc1808NormalExamples() {
+    void resolveRfc1808NormalExamples() {
         final String baseUrl = "http://a/b/c/d;p?q#f";
 
         assertThat(URLResolver.resolveUrl(baseUrl, "g:h"), is("g:h"));
@@ -66,7 +66,7 @@ public void resolveRfc1808NormalExamples() {
      *     Examples</a>
      */
     @Test
-    public void resolveRfc1808AbnormalExamples() {
+    void resolveRfc1808AbnormalExamples() {
         final String baseUrl = "http://a/b/c/d;p?q#f";
 
         assertThat(URLResolver.resolveUrl(baseUrl, ""), is("http://a/b/c/d;p?q#f"));

File: zap/src/test/java/org/zaproxy/zap/testutils/HTTPDTestServer.java
Patch:
@@ -25,7 +25,7 @@
 
 public class HTTPDTestServer extends NanoHTTPD {
 
-    private List<NanoServerHandler> handlers = new ArrayList<NanoServerHandler>();
+    private List<NanoServerHandler> handlers = new ArrayList<>();
 
     private NanoServerHandler handler404 =
             new NanoServerHandler("") {

File: zap/src/test/java/org/zaproxy/zap/testutils/NanoServerHandler.java
Patch:
@@ -91,7 +91,7 @@ protected int getBodySize(IHTTPSession session) {
      * @param session the session that has the request
      * @return the body
      */
-    public String getBody(IHTTPSession session) {
+    protected String getBody(IHTTPSession session) {
         int contentLength = getBodySize(session);
         if (contentLength == 0) {
             return "";

File: zap/src/test/java/org/zaproxy/zap/utils/ContentMatcherUnitTest.java
Patch:
@@ -28,10 +28,10 @@
 import org.junit.jupiter.api.Test;
 
 /** Unit test for {@link ContentMatcher}. */
-public class ContentMatcherUnitTest {
+class ContentMatcherUnitTest {
 
     @Test
-    public void shouldCreateContentMatcherFromFile() throws Exception {
+    void shouldCreateContentMatcherFromFile() throws Exception {
         // Given
         String file = "content-matcher-patterns.xml";
         // When

File: zap/src/test/java/org/zaproxy/zap/utils/MessagesLocaleUnitTest.java
Patch:
@@ -44,7 +44,7 @@
  * Unit test to verify that the {@code Messages.properties} files are loaded with expected {@code
  * Locale}.
  */
-public class MessagesLocaleUnitTest extends TestUtils {
+class MessagesLocaleUnitTest extends TestUtils {
 
     private static final Path DIRECTORY =
             getResourcePath("/" + Constant.LANG_DIR, MessagesLocaleUnitTest.class);
@@ -53,7 +53,7 @@ public class MessagesLocaleUnitTest extends TestUtils {
     private static final String FILE_EXTENSION = ".properties";
 
     @Test
-    public void shouldLoadAllMessagesFilesAvailable() throws Exception {
+    void shouldLoadAllMessagesFilesAvailable() throws Exception {
         try (URLClassLoader classLoader =
                 new URLClassLoader(new URL[] {DIRECTORY.toUri().toURL()})) {
             List<String> brokenLocales = new ArrayList<>();

File: zap/src/main/java/ch/csnc/extension/ui/AliasTableModel.java
Patch:
@@ -36,7 +36,7 @@ public class AliasTableModel extends AbstractTableModel {
     private static final long serialVersionUID = -4387633069248206563L;
 
     private int _ks = -1;
-    private List<AliasCertificate> _aliases = new ArrayList<AliasCertificate>();
+    private List<AliasCertificate> _aliases = new ArrayList<>();
     private SSLContextManager _sslcm;
 
     public AliasTableModel(SSLContextManager contextManager) {

File: zap/src/main/java/org/apache/commons/httpclient/HttpMethodBase.java
Patch:
@@ -1393,7 +1393,7 @@ private void putAllCookiesInASingleHeader(String host, CookieSpec matcher,
     	LOG.trace("enter putAllCookiesInASingleHeader(String host, CookieSpec matcher, Cookie[] cookies)" );
     	
         //use a map to make sure we only have one cookie per name
-        HashMap<String, Cookie> mergedCookies = new HashMap<String, Cookie>();
+        HashMap<String, Cookie> mergedCookies = new HashMap<>();
         Header[] cookieLineHeaders = getRequestHeaderGroup().getHeaders(HttpHeader.COOKIE);
         for (Header cookieLineHeader : cookieLineHeaders) {
             List<Cookie> cookiesHeader = parseCookieHeader(host, cookieLineHeader.getValue());
@@ -1432,7 +1432,7 @@ static List<Cookie> parseCookieHeader(String host, String cookieHeaderValue) {
             return Collections.emptyList();
         }
         String[] cookies = cookieHeaderValue.split(";");
-        List<Cookie> cookiesList = new ArrayList<Cookie>();
+        List<Cookie> cookiesList = new ArrayList<>();
         for (String cookie : cookies){
             String[] parts = cookie.split("=");
             //manage empty value

File: zap/src/main/java/org/apache/commons/httpclient/HttpMethodDirector.java
Patch:
@@ -710,7 +710,7 @@ private boolean processRedirectResponse(final HttpMethod method)
 
         if (this.params.isParameterFalse(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS)) {
             if (this.redirectLocations == null) {
-                this.redirectLocations = new HashSet<URI>();
+                this.redirectLocations = new HashSet<>();
             }
             this.redirectLocations.add(currentUri);
             try {

File: zap/src/main/java/org/parosproxy/paros/CommandLine.java
Patch:
@@ -47,6 +47,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/10/09 Issue 5619: Ensure -configfile maintains key order
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros;
 
 import java.io.File;
@@ -414,7 +415,7 @@ private boolean parseKeywords(String[] args, int i) throws Exception {
             Properties prop =
                     new Properties() {
                         // Override methods to ensure keys returned in order
-                        List<Object> orderedKeys = new ArrayList<Object>();
+                        List<Object> orderedKeys = new ArrayList<>();
                         private static final long serialVersionUID = 1L;
 
                         @Override

File: zap/src/main/java/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -54,6 +54,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.control;
 
 import java.awt.EventQueue;
@@ -363,7 +364,7 @@ private void openFileBasedSession() {
 
     private void openDbBasedSession() {
         try {
-            List<String> sessionList = new ArrayList<String>();
+            List<String> sessionList = new ArrayList<>();
             for (RecordSession rs : model.getDb().getTableSession().listSessions()) {
                 sessionList.add("" + rs.getSessionId());
             }

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -51,6 +51,7 @@
 // ZAP: 2020/09/23 Add functionality for custom error pages handling (Issue 9).
 // ZAP: 2020/11/17 Use new TechSet#getAllTech().
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.core.scanner;
 
 import java.security.InvalidParameterException;
@@ -110,7 +111,7 @@ public class Scanner implements Runnable {
     private boolean scanChildren = true;
     private User user = null;
     private TechSet techSet;
-    private Set<ScriptCollection> scriptCollections = new HashSet<ScriptCollection>();
+    private Set<ScriptCollection> scriptCollections = new HashSet<>();
     private List<ScanFilter> scanFilters = new ArrayList<>();
     private int id;
 
@@ -249,7 +250,7 @@ public void scan(Target target) {
                     }
                 }
             } else {
-                Map<String, HostProcess> processMap = new HashMap<String, HostProcess>();
+                Map<String, HostProcess> processMap = new HashMap<>();
                 for (StructuralNode node : nodes) {
                     // Loop through the nodes creating new HostProcesss's as required
                     String hostAndPort = getHostAndPort(node);

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantHeader.java
Patch:
@@ -86,7 +86,7 @@ public class VariantHeader implements Variant {
     };
     // a hashset of (lowercase) headers that we can look up quickly and easily
     private static final HashSet<String> NON_INJECTABLE_HEADERS =
-            new HashSet<String>(Arrays.asList(injectablesTempArray));
+            new HashSet<>(Arrays.asList(injectablesTempArray));
 
     /**
      * The list of parameters (that is, headers) extracted from the request header of the message,

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java
Patch:
@@ -55,7 +55,7 @@ public class VariantMultipartFormParameters implements Variant {
     // insensitive & DOTALL, and hit "test")
 
     private List<NameValuePair> params = Collections.emptyList();
-    private List<MultipartFormParameter> multiPartParams = new ArrayList<MultipartFormParameter>();
+    private List<MultipartFormParameter> multiPartParams = new ArrayList<>();
 
     @Override
     public void setMessage(HttpMessage msg) {

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantUserDefined.java
Patch:
@@ -30,7 +30,7 @@
 
 public class VariantUserDefined implements Variant {
 
-    private static Map<String, int[][]> injectionPointMap = new HashMap<String, int[][]>();
+    private static Map<String, int[][]> injectionPointMap = new HashMap<>();
 
     private int headerLength;
     private int bodyLength;
@@ -63,7 +63,7 @@ public void setMessage(HttpMessage msg) {
 
     @Override
     public List<NameValuePair> getParamList() {
-        List<NameValuePair> list = new ArrayList<NameValuePair>();
+        List<NameValuePair> list = new ArrayList<>();
         if (this.injectionPoints != null) {
             for (int i = 0; i < this.injectionPoints.length; i++) {
                 if (isInHeader(this.injectionPoints[i]) || isInBody(this.injectionPoints[i])) {

File: zap/src/main/java/org/parosproxy/paros/extension/history/ProxyListenerLogEventPublisher.java
Patch:
@@ -72,7 +72,7 @@ private static synchronized void createPublisher() {
     }
 
     public void publishHrefAddedEvent(HistoryReference href) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.put(FIELD_HISTORY_REFERENCE_ID, Integer.toString(href.getHistoryId()));
         map.put(FIELD_URI, href.getURI().toString());
         map.put(FIELD_METHOD, href.getMethod());

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsConnectionPanel.java
Patch:
@@ -42,6 +42,7 @@
 // ZAP: 2020/03/24 Remove hardcoded white background on some fields (part of Issue 5542).
 // ZAP: 2020/03/25 Remove hardcoded colour in titled borders (Issue 5542).
 // ZAP: 2020/04/20 Add SocksProxyPanel (Issue 29).
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.extension.option;
 
 import java.awt.BorderLayout;
@@ -488,7 +489,7 @@ private ZapPortNumberSpinner getTxtProxyChainPort() {
 
     private JComboBox<String> getCommonUserAgents() {
         if (commonUserAgents == null) {
-            commonUserAgents = new JComboBox<String>(CommonUserAgents.getNames());
+            commonUserAgents = new JComboBox<>(CommonUserAgents.getNames());
             if (commonUserAgents.getItemCount() == 0) {
                 commonUserAgents.setEnabled(false);
             } else {

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsDatabasePanel.java
Patch:
@@ -210,7 +210,7 @@ private JCheckBox getCheckBoxNewSessionPrompt() {
 
     private JComboBox<String> comboNewSessionOption() {
         if (comboNewSessionOption == null) {
-            comboNewSessionOption = new JComboBox<String>();
+            comboNewSessionOption = new JComboBox<>();
             // Note that these need to be in the order specified in
             // org.parosproxy.paros.common.AbstractParam.DatabaseParam
             comboNewSessionOption.addItem(

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsViewPanel.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2020/02/24 Use LookAndFeelInfo when setting the look and feel option.
 // ZAP: 2020/03/25 Remove hardcoded colour in titled border (Issue 5542).
 // ZAP: 2020/12/03 Add constants for indexes of possible break buttons locations
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.extension.option;
 
 import java.awt.BorderLayout;
@@ -580,7 +581,7 @@ private JComboBox<String> getTimeStampsFormatSelect() {
             String[] timeStampFormatStrings = {
                 TIME_STAMP_FORMAT_DATETIME, TIME_STAMP_FORMAT_ISO8601, TIME_STAMP_FORMAT_TIMEONLY
             };
-            timeStampsFormatSelect = new JComboBox<String>(timeStampFormatStrings);
+            timeStampsFormatSelect = new JComboBox<>(timeStampFormatStrings);
             timeStampsFormatSelect.setToolTipText(TIME_STAMP_FORMAT_COMBOBOX_TOOL_TIP);
             timeStampsFormatSelect.setSelectedItem(getTimeStampsFormatSelect().getSelectedItem());
             timeStampsFormatSelect.setEditable(true);
@@ -672,7 +673,7 @@ private void setExampleFont(FontUtils.FontType fontType) {
     @SuppressWarnings("unchecked")
     private JComboBox<String> initFontName(FontUtils.FontType fontType) {
         JComboBox<String> fontName;
-        fontName = new JComboBox<String>();
+        fontName = new JComboBox<>();
         fontName.setRenderer(new JComboBoxFontRenderer());
         String fonts[] =
                 GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();

File: zap/src/main/java/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -57,6 +57,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -89,7 +90,7 @@ public class SiteNode extends DefaultMutableTreeNode {
     private Vector<HistoryReference> pastHistoryList = new Vector<>(10);
     // ZAP: Support for linking Alerts to SiteNodes
     private SiteMap siteMap = null;
-    private Set<Alert> alerts = Collections.synchronizedSet(new HashSet<Alert>());
+    private Set<Alert> alerts = Collections.synchronizedSet(new HashSet<>());
     private boolean justSpidered = false;
     // private boolean justAJAXSpidered = false;
     private ArrayList<String> icons = null;
@@ -164,7 +165,7 @@ public void removeCustomIcon(String resourceName) {
      * @since 2.6.0
      */
     public List<ImageIcon> getCustomIcons() {
-        List<ImageIcon> iconList = new ArrayList<ImageIcon>();
+        List<ImageIcon> iconList = new ArrayList<>();
         if (justSpidered) {
             iconList.add(new ImageIcon(Constant.class.getResource("/resource/icon/10/spider.png")));
         }

File: zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java
Patch:
@@ -755,7 +755,7 @@ public TreeSet<String> getParamNameSet(HtmlParameter.Type type) {
      * @since 2.10.0
      */
     public List<String> getParameterNames(HtmlParameter.Type type) {
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         Model.getSingleton()
                 .getSession()
                 .getParameters(this, type)
@@ -782,7 +782,7 @@ private TreeSet<HtmlParameter> getParamsSet(HtmlParameter.Type type) {
      * @since 2.10.0
      */
     public List<HtmlParameter> getParameters(HtmlParameter.Type type) {
-        List<HtmlParameter> list = new ArrayList<HtmlParameter>();
+        List<HtmlParameter> list = new ArrayList<>();
         Model.getSingleton()
                 .getSession()
                 .getParameters(this, type)
@@ -1218,7 +1218,7 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {
      */
     @Override
     public Map<String, String> toEventData() {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.put(EVENT_DATA_URI, getRequestHeader().getURI().toString());
         map.put(EVENT_DATA_REQUEST_HEADER, getRequestHeader().toString());
         map.put(EVENT_DATA_REQUEST_BODY, getRequestBody().toString());

File: zap/src/main/java/org/parosproxy/paros/network/HttpResponseHeader.java
Patch:
@@ -41,6 +41,7 @@
 // ZAP: 2019/12/09 Address deprecation of getHeaders(String) Vector method.
 // ZAP: 2020/11/10 Add convenience method isCss().
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.network;
 
 import java.net.HttpCookie;
@@ -355,7 +356,7 @@ private List<HttpCookie> parseCookieString(String c, String defaultDomain) {
                 }
             }
         }
-        return new ArrayList<HttpCookie>();
+        return new ArrayList<>();
     }
 
     /**

File: zap/src/main/java/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -86,6 +86,7 @@
 // ZAP: 2020/09/04 Added AUTHENTICATION_POLL_INITIATOR
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2020/12/09 Set content encoding to the response body.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.network;
 
 import java.io.IOException;
@@ -177,7 +178,7 @@ public class HttpSender {
 
     private static HttpMethodHelper helper = new HttpMethodHelper();
     private static String userAgent = "";
-    private static final ThreadLocal<Boolean> IN_LISTENER = new ThreadLocal<Boolean>();
+    private static final ThreadLocal<Boolean> IN_LISTENER = new ThreadLocal<>();
 
     private HttpClient client = null;
     private HttpClient clientViaProxy = null;

File: zap/src/main/java/org/parosproxy/paros/view/MainMenuBar.java
Patch:
@@ -40,6 +40,7 @@
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 // ZAP: 2021/04/08 Remove/fix boilerplate javadocs, and un-necessary fully qualified method return
 // types.
+// ZAP: 2021/05/14 Remove redundant type arguments.
 package org.parosproxy.paros.view;
 
 import java.awt.event.ActionEvent;
@@ -136,7 +137,7 @@ private JMenuItem getMenuEditZAPMode() {
             menuZapMode = new JMenu(Constant.messages.getString("menu.edit.zapmode"));
             menuZapModeGroup = new ButtonGroup();
             JRadioButtonMenuItem newButton;
-            menuZapModeMap = new HashMap<Mode, JRadioButtonMenuItem>();
+            menuZapModeMap = new HashMap<>();
             for (Mode modeType : Mode.values()) {
                 newButton = addZAPModeMenuItem(modeType);
                 menuZapModeGroup.add(newButton);

File: zap/src/main/java/org/zaproxy/zap/authentication/GenericAuthenticationCredentials.java
Patch:
@@ -48,7 +48,7 @@ public class GenericAuthenticationCredentials implements AuthenticationCredentia
     public GenericAuthenticationCredentials(String[] paramNames) {
         super();
         this.paramNames = paramNames;
-        this.paramValues = new HashMap<String, String>(paramNames.length);
+        this.paramValues = new HashMap<>(paramNames.length);
     }
 
     public String getParam(String paramName) {
@@ -79,7 +79,7 @@ public void decode(String encodedCredentials) {
     public ApiResponse getApiResponseRepresentation() {
         Map<String, String> values = new HashMap<>(paramValues);
         values.put("type", API_NAME);
-        return new ApiResponseSet<String>("credentials", values);
+        return new ApiResponseSet<>("credentials", values);
     }
 
     /** The Options Panel used for configuring a {@link GenericAuthenticationCredentials}. */

File: zap/src/main/java/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -225,7 +225,7 @@ public ApiResponse getApiResponseRepresentation() {
             Map<String, String> values = new HashMap<>();
             values.put("type", API_NAME);
             values.put("sessionName", selectedSession != null ? selectedSession.getName() : "");
-            return new ApiResponseSet<String>("credentials", values);
+            return new ApiResponseSet<>("credentials", values);
         }
     }
 

File: zap/src/main/java/org/zaproxy/zap/authentication/UsernamePasswordAuthenticationCredentials.java
Patch:
@@ -211,7 +211,7 @@ public ApiResponse getApiResponseRepresentation() {
         values.put("type", API_NAME);
         values.put("username", username);
         values.put("password", password);
-        return new ApiResponseSet<String>("credentials", values);
+        return new ApiResponseSet<>("credentials", values);
     }
 
     private static final String ACTION_SET_CREDENTIALS = "formBasedAuthenticationCredentials";

File: zap/src/main/java/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -808,7 +808,7 @@ private <T> List<ClassNameWrapper> getClassNames(String packageName, Class<T> cl
      * @see #getExtensions(AddOn)
      */
     public List<Extension> getExtensions() {
-        List<Extension> list = new ArrayList<Extension>();
+        List<Extension> list = new ArrayList<>();
         for (AddOn addOn : getAddOnCollection().getAddOns()) {
             list.addAll(getExtensions(addOn));
         }

File: zap/src/main/java/org/zaproxy/zap/db/sql/DbSQL.java
Patch:
@@ -58,7 +58,7 @@ public class DbSQL implements DatabaseListener {
 
     private static final Logger logger = LogManager.getLogger(DbSQL.class);
 
-    private Map<String, StatementPool> stmtPool = new HashMap<String, StatementPool>();
+    private Map<String, StatementPool> stmtPool = new HashMap<>();
 
     public static DbSQL getSingleton() {
         if (singleton == null) {
@@ -236,8 +236,8 @@ public void releasePreparedStatement(SqlPreparedStatementWrapper psw) {
     private class StatementPool {
         private static final int MAX_FREE_POOL_SIZE = 5;
 
-        private Deque<PreparedStatement> inUsePool = new ConcurrentLinkedDeque<PreparedStatement>();
-        private Deque<PreparedStatement> freePool = new ConcurrentLinkedDeque<PreparedStatement>();
+        private Deque<PreparedStatement> inUsePool = new ConcurrentLinkedDeque<>();
+        private Deque<PreparedStatement> freePool = new ConcurrentLinkedDeque<>();
 
         public SqlPreparedStatementWrapper getPreparedStatement(String key, String sql)
                 throws SQLException {

File: zap/src/main/java/org/zaproxy/zap/db/sql/SqlTableSession.java
Patch:
@@ -80,7 +80,7 @@ public List<RecordSession> listSessions() throws DatabaseException {
         SqlPreparedStatementWrapper psList = null;
         try {
             psList = DbSQL.getSingleton().getPreparedStatement("session.ps.list");
-            List<RecordSession> result = new ArrayList<RecordSession>();
+            List<RecordSession> result = new ArrayList<>();
             try (ResultSet rs = psList.getPs().executeQuery()) {
                 RecordSession ra = build(rs);
                 while (ra != null) {

File: zap/src/main/java/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -855,7 +855,7 @@ public String getXml(SiteNode site) {
         StringBuilder xml = new StringBuilder();
         xml.append("<alerts>");
         List<Alert> alerts = site.getAlerts();
-        SortedSet<String> handledAlerts = new TreeSet<String>();
+        SortedSet<String> handledAlerts = new TreeSet<>();
 
         for (int i = 0; i < alerts.size(); i++) {
             Alert alert = alerts.get(i);

File: zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -265,7 +265,7 @@ public boolean requestHasToken(HttpMessage msg) {
     public boolean requestHasToken(String reqBody) {
         Set<String> values;
         synchronized (valueToToken) {
-            values = Collections.unmodifiableSet(new HashSet<String>(valueToToken.keySet()));
+            values = Collections.unmodifiableSet(new HashSet<>(valueToToken.keySet()));
         }
         for (String token : values) {
             if (reqBody.indexOf(token) >= 0) {
@@ -284,7 +284,7 @@ private List<AntiCsrfToken> getTokens(String reqBody, String targetUrl) {
         List<AntiCsrfToken> tokens = new ArrayList<>();
         Set<String> values;
         synchronized (valueToToken) {
-            values = Collections.unmodifiableSet(new HashSet<String>(valueToToken.keySet()));
+            values = Collections.unmodifiableSet(new HashSet<>(valueToToken.keySet()));
         }
 
         for (String value : values) {

File: zap/src/main/java/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -112,7 +112,7 @@ public enum RequestType {
 
     private Map<String, ApiImplementor> shortcuts = new HashMap<>();
 
-    private Map<String, Nonce> nonces = Collections.synchronizedMap(new HashMap<String, Nonce>());
+    private Map<String, Nonce> nonces = Collections.synchronizedMap(new HashMap<>());
 
     /**
      * The options for the API.

File: zap/src/main/java/org/zaproxy/zap/extension/api/ApiDynamicActionImplementor.java
Patch:
@@ -72,6 +72,6 @@ private static ApiResponseSet<String> buildParamMap(String paramName, boolean ma
         Map<String, String> m = new HashMap<>();
         m.put("name", paramName);
         m.put("mandatory", mandatory ? "true" : "false");
-        return new ApiResponseSet<String>("param", m);
+        return new ApiResponseSet<>("param", m);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java
Patch:
@@ -345,7 +345,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
     }
 
     private void addExcludeToContext(Context context, String regex) {
-        List<String> incRegexes = new ArrayList<String>(context.getIncludeInContextRegexs());
+        List<String> incRegexes = new ArrayList<>(context.getIncludeInContextRegexs());
         if (incRegexes.remove(regex)) {
             // Its already explicitly included, removing it from the include list is safer and more
             // useful
@@ -502,7 +502,7 @@ private ApiResponse buildResponseFromContext(Context c) {
                 "postParameterParserClass", c.getPostParamParser().getClass().getCanonicalName());
         fields.put("postParameterParserConfig", c.getPostParamParser().getConfig());
 
-        return new ApiResponseSet<String>("context", fields);
+        return new ApiResponseSet<>("context", fields);
     }
 
     private String jsonEncodeList(List<String> list) {

File: zap/src/main/java/org/zaproxy/zap/extension/api/GoAPIGenerator.java
Patch:
@@ -215,7 +215,7 @@ private void createDirAndFile(Path path) throws IOException {
 
     // Writes the function arguments
     private void writeOutArgs(List<ApiParameter> parameters, Writer out) throws IOException {
-        ArrayList<String> args = new ArrayList<String>();
+        ArrayList<String> args = new ArrayList<>();
         for (ApiParameter parameter : parameters) {
             String name = parameter.getName();
             if (name.equalsIgnoreCase("boolean")) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -68,14 +68,14 @@ public static enum State {
     private SiteNode startNode = null;
     private ResponseCountSnapshot rcTotals = new ResponseCountSnapshot();
     private ResponseCountSnapshot rcLastSnapshot = new ResponseCountSnapshot();
-    private List<ResponseCountSnapshot> rcHistory = new ArrayList<ResponseCountSnapshot>();
+    private List<ResponseCountSnapshot> rcHistory = new ArrayList<>();
 
     private Date timeStarted = null;
     private Date timeFinished = null;
     private int maxResultsToList = 0;
 
-    private final List<Integer> hRefs = Collections.synchronizedList(new ArrayList<Integer>());
-    private final List<Integer> alerts = Collections.synchronizedList(new ArrayList<Integer>());
+    private final List<Integer> hRefs = Collections.synchronizedList(new ArrayList<>());
+    private final List<Integer> alerts = Collections.synchronizedList(new ArrayList<>());
 
     private ScheduledExecutorService scheduler;
     private ScheduledFuture<?> schedHandle;

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -92,7 +92,7 @@ public ActiveScanController(ExtensionActiveScan extension) {
         this.activeScansLock = new ReentrantLock();
         this.extension = extension;
         this.activeScanMap = new HashMap<>();
-        this.activeScanList = new ArrayList<ActiveScan>();
+        this.activeScanList = new ArrayList<>();
     }
 
     public void setExtAlert(ExtensionAlert extAlert) {
@@ -221,7 +221,7 @@ public ActiveScan getLastScan() {
 
     @Override
     public List<ActiveScan> getAllScans() {
-        List<ActiveScan> list = new ArrayList<ActiveScan>();
+        List<ActiveScan> list = new ArrayList<>();
         activeScansLock.lock();
         try {
             for (ActiveScan scan : activeScanList) {
@@ -235,7 +235,7 @@ public List<ActiveScan> getAllScans() {
 
     @Override
     public List<ActiveScan> getActiveScans() {
-        List<ActiveScan> list = new ArrayList<ActiveScan>();
+        List<ActiveScan> list = new ArrayList<>();
         activeScansLock.lock();
         try {
             for (ActiveScan scan : activeScanList) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/AttackModeScanner.java
Patch:
@@ -63,7 +63,7 @@ public class AttackModeScanner implements EventConsumer {
 
     private Logger log = LogManager.getLogger(AttackModeScanner.class);
 
-    private List<SiteNode> nodeStack = new ArrayList<SiteNode>();
+    private List<SiteNode> nodeStack = new ArrayList<>();
 
     public AttackModeScanner(ExtensionActiveScan extension) {
         this.extension = extension;
@@ -257,7 +257,7 @@ private ExtensionAlert getExtensionAlert() {
     private class AttackModeThread implements Runnable, ScannerListener, AttackModeScannerThread {
 
         private int scannerCount = 4;
-        private List<Scanner> scanners = new ArrayList<Scanner>();
+        private List<Scanner> scanners = new ArrayList<>();
         private AttackScan ascanWrapper;
         private boolean running = false;
 
@@ -336,7 +336,7 @@ public void run() {
         @Override
         public void scannerComplete(int id) {
             // Clear so we can attack the next node
-            List<Scanner> stoppedScanners = new ArrayList<Scanner>();
+            List<Scanner> stoppedScanners = new ArrayList<>();
             synchronized (this.scanners) {
                 for (Scanner scanner : this.scanners) {
                     if (scanner.isStop()) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ChallengeCallbackAPI.java
Patch:
@@ -57,7 +57,7 @@ public abstract class ChallengeCallbackAPI extends ApiImplementor {
     // The registered callbacks for this API
     // Use a synchronized collection
     private final Map<String, RegisteredCallback> regCallbacks =
-            Collections.synchronizedMap(new TreeMap<String, RegisteredCallback>());
+            Collections.synchronizedMap(new TreeMap<>());
 
     /** Default constructor */
     public ChallengeCallbackAPI() {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -808,7 +808,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
     /** Use the save method to launch a scan */
     @Override
     public void save() {
-        List<Object> contextSpecificObjects = new ArrayList<Object>();
+        List<Object> contextSpecificObjects = new ArrayList<>();
 
         techTreeState = getTechTree().getTechSet();
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -101,7 +101,7 @@ public class ExtensionActiveScan extends ExtensionAdaptor
     private CustomScanDialog customScanDialog = null;
     private PolicyManagerDialog policyManagerDialog = null;
     private PolicyManager policyManager = null;
-    private List<CustomScanPanel> customScanPanels = new ArrayList<CustomScanPanel>();
+    private List<CustomScanPanel> customScanPanels = new ArrayList<>();
 
     private List<String> excludeList = Collections.emptyList();
 
@@ -601,7 +601,7 @@ public void showCustomScanDialog(Target target) {
             // Work out the tabs
             String[] tabs = CustomScanDialog.STD_TAB_LABELS;
             if (this.customScanPanels.size() > 0) {
-                List<String> tabList = new ArrayList<String>();
+                List<String> tabList = new ArrayList<>();
                 for (String str : CustomScanDialog.STD_TAB_LABELS) {
                     tabList.add(str);
                 }

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/FilterPanel.java
Patch:
@@ -465,7 +465,7 @@ private void populateTagsInFilterPanel(Target target) {
                 }
             }
         }
-        this.setAllTags(new ArrayList<String>(tags));
+        this.setAllTags(new ArrayList<>(tags));
     }
 
     public String validateFields() {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -472,7 +472,7 @@ private JTable getTableTest() {
             tableTest.setAutoCreateRowSorter(true);
 
             // Default sort by name (column 0)
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             tableTest.getRowSorter().setSortKeys(sortKeys);
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -95,7 +95,7 @@ private JTable getTableTest() {
             tableTest.setAutoCreateRowSorter(true);
 
             // Default sort by name (column 0)
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             tableTest.getRowSorter().setSortKeys(sortKeys);
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyManager.java
Patch:
@@ -54,7 +54,7 @@ public void init() {
 
     public synchronized List<String> getAllPolicyNames() {
         if (allPolicyNames == null) {
-            allPolicyNames = new ArrayList<String>();
+            allPolicyNames = new ArrayList<>();
             String[] files = Constant.getPoliciesDir().list();
             if (files != null) {
                 for (String file : files) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ScanProgressDialog.java
Patch:
@@ -93,7 +93,7 @@ public class ScanProgressDialog extends AbstractDialog {
     private boolean stopThread;
 
     private JFreeChart chart;
-    private List<String> labelsAdded = new ArrayList<String>();
+    private List<String> labelsAdded = new ArrayList<>();
     private TimeSeries seriesTotal;
     private TimeSeries series100;
     private TimeSeries series200;
@@ -511,7 +511,7 @@ public void run() {
 
     private JComboBox<String> getHostSelect() {
         if (hostSelect == null) {
-            hostSelect = new JComboBox<String>();
+            hostSelect = new JComboBox<>();
             hostSelect.addActionListener(
                     new ActionListener() {
                         @Override

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ScanProgressTableModel.java
Patch:
@@ -48,7 +48,7 @@ public class ScanProgressTableModel extends AbstractTableModel {
 
     public ScanProgressTableModel() {
         super();
-        values = new ArrayList<ScanProgressItem>();
+        values = new ArrayList<>();
         focusedAction = null;
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/VariantFactory.java
Patch:
@@ -65,7 +65,7 @@ public void removeVariant(Class<? extends Variant> variantClass) {
     }
 
     public List<Variant> createVariants(ScannerParam scanOptions, HttpMessage message) {
-        List<Variant> listVariant = new ArrayList<Variant>();
+        List<Variant> listVariant = new ArrayList<>();
 
         int targets = scanOptions.getTargetParamsInjectable();
         int enabledRPC = scanOptions.getTargetParamsEnabledRPC();
@@ -160,7 +160,7 @@ public List<Variant> createVariants(ScannerParam scanOptions, HttpMessage messag
     }
 
     public List<Variant> createSiteModifyingVariants() {
-        List<Variant> listVariant = new ArrayList<Variant>();
+        List<Variant> listVariant = new ArrayList<>();
 
         addScriptVariants(listVariant);
         addCustomVariants(listVariant);

File: zap/src/main/java/org/zaproxy/zap/extension/authorization/BasicAuthorizationDetectionMethod.java
Patch:
@@ -262,6 +262,6 @@ public ApiResponse getApiResponseRepresentation() {
         values.put(AuthorizationAPI.PARAM_STATUS_CODE, Integer.toString(this.statusCode));
         values.put(AuthorizationAPI.PARAM_LOGICAL_OPERATOR, this.logicalOperator.name());
         values.put(AuthorizationAPI.RESPONSE_TYPE, "basic");
-        return new ApiResponseSet<String>(AuthorizationAPI.RESPONSE_TAG, values);
+        return new ApiResponseSet<>(AuthorizationAPI.RESPONSE_TAG, values);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/AutoUpdateAPI.java
Patch:
@@ -101,7 +101,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
             if (ao == null) {
                 throw new ApiException(Type.DOES_NOT_EXIST);
             } else {
-                List<String> l = new ArrayList<String>();
+                List<String> l = new ArrayList<>();
                 l.add(id);
                 String errorMessages = extension.installAddOns(l);
                 if (errorMessages.length() == 0) {
@@ -120,7 +120,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
             if (ao == null) {
                 throw new ApiException(Type.DOES_NOT_EXIST);
             } else {
-                List<String> l = new ArrayList<String>();
+                List<String> l = new ArrayList<>();
                 l.add(id);
                 String errorMessages = extension.uninstallAddOns(l);
                 if (errorMessages.length() == 0) {
@@ -196,7 +196,7 @@ private static ApiResponseSet<String> addonToSet(AddOn ao, boolean localAddOn) {
         if (localAddOn) {
             map.put("file", ao.getFile().toString());
         }
-        return new ApiResponseSet<String>("addon", map);
+        return new ApiResponseSet<>("addon", map);
     }
 
     public String getLatestVersionNumber() {

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -1726,7 +1726,7 @@ boolean uninstallAddOns(Window caller, Set<AddOn> addOns, boolean updates) {
         }
 
         if (getView() != null) {
-            return uninstallAddOnsWithView(caller, addOns, updates, new HashSet<AddOn>());
+            return uninstallAddOnsWithView(caller, addOns, updates, new HashSet<>());
         }
 
         final Set<AddOn> failedUninstallations = new HashSet<>();
@@ -2024,7 +2024,7 @@ public synchronized String uninstallAddOns(List<String> addons) {
                 AddOnDependencyChecker addOnDependencyChecker =
                         new AddOnDependencyChecker(getLocalVersionInfo(), aoc);
 
-                Set<AddOn> addonSet = new HashSet<AddOn>();
+                Set<AddOn> addonSet = new HashSet<>();
                 addonSet.add(ao);
                 UninstallationResult result =
                         addOnDependencyChecker.calculateUninstallChanges(addonSet);
@@ -2145,7 +2145,7 @@ public void execute(CommandLineArgument[] args) {
         }
         if (arguments[ARG_CFU_LIST_IDX].isEnabled()) {
             AddOnCollection aoc = this.getLocalVersionInfo();
-            List<AddOn> aolist = new ArrayList<AddOn>(aoc.getAddOns());
+            List<AddOn> aolist = new ArrayList<>(aoc.getAddOns());
             Collections.sort(
                     aolist,
                     new Comparator<AddOn>() {

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -547,7 +547,7 @@ public void tableChanged(TableModelEvent e) {
                     .setSortable(false); // checkbox doesn't need to be sortable
 
             // Default sort by name (column 1)
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
             sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
             installedAddOnsTable.getRowSorter().setSortKeys(sortKeys);
 
@@ -664,7 +664,7 @@ && getUninstalledAddOnsTable().getSelectedRowCount()
 
             // Default sort by status (column 1) descending (Release, Beta, Alpha), and name (column
             // 2) ascending
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(2);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(2);
             sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
             sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
             uninstalledAddOnsTable.getRowSorter().setSortKeys(sortKeys);
@@ -1046,7 +1046,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
                             }
 
                             extension.uninstallAddOnsWithView(
-                                    ManageAddOnsDialog.this, addOns, false, new HashSet<AddOn>());
+                                    ManageAddOnsDialog.this, addOns, false, new HashSet<>());
                         }
                     });
         }

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/OptionsCheckForUpdatesPanel.java
Patch:
@@ -313,7 +313,7 @@ public void tableChanged(TableModelEvent e) {
 
     private JComboBox<String> getDownloadDirCombo() {
         if (downloadDir == null) {
-            downloadDir = new JComboBox<String>();
+            downloadDir = new JComboBox<>();
             repopulateDownloadDirs();
         }
         return downloadDir;

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/OptionsParamCheckForUpdates.java
Patch:
@@ -59,7 +59,7 @@ public class OptionsParamCheckForUpdates extends AbstractParam {
     private boolean reportReleaseAddons = false;
     private boolean reportBetaAddons = false;
     private boolean reportAlphaAddons = false;
-    private List<File> addonDirectories = new ArrayList<File>();
+    private List<File> addonDirectories = new ArrayList<>();
     private File downloadDirectory = new File(Constant.FOLDER_LOCAL_PLUGIN);
 
     // Day last checked is used to ensure if the user has agreed then we only check the first time

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakEventPublisher.java
Patch:
@@ -72,7 +72,7 @@ public void publishInactiveEvent(Message msg) {
     }
 
     private void publishEvent(String event, Message msg, Map<String, String> parameters) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.putAll(parameters); // Could be an empty map
         map.put(MESSAGE_TYPE, msg.getType());
 

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakpointsOptionsPanel.java
Patch:
@@ -181,7 +181,7 @@ private ZapTextField getMultimediaUrlRegexField() {
 
     private JComboBox<String> getButtonMode() {
         if (buttonMode == null) {
-            buttonMode = new JComboBox<String>();
+            buttonMode = new JComboBox<>();
             buttonMode.addItem(
                     Constant.messages.getString("brk.optionspanel.option.breakmode.simple.label"));
             buttonMode.addItem(

File: zap/src/main/java/org/zaproxy/zap/extension/callback/ExtensionCallback.java
Patch:
@@ -58,7 +58,7 @@ public class ExtensionCallback extends ExtensionAdaptor
     private CallbackParam callbackParam;
     private OptionsCallbackPanel optionsCallbackPanel;
 
-    private Map<String, CallbackImplementor> callbacks = new HashMap<String, CallbackImplementor>();
+    private Map<String, CallbackImplementor> callbacks = new HashMap<>();
     private int actualPort;
     private String currentConfigLocalAddress;
     private int currentConfigPort;

File: zap/src/main/java/org/zaproxy/zap/extension/callback/OptionsCallbackPanel.java
Patch:
@@ -134,14 +134,14 @@ private JPanel getCallbackPanel() {
 
     private JComboBox<String> getLocalAddress() {
         if (localAddress == null) {
-            localAddress = new JComboBox<String>();
+            localAddress = new JComboBox<>();
         }
         return localAddress;
     }
 
     private JComboBox<String> getRemoteAddress() {
         if (remoteAddress == null) {
-            remoteAddress = new JComboBox<String>();
+            remoteAddress = new JComboBox<>();
             remoteAddress.setEditable(true);
         }
         return remoteAddress;

File: zap/src/main/java/org/zaproxy/zap/extension/ext/ExtensionExtension.java
Patch:
@@ -109,7 +109,7 @@ public boolean handleFile(File file) {
     @Override
     public List<String> getHandledExtensions() {
         // Support loading sessions
-        List<String> exts = new ArrayList<String>();
+        List<String> exts = new ArrayList<>();
         exts.add("session");
         return exts;
     }

File: zap/src/main/java/org/zaproxy/zap/extension/globalexcludeurl/GlobalExcludeURLParam.java
Patch:
@@ -45,8 +45,7 @@ public class GlobalExcludeURLParam extends AbstractParam {
     private static final String CONFIRM_REMOVE_TOKEN_KEY =
             GLOBAL_EXCLUDE_URL_BASE_KEY + ".confirmRemoveToken";
 
-    private static ArrayList<GlobalExcludeURLParamToken> defaultList =
-            new ArrayList<GlobalExcludeURLParamToken>();
+    private static ArrayList<GlobalExcludeURLParamToken> defaultList = new ArrayList<>();
 
     /**
      * Fills in the list of default regexs to ignore. In a future version, this could be read from a

File: zap/src/main/java/org/zaproxy/zap/extension/history/PopupMenuExportContextURLs.java
Patch:
@@ -73,7 +73,7 @@ protected void performAction() {
         }
 
         List<Context> contexts = extension.getView().getSiteTreePanel().getSelectedContexts();
-        SortedSet<String> allUrls = new TreeSet<String>();
+        SortedSet<String> allUrls = new TreeSet<>();
 
         for (Context c : contexts) {
             this.getOutputSet(c, allUrls);

File: zap/src/main/java/org/zaproxy/zap/extension/history/PopupMenuExportSelectedURLs.java
Patch:
@@ -57,15 +57,15 @@ protected void performAction() {
 
     private SortedSet<String> getOutputSet(TreePath[] startingPoints) {
         JTree siteTree = extension.getView().getSiteTreePanel().getTreeSite();
-        ArrayList<TreePath> startingPts = new ArrayList<TreePath>();
+        ArrayList<TreePath> startingPts = new ArrayList<>();
 
         if (ArrayUtils.isEmpty(startingPoints)) {
             startingPts.add(new TreePath(siteTree.getModel().getRoot()));
         } else {
             startingPts.addAll(Arrays.asList(startingPoints));
         }
 
-        SortedSet<String> outputSet = new TreeSet<String>();
+        SortedSet<String> outputSet = new TreeSet<>();
         for (TreePath aPath : startingPts) {
             Enumeration<?> en = (((SiteNode) aPath.getLastPathComponent()).preorderEnumeration());
             while (en.hasMoreElements()) {

File: zap/src/main/java/org/zaproxy/zap/extension/history/PopupMenuExportURLs.java
Patch:
@@ -98,7 +98,7 @@ protected void performAction() {
     }
 
     protected SortedSet<String> getOutputSet(SiteNode startingPoint) {
-        SortedSet<String> outputSet = new TreeSet<String>();
+        SortedSet<String> outputSet = new TreeSet<>();
         Enumeration<?> en = (startingPoint.preorderEnumeration());
         while (en.hasMoreElements()) {
             SiteNode node = (SiteNode) en.nextElement();

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/HttpPanelRequest.java
Patch:
@@ -47,8 +47,7 @@ public HttpPanelRequest(boolean isEditable, String configurationKey) {
     @Override
     protected void initComponents() {
         addComponent(
-                new RequestSplitComponent<HttpMessage>(),
-                Model.getSingleton().getOptionsParam().getConfig());
+                new RequestSplitComponent<>(), Model.getSingleton().getOptionsParam().getConfig());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/HttpPanelResponse.java
Patch:
@@ -20,7 +20,6 @@
 package org.zaproxy.zap.extension.httppanel;
 
 import org.parosproxy.paros.model.Model;
-import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.component.split.response.ResponseSplitComponent;
 import org.zaproxy.zap.view.HttpPanelManager;
 
@@ -39,8 +38,7 @@ public HttpPanelResponse(boolean isEditable, String configurationKey) {
     @Override
     protected void initComponents() {
         addComponent(
-                new ResponseSplitComponent<HttpMessage>(),
-                Model.getSingleton().getOptionsParam().getConfig());
+                new ResponseSplitComponent<>(), Model.getSingleton().getOptionsParam().getConfig());
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/component/HttpPanelComponentViewsManager.java
Patch:
@@ -631,7 +631,7 @@ public CustomDelegateListCellRenderer(JComboBox<ViewItem> aComboBox, String labe
 
                         @Override
                         public void propertyChange(PropertyChangeEvent evt) {
-                            delegateRenderer = new JComboBox<ViewItem>().getRenderer();
+                            delegateRenderer = new JComboBox<>().getRenderer();
                         }
                     });
         }

File: zap/src/main/java/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -574,7 +574,7 @@ public HttpSessionTokensSet getHttpSessionTokensSetForContext(Context context) {
      * @return all of the sites with http sessions
      */
     public List<String> getSites() {
-        List<String> sites = new ArrayList<String>();
+        List<String> sites = new ArrayList<>();
         if (this.sessions == null) {
             return sites;
         }

File: zap/src/main/java/org/zaproxy/zap/extension/keyboard/DialogEditShortcut.java
Patch:
@@ -130,7 +130,7 @@ private KeyboardShortcut getDuplicate() {
     }
 
     private List<String> getKeyList() {
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         list.add(""); // Always start with a blank option - means no key set
         for (char c = 'A'; c <= 'Z'; c++) {
             list.add(String.valueOf(c));

File: zap/src/main/java/org/zaproxy/zap/extension/keyboard/ExtensionKeyboard.java
Patch:
@@ -228,7 +228,7 @@ public List<KeyboardShortcut> getShortcuts() {
 
     public List<KeyboardShortcut> getShortcuts(boolean reset) {
         if (hasView()) {
-            List<KeyboardShortcut> kss = new ArrayList<KeyboardShortcut>();
+            List<KeyboardShortcut> kss = new ArrayList<>();
             processMainMenuBarMenus(menu -> addAllMenuItems(kss, menu, reset));
             return kss;
         }

File: zap/src/main/java/org/zaproxy/zap/extension/keyboard/KeyboardParam.java
Patch:
@@ -51,7 +51,7 @@ protected void parse() {
         try {
             List<HierarchicalConfiguration> fields =
                     ((HierarchicalConfiguration) getConfig()).configurationsAt(ALL_SHORTCUTS_KEY);
-            map = new HashMap<String, KeyStroke>(fields.size());
+            map = new HashMap<>(fields.size());
             for (HierarchicalConfiguration sub : fields) {
                 String name = sub.getString(MENU_ITEM_KEY, "");
                 if (name.length() > 0) {

File: zap/src/main/java/org/zaproxy/zap/extension/params/ParamsAPI.java
Patch:
@@ -90,7 +90,7 @@ private static ApiResponseList createSiteParamStatsResponse(SiteParameters siteP
             map.put("name", param.getName());
             map.put("type", param.getType().name());
             map.put("timesUsed", String.valueOf(param.getTimesUsed()));
-            stats.addItem(new ApiResponseSet<String>("Stats", map));
+            stats.addItem(new ApiResponseSet<>("Stats", map));
 
             ApiResponseList flags = new ApiResponseList("Flags");
             for (String flag : param.getFlags()) {

File: zap/src/main/java/org/zaproxy/zap/extension/params/ParamsTableModel.java
Patch:
@@ -48,7 +48,7 @@ public ParamsTableModel() {
         columnNames.add(Constant.messages.getString("params.table.header.flags"));
         columnNames.add(Constant.messages.getString("params.table.header.values"));
 
-        paramStats = Collections.synchronizedList(new ArrayList<HtmlParameterStats>());
+        paramStats = Collections.synchronizedList(new ArrayList<>());
 
         lastAddedRow = -1;
         lastEditedRow = -1;
@@ -70,7 +70,7 @@ public String getColumnName(int col) {
     }
 
     public List<String> getColumnNames() {
-        return new ArrayList<String>(columnNames);
+        return new ArrayList<>(columnNames);
     }
 
     @Override

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/ExtensionProxies.java
Patch:
@@ -47,7 +47,7 @@ public class ExtensionProxies extends ExtensionAdaptor implements OptionsChanged
 
     private ProxiesParam proxiesParam = null;
     private OptionsProxiesPanel optionsProxiesPanel = null;
-    private Map<String, ProxyServer> proxyServers = new HashMap<String, ProxyServer>();
+    private Map<String, ProxyServer> proxyServers = new HashMap<>();
 
     private static Logger log = LogManager.getLogger(ExtensionProxies.class);
 
@@ -109,7 +109,7 @@ private void restartProxies() {
         List<ProxiesParamProxy> proxyParams = this.getParam().getProxies();
         Map<String, ProxiesParamProxy> newProxies = new HashMap<>();
         Map<String, ProxyServer> currentProxies = proxyServers;
-        proxyServers = new HashMap<String, ProxyServer>();
+        proxyServers = new HashMap<>();
         for (ProxiesParamProxy proxyParam : proxyParams) {
             if (proxyParam.isEnabled()) {
                 // Treat disabled proxies as if they dont really exist

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/OptionsLocalProxyPanel.java
Patch:
@@ -51,7 +51,7 @@ public OptionsLocalProxyPanel() {
 
     private JComboBox<String> getLocalAddress() {
         if (localAddress == null) {
-            localAddress = new JComboBox<String>();
+            localAddress = new JComboBox<>();
             localAddress.setEditable(true);
             List<String> allAddrs = NetworkUtils.getAvailableAddresses(false);
             localAddress.addItem("localhost");

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/ProxiesAPI.java
Patch:
@@ -71,7 +71,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
             ApiResponseList response = new ApiResponseList(name);
 
             for (ProxiesParamProxy p : (this.extension.getAdditionalProxies())) {
-                Map<String, String> map = new HashMap<String, String>();
+                Map<String, String> map = new HashMap<>();
                 map.put("address", p.getAddress());
                 map.put("port", Integer.toString(p.getPort()));
                 map.put("enabled", Boolean.toString(p.isEnabled()));
@@ -80,7 +80,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                 map.put(
                         "removeUnsupportedEncodings",
                         Boolean.toString(p.isRemoveUnsupportedEncodings()));
-                response.addItem(new ApiResponseSet<String>("proxy", map));
+                response.addItem(new ApiResponseSet<>("proxy", map));
             }
 
             return response;

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/ProxiesParam.java
Patch:
@@ -102,7 +102,7 @@ public void setSecurityProtocolsEnabled(String[] protocols) {
     }
 
     public List<ProxiesParamProxy> getProxies() {
-        List<ProxiesParamProxy> list = new ArrayList<ProxiesParamProxy>(proxies.size() + 1);
+        List<ProxiesParamProxy> list = new ArrayList<>(proxies.size() + 1);
         for (ProxiesParamProxy proxy : this.proxies) {
             list.add(new ProxiesParamProxy(proxy));
         }

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanAPI.java
Patch:
@@ -217,7 +217,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     map.put("enabled", String.valueOf(scanner.isEnabled()));
                     map.put("alertThreshold", scanner.getAlertThreshold(true).name());
                     map.put("quality", scanner.getStatus().toString());
-                    resultList.addItem(new ApiResponseSet<String>("scanner", map));
+                    resultList.addItem(new ApiResponseSet<>("scanner", map));
                 }
 
                 result = resultList;
@@ -231,7 +231,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     time = System.currentTimeMillis() - time;
                 }
                 map.put("time", String.valueOf(time));
-                result = new ApiResponseSet<String>(name, map);
+                result = new ApiResponseSet<>(name, map);
                 break;
             case VIEW_MAX_ALERTS_PER_RULE:
                 result =

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java
Patch:
@@ -167,7 +167,7 @@ private boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {
             return false;
         }
         if (customPageMap == null) {
-            customPageMap = new HashMap<CustomPage.Type, Boolean>();
+            customPageMap = new HashMap<>();
         }
         return customPageMap.computeIfAbsent(
                 cpType, type -> context.isCustomPageWithFallback(msg, type));

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -57,7 +57,7 @@ public class PassiveScanThread extends Thread implements ProxyListener, SessionC
     // the HttpMessage.
     public static final int PROXY_LISTENER_ORDER = ProxyListenerLog.PROXY_LISTENER_ORDER + 1;
 
-    private static Set<Integer> optedInHistoryTypes = new HashSet<Integer>();
+    private static Set<Integer> optedInHistoryTypes = new HashSet<>();
 
     @SuppressWarnings("unused")
     private OptionsPassiveScan options = null;
@@ -80,7 +80,7 @@ public class PassiveScanThread extends Thread implements ProxyListener, SessionC
     private String currentRuleName = "";
     private String currentUrl = "";
     private long currentRuleStartTime = 0;
-    private Map<Integer, Integer> alertCounts = new HashMap<Integer, Integer>();
+    private Map<Integer, Integer> alertCounts = new HashMap<>();
 
     /**
      * Constructs a {@code PassiveScanThread} with the given data.
@@ -503,7 +503,7 @@ public static Set<Integer> getOptedInHistoryTypes() {
      * @since 2.8.0
      */
     public static Set<Integer> getApplicableHistoryTypes() {
-        Set<Integer> allApplicableTypes = new HashSet<Integer>();
+        Set<Integer> allApplicableTypes = new HashSet<>();
         allApplicableTypes.addAll(PluginPassiveScanner.getDefaultHistoryTypes());
         if (!optedInHistoryTypes.isEmpty()) {
             allApplicableTypes.addAll(optedInHistoryTypes);

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PluginPassiveScanner.java
Patch:
@@ -73,7 +73,7 @@ public abstract class PluginPassiveScanner extends Enableable
             };
 
     private static final Set<Integer> DEFAULT_HISTORY_TYPES_SET =
-            Collections.unmodifiableSet(new HashSet<Integer>(Arrays.asList(DEFAULT_HISTORY_TYPES)));
+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(DEFAULT_HISTORY_TYPES)));
 
     private AlertThreshold alertThreshold = AlertThreshold.DEFAULT;
     private AlertThreshold defaultAlertThreshold = AlertThreshold.MEDIUM;

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -67,8 +67,7 @@ private void initialize() {
             this.setSize(375, 204);
         }
         this.setName(Constant.messages.getString("pscan.options.policy.title"));
-        JPanel passiveScannersFilterPanel =
-                new TableFilterPanel<JXTable>(getPassiveScanRulesTable());
+        JPanel passiveScannersFilterPanel = new TableFilterPanel<>(getPassiveScanRulesTable());
 
         // 'Apply to' controls
         JPanel applyToPanel = new JPanel();
@@ -188,7 +187,7 @@ private JXTable getPassiveScanRulesTable() {
             passiveScanRulesTable.setAutoCreateRowSorter(true);
 
             // Default sort by name (column 0)
-            List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
+            List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             passiveScanRulesTable.getRowSorter().setSortKeys(sortKeys);
 

File: zap/src/main/java/org/zaproxy/zap/extension/ruleconfig/RuleConfigAPI.java
Patch:
@@ -127,7 +127,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     if (Constant.messages.containsKey(rc2.getKey())) {
                         map.put("description", Constant.messages.getString(rc2.getKey()));
                     }
-                    resultList.addItem(new ApiResponseSet<String>("ruleConfig", map));
+                    resultList.addItem(new ApiResponseSet<>("ruleConfig", map));
                 }
 
                 result = resultList;

File: zap/src/main/java/org/zaproxy/zap/extension/ruleconfig/RuleConfigParam.java
Patch:
@@ -95,7 +95,7 @@ public class RuleConfigParam extends AbstractParam {
     private static final String RULES_BASE_KEY = "rules";
     private static final String RULES_DEFAULT_KEY_EXT = ".default";
 
-    private Map<String, RuleConfig> ruleConfigs = new HashMap<String, RuleConfig>();
+    private Map<String, RuleConfig> ruleConfigs = new HashMap<>();
 
     public RuleConfigParam() {}
 
@@ -154,7 +154,7 @@ public RuleConfig getRuleConfig(String key) {
     }
 
     public List<RuleConfig> getAllRuleConfigs() {
-        ArrayList<RuleConfig> list = new ArrayList<RuleConfig>();
+        ArrayList<RuleConfig> list = new ArrayList<>();
         for (RuleConfig rc : ruleConfigs.values()) {
             list.add(rc.clone());
         }

File: zap/src/main/java/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -2131,7 +2131,7 @@ public boolean handleFile(File file) {
     @Override
     public List<String> getHandledExtensions() {
         // The list of all of the script extensions that can be handled from the command line
-        List<String> exts = new ArrayList<String>();
+        List<String> exts = new ArrayList<>();
         for (ScriptEngineWrapper sew : this.engineWrappers) {
             exts.addAll(sew.getExtensions());
         }

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -174,7 +174,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     if (type.isEnableable()) {
                         map.put("enabled", Boolean.toString(script.isEnabled()));
                     }
-                    result.addItem(new ApiResponseSet<String>("Script", map));
+                    result.addItem(new ApiResponseSet<>("Script", map));
                 }
             }
             return result;

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptParam.java
Patch:
@@ -101,7 +101,7 @@ protected void parse() {
         }
 
         try {
-            this.scriptDirs = new ArrayList<File>();
+            this.scriptDirs = new ArrayList<>();
             for (Object dirName : getConfig().getList(SCRIPT_DIRS)) {
                 File f = new File((String) dirName);
                 if (!f.exists() || !f.isDirectory()) {

File: zap/src/main/java/org/zaproxy/zap/extension/script/ScriptType.java
Patch:
@@ -48,7 +48,7 @@ public class ScriptType {
     /** Flag that indicates if the scripts of this script type should be enabled by default. */
     private final boolean enabledByDefault;
 
-    private final Set<String> capabilitiesSet = new HashSet<String>();
+    private final Set<String> capabilitiesSet = new HashSet<>();
 
     /**
      * Constructs a {@code ScriptType} with the given data.

File: zap/src/main/java/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -216,7 +216,7 @@ public void processRecordHistory(RecordHistory recordHistory) {
                                         "code",
                                         String.valueOf(msg.getResponseHeader().getStatusCode()));
                                 map.put("time", String.valueOf(msg.getTimeElapsedMillis()));
-                                result.addItem(new ApiResponseSet<String>(name, map));
+                                result.addItem(new ApiResponseSet<>(name, map));
                             }
                         };
             }

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -218,7 +218,7 @@ public String getHelpIndex() {
 
     @Override
     public void targetSelected(String field, Target node) {
-        List<String> ctxNames = new ArrayList<String>();
+        List<String> ctxNames = new ArrayList<>();
         if (node != null) {
             // The user has selected a new node
             this.target = node;
@@ -263,7 +263,7 @@ private User getSelectedUser() {
 
     private void setUsers() {
         Context context = this.getSelectedContext();
-        List<String> userNames = new ArrayList<String>();
+        List<String> userNames = new ArrayList<>();
         if (context != null) {
             List<User> users =
                     this.extUserMgmt.getContextUserAuthManager(context.getId()).getUsers();

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderPanelTableModel.java
Patch:
@@ -226,7 +226,7 @@ public boolean equals(Object obj) {
     }
 
     public List<String> getAddedNodes() {
-        List<String> list = new ArrayList<String>(this.scanResults.size());
+        List<String> list = new ArrayList<>(this.scanResults.size());
         for (SpiderScanResult res : this.scanResults) {
             list.add(res.uri);
         }

File: zap/src/main/java/org/zaproxy/zap/extension/stats/StatsAPI.java
Patch:
@@ -100,7 +100,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
                     memStats.getStats(this.getParam(params, PARAM_KEY_PREFIX, "")).entrySet()) {
                 map.put(stat.getKey(), stat.getValue().toString());
             }
-            result = new ApiResponseSet<String>(name, map);
+            result = new ApiResponseSet<>(name, map);
 
         } else if (VIEW_ALL_SITES_STATS.equals(name)) {
             result = new ApiResponseList(name);
@@ -148,7 +148,7 @@ public SiteStatsApiResponse(String site, Map<String, Long> stats) {
             super("statistics");
             this.site = site;
             this.stats = new TreeMap<>(stats);
-            this.addItem(new ApiResponseSet<Long>(site, this.stats));
+            this.addItem(new ApiResponseSet<>(site, this.stats));
         }
 
         @Override

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/ExtensionStdMenus.java
Patch:
@@ -250,7 +250,7 @@ private PopupContextTreeMenu getPopupContextTreeMenuDelete() {
 
                         @Override
                         protected List<Context> getContexts() {
-                            List<Context> contexts = new ArrayList<Context>();
+                            List<Context> contexts = new ArrayList<>();
                             for (Integer id : popupContextTreeMenuDelete.getContextIds()) {
                                 contexts.add(Model.getSingleton().getSession().getContext(id));
                             }

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/PopupContextTreeMenu.java
Patch:
@@ -49,7 +49,7 @@ public PopupContextTreeMenu() {
      */
     public PopupContextTreeMenu(boolean isEnabledForMultipleContexts) {
         super();
-        contextIds = new ArrayList<Integer>();
+        contextIds = new ArrayList<>();
 
         this.enabledForMultipleContexts = isEnabledForMultipleContexts;
     }

File: zap/src/main/java/org/zaproxy/zap/model/CommonUserAgents.java
Patch:
@@ -39,8 +39,8 @@ public class CommonUserAgents {
     private static final Logger logger = LogManager.getLogger(CommonUserAgents.class);
 
     static {
-        nameToString = new HashMap<String, String>();
-        stringToName = new HashMap<String, String>();
+        nameToString = new HashMap<>();
+        stringToName = new HashMap<>();
 
         String fileName =
                 Constant.getZapInstall()

File: zap/src/main/java/org/zaproxy/zap/model/SessionStructure.java
Patch:
@@ -420,8 +420,7 @@ public static String getLeafName(
 
     private static List<org.parosproxy.paros.core.scanner.NameValuePair> convertNVP(
             List<NameValuePair> nvpList, int type) {
-        List<org.parosproxy.paros.core.scanner.NameValuePair> params =
-                new ArrayList<org.parosproxy.paros.core.scanner.NameValuePair>();
+        List<org.parosproxy.paros.core.scanner.NameValuePair> params = new ArrayList<>();
         for (NameValuePair nvp : nvpList) {
             params.add(
                     new org.parosproxy.paros.core.scanner.NameValuePair(
@@ -432,7 +431,7 @@ private static List<org.parosproxy.paros.core.scanner.NameValuePair> convertNVP(
 
     private static List<NameValuePair> convertParosNVP(
             List<org.parosproxy.paros.core.scanner.NameValuePair> nvpList, int type) {
-        List<NameValuePair> params = new ArrayList<NameValuePair>();
+        List<NameValuePair> params = new ArrayList<>();
         for (org.parosproxy.paros.core.scanner.NameValuePair nvp : nvpList) {
             if (nvp.getType() == type) {
                 params.add(new DefaultNameValuePair(nvp.getName(), nvp.getValue()));

File: zap/src/main/java/org/zaproxy/zap/model/Target.java
Patch:
@@ -56,7 +56,7 @@ public Target(boolean inScopeOnly) {
 
     public Target(StructuralNode startNode) {
         super();
-        this.startNodes = new ArrayList<StructuralNode>();
+        this.startNodes = new ArrayList<>();
         this.startNodes.add(startNode);
     }
 

File: zap/src/main/java/org/zaproxy/zap/scan/BaseContextScannerThread.java
Patch:
@@ -48,7 +48,7 @@ public abstract class BaseContextScannerThread<
     public BaseContextScannerThread(int contextId) {
         super();
         this.contextId = contextId;
-        this.listeners = new LinkedHashSet<Listener>();
+        this.listeners = new LinkedHashSet<>();
     }
 
     /**

File: zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -95,7 +95,7 @@ protected SpiderController(Spider spider, List<SpiderParser> customParsers) {
         this.fetchFilters = new LinkedList<>();
         this.parseFilters = new LinkedList<>();
         this.visitedGet = new HashSet<>();
-        this.visitedPost = new HashMap<String, ArrayList<String>>();
+        this.visitedPost = new HashMap<>();
 
         prepareDefaultParsers();
         for (SpiderParser parser : customParsers) {
@@ -346,7 +346,7 @@ public void resourcePostURIFound(
                 if (visitedPost.containsKey(uri)) {
                     visitedPost.get(uri).add(requestBody);
                 } else {
-                    ArrayList<String> l = new ArrayList<String>();
+                    ArrayList<String> l = new ArrayList<>();
                     l.add(requestBody);
                     visitedPost.put(uri, l);
                 }

File: zap/src/main/java/org/zaproxy/zap/utils/ContentMatcher.java
Patch:
@@ -96,8 +96,8 @@ public static ContentMatcher getInstance(InputStream xmlInputStream) {
      */
     protected void loadXMLPatternDefinitions(InputStream xmlInputStream)
             throws ConfigurationException {
-        strings = new ArrayList<BoyerMooreMatcher>();
-        patterns = new ArrayList<Pattern>();
+        strings = new ArrayList<>();
+        patterns = new ArrayList<>();
 
         ZapXmlConfiguration configuration = new ZapXmlConfiguration(xmlInputStream);
         for (HierarchicalConfiguration entry : configuration.configurationsAt(TAG_PATTERN)) {
@@ -146,7 +146,7 @@ public String findInContent(String content) {
      */
     public List<String> findAllInContent(String content) {
 
-        List<String> results = new LinkedList<String>();
+        List<String> results = new LinkedList<>();
 
         // First check for all simple exact occurrences
         for (BoyerMooreMatcher matcher : strings) {

File: zap/src/main/java/org/zaproxy/zap/utils/EncodingUtils.java
Patch:
@@ -42,7 +42,7 @@ public static String mapToString(Map<String, String> map) {
     }
 
     public static Map<String, String> stringToMap(String input) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
 
         String[] nameValuePairs = input.split("&");
         for (String nameValuePair : nameValuePairs) {

File: zap/src/main/java/org/zaproxy/zap/utils/JsonUtil.java
Patch:
@@ -69,7 +69,7 @@ public static String getJsonFriendlyString(String value) {
     }
 
     public static List<String> toStringList(JSONArray array) {
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         Iterator<?> iter = JSONArray.toCollection(array).iterator();
         while (iter.hasNext()) {
             list.add(iter.next().toString());

File: zap/src/main/java/org/zaproxy/zap/utils/NetworkUtils.java
Patch:
@@ -36,7 +36,7 @@ private NetworkUtils() {}
     private static final Logger LOG = LogManager.getLogger(NetworkUtils.class);
 
     public static List<String> getAvailableAddresses(boolean remoteOnly) {
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         Enumeration<NetworkInterface> e;
         try {
             e = NetworkInterface.getNetworkInterfaces();

File: zap/src/main/java/org/zaproxy/zap/utils/Statistics.java
Patch:
@@ -26,7 +26,7 @@
 
 public class Statistics {
 
-    private Map<String, Long> stats = new HashMap<String, Long>();
+    private Map<String, Long> stats = new HashMap<>();
 
     public void incCounter(String key) {
         incCounter(key, 1);
@@ -63,7 +63,7 @@ public Long getStat(String key) {
     }
 
     public Map<String, Long> getStats(String keyPrefix) {
-        Map<String, Long> map = new HashMap<String, Long>();
+        Map<String, Long> map = new HashMap<>();
         for (Entry<String, Long> stat : stats.entrySet()) {
             if (stat.getKey().startsWith(keyPrefix)) {
                 map.put(stat.getKey(), stat.getValue());

File: zap/src/main/java/org/zaproxy/zap/utils/Stats.java
Patch:
@@ -26,7 +26,7 @@
 
 public final class Stats {
 
-    private static final List<StatsListener> listeners = new ArrayList<StatsListener>();
+    private static final List<StatsListener> listeners = new ArrayList<>();
 
     private static final Logger logger = LogManager.getLogger(Stats.class);
 

File: zap/src/main/java/org/zaproxy/zap/view/BackgroundImagePanel.java
Patch:
@@ -89,7 +89,7 @@ public final void setBackgroundImage(URL imageUrl, double scale) {
     protected void paintComponent(Graphics g) {
         if (img != null) {
             setOpaque(false);
-            Map<RenderingHints.Key, Object> hints = new HashMap<RenderingHints.Key, Object>();
+            Map<RenderingHints.Key, Object> hints = new HashMap<>();
             hints.put(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
             hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
             hints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

File: zap/src/main/java/org/zaproxy/zap/view/ContextStructurePanel.java
Patch:
@@ -244,8 +244,8 @@ public void validateContextData(Session session) throws Exception {
     private void saveToContext(Context context, boolean updateSiteStructure) {
         ParameterParser urlParamParser = context.getUrlParamParser();
         ParameterParser formParamParser = context.getPostParamParser();
-        List<String> structParams = new ArrayList<String>();
-        List<StructuralNodeModifier> ddns = new ArrayList<StructuralNodeModifier>();
+        List<String> structParams = new ArrayList<>();
+        List<StructuralNodeModifier> ddns = new ArrayList<>();
 
         for (StructuralNodeModifier snm : this.ddnTableModel.getElements()) {
             if (snm.getType().equals(StructuralNodeModifier.Type.StructuralParameter)) {

File: zap/src/main/java/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -74,7 +74,7 @@ public CheckedNode(
     }
 
     HashMap<TreePath, CheckedNode> nodesCheckingState;
-    HashSet<TreePath> checkedPaths = new HashSet<TreePath>();
+    HashSet<TreePath> checkedPaths = new HashSet<>();
 
     // Defining a new event type for the checking mechanism and preparing event-handling mechanism
 
@@ -134,8 +134,8 @@ public boolean isSelectedPartially(TreePath path) {
     }
 
     private void resetCheckingState(DefaultMutableTreeNode rootNode) {
-        nodesCheckingState = new HashMap<TreePath, CheckedNode>();
-        checkedPaths = new HashSet<TreePath>();
+        nodesCheckingState = new HashMap<>();
+        checkedPaths = new HashSet<>();
         if (rootNode == null) {
             return;
         }

File: zap/src/main/java/org/zaproxy/zap/view/MultipleRegexesOptionsPanel.java
Patch:
@@ -145,7 +145,7 @@ private static boolean validateRegexAndCheckForDuplicates(
     private void importButtonClicked() {
         File file = selectImportFile();
         if (file != null) {
-            List<String> regexes = new ArrayList<String>(getRegexes());
+            List<String> regexes = new ArrayList<>(getRegexes());
 
             try (BufferedReader br =
                     Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {

File: zap/src/main/java/org/zaproxy/zap/view/NodeSelectDialog.java
Patch:
@@ -310,7 +310,7 @@ public void mouseClicked(java.awt.event.MouseEvent e) {
                         }
                     });
 
-            treeSite.setCellRenderer(new SiteMapTreeCellRenderer(new ArrayList<SiteMapListener>()));
+            treeSite.setCellRenderer(new SiteMapTreeCellRenderer(new ArrayList<>()));
         }
         return treeSite;
     }

File: zap/src/main/java/org/zaproxy/zap/view/StandardFieldsDialog.java
Patch:
@@ -128,7 +128,7 @@ public abstract class StandardFieldsDialog extends AbstractDialog {
 
     private List<Component> fieldList = new ArrayList<>();
     private Map<String, Component> fieldMap = new HashMap<>();
-    private Map<String, JPanel> tabNameMap = new HashMap<String, JPanel>();
+    private Map<String, JPanel> tabNameMap = new HashMap<>();
 
     /**
      * Flag that indicates whether or not the dialogue is automatically hidden when {@link #save()

File: zap/src/main/java/org/zaproxy/zap/view/StructuralNodeModifiersTableModel.java
Patch:
@@ -44,7 +44,7 @@ public class StructuralNodeModifiersTableModel
     private static final long serialVersionUID = 4463944219657112162L;
 
     /** The users. */
-    private List<StructuralNodeModifier> snms = new ArrayList<StructuralNodeModifier>();
+    private List<StructuralNodeModifier> snms = new ArrayList<>();
 
     /**
      * Instantiates a new structural node modifiers table model. An internal copy of the provided

File: zap/src/main/java/org/zaproxy/zap/view/TabbedPanel2.java
Patch:
@@ -521,7 +521,7 @@ public List<Component> getTabList() {
     }
 
     public List<Component> getSortedTabList() {
-        List<Component> copy = new ArrayList<Component>(this.fullTabList);
+        List<Component> copy = new ArrayList<>(this.fullTabList);
         Collections.sort(copy, NAME_COMPARATOR);
         return copy;
     }

File: zap/src/main/java/org/zaproxy/zap/view/widgets/UsersMultiSelectList.java
Patch:
@@ -78,7 +78,7 @@ public UsersMultiSelectList(int contextId, int selectionModel) {
     public void reloadUsers(int contextId) {
         List<User> users = usersExtension.getContextUserAuthManager(contextId).getUsers();
         User[] usersArray = users.toArray(new User[users.size()]);
-        ListModel<User> usersModel = new DefaultComboBoxModel<User>(usersArray);
+        ListModel<User> usersModel = new DefaultComboBoxModel<>(usersArray);
         this.setModel(usersModel);
     }
 }

File: zap/src/main/java/org/zaproxy/zap/view/widgets/UsersMultiSelectTable.java
Patch:
@@ -79,7 +79,7 @@ private static void loadUsersManagementExtension() {
      */
     public void reloadUsers(int contextId) {
         List<User> users =
-                new ArrayList<User>(usersExtension.getContextUserAuthManager(contextId).getUsers());
+                new ArrayList<>(usersExtension.getContextUserAuthManager(contextId).getUsers());
         tableModel = new UsersSelectTableModel(users);
         this.setModel(tableModel);
     }
@@ -123,11 +123,11 @@ private static class UsersSelectTableModel extends AbstractTableModel {
         public UsersSelectTableModel(List<User> users) {
             super();
             this.users = users;
-            this.selectedUsersIds = new HashSet<Integer>(this.users.size());
+            this.selectedUsersIds = new HashSet<>(this.users.size());
         }
 
         public List<User> generateSelectedUsers() {
-            List<User> selectedUsers = new ArrayList<User>(selectedUsersIds.size());
+            List<User> selectedUsers = new ArrayList<>(selectedUsersIds.size());
             for (User u : users) if (selectedUsersIds.contains(u.getId())) selectedUsers.add(u);
             return selectedUsers;
         }

File: zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java
Patch:
@@ -96,7 +96,7 @@ protected Response serve(IHTTPSession session) {
                         orderedReqUrls.add(
                                 session.getUri() + "?" + session.getQueryParameterString());
 
-                        HashMap<String, String> map = new HashMap<String, String>();
+                        HashMap<String, String> map = new HashMap<>();
                         try {
                             session.parseBody(map);
                             orderedReqData.add(map.get("postData"));
@@ -139,7 +139,7 @@ public void shouldNotReplacePasswordInPollRequest() throws NullPointerException,
                 new NanoServerHandler(pollUrl) {
                     @Override
                     protected Response serve(IHTTPSession session) {
-                        HashMap<String, String> map = new HashMap<String, String>();
+                        HashMap<String, String> map = new HashMap<>();
                         try {
                             session.parseBody(map);
                             orderedReqData.add(map.get("postData"));
@@ -179,7 +179,7 @@ public void shouldUrlEncodeUsernameInPollRequestBody()
                 new NanoServerHandler(pollUrl) {
                     @Override
                     protected Response serve(IHTTPSession session) {
-                        HashMap<String, String> map = new HashMap<String, String>();
+                        HashMap<String, String> map = new HashMap<>();
                         try {
                             session.parseBody(map);
                             orderedReqData.add(map.get("postData"));

File: zap/src/test/java/org/zaproxy/zap/authentication/JsonBasedAuthenticationMethodTypeUnitTest.java
Patch:
@@ -96,7 +96,7 @@ protected Response serve(IHTTPSession session) {
                         orderedReqUrls.add(
                                 session.getUri() + "?" + session.getQueryParameterString());
 
-                        HashMap<String, String> map = new HashMap<String, String>();
+                        HashMap<String, String> map = new HashMap<>();
                         try {
                             session.parseBody(map);
                             orderedReqData.add(map.get("postData"));
@@ -139,7 +139,7 @@ public void shouldNotReplacePasswordInPollRequest() throws NullPointerException,
                 new NanoServerHandler(pollUrl) {
                     @Override
                     protected Response serve(IHTTPSession session) {
-                        HashMap<String, String> map = new HashMap<String, String>();
+                        HashMap<String, String> map = new HashMap<>();
                         try {
                             session.parseBody(map);
                             orderedReqData.add(map.get("postData"));
@@ -180,7 +180,7 @@ public void shouldNotUrlEncodeUsernameInPollRequestBody()
                 new NanoServerHandler(pollUrl) {
                     @Override
                     protected Response serve(IHTTPSession session) {
-                        HashMap<String, String> map = new HashMap<String, String>();
+                        HashMap<String, String> map = new HashMap<>();
                         try {
                             session.parseBody(map);
                             orderedReqData.add(map.get("postData"));

File: zap/src/test/java/org/zaproxy/zap/testutils/HTTPDTestServer.java
Patch:
@@ -25,7 +25,7 @@
 
 public class HTTPDTestServer extends NanoHTTPD {
 
-    private List<NanoServerHandler> handlers = new ArrayList<NanoServerHandler>();
+    private List<NanoServerHandler> handlers = new ArrayList<>();
 
     private NanoServerHandler handler404 =
             new NanoServerHandler("") {

File: zap/src/main/java/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -59,6 +59,7 @@
 // ZAP: 2020/11/10 Add convenience method isCss(), refactor isImage() to use new private method
 // isSpecificType(Pattern).
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2021/05/10 Use authority for CONNECT requests.
 package org.parosproxy.paros.network;
 
 import java.io.UnsupportedEncodingException;
@@ -465,7 +466,7 @@ private void parse(boolean isSecure) throws URIException, HttpMalformedHeaderExc
 
         if (mMethod.equalsIgnoreCase(CONNECT)) {
             parseHostName(sUri);
-            mUri = parseURI(mHostName);
+            mUri = URI.fromAuthority(sUri);
 
         } else {
             mUri = parseURI(sUri);

File: zap/src/test/java/org/zaproxy/zap/view/table/DefaultHistoryReferencesTableEntryUnitTest.java
Patch:
@@ -49,11 +49,11 @@ static void afterAll() {
     }
 
     @Test
-    void shouldHaveHostNameForUriWithJustAuthority() {
+    void shouldHaveHostNameForUriWithJustAuthority() throws Exception {
         // Given
         HistoryReference historyReference = mock(HistoryReference.class);
         given(historyReference.getMethod()).willReturn("CONNECT");
-        given(historyReference.getURI()).willReturn(createUri("example.com"));
+        given(historyReference.getURI()).willReturn(URI.fromAuthority("example.com:443"));
         Column[] columns = {Column.HOSTNAME};
         // When
         DefaultHistoryReferencesTableEntry entry =

File: zap/src/main/java/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -334,6 +334,8 @@ private void setupLookAndFeel() {
 
         if (Constant.isMacOsX()) {
             OsXGui.setup();
+        } else if (Constant.isWindows()) {
+            UIManager.put("TitlePane.useWindowDecorations", false);
         }
 
         if (setLookAndFeel(System.getProperty("swing.defaultlaf"))) {

File: zap/src/main/java/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -334,6 +334,8 @@ private void setupLookAndFeel() {
 
         if (Constant.isMacOsX()) {
             OsXGui.setup();
+        } else if (Constant.isWindows()) {
+            UIManager.put("TitlePane.useWindowDecorations", false);
         }
 
         if (setLookAndFeel(System.getProperty("swing.defaultlaf"))) {

File: zap/src/test/java/org/zaproxy/zap/VerifyScriptTemplates.java
Patch:
@@ -40,11 +40,14 @@
 import javax.script.Compilable;
 import javax.script.ScriptEngineManager;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.EnabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 
 /** Verifies that the script templates are parsed without errors. */
 public class VerifyScriptTemplates {
 
     @Test
+    @EnabledForJreRange(max = JRE.JAVA_14)
     public void shouldParseJsTemplates() throws Exception {
         // Given
         List<Path> templates = getScriptTemplates(".js");

File: zap/src/main/java/ch/csnc/extension/httpclient/SSLContextManager.java
Patch:
@@ -276,7 +276,7 @@ public String getFingerPrint(Certificate cert) throws KeyStoreException {
             throw new KeyStoreException(e.getMessage());
         }
 
-        String dn = x509.getSubjectDN().getName();
+        String dn = x509.getSubjectX500Principal().getName();
 
         log.info("Fingerprint is " + buff.toString().toUpperCase());
 

File: zap/src/test/java/org/zaproxy/zap/VerifyScriptTemplates.java
Patch:
@@ -40,11 +40,14 @@
 import javax.script.Compilable;
 import javax.script.ScriptEngineManager;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.EnabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 
 /** Verifies that the script templates are parsed without errors. */
 public class VerifyScriptTemplates {
 
     @Test
+    @EnabledForJreRange(max = JRE.JAVA_14)
     public void shouldParseJsTemplates() throws Exception {
         // Given
         List<Path> templates = getScriptTemplates(".js");

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/VariantFactory.java
Patch:
@@ -100,7 +100,9 @@ public List<Variant> createVariants(ScannerParam scanOptions, HttpMessage messag
             }
 
             if ((enabledRPC & ScannerParam.RPC_JSON) != 0) {
-                listVariant.add(new VariantJSONQuery());
+                VariantJSONQuery variant = new VariantJSONQuery();
+                variant.setScanNullValues(scanOptions.isScanNullJsonValues());
+                listVariant.add(variant);
             }
 
             if ((enabledRPC & ScannerParam.RPC_GWT) != 0) {

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantODataFilterQuery.java
Patch:
@@ -50,7 +50,7 @@
  */
 public class VariantODataFilterQuery implements Variant {
 
-    private static final Logger log = LogManager.getLogger(VariantODataFilterQuery.class);
+    private static final Logger LOG = LogManager.getLogger(VariantODataFilterQuery.class);
 
     // Extract the content of the $filter parameter
     private static final Pattern patternFilterParameters =
@@ -129,7 +129,7 @@ private void parse(URI uri) {
             }
 
         } catch (URIException e) {
-            log.error(e.getMessage() + uri, e);
+            LOG.error(e.getMessage() + uri, e);
         }
     }
 
@@ -164,7 +164,7 @@ public String setParameter(
                 msg.getRequestHeader().getURI().setQuery(modifiedQuery);
 
             } catch (URIException | NullPointerException e) {
-                log.error("Exception with the modified query " + modifiedQuery, e);
+                LOG.error("Exception with the modified query " + modifiedQuery, e);
             }
 
             return newfilter;

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantODataIdQuery.java
Patch:
@@ -46,7 +46,7 @@
  */
 public class VariantODataIdQuery implements Variant {
 
-    private static final Logger log = LogManager.getLogger(VariantODataIdQuery.class);
+    private static final Logger LOG = LogManager.getLogger(VariantODataIdQuery.class);
 
     /** In order to identify the unnamed id we add this prefix to the resource name * */
     public static final String RESOURCE_ID_PREFIX = "__ID__";
@@ -153,7 +153,7 @@ private void parse(URI uri) {
             }
 
         } catch (URIException e) {
-            log.error(e.getMessage() + uri, e);
+            LOG.error(e.getMessage() + uri, e);
         }
     }
 

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantURLQuery.java
Patch:
@@ -39,7 +39,7 @@
 
 public class VariantURLQuery extends VariantAbstractQuery {
 
-    private static final Logger log = LogManager.getLogger(VariantURLQuery.class);
+    private static final Logger LOG = LogManager.getLogger(VariantURLQuery.class);
 
     public VariantURLQuery() {
         super();
@@ -82,7 +82,7 @@ protected void buildMessage(HttpMessage msg, String query) {
             msg.getRequestHeader().getURI().setEscapedQuery(query);
 
         } catch (URIException e) {
-            log.error(e.getMessage() + query, e);
+            LOG.error(e.getMessage() + query, e);
         }
     }
 }

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantUserDefined.java
Patch:
@@ -37,7 +37,7 @@ public class VariantUserDefined implements Variant {
 
     private int[][] injectionPoints = null;
 
-    private static final Logger logger = LogManager.getLogger(VariantUserDefined.class);
+    private static final Logger LOGGER = LogManager.getLogger(VariantUserDefined.class);
 
     public VariantUserDefined() {
         super();
@@ -69,7 +69,7 @@ public List<NameValuePair> getParamList() {
                 if (isInHeader(this.injectionPoints[i]) || isInBody(this.injectionPoints[i])) {
                     list.add(new NameValuePair(NameValuePair.TYPE_UNDEFINED, "", "", i));
                 } else {
-                    logger.warn(
+                    LOGGER.warn(
                             "Invalid injection point: "
                                     + java.util.Arrays.toString(this.injectionPoints[i]));
                 }
@@ -91,7 +91,7 @@ public String setParameter(
             try {
                 msg.getRequestHeader().setMessage(sb.toString());
             } catch (HttpMalformedHeaderException e) {
-                logger.error(e.getMessage(), e);
+                LOGGER.error(e.getMessage(), e);
             }
         } else {
             String body = msg.getRequestBody().toString();

File: zap/src/main/java/ch/csnc/extension/ui/DriversView.java
Patch:
@@ -158,7 +158,7 @@ public void actionPerformed(ActionEvent evt) {
         if (!Model.getSingleton()
                 .getOptionsParam()
                 .getExperimentalFeaturesParam()
-                .isExerimentalSliSupportEnabled()) {
+                .isExperimentalSliSupportEnabled()) {
             slotTextField.setEnabled(false);
         }
 

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsCertificatePanel.java
Patch:
@@ -966,7 +966,7 @@ private void addPkcs11ButtonActionPerformed(
                         "The required PKCS#11 provider is not available ("
                                 + SSLContextManager.SUN_PKCS11_CANONICAL_CLASS_NAME
                                 + " or "
-                                + SSLContextManager.IBM_PKCS11_CONONICAL_CLASS_NAME
+                                + SSLContextManager.IBM_PKCS11_CANONICAL_CLASS_NAME
                                 + ").");
                 showErrorMessageSunPkcs11ProviderNotAvailable();
                 return;
@@ -1351,7 +1351,7 @@ private void useClientCertificateCheckBoxActionPerformed(
                 Model.getSingleton()
                         .getOptionsParam()
                         .getExperimentalFeaturesParam()
-                        .isExerimentalSliSupportEnabled());
+                        .isExperimentalSliSupportEnabled());
 
         // actual certificate fields
         certificateTextField.setEnabled(useClientCertificateCheckBox.isSelected());

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ScanProgressTableModel.java
Patch:
@@ -108,7 +108,7 @@ public Object getValueAt(int row, int col) {
                     return item.getNameLabel();
 
                 case 1:
-                    return item.getAttackStrenghtLabel();
+                    return item.getAttackStrengthLabel();
 
                 case 2:
                     if (item.isCompleted() || item.isRunning() || item.isSkipped()) {

File: zap/src/main/java/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -1988,7 +1988,7 @@ public <T> T getInterface(ScriptWrapper script, Class<T> class1)
             Thread.currentThread().setContextClassLoader(previousContextClassLoader);
         }
 
-        if (script.isRunableStandalone()) {
+        if (script.isRunnableStandalone()) {
             return null;
         }
 

File: zap/src/test/java/ch/csnc/extension/httpclient/SSLContextManagerUnitTest.java
Patch:
@@ -43,7 +43,7 @@ public void shouldReturnAvailabilityOfPKCS11Provider() {
             Class.forName(SSLContextManager.SUN_PKCS11_CANONICAL_CLASS_NAME);
         } catch (ClassNotFoundException e) {
             try {
-                Class.forName(SSLContextManager.IBM_PKCS11_CONONICAL_CLASS_NAME);
+                Class.forName(SSLContextManager.IBM_PKCS11_CANONICAL_CLASS_NAME);
             } catch (ClassNotFoundException e2) {
                 pkcs11ProviderAvailable = false;
             }

File: zap/src/main/java/org/zaproxy/zap/extension/script/ProxyListenerScript.java
Patch:
@@ -65,9 +65,9 @@ private boolean invokeProxyScripts(HttpMessage msg, boolean request) {
         for (CachedScript<ProxyScript> cachedScript : scripts.getCachedScripts()) {
             ProxyScript script = cachedScript.getScript();
             try {
-                boolean dropMessage =
+                boolean forwardMessage =
                         request ? script.proxyRequest(msg) : script.proxyResponse(msg);
-                if (dropMessage) {
+                if (!forwardMessage) {
                     return false;
                 }
             } catch (Exception e) {

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakpointMessageHandler2.java
Patch:
@@ -212,7 +212,7 @@ protected boolean isBreakOnEnabledBreakpoint(
 
     protected boolean isSkipOnIgnoreRules(
             Message aMessage, boolean isRequest, boolean onlyIfInScope) {
-        if (enabledIgnoreRules.isEmpty()) {
+        if (enabledIgnoreRules == null || enabledIgnoreRules.isEmpty()) {
             // No Ignoring rules
             return false;
         }

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakpointMessageHandler2.java
Patch:
@@ -212,7 +212,7 @@ protected boolean isBreakOnEnabledBreakpoint(
 
     protected boolean isSkipOnIgnoreRules(
             Message aMessage, boolean isRequest, boolean onlyIfInScope) {
-        if (enabledIgnoreRules.isEmpty()) {
+        if (enabledIgnoreRules == null || enabledIgnoreRules.isEmpty()) {
             // No Ignoring rules
             return false;
         }

File: zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -67,6 +67,7 @@
 // ZAP: 2020/01/27 Extracted code from sendAndReceive method into regenerateAntiCsrfToken method in
 // ExtensionAntiCSRF.
 // ZAP: 2020/09/23 Add functionality for custom error pages handling (Issue 9).
+// ZAP: 2020/11/17 Use new TechSet#getAllTech().
 // ZAP: 2020/11/26 Use Log4j2 getLogger() and deprecate Log4j1.x.
 package org.parosproxy.paros.core.scanner;
 
@@ -125,7 +126,7 @@ public abstract class AbstractPlugin implements Plugin, Comparable<Object> {
 
     /** Default Constructor */
     public AbstractPlugin() {
-        this.techSet = TechSet.AllTech;
+        this.techSet = TechSet.getAllTech();
     }
 
     @Override

File: zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -94,6 +94,7 @@
 // ZAP: 2020/09/23 Add functionality for custom error pages handling (Issue 9).
 // ZAP: 2020/10/19 Tweak JavaDoc and init startNodes in the constructor.
 // ZAP: 2020/06/30 Fix bug that makes zap test same request twice (Issue 6043).
+// ZAP: 2020/11/17 Use new TechSet#getAllTech().
 // ZAP: 2020/11/23 Expose getScannerParam() for tests.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 package org.parosproxy.paros.core.scanner;
@@ -282,7 +283,7 @@ public HostProcess(
         }
 
         threadPool = new ThreadPool(maxNumberOfThreads, "ZAP-ActiveScanner-");
-        this.techSet = TechSet.AllTech;
+        this.techSet = TechSet.getAllTech();
     }
 
     /**

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -49,6 +49,7 @@
 // ZAP: 2019/11/09 Ability to filter to active scan (Issue 5278)
 // ZAP: 2020/05/19 simplifying duplicate HostProcess for readability
 // ZAP: 2020/09/23 Add functionality for custom error pages handling (Issue 9).
+// ZAP: 2020/11/17 Use new TechSet#getAllTech().
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
 package org.parosproxy.paros.core.scanner;
 
@@ -155,7 +156,7 @@ public Scanner(
         // ZAP: Load all scanner hooks from extensionloader.
         Control.getSingleton().getExtensionLoader().hookScannerHook(this);
 
-        techSet = TechSet.AllTech;
+        techSet = TechSet.getAllTech();
     }
 
     public void start(SiteNode startNode) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -256,6 +256,7 @@ public void actionPerformed(ActionEvent e) {
         // Technology panel
         this.setCustomTabPanel(3, getTechPanel());
 
+        getTechTree().refresh();
         setTechSet(techTreeState);
 
         this.setCustomTabPanel(4, policyPanel);

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanData.java
Patch:
@@ -63,7 +63,7 @@ public final class PassiveScanData {
 
         if (getContext() == null) {
             this.userList = Collections.emptyList();
-            this.techSet = TechSet.AllTech;
+            this.techSet = TechSet.getAllTech();
         } else {
             this.techSet = getContext().getTechSet();
         }

File: zap/src/main/java/org/zaproxy/zap/model/Context.java
Patch:
@@ -94,7 +94,7 @@ public class Context {
 
     private List<CustomPage> customPages = new ArrayList<>();
 
-    private TechSet techSet = new TechSet(Tech.builtInTech);
+    private TechSet techSet = new TechSet(Tech.getAll());
     private boolean inScope = true;
     private ParameterParser urlParamParser = new StandardParameterParser();
     private ParameterParser postParamParser = new StandardParameterParser();

File: zap/src/main/java/org/zaproxy/zap/view/ContextTechnologyPanel.java
Patch:
@@ -84,7 +84,7 @@ public String getHelpIndex() {
 
     @Override
     public void initContextData(Session session, Context uiContext) {
-        // Init model from context
+        getTechTree().refresh();
         getTechTree().setTechSet(uiContext.getTechSet());
     }
 

File: zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java
Patch:
@@ -81,7 +81,7 @@ public void shouldHaveAllTechSetByDefault() {
         // Given / When
         AbstractPlugin plugin = createAbstractPlugin();
         // Then
-        assertThat(plugin.getTechSet(), is(equalTo(TechSet.AllTech)));
+        assertThat(plugin.getTechSet(), is(equalTo(TechSet.getAllTech())));
     }
 
     @Test
@@ -400,7 +400,7 @@ public void shouldCloneIntoPlugin() {
         pluginA.setDefaultAlertThreshold(Plugin.AlertThreshold.MEDIUM);
         pluginA.setAttackStrength(Plugin.AttackStrength.INSANE);
         pluginA.setDefaultAttackStrength(Plugin.AttackStrength.LOW);
-        pluginA.setTechSet(TechSet.AllTech);
+        pluginA.setTechSet(TechSet.getAllTech());
         pluginA.setStatus(AddOn.Status.beta);
         pluginA.setEnabled(false);
         AbstractPlugin pluginB = createAbstractPluginWithConfig();

File: zap/src/test/java/org/parosproxy/paros/core/scanner/HostProcessUnitTest.java
Patch:
@@ -510,7 +510,7 @@ void shouldSetDealyIntoPlugin() {
 
     @Test
     void shouldUseTechSetAllByDefault() {
-        assertThat(hostProcess.getTechSet(), is(equalTo(TechSet.AllTech)));
+        assertThat(hostProcess.getTechSet(), is(equalTo(TechSet.getAllTech())));
     }
 
     @Test

File: zap/src/test/java/org/zaproxy/zap/extension/pscan/PassiveScanDataUnitTest.java
Patch:
@@ -69,7 +69,7 @@ public void shouldHaveAllTechSetByDefault() {
         HttpMessage msg = createMessage();
         PassiveScanData psd = new PassiveScanData(msg);
         // Then
-        assertThat(psd.getTechSet(), is(equalTo(TechSet.AllTech)));
+        assertThat(psd.getTechSet(), is(equalTo(TechSet.getAllTech())));
     }
 
     @Test

File: zap/src/main/java/org/zaproxy/zap/model/StandardParameterParser.java
Patch:
@@ -370,6 +370,9 @@ private List<String> getTreePath(URI uri, boolean incStructParams) throws URIExc
             for (int i = 1; i < pathList.length; i++) {
                 list.add(pathList[i]);
             }
+            if (path.endsWith("/")) {
+                list.add("/");
+            }
         }
         if (incStructParams) {
             // Add any structural params (url param) in key order

File: zap/src/main/java/org/parosproxy/paros/Constant.java
Patch:
@@ -1122,6 +1122,9 @@ static void upgradeFrom2_9_0(XMLConfiguration config) {
                                 config.clearProperty(key);
                             }
                         });
+        // Update to a newer default user agent
+        config.setProperty(
+                ConnectionParam.DEFAULT_USER_AGENT, ConnectionParam.DEFAULT_DEFAULT_USER_AGENT);
     }
 
     private static void updatePscanTagMailtoPattern(XMLConfiguration config) {

File: zap/src/main/java/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -110,7 +110,7 @@ public class ConnectionParam extends AbstractParam {
     public static final String DEFAULT_USER_AGENT = CONNECTION_BASE_KEY + ".defaultUserAgent";
 
     public static final String DEFAULT_DEFAULT_USER_AGENT =
-            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0";
+            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0";
 
     /** The security property for TTL of successful DNS queries. */
     private static final String DNS_TTL_SUCCESSFUL_QUERIES_SECURITY_PROPERTY =

File: zap/src/main/java/org/parosproxy/paros/Constant.java
Patch:
@@ -1122,6 +1122,9 @@ static void upgradeFrom2_9_0(XMLConfiguration config) {
                                 config.clearProperty(key);
                             }
                         });
+        // Update to a newer default user agent
+        config.setProperty(
+                ConnectionParam.DEFAULT_USER_AGENT, ConnectionParam.DEFAULT_DEFAULT_USER_AGENT);
     }
 
     private static void updatePscanTagMailtoPattern(XMLConfiguration config) {

File: zap/src/main/java/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -110,7 +110,7 @@ public class ConnectionParam extends AbstractParam {
     public static final String DEFAULT_USER_AGENT = CONNECTION_BASE_KEY + ".defaultUserAgent";
 
     public static final String DEFAULT_DEFAULT_USER_AGENT =
-            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0";
+            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0";
 
     /** The security property for TTL of successful DNS queries. */
     private static final String DNS_TTL_SUCCESSFUL_QUERIES_SECURITY_PROPERTY =

File: zap/src/main/java/org/parosproxy/paros/network/HttpInputStream.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/08/25 Correctly read chunks of the body.
 // ZAP: 2020/11/26 Use Log4j 2 classes for logging.
+// ZAP: 2020/12/09 Set content encoding to the request body.
 package org.parosproxy.paros.network;
 
 import java.io.BufferedInputStream;
@@ -137,6 +138,8 @@ public synchronized HttpRequestBody readRequestBody(HttpHeader httpHeader) {
 
         readBody(contentLength, body);
 
+        HttpMessage.setContentEncodings(httpHeader, body);
+
         return body;
     }
 

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantCustom.java
Patch:
@@ -24,10 +24,10 @@
 import java.util.regex.Pattern;
 import org.apache.commons.codec.binary.Base64;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.script.ExtensionScript;
 import org.zaproxy.zap.extension.script.ScriptWrapper;
+import org.zaproxy.zap.model.SessionStructure;
 
 /**
  * Custom Variant based on an implemented Script
@@ -252,7 +252,7 @@ public String setEscapedParameter(
      */
     public String getStandardLeafName(
             String nodeName, HttpMessage msg, List<NameValuePair> params) {
-        return Model.getSingleton().getSession().getLeafName(nodeName, msg, params);
+        return SessionStructure.getLeafName(nodeName, msg, params);
     }
 
     /**

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantDdnPath.java
Patch:
@@ -46,7 +46,7 @@ public class VariantDdnPath implements Variant {
     @Override
     public void setMessage(HttpMessage msg) {
         try {
-            List<String> treePaths = Model.getSingleton().getSession().getTreePath(msg);
+            List<String> treePaths = SessionStructure.getTreePath(Model.getSingleton(), msg);
             int position = 1;
             for (String path : treePaths) {
                 if (path.startsWith(SessionStructure.DATA_DRIVEN_NODE_PREFIX)) {

File: zap/src/main/java/org/parosproxy/paros/extension/history/ProxyListenerLog.java
Patch:
@@ -94,7 +94,7 @@ public boolean onHttpRequestSend(HttpMessage msg) {
         //	    }
 
         try {
-            StructuralNode node = SessionStructure.find(model.getSession(), msg);
+            StructuralNode node = SessionStructure.find(model, msg);
             if (node != null) {
                 HttpMessage existingMsg = node.getHistoryReference().getHttpMessage();
                 // check if a msg of the same type exist
@@ -199,7 +199,7 @@ public void run() {
             return;
         }
 
-        SessionStructure.addPath(model.getSession(), ref, msg);
+        SessionStructure.addPath(model, ref, msg);
         if (isFirstAccess && !Constant.isLowMemoryOptionSet()) {
             isFirstAccess = false;
             if (hasView()) {

File: zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java
Patch:
@@ -184,7 +184,7 @@ private void persistAndShowMessage(HttpMessage httpMessage) {
             if (extHistory != null) {
                 extHistory.addHistory(ref);
             }
-            SessionStructure.addPath(Model.getSingleton().getSession(), ref, httpMessage);
+            SessionStructure.addPath(Model.getSingleton(), ref, httpMessage);
         } catch (HttpMalformedHeaderException | DatabaseException e) {
             logger.warn("Failed to persist message sent:", e);
         }

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -896,12 +896,12 @@ private int scanURL(
             }
 
             try {
-                long sessionId = Model.getSingleton().getSession().getSessionId();
-                node = SessionStructure.find(sessionId, startURI, method, postData);
+                Model model = Model.getSingleton();
+                node = SessionStructure.find(model, startURI, method, postData);
                 if (node == null && "GET".equalsIgnoreCase(method)) {
                     // Check if there's a non-leaf node that matches the URI, to scan the subtree.
                     // (GET is the default method, but non-leaf nodes do not have any method.)
-                    node = SessionStructure.find(sessionId, startURI, null, postData);
+                    node = SessionStructure.find(model, startURI, null, postData);
                 }
             } catch (Exception e) {
                 throw new ApiException(ApiException.Type.INTERNAL_ERROR, e);

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -538,12 +538,11 @@ public void run() {
         }
 
         StructuralNode node =
-                SessionStructure.addPath(
-                        Model.getSingleton().getSession(), historyReference, message, true);
+                SessionStructure.addPath(Model.getSingleton(), historyReference, message, true);
         if (node != null) {
             try {
                 addUriToAddedNodesModel(
-                        SessionStructure.getNodeName(message),
+                        SessionStructure.getNodeName(Model.getSingleton(), message),
                         message.getRequestHeader().getMethod(),
                         "");
             } catch (URIException e) {

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/HttpPanelSyntaxHighlightTextArea.java
Patch:
@@ -19,7 +19,6 @@
  */
 package org.zaproxy.zap.extension.httppanel.view.syntaxhighlight;
 
-import java.awt.Color;
 import java.awt.Component;
 import java.io.IOException;
 import java.util.LinkedList;
@@ -268,10 +267,10 @@ public void setText(String s) {
 
     protected void highlight(int start, int end) {
         Highlighter hilite = this.getHighlighter();
-        HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.LIGHT_GRAY);
+        HighlightPainter painter =
+                new DefaultHighlighter.DefaultHighlightPainter(DisplayUtils.getHighlightColor());
 
         try {
-            // DOBIN
             removeAllHighlights();
             hilite.addHighlight(start, end, painter);
             this.setCaretPosition(start);

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/text/HttpPanelTextArea.java
Patch:
@@ -19,7 +19,6 @@
  */
 package org.zaproxy.zap.extension.httppanel.view.text;
 
-import java.awt.Color;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.regex.Pattern;
@@ -31,6 +30,7 @@
 import org.apache.logging.log4j.Logger;
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.search.SearchMatch;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.ZapTextArea;
 import org.zaproxy.zap.view.HighlightSearchEntry;
 import org.zaproxy.zap.view.HighlighterManager;
@@ -115,10 +115,10 @@ public void setText(String s) {
 
     protected void highlight(int start, int end) {
         Highlighter hilite = this.getHighlighter();
-        HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.LIGHT_GRAY);
+        HighlightPainter painter =
+                new DefaultHighlighter.DefaultHighlightPainter(DisplayUtils.getHighlightColor());
 
         try {
-            // DOBIN
             removeAllHighlights();
             hilite.addHighlight(start, end, painter);
             this.setCaretPosition(start);

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/HttpPanelSyntaxHighlightTextArea.java
Patch:
@@ -19,7 +19,6 @@
  */
 package org.zaproxy.zap.extension.httppanel.view.syntaxhighlight;
 
-import java.awt.Color;
 import java.awt.Component;
 import java.io.IOException;
 import java.util.LinkedList;
@@ -268,10 +267,10 @@ public void setText(String s) {
 
     protected void highlight(int start, int end) {
         Highlighter hilite = this.getHighlighter();
-        HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.LIGHT_GRAY);
+        HighlightPainter painter =
+                new DefaultHighlighter.DefaultHighlightPainter(DisplayUtils.getHighlightColor());
 
         try {
-            // DOBIN
             removeAllHighlights();
             hilite.addHighlight(start, end, painter);
             this.setCaretPosition(start);

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/text/HttpPanelTextArea.java
Patch:
@@ -19,7 +19,6 @@
  */
 package org.zaproxy.zap.extension.httppanel.view.text;
 
-import java.awt.Color;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.regex.Pattern;
@@ -31,6 +30,7 @@
 import org.apache.logging.log4j.Logger;
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.search.SearchMatch;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.ZapTextArea;
 import org.zaproxy.zap.view.HighlightSearchEntry;
 import org.zaproxy.zap.view.HighlighterManager;
@@ -115,10 +115,10 @@ public void setText(String s) {
 
     protected void highlight(int start, int end) {
         Highlighter hilite = this.getHighlighter();
-        HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.LIGHT_GRAY);
+        HighlightPainter painter =
+                new DefaultHighlighter.DefaultHighlightPainter(DisplayUtils.getHighlightColor());
 
         try {
-            // DOBIN
             removeAllHighlights();
             hilite.addHighlight(start, end, painter);
             this.setCaretPosition(start);

File: zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.WithConfigsTest;
 import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;
@@ -91,7 +92,8 @@ public void setUp() throws Exception {
     }
 
     @AfterEach
-    public void shutDownServer() throws Exception {
+    void cleanUp() {
+        Constant.messages = null;
         stopServer();
     }
 

File: zap/src/test/java/org/zaproxy/zap/authentication/JsonBasedAuthenticationMethodTypeUnitTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.WithConfigsTest;
 import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;
@@ -91,7 +92,8 @@ public void setUp() throws Exception {
     }
 
     @AfterEach
-    public void shutDownServer() throws Exception {
+    void cleanUp() {
+        Constant.messages = null;
         stopServer();
     }
 

File: zap/src/test/java/org/zaproxy/zap/extension/api/ApiGeneratorUtilsTest.java
Patch:
@@ -48,6 +48,7 @@ public class ApiGeneratorUtilsTest extends WithConfigsTest {
 
     @BeforeEach
     public void loadCoreApis() throws Exception {
+        Control.initSingletonForTesting(Model.getSingleton());
         ExtensionHook hook =
                 new ExtensionHook(Model.getSingleton(), null) {
                     @Override

File: zap/src/test/java/org/parosproxy/paros/core/scanner/HostProcessUnitTest.java
Patch:
@@ -415,7 +415,7 @@ void shouldScanStartNodeAndAllChildrenIfScanChildrenIsEnabled() {
     }
 
     @Test
-    void shouldScanDuplicatedChildDirNodes() {
+    void shouldNotScanDuplicatedChildDirNodes() {
         // Given
         given(scanner.scanChildren()).willReturn(true);
         StructuralNode parentNode =
@@ -439,7 +439,7 @@ void shouldScanDuplicatedChildDirNodes() {
         // When
         hostProcess.run();
         // Then
-        assertThat(hostProcess.getTestTotalCount(), is(equalTo(7)));
+        assertThat(hostProcess.getTestTotalCount(), is(equalTo(5)));
     }
 
     @Test

File: zap/src/test/java/org/parosproxy/paros/core/scanner/HostProcessUnitTest.java
Patch:
@@ -415,7 +415,7 @@ void shouldScanStartNodeAndAllChildrenIfScanChildrenIsEnabled() {
     }
 
     @Test
-    void shouldScanDuplicatedChildDirNodes() {
+    void shouldNotScanDuplicatedChildDirNodes() {
         // Given
         given(scanner.scanChildren()).willReturn(true);
         StructuralNode parentNode =
@@ -439,7 +439,7 @@ void shouldScanDuplicatedChildDirNodes() {
         // When
         hostProcess.run();
         // Then
-        assertThat(hostProcess.getTestTotalCount(), is(equalTo(7)));
+        assertThat(hostProcess.getTestTotalCount(), is(equalTo(5)));
     }
 
     @Test

File: zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -1297,7 +1297,8 @@ public PluginStats getPluginStats(int pluginId) {
     }
 
     /**
-     * Tells whether or not the message matches the specific {@code CustomPage.Type}.
+     * Tells whether or not the message matches the specific {@code CustomPage.Type}. (Does not
+     * leverage {@code Analyzer}).
      *
      * @param msg the message that will be checked
      * @param cpType the custom page type to be checked
@@ -1306,7 +1307,7 @@ public PluginStats getPluginStats(int pluginId) {
      */
     protected boolean isCustomPage(HttpMessage msg, CustomPage.Type cpType) {
         if (getContext() != null) {
-            return getContext().isCustomPageWithFallback(msg, cpType);
+            return getContext().isCustomPage(msg, cpType);
         }
         return false;
     }

File: zap/src/main/java/org/parosproxy/paros/db/TableAlert.java
Patch:
@@ -50,7 +50,8 @@ RecordAlert write(
             int wascId,
             int historyId,
             int sourceHistoryId,
-            int sourceId)
+            int sourceId,
+            String alertRef)
             throws DatabaseException;
 
     Vector<Integer> getAlertListBySession(long sessionId) throws DatabaseException;

File: zap/src/main/java/org/zaproxy/zap/extension/alert/AlertAPI.java
Patch:
@@ -474,6 +474,7 @@ private ApiResponseSet<String> alertToSet(Alert alert) {
         Map<String, String> map = new HashMap<>();
         map.put("id", String.valueOf(alert.getAlertId()));
         map.put("pluginId", String.valueOf(alert.getPluginId()));
+        map.put("alertRef", alert.getAlertRef());
         map.put(
                 "alert",
                 alert.getName()); // Deprecated in 2.5.0, maintain for compatibility with custom

File: zap/src/main/java/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -438,7 +438,8 @@ private void writeAlertToDB(Alert alert, HistoryReference ref)
                         alert.getWascId(),
                         ref.getHistoryId(),
                         alert.getSourceHistoryId(),
-                        alert.getSource().getId());
+                        alert.getSource().getId(),
+                        alert.getAlertRef());
 
         alert.setAlertId(recordAlert.getAlertId());
     }

File: zap/src/main/java/org/parosproxy/paros/view/WorkbenchPanel.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2018/04/03 Update for behavioural changes in TabbedPanel2.
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2020/11/02 Add OneTouchExapandable control to Sites Tree/Request&Response panels
 package org.parosproxy.paros.view;
 
 import java.awt.BorderLayout;
@@ -614,6 +615,7 @@ private JSplitPane createStatusPanelsSplit() {
      */
     private JSplitPane createSelectPanelsSplit() {
         JSplitPane splitHoriz = new JSplitPane();
+        splitHoriz.setOneTouchExpandable(true);
         splitHoriz.setLeftComponent(getPaneSelect());
         switch (layout) {
             case EXPAND_SELECT:
@@ -630,7 +632,6 @@ private JSplitPane createSelectPanelsSplit() {
                 JSplitPane.DIVIDER_LOCATION_PROPERTY,
                 new DividerResizedListener(DIVIDER_HORIZONTAL));
 
-        splitHoriz.setDividerSize(3);
         splitHoriz.setResizeWeight(0.3D);
         splitHoriz.setContinuousLayout(false);
         splitHoriz.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));

File: zap/src/main/java/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -68,6 +68,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/07/31 Tidy up parameter methods
 // ZAP: 2020/08/17 Changed to use getTreePath(msg) method
+// ZAP: 2020/11/02 Do not get leaf name if finding branch nodes.
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -274,7 +275,7 @@ public synchronized SiteNode findNode(URI uri, String method, String postData) {
                 folder = path.get(i);
 
                 if (folder != null && !folder.equals("")) {
-                    if (i == path.size() - 1) {
+                    if (method != null && i == path.size() - 1) {
                         String leafName =
                                 model.getSession().getLeafName(folder, uri, method, postData);
                         resultNode = findChild(resultNode, leafName);

File: zap/src/main/java/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -68,6 +68,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2020/07/31 Tidy up parameter methods
 // ZAP: 2020/08/17 Changed to use getTreePath(msg) method
+// ZAP: 2020/11/02 Do not get leaf name if finding branch nodes.
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -274,7 +275,7 @@ public synchronized SiteNode findNode(URI uri, String method, String postData) {
                 folder = path.get(i);
 
                 if (folder != null && !folder.equals("")) {
-                    if (i == path.size() - 1) {
+                    if (method != null && i == path.size() - 1) {
                         String leafName =
                                 model.getSession().getLeafName(folder, uri, method, postData);
                         resultNode = findChild(resultNode, leafName);

File: zap/src/main/java/org/zaproxy/zap/extension/help/ExtensionHelp.java
Patch:
@@ -465,8 +465,7 @@ private ZapMenuItem getMenuHelpZapUserGuide() {
     private JButton getHelpButton() {
         if (helpButton == null) {
             helpButton = new JButton();
-            helpButton.setIcon(
-                    new ImageIcon(ExtensionHelp.class.getResource("/resource/icon/16/201.png")));
+            helpButton.setIcon(getHelpIcon());
 
             helpButton.addActionListener(
                     new java.awt.event.ActionListener() {

File: zap/src/test/java/org/zaproxy/zap/extension/sessions/ExtensionSessionManagementUnitTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.zaproxy.zap.model.Context;
 import org.zaproxy.zap.session.CookieBasedSessionManagementMethodType.CookieBasedSessionManagementMethod;
 import org.zaproxy.zap.session.HttpAuthSessionManagementMethodType.HttpAuthSessionManagementMethod;
+import org.zaproxy.zap.session.ScriptBasedSessionManagementMethodType;
 import org.zaproxy.zap.session.ScriptBasedSessionManagementMethodType.ScriptBasedSessionManagementMethod;
 import org.zaproxy.zap.utils.ZapXmlConfiguration;
 
@@ -42,6 +43,7 @@ public class ExtensionSessionManagementUnitTest extends WithConfigsTest {
 
     @BeforeEach
     public void setUp() throws Exception {
+        ScriptBasedSessionManagementMethodType.setExtensionScript(null);
         extSessMgmt = new ExtensionSessionManagement();
         extSessMgmt.hook(mock(ExtensionHook.class));
     }

File: zap/src/test/java/org/zaproxy/zap/utils/PausableScheduledThreadPoolExecutorUnitTest.java
Patch:
@@ -40,7 +40,7 @@
 class PausableScheduledThreadPoolExecutorUnitTest {
 
     private static final int BULK_TASK_COUNT = 5;
-    private static final long DELAY_MS = 150;
+    private static final long DELAY_MS = 300;
 
     private PausableScheduledThreadPoolExecutor executor;
 

File: zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -57,7 +57,8 @@ public class AntiCsrfParam extends AbstractParam {
         "csrf_token",
         "_csrf",
         "_csrfSecret",
-        "__csrf_magic"
+        "__csrf_magic",
+        "CSRF"
     };
 
     private List<AntiCsrfParamToken> tokens = null;

File: zap/src/main/java/org/zaproxy/zap/extension/custompages/DefaultCustomPage.java
Patch:
@@ -205,6 +205,7 @@ private boolean isRegexMatch(String pageMatcher, String toMatch) {
         return pattern.matcher(toMatch).find();
     }
 
+    @Override
     public String toString() {
         StringBuilder cp = new StringBuilder();
         cp.append("ContextId: ").append(this.getContextId());

File: zap/src/main/java/org/zaproxy/zap/extension/log4j/ZapOutputWriter.java
Patch:
@@ -26,6 +26,7 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.ScanStatus;
 
+@Deprecated
 public class ZapOutputWriter extends WriterAppender {
 
     private static final char NEWLINE = '\n';

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/HttpPanelViewModelUtils.java
Patch:
@@ -101,7 +101,6 @@ public static void setBody(HttpHeader header, HttpBody body, String value) {
 
         if (!isEncoded(header)) {
             body.setBody(value);
-            header.setContentLength(body.length());
             return;
         }
 
@@ -121,15 +120,13 @@ private static void setBodyGzip(HttpHeader header, HttpBody body, byte[] value)
         } catch (IOException e) {
             logger.error("Failed to encode and set the body:", e);
         }
-        header.setContentLength(body.length());
     }
 
     public static void setBody(HttpHeader header, HttpBody body, byte[] value) {
         body.setCharset(header.getCharset());
 
         if (!isEncoded(header)) {
             body.setBody(value);
-            header.setContentLength(body.length());
             return;
         }
 

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/view/impl/models/http/HttpPanelViewModelUtils.java
Patch:
@@ -101,7 +101,6 @@ public static void setBody(HttpHeader header, HttpBody body, String value) {
 
         if (!isEncoded(header)) {
             body.setBody(value);
-            header.setContentLength(body.length());
             return;
         }
 
@@ -121,15 +120,13 @@ private static void setBodyGzip(HttpHeader header, HttpBody body, byte[] value)
         } catch (IOException e) {
             logger.error("Failed to encode and set the body:", e);
         }
-        header.setContentLength(body.length());
     }
 
     public static void setBody(HttpHeader header, HttpBody body, byte[] value) {
         body.setCharset(header.getCharset());
 
         if (!isEncoded(header)) {
             body.setBody(value);
-            header.setContentLength(body.length());
             return;
         }
 

File: zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -1289,7 +1289,7 @@ public PluginStats getPluginStats(int pluginId) {
     }
 
     /**
-     * Tells whether or not the message matches the specific {@code CustomPageType}
+     * Tells whether or not the message matches the specific {@code CustomPage.Type}.
      *
      * @param msg the message that will be checked
      * @param cpType the custom page type to be checked

File: zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPage.java
Patch:
@@ -102,7 +102,7 @@ public interface CustomPage extends EnableableInterface {
      * Determines if a {@code HttpMessage} is a Custom Page of a particular {@code CustomPage.Type}.
      *
      * @param msg the HTTP message to be evaluated
-     * @param cpt the CustomPageType of the Custom Pages against which the HTTP message should be
+     * @param cpt the CustomPage.Type of the Custom Pages against which the HTTP message should be
      *     evaluated
      * @return {@code true} if the HTTP message is a Custom Page of the type in question, {@code
      *     false} otherwise

File: zap/src/main/java/org/zaproxy/zap/model/Context.java
Patch:
@@ -758,7 +758,7 @@ public boolean hasCustomPages() {
 
     /**
      * Returns {@code true} if the {@code Context} has Custom Page definitions of a specific {@code
-     * CustomPageType}.
+     * CustomPage.Type}.
      *
      * @return {@code true} if this context has Custom Pages, {@code false} otherwise.
      */

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -48,6 +48,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/11/09 Ability to filter to active scan (Issue 5278)
 // ZAP: 2020/05/19 simplifying duplicate HostProcess for readability
+// ZAP: 2020/09/23 Add functionality for custom error pages handling (Issue 9).
 package org.parosproxy.paros.core.scanner;
 
 import java.security.InvalidParameterException;
@@ -308,6 +309,7 @@ private HostProcess createHostProcess(String hostAndPort, StructuralNode node) {
         hostProcess.setStartNode(node);
         hostProcess.setUser(this.user);
         hostProcess.setTechSet(this.techSet);
+        hostProcess.setContext(target.getContext());
         return hostProcess;
     }
 

File: zap/src/main/java/org/zaproxy/zap/control/CoreFunctionality.java
Patch:
@@ -131,6 +131,7 @@ private static synchronized void createExtensions() {
             extensions.add(new org.zaproxy.zap.extension.stdmenus.ExtensionStdMenus());
             extensions.add(new org.zaproxy.zap.extension.uiutils.ExtensionUiUtils());
             extensions.add(new org.zaproxy.zap.extension.users.ExtensionUserManagement());
+            extensions.add(new org.zaproxy.zap.extension.custompages.ExtensionCustomPages());
             extensions.trimToSize();
 
             builtInExtensions = Collections.unmodifiableList(extensions);

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -48,6 +48,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/11/09 Ability to filter to active scan (Issue 5278)
 // ZAP: 2020/05/19 simplifying duplicate HostProcess for readability
+// ZAP: 2020/09/23 Add functionality for custom error pages handling (Issue 9).
 package org.parosproxy.paros.core.scanner;
 
 import java.security.InvalidParameterException;
@@ -308,6 +309,7 @@ private HostProcess createHostProcess(String hostAndPort, StructuralNode node) {
         hostProcess.setStartNode(node);
         hostProcess.setUser(this.user);
         hostProcess.setTechSet(this.techSet);
+        hostProcess.setContext(target.getContext());
         return hostProcess;
     }
 

File: zap/src/main/java/org/zaproxy/zap/control/CoreFunctionality.java
Patch:
@@ -131,6 +131,7 @@ private static synchronized void createExtensions() {
             extensions.add(new org.zaproxy.zap.extension.stdmenus.ExtensionStdMenus());
             extensions.add(new org.zaproxy.zap.extension.uiutils.ExtensionUiUtils());
             extensions.add(new org.zaproxy.zap.extension.users.ExtensionUserManagement());
+            extensions.add(new org.zaproxy.zap.extension.custompages.ExtensionCustomPages());
             extensions.trimToSize();
 
             builtInExtensions = Collections.unmodifiableList(extensions);

File: zap/src/main/java/org/parosproxy/paros/core/scanner/ScannerParamFilter.java
Patch:
@@ -66,6 +66,9 @@ public class ScannerParamFilter implements Cloneable {
                 Constant.messages.getString("variant.param.type.cookie"));
         typeMap.put(
                 NameValuePair.TYPE_JSON, Constant.messages.getString("variant.param.type.json"));
+        typeMap.put(
+                NameValuePair.TYPE_GRAPHQL_INLINE,
+                Constant.messages.getString("variant.param.type.graphql.inline"));
         typeMap.put(
                 NameValuePair.TYPE_MULTIPART_DATA_PARAM,
                 Constant.messages.getString("variant.param.type.multipart.dataparam"));

File: zap/src/main/java/org/parosproxy/paros/core/scanner/ScannerParamFilter.java
Patch:
@@ -66,6 +66,9 @@ public class ScannerParamFilter implements Cloneable {
                 Constant.messages.getString("variant.param.type.cookie"));
         typeMap.put(
                 NameValuePair.TYPE_JSON, Constant.messages.getString("variant.param.type.json"));
+        typeMap.put(
+                NameValuePair.TYPE_GRAPHQL_INLINE,
+                Constant.messages.getString("variant.param.type.graphql.inline"));
         typeMap.put(
                 NameValuePair.TYPE_MULTIPART_DATA_PARAM,
                 Constant.messages.getString("variant.param.type.multipart.dataparam"));

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantScript.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.util.List;
 import javax.script.ScriptException;
-import org.apache.commons.httpclient.URIException;
 import org.parosproxy.paros.network.HttpMessage;
 
 /**
@@ -41,7 +40,7 @@ default String getLeafName(VariantCustom variant, String nodeName, HttpMessage m
         return null;
     }
 
-    default List<String> getTreePath(VariantCustom variant, HttpMessage msg) throws URIException {
+    default List<String> getTreePath(VariantCustom variant, HttpMessage msg) {
         return null;
     }
 }

File: zap/src/main/java/org/zaproxy/zap/extension/httppanel/component/all/ExtensionHttpPanelComponentAll.java
Patch:
@@ -30,7 +30,7 @@
 
 public class ExtensionHttpPanelComponentAll extends ExtensionAdaptor {
 
-    public static final String NAME = "ExtensionHttpPanelComponentonentAll";
+    public static final String NAME = "ExtensionHttpPanelComponentAll";
 
     public ExtensionHttpPanelComponentAll() {
         super(NAME);

File: zap/src/main/java/org/parosproxy/paros/network/HttpInputStream.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2020/08/25 Correctly read chunks of the body.
 package org.parosproxy.paros.network;
 
 import java.io.BufferedInputStream;
@@ -38,7 +39,7 @@
 public class HttpInputStream extends BufferedInputStream {
     private static Logger log = Logger.getLogger(HttpInputStream.class);
 
-    private static final int BUFFER_SIZE = 4096;
+    static final int BUFFER_SIZE = 4096;
     private static final String CRLF = "\r\n";
     private static final String CRLF2 = CRLF + CRLF;
     private static final String LF = "\n";
@@ -201,7 +202,7 @@ private int readBody(int contentLength, int readBodyLength, byte[] buffer) throw
 
         } else {
             remainingLen = contentLength - readBodyLength;
-            if (remainingLen < buffer.length && remainingLen > 0) {
+            if (remainingLen <= buffer.length && remainingLen > 0) {
                 //				len = in.read(buffer,0,remainingLen);
                 len = super.read(buffer, 0, remainingLen);
 

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakpointsOptionsPanel.java
Patch:
@@ -129,7 +129,7 @@ public void initParam(Object obj) {
 
         getCheckBoxConfirmDropMessage().setSelected(param.isConfirmDropMessage());
         // Note param.alwaysOnTop will be null if the user hasn't specified a preference yet
-        getCheckBoxAlwaysOnTop().setSelected(param.getAlwaysOnTop() != Boolean.FALSE);
+        getCheckBoxAlwaysOnTop().setSelected(!Boolean.FALSE.equals(param.getAlwaysOnTop()));
         getCheckBoxInScopeOnly().setSelected(param.isInScopeOnly());
         getButtonMode().setSelectedIndex(param.getButtonMode() - 1);
     }

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakpointsParam.java
Patch:
@@ -114,7 +114,7 @@ public Boolean getAlwaysOnTop() {
 
     public void setAlwaysOnTop(Boolean alwaysOnTop) {
         this.alwaysOnTop = alwaysOnTop;
-        getConfig().setProperty(PARAM_BRK_ALWAYS_ON_TOP, Boolean.valueOf(alwaysOnTop));
+        getConfig().setProperty(PARAM_BRK_ALWAYS_ON_TOP, alwaysOnTop);
     }
 
     public boolean isInScopeOnly() {

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/DialogAddAutoTagScanner.java
Patch:
@@ -394,7 +394,6 @@ private void checkAndEnableConfirmButton() {
                     (getNameTextField().getDocument().getLength() > 0)
                             && (getConfigurationTextField().getDocument().getLength() > 0)
                             && (getRequestUrlRegexTextField().getDocument().getLength() > 0
-                                    || getRequestUrlRegexTextField().getDocument().getLength() > 0
                                     || getRequestHeaderRegexTextField().getDocument().getLength()
                                             > 0
                                     || getResponseHeaderRegexTextField().getDocument().getLength()

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderMessagesTableModel.java
Patch:
@@ -137,7 +137,7 @@ public void addHistoryReference(
                     @Override
                     public void run() {
                         final int row = resources.size();
-                        idsToRows.put(Integer.valueOf(entry.getHistoryId()), row);
+                        idsToRows.put(entry.getHistoryId(), row);
                         resources.add(entry);
                         fireTableRowsInserted(row, row);
                     }

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakpointsOptionsPanel.java
Patch:
@@ -129,7 +129,7 @@ public void initParam(Object obj) {
 
         getCheckBoxConfirmDropMessage().setSelected(param.isConfirmDropMessage());
         // Note param.alwaysOnTop will be null if the user hasn't specified a preference yet
-        getCheckBoxAlwaysOnTop().setSelected(param.getAlwaysOnTop() != Boolean.FALSE);
+        getCheckBoxAlwaysOnTop().setSelected(!Boolean.FALSE.equals(param.getAlwaysOnTop()));
         getCheckBoxInScopeOnly().setSelected(param.isInScopeOnly());
         getButtonMode().setSelectedIndex(param.getButtonMode() - 1);
     }

File: zap/src/main/java/org/zaproxy/zap/extension/brk/BreakpointsParam.java
Patch:
@@ -114,7 +114,7 @@ public Boolean getAlwaysOnTop() {
 
     public void setAlwaysOnTop(Boolean alwaysOnTop) {
         this.alwaysOnTop = alwaysOnTop;
-        getConfig().setProperty(PARAM_BRK_ALWAYS_ON_TOP, Boolean.valueOf(alwaysOnTop));
+        getConfig().setProperty(PARAM_BRK_ALWAYS_ON_TOP, alwaysOnTop);
     }
 
     public boolean isInScopeOnly() {

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/DialogAddAutoTagScanner.java
Patch:
@@ -394,7 +394,6 @@ private void checkAndEnableConfirmButton() {
                     (getNameTextField().getDocument().getLength() > 0)
                             && (getConfigurationTextField().getDocument().getLength() > 0)
                             && (getRequestUrlRegexTextField().getDocument().getLength() > 0
-                                    || getRequestUrlRegexTextField().getDocument().getLength() > 0
                                     || getRequestHeaderRegexTextField().getDocument().getLength()
                                             > 0
                                     || getResponseHeaderRegexTextField().getDocument().getLength()

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderMessagesTableModel.java
Patch:
@@ -137,7 +137,7 @@ public void addHistoryReference(
                     @Override
                     public void run() {
                         final int row = resources.size();
-                        idsToRows.put(Integer.valueOf(entry.getHistoryId()), row);
+                        idsToRows.put(entry.getHistoryId(), row);
                         resources.add(entry);
                         fireTableRowsInserted(row, row);
                     }

File: zap/src/main/java/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -170,7 +170,8 @@ public ExtensionScript() {
         if (se != null) {
             this.registerScriptEngineWrapper(new JavascriptEngineWrapper(se.getFactory()));
         } else {
-            logger.error("No Javascript/ECMAScript engine found");
+            logger.warn(
+                    "No default JavaScript/ECMAScript engine found, some scripts might no longer work.");
         }
     }
 

File: zap/src/main/java/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -210,7 +210,8 @@ private void init() {
         }
 
         // Add a default parse filter and any custom ones
-        this.addParseFilter(new DefaultParseFilter(spiderParam, extension.getMessages()));
+        controller.setDefaultParseFilter(
+                new DefaultParseFilter(spiderParam, extension.getMessages()));
         for (ParseFilter filter : extension.getCustomParseFilters()) this.addParseFilter(filter);
 
         // Add the scan context, if any

File: zap/src/main/java/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -210,7 +210,8 @@ private void init() {
         }
 
         // Add a default parse filter and any custom ones
-        this.addParseFilter(new DefaultParseFilter(spiderParam, extension.getMessages()));
+        controller.setDefaultParseFilter(
+                new DefaultParseFilter(spiderParam, extension.getMessages()));
         for (ParseFilter filter : extension.getCustomParseFilters()) this.addParseFilter(filter);
 
         // Add the scan context, if any

File: zap/src/main/java/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -72,7 +72,7 @@
 // ZAP: 2017/02/08 Change CONNECT response to contain just the status line, helps Android emulator
 // consume the response.
 // ZAP: 2017/02/20 Issue 2699: Make SSLException handling more user friendly
-// ZAP: 2017/02/23  Issue 3227: Limit API access to whitelisted IP addresses
+// ZAP: 2017/02/23  Issue 3227: Limit API access to permitted IP addresses
 // ZAP: 2017/03/15 Disable API by default
 // ZAP: 2017/03/26 Check the public address when behind NAT.
 // ZAP: 2017/06/12 Do not notify listeners when request is excluded.

File: zap/src/main/java/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -42,7 +42,7 @@
 // ZAP: 2015/08/07 Issue 1768: Update to use a more recent default user agent
 // ZAP: 2016/06/17 Remove redundant initialisations of instance variables
 // ZAP: 2016/09/26 JavaDoc tweaks
-// ZAP: 2017/02/23 Issue 3227: Limit API access to whitelisted IP addresses
+// ZAP: 2017/02/23 Issue 3227: Limit API access to permitted IP addresses
 // ZAP: 2017/04/24 Added more HTTP methods
 // ZAP: 2017/10/19 Skip parsing of empty Cookie headers.
 // ZAP: 2017/11/22 Address a NPE in isImage().

File: zap/src/main/java/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -72,7 +72,7 @@
 // ZAP: 2017/02/08 Change CONNECT response to contain just the status line, helps Android emulator
 // consume the response.
 // ZAP: 2017/02/20 Issue 2699: Make SSLException handling more user friendly
-// ZAP: 2017/02/23  Issue 3227: Limit API access to whitelisted IP addresses
+// ZAP: 2017/02/23  Issue 3227: Limit API access to permitted IP addresses
 // ZAP: 2017/03/15 Disable API by default
 // ZAP: 2017/03/26 Check the public address when behind NAT.
 // ZAP: 2017/06/12 Do not notify listeners when request is excluded.

File: zap/src/main/java/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -42,7 +42,7 @@
 // ZAP: 2015/08/07 Issue 1768: Update to use a more recent default user agent
 // ZAP: 2016/06/17 Remove redundant initialisations of instance variables
 // ZAP: 2016/09/26 JavaDoc tweaks
-// ZAP: 2017/02/23 Issue 3227: Limit API access to whitelisted IP addresses
+// ZAP: 2017/02/23 Issue 3227: Limit API access to permitted IP addresses
 // ZAP: 2017/04/24 Added more HTTP methods
 // ZAP: 2017/10/19 Skip parsing of empty Cookie headers.
 // ZAP: 2017/11/22 Address a NPE in isImage().

File: zap/src/main/java/org/parosproxy/paros/extension/history/HistoryTableModel.java
Patch:
@@ -31,6 +31,7 @@ public HistoryTableModel() {
         super(
                 new Column[] {
                     Column.HREF_ID,
+                    Column.HREF_TYPE_INFO,
                     Column.REQUEST_TIMESTAMP,
                     Column.RESPONSE_TIMESTAMP,
                     Column.METHOD,

File: zap/src/main/java/org/zaproxy/zap/view/table/AbstractHistoryReferencesTableModel.java
Patch:
@@ -42,6 +42,7 @@ public abstract class AbstractHistoryReferencesTableModel<T extends HistoryRefer
         Constant.messages.getString("view.href.table.header.timestamp.request"),
         Constant.messages.getString("view.href.table.header.timestamp.response"),
         Constant.messages.getString("view.href.table.header.hreftype"),
+        Constant.messages.getString("view.href.table.header.hreftype.name"),
         Constant.messages.getString("view.href.table.header.method"),
         Constant.messages.getString("view.href.table.header.url"),
         Constant.messages.getString("view.href.table.header.hostname"),

File: zap/src/main/java/org/zaproxy/zap/view/table/HistoryReferencesTableModel.java
Patch:
@@ -44,6 +44,7 @@ public enum Column {
         REQUEST_TIMESTAMP,
         RESPONSE_TIMESTAMP,
         HREF_TYPE,
+        HREF_TYPE_INFO,
         METHOD,
         URL,
         HOSTNAME,

File: zap/src/main/java/org/parosproxy/paros/extension/history/HistoryTableModel.java
Patch:
@@ -31,6 +31,7 @@ public HistoryTableModel() {
         super(
                 new Column[] {
                     Column.HREF_ID,
+                    Column.HREF_TYPE_INFO,
                     Column.REQUEST_TIMESTAMP,
                     Column.RESPONSE_TIMESTAMP,
                     Column.METHOD,

File: zap/src/main/java/org/zaproxy/zap/view/table/AbstractHistoryReferencesTableModel.java
Patch:
@@ -42,6 +42,7 @@ public abstract class AbstractHistoryReferencesTableModel<T extends HistoryRefer
         Constant.messages.getString("view.href.table.header.timestamp.request"),
         Constant.messages.getString("view.href.table.header.timestamp.response"),
         Constant.messages.getString("view.href.table.header.hreftype"),
+        Constant.messages.getString("view.href.table.header.hreftype.name"),
         Constant.messages.getString("view.href.table.header.method"),
         Constant.messages.getString("view.href.table.header.url"),
         Constant.messages.getString("view.href.table.header.hostname"),

File: zap/src/main/java/org/zaproxy/zap/view/table/HistoryReferencesTableModel.java
Patch:
@@ -44,6 +44,7 @@ public enum Column {
         REQUEST_TIMESTAMP,
         RESPONSE_TIMESTAMP,
         HREF_TYPE,
+        HREF_TYPE_INFO,
         METHOD,
         URL,
         HOSTNAME,

File: zap/src/main/java/org/parosproxy/paros/extension/option/OptionsConnectionPanel.java
Patch:
@@ -733,7 +733,7 @@ private ZapTextField getTxtProxyChainUserName() {
     /**
      * This method initializes txtProxyChainPassword
      *
-     * @return org.zaproxy.zap.utils.ZapTextField
+     * @return The field that will be used to gather the password from the user
      */
     private JPasswordField getTxtProxyChainPassword() {
         if (txtProxyChainPassword == null) {

File: zap/src/main/java/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -555,7 +555,7 @@ public AddOn(Path file) throws IOException {
     }
 
     private static String extractAddOnId(String fileName) {
-        return fileName.substring(0, fileName.indexOf('.')).split("-")[0];
+        return fileName.substring(0, fileName.lastIndexOf('.')).split("-")[0];
     }
 
     private void loadManifestFile() throws IOException {

File: zap/src/main/java/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -86,6 +86,7 @@
 // ZAP: 2019/07/25 Relocate null check to be earlier in hookScannerHook(scan) [LGTM issue].
 // ZAP: 2019/08/19 Validate menu and main frame in EDT.
 // ZAP: 2019/09/30 Use instance variable for view checks.
+// ZAP: 2020/05/14 Hook HttpSenderListener when starting single extension.
 package org.parosproxy.paros.extension;
 
 import java.awt.Component;
@@ -817,6 +818,7 @@ public void startLifeCycle(Extension ext)
 
             hookContextDataFactories(ext, extHook);
             hookApiImplementors(ext, extHook);
+            hookHttpSenderListeners(ext, extHook);
 
             if (hasView()) {
                 // no need to hook view if no GUI

File: zap/src/main/java/org/zaproxy/zap/ZapBootstrap.java
Patch:
@@ -73,7 +73,7 @@ public int start() {
         Logger.getLogger(DefaultFileSystem.class).addAppender(na);
 
         try {
-            Constant.getInstance();
+            Constant.createInstance(controlOverrides);
         } catch (final Throwable e) {
             System.err.println(e.getMessage());
             return 1;

File: zap/src/main/java/org/apache/commons/httpclient/HttpConnection.java
Patch:
@@ -61,7 +61,7 @@
  *  - Remove use of reflection to call Socket.shutdownOutput() in shutdownOutput(), not needed by minimum Java version targeted.
  *  - Add @Deprecated annotations to deprecated methods (by JavaDoc deprecated tag).
  *  - Change method tunnelCreated() to also create the tunnel if requested by calling code.
- * 
+ *  - Pass the HttpConnectionParams when calling SecureProtocolSocketFactory.
  */
 /**
  * An abstraction of an HTTP {@link InputStream} and {@link OutputStream}
@@ -801,7 +801,7 @@ public void tunnelCreated() throws IllegalStateException, IOException {
             SecureProtocolSocketFactory socketFactory =
                 (SecureProtocolSocketFactory) protocolInUse.getSocketFactory();
 
-            socket = socketFactory.createSocket(socket, hostName, portNumber, true);
+            socket = socketFactory.createSocket(socket, hostName, portNumber, true, params);
         }
         
         if (LOG.isDebugEnabled()) {

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Alert.java
Patch:
@@ -621,6 +621,9 @@ public Alert newInstance() {
                 this.solution,
                 this.reference,
                 this.historyRef);
+        item.setEvidence(this.evidence);
+        item.setCweId(this.cweId);
+        item.setWascId(this.wascId);
         item.setSource(this.source);
         return item;
     }

File: zap/src/main/java/org/parosproxy/paros/view/FindDialog.java
Patch:
@@ -32,6 +32,7 @@
 package org.parosproxy.paros.view;
 
 import java.awt.Component;
+import java.awt.FlowLayout;
 import java.awt.Frame;
 import java.awt.HeadlessException;
 import java.awt.Window;
@@ -308,7 +309,7 @@ private ZapTextField getTxtFind() {
      */
     private JPanel getJPanel1() {
         if (jPanel1 == null) {
-            jPanel1 = new JPanel();
+            jPanel1 = new JPanel(new FlowLayout(FlowLayout.TRAILING));
             jPanel1.add(getBtnFind());
             jPanel1.add(getBtnCancel());
         }

File: zap/src/main/java/org/parosproxy/paros/view/FindDialog.java
Patch:
@@ -32,6 +32,7 @@
 package org.parosproxy.paros.view;
 
 import java.awt.Component;
+import java.awt.FlowLayout;
 import java.awt.Frame;
 import java.awt.HeadlessException;
 import java.awt.Window;
@@ -308,7 +309,7 @@ private ZapTextField getTxtFind() {
      */
     private JPanel getJPanel1() {
         if (jPanel1 == null) {
-            jPanel1 = new JPanel();
+            jPanel1 = new JPanel(new FlowLayout(FlowLayout.TRAILING));
             jPanel1.add(getBtnFind());
             jPanel1.add(getBtnCancel());
         }

File: zap/src/main/java/org/parosproxy/paros/view/MainFrame.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2018/02/14 Add button for ResponsePanelPosition.TAB_SIDE_BY_SIDE (Issue 4331).
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/12/13 Display the primary proxy details (host:port) in the footer (Issue 2016).
 package org.parosproxy.paros.view;
 
 import java.awt.CardLayout;
@@ -587,6 +588,7 @@ public void applyViewOptions() {
         setResponsePanelPosition(position);
 
         setShowTabNames(options.getViewParam().getShowTabNames());
+        getMainFooterPanel().optionsChanged();
     }
 
     /**

File: zap/src/main/java/org/parosproxy/paros/view/View.java
Patch:
@@ -87,6 +87,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/07/10 Update to use Context.getId following deprecation of Context.getIndex
+// ZAP: 2019/12/13 Update new footer proxy label in postInit (Issue 2016)
 package org.parosproxy.paros.view;
 
 import java.awt.Component;
@@ -348,6 +349,7 @@ public void actionPerformed(ActionEvent e) {
                 });
         mainFrame.getMainMenuBar().getMenuView().add(unpinAllMenu);
 
+        mainFrame.getMainFooterPanel().optionsChanged();
         postInitialisation = true;
     }
 

File: zap/src/main/java/org/parosproxy/paros/view/MainFrame.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2018/02/14 Add button for ResponsePanelPosition.TAB_SIDE_BY_SIDE (Issue 4331).
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/12/13 Display the primary proxy details (host:port) in the footer (Issue 2016).
 package org.parosproxy.paros.view;
 
 import java.awt.CardLayout;
@@ -587,6 +588,7 @@ public void applyViewOptions() {
         setResponsePanelPosition(position);
 
         setShowTabNames(options.getViewParam().getShowTabNames());
+        getMainFooterPanel().optionsChanged();
     }
 
     /**

File: zap/src/main/java/org/parosproxy/paros/view/View.java
Patch:
@@ -87,6 +87,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/07/10 Update to use Context.getId following deprecation of Context.getIndex
+// ZAP: 2019/12/13 Update new footer proxy label in postInit (Issue 2016)
 package org.parosproxy.paros.view;
 
 import java.awt.Component;
@@ -348,6 +349,7 @@ public void actionPerformed(ActionEvent e) {
                 });
         mainFrame.getMainMenuBar().getMenuView().add(unpinAllMenu);
 
+        mainFrame.getMainFooterPanel().optionsChanged();
         postInitialisation = true;
     }
 

File: zap/src/main/java/org/parosproxy/paros/core/scanner/VariantCookie.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Vector;
 import org.parosproxy.paros.network.HttpHeader;
 import org.parosproxy.paros.network.HttpMessage;
 
@@ -43,8 +42,8 @@ public void setMessage(HttpMessage message) {
             throw new IllegalArgumentException("Parameter message must not be null.");
         }
 
-        Vector<String> cookieLines = message.getRequestHeader().getHeaders(HttpHeader.COOKIE);
-        if (cookieLines == null) {
+        List<String> cookieLines = message.getRequestHeader().getHeaderValues(HttpHeader.COOKIE);
+        if (cookieLines.isEmpty()) {
             params = Collections.emptyList();
             return;
         }

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -273,9 +273,8 @@ private JPanel getCorePanel(boolean update) {
             } else {
                 corePanel.add(
                         new JLabel(
-                                this.currentVersion
-                                        + " : "
-                                        + Constant.messages.getString("cfu.check.zap.latest")),
+                                Constant.messages.getString(
+                                        "cfu.check.zap.latest", this.currentVersion)),
                         LayoutHelper.getGBC(0, 0, 1, 1.0D));
             }
             installedPanel.validate();

File: zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java
Patch:
@@ -121,7 +121,7 @@ public void saveAndLoad() {
      * @throws URIException if an error occurred while accessing the provided uri
      */
     @Test
-    public void ansestorPath() throws Exception {
+    public void ancestorPath() throws Exception {
         // standard urls
         assertEquals(
                 "", spp.getAncestorPath(new URI("http://example.org/path/to/element", true), 0));

File: zap/src/test/java/org/zaproxy/zap/utils/BoyerMooreMatcherUnitTest.java
Patch:
@@ -47,7 +47,7 @@ public void shouldFailToFindInNullContent() {
     }
 
     @Test
-    public void shouldReturnPatternPassedInCronstructor() {
+    public void shouldReturnPatternPassedInConstructor() {
         // Given
         String pattern = "pattern";
         BoyerMooreMatcher matcher = new BoyerMooreMatcher(pattern);

File: zap/src/test/java/ch/csnc/extension/httpclient/AliasKeyManagerUnitTest.java
Patch:
@@ -152,7 +152,7 @@ public void shouldReturnNullAsKeyWhenExceptionOccursAccessingKeyStore() throws E
                 .willThrow(NoSuchAlgorithmException.class, UnrecoverableKeyException.class);
         aliasKeyManager = new AliasKeyManager(keyStore, ALIAS, PASSWORD);
         // When/Then
-        assertThat(aliasKeyManager.getPrivateKey(ALIAS), is(equalTo(null))); // KeyStoreExcpeption
+        assertThat(aliasKeyManager.getPrivateKey(ALIAS), is(equalTo(null))); // KeyStoreException
         assertThat(
                 aliasKeyManager.getPrivateKey(ALIAS),
                 is(equalTo(null))); // NoSuchAlgorithmException

File: zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java
Patch:
@@ -139,7 +139,7 @@ public void shouldRetrieveDelaySet() {
     }
 
     @Test
-    public void shouldRetrieveUnkownStatusByDefault() {
+    public void shouldRetrieveUnknownStatusByDefault() {
         // Given / When
         AbstractPlugin plugin = createAbstractPlugin();
         // Then

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantCookieUnitTest.java
Patch:
@@ -80,7 +80,7 @@ public void shouldNotExtractAnyParameterIfThereAreNoCookieHeaders() {
     }
 
     @Test
-    public void shouldNotExtractAnyParameterIfTheCookieHeadersDontHaveCoookies() {
+    public void shouldNotExtractAnyParameterIfTheCookieHeadersDontHaveCookies() {
         // Given
         VariantCookie variantCookie = new VariantCookie();
         HttpMessage messageWithCookies = createMessageWithCookies("", "");

File: zap/src/test/java/org/zaproxy/zap/VersionUnitTest.java
Patch:
@@ -98,7 +98,7 @@ public void shouldReturnTrueWhenEqualingToTheSameVersionNumber() {
     }
 
     @Test
-    public void shouldReturnFalseWhenEqualingToDifferntVersionNumbers() {
+    public void shouldReturnFalseWhenEqualingToDifferentVersionNumbers() {
         // Given
         Version version = new Version("1.0.0");
         Version differentVersion = new Version("2.0.0");

File: zap/src/test/java/org/zaproxy/zap/extension/pscan/PluginPassiveScannerUnitTest.java
Patch:
@@ -49,7 +49,7 @@ public void shouldHaveUndefinedPluginIdByDefault() {
     }
 
     @Test
-    public void shouldHaveUnkownStatusByDefault() {
+    public void shouldHaveUnknownStatusByDefault() {
         assertThat(scanner.getStatus(), is(equalTo(AddOn.Status.unknown)));
     }
 

File: zap/src/test/java/org/zaproxy/zap/spider/URLResolverUnitTest.java
Patch:
@@ -126,7 +126,7 @@ public void shouldRemoveLeadingSlashPointsFromRelativeUrlBeforeAppendingToBaseUr
     }
 
     @Test
-    public void shouldRemoveAllSlashPointSlashOccurencesFromResolvedUrl() {
+    public void shouldRemoveAllSlashPointSlashOccurrencesFromResolvedUrl() {
         assertThat(
                 URLResolver.resolveUrl("http://abc.de/./", "test/./xyz/./123"),
                 is("http://abc.de/test/xyz/123"));

File: zap/src/test/java/org/zaproxy/zap/spider/parser/SpiderHtmlParserUnitTest.java
Patch:
@@ -206,7 +206,7 @@ public void shouldFindUrlsInAnchorPingElements() {
                         "http://a.example.com/",
                         "http://ping.example.com/",
                         "http://pong.example.com/",
-                        // Mutiple ping URLs with tab in the middle
+                        // Multiple ping URLs with tab in the middle
                         "http://a.example.com/",
                         "http://ping.example.com/",
                         "http://pong.example.com/")); // Trailing slash is added on host
@@ -254,7 +254,7 @@ public void shouldFindUrlsInAreaPingElements() {
                         "http://a.example.com/",
                         "http://ping.example.com/",
                         "http://pong.example.com/",
-                        // Mutiple ping URLs with tab in the middle
+                        // Multiple ping URLs with tab in the middle
                         "http://a.example.com/",
                         "http://ping.example.com/",
                         "http://pong.example.com/")); // Trailing slash is added on host

File: zap/src/test/java/org/zaproxy/zap/utils/BoyerMooreMatcherUnitTest.java
Patch:
@@ -124,7 +124,7 @@ public void shouldFindEmptyPatternAtIdxZero() {
     }
 
     @Test
-    public void shouldNotFindAnInexistentPattern() {
+    public void shouldNotFindAnNonexistentPattern() {
         // Given
         String pattern = "not in content";
         BoyerMooreMatcher matcher = new BoyerMooreMatcher(pattern);

File: zap/src/test/java/org/zaproxy/zap/utils/LocaleUtilsUnitTest.java
Patch:
@@ -186,7 +186,7 @@ public void shouldMatchValidMessagesPropertiesFilesWithCreateMessagesPropertiesF
     }
 
     @Test
-    public void shoudAvailableLocalesBeNonEmpty() {
+    public void shouldAvailableLocalesBeNonEmpty() {
         // Given
         List<String> locales = LocaleUtils.getAvailableLocales();
 

File: zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java
Patch:
@@ -121,7 +121,7 @@ public void saveAndLoad() {
      * @throws URIException if an error occurred while accessing the provided uri
      */
     @Test
-    public void ansestorPath() throws Exception {
+    public void ancestorPath() throws Exception {
         // standard urls
         assertEquals(
                 "", spp.getAncestorPath(new URI("http://example.org/path/to/element", true), 0));

File: zap/src/test/java/org/zaproxy/zap/utils/BoyerMooreMatcherUnitTest.java
Patch:
@@ -47,7 +47,7 @@ public void shouldFailToFindInNullContent() {
     }
 
     @Test
-    public void shouldReturnPatternPassedInCronstructor() {
+    public void shouldReturnPatternPassedInConstructor() {
         // Given
         String pattern = "pattern";
         BoyerMooreMatcher matcher = new BoyerMooreMatcher(pattern);

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -32,9 +32,7 @@
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
-import java.util.Enumeration;
 import java.util.List;
 import javax.swing.DefaultListModel;
 import javax.swing.JButton;

File: zap/src/main/java/org/zaproxy/zap/control/AddOnCollection.java
Patch:
@@ -64,9 +64,9 @@ public AddOnCollection(
             while (!checkedAddOns.isEmpty()) {
                 AddOn addOn = checkedAddOns.remove(0);
                 // Shouldn't happen but make sure to not show add-ons that wouldn't run, or one of
-                // its extensions
-                // because of dependency issues or
-                AddOn.AddOnRunRequirements requirements = addOn.calculateRunRequirements(addOns);
+                // its extensions because of dependency issues.
+                AddOn.AddOnRunRequirements requirements =
+                        addOn.calculateInstallRequirements(addOns);
                 if (requirements.hasDependencyIssue()) {
                     if (logger.isDebugEnabled()) {
                         logger.debug(

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -651,14 +651,15 @@ private JPanel getFilterJPanel(Target target) {
         if (this.filterPanel == null) {
             filterPanel = new FilterPanel();
         } else {
-            filterPanel.resetFilterPanel();
+            filterPanel.resetFilterPanel(true);
         }
         SiteNode siteNode = target.getStartNode();
         if (siteNode != null
                 && siteNode.getHistoryReference() != null
                 && siteNode.getHistoryReference().getTags() != null) {
             filterPanel.setAllTags(siteNode.getHistoryReference().getTags());
         }
+
         return filterPanel;
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -33,7 +33,6 @@
 import org.parosproxy.paros.model.Session;
 import org.zaproxy.zap.extension.alert.ExtensionAlert;
 import org.zaproxy.zap.extension.ascan.filters.ScanFilter;
-import org.zaproxy.zap.extension.history.FilterPanelVO;
 import org.zaproxy.zap.extension.ruleconfig.ExtensionRuleConfig;
 import org.zaproxy.zap.extension.ruleconfig.RuleConfigParam;
 import org.zaproxy.zap.extension.script.ScriptCollection;

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -66,7 +66,6 @@
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.AbstractParamContainerPanel;
 import org.zaproxy.zap.extension.ascan.PolicyAllCategoryPanel.ScanPolicyChangedEventListener;
-import org.zaproxy.zap.extension.history.FilterPanel;
 import org.zaproxy.zap.extension.users.ExtensionUserManagement;
 import org.zaproxy.zap.model.Context;
 import org.zaproxy.zap.model.StructuralNode;

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/FilterPanel.java
Patch:
@@ -17,7 +17,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.zaproxy.zap.extension.history;
+package org.zaproxy.zap.extension.ascan;
 
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
@@ -41,15 +41,15 @@
 import org.parosproxy.paros.network.HttpRequestHeader;
 import org.parosproxy.paros.network.HttpStatusCode;
 import org.parosproxy.paros.view.View;
-import org.zaproxy.zap.extension.ascan.CustomScanDialog;
 import org.zaproxy.zap.utils.ZapLabel;
 import org.zaproxy.zap.view.LayoutHelper;
 
 /**
  * FilterPanel is used as a Tab in {@link CustomScanDialog}. This tab gives various options for
- * Filtering the Active Scan nodes based on the selection.
+ * filtering the Active Scan nodes based on the selection.
  *
  * @author KSASAN preetkaran20@gmail.com
+ * @since TODO add version
  */
 public class FilterPanel extends JPanel {
 

File: zap/src/main/java/org/parosproxy/paros/Constant.java
Patch:
@@ -99,6 +99,7 @@
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/06/07 Update current version.
 // ZAP: 2019/09/16 Deprecate ZAP_HOMEPAGE and ZAP_EXTENSIONS_PAGE.
+// ZAP: 2019/11/07 Removed constants related to accepting the license.
 package org.parosproxy.paros;
 
 import java.io.File;
@@ -246,8 +247,6 @@ public final class Constant {
     public String FOLDER_SESSION = FOLDER_SESSION_DEFAULT;
     public String DBNAME_UNTITLED =
             FOLDER_SESSION + System.getProperty("file.separator") + "untitled";
-    public String ACCEPTED_LICENSE_DEFAULT = "AcceptedLicense";
-    public String ACCEPTED_LICENSE = ACCEPTED_LICENSE_DEFAULT;
 
     public static final String FILE_PROGRAM_SPLASH = "resource/zap128x128.png";
 
@@ -492,7 +491,6 @@ public void initializeFilesAndDirectories() {
         FILE_CONFIG = zapHome + FILE_CONFIG;
         FOLDER_SESSION = zapHome + FOLDER_SESSION;
         DBNAME_UNTITLED = zapHome + DBNAME_UNTITLED;
-        ACCEPTED_LICENSE = zapHome + ACCEPTED_LICENSE;
         DIRBUSTER_CUSTOM_DIR = zapHome + DIRBUSTER_DIR;
         FUZZER_DIR = zapHome + FUZZER_DIR;
         FOLDER_LOCAL_PLUGIN = zapHome + FOLDER_PLUGIN;

File: zap/src/main/java/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -46,6 +46,7 @@
 // ZAP: 2018/04/19 Added support for publishing events
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/11/09 Ability to filter to active scan (Issue 5278)
 package org.parosproxy.paros.core.scanner;
 
 import java.security.InvalidParameterException;

File: zap/src/main/java/org/parosproxy/paros/extension/history/PopupMenuExportMessage.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2018/03/29 Use FileNameExtensionFilter.
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/11/05 Use WritableFileChooser for saves.
 package org.parosproxy.paros.extension.history;
 
 import java.io.BufferedWriter;
@@ -48,6 +49,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.zap.view.widgets.WritableFileChooser;
 
 public class PopupMenuExportMessage extends JMenuItem {
 
@@ -170,7 +172,7 @@ private void exportHistory(HistoryReference ref, Writer writer) {
     private File getOutputFile() {
 
         JFileChooser chooser =
-                new JFileChooser(extension.getModel().getOptionsParam().getUserDirectory());
+                new WritableFileChooser(extension.getModel().getOptionsParam().getUserDirectory());
         chooser.setFileFilter(
                 new FileNameExtensionFilter(
                         Constant.messages.getString("file.format.ascii"), "txt"));
@@ -181,7 +183,6 @@ private File getOutputFile() {
             if (file == null) {
                 return file;
             }
-            extension.getModel().getOptionsParam().setUserDirectory(chooser.getCurrentDirectory());
             String fileName = file.getAbsolutePath();
             if (!fileName.toLowerCase(Locale.ROOT).endsWith(".txt")) {
                 fileName += ".txt";

File: zap/src/main/java/org/parosproxy/paros/extension/history/PopupMenuExportResponse.java
Patch:
@@ -28,6 +28,7 @@
 // ZAP: 2018/08/15 Added null check
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/11/05 Use WritableFileChooser for saves.
 package org.parosproxy.paros.extension.history;
 
 import java.io.BufferedOutputStream;
@@ -41,6 +42,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.zap.view.widgets.WritableFileChooser;
 
 public class PopupMenuExportResponse extends JMenuItem {
 
@@ -144,7 +146,7 @@ private File getOutputFile() {
         String filename = "untitled.txt";
 
         JFileChooser chooser =
-                new JFileChooser(extension.getModel().getOptionsParam().getUserDirectory());
+                new WritableFileChooser(extension.getModel().getOptionsParam().getUserDirectory());
         if (filename.length() > 0) {
             chooser.setSelectedFile(new File(filename));
         }
@@ -157,8 +159,6 @@ private File getOutputFile() {
                 return file;
             }
 
-            extension.getModel().getOptionsParam().setUserDirectory(chooser.getCurrentDirectory());
-
             return file;
         }
         return file;

File: zap/src/main/java/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -37,7 +37,6 @@
 // ZAP: 2017/02/20 Issue 2699: Make SSLException handling more user friendly
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
-// ZAP: 2019/10/04 Add dialog icon.
 package org.parosproxy.paros.extension.manualrequest;
 
 import java.awt.BorderLayout;
@@ -98,7 +97,6 @@ public ManualRequestEditorDialog(boolean isSendEnabled, String configurationKey)
     }
 
     protected void initialize() {
-        this.setIconImage(ExtensionManualRequestEditor.getIcon().getImage());
         addWindowListener(
                 new WindowAdapter() {
                     @Override

File: zap/src/main/java/org/zaproxy/zap/DaemonBootstrap.java
Patch:
@@ -109,6 +109,8 @@ public void run() {
                                     System.out.println(message);
                                 }
 
+                                HeadlessBootstrap.checkForUpdates();
+
                                 // This is the only non-daemon thread, so should keep running
                                 // CoreAPI.handleApiAction uses System.exit to shutdown
                                 while (true) {

File: zap/src/main/java/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -327,8 +327,7 @@ public HttpMessage handleApiRequest(
             }
         }
 
-        if (shortcutImpl == null
-                && callbackImpl == null
+        if (callbackImpl == null
                 && !url.startsWith(API_URL)
                 && !url.startsWith(API_URL_S)
                 && !force) {

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/PolicyManagerDialog.java
Patch:
@@ -42,6 +42,7 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.SingleColumnTableModel;
 import org.zaproxy.zap.view.StandardFieldsDialog;
+import org.zaproxy.zap.view.widgets.WritableFileChooser;
 
 public class PolicyManagerDialog extends StandardFieldsDialog {
 
@@ -222,7 +223,8 @@ public void actionPerformed(ActionEvent e) {
                                                     .getValueAt(
                                                             getParamsTable().getSelectedRow(), 0);
                             if (name != null) {
-                                JFileChooser chooser = new JFileChooser(Constant.getPoliciesDir());
+                                JFileChooser chooser =
+                                        new WritableFileChooser(Constant.getPoliciesDir());
                                 File file =
                                         new File(
                                                 Constant.getZapHome(),

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/filters/FilterResult.java
Patch:
@@ -25,7 +25,7 @@
  * <p>Used to indicate if a resource was filtered and why.
  *
  * @author KSASAN preetkaran20@gmail.com
- * @since 2.8.0
+ * @since TODO add version
  */
 public final class FilterResult {
 

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/filters/ScanFilter.java
Patch:
@@ -22,8 +22,9 @@
 import org.zaproxy.zap.model.StructuralNode;
 
 /**
- * ScanFilter is called by the {@code HostProcess#canScanNode} to check if a given node is filtered
- * or not. New Filters can be added by implementing this interface.
+ * ScanFilter is called for each message to be scanned to check if it's filtered or not. New Filters
+ * are added to the scan through {@link ExtensionActiveScan#startScan(String, Target, User,
+ * Object[]) }.
  *
  * @author KSASAN preetkaran20@gmail.com
  * @since 2.9.0

File: zap/src/main/java/org/zaproxy/zap/extension/compare/ExtensionCompare.java
Patch:
@@ -54,6 +54,7 @@
 import org.parosproxy.paros.model.SessionListener;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.zaproxy.zap.utils.DesktopUtils;
+import org.zaproxy.zap.view.widgets.WritableFileChooser;
 
 public class ExtensionCompare extends ExtensionAdaptor
         implements SessionChangedListener, SessionListener {
@@ -343,7 +344,8 @@ public String getDescription() {
 
     private File getOutputFile() {
 
-        JFileChooser chooser = new JFileChooser(getModel().getOptionsParam().getUserDirectory());
+        JFileChooser chooser =
+                new WritableFileChooser(getModel().getOptionsParam().getUserDirectory());
         chooser.setFileFilter(
                 new FileNameExtensionFilter(
                         Constant.messages.getString("file.format.html"), "htm", "html"));
@@ -355,7 +357,6 @@ private File getOutputFile() {
             if (file == null) {
                 return file;
             }
-            getModel().getOptionsParam().setUserDirectory(chooser.getCurrentDirectory());
             String fileNameLc = file.getAbsolutePath().toLowerCase();
             if (!fileNameLc.endsWith(".htm") && !fileNameLc.endsWith(".html")) {
                 file = new File(file.getAbsolutePath() + ".html");

File: zap/src/main/java/org/zaproxy/zap/extension/dynssl/DynamicSSLPanel.java
Patch:
@@ -58,6 +58,7 @@
 import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.utils.ZapTextArea;
 import org.zaproxy.zap.utils.ZapXmlConfiguration;
+import org.zaproxy.zap.view.widgets.WritableFileChooser;
 
 public class DynamicSSLPanel extends AbstractParamPanel {
 
@@ -488,7 +489,7 @@ private void doSave() {
             logger.error("Illegal state! There seems to be no certificate available.");
             bt_save.setEnabled(false);
         }
-        final JFileChooser fc = new JFileChooser(System.getProperty("user.home"));
+        final JFileChooser fc = new WritableFileChooser(new File(System.getProperty("user.home")));
         fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
         fc.setMultiSelectionEnabled(false);
         fc.setSelectedFile(new File(OWASP_ZAP_ROOT_CA_FILENAME));

File: zap/src/test/java/org/zaproxy/zap/extension/api/VerifyApiImplementors.java
Patch:
@@ -55,6 +55,7 @@ public void shouldHaveDescriptionsForAllApis() {
         apis.sort((a, b) -> a.getPrefix().compareTo(b.getPrefix()));
         // Then
         for (ApiImplementor api : apis) {
+            checkKey(api.getDescriptionKey());
             checkApiElements(api, api.getApiActions(), API.RequestType.action);
             checkApiElements(api, api.getApiOthers(), API.RequestType.other);
             checkApiElements(api, api.getApiViews(), API.RequestType.view);

File: zap/src/main/java/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -327,8 +327,7 @@ public HttpMessage handleApiRequest(
             }
         }
 
-        if (shortcutImpl == null
-                && callbackImpl == null
+        if (callbackImpl == null
                 && !url.startsWith(API_URL)
                 && !url.startsWith(API_URL_S)
                 && !force) {

File: zap/src/test/java/ch/csnc/extension/util/DriverConfigurationUnitTest.java
Patch:
@@ -69,7 +69,7 @@ public void shouldWriteConfigurationToFile() throws Exception {
     }
 
     private static <T> Vector<T> vector(T value1, T value2, T value3) {
-        return new Vector<T>(Arrays.asList(value1, value2, value3));
+        return new Vector<>(Arrays.asList(value1, value2, value3));
     }
 
     private File getDriversXmlFile() throws URISyntaxException {

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantCookieUnitTest.java
Patch:
@@ -448,6 +448,7 @@ public void describeTo(Description description) {
                 description.appendText("cookie header ").appendValue(cookies);
             }
 
+            @Override
             public void describeMismatch(Object item, Description description) {
                 HttpMessage message = (HttpMessage) item;
                 Vector<String> cookieLines =
@@ -482,6 +483,7 @@ public void describeTo(Description description) {
                 description.appendText("no cookie header");
             }
 
+            @Override
             public void describeMismatch(Object item, Description description) {
                 HttpMessage message = (HttpMessage) item;
                 Vector<String> cookieLines =

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantHeaderUnitTest.java
Patch:
@@ -313,6 +313,7 @@ public void describeTo(Description description) {
                 description.appendText("header ").appendValue(name + ": " + value);
             }
 
+            @Override
             public void describeMismatch(Object item, Description description) {
                 HttpMessage message = (HttpMessage) item;
                 List<HttpHeaderField> headers = message.getRequestHeader().getHeaders();

File: zap/src/test/java/org/zaproxy/zap/control/AddOnCollectionUnitTest.java
Patch:
@@ -29,12 +29,10 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
 import org.zaproxy.zap.control.AddOnCollection.Platform;
 import org.zaproxy.zap.utils.ZapXmlConfiguration;
 
-@RunWith(MockitoJUnitRunner.class)
+/** Unit test for {@link AddOnCollection}. */
 public class AddOnCollectionUnitTest {
 
     private ZapXmlConfiguration configA;

File: zap/src/test/java/org/zaproxy/zap/control/ZapReleaseComparitorUnitTest.java
Patch:
@@ -23,10 +23,8 @@
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
 
-@RunWith(MockitoJUnitRunner.class)
+/** Unit test for {@link ZapReleaseComparitor}. */
 public class ZapReleaseComparitorUnitTest {
 
     private static final String DEV_BUILD = "Dev Build";

File: zap/src/test/java/org/zaproxy/zap/control/ZapReleaseUnitTest.java
Patch:
@@ -23,10 +23,8 @@
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
 
-@RunWith(MockitoJUnitRunner.class)
+/** Unit test for {@link ZapRelease}. */
 public class ZapReleaseUnitTest {
 
     private static final String DEV_BUILD = "Dev Build";

File: zap/src/test/java/org/zaproxy/zap/eventBus/SimpleEventBusUnitTest.java
Patch:
@@ -215,7 +215,7 @@ public void eventReceived(Event event) {
 
     private class TestEventConsumer implements EventConsumer {
 
-        private List<Event> events = new ArrayList<Event>();
+        private List<Event> events = new ArrayList<>();
 
         @Override
         public void eventReceived(Event event) {

File: zap/src/test/java/org/zaproxy/zap/extension/api/ApiResponseElementUnitTest.java
Patch:
@@ -105,9 +105,9 @@ public void shouldReturnCorrectJsonObjectWithMapJsonStringValues() throws ApiExc
         // Given
         String name = "name";
         String value = "{\"key\":\"value\"}";
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.put(name, value);
-        ApiResponseSet<String> apiRespSet = new ApiResponseSet<String>("test", map);
+        ApiResponseSet<String> apiRespSet = new ApiResponseSet<>("test", map);
         ApiResponseElement apiResponse = new ApiResponseElement(apiRespSet);
         // When
         String jsonResponse = apiResponse.toJSON().toString();

File: zap/src/test/java/org/zaproxy/zap/extension/api/ApiResponseListUnitTest.java
Patch:
@@ -25,13 +25,13 @@
 import java.util.List;
 import org.junit.Test;
 
-/** Unit test for {@link ApiResponseElement}. */
+/** Unit test for {@link ApiResponseList}. */
 public class ApiResponseListUnitTest {
 
     @Test
     public void shouldReturnCorrectJsonObjectWithStdStringValues() throws ApiException {
         // Given
-        List<ApiResponse> list = new ArrayList<ApiResponse>();
+        List<ApiResponse> list = new ArrayList<>();
         list.add(new ApiResponseElement("key1", "val1"));
         list.add(new ApiResponseElement("key2", "val2"));
         ApiResponseList apiRespSet = new ApiResponseList("test", list);
@@ -44,7 +44,7 @@ public void shouldReturnCorrectJsonObjectWithStdStringValues() throws ApiExcepti
     @Test
     public void shouldReturnCorrectJsonObjectWithJSONStringValues() throws ApiException {
         // Given
-        List<ApiResponse> list = new ArrayList<ApiResponse>();
+        List<ApiResponse> list = new ArrayList<>();
         list.add(new ApiResponseElement("key1", "{\"name1\":\"value1\"}"));
         list.add(new ApiResponseElement("key2", "{\"name2\":\"value2\"}"));
         ApiResponseList apiRespSet = new ApiResponseList("test", list);

File: zap/src/test/java/org/zaproxy/zap/network/HttpBodyTestUtils.java
Patch:
@@ -108,6 +108,7 @@ public void describeTo(Description description) {
                 description.appendText("all zero bytes");
             }
 
+            @Override
             public void describeMismatch(Object item, Description description) {
                 description.appendText("has at least one non-zero byte ").appendValue(item);
             }

File: zap/src/test/java/org/zaproxy/zap/spider/parser/SpiderHtmlFormParserUnitTest.java
Patch:
@@ -1704,9 +1704,9 @@ private static Pair<String, String> attribute(String name, String value) {
 
     private static List<String> list(String preDefValue) {
         if (preDefValue == null || preDefValue.isEmpty()) {
-            return new ArrayList<String>();
+            return new ArrayList<>();
         }
-        List<String> values = new ArrayList<String>();
+        List<String> values = new ArrayList<>();
         String[] value = preDefValue.split(",");
         for (String val : value) {
             values.add(val);

File: zap/src/main/java/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2017/02/20 Issue 2699: Make SSLException handling more user friendly
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/10/04 Add dialog icon.
 package org.parosproxy.paros.extension.manualrequest;
 
 import java.awt.BorderLayout;
@@ -97,6 +98,7 @@ public ManualRequestEditorDialog(boolean isSendEnabled, String configurationKey)
     }
 
     protected void initialize() {
+        this.setIconImage(ExtensionManualRequestEditor.getIcon().getImage());
         addWindowListener(
                 new WindowAdapter() {
                     @Override

File: zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/ManualHttpRequestEditorDialog.java
Patch:
@@ -29,6 +29,7 @@
 // ZAP: 2018/07/17 Use ViewDelegate.getMenuShortcutKeyStroke.
 // ZAP: 2018/08/10 Use non-deprecated HttpRequestHeader constructor (Issue 4846).
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/10/04 Add menu icon.
 package org.parosproxy.paros.extension.manualrequest.http.impl;
 
 import java.awt.BorderLayout;
@@ -52,6 +53,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.OptionsChangedListener;
+import org.parosproxy.paros.extension.manualrequest.ExtensionManualRequestEditor;
 import org.parosproxy.paros.extension.manualrequest.ManualRequestEditorDialog;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.OptionsParam;
@@ -283,6 +285,7 @@ public ZapMenuItem getMenuItem() {
                     new ZapMenuItem(
                             "menu.tools.manReq",
                             View.getSingleton().getMenuShortcutKeyStroke(KeyEvent.VK_M, 0, false));
+            menuItem.setIcon(ExtensionManualRequestEditor.getIcon());
             menuItem.addActionListener(
                     new ActionListener() {
                         @Override

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/ExtensionStdMenus.java
Patch:
@@ -39,6 +39,7 @@
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.extension.ExtensionLoader;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
+import org.parosproxy.paros.extension.manualrequest.ExtensionManualRequestEditor;
 import org.parosproxy.paros.model.Model;
 import org.zaproxy.zap.extension.ascan.ExtensionActiveScan;
 import org.zaproxy.zap.extension.history.PopupMenuExportContextURLs;
@@ -402,6 +403,7 @@ private PopupMenuResendMessage getPopupMenuResendMessage(int menuIndex) {
                                     .getExtensionLoader()
                                     .getExtension(ExtensionHistory.class));
             popupMenuResendMessage.setMenuIndex(menuIndex);
+            popupMenuResendMessage.setIcon(ExtensionManualRequestEditor.getIcon());
         }
         return popupMenuResendMessage;
     }

File: zap/src/main/java/org/zaproxy/zap/extension/log4j/ExtensionLog4j.java
Patch:
@@ -30,6 +30,7 @@
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.extension.SessionChangedListener;
 import org.parosproxy.paros.model.Session;
+import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.ScanStatus;
 import org.zaproxy.zap.view.ZapMenuItem;
 
@@ -51,7 +52,7 @@ public ExtensionLog4j() {
         super(NAME);
         this.setOrder(56);
 
-        if (Constant.isDevMode() && hasView()) {
+        if (Constant.isDevMode() && View.isInitialised()) {
             // Only enable if this is a developer build, ie build from source, or explicitly enabled
 
             scanStatus =
@@ -63,7 +64,7 @@ public ExtensionLog4j() {
 
             Logger.getRootLogger().addAppender(new ZapOutputWriter(scanStatus));
 
-            getView()
+            View.getSingleton()
                     .getMainFrame()
                     .getMainFooterPanel()
                     .addFooterToolbarRightLabel(scanStatus.getCountLabel());

File: zap/src/main/java/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -80,6 +80,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/08/19 Reinstate proxy auth credentials when HTTP state is changed.
+// ZAP: 2019/09/17 Use remove() instead of set(null) on IN_LISTENER.
 package org.parosproxy.paros.network;
 
 import java.io.IOException;
@@ -506,7 +507,7 @@ private void notifyRequestListeners(HttpMessage msg) {
                 }
             }
         } finally {
-            IN_LISTENER.set(null);
+            IN_LISTENER.remove();
         }
     }
 
@@ -525,7 +526,7 @@ private void notifyResponseListeners(HttpMessage msg) {
                 }
             }
         } finally {
-            IN_LISTENER.set(null);
+            IN_LISTENER.remove();
         }
     }
 

File: zap/src/main/java/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -111,6 +111,7 @@
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.extension.ExtensionHookView;
+import org.parosproxy.paros.extension.OptionsChangedListener;
 import org.parosproxy.paros.extension.SessionChangedListener;
 import org.parosproxy.paros.extension.manualrequest.ManualRequestEditorDialog;
 import org.parosproxy.paros.extension.manualrequest.http.impl.ManualHttpRequestEditorDialog;
@@ -260,6 +261,7 @@ public void hook(ExtensionHook extensionHook) {
         if (hasView()) {
             ExtensionHookView pv = extensionHook.getHookView();
             pv.addStatusPanel(getLogPanel());
+            extensionHook.addOptionsChangedListener((OptionsChangedListener) getResendDialog());
 
             extensionHook.getHookMenu().addPopupMenuItem(getPopupMenuTag());
             // ZAP: Added history notes

File: zap/src/test/java/ch/csnc/extension/util/DriverConfigurationUnitTest.java
Patch:
@@ -69,7 +69,7 @@ public void shouldWriteConfigurationToFile() throws Exception {
     }
 
     private static <T> Vector<T> vector(T value1, T value2, T value3) {
-        return new Vector<T>(Arrays.asList(value1, value2, value3));
+        return new Vector<>(Arrays.asList(value1, value2, value3));
     }
 
     private File getDriversXmlFile() throws URISyntaxException {

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantCookieUnitTest.java
Patch:
@@ -448,6 +448,7 @@ public void describeTo(Description description) {
                 description.appendText("cookie header ").appendValue(cookies);
             }
 
+            @Override
             public void describeMismatch(Object item, Description description) {
                 HttpMessage message = (HttpMessage) item;
                 Vector<String> cookieLines =
@@ -482,6 +483,7 @@ public void describeTo(Description description) {
                 description.appendText("no cookie header");
             }
 
+            @Override
             public void describeMismatch(Object item, Description description) {
                 HttpMessage message = (HttpMessage) item;
                 Vector<String> cookieLines =

File: zap/src/test/java/org/parosproxy/paros/core/scanner/VariantHeaderUnitTest.java
Patch:
@@ -313,6 +313,7 @@ public void describeTo(Description description) {
                 description.appendText("header ").appendValue(name + ": " + value);
             }
 
+            @Override
             public void describeMismatch(Object item, Description description) {
                 HttpMessage message = (HttpMessage) item;
                 List<HttpHeaderField> headers = message.getRequestHeader().getHeaders();

File: zap/src/test/java/org/zaproxy/zap/control/AddOnCollectionUnitTest.java
Patch:
@@ -29,12 +29,10 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
 import org.zaproxy.zap.control.AddOnCollection.Platform;
 import org.zaproxy.zap.utils.ZapXmlConfiguration;
 
-@RunWith(MockitoJUnitRunner.class)
+/** Unit test for {@link AddOnCollection}. */
 public class AddOnCollectionUnitTest {
 
     private ZapXmlConfiguration configA;

File: zap/src/test/java/org/zaproxy/zap/control/ZapReleaseComparitorUnitTest.java
Patch:
@@ -23,10 +23,8 @@
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
 
-@RunWith(MockitoJUnitRunner.class)
+/** Unit test for {@link ZapReleaseComparitor}. */
 public class ZapReleaseComparitorUnitTest {
 
     private static final String DEV_BUILD = "Dev Build";

File: zap/src/test/java/org/zaproxy/zap/control/ZapReleaseUnitTest.java
Patch:
@@ -23,10 +23,8 @@
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
 
-@RunWith(MockitoJUnitRunner.class)
+/** Unit test for {@link ZapRelease}. */
 public class ZapReleaseUnitTest {
 
     private static final String DEV_BUILD = "Dev Build";

File: zap/src/test/java/org/zaproxy/zap/eventBus/SimpleEventBusUnitTest.java
Patch:
@@ -215,7 +215,7 @@ public void eventReceived(Event event) {
 
     private class TestEventConsumer implements EventConsumer {
 
-        private List<Event> events = new ArrayList<Event>();
+        private List<Event> events = new ArrayList<>();
 
         @Override
         public void eventReceived(Event event) {

File: zap/src/test/java/org/zaproxy/zap/extension/api/ApiResponseElementUnitTest.java
Patch:
@@ -105,9 +105,9 @@ public void shouldReturnCorrectJsonObjectWithMapJsonStringValues() throws ApiExc
         // Given
         String name = "name";
         String value = "{\"key\":\"value\"}";
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         map.put(name, value);
-        ApiResponseSet<String> apiRespSet = new ApiResponseSet<String>("test", map);
+        ApiResponseSet<String> apiRespSet = new ApiResponseSet<>("test", map);
         ApiResponseElement apiResponse = new ApiResponseElement(apiRespSet);
         // When
         String jsonResponse = apiResponse.toJSON().toString();

File: zap/src/test/java/org/zaproxy/zap/extension/api/ApiResponseListUnitTest.java
Patch:
@@ -25,13 +25,13 @@
 import java.util.List;
 import org.junit.Test;
 
-/** Unit test for {@link ApiResponseElement}. */
+/** Unit test for {@link ApiResponseList}. */
 public class ApiResponseListUnitTest {
 
     @Test
     public void shouldReturnCorrectJsonObjectWithStdStringValues() throws ApiException {
         // Given
-        List<ApiResponse> list = new ArrayList<ApiResponse>();
+        List<ApiResponse> list = new ArrayList<>();
         list.add(new ApiResponseElement("key1", "val1"));
         list.add(new ApiResponseElement("key2", "val2"));
         ApiResponseList apiRespSet = new ApiResponseList("test", list);
@@ -44,7 +44,7 @@ public void shouldReturnCorrectJsonObjectWithStdStringValues() throws ApiExcepti
     @Test
     public void shouldReturnCorrectJsonObjectWithJSONStringValues() throws ApiException {
         // Given
-        List<ApiResponse> list = new ArrayList<ApiResponse>();
+        List<ApiResponse> list = new ArrayList<>();
         list.add(new ApiResponseElement("key1", "{\"name1\":\"value1\"}"));
         list.add(new ApiResponseElement("key2", "{\"name2\":\"value2\"}"));
         ApiResponseList apiRespSet = new ApiResponseList("test", list);

File: zap/src/test/java/org/zaproxy/zap/network/HttpBodyTestUtils.java
Patch:
@@ -108,6 +108,7 @@ public void describeTo(Description description) {
                 description.appendText("all zero bytes");
             }
 
+            @Override
             public void describeMismatch(Object item, Description description) {
                 description.appendText("has at least one non-zero byte ").appendValue(item);
             }

File: zap/src/test/java/org/zaproxy/zap/spider/parser/SpiderHtmlFormParserUnitTest.java
Patch:
@@ -1704,9 +1704,9 @@ private static Pair<String, String> attribute(String name, String value) {
 
     private static List<String> list(String preDefValue) {
         if (preDefValue == null || preDefValue.isEmpty()) {
-            return new ArrayList<String>();
+            return new ArrayList<>();
         }
-        List<String> values = new ArrayList<String>();
+        List<String> values = new ArrayList<>();
         String[] value = preDefValue.split(",");
         for (String val : value) {
             values.add(val);

File: zap/src/main/java/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2017/02/20 Issue 2699: Make SSLException handling more user friendly
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/10/04 Add dialog icon.
 package org.parosproxy.paros.extension.manualrequest;
 
 import java.awt.BorderLayout;
@@ -97,6 +98,7 @@ public ManualRequestEditorDialog(boolean isSendEnabled, String configurationKey)
     }
 
     protected void initialize() {
+        this.setIconImage(ExtensionManualRequestEditor.getIcon().getImage());
         addWindowListener(
                 new WindowAdapter() {
                     @Override

File: zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/ManualHttpRequestEditorDialog.java
Patch:
@@ -29,6 +29,7 @@
 // ZAP: 2018/07/17 Use ViewDelegate.getMenuShortcutKeyStroke.
 // ZAP: 2018/08/10 Use non-deprecated HttpRequestHeader constructor (Issue 4846).
 // ZAP: 2019/06/05 Normalise format/style.
+// ZAP: 2019/10/04 Add menu icon.
 package org.parosproxy.paros.extension.manualrequest.http.impl;
 
 import java.awt.BorderLayout;
@@ -52,6 +53,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.OptionsChangedListener;
+import org.parosproxy.paros.extension.manualrequest.ExtensionManualRequestEditor;
 import org.parosproxy.paros.extension.manualrequest.ManualRequestEditorDialog;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.OptionsParam;
@@ -283,6 +285,7 @@ public ZapMenuItem getMenuItem() {
                     new ZapMenuItem(
                             "menu.tools.manReq",
                             View.getSingleton().getMenuShortcutKeyStroke(KeyEvent.VK_M, 0, false));
+            menuItem.setIcon(ExtensionManualRequestEditor.getIcon());
             menuItem.addActionListener(
                     new ActionListener() {
                         @Override

File: zap/src/main/java/org/zaproxy/zap/extension/stdmenus/ExtensionStdMenus.java
Patch:
@@ -39,6 +39,7 @@
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.extension.ExtensionLoader;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
+import org.parosproxy.paros.extension.manualrequest.ExtensionManualRequestEditor;
 import org.parosproxy.paros.model.Model;
 import org.zaproxy.zap.extension.ascan.ExtensionActiveScan;
 import org.zaproxy.zap.extension.history.PopupMenuExportContextURLs;
@@ -402,6 +403,7 @@ private PopupMenuResendMessage getPopupMenuResendMessage(int menuIndex) {
                                     .getExtensionLoader()
                                     .getExtension(ExtensionHistory.class));
             popupMenuResendMessage.setMenuIndex(menuIndex);
+            popupMenuResendMessage.setIcon(ExtensionManualRequestEditor.getIcon());
         }
         return popupMenuResendMessage;
     }

File: zap/src/main/java/org/zaproxy/zap/extension/log4j/ExtensionLog4j.java
Patch:
@@ -30,6 +30,7 @@
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.extension.SessionChangedListener;
 import org.parosproxy.paros.model.Session;
+import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.ScanStatus;
 import org.zaproxy.zap.view.ZapMenuItem;
 
@@ -51,7 +52,7 @@ public ExtensionLog4j() {
         super(NAME);
         this.setOrder(56);
 
-        if (Constant.isDevMode() && hasView()) {
+        if (Constant.isDevMode() && View.isInitialised()) {
             // Only enable if this is a developer build, ie build from source, or explicitly enabled
 
             scanStatus =
@@ -63,7 +64,7 @@ public ExtensionLog4j() {
 
             Logger.getRootLogger().addAppender(new ZapOutputWriter(scanStatus));
 
-            getView()
+            View.getSingleton()
                     .getMainFrame()
                     .getMainFooterPanel()
                     .addFooterToolbarRightLabel(scanStatus.getCountLabel());

File: zap/src/main/java/org/zaproxy/zap/extension/log4j/ExtensionLog4j.java
Patch:
@@ -30,6 +30,7 @@
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.extension.SessionChangedListener;
 import org.parosproxy.paros.model.Session;
+import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.ScanStatus;
 import org.zaproxy.zap.view.ZapMenuItem;
 
@@ -51,7 +52,7 @@ public ExtensionLog4j() {
         super(NAME);
         this.setOrder(56);
 
-        if (Constant.isDevMode() && hasView()) {
+        if (Constant.isDevMode() && View.isInitialised()) {
             // Only enable if this is a developer build, ie build from source, or explicitly enabled
 
             scanStatus =
@@ -63,7 +64,7 @@ public ExtensionLog4j() {
 
             Logger.getRootLogger().addAppender(new ZapOutputWriter(scanStatus));
 
-            getView()
+            View.getSingleton()
                     .getMainFrame()
                     .getMainFooterPanel()
                     .addFooterToolbarRightLabel(scanStatus.getCountLabel());

File: zap/src/main/java/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -80,6 +80,7 @@
 // ZAP: 2019/06/01 Normalise line endings.
 // ZAP: 2019/06/05 Normalise format/style.
 // ZAP: 2019/08/19 Reinstate proxy auth credentials when HTTP state is changed.
+// ZAP: 2019/09/17 Use remove() instead of set(null) on IN_LISTENER.
 package org.parosproxy.paros.network;
 
 import java.io.IOException;
@@ -506,7 +507,7 @@ private void notifyRequestListeners(HttpMessage msg) {
                 }
             }
         } finally {
-            IN_LISTENER.set(null);
+            IN_LISTENER.remove();
         }
     }
 
@@ -525,7 +526,7 @@ private void notifyResponseListeners(HttpMessage msg) {
                 }
             }
         } finally {
-            IN_LISTENER.set(null);
+            IN_LISTENER.remove();
         }
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/ProxiesParam.java
Patch:
@@ -66,9 +66,9 @@ protected void parse() {
                                 sub.getInt(PROXY_PORT_KEY),
                                 sub.getBoolean(PROXY_ENABLED_KEY, true),
                                 sub.getBoolean(PROXY_ANY_LOCAL_KEY),
-                                sub.getBoolean(PROXY_REM_UNSUPPORTED),
-                                sub.getBoolean(PROXY_DECODE_KEY),
-                                sub.getBoolean(PROXY_BEHIND_NAT_KEY)));
+                                sub.getBoolean(PROXY_REM_UNSUPPORTED, true),
+                                sub.getBoolean(PROXY_DECODE_KEY, true),
+                                sub.getBoolean(PROXY_BEHIND_NAT_KEY, false)));
             }
         } catch (ConversionException e) {
             logger.error("Error while loading proxies: " + e.getMessage(), e);

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanner.java
Patch:
@@ -25,9 +25,9 @@
 
 public interface PassiveScanner {
 
-    void scanHttpRequestSend(HttpMessage msg, int id);
+    default void scanHttpRequestSend(HttpMessage msg, int id) {};
 
-    void scanHttpResponseReceive(HttpMessage msg, int id, Source source);
+    default void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {};
 
     void setParent(PassiveScanThread parent);
 

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanner.java
Patch:
@@ -25,9 +25,9 @@
 
 public interface PassiveScanner {
 
-    void scanHttpRequestSend(HttpMessage msg, int id);
+    default void scanHttpRequestSend(HttpMessage msg, int id) {};
 
-    void scanHttpResponseReceive(HttpMessage msg, int id, Source source);
+    default void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {};
 
     void setParent(PassiveScanThread parent);
 

File: zap/src/main/java/org/zaproxy/zap/extension/proxies/ProxiesParam.java
Patch:
@@ -66,9 +66,9 @@ protected void parse() {
                                 sub.getInt(PROXY_PORT_KEY),
                                 sub.getBoolean(PROXY_ENABLED_KEY, true),
                                 sub.getBoolean(PROXY_ANY_LOCAL_KEY),
-                                sub.getBoolean(PROXY_REM_UNSUPPORTED),
-                                sub.getBoolean(PROXY_DECODE_KEY),
-                                sub.getBoolean(PROXY_BEHIND_NAT_KEY)));
+                                sub.getBoolean(PROXY_REM_UNSUPPORTED, true),
+                                sub.getBoolean(PROXY_DECODE_KEY, true),
+                                sub.getBoolean(PROXY_BEHIND_NAT_KEY, false)));
             }
         } catch (ConversionException e) {
             logger.error("Error while loading proxies: " + e.getMessage(), e);

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -1194,7 +1194,7 @@ public void gotLatestData(AddOnCollection aoc) {
         logger.debug("gotLatestData(AddOnCollection " + aoc);
 
         if (aoc != null) {
-            setLatestVersionInfo(aoc);
+            EventQueue.invokeLater(() -> setLatestVersionInfo(aoc));
         } else {
             View.getSingleton()
                     .showWarningDialog(this, Constant.messages.getString("cfu.check.failed"));

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -1194,7 +1194,7 @@ public void gotLatestData(AddOnCollection aoc) {
         logger.debug("gotLatestData(AddOnCollection " + aoc);
 
         if (aoc != null) {
-            setLatestVersionInfo(aoc);
+            EventQueue.invokeLater(() -> setLatestVersionInfo(aoc));
         } else {
             View.getSingleton()
                     .showWarningDialog(this, Constant.messages.getString("cfu.check.failed"));

File: zap/src/main/java/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -1194,7 +1194,7 @@ public void gotLatestData(AddOnCollection aoc) {
         logger.debug("gotLatestData(AddOnCollection " + aoc);
 
         if (aoc != null) {
-            setLatestVersionInfo(aoc);
+            EventQueue.invokeLater(() -> setLatestVersionInfo(aoc));
         } else {
             View.getSingleton()
                     .showWarningDialog(this, Constant.messages.getString("cfu.check.failed"));

File: zap/src/test/java/org/parosproxy/paros/extension/report/ReportGeneratorUnitTest.java
Patch:
@@ -38,6 +38,8 @@
 /** Unit test for {@link ReportGenerator}. */
 public class ReportGeneratorUnitTest extends TestUtils {
 
+    private static final String NEWLINE = System.getProperty("line.separator");
+
     @ClassRule public static TemporaryFolder tempDir = new TemporaryFolder();
 
     @Test
@@ -53,7 +55,7 @@ public void shouldNotEntityEncodeHigherUnicodeChars() {
     @Test
     public void shouldWriteReportWithWellformedXml() throws Exception {
         // Given
-        String data = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><data>J/ψ → VP</data>\n";
+        String data = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><data>J/ψ → VP</data>" + NEWLINE;
         Path report = tempDir.newFile().toPath();
         // When
         ReportGenerator.stringToHtml(data, identityXsl(), report.toString());

File: zap/src/test/java/org/parosproxy/paros/extension/report/ReportGeneratorUnitTest.java
Patch:
@@ -38,6 +38,8 @@
 /** Unit test for {@link ReportGenerator}. */
 public class ReportGeneratorUnitTest extends TestUtils {
 
+    private static final String NEWLINE = System.getProperty("line.separator");
+
     @ClassRule public static TemporaryFolder tempDir = new TemporaryFolder();
 
     @Test
@@ -53,7 +55,7 @@ public void shouldNotEntityEncodeHigherUnicodeChars() {
     @Test
     public void shouldWriteReportWithWellformedXml() throws Exception {
         // Given
-        String data = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><data>J/ψ → VP</data>\n";
+        String data = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><data>J/ψ → VP</data>" + NEWLINE;
         Path report = tempDir.newFile().toPath();
         // When
         ReportGenerator.stringToHtml(data, identityXsl(), report.toString());

File: zap/src/main/java/org/zaproxy/zap/utils/ByteBuilder.java
Patch:
@@ -87,7 +87,7 @@ public byte[] toByteArray() {
 
     @Override
     public String toString() {
-        return new String(array);
+        return new String(array, 0, size);
     }
 
     // all append() methods return this so we can chain calls together, of course :)

File: zap/src/main/java/org/zaproxy/zap/utils/ByteBuilder.java
Patch:
@@ -87,7 +87,7 @@ public byte[] toByteArray() {
 
     @Override
     public String toString() {
-        return new String(array);
+        return new String(array, 0, size);
     }
 
     // all append() methods return this so we can chain calls together, of course :)

File: zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java
Patch:
@@ -404,7 +404,9 @@ private void replaceAntiCsrfTokenValueIfRequired(
                 for (AntiCsrfToken antiCsrfToken : freshAcsrfTokens) {
                     oldAcsrfTokenValue = parameters.get(antiCsrfToken.getName());
                     replacedPostData =
-                            postRequestBody.replace(oldAcsrfTokenValue, antiCsrfToken.getValue());
+                            postRequestBody.replace(
+                                    oldAcsrfTokenValue,
+                                    paramEncoder.apply(antiCsrfToken.getValue()));
 
                     if (LOGGER.isDebugEnabled()) {
                         LOGGER.debug(

File: zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java
Patch:
@@ -404,7 +404,9 @@ private void replaceAntiCsrfTokenValueIfRequired(
                 for (AntiCsrfToken antiCsrfToken : freshAcsrfTokens) {
                     oldAcsrfTokenValue = parameters.get(antiCsrfToken.getName());
                     replacedPostData =
-                            postRequestBody.replace(oldAcsrfTokenValue, antiCsrfToken.getValue());
+                            postRequestBody.replace(
+                                    oldAcsrfTokenValue,
+                                    paramEncoder.apply(antiCsrfToken.getValue()));
 
                     if (LOGGER.isDebugEnabled()) {
                         LOGGER.debug(

File: zap/src/main/java/org/zaproxy/zap/extension/brk/impl/http/HttpBreakpointMessage.java
Patch:
@@ -136,8 +136,9 @@ public boolean match(Message aMessage, boolean isRequest, boolean onlyIfInScope)
                     }
                 }
 
-                String src = null;
+                String src;
                 switch (location) {
+                    default:
                     case url:
                         src = uri;
                         break;

File: zap/src/main/java/org/zaproxy/zap/view/StatusUI.java
Patch:
@@ -45,7 +45,7 @@ public StatusUI(AddOn.Status status, String stringRepresentation) {
         }
 
         if (stringRepresentation == null || stringRepresentation.isEmpty()) {
-            this.stringRepresentation = status.toString();
+            this.stringRepresentation = this.status.toString();
         } else {
             this.stringRepresentation = stringRepresentation;
         }

File: zap/src/main/java/org/zaproxy/zap/extension/brk/impl/http/HttpBreakpointMessage.java
Patch:
@@ -136,8 +136,9 @@ public boolean match(Message aMessage, boolean isRequest, boolean onlyIfInScope)
                     }
                 }
 
-                String src = null;
+                String src;
                 switch (location) {
+                    default:
                     case url:
                         src = uri;
                         break;

File: zap/src/main/java/org/zaproxy/zap/view/StatusUI.java
Patch:
@@ -45,7 +45,7 @@ public StatusUI(AddOn.Status status, String stringRepresentation) {
         }
 
         if (stringRepresentation == null || stringRepresentation.isEmpty()) {
-            this.stringRepresentation = status.toString();
+            this.stringRepresentation = this.status.toString();
         } else {
             this.stringRepresentation = stringRepresentation;
         }

File: zap/src/test/java/org/zaproxy/zap/WithConfigsTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.parosproxy.paros.model.Model;
 import org.zaproxy.zap.testutils.TestUtils;
 import org.zaproxy.zap.utils.I18N;
+import org.zaproxy.zap.utils.ZapXmlConfiguration;
 
 @RunWith(MockitoJUnitRunner.class)
 public abstract class WithConfigsTest extends TestUtils {
@@ -80,5 +81,6 @@ public void setUpZap() throws Exception {
         given(i18n.getLocal()).willReturn(Locale.getDefault());
         Constant.messages = i18n;
         Control.initSingletonForTesting(Model.getSingleton());
+        Model.getSingleton().getOptionsParam().load(new ZapXmlConfiguration());
     }
 }

File: zap/src/test/java/org/zaproxy/zap/WithConfigsTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.parosproxy.paros.model.Model;
 import org.zaproxy.zap.testutils.TestUtils;
 import org.zaproxy.zap.utils.I18N;
+import org.zaproxy.zap.utils.ZapXmlConfiguration;
 
 @RunWith(MockitoJUnitRunner.class)
 public abstract class WithConfigsTest extends TestUtils {
@@ -80,5 +81,6 @@ public void setUpZap() throws Exception {
         given(i18n.getLocal()).willReturn(Locale.getDefault());
         Constant.messages = i18n;
         Control.initSingletonForTesting(Model.getSingleton());
+        Model.getSingleton().getOptionsParam().load(new ZapXmlConfiguration());
     }
 }

File: zap/src/main/java/org/parosproxy/paros/network/HttpInputStream.java
Patch:
@@ -219,7 +219,7 @@ public void setSocket(Socket socket) {
     }
 
     @Override
-    public int available() throws IOException {
+    public synchronized int available() throws IOException {
         int avail = 0;
         //		int oneByte = -1;
         int timeout = 0;

File: zap/src/main/java/org/parosproxy/paros/network/HttpOutputStream.java
Patch:
@@ -65,7 +65,7 @@ public void write(byte[] buf, int len) throws IOException {
     }
 
     @Override
-    public void write(byte[] buf, int off, int len) throws IOException {
+    public synchronized void write(byte[] buf, int off, int len) throws IOException {
         if (buf == null) return;
         // out.write(buf, off, len);
         super.write(buf, off, len);

File: zap/src/main/java/org/zaproxy/zap/extension/ascan/ScanProgressDialog.java
Patch:
@@ -173,7 +173,7 @@ private void initialize() {
             this.series500 =
                     new TimeSeries(Constant.messages.getString("ascan.progress.chart.5xx"));
 
-            long maxAge = mins * 60;
+            long maxAge = mins * 60L;
             this.seriesTotal.setMaximumItemAge(maxAge);
             this.series100.setMaximumItemAge(maxAge);
             this.series200.setMaximumItemAge(maxAge);

File: zap/src/main/java/org/zaproxy/zap/extension/history/PopupMenuExportURLs.java
Patch:
@@ -134,7 +134,9 @@ protected void writeURLs(File file, SortedSet<String> aSet) {
                                     + file.getAbsolutePath());
         } finally {
             try {
-                fw.close();
+                if (fw != null) {
+                    fw.close();
+                }
             } catch (Exception e2) {
                 log.warn(e2.getStackTrace(), e2);
             }

File: zap/src/main/java/org/zaproxy/zap/extension/spider/SpiderPanelTableModel.java
Patch:
@@ -212,7 +212,7 @@ public int hashCode() {
         @Override
         public boolean equals(Object obj) {
             if (this == obj) return true;
-            if (obj == null) return false;
+            if (!(obj instanceof SpiderScanResult)) return false;
             // Removed some irrelevant checks, to speed up the method.
             SpiderScanResult other = (SpiderScanResult) obj;
             if (method == null) {

File: zap/src/main/java/org/zaproxy/zap/model/Tech.java
Patch:
@@ -139,10 +139,9 @@ public String toString() {
 
     @Override
     public boolean equals(Object tech) {
-        if (tech == null) {
+        if (!(tech instanceof Tech)) {
             return false;
         }
-
         return this.toString().equals(tech.toString());
     }
 

File: zap/src/main/java/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -27,7 +27,7 @@
 import org.zaproxy.zap.utils.Stats;
 
 import net.htmlparser.jericho.MasonTagTypes;
-import net.htmlparser.jericho.MicrosoftTagTypes;
+import net.htmlparser.jericho.MicrosoftConditionalCommentTagTypes;
 import net.htmlparser.jericho.PHPTagTypes;
 import net.htmlparser.jericho.Source;
 
@@ -97,7 +97,7 @@ public PassiveScanThread (PassiveScannerList passiveScannerList, ExtensionHistor
 		
 		this.scannerList = passiveScannerList;
 		
-		MicrosoftTagTypes.register();
+		MicrosoftConditionalCommentTagTypes.register();
 		PHPTagTypes.register();
 		PHPTagTypes.PHP_SHORT.deregister(); // remove PHP short tags otherwise they override processing instructions
 		MasonTagTypes.register();

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -46,6 +46,7 @@
 // ZAP: 2017/09/26 Use helper methods to read the configurations.
 // ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 // ZAP: 2018/09/12 Make the addition of a query parameter optional.
+// ZAP: 2019/05/10 Enable custom (script) input vectors by default.
 
 package org.parosproxy.paros.core.scanner;
 
@@ -129,7 +130,7 @@ public class ScannerParam extends AbstractParam {
 
     // Defaults for initial configuration
     public static final int TARGET_INJECTABLE_DEFAULT = TARGET_QUERYSTRING | TARGET_POSTDATA;
-    public static final int TARGET_ENABLED_RPC_DEFAULT = RPC_MULTIPART | RPC_XML | RPC_JSON | RPC_GWT | RPC_ODATA | RPC_DWR;
+    public static final int TARGET_ENABLED_RPC_DEFAULT = RPC_MULTIPART | RPC_XML | RPC_JSON | RPC_GWT | RPC_ODATA | RPC_DWR | RPC_CUSTOM;
     private static final int DEFAULT_MAX_CHART_TIME_IN_MINS = 10;
 
     // Internal variables

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -46,6 +46,7 @@
 // ZAP: 2017/09/26 Use helper methods to read the configurations.
 // ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 // ZAP: 2018/09/12 Make the addition of a query parameter optional.
+// ZAP: 2019/05/10 Enable custom (script) input vectors by default.
 
 package org.parosproxy.paros.core.scanner;
 
@@ -129,7 +130,7 @@ public class ScannerParam extends AbstractParam {
 
     // Defaults for initial configuration
     public static final int TARGET_INJECTABLE_DEFAULT = TARGET_QUERYSTRING | TARGET_POSTDATA;
-    public static final int TARGET_ENABLED_RPC_DEFAULT = RPC_MULTIPART | RPC_XML | RPC_JSON | RPC_GWT | RPC_ODATA | RPC_DWR;
+    public static final int TARGET_ENABLED_RPC_DEFAULT = RPC_MULTIPART | RPC_XML | RPC_JSON | RPC_GWT | RPC_ODATA | RPC_DWR | RPC_CUSTOM;
     private static final int DEFAULT_MAX_CHART_TIME_IN_MINS = 10;
 
     // Internal variables

File: src/org/zaproxy/zap/extension/search/SearchListenner.java
Patch:
@@ -20,6 +20,9 @@
 public interface SearchListenner {
 
 	void addSearchResult(SearchResult str);
+	
+	default void searchStarted() {
+	}
 
 	void searchComplete();
 }

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -96,6 +96,7 @@ public void stopSearch() {
 	@Override
 	public void run() {
 		try {
+			this.searchListenner.searchStarted();
 			search();
 		} finally {
 			this.searchListenner.searchComplete();

File: src/org/zaproxy/zap/extension/search/SearchListenner.java
Patch:
@@ -20,6 +20,9 @@
 public interface SearchListenner {
 
 	void addSearchResult(SearchResult str);
+	
+	default void searchStarted() {
+	}
 
 	void searchComplete();
 }

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -96,6 +96,7 @@ public void stopSearch() {
 	@Override
 	public void run() {
 		try {
+			this.searchListenner.searchStarted();
 			search();
 		} finally {
 			this.searchListenner.searchComplete();

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -753,11 +753,11 @@ private int scanURL(String url, User user, boolean scanChildren, boolean scanJus
 			try {
 				startURI = new URI(url, true);
 			} catch (URIException e) {
-				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL);
+				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL, e);
 			}
 			String scheme = startURI.getScheme();
 			if (scheme == null || (!scheme.equalsIgnoreCase("http") && !scheme.equalsIgnoreCase("https"))) {
-				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL);
+				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL + " does not have a scheme.");
 			}
 
 			try {

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -753,11 +753,11 @@ private int scanURL(String url, User user, boolean scanChildren, boolean scanJus
 			try {
 				startURI = new URI(url, true);
 			} catch (URIException e) {
-				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL);
+				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL, e);
 			}
 			String scheme = startURI.getScheme();
 			if (scheme == null || (!scheme.equalsIgnoreCase("http") && !scheme.equalsIgnoreCase("https"))) {
-				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL);
+				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL + " does not have a scheme.");
 			}
 
 			try {

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -406,7 +406,7 @@ private void copyDefaultConfigFile() throws IOException {
     }
 
     private static void copyFileToHome(Path targetFile, String sourceFilePath, String fallbackResource) throws IOException {
-        Path defaultConfig = Paths.get(zapInstall, sourceFilePath);
+        Path defaultConfig = Paths.get(getZapInstall(), sourceFilePath);
         if (Files.exists(defaultConfig)) {
             Files.copy(defaultConfig, targetFile, StandardCopyOption.REPLACE_EXISTING);
         } else {

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -406,7 +406,7 @@ private void copyDefaultConfigFile() throws IOException {
     }
 
     private static void copyFileToHome(Path targetFile, String sourceFilePath, String fallbackResource) throws IOException {
-        Path defaultConfig = Paths.get(zapInstall, sourceFilePath);
+        Path defaultConfig = Paths.get(getZapInstall(), sourceFilePath);
         if (Files.exists(defaultConfig)) {
             Files.copy(defaultConfig, targetFile, StandardCopyOption.REPLACE_EXISTING);
         } else {

File: src/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -234,9 +234,6 @@ public void actionPerformed(ActionEvent e) {
 
         setTechSet(techTreeState);
 
-        // Policy panel
-        policyPanel.resetAndSetPolicy(scanPolicy.getName());
-
         this.setCustomTabPanel(4, policyPanel);
         
         // add custom panels
@@ -685,6 +682,7 @@ private void reset(boolean refreshUi) {
         techTreeState = null;
 
         if (refreshUi) {
+            policyPanel.resetAndSetPolicy(scanPolicyName);
             init(target);
             repaint();
         }

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -841,6 +841,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 				map.put("state", scan.getState().name());
 				map.put("reqCount", Integer.toString(scan.getTotalRequests()));
 				map.put("alertCount", Integer.toString(scan.getAlertsIds().size()));
+				map.put("newAlertCount", Integer.toString(scan.getTotalNewAlerts()));
 				resultList.addItem(new ApiResponseSet<String>("scan", map));
 			}
 			result = resultList;

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -841,6 +841,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 				map.put("state", scan.getState().name());
 				map.put("reqCount", Integer.toString(scan.getTotalRequests()));
 				map.put("alertCount", Integer.toString(scan.getAlertsIds().size()));
+				map.put("newAlertCount", Integer.toString(scan.getTotalNewAlerts()));
 				resultList.addItem(new ApiResponseSet<String>("scan", map));
 			}
 			result = resultList;

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -134,7 +134,7 @@ public class ScannerParam extends AbstractParam {
 
     // Internal variables
     private int hostPerScan = 2;
-    private int threadPerHost = 1;
+    private int threadPerHost = 2;
     private int delayInMs = 0;
     private int maxResultsToList = 1000;
     private int maxScansInUI = 5;
@@ -193,7 +193,7 @@ public ScannerParam() {
     protected void parse() {
         removeOldOptions();
 
-        this.threadPerHost = getInt(THREAD_PER_HOST, 1);
+        this.threadPerHost = getInt(THREAD_PER_HOST, 2);
 
         this.hostPerScan = getInt(HOST_PER_SCAN, 2);
 

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -104,7 +104,7 @@ public class OptionsParamView extends AbstractParam {
 	private int showMainToolbar = 1;
 	private String configLocale = "";
 	private String locale = "";
-	private int displayOption = 0;
+	private int displayOption = 1;
 	private String responsePanelPosition;
 	private int brkPanelViewOption = 0;
 	private int askOnExitEnabled = 1;
@@ -156,7 +156,7 @@ protected void parse() {
 	    configLocale = getString(LOCALE, null);	// No default
 	    locale = getString(LOCALE, DEFAULT_LOCALE);
 	    useSystemsLocaleForFormat = getBoolean(USE_SYSTEMS_LOCALE_FOR_FORMAT_KEY, true);
-	    displayOption = getInt(DISPLAY_OPTION, 0);
+	    displayOption = getInt(DISPLAY_OPTION, 1);
         responsePanelPosition = getString(RESPONSE_PANEL_POS_KEY, WorkbenchPanel.ResponsePanelPosition.TABS_SIDE_BY_SIDE.name());
 	    brkPanelViewOption = getInt(BRK_PANEL_VIEW_OPTION, 0);
 	    showMainToolbar = getInt(SHOW_MAIN_TOOLBAR_OPTION, 1);

File: src/org/zaproxy/zap/extension/autoupdate/OptionsParamCheckForUpdates.java
Patch:
@@ -52,9 +52,9 @@ public class OptionsParamCheckForUpdates extends AbstractParam {
 
 	private static String SDF_FORMAT = "yyyy-MM-dd";
 
-	private boolean checkOnStart;
+	private boolean checkOnStart = true;
 	private boolean downloadNewRelease = false;
-	private boolean checkAddonUpdates;
+	private boolean checkAddonUpdates = true;
 	private boolean installAddonUpdates = false;
 	private boolean installScannerRules = false;
 	private boolean reportReleaseAddons = false;

File: src/org/zaproxy/zap/spider/SpiderParam.java
Patch:
@@ -166,7 +166,7 @@ public String getName() {
 	 * Whether the forms are submitted, if their method is HTTP POST. This option should not be used if the
 	 * forms are not processed at all (processForm).
 	 */
-	private boolean postForm = false;
+	private boolean postForm = true;
 	/** The waiting time between new requests to server - safe from DDOS. */
 	private int requestWait = 200;
 	/** Which urls are skipped. */
@@ -253,10 +253,10 @@ protected void parse() {
 
 		this.showAdvancedDialog = getBoolean(SHOW_ADV_DIALOG, false);
 
-		this.processForm = getBoolean(SPIDER_PROCESS_FORM, false);
+		this.processForm = getBoolean(SPIDER_PROCESS_FORM, true);
 
 		try {
-			this.postForm = getConfig().getBoolean(SPIDER_POST_FORM, false);
+			this.postForm = getConfig().getBoolean(SPIDER_POST_FORM, true);
 		} catch (ConversionException e) {
 			// conversion issue from 1.4.1: convert the field from int to boolean
 			log.info("Warning while parsing config file: " + SPIDER_POST_FORM

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -134,7 +134,7 @@ public class ScannerParam extends AbstractParam {
 
     // Internal variables
     private int hostPerScan = 2;
-    private int threadPerHost = 1;
+    private int threadPerHost = 2;
     private int delayInMs = 0;
     private int maxResultsToList = 1000;
     private int maxScansInUI = 5;
@@ -193,7 +193,7 @@ public ScannerParam() {
     protected void parse() {
         removeOldOptions();
 
-        this.threadPerHost = getInt(THREAD_PER_HOST, 1);
+        this.threadPerHost = getInt(THREAD_PER_HOST, 2);
 
         this.hostPerScan = getInt(HOST_PER_SCAN, 2);
 

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -104,7 +104,7 @@ public class OptionsParamView extends AbstractParam {
 	private int showMainToolbar = 1;
 	private String configLocale = "";
 	private String locale = "";
-	private int displayOption = 0;
+	private int displayOption = 1;
 	private String responsePanelPosition;
 	private int brkPanelViewOption = 0;
 	private int askOnExitEnabled = 1;
@@ -156,7 +156,7 @@ protected void parse() {
 	    configLocale = getString(LOCALE, null);	// No default
 	    locale = getString(LOCALE, DEFAULT_LOCALE);
 	    useSystemsLocaleForFormat = getBoolean(USE_SYSTEMS_LOCALE_FOR_FORMAT_KEY, true);
-	    displayOption = getInt(DISPLAY_OPTION, 0);
+	    displayOption = getInt(DISPLAY_OPTION, 1);
         responsePanelPosition = getString(RESPONSE_PANEL_POS_KEY, WorkbenchPanel.ResponsePanelPosition.TABS_SIDE_BY_SIDE.name());
 	    brkPanelViewOption = getInt(BRK_PANEL_VIEW_OPTION, 0);
 	    showMainToolbar = getInt(SHOW_MAIN_TOOLBAR_OPTION, 1);

File: src/org/zaproxy/zap/extension/autoupdate/OptionsParamCheckForUpdates.java
Patch:
@@ -52,9 +52,9 @@ public class OptionsParamCheckForUpdates extends AbstractParam {
 
 	private static String SDF_FORMAT = "yyyy-MM-dd";
 
-	private boolean checkOnStart;
+	private boolean checkOnStart = true;
 	private boolean downloadNewRelease = false;
-	private boolean checkAddonUpdates;
+	private boolean checkAddonUpdates = true;
 	private boolean installAddonUpdates = false;
 	private boolean installScannerRules = false;
 	private boolean reportReleaseAddons = false;

File: src/org/zaproxy/zap/spider/SpiderParam.java
Patch:
@@ -166,7 +166,7 @@ public String getName() {
 	 * Whether the forms are submitted, if their method is HTTP POST. This option should not be used if the
 	 * forms are not processed at all (processForm).
 	 */
-	private boolean postForm = false;
+	private boolean postForm = true;
 	/** The waiting time between new requests to server - safe from DDOS. */
 	private int requestWait = 200;
 	/** Which urls are skipped. */
@@ -253,10 +253,10 @@ protected void parse() {
 
 		this.showAdvancedDialog = getBoolean(SHOW_ADV_DIALOG, false);
 
-		this.processForm = getBoolean(SPIDER_PROCESS_FORM, false);
+		this.processForm = getBoolean(SPIDER_PROCESS_FORM, true);
 
 		try {
-			this.postForm = getConfig().getBoolean(SPIDER_POST_FORM, false);
+			this.postForm = getConfig().getBoolean(SPIDER_POST_FORM, true);
 		} catch (ConversionException e) {
 			// conversion issue from 1.4.1: convert the field from int to boolean
 			log.info("Warning while parsing config file: " + SPIDER_POST_FORM

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -324,9 +324,11 @@ public HttpMessage handleApiRequest (HttpRequestHeader requestHeader, HttpInputS
 					}
 				}
 				msg = shortcutImpl.handleShortcut(msg);
+				impl = shortcutImpl;
 			} else if (callbackImpl != null) {
 				// Callbacks have suitably random URLs and therefore don't require keys/nonces
 				response = callbackImpl.handleCallBack(msg);
+				impl = callbackImpl;
 			} else {
 			
 				// Parse the query:

File: src/org/zaproxy/zap/extension/globalexcludeurl/DialogAddToken.java
Patch:
@@ -123,7 +123,7 @@ protected void init() {
     protected boolean validateFields() {
         String tokenName = getRegexTextField().getText();
         for (GlobalExcludeURLParamToken t : tokens) {
-            if (tokenName.equalsIgnoreCase(t.getRegex())) {
+            if (tokenName.equals(t.getRegex())) {
                 JOptionPane.showMessageDialog(this, TEXT_NAME_REPEATED_DIALOG,
                         TITLE_NAME_REPEATED_DIALOG,
                         JOptionPane.INFORMATION_MESSAGE);
@@ -145,6 +145,7 @@ protected void clearFields() {
         getRegexTextField().setText("");
         getRegexTextField().discardAllEdits();
         getDescTextField().setText("");
+        getDescTextField().discardAllEdits();
     }
 
     public GlobalExcludeURLParamToken getToken() {

File: src/org/zaproxy/zap/extension/globalexcludeurl/DialogModifyToken.java
Patch:
@@ -60,6 +60,7 @@ protected void init() {
 
         getEnabledCheckBox().setSelected(token.isEnabled());
         getDescTextField().setText(token.getDescription());
+        getDescTextField().discardAllEdits();
     }
 
 }

File: src/org/zaproxy/zap/extension/globalexcludeurl/DialogAddToken.java
Patch:
@@ -123,7 +123,7 @@ protected void init() {
     protected boolean validateFields() {
         String tokenName = getRegexTextField().getText();
         for (GlobalExcludeURLParamToken t : tokens) {
-            if (tokenName.equalsIgnoreCase(t.getRegex())) {
+            if (tokenName.equals(t.getRegex())) {
                 JOptionPane.showMessageDialog(this, TEXT_NAME_REPEATED_DIALOG,
                         TITLE_NAME_REPEATED_DIALOG,
                         JOptionPane.INFORMATION_MESSAGE);
@@ -145,6 +145,7 @@ protected void clearFields() {
         getRegexTextField().setText("");
         getRegexTextField().discardAllEdits();
         getDescTextField().setText("");
+        getDescTextField().discardAllEdits();
     }
 
     public GlobalExcludeURLParamToken getToken() {

File: src/org/zaproxy/zap/extension/globalexcludeurl/DialogModifyToken.java
Patch:
@@ -60,6 +60,7 @@ protected void init() {
 
         getEnabledCheckBox().setSelected(token.isEnabled());
         getDescTextField().setText(token.getDescription());
+        getDescTextField().discardAllEdits();
     }
 
 }

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -1002,7 +1002,7 @@ private void followRedirections(HttpMessage message, HttpRequestConfig requestCo
      *
      * @param statusCode the status code that will be checked
      * @return {@code true} if a redirection is needed, {@code false} otherwise
-     * @see #isRequestRewriteNeeded(int)
+     * @see #isRequestRewriteNeeded(HttpMessage)
      */
     private static boolean isRedirectionNeeded(int statusCode) {
         switch (statusCode) {

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -1002,7 +1002,7 @@ private void followRedirections(HttpMessage message, HttpRequestConfig requestCo
      *
      * @param statusCode the status code that will be checked
      * @return {@code true} if a redirection is needed, {@code false} otherwise
-     * @see #isRequestRewriteNeeded(int)
+     * @see #isRequestRewriteNeeded(HttpMessage)
      */
     private static boolean isRedirectionNeeded(int statusCode) {
         switch (statusCode) {

File: src/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java
Patch:
@@ -859,6 +859,9 @@ public boolean hasCredentialsOptionsPanel() {
 
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+		if (!View.isInitialised()) {
+			return;
+		}
 		extensionHook.getHookMenu().addPopupMenuItem(getPopupFlagLoginRequestMenuFactory());
 	}
 

File: src/org/zaproxy/zap/extension/brk/BreakPanel.java
Patch:
@@ -462,7 +462,7 @@ public void setBreakAll(boolean brk) {
 
 	@Override
 	public void step() {
-		breakToolbarFactory.setStep(true);
+		breakToolbarFactory.step();
 	}
 	
 	@Override
@@ -475,7 +475,7 @@ public void cont() {
 
 	@Override
 	public void drop() {
-		breakToolbarFactory.setDrop(true);
+		breakToolbarFactory.drop();
 	}
 
 	public void showNewBreakPointDialog() {

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -560,7 +560,7 @@ public boolean isText() {
      * @since TODO add version
      * @see #getNormalisedContentTypeValue()
      */
-    protected boolean hasContentType(String... contentTypes) {
+    public boolean hasContentType(String... contentTypes) {
         if (contentTypes == null || contentTypes.length == 0) {
             return true;
         }
@@ -587,7 +587,7 @@ protected boolean hasContentType(String... contentTypes) {
      * @since TODO add version
      * @see #hasContentType(String...)
      */
-    protected String getNormalisedContentTypeValue() {
+    public String getNormalisedContentTypeValue() {
         String contentType = getHeader(CONTENT_TYPE);
         if (contentType != null) {
             return contentType.toLowerCase(Locale.ROOT);

File: src/org/zaproxy/zap/ZapGetMethod.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Socket;
+import java.util.Locale;
 
 import org.apache.commons.httpclient.Header;
 import org.apache.commons.httpclient.HttpConnection;
@@ -202,7 +203,7 @@ public void releaseConnection() {
 		Header header = getResponseHeader("content-type");
 		if (header != null) {
 			String contentTypeHeader = header.getValue();
-			if (contentTypeHeader != null && contentTypeHeader.equals("text/event-stream")) {
+			if (contentTypeHeader != null && contentTypeHeader.toLowerCase(Locale.ROOT).contains("text/event-stream")) {
 				return;
 			}
 		}

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -560,7 +560,7 @@ public boolean isText() {
      * @since TODO add version
      * @see #getNormalisedContentTypeValue()
      */
-    protected boolean hasContentType(String... contentTypes) {
+    public boolean hasContentType(String... contentTypes) {
         if (contentTypes == null || contentTypes.length == 0) {
             return true;
         }
@@ -587,7 +587,7 @@ protected boolean hasContentType(String... contentTypes) {
      * @since TODO add version
      * @see #hasContentType(String...)
      */
-    protected String getNormalisedContentTypeValue() {
+    public String getNormalisedContentTypeValue() {
         String contentType = getHeader(CONTENT_TYPE);
         if (contentType != null) {
             return contentType.toLowerCase(Locale.ROOT);

File: src/org/zaproxy/zap/ZapGetMethod.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Socket;
+import java.util.Locale;
 
 import org.apache.commons.httpclient.Header;
 import org.apache.commons.httpclient.HttpConnection;
@@ -202,7 +203,7 @@ public void releaseConnection() {
 		Header header = getResponseHeader("content-type");
 		if (header != null) {
 			String contentTypeHeader = header.getValue();
-			if (contentTypeHeader != null && contentTypeHeader.equals("text/event-stream")) {
+			if (contentTypeHeader != null && contentTypeHeader.toLowerCase(Locale.ROOT).contains("text/event-stream")) {
 				return;
 			}
 		}

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -44,7 +44,7 @@ public class AntiCsrfParam extends AbstractParam {
     
     private static final String[] DEFAULT_TOKENS_NAMES = { "anticsrf",
             "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken", "authenticity_token", "OWASP_CSRFTOKEN", "anoncsrf",
-            "csrf_token"};
+            "csrf_token", "_csrf"};
 
     private List<AntiCsrfParamToken> tokens = null;
     private List<String> enabledTokensNames = null;

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -44,7 +44,7 @@ public class AntiCsrfParam extends AbstractParam {
     
     private static final String[] DEFAULT_TOKENS_NAMES = { "anticsrf",
             "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken", "authenticity_token", "OWASP_CSRFTOKEN", "anoncsrf",
-            "csrf_token"};
+            "csrf_token", "_csrf"};
 
     private List<AntiCsrfParamToken> tokens = null;
     private List<String> enabledTokensNames = null;

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -43,6 +43,7 @@
 // ZAP: 2017/06/07 Allow to persist the session properties (e.g. name, description).
 // ZAP: 2018/03/27 Validate that context and configurations for ContextDataFactory are not null.
 // ZAP: 2018/07/19 Fallback to bundled zapdb.script file.
+// ZAP: 2018/08/15 Deprecated addSessionListener
 
 package org.parosproxy.paros.model;
 
@@ -84,7 +85,6 @@ public class Model {
 	private String currentDBNameUntitled = "";
 	// ZAP: Added logger
 	private Logger logger = Logger.getLogger(Model.class);
-	private List<SessionListener> sessionListeners = new ArrayList<>();
 	private List<ContextDataFactory> contextDataFactories = new ArrayList<>();
 
 	private boolean postInitialisation;
@@ -466,8 +466,8 @@ public boolean accept(File dir1, String fileName) {
 		DBNAME_COPY++;
 	}
 
+	@Deprecated
 	public void addSessionListener(SessionListener listener) {
-		this.sessionListeners.add(listener);
 	}
 
 	/**

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -1403,9 +1403,6 @@ private static boolean versionMatches(AddOn addOn, AddOnDep dependency) {
      * @since 2.4.0
      */
     public boolean isExtensionLoaded(String classname) {
-        List<Extension> allExtensions = new ArrayList<>(getLoadedExtensions().size() + getLoadedExtensionsWithDeps().size());
-        allExtensions.addAll(getLoadedExtensions());
-        allExtensions.addAll(getLoadedExtensionsWithDeps());
         for (Extension extension : getLoadedExtensions()) {
             if (classname.equals(extension.getClass().getCanonicalName())) {
                 return true;

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1422,13 +1422,13 @@ private static String generateReportWithXsl(String report, String xslFileName) t
 	public HttpMessage handleShortcut(HttpMessage msg)  throws ApiException {
 		try {
 			if (msg.getRequestHeader().getURI().getPath().startsWith("/" + OTHER_PROXY_PAC)) {
-				return this.handleApiOther(msg, OTHER_PROXY_PAC, null);
+				return this.handleApiOther(msg, OTHER_PROXY_PAC, new JSONObject());
 			} else if (msg.getRequestHeader().getURI().getPath().startsWith("/" + OTHER_SET_PROXY)) {
 				JSONObject params = new JSONObject();
 				params.put(PARAM_PROXY_DETAILS, msg.getRequestBody().toString());
 				return this.handleApiOther(msg, OTHER_SET_PROXY, params);
 			} else if (msg.getRequestHeader().getURI().getPath().startsWith("/" + OTHER_SCRIPT_JS)) {
-				return this.handleApiOther(msg, OTHER_SCRIPT_JS, null);
+				return this.handleApiOther(msg, OTHER_SCRIPT_JS, new JSONObject());
 			}
 		} catch (URIException e) {
 			logger.error(e.getMessage(), e);

File: src/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -187,7 +187,7 @@ private void setPluginsEnabled(List<Plugin> plugins, boolean enabled) {
 
     private int getPluginRow(Plugin plugin) {
         for (int i = 0; i < listTestCategory.size(); i++) {
-            if (plugin.equals(listTestCategory.get(i))) {
+            if (plugin.equals(listTestCategory.get(i).getPlugin())) {
                 return i;
             }
         }

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -43,6 +43,7 @@
 // ZAP: 2017/06/07 Allow to persist the session properties (e.g. name, description).
 // ZAP: 2018/03/27 Validate that context and configurations for ContextDataFactory are not null.
 // ZAP: 2018/07/19 Fallback to bundled zapdb.script file.
+// ZAP: 2018/08/15 Deprecated addSessionListener
 
 package org.parosproxy.paros.model;
 
@@ -84,7 +85,6 @@ public class Model {
 	private String currentDBNameUntitled = "";
 	// ZAP: Added logger
 	private Logger logger = Logger.getLogger(Model.class);
-	private List<SessionListener> sessionListeners = new ArrayList<>();
 	private List<ContextDataFactory> contextDataFactories = new ArrayList<>();
 
 	private boolean postInitialisation;
@@ -466,8 +466,8 @@ public boolean accept(File dir1, String fileName) {
 		DBNAME_COPY++;
 	}
 
+	@Deprecated
 	public void addSessionListener(SessionListener listener) {
-		this.sessionListeners.add(listener);
 	}
 
 	/**

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -1403,9 +1403,6 @@ private static boolean versionMatches(AddOn addOn, AddOnDep dependency) {
      * @since 2.4.0
      */
     public boolean isExtensionLoaded(String classname) {
-        List<Extension> allExtensions = new ArrayList<>(getLoadedExtensions().size() + getLoadedExtensionsWithDeps().size());
-        allExtensions.addAll(getLoadedExtensions());
-        allExtensions.addAll(getLoadedExtensionsWithDeps());
         for (Extension extension : getLoadedExtensions()) {
             if (classname.equals(extension.getClass().getCanonicalName())) {
                 return true;

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1422,13 +1422,13 @@ private static String generateReportWithXsl(String report, String xslFileName) t
 	public HttpMessage handleShortcut(HttpMessage msg)  throws ApiException {
 		try {
 			if (msg.getRequestHeader().getURI().getPath().startsWith("/" + OTHER_PROXY_PAC)) {
-				return this.handleApiOther(msg, OTHER_PROXY_PAC, null);
+				return this.handleApiOther(msg, OTHER_PROXY_PAC, new JSONObject());
 			} else if (msg.getRequestHeader().getURI().getPath().startsWith("/" + OTHER_SET_PROXY)) {
 				JSONObject params = new JSONObject();
 				params.put(PARAM_PROXY_DETAILS, msg.getRequestBody().toString());
 				return this.handleApiOther(msg, OTHER_SET_PROXY, params);
 			} else if (msg.getRequestHeader().getURI().getPath().startsWith("/" + OTHER_SCRIPT_JS)) {
-				return this.handleApiOther(msg, OTHER_SCRIPT_JS, null);
+				return this.handleApiOther(msg, OTHER_SCRIPT_JS, new JSONObject());
 			}
 		} catch (URIException e) {
 			logger.error(e.getMessage(), e);

File: src/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -187,7 +187,7 @@ private void setPluginsEnabled(List<Plugin> plugins, boolean enabled) {
 
     private int getPluginRow(Plugin plugin) {
         for (int i = 0; i < listTestCategory.size(); i++) {
-            if (plugin.equals(listTestCategory.get(i))) {
+            if (plugin.equals(listTestCategory.get(i).getPlugin())) {
                 return i;
             }
         }

File: src/org/parosproxy/paros/extension/report/ReportGenerator.java
Patch:
@@ -53,7 +53,7 @@
 import javax.xml.transform.stream.StreamSource;
 
 import net.sf.json.xml.XMLSerializer;
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.view.View;
 import org.parosproxy.paros.Constant;
@@ -317,7 +317,7 @@ public static String entityEncode(String text) {
 
 		// The escapeXml function doesn't cope with some 'special' chrs
 
-		return StringEscapeUtils.escapeXml(XMLStringUtil.escapeControlChrs(result));
+		return StringEscapeUtils.escapeXml10(XMLStringUtil.escapeControlChrs(result));
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/pscan/PassiveScannerList.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.apache.log4j.Logger;
 import org.zaproxy.zap.extension.pscan.scanner.RegexAutoTagScanner;
@@ -32,7 +33,7 @@ public class PassiveScannerList {
 
 	private static final Logger logger = Logger.getLogger(PassiveScannerList.class);
 
-	private List<PassiveScanner> passiveScanners = new ArrayList<>();
+	private List<PassiveScanner> passiveScanners = new CopyOnWriteArrayList<>();
 	private Set<String> scannerNames = new HashSet<>();
 
 	protected boolean add (PassiveScanner scanner) {
@@ -72,7 +73,7 @@ public void setAutoTagScanners(List<RegexAutoTagScanner> autoTagScanners) {
             }
         }
         
-        this.passiveScanners = tempScanners;
+        this.passiveScanners = new CopyOnWriteArrayList<>(tempScanners);
     }
 
 	public PassiveScanner removeScanner(String className) {

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/ManualHttpRequestEditorDialog.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2017/08/10 Issue 3798: java.awt.Toolkit initialised in daemon mode
 // ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 // ZAP: 2018/07/17 Use ViewDelegate.getMenuShortcutKeyStroke.
+// ZAP: 2018/08/10 Use non-deprecated HttpRequestHeader constructor (Issue 4846).
 
 package org.parosproxy.paros.extension.manualrequest.http.impl;
 
@@ -290,8 +291,7 @@ public void setDefaultMessage() {
 		try {
 			URI uri = new URI("http://www.any_domain_name.org/path", true);
 			msg.setRequestHeader(
-					new HttpRequestHeader(HttpRequestHeader.GET, uri, HttpHeader.HTTP10,
-							Model.getSingleton().getOptionsParam().getConnectionParam()));
+					new HttpRequestHeader(HttpRequestHeader.GET, uri, HttpHeader.HTTP10));
 			setMessage(msg);
 		} catch (HttpMalformedHeaderException e) {
 			logger.error(e.getMessage(), e);

File: src/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -42,6 +42,7 @@
 // ZAP: 2017/06/19 Do not allow to set negative timeout values and expose the default value.
 // ZAP: 2017/09/26 Use helper methods to read the configurations.
 // ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
+// ZAP: 2018/08/10 Set the default user agent to HttpRequestHeader (Issue 4846).
 
 package org.parosproxy.paros.network;
 
@@ -215,6 +216,7 @@ protected void parse() {
 		setHttpStateEnabledImpl(getBoolean(HTTP_STATE_ENABLED, false));
 
 		this.defaultUserAgent = getString(DEFAULT_USER_AGENT, DEFAULT_DEFAULT_USER_AGENT);
+		HttpRequestHeader.setDefaultUserAgent(defaultUserAgent);
         
         loadSecurityProtocolsEnabled();
 	}
@@ -746,6 +748,7 @@ public String getDefaultUserAgent() {
 	}
 	public void setDefaultUserAgent(String defaultUserAgent) {
 		this.defaultUserAgent = defaultUserAgent;
+		HttpRequestHeader.setDefaultUserAgent(defaultUserAgent);
 		getConfig().setProperty(DEFAULT_USER_AGENT, defaultUserAgent);
 	}
 

File: src/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java
Patch:
@@ -245,8 +245,7 @@ protected HttpMessage prepareRequestMessage(UsernamePasswordAuthenticationCreden
 				String method = (requestBody != null) ? HttpRequestHeader.POST : HttpRequestHeader.GET;
 				requestMessage = new HttpMessage();
 				requestMessage.setRequestHeader(
-						new HttpRequestHeader(method, requestURI, HttpHeader.HTTP10,
-								Model.getSingleton().getOptionsParam().getConnectionParam()));
+						new HttpRequestHeader(method, requestURI, HttpHeader.HTTP10));
 				if (requestBody != null) {
 					requestMessage.getRequestHeader().setHeader(HttpHeader.CONTENT_TYPE, contentType);
 					requestMessage.getRequestBody().setBody(requestBody);

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -366,8 +366,7 @@ public ApiResponse handleApiAction(String name, JSONObject params)
 						new HttpRequestHeader(
 								HttpRequestHeader.GET,
 								uri,
-								HttpHeader.HTTP11,
-								Model.getSingleton().getOptionsParam().getConnectionParam()));
+								HttpHeader.HTTP11));
 			} catch (HttpMalformedHeaderException e) {
 				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL, e);
 			}

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -851,8 +851,7 @@ protected AddOnCollection getLocalVersionInfo () {
 
     private ZapXmlConfiguration getRemoteConfigurationUrl(String url) throws 
     		IOException, ConfigurationException, InvalidCfuUrlException {
-        HttpMessage msg = new HttpMessage(new URI(url, true), 
-        		Model.getSingleton().getOptionsParam().getConnectionParam());
+        HttpMessage msg = new HttpMessage(new URI(url, true));
         getHttpSender().sendAndReceive(msg,true);
         if (msg.getResponseHeader().getStatusCode() != HttpStatusCode.OK) {
             throw new IOException(

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -153,7 +153,7 @@ public SpiderTask(Spider parent, URI sourceUri, URI uri, int depth, String metho
 		// HistoryReference
 		try {
 			HttpRequestHeader requestHeader = 
-					new HttpRequestHeader(method, uri, HttpHeader.HTTP11, parent.getConnectionParam());
+					new HttpRequestHeader(method, uri, HttpHeader.HTTP11);
 			if (sourceUri != null && parent.getSpiderParam().isSendRefererHeader()) {
 				requestHeader.setHeader(HttpRequestHeader.REFERER, sourceUri.toString());
 			}

File: src/org/zaproxy/zap/extension/pscan/PassiveScannerList.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.apache.log4j.Logger;
 import org.zaproxy.zap.extension.pscan.scanner.RegexAutoTagScanner;
@@ -32,7 +33,7 @@ public class PassiveScannerList {
 
 	private static final Logger logger = Logger.getLogger(PassiveScannerList.class);
 
-	private List<PassiveScanner> passiveScanners = new ArrayList<>();
+	private List<PassiveScanner> passiveScanners = new CopyOnWriteArrayList<>();
 	private Set<String> scannerNames = new HashSet<>();
 
 	protected boolean add (PassiveScanner scanner) {
@@ -72,7 +73,7 @@ public void setAutoTagScanners(List<RegexAutoTagScanner> autoTagScanners) {
             }
         }
         
-        this.passiveScanners = tempScanners;
+        this.passiveScanners = new CopyOnWriteArrayList<>(tempScanners);
     }
 
 	public PassiveScanner removeScanner(String className) {

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/ManualHttpRequestEditorDialog.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2017/08/10 Issue 3798: java.awt.Toolkit initialised in daemon mode
 // ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 // ZAP: 2018/07/17 Use ViewDelegate.getMenuShortcutKeyStroke.
+// ZAP: 2018/08/10 Use non-deprecated HttpRequestHeader constructor (Issue 4846).
 
 package org.parosproxy.paros.extension.manualrequest.http.impl;
 
@@ -290,8 +291,7 @@ public void setDefaultMessage() {
 		try {
 			URI uri = new URI("http://www.any_domain_name.org/path", true);
 			msg.setRequestHeader(
-					new HttpRequestHeader(HttpRequestHeader.GET, uri, HttpHeader.HTTP10,
-							Model.getSingleton().getOptionsParam().getConnectionParam()));
+					new HttpRequestHeader(HttpRequestHeader.GET, uri, HttpHeader.HTTP10));
 			setMessage(msg);
 		} catch (HttpMalformedHeaderException e) {
 			logger.error(e.getMessage(), e);

File: src/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -42,6 +42,7 @@
 // ZAP: 2017/06/19 Do not allow to set negative timeout values and expose the default value.
 // ZAP: 2017/09/26 Use helper methods to read the configurations.
 // ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
+// ZAP: 2018/08/10 Set the default user agent to HttpRequestHeader (Issue 4846).
 
 package org.parosproxy.paros.network;
 
@@ -215,6 +216,7 @@ protected void parse() {
 		setHttpStateEnabledImpl(getBoolean(HTTP_STATE_ENABLED, false));
 
 		this.defaultUserAgent = getString(DEFAULT_USER_AGENT, DEFAULT_DEFAULT_USER_AGENT);
+		HttpRequestHeader.setDefaultUserAgent(defaultUserAgent);
         
         loadSecurityProtocolsEnabled();
 	}
@@ -746,6 +748,7 @@ public String getDefaultUserAgent() {
 	}
 	public void setDefaultUserAgent(String defaultUserAgent) {
 		this.defaultUserAgent = defaultUserAgent;
+		HttpRequestHeader.setDefaultUserAgent(defaultUserAgent);
 		getConfig().setProperty(DEFAULT_USER_AGENT, defaultUserAgent);
 	}
 

File: src/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java
Patch:
@@ -245,8 +245,7 @@ protected HttpMessage prepareRequestMessage(UsernamePasswordAuthenticationCreden
 				String method = (requestBody != null) ? HttpRequestHeader.POST : HttpRequestHeader.GET;
 				requestMessage = new HttpMessage();
 				requestMessage.setRequestHeader(
-						new HttpRequestHeader(method, requestURI, HttpHeader.HTTP10,
-								Model.getSingleton().getOptionsParam().getConnectionParam()));
+						new HttpRequestHeader(method, requestURI, HttpHeader.HTTP10));
 				if (requestBody != null) {
 					requestMessage.getRequestHeader().setHeader(HttpHeader.CONTENT_TYPE, contentType);
 					requestMessage.getRequestBody().setBody(requestBody);

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -366,8 +366,7 @@ public ApiResponse handleApiAction(String name, JSONObject params)
 						new HttpRequestHeader(
 								HttpRequestHeader.GET,
 								uri,
-								HttpHeader.HTTP11,
-								Model.getSingleton().getOptionsParam().getConnectionParam()));
+								HttpHeader.HTTP11));
 			} catch (HttpMalformedHeaderException e) {
 				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_URL, e);
 			}

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -851,8 +851,7 @@ protected AddOnCollection getLocalVersionInfo () {
 
     private ZapXmlConfiguration getRemoteConfigurationUrl(String url) throws 
     		IOException, ConfigurationException, InvalidCfuUrlException {
-        HttpMessage msg = new HttpMessage(new URI(url, true), 
-        		Model.getSingleton().getOptionsParam().getConnectionParam());
+        HttpMessage msg = new HttpMessage(new URI(url, true));
         getHttpSender().sendAndReceive(msg,true);
         if (msg.getResponseHeader().getStatusCode() != HttpStatusCode.OK) {
             throw new IOException(

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -153,7 +153,7 @@ public SpiderTask(Spider parent, URI sourceUri, URI uri, int depth, String metho
 		// HistoryReference
 		try {
 			HttpRequestHeader requestHeader = 
-					new HttpRequestHeader(method, uri, HttpHeader.HTTP11, parent.getConnectionParam());
+					new HttpRequestHeader(method, uri, HttpHeader.HTTP11);
 			if (sourceUri != null && parent.getSpiderParam().isSendRefererHeader()) {
 				requestHeader.setHeader(HttpRequestHeader.REFERER, sourceUri.toString());
 			}

File: src/org/zaproxy/zap/model/CommonUserAgents.java
Patch:
@@ -65,7 +65,7 @@ public class CommonUserAgents {
 				logger.error(e.getMessage(), e);
 			}
 		} else {
-			logger.error("Failed to read common user agents from " + f.getAbsolutePath());
+			logger.info("No common user agents will be suggested, file does not exist: " + f.getAbsolutePath());
 		}
 	}
 	

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -278,7 +278,8 @@ private static void installAddOnExtensionImpl(AddOn addOn, Extension ext, Extens
             logger.debug("Starting extension " + ext.getName());
             try {
                 extensionLoader.startLifeCycle(ext);
-            } catch (Exception e) {
+            } catch (Throwable e) {
+                // Catch Throwable to (try) prevent extensions' issues from breaking the installation process.
                 logger.error("An error occurred while installing the add-on: " + addOn.getId(), e);
             }
         }

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -278,7 +278,8 @@ private static void installAddOnExtensionImpl(AddOn addOn, Extension ext, Extens
             logger.debug("Starting extension " + ext.getName());
             try {
                 extensionLoader.startLifeCycle(ext);
-            } catch (Exception e) {
+            } catch (Throwable e) {
+                // Catch Throwable to (try) prevent extensions' issues from breaking the installation process.
                 logger.error("An error occurred while installing the add-on: " + addOn.getId(), e);
             }
         }

File: src/org/parosproxy/paros/core/proxy/ProxyServer.java
Patch:
@@ -187,7 +187,7 @@ public synchronized int startServer(String ip, int port, boolean isDynamicPort)
                     return -1;
                 } else if (message.startsWith("Permission denied") || message.startsWith("Address already in use")) {
                     if (!isDynamicPort) {
-                        showErrorMessage(Constant.messages.getString("proxy.error.port") + " " + ip + ":" + port);
+                        showErrorMessage(Constant.messages.getString("proxy.error.port", ip, Integer.toString(port)));
                         return -1;
                     } else if (port < 65535) {
                         port++;

File: src/org/parosproxy/paros/core/proxy/ProxyServer.java
Patch:
@@ -187,7 +187,7 @@ public synchronized int startServer(String ip, int port, boolean isDynamicPort)
                     return -1;
                 } else if (message.startsWith("Permission denied") || message.startsWith("Address already in use")) {
                     if (!isDynamicPort) {
-                        showErrorMessage(Constant.messages.getString("proxy.error.port") + " " + ip + ":" + port);
+                        showErrorMessage(Constant.messages.getString("proxy.error.port", ip, Integer.toString(port)));
                         return -1;
                     } else if (port < 65535) {
                         port++;

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -233,6 +233,9 @@ private int getLastHistoryId() {
 	}
 	
 	protected int getRecordsToScan() {
+		if (historyTable == null) {
+			return 0;
+		}
 		return this.getLastHistoryId() - getLastScannedId();
 	}
 

File: src/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java
Patch:
@@ -89,7 +89,7 @@ public void setMessage(HttpMessage msg) {
 
 				String name = nameMatcher.group("name");
 				// Value doesn't include boundary, headerline, or double CRLF
-				String value = part.replaceAll(boundary + partHeaderLine + HttpHeader.CRLF + HttpHeader.CRLF, "");
+				String value = part.replaceAll(Pattern.quote(boundary + partHeaderLine) + HttpHeader.CRLF + HttpHeader.CRLF, "");
 				value = value.replaceAll(HttpHeader.CRLF + "(" + Pattern.quote(getBoundary(contentType)) + "--"
 						+ HttpHeader.CRLF + ")?$", ""); // Strip final boundary
 				if (isFileParam) {

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -233,6 +233,9 @@ private int getLastHistoryId() {
 	}
 	
 	protected int getRecordsToScan() {
+		if (historyTable == null) {
+			return 0;
+		}
 		return this.getLastHistoryId() - getLastScannedId();
 	}
 

File: src/org/parosproxy/paros/core/scanner/VariantMultipartFormParameters.java
Patch:
@@ -89,7 +89,7 @@ public void setMessage(HttpMessage msg) {
 
 				String name = nameMatcher.group("name");
 				// Value doesn't include boundary, headerline, or double CRLF
-				String value = part.replaceAll(boundary + partHeaderLine + HttpHeader.CRLF + HttpHeader.CRLF, "");
+				String value = part.replaceAll(Pattern.quote(boundary + partHeaderLine) + HttpHeader.CRLF + HttpHeader.CRLF, "");
 				value = value.replaceAll(HttpHeader.CRLF + "(" + Pattern.quote(getBoundary(contentType)) + "--"
 						+ HttpHeader.CRLF + ")?$", ""); // Strip final boundary
 				if (isFileParam) {

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -387,7 +387,7 @@ public SiteNode addPath(HistoryReference ref, HttpMessage msg, boolean newOnly)
     		throw new InvalidParameterException("SiteMap should not be accessed when the low memory option is set");
     	}
 
-    	if (View.isInitialised() && Constant.isDevBuild() && ! EventQueue.isDispatchThread()) {
+    	if (View.isInitialised() && Constant.isDevMode() && ! EventQueue.isDispatchThread()) {
     		// In developer mode log an error if we're not on the EDT
     		// Adding to the site tree on GUI ('initial') threads causes problems
     		log.error("SiteMap.addPath not on EDT " + Thread.currentThread().getName(), new Exception());

File: src/org/zaproxy/zap/extension/log4j/ExtensionLog4j.java
Patch:
@@ -49,8 +49,8 @@ public ExtensionLog4j() {
         super(NAME);
         this.setOrder(56);
 
-		if (Constant.isDevBuild() && View.isInitialised()) {
-			// Only enable if this is a developer build, ie build from source
+		if (Constant.isDevMode() && View.isInitialised()) {
+			// Only enable if this is a developer build, ie build from source, or explicitly enabled
         
 	        scanStatus = new ScanStatus(
 					new ImageIcon(

File: src/org/zaproxy/zap/control/AddOnCollection.java
Patch:
@@ -161,7 +161,7 @@ private void addDirectory (File dir) throws Exception {
     		return;
     	}
     	if (! dir.exists()) {
-    		logger.warn("No such directory: " + dir.getAbsolutePath());
+    		logger.warn("Skipping enumeration of add-ons, the directory does not exist: " + dir.getAbsolutePath());
     		return;
     	}
     	if (! dir.isDirectory()) {

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -375,11 +375,11 @@ private void addDirectory (File dir) {
     		return;
     	}
     	if (! dir.exists()) {
-    		logger.error("No such directory: " + dir.getAbsolutePath());
+    		logger.debug("No such directory: " + dir.getAbsolutePath());
     		return;
     	}
     	if (! dir.isDirectory()) {
-    		logger.error("Not a directory: " + dir.getAbsolutePath());
+    		logger.warn("Not a directory: " + dir.getAbsolutePath());
     		return;
     	}
 

File: src/org/parosproxy/paros/security/SslCertificateServiceImpl.java
Patch:
@@ -38,6 +38,7 @@
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
 import java.security.interfaces.RSAPrivateKey;
+import java.time.Duration;
 import java.util.Date;
 import java.util.Random;
 import java.util.concurrent.atomic.AtomicLong;
@@ -134,8 +135,8 @@ public KeyStore createCertForHost(String hostname) throws NoSuchAlgorithmExcepti
 		X509v3CertificateBuilder certGen = new JcaX509v3CertificateBuilder (
 				new X509CertificateHolder(caCert.getEncoded()).getSubject(),
 				BigInteger.valueOf(serial.getAndIncrement()),
-				new Date(System.currentTimeMillis() - 1000L * 60 * 60 * 24 * 30),
-				new Date(System.currentTimeMillis() + 100*(1000L * 60 * 60 * 24 * 30)),
+				new Date(System.currentTimeMillis() - Duration.ofDays(30).toMillis()),
+				new Date(System.currentTimeMillis() + Duration.ofDays(1000).toMillis()),
 				namebld.build(),
 				pubKey
 			);

File: src/org/zaproxy/zap/extension/dynssl/SslCertificateUtils.java
Patch:
@@ -42,6 +42,7 @@
 import java.security.interfaces.RSAPrivateKey;
 import java.security.spec.InvalidKeySpecException;
 import java.security.spec.PKCS8EncodedKeySpec;
+import java.time.Duration;
 import java.util.Base64;
 import java.util.Calendar;
 import java.util.Date;
@@ -97,7 +98,7 @@ public class SslCertificateUtils {
 	 */
 	public static final String END_PRIVATE_KEY_TOKEN = "-----END PRIVATE KEY-----";
 
-	private static final long DEFAULT_VALID_DAYS = 365L;
+	private static final long DEFAULT_VALIDITY_IN_MS = Duration.ofDays(365).toMillis();
 
 	/**
 	 * Creates a new Root CA certificate and returns private and public key as
@@ -111,7 +112,7 @@ public class SslCertificateUtils {
 	 */
 	public static final KeyStore createRootCA() throws NoSuchAlgorithmException {
 		final Date startDate = Calendar.getInstance().getTime();
-		final Date expireDate = new Date(startDate.getTime()+ (DEFAULT_VALID_DAYS * 24L * 60L * 60L * 1000L));
+		final Date expireDate = new Date(startDate.getTime()+ DEFAULT_VALIDITY_IN_MS);
 
 		final KeyPairGenerator g = KeyPairGenerator.getInstance("RSA");
 		g.initialize(2048, SecureRandom.getInstance("SHA1PRNG"));

File: src/org/zaproxy/zap/view/SiteMapTreeCellRenderer.java
Patch:
@@ -68,6 +68,7 @@ public SiteMapTreeCellRenderer(List<SiteMapListener> listeners) {
 		this.listeners = listeners;
 		this.component = new JPanel(new FlowLayout(FlowLayout.CENTER, 4, 2));
 		component.setOpaque(false);
+		this.setLabelFor(component);
 		this.putClientProperty("html.disable", Boolean.TRUE);
 	}
 

File: src/org/zaproxy/zap/extension/params/PopupMenuRemoveAntiCSRF.java
Patch:
@@ -58,8 +58,7 @@ public boolean isEnableForComponent(Component invoker) {
             }
         	
         	HtmlParameterStats item = extension.getParamsPanel().getSelectedParam();
-        	// Note that only form params are currently supported
-        	if (item != null && HtmlParameter.Type.form.equals(item.getType()) && 
+        	if (item != null && 
         			item.getFlags().contains(HtmlParameter.Flags.anticsrf.name())) {
         		this.setEnabled(true);
                 return true;

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -295,6 +295,7 @@ private AddOnClassLoader createAndAddAddOnClassLoader(AddOn ao) {
             if (idsAddOnDependencies.isEmpty()) {
                 addOnClassLoader = new AddOnClassLoader(ao.getFile().toURI().toURL(), this, ao.getAddOnClassnames());
                 this.addOnLoaders.put(ao.getId(), addOnClassLoader);
+                ao.setClassLoader(addOnClassLoader);
                 return addOnClassLoader;
             }
 
@@ -309,6 +310,7 @@ private AddOnClassLoader createAndAddAddOnClassLoader(AddOn ao) {
 
             addOnClassLoader = new AddOnClassLoader(ao.getFile().toURI().toURL(), this, dependencies, ao.getAddOnClassnames());
             this.addOnLoaders.put(ao.getId(), addOnClassLoader);
+            ao.setClassLoader(addOnClassLoader);
             return addOnClassLoader;
         } catch (MalformedURLException e) {
             logger.error(e.getMessage(), e);
@@ -628,6 +630,7 @@ private void removeAddOnClassLoader(AddOn addOn) {
             } catch (Exception e) {
                 logger.error("Failure while closing class loader of " + addOn.getId() + " add-on:", e);
             }
+            addOn.setClassLoader(null);
         }
     }
 

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -154,7 +154,7 @@ public static <R> R findResource(
 	 * <p>
 	 * The function is called for each resource until a non-{@code null} resource is returned or all resources are consumed. The
 	 * resource name is built using the parameters {@code fileName}, {@code fileExtension}, and the given {@code locale}. The
-	 * {@code localeToken}, if non-{@ocde null} nor empty, is replaced in the {@code fileName} with the current candidate
+	 * {@code localeToken}, if non-{@code null} nor empty, is replaced in the {@code fileName} with the current candidate
 	 * locale. The candidates and fallback locale are obtained from a {@link ZapResourceBundleControl}.
 	 * <p>
 	 * For example, with the following parameters:
@@ -201,7 +201,7 @@ public static <R> R findResource(
 	 * <p>
 	 * The function is called for each resource until a non-{@code null} resource is returned or all resources are consumed. The
 	 * resource name is built using the parameters {@code fileName}, {@code fileExtension}, and the given {@code locale}. The
-	 * {@code localeToken}, if non-{@ocde null} nor empty, is replaced in the {@code fileName} with the current candidate
+	 * {@code localeToken}, if non-{@code null} nor empty, is replaced in the {@code fileName} with the current candidate
 	 * locale. The candidates and fallback locale are obtained from the given resource bundle control.
 	 * <p>
 	 * For example, with the following parameters:

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -239,6 +239,7 @@ private void loadAllAddOns() {
             if (updatedAddOns.contains(addOn)) {
                 AddOnInstaller.updateAddOnFiles(addOnClassLoader, addOn);
             }
+            AddOnInstaller.installResourceBundle(addOnClassLoader, addOn);
         }
     }
 

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -154,7 +154,7 @@ public static <R> R findResource(
 	 * <p>
 	 * The function is called for each resource until a non-{@code null} resource is returned or all resources are consumed. The
 	 * resource name is built using the parameters {@code fileName}, {@code fileExtension}, and the given {@code locale}. The
-	 * {@code localeToken}, if non-{@ocde null} nor empty, is replaced in the {@code fileName} with the current candidate
+	 * {@code localeToken}, if non-{@code null} nor empty, is replaced in the {@code fileName} with the current candidate
 	 * locale. The candidates and fallback locale are obtained from a {@link ZapResourceBundleControl}.
 	 * <p>
 	 * For example, with the following parameters:
@@ -201,7 +201,7 @@ public static <R> R findResource(
 	 * <p>
 	 * The function is called for each resource until a non-{@code null} resource is returned or all resources are consumed. The
 	 * resource name is built using the parameters {@code fileName}, {@code fileExtension}, and the given {@code locale}. The
-	 * {@code localeToken}, if non-{@ocde null} nor empty, is replaced in the {@code fileName} with the current candidate
+	 * {@code localeToken}, if non-{@code null} nor empty, is replaced in the {@code fileName} with the current candidate
 	 * locale. The candidates and fallback locale are obtained from the given resource bundle control.
 	 * <p>
 	 * For example, with the following parameters:

File: src/org/zaproxy/zap/control/AddOnLoaderUtils.java
Patch:
@@ -94,6 +94,9 @@ private static <T> T loadAndInstantiateClassImpl(
         } catch (ClassNotFoundException e) {
             LOGGER.error("Declared \"" + type + "\" was not found: " + classname, e);
             return null;
+        } catch (LinkageError e) {
+            LOGGER.error("Declared \"" + type + "\" could not be loaded: " + classname, e);
+            return null;
         }
 
         if (Modifier.isAbstract(cls.getModifiers()) || Modifier.isInterface(cls.getModifiers())) {

File: src/org/zaproxy/zap/extension/pscan/OptionsPassiveScanTableModel.java
Patch:
@@ -34,7 +34,6 @@ public class OptionsPassiveScanTableModel extends AbstractMultipleOptionsTableMo
 	private static final String[] COLUMN_NAMES = {
 		Constant.messages.getString("pscan.options.table.header.enabled"),
 		Constant.messages.getString("pscan.options.table.header.name"),
-		Constant.messages.getString("pscan.options.table.header.type"),
 		Constant.messages.getString("pscan.options.table.header.configuration")};
     
 	private static final int COLUMN_COUNT = COLUMN_NAMES.length;
@@ -94,8 +93,6 @@ public Object getValueAt(int rowIndex, int columnIndex) {
         case 1:
             return getElement(rowIndex).getName();
         case 2:
-            return getElement(rowIndex).getType().toString();
-        case 3:
             return getElement(rowIndex).getConf();
         }
         return null;

File: src/org/zaproxy/zap/control/AddOnLoaderUtils.java
Patch:
@@ -110,7 +110,7 @@ private static <T> T loadAndInstantiateClassImpl(
             @SuppressWarnings("unchecked")
             Constructor<T> c = (Constructor<T>) cls.getConstructor();
             return c.newInstance();
-        } catch (ExceptionInInitializerError | Exception e) {
+        } catch (LinkageError | Exception e) {
             LOGGER.error("Failed to initialise: " + classname, e);
         }
         return null;

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2017/02/08 Change isEmpty to check start line instead of headers (if it has the status/request line it's not empty).
 // ZAP: 2017/03/02 Issue 3226: Added API Key and Nonce headers
 // ZAP: 2018/02/06 Make the lower/upper case changes locale independent (Issue 4327).
+// ZAP: 2018/04/24 Add JSON Content-Type.
 
 package org.parosproxy.paros.network;
 
@@ -88,6 +89,7 @@ public abstract class HttpHeader implements java.io.Serializable {
     public static final String _KEEP_ALIVE = "Keep-Alive";
     public static final String _CHUNKED = "Chunked";
     public static final String FORM_URLENCODED_CONTENT_TYPE = "application/x-www-form-urlencoded";
+    public static final String JSON_CONTENT_TYPE = "application/json";
     public static final String SCHEME_HTTP = "http://";
     public static final String SCHEME_HTTPS = "https://";
     public static final String HTTP = "http";

File: src/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java
Patch:
@@ -44,6 +44,7 @@
 import org.zaproxy.zap.authentication.FormBasedAuthenticationMethodType;
 import org.zaproxy.zap.authentication.FormBasedAuthenticationMethodType.FormBasedAuthenticationMethod;
 import org.zaproxy.zap.authentication.HttpAuthenticationMethodType;
+import org.zaproxy.zap.authentication.JsonBasedAuthenticationMethodType;
 import org.zaproxy.zap.authentication.ManualAuthenticationMethodType;
 import org.zaproxy.zap.authentication.ScriptBasedAuthenticationMethodType;
 import org.zaproxy.zap.extension.stdmenus.PopupContextMenuItemFactory;
@@ -202,6 +203,7 @@ private void loadAuthenticationMethodTypes(ExtensionHook hook) {
 		this.authenticationMethodTypes.add(new HttpAuthenticationMethodType());
 		this.authenticationMethodTypes.add(new ManualAuthenticationMethodType());
 		this.authenticationMethodTypes.add(new ScriptBasedAuthenticationMethodType());
+		this.authenticationMethodTypes.add(new JsonBasedAuthenticationMethodType());
 
 		for (AuthenticationMethodType a : authenticationMethodTypes) {
 			a.hook(hook);

File: src/org/zaproxy/zap/extension/httpsessions/PopupMenuRemoveSession.java
Patch:
@@ -76,8 +76,8 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 
 	@Override
 	public boolean isEnableForComponent(Component invoker) {
-		// Only enable it for the HttpSessionsPanel and for the entries that are not already active
-		if (invoker.getName() != null && invoker.getName().equals(HttpSessionsPanel.PANEL_NAME)) {
+		if (HttpSessionsPanel.PANEL_NAME.equals(invoker.getName())) {
+			setEnabled(extension.getHttpSessionsPanel().getSelectedSession() != null);
 			return true;
 		}
 		return false;

File: src/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java
Patch:
@@ -167,7 +167,9 @@ private void changeMethodConfigPanel(AuthenticationMethodType newMethodType) {
 			return;
 		}
 
-		log.info("Creating new panel for configuring: " + newMethodType.getName());
+		if (log.isDebugEnabled()) {
+			log.debug("Creating new panel for configuring: " + newMethodType.getName());
+		}
 		this.getConfigContainerPanel().removeAll();
 
 		// show the panel according to whether the authentication type needs configuration

File: src/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -570,7 +570,7 @@ public String getDescription() {
 				}
 				View.getSingleton().showWarningDialog(Constant.messages.getString("context.import.error", detailError));
 			} catch (Exception e1) {
-				log.debug(e1.getMessage(), e1);
+				log.error(e1.getMessage(), e1);
 				View.getSingleton().showWarningDialog(Constant.messages.getString("context.import.error", e1.getMessage()));
 			}
 	    }

File: src/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -570,7 +570,7 @@ public String getDescription() {
 				}
 				View.getSingleton().showWarningDialog(Constant.messages.getString("context.import.error", detailError));
 			} catch (Exception e1) {
-				log.debug(e1.getMessage(), e1);
+				log.error(e1.getMessage(), e1);
 				View.getSingleton().showWarningDialog(Constant.messages.getString("context.import.error", e1.getMessage()));
 			}
 	    }

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -55,7 +55,7 @@
 
 public class OptionsParamView extends AbstractParam {
 	
-	private static final String DEFAULT_TIME_STAMP_FORMAT =  Constant.messages.getString("timestamp.format.default");
+	private static final String DEFAULT_TIME_STAMP_FORMAT =  Constant.messages.getString("timestamp.format.datetime");
 	
 	public static final String BASE_VIEW_KEY = "view";
 

File: src/org/parosproxy/paros/extension/option/OptionsViewPanel.java
Patch:
@@ -77,9 +77,11 @@ public class OptionsViewPanel extends AbstractParamPanel {
 	private static final long serialVersionUID = 1L;
 	
 	private static final String TIME_STAMP_FORMAT_COMBOBOX_TOOL_TIP = Constant.messages.getString("options.display.timestamp.format.combobox.tooltip");
+	// Translatable formats
 	private static final String TIME_STAMP_FORMAT_DATETIME =  Constant.messages.getString("timestamp.format.datetime");
-	private static final String TIME_STAMP_FORMAT_ISO8601 =  Constant.messages.getString("timestamp.format.iso8601");
 	private static final String TIME_STAMP_FORMAT_TIMEONLY =  Constant.messages.getString("timestamp.format.timeonly");
+	// ISO Standards compliant format
+	private static final String TIME_STAMP_FORMAT_ISO8601 = "yyyy-MM-dd'T'HH:mm:ssZ";
 	
 	private JPanel panelMisc = null;
 	private JScrollPane mainScrollPane;

File: src/org/zaproxy/zap/utils/TimeStampUtils.java
Patch:
@@ -32,7 +32,7 @@
 
 public final class TimeStampUtils {
      
-	private static final String DEFAULT_TIME_STAMP_FORMAT =  Constant.messages.getString("timestamp.format.default");
+	private static final String DEFAULT_TIME_STAMP_FORMAT =  Constant.messages.getString("timestamp.format.datetime");
 	private static final String TIME_STAMP_DELIMITER =  Constant.messages.getString("timestamp.format.delimiter");
 	private static final String SAFE_TIME_STAMP_FORMAT = "yyyy-MM-dd HH:mm:ss"; // Just in-case something goes wrong in translation
     

File: src/org/parosproxy/paros/extension/history/ProxyListenerLog.java
Patch:
@@ -117,7 +117,7 @@ public boolean onHttpResponseReceive(final HttpMessage msg) {
             }
 		}
 		final int finalType = type;
-		final HttpMessage clonedMessage = msg.cloneAll();
+		final HttpMessage clonedMessage = new HttpMessage(msg);
 		Thread t = new Thread(new Runnable() {
 		    @Override
 		    public void run() {

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLPanel.java
Patch:
@@ -32,6 +32,7 @@
 import java.nio.file.Path;
 import java.security.KeyStore;
 import java.security.cert.Certificate;
+import java.util.Locale;
 
 import javax.swing.GroupLayout;
 import javax.swing.GroupLayout.Alignment;
@@ -286,8 +287,8 @@ public String getDescription() {
 			}
 			@Override
 			public boolean accept(File f) {
-				return f.getName().toLowerCase().endsWith(CONFIGURATION_FILENAME) ||
-						f.getName().toLowerCase().endsWith("pem") || f.isDirectory();
+				String lcFileName = f.getName().toLowerCase(Locale.ROOT);
+				return lcFileName.endsWith(CONFIGURATION_FILENAME) || lcFileName.endsWith("pem") || f.isDirectory();
 			}
 		});
 		final int result = fc.showOpenDialog(this);

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -365,7 +365,7 @@ public HttpMessage handleApiRequest (HttpRequestHeader requestHeader, HttpInputS
 						}
 					} catch (IllegalArgumentException e) {
 						format = Format.HTML;
-						throw new ApiException(ApiException.Type.BAD_FORMAT);
+						throw new ApiException(ApiException.Type.BAD_FORMAT, e);
 					}
 				}
 				if (elements.length > 4) {
@@ -379,7 +379,7 @@ public HttpMessage handleApiRequest (HttpRequestHeader requestHeader, HttpInputS
 					try {
 						reqType = RequestType.valueOf(elements[5]);
 					} catch (IllegalArgumentException e) {
-						throw new ApiException(ApiException.Type.BAD_TYPE);
+						throw new ApiException(ApiException.Type.BAD_TYPE, e);
 					}
 				}
 				if (elements.length > 6) {

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -365,7 +365,7 @@ public HttpMessage handleApiRequest (HttpRequestHeader requestHeader, HttpInputS
 						}
 					} catch (IllegalArgumentException e) {
 						format = Format.HTML;
-						throw new ApiException(ApiException.Type.BAD_FORMAT);
+						throw new ApiException(ApiException.Type.BAD_FORMAT, e);
 					}
 				}
 				if (elements.length > 4) {
@@ -379,7 +379,7 @@ public HttpMessage handleApiRequest (HttpRequestHeader requestHeader, HttpInputS
 					try {
 						reqType = RequestType.valueOf(elements[5]);
 					} catch (IllegalArgumentException e) {
-						throw new ApiException(ApiException.Type.BAD_TYPE);
+						throw new ApiException(ApiException.Type.BAD_TYPE, e);
 					}
 				}
 				if (elements.length > 6) {

File: src/org/parosproxy/paros/core/scanner/NameValuePair.java
Patch:
@@ -28,7 +28,7 @@
 
 public class NameValuePair {
 
-    // ZAP: Parameter type constants
+    // NOTE: After adding a new type update ScannerParamFilter.
     public static final int TYPE_URL_PATH = ScannerParam.TARGET_URLPATH;
     public static final int TYPE_QUERY_STRING = ScannerParam.TARGET_QUERYSTRING;
     public static final int TYPE_COOKIE = ScannerParam.TARGET_COOKIE;

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -75,6 +75,7 @@
 // ZAP: 2018/01/04 Clear SNI Terminator options when updating from older ZAP versions.
 // ZAP: 2018/01/05 Prevent use of install dir as home dir.
 // ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
+// ZAP: 2018/03/16 Use equalsIgnoreCase (Issue 4327).
 
 package org.parosproxy.paros;
 
@@ -1155,7 +1156,7 @@ public static boolean isKali() {
 		    		if (osLikeValue != null) { 
 			    		String [] oSLikes = osLikeValue.split(" ");
 			    		for (String osLike: oSLikes) {
-			    			if (osLike.toLowerCase().equals("kali")) {    				
+			    			if (osLike.equalsIgnoreCase("kali")) {
 			    				onKali = Boolean.TRUE;
 			    				break;
 			    			}

File: src/org/zaproxy/zap/extension/brk/BreakAPI.java
Patch:
@@ -127,7 +127,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			}
 			
 		} else if (ACTION_BREAK_ON_ID.equals(name)) {
-			extension.setBreakOnId(params.getString(PARAM_KEY), params.getString(PARAM_STATE).toLowerCase().equals("on"));
+			extension.setBreakOnId(params.getString(PARAM_KEY), params.getString(PARAM_STATE).equalsIgnoreCase("on"));
 
 		} else if (ACTION_CONTINUE.equals(name)) {
 			extension.getBreakpointManagementInterface().cont();

File: src/org/zaproxy/zap/utils/HttpUserAgent.java
Patch:
@@ -51,7 +51,7 @@ private static String searchVersionInFile(String userAgent, String file) {
 					browserVersion = line.substring(2, line.length()-1);
 					continue;
 				}
-				if (line.toLowerCase().equals(userAgent)) {
+				if (line.equalsIgnoreCase(userAgent)) {
 					return browserVersion;
 				}
 			}

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -150,7 +150,7 @@ public ExtensionScript() {
         
         ScriptEngine se = mgr.getEngineByName("ECMAScript");
         if (se != null) {
-        	this.registerScriptEngineWrapper(new JavascriptEngineWrapper(se));
+        	this.registerScriptEngineWrapper(new JavascriptEngineWrapper(se.getFactory()));
         } else {
         	logger.error("No Javascript/ECMAScript engine found");
         }
@@ -426,7 +426,7 @@ public ScriptEngineWrapper getEngineWrapper(String name) {
 			}
 		}
 		if (engine != null) {
-			DefaultEngineWrapper dew = new DefaultEngineWrapper(engine);
+			DefaultEngineWrapper dew = new DefaultEngineWrapper(engine.getFactory());
 			this.registerScriptEngineWrapper(dew);
 			return dew;
 		}

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -84,6 +84,7 @@
 // ZAP: 2017/11/22 Delete just the history references selected (Issue 4065).
 // ZAP: 2018/01/29 Add getter to expose historyReferencesTable of History tab (Issue 4000).
 // ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
+// ZAP: 2018/03/12 Use the same help page in request editors.
 
 package org.parosproxy.paros.extension.history;
 
@@ -565,7 +566,7 @@ private PopupMenuPurgeHistory getPopupMenuPurgeHistory() {
 	 */    
 	public ManualRequestEditorDialog getResendDialog() {
 		if (resendDialog == null) {
-			resendDialog = new ManualHttpRequestEditorDialog(true, "resend", "ui.dialogs.resend");
+			resendDialog = new ManualHttpRequestEditorDialog(true, "resend", "ui.dialogs.manreq");
 			resendDialog.setTitle(Constant.messages.getString("manReq.dialog.title"));	// ZAP: i18n
 		}
 		return resendDialog;

File: src/org/apache/commons/httpclient/HttpMethodDirector.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -70,6 +71,7 @@
  *  - Added constant PARAM_REMOVE_USER_DEFINED_AUTH_HEADERS;
  *  - Added the public modifier to the class.
  *  - Establish a tunnel if the request has a connection upgrade.
+ *  - Use neutral Locale when converting to lower case.
  */
 /**
  * Handles the process of executing a method including authentication, redirection and retries.
@@ -535,7 +537,7 @@ private static boolean isConnectionUpgrade(HttpMethod method) {
         if (connectionHeader == null) {
             return false;
         }
-        return connectionHeader.getValue().toLowerCase().contains("upgrade");
+        return connectionHeader.getValue().toLowerCase(Locale.ROOT).contains("upgrade");
     }
 
     /**

File: src/org/apache/commons/httpclient/URI.java
Patch:
@@ -54,6 +54,7 @@
  *  - Add missing override and deprecated annotations;
  *  - Fix unchecked/rawtypes warnings (required by lint checks).
  *  - Allow to use underscores in hostnames.
+ *  - Use neutral Locale when converting to lower case.
  */
 /**
  * The interface for the URI(Uniform Resource Identifiers) version of RFC 2396.
@@ -280,7 +281,7 @@ public URI(String scheme, String schemeSpecificPart, String fragment)
         if (scheme == null) {
            throw new URIException(URIException.PARSING, "scheme required");
         }
-        char[] s = scheme.toLowerCase().toCharArray();
+        char[] s = scheme.toLowerCase(Locale.ROOT).toCharArray();
         if (validate(s, URI.scheme)) {
             _scheme = s; // is_absoluteURI
         } else {
@@ -1964,7 +1965,7 @@ protected void parseUriReference(String original, boolean escaped)
          * </pre></blockquote><p>
          */
         if (at > 0 && at < length && tmp.charAt(at) == ':') {
-            char[] target = tmp.substring(0, at).toLowerCase().toCharArray();
+            char[] target = tmp.substring(0, at).toLowerCase(Locale.ROOT).toCharArray();
             if (validate(target, scheme)) {
                 _scheme = target;
             } else {

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -363,9 +363,10 @@ private void setupLookAndFeel() {
         	OsXGui.setup();
         }else if (setLookAndFeel(getLookAndFeelClassname("Nimbus"))) {
                return;
-        }else {
-                setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
         }
+
+        setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
+   
 	}
 
     private static String getLookAndFeelClassname(String lookAndFeelName) {

File: src/org/parosproxy/paros/extension/option/OptionsViewPanel.java
Patch:
@@ -449,8 +449,8 @@ public void itemStateChanged(ItemEvent e) {
 		}
 		return chkOutputTabTimeStamping;
 	}
-
-
+	
+	
 	private JComboBox<String> getTimeStampsFormatSelect() {
 		if (timeStampsFormatSelect == null) {
 			String[] timeStampFormatStrings = {TIME_STAMP_FORMAT_DATETIME, TIME_STAMP_FORMAT_ISO8601, TIME_STAMP_FORMAT_TIMEONLY};

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -68,7 +68,7 @@
  * @since 2.4.2
  */
 public class GuiBootstrap extends ZapBootstrap {
-	
+
     private final static Logger logger = Logger.getLogger(GuiBootstrap.class);
 
     /**

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -178,6 +178,7 @@ protected void parse() {
 	    scaleImages = getBoolean(SCALE_IMAGES, true);
 	    showDevWarning = getBoolean(SHOW_DEV_WARNING, true);
 	    lookAndFeel = getString(LOOK_AND_FEEL,"");
+
 	    // Special cases - set via static methods
 	    LargeRequestUtil.setMinContentLength(largeRequestSize);
 	    LargeResponseUtil.setMinContentLength(largeResponseSize);

File: src/org/parosproxy/paros/extension/option/OptionsViewPanel.java
Patch:
@@ -450,7 +450,7 @@ public void itemStateChanged(ItemEvent e) {
 		return chkOutputTabTimeStamping;
 	}
 
-	
+
 	private JComboBox<String> getTimeStampsFormatSelect() {
 		if (timeStampsFormatSelect == null) {
 			String[] timeStampFormatStrings = {TIME_STAMP_FORMAT_DATETIME, TIME_STAMP_FORMAT_ISO8601, TIME_STAMP_FORMAT_TIMEONLY};

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -71,12 +71,13 @@ public class GuiBootstrap extends ZapBootstrap {
 	
     private final static Logger logger = Logger.getLogger(GuiBootstrap.class);
 
-    /**	
+    /**
     -     * Flag that indicates whether or not the look and feel was already set.
     -	  *
     -     * @see #setupLookAndFeel()
     -     */
     private boolean lookAndFeelSet;
+
     public GuiBootstrap(CommandLine cmdLineArgs) {
         super(cmdLineArgs);
     }
@@ -180,7 +181,7 @@ private void init(final boolean firstTime) {
         OptionsParamView viewParam = options.getViewParam();
 
         FontUtils.setDefaultFont(viewParam.getFontName(), viewParam.getFontSize());
-        
+
         setupLocale(options);
 
         if (viewParam.isUseSystemsLocaleForFormat()) {

File: src/org/parosproxy/paros/extension/option/OptionsViewPanel.java
Patch:
@@ -572,8 +572,8 @@ private JComboBox<String> getlookAndFeelSelect() {
 			lookAndFeel.setMaximumRowCount(5);
 			UIManager.LookAndFeelInfo[] looks = UIManager.getInstalledLookAndFeels();
 			lookAndFeel.addItem("");	// Default look 
-			for (UIManager.LookAndFeelInfo look : looks){
-				lookAndFeel.addItem(look.getName());
+			for(UIManager.LookAndFeelInfo look : looks){
+			    lookAndFeel.addItem(look.getName());
 			}
 		}
 		return lookAndFeel;

File: src/org/parosproxy/paros/network/HtmlParameter.java
Patch:
@@ -25,7 +25,7 @@
 
 public class HtmlParameter implements Comparable<HtmlParameter> {
 	public enum Type {
-		cookie, form, url, header
+		cookie, form, url, header, multipart
 	};
 
 	public enum Flags {

File: src/org/parosproxy/paros/network/HtmlParameter.java
Patch:
@@ -25,7 +25,7 @@
 
 public class HtmlParameter implements Comparable<HtmlParameter> {
 	public enum Type {
-		cookie, form, url, header
+		cookie, form, url, header, multipart
 	};
 
 	public enum Flags {

File: src/org/zaproxy/zap/extension/brk/impl/http/BreakAddEditDialog.java
Patch:
@@ -145,6 +145,9 @@ public String validateFields() {
 				return Constant.messages.getString("brk.brkpoint.error.regex"); 
 			}
 		}
+		if (this.getStringValue(FIELD_STRING).contains("#") && Location.url.equals(this.strToLoc(this.getStringValue(FIELD_LOCATION))) && Match.contains.equals(this.strToMatch(this.getStringValue(FIELD_MATCH)))) {
+			return Constant.messages.getString("brk.brkpoint.warn.urlfragment");
+		}
 		return null;
 	}
 	

File: src/org/zaproxy/zap/utils/I18N.java
Patch:
@@ -125,8 +125,7 @@ public void setLocale (Locale locale) {
 			return;
 		}
     	this.locale = locale;
-    	this.stdMessages = ResourceBundle.getBundle(Constant.MESSAGES_PREFIX, locale,
-                ResourceBundle.Control.getControl(ResourceBundle.Control.FORMAT_PROPERTIES));
+    	this.stdMessages = ResourceBundle.getBundle(Constant.MESSAGES_PREFIX, locale, new ZapResourceBundleControl());
     }
 
     

File: src/org/zaproxy/zap/utils/I18N.java
Patch:
@@ -125,8 +125,7 @@ public void setLocale (Locale locale) {
 			return;
 		}
     	this.locale = locale;
-    	this.stdMessages = ResourceBundle.getBundle(Constant.MESSAGES_PREFIX, locale,
-                ResourceBundle.Control.getControl(ResourceBundle.Control.FORMAT_PROPERTIES));
+    	this.stdMessages = ResourceBundle.getBundle(Constant.MESSAGES_PREFIX, locale, new ZapResourceBundleControl());
     }
 
     

File: src/org/parosproxy/paros/core/scanner/Kb.java
Patch:
@@ -23,6 +23,7 @@
 // ZAP: 2012/05/04 Catch CloneNotSupportedException whenever an Uri is cloned,
 //              as introduced with version 3.1 of HttpClient
 // ZAP: 2016/09/20 JavaDoc tweaks
+// ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 
 package org.parosproxy.paros.core.scanner;
 
@@ -104,7 +105,7 @@ public String getString(String key) {
 	public boolean getBoolean(String key) {
 	    Object obj = get(key);
 	    if (obj != null && obj instanceof Boolean) {
-	        return ((Boolean) obj).booleanValue();
+	        return (Boolean) obj;
 	        
 	    }
 	    return false;
@@ -188,7 +189,7 @@ public String getString(URI uri, String key) {
 	public boolean getBoolean(URI uri, String key) {
 	    Object obj = get(uri, key);
 	    if (obj != null && obj instanceof Boolean) {
-	        return ((Boolean) obj).booleanValue();
+	        return (Boolean) obj;
 	    }
 	    return false;
 	    

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -44,6 +44,7 @@
 // ZAP: 2016/10/24 Issue 2951:  Support active scan rule and scan max duration
 // ZAP: 2017/01/13 Exclude getExcludedParamList from the ZAP API 
 // ZAP: 2017/09/26 Use helper methods to read the configurations.
+// ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 
 package org.parosproxy.paros.core.scanner;
 
@@ -577,7 +578,7 @@ public void setScanHeadersAllRequests(boolean scanAllRequests) {
         }
 
         this.scanHeadersAllRequests = scanAllRequests;
-        getConfig().setProperty(SCAN_HEADERS_ALL_REQUESTS, Boolean.valueOf(this.scanHeadersAllRequests));
+        getConfig().setProperty(SCAN_HEADERS_ALL_REQUESTS, this.scanHeadersAllRequests);
     }
 
 }

File: src/org/parosproxy/paros/extension/filter/AllFilterTableModel.java
Patch:
@@ -27,6 +27,7 @@
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2017/12/28 Add deprecated annotation and JavaDoc tag.
+// ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 
 package org.parosproxy.paros.extension.filter;
 
@@ -106,7 +107,7 @@ public void setValueAt(Object value, int row, int col) {
         Filter filter = allFilters.get(row);
         switch (col) {
         	case 0:	break;
-        	case 1: filter.setEnabled(((Boolean) value).booleanValue());
+        	case 1: filter.setEnabled((Boolean) value);
         			fireTableCellUpdated(row, col);
         			break;
         	case 2: break;
@@ -134,7 +135,7 @@ public Object getValueAt(int row, int col) {
         	case 0:	result = filter.getName();
         			break;
         	case 1: // ZAP: Changed to use the method Boolean.valueOf.
-        			result = Boolean.valueOf(filter.isEnabled());
+        			result = filter.isEnabled();
         			break;
         	case 2: if (filter.isPropertyExists()) {
         	    		result = "...";

File: src/org/parosproxy/paros/extension/filter/FilterFactory.java
Patch:
@@ -23,6 +23,7 @@
 // ZAP: 2012/11/20 Issue 419: Restructure jar loading code
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2017/12/28 Add deprecated annotation and JavaDoc tag.
+// ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 
 package org.parosproxy.paros.extension.filter;
 
@@ -61,7 +62,7 @@ public void loadAllFilter() {
                 filter.setEnabled(false);
                 log.info("loaded filter " + filter.getName());
                 // ZAP: Changed to use Integer.valueOf.
-                mapAllFilter.put(Integer.valueOf(filter.getId()), filter);
+                mapAllFilter.put(filter.getId(), filter);
                
             }
             // ZAP: Added the type argument.

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -83,6 +83,7 @@
 // ZAP: 2017/11/16 Update the table on sessionChanged (Issue 3207).
 // ZAP: 2017/11/22 Delete just the history references selected (Issue 4065).
 // ZAP: 2018/01/29 Add getter to expose historyReferencesTable of History tab (Issue 4000).
+// ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 
 package org.parosproxy.paros.extension.history;
 
@@ -303,7 +304,7 @@ public void unregisterProxy(ProxyServer ps) {
 	public void removeFromHistoryList(final HistoryReference href) {
         if (!View.isInitialised() || EventQueue.isDispatchThread()) {
             this.historyTableModel.removeEntry(href.getHistoryId());
-            historyIdToRef.remove(Integer.valueOf(href.getHistoryId()));
+            historyIdToRef.remove(href.getHistoryId());
         } else {
             EventQueue.invokeLater(new Runnable() {
 
@@ -478,7 +479,7 @@ private void buildHistory(List<Integer> dbList, HistoryFilter historyFilter) {
 	        historyTableModel.clear();
 	        
 	        for (int i=0; i<dbList.size(); i++) {
-	            int historyId = (dbList.get(i)).intValue();
+	            int historyId = dbList.get(i);
 
 	            try {
 	            	SiteNode sn = getModel().getSession().getSiteTree().getSiteNode(historyId);

File: src/org/parosproxy/paros/extension/history/HistoryFilter.java
Patch:
@@ -84,7 +84,7 @@ public boolean matches(HistoryReference historyRef) {
 				return false;
 			}
 			if (codeList.size() > 0 &&  
-					! codeList.contains(Integer.valueOf(historyRef.getStatusCode()))) {
+					! codeList.contains(historyRef.getStatusCode())) {
 				return false;
 			}
 			boolean foundTag = false;
@@ -228,7 +228,7 @@ public String toLongString() {
 				if (lastCode == null) {
 					// very first one
 					sb.append(code);
-				} else if (code.intValue() == lastCode.intValue() + 1) {
+				} else if (code == lastCode + 1) {
 					// next in sequence
 					inBlock = true;
 				} else if (inBlock){

File: src/org/parosproxy/paros/extension/option/OptionsCertificatePanel.java
Patch:
@@ -33,6 +33,7 @@
 // ZAP: 2017/08/17 Reduce code duplication when showing cert/keystore errors
 // ZAP: 2017/12/12 Use first alias by default (Issue 3879).
 // ZAP: 2017/12/13 Do not allow to edit the name/key of active cert.
+// ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 
 package org.parosproxy.paros.extension.option;
 
@@ -598,12 +599,12 @@ private void addPkcs11ButtonActionPerformed(java.awt.event.ActionEvent evt) {//G
 				return;
 			}
 			
-			int slot = driverConfig.getSlots().get(indexSelectedDriver).intValue();
+			int slot = driverConfig.getSlots().get(indexSelectedDriver);
 			if (slot < 0) {
 				return;
 			}
 			
-			int slotListIndex = driverConfig.getSlotIndexes().get(indexSelectedDriver).intValue();
+			int slotListIndex = driverConfig.getSlotIndexes().get(indexSelectedDriver);
 			if (slotListIndex < 0) {
 				return;
 			}

File: src/org/parosproxy/paros/extension/option/OptionsParamCertificate.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2014/03/23 Issue 412: Enable unsafe SSL/TLS renegotiation option not saved
 // ZAP: 2014/08/14 Issue 1184: Improve support for IBM JDK
 // ZAP: 2017/09/26 Use helper methods to read the configurations.
+// ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 
 package org.parosproxy.paros.extension.option;
 
@@ -168,7 +169,7 @@ public void setAllowUnsafeSslRenegotiation(boolean allow) {
             allowUnsafeSslRenegotiation = allow;
 
             setAllowUnsafeSslRenegotiationSystemProperty(allowUnsafeSslRenegotiation);
-            getConfig().setProperty(ALLOW_UNSAFE_SSL_RENEGOTIATION, Boolean.valueOf(allowUnsafeSslRenegotiation));
+            getConfig().setProperty(ALLOW_UNSAFE_SSL_RENEGOTIATION, allowUnsafeSslRenegotiation);
         }
     }
 

File: src/org/parosproxy/paros/extension/option/ProxyExcludedDomainsTableModel.java
Patch:
@@ -67,9 +67,9 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     public Object getValueAt(int rowIndex, int columnIndex) {
         switch (columnIndex) {
         case 0:
-            return Boolean.valueOf(getElement(rowIndex).isEnabled());
+            return getElement(rowIndex).isEnabled();
         case 1:
-            return Boolean.valueOf(getElement(rowIndex).isRegex());
+            return getElement(rowIndex).isRegex();
         case 2:
             return getElement(rowIndex).getValue();
         }
@@ -79,7 +79,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
     @Override
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         if (columnIndex == 0 && aValue instanceof Boolean) {
-            excludedDomains.get(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+            excludedDomains.get(rowIndex).setEnabled((Boolean) aValue);
             fireTableCellUpdated(rowIndex, columnIndex);
         }
     }

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -56,6 +56,7 @@
 // ZAP: 2017/11/22 Expose method to create temporary nodes (Issue 4065).
 // ZAP: 2017/12/26 Remove redundant request header null checks.
 // ZAP: 2018/02/07 Set the HistoryReference into the temp node before adding it to the tree (Issue 4356).
+// ZAP: 2018/02/14 Remove unnecessary boxing / unboxing
 
 package org.parosproxy.paros.model;
 
@@ -696,7 +697,7 @@ public SiteNode getSiteNode (int href) {
     }
     
     public void removeHistoryReference(int historyId) {
-        hrefMap.remove(Integer.valueOf(historyId));
+        hrefMap.remove(historyId);
     }
 
     // returns a representation of the host name in the site map

File: src/org/zaproxy/zap/common/VersionedAbstractParam.java
Patch:
@@ -211,7 +211,7 @@ protected void updateConfigsFromVersion(int fileVersion) {
 
         updateConfigsImpl(fileVersion);
 
-        getConfig().setProperty(getConfigVersionKey(), Integer.valueOf(getCurrentVersion()));
+        getConfig().setProperty(getConfigVersionKey(), getCurrentVersion());
     }
 
     /**

File: src/org/zaproxy/zap/db/sql/SqlTableAlert.java
Patch:
@@ -329,7 +329,7 @@ public Vector<Integer> getAlertListBySession(long sessionId) throws DatabaseExce
 		    try (ResultSet rs = psGetAlertsForSession.getPs().executeQuery()) {
 		        while (rs.next()) {
 		            int alertId = rs.getInt(ALERTID);
-		            v.add(Integer.valueOf(alertId));
+		            v.add(alertId);
 		        }
 		    }
 		    return v;
@@ -348,7 +348,7 @@ public Vector<Integer> getAlertList() throws DatabaseException {
 		    Vector<Integer> v = new Vector<>();
 		    try (ResultSet rs = psGetAllAlertIds.getPs().executeQuery()) {
 		        while (rs.next()) {
-		            v.add(Integer.valueOf(rs.getInt(ALERTID)));
+		            v.add(rs.getInt(ALERTID));
 		        }
 		    }
 		    return v;

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -463,8 +463,8 @@ public void show(Component invoker, int x, int y) {
 							if (userObject instanceof Alert) {
 								HistoryReference historyReference = ((Alert) userObject).getHistoryRef();
 								if (historyReference != null && !historyReferenceIdsAdded
-										.contains(Integer.valueOf(historyReference.getHistoryId()))) {
-									historyReferenceIdsAdded.add(Integer.valueOf(historyReference.getHistoryId()));
+										.contains(historyReference.getHistoryId())) {
+									historyReferenceIdsAdded.add(historyReference.getHistoryId());
 									uniqueHistoryReferences.add(historyReference);
 								}
 							}
@@ -746,4 +746,4 @@ private JButton getDeleteAllButton() {
 		return deleteAllButton;
 	}
 
-}
\ No newline at end of file
+}

File: src/org/zaproxy/zap/extension/alert/AlertParam.java
Patch:
@@ -75,7 +75,7 @@ public void setMaximumInstances(int maximumInstances) {
         if (this.maximumInstances != newValue) {
             this.maximumInstances = newValue;
 
-            getConfig().setProperty(PARAM_MAXIMUM_INSTANCES, Integer.valueOf(this.maximumInstances));
+            getConfig().setProperty(PARAM_MAXIMUM_INSTANCES, this.maximumInstances);
         }
     }
 
@@ -94,7 +94,7 @@ public boolean isMergeRelatedIssues() {
 	public void setMergeRelatedIssues(boolean mergeRelatedIssues) {
 		if (this.mergeRelatedIssues != mergeRelatedIssues) {
 			this.mergeRelatedIssues = mergeRelatedIssues;
-            getConfig().setProperty(PARAM_MERGE_RELATED_ISSUES, Boolean.valueOf(mergeRelatedIssues));
+            getConfig().setProperty(PARAM_MERGE_RELATED_ISSUES, mergeRelatedIssues);
 		}
 	}
 

File: src/org/zaproxy/zap/extension/alert/OptionsAlertPanel.java
Patch:
@@ -160,7 +160,7 @@ public void saveParam(Object obj) throws Exception {
         final OptionsParam options = (OptionsParam) obj;
         final AlertParam param = options.getParamSet(AlertParam.class);
 
-        param.setMaximumInstances(getMaxInstances().getValue().intValue());
+        param.setMaximumInstances(getMaxInstances().getValue());
         param.setMergeRelatedIssues(getMergeRelatedIssues().isSelected());
         param.setOverridesFilename(getOverridesFilename().getText());
     }
@@ -195,4 +195,4 @@ public void actionPerformed(ActionEvent e) {
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -104,7 +104,7 @@ public void setTokens(List<AntiCsrfParamToken> tokens) {
             AntiCsrfParamToken token = tokens.get(i);
             
             getConfig().setProperty(elementBaseKey + TOKEN_NAME_KEY, token.getName());
-            getConfig().setProperty(elementBaseKey + TOKEN_ENABLED_KEY, Boolean.valueOf(token.isEnabled()));
+            getConfig().setProperty(elementBaseKey + TOKEN_ENABLED_KEY, token.isEnabled());
             
             if (token.isEnabled()) {
                 enabledTokens.add(token.getName());
@@ -176,7 +176,7 @@ public boolean isConfirmRemoveToken() {
     @ZapApiIgnore
     public void setConfirmRemoveToken(boolean confirmRemove) {
         this.confirmRemoveToken = confirmRemove;
-        getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, Boolean.valueOf(confirmRemoveToken));
+        getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);
     }
 
 }

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -339,7 +339,7 @@ public void sessionChanged(Session session) {
 			
 			AntiCsrfDetectScanner antiCsrfDetectScanner = new AntiCsrfDetectScanner(this);
 			for (Integer i : list) {
-				HistoryReference hRef = historyReferenceFactory.createHistoryReference(i.intValue());
+				HistoryReference hRef = historyReferenceFactory.createHistoryReference(i);
 				if (filter.matches(hRef)) {
 					HttpMessage msg = hRef.getHttpMessage();
 					String response = msg.getResponseHeader().toString() + 

File: src/org/zaproxy/zap/extension/anticsrf/OptionsAntiCsrfTableModel.java
Patch:
@@ -90,7 +90,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     public Object getValueAt(int rowIndex, int columnIndex) {
         switch(columnIndex) {
         case 0:
-            return Boolean.valueOf(getElement(rowIndex).isEnabled());
+            return getElement(rowIndex).isEnabled();
         case 1:
             return getElement(rowIndex).getName();
         }
@@ -101,7 +101,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         if (columnIndex == 0) {
             if (aValue instanceof Boolean) {
-                tokens.get(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+                tokens.get(rowIndex).setEnabled((Boolean) aValue);
                 fireTableCellUpdated(rowIndex, columnIndex);
             }
         }

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1584,7 +1584,7 @@ private void processAlerts(String baseUrl, int start, int count, int riskId, Pro
 
 			PaginationConstraintsChecker pcc = new PaginationConstraintsChecker(start, count);
 			for (int i = 0; i < v.size(); i++) {
-				int alertId = v.get(i).intValue();
+				int alertId = v.get(i);
 				RecordAlert recAlert = tableAlert.read(alertId);
 				Alert alert = new Alert(recAlert);
 
@@ -1625,7 +1625,7 @@ private void processHttpMessages(String baseUrl, int start, int count, Processor
 
 			PaginationConstraintsChecker pcc = new PaginationConstraintsChecker(start, count);
 			for (Integer id : historyIds) {
-				RecordHistory recHistory = tableHistory.read(id.intValue());
+				RecordHistory recHistory = tableHistory.read(id);
 
 				HttpMessage msg = recHistory.getHttpMessage();
 

File: src/org/zaproxy/zap/extension/api/PermittedAddressesTableModel.java
Patch:
@@ -67,9 +67,9 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     public Object getValueAt(int rowIndex, int columnIndex) {
         switch (columnIndex) {
         case 0:
-            return Boolean.valueOf(getElement(rowIndex).isEnabled());
+            return getElement(rowIndex).isEnabled();
         case 1:
-            return Boolean.valueOf(getElement(rowIndex).isRegex());
+            return getElement(rowIndex).isRegex();
         case 2:
             return getElement(rowIndex).getValue();
         }
@@ -79,7 +79,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
     @Override
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         if (columnIndex == 0 && aValue instanceof Boolean) {
-            addresses.get(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+            addresses.get(rowIndex).setEnabled((Boolean) aValue);
             fireTableCellUpdated(rowIndex, columnIndex);
         }
     }

File: src/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -194,7 +194,7 @@ public void resumeScan() {
 	public void alertFound(Alert alert) {
 		int alertId = alert.getAlertId();
 		if (alertId != -1) {
-			alerts.add(Integer.valueOf(alert.getAlertId()));
+			alerts.add(alert.getAlertId());
 		}
 	}
 
@@ -253,12 +253,12 @@ public void notifyNewMessage(final HttpMessage msg) {
 						HistoryReference.TYPE_SCANNER_TEMPORARY,
 						msg);
 				msg.setHistoryRef(null);
-				hRefs.add(Integer.valueOf(hRef.getHistoryId()));
+				hRefs.add(hRef.getHistoryId());
 			} catch (HttpMalformedHeaderException | DatabaseException e) {
 				log.error(e.getMessage(), e);
 			}
 		} else {
-			hRefs.add(Integer.valueOf(hRef.getHistoryId()));
+			hRefs.add(hRef.getHistoryId());
 		}
 		
 		this.rcTotals.incResponseCodeCount(msg.getResponseHeader().getStatusCode());

File: src/org/zaproxy/zap/extension/autoupdate/AddOnDependencyChecker.java
Patch:
@@ -991,7 +991,7 @@ public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         public List<AddOn> getSelectedAddOns() {
             List<AddOn> selectedAddOns = new ArrayList<>(selections.length);
             for (int i = 0; i < selections.length; i++) {
-                if (selections[i].booleanValue()) {
+                if (selections[i]) {
                     selectedAddOns.add(getAddOn(i));
                 }
             }

File: src/org/zaproxy/zap/extension/autoupdate/AddOnsTableModel.java
Patch:
@@ -240,7 +240,7 @@ public void updateDownloadsProgresses(ExtensionAutoUpdate extension) {
                     int progress = extension.getDownloadProgressPercent(url);
                     if (progress > 0) {
                         aow.setProgress(progress);
-                        rows.add(Integer.valueOf(idx));
+                        rows.add(idx);
                     }
                 } catch (Exception e) {
                     if (logger.isDebugEnabled()) {
@@ -269,7 +269,7 @@ public void run() {
                     @Override
                     public void run() {
                         for (Integer row : rows) {
-                            fireTableCellUpdated(row.intValue(), progressColumn);
+                            fireTableCellUpdated(row, progressColumn);
                         }
                     }
                 });
@@ -348,4 +348,4 @@ public AddOn searchAddOn(String id) {
             return getMissingAddOn(id);
         }
     }
-}
\ No newline at end of file
+}

File: src/org/zaproxy/zap/extension/autoupdate/InstalledAddOnsTableModel.java
Patch:
@@ -90,7 +90,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
         case COLUMN_ADD_ON_WRAPPER:
              return aow;
         case 0:
-            return Boolean.valueOf(aow.hasRunningIssues());
+            return aow.hasRunningIssues();
         case 1:
             return aow.getAddOn().getName();
         case 2:
@@ -129,7 +129,7 @@ public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
 
         if (aValue instanceof Boolean) {
             if (addOnWrapper.getInstallationStatus() != AddOn.InstallationStatus.DOWNLOADING) {
-                addOnWrapper.setEnabled(((Boolean) aValue).booleanValue());
+                addOnWrapper.setEnabled((Boolean) aValue);
                 this.fireTableCellUpdated(rowIndex, columnIndex);
             }
         }

File: src/org/zaproxy/zap/extension/autoupdate/OptionsParamCheckForUpdates.java
Patch:
@@ -106,7 +106,7 @@ protected void parse() {
 	private void updateOldOptions() {
 		try {
 			int oldValue = getConfig().getInt(CHECK_ON_START, 0);
-			getConfig().setProperty(CHECK_ON_START, Boolean.valueOf(oldValue != 0));
+			getConfig().setProperty(CHECK_ON_START, oldValue != 0);
 		} catch(ConversionException ignore) {
 			// Option already using boolean type.
 		}
@@ -119,7 +119,7 @@ private void updateOldOptions() {
 	 */
 	public void setCheckOnStart(boolean checkOnStart) {
 		this.checkOnStart = checkOnStart;
-		getConfig().setProperty(CHECK_ON_START, Boolean.valueOf(checkOnStart));
+		getConfig().setProperty(CHECK_ON_START, checkOnStart);
 		if (dayLastChecked.length() == 0) {
 			dayLastChecked = "Never";
 			getConfig().setProperty(DAY_LAST_CHECKED, dayLastChecked);

File: src/org/zaproxy/zap/extension/autoupdate/UninstallationProgressDialogue.java
Patch:
@@ -288,7 +288,7 @@ public void run() {
         } else {
             setCustomMessage(
                     Constant.messages
-                            .getString(keyBaseStatusMessage, Integer.valueOf(last.getValue()), Integer.valueOf(last.getMax())));
+                            .getString(keyBaseStatusMessage, last.getValue(), last.getMax()));
         }
     }
 

File: src/org/zaproxy/zap/extension/autoupdate/UninstalledAddOnsTableModel.java
Patch:
@@ -81,7 +81,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
         case COLUMN_ADD_ON_WRAPPER:
             return getAddOnWrapper(rowIndex);
         case 0:
-            return Boolean.valueOf(getAddOnWrapper(rowIndex).hasRunningIssues());
+            return getAddOnWrapper(rowIndex).hasRunningIssues();
         case 1:
         	return View.getSingleton().getStatusUI(getAddOnWrapper(rowIndex).getAddOn().getStatus());
         case 2:
@@ -111,7 +111,7 @@ public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         if (columnIndex == 5
                 && getAddOnWrapper(rowIndex).getInstallationStatus() != AddOn.InstallationStatus.DOWNLOADING) {
             if (aValue instanceof Boolean) {
-                getAddOnWrapper(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+                getAddOnWrapper(rowIndex).setEnabled((Boolean) aValue);
                 this.fireTableCellUpdated(rowIndex, columnIndex);
             }
         }

File: src/org/zaproxy/zap/extension/brk/BreakPanel.java
Patch:
@@ -253,7 +253,7 @@ public boolean isToBeDropped() {
 	@Override
 	public void breakpointDisplayed () {
 		final Boolean alwaysOnTopOption = breakpointsParams.getAlwaysOnTop();
-		if (alwaysOnTopOption == null || alwaysOnTopOption.booleanValue()) {
+		if (alwaysOnTopOption == null || alwaysOnTopOption) {
 		
 			java.awt.EventQueue.invokeLater(new Runnable() {
 				@Override
@@ -269,7 +269,7 @@ public void run() {
 						boolean keepOn = View.getSingleton().showConfirmDialog(
 								Constant.messages.getString("brk.alwaysOnTop.message")) ==
 									JOptionPane.OK_OPTION;
-						breakpointsParams.setAlwaysOnTop(Boolean.valueOf(keepOn));
+						breakpointsParams.setAlwaysOnTop(keepOn);
 						if (! keepOn) {
 							// Turn it off
 							View.getSingleton().getMainFrame().setAlwaysOnTop(false);
@@ -567,4 +567,4 @@ public JComponent getComponent() {
 			return toolBar;
 		}
 	}
-}
\ No newline at end of file
+}

File: src/org/zaproxy/zap/extension/brk/BreakPanelToolbarFactory.java
Patch:
@@ -541,7 +541,7 @@ public SelectableAbstractAction(String name, Icon icon) {
          * @param selected {@code true} if the action should be selected, {@code false} otherwise
          */
         public void setSelected(boolean selected) {
-            putValue(Action.SELECTED_KEY, Boolean.valueOf(selected));
+            putValue(Action.SELECTED_KEY, selected);
         }
     }
 

File: src/org/zaproxy/zap/extension/brk/BreakpointsParam.java
Patch:
@@ -95,7 +95,7 @@ public boolean isConfirmDropMessage() {
     public void setConfirmDropMessage(boolean confirmDrop) {
         if (confirmDropMessage != confirmDrop) {
             this.confirmDropMessage = confirmDrop;
-            getConfig().setProperty(PARAM_CONFIRM_DROP_MESSAGE_KEY, Boolean.valueOf(confirmDrop));
+            getConfig().setProperty(PARAM_CONFIRM_DROP_MESSAGE_KEY, confirmDrop);
         }
     }
 

File: src/org/zaproxy/zap/extension/encoder2/EncodeDecodeParam.java
Patch:
@@ -54,7 +54,7 @@ public boolean isBase64DoBreakLines() {
 
 	public void setBase64DoBreakLines(boolean base64OuputBreak) {
 		this.base64DoBreakLines = base64OuputBreak;
-		getConfig().setProperty(PARAM_BASE64_DO_BREAK_LINES, Boolean.valueOf(base64OuputBreak));
+		getConfig().setProperty(PARAM_BASE64_DO_BREAK_LINES, base64OuputBreak);
 	}
 
 }

File: src/org/zaproxy/zap/extension/globalexcludeurl/GlobalExcludeURLParam.java
Patch:
@@ -219,7 +219,7 @@ public void setTokens(List<GlobalExcludeURLParamToken> tokens) {
             
             getConfig().setProperty(elementBaseKey + TOKEN_REGEX_KEY, token.getRegex());
             getConfig().setProperty(elementBaseKey + TOKEN_DESCRIPTION_KEY, token.getDescription());
-            getConfig().setProperty(elementBaseKey + TOKEN_ENABLED_KEY, Boolean.valueOf(token.isEnabled()));
+            getConfig().setProperty(elementBaseKey + TOKEN_ENABLED_KEY, token.isEnabled());
             
             if (token.isEnabled()) {
                 enabledTokens.add(token.getRegex());
@@ -257,7 +257,7 @@ public boolean isConfirmRemoveToken() {
     @ZapApiIgnore
     public void setConfirmRemoveToken(boolean confirmRemove) {
         this.confirmRemoveToken = confirmRemove;
-        getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, Boolean.valueOf(confirmRemoveToken));
+        getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);
     }
 
 }

File: src/org/zaproxy/zap/extension/globalexcludeurl/OptionsGlobalExcludeURLTableModel.java
Patch:
@@ -95,7 +95,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     public Object getValueAt(int rowIndex, int columnIndex) {
         switch(columnIndex) {
         case 0:
-            return Boolean.valueOf(getElement(rowIndex).isEnabled());
+            return getElement(rowIndex).isEnabled();
         case 1:
             return getElement(rowIndex).getDescription();
         case 2:
@@ -108,7 +108,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         if (columnIndex == 0) {
             if (aValue instanceof Boolean) {
-                tokens.get(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+                tokens.get(rowIndex).setEnabled((Boolean) aValue);
                 fireTableCellUpdated(rowIndex, columnIndex);
             }
         }

File: src/org/zaproxy/zap/extension/httppanel/component/split/request/RequestSplitComponent.java
Patch:
@@ -263,7 +263,7 @@ public void loadConfig(FileConfiguration fileConfiguration) {
 
 	@Override
 	public void saveConfig(FileConfiguration fileConfiguration) {
-		Model.getSingleton().getOptionsParam().getConfig().setProperty(configurationKey + DIVIDER_LOCATION_CONFIG_KEY, Integer.valueOf(splitMain.getDividerLocation()));
+		Model.getSingleton().getOptionsParam().getConfig().setProperty(configurationKey + DIVIDER_LOCATION_CONFIG_KEY, splitMain.getDividerLocation());
 		
 		headerViews.saveConfig(fileConfiguration);
 		bodyViews.saveConfig(fileConfiguration);

File: src/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/AutoDetectSyntaxHttpPanelTextArea.java
Patch:
@@ -74,6 +74,6 @@ public void loadConfiguration(String key, FileConfiguration fileConfiguration) {
 	public void saveConfiguration(String key, FileConfiguration fileConfiguration) {
 		super.saveConfiguration(key, fileConfiguration);
 		
-		fileConfiguration.setProperty(key + "syntax." + AUTO_DETECT, Boolean.valueOf(isAutoDetectSyntax));
+		fileConfiguration.setProperty(key + "syntax." + AUTO_DETECT, isAutoDetectSyntax);
 	}
 }

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsPanel.java
Patch:
@@ -529,7 +529,7 @@ protected Icon getIcon(final Object cellItem) {
 
 		@Override
 		protected boolean isHighlighted(final Object cellItem) {
-			return ((Boolean) cellItem).booleanValue();
+			return (Boolean) cellItem;
 		}
 	}
 }

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsParam.java
Patch:
@@ -152,7 +152,7 @@ public void setDefaultTokens(final List<HttpSessionToken> tokens) {
 			HttpSessionToken token = tokens.get(i);
 			
 			getConfig().setProperty(elementBaseKey + TOKEN_NAME_KEY, token.getName());
-			getConfig().setProperty(elementBaseKey + TOKEN_ENABLED_KEY, Boolean.valueOf(token.isEnabled()));
+			getConfig().setProperty(elementBaseKey + TOKEN_ENABLED_KEY, token.isEnabled());
 			
 			if (token.isEnabled()) {
 				enabledTokens.add(token.getName());
@@ -179,7 +179,7 @@ public boolean isEnabledProxyOnly() {
 	 */
 	public void setEnabledProxyOnly(boolean enabledProxyOnly) {
 		this.enabledProxyOnly = enabledProxyOnly;
-		getConfig().setProperty(PROXY_ONLY_KEY, Boolean.valueOf(enabledProxyOnly));
+		getConfig().setProperty(PROXY_ONLY_KEY, enabledProxyOnly);
 	}
 	
 	@ZapApiIgnore
@@ -190,6 +190,6 @@ public boolean isConfirmRemoveDefaultToken() {
 	@ZapApiIgnore
 	public void setConfirmRemoveDefaultToken(boolean confirmRemove) {
 		this.confirmRemove = confirmRemove;
-		getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, Boolean.valueOf(confirmRemove));
+		getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemove);
 	}
 }

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsSite.java
Patch:
@@ -223,7 +223,7 @@ public void unsetActiveSession() {
 	private String generateUniqueSessionName() {
 		String name;
 		do {
-			name = Constant.messages.getString("httpsessions.session.defaultName", Integer.valueOf(lastGeneratedSessionID++));
+			name = Constant.messages.getString("httpsessions.session.defaultName", lastGeneratedSessionID++);
 		} while (!isSessionNameUnique(name));
 
 		return name;

File: src/org/zaproxy/zap/extension/httpsessions/OptionsHttpSessionsTableModel.java
Patch:
@@ -103,7 +103,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
 	public Object getValueAt(int rowIndex, int columnIndex) {
 		switch(columnIndex) {
 		case 0:
-			return Boolean.valueOf(getElement(rowIndex).isEnabled());
+			return getElement(rowIndex).isEnabled();
 		case 1:
 			return getElement(rowIndex).getName();
 		}
@@ -114,7 +114,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
 	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
 		if (columnIndex == 0) {
 			if (aValue instanceof Boolean) {
-				tokens.get(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+				tokens.get(rowIndex).setEnabled((Boolean) aValue);
 				fireTableCellUpdated(rowIndex, columnIndex);
 			}
 		}

File: src/org/zaproxy/zap/extension/proxies/OptionsProxiesTableModel.java
Patch:
@@ -90,7 +90,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     public Object getValueAt(int rowIndex, int columnIndex) {
         switch(columnIndex) {
         case 0:
-            return Boolean.valueOf(getElement(rowIndex).isEnabled());
+            return getElement(rowIndex).isEnabled();
         case 1:
             return getElement(rowIndex).getAddress();
         case 2:
@@ -104,7 +104,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         if (columnIndex == 0) {
             if (aValue instanceof Boolean) {
-                proxies.get(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+                proxies.get(rowIndex).setEnabled((Boolean) aValue);
                 fireTableCellUpdated(rowIndex, columnIndex);
             }
         }

File: src/org/zaproxy/zap/extension/pscan/OptionsPassiveScanTableModel.java
Patch:
@@ -90,7 +90,7 @@ public Class<?> getColumnClass(int columnIndex) {
     public Object getValueAt(int rowIndex, int columnIndex) {
         switch (columnIndex) {
         case 0:
-            return Boolean.valueOf(getElement(rowIndex).isEnabled());
+            return getElement(rowIndex).isEnabled();
         case 1:
             return getElement(rowIndex).getName();
         case 2:
@@ -105,7 +105,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         if (columnIndex == 0) {
             if (aValue instanceof Boolean) {
-                getElement(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+                getElement(rowIndex).setEnabled((Boolean) aValue);
                 fireTableCellUpdated(rowIndex, columnIndex);
             }
         }

File: src/org/zaproxy/zap/extension/pscan/PassiveScanAPI.java
Patch:
@@ -109,7 +109,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			String paramId = params.getString(PARAM_ID);
 			int pluginId;
 			try {
-				pluginId = Integer.valueOf(paramId.trim()).intValue();
+				pluginId = Integer.valueOf(paramId.trim());
 			} catch (NumberFormatException e) {
 				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_ID);
 			}
@@ -132,7 +132,7 @@ private void setPluginPassiveScannersEnabled(JSONObject params, boolean enabled)
 		if (ids.length > 0) {
 			for (String id : ids) {
 				try {
-					int pluginId = Integer.valueOf(id.trim()).intValue();
+					int pluginId = Integer.valueOf(id.trim());
 					if (pluginId > 0) {
 						extension.setPluginPassiveScannerEnabled(pluginId, enabled);
 					}

File: src/org/zaproxy/zap/extension/pscan/PassiveScanParam.java
Patch:
@@ -112,7 +112,7 @@ public void setAutoTagScanners(List<RegexAutoTagScanner> scanners) {
             getConfig().setProperty(elementBaseKey + AUTO_TAG_SCANNER_REQ_HEAD_REGEX_KEY, scanner.getRequestHeaderRegex());
             getConfig().setProperty(elementBaseKey + AUTO_TAG_SCANNER_RES_HEAD_REGEX_KEY, scanner.getResponseHeaderRegex());
             getConfig().setProperty(elementBaseKey + AUTO_TAG_SCANNER_RES_BODY_REGEX_KEY, scanner.getResponseBodyRegex());
-            getConfig().setProperty(elementBaseKey + AUTO_TAG_SCANNER_ENABLED_KEY, Boolean.valueOf(scanner.isEnabled()));
+            getConfig().setProperty(elementBaseKey + AUTO_TAG_SCANNER_ENABLED_KEY, scanner.isEnabled());
         }
     }
     
@@ -128,7 +128,7 @@ public boolean isConfirmRemoveAutoTagScanner() {
     @ZapApiIgnore
     public void setConfirmRemoveAutoTagScanner(boolean confirmRemove) {
         this.confirmRemoveAutoTagScanner = confirmRemove;
-        getConfig().setProperty(CONFIRM_REMOVE_AUTO_TAG_SCANNER_KEY, Boolean.valueOf(confirmRemoveAutoTagScanner));
+        getConfig().setProperty(CONFIRM_REMOVE_AUTO_TAG_SCANNER_KEY, confirmRemoveAutoTagScanner);
     }
     
     /**
@@ -142,7 +142,7 @@ public void setConfirmRemoveAutoTagScanner(boolean confirmRemove) {
      */
     public void setScanOnlyInScope(boolean scanOnlyInScope) {
         this.scanOnlyInScope = scanOnlyInScope;
-        getConfig().setProperty(SCAN_ONLY_IN_SCOPE_KEY, Boolean.valueOf(scanOnlyInScope));
+        getConfig().setProperty(SCAN_ONLY_IN_SCOPE_KEY, scanOnlyInScope);
     }
 
     /**

File: src/org/zaproxy/zap/extension/script/ScriptParam.java
Patch:
@@ -137,7 +137,7 @@ public void saveScripts() {
 	            getConfig().setProperty(elementBaseKey + SCRIPT_DESC_KEY, script.getDescription());
 	            getConfig().setProperty(elementBaseKey + SCRIPT_ENGINE_KEY, script.getEngineName());
 	            getConfig().setProperty(elementBaseKey + SCRIPT_TYPE_KEY, script.getTypeName());
-	            getConfig().setProperty(elementBaseKey + SCRIPT_ENABLED_KEY, Boolean.valueOf(script.isEnabled()));
+	            getConfig().setProperty(elementBaseKey + SCRIPT_ENABLED_KEY, script.isEnabled());
 	            getConfig().setProperty(elementBaseKey + SCRIPT_FILE_KEY, script.getFile().getAbsolutePath());
 	            i++;
         	}

File: src/org/zaproxy/zap/extension/search/OptionsSearchPanel.java
Patch:
@@ -102,11 +102,11 @@ public void saveParam(Object obj) throws Exception {
         final OptionsParam options = (OptionsParam) obj;
         final SearchParam param = options.getParamSet(SearchParam.class);
 
-        param.setMaximumSearchResultsGUI(numberSpinnerMaxSearchResultsGUI.getValue().intValue());
+        param.setMaximumSearchResultsGUI(numberSpinnerMaxSearchResultsGUI.getValue());
     }
 
     @Override
     public String getHelpIndex() {
         return "ui.dialogs.options.search";
     }
-}
\ No newline at end of file
+}

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -286,7 +286,7 @@ private void search(JSONObject params, ExtensionSearch.Type searchType, SearchRe
 		TableHistory tableHistory = Model.getSingleton().getDb().getTableHistory();
 		for (Integer hRefId : searchListener.getHistoryReferencesIds()) {
 			try {
-				processor.processRecordHistory(tableHistory.read(hRefId.intValue()));
+				processor.processRecordHistory(tableHistory.read(hRefId));
 			} catch (DatabaseException | HttpMalformedHeaderException e) {
 				log.error(e.getMessage(), e);
 			}
@@ -312,7 +312,7 @@ public ApiSearchListener() {
 
 		@Override
 		public void addSearchResult(SearchResult sr) {
-			historyReferencesIds.add(Integer.valueOf(sr.getMessage().getHistoryRef().getHistoryId()));
+			historyReferencesIds.add(sr.getMessage().getHistoryRef().getHistoryId());
 		}
 
 		@Override

File: src/org/zaproxy/zap/extension/search/SearchPanel.java
Patch:
@@ -363,7 +363,7 @@ private JLabel getNumberOfMatchesLabel() {
 	}
 
 	private void setNumberOfMatches(int numberOfMatches) {
-		numberOfMatchesLabel.setText(numberOfMatchesFormat.format(new Object[] { Integer.valueOf(numberOfMatches) }));
+		numberOfMatchesLabel.setText(numberOfMatchesFormat.format(new Object[] {numberOfMatches}));
 	}
 
 	private TableExportButton<SearchResultsTable> getExportButton() {
@@ -667,4 +667,4 @@ public String toString() {
             return name;
         }
     }
-}
\ No newline at end of file
+}

File: src/org/zaproxy/zap/extension/search/SearchParam.java
Patch:
@@ -83,7 +83,7 @@ public void setMaximumSearchResultsGUI(int maximumSearchResultsGUI) {
         if (this.maximumSearchResultsGUI != maximumSearchResultsGUI) {
             this.maximumSearchResultsGUI = maximumSearchResultsGUI;
 
-            getConfig().setProperty(PARAM_MAXIMUM_RESULTS_GUI, Integer.valueOf(maximumSearchResultsGUI));
+            getConfig().setProperty(PARAM_MAXIMUM_RESULTS_GUI, maximumSearchResultsGUI);
         }
     }
 

File: src/org/zaproxy/zap/extension/search/SearchResultsTable.java
Patch:
@@ -78,7 +78,7 @@ public List<HistoryReference> getSelectedHistoryReferences() {
         for (int selectedRow : selectedRows) {
             HistoryReference historyReference = getHistoryReferenceAtViewRow(selectedRow);
             if (historyReference != null) {
-                Integer id = Integer.valueOf(historyReference.getHistoryId());
+                Integer id = historyReference.getHistoryId();
                 if (!historyReferenceIdsAdded.contains(id)) {
                     historyReferenceIdsAdded.add(id);
                     uniqueHistoryReferences.add(historyReference);

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -135,7 +135,7 @@ private void search() {
 				if (stopSearch) {
 					break;
 				}
-			    int historyId = list.get(index).intValue();
+			    int historyId = list.get(index);
 			    try {
 			            currentRecordId = index;
 			        	// Create the href to ensure the msg is set up correctly

File: src/org/zaproxy/zap/extension/spider/DomainsAlwaysInScopeTableModel.java
Patch:
@@ -67,9 +67,9 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     public Object getValueAt(int rowIndex, int columnIndex) {
         switch (columnIndex) {
         case 0:
-            return Boolean.valueOf(getElement(rowIndex).isEnabled());
+            return getElement(rowIndex).isEnabled();
         case 1:
-            return Boolean.valueOf(getElement(rowIndex).isRegex());
+            return getElement(rowIndex).isRegex();
         case 2:
             return getElement(rowIndex).getValue();
         }
@@ -79,7 +79,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
     @Override
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         if (columnIndex == 0 && aValue instanceof Boolean) {
-            domainsInScope.get(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+            domainsInScope.get(rowIndex).setEnabled((Boolean) aValue);
             fireTableCellUpdated(rowIndex, columnIndex);
         }
     }

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -634,7 +634,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 			String url;
 			for (Integer id : ids) {
 				try {
-					RecordHistory rh = tableHistory.read(id.intValue());
+					RecordHistory rh = tableHistory.read(id);
 					if (rh != null) {
 						url = rh.getHttpMessage().getRequestHeader().getURI().toString();
 						if (urlSet.add(url)) {

File: src/org/zaproxy/zap/extension/spider/SpiderMessagesTableModel.java
Patch:
@@ -121,7 +121,7 @@ public void addHistoryReference(HistoryReference historyReference, boolean proce
             @Override
             public void run() {
                 final int row = resources.size();
-                idsToRows.put(Integer.valueOf(entry.getHistoryId()), Integer.valueOf(row));
+                idsToRows.put(Integer.valueOf(entry.getHistoryId()), row);
                 resources.add(entry);
                 fireTableRowsInserted(row, row);
             }
@@ -187,9 +187,9 @@ public SpiderTableEntry getEntryWithHistoryId(int historyReferenceId) {
 
     @Override
     public int getEntryRowIndex(int historyReferenceId) {
-        final Integer row = idsToRows.get(Integer.valueOf(historyReferenceId));
+        final Integer row = idsToRows.get(historyReferenceId);
         if (row != null) {
-            return row.intValue();
+            return row;
         }
         return -1;
     }

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -529,7 +529,7 @@ public ProcessedCellItemIconHighlighter(final int columnIndex) {
 
 		@Override
 		protected Icon getIcon(final Object cellItem) {
-			return getProcessedIcon(((Boolean) cellItem).booleanValue());
+			return getProcessedIcon((Boolean) cellItem);
 		}
 
 		private static Icon getProcessedIcon(final boolean processed) {

File: src/org/zaproxy/zap/extension/stats/StatsParam.java
Patch:
@@ -70,7 +70,7 @@ public boolean isInMemoryEnabled() {
 
 	public void setInMemoryEnabled(boolean inMemory) {
 		this.inMemory = inMemory;
-        getConfig().setProperty(IN_MEMORY_STATS_KEY, Boolean.valueOf(inMemory));
+        getConfig().setProperty(IN_MEMORY_STATS_KEY, inMemory);
 	}
 
     public boolean isStatsdEnabled() {

File: src/org/zaproxy/zap/extension/users/UsersTableModel.java
Patch:
@@ -155,7 +155,7 @@ public String getColumnName(int column) {
 	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
 		if (columnIndex == 0) {
 			if (aValue instanceof Boolean) {
-				users.get(rowIndex).setEnabled(((Boolean) aValue).booleanValue());
+				users.get(rowIndex).setEnabled((Boolean) aValue);
 				fireTableCellUpdated(rowIndex, columnIndex);
 			}
 		}

File: src/org/zaproxy/zap/view/ZapTable.java
Patch:
@@ -149,7 +149,7 @@ public void setAutoScrollOnNewValues(boolean autoScroll) {
         this.autoScroll = autoScroll;
 
         if (autoScrollAction != null) {
-            autoScrollAction.putValue(Action.SELECTED_KEY, Boolean.valueOf(autoScroll));
+            autoScrollAction.putValue(Action.SELECTED_KEY, autoScroll);
         }
 
         if (this.autoScroll) {

File: src/org/zaproxy/zap/view/table/AbstractCustomColumnHistoryReferencesTableModel.java
Patch:
@@ -53,7 +53,7 @@ private static Map<Integer, Integer> buildCacheColumnIdxToIdxCustomColumnsOnly(C
         int countCustomColumns = 0;
         for (int columnIndex = 0; columnIndex < columns.length; ++columnIndex) {
             if (isCustomColumn(columns, columnIndex)) {
-                tempCustomColumnIndexesMap.put(Integer.valueOf(columnIndex), Integer.valueOf(countCustomColumns));
+                tempCustomColumnIndexesMap.put(columnIndex, countCustomColumns);
                 ++countCustomColumns;
             }
         }
@@ -194,9 +194,9 @@ public Object getPrototypeValue(int columnIndex) {
      * @return the custom column index as if no default columns existed or -1 if not a custom column.
      */
     protected int getCustomColumnIndex(int columnIndex) {
-        Integer customColumnIndex = cacheColumnIdxToIdxCustomColumnsOnly.get(Integer.valueOf(columnIndex));
+        Integer customColumnIndex = cacheColumnIdxToIdxCustomColumnsOnly.get(columnIndex);
         if (customColumnIndex != null) {
-            return customColumnIndex.intValue();
+            return customColumnIndex;
         }
         return -1;
     }

File: src/org/zaproxy/zap/view/table/AbstractHistoryReferencesTableModel.java
Patch:
@@ -82,7 +82,7 @@ public AbstractHistoryReferencesTableModel(Column[] columns) {
     private Map<Column, Integer> buildCacheColumnToColumnIdx(Column[] columns) {
         Map<Column, Integer> cache = new TreeMap<>();
         for (int i = 0; i < columns.length; i++) {
-            cache.put(columns[i], Integer.valueOf(i));
+            cache.put(columns[i], i);
         }
         return cache;
     }
@@ -121,7 +121,7 @@ public Column getColumn(int columnIndex) {
     public int getColumnIndex(Column column) {
         Integer idx = cacheColumnToColumnIdx.get(column);
         if (idx != null) {
-            return idx.intValue();
+            return idx;
         }
         return -1;
     }

File: src/org/zaproxy/zap/view/table/DefaultHistoryReferencesTableModel.java
Patch:
@@ -122,7 +122,7 @@ public Object getPrototypeValue(Column column) {
     public void addEntry(final DefaultHistoryReferencesTableEntry historyReference) {
         hrefList.add(historyReference);
         RowIndex rowIndex = new RowIndex(hrefList.size() - 1);
-        historyIdToRow.put(Integer.valueOf(historyReference.getHistoryReference().getHistoryId()), rowIndex);
+        historyIdToRow.put(historyReference.getHistoryReference().getHistoryId(), rowIndex);
         rowIndexes.add(rowIndex);
         fireTableRowsInserted(rowIndex.getValue(), rowIndex.getValue());
     }
@@ -153,7 +153,7 @@ public void refreshEntryRows() {
 
     @Override
     public void removeEntry(final int historyReferenceId) {
-        Integer key = Integer.valueOf(historyReferenceId);
+        Integer key = historyReferenceId;
         RowIndex rowIndex = historyIdToRow.get(key);
         if (rowIndex != null) {
             hrefList.remove(rowIndex.getValue());
@@ -207,7 +207,7 @@ public void clear() {
 
     @Override
     public int getEntryRowIndex(final int historyReferenceId) {
-        final RowIndex rowIndex = historyIdToRow.get(Integer.valueOf(historyReferenceId));
+        final RowIndex rowIndex = historyIdToRow.get(historyReferenceId);
         if (rowIndex != null) {
             return rowIndex.getValue();
         }

File: src/org/zaproxy/zap/view/table/decorator/NoteTableCellItemIconHighlighter.java
Patch:
@@ -33,7 +33,7 @@ public NoteTableCellItemIconHighlighter(final int columnIndex) {
 
     @Override
     protected Icon getIcon(final Object cellItem) {
-        return getAlertIcon(((Boolean) cellItem).booleanValue());
+        return getAlertIcon((Boolean) cellItem);
     }
 
     private static Icon getAlertIcon(final boolean hasNote) {
@@ -45,6 +45,6 @@ private static Icon getAlertIcon(final boolean hasNote) {
 
     @Override
     protected boolean isHighlighted(final Object cellItem) {
-        return ((Boolean) cellItem).booleanValue();
+        return (Boolean) cellItem;
     }
 }

File: test/org/zaproxy/zap/users/UsersTableModelUnitTest.java
Patch:
@@ -184,8 +184,8 @@ public void shouldReturnUserIdFromSecondColumn() {
         UsersTableModel usersTableModel = new UsersTableModel(usersList);
         // Then
         assertTrue(usersTableModel.getColumnClass(1) == Integer.class);
-        assertThat(usersTableModel.getValueAt(0, 1), is(equalTo((Object) Integer.valueOf(user1Id))));
-        assertThat(usersTableModel.getValueAt(1, 1), is(equalTo((Object) Integer.valueOf(user2Id))));
+        assertThat(usersTableModel.getValueAt(0, 1), is(equalTo((Object) user1Id)));
+        assertThat(usersTableModel.getValueAt(1, 1), is(equalTo((Object) user2Id)));
     }
 
     @Test
@@ -244,7 +244,7 @@ public void shouldNotChangeUsersEnabledStateIfNonBooleanOrFirstColumn() {
         UsersTableModel usersTableModel = new UsersTableModel(usersList);
         usersTableModel.addTableModelListener(listener);
         // When
-        usersTableModel.setValueAt(Integer.valueOf(15), 0, 0);
+        usersTableModel.setValueAt(15, 0, 0);
         usersTableModel.setValueAt("Some Value", 1, 0);
         usersTableModel.setValueAt(true, 1, 1);
         // Then

File: src/org/parosproxy/paros/CommandLine.java
Patch:
@@ -227,7 +227,7 @@ public void parse(List<CommandLineArgument[]> commandList, Map<String, CommandLi
 
         }
 
-        // check if the last keyword satified its no. of parameters.
+        // check if the last keyword satisfied its no. of parameters.
         if (lastArg != null && remainingValueCount > 0) {
             throw new Exception("Missing parameters for keyword '" + lastArg.getName() + "'.");
         }

File: src/org/parosproxy/paros/control/MenuToolsControl.java
Patch:
@@ -53,7 +53,7 @@ public MenuToolsControl() {
 	}
 	
 	public MenuToolsControl(Model model, View view, Control control) {
-	    // best use explicit class contructor
+	    // best use explicit class constructor
 	    this.model = model;
 	    this.view = view;
 	    this.control = control;

File: src/org/parosproxy/paros/core/scanner/Analyser.java
Patch:
@@ -424,7 +424,7 @@ public boolean isFileExist(HttpMessage msg) {
 	// check if any analysed result.
         if (sample == null) {
             if (msg.getResponseHeader().getStatusCode() == HttpStatusCode.OK) {
-                // no anlaysed result to confirm, assume file exist and return
+                // no analysed result to confirm, assume file exist and return
                 return true;
             } else {
                 return false;

File: src/org/parosproxy/paros/core/scanner/ScannerParamFilter.java
Patch:
@@ -120,7 +120,7 @@ public final void setWildcardedUrl(String wildcardedUrl) {
     /**
      * Check if the parameter should be excluded by the scanner
      * @param msg the message that is currently under scanning
-     * @param param the Value/Name param object thta is currently under scanning 
+     * @param param the Value/Name param object that is currently under scanning
      * @return true if the parameter should be excluded
      */
     public boolean isToExclude(HttpMessage msg, NameValuePair param) {

File: src/org/parosproxy/paros/core/scanner/VariantURLPath.java
Patch:
@@ -149,7 +149,7 @@ private String setParameter(HttpMessage msg, NameValuePair originalPair, String
                     uri.setEscapedPath(path);
 
                 } catch (URIException e) {
-                    // Looks like it wasnt escaped after all
+                    // Looks like it wasn't escaped after all
                     uri.setPath(path);                    
                 }
             }

File: src/org/parosproxy/paros/core/scanner/VariantURLQuery.java
Patch:
@@ -52,7 +52,7 @@ public VariantURLQuery() {
     protected String getEscapedValue(HttpMessage msg, String value) {
         // ZAP: unfortunately the method setQuery() defined inside the httpclient Apache component
         // create trouble when special characters like ?+? are set inside the parameter, 
-        // because this method implementation simply doesn?t encode them.
+        // because this method implementation simply doesn't encode them.
         // So we have to explicitly encode values using the URLEncoder component before setting it.
         return (value != null) ? 
                 AbstractPlugin.getURLEncode(value) : "";

File: src/org/parosproxy/paros/extension/filter/FilterDetectMalciousContent.java
Patch:
@@ -171,7 +171,7 @@ private void checkMaliciousCode(HttpMessage msg) {
 			}
 		}
 		
-		// check malicous body 
+		// check malicious body
 		for (int i=0; i<patternBadBodyList.length; i++){
 			bad = patternBadBodyList[i];
 			matcher = bad.matcher(txtBody);

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -142,7 +142,7 @@ private  void initialize() {
 
 	@Override
 	public void tabSelected() {
-		// Give the history list focus so that the user can immediatelly use the arrow keys to navigate
+		// Give the history list focus so that the user can immediately use the arrow keys to navigate
 	    getHistoryReferenceTable().requestFocusInWindow();
 	}
 

File: src/org/parosproxy/paros/extension/history/ProxyListenerLog.java
Patch:
@@ -54,7 +54,7 @@ public class ProxyListenerLog implements ProxyListener, ConnectRequestProxyListe
     private static final Logger log = Logger.getLogger(ProxyListenerLog.class);
 
     // ZAP: Must be the last one of all listeners to be notified, as is the one that saves the HttpMessage 
-	// to the DB and must let other listeners change ase' and testthe HttpMessage before saving it.
+	// to the DB and must let other listeners change and test the HttpMessage before saving it.
     // Note: other listeners can be notified after this one but they shouldn't change the HttpMessage 
     // as that changes will not be saved to the DB.
     public static final int PROXY_LISTENER_ORDER = 5000;

File: src/org/parosproxy/paros/extension/report/ReportGenerator.java
Patch:
@@ -314,7 +314,7 @@ public static String entityEncode(String text) {
 			return result;
 		}
 
-		// The escapeXml function doesnt cope with some 'special' chrs
+		// The escapeXml function doesn't cope with some 'special' chrs
 
 		return StringEscapeUtils.escapeXml(XMLStringUtil.escapeControlChrs(result));
 	}

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -189,7 +189,7 @@ public void clear() {
 
     /**
      * Get the first header value using the name given. If there are multiple
-     * occurence, only the first one will be returned as String.
+     * occurrence, only the first one will be returned as String.
      *
      * @param name
      * @return the header value. null if not found.

File: src/org/parosproxy/paros/network/HttpResponseHeader.java
Patch:
@@ -298,7 +298,7 @@ private List<HttpCookie> parseCookieString (String c, String defaultDomain) {
 		} catch (IllegalArgumentException e) {
 			if (c.indexOf(',') >= 0) {
 				try {
-					// Some sites seem to use comma separators, which HttpCookie doesnt like, try replacing them
+					// Some sites seem to use comma separators, which HttpCookie doesn't like, try replacing them
 					List<HttpCookie> parsedCookies = HttpCookie.parse(c.replace(',', ';'));
 					if (defaultDomain != null) {
 						for (HttpCookie cookie : parsedCookies) {

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -711,7 +711,7 @@ private void setCommonManagerParams(MultiThreadedHttpConnectionManager mgr) {
 	 * replaceAll("Transfer-Encoding: chunked\r\n", ""); msg.setResponseHeader(resHeader);
 	 * msg.getResponseBody().setCharset(resHeader.getCharset()); msg.getResponseBody().setLength(0);
 	 * 
-	 * // process response for each listner
+	 * // process response for each listener
 	 * 
 	 * pipe.write(msg.getResponseHeader()); pipe.flush();
 	 * 

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -434,7 +434,7 @@ public void showSplashScreen() {
     }
 
     /**
-     * Close the curren splash screen and remove all resources
+     * Close the current splash screen and remove all resources
      */
     public void hideSplashScreen() {
         if (splashScreen != null) {
@@ -444,7 +444,7 @@ public void hideSplashScreen() {
     }
     
     /**
-     * Set the curent loading completion
+     * Set the current loading completion
      * @param percentage the percentage of completion from 0 to 100
      */
     public void setSplashScreenLoadingCompletion(double percentage) {
@@ -454,7 +454,7 @@ public void setSplashScreenLoadingCompletion(double percentage) {
     }
     
     /**
-     * Add the curent loading completion
+     * Add the current loading completion
      * @param percentage the percentage of completion from 0 to 100 that need to be added
      */
     public void addSplashScreenLoadingCompletion(double percentage) {

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -230,7 +230,7 @@ public void run() {
                     // ExtensionHelp.showHelp();
 
                 } else {
-                    // Dont auto check for updates the first time, no chance of any
+                    // Don't auto check for updates the first time, no chance of any
                     // proxy having been set
                     final ExtensionAutoUpdate eau = Control.getSingleton()
                             .getExtensionLoader().getExtension(ExtensionAutoUpdate.class);
@@ -400,7 +400,7 @@ private void setupLocale(OptionsParam options) {
         String locale = options.getViewParam().getConfigLocale();
         if (locale == null || locale.length() == 0) {
 
-            // Dont use a parent of the MainFrame - that will initialise it
+            // Don't use a parent of the MainFrame - that will initialise it
             // with English!
             final Locale userloc = determineUsersSystemLocale();
             if (userloc == null) {

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -1269,7 +1269,7 @@ public boolean canLoadInVersion(String zapVersion) {
 		}
 		
 		if (zrc.compare(notBeforeRelease, v2_4) < 0) {
-			// Dont load any add-ons that imply they are prior to 2.4.0 - they probably wont work
+			// Don't load any add-ons that imply they are prior to 2.4.0 - they probably wont work
 			return false;
 		}
 		if (this.notFromVersion != null && this.notFromVersion.length() > 0) {

File: src/org/zaproxy/zap/control/AddOnCollection.java
Patch:
@@ -197,7 +197,7 @@ private void addDirectory (File dir) throws Exception {
                                     add = false;
                                 }
 		            		} else {
-		            			// Same or older version, dont include
+		            			// Same or older version, don't include
 		                    	logger.debug("Addon " + ao.getId() + " version " + ao.getVersion() + 
 		                    			" not latest.");
 		            			add = false;

File: src/org/zaproxy/zap/extension/api/ApiImplementor.java
Patch:
@@ -278,7 +278,7 @@ public ApiResponse handleApiOptionAction(String name, JSONObject params) throws
 							}
 						}
 						if (val == null) {
-							// Value supplied doesnt match the type - try the next one
+							// Value supplied doesn't match the type - try the next one
 							continue;
 						}
 						method.invoke(this.param, val);

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1578,7 +1578,7 @@ private void processAlerts(String baseUrl, int start, int count, int riskId, Pro
 		List<Alert> alerts = new ArrayList<>();
 		try {
 			TableAlert tableAlert = Model.getSingleton().getDb().getTableAlert();
-        	// TODO this doesnt work, but should be used when its fixed :/
+        	// TODO this doesn't work, but should be used when its fixed :/
 			//Vector<Integer> v = tableAlert.getAlertListBySession(Model.getSingleton().getSession().getSessionId());
 			Vector<Integer> v = tableAlert.getAlertList();
 

File: src/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -83,7 +83,7 @@ public class ActiveScanController implements ScanController<ActiveScan> {
 	
 	/**
 	 * An ordered list of all of the {@code ActiveScan}s created (and not yet removed). Used to get provide the 'last'
-	 * scan for client using the 'old' API that didnt support concurrent scans. 
+	 * scan for client using the 'old' API that didn't support concurrent scans.
 	 */
 	private List<ActiveScan> activeScanList;
 

File: src/org/zaproxy/zap/extension/ascan/ChallengeCallbackAPI.java
Patch:
@@ -56,7 +56,7 @@ public abstract class ChallengeCallbackAPI extends ApiImplementor {
             = Collections.synchronizedMap(new TreeMap<String, RegisteredCallback>());
 
     /**
-     * Default contructor
+     * Default constructor
      */
     public ChallengeCallbackAPI() {
          addApiShortcut(getPrefix());

File: src/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -156,7 +156,7 @@ public void windowClosed(WindowEvent e) {
 
     public void init(Target target) {
         if (target != null) {
-            // If one isnt specified then leave the previously selected one
+            // If one isn't specified then leave the previously selected one
             this.target = target;
         }
         

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -166,7 +166,7 @@ public void hook(ExtensionHook extensionHook) {
         extensionHook.addSessionListener(this);
 
         extensionHook.addOptionsParamSet(getScannerParam());
-        // TODO this isnt currently implemented
+        // TODO this isn't currently implemented
         //extensionHook.addCommandLine(getCommandLineArguments());
 
         ExtensionScript extScript = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);

File: src/org/zaproxy/zap/extension/authentication/AuthenticationAPI.java
Patch:
@@ -181,7 +181,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 
 	/**
 	 * Gets the sets the method action implementor or throws a Missing Parameter exception, if any
-	 * problems occured.
+	 * problems occurred.
 	 * 
 	 * @param params the params
 	 * @return the sets the method action implementor

File: src/org/zaproxy/zap/extension/autoupdate/Downloader.java
Patch:
@@ -87,7 +87,7 @@ private void downloadFile() {
     	FileOutputStream out = null;
 	    try {
 	    	/*
-	    	 * The following code may be more efficient, but doesnt give us the option
+	    	 * The following code may be more efficient, but doesn't give us the option
 	    	 * of cancelling downloads.
 	    	 *
 			 * ReadableByteChannel rbc = Channels.newChannel(url.openStream());

File: src/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -226,7 +226,7 @@ private JPanel getCorePanel(boolean update) {
 							java.awt.Color.black));
 
 			if (latestInfo == null || this.latestInfo.getZapRelease() == null) {
-				// Havnt checked for updatees yet
+				// Haven't checked for updates yet
 				corePanel.add(new JLabel(this.currentVersion), LayoutHelper.getGBC(0, 0, 1, 0.0D));
 				corePanel.add(new JLabel(""), LayoutHelper.getGBC(1, 0, 1, 1.0D));
 				corePanel.add(this.getCheckForUpdatesButton(), LayoutHelper.getGBC(2, 0, 1, 0.0D));

File: src/org/zaproxy/zap/extension/autoupdate/OptionsCheckForUpdatesPanel.java
Patch:
@@ -306,7 +306,7 @@ private void repopulatDownloadDirs() {
 				downloadDir.addItem(f.getAbsolutePath());
 			}
 		}
-		// The selected item may no longer exist, but thats ok as it will correctly default to the first one
+		// The selected item may no longer exist, but that's ok as it will correctly default to the first one
 		getDownloadDirCombo().setSelectedItem(selectedItem);
 	}
 	

File: src/org/zaproxy/zap/extension/callback/CallbackParam.java
Patch:
@@ -61,7 +61,7 @@ private String getDefaultAddress() {
         for (String addr : addrs) {
             if (!addr.contains(":") && !addr.equals("localhost")
                     && !addr.equals("127.0.0.1")) {
-                // Return the first IPv4 one thats not localhost
+                // Return the first IPv4 one that's not localhost
                 return addr;
             }
         }

File: src/org/zaproxy/zap/extension/callback/OptionsCallbackPanel.java
Patch:
@@ -207,7 +207,7 @@ public void initParam(Object obj) {
         if (proxyParam.getPort() == 0) {
             getRandomPort().setSelected(true);
             getSpinnerPort().setEnabled(false);
-            getSpinnerPort().setValue(ext.getPort());   // As 0 isnt a valid port
+            getSpinnerPort().setValue(ext.getPort());   // As 0 isn't a valid port
         } else {
             getSpinnerPort().setEnabled(true);
             getSpinnerPort().setValue(proxyParam.getPort());

File: src/org/zaproxy/zap/extension/encoder2/ExtensionEncoder2.java
Patch:
@@ -94,7 +94,7 @@ private void showEncodeDecodeDialog(JTextComponent lastInvoker) {
             encodeDecodeDialog = new EncodeDecodeDialog();
             encodeDecodeDialog.updateOptions(getParams());
             /*
-            // TODO doesnt work yet
+            // TODO doesn't work yet
             ExtensionHelp.enablePopupHelpKey(
             		encodeDecodeDialog, 
                     "ui.tabs.break");

File: src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
Patch:
@@ -476,7 +476,7 @@ public void sessionChanged(Session session) {
 
     private void startPassiveScanThread() {
         if (passiveScanEnabled && pst == null) {
-            // Will create a new thread if one doesnt exist
+            // Will create a new thread if one doesn't exist
             getPassiveScanThread();
         }
     }

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -146,7 +146,7 @@ private void search() {
 			        		continue;
 			        	}
 			        	if (this.baseUrl != null && ! message.getRequestHeader().getURI().toString().startsWith(baseUrl)) {
-			        		// doesnt start with the specified baseurl
+			        		// doesn't start with the specified baseurl
 			        		continue;
 			        	}
 				

File: src/org/zaproxy/zap/extension/sessions/SessionManagementAPI.java
Patch:
@@ -142,7 +142,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 
 	/**
 	 * Gets the sets the method action implementor or throws a Missing Parameter exception, if any
-	 * problems occured.
+	 * problems occurred.
 	 * 
 	 * @param params the params
 	 * @return the sets the method action implementor
@@ -159,7 +159,7 @@ private ApiDynamicActionImplementor getSetMethodActionImplementor(JSONObject par
 
 	/**
 	 * Gets the context from the parameters or throws a Missing Parameter exception, if any problems
-	 * occured.
+	 * occurred.
 	 * 
 	 * @param params the params
 	 * @return the context
@@ -175,7 +175,7 @@ private Context getContext(JSONObject params) throws ApiException {
 
 	/**
 	 * Gets the context id from the parameters or throws a Missing Parameter exception, if any
-	 * problems occured.
+	 * problems occurred.
 	 * 
 	 * @param params the params
 	 * @return the context id

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -104,7 +104,7 @@ public SpiderDialog(ExtensionSpider ext, Frame owner, Dimension dim) {
 
     public void init(Target target) {
         if (target != null) {
-        	// If one isnt specified then leave the previously selected one
+        	// If one isn't specified then leave the previously selected one
         	this.target = target;
         }
         logger.debug("init " + this.target);
@@ -335,7 +335,7 @@ public void save() {
 		}
         
         if (target == null || ! this.getStringValue(FIELD_START).equals(getTargetText(target))) {
-       		// Clear the target as it doesnt match the value entered manually
+       		// Clear the target as it doesn't match the value entered manually
 			target = new Target((StructuralNode)null);
         }
         

File: src/org/zaproxy/zap/extension/spider/SpiderScanController.java
Patch:
@@ -80,7 +80,7 @@ public class SpiderScanController implements ScanController<SpiderScan> {
 	
 	/**
 	 * An ordered list of all of the {@code SpiderScan}s created (and not yet removed). Used to get provide the 'last'
-	 * scan for client using the 'old' API that didnt support concurrent scans. 
+	 * scan for client using the 'old' API that didn't support concurrent scans.
 	 */
 	private List<SpiderScan> spiderScanList;
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextMenuItemHolder.java
Patch:
@@ -29,7 +29,7 @@ public abstract class PopupContextMenuItemHolder extends ExtensionPopupMenuMessa
 
 	/**
 	 * The sub menus. Used only in the case it is not visible itself, to keep a reference to what popup menus
-	 * it has added in the parent, so it can dinamically update them before each show.
+	 * it has added in the parent, so it can dynamically update them before each show.
 	 */
 	private List<ExtensionPopupMenuItem> subMenuItems = null;
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupUserMenuItemHolder.java
Patch:
@@ -52,7 +52,7 @@ public abstract class PopupUserMenuItemHolder extends ExtensionPopupMenuMessageC
 
 	/**
 	 * The sub menus. Used only in the case it is not visible itself, to keep a reference to what
-	 * popup menus it has added in the parent, so it can dinamically update them before each show.
+	 * popup menus it has added in the parent, so it can dynamically update them before each show.
 	 */
 	private List<ExtensionPopupMenuItem> subMenuItems = null;
 

File: src/org/zaproxy/zap/extension/uiutils/ExtensionUiUtils.java
Patch:
@@ -33,7 +33,7 @@
 import org.parosproxy.paros.view.View;
 
 /**
- * This extension was introduced so that the session persist and snapshot menu iteam and buttons 
+ * This extension was introduced so that the session persist and snapshot menu item and buttons
  * can be enabled and disabled when appropriate.
  * It much easier doing this in an extension rather than the UI components. 
  * @author psiinon

File: src/org/zaproxy/zap/extension/users/UsersAPI.java
Patch:
@@ -273,7 +273,7 @@ private User getUser(JSONObject params) throws ApiException {
 
 	/**
 	 * Gets the context id from the parameters or throws a Missing Parameter exception, if any
-	 * problems occured.
+	 * problems occurred.
 	 * 
 	 * @param params the params
 	 * @return the context id

File: src/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -374,23 +374,23 @@ private boolean arrayKeyValueExists(String key, String value) {
 	 * not encoded.
 	 * 
 	 * @param uri the string of the uri
-	 * @return the URI, or null if an error occured and the URI could not be constructed.
+	 * @return the URI, or null if an error occurred and the URI could not be constructed.
 	 */
 	private URI createURI(String uri) {
 		URI uriV = null;
 		try {
 			// Try to see if we can create the URI, considering it's encoded.
 			uriV = new URI(uri, true);
 		} catch (URIException e) {
-			// An error occured, so try to create the URI considering it's not encoded.
+			// An error occurred, so try to create the URI considering it's not encoded.
 			try {
 				log.debug("Second try...");
 				uriV = new URI(uri, false);
 			} catch (Exception ex) {
 				log.error("Error while converting to uri: " + uri, ex);
 				return null;
 			}
-			// A non URIException occured, so just ignore the URI
+			// A non URIException occurred, so just ignore the URI
 		} catch (Exception e) {
 			log.error("Error while converting to uri: " + uri, e);
 			return null;

File: src/org/zaproxy/zap/utils/FontUtils.java
Patch:
@@ -84,7 +84,7 @@ public static void setDefaultFont(Font font) {
 	
 	public static void setDefaultFont(String name, int size) {
 		// A blank font name works fine.
-		// For some reason getting the default font name doesnt work - it doesnt seem to get applied everywhere
+		// For some reason getting the default font name doesn't work - it doesn't seem to get applied everywhere
 		// No ideas why :/
 		if (size <= 5) {
 			size = getDefaultFont().getSize();
@@ -133,7 +133,7 @@ public static Font getFont (String name, int style) {
 	}
 	
 	/**
-	 * Gets the default font with the specified sytle and size, correctly scaled
+	 * Gets the default font with the specified style and size, correctly scaled
 	 * @param style
 	 * @param size
 	 * @return
@@ -143,7 +143,7 @@ public static Font getFont (int style, Size size) {
 	}
 	
 	/**
-	 * Gets the specified font with the specified sytle and size, correctly scaled
+	 * Gets the specified font with the specified style and size, correctly scaled
 	 * @param style
 	 * @param size
 	 * @since 2.7.0

File: src/org/zaproxy/zap/utils/I18N.java
Patch:
@@ -95,7 +95,7 @@ public String getHtmlWrappedString(String key) {
     
     /**
      * Returns the specified char from the language file. 
-     * As these are typically used for mnemnoics the 'null' char is returned if the key is not defined 
+     * As these are typically used for mnemonics the 'null' char is returned if the key is not defined
      * @param key the key of the char
      * @return the char read, or null char if not found
      */

File: src/org/zaproxy/zap/view/ContextCreateDialog.java
Patch:
@@ -52,7 +52,7 @@ public ContextCreateDialog(Frame owner) {
 	public void siteNodeSelected(String field, SiteNode node) {
 		topNode = node;
 		if (node != null && this.isEmptyField(NAME_FIELD)) {
-			// They havnt chosen a context name yet, default to the name of the node they chose
+			// They haven't chosen a context name yet, default to the name of the node they chose
 			this.setFieldValue(NAME_FIELD, node.getNodeName());
 		}
 	}

File: src/org/zaproxy/zap/view/HighlightSearchEntry.java
Patch:
@@ -5,7 +5,7 @@
 import org.zaproxy.zap.extension.search.SearchMatch;
 
 /*
- * A search entry, which allows to highlight all occurences of a 
+ * A search entry, which allows to highlight all occurrences of a
  * string in a textarea.
  * 
  * Consists of:

File: src/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -167,7 +167,7 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
 	            checkBox.setOpaque(cn.isSelected && cn.hasChildren && ! cn.allChildrenSelected);
 	        	checkBox.setVisible(true);
 	        	checkBox.setEnabled(true);
-	        	/* Looks ok, but doesnt work correctly
+	        	/* Looks ok, but doesn't work correctly
 	            if (cn.isSelected && cn.hasChildren && ! cn.allChildrenSelected) {
 	                checkBox.getModel().setPressed(true);
 	                checkBox.getModel().setArmed(true);

File: src/org/zaproxy/zap/view/OptionsConnectionPanel.java
Patch:
@@ -236,7 +236,7 @@ public void saveParam(Object obj) throws Exception {
 
 	    connectionParam.setProxyChainRealm(txtProxyChainRealm.getText());
 	    connectionParam.setProxyChainUserName(txtProxyChainUserName.getText());
-	    // Make sure this isnt saved in the config file
+	    // Make sure this isn't saved in the config file
 	    connectionParam.setProxyChainPassword(
 	    		new String(txtProxyChainPassword.getPassword()), false);
 	}

File: src/org/zaproxy/zap/view/PersistSessionDialog.java
Patch:
@@ -66,7 +66,7 @@ public PersistSessionDialog(Frame owner) {
 	private void initialize() {
         this.setContentPane(getJPanel());
         this.pack();
-        // Disable the escape key - they have to amke a choice!
+        // Disable the escape key - they have to make a choice!
         getRootPane().getActionMap().put("ESCAPE", null);
 
 	}

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -595,7 +595,7 @@ public static String cleanSiteName(String site, boolean incPort) {
 		}
                 // does site already contain port number ?
                 if(site.indexOf(":")>=0) {
-                    if (! incPort) { // We dont't want the port number, strip it off
+                    if (! incPort) { // We don't want the port number, strip it off
 			site = site.substring(0, site.indexOf(":"));
                     } // otherwise keep it                   
                 } else { // The site does not contain the port number

File: src/org/zaproxy/zap/view/ScanPanel2.java
Patch:
@@ -54,7 +54,7 @@
 import org.zaproxy.zap.utils.SortedComboBoxModel;
 
 /*
- * This is a cleaner version of ScanPanel which doesnt mix functionality and the UI.
+ * This is a cleaner version of ScanPanel which doesn't mix functionality and the UI.
  * Implemented as a new set of classes for backwards compatibility with existing add-ons
  */
 public abstract class ScanPanel2<GS extends GenericScanner2, SC extends ScanController<GS>> extends AbstractPanel {

File: src/org/zaproxy/zap/view/SiteMapTreeCellRenderer.java
Patch:
@@ -92,7 +92,7 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
 	            return this;
 	        }
 
-			setPreferredSize(null);	// clears the prefered size, making the node visible
+			setPreferredSize(null);	// clears the preferred size, making the node visible
 			super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
 
 			// folder / file icons with scope 'target' if relevant

File: src/org/zaproxy/zap/view/TabbedPanel2.java
Patch:
@@ -201,15 +201,15 @@ public void setVisible(Component c, boolean visible) {
 			if (this.removedTabList.contains(c)) {
 				
 				if (c instanceof AbstractPanel) {
-					// Dont use the addTab(AbstractPanel) methods as we need to force visibility
+					// Don't use the addTab(AbstractPanel) methods as we need to force visibility
 					AbstractPanel panel = (AbstractPanel)c;
 					this.addTab(c.getName(), panel.getIcon(), panel, panel.isHideable(), true, panel.getTabIndex());
 				} else {
 					// Work out the index to add it back in
 					int index = this.fullTabList.indexOf(c);
 					while (index >= 0) {
 						if (index > 0 && ! this.removedTabList.contains(this.fullTabList.get(index -1))) {
-							// Found the first preceding tab that isnt hidden
+							// Found the first preceding tab that isn't hidden
 							break;
 						}
 						index--;

File: src/org/zaproxy/zap/view/popup/PopupMenuItemContextDataDrivenNode.java
Patch:
@@ -74,7 +74,7 @@ public void performAction(SiteNode sn) {
         while (!parent.getParent().isRoot()) {
         	sb.insert(0, "/");
         	if (parent.isDataDriven()) {
-        		// Dont want these in their own regex group
+        		// Don't want these in their own regex group
         		sb.insert(0, ".+?");
         	} else {
         		sb.insert(0, parent.getCleanNodeName());

File: src/org/parosproxy/paros/CommandLine.java
Patch:
@@ -227,7 +227,7 @@ public void parse(List<CommandLineArgument[]> commandList, Map<String, CommandLi
 
         }
 
-        // check if the last keyword satified its no. of parameters.
+        // check if the last keyword satisfied its no. of parameters.
         if (lastArg != null && remainingValueCount > 0) {
             throw new Exception("Missing parameters for keyword '" + lastArg.getName() + "'.");
         }

File: src/org/parosproxy/paros/control/MenuToolsControl.java
Patch:
@@ -53,7 +53,7 @@ public MenuToolsControl() {
 	}
 	
 	public MenuToolsControl(Model model, View view, Control control) {
-	    // best use explicit class contructor
+	    // best use explicit class constructor
 	    this.model = model;
 	    this.view = view;
 	    this.control = control;

File: src/org/parosproxy/paros/core/scanner/Analyser.java
Patch:
@@ -424,7 +424,7 @@ public boolean isFileExist(HttpMessage msg) {
 	// check if any analysed result.
         if (sample == null) {
             if (msg.getResponseHeader().getStatusCode() == HttpStatusCode.OK) {
-                // no anlaysed result to confirm, assume file exist and return
+                // no analysed result to confirm, assume file exist and return
                 return true;
             } else {
                 return false;

File: src/org/parosproxy/paros/core/scanner/ScannerParamFilter.java
Patch:
@@ -120,7 +120,7 @@ public final void setWildcardedUrl(String wildcardedUrl) {
     /**
      * Check if the parameter should be excluded by the scanner
      * @param msg the message that is currently under scanning
-     * @param param the Value/Name param object thta is currently under scanning 
+     * @param param the Value/Name param object that is currently under scanning
      * @return true if the parameter should be excluded
      */
     public boolean isToExclude(HttpMessage msg, NameValuePair param) {

File: src/org/parosproxy/paros/core/scanner/VariantURLPath.java
Patch:
@@ -149,7 +149,7 @@ private String setParameter(HttpMessage msg, NameValuePair originalPair, String
                     uri.setEscapedPath(path);
 
                 } catch (URIException e) {
-                    // Looks like it wasnt escaped after all
+                    // Looks like it wasn't escaped after all
                     uri.setPath(path);                    
                 }
             }

File: src/org/parosproxy/paros/core/scanner/VariantURLQuery.java
Patch:
@@ -52,7 +52,7 @@ public VariantURLQuery() {
     protected String getEscapedValue(HttpMessage msg, String value) {
         // ZAP: unfortunately the method setQuery() defined inside the httpclient Apache component
         // create trouble when special characters like ?+? are set inside the parameter, 
-        // because this method implementation simply doesn?t encode them.
+        // because this method implementation simply doesn't encode them.
         // So we have to explicitly encode values using the URLEncoder component before setting it.
         return (value != null) ? 
                 AbstractPlugin.getURLEncode(value) : "";

File: src/org/parosproxy/paros/extension/filter/FilterDetectMalciousContent.java
Patch:
@@ -171,7 +171,7 @@ private void checkMaliciousCode(HttpMessage msg) {
 			}
 		}
 		
-		// check malicous body 
+		// check malicious body
 		for (int i=0; i<patternBadBodyList.length; i++){
 			bad = patternBadBodyList[i];
 			matcher = bad.matcher(txtBody);

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -142,7 +142,7 @@ private  void initialize() {
 
 	@Override
 	public void tabSelected() {
-		// Give the history list focus so that the user can immediatelly use the arrow keys to navigate
+		// Give the history list focus so that the user can immediately use the arrow keys to navigate
 	    getHistoryReferenceTable().requestFocusInWindow();
 	}
 

File: src/org/parosproxy/paros/extension/history/ProxyListenerLog.java
Patch:
@@ -54,7 +54,7 @@ public class ProxyListenerLog implements ProxyListener, ConnectRequestProxyListe
     private static final Logger log = Logger.getLogger(ProxyListenerLog.class);
 
     // ZAP: Must be the last one of all listeners to be notified, as is the one that saves the HttpMessage 
-	// to the DB and must let other listeners change ase' and testthe HttpMessage before saving it.
+	// to the DB and must let other listeners change and test the HttpMessage before saving it.
     // Note: other listeners can be notified after this one but they shouldn't change the HttpMessage 
     // as that changes will not be saved to the DB.
     public static final int PROXY_LISTENER_ORDER = 5000;

File: src/org/parosproxy/paros/extension/report/ReportGenerator.java
Patch:
@@ -314,7 +314,7 @@ public static String entityEncode(String text) {
 			return result;
 		}
 
-		// The escapeXml function doesnt cope with some 'special' chrs
+		// The escapeXml function doesn't cope with some 'special' chrs
 
 		return StringEscapeUtils.escapeXml(XMLStringUtil.escapeControlChrs(result));
 	}

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -189,7 +189,7 @@ public void clear() {
 
     /**
      * Get the first header value using the name given. If there are multiple
-     * occurence, only the first one will be returned as String.
+     * occurrence, only the first one will be returned as String.
      *
      * @param name
      * @return the header value. null if not found.

File: src/org/parosproxy/paros/network/HttpResponseHeader.java
Patch:
@@ -298,7 +298,7 @@ private List<HttpCookie> parseCookieString (String c, String defaultDomain) {
 		} catch (IllegalArgumentException e) {
 			if (c.indexOf(',') >= 0) {
 				try {
-					// Some sites seem to use comma separators, which HttpCookie doesnt like, try replacing them
+					// Some sites seem to use comma separators, which HttpCookie doesn't like, try replacing them
 					List<HttpCookie> parsedCookies = HttpCookie.parse(c.replace(',', ';'));
 					if (defaultDomain != null) {
 						for (HttpCookie cookie : parsedCookies) {

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -711,7 +711,7 @@ private void setCommonManagerParams(MultiThreadedHttpConnectionManager mgr) {
 	 * replaceAll("Transfer-Encoding: chunked\r\n", ""); msg.setResponseHeader(resHeader);
 	 * msg.getResponseBody().setCharset(resHeader.getCharset()); msg.getResponseBody().setLength(0);
 	 * 
-	 * // process response for each listner
+	 * // process response for each listener
 	 * 
 	 * pipe.write(msg.getResponseHeader()); pipe.flush();
 	 * 

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -434,7 +434,7 @@ public void showSplashScreen() {
     }
 
     /**
-     * Close the curren splash screen and remove all resources
+     * Close the current splash screen and remove all resources
      */
     public void hideSplashScreen() {
         if (splashScreen != null) {
@@ -444,7 +444,7 @@ public void hideSplashScreen() {
     }
     
     /**
-     * Set the curent loading completion
+     * Set the current loading completion
      * @param percentage the percentage of completion from 0 to 100
      */
     public void setSplashScreenLoadingCompletion(double percentage) {
@@ -454,7 +454,7 @@ public void setSplashScreenLoadingCompletion(double percentage) {
     }
     
     /**
-     * Add the curent loading completion
+     * Add the current loading completion
      * @param percentage the percentage of completion from 0 to 100 that need to be added
      */
     public void addSplashScreenLoadingCompletion(double percentage) {

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -230,7 +230,7 @@ public void run() {
                     // ExtensionHelp.showHelp();
 
                 } else {
-                    // Dont auto check for updates the first time, no chance of any
+                    // Don't auto check for updates the first time, no chance of any
                     // proxy having been set
                     final ExtensionAutoUpdate eau = Control.getSingleton()
                             .getExtensionLoader().getExtension(ExtensionAutoUpdate.class);
@@ -400,7 +400,7 @@ private void setupLocale(OptionsParam options) {
         String locale = options.getViewParam().getConfigLocale();
         if (locale == null || locale.length() == 0) {
 
-            // Dont use a parent of the MainFrame - that will initialise it
+            // Don't use a parent of the MainFrame - that will initialise it
             // with English!
             final Locale userloc = determineUsersSystemLocale();
             if (userloc == null) {

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -1269,7 +1269,7 @@ public boolean canLoadInVersion(String zapVersion) {
 		}
 		
 		if (zrc.compare(notBeforeRelease, v2_4) < 0) {
-			// Dont load any add-ons that imply they are prior to 2.4.0 - they probably wont work
+			// Don't load any add-ons that imply they are prior to 2.4.0 - they probably wont work
 			return false;
 		}
 		if (this.notFromVersion != null && this.notFromVersion.length() > 0) {

File: src/org/zaproxy/zap/control/AddOnCollection.java
Patch:
@@ -197,7 +197,7 @@ private void addDirectory (File dir) throws Exception {
                                     add = false;
                                 }
 		            		} else {
-		            			// Same or older version, dont include
+		            			// Same or older version, don't include
 		                    	logger.debug("Addon " + ao.getId() + " version " + ao.getVersion() + 
 		                    			" not latest.");
 		            			add = false;

File: src/org/zaproxy/zap/extension/api/ApiImplementor.java
Patch:
@@ -278,7 +278,7 @@ public ApiResponse handleApiOptionAction(String name, JSONObject params) throws
 							}
 						}
 						if (val == null) {
-							// Value supplied doesnt match the type - try the next one
+							// Value supplied doesn't match the type - try the next one
 							continue;
 						}
 						method.invoke(this.param, val);

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1578,7 +1578,7 @@ private void processAlerts(String baseUrl, int start, int count, int riskId, Pro
 		List<Alert> alerts = new ArrayList<>();
 		try {
 			TableAlert tableAlert = Model.getSingleton().getDb().getTableAlert();
-        	// TODO this doesnt work, but should be used when its fixed :/
+        	// TODO this doesn't work, but should be used when its fixed :/
 			//Vector<Integer> v = tableAlert.getAlertListBySession(Model.getSingleton().getSession().getSessionId());
 			Vector<Integer> v = tableAlert.getAlertList();
 

File: src/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -83,7 +83,7 @@ public class ActiveScanController implements ScanController<ActiveScan> {
 	
 	/**
 	 * An ordered list of all of the {@code ActiveScan}s created (and not yet removed). Used to get provide the 'last'
-	 * scan for client using the 'old' API that didnt support concurrent scans. 
+	 * scan for client using the 'old' API that didn't support concurrent scans.
 	 */
 	private List<ActiveScan> activeScanList;
 

File: src/org/zaproxy/zap/extension/ascan/ChallengeCallbackAPI.java
Patch:
@@ -56,7 +56,7 @@ public abstract class ChallengeCallbackAPI extends ApiImplementor {
             = Collections.synchronizedMap(new TreeMap<String, RegisteredCallback>());
 
     /**
-     * Default contructor
+     * Default constructor
      */
     public ChallengeCallbackAPI() {
          addApiShortcut(getPrefix());

File: src/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -156,7 +156,7 @@ public void windowClosed(WindowEvent e) {
 
     public void init(Target target) {
         if (target != null) {
-            // If one isnt specified then leave the previously selected one
+            // If one isn't specified then leave the previously selected one
             this.target = target;
         }
         

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -166,7 +166,7 @@ public void hook(ExtensionHook extensionHook) {
         extensionHook.addSessionListener(this);
 
         extensionHook.addOptionsParamSet(getScannerParam());
-        // TODO this isnt currently implemented
+        // TODO this isn't currently implemented
         //extensionHook.addCommandLine(getCommandLineArguments());
 
         ExtensionScript extScript = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);

File: src/org/zaproxy/zap/extension/authentication/AuthenticationAPI.java
Patch:
@@ -181,7 +181,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 
 	/**
 	 * Gets the sets the method action implementor or throws a Missing Parameter exception, if any
-	 * problems occured.
+	 * problems occurred.
 	 * 
 	 * @param params the params
 	 * @return the sets the method action implementor

File: src/org/zaproxy/zap/extension/autoupdate/Downloader.java
Patch:
@@ -87,7 +87,7 @@ private void downloadFile() {
     	FileOutputStream out = null;
 	    try {
 	    	/*
-	    	 * The following code may be more efficient, but doesnt give us the option
+	    	 * The following code may be more efficient, but doesn't give us the option
 	    	 * of cancelling downloads.
 	    	 *
 			 * ReadableByteChannel rbc = Channels.newChannel(url.openStream());

File: src/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -226,7 +226,7 @@ private JPanel getCorePanel(boolean update) {
 							java.awt.Color.black));
 
 			if (latestInfo == null || this.latestInfo.getZapRelease() == null) {
-				// Havnt checked for updatees yet
+				// Haven't checked for updates yet
 				corePanel.add(new JLabel(this.currentVersion), LayoutHelper.getGBC(0, 0, 1, 0.0D));
 				corePanel.add(new JLabel(""), LayoutHelper.getGBC(1, 0, 1, 1.0D));
 				corePanel.add(this.getCheckForUpdatesButton(), LayoutHelper.getGBC(2, 0, 1, 0.0D));

File: src/org/zaproxy/zap/extension/autoupdate/OptionsCheckForUpdatesPanel.java
Patch:
@@ -306,7 +306,7 @@ private void repopulatDownloadDirs() {
 				downloadDir.addItem(f.getAbsolutePath());
 			}
 		}
-		// The selected item may no longer exist, but thats ok as it will correctly default to the first one
+		// The selected item may no longer exist, but that's ok as it will correctly default to the first one
 		getDownloadDirCombo().setSelectedItem(selectedItem);
 	}
 	

File: src/org/zaproxy/zap/extension/callback/CallbackParam.java
Patch:
@@ -61,7 +61,7 @@ private String getDefaultAddress() {
         for (String addr : addrs) {
             if (!addr.contains(":") && !addr.equals("localhost")
                     && !addr.equals("127.0.0.1")) {
-                // Return the first IPv4 one thats not localhost
+                // Return the first IPv4 one that's not localhost
                 return addr;
             }
         }

File: src/org/zaproxy/zap/extension/callback/OptionsCallbackPanel.java
Patch:
@@ -207,7 +207,7 @@ public void initParam(Object obj) {
         if (proxyParam.getPort() == 0) {
             getRandomPort().setSelected(true);
             getSpinnerPort().setEnabled(false);
-            getSpinnerPort().setValue(ext.getPort());   // As 0 isnt a valid port
+            getSpinnerPort().setValue(ext.getPort());   // As 0 isn't a valid port
         } else {
             getSpinnerPort().setEnabled(true);
             getSpinnerPort().setValue(proxyParam.getPort());

File: src/org/zaproxy/zap/extension/encoder2/ExtensionEncoder2.java
Patch:
@@ -94,7 +94,7 @@ private void showEncodeDecodeDialog(JTextComponent lastInvoker) {
             encodeDecodeDialog = new EncodeDecodeDialog();
             encodeDecodeDialog.updateOptions(getParams());
             /*
-            // TODO doesnt work yet
+            // TODO doesn't work yet
             ExtensionHelp.enablePopupHelpKey(
             		encodeDecodeDialog, 
                     "ui.tabs.break");

File: src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
Patch:
@@ -476,7 +476,7 @@ public void sessionChanged(Session session) {
 
     private void startPassiveScanThread() {
         if (passiveScanEnabled && pst == null) {
-            // Will create a new thread if one doesnt exist
+            // Will create a new thread if one doesn't exist
             getPassiveScanThread();
         }
     }

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -146,7 +146,7 @@ private void search() {
 			        		continue;
 			        	}
 			        	if (this.baseUrl != null && ! message.getRequestHeader().getURI().toString().startsWith(baseUrl)) {
-			        		// doesnt start with the specified baseurl
+			        		// doesn't start with the specified baseurl
 			        		continue;
 			        	}
 				

File: src/org/zaproxy/zap/extension/sessions/SessionManagementAPI.java
Patch:
@@ -142,7 +142,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 
 	/**
 	 * Gets the sets the method action implementor or throws a Missing Parameter exception, if any
-	 * problems occured.
+	 * problems occurred.
 	 * 
 	 * @param params the params
 	 * @return the sets the method action implementor
@@ -159,7 +159,7 @@ private ApiDynamicActionImplementor getSetMethodActionImplementor(JSONObject par
 
 	/**
 	 * Gets the context from the parameters or throws a Missing Parameter exception, if any problems
-	 * occured.
+	 * occurred.
 	 * 
 	 * @param params the params
 	 * @return the context
@@ -175,7 +175,7 @@ private Context getContext(JSONObject params) throws ApiException {
 
 	/**
 	 * Gets the context id from the parameters or throws a Missing Parameter exception, if any
-	 * problems occured.
+	 * problems occurred.
 	 * 
 	 * @param params the params
 	 * @return the context id

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -104,7 +104,7 @@ public SpiderDialog(ExtensionSpider ext, Frame owner, Dimension dim) {
 
     public void init(Target target) {
         if (target != null) {
-        	// If one isnt specified then leave the previously selected one
+        	// If one isn't specified then leave the previously selected one
         	this.target = target;
         }
         logger.debug("init " + this.target);
@@ -335,7 +335,7 @@ public void save() {
 		}
         
         if (target == null || ! this.getStringValue(FIELD_START).equals(getTargetText(target))) {
-       		// Clear the target as it doesnt match the value entered manually
+       		// Clear the target as it doesn't match the value entered manually
 			target = new Target((StructuralNode)null);
         }
         

File: src/org/zaproxy/zap/extension/spider/SpiderScanController.java
Patch:
@@ -80,7 +80,7 @@ public class SpiderScanController implements ScanController<SpiderScan> {
 	
 	/**
 	 * An ordered list of all of the {@code SpiderScan}s created (and not yet removed). Used to get provide the 'last'
-	 * scan for client using the 'old' API that didnt support concurrent scans. 
+	 * scan for client using the 'old' API that didn't support concurrent scans.
 	 */
 	private List<SpiderScan> spiderScanList;
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextMenuItemHolder.java
Patch:
@@ -29,7 +29,7 @@ public abstract class PopupContextMenuItemHolder extends ExtensionPopupMenuMessa
 
 	/**
 	 * The sub menus. Used only in the case it is not visible itself, to keep a reference to what popup menus
-	 * it has added in the parent, so it can dinamically update them before each show.
+	 * it has added in the parent, so it can dynamically update them before each show.
 	 */
 	private List<ExtensionPopupMenuItem> subMenuItems = null;
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupUserMenuItemHolder.java
Patch:
@@ -52,7 +52,7 @@ public abstract class PopupUserMenuItemHolder extends ExtensionPopupMenuMessageC
 
 	/**
 	 * The sub menus. Used only in the case it is not visible itself, to keep a reference to what
-	 * popup menus it has added in the parent, so it can dinamically update them before each show.
+	 * popup menus it has added in the parent, so it can dynamically update them before each show.
 	 */
 	private List<ExtensionPopupMenuItem> subMenuItems = null;
 

File: src/org/zaproxy/zap/extension/uiutils/ExtensionUiUtils.java
Patch:
@@ -33,7 +33,7 @@
 import org.parosproxy.paros.view.View;
 
 /**
- * This extension was introduced so that the session persist and snapshot menu iteam and buttons 
+ * This extension was introduced so that the session persist and snapshot menu item and buttons
  * can be enabled and disabled when appropriate.
  * It much easier doing this in an extension rather than the UI components. 
  * @author psiinon

File: src/org/zaproxy/zap/extension/users/UsersAPI.java
Patch:
@@ -273,7 +273,7 @@ private User getUser(JSONObject params) throws ApiException {
 
 	/**
 	 * Gets the context id from the parameters or throws a Missing Parameter exception, if any
-	 * problems occured.
+	 * problems occurred.
 	 * 
 	 * @param params the params
 	 * @return the context id

File: src/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -374,23 +374,23 @@ private boolean arrayKeyValueExists(String key, String value) {
 	 * not encoded.
 	 * 
 	 * @param uri the string of the uri
-	 * @return the URI, or null if an error occured and the URI could not be constructed.
+	 * @return the URI, or null if an error occurred and the URI could not be constructed.
 	 */
 	private URI createURI(String uri) {
 		URI uriV = null;
 		try {
 			// Try to see if we can create the URI, considering it's encoded.
 			uriV = new URI(uri, true);
 		} catch (URIException e) {
-			// An error occured, so try to create the URI considering it's not encoded.
+			// An error occurred, so try to create the URI considering it's not encoded.
 			try {
 				log.debug("Second try...");
 				uriV = new URI(uri, false);
 			} catch (Exception ex) {
 				log.error("Error while converting to uri: " + uri, ex);
 				return null;
 			}
-			// A non URIException occured, so just ignore the URI
+			// A non URIException occurred, so just ignore the URI
 		} catch (Exception e) {
 			log.error("Error while converting to uri: " + uri, e);
 			return null;

File: src/org/zaproxy/zap/utils/FontUtils.java
Patch:
@@ -84,7 +84,7 @@ public static void setDefaultFont(Font font) {
 	
 	public static void setDefaultFont(String name, int size) {
 		// A blank font name works fine.
-		// For some reason getting the default font name doesnt work - it doesnt seem to get applied everywhere
+		// For some reason getting the default font name doesn't work - it doesn't seem to get applied everywhere
 		// No ideas why :/
 		if (size <= 5) {
 			size = getDefaultFont().getSize();
@@ -133,7 +133,7 @@ public static Font getFont (String name, int style) {
 	}
 	
 	/**
-	 * Gets the default font with the specified sytle and size, correctly scaled
+	 * Gets the default font with the specified style and size, correctly scaled
 	 * @param style
 	 * @param size
 	 * @return
@@ -143,7 +143,7 @@ public static Font getFont (int style, Size size) {
 	}
 	
 	/**
-	 * Gets the specified font with the specified sytle and size, correctly scaled
+	 * Gets the specified font with the specified style and size, correctly scaled
 	 * @param style
 	 * @param size
 	 * @since 2.7.0

File: src/org/zaproxy/zap/utils/I18N.java
Patch:
@@ -95,7 +95,7 @@ public String getHtmlWrappedString(String key) {
     
     /**
      * Returns the specified char from the language file. 
-     * As these are typically used for mnemnoics the 'null' char is returned if the key is not defined 
+     * As these are typically used for mnemonics the 'null' char is returned if the key is not defined
      * @param key the key of the char
      * @return the char read, or null char if not found
      */

File: src/org/zaproxy/zap/view/ContextCreateDialog.java
Patch:
@@ -52,7 +52,7 @@ public ContextCreateDialog(Frame owner) {
 	public void siteNodeSelected(String field, SiteNode node) {
 		topNode = node;
 		if (node != null && this.isEmptyField(NAME_FIELD)) {
-			// They havnt chosen a context name yet, default to the name of the node they chose
+			// They haven't chosen a context name yet, default to the name of the node they chose
 			this.setFieldValue(NAME_FIELD, node.getNodeName());
 		}
 	}

File: src/org/zaproxy/zap/view/HighlightSearchEntry.java
Patch:
@@ -5,7 +5,7 @@
 import org.zaproxy.zap.extension.search.SearchMatch;
 
 /*
- * A search entry, which allows to highlight all occurences of a 
+ * A search entry, which allows to highlight all occurrences of a
  * string in a textarea.
  * 
  * Consists of:

File: src/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -167,7 +167,7 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
 	            checkBox.setOpaque(cn.isSelected && cn.hasChildren && ! cn.allChildrenSelected);
 	        	checkBox.setVisible(true);
 	        	checkBox.setEnabled(true);
-	        	/* Looks ok, but doesnt work correctly
+	        	/* Looks ok, but doesn't work correctly
 	            if (cn.isSelected && cn.hasChildren && ! cn.allChildrenSelected) {
 	                checkBox.getModel().setPressed(true);
 	                checkBox.getModel().setArmed(true);

File: src/org/zaproxy/zap/view/OptionsConnectionPanel.java
Patch:
@@ -236,7 +236,7 @@ public void saveParam(Object obj) throws Exception {
 
 	    connectionParam.setProxyChainRealm(txtProxyChainRealm.getText());
 	    connectionParam.setProxyChainUserName(txtProxyChainUserName.getText());
-	    // Make sure this isnt saved in the config file
+	    // Make sure this isn't saved in the config file
 	    connectionParam.setProxyChainPassword(
 	    		new String(txtProxyChainPassword.getPassword()), false);
 	}

File: src/org/zaproxy/zap/view/PersistSessionDialog.java
Patch:
@@ -66,7 +66,7 @@ public PersistSessionDialog(Frame owner) {
 	private void initialize() {
         this.setContentPane(getJPanel());
         this.pack();
-        // Disable the escape key - they have to amke a choice!
+        // Disable the escape key - they have to make a choice!
         getRootPane().getActionMap().put("ESCAPE", null);
 
 	}

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -595,7 +595,7 @@ public static String cleanSiteName(String site, boolean incPort) {
 		}
                 // does site already contain port number ?
                 if(site.indexOf(":")>=0) {
-                    if (! incPort) { // We dont't want the port number, strip it off
+                    if (! incPort) { // We don't want the port number, strip it off
 			site = site.substring(0, site.indexOf(":"));
                     } // otherwise keep it                   
                 } else { // The site does not contain the port number

File: src/org/zaproxy/zap/view/ScanPanel2.java
Patch:
@@ -54,7 +54,7 @@
 import org.zaproxy.zap.utils.SortedComboBoxModel;
 
 /*
- * This is a cleaner version of ScanPanel which doesnt mix functionality and the UI.
+ * This is a cleaner version of ScanPanel which doesn't mix functionality and the UI.
  * Implemented as a new set of classes for backwards compatibility with existing add-ons
  */
 public abstract class ScanPanel2<GS extends GenericScanner2, SC extends ScanController<GS>> extends AbstractPanel {

File: src/org/zaproxy/zap/view/SiteMapTreeCellRenderer.java
Patch:
@@ -92,7 +92,7 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
 	            return this;
 	        }
 
-			setPreferredSize(null);	// clears the prefered size, making the node visible
+			setPreferredSize(null);	// clears the preferred size, making the node visible
 			super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
 
 			// folder / file icons with scope 'target' if relevant

File: src/org/zaproxy/zap/view/TabbedPanel2.java
Patch:
@@ -201,15 +201,15 @@ public void setVisible(Component c, boolean visible) {
 			if (this.removedTabList.contains(c)) {
 				
 				if (c instanceof AbstractPanel) {
-					// Dont use the addTab(AbstractPanel) methods as we need to force visibility
+					// Don't use the addTab(AbstractPanel) methods as we need to force visibility
 					AbstractPanel panel = (AbstractPanel)c;
 					this.addTab(c.getName(), panel.getIcon(), panel, panel.isHideable(), true, panel.getTabIndex());
 				} else {
 					// Work out the index to add it back in
 					int index = this.fullTabList.indexOf(c);
 					while (index >= 0) {
 						if (index > 0 && ! this.removedTabList.contains(this.fullTabList.get(index -1))) {
-							// Found the first preceding tab that isnt hidden
+							// Found the first preceding tab that isn't hidden
 							break;
 						}
 						index--;

File: src/org/zaproxy/zap/view/popup/PopupMenuItemContextDataDrivenNode.java
Patch:
@@ -74,7 +74,7 @@ public void performAction(SiteNode sn) {
         while (!parent.getParent().isRoot()) {
         	sb.insert(0, "/");
         	if (parent.isDataDriven()) {
-        		// Dont want these in their own regex group
+        		// Don't want these in their own regex group
         		sb.insert(0, ".+?");
         	} else {
         		sb.insert(0, parent.getCleanNodeName());

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -246,9 +246,6 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 					throw new ApiException(Type.NO_IMPLEMENTOR, ExtensionUserManagement.NAME);
 				}
 				context = ApiUtils.getContextByParamId(params, PARAM_CONTEXT_ID);
-				if (!context.isIncluded(params.getString(PARAM_URL))) {
-					throw new ApiException(Type.URL_NOT_IN_CONTEXT, PARAM_CONTEXT_ID);
-				}
 				user = usersExtension.getContextUserAuthManager(context.getIndex()).getUserById(userID);
 				if (user == null) {
 					throw new ApiException(Type.USER_NOT_FOUND, PARAM_USER_ID);

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -246,9 +246,6 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 					throw new ApiException(Type.NO_IMPLEMENTOR, ExtensionUserManagement.NAME);
 				}
 				context = ApiUtils.getContextByParamId(params, PARAM_CONTEXT_ID);
-				if (!context.isIncluded(params.getString(PARAM_URL))) {
-					throw new ApiException(Type.URL_NOT_IN_CONTEXT, PARAM_CONTEXT_ID);
-				}
 				user = usersExtension.getContextUserAuthManager(context.getIndex()).getUserById(userID);
 				if (user == null) {
 					throw new ApiException(Type.USER_NOT_FOUND, PARAM_USER_ID);

File: src/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -42,6 +42,7 @@
 // ZAP: 2016/07/01 Issue 2647 Support a/pscan rule configuration 
 // ZAP: 2016/11/14 Restore and deprecate old constructor, to keep binary compatibility
 // ZAP: 2017/06/29 Remove code duplication in scan()
+// ZAP: 2018/02/09 Check also its excluded URLs when scanning a context (Issue 4368).
 
 package org.parosproxy.paros.core.scanner;
 
@@ -426,7 +427,7 @@ public boolean isInScope(String nodeName) {
 			return false;
 		}
 		if (this.target.getContext() != null) {
-			if ( ! target.getContext().isIncluded(nodeName)) {
+			if ( ! target.getContext().isInContext(nodeName)) {
 				// Restricted to nodes in the given context, and this isnt
 				return false;
 			}

File: src/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -198,7 +198,7 @@ private void scanVariant() {
     }
     
     /**
-     * Inner methid to check if the current parameter should be excluded
+     * Inner method to check if the current parameter should be excluded
      * @param param the param object
      * @return true if it need to be excluded
      */

File: src/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -198,7 +198,7 @@ private void scanVariant() {
     }
     
     /**
-     * Inner methid to check if the current parameter should be excluded
+     * Inner method to check if the current parameter should be excluded
      * @param param the param object
      * @return true if it need to be excluded
      */

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -68,6 +68,7 @@
 // ZAP: 2017/11/20 Add initiator constant for Token Generator requests.
 // ZAP: 2017/11/27 Use custom CookieSpec (ZapCookieSpec).
 // ZAP: 2017/12/20 Apply socket connect timeout (Issue 4171).
+// ZAP: 2018/02/06 Make the lower case changes locale independent (Issue 4327).
 
 package org.parosproxy.paros.network;
 
@@ -76,6 +77,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
@@ -348,7 +350,7 @@ private static boolean isConnectionUpgrade(HttpMethod method) {
 		if (connectionHeader == null) {
 			return false;
 		}
-		return connectionHeader.getValue().toLowerCase().contains("upgrade");
+		return connectionHeader.getValue().toLowerCase(Locale.ROOT).contains("upgrade");
 	}
 
 	public void shutdown() {

File: src/ch/csnc/extension/httpclient/AliasKeyManager.java
Patch:
@@ -53,8 +53,8 @@ public class AliasKeyManager implements X509KeyManager {
     /**
      * Creates a new instance of AliasKeyManager
      * @param ks The KeyStore that contains the keypair to use
-     * @param password the password for the key (not the keystore)
      * @param alias the alias of the certificate to use
+     * @param keyPassword the password for the key (not the keystore)
      */
     public AliasKeyManager(KeyStore ks, String alias, String keyPassword) {
         _ks = ks;

File: src/org/parosproxy/paros/core/scanner/VariantJSONQuery.java
Patch:
@@ -179,7 +179,7 @@ private void parseObject() {
 
     /**
      * 
-     * @param sr 
+     * @param fieldName
      */
     private void parseValue(String fieldName) {
         int chr = sr.read();

File: src/org/parosproxy/paros/core/scanner/VariantODataIdQuery.java
Patch:
@@ -253,7 +253,7 @@ static class ResourceParameter {
         private String pathAfterParamter;
 
         /**
-         * @param parameterName
+         * @param resourceName
          * @param originalValue
          * @param pathBeforeParameter
          * @param pathAfterParameter

File: src/org/parosproxy/paros/db/RecordAlert.java
Patch:
@@ -181,7 +181,7 @@ public int getReliability() {
     }
     /**
      * @deprecated (2.4.0) Replaced by {@link #setConfidence(int)}.
-     * @param reliability The reliability to set.
+     * @param confidence The reliability to set.
      */
 	@Deprecated
     public void setReliability(int confidence) {

File: src/org/parosproxy/paros/extension/filter/AllFilterTableModel.java
Patch:
@@ -50,7 +50,7 @@ public class AllFilterTableModel extends DefaultTableModel {
     private List<Filter> allFilters = null;
     
     /**
-     * @param allPlugins The allPlugins to set.
+     * @param allFilters The allFilters to set.
      */
     // ZAP: Added the type argument.
     private void setAllFilters(List<Filter> allFilters) {

File: src/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -98,7 +98,7 @@ public class SiteNode extends DefaultMutableTreeNode {
 
     /**
      * Flag that indicates whether or not the {@link #calculateHighestAlert() highest alert needs to be calculated}, when
-     * {@link #appendIcons(StringBuilder) building the string representation}.
+     * {@link #toString() building the string representation}.
      */
     private boolean calculateHighestAlert;
 

File: src/org/parosproxy/paros/network/HttpInputStream.java
Patch:
@@ -175,7 +175,7 @@ private void readBody(int contentLength, HttpBody body) {
 	 * 
 	 * @param contentLength		Content length read to be read.  -1 = unlimited until connection close.
 	 * @param readBodyLength 	Body length read so far
-	 * @param data				Buffer storing the read bytes.
+	 * @param buffer			Buffer storing the read bytes.
 	 * @return					Number of bytes read in buffer
 	 * @throws IOException
 	 */

File: src/org/zaproxy/zap/extension/ascan/ScanProgressTableModel.java
Patch:
@@ -228,7 +228,7 @@ public List<ScanProgressItem> getValues() {
 
     /**
      * 
-     * @param icon 
+     * @param actionIcon
      */
     public void setFocusedAction(ScanProgressActionIcon actionIcon) {
         focusedAction = actionIcon;

File: src/org/zaproxy/zap/extension/autoupdate/OptionsAutoupdateDirsTableModel.java
Patch:
@@ -48,7 +48,7 @@ public List<File> getElements() {
     }
 
     /**
-     * @param tokens The tokens to set.
+     * @param files The files to set.
      */
     public void setFiles(List<File> files) {
 		this.tokens = new ArrayList<>(tokens.size());

File: src/org/zaproxy/zap/extension/script/OptionsScriptTableModel.java
Patch:
@@ -46,7 +46,7 @@ public List<File> getElements() {
     }
 
     /**
-     * @param tokens The tokens to set.
+     * @param files The files to set.
      */
     public void setTokens(List<File> files) {
 		this.tokens = new ArrayList<>(tokens.size());

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -228,7 +228,7 @@ protected JPanel getWorkPanel() {
 
 			tabbedPane = new JTabbedPane();
 			tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.urls"), getUrlsTableScrollPane());
-			tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.addednodes"), getAddedUrlsTableScrollPane());
+			tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.addednodes"), getAddedNodesTableScrollPane());
 			tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.messages"), getMessagesTableScrollPanel());
 			tabbedPane.setSelectedIndex(0);
 
@@ -246,7 +246,7 @@ private JScrollPane getUrlsTableScrollPane() {
 		return urlsTableScrollPane;
 	}
 
-	private JScrollPane getAddedUrlsTableScrollPane() {
+	private JScrollPane getAddedNodesTableScrollPane() {
 		if (addedNodesTableScrollPane == null) {
 			addedNodesTableScrollPane = new JScrollPane();
 			addedNodesTableScrollPane.setName("SpiderAddedUrlsPane");

File: src/org/zaproxy/zap/extension/spider/SpiderScan.java
Patch:
@@ -108,7 +108,7 @@ private static enum State {
 	 * Lazily initialised.
 	 * 
 	 * @see #getMessagesTableModel()
-	 * @see #readURI(HttpMessage)
+	 * @see #addMessageToMessagesTableModel(SpiderTaskResult)
 	 */
 	private SpiderMessagesTableModel messagesTableModel;
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextTreeMenu.java
Patch:
@@ -58,7 +58,7 @@ public boolean isEnableForComponent(Component invoker) {
 	
 	/**
 	 * Override this method if the menu is not relevant all of the time
-	 * @param context
+	 * @param contextId
 	 * @return
 	 */
 	public boolean isEnabledForContext(int contextId) {

File: src/org/zaproxy/zap/extension/users/DialogAddUser.java
Patch:
@@ -69,7 +69,6 @@ public class DialogAddUser extends AbstractFormDialog {
 	 * 
 	 * @param owner the owner
 	 * @param extension the extension
-	 * @param context the context
 	 */
 	public DialogAddUser(Dialog owner, ExtensionUserManagement extension) {
 		super(owner, DIALOG_TITLE);
@@ -81,7 +80,6 @@ public DialogAddUser(Dialog owner, ExtensionUserManagement extension) {
 	 * @param owner the owner
 	 * @param extension the extension
 	 * @param title the title
-	 * @param context the context
 	 */
 	public DialogAddUser(Dialog owner, ExtensionUserManagement extension, String title) {
 		super(owner, title);

File: src/org/zaproxy/zap/spider/filters/ParseFilter.java
Patch:
@@ -62,7 +62,7 @@ public FilterResult filtered(HttpMessage responseMessage) {
 	 *
 	 * @since 2.7.0
 	 * @see #NOT_FILTERED
-	 * @see #ParseFilter(String)
+	 * @see #FilterResult(String)
 	 */
 	public static final class FilterResult {
 

File: src/org/zaproxy/zap/view/HistoryReferenceTableModel.java
Patch:
@@ -196,8 +196,7 @@ public void add(HistoryReference href) {
 	/**
 	 * Removes the scan result for a particular uri and method. Method is synchronized internally.
 	 * 
-	 * @param uri the uri
-	 * @param method the method
+	 * @param href the history reference
 	 */
 	public void remove(HistoryReference href) {
 		synchronized (hrefList) {

File: src/ch/csnc/extension/httpclient/AliasKeyManager.java
Patch:
@@ -53,8 +53,8 @@ public class AliasKeyManager implements X509KeyManager {
     /**
      * Creates a new instance of AliasKeyManager
      * @param ks The KeyStore that contains the keypair to use
-     * @param password the password for the key (not the keystore)
      * @param alias the alias of the certificate to use
+     * @param keyPassword the password for the key (not the keystore)
      */
     public AliasKeyManager(KeyStore ks, String alias, String keyPassword) {
         _ks = ks;

File: src/org/parosproxy/paros/core/scanner/VariantJSONQuery.java
Patch:
@@ -179,7 +179,7 @@ private void parseObject() {
 
     /**
      * 
-     * @param sr 
+     * @param fieldName
      */
     private void parseValue(String fieldName) {
         int chr = sr.read();

File: src/org/parosproxy/paros/core/scanner/VariantODataIdQuery.java
Patch:
@@ -253,7 +253,7 @@ static class ResourceParameter {
         private String pathAfterParamter;
 
         /**
-         * @param parameterName
+         * @param resourceName
          * @param originalValue
          * @param pathBeforeParameter
          * @param pathAfterParameter

File: src/org/parosproxy/paros/db/RecordAlert.java
Patch:
@@ -181,7 +181,7 @@ public int getReliability() {
     }
     /**
      * @deprecated (2.4.0) Replaced by {@link #setConfidence(int)}.
-     * @param reliability The reliability to set.
+     * @param confidence The reliability to set.
      */
 	@Deprecated
     public void setReliability(int confidence) {

File: src/org/parosproxy/paros/extension/filter/AllFilterTableModel.java
Patch:
@@ -50,7 +50,7 @@ public class AllFilterTableModel extends DefaultTableModel {
     private List<Filter> allFilters = null;
     
     /**
-     * @param allPlugins The allPlugins to set.
+     * @param allFilters The allFilters to set.
      */
     // ZAP: Added the type argument.
     private void setAllFilters(List<Filter> allFilters) {

File: src/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -98,7 +98,7 @@ public class SiteNode extends DefaultMutableTreeNode {
 
     /**
      * Flag that indicates whether or not the {@link #calculateHighestAlert() highest alert needs to be calculated}, when
-     * {@link #appendIcons(StringBuilder) building the string representation}.
+     * {@link #toString() building the string representation}.
      */
     private boolean calculateHighestAlert;
 

File: src/org/parosproxy/paros/network/HttpInputStream.java
Patch:
@@ -175,7 +175,7 @@ private void readBody(int contentLength, HttpBody body) {
 	 * 
 	 * @param contentLength		Content length read to be read.  -1 = unlimited until connection close.
 	 * @param readBodyLength 	Body length read so far
-	 * @param data				Buffer storing the read bytes.
+	 * @param buffer			Buffer storing the read bytes.
 	 * @return					Number of bytes read in buffer
 	 * @throws IOException
 	 */

File: src/org/zaproxy/zap/extension/ascan/ScanProgressTableModel.java
Patch:
@@ -228,7 +228,7 @@ public List<ScanProgressItem> getValues() {
 
     /**
      * 
-     * @param icon 
+     * @param actionIcon
      */
     public void setFocusedAction(ScanProgressActionIcon actionIcon) {
         focusedAction = actionIcon;

File: src/org/zaproxy/zap/extension/autoupdate/OptionsAutoupdateDirsTableModel.java
Patch:
@@ -48,7 +48,7 @@ public List<File> getElements() {
     }
 
     /**
-     * @param tokens The tokens to set.
+     * @param files The files to set.
      */
     public void setFiles(List<File> files) {
 		this.tokens = new ArrayList<>(tokens.size());

File: src/org/zaproxy/zap/extension/script/OptionsScriptTableModel.java
Patch:
@@ -46,7 +46,7 @@ public List<File> getElements() {
     }
 
     /**
-     * @param tokens The tokens to set.
+     * @param files The files to set.
      */
     public void setTokens(List<File> files) {
 		this.tokens = new ArrayList<>(tokens.size());

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -228,7 +228,7 @@ protected JPanel getWorkPanel() {
 
 			tabbedPane = new JTabbedPane();
 			tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.urls"), getUrlsTableScrollPane());
-			tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.addednodes"), getAddedUrlsTableScrollPane());
+			tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.addednodes"), getAddedNodesTableScrollPane());
 			tabbedPane.addTab(Constant.messages.getString("spider.panel.tab.messages"), getMessagesTableScrollPanel());
 			tabbedPane.setSelectedIndex(0);
 
@@ -246,7 +246,7 @@ private JScrollPane getUrlsTableScrollPane() {
 		return urlsTableScrollPane;
 	}
 
-	private JScrollPane getAddedUrlsTableScrollPane() {
+	private JScrollPane getAddedNodesTableScrollPane() {
 		if (addedNodesTableScrollPane == null) {
 			addedNodesTableScrollPane = new JScrollPane();
 			addedNodesTableScrollPane.setName("SpiderAddedUrlsPane");

File: src/org/zaproxy/zap/extension/spider/SpiderScan.java
Patch:
@@ -108,7 +108,7 @@ private static enum State {
 	 * Lazily initialised.
 	 * 
 	 * @see #getMessagesTableModel()
-	 * @see #readURI(HttpMessage)
+	 * @see #addMessageToMessagesTableModel(SpiderTaskResult)
 	 */
 	private SpiderMessagesTableModel messagesTableModel;
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextTreeMenu.java
Patch:
@@ -58,7 +58,7 @@ public boolean isEnableForComponent(Component invoker) {
 	
 	/**
 	 * Override this method if the menu is not relevant all of the time
-	 * @param context
+	 * @param contextId
 	 * @return
 	 */
 	public boolean isEnabledForContext(int contextId) {

File: src/org/zaproxy/zap/extension/users/DialogAddUser.java
Patch:
@@ -69,7 +69,6 @@ public class DialogAddUser extends AbstractFormDialog {
 	 * 
 	 * @param owner the owner
 	 * @param extension the extension
-	 * @param context the context
 	 */
 	public DialogAddUser(Dialog owner, ExtensionUserManagement extension) {
 		super(owner, DIALOG_TITLE);
@@ -81,7 +80,6 @@ public DialogAddUser(Dialog owner, ExtensionUserManagement extension) {
 	 * @param owner the owner
 	 * @param extension the extension
 	 * @param title the title
-	 * @param context the context
 	 */
 	public DialogAddUser(Dialog owner, ExtensionUserManagement extension, String title) {
 		super(owner, title);

File: src/org/zaproxy/zap/spider/filters/ParseFilter.java
Patch:
@@ -62,7 +62,7 @@ public FilterResult filtered(HttpMessage responseMessage) {
 	 *
 	 * @since 2.7.0
 	 * @see #NOT_FILTERED
-	 * @see #ParseFilter(String)
+	 * @see #FilterResult(String)
 	 */
 	public static final class FilterResult {
 

File: src/org/zaproxy/zap/view/HistoryReferenceTableModel.java
Patch:
@@ -196,8 +196,7 @@ public void add(HistoryReference href) {
 	/**
 	 * Removes the scan result for a particular uri and method. Method is synchronized internally.
 	 * 
-	 * @param uri the uri
-	 * @param method the method
+	 * @param href the history reference
 	 */
 	public void remove(HistoryReference href) {
 		synchronized (hrefList) {

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -18,6 +18,7 @@
 package org.zaproxy.zap.extension.api;
 
 import java.io.StringWriter;
+import java.util.Locale;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -105,7 +106,7 @@ public ApiException(Type type, String detail) {
 	}
 
     public ApiException(Type type, String detail, Throwable cause) {
-        super(type.name().toLowerCase(), cause);
+        super(type.name().toLowerCase(Locale.ROOT), cause);
         this.type = type;
         this.detail = detail;
     }

File: src/org/zaproxy/zap/extension/api/WebUI.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Locale;
 
 import org.apache.commons.httpclient.URI;
 import org.parosproxy.paros.Constant;
@@ -291,7 +292,7 @@ public String handleRequest(String component, ApiImplementor impl,
 						sb.append("\" value=\"");
 						if (this.isDevTestNonce && RequestType.other.equals(reqType)) {
 							sb.append(api.getOneTimeNonce("/" + 
-									reqType.name().toUpperCase() + "/" + 
+									reqType.name().toUpperCase(Locale.ROOT) + "/" + 
 									impl.getPrefix() + "/" + 
 									reqType.name() + "/" + 
 									element.getName() + "/"));

File: src/org/zaproxy/zap/extension/ascan/AllCategoryTableModel.java
Patch:
@@ -25,9 +25,11 @@
 // ZAP: 2014/05/20 Issue 377: Unfulfilled dependencies hang the active scan
 // ZAP: 2016/07/25 Change constructor's parameter to PluginFactory
 // ZAP: 2017/06/05 Take into account the enabled state of the plugin when showing the AlertThreshold of the category.
+// ZAP: 2018/01/30 Do not rely on default locale for upper/lower case conversions (when locale is not important).
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 
 import javax.swing.table.DefaultTableModel;
@@ -114,7 +116,7 @@ public void setValueAt(Object value, int row, int col) {
 
     private String strToI18n(String str) {
         // I18n's threshold and strength enums
-        return Constant.messages.getString("ascan.policy.level." + str.toLowerCase());
+        return Constant.messages.getString("ascan.policy.level." + str.toLowerCase(Locale.ROOT));
     }
 
     private String i18nToStr(String str) {

File: src/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -27,12 +27,14 @@
 // ZAP: 2014/11/19 Issue 1412: Manage scan policies
 // ZAP: 2016/04/04 Use StatusUI in scanners' dialogues
 // ZAP: 2017/06/05 Return AlertThreshold.OFF if the plugin is disabled.
+// ZAP: 2018/01/30 Do not rely on default locale for upper/lower case conversions (when locale is not important).
 
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import javax.swing.table.DefaultTableModel;
@@ -194,7 +196,7 @@ private int getPluginRow(Plugin plugin) {
 
     private String strToI18n (String str) {
     	// I18n's threshold and strength enums
-    	return Constant.messages.getString("ascan.policy.level." + str.toLowerCase());
+    	return Constant.messages.getString("ascan.policy.level." + str.toLowerCase(Locale.ROOT));
     }
 
     private String i18nToStr (String str) {

File: src/org/zaproxy/zap/extension/ascan/ScanProgressItem.java
Patch:
@@ -20,6 +20,8 @@
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.Date;
+import java.util.Locale;
+
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.core.scanner.HostProcess;
 import org.parosproxy.paros.core.scanner.Plugin;
@@ -67,7 +69,7 @@ public String getNameLabel() {
      * @return
      */
     public String getAttackStrenghtLabel() {
-        return Constant.messages.getString("ascan.policy.level." + plugin.getAttackStrength().name().toLowerCase());
+        return Constant.messages.getString("ascan.policy.level." + plugin.getAttackStrength().name().toLowerCase(Locale.ROOT));
     }
 
     /**

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -26,6 +26,7 @@
 import java.awt.event.ActionListener;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 import javax.swing.DefaultCellEditor;
 import javax.swing.JButton;
@@ -175,7 +176,7 @@ private JXTable getTableTest() {
             
             JComboBox<String> jcb1 = new JComboBox<>();
             for (AlertThreshold level : AlertThreshold.values()) {
-                jcb1.addItem(Constant.messages.getString("ascan.policy.level." + level.name().toLowerCase()));
+                jcb1.addItem(Constant.messages.getString("ascan.policy.level." + level.name().toLowerCase(Locale.ROOT)));
             }
             
             tableTest.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(jcb1));

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import javax.swing.table.DefaultTableModel;
@@ -176,7 +177,7 @@ public void setValueAt(Object value, int row, int col) {
         
     private String strToI18n(String str) {
         // I18n's threshold and strength enums
-        return Constant.messages.getString("ascan.policy.level." + str.toLowerCase());
+        return Constant.messages.getString("ascan.policy.level." + str.toLowerCase(Locale.ROOT));
     }
 
     private String i18nToStr(String str) {

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -133,7 +133,7 @@ public static API getInstance() {
 	/**
 	 * Registers the given {@code ApiImplementor} to the ZAP API.
 	 * <p>
-	 * The implementor is not registed if the {@link ApiImplementor#getPrefix() API implementor prefix} is already in use.
+	 * The implementor is not registered if the {@link ApiImplementor#getPrefix() API implementor prefix} is already in use.
 	 * <p>
 	 * <strong>Note:</strong> The preferred method to add an {@code ApiImplementor} is through the method
 	 * {@link org.parosproxy.paros.extension.ExtensionHook#addApiImplementor(ApiImplementor)

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -18,6 +18,7 @@
 package org.zaproxy.zap.extension.api;
 
 import java.io.StringWriter;
+import java.util.Locale;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -105,7 +106,7 @@ public ApiException(Type type, String detail) {
 	}
 
     public ApiException(Type type, String detail, Throwable cause) {
-        super(type.name().toLowerCase(), cause);
+        super(type.name().toLowerCase(Locale.ROOT), cause);
         this.type = type;
         this.detail = detail;
     }

File: src/org/zaproxy/zap/extension/api/WebUI.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Locale;
 
 import org.apache.commons.httpclient.URI;
 import org.parosproxy.paros.Constant;
@@ -291,7 +292,7 @@ public String handleRequest(String component, ApiImplementor impl,
 						sb.append("\" value=\"");
 						if (this.isDevTestNonce && RequestType.other.equals(reqType)) {
 							sb.append(api.getOneTimeNonce("/" + 
-									reqType.name().toUpperCase() + "/" + 
+									reqType.name().toUpperCase(Locale.ROOT) + "/" + 
 									impl.getPrefix() + "/" + 
 									reqType.name() + "/" + 
 									element.getName() + "/"));

File: src/org/zaproxy/zap/extension/ascan/AllCategoryTableModel.java
Patch:
@@ -25,9 +25,11 @@
 // ZAP: 2014/05/20 Issue 377: Unfulfilled dependencies hang the active scan
 // ZAP: 2016/07/25 Change constructor's parameter to PluginFactory
 // ZAP: 2017/06/05 Take into account the enabled state of the plugin when showing the AlertThreshold of the category.
+// ZAP: 2018/01/30 Do not rely on default locale for upper/lower case conversions (when locale is not important).
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 
 import javax.swing.table.DefaultTableModel;
@@ -114,7 +116,7 @@ public void setValueAt(Object value, int row, int col) {
 
     private String strToI18n(String str) {
         // I18n's threshold and strength enums
-        return Constant.messages.getString("ascan.policy.level." + str.toLowerCase());
+        return Constant.messages.getString("ascan.policy.level." + str.toLowerCase(Locale.ROOT));
     }
 
     private String i18nToStr(String str) {

File: src/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -27,12 +27,14 @@
 // ZAP: 2014/11/19 Issue 1412: Manage scan policies
 // ZAP: 2016/04/04 Use StatusUI in scanners' dialogues
 // ZAP: 2017/06/05 Return AlertThreshold.OFF if the plugin is disabled.
+// ZAP: 2018/01/30 Do not rely on default locale for upper/lower case conversions (when locale is not important).
 
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import javax.swing.table.DefaultTableModel;
@@ -194,7 +196,7 @@ private int getPluginRow(Plugin plugin) {
 
     private String strToI18n (String str) {
     	// I18n's threshold and strength enums
-    	return Constant.messages.getString("ascan.policy.level." + str.toLowerCase());
+    	return Constant.messages.getString("ascan.policy.level." + str.toLowerCase(Locale.ROOT));
     }
 
     private String i18nToStr (String str) {

File: src/org/zaproxy/zap/extension/ascan/ScanProgressItem.java
Patch:
@@ -20,6 +20,8 @@
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.Date;
+import java.util.Locale;
+
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.core.scanner.HostProcess;
 import org.parosproxy.paros.core.scanner.Plugin;
@@ -67,7 +69,7 @@ public String getNameLabel() {
      * @return
      */
     public String getAttackStrenghtLabel() {
-        return Constant.messages.getString("ascan.policy.level." + plugin.getAttackStrength().name().toLowerCase());
+        return Constant.messages.getString("ascan.policy.level." + plugin.getAttackStrength().name().toLowerCase(Locale.ROOT));
     }
 
     /**

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -26,6 +26,7 @@
 import java.awt.event.ActionListener;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 import javax.swing.DefaultCellEditor;
 import javax.swing.JButton;
@@ -175,7 +176,7 @@ private JXTable getTableTest() {
             
             JComboBox<String> jcb1 = new JComboBox<>();
             for (AlertThreshold level : AlertThreshold.values()) {
-                jcb1.addItem(Constant.messages.getString("ascan.policy.level." + level.name().toLowerCase()));
+                jcb1.addItem(Constant.messages.getString("ascan.policy.level." + level.name().toLowerCase(Locale.ROOT)));
             }
             
             tableTest.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(jcb1));

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import javax.swing.table.DefaultTableModel;
@@ -176,7 +177,7 @@ public void setValueAt(Object value, int row, int col) {
         
     private String strToI18n(String str) {
         // I18n's threshold and strength enums
-        return Constant.messages.getString("ascan.policy.level." + str.toLowerCase());
+        return Constant.messages.getString("ascan.policy.level." + str.toLowerCase(Locale.ROOT));
     }
 
     private String i18nToStr(String str) {

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -133,7 +133,7 @@ public static API getInstance() {
 	/**
 	 * Registers the given {@code ApiImplementor} to the ZAP API.
 	 * <p>
-	 * The implementor is not registed if the {@link ApiImplementor#getPrefix() API implementor prefix} is already in use.
+	 * The implementor is not registered if the {@link ApiImplementor#getPrefix() API implementor prefix} is already in use.
 	 * <p>
 	 * <strong>Note:</strong> The preferred method to add an {@code ApiImplementor} is through the method
 	 * {@link org.parosproxy.paros.extension.ExtensionHook#addApiImplementor(ApiImplementor)

File: src/org/zaproxy/zap/control/AddOnLoaderUtils.java
Patch:
@@ -111,7 +111,7 @@ private static <T> T loadAndInstantiateClassImpl(
             Constructor<T> c = (Constructor<T>) cls.getConstructor();
             T instance = c.newInstance();
             return instance;
-        } catch (Exception e) {
+        } catch (ExceptionInInitializerError | Exception e) {
             LOGGER.error("Failed to initialise: " + classname, e);
         }
         return null;

File: src/org/zaproxy/zap/model/VulnerabilitiesLoader.java
Patch:
@@ -116,7 +116,7 @@ private String createFilename(Locale locale) {
 		return resourceBuilder.toString();
 	}
 	
-	private List<Vulnerability> loadVulnerabilitiesFile(Path file) {
+	List<Vulnerability> loadVulnerabilitiesFile(Path file) {
 
 		ZapXmlConfiguration config;
         try {
@@ -169,7 +169,7 @@ private List<Vulnerability> loadVulnerabilitiesFile(Path file) {
 	 * @return the list of resources files contained in the {@code directory}
 	 * @see LocaleUtils#createResourceFilesPattern(String, String)
 	 */
-	private List<String> getListOfVulnerabilitiesFiles() {
+	List<String> getListOfVulnerabilitiesFiles() {
 		final Pattern filePattern = LocaleUtils.createResourceFilesPattern(fileName, fileExtension);
 		final List<String> fileNames = new ArrayList<>();
 		try {

File: src/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -222,6 +222,9 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			if (!file.exists()) {
 				throw new ApiException(ApiException.Type.DOES_NOT_EXIST, file.getAbsolutePath());
 			}
+			if (extension.getScript(params.getString(ACTION_PARAM_SCRIPT_NAME)) != null) {
+				throw new ApiException(ApiException.Type.ALREADY_EXISTS, ACTION_PARAM_SCRIPT_NAME);
+			}
 			
 			ScriptWrapper script = new ScriptWrapper(
 					params.getString(ACTION_PARAM_SCRIPT_NAME),

File: src/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -222,6 +222,9 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			if (!file.exists()) {
 				throw new ApiException(ApiException.Type.DOES_NOT_EXIST, file.getAbsolutePath());
 			}
+			if (extension.getScript(params.getString(ACTION_PARAM_SCRIPT_NAME)) != null) {
+				throw new ApiException(ApiException.Type.ALREADY_EXISTS, ACTION_PARAM_SCRIPT_NAME);
+			}
 			
 			ScriptWrapper script = new ScriptWrapper(
 					params.getString(ACTION_PARAM_SCRIPT_NAME),

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java
Patch:
@@ -88,6 +88,8 @@ public HttpPanelSender(HttpPanelRequest requestPanel,
     @Override
     public void handleSendMessage(Message aMessage) throws IllegalArgumentException, IOException {
         final HttpMessage httpMessage = (HttpMessage) aMessage;
+        // Reset the user before sending (e.g. Forced User mode sets the user, if needed).
+        httpMessage.setRequestingUser(null);
         try {
             final ModeRedirectionValidator redirectionValidator = new ModeRedirectionValidator();
             boolean followRedirects = getButtonFollowRedirects().isSelected();

File: src/org/zaproxy/zap/extension/pscan/scanner/ScriptsPassiveScanner.java
Patch:
@@ -114,7 +114,7 @@ private boolean appliesToCurrentHistoryType(ScriptWrapper wrapper, PassiveScript
 					logger.debug("Script [Name=" + wrapper.getName() + ", Engine=" + wrapper.getEngineName()
 									+ "]  does not implement the optional method appliesToHistoryType: ", e);
 				}
-				return true;
+				return super.appliesToHistoryType(currentHistoryType);
 			}
 			throw e;
 		}

File: src/org/zaproxy/zap/extension/pscan/scanner/ScriptsPassiveScanner.java
Patch:
@@ -114,7 +114,7 @@ private boolean appliesToCurrentHistoryType(ScriptWrapper wrapper, PassiveScript
 					logger.debug("Script [Name=" + wrapper.getName() + ", Engine=" + wrapper.getEngineName()
 									+ "]  does not implement the optional method appliesToHistoryType: ", e);
 				}
-				return true;
+				return super.appliesToHistoryType(currentHistoryType);
 			}
 			throw e;
 		}

File: src/org/zaproxy/zap/extension/spider/OptionsSpiderPanel.java
Patch:
@@ -260,7 +260,7 @@ private JSlider getSliderMaxDepth() {
 		if (sliderMaxDepth == null) {
 			sliderMaxDepth = new JSlider();
 			sliderMaxDepth.setMaximum(19);
-			sliderMaxDepth.setMinimum(1);
+			sliderMaxDepth.setMinimum(0);
 			sliderMaxDepth.setMinorTickSpacing(1);
 			sliderMaxDepth.setPaintTicks(true);
 			sliderMaxDepth.setPaintLabels(true);

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -122,7 +122,7 @@ public void init(Target target) {
         this.addPadding(0);
 
         // Advanced options
-        this.addNumberField(1, FIELD_MAX_DEPTH, 1, 19, getSpiderParam().getMaxDepth());
+        this.addNumberField(1, FIELD_MAX_DEPTH, 0, 19, getSpiderParam().getMaxDepth());
         this.addNumberField(1, FIELD_MAX_CHILDREN, 0, Integer.MAX_VALUE, getSpiderParam().getMaxChildren());
         this.addNumberField(1, FIELD_MAX_DURATION, 0, Integer.MAX_VALUE, getSpiderParam().getMaxDuration());
         this.addNumberField(1, FIELD_MAX_PARSE_SIZE_BYTES, 0, Integer.MAX_VALUE, getSpiderParam().getMaxParseSizeBytes());

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -254,7 +254,8 @@ public void run() {
 		// Check if the crawling process is paused
 		parent.checkPauseAndWait();
 		
-		if (depth < parent.getSpiderParam().getMaxDepth()) {
+		int maxDepth = parent.getSpiderParam().getMaxDepth();
+		if (maxDepth == SpiderParam.UNLIMITED_DEPTH || depth < maxDepth) {
 			parent.notifyListenersSpiderTaskResult(new SpiderTaskResult(msg));
 			processResource(msg);
 		} else {

File: src/org/zaproxy/zap/extension/history/PopupMenuPurgeSites.java
Patch:
@@ -40,6 +40,8 @@ public class PopupMenuPurgeSites extends PopupMenuItemSiteNodeContainer {
 
     public PopupMenuPurgeSites() {
         super(Constant.messages.getString("sites.purge.popup"), true);
+
+        setAccelerator(View.getSingleton().getDefaultDeleteKeyStroke());
     }
 
     @Override

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -1096,7 +1096,7 @@ public void setPluginRequestCount(int pluginId, int reqCount) {
 	}
 	
 	/**
-	 * Gets the request count of the plugin with the give ID.
+	 * Gets the request count of the plugin with the given ID.
 	 *
 	 * @param pluginId the ID of the plugin
 	 * @return the request count

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -919,7 +919,7 @@ private void sendAndReceiveImpl(HttpMessage message, HttpRequestConfig requestCo
     }
 
     /**
-     * Follows redirections using the response of the given {@code message}. The {@code validator} in the give request
+     * Follows redirections using the response of the given {@code message}. The {@code validator} in the given request
      * configuration will be called for each redirection received. After the call to this method the given {@code message} will
      * have the contents of the last response received (possibly the response of a redirection).
      * <p>

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -194,7 +194,7 @@ public void hook(ExtensionHook extensionHook) {
 	}
 
 	/**
-	 * Creates an {@code ImageIcon} with the give resource path, if in view mode.
+	 * Creates an {@code ImageIcon} with the given resource path, if in view mode.
 	 *
 	 * @param resourcePath the resource path of the icon, must not be {@code null}.
 	 * @return the icon, or {@code null} if not in view mode.

File: src/org/zaproxy/zap/extension/script/ScriptVars.java
Patch:
@@ -251,7 +251,7 @@ public static String getScriptVar(ScriptContext context, String key) {
 	}
 
 	/**
-	 * Gets a variable from the script with the give name.
+	 * Gets a variable from the script with the given name.
 	 * 
 	 * @param scriptName the name of the script.
 	 * @param key the key of the variable.

File: src/org/zaproxy/zap/view/table/DefaultHistoryReferencesTableModel.java
Patch:
@@ -258,10 +258,10 @@ public void removeHistoryReference(HistoryReference historyReference) {
     }
     
     /**
-     * Returns the history reference with the give ID. If the history reference is not found {@code null} is returned.
+     * Returns the history reference with the given ID. If the history reference is not found {@code null} is returned.
      * 
      * @param historyReferenceId the ID of the history reference that will be searched
-     * @return the history refernce, or {@code null} if not found
+     * @return the history reference, or {@code null} if not found
      */
     public HistoryReference getHistoryReference(int historyReferenceId) {
         DefaultHistoryReferencesTableEntry entry = getEntryWithHistoryId(historyReferenceId);

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -550,7 +550,7 @@ private boolean removeAddOnImpl(AddOn ao, boolean upgrading, AddOnUninstallation
 			if (runnableAddOns.remove(ao) != null) {
 			    saveAddOnsRunState(runnableAddOns);
 			}
-			AddOnInstaller.uninstallAddOnFiles(ao, NULL_CALLBACK);
+			AddOnInstaller.uninstallAddOnFiles(ao, NULL_CALLBACK, runnableAddOns.keySet());
 			removeAddOnClassLoader(ao);
 			deleteAddOnFile(ao, upgrading);
 			ao.setInstallationStatus(AddOn.InstallationStatus.UNINSTALLATION_FAILED);
@@ -576,7 +576,7 @@ private boolean removeAddOnImpl(AddOn ao, boolean upgrading, AddOnUninstallation
 		unloadDependentExtensions(ao);
 		softUninstallDependentAddOns(ao);
 
-		boolean uninstalledWithoutErrors = AddOnInstaller.uninstall(ao, callback);
+		boolean uninstalledWithoutErrors = AddOnInstaller.uninstall(ao, callback, runnableAddOns.keySet());
 
 		if (uninstalledWithoutErrors && ! this.aoc.removeAddOn(ao)) {
 			uninstalledWithoutErrors = false;

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -1096,7 +1096,7 @@ public void setPluginRequestCount(int pluginId, int reqCount) {
 	}
 	
 	/**
-	 * Gets the request count of the plugin with the give ID.
+	 * Gets the request count of the plugin with the given ID.
 	 *
 	 * @param pluginId the ID of the plugin
 	 * @return the request count

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -919,7 +919,7 @@ private void sendAndReceiveImpl(HttpMessage message, HttpRequestConfig requestCo
     }
 
     /**
-     * Follows redirections using the response of the given {@code message}. The {@code validator} in the give request
+     * Follows redirections using the response of the given {@code message}. The {@code validator} in the given request
      * configuration will be called for each redirection received. After the call to this method the given {@code message} will
      * have the contents of the last response received (possibly the response of a redirection).
      * <p>

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -194,7 +194,7 @@ public void hook(ExtensionHook extensionHook) {
 	}
 
 	/**
-	 * Creates an {@code ImageIcon} with the give resource path, if in view mode.
+	 * Creates an {@code ImageIcon} with the given resource path, if in view mode.
 	 *
 	 * @param resourcePath the resource path of the icon, must not be {@code null}.
 	 * @return the icon, or {@code null} if not in view mode.

File: src/org/zaproxy/zap/extension/script/ScriptVars.java
Patch:
@@ -251,7 +251,7 @@ public static String getScriptVar(ScriptContext context, String key) {
 	}
 
 	/**
-	 * Gets a variable from the script with the give name.
+	 * Gets a variable from the script with the given name.
 	 * 
 	 * @param scriptName the name of the script.
 	 * @param key the key of the variable.

File: src/org/zaproxy/zap/view/table/DefaultHistoryReferencesTableModel.java
Patch:
@@ -258,10 +258,10 @@ public void removeHistoryReference(HistoryReference historyReference) {
     }
     
     /**
-     * Returns the history reference with the give ID. If the history reference is not found {@code null} is returned.
+     * Returns the history reference with the given ID. If the history reference is not found {@code null} is returned.
      * 
      * @param historyReferenceId the ID of the history reference that will be searched
-     * @return the history refernce, or {@code null} if not found
+     * @return the history reference, or {@code null} if not found
      */
     public HistoryReference getHistoryReference(int historyReferenceId) {
         DefaultHistoryReferencesTableEntry entry = getEntryWithHistoryId(historyReferenceId);

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -80,6 +80,7 @@
 // ZAP: 2017/10/05 Replace usage of Class.newInstance (deprecated in Java 9).
 // ZAP: 2017/11/29 Skip plugins if there's nothing to scan.
 // ZAP: 2017/12/29 Provide means to validate the redirections.
+// ZAP: 2018/01/01 Update initialisation of PluginStats.
 
 package org.parosproxy.paros.core.scanner;
 
@@ -290,7 +291,7 @@ public void run() {
             pluginFactory.reset();
             synchronized (mapPluginStats) {
                 for (Plugin plugin : pluginFactory.getPending()) {
-                    mapPluginStats.put(plugin.getId(), new PluginStats());
+                    mapPluginStats.put(plugin.getId(), new PluginStats(plugin.getName()));
                 }
             }
 

File: src/org/zaproxy/zap/network/HttpRequestConfig.java
Patch:
@@ -193,7 +193,7 @@ public Builder setNotifyListeners(boolean notifyListeners) {
         /**
          * Sets the value of the socket timeout ({@link java.net.SocketOptions#SO_TIMEOUT SO_TIMEOUT}), in milliseconds.
          * <p>
-         * A value equal (or lower than) {@link HttpRequestConfig#NO_VALUE_SET} resets any value previously value. Value zero
+         * A value equal (or lower than) {@link HttpRequestConfig#NO_VALUE_SET} resets any value previously set. Value zero
          * indicates an infinite timeout.
          *
          * @param soTimeout the socket timeout, in milliseconds.

File: src/org/zaproxy/zap/network/HttpRequestConfig.java
Patch:
@@ -193,7 +193,7 @@ public Builder setNotifyListeners(boolean notifyListeners) {
         /**
          * Sets the value of the socket timeout ({@link java.net.SocketOptions#SO_TIMEOUT SO_TIMEOUT}), in milliseconds.
          * <p>
-         * A value equal (or lower than) {@link HttpRequestConfig#NO_VALUE_SET} resets any value previously value. Value zero
+         * A value equal (or lower than) {@link HttpRequestConfig#NO_VALUE_SET} resets any value previously set. Value zero
          * indicates an infinite timeout.
          *
          * @param soTimeout the socket timeout, in milliseconds.

File: src/org/zaproxy/zap/network/HttpRedirectionValidator.java
Patch:
@@ -30,6 +30,7 @@
  * 
  * @since 2.6.0
  */
+@FunctionalInterface
 public interface HttpRedirectionValidator {
 
     /**
@@ -45,5 +46,6 @@ public interface HttpRedirectionValidator {
      *
      * @param message the HTTP message that was received, never {@code null}.
      */
-    void notifyMessageReceived(HttpMessage message);
+    default void notifyMessageReceived(HttpMessage message) {
+    }
 }
\ No newline at end of file

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1123,7 +1123,7 @@ private RecordHistory getRecordHistory(TableHistory tableHistory, Integer id) th
 		} catch (HttpMalformedHeaderException | DatabaseException e) {
 			throw new ApiException(ApiException.Type.INTERNAL_ERROR, e);
 		}
-		if (recordHistory == null || recordHistory.getHistoryType() == HistoryReference.TYPE_TEMPORARY) {
+		if (recordHistory == null) {
 			throw new ApiException(ApiException.Type.DOES_NOT_EXIST, Integer.toString(id));
 		}
 		return recordHistory;
@@ -1585,8 +1585,7 @@ private void processHttpMessages(String baseUrl, int start, int count, Processor
 		try {
 			TableHistory tableHistory = Model.getSingleton().getDb()
 					.getTableHistory();
-			List<Integer> historyIds = tableHistory.getHistoryIdsExceptOfHistType(Model
-					.getSingleton().getSession().getSessionId(), HistoryReference.TYPE_TEMPORARY);
+			List<Integer> historyIds = tableHistory.getHistoryIds(Model.getSingleton().getSession().getSessionId());
 
 			PaginationConstraintsChecker pcc = new PaginationConstraintsChecker(start, count);
 			for (Integer id : historyIds) {

File: src/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -82,7 +82,7 @@ public void scan() {
 
             // ZAP: To handle Multipart Form-Data POST requests
             if ((enabledRPC & ScannerParam.RPC_MULTIPART) != 0) {
-                listVariant.add(new VariantMultipartFormQuery());
+                listVariant.add(new VariantMultipartFormParameters());
             }
 
             // ZAP: To handle XML based POST requests

File: src/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -82,7 +82,7 @@ public void scan() {
 
             // ZAP: To handle Multipart Form-Data POST requests
             if ((enabledRPC & ScannerParam.RPC_MULTIPART) != 0) {
-                listVariant.add(new VariantMultipartFormQuery());
+                listVariant.add(new VariantMultipartFormParameters());
             }
 
             // ZAP: To handle XML based POST requests

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -909,9 +909,9 @@ public void eventReceived(Event event) {
                 notifyHistoryItemChanged(Integer.valueOf(event.getParameters().get(AlertEventPublisher.HISTORY_REFERENCE_ID)));
                 break;
             case AlertEventPublisher.ALL_ALERTS_REMOVED_EVENT:
-            default:
                 notifyHistoryItemsChanged();
                 break;
+            default:
             }
         }
     }

File: src/org/zaproxy/zap/extension/spider/SpiderMessagesTableModel.java
Patch:
@@ -355,9 +355,9 @@ public void eventReceived(Event event) {
                 refreshEntry(Integer.valueOf(event.getParameters().get(AlertEventPublisher.HISTORY_REFERENCE_ID)));
                 break;
             case AlertEventPublisher.ALL_ALERTS_REMOVED_EVENT:
-            default:
                 refreshEntries();
                 break;
+            default:
             }
         }
 

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -72,7 +72,6 @@
 import org.zaproxy.zap.extension.api.ApiDynamicActionImplementor;
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseSet;
 import org.zaproxy.zap.extension.authentication.AuthenticationAPI;
 import org.zaproxy.zap.extension.authentication.ContextAuthenticationPanel;
 import org.zaproxy.zap.extension.users.ExtensionUserManagement;
@@ -374,7 +373,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("methodName", API_METHOD_NAME);
 			values.put("loginUrl", loginRequestURL);
 			values.put("loginRequestData", this.loginRequestBody);
-			return new ApiResponseSet<String>("method", values);
+			return new AuthMethodApiResponseRepresentation<>(values);
 		}
 
 		@Override

File: src/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -27,7 +27,6 @@
 import org.zaproxy.zap.extension.api.ApiDynamicActionImplementor;
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseSet;
 import org.zaproxy.zap.extension.authentication.AuthenticationAPI;
 import org.zaproxy.zap.model.Context;
 import org.zaproxy.zap.session.SessionManagementMethod;
@@ -139,7 +138,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("host", this.hostname);
 			values.put("port", Integer.toString(this.port));
 			values.put("realm", this.realm);
-			return new ApiResponseSet<String>("method", values);
+			return new AuthMethodApiResponseRepresentation<>(values);
 		}
 
 	}

File: src/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -47,7 +47,6 @@
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiException.Type;
 import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseElement;
 import org.zaproxy.zap.extension.api.ApiResponseSet;
 import org.zaproxy.zap.extension.authentication.AuthenticationAPI;
 import org.zaproxy.zap.extension.httpsessions.ExtensionHttpSessions;
@@ -145,7 +144,9 @@ public void onMethodDiscarded() {
 
 		@Override
 		public ApiResponse getApiResponseRepresentation() {
-			return new ApiResponseElement("methodName", API_METHOD_NAME);
+			Map<String, String> values = new HashMap<>();
+			values.put("methodName", API_METHOD_NAME);
+			return new AuthMethodApiResponseRepresentation<>(values);
 		}
 
 		@Override

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -45,7 +45,6 @@
 import org.zaproxy.zap.extension.api.ApiDynamicActionImplementor;
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseSet;
 import org.zaproxy.zap.extension.authentication.AuthenticationAPI;
 import org.zaproxy.zap.extension.script.ExtensionScript;
 import org.zaproxy.zap.extension.script.ScriptType;
@@ -266,7 +265,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("methodName", API_METHOD_NAME);
 			values.put("scriptName", script.getName());
 			values.putAll(paramValues);
-			return new ApiResponseSet<String>("method", values);
+			return new AuthMethodApiResponseRepresentation<>(values);
 		}
 
 	}

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -909,9 +909,9 @@ public void eventReceived(Event event) {
                 notifyHistoryItemChanged(Integer.valueOf(event.getParameters().get(AlertEventPublisher.HISTORY_REFERENCE_ID)));
                 break;
             case AlertEventPublisher.ALL_ALERTS_REMOVED_EVENT:
-            default:
                 notifyHistoryItemsChanged();
                 break;
+            default:
             }
         }
     }

File: src/org/zaproxy/zap/extension/spider/SpiderMessagesTableModel.java
Patch:
@@ -355,9 +355,9 @@ public void eventReceived(Event event) {
                 refreshEntry(Integer.valueOf(event.getParameters().get(AlertEventPublisher.HISTORY_REFERENCE_ID)));
                 break;
             case AlertEventPublisher.ALL_ALERTS_REMOVED_EVENT:
-            default:
                 refreshEntries();
                 break;
+            default:
             }
         }
 

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -53,6 +53,7 @@
 // ZAP: 2017/01/23: Issue 1800: Alpha sort the site tree
 // ZAP: 2017/06/29: Issue 3714: Added newOnly option to addPath
 // ZAP: 2017/07/09: Issue 3727: Sorting of SiteMap should not include HTTP method (verb) in the node's name
+// ZAP: 2017/11/22 Expose method to create temporary nodes (Issue 4065).
 
 package org.parosproxy.paros.model;
 
@@ -631,7 +632,7 @@ private String getQueryParamString(SortedSet<String> querySet) {
         return result;
     }
     
-    private HistoryReference createReference(SiteNode node, HistoryReference baseRef, HttpMessage base) throws HttpMalformedHeaderException, DatabaseException, URIException, NullPointerException {
+    public HistoryReference createReference(SiteNode node, HistoryReference baseRef, HttpMessage base) throws HttpMalformedHeaderException, DatabaseException, URIException, NullPointerException {
         TreeNode[] path = node.getPath();
         StringBuilder sb = new StringBuilder();
         String nodeName;

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -83,7 +83,7 @@ public enum ProcessType {cmdline, daemon, desktop, zaas}
     public static void main(String[] args) throws Exception {
         CommandLine cmdLine = null;
         try {
-            cmdLine = new CommandLine(args);
+            cmdLine = new CommandLine(args != null ? Arrays.copyOf(args, args.length) : null);
 
         } catch (final Exception e) {
         	// Cant use the CommandLine help here as the 

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -83,7 +83,7 @@ public enum ProcessType {cmdline, daemon, desktop, zaas}
     public static void main(String[] args) throws Exception {
         CommandLine cmdLine = null;
         try {
-            cmdLine = new CommandLine(args);
+            cmdLine = new CommandLine(args != null ? Arrays.copyOf(args, args.length) : null);
 
         } catch (final Exception e) {
         	// Cant use the CommandLine help here as the 

File: src/org/zaproxy/zap/extension/users/DialogAddUser.java
Patch:
@@ -50,7 +50,7 @@ public class DialogAddUser extends AbstractFormDialog {
 	private static final long serialVersionUID = -7210879426146833234L;
 
 	/** The Constant logger. */
-	protected static final Logger log = Logger.getLogger(DialogAddUser.class);
+	protected final Logger log = Logger.getLogger(getClass());
 
 	private static final String DIALOG_TITLE = Constant.messages.getString("users.dialog.add.title");
 	private static final String CONFIRM_BUTTON_LABEL = Constant.messages

File: src/org/zaproxy/zap/extension/users/DialogModifyUser.java
Patch:
@@ -26,7 +26,9 @@ protected String getConfirmButtonLabel() {
 
 	@Override
 	protected void init() {
-		log.info("Initializing modify user dialog for: " + user);
+		if (log.isDebugEnabled()) {
+			log.debug("Initializing modify user dialog for: " + user);
+		}
 		getNameTextField().setText(user.getName());
 		getEnabledCheckBox().setSelected(user.isEnabled());
 

File: src/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -124,7 +124,7 @@ public WebSession authenticate(SessionManagementMethod sessionManagementMethod,
 						(this.realm == null || this.realm.isEmpty()) ? AuthScope.ANY_REALM : this.realm);
 				stateCredentials = new NTCredentials(userCredentials.getUsername(),
 						userCredentials.getPassword(), InetAddress.getLocalHost().getCanonicalHostName(),
-						this.hostname);
+						this.realm);
 				session.getHttpState().setCredentials(stateAuthScope, stateCredentials);
 			} catch (UnknownHostException e1) {
 				log.error(e1.getMessage(), e1);

File: src/org/parosproxy/paros/core/proxy/ProxyParam.java
Patch:
@@ -34,6 +34,7 @@
 // ZAP: 2017/03/26 Allow to configure if the proxy is behind NAT.
 // ZAP: 2017/04/14 Validate that the SSL/TLS versions persisted can be set/used.
 // ZAP: 2017/09/26 Use helper methods to read the configurations.
+// ZAP: 2017/11/20 Use default value when reading "reverseProxy.ip".
 
 package org.parosproxy.paros.core.proxy;
 
@@ -141,7 +142,7 @@ protected void parse() {
         } catch (Exception e) {
         }
 
-        reverseProxyIp = getConfig().getString(REVERSE_PROXY_IP);
+        reverseProxyIp = getString(REVERSE_PROXY_IP, "localhost");
         if (reverseProxyIp.equalsIgnoreCase("localhost") || reverseProxyIp.equalsIgnoreCase("127.0.0.1")) {
             try {
                 reverseProxyIp = InetAddress.getLocalHost().getHostAddress();

File: src/org/zaproxy/zap/extension/proxies/ExtensionProxies.java
Patch:
@@ -141,6 +141,7 @@ private ProxyServer startProxyServer(String address, int port) {
         String key = createProxyKey(address, port);
         log.info("Starting alt proxy server: " + key);
         ProxyServer proxyServer = new ProxyServer(ZAP_PROXY_THREAD_PREFIX + key);
+        proxyServer.setConnectionParam(getModel().getOptionsParam().getConnectionParam());
         proxyServer.setEnableApi(true);
         if (proxyServer.startServer(address, port, false) > 0) {
             Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class).registerProxy(proxyServer);

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertDelete.java
Patch:
@@ -39,6 +39,7 @@ public class PopupMenuAlertDelete extends PopupMenuItemAlert {
 
     public PopupMenuAlertDelete() {
         super(Constant.messages.getString("scanner.delete.popup"), true);
+        setAccelerator(getExtensionAlert().getView().getDefaultDeleteKeyStroke());
 	}
 	
     @Override

File: src/org/zaproxy/zap/extension/proxies/DialogAddProxy.java
Patch:
@@ -93,7 +93,8 @@ protected boolean validateFields() {
             if (!extension.canListenOn(testProxy.getAddress(), testProxy.getPort())) {
                 JOptionPane.showMessageDialog(
                         this,
-                        Constant.messages.getString("options.proxy.dialog.proxy.warning.fail.message", testProxy.getAddress(), testProxy.getPort()),
+                        Constant.messages.getString("options.proxy.dialog.proxy.warning.fail.message",
+                                testProxy.getAddress(), Integer.toString(testProxy.getPort())),
                         Constant.messages.getString("options.proxy.dialog.proxy.warning.fail.title"),
                         JOptionPane.ERROR_MESSAGE);
                 return false;

File: src/org/zaproxy/zap/extension/proxies/OptionsProxiesPanel.java
Patch:
@@ -86,7 +86,8 @@ public void validateParam(Object obj) throws Exception {
             // Only check if they've changed, otherwise we'll still be listening on them
             if (!extension.canListenOn(newAddress, newPort) || extension.getAdditionalProxy(newAddress, newPort) != null) {
                 throw new Exception(
-                        Constant.messages.getString("options.proxy.dialog.proxy.warning.fail.message", newAddress, newPort));
+                        Constant.messages.getString("options.proxy.dialog.proxy.warning.fail.message", newAddress,
+                                Integer.toString(newPort)));
             }
         }
     }

File: src/org/parosproxy/paros/core/scanner/VariantAbstractQuery.java
Patch:
@@ -144,8 +144,10 @@ protected void setParameters(int type, List<org.zaproxy.zap.model.NameValuePair>
             i++;
         }
         if (i == 0) {
+            String param = "query";
         	// No query params, lets add one just to make sure
-            listParam.add(new NameValuePair(type, "query", "query", i));
+            listParam.add(new NameValuePair(type, param, param, i));
+            originalNames.add(param);
         }
     }
 

File: src/org/parosproxy/paros/core/proxy/ProxyServerSSL.java
Patch:
@@ -22,6 +22,7 @@
 // ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/01/22 Add the possibility to bound the proxy to all interfaces if null IP address has been set
+// ZAP: 2017/11/06 Marked as Deprecated
 //
 package org.parosproxy.paros.core.proxy;
 
@@ -34,6 +35,7 @@
 import org.parosproxy.paros.network.HttpSender;
 import org.parosproxy.paros.network.SSLConnector;
 
+@Deprecated
 public class ProxyServerSSL extends ProxyServer {
 
     private static SSLConnector ssl = HttpSender.getSSLConnector();

File: src/org/parosproxy/paros/core/proxy/ProxyThreadSSL.java
Patch:
@@ -21,13 +21,15 @@
  */
 // ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2017/11/06 Marked as Deprecated
+
 package org.parosproxy.paros.core.proxy;
 
 import java.net.Socket;
 
 //import org.parosproxy.paros.network.HttpUtil;
 
-
+@Deprecated
 public class ProxyThreadSSL extends ProxyThread {
 	ProxyThreadSSL(ProxyServerSSL server, Socket socket) {
 		super(server, socket);

File: src/org/zaproxy/zap/control/CoreFunctionality.java
Patch:
@@ -101,6 +101,7 @@ private static synchronized void createExtensions() {
 			extensions.add(new org.zaproxy.zap.extension.keyboard.ExtensionKeyboard());
 			extensions.add(new org.zaproxy.zap.extension.log4j.ExtensionLog4j());
 			extensions.add(new org.zaproxy.zap.extension.params.ExtensionParams());
+			extensions.add(new org.zaproxy.zap.extension.proxies.ExtensionProxies());
 			extensions.add(new org.zaproxy.zap.extension.pscan.ExtensionPassiveScan());
 			extensions.add(new org.zaproxy.zap.extension.ruleconfig.ExtensionRuleConfig());
 			extensions.add(new org.zaproxy.zap.extension.script.ExtensionScript());

File: src/org/zaproxy/zap/extension/callback/OptionsCallbackPanel.java
Patch:
@@ -36,6 +36,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.NetworkUtils;
 import org.zaproxy.zap.utils.ZapPortNumberSpinner;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.LayoutHelper;
@@ -211,7 +212,7 @@ public void initParam(Object obj) {
         CallbackParam proxyParam = optionsParam
                 .getParamSet(CallbackParam.class);
 
-        List<String> allAddrs = proxyParam.getAvailableAddresses(false);
+        List<String> allAddrs = NetworkUtils.getAvailableAddresses(false);
         localAddress.removeAllItems();
         localAddress.addItem("0.0.0.0");
         for (String addr : allAddrs) {

File: src/org/parosproxy/paros/core/scanner/VariantAbstractQuery.java
Patch:
@@ -144,8 +144,10 @@ protected void setParameters(int type, List<org.zaproxy.zap.model.NameValuePair>
             i++;
         }
         if (i == 0) {
+            String param = "query";
         	// No query params, lets add one just to make sure
-            listParam.add(new NameValuePair(type, "query", "query", i));
+            listParam.add(new NameValuePair(type, param, param, i));
+            originalNames.add(param);
         }
     }
 

File: src/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2014/02/09 Add custom input vector scripting capabilities
 // ZAP: 2014/08/14 Issue 1279: Active scanner excluded parameters not working when "Where" is "Any"
 // ZAP: 2016/06/15 Add VariantHeader based on the current scan options
+// ZAP: 2017/10/31 Use ExtensionLoader.getExtension(Class).
 package org.parosproxy.paros.core.scanner;
 
 import java.util.ArrayList;
@@ -294,7 +295,7 @@ protected String setEscapedParameter(HttpMessage message, String param, String v
 
     private ExtensionScript getExtension() {
         if (extension == null) {
-            extension = (ExtensionScript) Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.NAME);
+            extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);
         }
         return extension;
     }

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -54,6 +54,7 @@
 // ZAP: 2016/07/12 Do not allow techSet to be null
 // ZAP: 2017/03/27 Use HttpRequestConfig.
 // ZAP: 2017/05/31 Remove re-declaration of methods.
+// ZAP: 2017/10/31 Use ExtensionLoader.getExtension(Class).
 
 package org.parosproxy.paros.core.scanner;
 
@@ -265,7 +266,7 @@ protected void sendAndReceive(HttpMessage message, boolean isFollowRedirect, boo
 
         if (parent.handleAntiCsrfTokens() && handleAntiCSRF) {
             if (extAntiCSRF == null) {
-                extAntiCSRF = (ExtensionAntiCSRF) Control.getSingleton().getExtensionLoader().getExtension(ExtensionAntiCSRF.NAME);
+                extAntiCSRF = Control.getSingleton().getExtensionLoader().getExtension(ExtensionAntiCSRF.class);
             }
             if (extAntiCSRF != null) {
                 List<AntiCsrfToken> tokens = extAntiCSRF.getTokens(message);

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java
Patch:
@@ -189,8 +189,7 @@ private boolean notifyPersistentConnectionListener(HttpMessage httpMessage, Sock
 
     protected ExtensionHistory getHistoryExtension() {
         if (extension == null) {
-            extension = ((ExtensionHistory) Control.getSingleton()
-                    .getExtensionLoader().getExtension(ExtensionHistory.NAME));
+            extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);
         }
         return extension;
     }

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -74,6 +74,7 @@
 // ZAP: 2017/08/31 Use helper method I18N.getString(String, Object...).
 // ZAP: 2017/09/02 Use KeyEvent instead of Event (deprecated in Java 9).
 // ZAP: 2017/10/20 Implement method to expose default delete keyboard shortcut (Issue 3626).
+// ZAP: 2017/10/31 Use ExtensionLoader.getExtension(Class).
 
 package org.parosproxy.paros.view;
 
@@ -368,7 +369,7 @@ public void refreshTabViewMenus() {
         menuShowTabs = new JMenu(Constant.messages.getString("menu.view.showtab"));
         mainFrame.getMainMenuBar().getMenuView().add(menuShowTabs);
 
-        ExtensionKeyboard extKey = (ExtensionKeyboard) Control.getSingleton().getExtensionLoader().getExtension(ExtensionKeyboard.NAME);
+        ExtensionKeyboard extKey = Control.getSingleton().getExtensionLoader().getExtension(ExtensionKeyboard.class);
 
         for (AbstractPanel panel : getWorkbench().getSortedPanels(WorkbenchPanel.PanelType.SELECT)) {
             registerMenu(extKey, panel);

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -232,9 +232,8 @@ public void run() {
                 } else {
                     // Dont auto check for updates the first time, no chance of any
                     // proxy having been set
-                    final ExtensionAutoUpdate eau = (ExtensionAutoUpdate) Control.getSingleton()
-                            .getExtensionLoader()
-                            .getExtension("ExtensionAutoUpdate");
+                    final ExtensionAutoUpdate eau = Control.getSingleton()
+                            .getExtensionLoader().getExtension(ExtensionAutoUpdate.class);
                     if (eau != null) {
                         eau.alertIfNewVersions();
                     }

File: src/org/zaproxy/zap/authentication/AuthenticationMethodType.java
Patch:
@@ -224,8 +224,7 @@ public String toString() {
 	protected static void apiChangedAuthenticationMethodForContext(int contextId) {
 		// Make sure the Users are wiped so the authentication credentials for them match the
 		// Method.
-		ExtensionUserManagement usersExtension = (ExtensionUserManagement) Control.getSingleton()
-				.getExtensionLoader().getExtension(ExtensionUserManagement.NAME);
+		ExtensionUserManagement usersExtension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.class);
 		if (usersExtension != null) {
 			if (usersExtension.getContextUserAuthManager(contextId).getUsers().size() > 0) {
 				usersExtension.removeContextUsers(contextId);

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -586,7 +586,7 @@ private String replaceParameterValue(String originalString, HtmlParameter parame
 		
 		private ExtensionUserManagement getUserExt() {
 			if (userExt == null) {
-				userExt = (ExtensionUserManagement) Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.NAME);
+				userExt = Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.class);
 				
 			}
 			return userExt;
@@ -777,8 +777,7 @@ public PopupMenuItemContext getContextMenu(Context context, String parentMenu) {
 					 * @return true, if successful
 					 */
 					private boolean confirmUsersDeletion(Context uiSharedContext) {
-						usersExtension = (ExtensionUserManagement) Control.getSingleton()
-								.getExtensionLoader().getExtension(ExtensionUserManagement.NAME);
+						usersExtension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.class);
 						if (usersExtension != null) {
 							if (usersExtension.getSharedContextUsers(uiSharedContext).size() > 0) {
 								int choice = JOptionPane.showConfirmDialog(this, Constant.messages

File: src/org/zaproxy/zap/authentication/GenericAuthenticationCredentials.java
Patch:
@@ -139,8 +139,8 @@ public void handleAction(JSONObject params) throws ApiException {
 
 				// NOTE: no need to check if extension is loaded as this method is called only if
 				// the Users extension is loaded
-				ExtensionUserManagement extensionUserManagement = (ExtensionUserManagement) Control
-						.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.NAME);
+				ExtensionUserManagement extensionUserManagement = Control.getSingleton()
+						.getExtensionLoader().getExtension(ExtensionUserManagement.class);
 				User user = extensionUserManagement.getContextUserAuthManager(context.getIndex())
 						.getUserById(userId);
 				if (user == null)

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -648,8 +648,7 @@ public AuthenticationCredentials createAuthenticationCredentials() {
 
 	private ExtensionScript getScriptsExtension() {
 		if (extensionScript == null)
-			extensionScript = (ExtensionScript) Control.getSingleton().getExtensionLoader()
-					.getExtension(ExtensionScript.NAME);
+			extensionScript = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);
 		return extensionScript;
 	}
 

File: src/org/zaproxy/zap/authentication/UsernamePasswordAuthenticationCredentials.java
Patch:
@@ -213,8 +213,8 @@ public void handleAction(JSONObject params) throws ApiException {
 				// NOTE: no need to check if extension is loaded as this method is called only if
 				// the Users
 				// extension is loaded
-				ExtensionUserManagement extensionUserManagement = (ExtensionUserManagement) Control
-						.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.NAME);
+				ExtensionUserManagement extensionUserManagement = Control
+						.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.class);
 				User user = extensionUserManagement.getContextUserAuthManager(context.getIndex())
 						.getUserById(userId);
 				if (user == null)

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -484,9 +484,7 @@ private void refreshAlert(Session session) throws DatabaseException {
         //Vector<Integer> v = tableAlert.getAlertListBySession(Model.getSingleton().getSession().getSessionId());
         Vector<Integer> v = tableAlert.getAlertList();
 
-        final ExtensionHistory extensionHistory = (ExtensionHistory) Control.getSingleton()
-                .getExtensionLoader()
-                .getExtension(ExtensionHistory.NAME);
+        final ExtensionHistory extensionHistory = Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);
 
         for (int i = 0; i < v.size(); i++) {
             int alertId = v.get(i).intValue();

File: src/org/zaproxy/zap/extension/ascan/AttackModeScanner.java
Patch:
@@ -218,7 +218,7 @@ public void setRescanOnChange(boolean rescanOnChange) {
 
 	private ExtensionAlert getExtensionAlert() {
 		if (extAlert == null) {
-			extAlert = (ExtensionAlert) Control.getSingleton().getExtensionLoader().getExtension(ExtensionAlert.NAME);
+			extAlert = Control.getSingleton().getExtensionLoader().getExtension(ExtensionAlert.class);
 		}
 		return extAlert;
 	}

File: src/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -103,9 +103,7 @@ public class CustomScanDialog extends StandardFieldsDialog {
     private JButton[] extraButtons = null;
     private ExtensionActiveScan extension = null;
 
-    private final ExtensionUserManagement extUserMgmt = 
-            (ExtensionUserManagement) Control.getSingleton().getExtensionLoader()
-            .getExtension(ExtensionUserManagement.NAME);
+    private final ExtensionUserManagement extUserMgmt = Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.class);
 
     private int headerLength = -1;
     // The index of the start of the URL path eg after https://www.example.com:1234/ - no point attacking this

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -166,15 +166,15 @@ public void hook(ExtensionHook extensionHook) {
         // TODO this isnt currently implemented
         //extensionHook.addCommandLine(getCommandLineArguments());
 
-        ExtensionScript extScript = (ExtensionScript) Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.NAME);
+        ExtensionScript extScript = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);
         if (extScript != null) {
             extScript.registerScriptType(
                     new ScriptType(SCRIPT_TYPE_ACTIVE, "ascan.scripts.type.active", createIcon("script-ascan.png"), true));
             extScript.registerScriptType(
                     new ScriptType(SCRIPT_TYPE_VARIANT, "variant.scripts.type.variant", createIcon("script-variant.png"), true));
         }
 
-        this.ascanController.setExtAlert((ExtensionAlert) Control.getSingleton().getExtensionLoader().getExtension(ExtensionAlert.NAME));
+        this.ascanController.setExtAlert(Control.getSingleton().getExtensionLoader().getExtension(ExtensionAlert.class));
         this.activeScanApi = new ActiveScanAPI(this);
         this.activeScanApi.addApiOptions(getScannerParam());
         extensionHook.addApiImplementor(activeScanApi);

File: src/org/zaproxy/zap/extension/ascan/OptionsVariantPanel.java
Patch:
@@ -212,7 +212,7 @@ public void initParam(ScannerParam param) {
         this.getChkRPCDWR().setSelected((rpcEnabled & ScannerParam.RPC_DWR) != 0);
         this.getChkRPCCustom().setSelected((rpcEnabled & ScannerParam.RPC_CUSTOM) != 0);
         
-        ExtensionScript extension = (ExtensionScript)Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.NAME);
+        ExtensionScript extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);
         this.getChkRPCCustom().setEnabled((extension != null));
 
         this.getExcludedParameterModel().setTokens(param.getExcludedParamList());

File: src/org/zaproxy/zap/extension/ascan/ScriptsActiveScanner.java
Patch:
@@ -131,7 +131,7 @@ private List<ScriptWrapper> getActiveScripts() {
 
 	private ExtensionScript getExtension() {
 		if (extension == null) {
-			extension = (ExtensionScript) Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.NAME);
+			extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);
 		}
 		return extension;
 	}

File: src/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java
Patch:
@@ -246,8 +246,7 @@ private AuthenticationIndicatorsPanel getAuthenticationIndicatorsPanel() {
 	 * @return true, if successful
 	 */
 	private boolean confirmAndExecuteUsersDeletion() {
-		ExtensionUserManagement usersExtension = (ExtensionUserManagement) Control.getSingleton()
-				.getExtensionLoader().getExtension(ExtensionUserManagement.NAME);
+		ExtensionUserManagement usersExtension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.class);
 		if (usersExtension != null) {
 			if (usersExtension.getSharedContextUsers(getUISharedContext()).size() > 0) {
 				authenticationMethodsComboBox.transferFocus();

File: src/org/zaproxy/zap/extension/forceduser/ExtensionForcedUser.java
Patch:
@@ -216,8 +216,7 @@ private JCheckBoxMenuItem getForcedUserModeMenuItem() {
 
 	protected ExtensionUserManagement getUserManagementExtension() {
 		if (extensionUserManagement == null) {
-			extensionUserManagement = (ExtensionUserManagement) Control.getSingleton().getExtensionLoader()
-					.getExtension(ExtensionUserManagement.NAME);
+			extensionUserManagement = Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.class);
 		}
 		return extensionUserManagement;
 	}

File: src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
Patch:
@@ -108,7 +108,7 @@ public void hook(ExtensionHook extensionHook) {
             extensionHook.getHookView().addOptionPanel(getPolicyPanel());
         }
 
-        ExtensionScript extScript = (ExtensionScript) Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.NAME);
+        ExtensionScript extScript = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);
         if (extScript != null) {
             extScript.registerScriptType(
                     new ScriptType(SCRIPT_TYPE_PASSIVE, "pscan.scripts.type.passive", createScriptIcon(), true));
@@ -426,8 +426,8 @@ public int getRecordsToScan() {
     private PassiveScanThread getPassiveScanThread() {
         if (pst == null) {
             final ExtensionLoader extensionLoader = Control.getSingleton().getExtensionLoader();
-            final ExtensionHistory extHist = (ExtensionHistory) extensionLoader.getExtension(ExtensionHistory.NAME);
-            final ExtensionAlert extAlert = (ExtensionAlert) extensionLoader.getExtension(ExtensionAlert.NAME);
+            final ExtensionHistory extHist = extensionLoader.getExtension(ExtensionHistory.class);
+            final ExtensionAlert extAlert = extensionLoader.getExtension(ExtensionAlert.class);
 
             pst = new PassiveScanThread(getPassiveScannerList(), extHist, extAlert, getPassiveScanParam());
 

File: src/org/zaproxy/zap/extension/pscan/scanner/ScriptsPassiveScanner.java
Patch:
@@ -57,7 +57,7 @@ public String getName() {
 
 	private ExtensionScript getExtension() {
 		if (extension == null) {
-			extension = (ExtensionScript) Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.NAME);
+			extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);
 		}
 		return extension;
 	}

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -230,8 +230,8 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			// The action is to start a new Scan from the perspective of a user
 			String urlUserScan = ApiUtils.getOptionalStringParam(params, PARAM_URL);
 			int userID = ApiUtils.getIntParam(params, PARAM_USER_ID);
-			ExtensionUserManagement usersExtension = (ExtensionUserManagement) Control.getSingleton()
-					.getExtensionLoader().getExtension(ExtensionUserManagement.NAME);
+			ExtensionUserManagement usersExtension = Control.getSingleton()
+					.getExtensionLoader().getExtension(ExtensionUserManagement.class);
 			if (usersExtension == null) {
 				throw new ApiException(Type.NO_IMPLEMENTOR, ExtensionUserManagement.NAME);
 			}

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -86,8 +86,8 @@ public class SpiderDialog extends StandardFieldsDialog {
 	 */
 	private boolean subtreeOnlyPreviousCheckedState;
     
-    private ExtensionUserManagement extUserMgmt = (ExtensionUserManagement) Control.getSingleton().getExtensionLoader()
-			.getExtension(ExtensionUserManagement.NAME);
+    private ExtensionUserManagement extUserMgmt = Control.getSingleton().getExtensionLoader()
+			.getExtension(ExtensionUserManagement.class);
     
     private Target target = null;
 

File: src/org/zaproxy/zap/extension/stdmenus/ExtensionStdMenus.java
Patch:
@@ -345,7 +345,7 @@ private PopupMenuResendMessage getPopupMenuResendMessage(int menuIndex) {
 		if (popupMenuResendMessage == null) {
 			popupMenuResendMessage = new PopupMenuResendMessage(
 					Constant.messages.getString("history.resend.popup"),
-					(ExtensionHistory) Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.NAME));
+					Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class));
 			popupMenuResendMessage.setMenuIndex(menuIndex);
 		}
 		return popupMenuResendMessage;
@@ -363,7 +363,7 @@ private PopupMenuShowInHistory getPopupMenuShowInHistory(int menuIndex) {
 		if (popupMenuShowInHistory == null) {
 			popupMenuShowInHistory = new PopupMenuShowInHistory(
 					Constant.messages.getString("history.showinhistory.popup"),
-					(ExtensionHistory) Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.NAME));
+					Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class));
 			popupMenuShowInHistory.setMenuIndex(menuIndex);
 		}
 		return popupMenuShowInHistory;

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuActiveScanCustom.java
Patch:
@@ -42,7 +42,7 @@ public PopupMenuActiveScanCustom(String label) {
     
     private ExtensionActiveScan getExtensionActiveScan() {
     	if (extension == null) {
-    		extension = (ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuActiveScanNode.java
Patch:
@@ -42,7 +42,7 @@ public PopupMenuActiveScanNode(String label) {
     
     private ExtensionActiveScan getExtensionActiveScan() {
     	if (extension == null) {
-    		extension = (ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuActiveScanScope.java
Patch:
@@ -42,7 +42,7 @@ public PopupMenuActiveScanScope(String label) {
     
     private ExtensionActiveScan getExtensionActiveScan() {
     	if (extension == null) {
-    		extension = (ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuActiveScanSite.java
Patch:
@@ -42,7 +42,7 @@ public PopupMenuActiveScanSite(String label) {
     
     private ExtensionActiveScan getExtensionActiveScan() {
     	if (extension == null) {
-    		extension = (ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuActiveScanURL.java
Patch:
@@ -42,7 +42,7 @@ public PopupMenuActiveScanURL(String label) {
     
     private ExtensionActiveScan getExtensionActiveScan() {
     	if (extension == null) {
-    		extension = (ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderContext.java
Patch:
@@ -60,8 +60,7 @@ public PopupMenuSpiderContext(String label) {
 	 */
 	private ExtensionSpider getExtensionSpider() {
 		if (extension == null) {
-			extension = (ExtensionSpider) Control.getSingleton().getExtensionLoader()
-					.getExtension(ExtensionSpider.NAME);
+			extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);
 		}
 		return extension;
 	}

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderContextAsUser.java
Patch:
@@ -57,8 +57,7 @@ public PopupMenuSpiderContextAsUser(String label) {
 	 */
 	private ExtensionSpider getExtensionSpider() {
 		if (extension == null) {
-			extension = (ExtensionSpider) Control.getSingleton().getExtensionLoader()
-					.getExtension(ExtensionSpider.NAME);
+			extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);
 		}
 		return extension;
 	}

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderDialog.java
Patch:
@@ -47,7 +47,7 @@ public PopupMenuSpiderDialog(String label) {
     
     private ExtensionSpider getExtensionActiveScan() {
     	if (extension == null) {
-    		extension = (ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderScope.java
Patch:
@@ -46,7 +46,7 @@ public PopupMenuSpiderScope(String label) {
     
     private ExtensionSpider getExtensionSpider() {
     	if (extension == null) {
-    		extension = (ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderSite.java
Patch:
@@ -46,7 +46,7 @@ public PopupMenuSpiderSite(String label) {
     
     private ExtensionSpider getExtensionSpider() {
     	if (extension == null) {
-    		extension = (ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderSubtree.java
Patch:
@@ -46,7 +46,7 @@ public PopupMenuSpiderSubtree(String label) {
     
     private ExtensionSpider getExtensionSpider() {
     	if (extension == null) {
-    		extension = (ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderURL.java
Patch:
@@ -46,7 +46,7 @@ public PopupMenuSpiderURL(String label) {
     
     private ExtensionSpider getExtensionSpider() {
     	if (extension == null) {
-    		extension = (ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.NAME);
+    		extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);
     	}
     	return extension;
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderURLAsUser.java
Patch:
@@ -57,8 +57,7 @@ public PopupMenuSpiderURLAsUser(String label) {
 	 */
 	private ExtensionSpider getExtensionSpider() {
 		if (extension == null) {
-			extension = (ExtensionSpider) Control.getSingleton().getExtensionLoader()
-					.getExtension(ExtensionSpider.NAME);
+			extension = Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);
 		}
 		return extension;
 	}

File: src/org/zaproxy/zap/extension/stdmenus/PopupUserMenuItemHolder.java
Patch:
@@ -74,8 +74,7 @@ public PopupUserMenuItemHolder(String label, String parentName) {
 		this.parentName = parentName;
 		this.visibleItself = true;
 		// Check whether the User Authentication extension is enabled
-		extensionUserAuth = (ExtensionUserManagement) Control.getSingleton().getExtensionLoader()
-				.getExtension(ExtensionUserManagement.NAME);
+		extensionUserAuth = Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.class);
 		if (extensionUserAuth == null || !extensionUserAuth.isEnabled()) {
 			Logger.getLogger(PopupUserMenuItemHolder.class).warn(
 					ExtensionUserManagement.class

File: src/org/zaproxy/zap/extension/users/ExtensionUserManagement.java
Patch:
@@ -111,8 +111,7 @@ public ExtensionUserManagement() {
 	 */
 	protected ExtensionHttpSessions getExtensionHttpSessions() {
 		if (extensionHttpSessions == null) {
-			extensionHttpSessions = (ExtensionHttpSessions) Control.getSingleton().getExtensionLoader()
-					.getExtension(ExtensionHttpSessions.NAME);
+			extensionHttpSessions = Control.getSingleton().getExtensionLoader().getExtension(ExtensionHttpSessions.class);
 			if (extensionHttpSessions == null)
 				log.error("Http Sessions Extension should be enabled for the "
 						+ ExtensionUserManagement.class.getSimpleName() + " to work.");

File: src/org/zaproxy/zap/extension/users/UsersAPI.java
Patch:
@@ -99,8 +99,8 @@ public UsersAPI(ExtensionUserManagement extension) {
 
 		// Load the authentication method actions
 		if (Control.getSingleton() != null) {
-			ExtensionAuthentication authenticationExtension = (ExtensionAuthentication) Control
-					.getSingleton().getExtensionLoader().getExtension(ExtensionAuthentication.NAME);
+			ExtensionAuthentication authenticationExtension = Control
+					.getSingleton().getExtensionLoader().getExtension(ExtensionAuthentication.class);
 			this.loadedAuthenticationMethodActions = new HashMap<>();
 			if (authenticationExtension != null) {
 				for (AuthenticationMethodType t : authenticationExtension.getAuthenticationMethodTypes()) {

File: src/org/zaproxy/zap/model/StructuralTableNode.java
Patch:
@@ -113,7 +113,7 @@ public boolean isSameAs (StructuralNode node) {
 
 	private static ExtensionHistory getExtensionHistory() {
 		if (extHistory == null) {
-			extHistory = (ExtensionHistory) Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.NAME);
+			extHistory = Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);
 		}
 		return extHistory;
 	}

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -404,7 +404,7 @@ private void processResource(HttpMessage message) {
 
 	private ExtensionHistory getExtensionHistory() {
 		if (this.extHistory == null) {
-			this.extHistory = (ExtensionHistory) Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.NAME);
+			this.extHistory = Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);
 		}
 		return this.extHistory;
 	}

File: src/org/zaproxy/zap/users/User.java
Patch:
@@ -268,8 +268,7 @@ public void authenticate() {
 	 */
 	private static ExtensionAuthentication getAuthenticationExtension() {
 		if (extensionAuth == null) {
-			extensionAuth = (ExtensionAuthentication) Control.getSingleton().getExtensionLoader()
-					.getExtension(ExtensionAuthentication.NAME);
+			extensionAuth = Control.getSingleton().getExtensionLoader().getExtension(ExtensionAuthentication.class);
 		}
 		return extensionAuth;
 	}

File: src/org/parosproxy/paros/db/paros/ParosTableContext.java
Patch:
@@ -62,7 +62,7 @@ protected void reconnect(Connection conn) throws DatabaseException {
 			if (!DbUtils.hasTable(conn, TABLE_NAME)) {
 			    // Need to create the table
 			    DbUtils.executeAndClose(
-			            conn.prepareStatement("CREATE cached TABLE CONTEXT_DATA (dataid bigint generated by default as identity (start with 1), contextId int not null, type int not null, data varchar(8192) default '')"));
+			            conn.prepareStatement("CREATE cached TABLE CONTEXT_DATA (dataid bigint generated by default as identity (start with 1), contextId int not null, type int not null, data varchar(1048576) default '')"));
 			}
 
 			psRead	= conn.prepareStatement("SELECT * FROM CONTEXT_DATA WHERE " + DATAID + " = ?");

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -172,7 +172,7 @@ public void hook(ExtensionHook extensionHook) {
 		this.registerScriptType(new ScriptType(TYPE_STANDALONE, "script.type.standalone", createIcon("/resource/icon/16/script-standalone.png"), false,
 				new String[] {ScriptType.CAPABILITY_APPEND}));
 		this.registerScriptType(new ScriptType(TYPE_TARGETED, "script.type.targeted", createIcon("/resource/icon/16/script-targeted.png"), false));
-		this.registerScriptType(new ScriptType(TYPE_HTTP_SENDER, "script.type.httpsender", createIcon("/resource/icon/16/script-targeted.png"), true));
+		this.registerScriptType(new ScriptType(TYPE_HTTP_SENDER, "script.type.httpsender", createIcon("/resource/icon/16/script-httpsender.png"), true));
 
 		extensionHook.addSessionListener(new ClearScriptVarsOnSessionChange());
 

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -172,7 +172,7 @@ public void hook(ExtensionHook extensionHook) {
 		this.registerScriptType(new ScriptType(TYPE_STANDALONE, "script.type.standalone", createIcon("/resource/icon/16/script-standalone.png"), false,
 				new String[] {ScriptType.CAPABILITY_APPEND}));
 		this.registerScriptType(new ScriptType(TYPE_TARGETED, "script.type.targeted", createIcon("/resource/icon/16/script-targeted.png"), false));
-		this.registerScriptType(new ScriptType(TYPE_HTTP_SENDER, "script.type.httpsender", createIcon("/resource/icon/16/script-targeted.png"), true));
+		this.registerScriptType(new ScriptType(TYPE_HTTP_SENDER, "script.type.httpsender", createIcon("/resource/icon/16/script-httpsender.png"), true));
 
 		extensionHook.addSessionListener(new ClearScriptVarsOnSessionChange());
 

File: src/org/zaproxy/zap/extension/httppanel/view/largerequest/ExtensionHttpPanelLargeRequestView.java
Patch:
@@ -79,7 +79,7 @@ public void unload() {
             panelManager.removeRequestDefaultViewSelectorFactory(
                     RequestSplitComponent.NAME,
                     LargeRequestDefaultSplitViewSelectorFactory.NAME);
-            panelManager.removeRequestDefaultViewSelectorFactoryAndDefaultViewSelectorsAdded(
+            panelManager.removeRequestDefaultViewSelectors(
                     RequestSplitComponent.NAME,
                     LargeRequestDefaultSplitViewSelector.NAME,
                     RequestSplitComponent.ViewComponent.BODY);
@@ -89,7 +89,7 @@ public void unload() {
             panelManager.removeRequestDefaultViewSelectorFactory(
                     RequestAllComponent.NAME,
                     LargeRequestDefaultAllViewSelectorFactory.NAME);
-            panelManager.removeRequestDefaultViewSelectorFactoryAndDefaultViewSelectorsAdded(
+            panelManager.removeRequestDefaultViewSelectors(
                     RequestAllComponent.NAME,
                     LargeRequestDefaultAllViewSelector.NAME,
                     null);

File: src/org/zaproxy/zap/extension/httppanel/view/largerequest/ExtensionHttpPanelLargeRequestView.java
Patch:
@@ -79,7 +79,7 @@ public void unload() {
             panelManager.removeRequestDefaultViewSelectorFactory(
                     RequestSplitComponent.NAME,
                     LargeRequestDefaultSplitViewSelectorFactory.NAME);
-            panelManager.removeRequestDefaultViewSelectorFactoryAndDefaultViewSelectorsAdded(
+            panelManager.removeRequestDefaultViewSelectors(
                     RequestSplitComponent.NAME,
                     LargeRequestDefaultSplitViewSelector.NAME,
                     RequestSplitComponent.ViewComponent.BODY);
@@ -89,7 +89,7 @@ public void unload() {
             panelManager.removeRequestDefaultViewSelectorFactory(
                     RequestAllComponent.NAME,
                     LargeRequestDefaultAllViewSelectorFactory.NAME);
-            panelManager.removeRequestDefaultViewSelectorFactoryAndDefaultViewSelectorsAdded(
+            panelManager.removeRequestDefaultViewSelectors(
                     RequestAllComponent.NAME,
                     LargeRequestDefaultAllViewSelector.NAME,
                     null);

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -224,7 +224,7 @@ public void run() {
                 warnAddOnsAndExtensionsNoLongerRunnable();
 
                 if (firstTime) {
-                    // Disabled for now - we have too many popups occuring when you
+                    // Disabled for now - we have too many popups occurring when you
                     // first start up
                     // be nice to have a clean start up wizard...
                     // ExtensionHelp.showHelp();

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -224,7 +224,7 @@ public void run() {
                 warnAddOnsAndExtensionsNoLongerRunnable();
 
                 if (firstTime) {
-                    // Disabled for now - we have too many popups occuring when you
+                    // Disabled for now - we have too many popups occurring when you
                     // first start up
                     // be nice to have a clean start up wizard...
                     // ExtensionHelp.showHelp();

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -378,14 +378,14 @@ private static void installAddOnFiles(AddOnClassLoader addOnClassLoader, AddOn a
                 continue;
             }
             if (!outfile.getParentFile().exists() && !outfile.getParentFile().mkdirs()) {
-                logger.error("Failed to create directories for: " + outfile.getAbsolutePath());
+                logger.error("Failed to create directories for add-on " + addOn + ": " + outfile.getAbsolutePath());
                 continue;
             }
 
             logger.debug("Installing file: " + name);
             URL fileURL = addOnClassLoader.findResource(name);
             if (fileURL == null) {
-                logger.error("File not found on add-on package: " + name);
+                logger.error("File not found in add-on " + addOn + ": " + name);
                 continue;
             }
             try (InputStream in = fileURL.openStream(); OutputStream out = new FileOutputStream(outfile)) {
@@ -395,7 +395,7 @@ private static void installAddOnFiles(AddOnClassLoader addOnClassLoader, AddOn a
                     out.write(buffer, 0, bytesRead);
                 }
             } catch (IOException e) {
-                logger.error("Failed to install file " + outfile.getAbsolutePath(), e);
+                logger.error("Failed to install a file from add-on " + addOn + ": " + outfile.getAbsolutePath(), e);
             }
         }
         Control.getSingleton().getExtensionLoader().addonFilesAdded();

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -378,14 +378,14 @@ private static void installAddOnFiles(AddOnClassLoader addOnClassLoader, AddOn a
                 continue;
             }
             if (!outfile.getParentFile().exists() && !outfile.getParentFile().mkdirs()) {
-                logger.error("Failed to create directories for: " + outfile.getAbsolutePath());
+                logger.error("Failed to create directories for add-on " + addOn + ": " + outfile.getAbsolutePath());
                 continue;
             }
 
             logger.debug("Installing file: " + name);
             URL fileURL = addOnClassLoader.findResource(name);
             if (fileURL == null) {
-                logger.error("File not found on add-on package: " + name);
+                logger.error("File not found in add-on " + addOn + ": " + name);
                 continue;
             }
             try (InputStream in = fileURL.openStream(); OutputStream out = new FileOutputStream(outfile)) {
@@ -395,7 +395,7 @@ private static void installAddOnFiles(AddOnClassLoader addOnClassLoader, AddOn a
                     out.write(buffer, 0, bytesRead);
                 }
             } catch (IOException e) {
-                logger.error("Failed to install file " + outfile.getAbsolutePath(), e);
+                logger.error("Failed to install a file from add-on " + addOn + ": " + outfile.getAbsolutePath(), e);
             }
         }
         Control.getSingleton().getExtensionLoader().addonFilesAdded();

File: src/org/zaproxy/zap/utils/FontUtils.java
Patch:
@@ -81,16 +81,15 @@ private static Font getDefaultFont() {
 	}
 	
 	public static Font getFont (String name) {
-		return new Font(name, Font.PLAIN, getDefaultFont().getSize());
+		return getFont(name, Font.PLAIN);
 	}
 	
 	public static Font getFont (int style) {
 		return getDefaultFont().deriveFont(style);
 	}
 	
 	public static Font getFont (String name, int style) {
-		Font font = (Font) UIManager.getLookAndFeelDefaults().get("defaultFont");
-		return new Font(name, style, font.getSize());
+		return new Font(name, style, getDefaultFont().getSize());
 	}
 	
 	public static Font getFont (int style, Size size) {

File: src/org/zaproxy/zap/utils/FontUtils.java
Patch:
@@ -81,16 +81,15 @@ private static Font getDefaultFont() {
 	}
 	
 	public static Font getFont (String name) {
-		return new Font(name, Font.PLAIN, getDefaultFont().getSize());
+		return getFont(name, Font.PLAIN);
 	}
 	
 	public static Font getFont (int style) {
 		return getDefaultFont().deriveFont(style);
 	}
 	
 	public static Font getFont (String name, int style) {
-		Font font = (Font) UIManager.getLookAndFeelDefaults().get("defaultFont");
-		return new Font(name, style, font.getSize());
+		return new Font(name, style, getDefaultFont().getSize());
 	}
 	
 	public static Font getFont (int style, Size size) {

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.List;
 
 import javax.swing.DefaultListModel;
+import javax.swing.tree.TreeNode;
 
 import org.apache.commons.httpclient.URI;
 import org.apache.commons.httpclient.URIException;
@@ -394,9 +395,9 @@ private void addSeeds(SiteNode node) {
 		// If the "scanChildren" option is enabled, add them
 		if (scanChildren) {
 			@SuppressWarnings("unchecked")
-			Enumeration<SiteNode> en = node.children();
+			Enumeration<TreeNode> en = node.children();
 			while (en.hasMoreElements()) {
-				SiteNode sn = en.nextElement();
+				SiteNode sn = (SiteNode) en.nextElement();
 				addSeeds(sn);
 			}
 		}

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -43,6 +43,7 @@
 import javax.swing.JProgressBar;
 import javax.swing.JToggleButton;
 import javax.swing.JToolBar;
+import javax.swing.tree.TreeNode;
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
@@ -625,9 +626,9 @@ protected SiteNode getSiteNode (String siteName) {
 		SiteNode rootNode = (SiteNode) siteTree.getRoot();
 		
 		@SuppressWarnings("unchecked")
-		Enumeration<SiteNode> en = rootNode.children();
+		Enumeration<TreeNode> en = rootNode.children();
 		while (en.hasMoreElements()) {
-			SiteNode sn = en.nextElement();
+			SiteNode sn = (SiteNode) en.nextElement();
 			String nodeName = sn.getNodeName();
 			if (nodeName.toLowerCase().startsWith("https:") && !hasPort(nodeName)) {
 				nodeName += ":443";

File: src/org/zaproxy/zap/extension/httppanel/view/largerequest/LargeRequestStringHttpPanelViewModel.java
Patch:
@@ -32,7 +32,7 @@ public String getData() {
         }
 
         return httpMessage.getRequestHeader().toString().replaceAll(HttpHeader.CRLF, HttpHeader.LF)
-                + Constant.messages.getString("http.panel.view.largerequest.all.warning");
+                + Constant.messages.getString("http.panel.view.largerequest.all.warning", httpMessage.getRequestBody().length());
     }
 
     @Override

File: src/org/zaproxy/zap/extension/httppanel/view/largeresponse/LargeResponseStringHttpPanelViewModel.java
Patch:
@@ -30,7 +30,7 @@ public String getData() {
 		}
 		
 		return httpMessage.getResponseHeader().toString().replaceAll(HttpHeader.CRLF, HttpHeader.LF) +
-				Constant.messages.getString("http.panel.view.largeresponse.all.warning");
+				Constant.messages.getString("http.panel.view.largeresponse.all.warning", httpMessage.getResponseBody().length());
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.List;
 
 import javax.swing.DefaultListModel;
+import javax.swing.tree.TreeNode;
 
 import org.apache.commons.httpclient.URI;
 import org.apache.commons.httpclient.URIException;
@@ -394,9 +395,9 @@ private void addSeeds(SiteNode node) {
 		// If the "scanChildren" option is enabled, add them
 		if (scanChildren) {
 			@SuppressWarnings("unchecked")
-			Enumeration<SiteNode> en = node.children();
+			Enumeration<TreeNode> en = node.children();
 			while (en.hasMoreElements()) {
-				SiteNode sn = en.nextElement();
+				SiteNode sn = (SiteNode) en.nextElement();
 				addSeeds(sn);
 			}
 		}

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -43,6 +43,7 @@
 import javax.swing.JProgressBar;
 import javax.swing.JToggleButton;
 import javax.swing.JToolBar;
+import javax.swing.tree.TreeNode;
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
@@ -625,9 +626,9 @@ protected SiteNode getSiteNode (String siteName) {
 		SiteNode rootNode = (SiteNode) siteTree.getRoot();
 		
 		@SuppressWarnings("unchecked")
-		Enumeration<SiteNode> en = rootNode.children();
+		Enumeration<TreeNode> en = rootNode.children();
 		while (en.hasMoreElements()) {
-			SiteNode sn = en.nextElement();
+			SiteNode sn = (SiteNode) en.nextElement();
 			String nodeName = sn.getNodeName();
 			if (nodeName.toLowerCase().startsWith("https:") && !hasPort(nodeName)) {
 				nodeName += ":443";

File: src/ch/csnc/extension/util/OptionsParamExperimentalSliSupport.java
Patch:
@@ -31,7 +31,7 @@ public OptionsParamExperimentalSliSupport() {
 
     @Override
     protected void parse() {
-	    expSliSupportEnabled = getConfig().getBoolean(EXPERIMENTAL_SLOT_LIST_INDEXES, false);
+	    expSliSupportEnabled = getBoolean(EXPERIMENTAL_SLOT_LIST_INDEXES, false);
     }
 
 	public boolean isExerimentalSliSupportEnabled() {

File: src/org/zaproxy/zap/extension/brk/BreakpointsParam.java
Patch:
@@ -69,10 +69,10 @@ public BreakpointsParam() {
      */
     @Override
     protected void parse() {
-        confirmDropMessage = getConfig().getBoolean(PARAM_CONFIRM_DROP_MESSAGE_KEY, false);
-        buttonMode = getConfig().getInt(PARAM_UI_BUTTON_MODE, BUTTON_MODE_SIMPLE);
+        confirmDropMessage = getBoolean(PARAM_CONFIRM_DROP_MESSAGE_KEY, false);
+        buttonMode = getInt(PARAM_UI_BUTTON_MODE, BUTTON_MODE_SIMPLE);
         alwaysOnTop = getConfig().getBoolean(PARAM_BRK_ALWAYS_ON_TOP, null);
-        inScopeOnly = getConfig().getBoolean(PARAM_BRK_IN_SCOPE_ONLY, false);
+        inScopeOnly = getBoolean(PARAM_BRK_IN_SCOPE_ONLY, false);
     }
 
     /**

File: src/org/zaproxy/zap/extension/encoder2/EncodeDecodeParam.java
Patch:
@@ -34,9 +34,9 @@ public EncodeDecodeParam() {
 	
 	@Override
 	protected void parse() {
-		base64Charset = getConfig().getString(PARAM_BASE64_CHARSET, base64Charset);
+		base64Charset = getString(PARAM_BASE64_CHARSET, base64Charset);
 		
-		base64DoBreakLines = getConfig().getBoolean(PARAM_BASE64_DO_BREAK_LINES, base64DoBreakLines);
+		base64DoBreakLines = getBoolean(PARAM_BASE64_DO_BREAK_LINES, base64DoBreakLines);
 	}
 
 	public String getBase64Charset() {

File: src/org/zaproxy/zap/extension/script/ScriptParam.java
Patch:
@@ -61,8 +61,8 @@ public ScriptParam() {
 
 	@Override
 	protected void parse() {
-		defaultScript = getConfig().getString(PARAM_DEFAULT_SCRIPT, "");
-		defaultDir = getConfig().getString(PARAM_DEFAULT_DIR, "");
+		defaultScript = getString(PARAM_DEFAULT_SCRIPT, "");
+		defaultDir = getString(PARAM_DEFAULT_DIR, "");
 		
         try {
             List<HierarchicalConfiguration> fields = ((HierarchicalConfiguration) getConfig()).configurationsAt(ALL_SCRIPTS_KEY);
@@ -114,7 +114,7 @@ protected void parse() {
         } catch (Exception e) {
             logger.error("Error while loading the script dirs: " + e.getMessage(), e);
         }
-        confirmRemoveDir = getConfig().getBoolean(SCRIPT_CONFIRM_REMOVE_DIR, true);
+        confirmRemoveDir = getBoolean(SCRIPT_CONFIRM_REMOVE_DIR, true);
 
 	}
 	

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -233,7 +233,7 @@ public List<String> getScriptingEngines() {
 			engineNames.add(engine.getLanguageName() + LANG_ENGINE_SEP + engine.getEngineName());
 		}
 		for (ScriptEngineWrapper sew : this.engineWrappers) {
-			if (! engines.contains(sew.getEngine().getFactory())) {
+			if (! engines.contains(sew.getFactory())) {
 				engineNames.add(sew.getLanguageName() + LANG_ENGINE_SEP + sew.getEngineName());
 			}
 		}
@@ -954,7 +954,7 @@ private void loadTemplate(File f, ScriptType type, ScriptEngineWrapper engine, b
 			if (this.getTreeModel().getTemplate(f.getName()) == null) {
 				String ext = f.getName().substring(f.getName().lastIndexOf(".") + 1);
 				String engineName = this.getEngineNameForExtension(ext);
-				if (engineName != null && (engine == null || engine.getEngine().getFactory().getExtensions().contains(ext))) {
+				if (engineName != null && (engine == null || engine.getExtensions().contains(ext))) {
 					try {
 						ScriptWrapper template = new ScriptWrapper(f.getName(), "", 
 								this.getEngineWrapper(engineName), type, false, f);

File: src/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -200,6 +200,9 @@ protected void setSelectedSession(HttpSession selectedSession) {
 
 		@Override
 		public String encode(String parentStringSeparator) {
+			if (selectedSession == null) {
+				return "";
+			}
 			return Base64.encodeBase64String(selectedSession.getName().getBytes());
 		}
 

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1478,9 +1478,9 @@ private ApiResponseSet<String> alertToSet(Alert alert) {
 		map.put("wascid", String.valueOf(alert.getWascId()));
 		map.put("sourceid", String.valueOf(alert.getSource().getId()));
 		map.put("solution", alert.getSolution());
-		if (alert.getHistoryRef() != null) {
-			map.put("messageId", String.valueOf(alert.getHistoryRef().getHistoryId()));
-		}
+		map.put("messageId",
+				(alert.getHistoryRef() != null) ? String.valueOf(alert.getHistoryRef().getHistoryId()) : "");
+
 		return new ApiResponseSet<String>("alert", map);
 	}
 

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1478,9 +1478,9 @@ private ApiResponseSet<String> alertToSet(Alert alert) {
 		map.put("wascid", String.valueOf(alert.getWascId()));
 		map.put("sourceid", String.valueOf(alert.getSource().getId()));
 		map.put("solution", alert.getSolution());
-		if (alert.getHistoryRef() != null) {
-			map.put("messageId", String.valueOf(alert.getHistoryRef().getHistoryId()));
-		}
+		map.put("messageId",
+				(alert.getHistoryRef() != null) ? String.valueOf(alert.getHistoryRef().getHistoryId()) : "");
+
 		return new ApiResponseSet<String>("alert", map);
 	}
 

File: src/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -200,6 +200,9 @@ protected void setSelectedSession(HttpSession selectedSession) {
 
 		@Override
 		public String encode(String parentStringSeparator) {
+			if (selectedSession == null) {
+				return "";
+			}
 			return Base64.encodeBase64String(selectedSession.getName().getBytes());
 		}
 

File: src/org/zaproxy/zap/db/sql/SqlTableHistory.java
Patch:
@@ -375,7 +375,7 @@ public List<Integer> getHistoryIdsOfHistType(long sessionId, int... histTypes) t
     	
 	    SqlPreparedStatementWrapper psGetAllHistoryIdsIncTypes = null;
         try {
-		    psGetAllHistoryIdsIncTypes = DbSQL.getSingleton().getPreparedStatement( "history.ps.gethistoryidsinctypes");
+		    psGetAllHistoryIdsIncTypes = DbSQL.getSingleton().getPreparedStatement( "history.ps.gethistoryidsinctypes", histTypes.length);
 		    List<Integer> v = new ArrayList<>();
 		    psGetAllHistoryIdsIncTypes.getPs().setLong(1, sessionId);
 		    DbSQL.setSetValues(psGetAllHistoryIdsIncTypes.getPs(), 2, histTypes);
@@ -405,7 +405,7 @@ public List<Integer> getHistoryIdsExceptOfHistType(long sessionId, int... histTy
 	    SqlPreparedStatementWrapper psGetAllHistoryIdsExcTypes = null;
         try {
 		    List<Integer> v = new ArrayList<>();
-		    psGetAllHistoryIdsExcTypes = DbSQL.getSingleton().getPreparedStatement( "history.ps.gethistoryidsnottypes");
+		    psGetAllHistoryIdsExcTypes = DbSQL.getSingleton().getPreparedStatement( "history.ps.gethistoryidsnottypes", histTypes.length);
 		    psGetAllHistoryIdsExcTypes.getPs().setLong(1, sessionId);
 		    DbSQL.setSetValues(psGetAllHistoryIdsExcTypes.getPs(), 2, histTypes);
 		    try (ResultSet rs = psGetAllHistoryIdsExcTypes.getPs().executeQuery()) {

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -538,7 +538,7 @@ private PopupMenuPurgeHistory getPopupMenuPurgeHistory() {
 	public ManualRequestEditorDialog getResendDialog() {
 		if (resendDialog == null) {
 			resendDialog = new ManualHttpRequestEditorDialog(true, "resend", "ui.dialogs.resend");
-			resendDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
+			resendDialog.setTitle(Constant.messages.getString("manReq.dialog.title"));	// ZAP: i18n
 		}
 		return resendDialog;
 	}

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -538,7 +538,7 @@ private PopupMenuPurgeHistory getPopupMenuPurgeHistory() {
 	public ManualRequestEditorDialog getResendDialog() {
 		if (resendDialog == null) {
 			resendDialog = new ManualHttpRequestEditorDialog(true, "resend", "ui.dialogs.resend");
-			resendDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
+			resendDialog.setTitle(Constant.messages.getString("manReq.dialog.title"));	// ZAP: i18n
 		}
 		return resendDialog;
 	}

File: src/org/zaproxy/zap/control/AddOnRunIssuesUtils.java
Patch:
@@ -213,7 +213,7 @@ public static List<String> getUiRunningIssues(AddOn.BaseRunRequirements requirem
                         Constant.messages.getString("cfu.warn.addon.with.missing.requirements.addon.version"),
                         addOn.getName(),
                         issueDetails.get(1),
-                        addOn.getVersion());
+                        addOn.getSemVer() != null ? addOn.getSemVer() : addOn.getVersion());
                 break;
             default:
                 message = Constant.messages.getString("cfu.warn.addon.with.missing.requirements.unknown");
@@ -349,7 +349,7 @@ public static String getDependencyIssue(AddOn.BaseRunRequirements requirements)
                     "Add-on \"{0}\" with version matching {1} (found version {2})",
                     addOn.getName(),
                     issueDetails.get(1),
-                    addOn.getVersion());
+                    addOn.getSemVer() != null ? addOn.getSemVer() : addOn.getVersion());
         default:
             LOGGER.warn("Failed to handle dependency issue with name \"" + requirements.getDependencyIssue().name()
                     + "\" and details: " + issueDetails);

File: src/org/parosproxy/paros/extension/edit/PopupFindMenu.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2012/10/23 Changed to prevent a NullPointerException when there's no
 // parent JFrame (changed to use SwingUtilities.getAncestorOfClass(...)).
 // ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
+// ZAP: 2017/07/22 Leverage KeyStroke constant for consistency with other FindDialog usage
 
 package org.parosproxy.paros.extension.edit;
 
@@ -62,6 +63,7 @@ public PopupFindMenu() {
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("edit.find.popup"));	// ZAP: i18n
+        this.setAccelerator(ExtensionEdit.FIND_DEFAULT_KEYSTROKE);
 	}
 	
     @Override

File: src/org/zaproxy/zap/spider/URLResolver.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * This class is adopted from Htmlunit with the following copyright:
  * 
  * Copyright (c) 2002-2012 Gargoyle Software Inc.

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -515,6 +515,7 @@ public void run() {
 				Mode mode = Mode.valueOf(params.getString(PARAM_MODE).toLowerCase());
 		    	if (View.isInitialised()) {
 	    			View.getSingleton().getMainFrame().getMainToolbarPanel().setMode(mode);
+	    			View.getSingleton().getMainFrame().getMainMenuBar().setMode(mode);
 		    	} else {
 	    			Control.getSingleton().setMode(mode);
 		    	}

File: src/org/zaproxy/zap/view/MainToolbarPanel.java
Patch:
@@ -227,6 +227,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 						default: return;	// Not recognised
 					}
 					Control.getSingleton().setMode(mode);
+					View.getSingleton().getMainFrame().getMainMenuBar().setMode(mode);
 				}
 			});
 		}

File: src/org/zaproxy/zap/extension/api/OptionsApiPanel.java
Patch:
@@ -281,6 +281,7 @@ public void initParam(Object obj) {
 	@Override
 	public void validateParam(Object obj) throws Exception {
 	    if (! getDisableKey().isSelected() && getKeyField().getText().length() == 0) {
+	    	getKeyField().requestFocusInWindow();
 	    	throw new Exception (Constant.messages.getString("api.options.nokey.error"));
 	    }
 	}

File: src/org/zaproxy/zap/db/sql/SqlTableContext.java
Patch:
@@ -129,7 +129,7 @@ public synchronized void delete(int contextId, int type, String data) throws Dat
 	public synchronized void deleteAllDataForContextAndType(int contextId, int type) throws DatabaseException {
     	SqlPreparedStatementWrapper psDeleteAllDataForContextAndType = null;
     	try {
-        	psDeleteAllDataForContextAndType = DbSQL.getSingleton().getPreparedStatement("context.ps.alldataforcontexttype");
+        	psDeleteAllDataForContextAndType = DbSQL.getSingleton().getPreparedStatement("context.ps.deletealldataforcontexttype");
 			psDeleteAllDataForContextAndType.getPs().setInt(1, contextId);
 			psDeleteAllDataForContextAndType.getPs().setInt(2, type);
 			psDeleteAllDataForContextAndType.getPs().executeUpdate();
@@ -147,7 +147,7 @@ public synchronized void deleteAllDataForContextAndType(int contextId, int type)
 	public synchronized void deleteAllDataForContext(int contextId) throws DatabaseException {
     	SqlPreparedStatementWrapper psDeleteAllDataForContext = null;
     	try {
-        	psDeleteAllDataForContext = DbSQL.getSingleton().getPreparedStatement("context.ps.alldataforcontext");
+        	psDeleteAllDataForContext = DbSQL.getSingleton().getPreparedStatement("context.ps.deletealldataforcontext");
 			psDeleteAllDataForContext.getPs().setInt(1, contextId);
 			psDeleteAllDataForContext.getPs().executeUpdate();
 		} catch (SQLException e) {

File: src/org/zaproxy/zap/extension/api/OptionsApiPanel.java
Patch:
@@ -281,6 +281,7 @@ public void initParam(Object obj) {
 	@Override
 	public void validateParam(Object obj) throws Exception {
 	    if (! getDisableKey().isSelected() && getKeyField().getText().length() == 0) {
+	    	getKeyField().requestFocusInWindow();
 	    	throw new Exception (Constant.messages.getString("api.options.nokey.error"));
 	    }
 	}

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1601,6 +1601,7 @@ private static class ModeRedirectionValidator implements HttpRedirectionValidato
 
 		public ModeRedirectionValidator(Processor<HttpMessage> processor) {
 			this.processor = processor;
+			this.isRequestValid = true;
 		}
 
 		@Override

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -983,7 +983,7 @@ public void run() {
 						}
 						if (latestVersionInfo != null) {
 							for (AddOn addOn : latestVersionInfo.getAddOns()) {
-								AddOn localAddOn = localVersionInfo.getAddOn(addOn.getId());
+								AddOn localAddOn = getLocalVersionInfo().getAddOn(addOn.getId());
 								if (localAddOn != null && !addOn.isUpdateTo(localAddOn)) {
 									addOn.setInstallationStatus(localAddOn.getInstallationStatus());
 								}

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -983,7 +983,7 @@ public void run() {
 						}
 						if (latestVersionInfo != null) {
 							for (AddOn addOn : latestVersionInfo.getAddOns()) {
-								AddOn localAddOn = localVersionInfo.getAddOn(addOn.getId());
+								AddOn localAddOn = getLocalVersionInfo().getAddOn(addOn.getId());
 								if (localAddOn != null && !addOn.isUpdateTo(localAddOn)) {
 									addOn.setInstallationStatus(localAddOn.getInstallationStatus());
 								}

File: src/org/zaproxy/zap/control/AddOnLoaderUtils.java
Patch:
@@ -112,7 +112,7 @@ private static <T> T loadAndInstantiateClassImpl(
             T instance = c.newInstance();
             return instance;
         } catch (Exception e) {
-            LOGGER.debug(e.getMessage(), e);
+            LOGGER.error("Failed to initialise: " + classname, e);
         }
         return null;
     }

File: src/org/zaproxy/zap/control/AddOnLoaderUtils.java
Patch:
@@ -112,7 +112,7 @@ private static <T> T loadAndInstantiateClassImpl(
             T instance = c.newInstance();
             return instance;
         } catch (Exception e) {
-            LOGGER.debug(e.getMessage(), e);
+            LOGGER.error("Failed to initialise: " + classname, e);
         }
         return null;
     }

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -343,7 +343,6 @@ public void run() {
 					view.getSiteTreePanel().getTreeSite().setModel(session.getSiteTree());
 
 					// refresh display
-					view.getMainFrame().setTitle(session.getSessionName());
 					view.getOutputPanel().clear();
 				}
 			});
@@ -413,7 +412,6 @@ public void run() {
 			});
 			
 			// refresh display
-			view.getMainFrame().setTitle(session.getSessionName());
 			view.getOutputPanel().clear();
 		}
 		

File: src/org/parosproxy/paros/view/SessionGeneralPanel.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2015/02/05 Issue 1524: New Persist Session dialog
 // ZAP: 2015/02/10 Issue 1528: Support user defined font size
 // ZAP: 2017/01/09 Remove method no longer needed.
+// ZAP: 2017/06/01 Issue 3555: setTitle() functionality moved in order to ensure consistent application
 
 package org.parosproxy.paros.view;
 
@@ -148,6 +149,7 @@ public void saveParam (Object obj) throws Exception {
 	    boolean changed = false;
 	    if (! getTxtSessionName().getText().equals(session.getSessionName())) {
 	    	session.setSessionName(getTxtSessionName().getText());
+	    	View.getSingleton().getMainFrame().setTitle(session);
 	    	changed = true;
 	    }
 	    if (! getTxtDescription().getText().equals(session.getSessionDesc())) {

File: src/org/zaproxy/zap/extension/uiutils/ExtensionUiUtils.java
Patch:
@@ -88,6 +88,7 @@ public void run() {
 	private void sessionChangedEventHandler(Session session) {
 		View.getSingleton().getMainFrame().getMainMenuBar().sessionChanged(session);
 		View.getSingleton().getMainFrame().getMainToolbarPanel().sessionChanged(session);
+		View.getSingleton().getMainFrame().setTitle(session);
 	}
 
 

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -343,7 +343,6 @@ public void run() {
 					view.getSiteTreePanel().getTreeSite().setModel(session.getSiteTree());
 
 					// refresh display
-					view.getMainFrame().setTitle(session.getSessionName());
 					view.getOutputPanel().clear();
 				}
 			});
@@ -413,7 +412,6 @@ public void run() {
 			});
 			
 			// refresh display
-			view.getMainFrame().setTitle(session.getSessionName());
 			view.getOutputPanel().clear();
 		}
 		

File: src/org/parosproxy/paros/view/SessionGeneralPanel.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2015/02/05 Issue 1524: New Persist Session dialog
 // ZAP: 2015/02/10 Issue 1528: Support user defined font size
 // ZAP: 2017/01/09 Remove method no longer needed.
+// ZAP: 2017/06/01 Issue 3555: setTitle() functionality moved in order to ensure consistent application
 
 package org.parosproxy.paros.view;
 
@@ -148,6 +149,7 @@ public void saveParam (Object obj) throws Exception {
 	    boolean changed = false;
 	    if (! getTxtSessionName().getText().equals(session.getSessionName())) {
 	    	session.setSessionName(getTxtSessionName().getText());
+	    	View.getSingleton().getMainFrame().setTitle(session);
 	    	changed = true;
 	    }
 	    if (! getTxtDescription().getText().equals(session.getSessionDesc())) {

File: src/org/zaproxy/zap/extension/uiutils/ExtensionUiUtils.java
Patch:
@@ -88,6 +88,7 @@ public void run() {
 	private void sessionChangedEventHandler(Session session) {
 		View.getSingleton().getMainFrame().getMainMenuBar().sessionChanged(session);
 		View.getSingleton().getMainFrame().getMainToolbarPanel().sessionChanged(session);
+		View.getSingleton().getMainFrame().setTitle(session);
 	}
 
 

File: src/org/parosproxy/paros/extension/history/PopupMenuEmbeddedBrowser.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2012/07/29 Issue 43: Cleaned up access to ExtensionHistory UI
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
+// ZAP: 2017/05/31 Added a multi-catch for a specific handler. 
 
 package org.parosproxy.paros.extension.history;
 
@@ -106,9 +107,7 @@ private BrowserLauncher getBrowserLauncher() {
 		if (launcher == null) {
 			try {
 				launcher = new BrowserLauncher();
-			} catch (BrowserLaunchingInitializingException e) {
-				supported = false;
-			} catch (UnsupportedOperatingSystemException e) {
+			} catch (BrowserLaunchingInitializingException | UnsupportedOperatingSystemException e) {
 				supported = false;
 			}
 		}

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -49,6 +49,7 @@
 // ZAP: 2017/03/19 Add TYPE_SPIDER_TEMPORARY.
 // ZAP: 2017/05/03 Notify tag changes.
 // ZAP: 2017/05/17 Allow to obtain the tags of a message.
+// ZAP: 2017/05/31 Add a multi-catch for a specific handler. 
 
 package org.parosproxy.paros.model;
 
@@ -415,9 +416,7 @@ public String toString() {
 	    try {
 	        msg = getHttpMessage();
             display = getDisplay(msg);	        
-	    } catch (HttpMalformedHeaderException e1) {
-	        display = "";
-	    } catch (DatabaseException e) {
+	    } catch (HttpMalformedHeaderException | DatabaseException e1) {
 	        display = "";
 	    }
         return display;

File: src/org/zaproxy/zap/utils/TimeStampUtils.java
Patch:
@@ -74,9 +74,7 @@ public static String currentFormattedTimeStamp(String format) {
 			SimpleDateFormat sdf = new SimpleDateFormat(format);
 			final String formattedTimeStamp = sdf.format(new Date());
 			return formattedTimeStamp; 
-		} catch (IllegalArgumentException e) {
-			return(TimeStampUtils.currentDefaultFormattedTimeStamp());  
-		} catch (NullPointerException e) {
+		} catch (IllegalArgumentException | NullPointerException e) {
 			return(TimeStampUtils.currentDefaultFormattedTimeStamp());  
 		} 
 	}

File: src/org/zaproxy/zap/utils/ViewState.java
Patch:
@@ -89,9 +89,7 @@ public static <T> T decode(String base64) {
                         ByteArrayInputStream bais = new ByteArrayInputStream(b);
                         ObjectInputStream    ois  = new ObjectInputStream(bais);
                         return (T)ois.readObject();
-                } catch (IOException e) {
-                        throw new RuntimeException(e);
-                } catch (ClassNotFoundException e) {
+                } catch (IOException | ClassNotFoundException e) {
                         throw new RuntimeException(e);
                 }
         }

File: src/org/zaproxy/zap/view/renderer/SizeBytesStringValue.java
Patch:
@@ -39,7 +39,7 @@ public class SizeBytesStringValue implements StringValue {
             Constant.messages.getString("generic.value.size.bytes.value.unit"));
 
     // Use the same NumberFormat instance since the renderes are used in EDT only.
-    private static final NumberFormat NUMBER_FORMAT = NumberFormat.getInstance(Constant.getLocale());
+    private static final NumberFormat NUMBER_FORMAT = NumberFormat.getInstance();
     static {
         NUMBER_FORMAT.setMaximumFractionDigits(2);
     }

File: src/org/zaproxy/zap/view/renderer/TimeDurationStringValue.java
Patch:
@@ -34,7 +34,7 @@ public class TimeDurationStringValue implements StringValue {
             Constant.messages.getString("generic.value.time.duration.value.unit"));
 
     // Use the same NumberFormat instance since the renderes are used in EDT only.
-    private static final NumberFormat NUMBER_FORMAT = NumberFormat.getInstance(Constant.getLocale());
+    private static final NumberFormat NUMBER_FORMAT = NumberFormat.getInstance();
     static {
         NUMBER_FORMAT.setMaximumFractionDigits(2);
     }

File: src/org/zaproxy/zap/extension/pscan/PassiveScanAPI.java
Patch:
@@ -173,7 +173,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 				map.put("id", String.valueOf(scanner.getPluginId()));
 				map.put("name", scanner.getName());
 				map.put("enabled", String.valueOf(scanner.isEnabled()));
-				map.put("alertThreshold", scanner.getLevel(true).name());
+				map.put("alertThreshold", scanner.getAlertThreshold(true).name());
 				map.put("quality", scanner.getStatus().toString());
 				resultList.addItem(new ApiResponseSet<String>("scanner", map));
 			}

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -248,11 +248,11 @@ public PluginPassiveScanner getScanner() {
         }
 
     	public void reset() {
-    		this.threshold = scanner.getLevel();
+    		this.threshold = scanner.getAlertThreshold();
     	}
     	
     	public void persistChanges() {
-    		this.scanner.setLevel(threshold);
+    		this.scanner.setAlertThreshold(threshold);
     		this.scanner.setEnabled(!AlertThreshold.OFF.equals(threshold));
     		this.scanner.save();
     	}

File: src/org/parosproxy/paros/extension/ExtensionAdaptor.java
Patch:
@@ -36,6 +36,7 @@
 // ZAP: 2015/03/16 Issue 1525: Further database independence changes
 // ZAP: 2015/03/30 Issue 1582: Enablers for low memory option
 // ZAP: 2017/02/17 Let core code remove/unhook the extension.
+// ZAP: 2017/05/22 Update for change in Extension.getDependencies().
 
 package org.parosproxy.paros.extension;
 
@@ -232,7 +233,7 @@ protected void setDescription(String description) {
 	}
 	
 	@Override
-	public List<Class<?>> getDependencies() {
+	public List<Class<? extends Extension>> getDependencies() {
 		return Collections.emptyList();
 	}
 

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionTableModel.java
Patch:
@@ -99,8 +99,8 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     			return false;
     		}
     		// Check dependencies
-    		List<Class<?>> deps = getExtension(rowIndex).getDependencies();
-    		for (Class<?>dep : deps) {
+    		List<Class<? extends Extension>> deps = getExtension(rowIndex).getDependencies();
+    		for (Class<? extends Extension> dep : deps) {
     			Extension ext = getExtension(dep);
     			if (ext == null || ! ext.isEnabled()) {
     				return false;
@@ -111,7 +111,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
         return false;
     }
     
-    private Extension getExtension(Class<?> c) {
+    private Extension getExtension(Class<? extends Extension> c) {
 		for (Extension ext: extensions) {
 			if (ext.getClass().equals(c)) {
 				return ext;

File: src/org/parosproxy/paros/extension/ExtensionAdaptor.java
Patch:
@@ -36,6 +36,7 @@
 // ZAP: 2015/03/16 Issue 1525: Further database independence changes
 // ZAP: 2015/03/30 Issue 1582: Enablers for low memory option
 // ZAP: 2017/02/17 Let core code remove/unhook the extension.
+// ZAP: 2017/05/22 Update for change in Extension.getDependencies().
 
 package org.parosproxy.paros.extension;
 
@@ -232,7 +233,7 @@ protected void setDescription(String description) {
 	}
 	
 	@Override
-	public List<Class<?>> getDependencies() {
+	public List<Class<? extends Extension>> getDependencies() {
 		return Collections.emptyList();
 	}
 

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionTableModel.java
Patch:
@@ -99,8 +99,8 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     			return false;
     		}
     		// Check dependencies
-    		List<Class<?>> deps = getExtension(rowIndex).getDependencies();
-    		for (Class<?>dep : deps) {
+    		List<Class<? extends Extension>> deps = getExtension(rowIndex).getDependencies();
+    		for (Class<? extends Extension> dep : deps) {
     			Extension ext = getExtension(dep);
     			if (ext == null || ! ext.isEnabled()) {
     				return false;
@@ -111,7 +111,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
         return false;
     }
     
-    private Extension getExtension(Class<?> c) {
+    private Extension getExtension(Class<? extends Extension> c) {
 		for (Extension ext: extensions) {
 			if (ext.getClass().equals(c)) {
 				return ext;

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -186,6 +186,7 @@ public class HistoryReference {
      * <li>{@link #TYPE_SPIDER_TASK};</li>
      * <li>{@link #TYPE_SEQUENCE_TEMPORARY};</li>
      * <li>{@link #TYPE_SPIDER_AJAX_TEMPORARY};</li>
+     * <li>{@link #TYPE_SPIDER_TEMPORARY};</li>
      * </ul>
      * <p>
      * Persisted messages with temporary types are deleted when the session is closed.

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -186,6 +186,7 @@ public class HistoryReference {
      * <li>{@link #TYPE_SPIDER_TASK};</li>
      * <li>{@link #TYPE_SEQUENCE_TEMPORARY};</li>
      * <li>{@link #TYPE_SPIDER_AJAX_TEMPORARY};</li>
+     * <li>{@link #TYPE_SPIDER_TEMPORARY};</li>
      * </ul>
      * <p>
      * Persisted messages with temporary types are deleted when the session is closed.

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -68,6 +68,7 @@
 // ZAP: 2016/07/07 Convert passive scanners options to new structure
 // ZAP: 2016/09/22 JavaDoc tweaks
 // ZAP: 2016/11/17 Issue 2701 Support Factory Reset
+// ZAP: 2017/05/04 Issue 3440: Log Exception when overwriting a config file
 
 package org.parosproxy.paros;
 
@@ -553,6 +554,7 @@ public void initializeFilesAndDirectories() {
 	            //  if there is any error in config file (eg config file not exist, corrupted),
 	            //  overwrite previous configuration file 
 	            // ZAP: changed to use the correct file
+	            LOG.error("Config file does not exist or is corrupted, will overwrite it: " + e.getMessage(), e);	        	
 	            copier.copy(getPathDefaultConfigFile().toFile(), new File(FILE_CONFIG));
 	            
 	        }

File: src/org/zaproxy/zap/extension/history/PopupMenuExportContextURLs.java
Patch:
@@ -45,7 +45,7 @@ public PopupMenuExportContextURLs(String menuItem, Extension extension) {
 	
 	@Override
 	public boolean isEnableForComponent(Component invoker) {
-		if (invoker.getName().equals(SiteMapPanel.CONTEXT_TREE_COMPONENT_NAME)) {
+		if (SiteMapPanel.CONTEXT_TREE_COMPONENT_NAME.equals(invoker.getName())) {
 			Context ctx = View.getSingleton().getSiteTreePanel().getSelectedContext();
 			if (ctx != null) {
 				return true;

File: src/org/zaproxy/zap/extension/history/PopupMenuExportContextURLs.java
Patch:
@@ -44,7 +44,7 @@ public PopupMenuExportContextURLs(String menuItem) {
 	
 	@Override
 	public boolean isEnableForComponent(Component invoker) {
-		if (invoker.getName().equals(SiteMapPanel.CONTEXT_TREE_COMPONENT_NAME)) {
+		if (SiteMapPanel.CONTEXT_TREE_COMPONENT_NAME.equals(invoker.getName())) {
 			Context ctx = View.getSingleton().getSiteTreePanel().getSelectedContext();
 			if (ctx != null) {
 				return true;

File: src/org/zaproxy/zap/extension/history/PopupMenuExportContextURLs.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.extension.Extension;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.view.SiteMapPanel;
@@ -38,8 +39,8 @@ public class PopupMenuExportContextURLs extends PopupMenuExportURLs {
 	
 	private static Logger LOG = Logger.getLogger(PopupMenuExportURLs.class);
 
-	public PopupMenuExportContextURLs(String menuItem) {
-		super(menuItem);
+	public PopupMenuExportContextURLs(String menuItem, Extension extension) {
+		super(menuItem, extension);
 	}
 	
 	@Override

File: src/org/zaproxy/zap/extension/history/PopupMenuExportSelectedURLs.java
Patch:
@@ -31,6 +31,7 @@
 
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.log4j.Logger;
+import org.parosproxy.paros.extension.Extension;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.SiteNode;
 
@@ -40,8 +41,8 @@ public class PopupMenuExportSelectedURLs extends PopupMenuExportURLs {
 
 	private static Logger LOG = Logger.getLogger(PopupMenuExportSelectedURLs.class);
 
-	public PopupMenuExportSelectedURLs(String menuItem) {
-		super(menuItem);
+	public PopupMenuExportSelectedURLs(String menuItem, Extension extension) {
+		super(menuItem, extension);
 	}
 
 	@Override

File: src/org/zaproxy/zap/control/ExtensionFactory.java
Patch:
@@ -257,6 +257,8 @@ private static void loadMessages(Extension ext) {
         if (msg != null) {
             ext.setMessages(msg);
             Constant.messages.addMessageBundle(ext.getI18nPrefix(), ext.getMessages());
+        } else {
+            ext.setMessages(Constant.messages.getCoreResourceBundle());
         }
     }
 

File: src/org/zaproxy/zap/extension/spider/SpiderScanController.java
Patch:
@@ -128,7 +128,7 @@ public int startScan(String name, Target target, User user, Object[] contextSpec
 				maxChildrenFetchFilter.setMaxChildren(spiderParams.getMaxChildren());
 				maxChildrenFetchFilter.setModel(extension.getModel());
 
-				MaxChildrenParseFilter maxChildrenParseFilter = new MaxChildrenParseFilter();
+				MaxChildrenParseFilter maxChildrenParseFilter = new MaxChildrenParseFilter(extension.getMessages());
 				maxChildrenParseFilter.setMaxChildren(spiderParams.getMaxChildren());
 				maxChildrenParseFilter.setModel(extension.getModel());
 

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -44,6 +44,7 @@
 import org.zaproxy.zap.spider.Spider;
 import org.zaproxy.zap.spider.SpiderListener;
 import org.zaproxy.zap.spider.SpiderParam;
+import org.zaproxy.zap.spider.SpiderTaskResult;
 import org.zaproxy.zap.spider.filters.FetchFilter;
 import org.zaproxy.zap.spider.filters.FetchFilter.FetchStatus;
 import org.zaproxy.zap.spider.filters.ParseFilter;
@@ -450,9 +451,10 @@ private String getStatusLabel(FetchStatus status) {
 	}
 
 	@Override
-	public void readURI(final HttpMessage msg) {
+	public void notifySpiderTaskResult(SpiderTaskResult spiderTaskResult) {
 		// Add the read message to the Site Map (tree or db structure)
 		try {
+			HttpMessage msg = spiderTaskResult.getHttpMessage();
 			int type = msg.isResponseFromTargetHost() ? HistoryReference.TYPE_SPIDER : HistoryReference.TYPE_SPIDER_TEMPORARY;
 			HistoryReference historyRef = new HistoryReference(extension.getModel().getSession(), type, msg);
 

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -56,6 +56,7 @@ public class SpiderDialog extends StandardFieldsDialog {
     private static final String FIELD_MAX_DEPTH = "spider.custom.label.maxDepth"; 
     private static final String FIELD_MAX_CHILDREN = "spider.custom.label.maxChildren"; 
     private static final String FIELD_MAX_DURATION = "spider.custom.label.maxDuration"; 
+    private static final String FIELD_MAX_PARSE_SIZE_BYTES = "spider.custom.label.maxParseSizeBytes";
     private static final String FIELD_SEND_REFERER = "spider.custom.label.sendReferer";
     private static final String FIELD_ACCEPT_COOKIES = "spider.custom.label.acceptcookies";
     private static final String FIELD_PROCESS_FORMS = "spider.custom.label.processForms"; 
@@ -123,6 +124,7 @@ public void init(Target target) {
         this.addNumberField(1, FIELD_MAX_DEPTH, 1, 19, getSpiderParam().getMaxDepth());
         this.addNumberField(1, FIELD_MAX_CHILDREN, 0, Integer.MAX_VALUE, getSpiderParam().getMaxChildren());
         this.addNumberField(1, FIELD_MAX_DURATION, 0, Integer.MAX_VALUE, getSpiderParam().getMaxDuration());
+        this.addNumberField(1, FIELD_MAX_PARSE_SIZE_BYTES, 0, Integer.MAX_VALUE, getSpiderParam().getMaxParseSizeBytes());
         this.addCheckBoxField(1, FIELD_SEND_REFERER, getSpiderParam().isSendRefererHeader());
         this.addCheckBoxField(1, FIELD_ACCEPT_COOKIES, getSpiderParam().isAcceptCookies());
         this.addCheckBoxField(1, FIELD_PROCESS_FORMS, getSpiderParam().isProcessForm());
@@ -305,6 +307,7 @@ public void save() {
         	spiderParam.setMaxDepth(this.getIntValue(FIELD_MAX_DEPTH));
         	spiderParam.setMaxDuration(this.getIntValue(FIELD_MAX_DURATION));
         	spiderParam.setMaxChildren(this.getIntValue(FIELD_MAX_CHILDREN));
+        	spiderParam.setMaxParseSizeBytes(this.getIntValue(FIELD_MAX_PARSE_SIZE_BYTES));
         	spiderParam.setSendRefererHeader(this.getBoolValue(FIELD_SEND_REFERER));
         	spiderParam.setAcceptCookies(this.getBoolValue(FIELD_ACCEPT_COOKIES));
         	spiderParam.setProcessForm(this.getBoolValue(FIELD_PROCESS_FORMS));

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -196,7 +196,7 @@ private void init() {
 		}
 
 		// Add a default parse filter and any custom ones
-		this.addParseFilter(new DefaultParseFilter());
+		this.addParseFilter(new DefaultParseFilter(spiderParam));
 		for (ParseFilter filter : extension.getCustomParseFilters())
 			this.addParseFilter(filter);
 		

File: src/org/parosproxy/paros/security/CachedSslCertifificateServiceImpl.java
Patch:
@@ -71,8 +71,9 @@ public static SslCertificateService getService() {
 	}
 
 	@Override
-	public void initializeRootCA(KeyStore keystore) throws KeyStoreException,
+	public synchronized void initializeRootCA(KeyStore keystore) throws KeyStoreException,
 			UnrecoverableKeyException, NoSuchAlgorithmException {
+		this.cache.clear();
 		this.delegate.initializeRootCA(keystore);
 	}
 

File: src/org/zaproxy/zap/extension/dynssl/ExtensionDynSSL.java
Patch:
@@ -33,8 +33,8 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
+import org.parosproxy.paros.security.CachedSslCertifificateServiceImpl;
 import org.parosproxy.paros.security.SslCertificateService;
-import org.parosproxy.paros.security.SslCertificateServiceImpl;
 import org.parosproxy.paros.view.View;
 
 /**
@@ -135,7 +135,7 @@ public URL getURL() {
 	}
 
 	public void setRootCa(KeyStore rootca) throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException {
-		SslCertificateServiceImpl.getService().initializeRootCA(rootca);
+		CachedSslCertifificateServiceImpl.getService().initializeRootCA(rootca);
 	}
 	
 	public Certificate getRootCA() throws KeyStoreException {

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -57,6 +57,7 @@ public class SpiderDialog extends StandardFieldsDialog {
     private static final String FIELD_MAX_CHILDREN = "spider.custom.label.maxChildren"; 
     private static final String FIELD_MAX_DURATION = "spider.custom.label.maxDuration"; 
     private static final String FIELD_SEND_REFERER = "spider.custom.label.sendReferer";
+    private static final String FIELD_ACCEPT_COOKIES = "spider.custom.label.acceptcookies";
     private static final String FIELD_PROCESS_FORMS = "spider.custom.label.processForms"; 
     private static final String FIELD_POST_FORMS = "spider.custom.label.postForms"; 
     private static final String FIELD_PARSE_COMMENTS = "spider.custom.label.parseComments"; 
@@ -123,6 +124,7 @@ public void init(Target target) {
         this.addNumberField(1, FIELD_MAX_CHILDREN, 0, Integer.MAX_VALUE, getSpiderParam().getMaxChildren());
         this.addNumberField(1, FIELD_MAX_DURATION, 0, Integer.MAX_VALUE, getSpiderParam().getMaxDuration());
         this.addCheckBoxField(1, FIELD_SEND_REFERER, getSpiderParam().isSendRefererHeader());
+        this.addCheckBoxField(1, FIELD_ACCEPT_COOKIES, getSpiderParam().isAcceptCookies());
         this.addCheckBoxField(1, FIELD_PROCESS_FORMS, getSpiderParam().isProcessForm());
         this.addCheckBoxField(1, FIELD_POST_FORMS, getSpiderParam().isPostForm());
         this.addCheckBoxField(1, FIELD_PARSE_COMMENTS, getSpiderParam().isParseComments());
@@ -304,6 +306,7 @@ public void save() {
         	spiderParam.setMaxDuration(this.getIntValue(FIELD_MAX_DURATION));
         	spiderParam.setMaxChildren(this.getIntValue(FIELD_MAX_CHILDREN));
         	spiderParam.setSendRefererHeader(this.getBoolValue(FIELD_SEND_REFERER));
+        	spiderParam.setAcceptCookies(this.getBoolValue(FIELD_ACCEPT_COOKIES));
         	spiderParam.setProcessForm(this.getBoolValue(FIELD_PROCESS_FORMS));
         	spiderParam.setPostForm(this.getBoolValue(FIELD_POST_FORMS));
         	spiderParam.setParseComments(this.getBoolValue(FIELD_PARSE_COMMENTS));

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionPanel.java
Patch:
@@ -120,7 +120,7 @@ public void initParam(Object obj) {
 		for (Extension ext : exts) {
 			ext.setEnabled(extParam.isExtensionEnabled(ext.getName()));
 		}
-    	extensionModel.fireTableRowsUpdated(0, extensionModel.getRowCount());
+    	extensionModel.fireTableRowsUpdated(0, extensionModel.getRowCount() - 1);
     }
 
 

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -43,7 +43,7 @@ public class AntiCsrfParam extends AbstractParam {
     private static final String CONFIRM_REMOVE_TOKEN_KEY = ANTI_CSRF_BASE_KEY + ".confirmRemoveToken";
     
     private static final String[] DEFAULT_TOKENS_NAMES = { "anticsrf",
-            "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken", "authenticity_token" };
+            "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken", "authenticity_token", "OWASP_CSRFTOKEN" };
 
     private List<AntiCsrfParamToken> tokens = null;
     private List<String> enabledTokensNames = null;

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -43,7 +43,7 @@ public class AntiCsrfParam extends AbstractParam {
     private static final String CONFIRM_REMOVE_TOKEN_KEY = ANTI_CSRF_BASE_KEY + ".confirmRemoveToken";
     
     private static final String[] DEFAULT_TOKENS_NAMES = { "anticsrf",
-            "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken", "authenticity_token" };
+            "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken", "authenticity_token", "OWASP_CSRFTOKEN" };
 
     private List<AntiCsrfParamToken> tokens = null;
     private List<String> enabledTokensNames = null;

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -415,7 +415,7 @@ public static boolean uninstallAddOnFiles(AddOn addOn, AddOnUninstallationProgre
             File file = new File(Constant.getZapHome(), name);
             try {
                 File parent = file.getParentFile();
-                if (!file.delete()) {
+                if (file.exists() && !file.delete()) {
                     logger.error("Failed to delete: " + file.getAbsolutePath());
                     uninstalledWithoutErrors = false;
                 }

File: src/org/parosproxy/paros/view/MainFrame.java
Patch:
@@ -179,7 +179,7 @@ public class MainFrame extends AbstractFrame {
 	private ZapToggleButton panelsResponsePanelPositionButton;
 
 	/**
-	 * @deprecated (2.5.0) Use {@link #MainFrame(OptionsParam, HttpPanelRequest, HttpPanelResponse)} instead.
+	 * @deprecated (2.5.0) Use {@link #MainFrame(OptionsParam, AbstractPanel, AbstractPanel)} instead.
 	 */
 	@Deprecated
 	@SuppressWarnings("javadoc")

File: src/org/zaproxy/zap/extension/pscan/PluginPassiveScanner.java
Patch:
@@ -200,7 +200,7 @@ public void setLevel(AlertThreshold level) {
 	 * Sets the alert threshold that should be returned when set to {@link AlertThreshold#DEFAULT}.
 	 *
 	 * @param level the value of default alert threshold
-	 * @throws IllegalArgumentException if the given parameter is {@code null} or {@codeAlertThreshold.DEFAULT}.
+	 * @throws IllegalArgumentException if the given parameter is {@code null} or {@code AlertThreshold.DEFAULT}.
 	 * @since 2.0.0
 	 * @see #setLevel(AlertThreshold)
 	 */

File: src/org/zaproxy/zap/extension/script/ScriptEngineWrapper.java
Patch:
@@ -64,9 +64,8 @@ public ScriptEngine getEngine() {
 	public abstract boolean isRawEngine();
 	
 	/**
-	 * Returns true if this engine supported script types without defined templates.
-	 * @param type
-	 * @return
+	 * Returns true if this engine supports script types without defined templates.
+	 * @return {@code true} if the engine doesn't require templates, {@code false} otherwise.
 	 */
 	public abstract boolean isSupportsMissingTemplates();
 	

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlFormParser.java
Patch:
@@ -77,7 +77,7 @@ public SpiderHtmlFormParser(SpiderParam param) {
 	 * Instantiates a new spider html form parser.
 	 *
 	 * @param param the parameters for the spider
-	 * @param param the parameters ValueGenerator
+	 * @param valueGenerator the ValueGenerator
 	 * @throws IllegalArgumentException if {@code param} or {@code valueGenerator} is null.
 	 */
 	public SpiderHtmlFormParser(SpiderParam param, ValueGenerator valueGenerator) {

File: src/org/parosproxy/paros/view/MainFrame.java
Patch:
@@ -179,7 +179,7 @@ public class MainFrame extends AbstractFrame {
 	private ZapToggleButton panelsResponsePanelPositionButton;
 
 	/**
-	 * @deprecated (2.5.0) Use {@link #MainFrame(OptionsParam, HttpPanelRequest, HttpPanelResponse)} instead.
+	 * @deprecated (2.5.0) Use {@link #MainFrame(OptionsParam, AbstractPanel, AbstractPanel)} instead.
 	 */
 	@Deprecated
 	@SuppressWarnings("javadoc")

File: src/org/zaproxy/zap/extension/pscan/PluginPassiveScanner.java
Patch:
@@ -200,7 +200,7 @@ public void setLevel(AlertThreshold level) {
 	 * Sets the alert threshold that should be returned when set to {@link AlertThreshold#DEFAULT}.
 	 *
 	 * @param level the value of default alert threshold
-	 * @throws IllegalArgumentException if the given parameter is {@code null} or {@codeAlertThreshold.DEFAULT}.
+	 * @throws IllegalArgumentException if the given parameter is {@code null} or {@code AlertThreshold.DEFAULT}.
 	 * @since 2.0.0
 	 * @see #setLevel(AlertThreshold)
 	 */

File: src/org/zaproxy/zap/extension/script/ScriptEngineWrapper.java
Patch:
@@ -64,9 +64,8 @@ public ScriptEngine getEngine() {
 	public abstract boolean isRawEngine();
 	
 	/**
-	 * Returns true if this engine supported script types without defined templates.
-	 * @param type
-	 * @return
+	 * Returns true if this engine supports script types without defined templates.
+	 * @return {@code true} if the engine doesn't require templates, {@code false} otherwise.
 	 */
 	public abstract boolean isSupportsMissingTemplates();
 	

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlFormParser.java
Patch:
@@ -77,7 +77,7 @@ public SpiderHtmlFormParser(SpiderParam param) {
 	 * Instantiates a new spider html form parser.
 	 *
 	 * @param param the parameters for the spider
-	 * @param param the parameters ValueGenerator
+	 * @param valueGenerator the ValueGenerator
 	 * @throws IllegalArgumentException if {@code param} or {@code valueGenerator} is null.
 	 */
 	public SpiderHtmlFormParser(SpiderParam param, ValueGenerator valueGenerator) {

File: src/org/zaproxy/zap/ZapBootstrap.java
Patch:
@@ -127,6 +127,7 @@ protected static String getStartingMessage() {
         strBuilder.append(Constant.PROGRAM_NAME).append(' ').append(Constant.PROGRAM_VERSION);
         strBuilder.append(" started ");
         strBuilder.append(dateFormat.format(new Date()));
+        strBuilder.append(" with home ").append(Constant.getZapHome());
         return strBuilder.toString();
     }
 }

File: src/org/parosproxy/paros/network/HtmlParameter.java
Patch:
@@ -26,7 +26,7 @@
 
 public class HtmlParameter implements Comparable<HtmlParameter> {
 	public enum Type {
-		cookie, form, url
+		cookie, form, url, header
 	};
 
 	public enum Flags {

File: src/org/parosproxy/paros/network/HtmlParameter.java
Patch:
@@ -26,7 +26,7 @@
 
 public class HtmlParameter implements Comparable<HtmlParameter> {
 	public enum Type {
-		cookie, form, url
+		cookie, form, url, header
 	};
 
 	public enum Flags {

File: src/org/zaproxy/zap/extension/autoupdate/AddOnDependencyChecker.java
Patch:
@@ -909,7 +909,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
             case 0:
                 return addOn.getName();
             case 1:
-                return Integer.valueOf(addOn.getFileVersion());
+                return addOn.getVersion();
             case 2:
                 return addOn.getMinimumJavaVersion();
             default:

File: src/org/zaproxy/zap/extension/autoupdate/AutoUpdateAPI.java
Patch:
@@ -169,7 +169,6 @@ private ApiResponseSet<String> addonToSet(AddOn ao) {
 		map.put("sizeInBytes", String.valueOf(ao.getSize()));
 		map.put("status", ao.getStatus().toString());
 		map.put("url", ObjectUtils.toString(ao.getUrl()));
-		map.put("fileVersion", String.valueOf(ao.getFileVersion()));
 		map.put("version", ObjectUtils.toString(ao.getVersion()));
 		return new ApiResponseSet<String>("addon", map);
 	}

File: src/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -596,7 +596,7 @@ private String addOnToHtml(AddOn ao) {
 		sb.append("<tr><td><i>");
 		sb.append(Constant.messages.getString("cfu.table.header.version"));
 		sb.append("</i></td><td>");
-		sb.append(ao.getFileVersion());
+		sb.append(ao.getVersion());
 		sb.append("</td></tr>");
 
 		sb.append("<tr><td><i>");

File: src/org/zaproxy/zap/extension/autoupdate/UninstallationProgressDialogue.java
Patch:
@@ -159,7 +159,7 @@ private void setCurrentAddOn(AddOn addOn) {
                 MessageFormat.format(
                         Constant.messages.getString("cfu.uninstallation.progress.dialogue.currentAddOn"),
                         addOn.getName(),
-                        Integer.valueOf(addOn.getFileVersion())));
+                        addOn.getVersion()));
     }
 
     private void setCustomMessage(String message) {

File: src/org/zaproxy/zap/extension/autoupdate/UninstalledAddOnsTableModel.java
Patch:
@@ -98,7 +98,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
         		return Constant.messages.getString("cfu.table.label.new");
         	} else {
         		// TODO change to date ??
-        		return getAddOnWrapper(rowIndex).getAddOn().getFileVersion();
+        		return getAddOnWrapper(rowIndex).getAddOn().getVersion();
         	}
         case 5:
             return getAddOnWrapper(rowIndex).isEnabled();

File: src/org/zaproxy/zap/extension/params/ExtensionParams.java
Patch:
@@ -224,9 +224,6 @@ private void sessionChangedEventHandler(Session session) {
 		Enumeration<SiteNode> en = root.children();
 		while (en.hasMoreElements()) {
 			String site = en.nextElement().getNodeName();
-			if (site.indexOf("//") >= 0) {
-				site = site.substring(site.indexOf("//") + 2);
-			}
 			if (getView() != null) {
 				this.getParamsPanel().addSite(site);
 			}

File: src/org/zaproxy/zap/extension/params/ExtensionParams.java
Patch:
@@ -224,9 +224,6 @@ private void sessionChangedEventHandler(Session session) {
 		Enumeration<SiteNode> en = root.children();
 		while (en.hasMoreElements()) {
 			String site = en.nextElement().getNodeName();
-			if (site.indexOf("//") >= 0) {
-				site = site.substring(site.indexOf("//") + 2);
-			}
 			if (getView() != null) {
 				this.getParamsPanel().addSite(site);
 			}

File: src/org/zaproxy/zap/CommandLineBootstrap.java
Patch:
@@ -60,7 +60,7 @@ public int start() {
             throw new RuntimeException(e);
         }
 
-        Control control = initControl(true);
+        Control control = initControl();
 
         warnAddOnsAndExtensionsNoLongerRunnable();
 

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -212,7 +212,9 @@ public void run() {
                     View.getSingleton().hideSplashScreen();
 
                     logger.fatal("Failed to initialise GUI: ", e);
-                    return;
+
+                    // We must exit otherwise EDT would keep ZAP running.
+                    System.exit(1);
                 }
 
                 warnAddOnsAndExtensionsNoLongerRunnable();

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -212,7 +212,9 @@ public void run() {
                     View.getSingleton().hideSplashScreen();
 
                     logger.fatal("Failed to initialise GUI: ", e);
-                    return;
+
+                    // We must exit otherwise EDT would keep ZAP running.
+                    System.exit(1);
                 }
 
                 warnAddOnsAndExtensionsNoLongerRunnable();

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -63,14 +63,14 @@
 // ZAP: 2016/09/06 Hook OverrideMessageProxyListener into the Proxy
 // ZAP: 2016/10/06 Issue 2855: Added method to allow for testing when a model is required
 // ZAP: 2017/03/10 Reset proxy excluded URLs on new session
+// ZAP: 2017/03/13 Set global excluded URLs to the proxy when creating a new session or initialising.
 
 package org.parosproxy.paros.control;
 
 import java.awt.Desktop;
 import java.io.File;
 import java.io.IOException;
 import java.text.MessageFormat;
-import java.util.ArrayList;
 import java.util.List;
 
 import javax.swing.JOptionPane;
@@ -122,6 +122,7 @@ private boolean init(ControlOverrides overrides) {
 
 		// ZAP: Start proxy even if no view
 	    Proxy proxy = getProxy(overrides);
+	    proxy.setIgnoreList(model.getOptionsParam().getGlobalExcludeURLParam().getTokensNames());
 	    getExtensionLoader().hookProxyListener(proxy);
 	    getExtensionLoader().hookOverrideMessageProxyListener(proxy);
 	    getExtensionLoader().hookPersistentConnectionListener(proxy);
@@ -350,7 +351,7 @@ public void run() {
 	 */
 	private Session createNewSession() {
 		Session session = model.newSession();
-		getProxy().setIgnoreList(new ArrayList<String>());
+		getProxy().setIgnoreList(model.getOptionsParam().getGlobalExcludeURLParam().getTokensNames());
 		return session;
 	}
     

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -63,14 +63,14 @@
 // ZAP: 2016/09/06 Hook OverrideMessageProxyListener into the Proxy
 // ZAP: 2016/10/06 Issue 2855: Added method to allow for testing when a model is required
 // ZAP: 2017/03/10 Reset proxy excluded URLs on new session
+// ZAP: 2017/03/13 Set global excluded URLs to the proxy when creating a new session or initialising.
 
 package org.parosproxy.paros.control;
 
 import java.awt.Desktop;
 import java.io.File;
 import java.io.IOException;
 import java.text.MessageFormat;
-import java.util.ArrayList;
 import java.util.List;
 
 import javax.swing.JOptionPane;
@@ -122,6 +122,7 @@ private boolean init(ControlOverrides overrides) {
 
 		// ZAP: Start proxy even if no view
 	    Proxy proxy = getProxy(overrides);
+	    proxy.setIgnoreList(model.getOptionsParam().getGlobalExcludeURLParam().getTokensNames());
 	    getExtensionLoader().hookProxyListener(proxy);
 	    getExtensionLoader().hookOverrideMessageProxyListener(proxy);
 	    getExtensionLoader().hookPersistentConnectionListener(proxy);
@@ -350,7 +351,7 @@ public void run() {
 	 */
 	private Session createNewSession() {
 		Session session = model.newSession();
-		getProxy().setIgnoreList(new ArrayList<String>());
+		getProxy().setIgnoreList(model.getOptionsParam().getGlobalExcludeURLParam().getTokensNames());
 		return session;
 	}
     

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -35,6 +35,7 @@
 // ZAP: 2016/06/17 Be lenient when parsing charset and accept single quote chars around the value
 // ZAP: 2016/06/17 Remove redundant initialisations of instance variables
 // ZAP: 2017/02/08 Change isEmpty to check start line instead of headers (if it has the status/request line it's not empty).
+// ZAP: 2017/03/02 Issue 3226: Added API Key and Nonce headers
 
 package org.parosproxy.paros.network;
 
@@ -123,6 +124,8 @@ public abstract class HttpHeader implements java.io.Serializable {
 	public static final String METHODS_ALLOW = "Allow";
 	public static final String METHODS_PUBLIC = "Public";  //IIS specific?
 	public static final String X_ZAP_SCAN_ID = "X-ZAP-Scan-ID";
+	public static final String X_ZAP_API_KEY = "X-ZAP-API-Key";
+	public static final String X_ZAP_API_NONCE = "X-ZAP-API-Nonce";
 	//ZAP: additional standard/defacto headers
 	public static final String PROXY_AUTHORIZATION = "Proxy-Authorization";
 	public static final String X_CSRF_TOKEN = "X-Csrf-Token";

File: src/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -139,7 +139,7 @@ private void prepareDefaultParsers() {
 		this.parsers.add(parser);
 
 		// HTML Form parser
-		parser = new SpiderHtmlFormParser(spider.getSpiderParam());
+		parser = new SpiderHtmlFormParser(spider.getSpiderParam(), spider.getExtensionSpider().getValueGenerator());
 		this.parsers.add(parser);
 		Config.CurrentCompatibilityMode.setFormFieldNameCaseInsensitive(false);
 		

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -230,7 +230,7 @@ public WebSession authenticate(SessionManagementMethod sessionManagementMethod,
 			try {
 				msg = prepareRequestMessage(cred);
 			} catch (Exception e) {
-				log.error("Unable to prepare authentication message: " + e.getMessage());
+				log.error("Unable to prepare authentication message: " + e.getMessage(), e);
 				return null;
 			}
 

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -508,6 +508,7 @@ public void valueChanged(javax.swing.event.TreeSelectionEvent e) {
 				    }
 				}
 			});
+			treeAlert.setCellRenderer(new AlertTreeCellRenderer());
 		}
 		return treeAlert;
 	}

File: src/org/zaproxy/zap/extension/alert/PopupMenuShowAlerts.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.swing.ImageIcon;
-
 import org.apache.commons.httpclient.URI;
 import org.parosproxy.paros.core.scanner.Alert;
 import org.parosproxy.paros.model.HistoryReference;
@@ -74,7 +72,7 @@ public boolean isButtonEnabledForHistoryReference (HistoryReference href) {
 				continue;
 			}
 			final PopupMenuShowAlert menuItem = new PopupMenuShowAlert(alert.getName(), alert);
-			menuItem.setIcon(new ImageIcon(alert.getIconUrl()));
+			menuItem.setIcon(alert.getIcon());
 			
 			alertList.add(menuItem);
 		}

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -508,6 +508,7 @@ public void valueChanged(javax.swing.event.TreeSelectionEvent e) {
 				    }
 				}
 			});
+			treeAlert.setCellRenderer(new AlertTreeCellRenderer());
 		}
 		return treeAlert;
 	}

File: src/org/zaproxy/zap/extension/alert/PopupMenuShowAlerts.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.swing.ImageIcon;
-
 import org.apache.commons.httpclient.URI;
 import org.parosproxy.paros.core.scanner.Alert;
 import org.parosproxy.paros.model.HistoryReference;
@@ -74,7 +72,7 @@ public boolean isButtonEnabledForHistoryReference (HistoryReference href) {
 				continue;
 			}
 			final PopupMenuShowAlert menuItem = new PopupMenuShowAlert(alert.getName(), alert);
-			menuItem.setIcon(new ImageIcon(alert.getIconUrl()));
+			menuItem.setIcon(alert.getIcon());
 			
 			alertList.add(menuItem);
 		}

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -593,6 +593,7 @@ public static String getDefaultResponseHeader(String responseStatus, String cont
         	sb.append("Cache-Control: no-cache\r\n");
         }
         sb.append("Content-Security-Policy: default-src 'none'; script-src 'self'; connect-src 'self'; child-src 'self'; img-src 'self' data:; font-src 'self' data:; style-src 'self'\r\n");
+        sb.append("Referrer-Policy: no-referrer\r\n");
         sb.append("Access-Control-Allow-Methods: GET,POST,OPTIONS\r\n");
         sb.append("Access-Control-Allow-Headers: ZAP-Header\r\n");
         sb.append("X-Frame-Options: DENY\r\n");

File: src/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2014/04/25 Issue 642: Add timestamps to Output tab(s)
 // ZAP: 2014/10/07 Issue 1357: Hide unused tabs
 // ZAP: 2015/02/10 Issue 1528: Support user defined font size
+// ZAP: 2017/02/20 Issue 3221: Some icons not scaled correctly
 
 package org.parosproxy.paros.view;
 
@@ -48,6 +49,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.AbstractPanel;
 import org.parosproxy.paros.model.Model;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.TimeStampUtils;
 import org.zaproxy.zap.utils.ZapTextArea;
 
@@ -107,7 +109,7 @@ private JToolBar getToolBar() {
 
             JButton clearButton = new JButton(CLEAR_BUTTON_LABEL);
             clearButton.setToolTipText(CLEAR_BUTTON_TOOL_TIP);
-            clearButton.setIcon(new ImageIcon(OutputPanel.class.getResource("/resource/icon/fugue/broom.png")));
+            clearButton.setIcon(DisplayUtils.getScaledIcon(new ImageIcon(OutputPanel.class.getResource("/resource/icon/fugue/broom.png"))));
             clearButton.addActionListener(new java.awt.event.ActionListener() {
 
                 @Override

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -70,6 +70,7 @@
 // ZAP: 2016/04/06 Fix layouts' issues
 // ZAP: 2016/04/14 Allow to display a message
 // ZAP: 2016/10/26 Create UI shared context in the session dialogue when adding a context
+// ZAP: 2017/02/20 Issue 3221: Some icons not scaled correctly
 
 package org.parosproxy.paros.view;
 
@@ -122,6 +123,7 @@
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.keyboard.ExtensionKeyboard;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.AbstractContextPropertiesPanel;
 import org.zaproxy.zap.view.ContextExcludePanel;
 import org.zaproxy.zap.view.ContextGeneralPanel;
@@ -371,7 +373,7 @@ private void registerMenu(ExtensionKeyboard extKey, final AbstractPanel ap) {
                 ap.getDefaultAccelerator());
         tabMenu.setMnemonic(ap.getMnemonic());
         if (ap.getIcon() != null) {
-            tabMenu.setIcon(ap.getIcon());
+            tabMenu.setIcon(DisplayUtils.getScaledIcon(ap.getIcon()));
         }
         tabMenu.addActionListener(new ActionListener() {
             @Override

File: src/org/zaproxy/zap/extension/httppanel/component/all/request/RequestAllComponent.java
Patch:
@@ -38,6 +38,7 @@
 import org.zaproxy.zap.extension.search.SearchableHttpPanelComponent;
 import org.zaproxy.zap.model.HttpMessageLocation;
 import org.zaproxy.zap.model.MessageLocation;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.messagelocation.MessageLocationHighlight;
 import org.zaproxy.zap.view.messagelocation.MessageLocationHighlighter;
 
@@ -66,7 +67,7 @@ public RequestAllComponent() {
 	
 	protected void initUi() {
 		// Common
-		buttonShowView = new JToggleButton(new ImageIcon(RequestAllComponent.class.getResource("/resource/icon/view_all.png")));
+		buttonShowView = new JToggleButton(DisplayUtils.getScaledIcon(new ImageIcon(RequestAllComponent.class.getResource("/resource/icon/view_all.png"))));
 		buttonShowView.setToolTipText(BUTTON_TOOL_TIP);
 
 		panelOptions = new JPanel();

File: src/org/zaproxy/zap/extension/httppanel/component/split/request/RequestSplitComponent.java
Patch:
@@ -42,6 +42,7 @@
 import org.zaproxy.zap.extension.search.SearchMatch;
 import org.zaproxy.zap.extension.search.SearchableHttpPanelComponent;
 import org.zaproxy.zap.model.MessageLocation;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.messagelocation.MessageLocationHighlight;
 import org.zaproxy.zap.view.messagelocation.MessageLocationHighlighter;
 
@@ -81,7 +82,7 @@ public RequestSplitComponent() {
 	}
 
 	protected void initUi() {
-		buttonShowView = new JToggleButton(new ImageIcon(RequestSplitComponent.class.getResource("/resource/icon/view_split.png")));
+		buttonShowView = new JToggleButton(DisplayUtils.getScaledIcon(new ImageIcon(RequestSplitComponent.class.getResource("/resource/icon/view_split.png"))));
 		buttonShowView.setToolTipText(BUTTON_TOOL_TIP);
 		
 		panelOptions = new JPanel();

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsPanel.java
Patch:
@@ -45,6 +45,7 @@
 import org.parosproxy.paros.extension.AbstractPanel;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.SortedComboBoxModel;
 import org.zaproxy.zap.view.ScanPanel;
 
@@ -150,7 +151,7 @@ private JButton getOptionsButton() {
 		if (optionsButton == null) {
 			optionsButton = new JButton();
 			optionsButton.setToolTipText(Constant.messages.getString("httpsessions.toolbar.options.button"));
-			optionsButton.setIcon(new ImageIcon(ScanPanel.class.getResource("/resource/icon/16/041.png")));
+			optionsButton.setIcon(DisplayUtils.getScaledIcon(new ImageIcon(ScanPanel.class.getResource("/resource/icon/16/041.png"))));
 			optionsButton.addActionListener(new ActionListener() {
 				@Override
 				public void actionPerformed(ActionEvent e) {
@@ -171,7 +172,7 @@ private JButton getNewSessionButton() {
 		if (newSessionButton == null) {
 			newSessionButton = new JButton();
 			newSessionButton.setText(Constant.messages.getString("httpsessions.toolbar.newsession.label"));
-			newSessionButton.setIcon(new ImageIcon(HttpSessionsPanel.class.getResource("/resource/icon/16/103.png")));
+			newSessionButton.setIcon(DisplayUtils.getScaledIcon(new ImageIcon(HttpSessionsPanel.class.getResource("/resource/icon/16/103.png"))));
 			newSessionButton.setToolTipText(Constant.messages.getString("httpsessions.toolbar.newsession.tooltip"));
 
 			newSessionButton.addActionListener(new ActionListener() {

File: src/org/zaproxy/zap/extension/search/SearchPanel.java
Patch:
@@ -333,10 +333,10 @@ protected ZapTextField getRegExField () {
 			regEx = new ZapTextField();
 			regEx.setHorizontalAlignment(ZapTextField.LEFT);
 			regEx.setAlignmentX(0.0F);
-			regEx.setPreferredSize(new java.awt.Dimension(250,25));
+			regEx.setPreferredSize(DisplayUtils.getScaledDimension(250,25));
 			regEx.setText("");
 			regEx.setToolTipText(Constant.messages.getString("search.toolbar.tooltip.regex"));
-			regEx.setMinimumSize(new java.awt.Dimension(250,25));
+			regEx.setMinimumSize(DisplayUtils.getScaledDimension(250,25));
 			
 			regEx.addActionListener(new java.awt.event.ActionListener() { 
 
@@ -367,7 +367,7 @@ private JButton getOptionsButton() {
 		if (optionsButton == null) {
 			optionsButton = new JButton();
 			optionsButton.setToolTipText(Constant.messages.getString("search.toolbar.button.options"));
-			optionsButton.setIcon(new ImageIcon(SearchPanel.class.getResource("/resource/icon/16/041.png")));
+			optionsButton.setIcon(DisplayUtils.getScaledIcon(new ImageIcon(SearchPanel.class.getResource("/resource/icon/16/041.png"))));
 			optionsButton.addActionListener(new ActionListener() {
 
 				@Override

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -54,6 +54,7 @@
 import org.zaproxy.zap.model.ScanController;
 import org.zaproxy.zap.model.ScanListenner2;
 import org.zaproxy.zap.spider.SpiderParam;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.ScanPanel2;
 import org.zaproxy.zap.view.ZapTable;
 import org.zaproxy.zap.view.table.decorator.AbstractTableCellItemIconHighlighter;
@@ -398,7 +399,7 @@ public void run() {
 	public JButton getNewScanButton() {
 		if (scanButton == null) {
 			scanButton = new JButton(Constant.messages.getString("spider.toolbar.button.new"));
-			scanButton.setIcon(new ImageIcon(SpiderPanel.class.getResource("/resource/icon/16/spider.png")));
+			scanButton.setIcon(DisplayUtils.getScaledIcon(new ImageIcon(SpiderPanel.class.getResource("/resource/icon/16/spider.png"))));
 			scanButton.addActionListener(new ActionListener () {
 				@Override
 				public void actionPerformed(ActionEvent e) {

File: src/org/zaproxy/zap/view/TabbedPanel2.java
Patch:
@@ -36,8 +36,8 @@ public class TabbedPanel2 extends TabbedPanel {
 	private List<Component> fullTabList = new ArrayList<>();
 	private List<Component> removedTabList = new ArrayList<>();
 
-	private static final Icon PLUS_ICON = new ImageIcon(
-			TabbedPanel2.class.getResource("/resource/icon/fugue/plus.png"));
+	private static final Icon PLUS_ICON = DisplayUtils.getScaledIcon(new ImageIcon(
+			TabbedPanel2.class.getResource("/resource/icon/fugue/plus.png")));
 
 	// A fake component that never actually get displayed - used for the 'hidden tab list tab'
 	private Component hiddenComponent = new JLabel();

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -238,6 +238,7 @@ protected static boolean uninstallAddOnExtension(
                 logger.debug("Unloading ext: " + extension.getName());
                 try {
                     extension.unload();
+                    Control.getSingleton().getExtensionLoader().removeExtension(extension, extension.getExtensionHook());
                     ExtensionFactory.unloadAddOnExtension(extension);
                 } catch (Exception e) {
                     logger.error("An error occurred while uninstalling the extension \"" + extension.getName()

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -389,7 +389,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("methodName", API_METHOD_NAME);
 			values.put("loginUrl", loginRequestURL);
 			values.put("loginRequestData", this.loginRequestBody);
-			return new ApiResponseSet("method", values);
+			return new ApiResponseSet<String>("method", values);
 		}
 
 		@Override

File: src/org/zaproxy/zap/authentication/GenericAuthenticationCredentials.java
Patch:
@@ -63,7 +63,7 @@ public void decode(String encodedCredentials) {
 	public ApiResponse getApiResponseRepresentation() {
 		Map<String, String> values = new HashMap<>(paramValues);
 		values.put("type", API_NAME);
-		return new ApiResponseSet("credentials", values);
+		return new ApiResponseSet<String>("credentials", values);
 	}
 
 	/**

File: src/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -139,7 +139,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("host", this.hostname);
 			values.put("port", Integer.toString(this.port));
 			values.put("realm", this.realm);
-			return new ApiResponseSet("method", values);
+			return new ApiResponseSet<String>("method", values);
 		}
 
 	}

File: src/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -215,7 +215,7 @@ public ApiResponse getApiResponseRepresentation() {
 			Map<String, String> values = new HashMap<>();
 			values.put("type", API_NAME);
 			values.put("sessionName", selectedSession != null ? selectedSession.getName() : "");
-			return new ApiResponseSet("credentials", values);
+			return new ApiResponseSet<String>("credentials", values);
 		}
 	}
 

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -266,7 +266,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("methodName", API_METHOD_NAME);
 			values.put("scriptName", script.getName());
 			values.putAll(paramValues);
-			return new ApiResponseSet("method", values);
+			return new ApiResponseSet<String>("method", values);
 		}
 
 	}

File: src/org/zaproxy/zap/authentication/UsernamePasswordAuthenticationCredentials.java
Patch:
@@ -181,7 +181,7 @@ public ApiResponse getApiResponseRepresentation() {
 		values.put("type", API_NAME);
 		values.put("username", username);
 		values.put("password", password);
-		return new ApiResponseSet("credentials", values);
+		return new ApiResponseSet<String>("credentials", values);
 	}
 
 	private static final String ACTION_SET_CREDENTIALS = "formBasedAuthenticationCredentials";

File: src/org/zaproxy/zap/extension/api/ApiDynamicActionImplementor.java
Patch:
@@ -52,11 +52,11 @@ public ApiResponse buildParamsDescription() {
 	 * @param mandatory {@code true} if the parameter is mandatory, {@code false} otherwise
 	 * @return the {@code ApiResponseSet} with the name and mandatory fields
 	 */
-	private static ApiResponseSet buildParamMap(String paramName, boolean mandatory) {
+	private static ApiResponseSet<String> buildParamMap(String paramName, boolean mandatory) {
 		Map<String, String> m = new HashMap<>();
 		m.put("name", paramName);
 		m.put("mandatory", mandatory ? "true" : "false");
-		return new ApiResponseSet("param", m);
+		return new ApiResponseSet<String>("param", m);
 	}
 
 }

File: src/org/zaproxy/zap/extension/api/ApiResponseConversionUtils.java
Patch:
@@ -52,7 +52,7 @@ private ApiResponseConversionUtils() {
      * @param msg the HTTP message to be converted
      * @return the {@code ApiResponseSet} with the ID, type and the HTTP message
      */
-    public static ApiResponseSet httpMessageToSet(int historyId, HttpMessage msg) {
+    public static ApiResponseSet<String> httpMessageToSet(int historyId, HttpMessage msg) {
         return httpMessageToSet(historyId, -1, msg);
     }
 
@@ -65,7 +65,7 @@ public static ApiResponseSet httpMessageToSet(int historyId, HttpMessage msg) {
      * @return the {@code ApiResponseSet} with the ID, type and the HTTP message
      * @since TODO add version
      */
-    public static ApiResponseSet httpMessageToSet(int historyId, int historyType, HttpMessage msg) {
+    public static ApiResponseSet<String> httpMessageToSet(int historyId, int historyType, HttpMessage msg) {
         Map<String, String> map = new HashMap<>();
         map.put("id", String.valueOf(historyId));
         map.put("type", String.valueOf(historyType));
@@ -97,7 +97,7 @@ public static ApiResponseSet httpMessageToSet(int historyId, int historyType, Ht
             map.put("responseBody", msg.getResponseBody().toString());
         }
 
-        return new ApiResponseSet("message", map);
+        return new ApiResponseSet<String>("message", map);
     }
 
 }

File: src/org/zaproxy/zap/extension/api/ContextAPI.java
Patch:
@@ -353,7 +353,7 @@ private ApiResponse buildResponseFromContext(Context c) {
 		fields.put("postParameterParserClass", c.getPostParamParser().getClass().getCanonicalName());
 		fields.put("postParameterParserConfig", c.getPostParamParser().getConfig());
 		
-		return new ApiResponseSet("context", fields);
+		return new ApiResponseSet<String>("context", fields);
 	}
 	
 	/**

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -919,7 +919,7 @@ private ApiResponse proxyChainExcludedDomainsToApiResponseList(
 			domainData.put("value", domain.getValue());
 			domainData.put("regex", domain.isRegex());
 			domainData.put("enabled", domain.isEnabled());
-			apiResponse.addItem(new ApiResponseSet("domain", domainData));
+			apiResponse.addItem(new ApiResponseSet<Object>("domain", domainData));
 		}
 		return apiResponse;
 	}
@@ -1259,7 +1259,7 @@ private void getURLs(SiteNode parent, ApiResponseList list) {
 		}
 	}
 
-	private ApiResponseSet alertToSet(Alert alert) {
+	private ApiResponseSet<String> alertToSet(Alert alert) {
 		Map<String, String> map = new HashMap<>();
 		map.put("id", String.valueOf(alert.getAlertId()));
 		map.put("pluginId", String.valueOf(alert.getPluginId()));
@@ -1282,7 +1282,7 @@ private ApiResponseSet alertToSet(Alert alert) {
 		if (alert.getHistoryRef() != null) {
 			map.put("messageId", String.valueOf(alert.getHistoryRef().getHistoryId()));
 		}
-		return new ApiResponseSet("alert", map);
+		return new ApiResponseSet<String>("alert", map);
 	}
 
 	private void processAlerts(String baseUrl, int start, int count, Processor<Alert> processor) throws ApiException {

File: src/org/zaproxy/zap/extension/authorization/BasicAuthorizationDetectionMethod.java
Patch:
@@ -209,6 +209,6 @@ public ApiResponse getApiResponseRepresentation() {
 		values.put(AuthorizationAPI.PARAM_STATUS_CODE, Integer.toString(this.statusCode));
 		values.put(AuthorizationAPI.PARAM_LOGICAL_OPERATOR, this.logicalOperator.name());
 		values.put(AuthorizationAPI.RESPONSE_TYPE, "basic");
-		return new ApiResponseSet(AuthorizationAPI.RESPONSE_TAG, values);
+		return new ApiResponseSet<String>(AuthorizationAPI.RESPONSE_TAG, values);
 	}
 }

File: src/org/zaproxy/zap/extension/autoupdate/AutoUpdateAPI.java
Patch:
@@ -157,7 +157,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 		return result;
 	}
 	
-	private ApiResponseSet addonToSet(AddOn ao) {
+	private ApiResponseSet<String> addonToSet(AddOn ao) {
 		Map<String, String> map = new HashMap<>();
 		map.put("id", ao.getId());
 		map.put("name", ao.getName());
@@ -171,7 +171,7 @@ private ApiResponseSet addonToSet(AddOn ao) {
 		map.put("url", ObjectUtils.toString(ao.getUrl()));
 		map.put("fileVersion", String.valueOf(ao.getFileVersion()));
 		map.put("version", ObjectUtils.toString(ao.getVersion()));
-		return new ApiResponseSet("addon", map);
+		return new ApiResponseSet<String>("addon", map);
 	}
 	
     public String getLatestVersionNumber() {

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsAPI.java
Patch:
@@ -322,7 +322,7 @@ private ApiResponseList createSessionResponse(HttpSession session) {
 		return sessionResult;
 	}
 
-	private static class TokenValuesResponseSet extends ApiResponseSet {
+	private static class TokenValuesResponseSet extends ApiResponseSet<Cookie> {
 
 		private final List<List<Pair<String, String>>> xmlTokenElements;
 

File: src/org/zaproxy/zap/extension/params/ParamsAPI.java
Patch:
@@ -93,7 +93,7 @@ private static ApiResponseList createSiteParamStatsResponse(SiteParameters siteP
 			map.put("name", param.getName());
 			map.put("type", param.getType().name());
 			map.put("timesUsed", String.valueOf(param.getTimesUsed()));
-			stats.addItem(new ApiResponseSet("Stats", map));
+			stats.addItem(new ApiResponseSet<String>("Stats", map));
 
 			ApiResponseList flags = new ApiResponseList("Flags");
 			for (String flag : param.getFlags()) {

File: src/org/zaproxy/zap/extension/pscan/PassiveScanAPI.java
Patch:
@@ -175,7 +175,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 				map.put("enabled", String.valueOf(scanner.isEnabled()));
 				map.put("alertThreshold", scanner.getLevel(true).name());
 				map.put("quality", scanner.getStatus().toString());
-				resultList.addItem(new ApiResponseSet("scanner", map));
+				resultList.addItem(new ApiResponseSet<String>("scanner", map));
 			}
 			
 			result = resultList;

File: src/org/zaproxy/zap/extension/ruleconfig/RuleConfigAPI.java
Patch:
@@ -127,7 +127,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
                 if (Constant.messages.containsKey(rc2.getKey())) {
                     map.put("description", Constant.messages.getString(rc2.getKey()));
                 }
-                resultList.addItem(new ApiResponseSet("ruleConfig", map));
+                resultList.addItem(new ApiResponseSet<String>("ruleConfig", map));
             }
             
             result = resultList;

File: src/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -93,7 +93,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 					if (type.isEnableable()) {
 						map.put("enabled", Boolean.toString(script.isEnabled()));
 					}
-					result.addItem(new ApiResponseSet("Script", map));
+					result.addItem(new ApiResponseSet<String>("Script", map));
 				}
 			}
 			return result;

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -182,7 +182,7 @@ public void processRecordHistory(RecordHistory recordHistory) {
 						map.put("url", msg.getRequestHeader().getURI().toString());
 						map.put("code", String.valueOf(msg.getResponseHeader().getStatusCode()));
 						map.put("time", String.valueOf(msg.getTimeElapsedMillis()));
-						result.addItem(new ApiResponseSet(name, map));
+						result.addItem(new ApiResponseSet<String>(name, map));
 					}
 				};
 			}

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -560,7 +560,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 					map.put("url", sr.getUri());
 					map.put("statusCode", Integer.toString(sr.getStatusCode()));
 					map.put("statusReason", sr.getStatusReason());
-					resultList.addItem(new ApiResponseSet("resource", map));
+					resultList.addItem(new ApiResponseSet<String>("resource", map));
 				}
 			}
 			resultUrls.addItem(resultList);
@@ -588,7 +588,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 				map.put("id", Integer.toString(spiderScan.getScanId()));
 				map.put("progress", Integer.toString(spiderScan.getProgress()));
 				map.put("state", spiderScan.getState());
-				resultList.addItem(new ApiResponseSet("scan", map));
+				resultList.addItem(new ApiResponseSet<String>("scan", map));
 			}
 			result = resultList;
 		} else if (VIEW_ALL_URLS.equals(name)) {
@@ -646,7 +646,7 @@ private ApiResponse domainMatchersToApiResponseList(
 			domainData.put("value", domain.getValue());
 			domainData.put("regex", domain.isRegex());
 			domainData.put("enabled", domain.isEnabled());
-			apiResponse.addItem(new ApiResponseSet("domain", domainData));
+			apiResponse.addItem(new ApiResponseSet<Object>("domain", domainData));
 		}
 		return apiResponse;
 	}

File: src/org/zaproxy/zap/extension/stats/StatsAPI.java
Patch:
@@ -98,7 +98,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			for (Entry<String, Long> stat : memStats.getStats(this.getParam(params, PARAM_KEY_PREFIX, "")).entrySet()) {
 				map.put(stat.getKey(), stat.getValue().toString());
 			}
-			result = new ApiResponseSet(name, map);
+			result = new ApiResponseSet<String>(name, map);
 
 		} else if (VIEW_ALL_SITES_STATS.equals(name)) {
 			result = new ApiResponseList(name);
@@ -140,7 +140,7 @@ public SiteStatsApiResponse(String site, Map<String, Long> stats) {
 			super("statistics");
 			this.site = site;
 			this.stats = new TreeMap<>(stats);
-			this.addItem(new ApiResponseSet(site, this.stats));
+			this.addItem(new ApiResponseSet<Long>(site, this.stats));
 		}
 		
 		@Override

File: src/org/zaproxy/zap/extension/users/UsersAPI.java
Patch:
@@ -238,7 +238,7 @@ private ApiResponse buildResponseFromUser(User u) {
 		fields.put("enabled", Boolean.toString(u.isEnabled()));
 		fields.put("credentials", u.getAuthenticationCredentials().getApiResponseRepresentation().toJSON()
 				.toString());
-		ApiResponseSet response = new ApiResponseSet("user", fields);
+		ApiResponseSet<String> response = new ApiResponseSet<String>("user", fields);
 		return response;
 	}
 

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -389,7 +389,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("methodName", API_METHOD_NAME);
 			values.put("loginUrl", loginRequestURL);
 			values.put("loginRequestData", this.loginRequestBody);
-			return new ApiResponseSet("method", values);
+			return new ApiResponseSet<String>("method", values);
 		}
 
 		@Override

File: src/org/zaproxy/zap/authentication/GenericAuthenticationCredentials.java
Patch:
@@ -63,7 +63,7 @@ public void decode(String encodedCredentials) {
 	public ApiResponse getApiResponseRepresentation() {
 		Map<String, String> values = new HashMap<>(paramValues);
 		values.put("type", API_NAME);
-		return new ApiResponseSet("credentials", values);
+		return new ApiResponseSet<String>("credentials", values);
 	}
 
 	/**

File: src/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -139,7 +139,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("host", this.hostname);
 			values.put("port", Integer.toString(this.port));
 			values.put("realm", this.realm);
-			return new ApiResponseSet("method", values);
+			return new ApiResponseSet<String>("method", values);
 		}
 
 	}

File: src/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -215,7 +215,7 @@ public ApiResponse getApiResponseRepresentation() {
 			Map<String, String> values = new HashMap<>();
 			values.put("type", API_NAME);
 			values.put("sessionName", selectedSession != null ? selectedSession.getName() : "");
-			return new ApiResponseSet("credentials", values);
+			return new ApiResponseSet<String>("credentials", values);
 		}
 	}
 

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -266,7 +266,7 @@ public ApiResponse getApiResponseRepresentation() {
 			values.put("methodName", API_METHOD_NAME);
 			values.put("scriptName", script.getName());
 			values.putAll(paramValues);
-			return new ApiResponseSet("method", values);
+			return new ApiResponseSet<String>("method", values);
 		}
 
 	}

File: src/org/zaproxy/zap/authentication/UsernamePasswordAuthenticationCredentials.java
Patch:
@@ -181,7 +181,7 @@ public ApiResponse getApiResponseRepresentation() {
 		values.put("type", API_NAME);
 		values.put("username", username);
 		values.put("password", password);
-		return new ApiResponseSet("credentials", values);
+		return new ApiResponseSet<String>("credentials", values);
 	}
 
 	private static final String ACTION_SET_CREDENTIALS = "formBasedAuthenticationCredentials";

File: src/org/zaproxy/zap/extension/api/ApiDynamicActionImplementor.java
Patch:
@@ -52,11 +52,11 @@ public ApiResponse buildParamsDescription() {
 	 * @param mandatory {@code true} if the parameter is mandatory, {@code false} otherwise
 	 * @return the {@code ApiResponseSet} with the name and mandatory fields
 	 */
-	private static ApiResponseSet buildParamMap(String paramName, boolean mandatory) {
+	private static ApiResponseSet<String> buildParamMap(String paramName, boolean mandatory) {
 		Map<String, String> m = new HashMap<>();
 		m.put("name", paramName);
 		m.put("mandatory", mandatory ? "true" : "false");
-		return new ApiResponseSet("param", m);
+		return new ApiResponseSet<String>("param", m);
 	}
 
 }

File: src/org/zaproxy/zap/extension/api/ApiResponseConversionUtils.java
Patch:
@@ -52,7 +52,7 @@ private ApiResponseConversionUtils() {
      * @param msg the HTTP message to be converted
      * @return the {@code ApiResponseSet} with the ID, type and the HTTP message
      */
-    public static ApiResponseSet httpMessageToSet(int historyId, HttpMessage msg) {
+    public static ApiResponseSet<String> httpMessageToSet(int historyId, HttpMessage msg) {
         return httpMessageToSet(historyId, -1, msg);
     }
 
@@ -65,7 +65,7 @@ public static ApiResponseSet httpMessageToSet(int historyId, HttpMessage msg) {
      * @return the {@code ApiResponseSet} with the ID, type and the HTTP message
      * @since TODO add version
      */
-    public static ApiResponseSet httpMessageToSet(int historyId, int historyType, HttpMessage msg) {
+    public static ApiResponseSet<String> httpMessageToSet(int historyId, int historyType, HttpMessage msg) {
         Map<String, String> map = new HashMap<>();
         map.put("id", String.valueOf(historyId));
         map.put("type", String.valueOf(historyType));
@@ -97,7 +97,7 @@ public static ApiResponseSet httpMessageToSet(int historyId, int historyType, Ht
             map.put("responseBody", msg.getResponseBody().toString());
         }
 
-        return new ApiResponseSet("message", map);
+        return new ApiResponseSet<String>("message", map);
     }
 
 }

File: src/org/zaproxy/zap/extension/api/ContextAPI.java
Patch:
@@ -353,7 +353,7 @@ private ApiResponse buildResponseFromContext(Context c) {
 		fields.put("postParameterParserClass", c.getPostParamParser().getClass().getCanonicalName());
 		fields.put("postParameterParserConfig", c.getPostParamParser().getConfig());
 		
-		return new ApiResponseSet("context", fields);
+		return new ApiResponseSet<String>("context", fields);
 	}
 	
 	/**

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -919,7 +919,7 @@ private ApiResponse proxyChainExcludedDomainsToApiResponseList(
 			domainData.put("value", domain.getValue());
 			domainData.put("regex", domain.isRegex());
 			domainData.put("enabled", domain.isEnabled());
-			apiResponse.addItem(new ApiResponseSet("domain", domainData));
+			apiResponse.addItem(new ApiResponseSet<Object>("domain", domainData));
 		}
 		return apiResponse;
 	}
@@ -1259,7 +1259,7 @@ private void getURLs(SiteNode parent, ApiResponseList list) {
 		}
 	}
 
-	private ApiResponseSet alertToSet(Alert alert) {
+	private ApiResponseSet<String> alertToSet(Alert alert) {
 		Map<String, String> map = new HashMap<>();
 		map.put("id", String.valueOf(alert.getAlertId()));
 		map.put("pluginId", String.valueOf(alert.getPluginId()));
@@ -1282,7 +1282,7 @@ private ApiResponseSet alertToSet(Alert alert) {
 		if (alert.getHistoryRef() != null) {
 			map.put("messageId", String.valueOf(alert.getHistoryRef().getHistoryId()));
 		}
-		return new ApiResponseSet("alert", map);
+		return new ApiResponseSet<String>("alert", map);
 	}
 
 	private void processAlerts(String baseUrl, int start, int count, Processor<Alert> processor) throws ApiException {

File: src/org/zaproxy/zap/extension/authorization/BasicAuthorizationDetectionMethod.java
Patch:
@@ -209,6 +209,6 @@ public ApiResponse getApiResponseRepresentation() {
 		values.put(AuthorizationAPI.PARAM_STATUS_CODE, Integer.toString(this.statusCode));
 		values.put(AuthorizationAPI.PARAM_LOGICAL_OPERATOR, this.logicalOperator.name());
 		values.put(AuthorizationAPI.RESPONSE_TYPE, "basic");
-		return new ApiResponseSet(AuthorizationAPI.RESPONSE_TAG, values);
+		return new ApiResponseSet<String>(AuthorizationAPI.RESPONSE_TAG, values);
 	}
 }

File: src/org/zaproxy/zap/extension/autoupdate/AutoUpdateAPI.java
Patch:
@@ -157,7 +157,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 		return result;
 	}
 	
-	private ApiResponseSet addonToSet(AddOn ao) {
+	private ApiResponseSet<String> addonToSet(AddOn ao) {
 		Map<String, String> map = new HashMap<>();
 		map.put("id", ao.getId());
 		map.put("name", ao.getName());
@@ -171,7 +171,7 @@ private ApiResponseSet addonToSet(AddOn ao) {
 		map.put("url", ObjectUtils.toString(ao.getUrl()));
 		map.put("fileVersion", String.valueOf(ao.getFileVersion()));
 		map.put("version", ObjectUtils.toString(ao.getVersion()));
-		return new ApiResponseSet("addon", map);
+		return new ApiResponseSet<String>("addon", map);
 	}
 	
     public String getLatestVersionNumber() {

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsAPI.java
Patch:
@@ -322,7 +322,7 @@ private ApiResponseList createSessionResponse(HttpSession session) {
 		return sessionResult;
 	}
 
-	private static class TokenValuesResponseSet extends ApiResponseSet {
+	private static class TokenValuesResponseSet extends ApiResponseSet<Cookie> {
 
 		private final List<List<Pair<String, String>>> xmlTokenElements;
 

File: src/org/zaproxy/zap/extension/params/ParamsAPI.java
Patch:
@@ -93,7 +93,7 @@ private static ApiResponseList createSiteParamStatsResponse(SiteParameters siteP
 			map.put("name", param.getName());
 			map.put("type", param.getType().name());
 			map.put("timesUsed", String.valueOf(param.getTimesUsed()));
-			stats.addItem(new ApiResponseSet("Stats", map));
+			stats.addItem(new ApiResponseSet<String>("Stats", map));
 
 			ApiResponseList flags = new ApiResponseList("Flags");
 			for (String flag : param.getFlags()) {

File: src/org/zaproxy/zap/extension/pscan/PassiveScanAPI.java
Patch:
@@ -175,7 +175,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 				map.put("enabled", String.valueOf(scanner.isEnabled()));
 				map.put("alertThreshold", scanner.getLevel(true).name());
 				map.put("quality", scanner.getStatus().toString());
-				resultList.addItem(new ApiResponseSet("scanner", map));
+				resultList.addItem(new ApiResponseSet<String>("scanner", map));
 			}
 			
 			result = resultList;

File: src/org/zaproxy/zap/extension/ruleconfig/RuleConfigAPI.java
Patch:
@@ -127,7 +127,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
                 if (Constant.messages.containsKey(rc2.getKey())) {
                     map.put("description", Constant.messages.getString(rc2.getKey()));
                 }
-                resultList.addItem(new ApiResponseSet("ruleConfig", map));
+                resultList.addItem(new ApiResponseSet<String>("ruleConfig", map));
             }
             
             result = resultList;

File: src/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -93,7 +93,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 					if (type.isEnableable()) {
 						map.put("enabled", Boolean.toString(script.isEnabled()));
 					}
-					result.addItem(new ApiResponseSet("Script", map));
+					result.addItem(new ApiResponseSet<String>("Script", map));
 				}
 			}
 			return result;

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -182,7 +182,7 @@ public void processRecordHistory(RecordHistory recordHistory) {
 						map.put("url", msg.getRequestHeader().getURI().toString());
 						map.put("code", String.valueOf(msg.getResponseHeader().getStatusCode()));
 						map.put("time", String.valueOf(msg.getTimeElapsedMillis()));
-						result.addItem(new ApiResponseSet(name, map));
+						result.addItem(new ApiResponseSet<String>(name, map));
 					}
 				};
 			}

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -560,7 +560,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 					map.put("url", sr.getUri());
 					map.put("statusCode", Integer.toString(sr.getStatusCode()));
 					map.put("statusReason", sr.getStatusReason());
-					resultList.addItem(new ApiResponseSet("resource", map));
+					resultList.addItem(new ApiResponseSet<String>("resource", map));
 				}
 			}
 			resultUrls.addItem(resultList);
@@ -588,7 +588,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 				map.put("id", Integer.toString(spiderScan.getScanId()));
 				map.put("progress", Integer.toString(spiderScan.getProgress()));
 				map.put("state", spiderScan.getState());
-				resultList.addItem(new ApiResponseSet("scan", map));
+				resultList.addItem(new ApiResponseSet<String>("scan", map));
 			}
 			result = resultList;
 		} else if (VIEW_ALL_URLS.equals(name)) {
@@ -646,7 +646,7 @@ private ApiResponse domainMatchersToApiResponseList(
 			domainData.put("value", domain.getValue());
 			domainData.put("regex", domain.isRegex());
 			domainData.put("enabled", domain.isEnabled());
-			apiResponse.addItem(new ApiResponseSet("domain", domainData));
+			apiResponse.addItem(new ApiResponseSet<Object>("domain", domainData));
 		}
 		return apiResponse;
 	}

File: src/org/zaproxy/zap/extension/stats/StatsAPI.java
Patch:
@@ -98,7 +98,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			for (Entry<String, Long> stat : memStats.getStats(this.getParam(params, PARAM_KEY_PREFIX, "")).entrySet()) {
 				map.put(stat.getKey(), stat.getValue().toString());
 			}
-			result = new ApiResponseSet(name, map);
+			result = new ApiResponseSet<String>(name, map);
 
 		} else if (VIEW_ALL_SITES_STATS.equals(name)) {
 			result = new ApiResponseList(name);
@@ -140,7 +140,7 @@ public SiteStatsApiResponse(String site, Map<String, Long> stats) {
 			super("statistics");
 			this.site = site;
 			this.stats = new TreeMap<>(stats);
-			this.addItem(new ApiResponseSet(site, this.stats));
+			this.addItem(new ApiResponseSet<Long>(site, this.stats));
 		}
 		
 		@Override

File: src/org/zaproxy/zap/extension/users/UsersAPI.java
Patch:
@@ -238,7 +238,7 @@ private ApiResponse buildResponseFromUser(User u) {
 		fields.put("enabled", Boolean.toString(u.isEnabled()));
 		fields.put("credentials", u.getAuthenticationCredentials().getApiResponseRepresentation().toJSON()
 				.toString());
-		ApiResponseSet response = new ApiResponseSet("user", fields);
+		ApiResponseSet<String> response = new ApiResponseSet<String>("user", fields);
 		return response;
 	}
 

File: src/org/zaproxy/zap/extension/spider/ExtensionSpider.java
Patch:
@@ -801,7 +801,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 
 	public void showSpiderDialog(SiteNode node) {
 		if (spiderDialog == null) {
-			spiderDialog = new SpiderDialog(this, View.getSingleton().getMainFrame(), new Dimension(700, 400));
+			spiderDialog = new SpiderDialog(this, View.getSingleton().getMainFrame(), new Dimension(700, 430));
 		}
 		if (spiderDialog.isVisible()) {
 			// Its behind you! Actually not needed no the window is alwaysOnTop, but keeping in case we change that ;)

File: src/org/zaproxy/zap/extension/spider/ExtensionSpider.java
Patch:
@@ -801,7 +801,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 
 	public void showSpiderDialog(SiteNode node) {
 		if (spiderDialog == null) {
-			spiderDialog = new SpiderDialog(this, View.getSingleton().getMainFrame(), new Dimension(700, 400));
+			spiderDialog = new SpiderDialog(this, View.getSingleton().getMainFrame(), new Dimension(700, 430));
 		}
 		if (spiderDialog.isVisible()) {
 			// Its behind you! Actually not needed no the window is alwaysOnTop, but keeping in case we change that ;)

File: src/org/zaproxy/zap/extension/globalexcludeurl/GlobalExcludeURLParam.java
Patch:
@@ -109,15 +109,15 @@ private void setDefaultList() {
 				"Site - Bing API queries",
 				"false"
 			}, {
-				"^https?://(safebrowsing-cache|sb-ssl|sb|safebrowsing\\.clients)\\.google\\.com",
+				"^https?://(safebrowsing-cache|sb-ssl|sb|safebrowsing\\.clients)\\.google\\.com/.*$",
 				"Site - Google malware detector updates",
 				"false"
 			}, {
 				"^https?://([^/])*\\.?lastpass\\.com",
 				"Site - Lastpass manager",
 				"false"
 			}, {
-				"^https?://(.*addons|au[0-9])\\.mozilla\\.(org|net|com)",
+				"^https?://(.*addons|aus[0-9])\\.mozilla\\.(org|net|com)/.*$",
 				"Site - Mozilla Firefox browser updates",
 				"false"
 			}, {

File: src/org/zaproxy/zap/extension/globalexcludeurl/GlobalExcludeURLParam.java
Patch:
@@ -110,15 +110,15 @@ private void setDefaultList() {
 				"Site - Bing API queries",
 				"false"
 			}, {
-				"^https?://(safebrowsing-cache|sb-ssl|sb|safebrowsing\\.clients)\\.google\\.com",
+				"^https?://(safebrowsing-cache|sb-ssl|sb|safebrowsing\\.clients)\\.google\\.com/.*$",
 				"Site - Google malware detector updates",
 				"false"
 			}, {
 				"^https?://([^/])*\\.?lastpass\\.com",
 				"Site - Lastpass manager",
 				"false"
 			}, {
-				"^https?://(.*addons|au[0-9])\\.mozilla\\.(org|net|com)",
+				"^https?://(.*addons|aus[0-9])\\.mozilla\\.(org|net|com)/.*$",
 				"Site - Mozilla Firefox browser updates",
 				"false"
 			}, {

File: src/org/parosproxy/paros/network/HttpMessage.java
Patch:
@@ -45,6 +45,7 @@
 // ZAP: 2015/08/07 Issue 1768: Update to use a more recent default user agent
 // ZAP: 2015/08/19 Deprecate/change methods with unused parameters 
 // ZAP: 2016/05/31 Implement hashCode()
+// ZAP: 2017/02/01 Set whether or not the charset should be determined when setting a (String) response.
 
 package org.parosproxy.paros.network;
 
@@ -315,6 +316,7 @@ public void setRequestBody(byte[] body) {
 
 	public void setResponseBody(String body) {
 	    getResponseBody().setCharset(getResponseHeader().getCharset());
+	    getResponseBody().setDetermineCharset(getResponseHeader().isText());
 		getResponseBody().setBody(body);
 
 	}

File: test/org/zaproxy/zap/network/HttpBodyTestUtils.java
Patch:
@@ -28,12 +28,11 @@
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.junit.BeforeClass;
-import org.parosproxy.paros.core.scanner.Plugin;
 
 /**
  * Class with helper/utility methods to help testing classes involving {@code HttpBody} class and its implementations.
  *
- * @see Plugin
+ * @see org.parosproxy.paros.network.HttpBody HttpBody
  */
 public class HttpBodyTestUtils {
 

File: src/org/zaproxy/zap/extension/compare/ExtensionCompare.java
Patch:
@@ -38,14 +38,14 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control.Mode;
-import org.parosproxy.paros.db.Database;
 import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordHistory;
 import org.parosproxy.paros.db.TableHistory;
 import org.parosproxy.paros.db.paros.ParosDatabase;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.extension.SessionChangedListener;
+import org.parosproxy.paros.extension.option.DatabaseParam;
 import org.parosproxy.paros.extension.report.ReportGenerator;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
@@ -191,7 +191,8 @@ public String getDescription() {
 	    		cmpModel.openSession(file, this);
 
 	    		// TODO support other implementations in the future
-				Database db = new ParosDatabase();
+				ParosDatabase db = new ParosDatabase();
+				db.setDatabaseParam(new DatabaseParam());
 				db.open(file.getAbsolutePath());
 				
 				Map <String, String> curMap = new HashMap<>();

File: src/org/zaproxy/zap/view/ContextStructurePanel.java
Patch:
@@ -426,7 +426,7 @@ public void save() {
 
 		@Override
 		public String validateFields() {
-			if (! this.getStringValue(FIELD_NAME).matches("[A-Za-z0-9]+")) {
+			if (! this.getStringValue(FIELD_NAME).matches("[A-Za-z0-9_]+")) {
 				// Must supply a name just made up of alphanumeric characters
 				return Constant.messages.getString("context.ddn.dialog.error.name");
 			}

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -449,7 +449,7 @@ protected HttpSessionsPanel getHttpSessionsPanel() {
 	 *            missing, a default protocol of 80 is used.
 	 * @return the http sessions site container
 	 */
-	protected HttpSessionsSite getHttpSessionsSite(String site) {
+	public HttpSessionsSite getHttpSessionsSite(String site) {
 		return getHttpSessionsSite(site, true);
 	}
 
@@ -466,7 +466,7 @@ protected HttpSessionsSite getHttpSessionsSite(String site) {
 	 *         false
 	 * 
 	 */
-	protected HttpSessionsSite getHttpSessionsSite(String site, boolean createIfNeeded) {
+	public HttpSessionsSite getHttpSessionsSite(String site, boolean createIfNeeded) {
 		// Add a default port
 		if (!site.contains(":")) {
 			site = site + (":80");

File: src/org/zaproxy/zap/extension/api/ApiElement.java
Patch:
@@ -143,7 +143,7 @@ public boolean isDeprecated() {
 	 * @since TODO add version
 	 * @see #setDeprecatedDescription(String)
 	 */
-	protected void setDeprecated(boolean deprecated) {
+	public void setDeprecated(boolean deprecated) {
 		this.deprecated = deprecated;
 	}
 
@@ -169,7 +169,7 @@ public String getDeprecatedDescription() {
 	 * @since TODO add version
 	 * @see #setDeprecated(boolean)
 	 */
-	protected void setDeprecatedDescription(String description) {
+	public void setDeprecatedDescription(String description) {
 		this.deprecatedDescription = description;
 	}
 }

File: src/org/zaproxy/zap/spider/SpiderParam.java
Patch:
@@ -744,6 +744,7 @@ public void setHandleODataParametersVisited(boolean handleODataParametersVisited
      * @see #getDomainsAlwaysInScopeEnabled()
      * @see #setDomainsAlwaysInScope(List)
      */
+    @ZapApiIgnore
     public List<DomainAlwaysInScopeMatcher> getDomainsAlwaysInScope() {
         return domainsAlwaysInScope;
     }
@@ -756,6 +757,7 @@ public List<DomainAlwaysInScopeMatcher> getDomainsAlwaysInScope() {
      * @see #getDomainsAlwaysInScope()
      * @see #setDomainsAlwaysInScope(List)
      */
+    @ZapApiIgnore
     public List<DomainAlwaysInScopeMatcher> getDomainsAlwaysInScopeEnabled() {
         return domainsAlwaysInScopeEnabled;
     }

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -450,7 +450,7 @@ protected HttpSessionsPanel getHttpSessionsPanel() {
 	 *            missing, a default protocol of 80 is used.
 	 * @return the http sessions site container
 	 */
-	protected HttpSessionsSite getHttpSessionsSite(String site) {
+	public HttpSessionsSite getHttpSessionsSite(String site) {
 		return getHttpSessionsSite(site, true);
 	}
 
@@ -467,7 +467,7 @@ protected HttpSessionsSite getHttpSessionsSite(String site) {
 	 *         false
 	 * 
 	 */
-	protected HttpSessionsSite getHttpSessionsSite(String site, boolean createIfNeeded) {
+	public HttpSessionsSite getHttpSessionsSite(String site, boolean createIfNeeded) {
 		// Add a default port
 		if (!site.contains(":")) {
 			site = site + (":80");

File: src/org/zaproxy/zap/control/ZapAddOnXmlFile.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.commons.configuration.HierarchicalConfiguration;
 
 /**
- * Helper class that reads a {@code ZapAddOn.xml} file.
+ * Helper class that reads a {@link AddOn#MANIFEST_FILE_NAME manifest file}.
  * 
  * @since 2.4.0
  */

File: src/org/zaproxy/zap/view/ZapTable.java
Patch:
@@ -240,7 +240,7 @@ public ZapColumnControlButton(JXTable table, Icon icon) {
         }
 
         @Override
-        protected void populatePopup() {
+        public void populatePopup() {
             super.populatePopup();
 
             if (customActions != null && popup instanceof DefaultColumnControlPopup) {

File: src/org/zaproxy/zap/extension/ext/ExtensionExtension.java
Patch:
@@ -56,8 +56,6 @@ private void initialize() {
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);
 
-		extensionHook.addOptionsParamSet(new ExtensionParam());
-
 	    if (getView() != null) {
 	        extensionHook.getHookView().addOptionPanel(getOptionsExtensionPanel());
 	    }

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -165,6 +165,7 @@ public ApiResponse handleApiView(final String name, JSONObject params)
 					public void processRecordHistory(RecordHistory recordHistory) {
 						result.addItem(ApiResponseConversionUtils.httpMessageToSet(
 								recordHistory.getHistoryId(),
+								recordHistory.getHistoryType(),
 								recordHistory.getHttpMessage()));
 					}
 				};

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -165,6 +165,7 @@ public ApiResponse handleApiView(final String name, JSONObject params)
 					public void processRecordHistory(RecordHistory recordHistory) {
 						result.addItem(ApiResponseConversionUtils.httpMessageToSet(
 								recordHistory.getHistoryId(),
+								recordHistory.getHistoryType(),
 								recordHistory.getHttpMessage()));
 					}
 				};

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionPanel.java
Patch:
@@ -129,6 +129,7 @@ public void initParam(Object obj) {
 			}
 			ext.setEnabled(enabled);
 		}
+    	extensionModel.fireTableRowsUpdated(0, extensionModel.getRowCount());
     }
 
 

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -81,12 +81,14 @@ public void applyThreshold(AlertThreshold threshold, String quality) {
     			ss.setThreshold(threshold);
     		}
     	}
+    	this.fireTableRowsUpdated(0, getRowCount());
     }
 
     public void applyThresholdToAll(AlertThreshold threshold) {
     	for (ScannerWrapper ss : this.listScanners) {
    			ss.setThreshold(threshold);
     	}
+    	this.fireTableRowsUpdated(0, getRowCount());
     }
 
     /**

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -89,7 +89,9 @@ public int start() {
             return rc;
         }
 
-        BasicConfigurator.configure();
+        if (!getArgs().isNoStdOutLog()) {
+            BasicConfigurator.configure();
+        }
 
         logger.info(getStartingMessage());
 

File: src/org/zaproxy/zap/extension/uiutils/ExtensionUiUtils.java
Patch:
@@ -106,7 +106,7 @@ public String getAuthor() {
 
 	@Override
 	public String getDescription() {
-		return Constant.messages.getString("uituils.desc");
+		return Constant.messages.getString("uiutils.desc");
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/uiutils/ExtensionUiUtils.java
Patch:
@@ -106,7 +106,7 @@ public String getAuthor() {
 
 	@Override
 	public String getDescription() {
-		return Constant.messages.getString("uituils.desc");
+		return Constant.messages.getString("uiutils.desc");
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -167,7 +167,9 @@ private enum ScanReportType {
 			"  var url = '/' + format + '/' + component + '/' + type + '/' + name + '/'\n" +
 			"  var form=document.getElementById('zapform');\n" +
 			"  form.action = url;\n" +
-			"  form.method = form.elements[\"formMethod\"].value;\n" +
+			"  if (form.elements[\"formMethod\"]) {\n" +
+			"    form.method = form.elements[\"formMethod\"].value;\n" +
+			"  }\n" +
 			"  form.submit();\n" +
 			"}\n" +
 			"document.addEventListener('DOMContentLoaded', function () {\n" +

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -89,7 +89,9 @@ public int start() {
             return rc;
         }
 
-        BasicConfigurator.configure();
+        if (!getArgs().isNoStdOutLog()) {
+            BasicConfigurator.configure();
+        }
 
         logger.info(getStartingMessage());
 

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsAPI.java
Patch:
@@ -250,7 +250,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 			}
 
 			ApiResponseList response = new ApiResponseList(name);
-			String vsName = params.getString(VIEW_PARAM_SESSION);
+			String vsName = getParam(params, VIEW_PARAM_SESSION, "");
 			// If a session name was not provided
 			if (vsName == null || vsName.isEmpty()) {
 				Set<HttpSession> sessions = site.getHttpSessions();

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsAPI.java
Patch:
@@ -250,7 +250,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 			}
 
 			ApiResponseList response = new ApiResponseList(name);
-			String vsName = params.getString(VIEW_PARAM_SESSION);
+			String vsName = getParam(params, VIEW_PARAM_SESSION, "");
 			// If a session name was not provided
 			if (vsName == null || vsName.isEmpty()) {
 				Set<HttpSession> sessions = site.getHttpSessions();

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -64,6 +64,7 @@ public enum Type {
 		 */
 		ILLEGAL_PARAMETER,
 		CONTEXT_NOT_FOUND,
+		CONTENT_TYPE_NOT_SUPPORTED,
 		USER_NOT_FOUND, URL_NOT_IN_CONTEXT, BAD_API_KEY, SCRIPT_NOT_FOUND, BAD_SCRIPT_FORMAT, NO_ACCESS,
 		/*
 		 * Indicates that the requested operation is not allowed in the current mode

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -167,6 +167,7 @@ private enum ScanReportType {
 			"  var url = '/' + format + '/' + component + '/' + type + '/' + name + '/'\n" +
 			"  var form=document.getElementById('zapform');\n" +
 			"  form.action = url;\n" +
+			"  form.method = form.elements[\"formMethod\"].value;\n" +
 			"  form.submit();\n" +
 			"}\n" +
 			"document.addEventListener('DOMContentLoaded', function () {\n" +

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -64,6 +64,7 @@ public enum Type {
 		 */
 		ILLEGAL_PARAMETER,
 		CONTEXT_NOT_FOUND,
+		CONTENT_TYPE_NOT_SUPPORTED,
 		USER_NOT_FOUND, URL_NOT_IN_CONTEXT, BAD_API_KEY, SCRIPT_NOT_FOUND, BAD_SCRIPT_FORMAT, NO_ACCESS,
 		/*
 		 * Indicates that the requested operation is not allowed in the current mode

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -167,6 +167,7 @@ private enum ScanReportType {
 			"  var url = '/' + format + '/' + component + '/' + type + '/' + name + '/'\n" +
 			"  var form=document.getElementById('zapform');\n" +
 			"  form.action = url;\n" +
+			"  form.method = form.elements[\"formMethod\"].value;\n" +
 			"  form.submit();\n" +
 			"}\n" +
 			"document.addEventListener('DOMContentLoaded', function () {\n" +

File: src/org/zaproxy/zap/view/ContextCreateDialog.java
Patch:
@@ -78,6 +78,9 @@ public String validateFields() {
 		if (this.isEmptyField(NAME_FIELD)) {
 			return Constant.messages.getString("context.create.warning.noname");
 		}
+		if (Model.getSingleton().getSession().getContext(getStringValue(NAME_FIELD)) != null) {
+			return Constant.messages.getString("context.error.name.duplicated");
+		}
 		return null;
 	}
 

File: src/org/zaproxy/zap/view/popup/PopupMenuItemIncludeInContext.java
Patch:
@@ -111,8 +111,8 @@ private void recreateUISharedContexts(Session session) {
     @Override
     public boolean isButtonEnabledForSiteNode(SiteNode sn) {
         if (context == null) {
-            // New context
-            return true;
+            // New context, if it doesn't already exist one with same name.
+            return Model.getSingleton().getSession().getContext(sn.getNodeName()) == null;
         }
         if (context.isIncluded(sn) || context.isExcluded(sn)) {
             // Either explicitly included or excluded, so would have to change that regex in a non

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlFormParser.java
Patch:
@@ -106,7 +106,7 @@ public boolean parseResource(HttpMessage message, Source source, int depth) {
 			}
 			String href = base.getAttributeValue("href");
 			if (href != null && !href.isEmpty()) {
-				baseURL = href;
+				baseURL = URLCanonicalizer.getCanonicalURL(href, baseURL);
 			}
 		}
 

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlParser.java
Patch:
@@ -29,6 +29,7 @@
 
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.spider.SpiderParam;
+import org.zaproxy.zap.spider.URLCanonicalizer;
 
 /**
  * The Class SpiderHtmlParser is used for parsing of HTML files, gathering resource urls from them.
@@ -81,7 +82,7 @@ public boolean parseResource(HttpMessage message, Source source, int depth) {
 			}
 			String href = base.getAttributeValue("href");
 			if (href != null && !href.isEmpty()) {
-				baseURL = href;
+				baseURL = URLCanonicalizer.getCanonicalURL(href, baseURL);
 			}
 		}
 

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -281,10 +281,11 @@ public void setLoginRequest(SiteNode loginSiteNode) throws Exception {
 
 			HttpMessage requestMessage = loginSiteNode.getHistoryReference().getHttpMessage();
 			this.loginRequestURL = requestMessage.getRequestHeader().getURI().toString();
-			if (requestMessage.getRequestHeader().getMethod() != HttpRequestHeader.GET)
+			if (!requestMessage.getRequestHeader().getMethod().equalsIgnoreCase(HttpRequestHeader.GET)) {
 				this.loginRequestBody = requestMessage.getRequestBody().toString();
-			else
+			} else {
 				this.loginRequestBody = null;
+			}
 		}
 
 		/**

File: src/org/zaproxy/zap/extension/api/PhpAPIGenerator.java
Patch:
@@ -109,7 +109,7 @@ private void generatePhpElement(ApiElement element, String component,
 		String paramMan = "";
 		if (element.getMandatoryParamNames() != null) {
 			for (String param : element.getMandatoryParamNames()) {
-			    if (paramMan != "") {
+			    if (!paramMan.isEmpty()) {
 			        paramMan += ", ";
 			    }
 				paramMan += "$" + param.toLowerCase();
@@ -119,7 +119,7 @@ private void generatePhpElement(ApiElement element, String component,
 		String paramOpt = "";
 		if (element.getOptionalParamNames() != null) {
 			for (String param : element.getOptionalParamNames()) {
-			    if (paramMan != "" || paramOpt != "") {
+			    if (!paramMan.isEmpty() || !paramOpt.isEmpty()) {
 			        paramOpt += ", ";
 			    }
 				paramOpt += "$" + param.toLowerCase() + "=NULL";

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -281,10 +281,11 @@ public void setLoginRequest(SiteNode loginSiteNode) throws Exception {
 
 			HttpMessage requestMessage = loginSiteNode.getHistoryReference().getHttpMessage();
 			this.loginRequestURL = requestMessage.getRequestHeader().getURI().toString();
-			if (requestMessage.getRequestHeader().getMethod() != HttpRequestHeader.GET)
+			if (!requestMessage.getRequestHeader().getMethod().equalsIgnoreCase(HttpRequestHeader.GET)) {
 				this.loginRequestBody = requestMessage.getRequestBody().toString();
-			else
+			} else {
 				this.loginRequestBody = null;
+			}
 		}
 
 		/**

File: src/org/zaproxy/zap/extension/api/PhpAPIGenerator.java
Patch:
@@ -109,7 +109,7 @@ private void generatePhpElement(ApiElement element, String component,
 		String paramMan = "";
 		if (element.getMandatoryParamNames() != null) {
 			for (String param : element.getMandatoryParamNames()) {
-			    if (paramMan != "") {
+			    if (!paramMan.isEmpty()) {
 			        paramMan += ", ";
 			    }
 				paramMan += "$" + param.toLowerCase();
@@ -119,7 +119,7 @@ private void generatePhpElement(ApiElement element, String component,
 		String paramOpt = "";
 		if (element.getOptionalParamNames() != null) {
 			for (String param : element.getOptionalParamNames()) {
-			    if (paramMan != "" || paramOpt != "") {
+			    if (!paramMan.isEmpty() || !paramOpt.isEmpty()) {
 			        paramOpt += ", ";
 			    }
 				paramOpt += "$" + param.toLowerCase() + "=NULL";

File: src/org/parosproxy/paros/network/HttpMethodHelper.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2013/06/17 Issue 687: Change HTTP response header parser to be less strict
 // ZAP: 2013/07/10 Issue 721: Non POST and PUT requests receive a 504 when server expects a request body
 // ZAP: 2016/05/16 Throw exception if failed to set the request URI
+// ZAP: 2016/10/13 Include URI in exception's message
 package org.parosproxy.paros.network;
 
 import java.util.regex.Pattern;
@@ -178,7 +179,7 @@ public HttpMethod createRequestMethod(HttpRequestHeader header, HttpBody body) t
 		try {
 			httpMethod.setURI(uri);
 		} catch (Exception e1) {
-			throw new URIException("Failed to set URI: " + e1.getMessage());
+			throw new URIException("Failed to set URI [" + uri + "]: " + e1.getMessage());
 		}
 		
 		HttpMethodParams httpParams = httpMethod.getParams();

File: src/org/parosproxy/paros/network/HttpMethodHelper.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2013/06/17 Issue 687: Change HTTP response header parser to be less strict
 // ZAP: 2013/07/10 Issue 721: Non POST and PUT requests receive a 504 when server expects a request body
 // ZAP: 2016/05/16 Throw exception if failed to set the request URI
+// ZAP: 2016/10/13 Include URI in exception's message
 package org.parosproxy.paros.network;
 
 import java.util.regex.Pattern;
@@ -178,7 +179,7 @@ public HttpMethod createRequestMethod(HttpRequestHeader header, HttpBody body) t
 		try {
 			httpMethod.setURI(uri);
 		} catch (Exception e1) {
-			throw new URIException("Failed to set URI: " + e1.getMessage());
+			throw new URIException("Failed to set URI [" + uri + "]: " + e1.getMessage());
 		}
 		
 		HttpMethodParams httpParams = httpMethod.getParams();

File: src/org/zaproxy/zap/spider/URLCanonicalizer.java
Patch:
@@ -127,7 +127,7 @@ public static String getCanonicalURL(String url, String baseURL) {
 			}
 
 			if (canonicalURI.getRawAuthority() == null) {
-				log.debug("Ignoring URI with no authority (host[\":\"port]): " + canonicalURI);
+				log.debug("Ignoring URI with no authority (host[\":\"port]): " + canonicalURI + " (on base " + baseURL + ")");
 				return null;
 			}
 

File: src/org/zaproxy/zap/spider/parser/SpiderTextParser.java
Patch:
@@ -38,11 +38,13 @@ public class SpiderTextParser extends SpiderParser {
 	public boolean parseResource(HttpMessage message, Source source, int depth) {
 		log.debug("Parsing a non-HTML text resource.");
 
+		String baseURL = message.getRequestHeader().getURI().toString();
+
 		// Use a simple pattern matcher to find urls
 		Matcher matcher = patternURL.matcher(message.getResponseBody().toString());
 		while (matcher.find()) {
 			String s = matcher.group(1);
-			processURL(message, depth, s, "");
+			processURL(message, depth, s, baseURL);
 		}
 
 		return false;

File: src/org/parosproxy/paros/db/TableAlert.java
Patch:
@@ -35,7 +35,7 @@ RecordAlert write(int scanId, int pluginId, String alert,
 			int risk, int confidence, String description, String uri,
 			String param, String attack, String otherInfo, String solution,
 			String reference, String evidence, int cweId, int wascId,
-			int historyId, int sourceHistoryId) throws DatabaseException;
+			int historyId, int sourceHistoryId, int sourceId) throws DatabaseException;
 
 	Vector<Integer> getAlertListBySession(long sessionId)
 			throws DatabaseException;

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1119,6 +1119,7 @@ private ApiResponseSet alertToSet(Alert alert) {
 		map.put("reference", alert.getReference());
 		map.put("cweid", String.valueOf(alert.getCweId()));
 		map.put("wascid", String.valueOf(alert.getWascId()));
+		map.put("sourceid", String.valueOf(alert.getSource().getId()));
 		map.put("solution", alert.getSolution());
 		if (alert.getHistoryRef() != null) {
 			map.put("messageId", String.valueOf(alert.getHistoryRef().getHistoryId()));

File: src/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -117,6 +117,7 @@ public int startScan(String name, Target target, User user, Object[] contextSpec
 					null, ruleConfigParam) {
 				@Override
 				public void alertFound(Alert alert) {
+					alert.setSource(Alert.Source.ACTIVE);
 					if (extAlert!= null) {
 						extAlert.alertFound(alert, null);
 					}

File: src/org/zaproxy/zap/extension/ascan/AttackModeScanner.java
Patch:
@@ -320,6 +320,7 @@ public void hostComplete(int id, String hostAndPort) {
 
 		@Override
 		public void alertFound(Alert alert) {
+			alert.setSource(Alert.Source.ACTIVE);
 			getExtensionAlert().alertFound(alert, alert.getHistoryRef());
 		}
 

File: src/org/zaproxy/zap/extension/history/AlertAddDialog.java
Patch:
@@ -218,6 +218,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 						        historyRef = new HistoryReference(Model.getSingleton().getSession(), historyType, httpMessage);
 						    }
 						    
+						    alert.setSource(Alert.Source.MANUAL);
 						    // Raise it
 							if (extAlert != null) {
 								extAlert.alertFound(alert, historyRef);

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -178,6 +178,8 @@ public void raiseAlert(int id, Alert alert) {
 		if (currentId != id) {
 			logger.error("Alert id != currentId! " + id + " " + currentId);
 		}
+
+		alert.setSource(Alert.Source.PASSIVE);
 	    // Raise the alert
 		extAlert.alertFound(alert, href);
 

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlParser.java
Patch:
@@ -40,7 +40,7 @@ public class SpiderHtmlParser extends SpiderParser {
 	/** The Constant urlPattern defining the pattern for a meta url. */
 	private static final Pattern urlPattern = Pattern.compile("url\\s*=\\s*([^;]+)", Pattern.CASE_INSENSITIVE);
 	private static final Pattern PLAIN_COMMENTS_URL_PATTERN = Pattern
-			.compile("(?:http(?:s?):)?//[^\\x00-\\x1f\"'\\s<>#]+", Pattern.CASE_INSENSITIVE);
+			.compile("(?:http(?:s?):)?//[^\\x00-\\x1f\"'\\s<>#()\\[\\]{}]+", Pattern.CASE_INSENSITIVE);
 
 	/** The params. */
 	private SpiderParam params;

File: src/org/parosproxy/paros/model/SessionListener.java
Patch:
@@ -20,6 +20,7 @@
  */
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
+// ZAP: 2016/09/26 JavaDoc tweaks
 
 package org.parosproxy.paros.model;
 
@@ -29,6 +30,7 @@ public interface SessionListener {
 
     /**
      * Callback method when a session was opened.
+     * @param file the {@code File} of the session
      * @param e = exception thrown during session opening.  null = no exception.
      */
     void sessionOpened(File file, Exception e);

File: src/org/parosproxy/paros/network/ByteVector.java
Patch:
@@ -20,6 +20,7 @@
  */
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
+// ZAP: 2016/09/26 JavaDoc tweaks
 package org.parosproxy.paros.network;
 
 /**
@@ -82,7 +83,7 @@ public void append(byte[] b) {
 
     /**
      * Return the current byte array containing the bytes.
-     * @return
+     * @return a copy of the byte array
      */
     public byte[] getBytes() {
         if (!changed) {

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -738,9 +738,9 @@ public boolean isUpdateTo(AddOn addOn) throws IllegalArgumentException {
 	
 	/**
 	 * @deprecated (2.4.0) Use {@link #calculateRunRequirements(Collection)} instead. Returns {@code false}.
+	 * @return {@code false} always.
 	 */
 	@Deprecated
-	@SuppressWarnings("javadoc")
 	public boolean canLoad() {
 		return false;
 	}

File: src/org/zaproxy/zap/eventBus/EventPublisher.java
Patch:
@@ -29,7 +29,7 @@ public interface EventPublisher {
 	/**
 	 * The name by which the publisher is know - typically the full class name of the publisher.
 	 * Only one publisher can register with a given name.
-	 * @return
+	 * @return the name of the publisher, never {@code null}.
 	 */
 	String getPublisherName();
 }

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -296,10 +296,10 @@ private void fillNodesInContext(SiteNode rootNode, List<SiteNode> nodesList) {
 	}
 
 	/**
-	 * Fills a given list with nodes in scope, searching recursively.
+	 * Tells whether or not the given node or any of its child nodes are in context.
 	 * 
-	 * @param rootNode the root node
-	 * @param nodesList the nodes list
+	 * @param node the node to start the check
+	 * @return {@code true} if at least one node is in context, {@code false} otherwise
 	 */
 	private boolean isContainsNodesInContext(SiteNode node) {
 		if (isInContext(node)) {

File: src/org/zaproxy/zap/scan/ScanStartOptions.java
Patch:
@@ -22,7 +22,7 @@
  * that should be used for fully specifying the configuration for a particular scan. The scan
  * options should be provided to the Scanner Thread before being started via the
  * {@link BaseScannerThread#setStartOptions(ScanStartOptions)} method.
- * <p/>
+ * <p>
  * Examples of configuration required might include: context and/or site node to scan, user to scan
  * as, policy etc.
  * 

File: src/org/zaproxy/zap/scan/ScannerThreadManager.java
Patch:
@@ -46,6 +46,7 @@ public interface ScannerThreadManager<ScannerThread extends BaseScannerThread<?>
 
 	/**
 	 * Gets the all threads.
+	 * @return all scanner threads
 	 */
 	public Collection<ScannerThread> getAllThreads();
 

File: src/org/parosproxy/paros/model/SessionListener.java
Patch:
@@ -20,6 +20,7 @@
  */
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
+// ZAP: 2016/09/26 JavaDoc tweaks
 
 package org.parosproxy.paros.model;
 
@@ -29,6 +30,7 @@ public interface SessionListener {
 
     /**
      * Callback method when a session was opened.
+     * @param file the {@code File} of the session
      * @param e = exception thrown during session opening.  null = no exception.
      */
     void sessionOpened(File file, Exception e);

File: src/org/parosproxy/paros/network/ByteVector.java
Patch:
@@ -20,6 +20,7 @@
  */
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
+// ZAP: 2016/09/26 JavaDoc tweaks
 package org.parosproxy.paros.network;
 
 /**
@@ -82,7 +83,7 @@ public void append(byte[] b) {
 
     /**
      * Return the current byte array containing the bytes.
-     * @return
+     * @return a copy of the byte array
      */
     public byte[] getBytes() {
         if (!changed) {

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -738,9 +738,9 @@ public boolean isUpdateTo(AddOn addOn) throws IllegalArgumentException {
 	
 	/**
 	 * @deprecated (2.4.0) Use {@link #calculateRunRequirements(Collection)} instead. Returns {@code false}.
+	 * @return {@code false} always.
 	 */
 	@Deprecated
-	@SuppressWarnings("javadoc")
 	public boolean canLoad() {
 		return false;
 	}

File: src/org/zaproxy/zap/eventBus/EventPublisher.java
Patch:
@@ -29,7 +29,7 @@ public interface EventPublisher {
 	/**
 	 * The name by which the publisher is know - typically the full class name of the publisher.
 	 * Only one publisher can register with a given name.
-	 * @return
+	 * @return the name of the publisher, never {@code null}.
 	 */
 	String getPublisherName();
 }

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -296,10 +296,10 @@ private void fillNodesInContext(SiteNode rootNode, List<SiteNode> nodesList) {
 	}
 
 	/**
-	 * Fills a given list with nodes in scope, searching recursively.
+	 * Tells whether or not the given node or any of its child nodes are in context.
 	 * 
-	 * @param rootNode the root node
-	 * @param nodesList the nodes list
+	 * @param node the node to start the check
+	 * @return {@code true} if at least one node is in context, {@code false} otherwise
 	 */
 	private boolean isContainsNodesInContext(SiteNode node) {
 		if (isInContext(node)) {

File: src/org/zaproxy/zap/scan/ScanStartOptions.java
Patch:
@@ -22,7 +22,7 @@
  * that should be used for fully specifying the configuration for a particular scan. The scan
  * options should be provided to the Scanner Thread before being started via the
  * {@link BaseScannerThread#setStartOptions(ScanStartOptions)} method.
- * <p/>
+ * <p>
  * Examples of configuration required might include: context and/or site node to scan, user to scan
  * as, policy etc.
  * 

File: src/org/zaproxy/zap/scan/ScannerThreadManager.java
Patch:
@@ -46,6 +46,7 @@ public interface ScannerThreadManager<ScannerThread extends BaseScannerThread<?>
 
 	/**
 	 * Gets the all threads.
+	 * @return all scanner threads
 	 */
 	public Collection<ScannerThread> getAllThreads();
 

File: src/org/apache/commons/httpclient/HttpMethodBase.java
Patch:
@@ -1848,7 +1848,6 @@ protected void processStatusLine(HttpState state, HttpConnection conn) {
      * Subclasses may want to override one or more of the above methods to to
      * customize the processing. (Or they may choose to override this method
      * if dramatically different processing is required.)
-     * </p>
      *
      * @param state the {@link HttpState state} information associated with this method
      * @param conn the {@link HttpConnection connection} used to execute

File: src/org/parosproxy/paros/core/proxy/OverrideMessageProxyListener.java
Patch:
@@ -49,7 +49,6 @@ public interface OverrideMessageProxyListener extends ArrangeableProxyListener {
      * <li>the message will really be forwarded to the server, even if the return value is {@code false}, as the following
      * {@code ProxyListener}s may drop it.</li>
      * </ul>
-     * </p>
      * 
      * @param msg the {@code HttpMessage} that may be overridden and not forwarded to the server
      * @return {@code true} if the message should be overridden and not forward to the server, {@code false} otherwise
@@ -70,7 +69,6 @@ public interface OverrideMessageProxyListener extends ArrangeableProxyListener {
      * <li>the message will really be forwarded to the client, even if the return value is {@code false}, as the following
      * {@code ProxyListener}s may drop it.</li>
      * </ul>
-     * </p>
      * 
      * @param msg the {@code HttpMessage} that may be forwarded to the client
      * @return {@code true} if the message should be forwarded to the client, {@code false} otherwise

File: src/org/parosproxy/paros/extension/CommandLineListener.java
Patch:
@@ -32,21 +32,22 @@
 public interface CommandLineListener {
     /**
      * execute the command line using the argument provided.
+     * @param args the command line arguments
      */
     void execute(CommandLineArgument[] args);
     
     /**
      * Handle the specified file (in whatever way is appropriate).
      * This will only be called for files specified on the command line without switches 
      * and which match one of the extensions returned by getHandledExtensions() 
-     * @param file
+     * @param file the file provided through the command line
      * @return true if the listener handled the file, false otherwise
      */
     boolean handleFile (File file);
     
     /**
      * Get the list of extensions this listener can handle
-     * @return
+     * @return a {@code List} with the handled extensions
      */
     List<String> getHandledExtensions();
 

File: src/org/parosproxy/paros/security/SslCertificateServiceImpl.java
Patch:
@@ -69,7 +69,6 @@
  * At least, Firefox v3.x does.
  *
  * @author MaWoKi
- * @see org.bouncycastle.x509.examples.AttrCertExample how to manage CAs and stuff
  * @see CachedSslCertifificateServiceImpl for a cached SslCertificateService
  */
 public final class SslCertificateServiceImpl implements SslCertificateService {
@@ -164,8 +163,8 @@ public KeyStore createCertForHost(String hostname) throws NoSuchAlgorithmExcepti
 	/**
 	 * Generates a 2048 bit RSA key pair using SHA1PRNG.
 	 *
-	 * @return
-	 * @throws NoSuchAlgorithmException
+	 * @return the key pair
+	 * @throws NoSuchAlgorithmException if no provider supports the used algorithms.
 	 */
 	private KeyPair createKeyPair() throws NoSuchAlgorithmException {
 		final KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -393,11 +393,11 @@ private void setupLocale(OptionsParam options) {
     /**
      * Determines the {@link Locale} of the current user's system.
      * <p>
-     * It will match the {@link Constant#getSystemsLocale()} with the available locales from ZAPs translation files.
+     * It will match the {@link Constant#getSystemsLocale()} with the available locales from ZAP's translation files.
      * <p>
-     * It may return {@code null}, if the users system locale is not in the list of available translations of ZAP.
+     * It may return {@code null}, if the user's system locale is not in the list of available translations of ZAP.
      *
-     * @return
+     * @return the {@code Locale} that best matches the user's locale, or {@code null} if none found
      */
     private static Locale determineUsersSystemLocale() {
         Locale userloc = null;

File: src/org/zaproxy/zap/ZapGetMethod.java
Patch:
@@ -33,7 +33,7 @@
 import org.zaproxy.zap.network.ZapHttpParser;
 
 /**
- * Do not ignore HTTP status code of 101 and keep {@link Socket} &
+ * Do not ignore HTTP status code of 101 and keep {@link Socket} &amp;
  * {@link InputStream} open, as 101 states a protocol switch.
  * 
  * Is essential for the WebSockets extension.
@@ -66,7 +66,7 @@ public ZapGetMethod() {
 	/**
 	 * Constructor.
 	 * 
-	 * @param uri
+	 * @param uri the request URI
 	 */
 	public ZapGetMethod(String uri) {
 		super(uri);

File: src/org/zaproxy/zap/ZapHttpConnection.java
Patch:
@@ -50,7 +50,7 @@ public Socket getSocket() {
 	}
 	
 	/**
-	 * Avoid closing in- & output stream as that would close the underlying
+	 * Avoid closing in- &amp; output stream as that would close the underlying
 	 * socket also. We have to keep it for our WebSocket connection.
 	 */
 	@Override

File: src/org/zaproxy/zap/control/ExtensionFactory.java
Patch:
@@ -286,6 +286,7 @@ private static ResourceBundle getPropertiesResourceBundle(String name, ClassLoad
     /**
      * If there are help files within the extension, they are loaded and merged
      * with existing help files if the core help was correctly loaded.
+     * @param ext the extension being initialised
      */
     private static void intitializeHelpSet(Extension ext) {
         HelpBroker hb = ExtensionHelp.getHelpBroker();
@@ -417,7 +418,6 @@ private static void unloadHelpSet(Extension ext) {
      * </pre>
      *
      * The URL of the first existent resource is returned.
-     * </p>
      *
      * @param cl the class loader that will be used to get the resource,
      * {@code null} the system class loader is used.

File: src/org/zaproxy/zap/extension/ExtensionPopupMenu.java
Patch:
@@ -114,7 +114,6 @@ public boolean isOrderChildren() {
 	 * {@code true};</li>
 	 * </ul>
 	 * The separators will be dynamically added and removed as needed when the pop up menu is shown.
-	 * </p>
 	 * <p>
 	 * <strong>Implementation Note:</strong> The method {@code isEnableForComponent(Component)} is called on all child
 	 * {@code ExtensionPopupMenuComponent}s, even if a previous child has returned {@code true}, as it allows to notify all the
@@ -151,7 +150,6 @@ public boolean isEnableForComponent(Component invoker) {
 	 * {@code true};</li>
 	 * </ul>
 	 * The separators will be dynamically added and removed as needed when the pop up menu is shown.
-	 * </p>
 	 * 
 	 * @param invokerWrapper the wrapped invoker
 	 * @return {@code true} if at least one of the child items is enable, {@code false} otherwise.

File: src/org/zaproxy/zap/extension/XmlReporterExtension.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * This interface should be implemented by extensions that wish to write data to 
  * XML report. getXML() method should return well-formed XML fragment (without the
- * <?xml> declaration) . This method is called by ReportLastScan class
+ * {@code <?xml>} declaration) . This method is called by ReportLastScan class
  * @author alla
  */
 public interface XmlReporterExtension {

File: src/org/zaproxy/zap/extension/alert/AlertParam.java
Patch:
@@ -83,6 +83,7 @@ protected void parse() {
 
     /**
      * Sets the maximum instances of an alert to include in a report.
+     * @param maximumInstances the maximum number of instances for each alert
      */
     public void setMaximumInstances(int maximumInstances) {
         if (this.maximumInstances != maximumInstances) {
@@ -94,6 +95,7 @@ public void setMaximumInstances(int maximumInstances) {
 
     /**
      * Returns the maximum instances of an alert to include in a report.
+     * @return the maximum number of instances for each alert
      */
     public int getMaximumInstances() {
         return maximumInstances;

File: src/org/zaproxy/zap/extension/alert/OptionsAlertPanel.java
Patch:
@@ -49,7 +49,6 @@
  * <ul>
  * <li>The number of maximum instances of each vulnerability included in a report.</li>
  * </ul>
- * </p>
  */
 public class OptionsAlertPanel extends AbstractParamPanel {
 

File: src/org/zaproxy/zap/extension/alert/PopupMenuShowAlerts.java
Patch:
@@ -37,7 +37,9 @@ public class PopupMenuShowAlerts extends PopupMenuHistoryReferenceContainer {
 	private static final long serialVersionUID = 1L;
 
     /**
-     * @param label
+     * Constructs a {@code PopupMenuShowAlerts} with the given label.
+     * 
+     * @param label the text shown in the pop up menu
      */
     public PopupMenuShowAlerts(String label) {
         super(label);

File: src/org/zaproxy/zap/extension/anticsrf/PopupMenuGenerateForm.java
Patch:
@@ -30,7 +30,9 @@ public class PopupMenuGenerateForm extends PopupMenuItemHistoryReferenceContaine
 	private static final long serialVersionUID = 1L;
 	
     /**
-     * @param label
+     * Constructs a {@code PopupMenuGenerateForm} with the given label.
+     * 
+     * @param label the text shown in the pop up menu
      */
     public PopupMenuGenerateForm(String label) {
     	super(label);

File: src/org/zaproxy/zap/extension/ascan/AttackModeScanner.java
Patch:
@@ -337,8 +337,8 @@ public boolean isRunning() {
 		}
 		
 		/**
-		 * Returns true if any of the scan threads are currently active
-		 * @return
+		 * Tells whether or not any of the scan threads are currently active.
+		 * @return {@code true} if there's at least one scan active, {@code false} otherwise
 		 */
 		public boolean isActive() {
 			synchronized (this.scanners) {

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -207,6 +207,7 @@ public void startScanAllInScope() {
     /**
      * Start the scanning process beginning to a specific node 
      * @param startNode the start node where the scanning should begin to work
+     * @return the ID of the scan
      */
     public int startScan(SiteNode startNode) {
     	return this.startScan(new Target(startNode, true));

File: src/org/zaproxy/zap/extension/ascan/OptionsScannerPanel.java
Patch:
@@ -65,8 +65,9 @@ public class OptionsScannerPanel extends AbstractParamPanel {
     private ExtensionActiveScan extension;
     
     /**
-     * General Constructor
-     * @param extensionn 
+     * Constructs an {@code OptionsScannerPanel} with the given active scan extension.
+     * 
+     * @param extension the active scan extension, to obtain scan policy names
      */
     public OptionsScannerPanel(ExtensionActiveScan extension) {
         super();

File: src/org/zaproxy/zap/extension/ascan/PolicyDialog.java
Patch:
@@ -67,8 +67,9 @@ private void initialize() {
     }
 
     /**
-     * 
-     * @param panel 
+     * Adds the given panel, positioned under the root node and in alphabetic order.
+     *
+     * @param panel the panel to add, must not be {@code null}.
      */
     public void addPolicyPanel(AbstractParamPanel panel) {
         this.additionalPanels.add(panel);

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -805,7 +805,7 @@ public <T> List<T> getImplementors (AddOn ao, String packageName, Class<T> class
                 }
             } catch (Throwable e) {
             	// Often not an error
-            	logger.debug(e.getMessage());
+            	logger.debug(e.getMessage(), e);
             }
         }
         return listClass;

File: src/org/zaproxy/zap/control/AddOnLoaderUtils.java
Patch:
@@ -112,7 +112,7 @@ private static <T> T loadAndInstantiateClassImpl(
             T instance = c.newInstance();
             return instance;
         } catch (Exception e) {
-            LOGGER.debug(e.getMessage());
+            LOGGER.debug(e.getMessage(), e);
         }
         return null;
     }

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -805,7 +805,7 @@ public <T> List<T> getImplementors (AddOn ao, String packageName, Class<T> class
                 }
             } catch (Throwable e) {
             	// Often not an error
-            	logger.debug(e.getMessage());
+            	logger.debug(e.getMessage(), e);
             }
         }
         return listClass;

File: src/org/zaproxy/zap/control/AddOnLoaderUtils.java
Patch:
@@ -112,7 +112,7 @@ private static <T> T loadAndInstantiateClassImpl(
             T instance = c.newInstance();
             return instance;
         } catch (Exception e) {
-            LOGGER.debug(e.getMessage());
+            LOGGER.debug(e.getMessage(), e);
         }
         return null;
     }

File: src/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java
Patch:
@@ -151,9 +151,7 @@ private void initialize() {
 	 * a parameter, nothing is shown. If the provided method type does not require configuration, a
 	 * simple message is shown stating that no configuration is needed.
 	 * 
-	 * @param newMethodType the new method type. If null, nothing is shown. If does not require
-	 *            config, a message is shown, on a panel returned by
-	 *            {@link ContextAuthenticationPanel#getNoMethodConfigurationPanel()}).
+	 * @param newMethodType the new method type. If null, nothing is shown.
 	 */
 	private void changeMethodConfigPanel(AuthenticationMethodType newMethodType) {
 		// If there's no new method, don't display anything

File: src/org/zaproxy/zap/extension/sessions/ContextSessionManagementPanel.java
Patch:
@@ -118,9 +118,7 @@ private void initialize() {
 	 * a parameter, nothing is shown. If the provided method type does not require configuration, a
 	 * simple message is shown stating that no configuration is needed.
 	 * 
-	 * @param newMethodType the new method type. If null, nothing is shown. If does not require
-	 *            config, a message is shown, on a panel returned by
-	 *            {@link #getNoMethodConfigurationPanel()}).
+	 * @param newMethodType the new method type. If null, nothing is shown.
 	 */
 	private void changeMethodConfigPanel(SessionManagementMethodType newMethodType) {
 		// If there's no new method, don't display anything

File: src/org/zaproxy/zap/session/AbstractSessionManagementMethodOptionsPanel.java
Patch:
@@ -25,8 +25,8 @@
 
 /**
  * An Options Panel that is used to configure all the settings corresponding to an
- * {@link SessionManagementMethod}.<br/>
- * <br/>
+ * {@link SessionManagementMethod}.
+ * <p>
  * This panel will be displayed to users in a separate dialog.
  */
 public abstract class AbstractSessionManagementMethodOptionsPanel extends JPanel {
@@ -44,6 +44,7 @@ public AbstractSessionManagementMethodOptionsPanel() {
 	 * (if {@link #saveMethod()} was called).
 	 * 
 	 * @param method the method to be loaded/shown in the panel.
+	 * @throws UnsupportedSessionManagementMethodException if the given method is not supported.
 	 */
 	public abstract void bindMethod(SessionManagementMethod method)
 			throws UnsupportedSessionManagementMethodException;

File: src/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java
Patch:
@@ -151,9 +151,7 @@ private void initialize() {
 	 * a parameter, nothing is shown. If the provided method type does not require configuration, a
 	 * simple message is shown stating that no configuration is needed.
 	 * 
-	 * @param newMethodType the new method type. If null, nothing is shown. If does not require
-	 *            config, a message is shown, on a panel returned by
-	 *            {@link ContextAuthenticationPanel#getNoMethodConfigurationPanel()}).
+	 * @param newMethodType the new method type. If null, nothing is shown.
 	 */
 	private void changeMethodConfigPanel(AuthenticationMethodType newMethodType) {
 		// If there's no new method, don't display anything

File: src/org/zaproxy/zap/extension/sessions/ContextSessionManagementPanel.java
Patch:
@@ -118,9 +118,7 @@ private void initialize() {
 	 * a parameter, nothing is shown. If the provided method type does not require configuration, a
 	 * simple message is shown stating that no configuration is needed.
 	 * 
-	 * @param newMethodType the new method type. If null, nothing is shown. If does not require
-	 *            config, a message is shown, on a panel returned by
-	 *            {@link #getNoMethodConfigurationPanel()}).
+	 * @param newMethodType the new method type. If null, nothing is shown.
 	 */
 	private void changeMethodConfigPanel(SessionManagementMethodType newMethodType) {
 		// If there's no new method, don't display anything

File: src/org/zaproxy/zap/session/AbstractSessionManagementMethodOptionsPanel.java
Patch:
@@ -25,8 +25,8 @@
 
 /**
  * An Options Panel that is used to configure all the settings corresponding to an
- * {@link SessionManagementMethod}.<br/>
- * <br/>
+ * {@link SessionManagementMethod}.
+ * <p>
  * This panel will be displayed to users in a separate dialog.
  */
 public abstract class AbstractSessionManagementMethodOptionsPanel extends JPanel {
@@ -44,6 +44,7 @@ public AbstractSessionManagementMethodOptionsPanel() {
 	 * (if {@link #saveMethod()} was called).
 	 * 
 	 * @param method the method to be loaded/shown in the panel.
+	 * @throws UnsupportedSessionManagementMethodException if the given method is not supported.
 	 */
 	public abstract void bindMethod(SessionManagementMethod method)
 			throws UnsupportedSessionManagementMethodException;

File: src/org/apache/commons/httpclient/HttpMethodDirector.java
Patch:
@@ -603,9 +603,7 @@ private boolean executeConnect()
     /**
      * Fake response
      * @param method
-     * @return
      */
-    
     private void fakeResponse(final HttpMethod method)
         throws IOException, HttpException {
         // What is to follow is an ugly hack.

File: src/org/parosproxy/paros/core/scanner/MultipartParam.java
Patch:
@@ -113,7 +113,6 @@ public String toString() {
       * <code>String<code>
       * array with elements: disposition, name, filename.
       *
-      * @return String[] of elements: disposition, name, filename.
       * @exception IOException if the line is malformatted.
       */
     private void extractDispositionInfo(String line) throws IOException {

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -357,7 +357,6 @@ public int getContentLength() {
      * Parse this request header.
      *
      * @param isSecure
-     * @return
      * @throws URIException
      * @throws NullPointerException
      */

File: src/org/zaproxy/zap/extension/users/ContextUserAuthManager.java
Patch:
@@ -76,7 +76,6 @@ public List<User> getUsers() {
 	 * Sets a new list of users for this context. An internal copy of the provided list is stored.
 	 * 
 	 * @param users the users
-	 * @return the list
 	 */
 	public void setUsers(List<User> users) {
 		this.users = new ArrayList<>(users);

File: src/org/zaproxy/zap/session/AbstractSessionManagementMethodOptionsPanel.java
Patch:
@@ -28,8 +28,6 @@
  * {@link SessionManagementMethod}.<br/>
  * <br/>
  * This panel will be displayed to users in a separate dialog.
- * 
- * @param <T> the session management method type
  */
 public abstract class AbstractSessionManagementMethodOptionsPanel extends JPanel {
 

File: src/org/zaproxy/zap/session/SessionManagementMethodType.java
Patch:
@@ -36,9 +36,6 @@
  * The implementors of new Session Management Methods should also implement a corresponding type.
  * The system automatically detects and loads {@link SessionManagementMethodType} classes and,
  * through them, the corresponding session management methods.
- * </p>
- * 
- * @param <T> the corresponding session management method
  */
 public abstract class SessionManagementMethodType {
 

File: src/org/zaproxy/zap/view/ContextExcludePanel.java
Patch:
@@ -71,8 +71,6 @@ public ContextExcludePanel(Context context) {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         regexesPanel = new MultipleRegexesOptionsPanel(View.getSingleton().getSessionDialog());

File: src/org/zaproxy/zap/view/ContextGeneralPanel.java
Patch:
@@ -40,8 +40,6 @@ public ContextGeneralPanel(String name, int index) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/ContextIncludePanel.java
Patch:
@@ -71,8 +71,6 @@ public ContextIncludePanel(Context context) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		regexesPanel = new MultipleRegexesOptionsPanel(View.getSingleton().getSessionDialog());

File: src/org/zaproxy/zap/view/ContextListPanel.java
Patch:
@@ -52,8 +52,6 @@ public ContextListPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/ContextTechnologyPanel.java
Patch:
@@ -51,8 +51,6 @@ public ContextTechnologyPanel(Context context) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		this.setLayout(new CardLayout());

File: src/org/apache/commons/httpclient/HttpMethodDirector.java
Patch:
@@ -603,9 +603,7 @@ private boolean executeConnect()
     /**
      * Fake response
      * @param method
-     * @return
      */
-    
     private void fakeResponse(final HttpMethod method)
         throws IOException, HttpException {
         // What is to follow is an ugly hack.

File: src/org/parosproxy/paros/core/scanner/MultipartParam.java
Patch:
@@ -113,7 +113,6 @@ public String toString() {
       * <code>String<code>
       * array with elements: disposition, name, filename.
       *
-      * @return String[] of elements: disposition, name, filename.
       * @exception IOException if the line is malformatted.
       */
     private void extractDispositionInfo(String line) throws IOException {

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -357,7 +357,6 @@ public int getContentLength() {
      * Parse this request header.
      *
      * @param isSecure
-     * @return
      * @throws URIException
      * @throws NullPointerException
      */

File: src/org/zaproxy/zap/extension/users/ContextUserAuthManager.java
Patch:
@@ -76,7 +76,6 @@ public List<User> getUsers() {
 	 * Sets a new list of users for this context. An internal copy of the provided list is stored.
 	 * 
 	 * @param users the users
-	 * @return the list
 	 */
 	public void setUsers(List<User> users) {
 		this.users = new ArrayList<>(users);

File: src/org/zaproxy/zap/session/AbstractSessionManagementMethodOptionsPanel.java
Patch:
@@ -28,8 +28,6 @@
  * {@link SessionManagementMethod}.<br/>
  * <br/>
  * This panel will be displayed to users in a separate dialog.
- * 
- * @param <T> the session management method type
  */
 public abstract class AbstractSessionManagementMethodOptionsPanel extends JPanel {
 

File: src/org/zaproxy/zap/session/SessionManagementMethodType.java
Patch:
@@ -36,9 +36,6 @@
  * The implementors of new Session Management Methods should also implement a corresponding type.
  * The system automatically detects and loads {@link SessionManagementMethodType} classes and,
  * through them, the corresponding session management methods.
- * </p>
- * 
- * @param <T> the corresponding session management method
  */
 public abstract class SessionManagementMethodType {
 

File: src/org/zaproxy/zap/view/ContextExcludePanel.java
Patch:
@@ -71,8 +71,6 @@ public ContextExcludePanel(Context context) {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         regexesPanel = new MultipleRegexesOptionsPanel(View.getSingleton().getSessionDialog());

File: src/org/zaproxy/zap/view/ContextGeneralPanel.java
Patch:
@@ -40,8 +40,6 @@ public ContextGeneralPanel(String name, int index) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/ContextIncludePanel.java
Patch:
@@ -71,8 +71,6 @@ public ContextIncludePanel(Context context) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		regexesPanel = new MultipleRegexesOptionsPanel(View.getSingleton().getSessionDialog());

File: src/org/zaproxy/zap/view/ContextListPanel.java
Patch:
@@ -52,8 +52,6 @@ public ContextListPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/ContextTechnologyPanel.java
Patch:
@@ -51,8 +51,6 @@ public ContextTechnologyPanel(Context context) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/utils/ApiUtils.java
Patch:
@@ -87,12 +87,13 @@ public static String getNonEmptyStringParam(JSONObject params, String paramName)
 	}
 
 	/**
-	 * Gets an optional enum param, returning <code>null</code> if the parameter was not found.
+	 * Gets an optional enum param, returning {@code null} if the parameter was not found.
 	 *
 	 * @param <E> the type of the enum that will be returned
 	 * @param params the params
 	 * @param paramName the param name
-	 * @return the enum, or <code>null</code>
+	 * @param enumType the type of the enum
+	 * @return the enum, or {@code null}
 	 * @throws ApiException if the param value does not match any of the possible enum values
 	 */
 	public static <E extends Enum<E>> E getOptionalEnumParam(JSONObject params, String paramName,

File: src/org/zaproxy/zap/view/MessagePanelsPositionController.java
Patch:
@@ -47,6 +47,7 @@ public MessagePanelsPositionController(
 
     /**
      * Restores the original parent of the panels and the panel.
+     * @return always {@code null}
      */
     public TabbedPanel restoreOriginalParentTabbedPanel() {
         return null;

File: src/org/zaproxy/zap/view/SiteMapTreeCellRenderer.java
Patch:
@@ -133,10 +133,10 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
 	}
 	
 	/**
-	 * Extract HttpMessage out of {@link SiteMap} node.
+	 * Extracts a HistoryReference out of {@link SiteMap} node.
 	 * 
-	 * @param value
-	 * @return
+	 * @param value the node
+	 * @return the {@code HistoryReference}, or {@code null} if it has none
 	 */
 	public HistoryReference getHistoryReferenceFromNode(Object value) {
 		SiteNode node = null;

File: src/org/zaproxy/zap/view/ZapToggleButton.java
Patch:
@@ -181,9 +181,8 @@ public void setEnabled(boolean b) {
 
     /**
      * Updates the current tool tip text based on the toggle button's state.
-     * <p>
-     * The tool tip that will be set based on button's state is:
      * <table>
+     * <caption>The tool tip that will be set based on button's state</caption>
      * <tr>
      * <td>State</td>
      * <td>Tool tip text set</td>
@@ -205,7 +204,6 @@ public void setEnabled(boolean b) {
      * <td>{@code defaultToolTipText}</td>
      * </tr>
      * </table>
-     * </p>
      * 
      * @see #defaultToolTipText
      * @see #selectedToolTipText

File: src/org/zaproxy/zap/view/popup/ExtensionPopupMenuMessageContainer.java
Patch:
@@ -76,7 +76,6 @@ public boolean isEnableForComponent(Component invoker) {
      * {@code true};</li>
      * </ul>
      * The separators will be dynamically added and removed as needed when the pop up menu is shown.
-     * </p>
      * <p>
      * <strong>Implementation Note:</strong> The method {@code isEnableForMessageContainer(MessageContainer)} is called on all
      * child {@code ExtensionPopupMenuComponent}s, even if a previous child has returned {@code true}, as it allows to notify

File: src/org/zaproxy/zap/view/popup/PopupMenuHttpMessageContainer.java
Patch:
@@ -227,7 +227,6 @@ protected final Invoker getInvoker() {
      * </ol>
      * <strong>Note:</strong> If the menu is declared as not safe ({@code isSafe()}) the button will be disabled if in
      * {@code Mode.Safe} or if in {@code Mode.Protected} and not all the selected messages are in scope.
-     * </p>
      * <h3>Notifying and processing child menus</h3>
      * <p>
      * When the method {@code isProcessExtensionPopupChildren()} returns true, the method
@@ -246,7 +245,6 @@ protected final Invoker getInvoker() {
      * {@code true};</li>
      * </ul>
      * The separators will be dynamically added and removed as needed when the pop up menu is shown.
-     * </p>
      * <p>
      * <strong>Note:</strong> Override of this method should be done with extra care as it might break all the expected
      * functionality.

File: src/org/zaproxy/zap/view/popup/PopupMenuItemSiteNodeContextMenuFactory.java
Patch:
@@ -43,8 +43,10 @@ public abstract class PopupMenuItemSiteNodeContextMenuFactory extends PopupMenuI
     private String parentMenu;
 
     /**
-     * This method initializes 
+     * Constructs a {@code PopupMenuItemSiteNodeContextMenuFactory} with the given parent pop up menu.
      * 
+     * @param parentMenu the name of the parent pop up menu
+     * @see #getParentMenuName()
      */
     public PopupMenuItemSiteNodeContextMenuFactory(String parentMenu) {
         super("ContextMenuFactory", true);

File: src/org/zaproxy/zap/view/popup/PopupMenuUtils.java
Patch:
@@ -183,7 +183,6 @@ public static void removeAllSeparators(JMenu menu) {
      *    Separator
      *    Menu Entry
      * </pre>
-     * </p>
      * 
      * @param popupMenu the pop up menu whose consecutive separators will be removed
      * @see javax.swing.JPopupMenu.Separator
@@ -233,7 +232,6 @@ public static void removeConsecutiveSeparators(JMenu menu) {
      *    Separator
      *    Menu Entry
      * </pre>
-     * </p>
      * 
      * @param popupMenu the pop up menu whose top separators will be removed
      * @see javax.swing.JPopupMenu.Separator
@@ -278,7 +276,6 @@ public static void removeTopSeparators(JMenu menu) {
      *    Separator
      *    Menu Entry
      * </pre>
-     * </p>
      * 
      * @param popupMenu the pop up menu whose bottom separators will be removed
      * @see javax.swing.JPopupMenu.Separator

File: src/org/zaproxy/zap/view/table/AbstractCustomColumnHistoryReferencesTableModel.java
Patch:
@@ -189,7 +189,6 @@ public Object getPrototypeValue(int columnIndex) {
      * </pre>
      * 
      * </blockquote>
-     * </p>
      * 
      * @param columnIndex the column index
      * @return the custom column index as if no default columns existed or -1 if not a custom column.

File: src/org/zaproxy/zap/utils/ApiUtils.java
Patch:
@@ -87,12 +87,13 @@ public static String getNonEmptyStringParam(JSONObject params, String paramName)
 	}
 
 	/**
-	 * Gets an optional enum param, returning <code>null</code> if the parameter was not found.
+	 * Gets an optional enum param, returning {@code null} if the parameter was not found.
 	 *
 	 * @param <E> the type of the enum that will be returned
 	 * @param params the params
 	 * @param paramName the param name
-	 * @return the enum, or <code>null</code>
+	 * @param enumType the type of the enum
+	 * @return the enum, or {@code null}
 	 * @throws ApiException if the param value does not match any of the possible enum values
 	 */
 	public static <E extends Enum<E>> E getOptionalEnumParam(JSONObject params, String paramName,

File: src/org/zaproxy/zap/view/MessagePanelsPositionController.java
Patch:
@@ -47,6 +47,7 @@ public MessagePanelsPositionController(
 
     /**
      * Restores the original parent of the panels and the panel.
+     * @return always {@code null}
      */
     public TabbedPanel restoreOriginalParentTabbedPanel() {
         return null;

File: src/org/zaproxy/zap/view/SiteMapTreeCellRenderer.java
Patch:
@@ -133,10 +133,10 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
 	}
 	
 	/**
-	 * Extract HttpMessage out of {@link SiteMap} node.
+	 * Extracts a HistoryReference out of {@link SiteMap} node.
 	 * 
-	 * @param value
-	 * @return
+	 * @param value the node
+	 * @return the {@code HistoryReference}, or {@code null} if it has none
 	 */
 	public HistoryReference getHistoryReferenceFromNode(Object value) {
 		SiteNode node = null;

File: src/org/zaproxy/zap/view/ZapToggleButton.java
Patch:
@@ -181,9 +181,8 @@ public void setEnabled(boolean b) {
 
     /**
      * Updates the current tool tip text based on the toggle button's state.
-     * <p>
-     * The tool tip that will be set based on button's state is:
      * <table>
+     * <caption>The tool tip that will be set based on button's state</caption>
      * <tr>
      * <td>State</td>
      * <td>Tool tip text set</td>
@@ -205,7 +204,6 @@ public void setEnabled(boolean b) {
      * <td>{@code defaultToolTipText}</td>
      * </tr>
      * </table>
-     * </p>
      * 
      * @see #defaultToolTipText
      * @see #selectedToolTipText

File: src/org/zaproxy/zap/view/popup/ExtensionPopupMenuMessageContainer.java
Patch:
@@ -76,7 +76,6 @@ public boolean isEnableForComponent(Component invoker) {
      * {@code true};</li>
      * </ul>
      * The separators will be dynamically added and removed as needed when the pop up menu is shown.
-     * </p>
      * <p>
      * <strong>Implementation Note:</strong> The method {@code isEnableForMessageContainer(MessageContainer)} is called on all
      * child {@code ExtensionPopupMenuComponent}s, even if a previous child has returned {@code true}, as it allows to notify

File: src/org/zaproxy/zap/view/popup/PopupMenuHttpMessageContainer.java
Patch:
@@ -227,7 +227,6 @@ protected final Invoker getInvoker() {
      * </ol>
      * <strong>Note:</strong> If the menu is declared as not safe ({@code isSafe()}) the button will be disabled if in
      * {@code Mode.Safe} or if in {@code Mode.Protected} and not all the selected messages are in scope.
-     * </p>
      * <h3>Notifying and processing child menus</h3>
      * <p>
      * When the method {@code isProcessExtensionPopupChildren()} returns true, the method
@@ -246,7 +245,6 @@ protected final Invoker getInvoker() {
      * {@code true};</li>
      * </ul>
      * The separators will be dynamically added and removed as needed when the pop up menu is shown.
-     * </p>
      * <p>
      * <strong>Note:</strong> Override of this method should be done with extra care as it might break all the expected
      * functionality.

File: src/org/zaproxy/zap/view/popup/PopupMenuItemSiteNodeContextMenuFactory.java
Patch:
@@ -43,8 +43,10 @@ public abstract class PopupMenuItemSiteNodeContextMenuFactory extends PopupMenuI
     private String parentMenu;
 
     /**
-     * This method initializes 
+     * Constructs a {@code PopupMenuItemSiteNodeContextMenuFactory} with the given parent pop up menu.
      * 
+     * @param parentMenu the name of the parent pop up menu
+     * @see #getParentMenuName()
      */
     public PopupMenuItemSiteNodeContextMenuFactory(String parentMenu) {
         super("ContextMenuFactory", true);

File: src/org/zaproxy/zap/view/popup/PopupMenuUtils.java
Patch:
@@ -183,7 +183,6 @@ public static void removeAllSeparators(JMenu menu) {
      *    Separator
      *    Menu Entry
      * </pre>
-     * </p>
      * 
      * @param popupMenu the pop up menu whose consecutive separators will be removed
      * @see javax.swing.JPopupMenu.Separator
@@ -233,7 +232,6 @@ public static void removeConsecutiveSeparators(JMenu menu) {
      *    Separator
      *    Menu Entry
      * </pre>
-     * </p>
      * 
      * @param popupMenu the pop up menu whose top separators will be removed
      * @see javax.swing.JPopupMenu.Separator
@@ -278,7 +276,6 @@ public static void removeTopSeparators(JMenu menu) {
      *    Separator
      *    Menu Entry
      * </pre>
-     * </p>
      * 
      * @param popupMenu the pop up menu whose bottom separators will be removed
      * @see javax.swing.JPopupMenu.Separator

File: src/org/zaproxy/zap/view/table/AbstractCustomColumnHistoryReferencesTableModel.java
Patch:
@@ -189,7 +189,6 @@ public Object getPrototypeValue(int columnIndex) {
      * </pre>
      * 
      * </blockquote>
-     * </p>
      * 
      * @param columnIndex the column index
      * @return the custom column index as if no default columns existed or -1 if not a custom column.

File: src/org/zaproxy/zap/view/MultipleRegexesOptionsPanel.java
Patch:
@@ -22,7 +22,6 @@
 import java.awt.Dialog;
 import java.text.MessageFormat;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
@@ -311,7 +310,7 @@ protected static class RegexesTableModel extends AbstractMultipleOptionsBaseTabl
         private List<String> elements;
 
         public RegexesTableModel() {
-            elements = Collections.emptyList();
+            elements = new ArrayList<>();
         }
 
         @Override

File: src/org/zaproxy/zap/view/widgets/ContextPanelUsersSelectComboBox.java
Patch:
@@ -47,6 +47,7 @@ public ContextPanelUsersSelectComboBox(int contextId) {
 
 	/**
 	 * Performs the same as {@link #getSelectedItem()}, but adds a convenience cast.
+	 * @return the selected user, or {@code null} if none 
 	 */
 	public User getSelectedUser() {
 		return (User) getSelectedItem();
@@ -55,6 +56,7 @@ public User getSelectedUser() {
 	/**
 	 * Allows adding 'custom' users besides the ones already loaded from the context. Can be used,
 	 * for example, to add a 'Any User' entry or 'Unauthenticated' entry.
+	 * @param customUsers the custom users, should not be {@code null}
 	 */
 	public void setCustomUsers(User[] customUsers) {
 		((UsersListModel) getModel()).setCustomUsers(customUsers);

File: src/org/zaproxy/zap/view/widgets/UsersMultiSelectList.java
Patch:
@@ -32,8 +32,8 @@
 /**
  * A {@link JList} widget that displays the list of {@link User Users} for a given context and
  * allows selection of multiple users.
- * <p/>
- * NOTE: Does not automatically refresh when the Users have changed. For this, make sure you
+ * <p>
+ * <strong>NOTE:</strong> Does not automatically refresh when the Users have changed. For this, make sure you
  * manually call {@link #reloadUsers(int)}.
  * 
  */
@@ -71,6 +71,7 @@ public UsersMultiSelectList(int contextId, int selectionModel) {
 
 	/**
 	 * Reloads/refreshes the list of {@link User users} associated to the context.
+	 * @param contextId the ID of the context
 	 */
 	public void reloadUsers(int contextId) {
 		List<User> users = usersExtension.getContextUserAuthManager(contextId).getUsers();

File: src/org/zaproxy/zap/view/widgets/ContextPanelUsersSelectComboBox.java
Patch:
@@ -47,6 +47,7 @@ public ContextPanelUsersSelectComboBox(int contextId) {
 
 	/**
 	 * Performs the same as {@link #getSelectedItem()}, but adds a convenience cast.
+	 * @return the selected user, or {@code null} if none 
 	 */
 	public User getSelectedUser() {
 		return (User) getSelectedItem();
@@ -55,6 +56,7 @@ public User getSelectedUser() {
 	/**
 	 * Allows adding 'custom' users besides the ones already loaded from the context. Can be used,
 	 * for example, to add a 'Any User' entry or 'Unauthenticated' entry.
+	 * @param customUsers the custom users, should not be {@code null}
 	 */
 	public void setCustomUsers(User[] customUsers) {
 		((UsersListModel) getModel()).setCustomUsers(customUsers);

File: src/org/zaproxy/zap/view/widgets/UsersMultiSelectList.java
Patch:
@@ -32,8 +32,8 @@
 /**
  * A {@link JList} widget that displays the list of {@link User Users} for a given context and
  * allows selection of multiple users.
- * <p/>
- * NOTE: Does not automatically refresh when the Users have changed. For this, make sure you
+ * <p>
+ * <strong>NOTE:</strong> Does not automatically refresh when the Users have changed. For this, make sure you
  * manually call {@link #reloadUsers(int)}.
  * 
  */
@@ -71,6 +71,7 @@ public UsersMultiSelectList(int contextId, int selectionModel) {
 
 	/**
 	 * Reloads/refreshes the list of {@link User users} associated to the context.
+	 * @param contextId the ID of the context
 	 */
 	public void reloadUsers(int contextId) {
 		List<User> users = usersExtension.getContextUserAuthManager(contextId).getUsers();

File: src/org/zaproxy/zap/view/AbstractMultipleOptionsBaseTableModel.java
Patch:
@@ -26,7 +26,7 @@
 /**
  *
  * @author yhawke (2014)
- * @param <E>
+ * @param <E> the type of the options
  */
 public abstract class AbstractMultipleOptionsBaseTableModel<E> extends AbstractTableModel {
     

File: src/org/zaproxy/zap/view/AbstractMultipleOptionsBaseTablePanel.java
Patch:
@@ -41,7 +41,7 @@
 /**
  *
  * @author yhawke (2014)
- * @param <E>
+ * @param <E> the type of the options
  */
 public abstract class AbstractMultipleOptionsBaseTablePanel<E> extends MultipleOptionsTablePanel {
     

File: src/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -52,7 +52,6 @@ public class ActiveScanController implements ScanController<ActiveScan> {
 	 * 
 	 * @see #activeScanMap
 	 * @see #scanIdCounter
-	 * @see #lastActiveScanAvailable
 	 */
 	private final Lock activeScansLock;
 
@@ -64,7 +63,7 @@ public class ActiveScanController implements ScanController<ActiveScan> {
 	 * </p>
 	 * 
 	 * @see #activeScansLock
-	 * @see #scanURL(String, boolean, boolean)
+	 * @see #startScan(String, Target, User, Object[])
 	 */
 	private int scanIdCounter;
 
@@ -78,7 +77,7 @@ public class ActiveScanController implements ScanController<ActiveScan> {
 	 * </p>
 	 * 
 	 * @see #activeScansLock
-	 * @see #scanURL(String, boolean, boolean)
+	 * @see #startScan(String, Target, User, Object[])
 	 * @see #scanIdCounter
 	 */
 	private Map<Integer, ActiveScan> activeScanMap;

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -84,7 +84,9 @@ public class ActiveScanPanel extends ScanPanel2<ActiveScan, ScanController<Activ
 	private JLabel numRequests;
 
     /**
-     * @param extension
+     * Constructs an {@code ActiveScanPanel} with the given extension.
+     * 
+     * @param extension the active scan extension, to access options and start scans
      */
     public ActiveScanPanel(ExtensionActiveScan extension) {
     	// 'fire' icon

File: src/org/zaproxy/zap/extension/authentication/AuthenticationAPI.java
Patch:
@@ -43,7 +43,8 @@
 import org.zaproxy.zap.utils.ApiUtils;
 
 /**
- * The API for manipulating the {@link Authentication} for {@link Context Contexts}.
+ * The API for manipulating the {@link org.zaproxy.zap.authentication.AuthenticationMethod AuthenticationMethod} for
+ * {@link Context Contexts}.
  */
 public class AuthenticationAPI extends ApiImplementor {
 

File: src/org/zaproxy/zap/extension/spider/SpiderScanController.java
Patch:
@@ -46,7 +46,6 @@ public class SpiderScanController implements ScanController<SpiderScan> {
 	 * 
 	 * @see #spiderScanMap
 	 * @see #scanIdCounter
-	 * @see #lastSpiderScanAvailable
 	 */
 	private final Lock spiderScansLock;
 
@@ -58,7 +57,7 @@ public class SpiderScanController implements ScanController<SpiderScan> {
 	 * </p>
 	 * 
 	 * @see #spiderScansLock
-	 * @see #scanURL(String, boolean, boolean)
+	 * @see #startScan(String, Target, User, Object[])
 	 */
 	private int scanIdCounter;
 
@@ -72,7 +71,7 @@ public class SpiderScanController implements ScanController<SpiderScan> {
 	 * </p>
 	 * 
 	 * @see #spiderScansLock
-	 * @see #scanURL(String, boolean, boolean)
+	 * @see #startScan(String, Target, User, Object[])
 	 * @see #scanIdCounter
 	 */
 	private Map<Integer, SpiderScan> spiderScanMap;

File: src/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -52,7 +52,6 @@ public class ActiveScanController implements ScanController<ActiveScan> {
 	 * 
 	 * @see #activeScanMap
 	 * @see #scanIdCounter
-	 * @see #lastActiveScanAvailable
 	 */
 	private final Lock activeScansLock;
 
@@ -64,7 +63,7 @@ public class ActiveScanController implements ScanController<ActiveScan> {
 	 * </p>
 	 * 
 	 * @see #activeScansLock
-	 * @see #scanURL(String, boolean, boolean)
+	 * @see #startScan(String, Target, User, Object[])
 	 */
 	private int scanIdCounter;
 
@@ -78,7 +77,7 @@ public class ActiveScanController implements ScanController<ActiveScan> {
 	 * </p>
 	 * 
 	 * @see #activeScansLock
-	 * @see #scanURL(String, boolean, boolean)
+	 * @see #startScan(String, Target, User, Object[])
 	 * @see #scanIdCounter
 	 */
 	private Map<Integer, ActiveScan> activeScanMap;

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -84,7 +84,9 @@ public class ActiveScanPanel extends ScanPanel2<ActiveScan, ScanController<Activ
 	private JLabel numRequests;
 
     /**
-     * @param extension
+     * Constructs an {@code ActiveScanPanel} with the given extension.
+     * 
+     * @param extension the active scan extension, to access options and start scans
      */
     public ActiveScanPanel(ExtensionActiveScan extension) {
     	// 'fire' icon

File: src/org/zaproxy/zap/extension/authentication/AuthenticationAPI.java
Patch:
@@ -43,7 +43,8 @@
 import org.zaproxy.zap.utils.ApiUtils;
 
 /**
- * The API for manipulating the {@link Authentication} for {@link Context Contexts}.
+ * The API for manipulating the {@link org.zaproxy.zap.authentication.AuthenticationMethod AuthenticationMethod} for
+ * {@link Context Contexts}.
  */
 public class AuthenticationAPI extends ApiImplementor {
 

File: src/org/zaproxy/zap/extension/spider/SpiderScanController.java
Patch:
@@ -46,7 +46,6 @@ public class SpiderScanController implements ScanController<SpiderScan> {
 	 * 
 	 * @see #spiderScanMap
 	 * @see #scanIdCounter
-	 * @see #lastSpiderScanAvailable
 	 */
 	private final Lock spiderScansLock;
 
@@ -58,7 +57,7 @@ public class SpiderScanController implements ScanController<SpiderScan> {
 	 * </p>
 	 * 
 	 * @see #spiderScansLock
-	 * @see #scanURL(String, boolean, boolean)
+	 * @see #startScan(String, Target, User, Object[])
 	 */
 	private int scanIdCounter;
 
@@ -72,7 +71,7 @@ public class SpiderScanController implements ScanController<SpiderScan> {
 	 * </p>
 	 * 
 	 * @see #spiderScansLock
-	 * @see #scanURL(String, boolean, boolean)
+	 * @see #startScan(String, Target, User, Object[])
 	 * @see #scanIdCounter
 	 */
 	private Map<Integer, SpiderScan> spiderScanMap;

File: src/org/zaproxy/zap/authentication/AuthenticationMethod.java
Patch:
@@ -34,8 +34,8 @@
 import org.zaproxy.zap.utils.Stats;
 
 /**
- * The AuthenticationMethod represents an authentication method that can be used to authenticate an
- * entity in a particular WebApplication.
+ * The {@code AuthenticationMethod} represents an authentication method that can be used to authenticate an
+ * entity in a particular web application.
  */
 public abstract class AuthenticationMethod {
 
@@ -118,6 +118,7 @@ public boolean validateCreationOfAuthenticationCredentials() {
 	 * @param sessionManagementMethod the set up session management method is provided so it can be
 	 *            used, if needed, to automatically extract session information from Http Messages.
 	 * @param credentials the credentials
+	 * @param user the user to authenticate
 	 * @return an authenticated web session
 	 * @throws UnsupportedAuthenticationCredentialsException the unsupported authentication
 	 *             credentials exception {@link WebSession}.

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -760,6 +760,8 @@ protected synchronized void notifyListenersReadURI(HttpMessage msg) {
 
 	/**
 	 * Notifies the listeners that the spider is complete.
+	 * 
+	 * @param successful {@code true} if the spider completed successfully (e.g. was not stopped), {@code false} otherwise
 	 */
 	protected synchronized void notifyListenersSpiderComplete(boolean successful) {
 		for (SpiderListener l : listeners) {

File: src/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -83,6 +83,7 @@ public class SpiderController implements SpiderParserListener {
 	 * Instantiates a new spider controller.
 	 * 
 	 * @param spider the spider
+	 * @param customParsers the custom spider parsers
 	 */
 	protected SpiderController(Spider spider, List<SpiderParser> customParsers) {
 		super();

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -311,9 +311,9 @@ private ExtensionHistory getExtensionHistory() {
 	 * @return the response http message
 	 * @throws HttpException the http exception
 	 * @throws IOException Signals that an I/O exception has occurred.
-	 * @throws DatabaseException
+	 * @throws DatabaseException if an error occurred while reading the HTTP message
 	 */
-	private HttpMessage fetchResource() throws HttpException, IOException, DatabaseException {
+	private HttpMessage fetchResource() throws IOException, DatabaseException {
 
 		// Build fetch the request message from the database
 		HttpMessage msg;

File: src/org/zaproxy/zap/spider/URLCanonicalizer.java
Patch:
@@ -38,9 +38,8 @@
 
 /**
  * The URLCanonicalizer is used for the process of converting an URL into a canonical (normalized) form. See
- * <a href="http://en.wikipedia.org/wiki/URL_normalization">URL Normalization</a> for a reference. <br/>
- * <br/>
- * 
+ * <a href="http://en.wikipedia.org/wiki/URL_normalization">URL Normalization</a> for a reference.
+ * <p>
  * Note: some parts of the code are adapted from: <a
  * href="http://stackoverflow.com/a/4057470/405418">stackoverflow</a>
  * 

File: src/org/zaproxy/zap/spider/filters/DefaultFetchFilter.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * The DefaultFetchFilter is an implementation of a FetchFilter that is default for spidering process. Its
- * filter rules are the following:<br/>
+ * filter rules are the following:
  * <ul>
  * <li>the resource protocol/scheme must be 'HTTP' or 'HTTPs'.</li>
  * <li>the resource must be found in the scope (domain) of the spidering process.</li>

File: src/org/zaproxy/zap/spider/filters/DefaultParseFilter.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * The DefaultParseFilter is an implementation of a {@link ParseFilter} that is default for
- * spidering process. Its filter rules are the following:<br/>
+ * spidering process. Its filter rules are the following:
  * <ul>
  * <li>the resource body should be under MAX_RESPONSE_BODY_SIZE bytes, otherwise it's probably a
  * binary resource.</li>

File: src/org/zaproxy/zap/spider/filters/MaxChildrenFetchFilter.java
Patch:
@@ -50,6 +50,8 @@ public void setMaxChildren(int maxChildren) {
 
 	/**
 	 * Sets the model
+	 * 
+	 * @param model the model used to check the number of children of a node
 	 */
 	public void setModel(Model model) {
 		this.model = model;

File: src/org/zaproxy/zap/spider/filters/MaxChildrenParseFilter.java
Patch:
@@ -49,6 +49,8 @@ public void setMaxChildren(int maxChildren) {
 
 	/**
 	 * Sets the model
+	 * 
+	 * @param model the model used to check the number of children of a node
 	 */
 	public void setModel(Model model) {
 		this.model = model;

File: src/org/zaproxy/zap/spider/parser/SpiderODataAtomParser.java
Patch:
@@ -26,9 +26,8 @@
 import org.parosproxy.paros.network.HttpMessage;
 
 /**
- * Used to parse OData content in Atom format<br/>
- * It's derived from the SpiderTextParser</br>
- * Even if the format of the file is XML  we will process it as a simple text file
+ * Used to parse OData content in Atom format.<p>
+ * It's derived from the SpiderTextParser. Even if the format of the file is XML we will process it as a simple text file
  */
 public class SpiderODataAtomParser extends SpiderParser {
 

File: src/org/zaproxy/zap/spider/parser/SpiderParserListener.java
Patch:
@@ -41,8 +41,8 @@ public interface SpiderParserListener {
 
 	/**
 	 * Event triggered when a new resource URI is found. The responseMessage contains all the
-	 * required information regarding the page which contains the URI.<br/>
-	 * <br/>
+	 * required information regarding the page which contains the URI.
+	 * <p>
 	 * Also provides a {@code shouldIgnore} boolean that states that this resourceURI should be
 	 * ignored in the fetching process, as it's probably a dead end (e.g. binary data, image, etc).
 	 * 

File: src/org/zaproxy/zap/utils/ApiUtils.java
Patch:
@@ -89,6 +89,7 @@ public static String getNonEmptyStringParam(JSONObject params, String paramName)
 	/**
 	 * Gets an optional enum param, returning <code>null</code> if the parameter was not found.
 	 *
+	 * @param <E> the type of the enum that will be returned
 	 * @param params the params
 	 * @param paramName the param name
 	 * @return the enum, or <code>null</code>

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -223,7 +223,9 @@ public int compare(ViewLocale o1, ViewLocale o2) {
 	}
 	
 	/**
-	 * @param locale
+	 * Gets the name of the language of and for the given locale.
+	 * 
+	 * @param locale the locale whose language name will be returned
 	 * @return the name of the language
 	 */
 	public static String getLocalDisplayName(String locale) {

File: src/org/zaproxy/zap/utils/Pair.java
Patch:
@@ -20,8 +20,8 @@
 /**
  * Simple class that represents a tuple.
  * 
- * @param <X>
- * @param <Y>
+ * @param <X> the type of the first element
+ * @param <Y> the type of the second element
  */
 public class Pair<X, Y> {
 	public final X first;

File: src/org/zaproxy/zap/utils/ThreadUtils.java
Patch:
@@ -10,9 +10,9 @@ public class ThreadUtils {
 	 * like {@link EventQueue#invokeAndWait(Runnable)}, but can be called from the main thread as
 	 * well.
 	 * 
-	 * @param runnable
-	 * @throws InterruptedException
-	 * @throws InvocationTargetException
+	 * @param runnable the {@code Runnable} to be run in the EDT
+	 * @throws InterruptedException if the current thread was interrupted while waiting for the EDT
+	 * @throws InvocationTargetException if an exception occurred while running the {@code Runnable}
 	 */
 	public static void invokeAndWait(Runnable runnable) throws InvocationTargetException,
 			InterruptedException {

File: src/org/zaproxy/zap/utils/TimeStampUtils.java
Patch:
@@ -66,7 +66,7 @@ public static String currentDefaultFormattedTimeStamp() {
     * {@code format} fails a default format is used. 
     * The DEFAULT is defined in Messages.properties.
     * @see SimpleDateFormat
-    * @param a {@code String} representing the date format
+    * @param format a {@code String} representing the date format
     * @return current formatted time stamp as {@code String}
     */
 	public static String currentFormattedTimeStamp(String format) {
@@ -88,7 +88,7 @@ public static String currentFormattedTimeStamp(String format) {
     * If application of the provided {@code format} fails a default format is used. 
     * The DEFAULT format is defined in Messages.properties.
     * @param message the message to be time stamped
-    * @param the format to be used in creating the time stamp
+    * @param format the format to be used in creating the time stamp
     * @return a time stamp in the designated format along with the original message
     * 
     * @see SimpleDateFormat

File: src/org/zaproxy/zap/utils/ViewState.java
Patch:
@@ -56,6 +56,7 @@ public class ViewState {
         /** 
          * encode a object to a base64 string
          * @param o is a implemented java.io.Serializable object
+         * @return the encoded object
          */
         public static String encode(Serializable o) {
                 ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
@@ -75,7 +76,9 @@ public static String encode(Serializable o) {
         
         /**
          * decode a base64 string to a object
+         * @param <T> the type of the object
          * @param base64 a encoded string by ViewState.encode method
+         * @return the decoded object
          */
         @SuppressWarnings("unchecked")
         public static <T> T decode(String base64) {

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -1094,6 +1094,7 @@ private ApiResponseSet alertToSet(Alert alert) {
 		map.put("risk", Alert.MSG_RISK[alert.getRisk()]);
 		map.put("confidence", Alert.MSG_CONFIDENCE[alert.getConfidence()]);
 		map.put("url", alert.getUri());
+		map.put("method", alert.getMethod());
 		map.put("other", alert.getOtherInfo());
 		map.put("param", alert.getParam());
 		map.put("attack", alert.getAttack());

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -782,6 +782,8 @@ public void handleAction(JSONObject params) throws ApiException {
 					if (log.isDebugEnabled())
 						log.debug("Loaded authentication script parameters:" + paramValues);
 
+				} catch (ApiException e) {
+					throw e;
 				} catch (Exception e) {
 					getScriptsExtension().handleScriptException(script, e);
 					log.error("Unable to load Script Based Authentication method. The script "

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -782,6 +782,8 @@ public void handleAction(JSONObject params) throws ApiException {
 					if (log.isDebugEnabled())
 						log.debug("Loaded authentication script parameters:" + paramValues);
 
+				} catch (ApiException e) {
+					throw e;
 				} catch (Exception e) {
 					getScriptsExtension().handleScriptException(script, e);
 					log.error("Unable to load Script Based Authentication method. The script "

File: src/org/zaproxy/zap/authentication/AuthenticationMethod.java
Patch:
@@ -34,8 +34,8 @@
 import org.zaproxy.zap.utils.Stats;
 
 /**
- * The AuthenticationMethod represents an authentication method that can be used to authenticate an
- * entity in a particular WebApplication.
+ * The {@code AuthenticationMethod} represents an authentication method that can be used to authenticate an
+ * entity in a particular web application.
  */
 public abstract class AuthenticationMethod {
 
@@ -118,6 +118,7 @@ public boolean validateCreationOfAuthenticationCredentials() {
 	 * @param sessionManagementMethod the set up session management method is provided so it can be
 	 *            used, if needed, to automatically extract session information from Http Messages.
 	 * @param credentials the credentials
+	 * @param user the user to authenticate
 	 * @return an authenticated web session
 	 * @throws UnsupportedAuthenticationCredentialsException the unsupported authentication
 	 *             credentials exception {@link WebSession}.

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -760,6 +760,8 @@ protected synchronized void notifyListenersReadURI(HttpMessage msg) {
 
 	/**
 	 * Notifies the listeners that the spider is complete.
+	 * 
+	 * @param successful {@code true} if the spider completed successfully (e.g. was not stopped), {@code false} otherwise
 	 */
 	protected synchronized void notifyListenersSpiderComplete(boolean successful) {
 		for (SpiderListener l : listeners) {

File: src/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -83,6 +83,7 @@ public class SpiderController implements SpiderParserListener {
 	 * Instantiates a new spider controller.
 	 * 
 	 * @param spider the spider
+	 * @param customParsers the custom spider parsers
 	 */
 	protected SpiderController(Spider spider, List<SpiderParser> customParsers) {
 		super();

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -311,9 +311,9 @@ private ExtensionHistory getExtensionHistory() {
 	 * @return the response http message
 	 * @throws HttpException the http exception
 	 * @throws IOException Signals that an I/O exception has occurred.
-	 * @throws DatabaseException
+	 * @throws DatabaseException if an error occurred while reading the HTTP message
 	 */
-	private HttpMessage fetchResource() throws HttpException, IOException, DatabaseException {
+	private HttpMessage fetchResource() throws IOException, DatabaseException {
 
 		// Build fetch the request message from the database
 		HttpMessage msg;

File: src/org/zaproxy/zap/spider/URLCanonicalizer.java
Patch:
@@ -38,9 +38,8 @@
 
 /**
  * The URLCanonicalizer is used for the process of converting an URL into a canonical (normalized) form. See
- * <a href="http://en.wikipedia.org/wiki/URL_normalization">URL Normalization</a> for a reference. <br/>
- * <br/>
- * 
+ * <a href="http://en.wikipedia.org/wiki/URL_normalization">URL Normalization</a> for a reference.
+ * <p>
  * Note: some parts of the code are adapted from: <a
  * href="http://stackoverflow.com/a/4057470/405418">stackoverflow</a>
  * 

File: src/org/zaproxy/zap/spider/filters/DefaultFetchFilter.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * The DefaultFetchFilter is an implementation of a FetchFilter that is default for spidering process. Its
- * filter rules are the following:<br/>
+ * filter rules are the following:
  * <ul>
  * <li>the resource protocol/scheme must be 'HTTP' or 'HTTPs'.</li>
  * <li>the resource must be found in the scope (domain) of the spidering process.</li>

File: src/org/zaproxy/zap/spider/filters/DefaultParseFilter.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * The DefaultParseFilter is an implementation of a {@link ParseFilter} that is default for
- * spidering process. Its filter rules are the following:<br/>
+ * spidering process. Its filter rules are the following:
  * <ul>
  * <li>the resource body should be under MAX_RESPONSE_BODY_SIZE bytes, otherwise it's probably a
  * binary resource.</li>

File: src/org/zaproxy/zap/spider/filters/MaxChildrenFetchFilter.java
Patch:
@@ -50,6 +50,8 @@ public void setMaxChildren(int maxChildren) {
 
 	/**
 	 * Sets the model
+	 * 
+	 * @param model the model used to check the number of children of a node
 	 */
 	public void setModel(Model model) {
 		this.model = model;

File: src/org/zaproxy/zap/spider/filters/MaxChildrenParseFilter.java
Patch:
@@ -49,6 +49,8 @@ public void setMaxChildren(int maxChildren) {
 
 	/**
 	 * Sets the model
+	 * 
+	 * @param model the model used to check the number of children of a node
 	 */
 	public void setModel(Model model) {
 		this.model = model;

File: src/org/zaproxy/zap/spider/parser/SpiderODataAtomParser.java
Patch:
@@ -26,9 +26,8 @@
 import org.parosproxy.paros.network.HttpMessage;
 
 /**
- * Used to parse OData content in Atom format<br/>
- * It's derived from the SpiderTextParser</br>
- * Even if the format of the file is XML  we will process it as a simple text file
+ * Used to parse OData content in Atom format.<p>
+ * It's derived from the SpiderTextParser. Even if the format of the file is XML we will process it as a simple text file
  */
 public class SpiderODataAtomParser extends SpiderParser {
 

File: src/org/zaproxy/zap/spider/parser/SpiderParserListener.java
Patch:
@@ -41,8 +41,8 @@ public interface SpiderParserListener {
 
 	/**
 	 * Event triggered when a new resource URI is found. The responseMessage contains all the
-	 * required information regarding the page which contains the URI.<br/>
-	 * <br/>
+	 * required information regarding the page which contains the URI.
+	 * <p>
 	 * Also provides a {@code shouldIgnore} boolean that states that this resourceURI should be
 	 * ignored in the fetching process, as it's probably a dead end (e.g. binary data, image, etc).
 	 * 

File: src/org/zaproxy/zap/utils/ApiUtils.java
Patch:
@@ -89,6 +89,7 @@ public static String getNonEmptyStringParam(JSONObject params, String paramName)
 	/**
 	 * Gets an optional enum param, returning <code>null</code> if the parameter was not found.
 	 *
+	 * @param <E> the type of the enum that will be returned
 	 * @param params the params
 	 * @param paramName the param name
 	 * @return the enum, or <code>null</code>

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -223,7 +223,9 @@ public int compare(ViewLocale o1, ViewLocale o2) {
 	}
 	
 	/**
-	 * @param locale
+	 * Gets the name of the language of and for the given locale.
+	 * 
+	 * @param locale the locale whose language name will be returned
 	 * @return the name of the language
 	 */
 	public static String getLocalDisplayName(String locale) {

File: src/org/zaproxy/zap/utils/Pair.java
Patch:
@@ -20,8 +20,8 @@
 /**
  * Simple class that represents a tuple.
  * 
- * @param <X>
- * @param <Y>
+ * @param <X> the type of the first element
+ * @param <Y> the type of the second element
  */
 public class Pair<X, Y> {
 	public final X first;

File: src/org/zaproxy/zap/utils/ThreadUtils.java
Patch:
@@ -10,9 +10,9 @@ public class ThreadUtils {
 	 * like {@link EventQueue#invokeAndWait(Runnable)}, but can be called from the main thread as
 	 * well.
 	 * 
-	 * @param runnable
-	 * @throws InterruptedException
-	 * @throws InvocationTargetException
+	 * @param runnable the {@code Runnable} to be run in the EDT
+	 * @throws InterruptedException if the current thread was interrupted while waiting for the EDT
+	 * @throws InvocationTargetException if an exception occurred while running the {@code Runnable}
 	 */
 	public static void invokeAndWait(Runnable runnable) throws InvocationTargetException,
 			InterruptedException {

File: src/org/zaproxy/zap/utils/TimeStampUtils.java
Patch:
@@ -66,7 +66,7 @@ public static String currentDefaultFormattedTimeStamp() {
     * {@code format} fails a default format is used. 
     * The DEFAULT is defined in Messages.properties.
     * @see SimpleDateFormat
-    * @param a {@code String} representing the date format
+    * @param format a {@code String} representing the date format
     * @return current formatted time stamp as {@code String}
     */
 	public static String currentFormattedTimeStamp(String format) {
@@ -88,7 +88,7 @@ public static String currentFormattedTimeStamp(String format) {
     * If application of the provided {@code format} fails a default format is used. 
     * The DEFAULT format is defined in Messages.properties.
     * @param message the message to be time stamped
-    * @param the format to be used in creating the time stamp
+    * @param format the format to be used in creating the time stamp
     * @return a time stamp in the designated format along with the original message
     * 
     * @see SimpleDateFormat

File: src/org/zaproxy/zap/utils/ViewState.java
Patch:
@@ -56,6 +56,7 @@ public class ViewState {
         /** 
          * encode a object to a base64 string
          * @param o is a implemented java.io.Serializable object
+         * @return the encoded object
          */
         public static String encode(Serializable o) {
                 ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
@@ -75,7 +76,9 @@ public static String encode(Serializable o) {
         
         /**
          * decode a base64 string to a object
+         * @param <T> the type of the object
          * @param base64 a encoded string by ViewState.encode method
+         * @return the decoded object
          */
         @SuppressWarnings("unchecked")
         public static <T> T decode(String base64) {

File: src/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -22,6 +22,7 @@
 // ZAP: 2013/11/28 Issue 923: Allow individual rule thresholds and strengths to be set via GUI
 // ZAP: 2016/01/19 Allow to obtain the ScanPolicy
 // ZAP: 2016/04/04 Use StatusUI in scanners' dialogues
+// ZAP: 2016/07/25 Use new AllCategoryTableModel's constructor
 package org.zaproxy.zap.extension.ascan;
 
 import java.awt.GridBagConstraints;
@@ -494,8 +495,7 @@ private JScrollPane getJScrollPane() {
      */
     private AllCategoryTableModel getAllCategoryTableModel() {
         if (allCategoryTableModel == null) {
-            allCategoryTableModel = new AllCategoryTableModel(this);
-            allCategoryTableModel.setPluginFactory(this.policy.getPluginFactory());
+            allCategoryTableModel = new AllCategoryTableModel(policy.getPluginFactory());
         }
         
         return allCategoryTableModel;

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -88,7 +88,7 @@ public class ActiveScanPanel extends ScanPanel2<ActiveScan, ScanController<Activ
      */
     public ActiveScanPanel(ExtensionActiveScan extension) {
     	// 'fire' icon
-        super("ascan", new ImageIcon(ActiveScanPanel.class.getResource("/resource/icon/16/093.png")), extension, null);
+        super("ascan", new ImageIcon(ActiveScanPanel.class.getResource("/resource/icon/16/093.png")), extension);
         this.extension = extension;
 		this.setDefaultAccelerator(KeyStroke.getKeyStroke(
 				KeyEvent.VK_A, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.ALT_MASK | Event.SHIFT_MASK, false));

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -168,8 +168,7 @@ public class SpiderPanel extends ScanPanel2<SpiderScan, ScanController<SpiderSca
 	 * @param spiderScanParam the spider scan parameters
 	 */
 	public SpiderPanel(ExtensionSpider extension, SpiderParam spiderScanParam) {
-		super("spider", new ImageIcon(SpiderPanel.class.getResource("/resource/icon/16/spider.png")), extension,
-				spiderScanParam);
+		super("spider", new ImageIcon(SpiderPanel.class.getResource("/resource/icon/16/spider.png")), extension);
 
 		tabbedPane = new JTabbedPane();
 

File: test/org/zaproxy/zap/extension/pscan/PluginPassiveScannerUnitTest.java
Patch:
@@ -57,8 +57,8 @@ public void shouldSetValidStatus() {
 	}
 
 	@Test
-	public void shouldBeDisabledByDefault() {
-		assertThat(scanner.isEnabled(), is(equalTo(false)));
+	public void shouldBeEnabledByDefault() {
+		assertThat(scanner.isEnabled(), is(equalTo(true)));
 	}
 
 	@Test

File: test/org/zaproxy/zap/extension/pscan/PluginPassiveScannerUnitTest.java
Patch:
@@ -57,8 +57,8 @@ public void shouldSetValidStatus() {
 	}
 
 	@Test
-	public void shouldBeDisabledByDefault() {
-		assertThat(scanner.isEnabled(), is(equalTo(false)));
+	public void shouldBeEnabledByDefault() {
+		assertThat(scanner.isEnabled(), is(equalTo(true)));
 	}
 
 	@Test

File: src/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -151,7 +151,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			
 			ScriptWrapper script = new ScriptWrapper(
 					params.getString(ACTION_PARAM_SCRIPT_NAME),
-					params.getString(ACTION_PARAM_SCRIPT_DESC),
+					getParam(params, ACTION_PARAM_SCRIPT_DESC, ""),
 					engine,
 					type,
 					true,

File: src/org/zaproxy/zap/extension/script/ScriptAPI.java
Patch:
@@ -151,7 +151,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			
 			ScriptWrapper script = new ScriptWrapper(
 					params.getString(ACTION_PARAM_SCRIPT_NAME),
-					params.getString(ACTION_PARAM_SCRIPT_DESC),
+					getParam(params, ACTION_PARAM_SCRIPT_DESC, ""),
 					engine,
 					type,
 					true,

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -573,7 +573,7 @@ public int getListenerOrder() {
 
 	@Override
 	public void onHttpRequestSend(HttpMessage msg, int initiator, HttpSender sender) {
-		if (initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR) {
+		if (initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR || initiator == HttpSender.AUTHENTICATION_INITIATOR) {
 			return;
 		}
 
@@ -608,7 +608,8 @@ public void onHttpRequestSend(HttpMessage msg, int initiator, HttpSender sender)
 	@Override
 	public void onHttpResponseReceive(HttpMessage msg, int initiator, HttpSender sender) {
 		if (initiator == HttpSender.ACTIVE_SCANNER_INITIATOR || initiator == HttpSender.SPIDER_INITIATOR
-				|| initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR || initiator == HttpSender.FUZZER_INITIATOR) {
+				|| initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR || initiator == HttpSender.FUZZER_INITIATOR
+				|| initiator == HttpSender.AUTHENTICATION_INITIATOR) {
 			// Not a session we care about
 			return;
 		}

File: src/org/zaproxy/zap/control/CoreFunctionality.java
Patch:
@@ -101,6 +101,7 @@ private static synchronized void createExtensions() {
 			extensions.add(new org.zaproxy.zap.extension.log4j.ExtensionLog4j());
 			extensions.add(new org.zaproxy.zap.extension.params.ExtensionParams());
 			extensions.add(new org.zaproxy.zap.extension.pscan.ExtensionPassiveScan());
+			extensions.add(new org.zaproxy.zap.extension.ruleconfig.ExtensionRuleConfig());
 			extensions.add(new org.zaproxy.zap.extension.script.ExtensionScript());
 			extensions.add(new org.zaproxy.zap.extension.search.ExtensionSearch());
 			extensions.add(new org.zaproxy.zap.extension.sessions.ExtensionSessionManagement());

File: src/org/zaproxy/zap/control/CoreFunctionality.java
Patch:
@@ -101,6 +101,7 @@ private static synchronized void createExtensions() {
 			extensions.add(new org.zaproxy.zap.extension.log4j.ExtensionLog4j());
 			extensions.add(new org.zaproxy.zap.extension.params.ExtensionParams());
 			extensions.add(new org.zaproxy.zap.extension.pscan.ExtensionPassiveScan());
+			extensions.add(new org.zaproxy.zap.extension.ruleconfig.ExtensionRuleConfig());
 			extensions.add(new org.zaproxy.zap.extension.script.ExtensionScript());
 			extensions.add(new org.zaproxy.zap.extension.search.ExtensionSearch());
 			extensions.add(new org.zaproxy.zap.extension.sessions.ExtensionSessionManagement());

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -39,6 +39,7 @@
 // ZAP: 2016/03/22 Allow to remove ContextDataFactory
 // ZAP: 2016/03/23 Issue 2331: Custom Context Panels not show in existing contexts after installation of add-on
 // ZAP: 2016/06/10 Do not clean up the database if the current session does not require it
+// ZAP: 2016/07/05 Issue 2218: Persisted Sessions don't save unconfigured Default Context
 
 package org.parosproxy.paros.model;
 
@@ -125,6 +126,8 @@ public Session getSession() {
 	 */
 	public Session newSession() {
 		session = new Session(this);
+		// Always start with one context
+		session.saveContext(session.getNewContext(Constant.messages.getString("context.default.name")));
 		return session;
 	}
 

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -60,6 +60,7 @@
 // ZAP: 2016/05/10 Use empty String for (URL) parameters with no value
 // ZAP: 2016/05/24 Call Database.discardSession(long) in Session.discard()
 // ZAP: 2016/06/10 Do not clean up the database if the current session does not require it
+// ZAP: 2016/07/05 Issue 2218: Persisted Sessions don't save unconfigured Default Context
 
 package org.parosproxy.paros.model;
 
@@ -159,8 +160,6 @@ protected Session(Model model) {
 		this.model = model;
 		
 		discardContexts();
-		// Always start with one context
-	    getNewContext(Constant.messages.getString("context.default.name"));
 	    
 	    Stats.clearAll();
 

File: src/org/zaproxy/zap/authentication/GenericAuthenticationCredentials.java
Patch:
@@ -133,7 +133,7 @@ public void handleAction(JSONObject params) throws ApiException {
 				int userId = ApiUtils.getIntParam(params, UsersAPI.PARAM_USER_ID);
 				// Make sure the type of authentication method is compatible
 				if (!methodType.isTypeForMethod(context.getAuthenticationMethod()))
-					throw new ApiException(ApiException.Type.BAD_TYPE,
+					throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER,
 							"User's credentials should match authentication method type of the context: "
 									+ context.getAuthenticationMethod().getType().getName());
 

File: src/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -406,7 +406,7 @@ public void handleAction(JSONObject params) throws ApiException {
 				int userId = ApiUtils.getIntParam(params, UsersAPI.PARAM_USER_ID);
 				// Make sure the type of authentication method is compatible
 				if (!isTypeForMethod(context.getAuthenticationMethod())) {
-					throw new ApiException(ApiException.Type.BAD_TYPE,
+					throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER,
 							"User's credentials should match authentication method type of the context: "
 									+ context.getAuthenticationMethod().getType().getName());
 				}

File: src/org/zaproxy/zap/authentication/UsernamePasswordAuthenticationCredentials.java
Patch:
@@ -203,7 +203,7 @@ public void handleAction(JSONObject params) throws ApiException {
 				int userId = ApiUtils.getIntParam(params, UsersAPI.PARAM_USER_ID);
 				// Make sure the type of authentication method is compatible
 				if (!methodType.isTypeForMethod(context.getAuthenticationMethod()))
-					throw new ApiException(ApiException.Type.BAD_TYPE,
+					throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER,
 							"User's credentials should match authentication method type of the context: "
 									+ context.getAuthenticationMethod().getType().getName());
 

File: src/org/zaproxy/zap/authentication/GenericAuthenticationCredentials.java
Patch:
@@ -133,7 +133,7 @@ public void handleAction(JSONObject params) throws ApiException {
 				int userId = ApiUtils.getIntParam(params, UsersAPI.PARAM_USER_ID);
 				// Make sure the type of authentication method is compatible
 				if (!methodType.isTypeForMethod(context.getAuthenticationMethod()))
-					throw new ApiException(ApiException.Type.BAD_TYPE,
+					throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER,
 							"User's credentials should match authentication method type of the context: "
 									+ context.getAuthenticationMethod().getType().getName());
 

File: src/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -406,7 +406,7 @@ public void handleAction(JSONObject params) throws ApiException {
 				int userId = ApiUtils.getIntParam(params, UsersAPI.PARAM_USER_ID);
 				// Make sure the type of authentication method is compatible
 				if (!isTypeForMethod(context.getAuthenticationMethod())) {
-					throw new ApiException(ApiException.Type.BAD_TYPE,
+					throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER,
 							"User's credentials should match authentication method type of the context: "
 									+ context.getAuthenticationMethod().getType().getName());
 				}

File: src/org/zaproxy/zap/authentication/UsernamePasswordAuthenticationCredentials.java
Patch:
@@ -203,7 +203,7 @@ public void handleAction(JSONObject params) throws ApiException {
 				int userId = ApiUtils.getIntParam(params, UsersAPI.PARAM_USER_ID);
 				// Make sure the type of authentication method is compatible
 				if (!methodType.isTypeForMethod(context.getAuthenticationMethod()))
-					throw new ApiException(ApiException.Type.BAD_TYPE,
+					throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER,
 							"User's credentials should match authentication method type of the context: "
 									+ context.getAuthenticationMethod().getType().getName());
 

File: src/org/zaproxy/zap/extension/ascan/ScriptsActiveScanner.java
Patch:
@@ -91,7 +91,7 @@ public String getReference() {
     @Override
     public void init() {
         if (shouldSkipScan()) {
-            getParent().pluginSkipped(this);
+            getParent().pluginSkipped(this, Constant.messages.getString("ascan.scripts.skip.reason"));
         }
     }
 

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -39,6 +39,7 @@
 // ZAP: 2016/03/22 Allow to remove ContextDataFactory
 // ZAP: 2016/03/23 Issue 2331: Custom Context Panels not show in existing contexts after installation of add-on
 // ZAP: 2016/06/10 Do not clean up the database if the current session does not require it
+// ZAP: 2016/07/05 Issue 2218: Persisted Sessions don't save unconfigured Default Context
 
 package org.parosproxy.paros.model;
 
@@ -125,6 +126,8 @@ public Session getSession() {
 	 */
 	public Session newSession() {
 		session = new Session(this);
+		// Always start with one context
+		session.saveContext(session.getNewContext(Constant.messages.getString("context.default.name")));
 		return session;
 	}
 

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -60,6 +60,7 @@
 // ZAP: 2016/05/10 Use empty String for (URL) parameters with no value
 // ZAP: 2016/05/24 Call Database.discardSession(long) in Session.discard()
 // ZAP: 2016/06/10 Do not clean up the database if the current session does not require it
+// ZAP: 2016/07/05 Issue 2218: Persisted Sessions don't save unconfigured Default Context
 
 package org.parosproxy.paros.model;
 
@@ -159,8 +160,6 @@ protected Session(Model model) {
 		this.model = model;
 		
 		discardContexts();
-		// Always start with one context
-	    getNewContext(Constant.messages.getString("context.default.name"));
 	    
 	    Stats.clearAll();
 

File: src/org/zaproxy/zap/extension/brk/ExtensionBreak.java
Patch:
@@ -117,7 +117,6 @@ public BreakPanel getBreakPanel() {
 		return breakPanel;
 	}
 	
-	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);
@@ -131,8 +130,6 @@ public void hook(ExtensionHook extensionHook) {
 	        ExtensionHookView pv = extensionHook.getHookView();
 	        pv.addWorkPanel(getBreakPanel());
 	        pv.addOptionPanel(getOptionsPanel());
-	        
-            extensionHook.getHookMenu().addAnalyseMenuItem(extensionHook.getHookMenu().getMenuSeparator());
 
 	        extensionHook.getHookView().addStatusPanel(getBreakpointsPanel());
 

File: src/org/zaproxy/zap/extension/brk/PopupMenuRemove.java
Patch:
@@ -58,8 +58,10 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	}
 	
     @Override
+    @SuppressWarnings("deprecation")
     public boolean isEnableForComponent(Component invoker) {
         if (invoker.getName() != null && invoker.getName().equals(BreakpointsPanel.PANEL_NAME)) {
+            // TODO remove once no longer needed (i.e. when all add-ons show modal dialogues).
             if (extension.canRemoveBreakpoint()) {
                 this.setEnabled(true);
             } else {

File: src/org/apache/commons/httpclient/HttpMethodBase.java
Patch:
@@ -64,6 +64,7 @@
  *  - Always add the "?" character to the request URI (Issue 1180) in the method #generateRequestLine(HttpConnection, String, 
  *  String, String, String) to preserve the intended request URI.
  *  - Change the way cookie headers are handled when using forced user mode, put all the headers in a single line see ISSUE 1874
+ *  - Do not add a User-Agent header by default.
  * 
  */
 /**
@@ -1550,7 +1551,6 @@ protected void addRequestHeaders(HttpState state, HttpConnection conn)
         LOG.trace("enter HttpMethodBase.addRequestHeaders(HttpState, "
             + "HttpConnection)");
 
-        addUserAgentRequestHeader(state, conn);
         addHostRequestHeader(state, conn);
         addCookieRequestHeader(state, conn);
         addProxyConnectionHeader(state, conn);

File: src/org/apache/commons/httpclient/HttpMethodBase.java
Patch:
@@ -64,6 +64,7 @@
  *  - Always add the "?" character to the request URI (Issue 1180) in the method #generateRequestLine(HttpConnection, String, 
  *  String, String, String) to preserve the intended request URI.
  *  - Change the way cookie headers are handled when using forced user mode, put all the headers in a single line see ISSUE 1874
+ *  - Do not add a User-Agent header by default.
  * 
  */
 /**
@@ -1550,7 +1551,6 @@ protected void addRequestHeaders(HttpState state, HttpConnection conn)
         LOG.trace("enter HttpMethodBase.addRequestHeaders(HttpState, "
             + "HttpConnection)");
 
-        addUserAgentRequestHeader(state, conn);
         addHostRequestHeader(state, conn);
         addCookieRequestHeader(state, conn);
         addProxyConnectionHeader(state, conn);

File: src/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -164,7 +164,7 @@ public void run() {
 	            	rcLastSnapshot = currentSnapshot;
 	            }
 	        };
-	        schedHandle = scheduler.scheduleAtFixedRate(requestCounter, period, period, TimeUnit.SECONDS);
+	        schedHandle = scheduler.scheduleWithFixedDelay(requestCounter, period, period, TimeUnit.SECONDS);
 		}
 	}
 

File: src/org/zaproxy/zap/extension/ascan/ScanProgressDialog.java
Patch:
@@ -427,6 +427,7 @@ private void showProgress() {
 			            }
 					} catch (Exception e) {
 						log.error(e.getMessage(), e);
+						snapshot = null;
 					}
 	            }
             }

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLPanel.java
Patch:
@@ -311,9 +311,7 @@ public boolean accept(File f) {
 				logger.error("Error importing foreign Root CA!", e);
 				// Constant.messages.getString("dynssl.label.rootca")
 				JOptionPane.showMessageDialog(this,
-						Constant.messages.getString("dynssl.message1.filecouldnloaded")
-						+ "\n"
-						+ Constant.messages.getString("dynssl.message1.seelogfiles"),
+						Constant.messages.getString("dynssl.message1.filecouldnloaded"),
 						Constant.messages.getString("dynssl.message1.title"),
 						JOptionPane.ERROR_MESSAGE);
 			}

File: src/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -164,7 +164,7 @@ public void run() {
 	            	rcLastSnapshot = currentSnapshot;
 	            }
 	        };
-	        schedHandle = scheduler.scheduleAtFixedRate(requestCounter, period, period, TimeUnit.SECONDS);
+	        schedHandle = scheduler.scheduleWithFixedDelay(requestCounter, period, period, TimeUnit.SECONDS);
 		}
 	}
 

File: src/org/zaproxy/zap/extension/ascan/ScanProgressDialog.java
Patch:
@@ -427,6 +427,7 @@ private void showProgress() {
 			            }
 					} catch (Exception e) {
 						log.error(e.getMessage(), e);
+						snapshot = null;
 					}
 	            }
             }

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLPanel.java
Patch:
@@ -311,9 +311,7 @@ public boolean accept(File f) {
 				logger.error("Error importing foreign Root CA!", e);
 				// Constant.messages.getString("dynssl.label.rootca")
 				JOptionPane.showMessageDialog(this,
-						Constant.messages.getString("dynssl.message1.filecouldnloaded")
-						+ "\n"
-						+ Constant.messages.getString("dynssl.message1.seelogfiles"),
+						Constant.messages.getString("dynssl.message1.filecouldnloaded"),
 						Constant.messages.getString("dynssl.message1.title"),
 						JOptionPane.ERROR_MESSAGE);
 			}

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -59,6 +59,7 @@
 // ZAP: 2015/11/04 Issue 1920: Report the host:port ZAP is listening on in daemon mode, or exit if it cant
 // ZAP: 2016/03/23 Issue 2331: Custom Context Panels not show in existing contexts after installation of add-on
 // ZAP: 2016/04/22 Issue 2428: Memory leak on session creation/loading
+// ZAP: 2016/05/30 Issue 2494: ZAP Proxy is not showing the HTTP CONNECT Request in history tab
 
 package org.parosproxy.paros.control;
 
@@ -119,6 +120,7 @@ private boolean init(ControlOverrides overrides) {
 	    Proxy proxy = getProxy(overrides);
 	    getExtensionLoader().hookProxyListener(proxy);
 	    getExtensionLoader().hookPersistentConnectionListener(proxy);
+	    getExtensionLoader().hookConnectRequestProxyListeners(proxy);
 		
 		if (view != null) {
 		    // ZAP: Add site map listeners

File: src/org/parosproxy/paros/core/proxy/OverrideMessageProxyListener.java
Patch:
@@ -31,6 +31,7 @@
  * 
  * @since 2.3.0
  * @see ProxyListener
+ * @see ConnectRequestProxyListener
  */
 public interface OverrideMessageProxyListener extends ArrangeableProxyListener {
 

File: src/org/parosproxy/paros/core/proxy/ProxyListener.java
Patch:
@@ -31,6 +31,7 @@
  * to the server and when a new response is ready to be forwarded to the client.
  * 
  * @see OverrideMessageProxyListener
+ * @see ConnectRequestProxyListener
  */
 // ZAP: Changed the JavaDoc.
 public interface ProxyListener extends ArrangeableProxyListener {

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -56,6 +56,7 @@
 // ZAP: 2015/04/09 Allow to specify if circular redirects are allowed.
 // ZAP: 2015/06/12 Issue 1459: Add an HTTP sender listener script
 // ZAP: 2016/05/24 Issue 2463: Websocket not proxied when outgoing proxy is set
+// ZAP: 2016/05/27 Issue 2484: Circular Redirects
 
 package org.parosproxy.paros.network;
 
@@ -174,6 +175,7 @@ public HttpSender(ConnectionParam connectionParam, boolean useGlobalState, int i
 
 		client = createHttpClient();
 		clientViaProxy = createHttpClientViaProxy();
+		setAllowCircularRedirects(true);
 		
 		// Set how cookie headers are sent no matter of the "allowState", in case a state is forced by
 		// other extensions (e.g. Authentication)
@@ -800,7 +802,7 @@ public void setMaxRedirects(int maxRedirects) {
      * Circular redirects happen when a request redirects to itself, or when a same request was already accessed in a chain of
      * redirects.
      * <p>
-     * The default is to <strong>not</strong> allow circular redirects.
+     * Since 2.5.0, the default is to allow circular redirects.
      *
      * @param allow {@code true} if circular redirects should be allowed, {@code false} otherwise
      * @since 2.4.0

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -56,6 +56,7 @@
 // ZAP: 2015/04/09 Allow to specify if circular redirects are allowed.
 // ZAP: 2015/06/12 Issue 1459: Add an HTTP sender listener script
 // ZAP: 2016/05/24 Issue 2463: Websocket not proxied when outgoing proxy is set
+// ZAP: 2016/05/27 Issue 2484: Circular Redirects
 
 package org.parosproxy.paros.network;
 
@@ -174,6 +175,7 @@ public HttpSender(ConnectionParam connectionParam, boolean useGlobalState, int i
 
 		client = createHttpClient();
 		clientViaProxy = createHttpClientViaProxy();
+		setAllowCircularRedirects(true);
 		
 		// Set how cookie headers are sent no matter of the "allowState", in case a state is forced by
 		// other extensions (e.g. Authentication)
@@ -800,7 +802,7 @@ public void setMaxRedirects(int maxRedirects) {
      * Circular redirects happen when a request redirects to itself, or when a same request was already accessed in a chain of
      * redirects.
      * <p>
-     * The default is to <strong>not</strong> allow circular redirects.
+     * Since 2.5.0, the default is to allow circular redirects.
      *
      * @param allow {@code true} if circular redirects should be allowed, {@code false} otherwise
      * @since 2.4.0

File: src/org/parosproxy/paros/db/TableHistory.java
Patch:
@@ -121,12 +121,14 @@ void delete(List<Integer> ids, int batchSize)
 	/**
 	 * Deletes all records whose history type was marked as temporary (by calling {@code setHistoryTypeTemporary(int)}).
 	 * <p>
-	 * By default the only temporary history type is {@code HistoryReference#TYPE_TEMPORARY}.
+	 * By default the only temporary history types are {@code HistoryReference#TYPE_TEMPORARY} and
+	 * {@code HistoryReference#TYPE_SCANNER_TEMPORARY}.
 	 *
 	 * @throws DatabaseException if an error occurred while deleting the temporary history records
 	 * @see #setHistoryTypeAsTemporary(int)
 	 * @see #unsetHistoryTypeAsTemporary(int)
 	 * @see HistoryReference#TYPE_TEMPORARY
+	 * @see HistoryReference#TYPE_SCANNER_TEMPORARY
 	 */
 	void deleteTemporary() throws DatabaseException;
 

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -58,6 +58,7 @@
 // ZAP: 2016/05/02 Issue 2451: Only a single Data Driven Node can be saved in a context
 // ZAP: 2016/05/04 Changes to address issues related to ParameterParser
 // ZAP: 2016/05/10 Use empty String for (URL) parameters with no value
+// ZAP: 2016/05/24 Call Database.discardSession(long) in Session.discard()
 
 package org.parosproxy.paros.model;
 
@@ -176,7 +177,7 @@ private void discardContexts() {
 
 	protected void discard() {
 	    try {
-	        model.getDb().getTableHistory().deleteHistorySession(getSessionId());
+	        model.getDb().discardSession(getSessionId());
         } catch (DatabaseException e) {
         	// ZAP: Log exceptions
         	log.warn(e.getMessage(), e);

File: src/org/parosproxy/paros/network/HttpMethodHelper.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/06/17 Issue 687: Change HTTP response header parser to be less strict
 // ZAP: 2013/07/10 Issue 721: Non POST and PUT requests receive a 504 when server expects a request body
+// ZAP: 2016/05/16 Throw exception if failed to set the request URI
 package org.parosproxy.paros.network;
 
 import java.util.regex.Pattern;
@@ -177,7 +178,7 @@ public HttpMethod createRequestMethod(HttpRequestHeader header, HttpBody body) t
 		try {
 			httpMethod.setURI(uri);
 		} catch (Exception e1) {
-			logger.error(e1.getMessage(), e1);
+			throw new URIException("Failed to set URI: " + e1.getMessage());
 		}
 		
 		HttpMethodParams httpParams = httpMethod.getParams();

File: src/ch/csnc/extension/ui/AliasTableModel.java
Patch:
@@ -65,7 +65,7 @@ public void removeKeystore() {
     
     
     public String getAlias(int row) {
-        return (String) _aliases.get(row).getAlias();
+        return _aliases.get(row).getAlias();
     }
     
     public int getColumnCount() {

File: src/org/apache/commons/httpclient/HttpMethodBase.java
Patch:
@@ -1297,6 +1297,7 @@ public boolean validate() {
      * 
      * @return cookie spec
      */
+    @SuppressWarnings("deprecation")
     private CookieSpec getCookieSpec(final HttpState state) {
     	if (this.cookiespec == null) {
     		int i = state.getCookiePolicy();

File: src/org/parosproxy/paros/db/paros/ParosTableParam.java
Patch:
@@ -92,7 +92,6 @@ public synchronized RecordParam read(long urlId) throws DatabaseException {
 			
 			try (ResultSet rs = psRead.executeQuery()) {
 				RecordParam result = build(rs);
-				rs.close();
 				return result;
 			}
 		} catch (SQLException e) {

File: src/org/parosproxy/paros/db/paros/ParosTableStructure.java
Patch:
@@ -100,7 +100,6 @@ public synchronized RecordStructure read(long sessionId, long urlId) throws Data
 			
 			try (ResultSet rs = psRead.executeQuery()) {
 				RecordStructure result = build(rs);
-				rs.close();
 				return result;
 			}
 		} catch (SQLException e) {

File: src/org/parosproxy/paros/extension/edit/PopupFindMenu.java
Patch:
@@ -23,6 +23,8 @@
 // ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 // ZAP: 2012/10/23 Changed to prevent a NullPointerException when there's no
 // parent JFrame (changed to use SwingUtilities.getAncestorOfClass(...)).
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
+
 package org.parosproxy.paros.extension.edit;
 
 import java.awt.Component;
@@ -35,6 +37,7 @@
 import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
 public class PopupFindMenu extends ExtensionPopupMenuItem {
+    private static final long serialVersionUID = 1L;
     private JTextComponent lastInvoker = null;
     private JFrame parentFrame = null;
     

File: src/org/parosproxy/paros/extension/filter/AllFilterPanel.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/11/06 Added warning that filters will be removed
 // ZAP: 2015/02/16 Issue 1528: Support user defined font size
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.filter;
 
@@ -46,6 +47,7 @@
 
 public class AllFilterPanel extends AbstractParamPanel {
 
+	private static final long serialVersionUID = 1L;
 	private JTable tableFilter = null;
 	private JScrollPane jScrollPane = null;
     /**

File: src/org/parosproxy/paros/extension/filter/FilterChangeUserAgent.java
Patch:
@@ -22,6 +22,7 @@
 // ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2016/0405 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.filter;
 
@@ -97,7 +98,6 @@ public boolean isPropertyExists() {
 	@Override
 	public void editProperty() {
 	    FilterChangeUserAgentDialog  dialog = getFilterChangeUserAgentDialog();
-	    dialog.setView(getView());
 	    int result = dialog.showDialog();
 	    if (result == JOptionPane.CANCEL_OPTION) {
 	        return;

File: src/org/parosproxy/paros/extension/filter/FilterDialog.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2011/04/16 i18n
 // ZAP: 2012/04/25 Added argument type to generic type.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.filter;
 
@@ -36,6 +37,7 @@
 
 public class FilterDialog extends AbstractParamDialog {
 
+	private static final long serialVersionUID = 1L;
     private static final String[] ROOT = {};
 	private AllFilterPanel allFilterPanel = null;
     public FilterDialog() {

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -64,6 +64,7 @@
 // ZAP: 2016/01/26 Fixed findbugs warning
 // ZAP: 2016/04/12 Listen to alert events to update the table model entries
 // ZAP: 2016/04/14 Use View to display the HTTP messages
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.history;
 
@@ -208,6 +209,7 @@ public void init() {
 		ZAP.getEventBus().registerConsumer(new AlertEventConsumer(), AlertEventPublisher.getPublisher().getPublisherName());
 	}
 
+	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);

File: src/org/parosproxy/paros/extension/history/PopupMenuExportMessage.java
Patch:
@@ -27,6 +27,7 @@
 // ZAP: 2012/11/01 Changed to load the HttpMessage from the database only once.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/03/23 Changed to a JMenuItem.
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.history;
 
@@ -49,7 +50,8 @@
 
 public class PopupMenuExportMessage extends JMenuItem {
 
-    // ZAP: Added logger
+    private static final long serialVersionUID = 1L;
+
     private static final Logger log = Logger.getLogger(PopupMenuExportMessage.class);
 
     private static final String CRLF = "\r\n";

File: src/org/parosproxy/paros/extension/option/ExtensionOption.java
Patch:
@@ -27,6 +27,7 @@
 // to add the optionsDatabasePanel to the options panel.
 // ZAP: 2015/03/16 Issue 1525: Further database independence changes
 // ZAP: 2015/08/17 Issue 1795: Allow JVM options to be configured via GUI
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.option;
 
@@ -71,6 +72,7 @@ private void initialize() {
         this.setOrder(2);
 	}
 	
+	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);

File: src/org/parosproxy/paros/extension/state/ExtensionState.java
Patch:
@@ -30,6 +30,7 @@
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/01/28 Issue 207: Support keyboard shortcuts 
 // ZAP: 2015/03/16 Issue 1525: Further database independence changes
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.state;
 
@@ -74,6 +75,7 @@ private void initialize() {
 	}
 	
 
+	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);

File: src/org/zaproxy/zap/db/sql/SqlTableParam.java
Patch:
@@ -71,7 +71,6 @@ public synchronized RecordParam read(long urlId) throws DatabaseException {
 			
 			try (ResultSet rs = psRead.getPs().executeQuery()) {
 				RecordParam result = build(rs);
-				rs.close();
 				return result;
 			}
 		} catch (SQLException e) {

File: src/org/zaproxy/zap/db/sql/SqlTableStructure.java
Patch:
@@ -76,7 +76,6 @@ public synchronized RecordStructure read(long sessionId, long urlId) throws Data
 				RecordStructure result = null;
 				if (rs.next()) {
 					result = build(rs);
-					rs.close();
 				}
 				return result;
 			}

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -170,7 +170,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 		if (shortcutImpl == null && callbackImpl == null && ! url.startsWith(API_URL) && ! url.startsWith(API_URL_S) && ! force) {
 			return false;
 		}
-		if (this.getOptionsParamApi().isSecureOnly() && ! requestHeader.isSecure()) {
+		if (getOptionsParamApi().isSecureOnly() && ! requestHeader.isSecure()) {
 			// Insecure request with secure only set, always ignore
 			logger.debug("handleApiRequest rejecting insecure request");
 			return true;
@@ -431,12 +431,12 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 	public String getBaseURL(API.Format format, String prefix, API.RequestType type, String name, boolean proxy) {
 		String key = this.getApiKey();
 		String base = API_URL;
-		if (this.getOptionsParamApi().isSecureOnly()) {
+		if (getOptionsParamApi().isSecureOnly()) {
 			base = API_URL_S;
 		}
 		if (!proxy) {
 			ProxyParam proxyParam = Model.getSingleton().getOptionsParam().getProxyParam();
-			if (this.getOptionsParamApi().isSecureOnly()) {
+			if (getOptionsParamApi().isSecureOnly()) {
 				base = "https://" + proxyParam.getProxyIp() + ":" + proxyParam.getProxyPort() + "/";
 			} else {
 				base = "http://" + proxyParam.getProxyIp() + ":" + proxyParam.getProxyPort() + "/";

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -178,6 +178,7 @@ public String getPrefix() {
 		return PREFIX;
 	}
 
+	@SuppressWarnings({"fallthrough"})
 	@Override
 	public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {
 		log.debug("handleApiAction " + name + " " + params.toString());
@@ -618,7 +619,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			        }
 
 			        for (Plugin plugin : hp.getRunning()) {
-						int pc = (int)(hp.getTestCurrentCount(plugin) * 100 / hp.getTestTotalCount());
+						int pc = hp.getTestCurrentCount(plugin) * 100 / hp.getTestTotalCount();
 						// Make sure not return 100 (or more) if still running...
 						// That might happen if more nodes are being scanned that the ones enumerated at the beginning.
 						if (pc >= 100) {

File: src/org/zaproxy/zap/extension/ascan/ExcludedParameterAddDialog.java
Patch:
@@ -38,6 +38,7 @@
 
 class ExcludedParameterAddDialog extends AbstractFormDialog {
 
+    private static final long serialVersionUID = 1L;
     private static final String DIALOG_TITLE = Constant.messages.getString("variant.options.excludedparam.dialog.token.add.title");
     private static final String CONFIRM_BUTTON_LABEL = Constant.messages.getString("variant.options.excludedparam.dialog.token.add.button.confirm");
     

File: src/org/zaproxy/zap/extension/ascan/ExcludedParameterModifyDialog.java
Patch:
@@ -26,6 +26,7 @@
 
 class ExcludedParameterModifyDialog extends ExcludedParameterAddDialog {
 
+    private static final long serialVersionUID = 1L;
     private static final String DIALOG_TITLE = Constant.messages.getString("variant.options.excludedparam.dialog.token.modify.title");    
     private static final String CONFIRM_BUTTON_LABEL = Constant.messages.getString("variant.options.excludedparam.dialog.token.modify.button.confirm");
     

File: src/org/zaproxy/zap/extension/ascan/ExcludedParameterTableModel.java
Patch:
@@ -32,6 +32,8 @@
  */
 public class ExcludedParameterTableModel extends AbstractMultipleOptionsBaseTableModel<ScannerParamFilter> {
     
+    private static final long serialVersionUID = 1L;
+
     private static final String[] COLUMN_NAMES = {
             Constant.messages.getString("variant.options.excludedparam.table.header.url"),
             Constant.messages.getString("variant.options.excludedparam.table.header.type"),

File: src/org/zaproxy/zap/extension/ascan/OptionsVariantPanel.java
Patch:
@@ -476,6 +476,7 @@ private JCheckBox getChkRPCCustom() {
      */
     private static class ExcludedParameterPanel extends AbstractMultipleOptionsBaseTablePanel<ScannerParamFilter> {
 
+        private static final long serialVersionUID = 1L;
         private static final String REMOVE_DIALOG_TITLE = Constant.messages.getString("variant.options.excludedparam.dialog.token.remove.title");
         private static final String REMOVE_DIALOG_TEXT = Constant.messages.getString("variant.options.excludedparam.dialog.token.remove.text");
 

File: src/org/zaproxy/zap/extension/ascan/ScanProgressActionIcon.java
Patch:
@@ -31,6 +31,7 @@
  */
 public class ScanProgressActionIcon extends JLabel {
 
+    private static final long serialVersionUID = 1L;
     private static final ImageIcon completedIcon = new ImageIcon(ZAP.class.getResource("/resource/icon/10/102.png"));
     private static final ImageIcon skippedIcon = new ImageIcon(ZAP.class.getResource("/resource/icon/10/150.png"));
     private static final ImageIcon skipIcon = new ImageIcon(ZAP.class.getResource("/resource/icon/16/skip1_16.png"));

File: src/org/zaproxy/zap/extension/compare/ExtensionCompare.java
Patch:
@@ -85,6 +85,7 @@ private void initialize() {
         this.setOrder(44);
 	}
 	
+	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelRequest.java
Patch:
@@ -45,7 +45,7 @@ public HttpPanelRequest(boolean isEditable, String configurationKey) {
 
 	@Override
 	protected void initComponents() {
-		addComponent(new RequestSplitComponent(), Model.getSingleton().getOptionsParam().getConfig());
+		addComponent(new RequestSplitComponent<HttpMessage>(), Model.getSingleton().getOptionsParam().getConfig());
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelResponse.java
Patch:
@@ -18,6 +18,7 @@
 package org.zaproxy.zap.extension.httppanel;
 
 import org.parosproxy.paros.model.Model;
+import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.component.split.response.ResponseSplitComponent;
 import org.zaproxy.zap.view.HttpPanelManager;
 
@@ -35,7 +36,7 @@ public HttpPanelResponse(boolean isEditable, String configurationKey) {
 
 	@Override
 	protected void initComponents() {
-		addComponent(new ResponseSplitComponent(), Model.getSingleton().getOptionsParam().getConfig());
+		addComponent(new ResponseSplitComponent<HttpMessage>(), Model.getSingleton().getOptionsParam().getConfig());
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/spider/ExtensionSpider.java
Patch:
@@ -518,6 +518,7 @@ private static String abbreviateDisplayName(String displayName) {
 	 * @throws IllegalStateException if the target or custom configurations are not allowed in the current
 	 *             {@link org.parosproxy.paros.control.Control.Mode mode}.
 	 */
+	@SuppressWarnings({"fallthrough"})
 	@Override
 	public int startScan(String displayName, Target target, User user, Object[] customConfigurations) {
 		switch (Control.getSingleton().getMode()) {

File: src/org/zaproxy/zap/spider/parser/SpiderGitParser.java
Patch:
@@ -137,12 +137,12 @@ public boolean parseResource(HttpMessage message, Source source, int depth) {
 				if ( log.isDebugEnabled() ) log.debug ("Entry "+ entryIndex + " has flags " + indexEntryFlags);
 
 				//mask off all but the least significant 12 bits of the index entry flags to get the length of the name in bytes 
-				int indexEntryNameByteLength = indexEntryFlags & (int)4095;						
+				int indexEntryNameByteLength = indexEntryFlags & 4095;						
 				if ( log.isDebugEnabled() ) log.debug ("Entry "+ entryIndex + " has a name of length " + indexEntryNameByteLength);
 
 				//mask off all but the second most significant 12 bit of the index entry flags to get the extended flag for the entry 
 				//int indexEntryExtendedFlag = indexEntryFlags & (int)16384;
-				int indexEntryExtendedFlag = ((indexEntryFlags & (int)(1<<14) )>>14);
+				int indexEntryExtendedFlag = ((indexEntryFlags & (1<<14) )>>14);
 				if ( log.isDebugEnabled() ) log.debug ("Entry "+ entryIndex + " has an extended flag of " + indexEntryExtendedFlag);
 
 				//check that we parsed out the index entry extended flag correctly.

File: src/org/zaproxy/zap/spider/parser/SpiderSitemapXMLParser.java
Patch:
@@ -67,7 +67,7 @@ public class SpiderSitemapXMLParser extends SpiderParser {
 	static {		
 		try {
 			dBuilder = XmlUtils.newXxeDisabledDocumentBuilderFactory().newDocumentBuilder();
-			XPath  xpath = (XPath) XPathFactory.newInstance().newXPath();
+			XPath  xpath = XPathFactory.newInstance().newXPath();
 			xpathLocationExpression = xpath.compile("/urlset/url/loc/text()");
 		} catch (ParserConfigurationException | XPathExpressionException e) {
 			log.error(e);

File: src/org/zaproxy/zap/utils/ClassLoaderUtil.java
Patch:
@@ -17,7 +17,7 @@ public class ClassLoaderUtil {
     private static Logger log = Logger.getLogger(ClassLoaderUtil.class);
 
     // Parameters
-	private static final Class<?>[] parameters = new Class[]{URL.class};
+	private static final Class<?>[] parameters = new Class<?>[]{URL.class};
 
     /**
      * Add file to CLASSPATH

File: src/org/zaproxy/zap/utils/ContentMatcher.java
Patch:
@@ -93,8 +93,8 @@ public static ContentMatcher getInstance(InputStream xmlInputStream) {
      * a Regex formatted pattern or "string" for an exact matching pattern.
      */
     protected void loadXMLPatternDefinitions(InputStream xmlInputStream) throws JDOMException, IOException {
-        strings = new ArrayList();
-        patterns = new ArrayList();
+        strings = new ArrayList<BoyerMooreMatcher>();
+        patterns = new ArrayList<Pattern>();
         
         SAXBuilder builder = new SAXBuilder();
         Document doc = builder.build(xmlInputStream);
@@ -155,7 +155,7 @@ public String findInContent(String content) {
      */
     public List<String> findAllInContent(String content) {
         
-        List<String> results = new LinkedList();
+        List<String> results = new LinkedList<String>();
         
         // First check for all simple exact occurrences
         for (BoyerMooreMatcher matcher : strings) {

File: src/org/zaproxy/zap/utils/DisplayUtils.java
Patch:
@@ -54,7 +54,7 @@ public static ImageIcon getScaledIcon(ImageIcon icon) {
 			// dont need to scale
 			return icon;
 		}
-		return new ImageIcon(((ImageIcon)icon).getImage().getScaledInstance(
+		return new ImageIcon((icon).getImage().getScaledInstance(
 				(int)(icon.getIconWidth() * FontUtils.getScale()), (int)(icon.getIconHeight() * FontUtils.getScale()), Image.SCALE_SMOOTH));
 	}
 	

File: src/org/zaproxy/zap/utils/EmptyResettableAutoCloseableIterator.java
Patch:
@@ -62,6 +62,6 @@ public void reset() {
     }
 
     @Override
-    public void close() throws Exception {
+    public void close() {
     }
 }

File: src/org/zaproxy/zap/utils/HarUtils.java
Patch:
@@ -207,7 +207,7 @@ public static HarResponse createHarResponse(HttpMessage httpMessage) {
         HarCookies harCookies = new HarCookies();
 
         long whenCreated = System.currentTimeMillis();
-        for (HttpCookie cookie : responseHeader.getHttpCookies()) {
+        for (HttpCookie cookie : responseHeader.getHttpCookies(httpMessage.getRequestHeader().getHostName())) {
             Date expires;
             if (cookie.getVersion() == 0) {
                 expires = new Date(whenCreated + (cookie.getMaxAge() * 1000));

File: src/org/zaproxy/zap/utils/ResettableAutoCloseableIterator.java
Patch:
@@ -30,4 +30,5 @@
  */
 public interface ResettableAutoCloseableIterator<E> extends ResettableIterator<E>, AutoCloseable {
 
+    void close();
 }

File: src/org/zaproxy/zap/view/AbstractMultipleOptionsTableModel.java
Patch:
@@ -26,6 +26,8 @@
 
 public abstract class AbstractMultipleOptionsTableModel<E extends Enableable> extends AbstractMultipleOptionsBaseTableModel<E> {
 
+    private static final long serialVersionUID = 1L;
+
     public AbstractMultipleOptionsTableModel() {
         super();
     }

File: src/org/zaproxy/zap/view/AbstractMultipleOptionsTablePanel.java
Patch:
@@ -30,6 +30,7 @@
 
 public abstract class AbstractMultipleOptionsTablePanel<E extends Enableable> extends AbstractMultipleOptionsBaseTablePanel<E> {
     
+    private static final long serialVersionUID = 1L;
     private static final String ENABLE_ALL_BUTTON_LABEL = Constant.messages.getString("multiple.options.panel.enableAll.button.label");
     private static final String DISABLE_ALL_BUTTON_LABEL = Constant.messages.getString("multiple.options.panel.disableAll.button.label");
     
@@ -47,7 +48,7 @@ public AbstractMultipleOptionsTablePanel(AbstractMultipleOptionsTableModel<E> mo
             
             @Override
             public void actionPerformed(ActionEvent e) {
-                ((AbstractMultipleOptionsTableModel)getMultipleOptionsModel()).setAllEnabled(true);
+                ((AbstractMultipleOptionsTableModel<?>)getMultipleOptionsModel()).setAllEnabled(true);
             }
         });
         
@@ -57,7 +58,7 @@ public void actionPerformed(ActionEvent e) {
             
             @Override
             public void actionPerformed(ActionEvent e) {
-                ((AbstractMultipleOptionsTableModel)getMultipleOptionsModel()).setAllEnabled(false);
+                ((AbstractMultipleOptionsTableModel<?>)getMultipleOptionsModel()).setAllEnabled(false);
             }
         });
         

File: src/org/zaproxy/zap/view/BackgroundImagePanel.java
Patch:
@@ -34,6 +34,7 @@
  */
 public class BackgroundImagePanel extends JPanel {
 
+    private static final long serialVersionUID = 1L;
     private BufferedImage img;
 
     /**

File: src/org/zaproxy/zap/view/HighlighterManager.java
Patch:
@@ -35,6 +35,7 @@ public HighlighterManager() {
 		observers =  new ArrayList<>();
 	}
 	
+	@SuppressWarnings("unchecked")
 	public void reinitHighlights(LinkedList<HighlightSearchEntry> list) {
 		this.highlights = (LinkedList<HighlightSearchEntry>) list.clone();
 		
@@ -63,6 +64,7 @@ public void removeHighlightEntry(int id) {
 	}
 	
 	// TODO: sux
+	@SuppressWarnings("unchecked")
 	public LinkedList<HighlightSearchEntry> getHighlights() {
 		return (LinkedList<HighlightSearchEntry>) highlights.clone();
 	}

File: src/org/zaproxy/zap/view/StandardFieldsDialog.java
Patch:
@@ -125,7 +125,7 @@ public StandardFieldsDialog(Frame owner, String titleLabel, Dimension dim, Strin
 	}
 	
 	public StandardFieldsDialog(Window owner, String titleLabel, Dimension dim, String[] tabLabels) {
-		this((Window)owner, titleLabel, dim, tabLabels, false);
+		this(owner, titleLabel, dim, tabLabels, false);
 	}
 
 	public StandardFieldsDialog(Window owner, String titleLabel, Dimension dim, String[] tabLabels, boolean modal) {

File: src/org/zaproxy/zap/view/StructuralNodeModifiersTableModel.java
Patch:
@@ -78,6 +78,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
 			case StructuralParameter:	return Constant.messages.getString("context.ddn.table.type.struct");
 			case DataDrivenNode:		return Constant.messages.getString("context.ddn.table.type.data");
 			}
+			return null;
 		case 1:
 			return snms.get(rowIndex).getName();
 		case 2:

File: test/org/zaproxy/zap/users/UserUnitTest.java
Patch:
@@ -94,6 +94,7 @@ public void shouldEncodeAndDecodeProperly() {
 		assertEquals(user.getContextId(), result.getContextId());
 	}
 
+	@SuppressWarnings("unchecked")
 	@Test
 	public void shouldGenerateUniqueIds() {
 		// Given

File: src/ch/csnc/extension/ui/AliasTableModel.java
Patch:
@@ -65,7 +65,7 @@ public void removeKeystore() {
     
     
     public String getAlias(int row) {
-        return (String) _aliases.get(row).getAlias();
+        return _aliases.get(row).getAlias();
     }
     
     public int getColumnCount() {

File: src/org/apache/commons/httpclient/HttpMethodBase.java
Patch:
@@ -1297,6 +1297,7 @@ public boolean validate() {
      * 
      * @return cookie spec
      */
+    @SuppressWarnings("deprecation")
     private CookieSpec getCookieSpec(final HttpState state) {
     	if (this.cookiespec == null) {
     		int i = state.getCookiePolicy();

File: src/org/parosproxy/paros/db/paros/ParosTableParam.java
Patch:
@@ -92,7 +92,6 @@ public synchronized RecordParam read(long urlId) throws DatabaseException {
 			
 			try (ResultSet rs = psRead.executeQuery()) {
 				RecordParam result = build(rs);
-				rs.close();
 				return result;
 			}
 		} catch (SQLException e) {

File: src/org/parosproxy/paros/db/paros/ParosTableStructure.java
Patch:
@@ -100,7 +100,6 @@ public synchronized RecordStructure read(long sessionId, long urlId) throws Data
 			
 			try (ResultSet rs = psRead.executeQuery()) {
 				RecordStructure result = build(rs);
-				rs.close();
 				return result;
 			}
 		} catch (SQLException e) {

File: src/org/parosproxy/paros/extension/edit/PopupFindMenu.java
Patch:
@@ -23,6 +23,8 @@
 // ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 // ZAP: 2012/10/23 Changed to prevent a NullPointerException when there's no
 // parent JFrame (changed to use SwingUtilities.getAncestorOfClass(...)).
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
+
 package org.parosproxy.paros.extension.edit;
 
 import java.awt.Component;
@@ -35,6 +37,7 @@
 import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
 public class PopupFindMenu extends ExtensionPopupMenuItem {
+    private static final long serialVersionUID = 1L;
     private JTextComponent lastInvoker = null;
     private JFrame parentFrame = null;
     

File: src/org/parosproxy/paros/extension/filter/AllFilterPanel.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/11/06 Added warning that filters will be removed
 // ZAP: 2015/02/16 Issue 1528: Support user defined font size
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.filter;
 
@@ -46,6 +47,7 @@
 
 public class AllFilterPanel extends AbstractParamPanel {
 
+	private static final long serialVersionUID = 1L;
 	private JTable tableFilter = null;
 	private JScrollPane jScrollPane = null;
     /**

File: src/org/parosproxy/paros/extension/filter/FilterChangeUserAgent.java
Patch:
@@ -22,6 +22,7 @@
 // ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2016/0405 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.filter;
 
@@ -97,7 +98,6 @@ public boolean isPropertyExists() {
 	@Override
 	public void editProperty() {
 	    FilterChangeUserAgentDialog  dialog = getFilterChangeUserAgentDialog();
-	    dialog.setView(getView());
 	    int result = dialog.showDialog();
 	    if (result == JOptionPane.CANCEL_OPTION) {
 	        return;

File: src/org/parosproxy/paros/extension/filter/FilterDialog.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2011/04/16 i18n
 // ZAP: 2012/04/25 Added argument type to generic type.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.filter;
 
@@ -36,6 +37,7 @@
 
 public class FilterDialog extends AbstractParamDialog {
 
+	private static final long serialVersionUID = 1L;
     private static final String[] ROOT = {};
 	private AllFilterPanel allFilterPanel = null;
     public FilterDialog() {

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -64,6 +64,7 @@
 // ZAP: 2016/01/26 Fixed findbugs warning
 // ZAP: 2016/04/12 Listen to alert events to update the table model entries
 // ZAP: 2016/04/14 Use View to display the HTTP messages
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.history;
 
@@ -208,6 +209,7 @@ public void init() {
 		ZAP.getEventBus().registerConsumer(new AlertEventConsumer(), AlertEventPublisher.getPublisher().getPublisherName());
 	}
 
+	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);

File: src/org/parosproxy/paros/extension/history/PopupMenuExportMessage.java
Patch:
@@ -27,6 +27,7 @@
 // ZAP: 2012/11/01 Changed to load the HttpMessage from the database only once.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/03/23 Changed to a JMenuItem.
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.history;
 
@@ -49,7 +50,8 @@
 
 public class PopupMenuExportMessage extends JMenuItem {
 
-    // ZAP: Added logger
+    private static final long serialVersionUID = 1L;
+
     private static final Logger log = Logger.getLogger(PopupMenuExportMessage.class);
 
     private static final String CRLF = "\r\n";

File: src/org/parosproxy/paros/extension/option/ExtensionOption.java
Patch:
@@ -27,6 +27,7 @@
 // to add the optionsDatabasePanel to the options panel.
 // ZAP: 2015/03/16 Issue 1525: Further database independence changes
 // ZAP: 2015/08/17 Issue 1795: Allow JVM options to be configured via GUI
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.option;
 
@@ -71,6 +72,7 @@ private void initialize() {
         this.setOrder(2);
 	}
 	
+	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);

File: src/org/parosproxy/paros/extension/state/ExtensionState.java
Patch:
@@ -30,6 +30,7 @@
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/01/28 Issue 207: Support keyboard shortcuts 
 // ZAP: 2015/03/16 Issue 1525: Further database independence changes
+// ZAP: 2016/04/05 Issue 2458: Fix xlint warning messages 
 
 package org.parosproxy.paros.extension.state;
 
@@ -74,6 +75,7 @@ private void initialize() {
 	}
 	
 
+	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);

File: src/org/zaproxy/zap/db/sql/SqlTableParam.java
Patch:
@@ -71,7 +71,6 @@ public synchronized RecordParam read(long urlId) throws DatabaseException {
 			
 			try (ResultSet rs = psRead.getPs().executeQuery()) {
 				RecordParam result = build(rs);
-				rs.close();
 				return result;
 			}
 		} catch (SQLException e) {

File: src/org/zaproxy/zap/db/sql/SqlTableStructure.java
Patch:
@@ -76,7 +76,6 @@ public synchronized RecordStructure read(long sessionId, long urlId) throws Data
 				RecordStructure result = null;
 				if (rs.next()) {
 					result = build(rs);
-					rs.close();
 				}
 				return result;
 			}

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -170,7 +170,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 		if (shortcutImpl == null && callbackImpl == null && ! url.startsWith(API_URL) && ! url.startsWith(API_URL_S) && ! force) {
 			return false;
 		}
-		if (this.getOptionsParamApi().isSecureOnly() && ! requestHeader.isSecure()) {
+		if (getOptionsParamApi().isSecureOnly() && ! requestHeader.isSecure()) {
 			// Insecure request with secure only set, always ignore
 			logger.debug("handleApiRequest rejecting insecure request");
 			return true;
@@ -431,12 +431,12 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 	public String getBaseURL(API.Format format, String prefix, API.RequestType type, String name, boolean proxy) {
 		String key = this.getApiKey();
 		String base = API_URL;
-		if (this.getOptionsParamApi().isSecureOnly()) {
+		if (getOptionsParamApi().isSecureOnly()) {
 			base = API_URL_S;
 		}
 		if (!proxy) {
 			ProxyParam proxyParam = Model.getSingleton().getOptionsParam().getProxyParam();
-			if (this.getOptionsParamApi().isSecureOnly()) {
+			if (getOptionsParamApi().isSecureOnly()) {
 				base = "https://" + proxyParam.getProxyIp() + ":" + proxyParam.getProxyPort() + "/";
 			} else {
 				base = "http://" + proxyParam.getProxyIp() + ":" + proxyParam.getProxyPort() + "/";

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -178,6 +178,7 @@ public String getPrefix() {
 		return PREFIX;
 	}
 
+	@SuppressWarnings({"fallthrough"})
 	@Override
 	public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {
 		log.debug("handleApiAction " + name + " " + params.toString());
@@ -618,7 +619,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			        }
 
 			        for (Plugin plugin : hp.getRunning()) {
-						int pc = (int)(hp.getTestCurrentCount(plugin) * 100 / hp.getTestTotalCount());
+						int pc = hp.getTestCurrentCount(plugin) * 100 / hp.getTestTotalCount();
 						// Make sure not return 100 (or more) if still running...
 						// That might happen if more nodes are being scanned that the ones enumerated at the beginning.
 						if (pc >= 100) {

File: src/org/zaproxy/zap/extension/ascan/ExcludedParameterAddDialog.java
Patch:
@@ -38,6 +38,7 @@
 
 class ExcludedParameterAddDialog extends AbstractFormDialog {
 
+    private static final long serialVersionUID = 1L;
     private static final String DIALOG_TITLE = Constant.messages.getString("variant.options.excludedparam.dialog.token.add.title");
     private static final String CONFIRM_BUTTON_LABEL = Constant.messages.getString("variant.options.excludedparam.dialog.token.add.button.confirm");
     

File: src/org/zaproxy/zap/extension/ascan/ExcludedParameterModifyDialog.java
Patch:
@@ -26,6 +26,7 @@
 
 class ExcludedParameterModifyDialog extends ExcludedParameterAddDialog {
 
+    private static final long serialVersionUID = 1L;
     private static final String DIALOG_TITLE = Constant.messages.getString("variant.options.excludedparam.dialog.token.modify.title");    
     private static final String CONFIRM_BUTTON_LABEL = Constant.messages.getString("variant.options.excludedparam.dialog.token.modify.button.confirm");
     

File: src/org/zaproxy/zap/extension/ascan/ExcludedParameterTableModel.java
Patch:
@@ -32,6 +32,8 @@
  */
 public class ExcludedParameterTableModel extends AbstractMultipleOptionsBaseTableModel<ScannerParamFilter> {
     
+    private static final long serialVersionUID = 1L;
+
     private static final String[] COLUMN_NAMES = {
             Constant.messages.getString("variant.options.excludedparam.table.header.url"),
             Constant.messages.getString("variant.options.excludedparam.table.header.type"),

File: src/org/zaproxy/zap/extension/ascan/OptionsVariantPanel.java
Patch:
@@ -476,6 +476,7 @@ private JCheckBox getChkRPCCustom() {
      */
     private static class ExcludedParameterPanel extends AbstractMultipleOptionsBaseTablePanel<ScannerParamFilter> {
 
+        private static final long serialVersionUID = 1L;
         private static final String REMOVE_DIALOG_TITLE = Constant.messages.getString("variant.options.excludedparam.dialog.token.remove.title");
         private static final String REMOVE_DIALOG_TEXT = Constant.messages.getString("variant.options.excludedparam.dialog.token.remove.text");
 

File: src/org/zaproxy/zap/extension/ascan/ScanProgressActionIcon.java
Patch:
@@ -31,6 +31,7 @@
  */
 public class ScanProgressActionIcon extends JLabel {
 
+    private static final long serialVersionUID = 1L;
     private static final ImageIcon completedIcon = new ImageIcon(ZAP.class.getResource("/resource/icon/10/102.png"));
     private static final ImageIcon skippedIcon = new ImageIcon(ZAP.class.getResource("/resource/icon/10/150.png"));
     private static final ImageIcon skipIcon = new ImageIcon(ZAP.class.getResource("/resource/icon/16/skip1_16.png"));

File: src/org/zaproxy/zap/extension/compare/ExtensionCompare.java
Patch:
@@ -85,6 +85,7 @@ private void initialize() {
         this.setOrder(44);
 	}
 	
+	@SuppressWarnings("deprecation")
 	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelRequest.java
Patch:
@@ -45,7 +45,7 @@ public HttpPanelRequest(boolean isEditable, String configurationKey) {
 
 	@Override
 	protected void initComponents() {
-		addComponent(new RequestSplitComponent(), Model.getSingleton().getOptionsParam().getConfig());
+		addComponent(new RequestSplitComponent<HttpMessage>(), Model.getSingleton().getOptionsParam().getConfig());
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelResponse.java
Patch:
@@ -18,6 +18,7 @@
 package org.zaproxy.zap.extension.httppanel;
 
 import org.parosproxy.paros.model.Model;
+import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.component.split.response.ResponseSplitComponent;
 import org.zaproxy.zap.view.HttpPanelManager;
 
@@ -35,7 +36,7 @@ public HttpPanelResponse(boolean isEditable, String configurationKey) {
 
 	@Override
 	protected void initComponents() {
-		addComponent(new ResponseSplitComponent(), Model.getSingleton().getOptionsParam().getConfig());
+		addComponent(new ResponseSplitComponent<HttpMessage>(), Model.getSingleton().getOptionsParam().getConfig());
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/spider/ExtensionSpider.java
Patch:
@@ -518,6 +518,7 @@ private static String abbreviateDisplayName(String displayName) {
 	 * @throws IllegalStateException if the target or custom configurations are not allowed in the current
 	 *             {@link org.parosproxy.paros.control.Control.Mode mode}.
 	 */
+	@SuppressWarnings({"fallthrough"})
 	@Override
 	public int startScan(String displayName, Target target, User user, Object[] customConfigurations) {
 		switch (Control.getSingleton().getMode()) {

File: src/org/zaproxy/zap/spider/parser/SpiderGitParser.java
Patch:
@@ -137,12 +137,12 @@ public boolean parseResource(HttpMessage message, Source source, int depth) {
 				if ( log.isDebugEnabled() ) log.debug ("Entry "+ entryIndex + " has flags " + indexEntryFlags);
 
 				//mask off all but the least significant 12 bits of the index entry flags to get the length of the name in bytes 
-				int indexEntryNameByteLength = indexEntryFlags & (int)4095;						
+				int indexEntryNameByteLength = indexEntryFlags & 4095;						
 				if ( log.isDebugEnabled() ) log.debug ("Entry "+ entryIndex + " has a name of length " + indexEntryNameByteLength);
 
 				//mask off all but the second most significant 12 bit of the index entry flags to get the extended flag for the entry 
 				//int indexEntryExtendedFlag = indexEntryFlags & (int)16384;
-				int indexEntryExtendedFlag = ((indexEntryFlags & (int)(1<<14) )>>14);
+				int indexEntryExtendedFlag = ((indexEntryFlags & (1<<14) )>>14);
 				if ( log.isDebugEnabled() ) log.debug ("Entry "+ entryIndex + " has an extended flag of " + indexEntryExtendedFlag);
 
 				//check that we parsed out the index entry extended flag correctly.

File: src/org/zaproxy/zap/spider/parser/SpiderSitemapXMLParser.java
Patch:
@@ -67,7 +67,7 @@ public class SpiderSitemapXMLParser extends SpiderParser {
 	static {		
 		try {
 			dBuilder = XmlUtils.newXxeDisabledDocumentBuilderFactory().newDocumentBuilder();
-			XPath  xpath = (XPath) XPathFactory.newInstance().newXPath();
+			XPath  xpath = XPathFactory.newInstance().newXPath();
 			xpathLocationExpression = xpath.compile("/urlset/url/loc/text()");
 		} catch (ParserConfigurationException | XPathExpressionException e) {
 			log.error(e);

File: src/org/zaproxy/zap/utils/ClassLoaderUtil.java
Patch:
@@ -17,7 +17,7 @@ public class ClassLoaderUtil {
     private static Logger log = Logger.getLogger(ClassLoaderUtil.class);
 
     // Parameters
-	private static final Class<?>[] parameters = new Class[]{URL.class};
+	private static final Class<?>[] parameters = new Class<?>[]{URL.class};
 
     /**
      * Add file to CLASSPATH

File: src/org/zaproxy/zap/utils/ContentMatcher.java
Patch:
@@ -93,8 +93,8 @@ public static ContentMatcher getInstance(InputStream xmlInputStream) {
      * a Regex formatted pattern or "string" for an exact matching pattern.
      */
     protected void loadXMLPatternDefinitions(InputStream xmlInputStream) throws JDOMException, IOException {
-        strings = new ArrayList();
-        patterns = new ArrayList();
+        strings = new ArrayList<BoyerMooreMatcher>();
+        patterns = new ArrayList<Pattern>();
         
         SAXBuilder builder = new SAXBuilder();
         Document doc = builder.build(xmlInputStream);
@@ -155,7 +155,7 @@ public String findInContent(String content) {
      */
     public List<String> findAllInContent(String content) {
         
-        List<String> results = new LinkedList();
+        List<String> results = new LinkedList<String>();
         
         // First check for all simple exact occurrences
         for (BoyerMooreMatcher matcher : strings) {

File: src/org/zaproxy/zap/utils/DisplayUtils.java
Patch:
@@ -54,7 +54,7 @@ public static ImageIcon getScaledIcon(ImageIcon icon) {
 			// dont need to scale
 			return icon;
 		}
-		return new ImageIcon(((ImageIcon)icon).getImage().getScaledInstance(
+		return new ImageIcon((icon).getImage().getScaledInstance(
 				(int)(icon.getIconWidth() * FontUtils.getScale()), (int)(icon.getIconHeight() * FontUtils.getScale()), Image.SCALE_SMOOTH));
 	}
 	

File: src/org/zaproxy/zap/utils/EmptyResettableAutoCloseableIterator.java
Patch:
@@ -62,6 +62,6 @@ public void reset() {
     }
 
     @Override
-    public void close() throws Exception {
+    public void close() {
     }
 }

File: src/org/zaproxy/zap/utils/HarUtils.java
Patch:
@@ -207,7 +207,7 @@ public static HarResponse createHarResponse(HttpMessage httpMessage) {
         HarCookies harCookies = new HarCookies();
 
         long whenCreated = System.currentTimeMillis();
-        for (HttpCookie cookie : responseHeader.getHttpCookies()) {
+        for (HttpCookie cookie : responseHeader.getHttpCookies(httpMessage.getRequestHeader().getHostName())) {
             Date expires;
             if (cookie.getVersion() == 0) {
                 expires = new Date(whenCreated + (cookie.getMaxAge() * 1000));

File: src/org/zaproxy/zap/utils/ResettableAutoCloseableIterator.java
Patch:
@@ -30,4 +30,5 @@
  */
 public interface ResettableAutoCloseableIterator<E> extends ResettableIterator<E>, AutoCloseable {
 
+    void close();
 }

File: src/org/zaproxy/zap/view/AbstractMultipleOptionsTableModel.java
Patch:
@@ -26,6 +26,8 @@
 
 public abstract class AbstractMultipleOptionsTableModel<E extends Enableable> extends AbstractMultipleOptionsBaseTableModel<E> {
 
+    private static final long serialVersionUID = 1L;
+
     public AbstractMultipleOptionsTableModel() {
         super();
     }

File: src/org/zaproxy/zap/view/AbstractMultipleOptionsTablePanel.java
Patch:
@@ -30,6 +30,7 @@
 
 public abstract class AbstractMultipleOptionsTablePanel<E extends Enableable> extends AbstractMultipleOptionsBaseTablePanel<E> {
     
+    private static final long serialVersionUID = 1L;
     private static final String ENABLE_ALL_BUTTON_LABEL = Constant.messages.getString("multiple.options.panel.enableAll.button.label");
     private static final String DISABLE_ALL_BUTTON_LABEL = Constant.messages.getString("multiple.options.panel.disableAll.button.label");
     
@@ -47,7 +48,7 @@ public AbstractMultipleOptionsTablePanel(AbstractMultipleOptionsTableModel<E> mo
             
             @Override
             public void actionPerformed(ActionEvent e) {
-                ((AbstractMultipleOptionsTableModel)getMultipleOptionsModel()).setAllEnabled(true);
+                ((AbstractMultipleOptionsTableModel<?>)getMultipleOptionsModel()).setAllEnabled(true);
             }
         });
         
@@ -57,7 +58,7 @@ public void actionPerformed(ActionEvent e) {
             
             @Override
             public void actionPerformed(ActionEvent e) {
-                ((AbstractMultipleOptionsTableModel)getMultipleOptionsModel()).setAllEnabled(false);
+                ((AbstractMultipleOptionsTableModel<?>)getMultipleOptionsModel()).setAllEnabled(false);
             }
         });
         

File: src/org/zaproxy/zap/view/BackgroundImagePanel.java
Patch:
@@ -34,6 +34,7 @@
  */
 public class BackgroundImagePanel extends JPanel {
 
+    private static final long serialVersionUID = 1L;
     private BufferedImage img;
 
     /**

File: src/org/zaproxy/zap/view/HighlighterManager.java
Patch:
@@ -35,6 +35,7 @@ public HighlighterManager() {
 		observers =  new ArrayList<>();
 	}
 	
+	@SuppressWarnings("unchecked")
 	public void reinitHighlights(LinkedList<HighlightSearchEntry> list) {
 		this.highlights = (LinkedList<HighlightSearchEntry>) list.clone();
 		
@@ -63,6 +64,7 @@ public void removeHighlightEntry(int id) {
 	}
 	
 	// TODO: sux
+	@SuppressWarnings("unchecked")
 	public LinkedList<HighlightSearchEntry> getHighlights() {
 		return (LinkedList<HighlightSearchEntry>) highlights.clone();
 	}

File: src/org/zaproxy/zap/view/StandardFieldsDialog.java
Patch:
@@ -125,7 +125,7 @@ public StandardFieldsDialog(Frame owner, String titleLabel, Dimension dim, Strin
 	}
 	
 	public StandardFieldsDialog(Window owner, String titleLabel, Dimension dim, String[] tabLabels) {
-		this((Window)owner, titleLabel, dim, tabLabels, false);
+		this(owner, titleLabel, dim, tabLabels, false);
 	}
 
 	public StandardFieldsDialog(Window owner, String titleLabel, Dimension dim, String[] tabLabels, boolean modal) {

File: src/org/zaproxy/zap/view/StructuralNodeModifiersTableModel.java
Patch:
@@ -78,6 +78,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
 			case StructuralParameter:	return Constant.messages.getString("context.ddn.table.type.struct");
 			case DataDrivenNode:		return Constant.messages.getString("context.ddn.table.type.data");
 			}
+			return null;
 		case 1:
 			return snms.get(rowIndex).getName();
 		case 2:

File: test/org/zaproxy/zap/users/UserUnitTest.java
Patch:
@@ -94,6 +94,7 @@ public void shouldEncodeAndDecodeProperly() {
 		assertEquals(user.getContextId(), result.getContextId());
 	}
 
+	@SuppressWarnings("unchecked")
 	@Test
 	public void shouldGenerateUniqueIds() {
 		// Given

File: src/org/parosproxy/paros/core/scanner/VariantFormQuery.java
Patch:
@@ -26,7 +26,8 @@
 // ZAP: 2013/12/09 Solved NullPointerException when the request header doesn't contain "Content-Type" header field
 // ZAP: 2014/01/06 Issue 965: Support 'single page' apps and 'non standard' parameter separators
 // ZAP: 2014/02/08 Used the same constants used in ScanParam Target settings
-//
+// ZAP: 2016/05/04 Changed to use setParameters(int, List<NameValuePair>)
+
 package org.parosproxy.paros.core.scanner;
 
 import org.parosproxy.paros.model.Model;
@@ -48,7 +49,7 @@ public void setMessage(HttpMessage msg) {
         String contentType = msg.getRequestHeader().getHeader(HttpHeader.CONTENT_TYPE);
         // ZAP: added control for null contentType
         if (contentType != null && contentType.startsWith(WWW_APP_URL_ENCODED)) {
-        	this.setParams(NameValuePair.TYPE_POST_DATA, Model.getSingleton().getSession().getParams(msg, Type.form));
+        	this.setParameters(NameValuePair.TYPE_POST_DATA, Model.getSingleton().getSession().getParameters(msg, Type.form));
         }
     }
             

File: src/org/parosproxy/paros/core/scanner/VariantURLQuery.java
Patch:
@@ -24,7 +24,8 @@
 // ZAP: 2013/08/21 Added a new encoding/decoding model for a correct parameter value interpretation
 // ZAP: 2014/01/06 Issue 965: Support 'single page' apps and 'non standard' parameter separators
 // ZAP: 2014/02/08 Used the same constants used in ScanParam Target settings
-//
+// ZAP: 2016/05/04 Changed to use setParameters(int, List<NameValuePair>)
+
 package org.parosproxy.paros.core.scanner;
 
 import org.apache.commons.httpclient.URIException;
@@ -65,7 +66,7 @@ protected String getUnescapedValue(String value) {
 
     @Override
     public void setMessage(HttpMessage msg) {
-       	this.setParams(NameValuePair.TYPE_QUERY_STRING, Model.getSingleton().getSession().getParams(msg, Type.url));
+       	this.setParameters(NameValuePair.TYPE_QUERY_STRING, Model.getSingleton().getSession().getParameters(msg, Type.url));
     }
 
     @Override

File: src/org/parosproxy/paros/core/scanner/VariantFormQuery.java
Patch:
@@ -26,7 +26,8 @@
 // ZAP: 2013/12/09 Solved NullPointerException when the request header doesn't contain "Content-Type" header field
 // ZAP: 2014/01/06 Issue 965: Support 'single page' apps and 'non standard' parameter separators
 // ZAP: 2014/02/08 Used the same constants used in ScanParam Target settings
-//
+// ZAP: 2016/05/04 Changed to use setParameters(int, List<NameValuePair>)
+
 package org.parosproxy.paros.core.scanner;
 
 import org.parosproxy.paros.model.Model;
@@ -48,7 +49,7 @@ public void setMessage(HttpMessage msg) {
         String contentType = msg.getRequestHeader().getHeader(HttpHeader.CONTENT_TYPE);
         // ZAP: added control for null contentType
         if (contentType != null && contentType.startsWith(WWW_APP_URL_ENCODED)) {
-        	this.setParams(NameValuePair.TYPE_POST_DATA, Model.getSingleton().getSession().getParams(msg, Type.form));
+        	this.setParameters(NameValuePair.TYPE_POST_DATA, Model.getSingleton().getSession().getParameters(msg, Type.form));
         }
     }
             

File: src/org/parosproxy/paros/core/scanner/VariantURLQuery.java
Patch:
@@ -24,7 +24,8 @@
 // ZAP: 2013/08/21 Added a new encoding/decoding model for a correct parameter value interpretation
 // ZAP: 2014/01/06 Issue 965: Support 'single page' apps and 'non standard' parameter separators
 // ZAP: 2014/02/08 Used the same constants used in ScanParam Target settings
-//
+// ZAP: 2016/05/04 Changed to use setParameters(int, List<NameValuePair>)
+
 package org.parosproxy.paros.core.scanner;
 
 import org.apache.commons.httpclient.URIException;
@@ -65,7 +66,7 @@ protected String getUnescapedValue(String value) {
 
     @Override
     public void setMessage(HttpMessage msg) {
-       	this.setParams(NameValuePair.TYPE_QUERY_STRING, Model.getSingleton().getSession().getParams(msg, Type.url));
+       	this.setParameters(NameValuePair.TYPE_QUERY_STRING, Model.getSingleton().getSession().getParameters(msg, Type.url));
     }
 
     @Override

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -55,6 +55,7 @@
 // ZAP: 2015/10/21 Issue 1576: Support data driven content
 // ZAP: 2015/12/14 Issue 2119: Context's description not imported
 // ZAP: 2016/02/26 Issue 2273: Clear stats on session init
+// ZAP: 2016/05/02 Issue 2451: Only a single Data Driven Node can be saved in a context
 
 package org.parosproxy.paros.model;
 
@@ -1255,7 +1256,7 @@ public void exportContext (Context c, File file) throws ConfigurationException {
 		config.setProperty(Context.CONTEXT_CONFIG_POSTPARSER_CLASS, c.getPostParamParser().getClass().getCanonicalName());
 		config.setProperty(Context.CONTEXT_CONFIG_POSTPARSER_CONFIG, c.getPostParamParser().getConfig());
 		for (StructuralNodeModifier snm : c.getDataDrivenNodes()) {
-			config.setProperty(Context.CONTEXT_CONFIG_DATA_DRIVEN_NODES, snm.getConfig());
+			config.addProperty(Context.CONTEXT_CONFIG_DATA_DRIVEN_NODES, snm.getConfig());
 		}
 		
 		model.exportContext(c, config);

File: src/org/parosproxy/paros/model/SiteMapEventPublisher.java
Patch:
@@ -28,6 +28,8 @@ public class SiteMapEventPublisher implements EventPublisher {
 	private static SiteMapEventPublisher publisher = null;
 	public static final String SITE_NODE_ADDED_EVENT	= "siteNode.added";
 	public static final String SITE_NODE_REMOVED_EVENT	= "siteNode.removed";
+	public static final String SITE_ADDED_EVENT	= "site.added";
+	public static final String SITE_REMOVED_EVENT	= "site.removed";
 	
 	@Override
 	public String getPublisherName() {
@@ -38,7 +40,7 @@ public static synchronized SiteMapEventPublisher getPublisher() {
 		if (publisher == null) {
 			publisher = new SiteMapEventPublisher(); 
 	        ZAP.getEventBus().registerPublisher(publisher, 
-	        		new String[] {SITE_NODE_ADDED_EVENT, SITE_NODE_REMOVED_EVENT});
+	        		new String[] {SITE_NODE_ADDED_EVENT, SITE_NODE_REMOVED_EVENT, SITE_ADDED_EVENT, SITE_REMOVED_EVENT});
 
 		}
 		return publisher;

File: src/org/parosproxy/paros/model/SiteMapEventPublisher.java
Patch:
@@ -28,6 +28,8 @@ public class SiteMapEventPublisher implements EventPublisher {
 	private static SiteMapEventPublisher publisher = null;
 	public static final String SITE_NODE_ADDED_EVENT	= "siteNode.added";
 	public static final String SITE_NODE_REMOVED_EVENT	= "siteNode.removed";
+	public static final String SITE_ADDED_EVENT	= "site.added";
+	public static final String SITE_REMOVED_EVENT	= "site.removed";
 	
 	@Override
 	public String getPublisherName() {
@@ -38,7 +40,7 @@ public static synchronized SiteMapEventPublisher getPublisher() {
 		if (publisher == null) {
 			publisher = new SiteMapEventPublisher(); 
 	        ZAP.getEventBus().registerPublisher(publisher, 
-	        		new String[] {SITE_NODE_ADDED_EVENT, SITE_NODE_REMOVED_EVENT});
+	        		new String[] {SITE_NODE_ADDED_EVENT, SITE_NODE_REMOVED_EVENT, SITE_ADDED_EVENT, SITE_REMOVED_EVENT});
 
 		}
 		return publisher;

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2015/03/04 Added dev build warning option
 // ZAP: 2016/04/04 Do not require a restart to show/hide the tool bar
 // ZAP: 2016/04/06 Fix layouts' issues
+// ZAP: 2016/04/27 Save, always, the Locale as String
 
 package org.parosproxy.paros.extension.option;
 
@@ -218,8 +219,7 @@ public void setLocale(Locale locale) {
 			sb.append(locale.getLanguage());
 			if (locale.getCountry().length() > 0) sb.append("_").append(locale.getCountry());
 			if (locale.getVariant().length() > 0) sb.append("_").append(locale.getVariant());
-			this.locale = sb.toString();
-			getConfig().setProperty(LOCALE, locale);
+			setLocale(sb.toString());
 		}
 	}
 

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2015/03/04 Added dev build warning option
 // ZAP: 2016/04/04 Do not require a restart to show/hide the tool bar
 // ZAP: 2016/04/06 Fix layouts' issues
+// ZAP: 2016/04/27 Save, always, the Locale as String
 
 package org.parosproxy.paros.extension.option;
 
@@ -218,8 +219,7 @@ public void setLocale(Locale locale) {
 			sb.append(locale.getLanguage());
 			if (locale.getCountry().length() > 0) sb.append("_").append(locale.getCountry());
 			if (locale.getVariant().length() > 0) sb.append("_").append(locale.getVariant());
-			this.locale = sb.toString();
-			getConfig().setProperty(LOCALE, locale);
+			setLocale(sb.toString());
 		}
 	}
 

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -210,6 +210,7 @@ private static boolean uninstallAddOnExtensions(AddOn addOn, AddOnUninstallation
 
         callback.extensionsWillBeRemoved(addOn.getLoadedExtensions().size());
         List<Extension> extensions = new ArrayList<>(addOn.getLoadedExtensions());
+        Collections.reverse(extensions);
         for (Extension ext : extensions) {
             uninstalledWithoutErrors &= uninstallAddOnExtension(addOn, ext, callback);
         }

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -516,7 +516,9 @@ public void stop() {
 		try {
 			if (!this.threadPool.awaitTermination(2, TimeUnit.SECONDS)) {
 				log.warn("Failed to await for all spider threads to stop in the given time (2s)...");
-				this.threadPool.shutdownNow();
+				for (Runnable task : this.threadPool.shutdownNow()) {
+					((SpiderTask) task).cleanup();
+				}
 			}
 		} catch (InterruptedException ignore) {
 			log.warn("Interrupted while awaiting for all spider threads to stop...");

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -47,6 +47,7 @@
 // ZAP: 2015/10/21 Issue 1576: Support data driven content
 // ZAP: 2015/11/05 Change findNode(..) methods to match top level nodes
 // ZAP: 2015/11/09 Fix NullPointerException when creating a HistoryReference with a request URI without path
+// ZAP: 2016/04/21 Issue 2342: Checks non-empty method for deletion of SiteNodes via API 
 
 package org.parosproxy.paros.model;
 
@@ -546,7 +547,7 @@ private String getLeafName(String nodeName, HttpMessage msg) {
     private String getLeafName(String nodeName, URI uri, String method, String postData) {
         String leafName;
         
-        if (method != null) {
+        if (method != null && !method.isEmpty()) {
         	leafName = method + ":" + nodeName;
         } else {
         	leafName = nodeName;

File: src/org/parosproxy/paros/core/scanner/AbstractAppPlugin.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 // ZAP: 2013/05/02 Re-arranged all modifiers into Java coding standard order
 // ZAP: 2014/06/26 Added the possibility to evaluate the current plugin/process progress
+// ZAP: 2016/04/21 Remove manual progress change, HostProcess takes care of that
 
 package org.parosproxy.paros.core.scanner;
 
@@ -39,8 +40,5 @@ public void notifyPluginCompleted(HostProcess parent) {
         /*	no need to notify parent this plugin is completed.  HostProcess will wait each
          	AbstractAppPlugin to finish.
          */
-
-        // ZAP: set the progress in the HostProcess
-        parent.setTestCurrentCount(this, parent.getTestCurrentCount(this) + 1);
     }
 }

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -48,6 +48,7 @@
 // ZAP: 2015/07/26 Issue 1618: Target Technology Not Honored
 // ZAP: 2015/08/19 Issue 1785: Plugin enabled even if dependencies are not, "hangs" active scan
 // ZAP: 2016/03/22 Implement init() and getDependency() by default, most plugins do not use them
+// ZAP: 2016/04/21 Include Plugin itself when notifying of a new message sent
 
 package org.parosproxy.paros.core.scanner;
 
@@ -258,7 +259,7 @@ protected void sendAndReceive(HttpMessage msg, boolean isFollowRedirect, boolean
         parent.getHttpSender().sendAndReceive(msg, isFollowRedirect);
         
         // ZAP: Notify parent
-        parent.notifyNewMessage(msg);
+        parent.notifyNewMessage(this, msg);
         
         //ZAP: Set the history reference back and run the "afterScan" methods of any ScannerHooks
         parent.performScannerHookAfterScan(msg, this);

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -607,7 +607,6 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			resultList = new ApiResponseList(name);
 			activeScan = getActiveScan(params);
 			if (activeScan != null) {
-				activeScan.updatePluginRequestCounts();
 				for (HostProcess hp : activeScan.getHostProcesses()) {
 					ApiResponseList hpList = new ApiResponseList("HostProcess");
 					resultList.addItem(new ApiResponseElement("id", XMLStringUtil.escapeControlChrs(hp.getHostAndPort())));

File: src/org/zaproxy/zap/extension/ascan/ScanProgressTableModel.java
Patch:
@@ -238,7 +238,6 @@ public ScanProgressActionIcon getFocusedAction() {
      */
     public void updateValues(ActiveScan scan, HostProcess hp) {
         values.clear();
-        scan.updatePluginRequestCounts();
         
         // Iterate all Plugins
         for (Plugin plugin : hp.getCompleted()) {

File: src/org/parosproxy/paros/core/scanner/AbstractAppPlugin.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 // ZAP: 2013/05/02 Re-arranged all modifiers into Java coding standard order
 // ZAP: 2014/06/26 Added the possibility to evaluate the current plugin/process progress
+// ZAP: 2016/04/21 Remove manual progress change, HostProcess takes care of that
 
 package org.parosproxy.paros.core.scanner;
 
@@ -39,8 +40,5 @@ public void notifyPluginCompleted(HostProcess parent) {
         /*	no need to notify parent this plugin is completed.  HostProcess will wait each
          	AbstractAppPlugin to finish.
          */
-
-        // ZAP: set the progress in the HostProcess
-        parent.setTestCurrentCount(this, parent.getTestCurrentCount(this) + 1);
     }
 }

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -48,6 +48,7 @@
 // ZAP: 2015/07/26 Issue 1618: Target Technology Not Honored
 // ZAP: 2015/08/19 Issue 1785: Plugin enabled even if dependencies are not, "hangs" active scan
 // ZAP: 2016/03/22 Implement init() and getDependency() by default, most plugins do not use them
+// ZAP: 2016/04/21 Include Plugin itself when notifying of a new message sent
 
 package org.parosproxy.paros.core.scanner;
 
@@ -258,7 +259,7 @@ protected void sendAndReceive(HttpMessage msg, boolean isFollowRedirect, boolean
         parent.getHttpSender().sendAndReceive(msg, isFollowRedirect);
         
         // ZAP: Notify parent
-        parent.notifyNewMessage(msg);
+        parent.notifyNewMessage(this, msg);
         
         //ZAP: Set the history reference back and run the "afterScan" methods of any ScannerHooks
         parent.performScannerHookAfterScan(msg, this);

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -607,7 +607,6 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			resultList = new ApiResponseList(name);
 			activeScan = getActiveScan(params);
 			if (activeScan != null) {
-				activeScan.updatePluginRequestCounts();
 				for (HostProcess hp : activeScan.getHostProcesses()) {
 					ApiResponseList hpList = new ApiResponseList("HostProcess");
 					resultList.addItem(new ApiResponseElement("id", XMLStringUtil.escapeControlChrs(hp.getHostAndPort())));

File: src/org/zaproxy/zap/extension/ascan/ScanProgressTableModel.java
Patch:
@@ -238,7 +238,6 @@ public ScanProgressActionIcon getFocusedAction() {
      */
     public void updateValues(ActiveScan scan, HostProcess hp) {
         values.clear();
-        scan.updatePluginRequestCounts();
         
         // Iterate all Plugins
         for (Plugin plugin : hp.getCompleted()) {

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -47,6 +47,7 @@
 // ZAP: 2015/10/21 Issue 1576: Support data driven content
 // ZAP: 2015/11/05 Change findNode(..) methods to match top level nodes
 // ZAP: 2015/11/09 Fix NullPointerException when creating a HistoryReference with a request URI without path
+// ZAP: 2016/04/21 Issue 2342: Checks non-empty method for deletion of SiteNodes via API 
 
 package org.parosproxy.paros.model;
 
@@ -546,7 +547,7 @@ private String getLeafName(String nodeName, HttpMessage msg) {
     private String getLeafName(String nodeName, URI uri, String method, String postData) {
         String leafName;
         
-        if (method != null) {
+        if (method != null && !method.isEmpty()) {
         	leafName = method + ":" + nodeName;
         } else {
         	leafName = nodeName;

File: src/org/zaproxy/zap/extension/globalexcludeurl/ExtensionGlobalExcludeURL.java
Patch:
@@ -87,7 +87,6 @@ protected GlobalExcludeURLParam getParam() {
 	@Override
 	public void optionsLoaded() {
 		GlobalExcludeURLParam geup = getParam();
-		log.warn("GlobalExcludeURL.optionsLoaded()");
 		geup.parse();
 	}
 	

File: src/org/zaproxy/zap/extension/globalexcludeurl/OptionsGlobalExcludeURLPanel.java
Patch:
@@ -106,11 +106,12 @@ public void saveParam(Object obj) throws Exception {
 	    globalExcludeURLParam.parse();
 	    List<String> ignoredRegexs = globalExcludeURLParam.getTokensNames();
 
-	    log.warn(ignoredRegexs.toString());
 	    Model.getSingleton().getSession().setGlobalExcludeURLRegexs(ignoredRegexs);
 	    // after saving, force the proxy/spider/scanner to refresh the URL lists.
 	    Model.getSingleton().getSession().forceGlobalExcludeURLRefresh();
-	    log.debug("Done saving Global Exclude URL");
+	    if (log.isDebugEnabled()) {
+	        log.debug("Done saving Global Exclude URL: " + ignoredRegexs.toString());
+	    }
     }
 
     /**

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -150,7 +150,7 @@ public void alertFound(Alert alert, HistoryReference ref) {
             writeAlertToDB(alert, ref);
 
             try {
-                if (getView() == null) {
+                if (getView() == null || EventQueue.isDispatchThread()) {
                     SessionStructure.addPath(Model.getSingleton().getSession(), ref, alert.getMessage());
                 } else {
                     final HistoryReference fRef = ref;

File: src/org/parosproxy/paros/control/MenuToolsControl.java
Patch:
@@ -23,6 +23,7 @@
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2016/04/04 Do not require a restart to show/hide the tool bar
+// ZAP: 2016/04/06 Fix layouts' issues
 package org.parosproxy.paros.control;
 
 import javax.swing.JOptionPane;
@@ -79,7 +80,7 @@ public void options(String panel) {
 		    // ZAP: Notify all OptionsChangedListener.
 		    control.getExtensionLoader().optionsChangedAllPlugin(model.getOptionsParam());
 		    
-		    view.setMainToolbarVisible(model.getOptionsParam().getViewParam().isShowMainToolbar());
+		    view.getMainFrame().applyViewOptions();
 
 		    control.getProxy().stopServer();
 		    control.getProxy().startServer();

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -128,8 +128,6 @@ private void init(final boolean firstTime) {
 
         FontUtils.setDefaultFont(viewParam.getFontName(), viewParam.getFontSize());
 
-        View.setDisplayOption(viewParam.getDisplayOption());
-
         setupLocale(options);
 
         View.getSingleton().showSplashScreen();

File: src/org/parosproxy/paros/control/MenuToolsControl.java
Patch:
@@ -23,6 +23,7 @@
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2016/04/04 Do not require a restart to show/hide the tool bar
+// ZAP: 2016/04/06 Fix layouts' issues
 package org.parosproxy.paros.control;
 
 import javax.swing.JOptionPane;
@@ -79,7 +80,7 @@ public void options(String panel) {
 		    // ZAP: Notify all OptionsChangedListener.
 		    control.getExtensionLoader().optionsChangedAllPlugin(model.getOptionsParam());
 		    
-		    view.setMainToolbarVisible(model.getOptionsParam().getViewParam().isShowMainToolbar());
+		    view.getMainFrame().applyViewOptions();
 
 		    control.getProxy().stopServer();
 		    control.getProxy().startServer();

File: src/org/zaproxy/zap/GuiBootstrap.java
Patch:
@@ -128,8 +128,6 @@ private void init(final boolean firstTime) {
 
         FontUtils.setDefaultFont(viewParam.getFontName(), viewParam.getFontSize());
 
-        View.setDisplayOption(viewParam.getDisplayOption());
-
         setupLocale(options);
 
         View.getSingleton().showSplashScreen();

File: src/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -47,6 +47,7 @@
 // ZAP: 2015/10/21 Issue 1576: Support data driven content
 // ZAP: 2016/01/26 Fixed findbugs warning
 // ZAP: 2016/03/24 Do not access EDT in daemon mode
+// ZAP: 2016/04/12 Notify of changes when an alert is updated
 
 package org.parosproxy.paros.model;
 
@@ -373,7 +374,7 @@ public void updateAlert(Alert alert) {
 	    		// Updating an alert might affect the nodes visibility in a filtered tree
 	    		siteMap.applyFilter(this);
 	    	}
-		
+	    	this.nodeChanged();
 		}
     }
     

File: src/org/zaproxy/zap/extension/alert/AlertTreeModel.java
Patch:
@@ -99,7 +99,7 @@ private AlertNode findLeafNodeForAlert(AlertNode parent, Alert alert) {
     }
     
     void updatePath(final Alert originalAlert, final Alert alert) {
-        if (EventQueue.isDispatchThread()) {
+        if (!View.isInitialised() || EventQueue.isDispatchThread()) {
         	updatePathEventHandler(originalAlert, alert);
         } else {
             try {

File: src/org/zaproxy/zap/extension/ascan/ActiveScript2.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.parosproxy.paros.network.HttpMessage;
 
-public interface ActiveScript2 extends ActiveScript {
+public interface ActiveScript2 {
 
 	void scanNode(ScriptsActiveScanner sas, HttpMessage msg) throws ScriptException;
 }

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -56,6 +56,7 @@
 // ZAP: 2015/02/24 Issue 1540: Allow proxy scripts to fake responses
 // ZAP: 2015/07/17 Show stack trace of the exceptions on proxy errors
 // ZAP: 2016/03/18 Issue 2318: ZAP Error [java.net.SocketTimeoutException]: Read timed out when running on AWS EC2 instance
+// ZAP: 2016/04/13 Notify of timeouts when reading a response
 
 package org.parosproxy.paros.core.proxy;
 
@@ -396,6 +397,7 @@ protected void processHttp(HttpRequestHeader requestHeader, boolean isSecure) th
 			    } catch (SocketTimeoutException e) {
 			        setErrorResponse(msg, GATEWAY_TIMEOUT_RESPONSE_STATUS, e);
 
+			        notifyListenerResponseReceive(msg);
 			        writeHttpResponse(msg, httpOut);
 			    } catch (IOException e) {
 			    	setErrorResponse(msg, BAD_GATEWAY_RESPONSE_STATUS, e);

File: src/org/parosproxy/paros/control/MenuToolsControl.java
Patch:
@@ -22,6 +22,7 @@
 //      options have changed.
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2016/04/04 Do not require a restart to show/hide the tool bar
 package org.parosproxy.paros.control;
 
 import javax.swing.JOptionPane;
@@ -78,6 +79,8 @@ public void options(String panel) {
 		    // ZAP: Notify all OptionsChangedListener.
 		    control.getExtensionLoader().optionsChangedAllPlugin(model.getOptionsParam());
 		    
+		    view.setMainToolbarVisible(model.getOptionsParam().getViewParam().isShowMainToolbar());
+
 		    control.getProxy().stopServer();
 		    control.getProxy().startServer();
 		}

File: src/org/parosproxy/paros/extension/option/OptionsViewPanel.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2014/04/25 Issue 642: Add timestamps to Output tab(s)
 // ZAP: 2014/10/09 Issue 1359: Options for splash screen
 // ZAP: 2014/12/16 Issue 1466: Config option for 'large display' size
+// ZAP: 2016/04/04 Do not require a restart to show/hide the tool bar
 
 package org.parosproxy.paros.extension.option;
 
@@ -490,7 +491,7 @@ public void initParam(Object obj) {
 	    getChkProcessImages().setSelected(options.getViewParam().getProcessImages() > 0);
 	    displaySelect.setSelectedIndex(options.getViewParam().getDisplayOption());
 	    brkPanelViewSelect.setSelectedIndex(options.getViewParam().getBrkPanelViewOption());
-	    getChkShowMainToolbar().setSelected(options.getViewParam().getShowMainToolbar() > 0);
+	    getChkShowMainToolbar().setSelected(options.getViewParam().isShowMainToolbar());
 	    chkAdvancedView.setSelected(options.getViewParam().getAdvancedViewOption() > 0);
 	    chkAskOnExit.setSelected(options.getViewParam().getAskOnExitOption() > 0);
 	    chkWmUiHandling.setSelected(options.getViewParam().getWmUiHandlingOption() > 0);
@@ -516,7 +517,7 @@ public void saveParam (Object obj) throws Exception {
 	    options.getViewParam().setProcessImages((getChkProcessImages().isSelected()) ? 1 : 0);
 	    options.getViewParam().setDisplayOption(displaySelect.getSelectedIndex());
 	    options.getViewParam().setBrkPanelViewOption(brkPanelViewSelect.getSelectedIndex());
-	    options.getViewParam().setShowMainToolbar((getChkShowMainToolbar().isSelected()) ? 1 : 0);
+	    options.getViewParam().setShowMainToolbar(getChkShowMainToolbar().isSelected());
 	    options.getViewParam().setAdvancedViewOption(getChkAdvancedView().isSelected() ? 1 : 0);
 	    options.getViewParam().setAskOnExitOption(getChkAskOnExit().isSelected() ? 1 : 0);
 	    options.getViewParam().setWmUiHandlingOption(getChkWmUiHandling().isSelected() ? 1 : 0);

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -423,7 +423,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 			ApiResponseList resultUrls = new ApiResponseList(name);
 			SpiderScan scan = (SpiderScan) this.getSpiderScan(params);
 			ApiResponseList resultList = new ApiResponseList("urlsInScope");
-			synchronized (scan.getResults()) {
+			synchronized (scan.getResourcesFound()) {
 				for (SpiderResource sr : scan.getResourcesFound()) {
 					Map<String, String> map = new HashMap<>();
 					map.put("messageId", Integer.toString(sr.getHistoryId()));

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -423,7 +423,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 			ApiResponseList resultUrls = new ApiResponseList(name);
 			SpiderScan scan = (SpiderScan) this.getSpiderScan(params);
 			ApiResponseList resultList = new ApiResponseList("urlsInScope");
-			synchronized (scan.getResults()) {
+			synchronized (scan.getResourcesFound()) {
 				for (SpiderResource sr : scan.getResourcesFound()) {
 					Map<String, String> map = new HashMap<>();
 					map.put("messageId", Integer.toString(sr.getHistoryId()));

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -57,6 +57,7 @@
 // ZAP: 2015/04/02 Issue 321: Support multiple databases and Issue 1582: Low memory option
 // ZAP: 2015/09/17 Issue 1914: Support multiple add-on directories
 // ZAP: 2015/11/04 Issue 1920: Report the host:port ZAP is listening on in daemon mode, or exit if it cant
+// ZAP: 2016/03/23 Issue 2331: Custom Context Panels not show in existing contexts after installation of add-on
 
 package org.parosproxy.paros.control;
 
@@ -123,6 +124,7 @@ private boolean init(ControlOverrides overrides) {
 		    getExtensionLoader().hookSiteMapListener(view.getSiteTreePanel());
 		}
 		
+		model.postInit();
 		return proxy.startServer();
     }
 

File: src/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScanner.java
Patch:
@@ -311,7 +311,7 @@ public boolean equals(Object object) {
     }
     
 	private void matched(HttpMessage msg, int id) {
-		if (tagHistoryType(msg.getHistoryRef().getHistoryId())) {
+		if (tagHistoryType(msg.getHistoryRef().getHistoryType())) {
 			parent.addTag(id, this.getConf());
 		}
 		

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -175,7 +175,7 @@ public CoreAPI() {
 				new String[] { PARAM_FOLLOW_REDIRECTS }));
 		this.addApiAction(new ApiAction(ACTION_DELETE_ALL_ALERTS));
 		this.addApiAction(new ApiAction(ACTION_COLLECT_GARBAGE));
-		this.addApiAction(new ApiAction(ACTION_CLEAR_STATS, new String[] {PARAM_KEY_PREFIX}));
+		this.addApiAction(new ApiAction(ACTION_CLEAR_STATS, null, new String[] {PARAM_KEY_PREFIX}));
 		
 		this.addApiView(new ApiView(VIEW_ALERT, new String[] {PARAM_ID}));
 		this.addApiView(new ApiView(VIEW_ALERTS, null, 

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -232,6 +232,7 @@ protected static boolean uninstallAddOnExtension(
             AddOnUninstallationProgressCallback callback) {
         boolean uninstalledWithoutErrors = true;
         if (extension.isEnabled()) {
+            String extUiName = extension.getUIName();
             if (extension.canUnload()) {
                 logger.debug("Unloading ext: " + extension.getName());
                 try {
@@ -246,7 +247,7 @@ protected static boolean uninstallAddOnExtension(
                 logger.debug("Cant dynamically unload ext: " + extension.getName());
                 uninstalledWithoutErrors = false;
             }
-            callback.extensionRemoved(extension.getUIName());
+            callback.extensionRemoved(extUiName);
         }
         addOn.removeLoadedExtension(extension);
 

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -232,6 +232,7 @@ protected static boolean uninstallAddOnExtension(
             AddOnUninstallationProgressCallback callback) {
         boolean uninstalledWithoutErrors = true;
         if (extension.isEnabled()) {
+            String extUiName = extension.getUIName();
             if (extension.canUnload()) {
                 logger.debug("Unloading ext: " + extension.getName());
                 try {
@@ -246,7 +247,7 @@ protected static boolean uninstallAddOnExtension(
                 logger.debug("Cant dynamically unload ext: " + extension.getName());
                 uninstalledWithoutErrors = false;
             }
-            callback.extensionRemoved(extension.getUIName());
+            callback.extensionRemoved(extUiName);
         }
         addOn.removeLoadedExtension(extension);
 

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -173,7 +173,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 		if (this.getOptionsParamApi().isSecureOnly() && ! requestHeader.isSecure()) {
 			// Insecure request with secure only set, always ignore
 			logger.debug("handleApiRequest rejecting insecure request");
-			return false;
+			return true;
 		}
 			
 		logger.debug("handleApiRequest " + url);

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -173,7 +173,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 		if (this.getOptionsParamApi().isSecureOnly() && ! requestHeader.isSecure()) {
 			// Insecure request with secure only set, always ignore
 			logger.debug("handleApiRequest rejecting insecure request");
-			return false;
+			return true;
 		}
 			
 		logger.debug("handleApiRequest " + url);

File: src/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -159,13 +159,14 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
             if (cn == null) {
                 return this;
             }
+            String textRepresentation = obj != null ? obj.toString() : "";
             if (cn.isCheckBoxEnabled) {
 	            checkBox.setSelected(cn.isSelected);
 	            checkBox.setOpaque(cn.isSelected && cn.hasChildren && ! cn.allChildrenSelected);
 	        	checkBox.setVisible(true);
 	        	checkBox.setEnabled(true);
 	        	// TODO nasty hack to prevent top level node text being truncated - need a better fix for this :/
-	        	altLabel.setText(obj.toString()+"          ");
+	        	textRepresentation += "          ";
 	        	/* Looks ok, but doesnt work correctly
 	            if (cn.isSelected && cn.hasChildren && ! cn.allChildrenSelected) {
 	                checkBox.getModel().setPressed(true);
@@ -178,8 +179,8 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
             } else {
             	checkBox.setVisible(false);
             	checkBox.setEnabled(false);
-            	altLabel.setText(obj.toString());
             }
+            altLabel.setText(textRepresentation);
 
             return this;
         }       

File: src/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -159,13 +159,14 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
             if (cn == null) {
                 return this;
             }
+            String textRepresentation = obj != null ? obj.toString() : "";
             if (cn.isCheckBoxEnabled) {
 	            checkBox.setSelected(cn.isSelected);
 	            checkBox.setOpaque(cn.isSelected && cn.hasChildren && ! cn.allChildrenSelected);
 	        	checkBox.setVisible(true);
 	        	checkBox.setEnabled(true);
 	        	// TODO nasty hack to prevent top level node text being truncated - need a better fix for this :/
-	        	altLabel.setText(obj.toString()+"          ");
+	        	textRepresentation += "          ";
 	        	/* Looks ok, but doesnt work correctly
 	            if (cn.isSelected && cn.hasChildren && ! cn.allChildrenSelected) {
 	                checkBox.getModel().setPressed(true);
@@ -178,8 +179,8 @@ public Component getTreeCellRendererComponent(JTree tree, Object value,
             } else {
             	checkBox.setVisible(false);
             	checkBox.setEnabled(false);
-            	altLabel.setText(obj.toString());
             }
+            altLabel.setText(textRepresentation);
 
             return this;
         }       

File: src/org/zaproxy/zap/extension/api/ContextAPI.java
Patch:
@@ -260,7 +260,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
             result = new ApiResponseElement(name, contextNames.toString());
             break;
         case VIEW_CONTEXT:
-        	result = buildResponseFromContext(getContext(params));
+        	result = new ApiResponseElement(buildResponseFromContext(getContext(params)));
         	break;
         case VIEW_ALL_TECHS:
         	resultList = new ApiResponseList(name);
@@ -341,7 +341,7 @@ private ApiResponse buildResponseFromContext(Context c) {
 		fields.put("postParameterParserClass", c.getPostParamParser().getClass().getCanonicalName());
 		fields.put("postParameterParserConfig", c.getPostParamParser().getConfig());
 		
-		return new ApiResponseSet(c.getName(), fields);
+		return new ApiResponseSet("context", fields);
 	}
 	
 	/**

File: src/org/zaproxy/zap/extension/alert/AlertTreeModel.java
Patch:
@@ -44,7 +44,7 @@ class AlertTreeModel extends DefaultTreeModel {
     }
     
     private String getRiskString (Alert alert) {
-		return "<html><img src=\"" + alert.getIconUrl() + "\">&nbsp;" + alert.getAlert() + "<html>";
+		return "<html><img src=\"" + alert.getIconUrl() + "\">&nbsp;" + alert.getName() + "<html>";
     }
     
     void addPath(final Alert alert) {

File: src/org/zaproxy/zap/extension/alert/PopupMenuShowAlerts.java
Patch:
@@ -68,7 +68,7 @@ public boolean isButtonEnabledForHistoryReference (HistoryReference href) {
 			if (hrefURI != null && ! alert.getUri().equals(hrefURI.toString())) {
 				continue;
 			}
-			final PopupMenuShowAlert menuItem = new PopupMenuShowAlert(alert.getAlert(), alert);
+			final PopupMenuShowAlert menuItem = new PopupMenuShowAlert(alert.getName(), alert);
 			menuItem.setIcon(new ImageIcon(alert.getIconUrl()));
 			
 			alertList.add(menuItem);

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -974,7 +974,8 @@ private ApiResponseSet alertToSet(Alert alert) {
 		Map<String, String> map = new HashMap<>();
 		map.put("id", String.valueOf(alert.getAlertId()));
 		map.put("pluginId", String.valueOf(alert.getPluginId()));
-		map.put("alert", alert.getAlert());
+		map.put("alert", alert.getName()); //Deprecated in TODO add version, maintain for compatibility with custom code
+		map.put("name", alert.getName());
 		map.put("description", alert.getDescription());
 		map.put("risk", Alert.MSG_RISK[alert.getRisk()]);
 		map.put("confidence", Alert.MSG_CONFIDENCE[alert.getConfidence()]);

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -608,7 +608,7 @@ public void onHttpRequestSend(HttpMessage msg, int initiator, HttpSender sender)
 	@Override
 	public void onHttpResponseReceive(HttpMessage msg, int initiator, HttpSender sender) {
 		if (initiator == HttpSender.ACTIVE_SCANNER_INITIATOR || initiator == HttpSender.SPIDER_INITIATOR
-				|| initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR) {
+				|| initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR || initiator == HttpSender.FUZZER_INITIATOR) {
 			// Not a session we care about
 			return;
 		}

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -608,7 +608,7 @@ public void onHttpRequestSend(HttpMessage msg, int initiator, HttpSender sender)
 	@Override
 	public void onHttpResponseReceive(HttpMessage msg, int initiator, HttpSender sender) {
 		if (initiator == HttpSender.ACTIVE_SCANNER_INITIATOR || initiator == HttpSender.SPIDER_INITIATOR
-				|| initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR) {
+				|| initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR || initiator == HttpSender.FUZZER_INITIATOR) {
 			// Not a session we care about
 			return;
 		}

File: src/org/parosproxy/paros/extension/history/HistoryFilter.java
Patch:
@@ -203,7 +203,7 @@ public String toShortString() {
 			empty = false;
 			sb.append(Constant.messages.getString("history.filter.label.notes"));
 		}
-		if (urlIncPatternList.size() > 0 || urlIncPatternList.size() > 0) {
+		if (urlIncPatternList != null && urlIncPatternList.size() > 0) {
 			if (empty) {
 				sb.append(Constant.messages.getString("history.filter.label.on"));
 				sb.append(' ');
@@ -213,7 +213,7 @@ public String toShortString() {
 			empty = false;
 			sb.append(Constant.messages.getString("history.filter.label.urlincregex"));
 		}
-		if (urlExcPatternList.size() > 0 || urlExcPatternList.size() > 0) {
+		if (urlExcPatternList != null && urlExcPatternList.size() > 0) {
 			if (empty) {
 				sb.append(Constant.messages.getString("history.filter.label.on"));
 				sb.append(' ');

File: src/org/zaproxy/zap/db/sql/DbSQL.java
Patch:
@@ -94,11 +94,10 @@ public static String getDbType() {
 		return dbType;
 	}
 	
-	public Database initDatabase() throws IllegalStateException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
+	public synchronized Database initDatabase() throws IllegalStateException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
 		if (dbProperties != null) {
 			throw new IllegalStateException("Database already initialised");
 		}
-		
 		File file = new File (Constant.getZapHome() + File.separator + "db", "db.properties");
 		if (! file.exists()) {
 			file = new File (Constant.getZapInstall() + File.separator + "db", "db.properties");

File: src/org/zaproxy/zap/eventBus/SimpleEventBus.java
Patch:
@@ -203,7 +203,7 @@ public void addComsumer(EventConsumer consumer, String [] eventTypes) {
 		}
 		public void removeComsumer(EventConsumer consumer) {
 			for (RegisteredConsumer cons : consumers) {
-				if (cons.equals(consumer)) {
+				if (cons.getConsumer().equals(consumer)) {
 					this.consumers.remove(cons);
 					return;
 				}

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -324,7 +324,7 @@ public void sessionChanged(Session session) {
 		}
 
 		synchronized (valueToToken) {
-			valueToToken = new HashMap<>();
+			valueToToken.clear();
 		}
 		// search for tokens...
         try {

File: src/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -16,7 +16,6 @@
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTree;
-import javax.swing.event.EventListenerList;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.DefaultTreeModel;
 import javax.swing.tree.DefaultTreeSelectionModel;
@@ -60,7 +59,6 @@ public CheckedNode(boolean isSelected_, boolean hasChildren_, boolean allChildre
     HashSet<TreePath> checkedPaths = new HashSet<TreePath>();
 
     // Defining a new event type for the checking mechanism and preparing event-handling mechanism
-    protected EventListenerList listenerList = new EventListenerList();
 
     public class CheckChangeEvent extends EventObject {     
         private static final long serialVersionUID = -8100230309044193368L;

File: src/org/zaproxy/zap/view/ScanPanel2.java
Patch:
@@ -617,9 +617,7 @@ public boolean equals(Object obj) {
             }
             ScanEntry<?> other = (ScanEntry<?>) obj;
             if (scan == null) {
-                if (other.scan != null) {
-                    return false;
-                }
+                return (other.scan == null);
             } else if (other.scan == null) {
                 return false;
             }

File: src/org/zaproxy/zap/view/renderer/DateFormatStringValue.java
Patch:
@@ -38,6 +38,9 @@ public class DateFormatStringValue implements StringValue {
     public DateFormatStringValue() {
     }
 
+    /**
+     * This method is not threadsafe and should therefore only be called from the EDT
+     */
     @Override
     public String getString(Object value) {
         try {

File: src/org/parosproxy/paros/extension/history/HistoryFilter.java
Patch:
@@ -203,7 +203,7 @@ public String toShortString() {
 			empty = false;
 			sb.append(Constant.messages.getString("history.filter.label.notes"));
 		}
-		if (urlIncPatternList.size() > 0 || urlIncPatternList.size() > 0) {
+		if (urlIncPatternList != null && urlIncPatternList.size() > 0) {
 			if (empty) {
 				sb.append(Constant.messages.getString("history.filter.label.on"));
 				sb.append(' ');
@@ -213,7 +213,7 @@ public String toShortString() {
 			empty = false;
 			sb.append(Constant.messages.getString("history.filter.label.urlincregex"));
 		}
-		if (urlExcPatternList.size() > 0 || urlExcPatternList.size() > 0) {
+		if (urlExcPatternList != null && urlExcPatternList.size() > 0) {
 			if (empty) {
 				sb.append(Constant.messages.getString("history.filter.label.on"));
 				sb.append(' ');

File: src/org/zaproxy/zap/db/sql/DbSQL.java
Patch:
@@ -94,11 +94,10 @@ public static String getDbType() {
 		return dbType;
 	}
 	
-	public Database initDatabase() throws IllegalStateException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
+	public synchronized Database initDatabase() throws IllegalStateException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
 		if (dbProperties != null) {
 			throw new IllegalStateException("Database already initialised");
 		}
-		
 		File file = new File (Constant.getZapHome() + File.separator + "db", "db.properties");
 		if (! file.exists()) {
 			file = new File (Constant.getZapInstall() + File.separator + "db", "db.properties");

File: src/org/zaproxy/zap/eventBus/SimpleEventBus.java
Patch:
@@ -203,7 +203,7 @@ public void addComsumer(EventConsumer consumer, String [] eventTypes) {
 		}
 		public void removeComsumer(EventConsumer consumer) {
 			for (RegisteredConsumer cons : consumers) {
-				if (cons.equals(consumer)) {
+				if (cons.getConsumer().equals(consumer)) {
 					this.consumers.remove(cons);
 					return;
 				}

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -324,7 +324,7 @@ public void sessionChanged(Session session) {
 		}
 
 		synchronized (valueToToken) {
-			valueToToken = new HashMap<>();
+			valueToToken.clear();
 		}
 		// search for tokens...
         try {

File: src/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -16,7 +16,6 @@
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTree;
-import javax.swing.event.EventListenerList;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.DefaultTreeModel;
 import javax.swing.tree.DefaultTreeSelectionModel;
@@ -60,7 +59,6 @@ public CheckedNode(boolean isSelected_, boolean hasChildren_, boolean allChildre
     HashSet<TreePath> checkedPaths = new HashSet<TreePath>();
 
     // Defining a new event type for the checking mechanism and preparing event-handling mechanism
-    protected EventListenerList listenerList = new EventListenerList();
 
     public class CheckChangeEvent extends EventObject {     
         private static final long serialVersionUID = -8100230309044193368L;

File: src/org/zaproxy/zap/view/ScanPanel2.java
Patch:
@@ -617,9 +617,7 @@ public boolean equals(Object obj) {
             }
             ScanEntry<?> other = (ScanEntry<?>) obj;
             if (scan == null) {
-                if (other.scan != null) {
-                    return false;
-                }
+                return (other.scan == null);
             } else if (other.scan == null) {
                 return false;
             }

File: src/org/zaproxy/zap/view/renderer/DateFormatStringValue.java
Patch:
@@ -38,6 +38,9 @@ public class DateFormatStringValue implements StringValue {
     public DateFormatStringValue() {
     }
 
+    /**
+     * This method is not threadsafe and should therefore only be called from the EDT
+     */
     @Override
     public String getString(Object value) {
         try {

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.EventQueue;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.LinkedList;
 import java.util.List;
@@ -280,7 +281,7 @@ private boolean isContainsNodesInContext(SiteNode node) {
 	}
 
 	public List<String> getIncludeInContextRegexs() {
-		return includeInRegexs;
+		return Collections.unmodifiableList(includeInRegexs);
 	}
 
 	private void checkRegexs(List<String> regexs) throws Exception {
@@ -336,7 +337,7 @@ public void addIncludeInContextRegex(String includeRegex) {
 	}
 
 	public List<String> getExcludeFromContextRegexs() {
-		return excludeFromRegexs;
+		return Collections.unmodifiableList(excludeFromRegexs);
 	}
 
 	public void setExcludeFromContextRegexs(List<String> excludeRegexs) throws Exception {

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.EventQueue;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.LinkedList;
 import java.util.List;
@@ -280,7 +281,7 @@ private boolean isContainsNodesInContext(SiteNode node) {
 	}
 
 	public List<String> getIncludeInContextRegexs() {
-		return includeInRegexs;
+		return Collections.unmodifiableList(includeInRegexs);
 	}
 
 	private void checkRegexs(List<String> regexs) throws Exception {
@@ -336,7 +337,7 @@ public void addIncludeInContextRegex(String includeRegex) {
 	}
 
 	public List<String> getExcludeFromContextRegexs() {
-		return excludeFromRegexs;
+		return Collections.unmodifiableList(excludeFromRegexs);
 	}
 
 	public void setExcludeFromContextRegexs(List<String> excludeRegexs) throws Exception {

File: src/org/zaproxy/zap/extension/api/PhpAPIGenerator.java
Patch:
@@ -196,7 +196,7 @@ private void generatePhpElement(ApiElement element, String component,
 		String baseUrl = "base";
 		if (type.equals("other")) {
 			method += "other";
-			baseUrl += "other";
+			baseUrl += "_other";
 		}
 
 		out.write("\t\treturn $this->zap->" + method + "($this->zap->" + baseUrl + " . '" +

File: src/org/zaproxy/zap/extension/api/PhpAPIGenerator.java
Patch:
@@ -196,7 +196,7 @@ private void generatePhpElement(ApiElement element, String component,
 		String baseUrl = "base";
 		if (type.equals("other")) {
 			method += "other";
-			baseUrl += "other";
+			baseUrl += "_other";
 		}
 
 		out.write("\t\treturn $this->zap->" + method + "($this->zap->" + baseUrl + " . '" +

File: src/org/zaproxy/zap/authentication/AuthenticationHelper.java
Patch:
@@ -91,4 +91,7 @@ public void sendAndReceive(HttpMessage msg, boolean followRedirect) throws IOExc
 		this.httpSender.sendAndReceive(msg, followRedirect);
 	}
 
+	public HttpSender getHttpSender() {
+		return httpSender;
+	}
 }

File: src/org/zaproxy/zap/extension/users/UsersTableModel.java
Patch:
@@ -42,7 +42,7 @@ public class UsersTableModel extends AbstractMultipleOptionsTableModel<User> {
 	private static final long serialVersionUID = 4463944219657112162L;
 
 	/** The users. */
-	private List<User> users = new ArrayList<>();
+	private List<User> users;
 
 	/**
 	 * Instantiates a new users table model. An internal copy of the provided list is stored.

File: src/org/zaproxy/zap/extension/users/UsersTableModel.java
Patch:
@@ -42,7 +42,7 @@ public class UsersTableModel extends AbstractMultipleOptionsTableModel<User> {
 	private static final long serialVersionUID = 4463944219657112162L;
 
 	/** The users. */
-	private List<User> users = new ArrayList<>();
+	private List<User> users;
 
 	/**
 	 * Instantiates a new users table model. An internal copy of the provided list is stored.

File: src/org/zaproxy/zap/view/ContextListTableModel.java
Patch:
@@ -20,6 +20,7 @@
 
 package org.zaproxy.zap.view;
 
+import java.util.Collections;
 import java.util.List;
 
 import javax.swing.table.AbstractTableModel;
@@ -35,7 +36,7 @@ public class ContextListTableModel extends AbstractTableModel {
 				Constant.messages.getString("context.list.table.name"),
 				Constant.messages.getString("context.list.table.inscope")};
     
-    private List<Object[]> values = null;
+    private List<Object[]> values = Collections.emptyList();
     
     //private static Logger log = Logger.getLogger(ContextListTableModel.class);
 

File: src/org/zaproxy/zap/view/ContextListTableModel.java
Patch:
@@ -20,6 +20,7 @@
 
 package org.zaproxy.zap.view;
 
+import java.util.Collections;
 import java.util.List;
 
 import javax.swing.table.AbstractTableModel;
@@ -35,7 +36,7 @@ public class ContextListTableModel extends AbstractTableModel {
 				Constant.messages.getString("context.list.table.name"),
 				Constant.messages.getString("context.list.table.inscope")};
     
-    private List<Object[]> values = null;
+    private List<Object[]> values = Collections.emptyList();
     
     //private static Logger log = Logger.getLogger(ContextListTableModel.class);
 

File: src/org/zaproxy/clientapi/ant/SpiderUrlTask.java
Patch:
@@ -29,7 +29,7 @@ public class SpiderUrlTask extends ZapTask {
 	@Override
 	public void execute() throws BuildException {
 		try {
-			this.getClientApi().spider.scan(apikey, url, "", "", "");
+			this.getClientApi().spider.scan(apikey, url, "", "", null);
 			
 		} catch (Exception e) {
 			throw new BuildException(e);

File: src/org/zaproxy/zap/view/messagelocation/SelectMessageLocationsPanel.java
Patch:
@@ -95,7 +95,7 @@ public void addView(String componentName, HttpPanelView view, Object options, Fi
     public void removeView(String componentName, String viewName, Object options) {
         for (Iterator<HttpPanelView> it = views.iterator(); it.hasNext();) {
             HttpPanelView httpPanelView = it.next();
-            if (viewName.equals(httpPanelView)) {
+            if (viewName.equals(httpPanelView.getName())) {
                 ((MessageLocationProducer) httpPanelView).removeFocusListener(focusListeners);
                 it.remove();
                 break;

File: src/org/zaproxy/zap/view/messagelocation/SelectMessageLocationsPanel.java
Patch:
@@ -95,7 +95,7 @@ public void addView(String componentName, HttpPanelView view, Object options, Fi
     public void removeView(String componentName, String viewName, Object options) {
         for (Iterator<HttpPanelView> it = views.iterator(); it.hasNext();) {
             HttpPanelView httpPanelView = it.next();
-            if (viewName.equals(httpPanelView)) {
+            if (viewName.equals(httpPanelView.getName())) {
                 ((MessageLocationProducer) httpPanelView).removeFocusListener(focusListeners);
                 it.remove();
                 break;

File: src/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -41,6 +41,7 @@
 // ZAP: 2015/01/29 Issue 1489: Version number in window title
 // ZAP: 2015/02/05 Issue 1524: New Persist Session dialog
 // ZAP: 2015/04/02 Issue 321: Support multiple databases
+// ZAP: 2015/12/14 Log exception and internationalise error message
 
 package org.parosproxy.paros.control;
  
@@ -506,9 +507,9 @@ public void sessionOpened(File file, Exception e) {
             setTitle();
             //view.getMainFrame().setTitle(file.getName().replaceAll(".session\\z","") + " - " + Constant.PROGRAM_NAME);
         } else {
-            view.showWarningDialog("Error opening session file");
+            view.showWarningDialog(Constant.messages.getString("menu.file.openSession.errorFile"));
             if (file != null) {
-                log.error("Error opening session file " + file.getAbsolutePath());
+                log.error("Error opening session file " + file.getAbsolutePath(), e);
             } else {
             	// File is null for table based sessions (ie non HSQLDB)
                 log.error(e.getMessage(), e);

File: src/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -41,6 +41,7 @@
 // ZAP: 2015/01/29 Issue 1489: Version number in window title
 // ZAP: 2015/02/05 Issue 1524: New Persist Session dialog
 // ZAP: 2015/04/02 Issue 321: Support multiple databases
+// ZAP: 2015/12/14 Log exception and internationalise error message
 
 package org.parosproxy.paros.control;
  
@@ -506,9 +507,9 @@ public void sessionOpened(File file, Exception e) {
             setTitle();
             //view.getMainFrame().setTitle(file.getName().replaceAll(".session\\z","") + " - " + Constant.PROGRAM_NAME);
         } else {
-            view.showWarningDialog("Error opening session file");
+            view.showWarningDialog(Constant.messages.getString("menu.file.openSession.errorFile"));
             if (file != null) {
-                log.error("Error opening session file " + file.getAbsolutePath());
+                log.error("Error opening session file " + file.getAbsolutePath(), e);
             } else {
             	// File is null for table based sessions (ie non HSQLDB)
                 log.error(e.getMessage(), e);

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -53,6 +53,7 @@
 // ZAP: 2015/08/19 Change to use ZapXmlConfiguration instead of extending FileXML
 // ZAP: 2015/08/19 Issue 1789: Forced Browse/AJAX Spider messages not restored to Sites tab
 // ZAP: 2015/10/21 Issue 1576: Support data driven content
+// ZAP: 2015/12/14 Issue 2119: Context's description not imported
 
 package org.parosproxy.paros.model;
 
@@ -1274,7 +1275,7 @@ public Context importContext (File file) throws ConfigurationException, ClassNot
 		
 		Context c = this.getNewContext(config.getString(Context.CONTEXT_CONFIG_NAME));
 
-		c.setDescription(Context.CONTEXT_CONFIG_DESC);
+		c.setDescription(config.getString(Context.CONTEXT_CONFIG_DESC));
 		c.setInScope(config.getBoolean(Context.CONTEXT_CONFIG_INSCOPE));
 		for (Object obj : config.getList(Context.CONTEXT_CONFIG_INC_REGEXES)) {
 			c.addIncludeInContextRegex(obj.toString());

File: src/org/zaproxy/clientapi/gen/Authentication.java
Patch:
@@ -79,7 +79,9 @@ public ApiResponse setAuthenticationMethod(String apikey, String contextid, Stri
 		}
 		map.put("contextId", contextid);
 		map.put("authMethodName", authmethodname);
-		map.put("authMethodConfigParams", authmethodconfigparams);
+		if (authmethodconfigparams != null) {
+			map.put("authMethodConfigParams", authmethodconfigparams);
+		}
 		return api.callApi("authentication", "action", "setAuthenticationMethod", map);
 	}
 

File: src/org/zaproxy/clientapi/gen/Params.java
Patch:
@@ -44,7 +44,9 @@ public Params(ClientApi api) {
 	public ApiResponse params(String site) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
-		map.put("site", site);
+		if (site != null) {
+			map.put("site", site);
+		}
 		return api.callApi("params", "view", "params", map);
 	}
 

File: src/org/zaproxy/clientapi/gen/Script.java
Patch:
@@ -93,7 +93,9 @@ public ApiResponse load(String apikey, String scriptname, String scripttype, Str
 		map.put("scriptType", scripttype);
 		map.put("scriptEngine", scriptengine);
 		map.put("fileName", filename);
-		map.put("scriptDescription", scriptdescription);
+		if (scriptdescription != null) {
+			map.put("scriptDescription", scriptdescription);
+		}
 		return api.callApi("script", "action", "load", map);
 	}
 

File: src/org/zaproxy/clientapi/gen/SessionManagement.java
Patch:
@@ -65,7 +65,9 @@ public ApiResponse setSessionManagementMethod(String apikey, String contextid, S
 		}
 		map.put("contextId", contextid);
 		map.put("methodName", methodname);
-		map.put("methodConfigParams", methodconfigparams);
+		if (methodconfigparams != null) {
+			map.put("methodConfigParams", methodconfigparams);
+		}
 		return api.callApi("sessionManagement", "action", "setSessionManagementMethod", map);
 	}
 

File: src/org/zaproxy/zap/utils/ClassLoaderUtil.java
Patch:
@@ -44,6 +44,9 @@ public static void addFile(File f) throws IOException {
      * @throws IOException IOException
      */
     public static void addURL(URL u) throws IOException {
+        if (!(ClassLoader.getSystemClassLoader() instanceof URLClassLoader)) {
+            return;
+        }
 
         URLClassLoader sysLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
         URL[] urls = sysLoader.getURLs();

File: src/org/zaproxy/zap/utils/ClassLoaderUtil.java
Patch:
@@ -44,6 +44,9 @@ public static void addFile(File f) throws IOException {
      * @throws IOException IOException
      */
     public static void addURL(URL u) throws IOException {
+        if (!(ClassLoader.getSystemClassLoader() instanceof URLClassLoader)) {
+            return;
+        }
 
         URLClassLoader sysLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
         URL[] urls = sysLoader.getURLs();

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -114,7 +114,7 @@ public class AddOnLoader extends URLClassLoader {
     private Map<String, AddOnClassLoader> addOnLoaders = new HashMap<>();
 
     public AddOnLoader(File[] dirs) {
-        super(new URL[0]);
+        super(new URL[0], AddOnLoader.class.getClassLoader());
         
         this.loadBlockList();
 

File: src/org/parosproxy/paros/extension/report/ReportLastScan.java
Patch:
@@ -27,6 +27,7 @@
 // ZAP: 2013/07/12 Issue 713: Add CWE and WASC numbers to issues
 // ZAP: 2013/12/03 Issue 933: Automatically determine install dir
 // ZAP: 2014/07/15 Issue 1263: Generate Report Clobbers Existing Files Without Prompting
+// ZAP: 2015/11/18 Issue 1555: Rework inclusion of HTML tags in reports 
 
 package org.parosproxy.paros.extension.report;
 
@@ -171,7 +172,7 @@ public String getDescription() {
         	switch(localReportType) {
         	case XML:
         		fileExtension=XML_FILE_EXTENSION;
-        		reportXSL = (Constant.getZapInstall() + "/xml/report.xml.xsl");
+        		reportXSL = null;	// Dont use XSLT
         		break;
         	case HTML:
         	default: 

File: src/org/zaproxy/zap/extension/forceduser/ForcedUserAPI.java
Patch:
@@ -102,6 +102,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			} catch (IllegalStateException ex) {
 				throw new ApiException(Type.USER_NOT_FOUND);
 			}
+			context.save();
 			return ApiResponseElement.OK;
 		case ACTION_SET_FORCED_USER_MODE_ENABLED:
 			if (!params.containsKey(PARAM_MODE_ENABLED))

File: src/org/zaproxy/zap/extension/sessions/SessionManagementAPI.java
Patch:
@@ -128,9 +128,11 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 				actionParams = API.getParams(params.getString(PARAM_METHOD_CONFIG_PARAMS));
 			else
 				actionParams = new JSONObject();
-			actionParams.put(PARAM_CONTEXT_ID, getContextId(params));
+			Context context = getContext(params);
+			actionParams.put(PARAM_CONTEXT_ID, context.getIndex());
 			// Run the method
 			getSetMethodActionImplementor(params).handleAction(actionParams);
+			context.save();
 			return ApiResponseElement.OK;
 		default:
 			throw new ApiException(Type.BAD_ACTION);

File: src/org/zaproxy/zap/extension/forceduser/ForcedUserAPI.java
Patch:
@@ -102,6 +102,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			} catch (IllegalStateException ex) {
 				throw new ApiException(Type.USER_NOT_FOUND);
 			}
+			context.save();
 			return ApiResponseElement.OK;
 		case ACTION_SET_FORCED_USER_MODE_ENABLED:
 			if (!params.containsKey(PARAM_MODE_ENABLED))

File: src/org/zaproxy/zap/extension/sessions/SessionManagementAPI.java
Patch:
@@ -128,9 +128,11 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 				actionParams = API.getParams(params.getString(PARAM_METHOD_CONFIG_PARAMS));
 			else
 				actionParams = new JSONObject();
-			actionParams.put(PARAM_CONTEXT_ID, getContextId(params));
+			Context context = getContext(params);
+			actionParams.put(PARAM_CONTEXT_ID, context.getIndex());
 			// Run the method
 			getSetMethodActionImplementor(params).handleAction(actionParams);
+			context.save();
 			return ApiResponseElement.OK;
 		default:
 			throw new ApiException(Type.BAD_ACTION);

File: src/org/zaproxy/zap/control/ControlOverrides.java
Patch:
@@ -42,7 +42,8 @@ public void setProxyPort(int proxyPort) {
 	}
 
 	public String getProxyHost() {
-		if (proxyHost == null || proxyHost.length() == 0) {
+		if (proxyHost != null && proxyHost.length() == 0) {
+			// Treat an empty string as the 'all interfaces' address (like the UI does)
 			return "0.0.0.0";
 		}
 		return proxyHost;

File: src/org/zaproxy/zap/control/ControlOverrides.java
Patch:
@@ -42,7 +42,8 @@ public void setProxyPort(int proxyPort) {
 	}
 
 	public String getProxyHost() {
-		if (proxyHost == null || proxyHost.length() == 0) {
+		if (proxyHost != null && proxyHost.length() == 0) {
+			// Treat an empty string as the 'all interfaces' address (like the UI does)
 			return "0.0.0.0";
 		}
 		return proxyHost;

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -58,6 +58,7 @@
 // ZAP: 2015/03/30 Issue 1582: Enablers for low memory option
 // ZAP: 2015/04/12 Remove "installation" fuzzers dir, no longer in use
 // ZAP: 2015/08/01 Remove code duplication in catch of exceptions, use installation directory in default config file
+// ZAP: 2015/11/11 Issue 2045: Dont copy old configs if -dir option used 
 
 package org.parosproxy.paros;
 
@@ -385,7 +386,8 @@ private void initializeFilesAndDirectories() {
                 	oldf = new File (zapHome + FILE_SEPARATOR + "zap" + FILE_SEPARATOR + FILE_CONFIG_NAME);
                 }
             	
-            	if (oldf.exists()) {
+            	if (oldf.exists() && Paths.get(zapHome).equals(Paths.get(getDefaultHomeDirectory(true)))) {
+            		// Dont copy old configs if they've specified a non std directory
             		log.info("Copying defaults from " + oldf.getAbsolutePath() + " to " + FILE_CONFIG);
             		copier.copy(oldf,f);
             		

File: src/org/zaproxy/zap/CommandLineBootstrap.java
Patch:
@@ -65,7 +65,7 @@ public int start() {
             throw new RuntimeException(e);
         }
 
-        Control control = initControl();
+        Control control = initControl(true);
 
         warnAddOnsAndExtensionsNoLongerRunnable();
 

File: src/org/zaproxy/zap/control/ControlOverrides.java
Patch:
@@ -42,6 +42,9 @@ public void setProxyPort(int proxyPort) {
 	}
 
 	public String getProxyHost() {
+		if (proxyHost == null || proxyHost.length() == 0) {
+			return "0.0.0.0";
+		}
 		return proxyHost;
 	}
 

File: src/org/zaproxy/zap/extension/brk/impl/http/PopupMenuAddBreakSites.java
Patch:
@@ -54,7 +54,8 @@ public boolean isButtonEnabledForSiteNode(SiteNode sn) {
     @Override
     public void performAction(SiteNode sn) {
         try {
-			uiManager.handleAddBreakpoint(new StructuralSiteNode(sn).getRegexPattern());
+			uiManager.handleAddBreakpoint(
+					new StructuralSiteNode(sn).getRegexPattern(false));
 		} catch (DatabaseException e) {
 			// Ignore
 		}

File: src/org/zaproxy/zap/extension/brk/impl/http/PopupMenuAddBreakSites.java
Patch:
@@ -54,7 +54,8 @@ public boolean isButtonEnabledForSiteNode(SiteNode sn) {
     @Override
     public void performAction(SiteNode sn) {
         try {
-			uiManager.handleAddBreakpoint(new StructuralSiteNode(sn).getRegexPattern());
+			uiManager.handleAddBreakpoint(
+					new StructuralSiteNode(sn).getRegexPattern(false));
 		} catch (DatabaseException e) {
 			// Ignore
 		}

File: src/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -36,6 +36,7 @@
 // ZAP: 2014/11/19 Issue 1412: Manage scan policies
 // ZAP: 2015/02/18 Issue 1062: Tidied up extension hooks
 // ZAP: 2015/04/02 Issue 1582: Low memory option
+// ZAP: 2015/10/21 Issue 1576: Removed SiteNode cast no longer needed
 
 package org.parosproxy.paros.core.scanner;
 
@@ -277,10 +278,10 @@ private String getHostAndPort(SiteNode node) {
 	        result = "";
 	    } else {
 	        SiteNode curNode = node;
-	        parent = (SiteNode) node.getParent();
+	        parent = node.getParent();
 	        while (!parent.isRoot()) {
 	            curNode = parent;
-	            parent = (SiteNode) curNode.getParent();
+	            parent = curNode.getParent();
 	        }
 	        result = curNode.getNodeName();
 	    }

File: src/org/parosproxy/paros/db/RecordContext.java
Patch:
@@ -66,6 +66,7 @@ public class RecordContext {
 	public static final int TYPE_URL_PARSER_CONFIG = 401;
 	public static final int TYPE_POST_PARSER_CLASSNAME = 402;
 	public static final int TYPE_POST_PARSER_CONFIG = 403;
+	public static final int TYPE_DATA_DRIVEN_NODES = 404;
 	
 	public static final int TYPE_ACCESS_CONTROL_RULE = 410;
 	

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuActiveScanSite.java
Patch:
@@ -67,7 +67,7 @@ public void performAction(SiteNode node) {
 	    if (node != null) {
 	    	// Loop up to get the top parent
 			while (node.getParent() != null && node.getParent().getParent() != null) {
-				node = (SiteNode) node.getParent();
+				node = node.getParent();
 			}
 	    	extension.startScan(node);
 	    }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderSite.java
Patch:
@@ -67,7 +67,7 @@ public void performAction(SiteNode node) {
 	    if (node != null) {
 	    	// Loop up to get the top parent
 			while (node.getParent() != null && node.getParent().getParent() != null) {
-				node = (SiteNode) node.getParent();
+				node = node.getParent();
 			}
 	    	getExtensionSpider().startScan(node);
 	    }

File: src/org/zaproxy/zap/model/StructuralSiteNodeIterator.java
Patch:
@@ -44,7 +44,7 @@ public StructuralSiteNode next() {
 		if (! hasNext()) {
 			throw new NoSuchElementException();
 		}
-		return new StructuralSiteNode((SiteNode)children.nextElement());
+		return new StructuralSiteNode(children.nextElement());
 	}
 
 	@Override

File: src/org/zaproxy/zap/model/Target.java
Patch:
@@ -159,7 +159,7 @@ public String getDisplayName() {
     			return Constant.messages.getString("target.empty");
     		}
     	} else {
-    		String name = this.getStartNode().getHierarchicNodeName(); 
+    		String name = this.getStartNode().getHierarchicNodeName(false); 
     		if (name.length() < 30) {
     			return name;
     		}

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -611,7 +611,7 @@ public static String cleanSiteName(String site, boolean incPort) {
 	public static String cleanSiteName(SiteNode node, boolean incPort) {
 		if (node != null) {
 			while (node.getParent() != null && node.getParent().getParent() != null) {
-				node = (SiteNode) node.getParent();
+				node = node.getParent();
 			}
 			return cleanSiteName(node.getNodeName(), incPort);
 		}

File: src/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -36,6 +36,7 @@
 // ZAP: 2014/11/19 Issue 1412: Manage scan policies
 // ZAP: 2015/02/18 Issue 1062: Tidied up extension hooks
 // ZAP: 2015/04/02 Issue 1582: Low memory option
+// ZAP: 2015/10/21 Issue 1576: Removed SiteNode cast no longer needed
 
 package org.parosproxy.paros.core.scanner;
 
@@ -277,10 +278,10 @@ private String getHostAndPort(SiteNode node) {
 	        result = "";
 	    } else {
 	        SiteNode curNode = node;
-	        parent = (SiteNode) node.getParent();
+	        parent = node.getParent();
 	        while (!parent.isRoot()) {
 	            curNode = parent;
-	            parent = (SiteNode) curNode.getParent();
+	            parent = curNode.getParent();
 	        }
 	        result = curNode.getNodeName();
 	    }

File: src/org/parosproxy/paros/db/RecordContext.java
Patch:
@@ -66,6 +66,7 @@ public class RecordContext {
 	public static final int TYPE_URL_PARSER_CONFIG = 401;
 	public static final int TYPE_POST_PARSER_CLASSNAME = 402;
 	public static final int TYPE_POST_PARSER_CONFIG = 403;
+	public static final int TYPE_DATA_DRIVEN_NODES = 404;
 	
 	public static final int TYPE_ACCESS_CONTROL_RULE = 410;
 	

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuActiveScanSite.java
Patch:
@@ -67,7 +67,7 @@ public void performAction(SiteNode node) {
 	    if (node != null) {
 	    	// Loop up to get the top parent
 			while (node.getParent() != null && node.getParent().getParent() != null) {
-				node = (SiteNode) node.getParent();
+				node = node.getParent();
 			}
 	    	extension.startScan(node);
 	    }

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderSite.java
Patch:
@@ -67,7 +67,7 @@ public void performAction(SiteNode node) {
 	    if (node != null) {
 	    	// Loop up to get the top parent
 			while (node.getParent() != null && node.getParent().getParent() != null) {
-				node = (SiteNode) node.getParent();
+				node = node.getParent();
 			}
 	    	getExtensionSpider().startScan(node);
 	    }

File: src/org/zaproxy/zap/model/StructuralSiteNodeIterator.java
Patch:
@@ -44,7 +44,7 @@ public StructuralSiteNode next() {
 		if (! hasNext()) {
 			throw new NoSuchElementException();
 		}
-		return new StructuralSiteNode((SiteNode)children.nextElement());
+		return new StructuralSiteNode(children.nextElement());
 	}
 
 	@Override

File: src/org/zaproxy/zap/model/Target.java
Patch:
@@ -159,7 +159,7 @@ public String getDisplayName() {
     			return Constant.messages.getString("target.empty");
     		}
     	} else {
-    		String name = this.getStartNode().getHierarchicNodeName(); 
+    		String name = this.getStartNode().getHierarchicNodeName(false); 
     		if (name.length() < 30) {
     			return name;
     		}

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -611,7 +611,7 @@ public static String cleanSiteName(String site, boolean incPort) {
 	public static String cleanSiteName(SiteNode node, boolean incPort) {
 		if (node != null) {
 			while (node.getParent() != null && node.getParent().getParent() != null) {
-				node = (SiteNode) node.getParent();
+				node = node.getParent();
 			}
 			return cleanSiteName(node.getNodeName(), incPort);
 		}

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -198,7 +198,7 @@ protected int addToolBarElements(JToolBar toolBar, Location location, int gridX)
 	protected void updateFoundCount() {
 		SpiderScan sc = this.getSelectedScanner();
 		if (sc != null) {
-			this.getFoundCountValueLabel().setText(Integer.toString(sc.getResourcesFound().size()));
+			this.getFoundCountValueLabel().setText(Integer.toString(sc.getNumberOfURIsFound()));
 		} else {
 			this.getFoundCountValueLabel().setText("");
 		}

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -467,7 +467,7 @@ private static void sendRequest(HttpMessage request, boolean followRedirects, Pr
 
 					sender.sendAndReceive(tempReq);
 					persistMessage(tempReq);
-					processor.process(request);
+					processor.process(tempReq);
 				}
 			}
 		} finally {

File: src/org/parosproxy/paros/core/scanner/PluginFactory.java
Patch:
@@ -298,6 +298,7 @@ public synchronized void loadAllPlugin(Configuration config) {
                     Plugin plugin = getLoadedPlugins().get(i);
                     plugin.setConfig(config);
                     plugin.createParamIfNotExist();
+                    plugin.loadFrom(config);
                     if (!plugin.isVisible()) {
                         log.info("Plugin " + plugin.getName() + " not visible");
                         continue;

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -1024,9 +1024,7 @@ public boolean dependsOn(AddOn addOn) {
 			return false;
 		}
 
-		dependsOn(dependencies.getAddOns(), addOn);
-
-		return false;
+		return dependsOn(dependencies.getAddOns(), addOn);
 	}
 
 	/**

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -206,7 +206,9 @@ public WebSession authenticate(SessionManagementMethod sessionManagementMethod,
 				script = getScriptsExtension().getInterface(this.script, AuthenticationScript.class);
 				msg = script.authenticate(new AuthenticationHelper(getHttpSender(), sessionManagementMethod,
 						user), this.paramValues, cred);
-			} catch (ScriptException | IOException e) {
+			} catch (Exception e) {
+				// Catch Exception instead of ScriptException and IOException because script engine implementations
+				// might throw other exceptions on script errors (e.g. jdk.nashorn.internal.runtime.ECMAException)
 				log.error("An error occurred while trying to authenticate using the Authentication Script: "
 						+ this.script.getName(), e);
 				getScriptsExtension().setError(this.script, e);

File: src/org/parosproxy/paros/core/scanner/PluginFactory.java
Patch:
@@ -298,6 +298,7 @@ public synchronized void loadAllPlugin(Configuration config) {
                     Plugin plugin = getLoadedPlugins().get(i);
                     plugin.setConfig(config);
                     plugin.createParamIfNotExist();
+                    plugin.loadFrom(config);
                     if (!plugin.isVisible()) {
                         log.info("Plugin " + plugin.getName() + " not visible");
                         continue;

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -198,7 +198,7 @@ protected int addToolBarElements(JToolBar toolBar, Location location, int gridX)
 	protected void updateFoundCount() {
 		SpiderScan sc = this.getSelectedScanner();
 		if (sc != null) {
-			this.getFoundCountValueLabel().setText(Integer.toString(sc.getResourcesFound().size()));
+			this.getFoundCountValueLabel().setText(Integer.toString(sc.getNumberOfURIsFound()));
 		} else {
 			this.getFoundCountValueLabel().setText("");
 		}

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -467,7 +467,7 @@ private static void sendRequest(HttpMessage request, boolean followRedirects, Pr
 
 					sender.sendAndReceive(tempReq);
 					persistMessage(tempReq);
-					processor.process(request);
+					processor.process(tempReq);
 				}
 			}
 		} finally {

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -1024,9 +1024,7 @@ public boolean dependsOn(AddOn addOn) {
 			return false;
 		}
 
-		dependsOn(dependencies.getAddOns(), addOn);
-
-		return false;
+		return dependsOn(dependencies.getAddOns(), addOn);
 	}
 
 	/**

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -206,7 +206,9 @@ public WebSession authenticate(SessionManagementMethod sessionManagementMethod,
 				script = getScriptsExtension().getInterface(this.script, AuthenticationScript.class);
 				msg = script.authenticate(new AuthenticationHelper(getHttpSender(), sessionManagementMethod,
 						user), this.paramValues, cred);
-			} catch (ScriptException | IOException e) {
+			} catch (Exception e) {
+				// Catch Exception instead of ScriptException and IOException because script engine implementations
+				// might throw other exceptions on script errors (e.g. jdk.nashorn.internal.runtime.ECMAException)
 				log.error("An error occurred while trying to authenticate using the Authentication Script: "
 						+ this.script.getName(), e);
 				getScriptsExtension().setError(this.script, e);

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -88,7 +88,7 @@ public static void main(String[] args) throws Exception {
             cmdLine = new CommandLine(args);
 
         } catch (final Exception e) {
-            System.out.println(CommandLine.getHelpGeneral());
+            System.out.println(CommandLine.getHelp(null));
             System.exit(1);
         }
 

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -55,6 +55,7 @@
 // ZAP: 2015/02/09 Issue 1525: Introduce a database interface layer to allow for alternative implementations
 // ZAP: 2015/02/10 Issue 1208: Search classes/resources in add-ons declared as dependencies
 // ZAP: 2015/04/02 Issue 321: Support multiple databases and Issue 1582: Low memory option
+// ZAP: 2015/09/17 Issue 1914: Support multiple add-on directories
 
 package org.parosproxy.paros.control;
 
@@ -138,7 +139,7 @@ public Proxy getProxy(ControlOverrides overrides) {
     
     @Override
     protected void addExtension() {
-    	ExtensionFactory.loadAllExtension(getExtensionLoader(), model.getOptionsParam().getConfig());
+    	ExtensionFactory.loadAllExtension(getExtensionLoader(), model.getOptionsParam());
     }
     
     public MenuFileControl getMenuFileControl() {

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -55,6 +55,7 @@
 // ZAP: 2015/02/09 Issue 1525: Introduce a database interface layer to allow for alternative implementations
 // ZAP: 2015/02/10 Issue 1208: Search classes/resources in add-ons declared as dependencies
 // ZAP: 2015/04/02 Issue 321: Support multiple databases and Issue 1582: Low memory option
+// ZAP: 2015/09/17 Issue 1914: Support multiple add-on directories
 
 package org.parosproxy.paros.control;
 
@@ -138,7 +139,7 @@ public Proxy getProxy(ControlOverrides overrides) {
     
     @Override
     protected void addExtension() {
-    	ExtensionFactory.loadAllExtension(getExtensionLoader(), model.getOptionsParam().getConfig());
+    	ExtensionFactory.loadAllExtension(getExtensionLoader(), model.getOptionsParam());
     }
     
     public MenuFileControl getMenuFileControl() {

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -127,7 +127,8 @@ private void search() {
             }
 
 			List<Integer> list = Model.getSingleton().getDb().getTableHistory().getHistoryIdsOfHistType(session.getSessionId(),
-							HistoryReference.TYPE_PROXIED, HistoryReference.TYPE_ZAP_USER, HistoryReference.TYPE_SPIDER);
+							HistoryReference.TYPE_PROXIED, HistoryReference.TYPE_ZAP_USER, HistoryReference.TYPE_SPIDER,
+							HistoryReference.TYPE_SPIDER_AJAX);
 			int last = list.size();
 			int currentRecordId = 0;
 			for (int index=0;index < last;index++){

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -800,8 +800,8 @@ public void loadFrom(Configuration conf) {
     public void cloneInto(Plugin plugin) {
     	if (plugin instanceof AbstractPlugin) {
     		AbstractPlugin ap = (AbstractPlugin) plugin;
-    		ap.setEnabled(this.isEnabled());
     		ap.setAlertThreshold(this.getAlertThreshold(true));
+    		ap.setEnabled(this.isEnabled());
     		ap.setAttackStrength(this.getAttackStrength(true));
     		ap.setDefaultAlertThreshold(this.defaultAttackThreshold);
     		ap.setDefaultAttackStrength(this.defaultAttackStrength);

File: src/org/parosproxy/paros/db/TableHistory.java
Patch:
@@ -121,12 +121,14 @@ void delete(List<Integer> ids, int batchSize)
 	/**
 	 * Deletes all records whose history type was marked as temporary (by calling {@code setHistoryTypeTemporary(int)}).
 	 * <p>
-	 * By default the only temporary history type is {@code HistoryReference#TYPE_TEMPORARY}.
+	 * By default the only temporary history types are {@code HistoryReference#TYPE_TEMPORARY} and
+	 * {@code HistoryReference#TYPE_SCANNER_TEMPORARY}.
 	 *
 	 * @throws DatabaseException if an error occurred while deleting the temporary history records
 	 * @see #setHistoryTypeAsTemporary(int)
 	 * @see #unsetHistoryTypeAsTemporary(int)
 	 * @see HistoryReference#TYPE_TEMPORARY
+	 * @see HistoryReference#TYPE_SCANNER_TEMPORARY
 	 */
 	void deleteTemporary() throws DatabaseException;
 

File: src/org/zaproxy/zap/extension/alert/AlertTreeModel.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.core.scanner.Alert;
+import org.parosproxy.paros.view.View;
 
 
 class AlertTreeModel extends DefaultTreeModel {
@@ -47,7 +48,7 @@ private String getRiskString (Alert alert) {
     }
     
     void addPath(final Alert alert) {
-        if (EventQueue.isDispatchThread()) {
+        if (!View.isInitialised() || EventQueue.isDispatchThread()) {
         	addPathEventHandler(alert);
         } else {
             try {

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -61,6 +61,7 @@
 // ZAP: 2015/03/04 Added no prompt warning methods
 // ZAP: 2015/04/13 Add default editor and renderer for TextMessageLocationHighlight
 // ZAP: 2015/08/11 Fix the removal of context panels
+// ZAP: 2015/09/07 Start GUI on EDT
 
 package org.parosproxy.paros.view;
 
@@ -389,8 +390,6 @@ public void showSplashScreen() {
         if (Model.getSingleton().getOptionsParam().getViewParam().isShowSplashScreen()) {
             // Show the splash screen to show the user something is happening..
             splashScreen = new SplashScreen();
-            Thread splashThread = new Thread(splashScreen);
-            splashThread.start();
         }        
     }
 

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -757,7 +757,7 @@ public void scanFinshed(final String host) {
         	scanFinshedEventHandler(host);
 	    } else {
 	        try {
-	            EventQueue.invokeAndWait(new Runnable() {
+	            EventQueue.invokeLater(new Runnable() {
 	                @Override
 	                public void run() {
 	                	scanFinshedEventHandler(host);

File: src/org/zaproxy/zap/view/ScanPanel2.java
Patch:
@@ -458,7 +458,7 @@ public void scanFinshed(final int id, final String host) {
         	scanFinshedEventHandler(id, host);
 	    } else {
 	        try {
-	            EventQueue.invokeAndWait(new Runnable() {
+	            EventQueue.invokeLater(new Runnable() {
 	                @Override
 	                public void run() {
 	                	scanFinshedEventHandler(id, host);

File: src/org/zaproxy/zap/view/ScanPanel2.java
Patch:
@@ -320,6 +320,9 @@ protected JToggleButton getPauseScanButton() {
 			pauseScanButton.setToolTipText(Constant.messages.getString(prefix + ".toolbar.button.pause"));
 			pauseScanButton.setSelectedToolTipText(Constant.messages.getString(prefix + ".toolbar.button.unpause"));
 			pauseScanButton.setIcon(new ImageIcon(ScanPanel2.class.getResource("/resource/icon/16/141.png")));
+			pauseScanButton.setRolloverIcon(new ImageIcon(ScanPanel2.class.getResource("/resource/icon/16/141.png")));
+			pauseScanButton.setSelectedIcon(new ImageIcon(ScanPanel2.class.getResource("/resource/icon/16/131.png")));
+			pauseScanButton.setRolloverSelectedIcon(new ImageIcon(ScanPanel2.class.getResource("/resource/icon/16/131.png")));
 			pauseScanButton.setEnabled(false);
 			pauseScanButton.addActionListener(new ActionListener () {
 				@Override

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -670,7 +670,9 @@ public String getXml(SiteNode site) {
 	            		for (int j=i; j < alerts.size(); j++) {
 	            			// Deliberately include i!
 	            			Alert alert2 = alerts.get(j);
-	            			if (alert.getPluginId() == alert2.getPluginId()) {
+	            			if (alert.getPluginId() == alert2.getPluginId() &&
+	            					alert.getRisk() == alert2.getRisk() && 
+	            					alert.getConfidence() == alert2.getConfidence()) {
 	            				if (this.getAlertParam().getMaximumInstances() == 0 ||
 	            						count < this.getAlertParam().getMaximumInstances()) {
 		            				sb.append("  <instance>\n");

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -574,7 +574,7 @@ private static void handleException(HttpMessage msg, Format format, String conte
             ApiException exception;
             if (cause instanceof ApiException) {
                 exception = (ApiException) cause;
-                if (!ApiException.Type.INTERNAL_ERROR.equals(exception.getMessage())) {
+                if (!ApiException.Type.INTERNAL_ERROR.equals(exception.getType())) {
                     responseStatus = STATUS_BAD_REQUEST;
                     logger.warn("ApiException while handling API request:", cause);
                 }

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -169,11 +169,11 @@ private void siteNodeChangedEventHandler(SiteMap siteTree, TreeNode node) {
 
     private void addAlertToTree(final Alert alert, final HistoryReference ref, final HttpMessage msg) {
     	
-        if (!View.isInitialised() || Constant.isLowMemoryOptionSet()) {
+        if (Constant.isLowMemoryOptionSet()) {
         	return;
         }
     	
-        if (EventQueue.isDispatchThread()) {
+        if (!View.isInitialised() || EventQueue.isDispatchThread()) {
             addAlertToTreeEventHandler(alert, ref, msg);
 
         } else {

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -51,6 +51,7 @@
 // ZAP: 2015/02/09 Issue 1525: Introduce a database interface layer to allow for alternative implementations
 // ZAP: 2015/04/02 Issue 321: Support multiple databases and Issue 1582: Low memory option
 // ZAP: 2015/08/19 Change to use ZapXmlConfiguration instead of extending FileXML
+// ZAP: 2015/08/19 Issue 1789: Forced Browse/AJAX Spider messages not restored to Sites tab
 
 package org.parosproxy.paros.model;
 
@@ -334,7 +335,8 @@ public void run() {
 		}
 		
 		// update siteTree reference
-		list = model.getDb().getTableHistory().getHistoryIdsOfHistType(getSessionId(), HistoryReference.TYPE_SPIDER);
+		list = model.getDb().getTableHistory().getHistoryIdsOfHistType(getSessionId(), HistoryReference.TYPE_SPIDER,
+				HistoryReference.TYPE_BRUTE_FORCE, HistoryReference.TYPE_SPIDER_AJAX);
 		
 		for (int i=0; i<list.size(); i++) {
 			// ZAP: Removed unnecessary cast.

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -327,6 +327,9 @@ private int scanURL(String url, User user, int maxChildren, boolean recurse) thr
 		}
 		Target target = new Target(node);
 		target.setRecurse(recurse);
+		if (user != null) {
+			target.setContext(user.getContext());
+		}
 		
 		List<Object> objs = new ArrayList<>(maxChildren > 0 ? 3 : 1);
 		objs.add(startURI);

File: src/org/zaproxy/zap/extension/api/PythonAPIGenerator.java
Patch:
@@ -192,7 +192,7 @@ private void generatePythonElement(ApiElement element, String component,
 			}
 
 			out.write("})");
-			if (type.equals("view")) {
+			if (!type.equals("other")) {
 				out.write(".itervalues())");
 			} else {
 				out.write(")");

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -910,7 +910,7 @@ public void handleAction(JSONObject params) throws ApiException {
 				try {
 					new URL(loginUrl);
 				} catch (Exception ex) {
-					throw new ApiException(ApiException.Type.BAD_FORMAT, PARAM_LOGIN_URL);
+					throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_LOGIN_URL);
 				}
 				String postData = "";
 				if (params.containsKey(PARAM_LOGIN_REQUEST_DATA)) {

File: src/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -330,7 +330,7 @@ public void handleAction(JSONObject params) throws ApiException {
 				try {
 					new URI(method.hostname);
 				} catch (Exception ex) {
-					throw new ApiException(ApiException.Type.BAD_FORMAT, PARAM_HOSTNAME);
+					throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_HOSTNAME);
 				}
 
 				if(params.containsKey(PARAM_REALM))
@@ -341,7 +341,7 @@ public void handleAction(JSONObject params) throws ApiException {
 						String portString = params.getString(PARAM_PORT);
 						method.port = Integer.parseInt(portString);
 					} catch (Exception ex) {
-						throw new ApiException(ApiException.Type.BAD_FORMAT, PARAM_PORT);
+						throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_PORT);
 					}
 
 				if (!context.getAuthenticationMethod().isSameType(method))

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfAPI.java
Patch:
@@ -87,7 +87,7 @@ public HttpMessage handleApiOther(HttpMessage msg, String name, JSONObject param
 		    	msg.setResponseBody(response);
 				
 			} catch (NumberFormatException e) {
-				throw new ApiException(ApiException.Type.BAD_FORMAT, OTHER_GENERATE_FORM_PARAM_HREFID);
+				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, OTHER_GENERATE_FORM_PARAM_HREFID);
 			} catch (ApiException e) {
 				throw e;
 			} catch (Exception e) {

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -504,12 +504,12 @@ public static JSONObject getParams (String params) throws ApiException {
 					jp.put(key, value);
 				} catch (UnsupportedEncodingException | IllegalArgumentException e) {
 					// Carry on anyway
-					Exception apiException = new ApiException(ApiException.Type.BAD_FORMAT, params, e);
+					Exception apiException = new ApiException(ApiException.Type.ILLEGAL_PARAMETER, params, e);
 					logger.error(apiException.getMessage(), apiException);
 				}
 			} else {
 				// Carry on anyway
-				Exception e = new ApiException(ApiException.Type.BAD_FORMAT, params);
+				Exception e = new ApiException(ApiException.Type.ILLEGAL_PARAMETER, params);
 				logger.error(e.getMessage(), e);
 			}
 		}

File: src/org/zaproxy/zap/extension/api/ApiImplementor.java
Patch:
@@ -202,13 +202,13 @@ public ApiResponse handleApiOptionAction(String name, JSONObject params) throws
 							try {
 								val = params.getInt("Integer");
 							} catch (JSONException e) {
-								throw new ApiException(ApiException.Type.BAD_FORMAT, "Integer");
+								throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, "Integer");
 							}
 						} else if (method.getParameterTypes()[0].equals(Boolean.class) || method.getParameterTypes()[0].equals(boolean.class)) {
 							try {
 								val = params.getBoolean("Boolean");
 							} catch (JSONException e) {
-								throw new ApiException(ApiException.Type.BAD_FORMAT, "Boolean");
+								throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, "Boolean");
 							}
 						}
 						if (val == null) {

File: src/org/zaproxy/zap/extension/forceduser/ForcedUserAPI.java
Patch:
@@ -110,7 +110,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			try {
 				newModeStatus = params.getBoolean(PARAM_MODE_ENABLED);
 			} catch (JSONException ex) {
-				throw new ApiException(Type.BAD_FORMAT, PARAM_MODE_ENABLED);
+				throw new ApiException(Type.ILLEGAL_PARAMETER, PARAM_MODE_ENABLED);
 			}
 			extension.setForcedUserModeEnabled(newModeStatus);
 			return ApiResponseElement.OK;

File: src/org/zaproxy/zap/extension/users/UsersAPI.java
Patch:
@@ -185,7 +185,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			try {
 				enabled = params.getBoolean(PARAM_ENABLED);
 			} catch (JSONException e) {
-				throw new ApiException(Type.BAD_FORMAT, PARAM_ENABLED + " - should be boolean");
+				throw new ApiException(Type.ILLEGAL_PARAMETER, PARAM_ENABLED + " - should be boolean");
 			}
 			getUser(params).setEnabled(enabled);
 			return ApiResponseElement.OK;

File: src/org/zaproxy/zap/utils/ApiUtils.java
Patch:
@@ -100,7 +100,7 @@ public static <E extends Enum<E>> E getOptionalEnumParam(JSONObject params, Stri
 			try {
 				enumVal = Enum.valueOf(enumType, enumValS);
 			} catch (Exception ex) {
-				throw new ApiException(ApiException.Type.BAD_FORMAT, paramName + ": "
+				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, paramName + ": "
 						+ ex.getLocalizedMessage());
 			}
 		}

File: src/org/zaproxy/zap/extension/alert/AlertViewPanel.java
Patch:
@@ -427,8 +427,8 @@ public void displayAlert (Alert alert) {
 			alertParam.setText(alert.getParam());
 			alertAttack.setText(alert.getAttack());
 			alertEvidence.setText(alert.getEvidence());
-			alertCweId.setText("" + alert.getCweId());
-			alertWascId.setText("" + alert.getWascId());
+			alertCweId.setText(Integer.toString(alert.getCweId()));
+			alertWascId.setText(Integer.toString(alert.getWascId()));
 		}
 		
 		setAlertDescription(alert.getDescription());

File: src/org/zaproxy/zap/extension/ascan/OptionsScannerPanel.java
Patch:
@@ -329,7 +329,7 @@ public void setLabelDelayInMsValue(int value) {
             val = " " + value;
             
         } else {
-            val = "" + value;
+            val = Integer.toString(value);
         }
         
         labelDelayInMsValue.setText(val);

File: src/org/zaproxy/zap/extension/autoupdate/AutoUpdateAPI.java
Patch:
@@ -73,7 +73,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 		if (VIEW_LATEST_VERSION_NUMBER.equals(name)) {
 			result = new ApiResponseElement(name, this.getLatestVersionNumber());
 		} else if (VIEW_IS_LATEST_VERSION.equals(name)) {
-			result = new ApiResponseElement(name, "" + this.isLatestVersion());
+			result = new ApiResponseElement(name, Boolean.toString(this.isLatestVersion()));
 		} else {
 			throw new ApiException(ApiException.Type.BAD_VIEW);
 		}

File: src/org/zaproxy/zap/extension/api/NodeJSAPIGenerator.java
Patch:
@@ -81,7 +81,7 @@ public NodeJSAPIGenerator(String path, boolean optional) {
     }
 
 	public void generateNodeJSFiles(List<ApiImplementor> implementors) throws IOException {
-        for (ApiImplementor imp : ApiGeneratorUtils.getAllImplementors()) {
+        for (ApiImplementor imp : implementors) {
             this.generateNodeJSComponent(imp);
         }
     }

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -103,7 +103,8 @@ public void run() {
 				if (href != null && 
 						(href.getHistoryType() == HistoryReference.TYPE_PROXIED ||
 						href.getHistoryType() == HistoryReference.TYPE_ZAP_USER ||
-						href.getHistoryType() == HistoryReference.TYPE_SPIDER)) {
+						href.getHistoryType() == HistoryReference.TYPE_SPIDER ||
+						href.getHistoryType() == HistoryReference.TYPE_SPIDER_AJAX)) {
 					try {
 						// Note that scanning TYPE_SCANNER records will result in a loop ;)
 						// Parse the record

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsAPI.java
Patch:
@@ -134,7 +134,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 		HttpSessionsSite site;
 		switch (name) {
 		case ACTION_CREATE_EMPTY_SESSION:
-			site = extension.getHttpSessionsSite(getAuthority(params.getString(ACTION_PARAM_SITE)), false);
+			site = extension.getHttpSessionsSite(getAuthority(params.getString(ACTION_PARAM_SITE)), true);
 			if (site == null) {
 				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, ACTION_PARAM_SITE);
 			}

File: src/org/parosproxy/paros/network/HttpMessage.java
Patch:
@@ -42,6 +42,7 @@
 // ZAP: 2014/06/16 Issue 1217: Table format does not display information when charset is
 // present in Content-Type header
 // ZAP: 2015/02/09 Fix NullPointerException in equals(Object) when comparing with empty messages
+// ZAP: 2015/08/07 Issue 1768: Update to use a more recent default user agent
 
 package org.parosproxy.paros.network;
 
@@ -136,8 +137,8 @@ public void setHttpSession(HttpSession session) {
 	public HttpMessage() {
 	}
 	
-	public HttpMessage(URI uri) throws HttpMalformedHeaderException {
-	    setRequestHeader(new HttpRequestHeader(HttpRequestHeader.GET, uri, HttpHeader.HTTP11));
+	public HttpMessage(URI uri, ConnectionParam params) throws HttpMalformedHeaderException {
+	    setRequestHeader(new HttpRequestHeader(HttpRequestHeader.GET, uri, HttpHeader.HTTP11, params));
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -565,7 +565,8 @@ private AddOnCollection getLocalVersionInfo () {
 
     private ZapXmlConfiguration getRemoteConfigurationUrl(String url) throws 
     		IOException, ConfigurationException, InvalidCfuUrlException {
-        HttpMessage msg = new HttpMessage(new URI(url, true));
+        HttpMessage msg = new HttpMessage(new URI(url, true), 
+        		Model.getSingleton().getOptionsParam().getConnectionParam());
         getHttpSender().sendAndReceive(msg,true);
         if (msg.getResponseHeader().getStatusCode() != HttpStatusCode.OK) {
             throw new IOException();

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -138,7 +138,8 @@ public SpiderTask(Spider parent, URI sourceUri, URI uri, int depth, String metho
 		// Create a new HttpMessage that will be used for the request and persist it in the database using
 		// HistoryReference
 		try {
-			HttpRequestHeader requestHeader = new HttpRequestHeader(method, uri, HttpHeader.HTTP11);
+			HttpRequestHeader requestHeader = 
+					new HttpRequestHeader(method, uri, HttpHeader.HTTP11, parent.getConnectionParam());
 			if (sourceUri != null && parent.getSpiderParam().isSendRefererHeader()) {
 				requestHeader.setHeader(HttpRequestHeader.REFERER, sourceUri.toString());
 			}

File: src/org/zaproxy/zap/view/JCheckBoxTree.java
Patch:
@@ -334,6 +334,7 @@ public static void main(String[] params) {
     	p.setSize(new Dimension(500,500));
     	f.getContentPane().add(p);
     	JCheckBoxTree cbt = new JCheckBoxTree();
+    	cbt.setShowsRootHandles(true);
 
     	JScrollPane scroll = new JScrollPane();
     	scroll.setViewportView(cbt);

File: src/org/zaproxy/zap/extension/api/ApiResponseElement.java
Patch:
@@ -91,7 +91,7 @@ public void toHTML(StringBuilder sb) {
 		if (apiResponse == null) {
 			sb.append("<table border=\"1\">\n");
 			sb.append("<tr><td>\n");
-			sb.append(this.getName());
+			sb.append(StringEscapeUtils.escapeHtml(this.getName()));
 			sb.append("</td><td>\n");
 			sb.append(StringEscapeUtils.escapeHtml(this.getValue()));
 			sb.append("</td></tr>\n");

File: src/org/zaproxy/zap/extension/api/ApiResponseList.java
Patch:
@@ -24,6 +24,7 @@
 import net.sf.json.JSONArray;
 import net.sf.json.JSONObject;
 
+import org.apache.commons.lang.StringEscapeUtils;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -94,7 +95,7 @@ public void toXML(Document doc, Element parent) {
 
 	@Override
 	public void toHTML(StringBuilder sb) {
-		sb.append("<h2>" + this.getName() + "</h2>\n");
+		sb.append("<h2>" + StringEscapeUtils.escapeHtml(this.getName()) + "</h2>\n");
 		sb.append("<table border=\"1\">\n");
 		for (ApiResponse resp: this.list) {
 			sb.append("<tr><td>\n");

File: src/org/zaproxy/zap/extension/api/ApiResponseSet.java
Patch:
@@ -69,11 +69,11 @@ public void toXML(Document doc, Element parent) {
 
 	@Override
 	public void toHTML(StringBuilder sb) {
-		sb.append("<h2>" + this.getName() + "</h2>\n");
+		sb.append("<h2>" + StringEscapeUtils.escapeHtml(this.getName()) + "</h2>\n");
 		sb.append("<table border=\"1\">\n");
 		for (Entry<String, Object> val : values.entrySet()) {
 			sb.append("<tr><td>\n");
-			sb.append(val.getKey());
+			sb.append(StringEscapeUtils.escapeHtml(val.getKey()));
 			sb.append("</td><td>\n");
 			if (val.getValue() instanceof String) {
 				sb.append(StringEscapeUtils.escapeHtml((String)val.getValue()));

File: src/org/zaproxy/zap/extension/api/ApiResponseElement.java
Patch:
@@ -91,7 +91,7 @@ public void toHTML(StringBuilder sb) {
 		if (apiResponse == null) {
 			sb.append("<table border=\"1\">\n");
 			sb.append("<tr><td>\n");
-			sb.append(this.getName());
+			sb.append(StringEscapeUtils.escapeHtml(this.getName()));
 			sb.append("</td><td>\n");
 			sb.append(StringEscapeUtils.escapeHtml(this.getValue()));
 			sb.append("</td></tr>\n");

File: src/org/zaproxy/zap/extension/api/ApiResponseList.java
Patch:
@@ -24,6 +24,7 @@
 import net.sf.json.JSONArray;
 import net.sf.json.JSONObject;
 
+import org.apache.commons.lang.StringEscapeUtils;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -94,7 +95,7 @@ public void toXML(Document doc, Element parent) {
 
 	@Override
 	public void toHTML(StringBuilder sb) {
-		sb.append("<h2>" + this.getName() + "</h2>\n");
+		sb.append("<h2>" + StringEscapeUtils.escapeHtml(this.getName()) + "</h2>\n");
 		sb.append("<table border=\"1\">\n");
 		for (ApiResponse resp: this.list) {
 			sb.append("<tr><td>\n");

File: src/org/zaproxy/zap/extension/api/ApiResponseSet.java
Patch:
@@ -69,11 +69,11 @@ public void toXML(Document doc, Element parent) {
 
 	@Override
 	public void toHTML(StringBuilder sb) {
-		sb.append("<h2>" + this.getName() + "</h2>\n");
+		sb.append("<h2>" + StringEscapeUtils.escapeHtml(this.getName()) + "</h2>\n");
 		sb.append("<table border=\"1\">\n");
 		for (Entry<String, Object> val : values.entrySet()) {
 			sb.append("<tr><td>\n");
-			sb.append(val.getKey());
+			sb.append(StringEscapeUtils.escapeHtml(val.getKey()));
 			sb.append("</td><td>\n");
 			if (val.getValue() instanceof String) {
 				sb.append(StringEscapeUtils.escapeHtml((String)val.getValue()));

File: src/org/zaproxy/zap/extension/api/WebUI.java
Patch:
@@ -238,7 +238,9 @@ public String handleRequest(String component, ApiImplementor impl,
 						sb.append("\" name=\"");
 						sb.append(API.API_KEY_PARAM);
 						sb.append("\" value=\"");
-						sb.append(key);
+						if (Model.getSingleton().getOptionsParam().getApiParam().isAutofillKey()) {
+							sb.append(key);
+						}
 						sb.append("\"></input>");
 						sb.append("</td>");
 						sb.append("</tr>\n");

File: src/ch/csnc/extension/httpclient/AliasCertificate.java
Patch:
@@ -59,7 +59,7 @@ public String getName(){
 		
 		String cn = getCN();
 		
-		if(cn.length() == 0){
+		if(cn == null || cn.length() == 0){
 			return getAlias();
 		}else{
 			return cn + " ["+getAlias()+"]";

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -28,6 +28,7 @@
 
 import net.sf.json.JSONObject;
 
+import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.w3c.dom.Document;
@@ -80,7 +81,7 @@ public String toString(API.Format format) {
 		switch(format) {
 		case HTML:
 		case UI:
-			return this.toString();
+			return StringEscapeUtils.escapeHtml(this.toString());
 			
 		case XML:
 			try {

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.commons.httpclient.URI;
 import org.apache.commons.httpclient.URIException;
 import org.apache.log4j.Logger;
-import org.bouncycastle.openssl.MiscPEMGenerator;
+import org.bouncycastle.openssl.jcajce.JcaMiscPEMGenerator;
 import org.bouncycastle.util.io.pem.PemWriter;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
@@ -732,7 +732,7 @@ public HttpMessage handleApiOther(HttpMessage msg, String name,
 					}
 					final StringWriter sw = new StringWriter();
 					try (final PemWriter pw = new PemWriter(sw)) {
-						pw.writeObject(new MiscPEMGenerator(rootCA));
+						pw.writeObject(new JcaMiscPEMGenerator(rootCA));
 						pw.flush();
 					}
 					String response = sw.toString();

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLPanel.java
Patch:
@@ -47,7 +47,7 @@
 import javax.swing.filechooser.FileFilter;
 
 import org.apache.log4j.Logger;
-import org.bouncycastle.openssl.MiscPEMGenerator;
+import org.bouncycastle.openssl.jcajce.JcaMiscPEMGenerator;
 import org.bouncycastle.util.io.pem.PemWriter;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
@@ -233,7 +233,7 @@ private void setRootca(KeyStore rootca) {
 			try {
 				final Certificate cert = rootca.getCertificate(SslCertificateService.ZAPROXY_JKS_ALIAS);
 				try (final PemWriter pw = new PemWriter(sw)) {
-					pw.writeObject(new MiscPEMGenerator(cert));
+					pw.writeObject(new JcaMiscPEMGenerator(cert));
 					pw.flush();
 				}
 			} catch (final Exception e) {

File: src/org/zaproxy/zap/view/LicenseFrame.java
Patch:
@@ -34,6 +34,7 @@
 import javax.swing.JTextPane;
 import javax.swing.ScrollPaneConstants;
 
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.view.AbstractFrame;
 
 public class LicenseFrame extends AbstractFrame {
@@ -214,7 +215,7 @@ private void showLicense(int page) {
 	//String remoteUrl = "http://www.statistica.unimib.it/utenti/dellavedova/software/artistic2.html";
 	    	case 0:
 	    	    //localUrl = "file:" + System.getProperty("user.dir") + System.getProperty("file.separator") + "license/TheClarifiedArtisticLicense.htm";
-	    	    localUrl = "file:" + System.getProperty("user.dir") + System.getProperty("file.separator") + "license/ApacheLicense-2.0.txt";
+	    	    localUrl = "file:" + Constant.getZapInstall() + System.getProperty("file.separator") + "license/ApacheLicense-2.0.txt";
 	    	    break;
 	    }
 	    try{

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.commons.httpclient.URI;
 import org.apache.commons.httpclient.URIException;
 import org.apache.log4j.Logger;
-import org.bouncycastle.openssl.MiscPEMGenerator;
+import org.bouncycastle.openssl.jcajce.JcaMiscPEMGenerator;
 import org.bouncycastle.util.io.pem.PemWriter;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
@@ -732,7 +732,7 @@ public HttpMessage handleApiOther(HttpMessage msg, String name,
 					}
 					final StringWriter sw = new StringWriter();
 					try (final PemWriter pw = new PemWriter(sw)) {
-						pw.writeObject(new MiscPEMGenerator(rootCA));
+						pw.writeObject(new JcaMiscPEMGenerator(rootCA));
 						pw.flush();
 					}
 					String response = sw.toString();

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLPanel.java
Patch:
@@ -47,7 +47,7 @@
 import javax.swing.filechooser.FileFilter;
 
 import org.apache.log4j.Logger;
-import org.bouncycastle.openssl.MiscPEMGenerator;
+import org.bouncycastle.openssl.jcajce.JcaMiscPEMGenerator;
 import org.bouncycastle.util.io.pem.PemWriter;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
@@ -233,7 +233,7 @@ private void setRootca(KeyStore rootca) {
 			try {
 				final Certificate cert = rootca.getCertificate(SslCertificateService.ZAPROXY_JKS_ALIAS);
 				try (final PemWriter pw = new PemWriter(sw)) {
-					pw.writeObject(new MiscPEMGenerator(cert));
+					pw.writeObject(new JcaMiscPEMGenerator(cert));
 					pw.flush();
 				}
 			} catch (final Exception e) {

File: src/org/zaproxy/zap/extension/users/ExtensionUserManagement.java
Patch:
@@ -247,7 +247,7 @@ public void loadContextData(Session session, Context context) {
 		try {
 			List<String> encodedUsers = session.getContextDataStrings(context.getIndex(),
 					RecordContext.TYPE_USER);
-			ContextUserAuthManager usersManager = contextManagers.get(context.getIndex());
+			ContextUserAuthManager usersManager = getContextUserAuthManager(context.getIndex());
 			for (String e : encodedUsers) {
 				User u = User.decode(context.getIndex(), e);
 				usersManager.addUser(u);
@@ -316,7 +316,7 @@ public void exportContextData(Context ctx, Configuration config) {
 	@Override
 	public void importContextData(Context ctx, Configuration config) {
 		List<Object> list = config.getList(CONTEXT_CONFIG_USERS_USER);
-		ContextUserAuthManager m = contextManagers.get(ctx.getIndex());
+		ContextUserAuthManager m = getContextUserAuthManager(ctx.getIndex());
 		for (Object o : list) {
 			User usersManager = User.decode(ctx.getIndex(), o.toString());
 			m.addUser(usersManager);

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlParser.java
Patch:
@@ -165,7 +165,7 @@ private void parseSource(HttpMessage message, Source source, int depth, String b
 					Matcher matcher = urlPattern.matcher(content);
 					if (matcher.find()) {
 						String url = matcher.group(1);
-						processURL(message, depth, baseURL, url);
+						processURL(message, depth, url, baseURL);
 					}
 				}
 			}

File: src/org/zaproxy/zap/session/CookieBasedSessionManagementMethodType.java
Patch:
@@ -83,7 +83,6 @@ public WebSession extractWebSession(HttpMessage msg) {
 			else {
 				// Make sure any cookies in the message are put in the session
 				CookieBasedSession session = new CookieBasedSession();
-				session.getHttpState();
 				for (HttpCookie c : msg.getRequestHeader().getHttpCookies())
 					session.getHttpState().addCookie(convertCookie(c));
 				// Use the messages hostname as default domain when generating SET cookies

File: test/org/zaproxy/zap/control/AddOnCollectionUnitTest.java
Patch:
@@ -42,7 +42,8 @@
 @RunWith(MockitoJUnitRunner.class)
 public class AddOnCollectionUnitTest {
 
-    private static final Path DIRECTORY = Paths.get("test/resources/org/zaproxy/zap/control/");
+    //private static final Path DIRECTORY = Paths.get("test/resources/org/zaproxy/zap/control/");
+    private static final Path DIRECTORY = Paths.get("../test/resources/org/zaproxy/zap/control/");
 
 	private ZapXmlConfiguration configA;
 	private ZapXmlConfiguration configB;

File: src/org/zaproxy/zap/extension/forceduser/ExtensionForcedUser.java
Patch:
@@ -299,7 +299,7 @@ public int getListenerOrder() {
 	}
 
 	@Override
-	public void onHttpRequestSend(HttpMessage msg, int initiator) {
+	public void onHttpRequestSend(HttpMessage msg, int initiator, HttpSender sender) {
 		if (!forcedUserModeEnabled || msg.getResponseBody() == null || msg.getRequestHeader().isImage()
 				|| (initiator == HttpSender.AUTHENTICATION_INITIATOR || initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR)) {
 			// Not relevant
@@ -334,7 +334,7 @@ public void onHttpRequestSend(HttpMessage msg, int initiator) {
 	}
 
 	@Override
-	public void onHttpResponseReceive(HttpMessage msg, int initiator) {
+	public void onHttpResponseReceive(HttpMessage msg, int initiator, HttpSender sender) {
 		// Nothing to do
 	}
 

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -563,7 +563,7 @@ public int getListenerOrder() {
 	}
 
 	@Override
-	public void onHttpRequestSend(HttpMessage msg, int initiator) {
+	public void onHttpRequestSend(HttpMessage msg, int initiator, HttpSender sender) {
 		if (initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR) {
 			return;
 		}
@@ -595,7 +595,7 @@ public void onHttpRequestSend(HttpMessage msg, int initiator) {
 	}
 
 	@Override
-	public void onHttpResponseReceive(HttpMessage msg, int initiator) {
+	public void onHttpResponseReceive(HttpMessage msg, int initiator, HttpSender sender) {
 		if (initiator == HttpSender.ACTIVE_SCANNER_INITIATOR || initiator == HttpSender.SPIDER_INITIATOR
 				|| initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR) {
 			// Not a session we care about

File: src/org/zaproxy/zap/extension/params/ExtensionParams.java
Patch:
@@ -297,6 +297,7 @@ public boolean onHttpRequestSend(HttpMessage msg) {
 		}
 
 		// Form Parameters
+		// TODO flag anti csrf url ones too?
 		
 		ExtensionAntiCSRF extAntiCSRF = 
 			(ExtensionAntiCSRF) Control.getSingleton().getExtensionLoader().getExtension(ExtensionAntiCSRF.NAME);

File: src/org/zaproxy/zap/network/HttpSenderListener.java
Patch:
@@ -19,6 +19,7 @@
 package org.zaproxy.zap.network;
 
 import org.parosproxy.paros.network.HttpMessage;
+import org.parosproxy.paros.network.HttpSender;
 
 /**
  * A listener that will be notified when a new request is ready to be forwarded
@@ -72,7 +73,7 @@ public interface HttpSenderListener {
      * @param msg
      *            the {@code HttpMessage} that may be forwarded to the server
      */
-    void onHttpRequestSend(HttpMessage msg, int initiator);
+    void onHttpRequestSend(HttpMessage msg, int initiator, HttpSender sender);
 
     /**
      * Notifies the listener that a new response was received from the server
@@ -102,6 +103,6 @@ public interface HttpSenderListener {
      * @param msg
      *            the {@code HttpMessage} that may be forwarded to the client
      */
-    void onHttpResponseReceive(HttpMessage msg, int initiator);
+    void onHttpResponseReceive(HttpMessage msg, int initiator, HttpSender sender);
 
 }

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -43,7 +43,7 @@ public class AntiCsrfParam extends AbstractParam {
     private static final String CONFIRM_REMOVE_TOKEN_KEY = ANTI_CSRF_BASE_KEY + ".confirmRemoveToken";
     
     private static final String[] DEFAULT_TOKENS_NAMES = { "anticsrf",
-            "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken" };
+            "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken", "authenticity_token" };
 
     private List<AntiCsrfParamToken> tokens = null;
     private List<String> enabledTokensNames = null;

File: src/org/zaproxy/zap/view/popup/PopupMenuItemIncludeInContext.java
Patch:
@@ -80,7 +80,8 @@ public void performAction(SiteNode sn) {
             return;
         }
 
-        if (sn.isLeaf()) {
+        if (sn.isLeaf() && ! (sn.getParent().getParent() == null)) {
+        	// Its a leaf and not a site
             url = Pattern.quote(url);
         } else {
             url = Pattern.quote(url) + ".*";

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -55,7 +55,7 @@ public class Context {
 	public static final String CONTEXT_CONFIG_URLPARSER = CONTEXT_CONFIG + ".urlparser";
 	public static final String CONTEXT_CONFIG_URLPARSER_CLASS = CONTEXT_CONFIG_URLPARSER + ".class";
 	public static final String CONTEXT_CONFIG_URLPARSER_CONFIG = CONTEXT_CONFIG_URLPARSER + ".config";
-	public static final String CONTEXT_CONFIG_POSTPARSER = CONTEXT_CONFIG + ".urlparser";
+	public static final String CONTEXT_CONFIG_POSTPARSER = CONTEXT_CONFIG + ".postparser";
 	public static final String CONTEXT_CONFIG_POSTPARSER_CLASS = CONTEXT_CONFIG_POSTPARSER + ".class";
 	public static final String CONTEXT_CONFIG_POSTPARSER_CONFIG = CONTEXT_CONFIG_POSTPARSER + ".config";
 

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -49,6 +49,7 @@
 // ZAP: 2015/02/18 Issue 1062: Tidied up extension hooks
 // ZAP: 2015/04/02 Issue 321: Support multiple databases and Issue 1582: Low memory option
 // ZAP: 2015/04/17 A problem occur when a single node should be scanned because count start from -1
+// ZAP: 2015/05/04 Issue 1566: Improve active scan's reported progress
 
 package org.parosproxy.paros.core.scanner;
 

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfAPI.java
Patch:
@@ -88,6 +88,8 @@ public HttpMessage handleApiOther(HttpMessage msg, String name, JSONObject param
 				
 			} catch (NumberFormatException e) {
 				throw new ApiException(ApiException.Type.BAD_FORMAT, OTHER_GENERATE_FORM_PARAM_HREFID);
+			} catch (ApiException e) {
+				throw e;
 			} catch (Exception e) {
 				throw new ApiException(ApiException.Type.INTERNAL_ERROR);
 			}

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -504,6 +504,8 @@ private int scanURL(String url, boolean scanChildren, boolean scanJustInScope, S
 			}
 
 			return controller.startScan(null, target, null, objs);
+		} catch(ApiException e) {
+			throw e;
 		} catch (Exception e) {
 			throw new ApiException(ApiException.Type.INTERNAL_ERROR, e);
 		}

File: src/org/zaproxy/zap/view/SplashScreen.java
Patch:
@@ -114,7 +114,7 @@ public void run() {
         panel.add(lblProgramName, LayoutHelper.getGBC(0, 0, 2, 1));
         // Version is +8 horizontally respect to the other components
         panel.add(lblVersion, LayoutHelper.getGBC(0, 1, 2, 1, new Insets(0, 8, 0, 8)));
-        // Progress bar (height 12) is +16 and then +64 
+        // Progress bar (height 12) is +56 and then +24 
         // vertically respect the other elements (tot + 92)
         panel.add(getLoadingJProgressBar(), LayoutHelper.getGBC(0, 2, 1, 1.0, new Insets(56, 0, 24, 0))); 
         panel.add(Box.createHorizontalGlue(), LayoutHelper.getGBC(1, 2, 1, 1.0));

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -48,6 +48,7 @@
 // ZAP: 2014/11/19 Issue 1412: Manage scan policies
 // ZAP: 2015/02/18 Issue 1062: Tidied up extension hooks
 // ZAP: 2015/04/02 Issue 321: Support multiple databases and Issue 1582: Low memory option
+// ZAP: 2015/04/17 A problem occur when a single node should be scanned because count start from -1
 
 package org.parosproxy.paros.core.scanner;
 
@@ -97,7 +98,7 @@ public class HostProcess implements Runnable {
     private long hostProcessStartTime = 0;
 
     // ZAP: progress related
-    private int nodeInScopeCount = -1;
+    private int nodeInScopeCount = 0;
     private final Map<Integer, Integer> mapPluginProgress = new HashMap<>();
     private int percentage = 0;
     

File: src/org/zaproxy/zap/control/CoreFunctionality.java
Patch:
@@ -85,7 +85,6 @@ private static synchronized void createExtensions() {
 			extensions.add(new org.zaproxy.zap.extension.encoder2.ExtensionEncoder2());
 			extensions.add(new org.zaproxy.zap.extension.ext.ExtensionExtension());
 			extensions.add(new org.zaproxy.zap.extension.forceduser.ExtensionForcedUser());
-			extensions.add(new org.zaproxy.zap.extension.fuzz.ExtensionFuzz());
 			extensions.add(new org.zaproxy.zap.extension.globalexcludeurl.ExtensionGlobalExcludeURL());
 			extensions.add(new org.zaproxy.zap.extension.help.ExtensionHelp());
 			extensions.add(new org.zaproxy.zap.extension.httppanel.component.all.ExtensionHttpPanelComponentAll());
@@ -100,8 +99,6 @@ private static synchronized void createExtensions() {
 			extensions.add(new org.zaproxy.zap.extension.httpsessions.ExtensionHttpSessions());
 			extensions.add(new org.zaproxy.zap.extension.keyboard.ExtensionKeyboard());
 			extensions.add(new org.zaproxy.zap.extension.log4j.ExtensionLog4j());
-			extensions.add(new org.zaproxy.zap.extension.multiFuzz.ExtensionFuzz());
-			extensions.add(new org.zaproxy.zap.extension.multiFuzz.impl.http.ExtensionRegister());
 			extensions.add(new org.zaproxy.zap.extension.params.ExtensionParams());
 			extensions.add(new org.zaproxy.zap.extension.pscan.ExtensionPassiveScan());
 			extensions.add(new org.zaproxy.zap.extension.script.ExtensionScript());

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -370,6 +370,7 @@ public Session newSession() {
 				@Override
 				public void run() {
 					view.getSiteTreePanel().getTreeSite().setModel(session.getSiteTree());
+					view.getSiteTreePanel().reloadContextTree();
 				}
 			});
 			

File: src/org/parosproxy/paros/view/SiteMapPanel.java
Patch:
@@ -462,7 +462,7 @@ public void valueChanged(javax.swing.event.TreeSelectionEvent e) {
 		return treeSite;
 	}
 	
-	protected void reloadContextTree() {
+	public void reloadContextTree() {
 		SiteNode root;
 		if (this.contextTree == null) {
 			root = new SiteNode(null, -1, Constant.messages.getString("context.list"));

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -100,7 +100,7 @@ public class ScannerParam extends AbstractParam {
     public static final int RPC_USERDEF = 1 << 8;
 
     // Defaults for initial configuration
-    public static final int TARGET_INJECTABLE_DEFAULT = TARGET_QUERYSTRING | TARGET_POSTDATA | TARGET_COOKIE | TARGET_HTTPHEADERS | TARGET_URLPATH;
+    public static final int TARGET_INJECTABLE_DEFAULT = TARGET_QUERYSTRING | TARGET_POSTDATA;
     public static final int TARGET_ENABLED_RPC_DEFAULT = RPC_MULTIPART | RPC_XML | RPC_JSON | RPC_GWT | RPC_ODATA | RPC_DWR;
 
     // Internal variables

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -789,7 +789,7 @@ private void install(AddOn ao) {
 
         if (latestVersionInfo != null) {
             AddOn addOn = latestVersionInfo.getAddOn(ao.getId());
-            if (AddOn.InstallationStatus.DOWNLOADING == addOn.getInstallationStatus()) {
+            if (addOn != null && AddOn.InstallationStatus.DOWNLOADING == addOn.getInstallationStatus()) {
                 addOn.setInstallationStatus(AddOn.InstallationStatus.INSTALLED);
             }
         }

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -31,6 +31,8 @@
 // ZAP: 2013/09/02 Resolved header value setting on setHeader() which manage wrongly the "-" char
 // ZAP: 2013/11/16 Issue 867: HttpMessage#getFormParams should return an empty TreeSet if
 // the request body is not "x-www-form-urlencoded"
+// ZAP: 2015/03/26 Issue 1573: Add option to inject plugin ID in header for all ascan requests
+
 package org.parosproxy.paros.network;
 
 import java.util.ArrayList;
@@ -117,6 +119,7 @@ public abstract class HttpHeader implements java.io.Serializable {
 	//ZAP: added "Allow" and "Public" Headers, for response to "OPTIONS" method
 	public static final String METHODS_ALLOW = "Allow";
 	public static final String METHODS_PUBLIC = "Public";  //IIS specific?
+	public static final String X_ZAP_SCAN_ID = "X-ZAP-Scan-ID";
 
     public HttpHeader() {
         init();

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -257,6 +257,7 @@ public static boolean initMac() {
     private void run() throws Exception {
 
         final boolean isGUI = cmdLine.isGUI();
+        Constant.setLowMemoryOption(cmdLine.isLowMem());
 
         boolean firstTime = false;
         if (isGUI) {
@@ -491,6 +492,7 @@ private ControlOverrides getOverrides() {
         overrides.setProxyPort(this.cmdLine.getPort());
         overrides.setProxyHost(this.cmdLine.getHost());
         overrides.setConfigs(this.cmdLine.getConfigs());
+        overrides.setExperimentalDb(this.cmdLine.isExperimentalDb());
         return overrides;
     }
 

File: src/org/parosproxy/paros/db/TableAlert.java
Patch:
@@ -57,4 +57,5 @@ void updateHistoryIds(int alertId, int historyId,
 	List<RecordAlert> getAlertsBySourceHistoryId(int historyId)
 			throws DatabaseException;
 
+	Vector<Integer> getAlertList() throws DatabaseException;
 }
\ No newline at end of file

File: src/org/parosproxy/paros/extension/edit/ExtensionEdit.java
Patch:
@@ -27,6 +27,7 @@
 
 package org.parosproxy.paros.extension.edit;
 
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 
 import javax.swing.JFrame;
@@ -98,7 +99,7 @@ private void showFindDialog(JFrame frame, JTextComponent lastInvoker) {
     private ZapMenuItem getMenuFind() {
         if (menuFind == null) {
             menuFind = new ZapMenuItem("menu.edit.find", 
-            		KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK, false));
+            		KeyStroke.getKeyStroke(KeyEvent.VK_F, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(), false));
 
             menuFind.addActionListener(new java.awt.event.ActionListener() {
                 @Override

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -45,6 +45,7 @@
 import java.awt.Event;
 import java.awt.EventQueue;
 import java.awt.GridBagConstraints;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.util.List;
 import java.util.Vector;
@@ -118,7 +119,7 @@ private  void initialize() {
 	    }
 		this.add(getHistoryPanel(), java.awt.BorderLayout.CENTER);
 		
-		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("history.panel.mnemonic"));
 		
 	}

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/ManualHttpRequestEditorDialog.java
Patch:
@@ -27,8 +27,8 @@
 
 import java.awt.BorderLayout;
 import java.awt.Component;
-import java.awt.Event;
 import java.awt.HeadlessException;
+import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.KeyEvent;
@@ -256,7 +256,7 @@ protected void saveConfig() {
 	public ZapMenuItem getMenuItem() {
 		if (menuItem == null) {
 			menuItem = new ZapMenuItem("menu.tools.manReq",
-					KeyStroke.getKeyStroke(KeyEvent.VK_M, Event.CTRL_MASK, false));
+					KeyStroke.getKeyStroke(KeyEvent.VK_M, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(), false));
 			menuItem.addActionListener(new ActionListener() {
 				@Override
 				public void actionPerformed(ActionEvent e) {

File: src/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -33,6 +33,7 @@
 import java.awt.BorderLayout;
 import java.awt.Event;
 import java.awt.EventQueue;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 
 import javax.swing.ImageIcon;
@@ -84,7 +85,7 @@ private void initialize() {
 	    }
         // ZAP: Added Output (doc) icon
 		this.setIcon(new ImageIcon(OutputPanel.class.getResource("/resource/icon/16/172.png")));	// 'doc' icon
-		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("output.panel.mnemonic"));
 
         this.add(getMainPanel(), BorderLayout.CENTER);

File: src/org/parosproxy/paros/view/SiteMapPanel.java
Patch:
@@ -44,6 +44,7 @@
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import java.awt.Insets;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -142,7 +143,7 @@ private  void initialize() {
 		this.setHideable(false);
 	    this.setIcon(new ImageIcon(View.class.getResource("/resource/icon/16/094.png")));
 	    this.setName(Constant.messages.getString("sites.panel.title"));
-		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("sites.panel.mnemonic"));
 
 	    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -64,6 +64,7 @@
 
 import java.awt.Component;
 import java.awt.Event;
+import java.awt.Toolkit;
 import java.awt.Window;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
@@ -570,7 +571,7 @@ public HttpPanelRequest getRequestPanel() {
             requestPanel.setEnableViewSelect(true);
             requestPanel.loadConfig(Model.getSingleton().getOptionsParam().getConfig());
             requestPanel.setDefaultAccelerator(KeyStroke.getKeyStroke(
-                    KeyEvent.VK_R, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+                    KeyEvent.VK_R, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
             requestPanel.setMnemonic(Constant.messages.getChar("http.panel.request.mnemonic"));
 
         }
@@ -588,7 +589,7 @@ public HttpPanelResponse getResponsePanel() {
             responsePanel.setEnableViewSelect(false);
             responsePanel.loadConfig(Model.getSingleton().getOptionsParam().getConfig());
             responsePanel.setDefaultAccelerator(KeyStroke.getKeyStroke(
-                    KeyEvent.VK_R, Event.CTRL_MASK | Event.ALT_MASK | Event.SHIFT_MASK, false));
+                    KeyEvent.VK_R, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.ALT_MASK | Event.SHIFT_MASK, false));
             responsePanel.setMnemonic(Constant.messages.getChar("http.panel.response.mnemonic"));
         }
         return responsePanel;

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -26,6 +26,7 @@
 import java.awt.EventQueue;
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -152,7 +153,7 @@ private void initialize() {
 
         this.add(getPanelCommand(), getPanelCommand().getName());
 			
-		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("alerts.panel.mnemonic"));
 		this.setShowByDefault(true);
 	}

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.Event;
 import java.awt.EventQueue;
+import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.KeyEvent;
@@ -87,7 +88,7 @@ public ActiveScanPanel(ExtensionActiveScan extension) {
         super("ascan", new ImageIcon(ActiveScanPanel.class.getResource("/resource/icon/16/093.png")), extension, null);
         this.extension = extension;
 		this.setDefaultAccelerator(KeyStroke.getKeyStroke(
-				KeyEvent.VK_A, Event.CTRL_MASK | Event.ALT_MASK | Event.SHIFT_MASK, false));
+				KeyEvent.VK_A, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.ALT_MASK | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("ascan.panel.mnemonic"));
     }
 

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -22,6 +22,7 @@
 import java.awt.Dimension;
 import java.awt.Event;
 import java.awt.EventQueue;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.io.File;
 import java.lang.reflect.InvocationTargetException;
@@ -294,7 +295,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
     private ZapMenuItem getMenuItemPolicy() {
         if (menuItemPolicy == null) {
             menuItemPolicy = new ZapMenuItem("menu.analyse.scanPolicy",
-                    KeyStroke.getKeyStroke(KeyEvent.VK_P, Event.CTRL_MASK, false));
+                    KeyStroke.getKeyStroke(KeyEvent.VK_P, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(), false));
 
             menuItemPolicy.addActionListener(new java.awt.event.ActionListener() {
                 @Override
@@ -340,7 +341,7 @@ protected void showPolicyDialog(PolicyManagerDialog parent, String name) throws
     private ZapMenuItem getMenuItemCustomScan() {
         if (menuItemCustomScan == null) {
             menuItemCustomScan = new ZapMenuItem("menu.tools.ascanadv",
-                    KeyStroke.getKeyStroke(KeyEvent.VK_A, Event.CTRL_MASK | Event.ALT_MASK, false));
+                    KeyStroke.getKeyStroke(KeyEvent.VK_A, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.ALT_MASK, false));
 
             menuItemCustomScan.addActionListener(new java.awt.event.ActionListener() {
                 @Override

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -18,8 +18,8 @@
  * limitations under the License. 
  */
 package org.zaproxy.zap.extension.autoupdate;
-import java.awt.Event;
 import java.awt.EventQueue;
+import java.awt.Toolkit;
 import java.awt.Window;
 import java.awt.event.KeyEvent;
 import java.io.File;
@@ -145,7 +145,7 @@ private void initialize() {
 	private ZapMenuItem getMenuItemCheckUpdate() {
 		if (menuItemCheckUpdate == null) {
 			menuItemCheckUpdate = new ZapMenuItem("cfu.help.menu.check", 
-					KeyStroke.getKeyStroke(KeyEvent.VK_U, Event.CTRL_MASK, false));
+					KeyStroke.getKeyStroke(KeyEvent.VK_U, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(), false));
 			menuItemCheckUpdate.setText(Constant.messages.getString("cfu.help.menu.check"));
 			menuItemCheckUpdate.addActionListener(new java.awt.event.ActionListener() { 
 				@Override
@@ -162,7 +162,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	private ZapMenuItem getMenuItemLoadAddOn() {
 		if (menuItemLoadAddOn == null) {
 			menuItemLoadAddOn = new ZapMenuItem("cfu.file.menu.loadaddon", 
-					KeyStroke.getKeyStroke(KeyEvent.VK_L, Event.CTRL_MASK, false));
+					KeyStroke.getKeyStroke(KeyEvent.VK_L, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(), false));
 			menuItemLoadAddOn.addActionListener(new java.awt.event.ActionListener() { 
 				@Override
 				public void actionPerformed(java.awt.event.ActionEvent e) {

File: src/org/zaproxy/zap/extension/brk/BreakPanel.java
Patch:
@@ -23,6 +23,7 @@
 import java.awt.BorderLayout;
 import java.awt.CardLayout;
 import java.awt.Event;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 
 import javax.swing.BorderFactory;
@@ -77,7 +78,7 @@ public BreakPanel(ExtensionBreak extension, BreakpointsParam breakpointsParams)
 		
 		this.setIcon(new ImageIcon(BreakPanel.class.getResource("/resource/icon/16/101grey.png")));	// 'grey X' icon
 
-		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("brk.panel.mnemonic"));
 		
 		this.setLayout(new BorderLayout());

File: src/org/zaproxy/zap/extension/brk/BreakpointsPanel.java
Patch:
@@ -23,6 +23,7 @@
 import java.awt.Event;
 import java.awt.EventQueue;
 import java.awt.GridBagConstraints;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
@@ -76,7 +77,7 @@ private  void initialize() {
         this.setName(Constant.messages.getString("brk.panel.title"));
 		this.setIcon(new ImageIcon(BreakpointsPanel.class.getResource("/resource/icon/16/101.png")));	// 'red X' icon
 		this.setDefaultAccelerator(KeyStroke.getKeyStroke(
-				KeyEvent.VK_B, Event.CTRL_MASK | Event.ALT_MASK | Event.SHIFT_MASK, false));
+				KeyEvent.VK_B, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.ALT_MASK | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("brk.panel.mnemonic"));
         this.add(getPanelCommand(), getPanelCommand().getName());
 	}

File: src/org/zaproxy/zap/extension/encoder2/ExtensionEncoder2.java
Patch:
@@ -19,8 +19,8 @@
  */
 package org.zaproxy.zap.extension.encoder2;
 
-import java.awt.Event;
 import java.awt.Frame;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -88,7 +88,7 @@ public void hook(ExtensionHook extensionHook) {
 	private ZapMenuItem getToolsMenuItemEncoder() {
 		if (toolsMenuEncoder == null) {
 			toolsMenuEncoder = new ZapMenuItem("enc2.tools.menu.encdec",
-					KeyStroke.getKeyStroke(KeyEvent.VK_E, Event.CTRL_MASK, false));
+					KeyStroke.getKeyStroke(KeyEvent.VK_E, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(), false));
 
 			toolsMenuEncoder.addActionListener(new java.awt.event.ActionListener() { 
 				@Override

File: src/org/zaproxy/zap/extension/fuzz/FuzzerPanel.java
Patch:
@@ -22,6 +22,7 @@
 import java.awt.CardLayout;
 import java.awt.Event;
 import java.awt.GridBagConstraints;
+import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.KeyEvent;
@@ -88,7 +89,7 @@ private  void initialize() {
         this.setSize(474, 251);
         this.setName(Constant.messages.getString("fuzz.panel.title"));
 		this.setIcon(new ImageIcon(FuzzerPanel.class.getResource("/resource/icon/16/097.png")));
-		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("fuzz.panel.mnemonic"));
 
         this.add(getPanelCommand(), getPanelCommand().getName());

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsPanel.java
Patch:
@@ -23,6 +23,7 @@
 import java.awt.Event;
 import java.awt.EventQueue;
 import java.awt.GridBagConstraints;
+import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.ItemEvent;
@@ -99,7 +100,7 @@ private void initialize() {
 		this.setName(Constant.messages.getString("httpsessions.panel.title"));
 		this.setIcon(new ImageIcon(HttpSessionsPanel.class.getResource("/resource/icon/16/session.png")));
 		this.setDefaultAccelerator(KeyStroke.getKeyStroke(
-				KeyEvent.VK_H, Event.CTRL_MASK | Event.ALT_MASK | Event.SHIFT_MASK, false));
+				KeyEvent.VK_H, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.ALT_MASK | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("httpsessions.panel.mnemonic"));
 		this.add(getPanelCommand(), getPanelCommand().getName());
 	}

File: src/org/zaproxy/zap/extension/params/ParamsPanel.java
Patch:
@@ -22,6 +22,7 @@
 import java.awt.CardLayout;
 import java.awt.Event;
 import java.awt.GridBagConstraints;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 
 import javax.swing.ImageIcon;
@@ -79,7 +80,7 @@ private  void initialize() {
         this.setSize(474, 251);
         this.setName(Constant.messages.getString("params.panel.title"));
 		this.setIcon(new ImageIcon(ParamsPanel.class.getResource("/resource/icon/16/179.png")));	// 'form' icon
-		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("params.panel.mnemonic"));
         this.add(getPanelCommand(), getPanelCommand().getName());
 	}

File: src/org/zaproxy/zap/extension/search/ExtensionSearch.java
Patch:
@@ -19,8 +19,8 @@
  */
 package org.zaproxy.zap.extension.search;
 
-import java.awt.Event;
 import java.awt.EventQueue;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -200,7 +200,7 @@ public void search(String filter, SearchListenner listenner, Type reqType, boole
 	private ZapMenuItem getMenuSearch() {
         if (menuSearch == null) {
         	menuSearch = new ZapMenuItem("menu.edit.search",
-        			KeyStroke.getKeyStroke(KeyEvent.VK_H, Event.CTRL_MASK, false));
+        			KeyStroke.getKeyStroke(KeyEvent.VK_H, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(), false));
 
         	menuSearch.addActionListener(new java.awt.event.ActionListener() {
                 @Override
@@ -215,7 +215,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
     private ZapMenuItem getMenuNext() {
         if (menuNext == null) {
         	menuNext = new ZapMenuItem("menu.edit.next", 
-        			KeyStroke.getKeyStroke(KeyEvent.VK_G, Event.CTRL_MASK, false));
+        			KeyStroke.getKeyStroke(KeyEvent.VK_G, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(), false));
 
         	menuNext.addActionListener(new java.awt.event.ActionListener() {
                 @Override

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -21,6 +21,7 @@
 import java.awt.Event;
 import java.awt.EventQueue;
 import java.awt.Insets;
+import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.KeyEvent;
@@ -86,7 +87,7 @@ public SpiderPanel(ExtensionSpider extension, SpiderParam spiderScanParam) {
 				spiderScanParam);
 		this.extension = extension;
 		this.setDefaultAccelerator(KeyStroke.getKeyStroke(
-				KeyEvent.VK_D, Event.CTRL_MASK | Event.SHIFT_MASK, false));
+				KeyEvent.VK_D, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("spider.panel.mnemonic"));
 
 	}

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -949,7 +949,7 @@ private void processAlerts(String baseUrl, int start, int count, Processor<Alert
 		try {
 			TableAlert tableAlert = Model.getSingleton().getDb()
 					.getTableAlert();
-			Vector<Integer> v = tableAlert.getAlertList();
+			Vector<Integer> v = tableAlert.getAlertListBySession(Model.getSingleton().getSession().getSessionId());
 
 			PaginationConstraintsChecker pcc = new PaginationConstraintsChecker(start, count);
 			for (int i = 0; i < v.size(); i++) {

File: src/org/parosproxy/paros/core/scanner/AbstractDefaultFilePlugin.java
Patch:
@@ -133,7 +133,7 @@ public void scan() {
                 msg.getRequestBody().setLength(0);
                 sendAndReceive(msg);
                 if (isFileExist(msg)) {
-                    bingo(Alert.RISK_MEDIUM, Alert.SUSPICIOUS, uri.toString(), "", "", "", "", msg);
+                    bingo(Alert.RISK_MEDIUM, Alert.CONFIDENCE_LOW, uri.toString(), "", "", "", "", msg);
                 }
             } catch (Exception e) {
             }

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -451,7 +451,7 @@ public int getHighestAlert() {
 	   if(alerts==null)
 		   return i;
 	   for (Alert a : alerts) {
-		   if (a.getConfidence() != Alert.FALSE_POSITIVE && a.getRisk() > i) {
+		   if (a.getConfidence() != Alert.CONFIDENCE_FALSE_POSITIVE && a.getRisk() > i) {
 			   i = a.getRisk();
 		   }
 	   }

File: src/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -122,7 +122,7 @@ private void appendIcons(StringBuilder sb) {
     	int highestRisk = -1;
     	Alert highestAlert = null;
     	for (Alert alert : this.getAlerts()) {
-    		if (alert.getConfidence() != Alert.FALSE_POSITIVE && alert.getRisk() > highestRisk) {
+    		if (alert.getConfidence() != Alert.CONFIDENCE_FALSE_POSITIVE && alert.getRisk() > highestRisk) {
     			highestRisk = alert.getRisk();
     			highestAlert = alert;
     		}

File: src/org/zaproxy/zap/extension/alert/AlertTreeModel.java
Patch:
@@ -137,7 +137,7 @@ private synchronized void updatePathEventHandler(Alert originalAlert, Alert aler
     
     private AlertNode findAndAddChild(AlertNode parent, String nodeName, Alert alert) {
         int risk = alert.getRisk();
-        if (alert.getConfidence() == Alert.FALSE_POSITIVE) {
+        if (alert.getConfidence() == Alert.CONFIDENCE_FALSE_POSITIVE) {
             // Special case!
             risk = -1;
         }
@@ -157,7 +157,7 @@ private AlertNode findAndAddChild(AlertNode parent, String nodeName, Alert alert
 
     private void addLeaf(AlertNode parent, String nodeName, Alert alert) {
         int risk = alert.getRisk();
-        if (alert.getConfidence() == Alert.FALSE_POSITIVE) {
+        if (alert.getConfidence() == Alert.CONFIDENCE_FALSE_POSITIVE) {
             // Special case!
             risk = -1;
         }

File: src/org/zaproxy/zap/extension/alert/AlertViewPanel.java
Patch:
@@ -213,7 +213,7 @@ public void actionPerformed(ActionEvent e) {
 
 			alertEditRisk = new JComboBox<>(Alert.MSG_RISK);
 			alertEditConfidence = new JComboBox<>(Alert.MSG_CONFIDENCE);
-			alertEditConfidence.setSelectedItem(Alert.MSG_CONFIDENCE[Alert.MEDIUM]);
+			alertEditConfidence.setSelectedItem(Alert.MSG_CONFIDENCE[Alert.CONFIDENCE_MEDIUM]);
 			alertEditAttack = new ZapTextField();
 			
 			paramListModel = new DefaultComboBoxModel<>();
@@ -417,7 +417,7 @@ public void displayAlert (Alert alert) {
 			alertName.setText(alert.getAlert());
 	
 			alertRisk.setText(Alert.MSG_RISK[alert.getRisk()]);
-	    	if (alert.getConfidence() == Alert.FALSE_POSITIVE) {
+	    	if (alert.getConfidence() == Alert.CONFIDENCE_FALSE_POSITIVE) {
 	    		// Special case - theres no risk - use the green flag
 				alertRisk.setIcon(new ImageIcon(Constant.OK_FLAG_IMAGE_URL));
 	    	} else {

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -625,7 +625,7 @@ public String getXml(SiteNode site) {
         xml.append("<alerts>");
         List<Alert> alerts = site.getAlerts();
         for (Alert alert : alerts) {
-            if (alert.getConfidence() != Alert.FALSE_POSITIVE) {
+            if (alert.getConfidence() != Alert.CONFIDENCE_FALSE_POSITIVE) {
                 String urlParamXML = alert.getUrlParamXML();
                 xml.append(alert.toPluginXML(urlParamXML));
             }

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -957,7 +957,7 @@ private void processAlerts(String baseUrl, int start, int count, Processor<Alert
 				RecordAlert recAlert = tableAlert.read(alertId);
 				Alert alert = new Alert(recAlert);
 
-				if (alert.getConfidence() != Alert.FALSE_POSITIVE
+				if (alert.getConfidence() != Alert.CONFIDENCE_FALSE_POSITIVE
 						&& !alerts.contains(alert)) {
 					if (baseUrl != null && ! alert.getUri().startsWith(baseUrl)) {
 						// Not subordinate to the specified URL

File: src/org/zaproxy/clientapi/core/Alert.java
Patch:
@@ -34,7 +34,7 @@ public enum Confidence {Low, Medium, High, Confirmed};
 	private String alert;
 	private Risk risk;
 	/**
-	 * @deprecated (2.4.0) Replaced by {@link #confidence}.
+	 * @deprecated (2.4.0) Replaced by {@link Confidence}.
 	 * Use of reliability has been deprecated in favour of using confidence
 	 */
 	@Deprecated

File: src/org/parosproxy/paros/view/SiteMapPanel.java
Patch:
@@ -82,6 +82,7 @@
 import org.zaproxy.zap.model.Target;
 import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.ContextCreateDialog;
+import org.zaproxy.zap.view.ContextGeneralPanel;
 import org.zaproxy.zap.view.ContextsTreeCellRenderer;
 import org.zaproxy.zap.view.LayoutHelper;
 import org.zaproxy.zap.view.SiteMapListener;
@@ -554,7 +555,7 @@ public void mouseClicked(java.awt.event.MouseEvent e) {
 					    if (node != null && node.getUserObject() != null) {
 					    	Target target = (Target)node.getUserObject();
 					    	getView().showSessionDialog(Model.getSingleton().getSession(), 
-					    			Integer.toString(target.getContext().getIndex()));
+					    			ContextGeneralPanel.getPanelName(target.getContext()));
 					    }
 				    }
 				}

File: src/org/zaproxy/zap/extension/api/ContextAPI.java
Patch:
@@ -93,10 +93,9 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
         } else if (INCLUDE_IN_CONTEXT_REGEX.equals(name)) {
             addIncludeToContext(getContext(params), getRegex(params));
         } else if (ACTION_NEW_CONTEXT.equals(name)){
-            Context context = Model.getSingleton().getSession().getNewContext();
             String contextName = params.getString(CONTEXT_NAME);
             if (contextName != null && contextName.length() > 0){
-                context.setName(contextName);
+                Context context = Model.getSingleton().getSession().getNewContext(contextName);
                 Model.getSingleton().getSession().saveContext(context);
                 return new ApiResponseElement(CONTEXT_ID, String.valueOf(context.getIndex()));
             }

File: src/org/zaproxy/zap/view/ContextCreateDialog.java
Patch:
@@ -62,8 +62,7 @@ public void siteNodeSelected(String field, SiteNode node) {
 
 	@Override
 	public void save() {
-		Context ctx = Model.getSingleton().getSession().getNewContext();
-		ctx.setName(this.getStringValue(NAME_FIELD));
+		Context ctx = Model.getSingleton().getSession().getNewContext(this.getStringValue(NAME_FIELD));
 		ctx.setDescription(this.getStringValue(DESC_FIELD));
 		ctx.setInScope(this.getBoolValue(IN_SCOPE_FIELD));
 		if (topNode != null) {

File: src/org/zaproxy/zap/view/popup/PopupMenuItemIncludeInContext.java
Patch:
@@ -86,14 +86,14 @@ public void performAction(SiteNode sn) {
             url = Pattern.quote(url) + ".*";
         }
 
-        performAction(url);
+        performAction(sn.getNodeName(), url);
     }
 
-    protected void performAction(String url) {
+    protected void performAction(String name, String url) {
         Session session = Model.getSingleton().getSession();
 
         if (context == null) {
-            context = session.getNewContext();
+            context = session.getNewContext(name);
         }
 
         // Manually create the UI shared contexts so any modifications are done

File: src/org/zaproxy/zap/extension/script/ScriptType.java
Patch:
@@ -20,7 +20,7 @@ public class ScriptType {
 	private Set<String> capabilitiesSet = new HashSet<String>();
 	
 	public ScriptType(String name, String i18nKey, ImageIcon icon, boolean isEnableable) {
-		this(i18nKey, i18nKey, icon, isEnableable, null);
+		this(name, i18nKey, icon, isEnableable, null);
 	}
 
 	public ScriptType(String name, String i18nKey, ImageIcon icon, boolean isEnableable, String[] capabilities) {

File: src/org/parosproxy/paros/core/scanner/ScannerHook.java
Patch:
@@ -35,13 +35,13 @@ public interface ScannerHook {
 	 * @param msg The message that will be scanned, once this method has finished.
 	 * @param plugin The current plugin.
 	 */
-	void beforeScan(HttpMessage msg, AbstractPlugin plugin);
+	void beforeScan(HttpMessage msg, AbstractPlugin plugin, Scanner scanner);
 	
 	/**
 	 * Method that is run after plugins run their SendAndReceive method.
 	 * @param msg The message that was scanned by the plugin.
 	 * @param plugin The current plugin.
 	 */
-	void afterScan(HttpMessage msg, AbstractPlugin plugin);
+	void afterScan(HttpMessage msg, AbstractPlugin plugin, Scanner scanner);
 
 }

File: src/org/zaproxy/zap/extension/ascan/ActiveScanController.java
Patch:
@@ -31,6 +31,7 @@
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
 import org.zaproxy.zap.extension.alert.ExtensionAlert;
+import org.zaproxy.zap.extension.script.ScriptCollection;
 import org.zaproxy.zap.model.GenericScanner2;
 import org.zaproxy.zap.model.ScanController;
 import org.zaproxy.zap.model.Target;
@@ -133,6 +134,8 @@ public void alertFound(Alert alert) {
 						ascan.setScanPolicy(policy);
 					} else if (obj instanceof TechSet) {
 						ascan.setTechSet((TechSet) obj);
+					} else if (obj instanceof ScriptCollection) {
+						ascan.addScriptCollection((ScriptCollection)obj);
 					} else {
 						logger.error("Unexpected contextSpecificObject: " + obj.getClass().getCanonicalName());
 					}

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -231,6 +231,7 @@ private JButton getFilterButton() {
 			// ZAP: Changed to use the class literal.
 			filterButton.setIcon(new ImageIcon(LogPanel.class.getResource("/resource/icon/16/054.png")));	// 'filter' icon
 			filterButton.setToolTipText(Constant.messages.getString("history.filter.button.filter"));
+			DisplayUtils.scaleIcon(filterButton);
 
 			filterButton.addActionListener(new java.awt.event.ActionListener() { 
 

File: src/org/zaproxy/zap/extension/script/ScriptTreeModel.java
Patch:
@@ -125,6 +125,9 @@ public ScriptNode addScript(ScriptWrapper script) {
 		}
 		
 		ScriptNode node = new ScriptNode(script);
+		if (script.getType() == null) {
+			throw new InvalidParameterException("Unrecognised type: " + script.getTypeName());
+		}
 		ScriptNode parent = scriptsNodeMap.get(script.getType().getName());
 		
 		if (parent != null) {

File: src/org/zaproxy/zap/view/MainToolbarPanel.java
Patch:
@@ -349,7 +349,6 @@ private JToggleButton getBtnExpandSites() {
 					MainToolbarPanel.class.getResource("/resource/icon/expand_sites.png"),
 					View.DISPLAY_OPTION_LEFT_FULL));
 			btnExpandSites.setToolTipText(Constant.messages.getString("view.toolbar.expandSites"));
-			DisplayUtils.scaleIcon(btnExpandSites);
 			
 			expandButtons.add(btnExpandSites);
 		}
@@ -362,7 +361,6 @@ private JToggleButton getBtnExpandReports() {
 					MainToolbarPanel.class.getResource("/resource/icon/expand_info.png"),
 					View.DISPLAY_OPTION_BOTTOM_FULL));
 			btnExpandReports.setToolTipText(Constant.messages.getString("view.toolbar.expandInfo"));
-			DisplayUtils.scaleIcon(btnExpandReports);
 
 			expandButtons.add(btnExpandReports);
 		}
@@ -375,7 +373,6 @@ private JToggleButton getBtnExpandFull() {
 					MainToolbarPanel.class.getResource("/resource/icon/expand_full.png"),
 					View.DISPLAY_OPTION_TOP_FULL));
 			btnExpandFull.setToolTipText(Constant.messages.getString("view.toolbar.expandFull"));
-			DisplayUtils.scaleIcon(btnExpandFull);
 
 			expandButtons.add(btnExpandFull);
 		}

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -69,6 +69,7 @@
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.httppanel.HttpPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.DeselectableButtonGroup;
 import org.zaproxy.zap.view.ZapToggleButton;
 import org.zaproxy.zap.view.table.DefaultHistoryReferencesTableEntry;
@@ -249,6 +250,7 @@ private JToggleButton getScopeButton() {
 			scopeButton.setToolTipText(Constant.messages.getString("history.scope.button.unselected"));
 			scopeButton.setSelectedIcon(new ImageIcon(LogPanel.class.getResource("/resource/icon/fugue/target.png")));
 			scopeButton.setSelectedToolTipText(Constant.messages.getString("history.scope.button.selected"));
+			DisplayUtils.scaleIcon(scopeButton);
 
 			scopeButton.addActionListener(new java.awt.event.ActionListener() { 
 
@@ -269,6 +271,7 @@ private JToggleButton getLinkWithSitesTreeButton() {
 			linkWithSitesTreeButton.setToolTipText(Constant.messages.getString("history.linkWithSitesSelection.unselected.button.tooltip"));
 			linkWithSitesTreeButton.setSelectedIcon(new ImageIcon(LogPanel.class.getResource("/resource/icon/16/094.png")));
 			linkWithSitesTreeButton.setSelectedToolTipText(Constant.messages.getString("history.linkWithSitesSelection.selected.button.tooltip"));
+			DisplayUtils.scaleIcon(linkWithSitesTreeButton);
 
 			linkWithSitesTreeButton.addActionListener(new java.awt.event.ActionListener() {
 

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -60,6 +60,7 @@
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.HttpPanel;
 import org.zaproxy.zap.extension.search.SearchMatch;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.DeselectableButtonGroup;
 import org.zaproxy.zap.view.LayoutHelper;
 import org.zaproxy.zap.view.ZapToggleButton;
@@ -240,6 +241,7 @@ private JToggleButton getScopeButton() {
 			scopeButton.setToolTipText(Constant.messages.getString("history.scope.button.unselected"));
 			scopeButton.setSelectedIcon(new ImageIcon(AlertPanel.class.getResource("/resource/icon/fugue/target.png")));
 			scopeButton.setSelectedToolTipText(Constant.messages.getString("history.scope.button.selected"));
+			DisplayUtils.scaleIcon(scopeButton);
 
 			scopeButton.addActionListener(new java.awt.event.ActionListener() { 
 
@@ -269,6 +271,7 @@ private JToggleButton getLinkWithSitesTreeButton() {
             linkWithSitesTreeButton.setToolTipText(Constant.messages.getString("alerts.panel.linkWithSitesSelection.unselected.button.tooltip"));
             linkWithSitesTreeButton.setSelectedIcon(new ImageIcon(AlertPanel.class.getResource("/resource/icon/16/094.png")));
             linkWithSitesTreeButton.setSelectedToolTipText(Constant.messages.getString("alerts.panel.linkWithSitesSelection.selected.button.tooltip"));
+			DisplayUtils.scaleIcon(linkWithSitesTreeButton);
 
             linkWithSitesTreeButton.addActionListener(new java.awt.event.ActionListener() {
 

File: src/org/zaproxy/zap/view/BackgroundImagePanel.java
Patch:
@@ -26,6 +26,8 @@
 import javax.imageio.ImageIO;
 import javax.swing.JPanel;
 
+import org.zaproxy.zap.utils.DisplayUtils;
+
 /**
  *
  * @author yhawke (2014)
@@ -72,7 +74,7 @@ public final void setBackgroundImage(URL imageUrl) {
     protected void paintComponent(Graphics g) {
         if (img != null) {
             setOpaque(false);
-            g.drawImage(img, 0, 0, null);
+            g.drawImage(img, 0, 0, DisplayUtils.getScaledSize(img.getWidth()), DisplayUtils.getScaledSize(img.getHeight()), null);
         }
         
         super.paintComponent(g);

File: src/org/zaproxy/zap/view/SplashScreen.java
Patch:
@@ -216,7 +216,7 @@ private void updateLoadingJProgressBar() {
     private JProgressBar getLoadingJProgressBar() {
         if (loadProgressBar == null) {
             loadProgressBar = new JProgressBar();
-            loadProgressBar.setPreferredSize(new Dimension(100, 12));
+            loadProgressBar.setPreferredSize(DisplayUtils.getScaledDimension(100, 12));
             loadProgressBar.setMinimum(0);
             loadProgressBar.setMaximum(100);
             loadProgressBar.setValue(50);

File: src/org/parosproxy/paros/extension/filter/AllFilterPanel.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/11/06 Added warning that filters will be removed
+// ZAP: 2015/02/16 Issue 1528: Support user defined font size
 
 package org.parosproxy.paros.extension.filter;
 
@@ -40,6 +41,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.LayoutHelper;
 
 public class AllFilterPanel extends AbstractParamPanel {
@@ -105,7 +107,7 @@ private void initialize() {
 	private JTable getTableFilter() {
 		if (tableFilter == null) {
 			tableFilter = new JTable();
-			tableFilter.setRowHeight(18);
+            tableFilter.setRowHeight(DisplayUtils.getScaledSize(18));
 			tableFilter.setIntercellSpacing(new java.awt.Dimension(1,1));
 			tableFilter.setModel(getAllFilterTableModel());
 	        for (int i = 0; i < width.length; i++) {

File: src/org/parosproxy/paros/view/AbstractParamContainerPanel.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2014/02/21 Issue 1043: Custom active scan dialog - moved code from AbstractParamDialog
+// ZAP: 2015/02/16 Issue 1528: Support user defined font size
 
 package org.parosproxy.paros.view;
 
@@ -49,6 +50,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.extension.help.ExtensionHelp;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.utils.ZapTextField;
 
@@ -187,7 +189,7 @@ public void valueChanged(javax.swing.event.TreeSelectionEvent e) {
             renderer.setClosedIcon(null);
             treeParam.setCellRenderer(renderer);
 
-            treeParam.setRowHeight(18);
+            treeParam.setRowHeight(DisplayUtils.getScaledSize(18));
         }
         
         return treeParam;

File: src/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -50,6 +50,7 @@
 import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;
 import org.parosproxy.paros.core.scanner.Plugin.AttackStrength;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -344,7 +345,7 @@ private JTable getTableTest() {
         if (tableTest == null) {
             tableTest = new JTable();
             tableTest.setModel(getAllCategoryTableModel());
-            tableTest.setRowHeight(18);
+            tableTest.setRowHeight(DisplayUtils.getScaledSize(18));
             tableTest.setIntercellSpacing(new java.awt.Dimension(1, 1));
             tableTest.setAutoCreateRowSorter(true);
             

File: src/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -42,6 +42,7 @@
 import org.parosproxy.paros.core.scanner.Plugin.AttackStrength;
 import org.parosproxy.paros.core.scanner.PluginFactory;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class PolicyCategoryPanel extends AbstractParamPanel {
 
@@ -89,7 +90,7 @@ private JTable getTableTest() {
 		if (tableTest == null) {
 			tableTest = new JTable();
 			tableTest.setModel(getCategoryTableModel());
-			tableTest.setRowHeight(18);
+			tableTest.setRowHeight(DisplayUtils.getScaledSize(18));
 			tableTest.setIntercellSpacing(new java.awt.Dimension(1,1));
             tableTest.setAutoCreateRowSorter(true);
             

File: src/org/zaproxy/zap/extension/help/ExtensionHelp.java
Patch:
@@ -38,6 +38,7 @@
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.control.ExtensionFactory;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.ZapMenuItem;
 
 /**
@@ -46,7 +47,8 @@
 public class ExtensionHelp extends ExtensionAdaptor {
 
 	private static final String HELP_SET_FILE_NAME = "helpset";
-	public static final ImageIcon HELP_ICON = new ImageIcon(ExtensionHelp.class.getResource("/resource/icon/16/201.png"));
+	public static final ImageIcon HELP_ICON = DisplayUtils.getScaledIcon(
+			new ImageIcon(ExtensionHelp.class.getResource("/resource/icon/16/201.png")));
 
 	private ZapMenuItem menuHelpZap = null;
 	private JButton helpButton = null;

File: src/org/zaproxy/zap/extension/httppanel/view/hex/HttpPanelHexView.java
Patch:
@@ -31,6 +31,7 @@
 import org.zaproxy.zap.extension.httppanel.view.HttpPanelViewModel;
 import org.zaproxy.zap.extension.httppanel.view.HttpPanelViewModelEvent;
 import org.zaproxy.zap.extension.httppanel.view.HttpPanelViewModelListener;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class HttpPanelHexView implements HttpPanelView, HttpPanelViewModelListener {
 
@@ -90,7 +91,7 @@ private JTable getHexTableBody() {
 
 			hexTableBody.setGridColor(java.awt.Color.gray);
 			hexTableBody.setIntercellSpacing(new java.awt.Dimension(1,1));
-			hexTableBody.setRowHeight(18);
+			hexTableBody.setRowHeight(DisplayUtils.getScaledSize(18));
 			
 			hexTableBody.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
 			hexTableBody.getColumnModel().getColumn(0).setPreferredWidth(100);

File: src/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableView.java
Patch:
@@ -45,6 +45,7 @@
 import org.zaproxy.zap.extension.httppanel.view.paramtable.addins.ParamAddinInterface;
 import org.zaproxy.zap.extension.httppanel.view.paramtable.addins.ParamAddinMagic;
 import org.zaproxy.zap.extension.httppanel.view.paramtable.addins.ParamAddinUrlencode;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public abstract class HttpPanelParamTableView implements HttpPanelView, HttpPanelViewModelListener {
 
@@ -79,7 +80,7 @@ private void init() {
         table.setModel(httpPanelTabularModel);
         table.setGridColor(java.awt.Color.gray);
         table.setIntercellSpacing(new java.awt.Dimension(1, 1));
-        table.setRowHeight(18);
+        table.setRowHeight(DisplayUtils.getScaledSize(18));
         
 		// Issue 954: Force the JTable cell to auto-save when the focus changes.
 		// Example, edit cell, click OK for a panel dialog box, the data will get saved.

File: src/org/zaproxy/zap/extension/httppanel/view/posttable/RequestPostTableView.java
Patch:
@@ -32,6 +32,7 @@
 import org.zaproxy.zap.extension.httppanel.view.HttpPanelViewModel;
 import org.zaproxy.zap.extension.httppanel.view.HttpPanelViewModelEvent;
 import org.zaproxy.zap.extension.httppanel.view.HttpPanelViewModelListener;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class RequestPostTableView implements HttpPanelView, HttpPanelViewModelListener {
 
@@ -62,7 +63,7 @@ private void init() {
 
         tableBody.setGridColor(java.awt.Color.gray);
         tableBody.setIntercellSpacing(new java.awt.Dimension(1, 1));
-        tableBody.setRowHeight(18);
+        tableBody.setRowHeight(DisplayUtils.getScaledSize(18));
 
 		// Issue 954: Force the JTable cell to auto-save when the focus changes.
 		// Example, edit cell, click OK for a panel dialog box, the data will get saved.

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -42,6 +42,7 @@
 import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.view.LayoutHelper;
 
 public class PolicyPassiveScanPanel extends AbstractParamPanel {
@@ -159,7 +160,7 @@ private JTable getTableTest() {
         if (tableTest == null) {
             tableTest = new JTable();
             tableTest.setModel(getPassiveScanTableModel());
-            tableTest.setRowHeight(18);
+            tableTest.setRowHeight(DisplayUtils.getScaledSize(18));
             tableTest.setIntercellSpacing(new java.awt.Dimension(1, 1));
             tableTest.setAutoCreateRowSorter(true);
             

File: src/org/zaproxy/zap/view/ContextExcludePanel.java
Patch:
@@ -35,6 +35,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.Session;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class ContextExcludePanel extends AbstractContextPropertiesPanel {
 
@@ -127,7 +128,7 @@ private JTable getTableIgnore() {
 		if (tableIgnore == null) {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
-			tableIgnore.setRowHeight(18);
+			tableIgnore.setRowHeight(DisplayUtils.getScaledSize(18));
 			// Issue 954: Force the JTable cell to auto-save when the focus changes.
 			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
 			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

File: src/org/zaproxy/zap/view/ContextIncludePanel.java
Patch:
@@ -35,6 +35,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.Session;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class ContextIncludePanel extends AbstractContextPropertiesPanel {
 
@@ -128,7 +129,7 @@ private JTable getTableIgnore() {
 		if (tableIgnore == null) {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
-			tableIgnore.setRowHeight(18);
+			tableIgnore.setRowHeight(DisplayUtils.getScaledSize(18));
 			// Issue 954: Force the JTable cell to auto-save when the focus changes.
 			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
 			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

File: src/org/zaproxy/zap/view/ContextStructurePanel.java
Patch:
@@ -35,6 +35,7 @@
 import org.zaproxy.zap.model.Context;
 import org.zaproxy.zap.model.ParameterParser;
 import org.zaproxy.zap.model.StandardParameterParser;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.ZapTextField;
 
 public class ContextStructurePanel extends AbstractContextPropertiesPanel {
@@ -154,7 +155,7 @@ private JTable getTableStructualParams() {
 		if (tableStructuralParams == null) {
 			tableStructuralParams = new JTable();
 			tableStructuralParams.setModel(getStructuralParamsModel());
-			tableStructuralParams.setRowHeight(18);
+			tableStructuralParams.setRowHeight(DisplayUtils.getScaledSize(18));
 			// Issue 954: Force the JTable cell to auto-save when the focus changes.
 			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
 			tableStructuralParams.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

File: src/org/zaproxy/zap/view/SessionExcludeFromProxyPanel.java
Patch:
@@ -35,6 +35,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class SessionExcludeFromProxyPanel extends AbstractParamPanel {
 
@@ -142,7 +143,7 @@ private JTable getTableIgnore() {
 		if (tableIgnore == null) {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
-			tableIgnore.setRowHeight(18);
+			tableIgnore.setRowHeight(DisplayUtils.getScaledSize(18));
 			// Issue 954: Force the JTable cell to auto-save when the focus changes.
 			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
 			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

File: src/org/zaproxy/zap/view/SessionExcludeFromScanPanel.java
Patch:
@@ -35,6 +35,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class SessionExcludeFromScanPanel extends AbstractParamPanel {
 
@@ -142,7 +143,7 @@ private JTable getTableIgnore() {
 		if (tableIgnore == null) {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
-			tableIgnore.setRowHeight(18);
+			tableIgnore.setRowHeight(DisplayUtils.getScaledSize(18));
 			// Issue 954: Force the JTable cell to auto-save when the focus changes.
 			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
 			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

File: src/org/zaproxy/zap/view/SessionExcludeFromSpiderPanel.java
Patch:
@@ -35,6 +35,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.DisplayUtils;
 
 public class SessionExcludeFromSpiderPanel extends AbstractParamPanel {
 
@@ -142,7 +143,7 @@ private JTable getTableIgnore() {
 		if (tableIgnore == null) {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
-			tableIgnore.setRowHeight(18);
+			tableIgnore.setRowHeight(DisplayUtils.getScaledSize(18));
 			// Issue 954: Force the JTable cell to auto-save when the focus changes.
 			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
 			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -791,8 +791,8 @@ public void cloneInto(Plugin plugin) {
     	if (plugin instanceof AbstractPlugin) {
     		AbstractPlugin ap = (AbstractPlugin) plugin;
     		ap.setEnabled(this.isEnabled());
-    		ap.setAlertThreshold(this.getAlertThreshold());
-    		ap.setAttackStrength(this.getAttackStrength());
+    		ap.setAlertThreshold(this.getAlertThreshold(true));
+    		ap.setAttackStrength(this.getAttackStrength(true));
     		ap.setDefaultAlertThreshold(this.defaultAttackThreshold);
     		ap.setDefaultAttackStrength(this.defaultAttackStrength);
     		ap.setTechSet(this.getTechSet());

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -172,8 +172,6 @@ public void run() {
             
             if (plugin != null) {
                 plugin.setDelayInMs(this.scannerParam.getDelayInMs());
-                plugin.setDefaultAlertThreshold(scanPolicy.getDefaultThreshold());
-                plugin.setDefaultAttackStrength(scanPolicy.getDefaultStrength());
                 plugin.setTechSet(this.techSet);
                 processPlugin(plugin);
             

File: src/org/zaproxy/zap/view/SplashScreen.java
Patch:
@@ -127,7 +127,8 @@ public void run() {
         this.pack();
         this.setVisible(true);
 
-        Logger.getRootLogger().addAppender(new SplashOutputWriter());
+        SplashOutputWriter splashOutputWriter = new SplashOutputWriter();
+        Logger.getRootLogger().addAppender(splashOutputWriter);
 
         try {
             // Show INFO and ERROR log messages until the UI is ready
@@ -167,6 +168,7 @@ public void run() {
             // Ignore
         }
 
+        Logger.getRootLogger().removeAppender(splashOutputWriter);
         dispose();
     }
 

File: src/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -132,7 +132,7 @@ public class CustomScanDialog extends StandardFieldsDialog {
     private ScanPolicy scanPolicy = null;
     private PolicyAllCategoryPanel policyAllCategoryPanel = null;
     private OptionsVariantPanel variantPanel = null;
-    private final List<PolicyCategoryPanel> categoryPanels = new ArrayList<>();
+    private List<PolicyCategoryPanel> categoryPanels = Collections.emptyList();
     private boolean showingAdvTabs = true;
 
     public CustomScanDialog(ExtensionActiveScan ext, Frame owner, Dimension dim) {
@@ -234,6 +234,7 @@ public void actionPerformed(ActionEvent e) {
 
         policyPanel.addParamPanel(null, getPolicyAllCategoryPanel(), false);
 
+        categoryPanels = new ArrayList<>(Category.getAllNames().length);
         for (int i = 0; i < Category.getAllNames().length; i++) {
             PolicyCategoryPanel panel
                     = new PolicyCategoryPanel(i, this.scanPolicy.getPluginFactory(),

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -79,8 +79,7 @@ public class ScriptBasedAuthenticationMethodType extends AuthenticationMethodTyp
 			ZAP.class.getResource("/resource/icon/16/script-auth.png"));
 
 	/** The Authentication method's name. */
-	private static final String METHOD_NAME = Constant.messages
-			.getString("authentication.method.script.name");
+	private static final String METHOD_NAME = Constant.messages.getString("authentication.method.script.name");
 
 	private ExtensionScript extensionScript;
 
@@ -443,7 +442,7 @@ public void hook(ExtensionHook extensionHook) {
 			log.debug("Registering Script...");
 			getScriptsExtension().registerScriptType(
 					new ScriptType(SCRIPT_TYPE_AUTH, "authentication.method.script.type", SCRIPT_ICON_AUTH,
-							false));
+							false, new String[] {ScriptType.CAPABILITY_APPEND}));
 		}
 	}
 

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -145,7 +145,8 @@ public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);
 
 		this.registerScriptType(new ScriptType(TYPE_PROXY, "script.type.proxy", PROXY_ICON, true));
-		this.registerScriptType(new ScriptType(TYPE_STANDALONE, "script.type.standalone", STANDALONE_ICON, false));
+		this.registerScriptType(new ScriptType(TYPE_STANDALONE, "script.type.standalone", STANDALONE_ICON, false, 
+				new String[] {ScriptType.CAPABILITY_APPEND}));
 		this.registerScriptType(new ScriptType(TYPE_TARGETED, "script.type.targeted", TARGETED_ICON, false));
 
 		extensionHook.addProxyListener(this.getProxyListener());

File: src/org/zaproxy/zap/view/SplashScreen.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.log4j.spi.LoggingEvent;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.view.AbstractFrame;
+import org.zaproxy.zap.utils.DisplayUtils;
 import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.utils.ZapTextArea;
 
@@ -83,14 +84,14 @@ public class SplashScreen extends JFrame implements Runnable {
     public void run() {
         thread = Thread.currentThread();
 
-        setSize(420, 420);  //420x460
+        setSize(DisplayUtils.getScaledDimension(420, 420));
         setLocationRelativeTo(null);
         setUndecorated(true);
         setTitle(Constant.PROGRAM_NAME);
         setIconImages(loadIconImages());
 
         BackgroundImagePanel panel = new BackgroundImagePanel();
-        panel.setPreferredSize(new Dimension(420, 420));    //420x560
+        panel.setPreferredSize(DisplayUtils.getScaledDimension(420, 420));    //420x560
         panel.setLayout(new GridBagLayout());
         panel.setBackgroundImage(SplashScreen.class.getResource("/resource/zap-splash-background.png"));
         

File: src/org/parosproxy/paros/extension/AbstractDialog.java
Patch:
@@ -23,6 +23,7 @@
 // ZAP: 2014/01/22 Issue 996: Ensure all dialogs close when the escape key is pressed
 // ZAP: 2014/10/31 Issue 1176: Changed owner to Window as part of spider advanced dialog changes
 // ZAP: 2014/11/06 Set ZAP icons
+// ZAP: 2015/02/10 Issue 1528: Support user defined font size
 
 package org.parosproxy.paros.extension;
 
@@ -97,7 +98,6 @@ public AbstractDialog(Window owner, boolean modal) throws HeadlessException {
 	 */
 	private void initialize() {
 		this.setVisible(false);
-		this.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 		this.setIconImages(this.loadIconImages());
 		this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
 	    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -37,6 +37,7 @@
 // access the data (HttpMessage and HistoryReference) displayed in the tabs
 // ZAP: 2014/03/23 Issue 503: Change the footer tabs to display the data
 // with tables instead of lists
+// ZAP: 2015/02/10 Issue 1528: Support user defined font size
 
 package org.parosproxy.paros.extension.history;
 
@@ -191,7 +192,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800,30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName("History Toolbar");
 			
 			GridBagConstraints gbc = new GridBagConstraints();

File: src/org/parosproxy/paros/extension/option/OptionsDatabasePanel.java
Patch:
@@ -144,8 +144,6 @@ public OptionsDatabasePanel() {
         
         GridBagConstraints gbc = new GridBagConstraints();
         
-        panel.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
-
         gbc.gridx = 0;
         gbc.gridy = 0;
         gbc.insets = new java.awt.Insets(2,2,2,2);

File: src/org/parosproxy/paros/extension/option/SecurityProtocolsPanel.java
Patch:
@@ -31,6 +31,7 @@
 
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.network.SSLConnector;
+import org.zaproxy.zap.utils.FontUtils;
 
 /**
  * A {@code JPanel} for selecting security protocols provided by {@code SSLConnector}.
@@ -52,9 +53,8 @@ public SecurityProtocolsPanel() {
                 Constant.messages.getString("generic.options.panel.security.protocols.title"),
                 javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                 javax.swing.border.TitledBorder.DEFAULT_POSITION,
-                new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11),
+                FontUtils.getFont(FontUtils.Size.standard),
                 java.awt.Color.black));
-        setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 
         GridBagConstraints gbc = new GridBagConstraints();
         gbc.gridy = 0;

File: src/org/parosproxy/paros/view/AbstractFrame.java
Patch:
@@ -21,6 +21,7 @@
  */
 // ZAP: 2013/01/16 Minor fix to prevent NPE
 // ZAP: 2014/10/17 Issue 1308: Updated for latest icons
+// ZAP: 2015/02/10 Issue 1528: Support user defined font size
 
 package org.parosproxy.paros.view;
 
@@ -97,7 +98,6 @@ private void initialize() {
 
 		this.setVisible(false);
 		this.setTitle(Constant.PROGRAM_NAME);
-	    this.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 
     	final Dimension dim = restoreWindowSize();
     	if (dim == null) {

File: src/org/parosproxy/paros/view/AbstractParamContainerPanel.java
Patch:
@@ -24,6 +24,7 @@
 
 import java.awt.BorderLayout;
 import java.awt.CardLayout;
+import java.awt.Font;
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import java.awt.HeadlessException;
@@ -48,6 +49,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.extension.help.ExtensionHelp;
+import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.utils.ZapTextField;
 
 public class AbstractParamContainerPanel extends JSplitPane {
@@ -97,8 +99,6 @@ public AbstractParamContainerPanel(String rootName) throws HeadlessException {
      * This method initializes this
      */
     private void initialize() {
-        this.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
-
         this.setContinuousLayout(true);
         this.setRightComponent(getJPanel1());
         // ZAP: added more space for readability (was 175)
@@ -256,7 +256,7 @@ private ZapTextField getTxtHeadline() {
             txtHeadline.setEditable(false);
             txtHeadline.setEnabled(false);
             txtHeadline.setBackground(java.awt.Color.white);
-            txtHeadline.setFont(new java.awt.Font("Default", java.awt.Font.BOLD, 12));
+            txtHeadline.setFont(FontUtils.getFont(Font.BOLD));
         }
         
         return txtHeadline;

File: src/org/parosproxy/paros/view/AbstractParamDialog.java
Patch:
@@ -89,7 +89,6 @@ private void initialize() {
         // Examples of childs: help window and client certificate viewer
         this.setModalityType(ModalityType.DOCUMENT_MODAL);
 
-        this.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
         if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {            
             this.setSize(500, 375);
         }

File: src/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2014/01/28 Issue 207: Support keyboard shortcuts 
 // ZAP: 2014/04/25 Issue 642: Add timestamps to Output tab(s)
 // ZAP: 2014/10/07 Issue 1357: Hide unused tabs
+// ZAP: 2015/02/10 Issue 1528: Support user defined font size
 
 package org.parosproxy.paros.view;
 
@@ -46,8 +47,8 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.AbstractPanel;
 import org.parosproxy.paros.model.Model;
-import org.zaproxy.zap.utils.ZapTextArea;
 import org.zaproxy.zap.utils.TimeStampUtils;
+import org.zaproxy.zap.utils.ZapTextArea;
 
 public class OutputPanel extends AbstractPanel {
 
@@ -133,7 +134,6 @@ private JScrollPane getJScrollPane() {
 			jScrollPane.setViewportView(getTxtOutput());
 			jScrollPane.setName("jScrollPane");
 			jScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
-			jScrollPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		}
 		return jScrollPane;
 	}
@@ -147,7 +147,6 @@ private ZapTextArea getTxtOutput() {
 			txtOutput = new ZapTextArea();
 			txtOutput.setEditable(false);
 			txtOutput.setLineWrap(true);
-			txtOutput.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			txtOutput.setName("");
 			txtOutput.addMouseListener(new java.awt.event.MouseAdapter() { 
 

File: src/org/parosproxy/paros/view/SessionGeneralPanel.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2012/04/23 Added @Override annotation to all appropriate methods.
 // ZAP: 2012/10/02 Issue 385: Added support for Contexts
 // ZAP: 2015/02/05 Issue 1524: New Persist Session dialog
+// ZAP: 2015/02/10 Issue 1528: Support user defined font size
 
 package org.parosproxy.paros.view;
 
@@ -115,7 +116,6 @@ private ZapTextArea getTxtDescription() {
 			txtDescription = new ZapTextArea();
 			txtDescription.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
 			txtDescription.setLineWrap(true);
-			txtDescription.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		}
 		return txtDescription;
 	}

File: src/org/parosproxy/paros/view/SiteMapPanel.java
Patch:
@@ -34,6 +34,7 @@
 // ZAP: 2014/12/17 Issue 1174: Support a Site filter
 // ZAP: 2014/12/22 Issue 1476: Display contexts in the Sites tree
 // ZAP: 2015/02/09 Issue 1525: Introduce a database interface layer to allow for alternative implementations
+// ZAP: 2015/02/10 Issue 1528: Support user defined font size
 
 package org.parosproxy.paros.view;
 
@@ -161,7 +162,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new Dimension(800,30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName("ScriptsListToolbar");
 			
 			int i = 1;

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -60,11 +60,12 @@
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.HttpPanel;
 import org.zaproxy.zap.extension.search.SearchMatch;
+import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.view.DeselectableButtonGroup;
 import org.zaproxy.zap.view.LayoutHelper;
 import org.zaproxy.zap.view.ZapToggleButton;
-import org.zaproxy.zap.view.messagecontainer.http.SelectableHistoryReferencesContainer;
 import org.zaproxy.zap.view.messagecontainer.http.DefaultSelectableHistoryReferencesContainer;
+import org.zaproxy.zap.view.messagecontainer.http.SelectableHistoryReferencesContainer;
 
 public class AlertPanel extends AbstractPanel {
 	
@@ -196,7 +197,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800,30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName("AlertToolbar");
 			
 			panelToolbar.add(getScopeButton(), LayoutHelper.getGBC(0, 0, 1, 0.0D));

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -190,7 +190,6 @@ protected JScrollPane getWorkPanel() {
 		if (jScrollPane == null) {
 			jScrollPane = new JScrollPane();
 			jScrollPane.setViewportView(getMessagesTable());
-			jScrollPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		}
 		return jScrollPane;
 	}

File: src/org/zaproxy/zap/extension/ascan/ScanProgressDialog.java
Patch:
@@ -130,7 +130,6 @@ private JScrollPane getJScrollPane() {
             jScrollPane.setName("ScanProgressScrollPane");
             jScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
             jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
-            jScrollPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
         }
         
         return jScrollPane;

File: src/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java
Patch:
@@ -44,6 +44,7 @@
 import org.zaproxy.zap.authentication.AuthenticationMethodType;
 import org.zaproxy.zap.extension.users.ExtensionUserManagement;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.AbstractContextPropertiesPanel;
 import org.zaproxy.zap.view.LayoutHelper;
@@ -261,8 +262,8 @@ private JPanel getConfigContainerPanel() {
 			configContainerPanel = new JPanel(new BorderLayout());
 			configContainerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
 					PANEL_TITLE_CONFIG, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
-					javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog",
-							java.awt.Font.BOLD, 12), java.awt.Color.black));
+					javax.swing.border.TitledBorder.DEFAULT_POSITION, 
+					FontUtils.getFont(FontUtils.Size.standard), java.awt.Color.black));
 		}
 		return configContainerPanel;
 	}

File: src/org/zaproxy/zap/extension/authorization/ContextAuthorizationPanel.java
Patch:
@@ -18,6 +18,7 @@
 import org.parosproxy.paros.network.HttpStatusCode;
 import org.zaproxy.zap.extension.authorization.BasicAuthorizationDetectionMethod.LogicalOperator;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.view.AbstractContextPropertiesPanel;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -97,8 +98,8 @@ private void initialize() {
 		JPanel configContainerPanel = new JPanel(new GridBagLayout());
 		configContainerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "",
 				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
-				javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog",
-						java.awt.Font.BOLD, 12), java.awt.Color.black));
+				javax.swing.border.TitledBorder.DEFAULT_POSITION, 
+				FontUtils.getFont(FontUtils.Size.standard), java.awt.Color.black));
 		this.add(configContainerPanel, LayoutHelper.getGBC(0, 2, 2, 0.0D));
 
 		configContainerPanel.add(new JLabel(FIELD_LABEL_STATUS_CODE), LayoutHelper.getGBC(0, 2, 1, 0.0D));

File: src/org/zaproxy/zap/extension/brk/BreakpointsOptionsPanel.java
Patch:
@@ -62,8 +62,6 @@ public BreakpointsOptionsPanel() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(new EmptyBorder(2, 2, 2, 2));
 
-        panel.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
-
         panel.add(getCheckBoxConfirmDropMessage(), LayoutHelper.getGBC(0, 0, 2, 1.0, new Insets(2, 2, 2, 2)));
         panel.add(getCheckBoxAlwaysOnTop(), LayoutHelper.getGBC(0, 1, 2, 1.0, new Insets(2, 2, 2, 2)));
         

File: src/org/zaproxy/zap/extension/brk/BreakpointsPanel.java
Patch:
@@ -40,6 +40,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.AbstractPanel;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.utils.FontUtils;
 
 public class BreakpointsPanel extends AbstractPanel {
 	
@@ -128,7 +129,6 @@ private JScrollPane getJScrollPane() {
 		if (jScrollPane == null) {
 			jScrollPane = new JScrollPane();
 			jScrollPane.setViewportView(getBreakpoints());
-			jScrollPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		}
 		return jScrollPane;
 	}
@@ -149,7 +149,6 @@ protected JXTable getBreakpoints() {
 			breakpointsTable.getTableHeader().setReorderingAllowed(false);
 			
 			breakpointsTable.setName(PANEL_NAME);
-			breakpointsTable.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 			breakpointsTable.setDoubleBuffered(true);
 			breakpointsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
 			breakpointsTable.addMouseListener(new java.awt.event.MouseAdapter() { 

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLPanel.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.awt.BorderLayout;
 import java.awt.Desktop;
-import java.awt.Font;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.io.File;
@@ -54,6 +53,7 @@
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.security.SslCertificateService;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.utils.ZapTextArea;
 import org.zaproxy.zap.utils.ZapXmlConfiguration;
 
@@ -94,7 +94,7 @@ public DynamicSSLPanel(ExtensionDynSSL extension) {
 		final JLabel lbl_Cert = new JLabel(Constant.messages.getString("dynssl.label.rootca"));
 
 		txt_PubCert = new ZapTextArea();
-		txt_PubCert.setFont(new Font("Monospaced", Font.PLAIN, 11));
+		txt_PubCert.setFont(FontUtils.getFont("Monospaced"));
 		txt_PubCert.setEditable(false);
 		txt_PubCert.getDocument().addDocumentListener(new DocumentListener() {
 			@Override

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLWelcomeDialog.java
Patch:
@@ -46,6 +46,7 @@
 import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.extension.AbstractDialog;
 import org.parosproxy.paros.model.Model;
+import org.zaproxy.zap.utils.FontUtils;
 
 public class DynamicSSLWelcomeDialog extends AbstractDialog {
 
@@ -102,7 +103,7 @@ private void initLayout() {
 		{
 			JLabel lblTitle = new JLabel("SSL " + Constant.messages.getString("dynssl.label.rootca"));
 			panelTitle.add(lblTitle);
-			lblTitle.setFont(new Font("Tahoma", Font.BOLD, 11));
+			lblTitle.setFont(FontUtils.getFont(Font.BOLD));
 		}
 		
 		contentTextPane.add(txtSslWontWork);

File: src/org/zaproxy/zap/extension/encoder2/EncodeDecodeParamPanel.java
Patch:
@@ -33,6 +33,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.FontUtils;
 
 public class EncodeDecodeParamPanel extends AbstractParamPanel {
 
@@ -75,8 +76,7 @@ private JPanel getBase64Panel() {
 			
 			base64Panel.setBorder(BorderFactory.createTitledBorder(null, NAME_BASE64, 
 					TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, 
-					new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11), java.awt.Color.black));
-			base64Panel.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
+					FontUtils.getFont(FontUtils.Size.standard), java.awt.Color.black));
 
 			gbc.gridx = 0;
 			gbc.gridy = 0;

File: src/org/zaproxy/zap/extension/fuzz/FuzzerPanel.java
Patch:
@@ -43,6 +43,7 @@
 import org.parosproxy.paros.extension.AbstractPanel;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.fuzz.impl.http.HttpFuzzerContentPanel;
+import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.utils.StickyScrollbarAdjustmentListener;
 import org.zaproxy.zap.view.ScanStatus;
 import org.zaproxy.zap.view.ZapToggleButton;
@@ -150,7 +151,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800,30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName("FuzzToolbar");
 			
 			GridBagConstraints gridBagConstraints5 = new GridBagConstraints();
@@ -302,7 +302,6 @@ private JScrollPane getJScrollPane() {
 		if (jScrollPane == null) {
 			jScrollPane = new JScrollPane();
 			jScrollPane.setViewportView(getInitialMessage());
-			jScrollPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 			jScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
 			jScrollPane.getVerticalScrollBar().addAdjustmentListener(new StickyScrollbarAdjustmentListener());
 		}
@@ -313,7 +312,6 @@ private JTextPane getInitialMessage() {
 		if (initialMessage == null) {
 			initialMessage = new JTextPane();
 			initialMessage.setEditable(false);
-			initialMessage.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			initialMessage.setContentType("text/html");
 			initialMessage.setText(Constant.messages.getString("fuzz.label.initialMessage"));
 		}

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzerContentPanel.java
Patch:
@@ -87,7 +87,6 @@ private JTable getFuzzResultTable() {
             fuzzResultTable.setDoubleBuffered(true);
             fuzzResultTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
             fuzzResultTable.setName(PANEL_NAME);
-            fuzzResultTable.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
             fuzzResultTable.setDefaultRenderer(Pair.class, new IconTableCellRenderer());
             fuzzResultTable.setColumnControlVisible(true);
             fuzzResultTable.setRowSorter(new HttpFuzzTableRowSorter(resultsModel));

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzerDialogTokenPane.java
Patch:
@@ -32,6 +32,7 @@
 
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.extension.anticsrf.AntiCsrfToken;
+import org.zaproxy.zap.utils.FontUtils;
 
 public class HttpFuzzerDialogTokenPane {
 	private JScrollPane pane;
@@ -69,9 +70,8 @@ private HttpFuzzerDialogTokenPane(boolean enable, String sourceURL,
 						null, tmpName, //"TBI Anti CRSF Tokens", // Constant.messages.getString("invoke.options.edit"), 
 						javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
 						javax.swing.border.TitledBorder.DEFAULT_POSITION, 
-						new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11), 
+						FontUtils.getFont(FontUtils.Size.standard), 
 						java.awt.Color.black));
-		pane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		pane.setMinimumSize(new Dimension(50, 120));
 		
 		pane2 = new JPanel();

File: src/org/zaproxy/zap/extension/history/ManageTagsDialog.java
Patch:
@@ -190,7 +190,6 @@ private JList<String> getTagList() {
 			tagList = new JList<>();
 			tagList.setLayoutOrientation(JList.VERTICAL);
 			tagList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
-			tagList.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
 			
 			tagListModel = new DefaultListModel<>();
 			tagList.setModel(tagListModel);

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsPanel.java
Patch:
@@ -202,7 +202,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800, 30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName("HttpSessionToolbar");
 
 			// Add elements
@@ -262,7 +261,6 @@ private JScrollPane getWorkPane() {
 		if (jScrollPane == null) {
 			jScrollPane = new JScrollPane();
 			jScrollPane.setViewportView(getHttpSessionsTable());
-			jScrollPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		}
 		return jScrollPane;
 	}
@@ -300,7 +298,6 @@ private JXTable getHttpSessionsTable() {
 			this.setSessionsTableColumnSizes();
 
 			sessionsTable.setName(PANEL_NAME);
-			sessionsTable.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 			sessionsTable.setDoubleBuffered(true);
 			sessionsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
 			sessionsTable.addMouseListener(new java.awt.event.MouseAdapter() {

File: src/org/zaproxy/zap/extension/multiFuzz/FuzzResultDialog.java
Patch:
@@ -101,8 +101,6 @@ private JScrollPane getScrollPane() {
 		if (jScrollPane == null) {
 			jScrollPane = new JScrollPane();
 			jScrollPane.setViewportView(getTable());
-			jScrollPane.setFont(new java.awt.Font("Dialog",
-					java.awt.Font.PLAIN, 11));
 			jScrollPane
 					.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
 			jScrollPane.getVerticalScrollBar().addAdjustmentListener(

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzResultDialog.java
Patch:
@@ -90,7 +90,6 @@ public JXTreeTable getTable() {
 			table.setDoubleBuffered(true);
 			table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
 			table.setName("HttpFuzzResultTable");
-			table.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
 			table.setDefaultRenderer(Pair.class, new IconTableCellRenderer());
 
 			int[] widths = { 10, 25, 550, 30, 85, 55, 40, 70 };

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzerContentPanel.java
Patch:
@@ -165,8 +165,6 @@ public JXTreeTable getFuzzResultTable() {
 			fuzzResultTable.setDoubleBuffered(true);
 			fuzzResultTable
 					.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
-			fuzzResultTable.setFont(new java.awt.Font("Default",
-					java.awt.Font.PLAIN, 12));
 			fuzzResultTable.setDefaultRenderer(Pair.class,
 					new IconTableCellRenderer());
 

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzerDialogTokenPane.java
Patch:
@@ -32,6 +32,7 @@
 
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.extension.anticsrf.AntiCsrfToken;
+import org.zaproxy.zap.utils.FontUtils;
 
 public class HttpFuzzerDialogTokenPane {
 	private JScrollPane pane;
@@ -71,9 +72,8 @@ private HttpFuzzerDialogTokenPane(boolean enable, String sourceURL,
 							// Constant.messages.getString("invoke.options.edit"),
 				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
 				javax.swing.border.TitledBorder.DEFAULT_POSITION,
-				new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11),
+				FontUtils.getFont(FontUtils.Size.standard),
 				java.awt.Color.black));
-		pane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		pane.setMinimumSize(new Dimension(50, 120));
 
 		pane2 = new JPanel();

File: src/org/zaproxy/zap/extension/params/ParamsPanel.java
Patch:
@@ -134,7 +134,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800,30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName("ParamsToolbar");
 			
 			GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
@@ -203,7 +202,6 @@ private JScrollPane getJScrollPane() {
 		if (jScrollPane == null) {
 			jScrollPane = new JScrollPane();
 			jScrollPane.setViewportView(getParamsTable());
-			jScrollPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		}
 		return jScrollPane;
 	}
@@ -243,7 +241,6 @@ protected JXTable getParamsTable() {
 			this.setParamsTableColumnSizes();
 
 			paramsTable.setName(PANEL_NAME);
-			paramsTable.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 			paramsTable.setDoubleBuffered(true);
 			paramsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
 			paramsTable.addMouseListener(new java.awt.event.MouseAdapter() { 

File: src/org/zaproxy/zap/extension/search/OptionsSearchPanel.java
Patch:
@@ -71,8 +71,6 @@ public OptionsSearchPanel() {
 
         GridBagConstraints gbc = new GridBagConstraints();
 
-        panel.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
-
         gbc.gridx = 0;
         gbc.gridy = 0;
         gbc.insets = new java.awt.Insets(2, 2, 2, 2);

File: src/org/zaproxy/zap/extension/search/SearchPanel.java
Patch:
@@ -200,7 +200,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800,30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName("Search Toolbar");
 			
 			GridBagConstraints gridBagConstraintsX = new GridBagConstraints();
@@ -404,7 +403,6 @@ public void actionPerformed(ActionEvent e) {
 	private JScrollPane getJScrollPane() {
 		if (jScrollPane == null) {
 			jScrollPane = new JScrollPane();
-			jScrollPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 			jScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
 			jScrollPane.setViewportView(resultsTable);
 		}

File: src/org/zaproxy/zap/extension/sessions/ContextSessionManagementPanel.java
Patch:
@@ -39,6 +39,7 @@
 import org.zaproxy.zap.session.AbstractSessionManagementMethodOptionsPanel;
 import org.zaproxy.zap.session.SessionManagementMethod;
 import org.zaproxy.zap.session.SessionManagementMethodType;
+import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.view.AbstractContextPropertiesPanel;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -206,8 +207,8 @@ private JPanel getConfigContainerPanel() {
 			configContainerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
 					Constant.messages.getString("sessionmanagement.panel.config.title"),
 					javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
-					javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog",
-							java.awt.Font.BOLD, 12), java.awt.Color.black));
+					javax.swing.border.TitledBorder.DEFAULT_POSITION, 
+					FontUtils.getFont(FontUtils.Size.standard), java.awt.Color.black));
 		}
 		return configContainerPanel;
 	}

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -102,7 +102,6 @@ protected JScrollPane getWorkPanel() {
 			workPane = new JScrollPane();
 			workPane.setName("SpiderResultsPane");
 			workPane.setViewportView(getScanResultsTable());
-			workPane.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		}
 		return workPane;
 	}
@@ -141,7 +140,6 @@ private JXTable getScanResultsTable() {
 			this.setScanResultsTableColumnSizes();
 
 			resultsTable.setName(PANEL_NAME);
-			resultsTable.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 			resultsTable.setDoubleBuffered(true);
 			resultsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
 			// Add hack to force row selection on right click

File: src/org/zaproxy/zap/view/ContextGeneralPanel.java
Patch:
@@ -96,7 +96,6 @@ private ZapTextArea getTxtDescription() {
 			txtDescription.setBorder(javax.swing.BorderFactory
 					.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
 			txtDescription.setLineWrap(true);
-			txtDescription.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		}
 		return txtDescription;
 	}

File: src/org/zaproxy/zap/view/HistoryReferenceTable.java
Patch:
@@ -74,7 +74,6 @@ public HistoryReferenceTable(HistoryReferenceTableModel model) {
 		this.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
 
 		
-		this.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
 		this.setDoubleBuffered(true);
 		this.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
 		// Add hack to force row selection on right click

File: src/org/zaproxy/zap/view/MainToolbarPanel.java
Patch:
@@ -132,7 +132,6 @@ private JToolBar getToolbar() {
 			toolbar.setEnabled(true);
 			toolbar.setFloatable(false);
 			toolbar.setRollover(true);
-			toolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			toolbar.setName("Main Toolbar");
 			toolbar.setBorder(BorderFactory.createEmptyBorder());
 		}

File: src/org/zaproxy/zap/view/OptionsConnectionPanel.java
Patch:
@@ -31,6 +31,7 @@
 import org.parosproxy.paros.model.OptionsParam;
 import org.parosproxy.paros.network.ConnectionParam;
 import org.parosproxy.paros.view.AbstractParamPanel;
+import org.zaproxy.zap.utils.FontUtils;
 import org.zaproxy.zap.utils.ZapTextField;
 
 public class OptionsConnectionPanel extends AbstractParamPanel {
@@ -99,8 +100,7 @@ private JPanel getPanelProxyAuth() {
 					Constant.messages.getString("conn.options.proxy.auth.auth"), 
 					javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
 					javax.swing.border.TitledBorder.DEFAULT_POSITION, 
-					new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11), java.awt.Color.black));
-			panelProxyAuth.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
+					FontUtils.getFont(FontUtils.Size.standard), java.awt.Color.black));
 			gridBagConstraints16.gridx = 0;
 			gridBagConstraints16.gridy = 0;
 			gridBagConstraints16.insets = new java.awt.Insets(2,2,2,2);

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -187,7 +187,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800,30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName(prefix + ".toolbar");
 			
 			int x = 0;

File: src/org/zaproxy/zap/view/ScanPanel2.java
Patch:
@@ -177,7 +177,6 @@ private javax.swing.JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800,30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName(prefix + ".toolbar");
 			
 			int x = 0;

File: src/org/zaproxy/zap/view/panels/AbstractContextSelectToolbarStatusPanel.java
Patch:
@@ -103,7 +103,6 @@ private JToolBar getPanelToolbar() {
 			panelToolbar.setFloatable(false);
 			panelToolbar.setRollover(true);
 			panelToolbar.setPreferredSize(new java.awt.Dimension(800, 30));
-			panelToolbar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
 			panelToolbar.setName(panelPrefix + ".toolbar");
 
 			setupToolbarElements(panelToolbar);

File: src/org/parosproxy/paros/extension/Extension.java
Patch:
@@ -36,8 +36,8 @@
 import java.util.List;
 import java.util.ResourceBundle;
 
+import org.parosproxy.paros.db.Database;
 import org.parosproxy.paros.db.DatabaseException;
-import org.parosproxy.paros.db.DatabaseServer;
 import org.parosproxy.paros.db.DatabaseUnsupportedException;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.OptionsParam;
@@ -222,7 +222,7 @@ public interface Extension {
      * @throws DatabaseException
      * @throws DatabaseUnsupportedException
      */
-    void databaseOpen(DatabaseServer dbServer) throws DatabaseException, DatabaseUnsupportedException;
+    void databaseOpen(Database db) throws DatabaseException, DatabaseUnsupportedException;
 
     /**
      * Returns the add-on where this extension is bundled. Might be {@code null} if core extension.

File: src/org/parosproxy/paros/extension/ExtensionAdaptor.java
Patch:
@@ -42,8 +42,8 @@
 import java.util.ResourceBundle;
 
 import org.parosproxy.paros.control.Control;
+import org.parosproxy.paros.db.Database;
 import org.parosproxy.paros.db.DatabaseException;
-import org.parosproxy.paros.db.DatabaseServer;
 import org.parosproxy.paros.db.DatabaseUnsupportedException;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.OptionsParam;
@@ -304,7 +304,7 @@ public void postInit() {
     }
     
     @Override
-    public void databaseOpen(DatabaseServer dbServer) throws DatabaseException, DatabaseUnsupportedException {
+    public void databaseOpen(Database db) throws DatabaseException, DatabaseUnsupportedException {
     }
 
     @Override

File: src/org/zaproxy/zap/extension/autoupdate/DownloadManager.java
Patch:
@@ -75,7 +75,9 @@ public void run () {
 			List<Downloader> finishedDownloads = new ArrayList<>();
 			for (Downloader dl : this.currentDownloads) {
 				if (!dl.isAlive()) {
-					if (dl.isValidated()) {
+				    if (dl.getException() != null) {
+				        logger.debug("Download failed " + dl.getTargetFile().getAbsolutePath());
+				    } else if (dl.isValidated()) {
 						logger.debug("Download finished " + dl.getTargetFile().getAbsolutePath());
 					} else {
 						// Corrupt or corrupted file? Pretty bad anyway

File: src/org/parosproxy/paros/core/scanner/Alert.java
Patch:
@@ -37,15 +37,16 @@
 // ZAP: 2014/05/23 Issue 1209: Reliability becomes Confidence and add levels
 // ZAP: 2015/01/04 Issue 1419: Include alert's evidence in HTML report
 // ZAP: 2014/01/04 Issue 1475: Alerts with different name from same scanner might not be shown in report
+// ZAP: 2015/02/09 Issue 1525: Introduce a database interface layer to allow for alternative implementations
 
 package org.parosproxy.paros.core.scanner;
 
 import java.net.URL;
-import java.sql.SQLException;
 
 import org.apache.commons.httpclient.URI;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordAlert;
 import org.parosproxy.paros.extension.report.ReportGenerator;
 import org.parosproxy.paros.model.HistoryReference;
@@ -432,7 +433,7 @@ public HttpMessage getMessage() {
     	if (this.historyRef != null) {
     		try {
 				return this.historyRef.getHttpMessage();
-			} catch (HttpMalformedHeaderException | SQLException e) {
+			} catch (HttpMalformedHeaderException | DatabaseException e) {
 	        	logger.error(e.getMessage(), e);
 			}
     	}

File: src/org/parosproxy/paros/db/DatabaseListener.java
Patch:
@@ -19,13 +19,13 @@
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2015/02/09 Issue 1525: Introduce a database interface layer to allow for alternative implementations
 
 package org.parosproxy.paros.db;
 
-import java.sql.SQLException;
 
 public interface DatabaseListener {
 
-    void databaseOpen(DatabaseServer dbServer) throws SQLException;
+    void databaseOpen(DatabaseServer dbServer) throws DatabaseException, DatabaseUnsupportedException;
     
 }

File: src/org/parosproxy/paros/extension/history/PopupMenuResend.java
Patch:
@@ -25,16 +25,17 @@
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
+// ZAP: 2015/02/09 Issue 1525: Introduce a database interface layer to allow for alternative implementations
 
 package org.parosproxy.paros.extension.history;
 
 import java.awt.Component;
-import java.sql.SQLException;
 
 import javax.swing.JList;
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.extension.manualrequest.ManualRequestEditorDialog;
 import org.parosproxy.paros.model.HistoryReference;
@@ -81,7 +82,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
                     msg = ref.getHttpMessage().cloneRequest();
                     dialog.setMessage(msg);
                     dialog.setVisible(true);
-                } catch (HttpMalformedHeaderException | SQLException e) {
+                } catch (HttpMalformedHeaderException | DatabaseException e) {
                     logger.error(e.getMessage(), e);
                 }
         	}

File: src/org/parosproxy/paros/extension/history/PopupMenuResendSites.java
Patch:
@@ -20,12 +20,12 @@
 package org.parosproxy.paros.extension.history;
 
 import java.awt.Component;
-import java.sql.SQLException;
 
 import javax.swing.JTree;
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.extension.manualrequest.ManualRequestEditorDialog;
 import org.parosproxy.paros.model.HistoryReference;
@@ -88,7 +88,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
                         msg = ref.getHttpMessage().cloneRequest();
                         dialog.setMessage(msg);
                         dialog.setVisible(true);
-                    } catch (HttpMalformedHeaderException | SQLException e) {
+                    } catch (HttpMalformedHeaderException | DatabaseException e) {
                         logger.error(e.getMessage(), e);
                     }
                 }

File: src/org/parosproxy/paros/view/SiteMapPanel.java
Patch:
@@ -33,6 +33,7 @@
 // ZAP: 2014/10/07 Issue 1357: Hide unused tabs
 // ZAP: 2014/12/17 Issue 1174: Support a Site filter
 // ZAP: 2014/12/22 Issue 1476: Display contexts in the Sites tree
+// ZAP: 2015/02/09 Issue 1525: Introduce a database interface layer to allow for alternative implementations
 
 package org.parosproxy.paros.view;
 
@@ -43,7 +44,6 @@
 import java.awt.GridBagLayout;
 import java.awt.Insets;
 import java.awt.event.KeyEvent;
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -67,6 +67,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.extension.AbstractPanel;
 import org.parosproxy.paros.extension.history.LogPanel;
 import org.parosproxy.paros.model.HistoryReference;
@@ -245,7 +246,7 @@ private void showFilterPlusDialog() {
 		dialog.setModal(true);
     	try {
 			dialog.setAllTags(Model.getSingleton().getDb().getTableTag().getAllTags());
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 			log.error(e.getMessage(), e);
 		}
 

File: src/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.httpclient.auth.AuthScope;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordContext;
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.model.Session;
@@ -266,7 +267,7 @@ public void hook(ExtensionHook extensionHook) {
 	}
 
 	@Override
-	public AuthenticationMethod loadMethodFromSession(Session session, int contextId) throws SQLException {
+	public AuthenticationMethod loadMethodFromSession(Session session, int contextId) throws DatabaseException {
 		HttpAuthenticationMethod method = createAuthenticationMethod(contextId);
 
 		List<String> hostnames = session.getContextDataStrings(contextId,
@@ -294,7 +295,7 @@ public AuthenticationMethod loadMethodFromSession(Session session, int contextId
 
 	@Override
 	public void persistMethodToSession(Session session, int contextId, AuthenticationMethod authMethod)
-			throws UnsupportedAuthenticationMethodException, SQLException {
+			throws UnsupportedAuthenticationMethodException, DatabaseException {
 		if (!(authMethod instanceof HttpAuthenticationMethod))
 			throw new UnsupportedAuthenticationMethodException("Http Authentication type only supports: "
 					+ HttpAuthenticationMethod.class);

File: src/org/zaproxy/zap/authentication/ScriptBasedAuthenticationMethodType.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordContext;
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.model.Model;
@@ -491,7 +492,7 @@ public boolean isTypeForMethod(AuthenticationMethod method) {
 
 	@Override
 	public ScriptBasedAuthenticationMethod loadMethodFromSession(Session session, int contextId)
-			throws SQLException {
+			throws DatabaseException {
 		ScriptBasedAuthenticationMethod method = createAuthenticationMethod(contextId);
 
 		// Load the script and make sure it still exists and still follows the required interface
@@ -550,7 +551,7 @@ public void loadMethod(
 
 	@Override
 	public void persistMethodToSession(Session session, int contextId, AuthenticationMethod authMethod)
-			throws UnsupportedAuthenticationMethodException, SQLException {
+			throws UnsupportedAuthenticationMethodException, DatabaseException {
 		if (!(authMethod instanceof ScriptBasedAuthenticationMethod))
 			throw new UnsupportedAuthenticationMethodException(
 					"Script based authentication type only supports: "

File: src/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -20,7 +20,6 @@
 package org.zaproxy.zap.extension.ascan;
 
 import java.awt.EventQueue;
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.ConcurrentModificationException;
@@ -35,6 +34,7 @@
 import org.parosproxy.paros.core.scanner.HostProcess;
 import org.parosproxy.paros.core.scanner.ScannerListener;
 import org.parosproxy.paros.core.scanner.ScannerParam;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.SiteNode;
@@ -177,7 +177,7 @@ public void notifyNewMessage(final HttpMessage msg) {
 						msg);
 				msg.setHistoryRef(null);
 				hRefs.add(Integer.valueOf(hRef.getHistoryId()));
-			} catch (HttpMalformedHeaderException | SQLException e) {
+			} catch (HttpMalformedHeaderException | DatabaseException e) {
 				log.error(e.getMessage(), e);
 			}
 		} else {

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.zaproxy.zap.extension.ascan;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -36,6 +35,7 @@
 import org.parosproxy.paros.core.scanner.Category;
 import org.parosproxy.paros.core.scanner.Plugin;
 import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteNode;
@@ -222,7 +222,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 				try {
 					Session session = Model.getSingleton().getSession();
 					session.setExcludeFromScanRegexs(new ArrayList<String>());
-				} catch (SQLException e) {
+				} catch (DatabaseException e) {
 					throw new ApiException(ApiException.Type.INTERNAL_ERROR, e.getMessage());
 				}
 			    break;

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -154,8 +154,6 @@ public void optionsLoaded() {
     public void hook(ExtensionHook extensionHook) {
         super.hook(extensionHook);
 
-		TableHistory.setHistoryTypeAsTemporary(HistoryReference.TYPE_SCANNER_TEMPORARY);
-
         if (getView() != null) {
             extensionHook.getHookMenu().addAnalyseMenuItem(getMenuItemPolicy());
             extensionHook.getHookMenu().addToolsMenuItem(getMenuItemCustomScan());

File: src/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -32,6 +31,7 @@
 import org.apache.commons.httpclient.URIException;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordContext;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
@@ -260,7 +260,7 @@ public void loadContextData(Session session, Context context) {
 				}
 			}
 
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 			log.error("Unable to load Authentication method.", e);
 		}
 
@@ -283,7 +283,7 @@ public void persistContextData(Session session, Context context) {
 								.getLoggedOutIndicatorPattern().toString());
 
 			t.persistMethodToSession(session, context.getIndex(), context.getAuthenticationMethod());
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 			log.error("Unable to persist Authentication method.", e);
 		}
 	}

File: src/org/zaproxy/zap/extension/authorization/ExtensionAuthorization.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -30,6 +29,7 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordContext;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
@@ -126,7 +126,7 @@ public void loadContextData(Session session, Context context) {
 					break;
 				}
 			}
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 			log.error("Unable to load Authorization Detection method.", e);
 		}
 	}
@@ -139,7 +139,7 @@ public void persistContextData(Session session, Context context) {
 			session.setContextData(context.getIndex(), RecordContext.TYPE_AUTHORIZATION_METHOD_TYPE,
 					Integer.toString(type));
 			context.getAuthorizationDetectionMethod().persistMethodToSession(session, context.getIndex());
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 			log.error("Unable to persist Authorization Detection method.", e);
 		}
 	}

File: src/org/zaproxy/zap/extension/brk/impl/http/PopupMenuAddBreakHistory.java
Patch:
@@ -19,10 +19,9 @@
  */
 package org.zaproxy.zap.extension.brk.impl.http;
 
-import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.zaproxy.zap.extension.brk.ExtensionBreak;
@@ -57,7 +56,7 @@ public boolean isButtonEnabledForHistoryReference(HistoryReference href) {
     public void performAction(HistoryReference href) {
         try {
             extension.addUiBreakpoint(href.getHttpMessage());
-        } catch (HttpMalformedHeaderException | SQLException e) {
+        } catch (HttpMalformedHeaderException | DatabaseException e) {
             logger.error(e.getMessage(), e);
             extension.getView().showWarningDialog(Constant.messages.getString("brk.add.error.history"));
         }

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzTableModel.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.zaproxy.zap.extension.fuzz.impl.http;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -26,6 +25,7 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.parosproxy.paros.network.HttpMessage;
@@ -180,7 +180,7 @@ private HttpMessage getHttpMessage(HistoryReference historyReference) {
             msg = historyReference.getHttpMessage();
         } catch (HttpMalformedHeaderException e) {
             logger.error(e.getMessage(), e);
-        } catch (SQLException e) {
+        } catch (DatabaseException e) {
             logger.error(e.getMessage(), e);
         }
         

File: src/org/zaproxy/zap/extension/history/PopupMenuExportURLs.java
Patch:
@@ -23,7 +23,6 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
-import java.sql.SQLException;
 import java.util.Enumeration;
 
 import javax.swing.JFileChooser;
@@ -33,6 +32,7 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
 import org.parosproxy.paros.model.HistoryReference;
@@ -152,7 +152,7 @@ private void exportURLs(SiteNode node, BufferedWriter writer, boolean html) {
         	log.warn(e.getStackTrace(), e);
 		} catch (IOException e) {
         	log.warn(e.getStackTrace(), e);
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
         	log.warn(e.getStackTrace(), e);
 		}
 

File: src/org/zaproxy/zap/extension/history/PopupMenuNote.java
Patch:
@@ -19,10 +19,9 @@
  */
 package org.zaproxy.zap.extension.history;
 
-import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
@@ -53,7 +52,7 @@ public void performAction(HistoryReference href) {
         try {
             extension.showNotesAddDialog(href, href.getHttpMessage().getNote());
 
-        } catch (HttpMalformedHeaderException | SQLException e) {
+        } catch (HttpMalformedHeaderException | DatabaseException e) {
             logger.error(e.getMessage(), e);
         }
     }

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzRequestRecord.java
Patch:
@@ -19,13 +19,13 @@
  */ 
 package org.zaproxy.zap.extension.multiFuzz.impl.http;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 
 import javax.swing.ImageIcon;
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.parosproxy.paros.network.HttpMessage;
@@ -185,7 +185,7 @@ private HttpMessage getHttpMessage(HistoryReference historyReference) {
 
 		try {
 			msg = historyReference.getHttpMessage();
-		} catch (HttpMalformedHeaderException | SQLException e) {
+		} catch (HttpMalformedHeaderException | DatabaseException e) {
 			logger.error(e.getMessage(), e);
 		}
 

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzResultDialog.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.awt.event.MouseEvent;
 import java.awt.event.MouseListener;
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -43,6 +42,7 @@
 import org.jfree.data.general.DefaultPieDataset;
 import org.jfree.ui.Align;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.parosproxy.paros.view.View;
@@ -146,7 +146,7 @@ public void valueChanged(
 												historyReference
 														.getHttpMessage());
 									} catch (HttpMalformedHeaderException
-											| SQLException ex) {
+											| DatabaseException ex) {
 										logger.error(ex.getMessage(), ex);
 									}
 								}
@@ -235,7 +235,7 @@ public FuzzComponent getMessageInspection() {
 					comp = new HttpFuzzComponent(
 							((HttpFuzzRequestRecord) getEntry(row))
 									.getHistory().getHttpMessage());
-				} catch (HttpMalformedHeaderException | SQLException e) {
+				} catch (HttpMalformedHeaderException | DatabaseException e) {
 					logger.error(e.getMessage());
 				}
 			}

File: src/org/zaproxy/zap/extension/params/ExtensionParams.java
Patch:
@@ -22,7 +22,6 @@
 import java.awt.EventQueue;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.sql.SQLException;
 import java.util.Collection;
 import java.util.Enumeration;
 import java.util.HashMap;
@@ -36,6 +35,7 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.control.Control.Mode;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordParam;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
@@ -257,7 +257,7 @@ private void sessionChangedEventHandler(Session session) {
 				sps.addParam(param.getSite(), param);
 				
 			}
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
             logger.error(e.getMessage(), e);
 		}
 
@@ -343,7 +343,7 @@ private void persist(HtmlParameterStats param) {
 				Model.getSingleton().getDb().getTableParam().update(
 						param.getId(), param.getTimesUsed(), setToString(param.getFlags()), setToString(param.getValues()));
 			}
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 			logger.error(e.getMessage(), e);
 		}
 	}

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -18,7 +18,6 @@
 package org.zaproxy.zap.extension.search;
 
 import java.nio.charset.StandardCharsets;
-import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -27,6 +26,7 @@
 import net.sf.json.JSONObject;
 
 import org.apache.log4j.Logger;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordHistory;
 import org.parosproxy.paros.db.TableHistory;
 import org.parosproxy.paros.model.Model;
@@ -269,7 +269,7 @@ private void search(JSONObject params, ExtensionSearch.Type searchType, SearchRe
 		for (Integer hRefId : searchListener.getHistoryReferencesIds()) {
 			try {
 				processor.processRecordHistory(tableHistory.read(hRefId.intValue()));
-			} catch (SQLException | HttpMalformedHeaderException e) {
+			} catch (DatabaseException | HttpMalformedHeaderException e) {
 				log.error(e.getMessage(), e);
 			}
 		}

File: src/org/zaproxy/zap/extension/search/SearchResultsTableModel.java
Patch:
@@ -19,11 +19,11 @@
  */
 package org.zaproxy.zap.extension.search;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
 
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.parosproxy.paros.network.HttpMessage;
@@ -225,7 +225,7 @@ public HistoryReferenceSearchResult(SearchResult sr, String stringFound) {
             public HttpMessage getMessage() {
                 try {
                     return getHistoryReference().getHttpMessage();
-                } catch (SQLException | HttpMalformedHeaderException e) {
+                } catch (DatabaseException | HttpMalformedHeaderException e) {
 
                     return null;
                 }
@@ -284,7 +284,7 @@ public CachedSearchMatch(SearchMatch searchMatch) {
             public HttpMessage getMessage() {
                 try {
                     return getHistoryReference().getHttpMessage();
-                } catch (SQLException | HttpMalformedHeaderException e) {
+                } catch (DatabaseException | HttpMalformedHeaderException e) {
 
                     return null;
                 }

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -19,13 +19,13 @@
  */
 package org.zaproxy.zap.extension.search;
 
-import java.sql.SQLException;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.control.Control;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
@@ -253,7 +253,7 @@ private void search() {
 			    	break;
 			    }
 			}	            
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 	        log.error(e.getMessage(), e);
 		}
 	}

File: src/org/zaproxy/zap/extension/sessions/ExtensionSessionManagement.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -30,6 +29,7 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.db.RecordContext;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
@@ -180,7 +180,7 @@ public void loadContextData(Session session, Context context) {
 					context.setSessionManagementMethod(t.loadMethodFromSession(session, context.getIndex()));
 				}
 			}
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 			log.error("Unable to load Session Management method.", e);
 		}
 
@@ -193,7 +193,7 @@ public void persistContextData(Session session, Context context) {
 			session.setContextData(context.getIndex(), RecordContext.TYPE_SESSION_MANAGEMENT_TYPE,
 					Integer.toString(t.getUniqueIdentifier()));
 			t.persistMethodToSession(session, context.getIndex(), context.getSessionManagementMethod());
-		} catch (SQLException e) {
+		} catch (DatabaseException e) {
 			log.error("Unable to persist Session Management method.", e);
 		}
 	}

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.zaproxy.zap.extension.spider;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -29,6 +28,7 @@
 import org.apache.commons.httpclient.URIException;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.control.Control;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteNode;
@@ -239,7 +239,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			try {
 				Session session = Model.getSingleton().getSession();
 				session.setExcludeFromSpiderRegexs(new ArrayList<String>());
-			} catch (SQLException e) {
+			} catch (DatabaseException e) {
 				throw new ApiException(ApiException.Type.INTERNAL_ERROR, e.getMessage());
 			}
 			break;

File: src/org/zaproxy/zap/session/CookieBasedSessionManagementMethodType.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.lang.ref.WeakReference;
 import java.net.HttpCookie;
-import java.sql.SQLException;
 import java.util.Iterator;
 import java.util.List;
 
@@ -15,6 +14,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
@@ -247,13 +247,13 @@ public int getUniqueIdentifier() {
 	}
 
 	@Override
-	public SessionManagementMethod loadMethodFromSession(Session session, int contextId) throws SQLException {
+	public SessionManagementMethod loadMethodFromSession(Session session, int contextId) throws DatabaseException {
 		return new CookieBasedSessionManagementMethod(contextId);
 	}
 
 	@Override
 	public void persistMethodToSession(Session session, int contextId, SessionManagementMethod method)
-			throws UnsupportedSessionManagementMethodException, SQLException {
+			throws UnsupportedSessionManagementMethodException, DatabaseException {
 		// Nothing to persist
 
 	}

File: src/org/zaproxy/zap/view/HistoryReferenceTable.java
Patch:
@@ -19,7 +19,6 @@
  */
 package org.zaproxy.zap.view;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -29,13 +28,14 @@
 import javax.swing.event.ListSelectionListener;
 
 import org.apache.log4j.Logger;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.HistoryReferenceTableModel.COLUMN;
-import org.zaproxy.zap.view.messagecontainer.http.SelectableHistoryReferencesContainer;
 import org.zaproxy.zap.view.messagecontainer.http.DefaultSelectableHistoryReferencesContainer;
+import org.zaproxy.zap.view.messagecontainer.http.SelectableHistoryReferencesContainer;
 
 /**
  * @deprecated (2.3.0) Superseded by {@link org.zaproxy.zap.view.table.HistoryReferencesTable}. It will be removed in a future
@@ -126,7 +126,7 @@ public void valueChanged(ListSelectionEvent e) {
 				        displayMessage(hRef.getHttpMessage());
 				    } catch (HttpMalformedHeaderException ex) {
 				        logger.error(ex.getMessage(), ex);
-                    } catch (SQLException ex) {
+                    } catch (DatabaseException ex) {
                         logger.error(ex.getMessage(), ex);
                     }
 			    }

File: src/org/zaproxy/zap/view/messagecontainer/http/DefaultSingleHistoryReferenceContainer.java
Patch:
@@ -20,9 +20,9 @@
 package org.zaproxy.zap.view.messagecontainer.http;
 
 import java.awt.Component;
-import java.sql.SQLException;
 
 import org.apache.log4j.Logger;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.parosproxy.paros.network.HttpMessage;
@@ -79,7 +79,7 @@ public HttpMessage getMessage() {
         if (historyReference != null) {
             try {
                 return historyReference.getHttpMessage();
-            } catch (HttpMalformedHeaderException | SQLException e) {
+            } catch (HttpMalformedHeaderException | DatabaseException e) {
                 LOGGER.error(e.getMessage(), e);
             }
         }

File: src/org/zaproxy/zap/view/messagecontainer/http/PersistedHttpMessagesList.java
Patch:
@@ -19,13 +19,13 @@
  */
 package org.zaproxy.zap.view.messagecontainer.http;
 
-import java.sql.SQLException;
 import java.util.AbstractList;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 import org.apache.log4j.Logger;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.parosproxy.paros.network.HttpMessage;
@@ -69,7 +69,7 @@ public PersistedHttpMessagesList(List<HistoryReference> historyReferences) {
     public HttpMessage get(int index) {
         try {
             return historyReferences.get(index).getHttpMessage();
-        } catch (HttpMalformedHeaderException | SQLException e) {
+        } catch (HttpMalformedHeaderException | DatabaseException e) {
             LOGGER.error("Failed to get the message from DB: " + e.getMessage(), e);
         }
         return null;

File: src/org/zaproxy/zap/view/table/HistoryReferencesTable.java
Patch:
@@ -23,7 +23,6 @@
 import java.awt.Container;
 import java.awt.Point;
 import java.awt.event.MouseEvent;
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
@@ -48,6 +47,7 @@
 import org.jdesktop.swingx.renderer.StringValues;
 import org.jdesktop.swingx.table.ColumnFactory;
 import org.jdesktop.swingx.table.TableColumnExt;
+import org.parosproxy.paros.db.DatabaseException;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.parosproxy.paros.network.HttpMessage;
@@ -377,7 +377,7 @@ public void valueChanged(final ListSelectionEvent evt) {
 
                 try {
                     displayMessage(hRef.getHttpMessage());
-                } catch (HttpMalformedHeaderException | SQLException e) {
+                } catch (HttpMalformedHeaderException | DatabaseException e) {
                     LOGGER.error(e.getMessage(), e);
                 }
             }

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -505,7 +505,7 @@ public ScriptNode addScript(ScriptWrapper script, boolean display) {
 				logger.error(e.getMessage(), e);
 			}
 		}
-		if (script.isLoadOnStart()) {
+		if (script.isLoadOnStart() && script.getFile() != null) {
 			this.getScriptParam().addScript(script);
 			this.getScriptParam().saveScripts();
 		}

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -286,6 +286,7 @@ private void run() throws Exception {
                 // Times to run the GUI
                 runGUI();
             } catch (Throwable e) {
+                View.getSingleton().hideSplashScreen();
                 if (!Constant.isDevBuild()) {
                     ErrorInfo errorInfo = new ErrorInfo(
                             Constant.messages.getString("start.gui.dialog.fatal.error.title"),
@@ -300,8 +301,6 @@ private void run() throws Exception {
                     JXErrorPane.showDialog(View.getSingleton().getSplashScreen(), errorPane);
                 }
                 throw e;
-            } finally {
-                View.getSingleton().hideSplashScreen();
             }
 
             if (firstTime) {
@@ -511,6 +510,7 @@ private void runGUI() throws ClassNotFoundException, Exception {
                 }
             }
         }
+        View.getSingleton().hideSplashScreen();
 
         if (createNewSession) {
             control.getMenuFileControl().newSession(false);

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -47,6 +47,7 @@
 // ZAP: 2014/07/15 Issue 1265: Context import and export
 // ZAP: 2014/11/18 Issue 1408: Extend the structural parameter handling to forms param
 // ZAP: 2014/12/22 Issue 1476: Display contexts in the Sites tree
+// ZAP: 2015/01/30 Set default context name
 
 package org.parosproxy.paros.model;
 
@@ -143,7 +144,8 @@ protected Session(Model model) {
 		
 		discardContexts();
 		// Always start with one context
-	    getNewContext();
+	    Context ctx = getNewContext();
+	    ctx.setName(Constant.messages.getString("context.default.name"));
 
 	}
 	

File: src/org/parosproxy/paros/view/SiteMapPanel.java
Patch:
@@ -531,7 +531,7 @@ public void mouseClicked(java.awt.event.MouseEvent e) {
 					    if (node != null && node.getUserObject() != null) {
 					    	Target target = (Target)node.getUserObject();
 					    	getView().showSessionDialog(Model.getSingleton().getSession(), 
-					    			target.getContext().getName());
+					    			Integer.toString(target.getContext().getIndex()));
 					    }
 				    }
 				}

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -124,12 +124,13 @@ public void run() {
 										scanner.scanHttpResponseReceive(msg, href.getHistoryId(), src);
 									}
 								}
-							} catch (Exception e) {
+							} catch (Throwable e) {
 								if (shutDown) {
 									return;
 								}
 								logger.error("Scanner " + scanner.getName() + 
-										" failed on record " + currentId + " from History table", e);
+										" failed on record " + currentId + " from History table: "
+										+ href.getMethod() + " " + href.getURI(), e);
 							}
 						}
 					} catch (Exception e) {

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -50,6 +50,7 @@
 // ZAP: 2014/05/20 Issue 1191: Cmdline session params have no effect
 // ZAP: 2014/09/22 Issue 1345: Support Attack mode
 // ZAP: 2014/11/19 Issue 1412: Manage scan policies
+// ZAP: 2015/01/29 Issue 1489: Version number in window title
 
 package org.parosproxy.paros.control;
 
@@ -274,7 +275,7 @@ public void run() {
 					view.getSiteTreePanel().getTreeSite().setModel(session.getSiteTree());
 
 					// refresh display
-					view.getMainFrame().setTitle(session.getSessionName() + " - " + Constant.PROGRAM_NAME);
+					view.getMainFrame().setTitle(session.getSessionName());
 					view.getOutputPanel().clear();
 				}
 			});
@@ -321,7 +322,7 @@ public void run() {
 			});
 			
 			// refresh display
-			view.getMainFrame().setTitle(session.getSessionName() + " - " + Constant.PROGRAM_NAME);
+			view.getMainFrame().setTitle(session.getSessionName());
 			view.getOutputPanel().clear();
 		}
 

File: src/org/zaproxy/zap/extension/help/ExtensionHelp.java
Patch:
@@ -37,6 +37,7 @@
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.view.View;
+import org.zaproxy.zap.control.ExtensionFactory;
 import org.zaproxy.zap.view.ZapMenuItem;
 
 /**
@@ -106,7 +107,7 @@ public static HelpBroker getHelpBroker() {
 	private static synchronized void createHelpBroker() {
 		if (hb == null) {
 			try {
-				ClassLoader cl = HelpBroker.class.getClassLoader();  
+				ClassLoader cl = ExtensionFactory.getAddOnLoader();  
 				URL hsUrl = HelpSet.findHelpSet( cl, HELP_SET_FILE_NAME, Constant.getLocale());
 				if (hsUrl != null) {
 					hs = new HelpSet(cl, hsUrl);

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -210,6 +210,7 @@ public void registerScriptEngineWrapper(ScriptEngineWrapper wrapper) {
 		this.engineWrappers.add(wrapper);
 
 		setScriptEngineWrapper(getTreeModel().getScriptsNode(), wrapper, wrapper);
+		setScriptEngineWrapper(getTreeModel().getTemplatesNode(), wrapper, wrapper);
 		
 		// Templates for this engine might not have been loaded
 		this.loadTemplates(wrapper);

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -431,7 +431,7 @@ public void start() {
 		if (scanUser != null)
 			log.info("Scan will be performed from the point of view of User: " + scanUser.getName());
 
-		this.controller.reset();
+		this.controller.init();
 		this.stopped = false;
 		this.paused = false;
 		this.initialized = false;

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -168,7 +168,7 @@ private void siteNodeChangedEventHandler(SiteMap siteTree, TreeNode node) {
     }
 
     private void addAlertToTree(final Alert alert, final HistoryReference ref, final HttpMessage msg) {
-        if (EventQueue.isDispatchThread()) {
+        if (!View.isInitialised() || EventQueue.isDispatchThread()) {
             addAlertToTreeEventHandler(alert, ref, msg);
 
         } else {

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextTreeMenu.java
Patch:
@@ -47,7 +47,7 @@ public boolean isEnableForComponent(Component invoker) {
 		if (invoker instanceof JTree && SiteMapPanel.CONTEXT_TREE_COMPONENT_NAME.equals(invoker.getName())) {
 			JTree contextTree = (JTree)invoker;
 			SiteNode node = (SiteNode)contextTree.getLastSelectedPathComponent();
-			if (node.isRoot()) {
+			if (node == null || node.isRoot()) {
 				return false;
 			}
 			contextId = ((Target)node.getUserObject()).getContext().getIndex();

File: src/org/parosproxy/paros/core/scanner/Alert.java
Patch:
@@ -36,6 +36,7 @@
 // ZAP: 2014/04/10 Issue 1042: Having significant issues opening a previous session
 // ZAP: 2014/05/23 Issue 1209: Reliability becomes Confidence and add levels
 // ZAP: 2015/01/04 Issue 1419: Include alert's evidence in HTML report
+// ZAP: 2014/01/04 Issue 1475: Alerts with different name from same scanner might not be shown in report
 
 package org.parosproxy.paros.core.scanner;
 
@@ -322,14 +323,14 @@ public int compareTo(Object o2) throws ClassCastException {
 
 
 	/**
-	Override equals.  Alerts are equal if the alert, uri and param is the same.
+	Override equals.  Alerts are equal if the plugin id, alert, other info, uri and param is the same.
 	*/
 	@Override
 	public boolean equals(Object obj) {
 		Alert item = null;
 		if (obj instanceof Alert) {
 			item = (Alert) obj;
-			if ((pluginId == item.pluginId) && uri.equalsIgnoreCase(item.uri)
+			if ((pluginId == item.pluginId) && alert.equals(item.alert) && uri.equalsIgnoreCase(item.uri)
 				&& param.equalsIgnoreCase(item.param) && otherInfo.equalsIgnoreCase(item.otherInfo)) {
 				return true;
 			}

File: src/org/zaproxy/zap/control/CoreFunctionality.java
Patch:
@@ -62,7 +62,6 @@ public static List<Extension> getBuiltInExtensions() {
 		return builtInExtensions;
 	}
 
-	@SuppressWarnings("deprecation")
 	private static synchronized void createExtensions() {
 		if (builtInExtensions == null) {
 			ArrayList<Extension> extensions = new ArrayList<>();
@@ -78,7 +77,6 @@ private static synchronized void createExtensions() {
 			extensions.add(new org.zaproxy.zap.extension.api.ExtensionAPI());
 			extensions.add(new org.zaproxy.zap.extension.ascan.ExtensionActiveScan());
 			extensions.add(new org.zaproxy.zap.extension.authentication.ExtensionAuthentication());
-			extensions.add(new org.zaproxy.zap.extension.auth.ExtensionAuth());
 			extensions.add(new org.zaproxy.zap.extension.authorization.ExtensionAuthorization());
 			extensions.add(new org.zaproxy.zap.extension.autoupdate.ExtensionAutoUpdate());
 			extensions.add(new org.zaproxy.zap.extension.brk.ExtensionBreak());
@@ -106,7 +104,6 @@ private static synchronized void createExtensions() {
 			extensions.add(new org.zaproxy.zap.extension.multiFuzz.impl.http.ExtensionRegister());
 			extensions.add(new org.zaproxy.zap.extension.params.ExtensionParams());
 			extensions.add(new org.zaproxy.zap.extension.pscan.ExtensionPassiveScan());
-			extensions.add(new org.zaproxy.zap.extension.reauth.ExtensionReauth());
 			extensions.add(new org.zaproxy.zap.extension.script.ExtensionScript());
 			extensions.add(new org.zaproxy.zap.extension.search.ExtensionSearch());
 			extensions.add(new org.zaproxy.zap.extension.sessions.ExtensionSessionManagement());

File: src/org/parosproxy/paros/core/scanner/PluginFactory.java
Patch:
@@ -36,6 +36,7 @@
 // ZAP: 2014/11/19 Issue 1412: Manage scan policies
 // ZAP: 2014/11/19 Issue 1412: Init scan rule status (quality) from add-on
 // ZAP: 2015/01/04 Issue 1484: NullPointerException during uninstallation of an add-on with active scanners
+// ZAP: 2015/01/04 Issue 1486: Add-on components leak
 
 package org.parosproxy.paros.core.scanner;
 
@@ -79,7 +80,7 @@ public PluginFactory() {
     
     private static List<AbstractPlugin> getLoadedPlugins() {
     	if (loadedPlugins == null) {
-	    	loadedPlugins = CoreFunctionality.getBuiltInActiveScanRules();
+	    	loadedPlugins = new ArrayList<>(CoreFunctionality.getBuiltInActiveScanRules());
 	    	loadedPlugins.addAll(ExtensionFactory.getAddOnLoader().getActiveScanRules());
 	        //sort by the criteria below.
 	        Collections.sort(loadedPlugins, riskComparator);

File: src/org/zaproxy/zap/control/ExtensionFactory.java
Patch:
@@ -73,7 +73,7 @@ public static AddOnLoader getAddOnLoader() {
 
     public static synchronized void loadAllExtension(ExtensionLoader extensionLoader, Configuration config) {
         log.info("Loading extensions");
-        List<Extension> listExts = CoreFunctionality.getBuiltInExtensions();
+        List<Extension> listExts = new ArrayList<>(CoreFunctionality.getBuiltInExtensions());
         listExts.addAll(getAddOnLoader().getExtensions());
 
         synchronized (mapAllExtension) {

File: src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
Patch:
@@ -259,7 +259,7 @@ private PassiveScannerList getPassiveScannerList() {
             scannerList.setAutoTagScanners(getPassiveScanParam().getAutoTagScanners());
 
             // Load the  'switchable' plugins
-	    	List<PluginPassiveScanner> listTest = CoreFunctionality.getBuiltInPassiveScanRules();
+	    	List<PluginPassiveScanner> listTest = new ArrayList<>(CoreFunctionality.getBuiltInPassiveScanRules());
 	    	listTest.addAll(ExtensionFactory.getAddOnLoader().getPassiveScanRules());
 
 

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionPanel.java
Patch:
@@ -160,7 +160,7 @@ public void valueChanged(ListSelectionEvent arg0) {
 	        					tableExt.getSelectedRow());
 	        			if (ext != null) {
 	        				try {
-								extName.setText(ext.getName());
+								extName.setText(ext.getUIName());
 								extDescription.setText(ext.getDescription());
 								if (ext.getAuthor() != null) {
 									extAuthor.setText(ext.getAuthor());

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionTableModel.java
Patch:
@@ -58,7 +58,7 @@ public int compare(Extension ext0, Extension ext1) {
 				if (ext0 == null || ext1 == null) {
 					return 0;
 				}
-				return ext0.getName().compareTo(ext1.getName());
+				return ext0.getUIName().compareTo(ext1.getUIName());
 			}});
     }
 
@@ -85,7 +85,7 @@ public Object getValueAt(int row, int col) {
 					}
 					return "";
 				case 2: return ext.getAuthor();
-				case 3: return ext.getName();
+				case 3: return ext.getUIName();
 				}
 			} catch (Exception e) {
 				log.error("Failed on extension " + ext.getName(), e);

File: src/org/zaproxy/clientapi/examples/AuthenticationApiExample.java
Patch:
@@ -54,8 +54,8 @@
  * <code>paramA + "=" + urlEncode(paramAValue) + "&" + paramB + "=" + urlEncode(paramBValue) + ...</code>
  * </li>
  * <li>
- * for formBasedAuthentication, the places filled in with the credentials are marked via %username%
- * and %password%, in either the requestUrl or the requestBody</li>
+ * for formBasedAuthentication, the places filled in with the credentials are marked via {%username%}
+ * and {%password%}, in either the requestUrl or the requestBody</li>
  * </ul>
  */
 public class AuthenticationApiExample {
@@ -130,7 +130,7 @@ private static void setFormBasedAuthenticationForBodgeit() throws ClientApiExcep
 		// Setup the authentication method
 		String contextId = "1";
 		String loginUrl = "http://localhost:8080/bodgeit/login.jsp";
-		String loginRequestData = "username=%username%&password=%password%";
+		String loginRequestData = "username={%username%}&password={%password%}";
 
 		// Prepare the configuration in a format similar to how URL parameters are formed. This
 		// means that any value we add for the configuration values has to be URL encoded.

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -51,6 +51,7 @@ public class SpiderDialog extends StandardFieldsDialog {
     private static final String FIELD_ADVANCED = "spider.custom.label.adv"; 
     private static final String FIELD_MAX_DEPTH = "spider.custom.label.maxDepth"; 
     private static final String FIELD_MAX_CHILDREN = "spider.custom.label.maxChildren"; 
+    private static final String FIELD_SEND_REFERER = "spider.custom.label.sendReferer";
     private static final String FIELD_PROCESS_FORMS = "spider.custom.label.processForms"; 
     private static final String FIELD_POST_FORMS = "spider.custom.label.postForms"; 
     private static final String FIELD_PARSE_COMMENTS = "spider.custom.label.parseComments"; 
@@ -106,6 +107,7 @@ public void init(Target target) {
         // Advanced options
         this.addNumberField(1, FIELD_MAX_DEPTH, 1, 19, getSpiderParam().getMaxDepth());
         this.addNumberField(1, FIELD_MAX_CHILDREN, 0, Integer.MAX_VALUE, maxChildrenToCrawl);
+        this.addCheckBoxField(1, FIELD_SEND_REFERER, getSpiderParam().isSendRefererHeader());
         this.addCheckBoxField(1, FIELD_PROCESS_FORMS, getSpiderParam().isProcessForm());
         this.addCheckBoxField(1, FIELD_POST_FORMS, getSpiderParam().isPostForm());
         this.addCheckBoxField(1, FIELD_PARSE_COMMENTS, getSpiderParam().isParseComments());
@@ -275,6 +277,7 @@ public void save() {
         if (this.getBoolValue(FIELD_ADVANCED)) {
         	// Set the advanced options
         	spiderParam.setMaxDepth(this.getIntValue(FIELD_MAX_DEPTH));
+        	spiderParam.setSendRefererHeader(this.getBoolValue(FIELD_SEND_REFERER));
         	spiderParam.setProcessForm(this.getBoolValue(FIELD_PROCESS_FORMS));
         	spiderParam.setPostForm(this.getBoolValue(FIELD_POST_FORMS));
         	spiderParam.setParseComments(this.getBoolValue(FIELD_PARSE_COMMENTS));

File: src/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -186,7 +186,7 @@ protected void addSeed(URI uri, String method) {
 			}
 		}
 		// Create and submit the new task
-		SpiderTask task = new SpiderTask(spider, uri, 0, method);
+		SpiderTask task = new SpiderTask(spider, null, uri, 0, method);
 		spider.submitTask(task);
 		// Add the uri to the found list
 		spider.notifyListenersFoundURI(uri.toString(), method, FetchStatus.SEED);
@@ -289,7 +289,7 @@ public void resourceURIFound(HttpMessage responseMessage, int depth, String uri,
 		spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, FetchStatus.VALID);
 
 		// Submit the task
-		SpiderTask task = new SpiderTask(spider, uriV, depth, HttpRequestHeader.GET);
+		SpiderTask task = new SpiderTask(spider, responseMessage.getRequestHeader().getURI(), uriV, depth, HttpRequestHeader.GET);
 		spider.submitTask(task);
 	}
 
@@ -338,7 +338,7 @@ public void resourcePostURIFound(HttpMessage responseMessage, int depth, String
 		spider.notifyListenersFoundURI(uri, HttpRequestHeader.POST, FetchStatus.VALID);
 
 		// Submit the task
-		SpiderTask task = new SpiderTask(spider, uriV, depth, HttpRequestHeader.POST, requestBody);
+		SpiderTask task = new SpiderTask(spider, responseMessage.getRequestHeader().getURI(), uriV, depth, HttpRequestHeader.POST, requestBody);
 		spider.submitTask(task);
 
 	}

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -832,7 +832,7 @@ private static void writeReportLastScanTo(HttpMessage msg, ScanReportType report
 		String type = ScanReportType.XML == reportType ? "xml" : "html";
 		String response = ReportGenerator.stringToHtml(
 				report.toString(),
-				Paths.get(Constant.getZapInstall(), "xml/report." + type + ".xsl").toAbsolutePath().toString());
+				Paths.get(Constant.getZapInstall(), "xml/report." + type + ".xsl").toString());
 
 		msg.setResponseHeader(API.getDefaultResponseHeader("text/" + type + "; charset=UTF-8"));
 

File: src/org/zaproxy/zap/model/VulnerabilitiesLoader.java
Patch:
@@ -11,6 +11,7 @@
 import org.apache.commons.configuration.ConversionException;
 import org.apache.commons.configuration.XMLConfiguration;
 import org.apache.log4j.Logger;
+import org.parosproxy.paros.Constant;
 
 public class VulnerabilitiesLoader {
 
@@ -114,7 +115,7 @@ private String[] getListOfVulnerabilitiesFiles() {
 		String[] files = file.list(new FilenameFilter() {
 		  @Override
 		  public boolean accept(File dir, String name) {
-			if (name.indexOf(".xml") == -1) {
+			if (name.indexOf(Constant.VULNERABILITIES_EXTENSION) == -1) {
 				return false;
 			}
 			

File: src/org/parosproxy/paros/control/Proxy.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2013/01/25 Added method removeProxyListener()
 // ZAP: 2013/08/30 Issue 775: Allow host to be set via the command line
 // ZAP: 2014/03/23 Issue 1022: Proxy - Allow to override a proxied message
+// ZAP: 2015/01/04 Issue 1387: Unable to change the proxy's port/address if the port/address was specified through the command line
 package org.parosproxy.paros.control;
  
 import java.util.List;
@@ -85,6 +86,8 @@ public void startServer() {
 		    if (this.overrides != null) {
 		    	proxyHost = this.overrides.getProxyHost();
 		    	proxyPort = this.overrides.getProxyPort();
+		    	// Use overrides once.
+		    	overrides = null;
 		    }
 		    if (proxyHost != null) {
 		    	// Save the override in the configs

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -830,7 +830,9 @@ private static void writeReportLastScanTo(HttpMessage msg, ScanReportType report
 		rls.generate(report, Model.getSingleton());
 
 		String type = ScanReportType.XML == reportType ? "xml" : "html";
-		String response = ReportGenerator.stringToHtml(report.toString(), "xml/report." + type + ".xsl");
+		String response = ReportGenerator.stringToHtml(
+				report.toString(),
+				Paths.get(Constant.getZapInstall(), "xml/report." + type + ".xsl").toAbsolutePath().toString());
 
 		msg.setResponseHeader(API.getDefaultResponseHeader("text/" + type + "; charset=UTF-8"));
 

File: src/org/parosproxy/paros/core/scanner/Alert.java
Patch:
@@ -61,7 +61,7 @@ public class Alert implements Comparable<Object>  {
 	// ZAP: Added FALSE_POSITIVE
 	public static final int FALSE_POSITIVE = 0;
 	/**
-	 * @deprecated (2.4.0) Replaced by {@link LOW} confidence.
+	 * @deprecated (2.4.0) Replaced by {@link #LOW} confidence.
 	 * SUSPICIOUS reliability has been deprecated in favour of using LOW confidence.
 	 */
 	@Deprecated
@@ -167,7 +167,7 @@ public Alert(RecordAlert recordAlert, HistoryReference ref) {
         setHistoryRef(ref);
 	}
 	/**
-	 * @deprecated  (2.4.0) Replaced by {@link #setRiskConfidence(risk, confidence)}.
+	 * @deprecated  (2.4.0) Replaced by {@link #setRiskConfidence(int, int)}.
 	 * Use of reliability has been deprecated in favour of using confidence
 	 */
 	@Deprecated

File: src/org/zaproxy/clientapi/core/Alert.java
Patch:
@@ -24,7 +24,7 @@ public class Alert {
 
     public enum Risk {Informational, Low, Medium, High};
 	/**
-	 * @deprecated (2.4.0) Replaced by {@link #Confidence}.
+	 * @deprecated (2.4.0) Replaced by {@link Confidence}.
 	 * Use of reliability has been deprecated in favour of using confidence.
 	 */
 	@Deprecated

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -383,7 +383,7 @@ private void buildHistory(List<Integer> dbList, HistoryFilter historyFilter) {
 	            		historyRef = sn.getHistoryReference();
 	            	} else {
 	                    historyRef = getHistoryReference(historyId);
-	                    historyRef.setSiteNode(sn);
+	                    sn.setHistoryReference(historyRef);
 	            	}
 	            	final String uri = historyRef.getURI().toString();
 	            	if (this.showJustInScope && ! getModel().getSession().isInScope(uri)) {

File: src/org/zaproxy/zap/extension/httppanel/view/largerequest/LargeRequestUtil.java
Patch:
@@ -24,7 +24,7 @@
 
 public class LargeRequestUtil {
 
-    private static final int DEFAULT_MIN_CONTENT_LENGTH = 100000;
+    public static final int DEFAULT_MIN_CONTENT_LENGTH = 100000;
 
     protected static int minContentLength = DEFAULT_MIN_CONTENT_LENGTH;
 
@@ -41,7 +41,7 @@ public static void restoreDefaultMinContentLength() {
     }
 
     public static boolean isLargeRequest(Message aMessage) {
-        if (aMessage instanceof HttpMessage) {
+        if (aMessage instanceof HttpMessage && minContentLength > 0) {
             HttpMessage httpMessage = (HttpMessage) aMessage;
             return httpMessage.getRequestBody().length() > minContentLength;
         }

File: src/org/zaproxy/zap/extension/httppanel/view/largeresponse/LargeResponseUtil.java
Patch:
@@ -23,7 +23,7 @@
 
 public class LargeResponseUtil {
     
-    private static final int DEFAULT_MIN_CONTENT_LENGTH = 100000;
+    public static final int DEFAULT_MIN_CONTENT_LENGTH = 100000;
     
     protected static int minContentLength = DEFAULT_MIN_CONTENT_LENGTH;
     
@@ -42,7 +42,7 @@ public static void restoreDefaultMinContentLength() {
     public static boolean isLargeResponse(Message aMessage) {
         if (aMessage instanceof HttpMessage) {
             HttpMessage httpMessage = (HttpMessage) aMessage;
-            if (httpMessage.getResponseBody() == null) {
+            if (httpMessage.getResponseBody() == null || minContentLength <= 0) {
                 return false;
             }
 

File: src/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -247,7 +247,7 @@ public void actionPerformed(ActionEvent e) {
         if (target != null) {
             // Set up the fields if a node has been specified, otherwise leave as previously set
             this.populateRequestField(this.target.getStartNode());
-            this.siteNodeSelected(FIELD_START, this.target.getStartNode());
+	        this.targetSelected(FIELD_START, this.target);
             this.setUsers();
             this.setTech();
         }

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -147,7 +147,7 @@ public void actionPerformed(ActionEvent e) {
 
         if (target != null) {
 	        // Set up the fields if a node has been specified, otherwise leave as previously set
-	        this.siteNodeSelected(FIELD_START, this.target.getStartNode());	
+	        this.targetSelected(FIELD_START, this.target);
 	        this.setUsers();
         }
         

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -55,6 +55,7 @@
 // ZAP: 2014/04/10 Issue 1042: Having significant issues opening a previous session
 // ZAP: 2014/05/20 Issue 1206: "History" tab is not cleared when a new session is created 
 // through the API with ZAP in GUI mode
+// ZAP: 2014/12/12 Issue 1449: Added help button
 
 package org.parosproxy.paros.extension.history;
 
@@ -455,7 +456,7 @@ private PopupMenuPurgeHistory getPopupMenuPurgeHistory() {
 	 */    
 	public ManualRequestEditorDialog getResendDialog() {
 		if (resendDialog == null) {
-			resendDialog = new ManualHttpRequestEditorDialog(true, "resend");
+			resendDialog = new ManualHttpRequestEditorDialog(true, "resend", "ui.dialogs.resend");
 			resendDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
 		}
 		return resendDialog;

File: src/org/parosproxy/paros/extension/manualrequest/ExtensionManualRequestEditor.java
Patch:
@@ -36,6 +36,7 @@
 // with a manual request editor
 // ZAP: 2014/03/23 Issue 1094: Change ExtensionManualRequestEditor to only add view components if in GUI mode
 // ZAP: 2014/08/14 Issue 1292: NullPointerException while attempting to remove an unregistered ManualRequestEditorDialog
+// ZAP: 2014/12/12 Issue 1449: Added help button
 
 package org.parosproxy.paros.extension.manualrequest;
 
@@ -87,7 +88,7 @@ public void initView(ViewDelegate view) {
         super.initView(view);
 
         // add default manual request editor
-        ManualRequestEditorDialog httpSendEditorDialog = new ManualHttpRequestEditorDialog(true, "manual");
+        ManualRequestEditorDialog httpSendEditorDialog = new ManualHttpRequestEditorDialog(true, "manual", "ui.dialogs.manreq");
         httpSendEditorDialog.setTitle(Constant.messages.getString("manReq.dialog.title"));
         
         addManualSendEditor(httpSendEditorDialog);
@@ -172,6 +173,7 @@ public void sessionModeChanged(Mode mode) {
 			break;
 		case protect:
 		case standard:
+		case attack:
 			isEnabled = true;
 			break;
 		}

File: src/org/zaproxy/zap/extension/help/ExtensionHelp.java
Patch:
@@ -45,6 +45,7 @@
 public class ExtensionHelp extends ExtensionAdaptor {
 
 	private static final String HELP_SET_FILE_NAME = "helpset";
+	public static final ImageIcon HELP_ICON = new ImageIcon(ExtensionHelp.class.getResource("/resource/icon/16/201.png"));
 
 	private ZapMenuItem menuHelpZap = null;
 	private JButton helpButton = null;

File: src/org/zaproxy/zap/view/StandardFieldsDialog.java
Patch:
@@ -339,7 +339,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	private JButton getHelpButton(final String helpIndex) {
 		if (helpButton == null) {
 			helpButton = new JButton();
-			helpButton.setIcon(new ImageIcon(ExtensionHelp.class.getResource("/resource/icon/16/201.png")));
+			helpButton.setIcon(ExtensionHelp.HELP_ICON);
 			helpButton.setToolTipText(Constant.messages.getString("help.dialog.button.tooltip"));
 
 			helpButton.addActionListener(new java.awt.event.ActionListener() { 

File: src/org/zaproxy/zap/control/ExtensionFactory.java
Patch:
@@ -160,8 +160,7 @@ private static void loadMessagesAndAddExtension(ExtensionLoader extensionLoader,
     }
 
     public static synchronized List<Extension> loadAddOnExtensions(ExtensionLoader extensionLoader, Configuration config, AddOn addOn) {
-        List<Extension> listExts = getAddOnLoader().getImplementors(addOn, "org.zaproxy.zap.extension", Extension.class);
-        listExts.addAll(getAddOnLoader().getImplementors(addOn, "org.parosproxy.paros.extension", Extension.class));
+        List<Extension> listExts = getAddOnLoader().getExtensions(addOn);
 
         synchronized (mapAllExtension) {
 

File: src/org/parosproxy/paros/view/AbstractParamDialog.java
Patch:
@@ -28,6 +28,7 @@
 // ZAP: 2013/08/21 Added support for detecting when AbstractParamPanels are being shown/hidden in a AbstractParamDialog
 // ZAP: 2013/11/28 Issue 923: Allow a footer to be set.
 // ZAP: 2014/02/21 Issue 1043: Custom active scan dialog
+// ZAP: 2014/12/10 Issue 1427: Standardize on [Cancel] [OK] button order
 
 package org.parosproxy.paros.view;
 
@@ -148,8 +149,8 @@ private javax.swing.JPanel getJContentPane() {
             gridBagConstraints1.gridy = 0;
             jContentPane.add(getJSplitPane(), gridBagConstraints1);
             jContentPane.add(footer, gridBagConstraints12);
-            jContentPane.add(getBtnOK(), gridBagConstraints13);
-            jContentPane.add(getBtnCancel(), gridBagConstraints14);
+            jContentPane.add(getBtnCancel(), gridBagConstraints13);
+            jContentPane.add(getBtnOK(), gridBagConstraints14);
         }
         
         return jContentPane;

File: src/org/zaproxy/clientapi/core/Alert.java
Patch:
@@ -24,8 +24,8 @@ public class Alert {
 
     public enum Risk {Informational, Low, Medium, High};
 	/**
-	 * @deprecated
-	 * Use of reliability has been deprecated in favour of using confidence
+	 * @deprecated (2.4.0) Replaced by {@link #Confidence}.
+	 * Use of reliability has been deprecated in favour of using confidence.
 	 */
 	@Deprecated
 	public enum Reliability {Suspicious, Warning};
@@ -34,7 +34,7 @@ public enum Confidence {Low, Medium, High, Confirmed};
 	private String alert;
 	private Risk risk;
 	/**
-	 * @deprecated
+	 * @deprecated (2.4.0) Replaced by {@link #confidence}.
 	 * Use of reliability has been deprecated in favour of using confidence
 	 */
 	@Deprecated

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -1314,7 +1314,6 @@ public List<String> getTreePath(URI uri) throws URIException {
 		return this.getUrlParamParser(uri.toString()).getTreePath(uri);
 	}
 
-	// ZAP: Added support of structural form parameters (Issue 1408)
 	public List<String> getTreePath(HttpMessage msg) throws URIException {
 		URI uri = msg.getRequestHeader().getURI();
 		return this.getUrlParamParser(uri.toString()).getTreePath(msg);

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -172,7 +172,6 @@ public synchronized SiteNode findNode(HttpMessage msg, boolean matchStructural)
                 return null;
         	}
             
-            // ZAP: Added support of structural form parameters (Issue 1408)
             List<String> path = model.getSession().getTreePath(msg);
             for (int i=0; i < path.size(); i++) {
             	folder = path.get(i);
@@ -346,7 +345,6 @@ public SiteNode addPath(HistoryReference ref, HttpMessage msg) {
             // add host
             parent = findAndAddChild(parent, host, ref, msg);
                      
-            // ZAP: Added support of structural form parameters (Issue 1408)
             List<String> path = model.getSession().getTreePath(msg);
             for (int i=0; i < path.size(); i++) {
             	folder = path.get(i);

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -433,7 +433,7 @@ private List<ClassNameWrapper> getLocalClassNames (String packageName) {
             
             try {
                 // ZAP: Changed to take into account the package name
-                return getJarClassNames(null, new File(new URI(jarFile)), packageName);
+                return getJarClassNames(this.getClass().getClassLoader(), new File(new URI(jarFile)), packageName);
             } catch (URISyntaxException e) {
             	logger.error(e.getMessage(), e);
             }

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -49,6 +49,7 @@
 // ZAP: 2014/08/14 Issue 1291: 407 Proxy Authentication Required while active scanning
 // ZAP: 2014/10/25 Issue 1062: Added a getter for the HttpClient.
 // ZAP: 2014/10/28 Issue 1390: Force https on cfu call
+// ZAP: 2014/11/25 Issue 1411: Changed getUser() visibility
 
 package org.parosproxy.paros.network;
 
@@ -422,7 +423,6 @@ private void notifyResponseListeners(HttpMessage msg) {
 		}
 	}
 	
-	// ZAP: Changed visibility to public. Needed for authentication when running Zest script in scanner (Issue 1411)
 	public User getUser (HttpMessage msg) {
 		if (this.user != null) {
 			// If its set for the sender it overrides the message

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -36,7 +36,7 @@
 import org.w3c.dom.NodeList;
 
 public class AddOn  {
-	public enum Status {example, alpha, beta, weekly, release}
+	public enum Status {unknown, example, alpha, beta, weekly, release}
 	private String id;
 	private String name;
 	private String description = "";

File: src/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -42,7 +42,6 @@
 import org.parosproxy.paros.core.scanner.Plugin.AttackStrength;
 import org.parosproxy.paros.core.scanner.PluginFactory;
 import org.parosproxy.paros.view.View;
-import org.zaproxy.zap.utils.ScannerUtils;
 
 
 public class CategoryTableModel extends DefaultTableModel {
@@ -79,7 +78,8 @@ public void setTable(int category, PluginFactory pluginFactory, AlertThreshold d
         for (Plugin test : pluginFactory.getAllPlugin()) {
             if (test.getCategory() == category) {
                 listTestCategory.add(test);
-                scannersQuality.put(test.getId(),ScannerUtils.getPluginQuality(test));
+                scannersQuality.put(test.getId(),
+                		Constant.messages.getString("ascan.policy.table.quality."+ test.getStatus().name()));
             }
         }
         fireTableDataChanged();

File: src/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -50,7 +50,6 @@
 import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;
 import org.parosproxy.paros.core.scanner.Plugin.AttackStrength;
 import org.parosproxy.paros.view.AbstractParamPanel;
-import org.zaproxy.zap.utils.ScannerUtils;
 import org.zaproxy.zap.utils.ZapTextField;
 import org.zaproxy.zap.view.LayoutHelper;
 
@@ -267,7 +266,7 @@ private void applyThreshold(AlertThreshold threshold, String target) {
     	for (Plugin plugin : policy.getPluginFactory().getAllPlugin()) {
     		if (target.equals(Constant.messages.getString("ascan.policy.table.quality.all"))) {
     			plugin.setAlertThreshold(threshold);
-    		} else if (target.equals(ScannerUtils.getPluginQuality(plugin))) {
+    		} else if (target.equals(Constant.messages.getString("ascan.policy.table.quality." + plugin.getStatus().name()))) {
     			plugin.setAlertThreshold(threshold);
     		}
     	}
@@ -316,7 +315,7 @@ private void applyStrength(AttackStrength strength, String target) {
     	for (Plugin plugin : policy.getPluginFactory().getAllPlugin()) {
     		if (target.equals(Constant.messages.getString("ascan.policy.table.quality.all"))) {
     			plugin.setAttackStrength(strength);
-    		} else if (target.equals(ScannerUtils.getPluginQuality(plugin))) {
+    		} else if (target.equals(Constant.messages.getString("ascan.policy.table.quality." + plugin.getStatus().name()))) {
     			plugin.setAttackStrength(strength);
     		}
     	}

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -61,7 +61,6 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.extension.encoder.Encoder;
-import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpHeader;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.anticsrf.AntiCsrfToken;
@@ -794,6 +793,7 @@ public void cloneInto(Plugin plugin) {
     		ap.setDefaultAlertThreshold(this.defaultAttackThreshold);
     		ap.setDefaultAttackStrength(this.defaultAttackStrength);
     		ap.setTechSet(this.getTechSet());
+    		ap.saveTo(plugin.getConfig());
     	} else {
     		throw new InvalidParameterException("Not an AbstractPlugin");
     	}

File: src/org/zaproxy/zap/extension/ascan/AttackModeScanner.java
Patch:
@@ -200,7 +200,7 @@ public void run() {
 			log.debug("Starting attack thread");
 			this.running = true;
 			ascanWrapper = new AttackScan(Constant.messages.getString("ascan.attack.scan"), extension.getScannerParam(), 
-					extension.getModel().getOptionsParam().getConnectionParam());
+					extension.getModel().getOptionsParam().getConnectionParam(), extension.getPolicyManager().getAttackScanPolicy());
 			extension.registerScan(ascanWrapper);
 			while (running) {
 				if (scanStatus.getScanCount() != nodeStack.size()) {
@@ -224,7 +224,7 @@ public void run() {
 					log.debug("Attacking node " + node.getNodeName());
 					Scanner scanner = new Scanner(extension.getScannerParam(), 
 							extension.getModel().getOptionsParam().getConnectionParam(), 
-							Control.getSingleton().getPluginFactory().clone());
+							extension.getPolicyManager().getAttackScanPolicy());
 					scanner.setStartNode(node);
 					scanner.setScanChildren(false);
 					scanner.addScannerListener(this);

File: src/org/zaproxy/zap/extension/ascan/AttackScan.java
Patch:
@@ -30,8 +30,8 @@
  */
 public class AttackScan extends ActiveScan {
 
-	public AttackScan(String displayName, ScannerParam scannerParam, ConnectionParam param) {
-		super(displayName, scannerParam, param);
+	public AttackScan(String displayName, ScannerParam scannerParam, ConnectionParam param, ScanPolicy scanPolicy) {
+		super(displayName, scannerParam, param, scanPolicy);
 	}
 	
 	@Override

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -45,6 +45,7 @@
 // ZAP: 2014/05/26 Added listeners for contexts changed events.
 // ZAP: 2014/06/10 Added helper method for removing data for context and type
 // ZAP: 2014/07/15 Issue 1265: Context import and export
+// ZAP: 2014/11/18 Issue 1408: Extend the structural parameter handling to forms param
 
 package org.parosproxy.paros.model;
 

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2014/04/10 Allow to delete history ID to SiteNode map entries
 // ZAP: 2014/06/16 Issue 1227: Active scanner sends GET requests with content in request body
 // ZAP: 2014/09/22 Issue 1345: Support Attack mode
+// ZAP: 2014/11/18 Issue 1408: Extend the structural parameter handling to forms param
 
 package org.parosproxy.paros.model;
 

File: src/org/zaproxy/zap/model/ParameterParser.java
Patch:
@@ -34,6 +34,9 @@ public interface ParameterParser {
 	Map<String, String> parse(String paramStr);
 
 	List<String> getTreePath(URI uri) throws URIException;
+	
+	List<String> getTreePath(HttpMessage msg) throws URIException;
+
 
 	/**
 	 * Gets the path of the URI's ancestor found at the given depth, taking into account any context

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -422,7 +422,8 @@ private void notifyResponseListeners(HttpMessage msg) {
 		}
 	}
 	
-	private User getUser (HttpMessage msg) {
+	// ZAP: Changed visibility to public. Needed for authentication when running Zest script in scanner (Issue 1411)
+	public User getUser (HttpMessage msg) {
 		if (this.user != null) {
 			// If its set for the sender it overrides the message
 			return user;

File: src/org/zaproxy/zap/extension/ascan/ScanProgressDialog.java
Patch:
@@ -196,7 +196,7 @@ private JTable getMainPanel() {
     private void showProgress() {
         // Start panel data settings
     	HostProcess hp = getSelectedHostProcess();
-        if (scan.getHostProcesses() != null || hp != null) {
+        if (scan.getHostProcesses() != null && hp != null) {
 
             // Update the main table entries
             model.updateValues(scan, hp);

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -272,15 +272,15 @@ public void refreshTabViewMenus() {
 		ExtensionKeyboard extKey = (ExtensionKeyboard) 
 				Control.getSingleton().getExtensionLoader().getExtension(ExtensionKeyboard.NAME);
 		
-	    for (Component tab : getWorkbench().getTabbedSelect().getTabList()) {
+	    for (Component tab : getWorkbench().getTabbedSelect().getSortedTabList()) {
     		registerMenu(extKey, getWorkbench().getTabbedSelect(), tab);
 	    }
     	menuShowTabs.addSeparator();
-	    for (Component tab : getWorkbench().getTabbedWork().getTabList()) {
+	    for (Component tab : getWorkbench().getTabbedWork().getSortedTabList()) {
     		registerMenu(extKey, getWorkbench().getTabbedWork(), tab);
 	    }
     	menuShowTabs.addSeparator();
-	    for (Component tab : getWorkbench().getTabbedStatus().getTabList()) {
+	    for (Component tab : getWorkbench().getTabbedStatus().getSortedTabList()) {
     		registerMenu(extKey, getWorkbench().getTabbedStatus(), tab);
 	    }
 	}

File: src/org/zaproxy/zap/extension/api/ApiGeneratorUtils.java
Patch:
@@ -33,6 +33,7 @@
 import org.zaproxy.zap.extension.httpsessions.HttpSessionsAPI;
 import org.zaproxy.zap.extension.params.ParamsAPI;
 import org.zaproxy.zap.extension.pscan.PassiveScanAPI;
+import org.zaproxy.zap.extension.script.ScriptAPI;
 import org.zaproxy.zap.extension.search.SearchAPI;
 import org.zaproxy.zap.extension.sessions.SessionManagementAPI;
 import org.zaproxy.zap.extension.spider.SpiderAPI;
@@ -95,6 +96,8 @@ public static List<ApiImplementor> getAllImplementors() {
 		
 		imps.add(new ForcedUserAPI(null));
 
+		imps.add(new ScriptAPI(null));
+
 		return imps;
 	}
 }

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -56,6 +56,7 @@
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.ZAP;
+import org.zaproxy.zap.extension.api.API;
 
 public class ExtensionScript extends ExtensionAdaptor implements CommandLineListener {
 	
@@ -142,6 +143,8 @@ public void hook(ExtensionHook extensionHook) {
         	this.addWriter(new PrintWriter(System.out));
 		}
 
+        API.getInstance().registerApiImplementor(new ScriptAPI(this));
+
 	}
 	
 	private ProxyListenerScript getProxyListener() {

File: src/org/zaproxy/zap/extension/brk/BreakPanelToolbarFactory.java
Patch:
@@ -359,9 +359,9 @@ public ContinueButtonAction() {
         @Override
         public void actionPerformed(ActionEvent e) {
             setContinue(true);
-            if (mode == BreakpointsParam.BUTTON_MODE_SIMPLE) {
-            	setBreakAll(false);
-            }
+           	setBreakAll(false);
+           	setBreakRequest(false);
+           	setBreakResponse(false);
         }
     }
 

File: src/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -316,6 +316,6 @@ public void setScanId(int id) {
 
 	@Override
 	public int getScanId() {
-		return this.getScanId();
+		return this.getId();
 	}
 }

File: src/org/parosproxy/paros/core/scanner/MultipartParam.java
Patch:
@@ -30,14 +30,15 @@
  */
 public class MultipartParam {
 
-    private List<String> headers = new ArrayList<>();
+    private final List<String> headers = new ArrayList<>();
     private String name;
     private String fileName;
     private String content;
 
     /**
      * 
      * @param headerline 
+     * @throws java.io.IOException 
      */
     public void addHeader(String headerline) throws IOException {
         headers.add(headerline);

File: src/org/zaproxy/zap/extension/spider/SpiderDialog.java
Patch:
@@ -52,6 +52,7 @@ public class SpiderDialog extends StandardFieldsDialog {
     private static final String FIELD_POST_FORMS = "spider.custom.label.postForms"; 
     private static final String FIELD_PARSE_COMMENTS = "spider.custom.label.parseComments"; 
     private static final String FIELD_PARSE_ROBOTS = "spider.custom.label.parseRobots"; 
+    private static final String FIELD_PARSE_SITEMAP = "spider.custom.label.sitemap"; 
     private static final String FIELD_PARSE_SVN = "spider.custom.label.parseSvn"; 
     private static final String FIELD_PARSE_GIT = "spider.custom.label.parseGit"; 
     private static final String FIELD_HANDLE_ODATA = "spider.custom.label.handleOdata"; 
@@ -105,6 +106,7 @@ public void init(Target target) {
         this.addCheckBoxField(1, FIELD_POST_FORMS, getSpiderParam().isPostForm());
         this.addCheckBoxField(1, FIELD_PARSE_COMMENTS, getSpiderParam().isParseComments());
         this.addCheckBoxField(1, FIELD_PARSE_ROBOTS, getSpiderParam().isParseRobotsTxt());
+        this.addCheckBoxField(1, FIELD_PARSE_SITEMAP, getSpiderParam().isParseSitemapXml());
         this.addCheckBoxField(1, FIELD_PARSE_SVN, getSpiderParam().isParseSVNEntries());
         this.addCheckBoxField(1, FIELD_PARSE_GIT, getSpiderParam().isParseGit());
         this.addCheckBoxField(1, FIELD_HANDLE_ODATA, getSpiderParam().isHandleODataParametersVisited());
@@ -268,6 +270,7 @@ public void save() {
         	spiderParam.setPostForm(this.getBoolValue(FIELD_POST_FORMS));
         	spiderParam.setParseComments(this.getBoolValue(FIELD_PARSE_COMMENTS));
         	spiderParam.setParseRobotsTxt(this.getBoolValue(FIELD_PARSE_ROBOTS));
+        	spiderParam.setParseSitemapXml(this.getBoolValue(FIELD_PARSE_SITEMAP));
         	spiderParam.setParseSVNEntries(this.getBoolValue(FIELD_PARSE_SVN));
         	spiderParam.setParseGit(this.getBoolValue(FIELD_PARSE_GIT));
         	spiderParam.setHandleODataParametersVisited(this.getBoolValue(FIELD_HANDLE_ODATA));

File: src/org/zaproxy/zap/extension/spider/SpiderScan.java
Patch:
@@ -40,6 +40,7 @@
 import org.zaproxy.zap.model.ScanListenner2;
 import org.zaproxy.zap.model.Target;
 import org.zaproxy.zap.spider.SpiderListener;
+import org.zaproxy.zap.spider.SpiderParam;
 import org.zaproxy.zap.spider.filters.FetchFilter.FetchStatus;
 import org.zaproxy.zap.users.User;
 
@@ -79,7 +80,7 @@ private static enum State {
 	
 	private ScanListenner2 listener = null;
 
-	public SpiderScan(ExtensionSpider extension, Target target, User scanUser, int scanId) {
+	public SpiderScan(ExtensionSpider extension, SpiderParam spiderParams, Target target, User scanUser, int scanId) {
 		lock = new ReentrantLock();
 		this.scanId = scanId;
 
@@ -89,7 +90,7 @@ public SpiderScan(ExtensionSpider extension, Target target, User scanUser, int s
 
 		state = State.NOT_STARTED;
 
-		spiderThread = new SpiderThread(extension, "SpiderApi-" + scanId, this);
+		spiderThread = new SpiderThread(extension, spiderParams, "SpiderApi-" + scanId, this);
 
 		spiderThread.setStartNode(target.getStartNode());
 		spiderThread.setScanContext(target.getContext());

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -102,7 +102,7 @@ public class ScannerParam extends AbstractParam {
     private int threadPerHost = 1;
     private int delayInMs = 0;
     private int maxResultsToList = 1000;
-    private int maxScansInUI = 1000;
+    private int maxScansInUI = 5;
     private boolean handleAntiCSRFTokens = false;
     private boolean promptInAttackMode = true;
     private boolean rescanInAttackMode = true;

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -409,7 +409,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			ApiResponseList resultList = new ApiResponseList(name);
 			for (GenericScanner2 scan : controller.getAllScans()) {
 				Map<String, String> map = new HashMap<>();
-				map.put("id", Integer.toString(scan.getId()));
+				map.put("id", Integer.toString(scan.getScanId()));
 				map.put("progress", Integer.toString(scan.getProgress()));
 				map.put("state", ((ActiveScan)scan).getState().name());
 				resultList.addItem(new ApiResponseSet("scan", map));

File: src/org/zaproxy/zap/extension/ascan/CustomScanDialog.java
Patch:
@@ -152,7 +152,7 @@ public CustomScanDialog(ExtensionActiveScan ext, Frame owner, Dimension dim) {
             "ascan.custom.tab.tech",
             "ascan.custom.tab.policy"
         });
-        this.setAlwaysOnTop(true);
+        this.setModal(true);
         this.extension = ext;
 
         // The first time init to the default options set, after that keep own copies

File: src/org/zaproxy/zap/model/GenericScanner2.java
Patch:
@@ -22,9 +22,9 @@
 
 public interface GenericScanner2 extends Runnable {
 
-	void setId(int id);
+	void setScanId(int id);
 	
-	int getId();
+	int getScanId();
 	
 	void setDisplayName(String name);
 	

File: src/org/zaproxy/zap/view/NodeSelectDialog.java
Patch:
@@ -19,10 +19,10 @@
  */
 package org.zaproxy.zap.view;
 
-import java.awt.Frame;
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import java.awt.HeadlessException;
+import java.awt.Window;
 import java.util.ArrayList;
 
 import javax.swing.JButton;
@@ -73,8 +73,8 @@ public class NodeSelectDialog extends AbstractDialog {
      * @param arg1
      * @throws HeadlessException
      */
-    public NodeSelectDialog(Frame arg0) throws HeadlessException {
-        super(arg0, true);	// Modal, ie always on top
+    public NodeSelectDialog(Window parent) throws HeadlessException {
+        super(parent, true);	// Modal, ie always on top
         initialize();
     }
 

File: src/org/zaproxy/zap/view/StandardFieldsDialog.java
Patch:
@@ -53,8 +53,8 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.extension.AbstractDialog;
 import org.parosproxy.paros.model.SiteNode;
-import org.parosproxy.paros.view.AbstractFrame;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.model.Context;
 import org.zaproxy.zap.model.Target;
@@ -69,7 +69,7 @@
  * @author psiinon
  *
  */
-public abstract class StandardFieldsDialog extends AbstractFrame {
+public abstract class StandardFieldsDialog extends AbstractDialog {
 	/**
 	 * TODO
 	 * 		File selector field

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -126,8 +126,6 @@ public void actionPerformed(ActionEvent e) {
 	public JButton getNewScanButton() {
 		if (scanButton == null) {
 			scanButton = new JButton(Constant.messages.getString("ascan.toolbar.button.new"));
-			
-			scanButton.setToolTipText(Constant.messages.getString("menu.analyse.scanPolicy"));
 			scanButton.setIcon(new ImageIcon(ActiveScanPanel.class.getResource("/resource/icon/16/093.png")));
 			scanButton.addActionListener(new ActionListener () {
 				@Override

File: src/org/zaproxy/zap/extension/autoupdate/CheckForUpdateCallback.java
Patch:
@@ -25,4 +25,6 @@
 public interface CheckForUpdateCallback {
 
 	void gotLatestData (AddOnCollection aoc);
+	
+	void insecureUrl(String url, Exception cause);
 }

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -339,7 +339,7 @@ public <T> List<T> getImplementors (AddOn ao, String packageName, Class<T> class
                 }
             } catch (Throwable e) {
             	// Often not an error
-            	logger.debug(e.getMessage(), e);
+            	logger.debug(e.getMessage());
             }
         }
         

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -88,7 +88,7 @@ protected void parse() {
 	    // use temp variable to check.  Exception will be flagged if any error.
       	showTabNames = getConfig().getBoolean(SHOW_TEXT_ICONS, true);
 	    processImages = getConfig().getInt(PROCESS_IMAGES, 0);
-	    configLocale = getConfig().getString(LOCALE);	// No default
+	    configLocale = getConfig().getString(LOCALE, null);	// No default
 	    locale = getConfig().getString(LOCALE, DEFAULT_LOCALE);
 	    displayOption = getConfig().getInt(DISPLAY_OPTION, 0);
 	    brkPanelViewOption = getConfig().getInt(BRK_PANEL_VIEW_OPTION, 0);

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -268,7 +268,7 @@ private boolean isContainsNodesInContext(SiteNode node) {
 		Enumeration<SiteNode> en = node.children();
 		while (en.hasMoreElements()) {
 			SiteNode sn = en.nextElement();
-			if (isInContext(sn)) {
+			if (isContainsNodesInContext(sn)) {
 				return true;
 			}
 		}

File: src/org/zaproxy/zap/extension/spider/ExtensionSpider.java
Patch:
@@ -41,14 +41,14 @@
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.api.API;
-import org.zaproxy.zap.extension.ascan.ActiveScanPanel;
 import org.zaproxy.zap.extension.help.ExtensionHelp;
 import org.zaproxy.zap.model.Context;
 import org.zaproxy.zap.spider.SpiderParam;
 import org.zaproxy.zap.spider.filters.FetchFilter;
 import org.zaproxy.zap.spider.filters.ParseFilter;
 import org.zaproxy.zap.spider.parser.SpiderParser;
 import org.zaproxy.zap.users.User;
+import org.zaproxy.zap.view.ScanPanel;
 import org.zaproxy.zap.view.SiteMapListener;
 import org.zaproxy.zap.view.SiteMapTreeCellRenderer;
 
@@ -361,7 +361,7 @@ public void startScanAllInScope() {
 	public void startScan(SiteNode startNode) {
 		try {
 			// Add to sites if not already present - required for quick start tab
-			this.getSpiderPanel().addSite(ActiveScanPanel.cleanSiteName(startNode, true), true);
+			this.getSpiderPanel().addSite(ScanPanel.cleanSiteName(startNode, true), true);
 		} catch (Exception e) {
 			// Ignore
 			log.debug(e.getMessage(), e);
@@ -372,7 +372,7 @@ public void startScan(SiteNode startNode) {
 
 	public void stopScan(SiteNode startNode) {
 		try {
-			this.stopScan(ActiveScanPanel.cleanSiteName(startNode, true));
+			this.stopScan(ScanPanel.cleanSiteName(startNode, true));
 		} catch (Exception e) {
 			log.error(e.getMessage(), e);
 		}

File: src/org/zaproxy/zap/view/MainToolbarPanel.java
Patch:
@@ -384,9 +384,9 @@ private JToggleButton getShowTabIconNames() {
 		if (btnShowTabIconNames == null) {
 			btnShowTabIconNames = new ZapToggleButton();
 			btnShowTabIconNames.setIcon(new ImageIcon(MainToolbarPanel.class.getResource("/resource/icon/ui_tab_icon.png")));
-			btnShowTabIconNames.setToolTipText(Constant.messages.getString("view.toolbar.showIcons"));
+			btnShowTabIconNames.setToolTipText(Constant.messages.getString("view.toolbar.showNames"));
 			btnShowTabIconNames.setSelectedIcon(new ImageIcon(MainToolbarPanel.class.getResource("/resource/icon/ui_tab_text.png")));
-			btnShowTabIconNames.setSelectedToolTipText(Constant.messages.getString("view.toolbar.showNames"));
+			btnShowTabIconNames.setSelectedToolTipText(Constant.messages.getString("view.toolbar.showIcons"));
 		  	setShowTabIconNames(Model.getSingleton().getOptionsParam().getViewParam().getShowTabNames());
 			
 			btnShowTabIconNames.addActionListener(new java.awt.event.ActionListener() {

File: src/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -49,6 +49,7 @@
 // ZAP: 2014/08/14 Catch Exceptions thrown by extensions when stopping them
 // ZAP: 2014/08/14 Issue 1309: NullPointerExceptions during a failed uninstallation of an add-on
 // ZAP: 2014/10/07 Issue 1357: Hide unused tabs
+// ZAP: 2014/10/09 Issue 1359: Added info logging for splash screen
 
 package org.parosproxy.paros.extension;
 
@@ -563,6 +564,7 @@ private void hookAllExtension() {
         for (int i=0; i<getExtensionCount(); i++) {
             try {
 				Extension ext = getExtension(i);
+				logger.info("Initializing " + ext.getDescription());
 				extHook = new ExtensionHook(model, view);
 				ext.hook(extHook);
 				extensionHooks.put(ext, extHook);

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -242,17 +242,17 @@ private static void installAddOnFiles(AddOnClassLoader addOnClassLoader, AddOn a
         }
         for (String name : fileNames) {
             File outfile = new File(Constant.getZapHome(), name);
-            logger.debug("Install file: " + name);
 
             if (!overwrite && outfile.exists()) {
-                logger.debug("Ignoring, file already exists.");
+                // logger.debug("Ignoring, file already exists.");
                 continue;
             }
             if (!outfile.getParentFile().exists() && !outfile.getParentFile().mkdirs()) {
                 logger.error("Failed to create directories for: " + outfile.getAbsolutePath());
                 continue;
             }
 
+            logger.debug("Installing file: " + name);
             URL fileURL = addOnClassLoader.findResource(name);
             if (fileURL == null) {
                 logger.error("File not found on add-on package: " + name);

File: src/org/zaproxy/zap/control/ExtensionFactory.java
Patch:
@@ -72,6 +72,7 @@ public static AddOnLoader getAddOnLoader() {
     }
 
     public static synchronized void loadAllExtension(ExtensionLoader extensionLoader, Configuration config) {
+    	log.info("Loading extensions");
        	List<Extension> listExts = getAddOnLoader().getImplementors("org.zaproxy.zap.extension", Extension.class);
 		listExts.addAll(getAddOnLoader().getImplementors("org.parosproxy.paros.extension", Extension.class));
 
@@ -135,6 +136,7 @@ public static synchronized void loadAllExtension(ExtensionLoader extensionLoader
             	loadMessagesAndAddExtension(extensionLoader, ext);
             }
         }
+    	log.info("Extensions loaded");
     }
 
     /**

File: src/org/zaproxy/zap/view/TabbedPanel2.java
Patch:
@@ -146,7 +146,6 @@ public void setVisible(Component c, boolean visible) {
 			remove(c);
 			this.removedTabList.add(c);
 		}
-		c.setVisible(visible);
 	}
 
 	@Override

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2013/12/13 Added support for optional names in tabs.
 // ZAP: 2014/03/23 Issue 589: Move Reveal extension to ZAP extensions project
 // ZAP: 2014/04/25 Issue 642: Add timestamps to Output tab(s)
+// ZAP: 2014/10/07 Issue 1357: Hide unused tabs
 
 package org.parosproxy.paros.extension.option;
 
@@ -57,7 +58,7 @@ public class OptionsParamView extends AbstractParam {
 	public static final String ASKONEXIT_OPTION = "view.askOnExit";
 	public static final String WARN_ON_TAB_DOUBLE_CLICK_OPTION = "view.warnOnTabDoubleClick";
 	public static final String MODE_OPTION = "view.mode";
-	public static final String TAB_OPTION = "view.tab";
+	public static final String TAB_PIN_OPTION = "view.tab.pin";
 	public static final String OUTPUT_TAB_TIMESTAMPING_OPTION = "view.outputTabsTimeStampsOption"; 
 	public static final String OUTPUT_TAB_TIMESTAMP_FORMAT = "view.outputTabsTimeStampsFormat"; 
 

File: src/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2013/11/16 Issue 890: Allow to clear "Output" tab
 // ZAP: 2014/01/28 Issue 207: Support keyboard shortcuts 
 // ZAP: 2014/04/25 Issue 642: Add timestamps to Output tab(s)
+// ZAP: 2014/10/07 Issue 1357: Hide unused tabs
 
 package org.parosproxy.paros.view;
 
@@ -86,7 +87,7 @@ private void initialize() {
 		this.setMnemonic(Constant.messages.getChar("output.panel.mnemonic"));
 
         this.add(getMainPanel(), BorderLayout.CENTER);
-			
+        this.setShowByDefault(true);
 	}
 
     private JPanel getMainPanel() {

File: src/org/parosproxy/paros/view/SiteMapPanel.java
Patch:
@@ -30,6 +30,7 @@
 // cache the path
 // ZAP: 2014/03/23 Issue 609: Provide a common interface to query the state and 
 // access the data (HttpMessage and HistoryReference) displayed in the tabs
+// ZAP: 2014/10/07 Issue 1357: Hide unused tabs
 
 package org.parosproxy.paros.view;
 
@@ -98,6 +99,7 @@ private View getView() {
 	 * This method initializes this
 	 */
 	private  void initialize() {
+		this.setHideable(false);
 	    this.setIcon(new ImageIcon(View.class.getResource("/resource/icon/16/094.png")));
 	    this.setName(Constant.messages.getString("sites.panel.title"));
 		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, Event.CTRL_MASK | Event.SHIFT_MASK, false));

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -153,7 +153,7 @@ private void initialize() {
 			
 		this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, Event.CTRL_MASK | Event.SHIFT_MASK, false));
 		this.setMnemonic(Constant.messages.getChar("alerts.panel.mnemonic"));
-
+		this.setShowByDefault(true);
 	}
 	
 	private javax.swing.JPanel getPanelCommand() {

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelRequest.java
Patch:
@@ -40,6 +40,7 @@ public HttpPanelRequest(boolean isEditable, String configurationKey) {
         super(isEditable, configurationKey + REQUEST_KEY);
 
         HttpPanelManager.getInstance().addRequestPanel(this);
+        this.setHideable(false);
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelResponse.java
Patch:
@@ -30,6 +30,7 @@ public HttpPanelResponse(boolean isEditable, String configurationKey) {
         super(isEditable, configurationKey + RESPONSE_KEY);
 
         HttpPanelManager.getInstance().addResponsePanel(this);
+        this.setHideable(false);
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/search/SearchPanel.java
Patch:
@@ -140,6 +140,7 @@ public void valueChanged(ListSelectionEvent evt) {
         this.setName(Constant.messages.getString("search.panel.title"));
 		this.setIcon(new ImageIcon(SearchPanel.class.getResource("/resource/icon/16/049.png")));	// 'magnifying glass' icon
         this.add(getPanelCommand(), getPanelCommand().getName());
+        this.setShowByDefault(true);
 	}
 	
 	/**

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseHeaderByteHttpPanelViewModel.java
Patch:
@@ -32,7 +32,7 @@ public byte[] getData() {
 		if (httpMessage == null || httpMessage.getResponseHeader().isEmpty()) {
 			return new byte[0];
 		}
-		
+
 		return httpMessage.getResponseHeader().toString().getBytes();
 	}
 

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -48,6 +48,7 @@
 // ZAP: 2014/02/27 Issue 1055: Load extensions before plugins
 // ZAP: 2014/05/20 Issue 1114: core.newSession doesn't clear Sites
 // ZAP: 2014/05/20 Issue 1191: Cmdline session params have no effect
+// ZAP: 2014/09/22 Issue 1345: Support Attack mode
 
 package org.parosproxy.paros.control;
 
@@ -78,7 +79,7 @@
  */
 public class Control extends AbstractControl implements SessionListener {
 
-	public enum Mode {safe, protect, standard};
+	public enum Mode {safe, protect, standard, attack};
 	
     private static Logger log = Logger.getLogger(Control.class);
 
@@ -246,8 +247,6 @@ public static Control getSingleton() {
     public static void initSingletonWithView(ControlOverrides overrides) {
         control = new Control(Model.getSingleton(), View.getSingleton());
         control.init(overrides);
-        // Initialise the mode
-        control.setMode(control.getMode());
     }
     
     public static void initSingletonWithoutView(ControlOverrides overrides) {

File: src/org/zaproxy/zap/view/MainToolbarPanel.java
Patch:
@@ -61,7 +61,6 @@ public class MainToolbarPanel extends JPanel {
 	private JButton btnOptions = null;
 
 	private ButtonGroup expandButtons;
-  	private ButtonGroup tabNameButtons;
 	private JToggleButton btnExpandSites = null;
 	private JToggleButton btnExpandReports = null;
 	private JToggleButton btnExpandFull = null;
@@ -81,7 +80,6 @@ public void initialise () {
 		this.setBorder(BorderFactory.createEtchedBorder());
 
 		expandButtons = new ButtonGroup();
-    tabNameButtons = new ButtonGroup();
 
 		GridBagConstraints gridBagConstraints1 = new GridBagConstraints();
 		GridBagConstraints gridBagConstraints2 = new GridBagConstraints();
@@ -171,6 +169,7 @@ private JComboBox<String> getModeSelect() {
 			modeSelect.addItem(Constant.messages.getString("view.toolbar.mode.safe.select"));
 			modeSelect.addItem(Constant.messages.getString("view.toolbar.mode.protect.select"));
 			modeSelect.addItem(Constant.messages.getString("view.toolbar.mode.standard.select"));
+			modeSelect.addItem(Constant.messages.getString("view.toolbar.mode.attack.select"));
 			
 			modeSelect.setToolTipText(Constant.messages.getString("view.toolbar.mode.tooltip"));
 			// Increase the time the tooltip is displayed, to give people a chance to read it!
@@ -183,6 +182,7 @@ private JComboBox<String> getModeSelect() {
 				case safe:		modeSelect.setSelectedIndex(0); break;
 				case protect:	modeSelect.setSelectedIndex(1); break;
 				case standard:	modeSelect.setSelectedIndex(2); break;
+				case attack:	modeSelect.setSelectedIndex(3); break;
 			}
 
 			modeSelect.addActionListener(new java.awt.event.ActionListener() { 
@@ -193,6 +193,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 						case 0:	mode = Mode.safe;	break;
 						case 1:	mode = Mode.protect;	break;
 						case 2:	mode = Mode.standard;	break;
+						case 3: mode = Mode.attack;	break;
 						default: return;	// Not recognised
 					}
 					Control.getSingleton().setMode(mode);

File: src/org/parosproxy/paros/core/scanner/VariantUserDefined.java
Patch:
@@ -71,7 +71,7 @@ public List<NameValuePair> getParamList() {
 	    		if (isInHeader(this.injectionPoints[i]) || isInBody(this.injectionPoints[i]) ) {
 	    			list.add(new NameValuePair(NameValuePair.TYPE_UNDEFINED, "", "", i));
 	    		} else {
-	    			logger.warn("Invalid injection point: " + this.injectionPoints[i]);
+	    			logger.warn("Invalid injection point: " + java.util.Arrays.toString(this.injectionPoints[i]));
 	    		}
 	    	}
     	}

File: src/org/parosproxy/paros/core/scanner/VariantUserDefined.java
Patch:
@@ -71,7 +71,7 @@ public List<NameValuePair> getParamList() {
 	    		if (isInHeader(this.injectionPoints[i]) || isInBody(this.injectionPoints[i]) ) {
 	    			list.add(new NameValuePair(NameValuePair.TYPE_UNDEFINED, "", "", i));
 	    		} else {
-	    			logger.equals("Invalid injection point: " + this.injectionPoints[i]);
+	    			logger.warn("Invalid injection point: " + this.injectionPoints[i]);
 	    		}
 	    	}
     	}

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -25,6 +25,7 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -188,7 +189,7 @@ public boolean requestHasToken(HttpMessage msg) {
 	}
 	
 	public boolean requestHasToken(String reqBody) {
-		Set<String> tokens = valueToToken.keySet();
+		Set<String> tokens = Collections.unmodifiableSet(valueToToken.keySet());
 		for (String token : tokens) {
 			if (reqBody.indexOf(token) >= 0) {
 				return true;
@@ -203,7 +204,7 @@ public List<AntiCsrfToken> getTokens(HttpMessage msg) {
 	
 	private List<AntiCsrfToken> getTokens(String reqBody, String targetUrl) {
 		List<AntiCsrfToken> tokens = new ArrayList<>();
-		Set<String> values = valueToToken.keySet();
+		Set<String> values = Collections.unmodifiableSet(valueToToken.keySet());
 		for (String value : values) {
 			if (reqBody.indexOf(value) >= 0) {
 				AntiCsrfToken token = valueToToken.get(value).clone();

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -39,7 +39,7 @@ public class LocaleUtils {
 	 * @return The list of available translations, ZAP provides
 	 */
 	public static List<String> getAvailableLocales() {
-		File dir = new File(Constant.getZapInstall() + Constant.LANG_DIR));
+		File dir = new File(Constant.getZapInstall() + Constant.LANG_DIR);
 		FilenameFilter filter = new MessagesPropertiesFilenameFilter();
 		String[] files = dir.list(filter);
 

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -39,7 +39,7 @@ public class LocaleUtils {
 	 * @return The list of available translations, ZAP provides
 	 */
 	public static List<String> getAvailableLocales() {
-		File dir = new File(Constant.getZapInstall() + "lang");
+		File dir = new File(Constant.getZapInstall() + Constant.LANG_DIR));
 		FilenameFilter filter = new MessagesPropertiesFilenameFilter();
 		String[] files = dir.list(filter);
 

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -534,7 +534,7 @@ public void deleteHistoryReferenceAlerts(HistoryReference hRef) {
             this.recalcAlerts();
         }
 
-        hrefs.remove(hRef);
+        hrefs.remove(Integer.valueOf(hRef.getHistoryId()));
     }
     
     /**

File: src/org/zaproxy/zap/extension/log4j/ZapOutputWriter.java
Patch:
@@ -49,8 +49,9 @@ public void append(LoggingEvent event) {
 				scanStatus.incScanCount();
 			}
 			
-			if (event.getRenderedMessage()!=null) {
-				View.getSingleton().getOutputPanel().append(new StringBuilder(event.getRenderedMessage()).append(NEWLINE).toString());
+			String renderedmessage=event.getRenderedMessage();
+			if (renderedmessage!=null) {
+				View.getSingleton().getOutputPanel().append(new StringBuilder(renderedmessage).append(NEWLINE).toString());
 			}
 
 			String [] tsr = event.getThrowableStrRep();			

File: src/org/zaproxy/clientapi/core/ClientApi.java
Patch:
@@ -48,7 +48,6 @@
 import org.zaproxy.clientapi.core.Alert.Risk;
 import org.zaproxy.clientapi.gen.Acsrf;
 import org.zaproxy.clientapi.gen.Ascan;
-import org.zaproxy.clientapi.gen.Auth;
 import org.zaproxy.clientapi.gen.Autoupdate;
 import org.zaproxy.clientapi.gen.Break;
 import org.zaproxy.clientapi.gen.Context;
@@ -67,7 +66,6 @@ public class ClientApi {
 	// Note that any new API implementations added have to be added here manually
 	public Acsrf acsrf = new Acsrf(this);
 	public Ascan ascan = new Ascan(this);
-	public Auth auth = new Auth(this);
 	public Autoupdate autoupdate = new Autoupdate(this);
 	public Core core = new Core(this);
 	public HttpSessions httpSessions = new HttpSessions(this);

File: src/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -176,7 +176,7 @@ private void showPopupMenuIfTriggered(java.awt.event.MouseEvent e) {
 	 */
 	@Deprecated
 	public void appendDirty(final String msg) {
-		append(msg);
+		doAppend(msg); //Mimic old behavior
 	}
 
 	public void append(final String msg) {

File: src/org/parosproxy/paros/extension/report/ExtensionReport.java
Patch:
@@ -39,7 +39,6 @@
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.zaproxy.zap.view.ZapMenuItem;
-import org.parosproxy.paros.extension.report.ReportLastScan;
 
 public class ExtensionReport extends ExtensionAdaptor implements CommandLineListener {
 
@@ -98,7 +97,7 @@ private ZapMenuItem getMenuItemHtmlReport() {
 				public void actionPerformed(java.awt.event.ActionEvent e) {    
 
 				    ReportLastScan report = new ReportLastScan();
-				    report.generateReport(getView(), getModel(), ReportLastScan.reportTypes.HTML);
+				    report.generateReport(getView(), getModel(), ReportLastScan.ReportType.HTML);
 	                
 				}
 			});
@@ -116,7 +115,7 @@ private ZapMenuItem getMenuItemXmlReport() {
 				public void actionPerformed(java.awt.event.ActionEvent e) {    
 
 				    ReportLastScan report = new ReportLastScan();
-				    report.generateReport(getView(), getModel(), ReportLastScan.reportTypes.XML);
+				    report.generateReport(getView(), getModel(), ReportLastScan.ReportType.XML);
 	                
 				}
 			});

File: src/org/zaproxy/zap/view/widgets/WritableFileChooser.java
Patch:
@@ -1,6 +1,7 @@
 package org.zaproxy.zap.view.widgets;
 
 import java.io.File;
+import java.text.MessageFormat;
 
 import javax.swing.JFileChooser;
 import javax.swing.JOptionPane;
@@ -26,7 +27,8 @@ public void approveSelection() {
 
 		if (!java.nio.file.Files.isWritable(selectedFile.getParentFile().toPath())) {
 			JOptionPane.showMessageDialog(this,
-					Constant.messages.getString("report.write.permission.dialog.message"),
+					MessageFormat.format(Constant.messages.getString("report.write.permission.dialog.message"),
+		                	selectedFile.getAbsolutePath()),
 					Constant.messages.getString("report.write.permission.dialog.title"),
 					JOptionPane.ERROR_MESSAGE);
 			return;
@@ -41,7 +43,6 @@ public void approveSelection() {
 				super.approveSelection();
 				return;
 			case JOptionPane.NO_OPTION:
-				return;
 			case JOptionPane.CLOSED_OPTION:
 				return;
 			}

File: src/org/zaproxy/zap/view/panels/AbstractContextSelectToolbarStatusPanel.java
Patch:
@@ -233,6 +233,7 @@ public void contextAdded(Context context) {
 	public void contextsChanged() {
 		log.debug("Contexts changed...");
 		contextSelectBox.reloadContexts(false);
+		contextSelectBox.setSelectedIndex(-1);
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -199,7 +199,7 @@ public void notifyNewMessage(final HttpMessage msg) {
             HistoryReference hRef = msg.getHistoryRef();
             if (hRef == null) {
                 try {
-                    hRef = new HistoryReference(Model.getSingleton().getSession(), HistoryReference.TYPE_TEMPORARY, msg);
+                    hRef = new HistoryReference(Model.getSingleton().getSession(), HistoryReference.TYPE_SCANNER_TEMPORARY, msg);
                     // If an alert is raised because of the HttpMessage msg a new HistoryReference must be created
                     // (because hRef is temporary), and the condition to create it is when the HistoryReference of the
                     // Alert "retrieved" through the HttpMessage is null. So it must be set to null.

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -42,6 +42,7 @@
 // ZAP: 2014/06/23 Issue 1241: Active scanner might not report finished state when using host scanners
 // ZAP: 2014/06/26 Added the possibility to evaluate the current plugin/process progress
 // ZAP: 2014/07/07 Issue 389: Enable technology scope for scanners
+// ZAP: 2014/08/14 Issue 1291: 407 Proxy Authentication Required while active scanning
 
 package org.parosproxy.paros.core.scanner;
 
@@ -111,6 +112,7 @@ public HostProcess(String hostAndPort, Scanner parentScanner,
         this.pluginFactory = pluginFactory;
         httpSender = new HttpSender(connectionParam, true, HttpSender.ACTIVE_SCANNER_INITIATOR);
         httpSender.setUser(this.user);
+        httpSender.setRemoveUserDefinedAuthHeaders(true);
         
         int maxNumberOfThreads;
         if (scannerParam.getHandleAntiCSRFTokens()) {

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzProcessFactory.java
Patch:
@@ -54,6 +54,7 @@ public HttpFuzzProcessFactory(FuzzableMessage fuzzableMessage, AntiCsrfToken acs
         
         httpSender = new HttpSender(Model.getSingleton().getOptionsParam().getConnectionParam(), true, HttpSender.FUZZER_INITIATOR);
         httpSender.setFollowRedirect(followRedirects);
+        httpSender.setRemoveUserDefinedAuthHeaders(true);
     }
     
     @Override

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzProcessFactory.java
Patch:
@@ -38,6 +38,7 @@ public HttpFuzzProcessFactory(HttpMessage fuzzableMessage,
 		httpSender = new HttpSender(Model.getSingleton().getOptionsParam()
 				.getConnectionParam(), true, HttpSender.FUZZER_INITIATOR);
 		httpSender.setFollowRedirect(followRedirects);
+		httpSender.setRemoveUserDefinedAuthHeaders(true);
 	}
 
 	@Override

File: src/org/parosproxy/paros/db/TableAlert.java
Patch:
@@ -29,6 +29,8 @@
 // ZAP: 2014/03/23 Changed to use try-with-resource statements.
 // ZAP: 2014/05/23 Issue 1209: Reliability becomes Confidence and add levels
 // ZAP: 2014/06/16 Issue 990: Allow to delete alerts through the API
+// ZAP: 2014/08/14 Issue 1283: SQLDataException: data exception: string data,
+// right truncation while writing an alert to DB
 
 package org.parosproxy.paros.db;
 
@@ -143,7 +145,7 @@ private void updateTable(Connection connection) throws SQLException {
         
         if (!DbUtils.hasColumn(connection, TABLE_NAME, EVIDENCE)) {
         	// Evidence, cweId and wascId all added at the same time
-            DbUtils.executeAndClose(connection.prepareStatement("ALTER TABLE "+TABLE_NAME+" ADD COLUMN "+EVIDENCE+" VARCHAR(32768) DEFAULT ''"));
+            DbUtils.executeAndClose(connection.prepareStatement("ALTER TABLE "+TABLE_NAME+" ADD COLUMN "+EVIDENCE+" VARCHAR(16777216) DEFAULT ''"));
             DbUtils.executeAndClose(connection.prepareStatement("ALTER TABLE "+TABLE_NAME+" ADD COLUMN "+CWEID+" INT DEFAULT -1"));
             DbUtils.executeAndClose(connection.prepareStatement("ALTER TABLE "+TABLE_NAME+" ADD COLUMN "+WASCID+" INT DEFAULT -1"));
         }

File: src/org/parosproxy/paros/control/AbstractControl.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2014/08/14 Issue 1282: Extension#stop() is never called before destroy()
 package org.parosproxy.paros.control;
 
 import org.parosproxy.paros.extension.ExtensionLoader;
@@ -67,6 +68,7 @@ protected void addCommonExtension() {
     }
     
     public void shutdown(boolean compact) {
+	    getExtensionLoader().stopAllExtension();
 	    getExtensionLoader().destroyAllExtension();
 		model.getDb().close(compact);
 		

File: src/org/parosproxy/paros/network/SSLConnector.java
Patch:
@@ -27,6 +27,7 @@
 // ZAP: 2014/03/23 Issue 951: TLS' versions 1.1 and 1.2 not enabled by default
 // ZAP: 2014/07/17 Issue 704: ZAP Error: handshake alert: unrecognized_name
 // ZAP: 2014/08/14 Issue 1184: Improve support for IBM JDK
+// ZAP: 2014/08/14 Issue 1274: ZAP Error [javax.net.ssl.SSLException]: Unsupported record version SSLv2Hello
 
 package org.parosproxy.paros.network;
 
@@ -77,6 +78,7 @@ public class SSLConnector implements SecureProtocolSocketFactory {
 
 	private static final String CONTENTS_UNRECOGNIZED_NAME_EXCEPTION = "unrecognized_name";
 
+	public static final String SECURITY_PROTOCOL_SSL_V2_HELLO = "SSLv2Hello";
 	public static final String SECURITY_PROTOCOL_SSL_V3 = "SSLv3";
 	public static final String SECURITY_PROTOCOL_TLS_V1 = "TLSv1";
 	public static final String SECURITY_PROTOCOL_TLS_V1_1 = "TLSv1.1";

File: src/org/zaproxy/zap/extension/multiFuzz/FuzzerThread.java
Patch:
@@ -49,8 +49,8 @@ public class FuzzerThread<PL extends Payload, M extends Message, L extends FuzzL
 	FuzzProcessFactory<P, PL, L> fuzzProcessFactory;
 	private ThreadPoolExe threadPool;
 
-	private boolean pause = false;
-	private boolean isStop = false;
+	private volatile boolean pause = false;
+	private volatile boolean isStop = false;
 
 	private int comb_count = 0;
 	private int threadCount = 1;

File: src/org/parosproxy/paros/network/SSLConnector.java
Patch:
@@ -26,6 +26,7 @@
 // ZAP: 2014/03/23 Tidy up, removed and deprecated unused methods other minor changes
 // ZAP: 2014/03/23 Issue 951: TLS' versions 1.1 and 1.2 not enabled by default
 // ZAP: 2014/07/17 Issue 704: ZAP Error: handshake alert: unrecognized_name
+// ZAP: 2014/08/14 Issue 1184: Improve support for IBM JDK
 
 package org.parosproxy.paros.network;
 
@@ -500,7 +501,8 @@ public SSLSocketFactory getTunnelSSLSocketFactory(String hostname) {
 		//	KeyStore ks;
 		try {
 			SSLContext ctx = SSLContext.getInstance(SSL);
-			KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
+			// Normally "SunX509", "IbmX509"...
+			KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
 
 			SslCertificateService scs = CachedSslCertifificateServiceImpl.getService();
 			KeyStore ks = scs.createCertForHost(hostname);

File: test/ch/csnc/extension/httpclient/SSLContextManagerUnitTest.java
Patch:
@@ -47,12 +47,12 @@ public void shouldReturnAvailabilityOfMsksProvider() {
 	}
 	
 	@Test
-	public void shouldAlwaysReturnTrueForOtherThanPKCS11AndMsksProvider() {
+	public void shouldAlwaysReturnFalseForOtherThanPKCS11AndMsksProvider() {
 		// Given
 		// When
 		boolean result = sslContextManager.isProviderAvailable("thisProviderDoesNotExist");
 		// Then
-		assertThat(result, is(true));
+		assertThat(result, is(false));
 	}
 	
 

File: src/org/parosproxy/paros/extension/CommandLineListener.java
Patch:
@@ -36,10 +36,10 @@ public interface CommandLineListener {
     void execute(CommandLineArgument[] args);
     
     /**
-     * Handle the specified file (in whiatever way is appropriate).
+     * Handle the specified file (in whatever way is appropriate).
      * This will only be called for files specified on the command line without switches 
      * and which match one of the extensions returned by getHandledExtensions() 
-     * @param fileName
+     * @param file
      * @return true if the listener handled the file, false otherwise
      */
     boolean handleFile (File file);

File: src/org/parosproxy/paros/security/SslCertificateServiceImpl.java
Patch:
@@ -69,7 +69,7 @@
  * At least, Firefox v3.x does.
  *
  * @author MaWoKi
- * @see AttrCertExample how to manage CAs and stuff
+ * @see org.bouncycastle.x509.examples.AttrCertExample how to manage CAs and stuff
  * @see CachedSslCertifificateServiceImpl for a cached SslCertificateService
  */
 public final class SslCertificateServiceImpl implements SslCertificateService {

File: src/org/parosproxy/paros/view/MainPopupMenu.java
Patch:
@@ -159,7 +159,7 @@ private synchronized void showImpl(PopupMenuInvokerWrapper invoker, final int x,
 	 * compatibility, so to avoid hiding future deprecations of other methods/classes this method was added to suppress the
 	 * deprecation warning locally (instead of the whole method {@code showImpl(PopupMenuInvokerWrapper, int, int))}).
 	 * 
-	 * @see ExtensionPopupMenu#preprepareShow()
+	 * @see ExtensionPopupMenu#prepareShow()
 	 */
 	@SuppressWarnings({"deprecation", "javadoc"})
 	private static void prepareShow(ExtensionPopupMenu popupMenu) {

File: src/org/zaproxy/zap/authentication/AuthenticationCredentials.java
Patch:
@@ -33,7 +33,6 @@
  * username.
  * </p>
  * 
- * @param <T> the type of the corresponding authentication method
  */
 public interface AuthenticationCredentials {
 

File: src/org/zaproxy/zap/authentication/AuthenticationMethodType.java
Patch:
@@ -88,7 +88,7 @@ public abstract class AuthenticationMethodType {
 	 * Checks if the corresponding {@link AuthenticationMethod} has an options panel that can be
 	 * used for configuration.
 	 * 
-	 * @see AuthenticationMethodFactory#buildOptionsPanel(int);
+	 * @see #buildOptionsPanel(Context)
 	 * 
 	 * @return true, if it needs one
 	 */
@@ -136,7 +136,7 @@ public abstract AbstractCredentialsOptionsPanel<? extends AuthenticationCredenti
 	 * Authentication method type.
 	 * 
 	 * @param session the session
-	 * @param context the context
+	 * @param contextId the ID of the context
 	 * @return the authentication method
 	 */
 	public abstract AuthenticationMethod loadMethodFromSession(Session session, int contextId)

File: src/org/zaproxy/zap/authentication/HttpAuthenticationMethodType.java
Patch:
@@ -42,7 +42,7 @@
  * The implementation for an {@link AuthenticationMethodType} where the Users are authenticated
  * through HTTP Authentication.
  * 
- * @see {@link http://www.w3.org/Protocols/HTTP/1.0/spec.html#AA}
+ * @see <a href="http://www.w3.org/Protocols/HTTP/1.0/spec.html#AA">HTTP/1.0 - Access Authentication</a>
  */
 public class HttpAuthenticationMethodType extends AuthenticationMethodType {
 

File: src/org/zaproxy/zap/extension/help/ZapTocMerger.java
Patch:
@@ -245,7 +245,7 @@ public static void mergeNodeChildren(TreeNode node) {
     /**
      * The {@code ForceMergeRequirement} class contains the requirements to do a forced merging.
      * 
-     * @see ZapTocMerger.ForceMergeRequirement#ForceMergeRequirement(int, String)
+     * @see ForceMergeRequirement#ForceMergeRequirement(int, String)
      */
     public static final class ForceMergeRequirement {
 

File: src/org/zaproxy/zap/spider/SpiderListener.java
Patch:
@@ -25,7 +25,7 @@
  * The listener interface for receiving spider related events. The class that is interested in
  * processing a spider event implements this interface, and the object created with that class is
  * registered with a component using the component's
- * <code>addSpiderListener<code> method. When  the spider event occurs, that object's appropriate
+ * <code>addSpiderListener</code> method. When  the spider event occurs, that object's appropriate
  * method is invoked.
  */
 public interface SpiderListener {

File: src/org/zaproxy/zap/utils/HirshbergMatcher.java
Patch:
@@ -26,7 +26,8 @@
  * or the similarity ratio between two strings.
  * This implementation is using Hirschber's algorithm B and algorithm C.
  *
- * @see http://code.google.com/p/algorithm800/source/browse/trunk/src/Hirschberg.java
+ * @see <a href="http://code.google.com/p/algorithm800/source/browse/trunk/src/Hirschberg.java">Hirschberg&apos;s algorithm
+ *      implementation of project algorithm800</a>
  *
  * @author Valentinos Georgiades
  * @author Minh Nguyen

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzerHandler.java
Patch:
@@ -139,6 +139,7 @@ public void notifyFuzzerPaused(Integer process) {
 			@Override
 			public void notifyFuzzerComplete(Boolean result) {
 				ext.getFuzzerPanel().scanFinished();
+				fuzzerThread.stop();
 			}
 
 		});

File: src/org/zaproxy/zap/extension/multiFuzz/FuzzResultDialog.java
Patch:
@@ -65,7 +65,7 @@ private JPanel getJPanel() {
 			background.add(getMessageInspection().messageView(), Util.getGBC(0, currentRow, 1, 0.4, 1, GridBagConstraints.BOTH));
 			background.add(getDiagrams(), Util.getGBC(1, currentRow, 2, 0.6, 1, GridBagConstraints.BOTH));
 			currentRow++;
-			GridBagConstraints tableConstraints = Util.getGBC(0,currentRow, 3, 1 , 1, GridBagConstraints.HORIZONTAL);
+			GridBagConstraints tableConstraints = Util.getGBC(0,currentRow, 3, 1 , 0, GridBagConstraints.BOTH);
 			tableConstraints.anchor = GridBagConstraints.PAGE_END;
 			tableConstraints.ipady = 150;
 			background.add(getScrollPane(), tableConstraints);

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzResultDialog.java
Patch:
@@ -303,7 +303,7 @@ private void updateValues(ArrayList<HttpFuzzRecord> members,
 				} else {
 					statesMap.put(r.getReason(), 1);
 				}
-				if (resultMap.containsKey(r.getResult())) {
+				if (resultMap.containsKey(r.getResult().first)) {
 					resultMap.put(r.getResult().first,
 							resultMap.get(r.getResult().first) + 1);
 				} else {

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzerContentPanel.java
Patch:
@@ -1,4 +1,5 @@
 /*
+
  * Zed Attack Proxy (ZAP) and its related class files.
  *
  * ZAP is an HTTP/HTTPS proxy for assessing web application security.

File: src/org/zaproxy/zap/extension/log4j/ZapOutputWriter.java
Patch:
@@ -25,7 +25,7 @@
 
 public class ZapOutputWriter extends WriterAppender {
 
-	private final static String NEWLINE = "\n";
+	private final static char NEWLINE = '\n';
 	private ScanStatus scanStatus = null;
 	
 	public ZapOutputWriter () {
@@ -54,12 +54,12 @@ public void append(LoggingEvent event) {
 
 			String [] tsr = event.getThrowableStrRep();			
 			if (tsr != null) {
-				StringBuilder eventThrowableStrRep = new StringBuilder();
+				StringBuilder eventThrowableStrRep = new StringBuilder(tsr.length*75);//Capacity is guessed, but more than 16 for sure
 				for (String str : tsr) {
 					eventThrowableStrRep.append(str).append(NEWLINE);
 				}
 				//Send it as a single string
-				View.getSingleton().getOutputPanel().append(new StringBuilder(eventThrowableStrRep).toString());
+				View.getSingleton().getOutputPanel().append(eventThrowableStrRep.toString());
 			}
 		}
 	}

File: src/org/zaproxy/zap/extension/multiFuzz/PayloadScript.java
Patch:
@@ -3,20 +3,20 @@
  *
  * ZAP is an HTTP/HTTPS proxy for assessing web application security.
  *
- * Copyright 2013 The ZAP development team
+ * Copyright 2014 The ZAP Development Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */
+ */ 
 package org.zaproxy.zap.extension.multiFuzz;
 
 import javax.script.ScriptException;

File: src/org/parosproxy/paros/extension/report/ExtensionReport.java
Patch:
@@ -39,6 +39,7 @@
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.zaproxy.zap.view.ZapMenuItem;
+import org.parosproxy.paros.extension.report.ReportLastScan;
 
 public class ExtensionReport extends ExtensionAdaptor implements CommandLineListener {
 
@@ -97,7 +98,7 @@ private ZapMenuItem getMenuItemHtmlReport() {
 				public void actionPerformed(java.awt.event.ActionEvent e) {    
 
 				    ReportLastScan report = new ReportLastScan();
-				    report.generateHtml(getView(), getModel());
+				    report.generateReport(getView(), getModel(), ReportLastScan.reportTypes.HTML);
 	                
 				}
 			});
@@ -115,7 +116,7 @@ private ZapMenuItem getMenuItemXmlReport() {
 				public void actionPerformed(java.awt.event.ActionEvent e) {    
 
 				    ReportLastScan report = new ReportLastScan();
-				    report.generateXml(getView(), getModel());
+				    report.generateReport(getView(), getModel(), ReportLastScan.reportTypes.XML);
 	                
 				}
 			});

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzLocation.java
Patch:
@@ -38,12 +38,12 @@ public String getRepresentation(HttpMessage msg) {
 		String rep = "";
 		if (start > headLen) {
 			rep = msg.getRequestBody().toString()
-					.substring(start - headLen, end - headLen);
+					.substring(start - headLen - 1, end - headLen - 1);
 		} else {
 			rep = msg.getRequestHeader().toString().substring(start, end);
 		}
 		if(rep.equals("")){
-			rep = ((start > headLen) ? ("Body: Loc " + (start-headLen)) : ("Head: Loc " + start));
+			rep = ((start > headLen) ? ("Body: Loc " + (start - headLen - 1)) : ("Head: Loc " + start));
 		}
 		return rep;
 	}

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzProcess.java
Patch:
@@ -158,7 +158,7 @@ private HttpMessage inject(HttpMessage request) {
 		int currPosBody = 0;
 		String note = "";
 		for (HttpFuzzLocation fuzzLoc : intervals) {
-			if (fuzzLoc.begin() <= origHead.length()) {
+			if (fuzzLoc.begin() < origHead.length()) {
 				if (fuzzLoc.begin() >= currPosHead) {
 					int hl = 0;
 					int pos = 0;
@@ -180,8 +180,8 @@ private HttpMessage inject(HttpMessage request) {
 				int start = fuzzLoc.begin();
 				int end = fuzzLoc.end();
 				if (start > origBody.length()) {
-					start -= origHead.length();
-					end -= origHead.length();
+					start -= origHead.length() + 1;
+					end -= origHead.length() + 1;
 				}
 				body.append(origBody.substring(currPosBody, start));
 				HttpPayload payload = payloads.get(fuzzLoc);

File: src/org/zaproxy/zap/extension/multiFuzz/ExtensionFuzz.java
Patch:
@@ -371,6 +371,9 @@ public URL getURL() {
 	public void sessionAboutToChange(Session session) {
 		if (getView() != null) {
 			getFuzzerPanel().reset();
+			for(FuzzerHandler fh : fuzzableMessageHandlers.values()){
+				fh.reset();
+			}
 		}
 	}
 

File: src/org/zaproxy/zap/extension/multiFuzz/FuzzDialog.java
Patch:
@@ -96,7 +96,7 @@ public M getMessage() {
 	 * @param fuzzTarget
 	 * @throws HeadlessException
 	 */
-	public FuzzDialog(ExtensionFuzz ext, L loc, M msg) throws HeadlessException {
+	public FuzzDialog(ExtensionFuzz ext, M msg) throws HeadlessException {
 		super(View.getSingleton().getMainFrame(), true);
 		this.setTitle(Constant.messages.getString("fuzz.title"));
 		this.res = ext;

File: src/org/zaproxy/zap/extension/multiFuzz/FuzzResult.java
Patch:
@@ -24,7 +24,7 @@
 public class FuzzResult<M extends Message, L extends FuzzLocation<M>> {
 
 	public enum State {
-		SUCCESSFUL, REFLECTED, ERROR, CUSTOM
+		SUCCESSFUL, REFLECTED, ERROR, ANTICSRF, CUSTOM
 	}
 	
 	private String name;

File: src/org/zaproxy/zap/extension/multiFuzz/FuzzerHandler.java
Patch:
@@ -31,7 +31,9 @@ public interface FuzzerHandler<M extends Message, D extends FuzzDialog<?, ?, ?,
 	FuzzerContentPanel getFuzzerContentPanel();
 
 	List<SearchResult> searchResults(Pattern pattern, boolean inverse);
-
+	
+	public void reset();
+	
 	public void startFuzzers();
 
 	public void stopFuzzers();

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/HttpFuzzRecordGroup.java
Patch:
@@ -75,7 +75,7 @@ private void update() {
 				reason = "";
 			}
 			if(!members.get(i).getResult().first.equals(result.first)){
-				result = null;
+				result = new Pair<String, ImageIcon>("",null);
 			}
 		}
 		avgRTT /= members.size();

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -60,7 +60,8 @@ public abstract class HttpHeader implements java.io.Serializable {
     public static final String IF_NONE_MATCH = "If-None-Match";
     public static final String USER_AGENT = "User-Agent";
     public static final String ACCEPT_ENCODING = "Accept-Encoding";
-    public static final String CACHE_CONTROL = "Cache-control";
+    // ZAP:  the correct case is "Cache-Control", not "Cache-control"
+    public static final String CACHE_CONTROL = "Cache-Control";
     public static final String PRAGMA = "Pragma";
     public static final String REFERER = "Referer";
     public static final String X_ZAP_REQUESTID = "X-ZAP-RequestID";
@@ -115,7 +116,7 @@ public abstract class HttpHeader implements java.io.Serializable {
 	public static final String ACCESS_CONTROL_EXPOSE_HEADERS = "Access-Control-Expose-Headers";
 	//ZAP: added "Allow" and "Public" Headers, for response to "OPTIONS" method
 	public static final String METHODS_ALLOW = "Allow";
-	public static final String METHODS_PUBLIC = "Allow";  //IIS specific?
+	public static final String METHODS_PUBLIC = "Public";  //IIS specific?
 
     public HttpHeader() {
         init();

File: src/org/zaproxy/zap/spider/parser/SpiderODataAtomParser.java
Patch:
@@ -68,8 +68,8 @@ public boolean parseResource(HttpMessage message, Source source, int depth) {
 			processURL(message, depth, s,baseURL);
 		}
 		
-		// We don't consider the resource consumed, as there might be other files processing it
-		return false;
+		// resource consumed is consumed
+		return true;
 	}
 
 

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -597,7 +597,7 @@ public void onHttpResponseReceive(HttpMessage msg, int initiator) {
 		}
 
 		// Check for default tokens set in response messages
-		List<HttpCookie> responseCookies = msg.getResponseHeader().getHttpCookies();
+		List<HttpCookie> responseCookies = msg.getResponseHeader().getHttpCookies(msg.getRequestHeader().getHostName());
 		for (HttpCookie cookie : responseCookies)
 			// If it's a default session token and it is not already marked as session token and was
 			// not previously removed by the user

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsAPI.java
Patch:
@@ -4,6 +4,7 @@
 
 import net.sf.json.JSONObject;
 
+import org.apache.commons.httpclient.Cookie;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.extension.api.ApiAction;
@@ -195,7 +196,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			extension.addHttpSessionToken(cleanSite(params.getString(ACTION_PARAM_SITE)), 
 					params.getString(ACTION_PARAM_TOKEN_NAME));
 			sessionSST.setTokenValue(params.getString(ACTION_PARAM_TOKEN_NAME),
-					params.getString(ACTION_PARAM_TOKEN_VALUE));
+					new Cookie(null /* domain */, params.getString(ACTION_PARAM_TOKEN_NAME), params.getString(ACTION_PARAM_TOKEN_VALUE)));
 			return ApiResponseElement.OK;
 		case ACTION_RENAME_SESSION:
 			site = extension.getHttpSessionsSite(cleanSite(params.getString(ACTION_PARAM_SITE)), false);

File: src/org/zaproxy/zap/extension/users/ExtensionUserManagement.java
Patch:
@@ -303,7 +303,7 @@ public void removeContextUsers(int contextId) {
 	public void exportContextData(Context ctx, Configuration config) {
 		ContextUserAuthManager m = contextManagers.get(ctx.getIndex());
 		for (User u : m.getUsers()) {
-			config.setProperty(CONTEXT_CONFIG_USERS_USER, User.encode(u));
+			config.addProperty(CONTEXT_CONFIG_USERS_USER, User.encode(u));
 		}
 	}
 

File: test/org/zaproxy/zap/users/UserUnitTest.java
Patch:
@@ -79,7 +79,7 @@ public void shouldEncodeAndDecodeProperly() {
 		doReturn(mockedContext).when(user).getContext();
 		// When
 		String encoded = User.encode(user);
-		User result = User.decode(encoded, mockedExtension);
+		User result = User.decode(mockedContext.getIndex(), encoded, mockedExtension);
 		// Then
 		assertEquals(user.getName(), result.getName());
 		assertEquals(user.isEnabled(), result.isEnabled());

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -40,7 +40,7 @@ public class ApiException extends Exception {
 	
 	public enum Type {BAD_FORMAT, BAD_TYPE, NO_IMPLEMENTOR, BAD_ACTION, BAD_VIEW, BAD_OTHER, INTERNAL_ERROR, MISSING_PARAMETER, 
 		URL_NOT_FOUND, HREF_NOT_FOUND, SCAN_IN_PROGRESS, DISABLED, ALREADY_EXISTS, DOES_NOT_EXIST, ILLEGAL_PARAMETER, CONTEXT_NOT_FOUND,
-		USER_NOT_FOUND, URL_NOT_IN_CONTEXT, BAD_API_KEY, SCRIPT_NOT_FOUND, BAD_SCRIPT_FORMAT};
+		USER_NOT_FOUND, URL_NOT_IN_CONTEXT, BAD_API_KEY, SCRIPT_NOT_FOUND, BAD_SCRIPT_FORMAT, NO_ACCESS};
 	
 	private final String detail;
 

File: src/org/zaproxy/zap/extension/multiFuzz/ExtensionFuzz.java
Patch:
@@ -57,7 +57,7 @@ public class ExtensionFuzz extends ExtensionAdaptor implements
 
 	public static final String NAME = "MultiExtensionFuzz";
 	public static final String JBROFUZZ_CATEGORY_PREFIX = "jbrofuzz / ";
-	public static final String SCRIPT_TYPE_FUZZ = "Fuzz";
+	public static final String SCRIPT_TYPE_FUZZ = "fuzz";
 	public static final String SCRIPT_TYPE_PAYLOAD = "payload";
 	private static final ImageIcon FUZZ_SCRIPT_ICON = new ImageIcon(
 			ZAP.class.getResource("/resource/icon/16/script-fuzz.png"));

File: src/org/zaproxy/zap/extension/multiFuzz/impl/http/AntiCSRFProcessor.java
Patch:
@@ -9,7 +9,6 @@
 import org.zaproxy.zap.extension.anticsrf.AntiCsrfToken;
 import org.zaproxy.zap.extension.anticsrf.ExtensionAntiCSRF;
 import org.zaproxy.zap.extension.multiFuzz.FuzzMessagePreProcessor;
-import org.zaproxy.zap.extension.multiFuzz.Payload;
 
 public class AntiCSRFProcessor implements FuzzMessagePreProcessor<HttpMessage, HttpFuzzLocation, HttpPayload> {
 

File: src/org/zaproxy/zap/extension/api/ApiGeneratorUtils.java
Patch:
@@ -77,7 +77,7 @@ public static List<ApiImplementor> getAllImplementors() {
 
 		imps.add(new ParamsAPI(null));
 		
-		api = new ActiveScanAPI(null);
+		api = new ActiveScanAPI(null, null);
 		api.addApiOptions(new ScannerParam());
 		imps.add(api);
 

File: src/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -171,6 +171,7 @@ private void showPopupMenuIfTriggered(java.awt.event.MouseEvent e) {
 		return txtOutput;
 	}
 
+	@Deprecated
 	public void appendDirty(final String msg) {
 		doAppend(msg);
 	}

File: src/org/parosproxy/paros/db/RecordContext.java
Patch:
@@ -67,6 +67,8 @@ public class RecordContext {
 	public static final int TYPE_POST_PARSER_CLASSNAME = 402;
 	public static final int TYPE_POST_PARSER_CONFIG = 403;
 	
+	public static final int TYPE_ACCESS_CONTROL_RULE = 410;
+	
     private long dataId = 0;
     private int contextId = 0;
     private int type = 0;

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -52,6 +52,7 @@
 import org.zaproxy.zap.model.Context;
 import org.zaproxy.zap.model.GenericScanner;
 import org.zaproxy.zap.model.ScanListenner;
+import org.zaproxy.zap.model.TechSet;
 import org.zaproxy.zap.users.User;
 import org.zaproxy.zap.view.ScanPanel;
 import org.zaproxy.zap.view.table.HistoryReferencesTable;
@@ -307,6 +308,8 @@ protected void handleContextSpecificObject(GenericScanner scanThread, Object[] c
 				ascan.setScannerParam((ScannerParam)obj);
 			} else if (obj instanceof PluginFactory) {
 				ascan.setPluginFactory((PluginFactory)obj);
+			} else if (obj instanceof TechSet) {
+				ascan.setTechSet((TechSet) obj);
 			} else {
 				logger.error("Unexpected contextSpecificObject: " + obj.getClass().getCanonicalName());
 			}

File: src/org/zaproxy/zap/model/GenericScanner.java
Patch:
@@ -80,4 +80,5 @@ public interface GenericScanner extends Runnable {
 	
 	void setScanAsUser(User user);
 
+	void setTechSet(TechSet techSet);
 }

File: src/org/zaproxy/clientapi/gen/SessionManagement.java
Patch:
@@ -60,7 +60,9 @@ public ApiResponse getSessionManagementMethod(String contextid) throws ClientApi
 	public ApiResponse setSessionManagementMethod(String apikey, String contextid, String methodname, String methodconfigparams) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
-		map.put("apikey", apikey);
+		if (apikey != null) {
+			map.put("apikey", apikey);
+		}
 		map.put("contextId", contextid);
 		map.put("methodName", methodname);
 		map.put("methodConfigParams", methodconfigparams);

File: src/org/zaproxy/clientapi/gen/Authentication.java
Patch:
@@ -74,6 +74,7 @@ public ApiResponse getLoggedOutIndicator(String contextid) throws ClientApiExcep
 	public ApiResponse setAuthenticationMethod(String apikey, String contextid, String authmethodname, String authmethodconfigparams) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("contextId", contextid);
 		map.put("authMethodName", authmethodname);
 		map.put("authMethodConfigParams", authmethodconfigparams);
@@ -83,6 +84,7 @@ public ApiResponse setAuthenticationMethod(String apikey, String contextid, Stri
 	public ApiResponse setLoggedInIndicator(String apikey, String contextid, String loggedinindicatorregex) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("contextId", contextid);
 		map.put("loggedInIndicatorRegex", loggedinindicatorregex);
 		return api.callApi("authentication", "action", "setLoggedInIndicator", map);
@@ -91,6 +93,7 @@ public ApiResponse setLoggedInIndicator(String apikey, String contextid, String
 	public ApiResponse setLoggedOutIndicator(String apikey, String contextid, String loggedoutindicatorregex) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("contextId", contextid);
 		map.put("loggedOutIndicatorRegex", loggedoutindicatorregex);
 		return api.callApi("authentication", "action", "setLoggedOutIndicator", map);

File: src/org/zaproxy/clientapi/gen/Break.java
Patch:
@@ -41,6 +41,7 @@ public Break(ClientApi api) {
 	public ApiResponse brk(String apikey, String type, String scope, String state) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("type", type);
 		map.put("scope", scope);
 		map.put("state", state);
@@ -50,6 +51,7 @@ public ApiResponse brk(String apikey, String type, String scope, String state) t
 	public ApiResponse addHttpBreakpoint(String apikey, String string, String location, String match, String inverse, String ignorecase) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("string", string);
 		map.put("location", location);
 		map.put("match", match);
@@ -61,6 +63,7 @@ public ApiResponse addHttpBreakpoint(String apikey, String string, String locati
 	public ApiResponse removeHttpBreakpoint(String apikey, String string, String location, String match, String inverse, String ignorecase) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("string", string);
 		map.put("location", location);
 		map.put("match", match);

File: src/org/zaproxy/clientapi/gen/ForcedUser.java
Patch:
@@ -53,6 +53,7 @@ public ApiResponse getForcedUser(String contextid) throws ClientApiException {
 	public ApiResponse setForcedUser(String apikey, String contextid, String userid) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("contextId", contextid);
 		map.put("userId", userid);
 		return api.callApi("forcedUser", "action", "setForcedUser", map);
@@ -61,6 +62,7 @@ public ApiResponse setForcedUser(String apikey, String contextid, String userid)
 	public ApiResponse setForcedUserModeEnabled(String apikey, boolean bool) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("boolean", Boolean.toString(bool));
 		return api.callApi("forcedUser", "action", "setForcedUserModeEnabled", map);
 	}

File: src/org/zaproxy/clientapi/gen/SessionManagement.java
Patch:
@@ -60,6 +60,7 @@ public ApiResponse getSessionManagementMethod(String contextid) throws ClientApi
 	public ApiResponse setSessionManagementMethod(String apikey, String contextid, String methodname, String methodconfigparams) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
+		map.put("apikey", apikey);
 		map.put("contextId", contextid);
 		map.put("methodName", methodname);
 		map.put("methodConfigParams", methodconfigparams);

File: src/org/zaproxy/zap/utils/ScannerUtils.java
Patch:
@@ -82,7 +82,7 @@ else if (SCRIPT_RULES_REGEX.matcher(scannerName).matches())
      * @return quality 
      */
 	public static String getPluginQuality(PluginPassiveScanner scanner) {
-//        String scannerPackage = scanner.getClass().getCanonicalName();
+
         String scannerName = scanner.getName();
         
         return (getSpecificQuality(scannerName, scanner));
@@ -95,8 +95,8 @@ public static String getPluginQuality(PluginPassiveScanner scanner) {
      * @return quality 
      */
 	public static String getPluginQuality(Plugin scanner) {
-//        String scannerPackage = scanner.getClass().getCanonicalName();
-        String scannerName = scanner.getName();
+
+		String scannerName = scanner.getName();
         
         return (getSpecificQuality(scannerName, scanner));
         

File: src/org/zaproxy/zap/utils/TimeStampUtils.java
Patch:
@@ -93,7 +93,7 @@ public static String currentFormattedTimeStamp(String format) {
     * @see SimpleDateFormat
     */
 	public static String getTimeStampedMessage(String message, String format){
-		return currentFormattedTimeStamp(format)+message;
+		return currentFormattedTimeStamp(format)+" : "+message;
 	}
 	
 }

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -189,7 +189,7 @@ public Object getValueAt(int row, int col) {
                 break;
                 
             case 2: // Quality Column
-                result = scannersQuality.get((test).getPluginId());
+                result = scannersQuality.get(test.getPluginId());
                 break;  
             
             default:

File: src/org/zaproxy/zap/extension/ascan/ScriptsActiveScanner.java
Patch:
@@ -64,7 +64,7 @@ public String getDescription() {
 
     @Override
     public int getCategory() {
-        return Category.INJECTION;
+        return Category.MISC;
     }
 
     @Override

File: src/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -91,7 +91,7 @@ private JTable getTableTest() {
             tableTest.setAutoCreateRowSorter(true);
             
             //Default sort by name (column 0)
-            List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
+            List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             tableTest.getRowSorter().setSortKeys(sortKeys);
             

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -99,7 +99,7 @@ private JTable getTableTest() {
             tableTest.setAutoCreateRowSorter(true);
             
             //Default sort by name (column 0)
-            List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
+            List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>(1);
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             tableTest.getRowSorter().setSortKeys(sortKeys);
             

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -187,8 +187,7 @@ private HistoryReferencesTable getMessagesTable() {
 	@Override
 	protected GenericScanner newScanThread(String site, AbstractParam params) {
 		ActiveScan as = new ActiveScan(site, ((ExtensionActiveScan)this.getExtension()).getScannerParam(), 
-				this.getExtension().getModel().getOptionsParam().getConnectionParam(), this,
-				Control.getSingleton().getPluginFactory().clone());
+				this.getExtension().getModel().getOptionsParam().getConnectionParam(), this);
 		as.setExcludeList(this.excludeUrls);
 		return as;
 	}

File: src/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -27,6 +27,8 @@
 // ZAP: 2013/01/19 Issue 460 Add support for a scan progress dialog
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2014/02/21 Issue 1043: Custom active scan dialog
+// ZAP: 2014/06/23 Issue 1151: Active Scan in Scope finishes before scanning all
+// messages in scope if multiple domains available
 
 package org.parosproxy.paros.core.scanner;
 
@@ -124,7 +126,7 @@ public void scan(SiteNode node) {
 	        for (int i=0; i<node.getChildCount() && !isStop(); i++) {
 	            SiteNode child = (SiteNode) node.getChildAt(i);
 	            String hostAndPort = getHostAndPort(child);
-	            hostProcess = new HostProcess(hostAndPort, this, scannerParam, connectionParam, pluginFactory);
+	            hostProcess = new HostProcess(hostAndPort, this, scannerParam, connectionParam, pluginFactory.clone());
 	            hostProcess.setStartNode(child);
 	            hostProcess.setUser(this.user);
 	            this.hostProcesses.add(hostProcess);

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -201,7 +201,7 @@ private void startSpider() {
 
 		// If the spider hasn't been initialized, do it now
 		if (spider == null) {
-			spider = new Spider(extension.getSpiderParam(), extension.getModel().getOptionsParam()
+			spider = new Spider(extension, extension.getSpiderParam(), extension.getModel().getOptionsParam()
 					.getConnectionParam(), extension.getModel(), this.scanContext);
 
 			// Register this thread as a Spider Listener, so it gets notified of events and is able

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -35,6 +35,7 @@
 // ZAP: 2014/03/23 Issue 997: Session.open complains about improper use of addPath
 // ZAP: 2014/04/10 Initialise the root SiteNode with a reference to SiteMap
 // ZAP: 2014/04/10 Allow to delete history ID to SiteNode map entries
+// ZAP: 2014/06/16 Issue 1227: Active scanner sends GET requests with content in request body
 
 package org.parosproxy.paros.model;
 
@@ -531,6 +532,7 @@ private HistoryReference createReference(SiteNode node, HistoryReference baseRef
         newMsg.getRequestHeader().setURI(uri);
         newMsg.getRequestHeader().setMethod(HttpRequestHeader.GET);
         newMsg.getRequestBody().setBody("");
+        newMsg.getRequestHeader().setHeader(HttpHeader.CONTENT_TYPE, null);
         newMsg.getRequestHeader().setHeader(HttpHeader.CONTENT_LENGTH, null);
         
 		//HistoryReference historyRef = new HistoryReference(model.getSession(), baseRef.getHistoryType(), newMsg);

File: src/org/zaproxy/zap/extension/ascan/ExcludedParameterModifyDialog.java
Patch:
@@ -43,12 +43,12 @@ public void setToken(ScannerParamFilter token) {
     }
     
     @Override
-    protected boolean validateFields() {
-        if (token.getParamName().equals(getNameTextField().getText())) {
+    protected boolean validateName(String tokenName) {
+        if (token.getParamName().equals(tokenName)) {
             return true;
         }
         
-        return super.validateFields();
+        return super.validateName(tokenName);
     }
 
     @Override

File: src/org/zaproxy/zap/utils/HarUtils.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.List;
 import java.util.Locale;
 
+import org.apache.commons.lang.StringUtils;
 import org.codehaus.jackson.JsonFactory;
 import org.codehaus.jackson.JsonParser;
 import org.parosproxy.paros.Constant;
@@ -161,8 +162,7 @@ public static HarRequest createHarRequest(HttpMessage httpMessage) {
                 contentType = "";
                 text = requestBody.toString();
             } else {
-                String lcContentType = contentType.trim().toLowerCase(Locale.ROOT);
-                if (HttpHeader.FORM_URLENCODED_CONTENT_TYPE.equals(lcContentType)) {
+                if (StringUtils.startsWithIgnoreCase(contentType.trim(), HttpHeader.FORM_URLENCODED_CONTENT_TYPE)) {
                     for (HtmlParameter param : httpMessage.getFormParams()) {
                         params.addPostDataParam(new HarPostDataParam(param.getName(), param.getValue()));
                     }

File: src/org/zaproxy/zap/utils/ScannerUtils.java
Patch:
@@ -49,7 +49,7 @@ public final class ScannerUtils {
     /** 
      * Default constructor 
      */
-	public ScannerUtils() {
+	private ScannerUtils() {
 	
 	}
 	

File: src/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.List;
 
 import javax.swing.DefaultCellEditor;
-import javax.swing.DefaultRowSorter;
 import javax.swing.JComboBox;
 import javax.swing.JScrollPane;
 import javax.swing.JTable;
@@ -92,10 +91,9 @@ private JTable getTableTest() {
             tableTest.setAutoCreateRowSorter(true);
             
             //Default sort by name (column 0)
-            DefaultRowSorter<?, ?> sorter = ((DefaultRowSorter<?, ?>)tableTest.getRowSorter());
             List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
-            sorter.setSortKeys(sortKeys); 
+            tableTest.getRowSorter().setSortKeys(sortKeys);
             
 	        for (int i = 0; i < tableTest.getColumnCount()-1; i++) {
 	            TableColumn column = tableTest.getColumnModel().getColumn(i);

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.List;
 
 import javax.swing.DefaultCellEditor;
-import javax.swing.DefaultRowSorter;
 import javax.swing.JComboBox;
 import javax.swing.JScrollPane;
 import javax.swing.JTable;
@@ -100,10 +99,9 @@ private JTable getTableTest() {
             tableTest.setAutoCreateRowSorter(true);
             
             //Default sort by name (column 0)
-            DefaultRowSorter<?, ?> sorter = ((DefaultRowSorter<?, ?>)tableTest.getRowSorter());
             List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
-            sorter.setSortKeys(sortKeys); 
+            tableTest.getRowSorter().setSortKeys(sortKeys);
             
             for (int i = 0; i < tableTest.getColumnCount()-1; i++) {
                 TableColumn column = tableTest.getColumnModel().getColumn(i);

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -34,6 +34,7 @@
 // ZAP: 2014/04/10 Changed to use HttpMessageCachedData and expose the cached data
 // ZAP: 2014/04/10 Issue 1042: Having significant issues opening a previous session
 // ZAP: 2014/05/23 Issue 1209: Reliability becomes Confidence and add levels
+// ZAP: 2014/06/10 Added TYPE_ACCESS_CONTROL
 
 package org.parosproxy.paros.model;
 
@@ -97,6 +98,8 @@ public class HistoryReference {
    public static final int TYPE_SPIDER_AJAX = 10;
    // ZAP: Added TYPE_AUTHENTICATION for use in authentication methods
    public static final int TYPE_AUTHENTICATION = 11;
+   // ZAP: Added TYPE_ACCESS_CONTROL for use in access control testing methods
+   public static final int TYPE_ACCESS_CONTROL = 13;
    public static final int TYPE_RESERVED_11 = 12;	// Reserved by Psiinon
 
    private static java.text.DecimalFormat decimalFormat = new java.text.DecimalFormat("##0.###");

File: src/org/zaproxy/zap/view/panels/AbstractContextSelectToolbarStatusPanel.java
Patch:
@@ -253,5 +253,5 @@ public void contextsChanged() {
 	 * 
 	 * @param context the context for which to display the panel
 	 */
-	protected abstract Component switchViewForContext(Context context);
+	protected abstract void switchViewForContext(Context context);
 }

File: src/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -107,7 +107,7 @@ public PolicyAllCategoryPanel(OptionsParam optionsParam, ScannerParam scannerPar
      */
     private void initialize() {
         this.setLayout(new GridBagLayout());
-        this.setSize(375, 204);
+        this.setSize(375, 205);
         this.setName("categoryPanel");
 
         // Add Attack settings section - a copy of the options dialog
@@ -205,7 +205,7 @@ private JTable getTableTest() {
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             sorter.setSortKeys(sortKeys); 
             
-            for (int i = 0; i < 2; i++) {
+            for (int i = 0; i < tableTest.getColumnCount()-1; i++) {
                 TableColumn column = tableTest.getColumnModel().getColumn(i);
                 column.setPreferredWidth(width[i]);
             }

File: src/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -49,7 +49,7 @@ public class PolicyCategoryPanel extends AbstractParamPanel {
 	private JTable tableTest = null;
 	private JScrollPane jScrollPane = null;
 	private CategoryTableModel categoryTableModel = null;  //  @jve:decl-index=0:parse,visual-constraint="294,249"
-	private static final int[] width = {300,100, 100};
+	private static final int[] width = {300,100, 100, 200};
     /**
      *
      */
@@ -97,7 +97,7 @@ private JTable getTableTest() {
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             sorter.setSortKeys(sortKeys); 
             
-	        for (int i = 0; i < 3; i++) {
+	        for (int i = 0; i < tableTest.getColumnCount()-1; i++) {
 	            TableColumn column = tableTest.getColumnModel().getColumn(i);
 	            column.setPreferredWidth(width[i]);
 	        }

File: src/org/zaproxy/zap/extension/ascan/PolicyDialog.java
Patch:
@@ -65,7 +65,7 @@ public PolicyDialog(Frame parent) throws HeadlessException {
      */
     private void initialize() {
         this.setTitle(POLICY);
-        this.setSize(650, 416);
+        this.setSize(750, 420); // TODO: This shouldn't be statically defined.
         addParamPanel(null, getPolicyAllCategoryPanel(), false);
         
         for (int i = 0; i < Category.getAllNames().length; i++) {

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -84,7 +84,7 @@ private void initialize() {
         this.add(getJScrollPane(), gridBagConstraints11);
     }
     
-    private static final int[] width = {300, 60};
+    private static final int[] width = {300, 60, 100};
 
     /**
      * This method initializes tableTest
@@ -105,7 +105,7 @@ private JTable getTableTest() {
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
             sorter.setSortKeys(sortKeys); 
             
-            for (int i = 0; i < 2; i++) {
+            for (int i = 0; i < tableTest.getColumnCount()-1; i++) {
                 TableColumn column = tableTest.getColumnModel().getColumn(i);
                 column.setPreferredWidth(width[i]);
             }

File: src/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -199,7 +199,7 @@ private JTable getTableTest() {
             tableTest.setIntercellSpacing(new java.awt.Dimension(1, 1));
             tableTest.setAutoCreateRowSorter(true);
             
-            //Default sort by name (column 1)
+            //Default sort by name (column 0)
             DefaultRowSorter<?, ?> sorter = ((DefaultRowSorter<?, ?>)tableTest.getRowSorter());
             List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));

File: src/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -91,7 +91,7 @@ private JTable getTableTest() {
 			tableTest.setIntercellSpacing(new java.awt.Dimension(1,1));
             tableTest.setAutoCreateRowSorter(true);
             
-            //Default sort by name (column 1)
+            //Default sort by name (column 0)
             DefaultRowSorter<?, ?> sorter = ((DefaultRowSorter<?, ?>)tableTest.getRowSorter());
             List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -99,7 +99,7 @@ private JTable getTableTest() {
             tableTest.setIntercellSpacing(new java.awt.Dimension(1, 1));
             tableTest.setAutoCreateRowSorter(true);
             
-            //Default sort by name (column 1)
+            //Default sort by name (column 0)
             DefaultRowSorter<?, ?> sorter = ((DefaultRowSorter<?, ?>)tableTest.getRowSorter());
             List <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
             sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));

File: src/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -192,6 +192,7 @@ private JTable getTableTest() {
             tableTest.setModel(getAllCategoryTableModel());
             tableTest.setRowHeight(18);
             tableTest.setIntercellSpacing(new java.awt.Dimension(1, 1));
+            tableTest.setAutoCreateRowSorter(true);
             
             for (int i = 0; i < 2; i++) {
                 TableColumn column = tableTest.getColumnModel().getColumn(i);

File: src/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -85,6 +85,7 @@ private JTable getTableTest() {
 			tableTest.setModel(getCategoryTableModel());
 			tableTest.setRowHeight(18);
 			tableTest.setIntercellSpacing(new java.awt.Dimension(1,1));
+            tableTest.setAutoCreateRowSorter(true);
 	        for (int i = 0; i < 3; i++) {
 	            TableColumn column = tableTest.getColumnModel().getColumn(i);
 	            column.setPreferredWidth(width[i]);

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -92,6 +92,7 @@ private JTable getTableTest() {
             tableTest.setModel(getPassiveScanTableModel());
             tableTest.setRowHeight(18);
             tableTest.setIntercellSpacing(new java.awt.Dimension(1, 1));
+            tableTest.setAutoCreateRowSorter(true);
             
             for (int i = 0; i < 2; i++) {
                 TableColumn column = tableTest.getColumnModel().getColumn(i);

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -39,6 +39,7 @@
 // ZAP: 2014/02/12 Issue 1030: Load and save scan policies
 // ZAP: 2014/02/21 Issue 1043: Custom active scan dialog
 // ZAP: 2014/05/15 Issue 1196: AbstractPlugin.bingo incorrectly sets evidence to attack
+// ZAP: 2014/05/23 Issue 1209: Reliability becomes Confidence and add levels
 
 package org.parosproxy.paros.core.scanner;
 

File: src/org/parosproxy/paros/extension/history/HistoryFilter.java
Patch:
@@ -17,6 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
+// ZAP: 2014/05/23 Issue 1209: Reliability becomes Confidence and add levels
 
 package org.parosproxy.paros.extension.history;
 

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -33,6 +33,7 @@
 // ZAP: 2013/11/16 Issue 892: Cache of response body length in HistoryReference might not be correct
 // ZAP: 2014/04/10 Changed to use HttpMessageCachedData and expose the cached data
 // ZAP: 2014/04/10 Issue 1042: Having significant issues opening a previous session
+// ZAP: 2014/05/23 Issue 1209: Reliability becomes Confidence and add levels
 
 package org.parosproxy.paros.model;
 

File: src/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2014/04/10 Do not allow to set the parent node as itself
 // ZAP: 2014/04/10 Issue 1118: Alerts Tab can get out of sync
 // ZAP: 2014/05/05 Issue 1181: Vulnerable pages active scanned only once
+// ZAP: 2014/05/23 Issue 1209: Reliability becomes Confidence and add levels
 
 package org.parosproxy.paros.model;
 

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -429,7 +429,7 @@ public int getHighestAlert() {
 	   if(alerts==null)
 		   return i;
 	   for (Alert a : alerts) {
-		   if (a.getReliability() != Alert.FALSE_POSITIVE && a.getRisk() > i) {
+		   if (a.getConfidence() != Alert.FALSE_POSITIVE && a.getRisk() > i) {
 			   i = a.getRisk();
 		   }
 	   }

File: src/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -109,7 +109,7 @@ private void appendIcons(StringBuilder sb) {
     	int highestRisk = -1;
     	Alert highestAlert = null;
     	for (Alert alert : this.getAlerts()) {
-    		if (alert.getReliability() != Alert.FALSE_POSITIVE && alert.getRisk() > highestRisk) {
+    		if (alert.getConfidence() != Alert.FALSE_POSITIVE && alert.getRisk() > highestRisk) {
     			highestRisk = alert.getRisk();
     			highestAlert = alert;
     		}

File: src/org/zaproxy/clientapi/ant/AlertCheckTask.java
Patch:
@@ -36,10 +36,10 @@ public void execute() throws BuildException {
 			List<Alert> ignoreAlerts = new ArrayList<>(ignoreAlertTasks.size());
 			List<Alert> requireAlerts = new ArrayList<>(requireAlertTasks.size());
 			for (AlertTask alert: ignoreAlertTasks) {
-				ignoreAlerts.add(new Alert(alert.getAlert(), alert.getUrl(), alert.getRisk(), alert.getReliability(), alert.getParam(), alert.getOther()));
+				ignoreAlerts.add(new Alert(alert.getAlert(), alert.getUrl(), alert.getRisk(), alert.getConfidence(), alert.getParam(), alert.getOther()));
 			}
 			for (AlertTask alert: requireAlertTasks) {
-				requireAlerts.add(new Alert(alert.getAlert(), alert.getUrl(), alert.getRisk(), alert.getReliability(), alert.getParam(), alert.getOther()));
+				requireAlerts.add(new Alert(alert.getAlert(), alert.getUrl(), alert.getRisk(), alert.getConfidence(), alert.getParam(), alert.getOther()));
 			}
 			
 			this.getClientApi().checkAlerts(ignoreAlerts, requireAlerts);

File: src/org/zaproxy/clientapi/core/AlertsFile.java
Patch:
@@ -68,7 +68,7 @@ private static void createAlertXMLElements(Element alertsFound, Alert alert) {
         if (alert.getRisk() != null)
             alertElement.setAttribute("risk", alert.getRisk().name());
         if (alert.getUrl() != null)
-            alertElement.setAttribute("reliability", alert.getReliability().name());
+            alertElement.setAttribute("confidence", alert.getConfidence().name());
         if (alert.getUrl() != null)
             alertElement.setAttribute("url", alert.getUrl());
         if (alert.getParam() != null)
@@ -97,7 +97,7 @@ public static List<Alert> getAlertsFromFile(File file, String alertType) throws
                     element.getAttributeValue("alert"),
                     element.getAttributeValue("url"),
                     element.getAttributeValue("risk"),
-                    element.getAttributeValue("reliability"),
+                    element.getAttributeValue("confidence"),
                     element.getAttributeValue("param"),
                     element.getAttributeValue("other"));
             alerts.add(alert);

File: src/org/zaproxy/clientapi/core/ClientApi.java
Patch:
@@ -44,7 +44,7 @@
 import javax.xml.parsers.DocumentBuilderFactory;
 
 import org.w3c.dom.Document;
-import org.zaproxy.clientapi.core.Alert.Reliability;
+import org.zaproxy.clientapi.core.Alert.Confidence;
 import org.zaproxy.clientapi.core.Alert.Risk;
 import org.zaproxy.clientapi.gen.Acsrf;
 import org.zaproxy.clientapi.gen.Ascan;
@@ -164,7 +164,7 @@ public List<Alert> getAlerts(String baseUrl, int start, int count) throws Client
                 		alertSet.getAttribute("alert"),
                         alertSet.getAttribute("url"),
                         Risk.valueOf(alertSet.getAttribute("risk")),
-                        Reliability.valueOf(alertSet.getAttribute("reliability")),
+                        Confidence.valueOf(alertSet.getAttribute("confidence")),
                         alertSet.getAttribute("param"),
                         alertSet.getAttribute("other"),
                         alertSet.getAttribute("attack"),

File: src/org/zaproxy/zap/extension/alert/AlertTreeModel.java
Patch:
@@ -44,7 +44,7 @@ class AlertTreeModel extends DefaultTreeModel {
     
     private String getRiskString (Alert alert) {
     	// Note that the number comments are to ensure the right ordering in the tree :)
-    	if (alert.getReliability() == Alert.FALSE_POSITIVE) {
+    	if (alert.getConfidence() == Alert.FALSE_POSITIVE) {
     		return "<html><!--5--><img src=\"" + Constant.OK_FLAG_IMAGE_URL + "\">&nbsp;" + alert.getAlert() + "<html>";
     	}
 		return "<html><!--" + (5 - alert.getRisk()) + "--><img src=\"" + alert.getIconUrl() + "\">&nbsp;" + alert.getAlert() + "<html>";
@@ -141,7 +141,7 @@ private synchronized void updatePathEventHandler(Alert originalAlert, Alert aler
     
     private AlertNode findAndAddChild(AlertNode parent, String nodeName, Alert alert) {
         int risk = alert.getRisk();
-        if (alert.getReliability() == Alert.FALSE_POSITIVE) {
+        if (alert.getConfidence() == Alert.FALSE_POSITIVE) {
             // Special case!
             risk = -1;
         }
@@ -160,7 +160,7 @@ private AlertNode findAndAddChild(AlertNode parent, String nodeName, Alert alert
 
     private AlertNode findAndAddLeaf(AlertNode parent, String nodeName, Alert alert) {
         int risk = alert.getRisk();
-        if (alert.getReliability() == Alert.FALSE_POSITIVE) {
+        if (alert.getConfidence() == Alert.FALSE_POSITIVE) {
             // Special case!
             risk = -1;
         }

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -260,7 +260,7 @@ private void writeAlertToDB(Alert alert, HistoryReference ref) throws HttpMalfor
             scanId = recordScan.getScanId();
         }
         RecordAlert recordAlert = tableAlert.write(
-                scanId, alert.getPluginId(), alert.getAlert(), alert.getRisk(), alert.getReliability(),
+                scanId, alert.getPluginId(), alert.getAlert(), alert.getRisk(), alert.getConfidence(),
                 alert.getDescription(), alert.getUri(), alert.getParam(), alert.getAttack(),
                 alert.getOtherInfo(), alert.getSolution(), alert.getReference(),
                 alert.getEvidence(), alert.getCweId(), alert.getWascId(),
@@ -282,7 +282,7 @@ private void updateAlertInDB(Alert alert) throws HttpMalformedHeaderException, S
 
         TableAlert tableAlert = getModel().getDb().getTableAlert();
         tableAlert.update(alert.getAlertId(), alert.getAlert(), alert.getRisk(),
-                alert.getReliability(), alert.getDescription(), alert.getUri(),
+                alert.getConfidence(), alert.getDescription(), alert.getUri(),
                 alert.getParam(), alert.getAttack(), alert.getOtherInfo(), alert.getSolution(), alert.getReference(), 
                 alert.getEvidence(), alert.getCweId(), alert.getWascId(), alert.getSourceHistoryId());
     }
@@ -587,7 +587,7 @@ public String getXml(SiteNode site) {
         xml.append("<alerts>");
         List<Alert> alerts = site.getAlerts();
         for (Alert alert : alerts) {
-            if (alert.getReliability() != Alert.FALSE_POSITIVE) {
+            if (alert.getConfidence() != Alert.FALSE_POSITIVE) {
                 String urlParamXML = alert.getUrlParamXML();
                 xml.append(alert.toPluginXML(urlParamXML));
             }

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -835,7 +835,7 @@ private ApiResponseSet alertToSet(Alert alert) {
 		map.put("alert", alert.getAlert());
 		map.put("description", alert.getDescription());
 		map.put("risk", Alert.MSG_RISK[alert.getRisk()]);
-		map.put("reliability", Alert.MSG_RELIABILITY[alert.getReliability()]);
+		map.put("confidence", Alert.MSG_CONFIDENCE[alert.getConfidence()]);
 		map.put("url", alert.getUri());
 		map.put("other", alert.getOtherInfo());
 		map.put("param", alert.getParam());
@@ -864,7 +864,7 @@ private void processAlerts(String baseUrl, int start, int count, Processor<Alert
 				RecordAlert recAlert = tableAlert.read(alertId);
 				Alert alert = new Alert(recAlert);
 
-				if (alert.getReliability() != Alert.FALSE_POSITIVE
+				if (alert.getConfidence() != Alert.FALSE_POSITIVE
 						&& !alerts.contains(alert)) {
 					if (baseUrl != null && ! alert.getUri().startsWith(baseUrl)) {
 						// Not subordinate to the specified URL

File: src/org/zaproxy/zap/extension/ascan/ScriptsActiveScanner.java
Patch:
@@ -105,7 +105,7 @@ public void scan(HttpMessage msg, String param, String value) {
 						s.scan(this, msg, param, value);
 						
 					} else {
-						writer.append(Constant.messages.getString("scripts.interface.passive.error"));
+						writer.append(Constant.messages.getString("scripts.interface.active.error"));
 						extension.setError(script, writer.toString());
 						extension.setEnabled(script, false);
 					}
@@ -138,10 +138,10 @@ public void sendAndReceive(HttpMessage msg, boolean isFollowRedirect, boolean ha
     	super.sendAndReceive(msg, isFollowRedirect, handleAntiCSRF);
     }
 
-	public void raiseAlert(int risk, int reliability, String name, String description, String uri, 
+	public void raiseAlert(int risk, int confidence, String name, String description, String uri, 
 			String param, String attack, String otherInfo, String solution, String evidence, 
 			int cweId, int wascId, HttpMessage msg) {
-		super.bingo(risk, reliability, name, description, uri, param, attack, 
+		super.bingo(risk, confidence, name, description, uri, param, attack, 
 				otherInfo, solution, evidence, cweId, wascId, msg);
 	}
 

File: src/org/zaproxy/zap/extension/pscan/scanner/ScriptsPassiveScanner.java
Patch:
@@ -108,11 +108,11 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 		
 	}
 	
-	public void raiseAlert(int risk, int reliability, String name, String description, String uri, 
+	public void raiseAlert(int risk, int confidence, String name, String description, String uri, 
 			String param, String attack, String otherInfo, String solution, String evidence, 
 			int cweId, int wascId, HttpMessage msg) {
 		
-		Alert alert = new Alert(getPluginId(), risk, reliability, name);
+		Alert alert = new Alert(getPluginId(), risk, confidence, name);
 		     
 		alert.setDetail(description, msg.getRequestHeader().getURI().toString(), 
 				param, attack, otherInfo, solution, null, evidence, cweId, wascId, msg);		// Left out reference to match ScriptsActiveScanner

File: src/org/zaproxy/zap/extension/script/ExtensionScript.java
Patch:
@@ -351,6 +351,7 @@ public void saveScript(ScriptWrapper script) throws IOException {
 
 	public void removeScript(ScriptWrapper script) {
 		script.setLoadOnStart(false);
+		this.getScriptParam().removeScript(script);
 		this.getScriptParam().saveScripts();
 		this.getTreeModel().removeScript(script);
 		for (ScriptEventListener listener : this.listeners) {

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -53,6 +53,8 @@
 // ZAP: 2014/03/23 Issue 999: History loaded in wrong order
 // ZAP: 2014/04/10 Remove cached history reference when a history reference is removed
 // ZAP: 2014/04/10 Issue 1042: Having significant issues opening a previous session
+// ZAP: 2014/05/20 Issue 1206: "History" tab is not cleared when a new session is created 
+// through the API with ZAP in GUI mode
 
 package org.parosproxy.paros.extension.history;
 
@@ -627,7 +629,7 @@ public void sessionAboutToChange(final Session session) {
 				EventQueue.invokeAndWait(new Runnable() {
 					@Override
 					public void run() {
-						sessionChanged(session);
+						sessionAboutToChange(session);
 					}
 				});
 			} catch (Exception e) {

File: test/org/parosproxy/paros/model/FileCopierUnitTest.java
Patch:
@@ -24,6 +24,7 @@ public class FileCopierUnitTest {
 	@Before
 	public void setUp() throws Exception {
 		fileCopier = new FileCopier();
+		tempFolder.create();
 	}
 
 	@Test

File: src/org/zaproxy/zap/extension/httppanel/view/posttable/RequestPostTableModel.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
+// ZAP: 2014/05/16 Issue 81: ZAP changes request data (while switching views)
 package org.zaproxy.zap.extension.httppanel.view.posttable;
 
 import java.io.UnsupportedEncodingException;
@@ -82,6 +83,7 @@ public String getColumnName(int col) {
     }
 
     public synchronized void setText(String body) {
+        isChanged = false;
         listPair.clear();
         String name = null;
         String value = null;

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -38,6 +38,7 @@
 // ZAP: 2014/01/16 Add support to plugin skipping
 // ZAP: 2014/02/12 Issue 1030: Load and save scan policies
 // ZAP: 2014/02/21 Issue 1043: Custom active scan dialog
+// ZAP: 2014/05/15 Issue 1196: AbstractPlugin.bingo incorrectly sets evidence to attack
 
 package org.parosproxy.paros.core.scanner;
 
@@ -323,7 +324,7 @@ protected void bingo(int risk, int reliability, String name, String description,
         }
         
         alert.setDetail(description, uri, param, attack, otherInfo, solution, this.getReference(),
-                attack, this.getCweId(), this.getWascId(), msg);
+                "", this.getCweId(), this.getWascId(), msg);
         
         parent.alertFound(alert);
     }

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -33,6 +33,8 @@
 // ZAP: 2014/02/08 Added Custom Script management settings
 // ZAP: 2014/02/13 Added HTTP parameter exclusion configuration on Active Scanning
 // ZAP: 2014/03/23 Issue 1076: Change active scanner to not delete the temporary messages generated
+// ZAP: 2014/05/13 Issue 1193: Scan URL path elements - turn off by default
+
 package org.parosproxy.paros.core.scanner;
 
 import java.util.ArrayList;
@@ -84,7 +86,7 @@ public class ScannerParam extends AbstractParam {
     public static final int RPC_USERDEF     = 1<<8;
     
     // Defaults for initial configuration
-    public static final int TARGET_INJECTABLE_DEFAULT = TARGET_QUERYSTRING | TARGET_POSTDATA | TARGET_URLPATH;
+    public static final int TARGET_INJECTABLE_DEFAULT = TARGET_QUERYSTRING | TARGET_POSTDATA;
     public static final int TARGET_ENABLED_RPC_DEFAULT = RPC_MULTIPART | RPC_XML | RPC_JSON | RPC_GWT | RPC_ODATA;
         
     // Internal variables

File: src/org/zaproxy/zap/utils/BoyerMooreMatcher.java
Patch:
@@ -62,7 +62,7 @@ public int findInContent(String content) {
         int n = content.length();
         int m = pattern.length();
         int skip;
-        int val;
+        char val;
 
         for (int i = 0; i <= n - m; i = i + skip) {
             skip = 0;

File: src/org/zaproxy/zap/extension/alert/AlertTreeModel.java
Patch:
@@ -219,7 +219,9 @@ public synchronized void deletePath(Alert alert) {
         		// Parent has no other children, remove it also
         		this.removeNodeFromParent(parent);
                 nodeStructureChanged((AlertNode) this.getRoot());
-        	}
+            } else if (parent.getUserObject() == node.getUserObject()) {
+                parent.setUserObject(parent.getChildAt(0).getUserObject());
+            }
         }
     }
     

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzerContentPanel.java
Patch:
@@ -84,7 +84,7 @@ private JTable getFuzzResultTable() {
             resultsModel = new HttpFuzzTableModel();
             fuzzResultTable = new JXTable(resultsModel);
             fuzzResultTable.setDoubleBuffered(true);
-            fuzzResultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
+            fuzzResultTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
             fuzzResultTable.setName(PANEL_NAME);
             fuzzResultTable.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
             fuzzResultTable.setDefaultRenderer(Pair.class, new IconTableCellRenderer());

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -83,7 +83,9 @@ public abstract class HttpHeader implements java.io.Serializable {
     public static final String SCHEME_HTTPS = "https://";
     public static final String HTTP = "http";
     public static final String HTTPS = "https";
+    public static final String DEFLATE = "deflate";
     public static final String GZIP = "gzip";
+    public static final String IDENTITY = "identity";
     public static final String SEC_PROXY_INTERCEPT = "intercept";
     public static final String SEC_PROXY_RECORD = "record";
     public static final Pattern patternCRLF = Pattern.compile("\\r\\n", Pattern.MULTILINE);

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -357,6 +357,7 @@ public HttpPanelRequest getRequestPanel() {
     		// ZAP: Added 'right arrow' icon
     		requestPanel.setIcon(new ImageIcon(View.class.getResource("/resource/icon/16/105.png")));
             requestPanel.setName(Constant.messages.getString("http.panel.request.title"));	// ZAP: i18n
+            requestPanel.setEnableViewSelect(true);
             requestPanel.loadConfig(Model.getSingleton().getOptionsParam().getConfig());
             requestPanel.setDefaultAccelerator(KeyStroke.getKeyStroke(
             		KeyEvent.VK_R, Event.CTRL_MASK | Event.SHIFT_MASK, false));

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -49,6 +49,7 @@
 // ZAP: 2014/03/23 Issue 969: Proxy - Do not include the response body when answering unsuccessful HEAD requests
 // ZAP: 2014/03/23 Issue 1017: Proxy set to 0.0.0.0 causes incorrect PAC file to be generated
 // ZAP: 2014/03/23 Issue 1022: Proxy - Allow to override a proxied message
+// ZAP: 2014/04/17 Issue 1156: Proxy gzip decoder doesn't update content length in response headers
 
 package org.parosproxy.paros.core.proxy;
 
@@ -414,6 +415,7 @@ private void decodeGZIPResponseIfNeeded(HttpMessage msg) {
                 }
                 msg.setResponseBody(sb.toString());
                 msg.getResponseHeader().setHeader(HttpHeader.CONTENT_ENCODING, null);
+                msg.getResponseHeader().setHeader(HttpHeader.CONTENT_LENGTH, Integer.toString(sb.length()));
             } catch (IOException e) {
                 log.error("Unable to uncompress gzip content: " + e.getMessage(), e);
             }

File: src/org/zaproxy/zap/extension/history/PopupMenuPurgeHistory.java
Patch:
@@ -83,9 +83,7 @@ private void purgeHistory(HistoryReference ref) {
                 .getExtension(ExtensionAlert.NAME);
 
         if (extAlert != null) {
-            while (!ref.getAlerts().isEmpty()) {
-                extAlert.deleteAlert(ref.getAlerts().get(0));
-            }
+            extAlert.deleteHistoryReferenceAlerts(ref);
         }
 
         ref.delete();

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -502,7 +502,7 @@ void recalcAlerts() {
     	AlertNode parent = (AlertNode) getAlertPanel().getTreeAlert().getModel().getRoot();
     	if (parent != null) {
             for (int i=0; i<parent.getChildCount(); i++) {
-                AlertNode child = (AlertNode) parent.getChildAt(i);
+                AlertNode child = parent.getChildAt(i);
             	switch (child.getRisk()) {
             	case Alert.RISK_INFO:	totalInfo++;	break;
             	case Alert.RISK_LOW:	totalLow++;		break;
@@ -599,7 +599,7 @@ private void filterTree(AlertNode node) {
 			}
 		}
 		for (int i=0; i < node.getChildCount(); i++) {
-			this.filterTree((AlertNode)node.getChildAt(i));
+			this.filterTree(node.getChildAt(i));
 		}
 	}
 

File: src/org/zaproxy/zap/extension/alert/AlertTreeModel.java
Patch:
@@ -83,7 +83,7 @@ private AlertNode findLeafNodeForAlert(AlertNode parent, Alert alert) {
             if (child.getChildCount() == 0) {
             	// Its a leaf node
 	        	if (child.getUserObject() != null && 
-	        			((Alert)child.getUserObject()).getAlertId() == alert.getAlertId()) {
+	        			child.getUserObject().getAlertId() == alert.getAlertId()) {
 	        		return child;
 	        	}
             } else {
@@ -228,7 +228,7 @@ private AlertNode findLeaf(AlertNode parent, String nodeName, Alert alert) {
                     return null;
                 }
                 
-                Alert tmp = (Alert) child.getUserObject();
+                Alert tmp = child.getUserObject();
 
                 if (tmp.getParam().equals(alert.getParam()) && tmp.getAttack().equals(alert.getAttack())) {
                 	return child;

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -592,8 +592,8 @@ public void sessionScopeChanged(Session session) {
 	}
 	
 	private void filterTree(AlertNode node) {
-		if (node.getUserObject() != null && node.getUserObject() instanceof Alert) {
-			Alert alert = (Alert) node.getUserObject();
+		if (node.getUserObject() != null) {
+			Alert alert = node.getUserObject();
 			if (this.isInFilter(alert)) {
 				this.getFilteredTreeModel().addPath(alert);
 			}

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -172,7 +172,7 @@ private int getLastScannedId() {
 
 	public void raiseAlert(int id, Alert alert) {
 		if (currentId != id) {
-			logger.error("Alert id != crurentId! " + id + " " + currentId);
+			logger.error("Alert id != currentId! " + id + " " + currentId);
 		}
 		alert.setSourceHistoryId(href.getHistoryId());
 		

File: src/org/zaproxy/zap/extension/pscan/DialogModifyAutoTagScanner.java
Patch:
@@ -46,11 +46,11 @@ public void setApp(RegexAutoTagScanner app) {
     }
     
     @Override
-    protected boolean validateFields() {
-        if (scanner.getName().equals(getNameTextField().getText())) {
+    protected boolean validateName(String name) {
+        if (scanner.getName().equals(name)) {
             return true;
         }
-        return super.validateFields();
+        return super.validateName(name);
     }
 
     @Override

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -506,6 +506,7 @@ public void valueChanged(javax.swing.event.TreeSelectionEvent e) {
 				        if (obj instanceof Alert) {
 				            Alert alert = (Alert) obj;
 						    setMessage(alert.getMessage(), alert.getEvidence());
+						    treeAlert.requestFocusInWindow();
 						    getAlertViewPanel().displayAlert(alert);
 				        } else {
 						    getAlertViewPanel().clearAlert();

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -62,7 +62,7 @@
  */
 public class AddOnLoader extends URLClassLoader {
 
-	private static final String ADDONS_BLOCK_LIST = "addons.block";
+	public static final String ADDONS_BLOCK_LIST = "addons.block";
 	
     private static final Logger logger = Logger.getLogger(AddOnLoader.class);
     private AddOnCollection aoc = null;

File: src/org/zaproxy/zap/extension/autoupdate/UninstalledAddOnsTableModel.java
Patch:
@@ -107,6 +107,8 @@ public Object getValueAt(int rowIndex, int columnIndex) {
         		return Constant.messages.getString("cfu.download.failed");
         	} else if (progress > 0) {
         		return progress + "%";
+        	} else if (getElement(rowIndex).getStatus().equals(AddOnWrapper.Status.newAddon)) {
+        		return Constant.messages.getString("cfu.table.label.new");
         	} else {
         		// TODO change to date ??
         		return getElement(rowIndex).getAddOn().getVersion();

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -95,10 +95,11 @@ public static void install(AddOnClassLoader addOnClassLoader, AddOn addOn) {
      */
     public static boolean uninstall(AddOn addOn) {
         boolean uninstalledWithoutErrors = true;
-        uninstalledWithoutErrors &= uninstallAddOnExtensions(addOn);
         uninstalledWithoutErrors &= uninstallAddOnActiveScanRules(addOn);
         uninstalledWithoutErrors &= uninstallAddOnPassiveScanRules(addOn);
         uninstalledWithoutErrors &= uninstallAddOnFiles(addOn);
+        // This will remove the message bundle, so do it last in case the rules use it
+        uninstalledWithoutErrors &= uninstallAddOnExtensions(addOn);
 
         return uninstalledWithoutErrors;
     }

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -486,7 +486,7 @@ public void alertIfNewVersions() {
 			}
 		}
     	
-		if (! options.isCheckOnStart()) {
+		if (! options.checkOnStart()) {
 			// Top level option not set, dont do anything, unless already downloaded last release
 			if (View.isInitialised() && this.getPreviousVersionInfo() != null) {
 				ZapRelease rel = this.getPreviousVersionInfo().getZapRelease();

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.configuration.HierarchicalConfiguration;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.common.AbstractParam;
+import org.zaproxy.zap.extension.api.ZapApiIgnore;
 
 public class AntiCsrfParam extends AbstractParam {
 
@@ -131,10 +132,12 @@ public List<String> getTokensNames() {
         return enabledTokensNames;
     }
     
+    @ZapApiIgnore
     public boolean isConfirmRemoveToken() {
         return this.confirmRemoveToken;
     }
     
+    @ZapApiIgnore
     public void setConfirmRemoveToken(boolean confirmRemove) {
         this.confirmRemoveToken = confirmRemove;
         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, Boolean.valueOf(confirmRemoveToken));

File: src/org/zaproxy/zap/extension/globalexcludeurl/GlobalExcludeURLParam.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.commons.configuration.HierarchicalConfiguration;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.common.AbstractParam;
+import org.zaproxy.zap.extension.api.ZapApiIgnore;
 
 /** TODO The GlobalExcludeURL functionality is currently alpha and subject to change.  */
 public class GlobalExcludeURLParam extends AbstractParam {
@@ -166,10 +167,12 @@ public List<String> getTokensNames() {
         return enabledTokensNames;
     }
     
+    @ZapApiIgnore
     public boolean isConfirmRemoveToken() {
         return this.confirmRemoveToken;
     }
     
+    @ZapApiIgnore
     public void setConfirmRemoveToken(boolean confirmRemove) {
         this.confirmRemoveToken = confirmRemove;
         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, Boolean.valueOf(confirmRemoveToken));

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsParam.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.commons.configuration.HierarchicalConfiguration;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.common.AbstractParam;
+import org.zaproxy.zap.extension.api.ZapApiIgnore;
 
 /**
  * The HttpSessionsParam is used to store the parameters (options) for the
@@ -190,10 +191,12 @@ public void setEnabledProxyOnly(boolean enabledProxyOnly) {
 		getConfig().setProperty(PROXY_ONLY_KEY, Boolean.valueOf(enabledProxyOnly));
 	}
 	
+	@ZapApiIgnore
 	public boolean isConfirmRemoveDefaultToken() {
 		return this.confirmRemove;
 	}
 	
+	@ZapApiIgnore
 	public void setConfirmRemoveDefaultToken(boolean confirmRemove) {
 		this.confirmRemove = confirmRemove;
 		getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, Boolean.valueOf(confirmRemove));

File: src/org/zaproxy/zap/extension/pscan/PassiveScanParam.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.configuration.HierarchicalConfiguration;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.common.AbstractParam;
+import org.zaproxy.zap.extension.api.ZapApiIgnore;
 import org.zaproxy.zap.extension.pscan.scanner.RegexAutoTagScanner;
 
 
@@ -113,10 +114,12 @@ public List<RegexAutoTagScanner> getAutoTagScanners() {
         return autoTagScanners;
     }
     
+    @ZapApiIgnore
     public boolean isConfirmRemoveAutoTagScanner() {
         return this.confirmRemoveAutoTagScanner;
     }
     
+    @ZapApiIgnore
     public void setConfirmRemoveAutoTagScanner(boolean confirmRemove) {
         this.confirmRemoveAutoTagScanner = confirmRemove;
         getConfig().setProperty(CONFIRM_REMOVE_AUTO_TAG_SCANNER_KEY, Boolean.valueOf(confirmRemoveAutoTagScanner));

File: src/org/zaproxy/zap/spider/SpiderParam.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.common.AbstractParam;
+import org.zaproxy.zap.extension.api.ZapApiIgnore;
 
 /**
  * The SpiderParam wraps all the parameters that are given to the spider.
@@ -750,6 +751,7 @@ private void loadDomainsAlwaysInScope() {
      * @return {@code true} if the remotion needs confirmation, {@code false} otherwise.
      * @since 2.3.0
      */
+    @ZapApiIgnore
     public boolean isConfirmRemoveDomainAlwaysInScope() {
         return this.confirmRemoveDomainAlwaysInScope;
     }
@@ -760,6 +762,7 @@ public boolean isConfirmRemoveDomainAlwaysInScope() {
      * @param confirmRemove {@code true} if the remotion needs confirmation, {@code false} otherwise.
      * @since 2.3.0
      */
+    @ZapApiIgnore
     public void setConfirmRemoveDomainAlwaysInScope(boolean confirmRemove) {
         this.confirmRemoveDomainAlwaysInScope = confirmRemove;
         getConfig().setProperty(CONFIRM_REMOVE_DOMAIN_ALWAYS_IN_SCOPE, Boolean.valueOf(confirmRemoveDomainAlwaysInScope));

File: src/org/zaproxy/zap/control/AddOnInstaller.java
Patch:
@@ -291,7 +291,7 @@ private static boolean uninstallAddOnFiles(AddOn addOn) {
             }
         }
 
-        Control.getSingleton().getExtensionLoader().addonFilesAdded();
+        Control.getSingleton().getExtensionLoader().addonFilesRemoved();
 
         return uninstalledWithoutErrors;
     }

File: src/org/parosproxy/paros/extension/ExtensionPopupMenuItem.java
Patch:
@@ -28,6 +28,7 @@
 // ZAP: 2012/10/02 Issue 385: Added support for Contexts
 // ZAP: 2014/03/23 Changed to implement the interface ExtensionPopupMenuComponent
 // ZAP: 2014/03/23 Changed to implement the new method from ExtensionPopupMenuComponent
+// ZAP: 2014/03/23 Issue 1095: Replace main pop up sub menus with ExtensionPopupMenu when appropriate
 
 package org.parosproxy.paros.extension;
 
@@ -46,7 +47,6 @@ public class ExtensionPopupMenuItem extends JMenuItem implements ExtensionPopupM
 	public static final int EXCLUDE_MENU_INDEX = 1;
 	public static final int CONTEXT_FLAG_MENU_INDEX = 1;	// This is just shown in the response tab
 	public static final int FLAG_MENU_INDEX = 2;
-	public static final int INVOKE_MENU_INDEX = 3;
 	
 	private int menuIndex = -1;
 	private int parentMenuIndex = -1;

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextMenuItemHolder.java
Patch:
@@ -89,14 +89,15 @@ private List<ExtensionPopupMenuItem> getSubmenuItems() {
 
 	@Override
 	public boolean isEnableForComponent(Component invoker) {
+		resetMenu();
+
 		if (visibleItself) {
 			return super.isEnableForComponent(invoker);
 		}
 		return false;
 	}
 
-	@Override
-	public void prepareShow() {
+	private void resetMenu() {
 		final List<JMenuItem> mainPopupMenuItems = View.getSingleton().getPopupList();
 		// Remove existing popup menu items
 		if (visibleItself)

File: src/org/zaproxy/zap/extension/stdmenus/PopupUserMenuItemHolder.java
Patch:
@@ -124,6 +124,8 @@ private List<ExtensionPopupMenuItem> getSubmenuItems() {
 
 	@Override
 	public boolean isEnableForComponent(Component invoker) {
+		resetMenu();
+
 		if (extensionUserAuth == null) {
 			return false;
 		}
@@ -133,8 +135,7 @@ public boolean isEnableForComponent(Component invoker) {
 		return false;
 	}
 
-	@Override
-	public void prepareShow() {
+	private void resetMenu() {
 		final List<JMenuItem> mainPopupMenuItems = View.getSingleton().getPopupList();
 		// Remove existing popup menu items
 		if (visibleItself)

File: src/org/zaproxy/zap/view/popup/PopupMenuHttpMessageContainer.java
Patch:
@@ -225,7 +225,7 @@ protected final Invoker getInvoker() {
      * <h3>Notifying and processing child menus</h3>
      * <p>
      * When the method {@code isProcessExtensionPopupChildren()} returns true, the method
-     * {@code isEnableForComponent(Component)} is called on all child {@code PopupMenuHistoryReference}s.
+     * {@code isEnableForComponent(Component)} is called on all child {@code ExtensionPopupMenuComponent}s.
      * </p>
      * <p>
      * <strong>Note:</strong> Override of this method should be done with extra care as it might break all the expected

File: src/org/parosproxy/paros/core/proxy/ProxyListener.java
Patch:
@@ -29,6 +29,8 @@
 /**
  * A listener that will be notified when a new request is ready to be forwarded
  * to the server and when a new response is ready to be forwarded to the client.
+ * 
+ * @see OverrideMessageProxyListener
  */
 // ZAP: Changed the JavaDoc.
 public interface ProxyListener extends ArrangeableProxyListener {

File: src/org/zaproxy/zap/extension/httppanel/view/paramtable/ExtensionHttpPanelRequestFormTableView.java
Patch:
@@ -23,6 +23,8 @@ public class ExtensionHttpPanelRequestFormTableView extends ExtensionAdaptor {
 	
 	public ExtensionHttpPanelRequestFormTableView() {
 		super(NAME);
+
+		setOrder(105);
 	}
 	
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/view/posttable/ExtensionRequestPostTableView.java
Patch:
@@ -32,6 +32,8 @@ public class ExtensionRequestPostTableView extends ExtensionAdaptor {
 	
 	public ExtensionRequestPostTableView() {
 		super(NAME);
+
+		setOrder(80);
 	}
 
 	@Override

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -47,6 +47,7 @@
 // ZAP: 2014/03/23 Issue 122: ProxyThread logging timeout readings with incorrect message (URL)
 // ZAP: 2014/03/23 Issue 585: Proxy - "502 Bad Gateway" errors responded as "504 Gateway Timeout"
 // ZAP: 2014/03/23 Issue 969: Proxy - Do not include the response body when answering unsuccessful HEAD requests
+// ZAP: 2014/03/23 Issue 1017: Proxy set to 0.0.0.0 causes incorrect PAC file to be generated
 
 package org.parosproxy.paros.core.proxy;
 
@@ -549,8 +550,7 @@ private boolean isRecursive(HttpRequestHeader header) {
                     return true;
                 }
                 InetAddress targetAddress = InetAddress.getByName(targetDomain);
-                if (parentServer.getProxyParam().getProxyIp().isEmpty()
-                        || InetAddress.getByName(parentServer.getProxyParam().getProxyIp()).isAnyLocalAddress()) {
+                if (parentServer.getProxyParam().isProxyIpAnyLocalAddress()) {
                     if (targetAddress.isLoopbackAddress() || targetAddress.isSiteLocalAddress()
                             || targetAddress.isAnyLocalAddress()) {
                         return true;

File: src/org/zaproxy/zap/extension/compare/ExtensionCompare.java
Patch:
@@ -27,9 +27,9 @@
 import java.text.MessageFormat;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.TreeSet;
-import java.util.Vector;
 
 import javax.swing.JFileChooser;
 import javax.swing.JMenuItem;
@@ -152,8 +152,8 @@ private void buildHistoryMap (TableHistory th, Map<String, String> map)
     		return;
     	}
 
-    	Vector<Integer> hIds = th.getHistoryList(rh.getSessionId(), HistoryReference.TYPE_PROXIED);
-    	hIds.addAll(th.getHistoryList(rh.getSessionId(), HistoryReference.TYPE_ZAP_USER));
+        List<Integer> hIds = th.getHistoryIdsOfHistType(
+                rh.getSessionId(), HistoryReference.TYPE_PROXIED, HistoryReference.TYPE_ZAP_USER);
     	for (Integer hId : hIds) {
     		RecordHistory recH = th.read(hId);
     		URI uri = recH.getHttpMessage().getRequestHeader().getURI();

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -112,7 +112,7 @@ private void search() {
         		return;
         	}
 
-			List<Integer> list = Model.getSingleton().getDb().getTableHistory().getHistoryList(session.getSessionId());
+			List<Integer> list = Model.getSingleton().getDb().getTableHistory().getHistoryIds(session.getSessionId());
 			int last = list.size();
 			int currentRecordId = 0;
 			for (int index=0;index < last;index++){

File: src/org/zaproxy/zap/view/popup/PopupMenuHttpMessageContainer.java
Patch:
@@ -28,6 +28,7 @@
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.ascan.ActiveScanPanel;
 import org.zaproxy.zap.extension.fuzz.impl.http.HttpFuzzerContentPanel;
+import org.zaproxy.zap.extension.search.SearchPanel;
 import org.zaproxy.zap.view.popup.PopupMenuUtils;
 import org.zaproxy.zap.view.messagecontainer.MessageContainer;
 import org.zaproxy.zap.view.messagecontainer.http.HttpMessageContainer;
@@ -333,7 +334,7 @@ protected final static Invoker getInvoker(HttpMessageContainer httpMessageContai
         case "treeAlert":
             invoker = Invoker.ALERTS_PANEL;
             break;
-        case "listSearch":
+        case SearchPanel.HTTP_MESSAGE_CONTAINER_NAME:
             invoker = Invoker.SEARCH_PANEL;
             break;
         case ActiveScanPanel.MESSAGE_CONTAINER_NAME:

File: src/org/zaproxy/zap/view/popup/PopupMenuItemHttpMessageContainer.java
Patch:
@@ -33,6 +33,7 @@
 import org.zaproxy.zap.extension.alert.AlertPanel;
 import org.zaproxy.zap.extension.ascan.ActiveScanPanel;
 import org.zaproxy.zap.extension.fuzz.impl.http.HttpFuzzerContentPanel;
+import org.zaproxy.zap.extension.search.SearchPanel;
 import org.zaproxy.zap.view.messagecontainer.MessageContainer;
 import org.zaproxy.zap.view.messagecontainer.http.HttpMessageContainer;
 import org.zaproxy.zap.view.messagecontainer.http.SelectableHttpMessagesContainer;
@@ -258,7 +259,7 @@ private static Invoker getInvoker(HttpMessageContainer httpMessageContainer) {
         case AlertPanel.ALERT_TREE_PANEL_NAME:
             invoker = Invoker.ALERTS_PANEL;
             break;
-        case "listSearch":
+        case SearchPanel.HTTP_MESSAGE_CONTAINER_NAME:
             invoker = Invoker.SEARCH_PANEL;
             break;
         case ActiveScanPanel.MESSAGE_CONTAINER_NAME:

File: src/org/zaproxy/zap/extension/help/ExtensionHelp.java
Patch:
@@ -43,7 +43,7 @@
  */
 public class ExtensionHelp extends ExtensionAdaptor {
 
-	private static final String helpHS = "ZapHelp";
+	private static final String HELP_SET_FILE_NAME = "helpset";
 
 	private ZapMenuItem menuHelpZap = null;
 	private JButton helpButton = null;
@@ -98,7 +98,7 @@ private static synchronized void createHelpBroker() {
 		if (hb == null) {
 			try {
 				ClassLoader cl = HelpBroker.class.getClassLoader();  
-				URL hsUrl = HelpSet.findHelpSet( cl, helpHS);
+				URL hsUrl = HelpSet.findHelpSet( cl, HELP_SET_FILE_NAME, Constant.getLocale());
 				if (hsUrl != null) {
 					hs = new HelpSet(cl, hsUrl);
 					hb = hs.createHelpBroker();

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -144,8 +144,6 @@ public void hook(ExtensionHook extensionHook) {
             extensionHook.getHookView().addOptionPanel(getOptionsScannerPanel());
             extensionHook.getHookView().addOptionPanel(getOptionsVariantPanel());
 
-            this.getActiveScanPanel().setDisplayPanel(getView().getRequestPanel(), getView().getResponsePanel());
-
 	        View.getSingleton().addMainToolbarButton(this.getPolicyButton());
 
             ExtensionHelp.enableHelpKey(getActiveScanPanel(), "ui.tabs.ascan");

File: src/org/zaproxy/zap/extension/bruteforce/ExtensionBruteForce.java
Patch:
@@ -107,8 +107,6 @@ public void hook(ExtensionHook extensionHook) {
             extensionHook.getHookMenu().addPopupMenuItem(getPopupMenuBruteForceDirectory());
             extensionHook.getHookMenu().addPopupMenuItem(getPopupMenuBruteForceDirectoryAndChildren());
 
-	        this.getBruteForcePanel().setDisplayPanel(getView().getRequestPanel(), getView().getResponsePanel());
-
 	    	ExtensionHelp.enableHelpKey(getBruteForcePanel(), "ui.tabs.bruteforce");
 	    }
 	}

File: src/org/zaproxy/zap/view/HistoryReferenceTableModel.java
Patch:
@@ -49,15 +49,15 @@ public enum COLUMN  {HREF_ID, TYPE_FLAG, METHOD, URL, CODE, REASON, RTT, SIZE, S
 	/** The column names. */
 	private static final String[] COLUMN_NAMES = { 
 			Constant.messages.getString("view.href.table.header.hrefid"),
-			Constant.messages.getString("view.href.table.header.typeflag"),
+			Constant.messages.getString("view.href.table.header.hreftype"),
 			Constant.messages.getString("view.href.table.header.method"),
 			Constant.messages.getString("view.href.table.header.url"),
 			Constant.messages.getString("view.href.table.header.code"),
 			Constant.messages.getString("view.href.table.header.reason"),
 			Constant.messages.getString("view.href.table.header.rtt"),
-			Constant.messages.getString("view.href.table.header.size"),
+			Constant.messages.getString("view.href.table.header.size.message"),
 			Constant.messages.getString("view.href.table.header.sessionid"),
-			Constant.messages.getString("view.href.table.header.alertflag"),
+			Constant.messages.getString("view.href.table.header.highestalert"),
 			Constant.messages.getString("view.href.table.header.tags",
 			"", 	/* CUSTOM_1 */
 			"", 	/* CUSTOM_2 */

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceDirectory.java
Patch:
@@ -31,7 +31,7 @@ public PopupMenuBruteForceDirectory(String label) {
     }
     
     @Override
-    public void performAction(SiteNode node) throws Exception {
+    public void performAction(SiteNode node) {
         if (node != null) {
             getExtensionBruteForce().bruteForceDirectory(node);
         }

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceDirectoryAndChildren.java
Patch:
@@ -31,7 +31,7 @@ public PopupMenuBruteForceDirectoryAndChildren(String label) {
     }
     
     @Override
-    public void performAction(SiteNode node) throws Exception {
+    public void performAction(SiteNode node) {
         if (node != null) {
             getExtensionBruteForce().bruteForceDirectoryAndChildren(node);
         }

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextMenuItemHolder.java
Patch:
@@ -10,9 +10,10 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.ExtensionPopupMenu;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.view.popup.PopupMenuItemContext;
 
 /**
- * The Class PopupContextMenuItemHolder is used as a holder for multiple {@link PopupContextMenu}. Depending
+ * The Class PopupContextMenuItemHolder is used as a holder for multiple {@link PopupMenuItemContext}. Depending
  * on the initialization, it can be shown by itself containing the Popup Menus for each Context or it can just
  * place the Popup Menus in its parent.
  */
@@ -123,7 +124,7 @@ public void prepareShow() {
 	}
 
 	/**
-	 * Gets the {@link PopupContextMenu} associated with a particular context.
+	 * Gets the {@link PopupMenuItemContext} associated with a particular context.
 	 * 
 	 * @param context the context
 	 * @param parentName the parent menu's name

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderContext.java
Patch:
@@ -27,6 +27,7 @@
 import org.parosproxy.paros.model.SiteNode;
 import org.zaproxy.zap.extension.spider.ExtensionSpider;
 import org.zaproxy.zap.model.Context;
+import org.zaproxy.zap.view.popup.PopupMenuItemContext;
 
 /**
  * The Class PopupMenuSpiderContext.
@@ -64,12 +65,12 @@ private ExtensionSpider getExtensionSpider() {
 
 	@Override
 	public ExtensionPopupMenuItem getPopupContextMenu(Context context, String parentName) {
-		return new PopupContextMenu(context, parentName, context.getName()) {
+		return new PopupMenuItemContext(context, parentName, context.getName()) {
 
 			private static final long serialVersionUID = -2524944630833835369L;
 
 			@Override
-			public void performAction(SiteNode sn) throws Exception {
+			public void performAction(SiteNode sn) {
 				getExtensionSpider().startScanAllInContext(getContext(), null);
 			}
 		};

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderContextAsUser.java
Patch:
@@ -68,7 +68,7 @@ public PopupUserMenu getPopupUserMenu(Context context, User user, String parentN
 			private static final long serialVersionUID = 3914042295666599416L;
 
 			@Override
-			public void performAction(SiteNode sn) throws Exception {
+			public void performAction(SiteNode sn) {
 				if (sn != null) {
 					getExtensionSpider().startScanAllInContext(getContext(), getUser());
 				}

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderURLAsUser.java
Patch:
@@ -68,7 +68,7 @@ public PopupUserMenu getPopupUserMenu(Context context, User user, String parentN
 			private static final long serialVersionUID = 3914042295666599416L;
 
 			@Override
-			public void performAction(SiteNode sn) throws Exception {
+			public void performAction(SiteNode sn) {
 				if (sn != null) {
 					getExtensionSpider().startScanNode(sn, getUser());
 				}

File: src/org/zaproxy/zap/extension/bruteforce/BruteForceListenner.java
Patch:
@@ -25,9 +25,9 @@
 
 public interface BruteForceListenner {
 
-	void scanFinshed(String host);
+	void scanFinshed(ScanTarget target);
 	
-	void scanProgress(String host, int port, int done, int todo);
+	void scanProgress(ScanTarget target, int done, int todo);
 	
     void foundDir(URL url, int statusCode, String response, String baseCase, String rawResponse, BaseCase baseCaseObj);
 }

File: src/org/zaproxy/zap/extension/api/PythonAPIGenerator.java
Patch:
@@ -149,6 +149,9 @@ private void generatePythonElement(ApiElement element, String component,
 				}
 			}
 			out.write("})");
+			if (type.equals("view")) {
+				out.write(".get('" + element.getName() + "')");
+			}
 		} else {
 			if (element.getName().startsWith("option")) {
 				out.write(").get('" + element.getName().substring(6) + "')");

File: src/org/zaproxy/zap/extension/api/PythonAPIGenerator.java
Patch:
@@ -82,7 +82,7 @@ private void generatePythonElement(ApiElement element, String component,
 							(element.getOptionalParamNames() != null &&
 								element.getOptionalParamNames().size() > 0);
 				
-		if (! hasParams) {
+		if (!(hasParams || type.equals("action"))) {
 			out.write("    @property\n");
 		}
 		out.write("    def " + createFunctionName(element.getName()) + "(self");

File: src/org/zaproxy/zap/view/HistoryReferenceTable.java
Patch:
@@ -151,7 +151,7 @@ private void displayMessage(HttpMessage msg) {
 
 	public HistoryReference getSelectedValue() {
 		if (this.getSelectedRow() >= 0) {
-			return model.getHistoryReference(this.getSelectedRow());
+			return model.getHistoryReference(convertRowIndexToModel(this.getSelectedRow()));
 		}
 		return null;
 	}
@@ -161,7 +161,7 @@ public List<HistoryReference> getSelectedValues() {
 		if (rows != null) {
 			List<HistoryReference> hrefList = new ArrayList<>(rows.length);
 			for (int row : rows) {
-				hrefList.add(this.getHrefModel().getHistoryReference(row));
+				hrefList.add(this.getHrefModel().getHistoryReference(convertRowIndexToModel(row)));
 			}
 			return hrefList;
 		}

File: src/org/parosproxy/paros/extension/option/OptionsConnectionPanel.java
Patch:
@@ -545,7 +545,6 @@ public void saveParam(Object obj) throws Exception {
 	    OptionsParam optionsParam = (OptionsParam) obj;
 	    ConnectionParam connectionParam = optionsParam.getConnectionParam();
 	    int timeout;
-	    String sslPorts;
 
         try {
             timeout = Integer.parseInt(txtTimeoutInSecs.getText());

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -466,11 +466,11 @@ public void alertIfNewVersions() {
                 int result = getView().showConfirmDialog(
                 		Constant.messages.getString("cfu.confirm.startCheck"));
                 if (result == JOptionPane.OK_OPTION) {
-                	param.setCheckOnStart(1);
+                	param.setCheckOnStart(true);
                 	param.setCheckAddonUpdates(true);
                 	param.setDownloadNewRelease(true);
                 } else {
-                	param.setCheckOnStart(0);
+                	param.setCheckOnStart(false);
                 }
                 // Save
 			    try {

File: src/org/zaproxy/zap/extension/autoupdate/OptionsCheckForUpdatesPanel.java
Patch:
@@ -269,7 +269,7 @@ public void validateParam(Object obj) {
 	@Override
 	public void saveParam (Object obj) throws Exception {
 	    OptionsParam options = (OptionsParam) obj;
-	    options.getCheckForUpdatesParam().setCheckOnStart((getChkCheckOnStart().isSelected()) ? 1 : 0);
+	    options.getCheckForUpdatesParam().setCheckOnStart(getChkCheckOnStart().isSelected());
 	    options.getCheckForUpdatesParam().setDownloadNewRelease(getChkDownloadNewRelease().isSelected());
 		options.getCheckForUpdatesParam().setCheckAddonUpdates(getChkCheckAddonUpdates().isSelected());
 		options.getCheckForUpdatesParam().setInstallAddonUpdates(getChkInstallAddonUpdates().isSelected());

File: src/org/parosproxy/paros/view/MainFrame.java
Patch:
@@ -66,6 +66,7 @@ public MainFrame(int displayOption) {
 		
 		changeDisplayOption(displayOption);
 
+
 	  /* select the current names/icons button */
 		if(Model.getSingleton().getOptionsParam().getViewParam().getShowTabNames()) {
   		this.getMainToolbarPanel().setTabNamesOption(View.DISPLAY_OPTION_ICONNAMES);

File: src/org/zaproxy/zap/extension/forceduser/ContextForcedUserPanel.java
Patch:
@@ -161,7 +161,8 @@ public void tableChanged(TableModelEvent e) {
 			// the previously selected item does not exist any more
 			else if (selectedItem == null
 					|| ((e.getType() == TableModelEvent.DELETE || e.getType() == TableModelEvent.UPDATE) && getIndexOf(selectedItem) == -1))
-				setSelectedItem(getElementAt(0));
+				if (getSize() > 0)
+					setSelectedItem(getElementAt(0));
 			fireContentsChanged(this, e.getFirstRow(), e.getLastRow());
 		}
 

File: src/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -264,7 +264,7 @@ public Date getTimeFinished() {
 
 	@Override
 	public void setScanAsUser(User user) {
-		// TODO Should be implemented to make the Active Scan work from the point of view of a User
+		this.setUser(user);
 	}
 	
 }

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -679,9 +679,7 @@ protected void startScan(SiteNode startNode, boolean justScanInScope, boolean sc
 				scanThread.setStartNode(startNode);
 			}
 		}
-		if (scanUser!=null) {
-			scanThread.setScanAsUser(scanUser);
-		}
+		scanThread.setScanAsUser(scanUser);
 		
 		scanThread.setScanChildren(scanChildren);
 		if (contextSpecificObjects != null) {

File: src/org/zaproxy/zap/view/StandardFieldsDialog.java
Patch:
@@ -425,7 +425,7 @@ public void addComboField(String fieldLabel, List<String> choices, String value,
 	}
 
 	public void addComboField(int tabIndex, String fieldLabel, String[] choices, String value) {
-		this.addComboField(fieldLabel, choices, value, false);
+		this.addComboField(tabIndex, fieldLabel, choices, value, false);
 	}
 
 	public void addComboField(int tabIndex, String fieldLabel, String[] choices, String value, boolean editable) {

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -260,9 +260,10 @@ public synchronized SiteNode addPath(HistoryReference ref) {
      * @return 
      */
     public SiteNode addPath(HistoryReference ref, HttpMessage msg) {
-    	if (! SwingUtilities.isEventDispatchThread()) {
+    	if (! SwingUtilities.isEventDispatchThread() &&
+    			! Thread.currentThread().getName().startsWith("ZAP")) {
     		// Log an error but carry on anyway
-    		log.error("SiteMap.addPath not on EDT", new Exception());
+    		log.error("SiteMap.addPath not on EDT " + Thread.currentThread().getName(), new Exception());
     	}
         
         URI uri = msg.getRequestHeader().getURI();

File: src/org/parosproxy/paros/view/AbstractParamDialog.java
Patch:
@@ -189,7 +189,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
                         AbstractParamDialog.this.setVisible(false);
 
                     } catch (Exception ex) {
-                        log.debug(ex.getMessage(), ex);
+                        log.warn(ex.getMessage(), ex);
                         View.getSingleton().showWarningDialog(ex.getMessage());
                     }
 

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -259,7 +259,7 @@ public void addAddon(AddOn ao) {
 				   		try {
 							ext.postInstall();
 						} catch (Exception e) {
-    						logger.error("Post install methof failed for add-on " + ext.getName());
+    						logger.error("Post install method failed for add-on " + ext.getName());
 						}
 			   		}
         		}

File: src/org/parosproxy/paros/view/AbstractParamDialog.java
Patch:
@@ -50,7 +50,6 @@
 public class AbstractParamDialog extends AbstractDialog {
 
     private static final long serialVersionUID = -5223178126156052670L;
-    protected Object paramObject = null;
     
     private int exitResult = JOptionPane.CANCEL_OPTION;
     

File: src/org/parosproxy/paros/view/SessionDialog.java
Patch:
@@ -77,7 +77,7 @@ private void initialize() {
 
 	@Override
 	public void initParam(Object obj) {
-		super.paramObject = obj;
+		super.initParam(obj);
 		// NOTE: Creation of UI Shared Contexts should be done/redone before calling this method.
 		// Send the 'ui context' duplicate to Context Properties Panels
 		for (AbstractParamPanel panel : super.getPanels()) {

File: src/org/zaproxy/zap/view/AbstractContextPropertiesPanel.java
Patch:
@@ -77,7 +77,7 @@ protected Context getUISharedContext() {
 
 	@Override
 	public void initParam(Object obj) {
-		throw new RuntimeException("InitParam should not be called on Abstract Context Property panels.");
+		// Ignore
 	}
 
 	@Override

File: src/org/zaproxy/zap/session/CookieBasedSessionManagementMethodType.java
Patch:
@@ -84,7 +84,8 @@ public WebSession extractWebSession(HttpMessage msg) {
 				session.getHttpState();
 				for (HttpCookie c : msg.getRequestHeader().getHttpCookies())
 					session.getHttpState().addCookie(convertCookie(c));
-				for (HttpCookie c : msg.getResponseHeader().getHttpCookies())
+				// Use the messages hostname as default domain when generating SET cookies
+				for (HttpCookie c : msg.getResponseHeader().getHttpCookies(msg.getRequestHeader().getHostName()))
 					session.getHttpState().addCookie(convertCookie(c));
 				return session;
 			}

File: src/org/zaproxy/zap/session/CookieBasedSessionManagementMethodType.java
Patch:
@@ -101,6 +101,7 @@ public void processMessageToMatchSession(HttpMessage message, WebSession session
 			// Remove any cookies that will be added by the HttpState from the message
 			List<HttpCookie> cookies = message.getRequestHeader().getHttpCookies();
 			Iterator<HttpCookie> it = cookies.iterator();
+			
 			while (it.hasNext()) {
 				HttpCookie c = it.next();
 				for (Cookie sc : session.getHttpState().getCookies())
@@ -109,8 +110,7 @@ public void processMessageToMatchSession(HttpMessage message, WebSession session
 						break;
 					}
 			}
-			if (cookies.size() > 0)
-				message.setCookies(cookies);
+			message.setCookies(cookies);
 		}
 
 		private ExtensionHttpSessions getHttpSessionsExtension() {

File: src/org/parosproxy/paros/core/scanner/Plugin.java
Patch:
@@ -27,6 +27,7 @@
 // ZAP: 2013/07/12 Issue 713: Add CWE and WASC numbers to issues
 // ZAP: 2013/09/08 Issue 691: Handle old plugins
 // ZAP: 2014/02/12 Issue 1030: Load and save scan policies
+// ZAP: 2014/02/21 Issue 1043: Custom active scan dialog
 
 package org.parosproxy.paros.core.scanner;
 
@@ -161,6 +162,8 @@ public enum AttackStrength {
     void saveTo(Configuration conf);
 
     void loadFrom(Configuration conf);
+    
+    void cloneInto(Plugin plugin);
 
     void createParamIfNotExist();
 

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -48,7 +48,6 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
-import org.parosproxy.paros.core.scanner.PluginFactory;
 import org.parosproxy.paros.extension.Extension;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.view.View;
@@ -233,7 +232,7 @@ public void addAddon(AddOn ao) {
 	    			if (ascanNames != null) {
 	    				for (String name : ascanNames) {
 	    					logger.debug("Install ascanrule: " + name);
-	    					if (!PluginFactory.addPlugin(name)) {
+	    					if (!Control.getSingleton().getPluginFactory().addPlugin(name)) {
 	    						logger.error("Failed to install ascanrule: " + name);
 	    					}
 	    				}
@@ -330,7 +329,7 @@ public boolean removeAddOn(AddOn ao, boolean upgrading) {
 			if (ascanNames != null) {
 				for (String name : ascanNames) {
 					logger.debug("Uninstall ascanrule: " + name);
-					if (!PluginFactory.removePlugin(name)) {
+					if (!Control.getSingleton().getPluginFactory().removePlugin(name)) {
 						logger.error("Failed to uninstall ascanrule: " + name);
 						result = false;
 					}

File: src/org/parosproxy/paros/core/scanner/VariantJSONQuery.java
Patch:
@@ -200,7 +200,7 @@ private void parseValue(String fieldName) {
             
             // Now we have the string object value
             // Put everything inside the parameter array
-            addParameter(fieldName, beginToken, sr.getPosition(), false, true);
+            addParameter(fieldName, beginToken, sr.getPosition()-1, false, true);
             
         // check if the value is a number
         } else if (Character.isDigit(chr) || chr == '-') {
@@ -220,7 +220,7 @@ private void parseValue(String fieldName) {
             sr.unreadLastCharacter();
             // Now we have the int object value
             // Put everything inside the parameter array
-            addParameter(fieldName, beginToken, sr.getPosition(), true, false);            
+            addParameter(fieldName, beginToken, sr.getPosition()-1, true, false);            
             
         } else if (chr == BEGIN_OBJECT) {
             sr.unreadLastCharacter();

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -340,7 +340,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 			
 		} catch (ApiException e) {
 			response =  e.toString(format);
- 			logger.debug("handleApiRequest error: " + response, e);
+ 			logger.warn("handleApiRequest error: " + response, e);
 		}
 		
 		if (format == null || ! format.equals(Format.OTHER) && shortcutImpl == null) {

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -40,7 +40,7 @@ public class ApiException extends Exception {
 	
 	public enum Type {BAD_FORMAT, BAD_TYPE, NO_IMPLEMENTOR, BAD_ACTION, BAD_VIEW, BAD_OTHER, INTERNAL_ERROR, MISSING_PARAMETER, 
 		URL_NOT_FOUND, HREF_NOT_FOUND, SCAN_IN_PROGRESS, DISABLED, ALREADY_EXISTS, DOES_NOT_EXIST, ILLEGAL_PARAMETER, CONTEXT_NOT_FOUND,
-		USER_NOT_FOUND, URL_NOT_IN_CONTEXT, BAD_API_KEY};
+		USER_NOT_FOUND, URL_NOT_IN_CONTEXT, BAD_API_KEY, SCRIPT_NOT_FOUND, BAD_SCRIPT_FORMAT};
 	
 	private final String detail;
 
@@ -70,10 +70,10 @@ public ApiException(Type type, String detail, Throwable cause) {
 	public String toString () {
 		if (detail != null) {
 			return Constant.messages.getString("api.error." + super.getMessage()) +
-				"(" + super.getMessage() + ") : " + detail;
+				" (" + super.getMessage() + ") : " + detail;
 		}
 		return Constant.messages.getString("api.error." + super.getMessage()) +
-			"(" + super.getMessage() + ")";
+			" (" + super.getMessage() + ")";
 	}
 
 	public String toString(API.Format format) {

File: src/org/zaproxy/zap/extension/globalexcludeurl/ExtensionGlobalExcludeURL.java
Patch:
@@ -78,7 +78,7 @@ public ExtensionGlobalExcludeURL() {
 
 	private void initialize() {
         this.setName(NAME);
-        this.setOrder(50);
+        this.setOrder(969);		// TODO find optimal load order at some point
 	}
 
 	@Override

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -200,7 +200,8 @@ public WebSession authenticate(SessionManagementMethod sessionManagementMethod,
 			if (!(credentials instanceof UsernamePasswordAuthenticationCredentials)) {
 				throw new UnsupportedAuthenticationCredentialsException(
 						"Form based authentication method only supports "
-								+ UsernamePasswordAuthenticationCredentials.class.getSimpleName());
+								+ UsernamePasswordAuthenticationCredentials.class.getSimpleName()
+								+ ". Received: " + credentials.getClass());
 			}
 			UsernamePasswordAuthenticationCredentials cred = (UsernamePasswordAuthenticationCredentials) credentials;
 

File: src/org/parosproxy/paros/core/scanner/VariantCookie.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class VariantCookie implements Variant {
 
-    private List<NameValuePair> params = new ArrayList<>();
+    private final List<NameValuePair> params = new ArrayList<>();
 
     /**
      * 

File: src/org/parosproxy/paros/core/scanner/VariantFormQuery.java
Patch:
@@ -25,7 +25,8 @@
 // ZAP: 2013/12/06 Constrained the data content handling to application/x-www-form-urlencoded
 // ZAP: 2013/12/09 Solved NullPointerException when the request header doesn't contain "Content-Type" header field
 // ZAP: 2014/01/06 Issue 965: Support 'single page' apps and 'non standard' parameter separators
-
+// ZAP: 2014/02/08 Used the same constants used in ScanParam Target settings
+//
 package org.parosproxy.paros.core.scanner;
 
 import org.parosproxy.paros.model.Model;
@@ -47,7 +48,7 @@ public void setMessage(HttpMessage msg) {
         String contentType = msg.getRequestHeader().getHeader(HttpHeader.CONTENT_TYPE);
         // ZAP: added control for null contentType
         if (contentType != null && contentType.startsWith(WWW_APP_URL_ENCODED)) {
-        	this.setParams(NameValuePair.TYPE_FORM, Model.getSingleton().getSession().getParams(msg, Type.form));
+        	this.setParams(NameValuePair.TYPE_POST_DATA, Model.getSingleton().getSession().getParams(msg, Type.form));
         }
     }
             

File: src/org/parosproxy/paros/core/scanner/VariantHeader.java
Patch:
@@ -42,8 +42,8 @@ public class VariantHeader implements Variant {
         HttpRequestHeader.HOST
     };
     
-    private List<NameValuePair> params = new ArrayList<>();
-    private static Logger log = Logger.getLogger(VariantHeader.class);
+    private final List<NameValuePair> params = new ArrayList<>();
+    private static final Logger log = Logger.getLogger(VariantHeader.class);
 
     /**
      * 

File: src/org/parosproxy/paros/core/scanner/VariantMultipartFormQuery.java
Patch:
@@ -35,8 +35,8 @@
  */
 public class VariantMultipartFormQuery implements Variant {
 
-    private List<NameValuePair> stringParam = new ArrayList<>();
-    private List<MultipartParam> fileParam = new ArrayList<>();
+    private final List<NameValuePair> stringParam = new ArrayList<>();
+    private final List<MultipartParam> fileParam = new ArrayList<>();
     private String boundary = null;
 
     /**
@@ -62,7 +62,7 @@ public void setMessage(HttpMessage msg) {
             while ((param = parser.getNextParam()) != null) {
                 if (param.getFileName() == null) {
                     // This is a parameter, add it to the vector of values
-                    stringParam.add(new NameValuePair(NameValuePair.TYPE_MULTIPART_FORM, 
+                    stringParam.add(new NameValuePair(NameValuePair.TYPE_POST_DATA, 
                     		param.getName(), param.getContent(), index++));
 
                 } else {

File: src/org/parosproxy/paros/core/scanner/VariantURLPath.java
Patch:
@@ -39,7 +39,7 @@
 public class VariantURLPath implements Variant {
 
     private final Logger logger = Logger.getLogger(this.getClass());
-    private List<NameValuePair> stringParam = new ArrayList<>();
+    private final List<NameValuePair> stringParam = new ArrayList<>();
 
     /**
      *
@@ -61,7 +61,7 @@ public void setMessage(HttpMessage msg) {
                 int i = 0;
                 for (String path : paths) {
                     if (path.length() > 0) {
-                        stringParam.add(new NameValuePair(NameValuePair.TYPE_URL, path, getUnescapedValue(path), i));
+                        stringParam.add(new NameValuePair(NameValuePair.TYPE_URL_PATH, path, getUnescapedValue(path), i));
                     }
                     
                     i++;

File: src/org/zaproxy/zap/extension/anticsrf/PopupMenuGenerateForm.java
Patch:
@@ -45,7 +45,7 @@ public boolean isEnableForInvoker(Invoker invoker) {
 	@Override
 	public void performAction(HistoryReference href) throws Exception {
 		// Redirect to the form generated by the API
-		DesktopUtils.openUrlInBrowser(AntiCsrfAPI.ANTI_CSRF_FORM_URL + href.getHistoryId());
+		DesktopUtils.openUrlInBrowser(AntiCsrfAPI.getAntiCsrfFormUrl(href.getHistoryId()));
 	}
 
 	@Override

File: src/org/parosproxy/paros/extension/AbstractDialog.java
Patch:
@@ -32,6 +32,7 @@
 import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.KeyEvent;
+import java.awt.event.WindowEvent;
 
 import javax.swing.AbstractAction;
 import javax.swing.JComponent;
@@ -85,12 +86,11 @@ private void initialize() {
 		
         //  Handle escape key to close the dialog    
         KeyStroke escape = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
-        final AbstractDialog ad = this;
         AbstractAction escapeAction = new AbstractAction() {
 			private static final long serialVersionUID = 3516424501887406165L;
 			@Override
             public void actionPerformed(ActionEvent e) {
-                ad.setVisible(false);
+				dispatchEvent(new WindowEvent(AbstractDialog.this, WindowEvent.WINDOW_CLOSING));
             }
         };
         getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escape, "ESCAPE");

File: src/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -33,6 +33,7 @@
 // ZAP: 2012/08/01 Issue 332: added support for Modes
 // ZAP: 2012/11/21 Heavily refactored extension to support non-HTTP messages.
 // ZAP: 2013/05/02 Re-arranged all modifiers into Java coding standard order
+// ZAP: 2014/01/28 Issue 207: Support keyboard shortcuts 
 
 package org.parosproxy.paros.extension.manualrequest;
 
@@ -46,7 +47,6 @@
 import java.awt.event.WindowEvent;
 
 import javax.swing.JButton;
-import javax.swing.JMenuItem;
 import javax.swing.JPanel;
 
 import org.apache.log4j.Logger;
@@ -59,6 +59,7 @@
 import org.zaproxy.zap.extension.httppanel.HttpPanelRequest;
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.tab.Tab;
+import org.zaproxy.zap.view.ZapMenuItem;
 
 /**
  * Send custom crafted messages via HTTP or other TCP based protocols. 
@@ -123,7 +124,7 @@ public void windowClosing(WindowEvent e) {
 	 * 
 	 * @return
 	 */
-	public abstract JMenuItem getMenuItem();
+	public abstract ZapMenuItem getMenuItem();
 
 	protected JPanel getWindowPanel() {
 		if (panelWindow == null) {

File: src/org/zaproxy/zap/extension/ascan/PolicyDialog.java
Patch:
@@ -86,7 +86,7 @@ public void addPolicyPanel(AbstractParamPanel panel) {
      *
      * @return org.parosproxy.paros.extension.scanner.PolicyAllCategoryPanel
      */
-    private PolicyAllCategoryPanel getPolicyAllCategoryPanel() {
+    public PolicyAllCategoryPanel getPolicyAllCategoryPanel() {
         if (policyAllCategoryPanel == null) {
             policyAllCategoryPanel = new PolicyAllCategoryPanel();
             policyAllCategoryPanel.setName(Constant.messages.getString("ascan.policy.title"));

File: src/org/zaproxy/zap/extension/forceduser/ContextForcedUserPanel.java
Patch:
@@ -143,7 +143,6 @@ public UsersListModel(UsersTableModel tableModel) {
 
 		@Override
 		public User getElementAt(int index) {
-			log.info("Getting "+tableModel.getElement(index));
 			return tableModel.getElement(index);
 		}
 

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -685,7 +685,7 @@ public PopupContextMenu getContextMenu(Context context, String parentMenu) {
 					 * 
 					 * @return true, if successful
 					 */
-					private boolean confirmAndExecuteUsersDeletion(Context uiSharedContext) {
+					private boolean confirmUsersDeletion(Context uiSharedContext) {
 						usersExtension = (ExtensionUserManagement) Control.getSingleton()
 								.getExtensionLoader().getExtension(ExtensionUserManagement.NAME);
 						if (usersExtension != null) {
@@ -727,7 +727,7 @@ public void performAction(SiteNode sn) throws Exception {
 									+ getContext().getIndex());
 							FormBasedAuthenticationMethod method = new FormBasedAuthenticationMethod();
 							method.setLoginRequest(sn);
-							if(!confirmAndExecuteUsersDeletion(uiSharedContext))
+							if(!confirmUsersDeletion(uiSharedContext))
 							{
 								log.debug("Cancelled change of authentication type.");
 								return;

File: src/org/zaproxy/clientapi/gen/Params.java
Patch:
@@ -2,7 +2,7 @@
  *
  * ZAP is an HTTP/HTTPS proxy for assessing web application security.
  *
- * Copyright 2012 ZAP development team
+ * Copyright the ZAP development team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/zaproxy/clientapi/gen/SessionManagement.java
Patch:
@@ -2,7 +2,7 @@
  *
  * ZAP is an HTTP/HTTPS proxy for assessing web application security.
  *
- * Copyright 2012 ZAP development team
+ * Copyright the ZAP development team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,7 +57,7 @@ public ApiResponse getSessionManagementMethod(String contextid) throws ClientApi
 		return api.callApi("sessionManagement", "view", "getSessionManagementMethod", map);
 	}
 
-	public ApiResponse setSessionManagementMethod(String contextid, String methodname, String methodconfigparams) throws ClientApiException {
+	public ApiResponse setSessionManagementMethod(String apikey, String contextid, String methodname, String methodconfigparams) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
 		map.put("contextId", contextid);

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -40,7 +40,7 @@ public class ApiException extends Exception {
 	
 	public enum Type {BAD_FORMAT, BAD_TYPE, NO_IMPLEMENTOR, BAD_ACTION, BAD_VIEW, BAD_OTHER, INTERNAL_ERROR, MISSING_PARAMETER, 
 		URL_NOT_FOUND, HREF_NOT_FOUND, SCAN_IN_PROGRESS, DISABLED, ALREADY_EXISTS, DOES_NOT_EXIST, ILLEGAL_PARAMETER, CONTEXT_NOT_FOUND,
-		USER_NOT_FOUND, URL_NOT_IN_CONTEXT};
+		USER_NOT_FOUND, URL_NOT_IN_CONTEXT, BAD_API_KEY};
 	
 	private final String detail;
 

File: src/org/zaproxy/zap/extension/history/PopupMenuPurgeSites.java
Patch:
@@ -102,8 +102,8 @@ public static void purge(SiteMap map, SiteNode node) {
                 if (extAlert != null) {
                     // Iterating over the getAlerts() while deleting the alert will result in a ConcurrentModificationException.
                     while (!node.getHistoryReference().getAlerts().isEmpty()) {
+                        // Note the alert is removed as a side effect
                         extAlert.deleteAlert(node.getHistoryReference().getAlerts().get(0));
-                        node.getHistoryReference().getAlerts().remove(0);
                     }
                 }
                 node.getHistoryReference().delete();

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -201,7 +201,7 @@ private void startSpider() {
 		// If the spider hasn't been initialized, do it now
 		if (spider == null) {
 			spider = new Spider(extension.getSpiderParam(), extension.getModel().getOptionsParam()
-					.getConnectionParam(), extension.getModel());
+					.getConnectionParam(), extension.getModel(), this.scanContext);
 
 			// Register this thread as a Spider Listener, so it gets notified of events and is able
 			// to manipulate the UI accordingly

File: src/org/zaproxy/zap/spider/filters/FetchFilter.java
Patch:
@@ -35,6 +35,8 @@ public enum FetchStatus {
 		VALID,
 		/** The uri is VALID and is a seed. **/
 		SEED,
+		/** The uri is out of context. */
+		OUT_OF_CONTEXT,
 		/** The uri is out of scope. */
 		OUT_OF_SCOPE,
 		/** The uri has an illegal protocol. */

File: src/org/parosproxy/paros/core/scanner/VariantAbstractRPCQuery.java
Patch:
@@ -146,7 +146,7 @@ protected void setRequestContent(String requestContent) {
 
         for (int i = 0; i < listParam.size(); i++) {
             RPCParameter param = listParam.get(i);
-            params.add(new NameValuePair(param.getName(), param.getValue(), i));
+            params.add(new NameValuePair(NameValuePair.TYPE_RPC, param.getName(), param.getValue(), i));
         }         
     }
     

File: src/org/parosproxy/paros/core/scanner/VariantCookie.java
Patch:
@@ -46,7 +46,7 @@ public void setMessage(HttpMessage msg) {
         
         for (HtmlParameter param : cp) {
             // ZAP: the parameter could be encoded so decode it
-            params.add(new NameValuePair(param.getName(), getUnescapedValue(param.getValue()), idx++));
+            params.add(new NameValuePair(NameValuePair.TYPE_COOKIE, param.getName(), getUnescapedValue(param.getValue()), idx++));
         }
     }
 

File: src/org/parosproxy/paros/core/scanner/VariantHeader.java
Patch:
@@ -79,7 +79,7 @@ public void setMessage(HttpMessage msg) {
         for (int idx = 0; idx < injectableHeaders.length; idx++) {
             headerContent = msg.getRequestHeader().getHeader(injectableHeaders[idx]);
             if (headerContent != null) {
-                params.add(new NameValuePair(injectableHeaders[idx], headerContent, idx));
+                params.add(new NameValuePair(NameValuePair.TYPE_HEADER, injectableHeaders[idx], headerContent, idx));
             }
         }
     }

File: src/org/parosproxy/paros/core/scanner/VariantMultipartFormQuery.java
Patch:
@@ -62,7 +62,8 @@ public void setMessage(HttpMessage msg) {
             while ((param = parser.getNextParam()) != null) {
                 if (param.getFileName() == null) {
                     // This is a parameter, add it to the vector of values
-                    stringParam.add(new NameValuePair(param.getName(), param.getContent(), index++));
+                    stringParam.add(new NameValuePair(NameValuePair.TYPE_MULTIPART_FORM, 
+                    		param.getName(), param.getContent(), index++));
 
                 } else {
                     // This is a file

File: src/org/parosproxy/paros/core/scanner/VariantODataFilterQuery.java
Patch:
@@ -141,7 +141,7 @@ public Vector<NameValuePair> getParamList() {
 		
 		int i=1;
 		for (OperationParameter opParam:mapParameters.values()){
-			out.add(new NameValuePair(opParam.getParameterName(), opParam.getValue(),i++));
+			out.add(new NameValuePair(NameValuePair.TYPE_ODATA_FILTER, opParam.getParameterName(), opParam.getValue(),i++));
 		}
 		
 		return out;

File: src/org/parosproxy/paros/core/scanner/VariantODataIdQuery.java
Patch:
@@ -135,7 +135,7 @@ private void parse(URI uri) {
 							String paramName       = matcher.group(1);
 							String value           = matcher.group(2);
 						
-							NameValuePair vp = new NameValuePair(paramName,value,i++);
+							NameValuePair vp = new NameValuePair(NameValuePair.TYPE_ODATA_ID, paramName,value,i++);
 							listParams.add(vp);
 						}
 								
@@ -157,7 +157,8 @@ public Vector<NameValuePair> getParamList() {
 		Vector<NameValuePair> params = new Vector<>();
 		
 		if (resourceParameter != null) {
-			params.add(new NameValuePair(resourceParameter.getParameterName(), resourceParameter.getValue(), 1));
+			params.add(new NameValuePair(NameValuePair.TYPE_ODATA_ID, 
+					resourceParameter.getParameterName(), resourceParameter.getValue(), 1));
 		}
 		
 		if (listParams != null) {

File: src/org/parosproxy/paros/network/HtmlParameter.java
Patch:
@@ -30,7 +30,7 @@ public enum Type {
 	};
 
 	public enum Flags {
-		anticsrf, session
+		anticsrf, session, structural
 	};
 
 	private String name;

File: src/org/parosproxy/paros/view/AbstractParamDialog.java
Patch:
@@ -217,7 +217,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 					    AbstractParamDialog.this.setVisible(false);
 						
 					} catch (Exception ex) {
-						log.error(ex.getMessage(), ex);
+						log.debug(ex.getMessage(), ex);
 					    View.getSingleton().showWarningDialog(ex.getMessage());
 					}
 					

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -151,11 +151,10 @@ private void traverse(Plugin plugin, SiteNode node) {
     }
     
     private void traverse(Plugin plugin, SiteNode node, boolean incRelatedSiblings) {
-    	log.debug("traverse: plugin=" + plugin.getName() + " node=" + node.getNodeName() + " heir=" + node.getHierarchicNodeName());
-        
         if (node == null || plugin == null) {
             return;
         }
+    	log.debug("traverse: plugin=" + plugin.getName() + " node=" + node.getNodeName() + " heir=" + node.getHierarchicNodeName());
         
         Set<SiteNode> parentNodes = new HashSet<>();
         parentNodes.add(node);

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -266,7 +266,7 @@ public void addAddon(AddOn ao) {
     private void loadFiles(AddOn ao, boolean overwrite) {
 		List<String> fileNames = ao.getFiles();
 
-		if (fileNames != null && fileNames != null) {
+		if (fileNames != null) {
 		    AddOnClassLoader addOnClassLoader = this.addOnLoaders.get(ao.getId());
 			for (String name : fileNames) {
 				File outfile = null;
@@ -353,7 +353,7 @@ public boolean removeAddOn(AddOn ao, boolean upgrading) {
 			
 			// Files
 			List<String> fileNames = ao.getFiles();
-			if (fileNames != null && fileNames != null) {
+			if (fileNames != null) {
 				File file = null;
 				for (String name : fileNames) {
 					File parent = null;

File: src/org/zaproxy/zap/session/CookieBasedSessionManagementMethodType.java
Patch:
@@ -104,7 +104,7 @@ public void processMessageToMatchSession(HttpMessage message, WebSession session
 			while (it.hasNext()) {
 				HttpCookie c = it.next();
 				for (Cookie sc : session.getHttpState().getCookies())
-					if (sc.getName().equals(c)) {
+					if (sc.getName().equals(c.getName())) {
 						it.remove();
 						break;
 					}

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/ManualHttpRequestEditorDialog.java
Patch:
@@ -540,4 +540,4 @@ public void addPersistentConnectionListener(PersistentConnectionListener listene
 	public void removePersistentConnectionListener(PersistentConnectionListener listener) {
 		((HttpPanelSender) getMessageSender()).removePersistentConnectionListener(listener);
 	}
-}
\ No newline at end of file
+}

File: src/org/parosproxy/paros/view/WorkbenchPanel.java
Patch:
@@ -177,7 +177,6 @@ private void initialize() {
         getTabbedWork().addTab(View.getSingleton().getResponsePanel().getName(), View.getSingleton().getResponsePanel().getIcon(), View.getSingleton().getResponsePanel(), false);
         getTabbedStatus().addTab(View.getSingleton().getOutputPanel().getName(), View.getSingleton().getOutputPanel().getIcon(), View.getSingleton().getOutputPanel(), false);
         getTabbedSelect().addTab(View.getSingleton().getSiteTreePanel().getName(), View.getSingleton().getSiteTreePanel().getIcon(), View.getSingleton().getSiteTreePanel(), false);
-        //getTabbedSelect().addTab(Constant.messages.getString("sites.panel.title"), icon, View.getSingleton().getSiteTreePanel(), false, 0);
       
         // parse the tabs correctly when previous display option was 'Full Layout'
         if(pdisplayOption == View.DISPLAY_OPTION_TOP_FULL) {

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -298,7 +298,7 @@ private void loadFiles(AddOn ao, boolean overwrite) {
 
     }
 
-	public boolean removeAddOn(AddOn ao) {
+	public boolean removeAddOn(AddOn ao, boolean upgrading) {
 		boolean result = true;
 		
 		if (! ao.hasZapAddOnEntry()) {
@@ -405,7 +405,7 @@ public boolean removeAddOn(AddOn ao) {
 		this.addOnLoaders.remove(ao.getId());
 		
 		if (ao.getFile() != null && ao.getFile().exists()) {
-			if (!ao.getFile().delete()) {
+			if (!ao.getFile().delete() && ! upgrading) {
 				logger.debug("Cant delete " + ao.getFile().getAbsolutePath());
         		this.blockList.add(ao.getId());
         		this.saveBlockList();

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -730,7 +730,7 @@ public boolean install(AddOn ao) {
    								ao.getName(),
    								ao.getVersion()));
    			}
-			if ( ! uninstall(installedAddOn)) {
+			if ( ! uninstall(installedAddOn, true)) {
 				// Cant uninstall the old version, so dont try to install the new one
 	   			logger.debug("Failed to uninstall addon " + installedAddOn.getId() + " v" + installedAddOn.getVersion());
 	   			if (View.isInitialised()) {
@@ -758,8 +758,8 @@ public boolean install(AddOn ao) {
 		return true;
 	}
 
-	public boolean uninstall(AddOn addOn) {
-		boolean removedDynamically = ExtensionFactory.getAddOnLoader().removeAddOn(addOn);
+	public boolean uninstall(AddOn addOn, boolean upgrading) {
+		boolean removedDynamically = ExtensionFactory.getAddOnLoader().removeAddOn(addOn, upgrading);
 		if (View.isInitialised()) {
 			if (removedDynamically) {
 				View.getSingleton().getOutputPanel().append(

File: src/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -682,7 +682,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 						for (AddOnWrapper aoi : installedAddOns) {
 							if (aoi.isEnabled()) {
 								logger.debug("Uninstalling " + aoi.getAddOn().getName());
-								if (extension.uninstall(aoi.getAddOn())) {
+								if (extension.uninstall(aoi.getAddOn(), false)) {
 									logger.debug("Uninstalling " + aoi.getAddOn().getName() + " worked");
 									addOnUninstalled = true;
 								} else {

File: src/org/zaproxy/zap/view/ContextExcludePanel.java
Patch:
@@ -128,6 +128,9 @@ private JTable getTableIgnore() {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
 			tableIgnore.setRowHeight(18);
+			// Issue 954: Force the JTable cell to auto-save when the focus changes.
+			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
+			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
 		}
 		return tableIgnore;
 	}

File: src/org/zaproxy/zap/view/ContextIncludePanel.java
Patch:
@@ -129,6 +129,9 @@ private JTable getTableIgnore() {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
 			tableIgnore.setRowHeight(18);
+			// Issue 954: Force the JTable cell to auto-save when the focus changes.
+			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
+			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
 		}
 		return tableIgnore;
 	}

File: src/org/zaproxy/zap/view/SessionExcludeFromProxyPanel.java
Patch:
@@ -127,6 +127,9 @@ private JTable getTableIgnore() {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
 			tableIgnore.setRowHeight(18);
+			// Issue 954: Force the JTable cell to auto-save when the focus changes.
+			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
+			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
 		}
 		return tableIgnore;
 	}

File: src/org/zaproxy/zap/view/SessionExcludeFromScanPanel.java
Patch:
@@ -127,6 +127,9 @@ private JTable getTableIgnore() {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
 			tableIgnore.setRowHeight(18);
+			// Issue 954: Force the JTable cell to auto-save when the focus changes.
+			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
+			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
 		}
 		return tableIgnore;
 	}

File: src/org/zaproxy/zap/view/SessionExcludeFromSpiderPanel.java
Patch:
@@ -127,6 +127,9 @@ private JTable getTableIgnore() {
 			tableIgnore = new JTable();
 			tableIgnore.setModel(getModel());
 			tableIgnore.setRowHeight(18);
+			// Issue 954: Force the JTable cell to auto-save when the focus changes.
+			// Example, edit cell, click OK for a panel dialog box, the data will get saved.
+			tableIgnore.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
 		}
 		return tableIgnore;
 	}

File: src/org/zaproxy/zap/view/PopupMenuHistoryReference.java
Patch:
@@ -315,9 +315,12 @@ public boolean isEnableForComponent(Component invoker) {
             this.setEnabled(isEnabledForHistoryReferences(getSelectedHistoryReferences()));
             display = true;
         } else {
+        	// Only enable this while testing
+        	/*
         	log.debug("Popup " + this.getName() + 
         			" not enabled for panel " + invoker.getName() + 
         			" class " + invoker.getClass().getName());
+        	*/
         }
 
         if (display) {

File: src/org/zaproxy/zap/spider/URLCanonicalizer.java
Patch:
@@ -172,7 +172,6 @@ public static String getCanonicalURL(String url, String baseURL) {
 			return result.toExternalForm();
 
 		} catch (Exception ex) {
-log.error(ex.getMessage(), ex);
 			log.warn("Error while Processing URL in the spidering process (on base " + baseURL + "): "
 					+ ex.getMessage());
 			return null;

File: src/org/parosproxy/paros/core/scanner/VariantFormQuery.java
Patch:
@@ -23,6 +23,7 @@
 // ZAP: 2013/07/01 Added content-type checking to allow special POST management by other Variants
 // ZAP: 2013/08/21 Added a new encoding/decoding model for a correct parameter value interpretation
 // ZAP: 2013/12/06 Constrained the data content handling to application/x-www-form-urlencoded
+// ZAP: 2013/12/09 Solved NullPointerException when the request header doesn't contain "Content-Type" header field
 
 package org.parosproxy.paros.core.scanner;
 
@@ -41,7 +42,8 @@ public VariantFormQuery() {
     @Override
     public void setMessage(HttpMessage msg) {
         String contentType = msg.getRequestHeader().getHeader(HttpHeader.CONTENT_TYPE);
-        if (contentType.startsWith(WWW_APP_URL_ENCODED)) {
+        // ZAP: added control for null contentType
+        if (contentType != null && contentType.startsWith(WWW_APP_URL_ENCODED)) {
             parse(msg.getRequestBody().toString());
         }
     }

File: src/org/zaproxy/zap/extension/stdmenus/PopupCopyMenu.java
Patch:
@@ -17,7 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-package org.zaproxy.zap.extension.copy;
+package org.zaproxy.zap.extension.stdmenus;
 
 import java.awt.Component;
 

File: src/org/zaproxy/zap/control/ZapReleaseComparitor.java
Patch:
@@ -85,7 +85,7 @@ public int compare(ZapRelease zr1, ZapRelease zr2) {
 					// zr1 element alpha or beta, so before any number (eg 2.0.0 is more recent than 2.0.alpha)
 					return -1;
 				} else {
-					throw new IllegalArgumentException("Invalid release number: " + zr1);
+					throw new IllegalArgumentException("Invalid release number: " + zr1.getVersion());
 				}
 			} else {
 				// neither numbers, must be different
@@ -94,7 +94,7 @@ public int compare(ZapRelease zr1, ZapRelease zr2) {
 				} else if (zr1Array[i].equals(Constant.BETA_VERSION)) {
 					return +1;
 				} else {
-					throw new IllegalArgumentException("Invalid release number: " + zr1);
+					throw new IllegalArgumentException("Invalid release number: " + zr1.getVersion());
 				}
 			}
     	}

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -392,6 +392,7 @@ private void runGUI() throws ClassNotFoundException, Exception {
 			control.getExtensionLoader().hookCommandLineListener(cmdLine);
 			control.runCommandLine();
 		} catch (Exception e) {
+	        View.getSingleton().showWarningDialog(e.getMessage());
 	        log.error(e.getMessage(), e);
 		}
 	}

File: src/org/zaproxy/zap/extension/compare/ExtensionCompare.java
Patch:
@@ -290,7 +290,7 @@ public String getDescription() {
 					    sb.append(CRLF);
 					    
 				        ReportGenerator.stringToHtml(sb.toString(), 
-					    		"xml" + File.separator + "reportCompare.xsl", 
+					    		Constant.getZapInstall() + File.separator + "xml" + File.separator + "reportCompare.xsl", 
 					    		outputFile.getAbsolutePath());
 
 			    		try {

File: src/org/parosproxy/paros/extension/report/ReportLastScan.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/07/12 Issue 713: Add CWE and WASC numbers to issues
+// ZAP: 2013/12/03 Issue 933: Automatically determine install dir
 
 package org.parosproxy.paros.extension.report;
 
@@ -153,7 +154,7 @@ public String getDescription() {
                     return;
                 }
 
-                File report = generate(file.getAbsolutePath(), model, "xml/report.html.xsl");
+                File report = generate(file.getAbsolutePath(), model, Constant.getZapInstall() + "/xml/report.html.xsl");
                 if (report == null) {
                     view.showMessageDialog(
                             MessageFormat.format(Constant.messages.getString("report.unknown.error"),
@@ -221,7 +222,7 @@ public String getDescription() {
                     return;
                 }
 
-                File report = generate(file.getAbsolutePath(), model, "xml/report.xml.xsl");
+                File report = generate(file.getAbsolutePath(), model, Constant.getZapInstall() + "/xml/report.xml.xsl");
                 if (report == null) {
                     view.showMessageDialog(
                             MessageFormat.format(Constant.messages.getString("report.unknown.error"),

File: src/org/parosproxy/paros/extension/option/OptionsCertificatePanel.java
Patch:
@@ -22,6 +22,7 @@
 // ZAP: 2012/04/25 Added @Override annotation to the appropriate methods.
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2013/12/03 Issue 933: Automatically determine install dir
 
 package org.parosproxy.paros.extension.option;
 
@@ -136,7 +137,7 @@ private void initialize() {
 		JPanel certificatePanel = getPanelCertificate();
 		this.add(certificatePanel, certificatePanel.getName());
 
-		driverConfig = new DriverConfiguration();
+		driverConfig = new DriverConfiguration(new File(Constant.getZapInstall(), "xml/drivers.xml"));
 		updateDriverComboBox();
 		driverConfig.addObserver(this);
 

File: src/org/zaproxy/zap/control/ExtensionFactory.java
Patch:
@@ -61,7 +61,7 @@ public ExtensionFactory() {
     public static AddOnLoader getAddOnLoader() {
     	if (addOnLoader == null) {
     		addOnLoader = new AddOnLoader(new File[] {
-					new File(Constant.FOLDER_PLUGIN),
+					new File(Constant.getZapInstall(), Constant.FOLDER_PLUGIN),
 					new File(Constant.getZapHome(), Constant.FOLDER_PLUGIN)});
     	}
     	return addOnLoader;

File: src/org/zaproxy/zap/model/Vulnerabilities.java
Patch:
@@ -53,7 +53,7 @@ private static synchronized void init() {
 			// Read them in from the file
 			XMLConfiguration config;
 	        try {
-	        	File f = new File(Constant.getInstance().VULNS_CONFIG);
+	        	File f = new File(Constant.getZapInstall(), Constant.getInstance().VULNS_CONFIG);
 	        	config = new XMLConfiguration();
 	        	config.setDelimiterParsingDisabled(true);
 	        	config.load(f);

File: src/org/zaproxy/zap/extension/pscan/PassiveScanAPI.java
Patch:
@@ -133,6 +133,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 				Map<String, String> map = new HashMap<>();
 				map.put("id", String.valueOf(scanner.getPluginId()));
 				map.put("name", scanner.getName());
+				map.put("enabled", String.valueOf(scanner.isEnabled()));
 				resultList.addItem(new ApiResponseSet("scanner", map));
 			}
 			

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -154,7 +154,7 @@ private void setScannersEnabled(JSONObject params, boolean enabled) {
 						scanner.setEnabled(enabled);
 					}
 				} catch (NumberFormatException e) {
-					log.error("Failed to parse scanner ID: " + e.getMessage(), e);
+					log.warn("Failed to parse scanner ID: ", e);
 				}
 			}
 		}

File: src/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -37,7 +37,7 @@
 public abstract class AbstractAppParamPlugin extends AbstractAppPlugin {
 
     private Logger logger = Logger.getLogger(this.getClass());
-    private ArrayList<Variant> listVariant = new ArrayList();
+    private ArrayList<Variant> listVariant = new ArrayList<>();
     private NameValuePair originalPair = null;
     private Variant variant = null;
 

File: src/org/parosproxy/paros/extension/history/HistoryFilter.java
Patch:
@@ -42,8 +42,8 @@ public class HistoryFilter {
 	private List<String> reliabilityList = new ArrayList<>();
 	private List<String> tagList = new ArrayList<>();
 	private String note = null;
-	private List<Pattern> urlIncPatternList = new ArrayList<Pattern>();
-	private List<Pattern> urlExcPatternList = new ArrayList<Pattern>();
+	private List<Pattern> urlIncPatternList = new ArrayList<>();
+	private List<Pattern> urlExcPatternList = new ArrayList<>();
 	
 	private Logger logger = Logger.getLogger(HistoryFilter.class);
 

File: src/org/zaproxy/zap/extension/ascan/AllCategoryTableModel.java
Patch:
@@ -116,7 +116,7 @@ private String strToI18n (String str) {
     private String i18nToStr (String str) {
     	// Converts to i18n'ed names back to the enum names
     	if (i18nToStr == null) {
-    		i18nToStr = new HashMap<String, String>();
+    		i18nToStr = new HashMap<>();
     		for (AlertThreshold at : AlertThreshold.values()) {
     			i18nToStr.put(this.strToI18n(at.name()), at.name());
     		}

File: src/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -113,7 +113,7 @@ private String strToI18n (String str) {
     private String i18nToStr (String str) {
     	// Converts to i18n'ed names back to the enum names
     	if (i18nToStr == null) {
-    		i18nToStr = new HashMap<String, String>();
+    		i18nToStr = new HashMap<>();
     		for (AlertThreshold at : AlertThreshold.values()) {
     			i18nToStr.put(this.strToI18n(at.name()), at.name());
     		}

File: src/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -152,14 +152,14 @@ private JTable getTableTest() {
 	            TableColumn column = tableTest.getColumnModel().getColumn(i);
 	            column.setPreferredWidth(width[i]);
 	        }
-	        JComboBox<String> jcb1 = new JComboBox<String>();
+	        JComboBox<String> jcb1 = new JComboBox<>();
 	        jcb1.addItem("");	// Always show a blank one for where they are not all the same
             for (AlertThreshold level : AlertThreshold.values()) {
                 jcb1.addItem(Constant.messages.getString("ascan.policy.level." + level.name().toLowerCase()));
             }
             tableTest.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(jcb1));
 
-	        JComboBox<String> jcb2 = new JComboBox<String>();
+	        JComboBox<String> jcb2 = new JComboBox<>();
 	        jcb2.addItem("");	// Always show a blank one for where they are not all the same
             for (AttackStrength level : AttackStrength.values()) {
                 jcb2.addItem(Constant.messages.getString("ascan.policy.level." + level.name().toLowerCase()));

File: src/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -89,13 +89,13 @@ private JTable getTableTest() {
 	            TableColumn column = tableTest.getColumnModel().getColumn(i);
 	            column.setPreferredWidth(width[i]);
 	        }
-	        JComboBox<String> jcb1 = new JComboBox<String>();
+	        JComboBox<String> jcb1 = new JComboBox<>();
             for (AlertThreshold level : AlertThreshold.values()) {
                 jcb1.addItem(Constant.messages.getString("ascan.policy.level." + level.name().toLowerCase()));
             }
             tableTest.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(jcb1));
 
-	        JComboBox<String> jcb2 = new JComboBox<String>();
+	        JComboBox<String> jcb2 = new JComboBox<>();
             for (AttackStrength level : AttackStrength.values()) {
                 jcb2.addItem(Constant.messages.getString("ascan.policy.level." + level.name().toLowerCase()));
             }

File: src/org/zaproxy/zap/extension/history/HistoryFilterPlusDialog.java
Patch:
@@ -272,7 +272,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	}
 	
 	private List<Pattern> strToRegexList(String str) throws PatternSyntaxException {
-		List<Pattern> list = new ArrayList<Pattern>();
+		List<Pattern> list = new ArrayList<>();
 		for (String s : str.split("\n")) {
 			if (s.length() > 0) {
 				list.add(Pattern.compile(s));

File: src/org/zaproxy/zap/utils/BoyerMooreMatcher.java
Patch:
@@ -43,7 +43,7 @@ public class BoyerMooreMatcher {
     public BoyerMooreMatcher(String pattern) {
         // Create internal structures
         this.pattern = pattern;
-        this.occurrence = new HashMap<Character, Integer>();
+        this.occurrence = new HashMap<>();
 
         // Bad character Skip : Moore Table Construction
         for (int i = 0; i < pattern.length(); i++) {

File: src/org/zaproxy/zap/extension/forceduser/ContextForcedUserPanel.java
Patch:
@@ -124,7 +124,7 @@ public void saveContextData(Session session) throws Exception {
 
 	@Override
 	public String getHelpIndex() {
-		// TODO Auto-generated method stub
+		// TODO Needs to be filled
 		return null;
 	}
 
@@ -143,6 +143,7 @@ public UsersListModel(UsersTableModel tableModel) {
 
 		@Override
 		public User getElementAt(int index) {
+			log.info("Getting "+tableModel.getElement(index));
 			return tableModel.getElement(index);
 		}
 

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -111,7 +111,7 @@ public class ExtensionHistory extends ExtensionAdaptor implements SessionChanged
 	
 	private boolean showJustInScope = false;
 	
-	// Used to cache hrefs not added into the historyTableModel
+	// Used to cache hrefs not added into the historyList
 	private Hashtable<Integer, HistoryReference> historyIdToRef = new Hashtable<>();
 
     

File: src/org/parosproxy/paros/extension/filter/ExtensionFilter.java
Patch:
@@ -31,6 +31,8 @@
 // ZAP: 2013/01/25 Added method removeFilter().
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2013/11/16 Issue 902 - Change all ExtensionAdaptor#hook(ExtensionHook) overriding methods
+// to call the base implementation
 
 package org.parosproxy.paros.extension.filter;
 
@@ -134,6 +136,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 	    if (getView() != null) {
 	        extensionHook.getHookMenu().addToolsMenuItem(getMenuToolsFilter());
 	    }

File: src/org/zaproxy/zap/extension/httppanel/component/all/ExtensionHttpPanelComponentAll.java
Patch:
@@ -36,6 +36,7 @@ public ExtensionHttpPanelComponentAll() {
 
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 		if (getView() != null) {
 			HttpPanelManager panelManager = HttpPanelManager.getInstance();
 			panelManager.addRequestComponentFactory(new RequestAllComponentFactory());

File: src/org/zaproxy/zap/extension/httppanel/view/hex/ExtensionHttpPanelHexView.java
Patch:
@@ -44,6 +44,7 @@ public ExtensionHttpPanelHexView() {
 	
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 		if (getView() != null) {
 			HttpPanelManager.getInstance().addRequestViewFactory(RequestSplitComponent.NAME, new RequestSplitHeaderHexViewFactory());
 			HttpPanelManager.getInstance().addRequestViewFactory(RequestSplitComponent.NAME, new RequestSplitBodyHexViewFactory());

File: src/org/zaproxy/zap/extension/httppanel/view/image/ExtensionHttpPanelImageView.java
Patch:
@@ -39,6 +39,7 @@ public ExtensionHttpPanelImageView() {
 
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 		if (getView() != null) {
 			HttpPanelManager panelManager = HttpPanelManager.getInstance();
 			panelManager.addResponseViewFactory(ResponseSplitComponent.NAME, new ResponseImageViewFactory());

File: src/org/zaproxy/zap/extension/httppanel/view/largeresponse/ExtensionHttpPanelLargeResponseView.java
Patch:
@@ -39,6 +39,7 @@ public ExtensionHttpPanelLargeResponseView() {
 
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 		if (getView() != null) {
 			HttpPanelManager panelManager = HttpPanelManager.getInstance();
 			panelManager.addResponseViewFactory(ResponseSplitComponent.NAME, new ResponseLargeResponseSplitViewFactory());

File: src/org/zaproxy/zap/extension/httppanel/view/paramtable/ExtensionHttpPanelRequestFormTableView.java
Patch:
@@ -27,6 +27,7 @@ public ExtensionHttpPanelRequestFormTableView() {
 	
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 		if (getView() != null) {
 			HttpPanelManager.getInstance().addRequestViewFactory(RequestSplitComponent.NAME, new HttpPanelFormParamTableViewFactory());
 		}

File: src/org/zaproxy/zap/extension/httppanel/view/paramtable/ExtensionHttpPanelRequestQueryCookieTableView.java
Patch:
@@ -43,6 +43,7 @@ public ExtensionHttpPanelRequestQueryCookieTableView() {
 	
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 		if (getView() != null) {
 			HttpPanelManager.getInstance().addRequestViewFactory(RequestSplitComponent.NAME, new HttpPanelQueryCookieParamTableViewFactory());
 		}

File: src/org/zaproxy/zap/extension/httppanel/view/posttable/ExtensionRequestPostTableView.java
Patch:
@@ -36,6 +36,7 @@ public ExtensionRequestPostTableView() {
 
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 		if (getView() != null) {
 			HttpPanelManager.getInstance().addRequestViewFactory(RequestSplitComponent.NAME, new RequestPostTableViewFactory());
 		}

File: src/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/ExtensionHttpPanelSyntaxHighlightTextView.java
Patch:
@@ -50,6 +50,7 @@ public ExtensionHttpPanelSyntaxHighlightTextView() {
 	
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 		if (getView() != null) {
 			HttpPanelManager panelManager = HttpPanelManager.getInstance();
 			panelManager.addRequestViewFactory(RequestSplitComponent.NAME, new RequestSplitHeaderViewFactory());

File: src/org/zaproxy/zap/extension/reveal/ExtensionReveal.java
Patch:
@@ -72,6 +72,7 @@ private void initialize() {
 
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
 	    extensionHook.addProxyListener(this);
 	    if (getView() != null) {
 			View.getSingleton().addMainToolbarButton(getRevealButton());

File: src/org/zaproxy/zap/extension/stdmenus/ExtensionStdMenus.java
Patch:
@@ -68,6 +68,8 @@ private void initialize() {
 
 	@Override
 	public void hook(ExtensionHook extensionHook) {
+	    super.hook(extensionHook);
+	    
 		if (getView() != null) {
 			// Be careful when changing the menu indexes (and order above) - its easy to get unexpected
 			// results!

File: src/org/parosproxy/paros/view/MainPopupMenu.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2013/04/14 Issue 592: Do not show the main pop up menu if it doesn't have visible pop up menu items
 // ZAP: 2013/04/14 Issue 598: Replace/update "old" pop up menu items
 // ZAP: 2013/11/16 Issue 878: ExtensionPopupMenuItem#getMenuIndex() as no effect in MainPopupMenu
+// ZAP: 2013/11/16 Issue 901: Pop up menu "succeed" separator is not added when using sub-menu in MainPopupMenu
 
 package org.parosproxy.paros.view;
 
@@ -163,7 +164,7 @@ private void handleMenuItem(Component invoker, ExtensionPopupMenuItem menuItem)
 	            			superMenu.setEnabled(true);
 	            		}
 	            		if (menuItem.succeedWithSeparator()) {
-	            			superMenu.add(menuItem);
+	            			superMenu.addSeparator();
 	            		}
 	            		
 	            	} else {

File: src/org/zaproxy/zap/extension/bruteforce/BruteForceParam.java
Patch:
@@ -39,6 +39,7 @@ public class BruteForceParam extends AbstractParam {
 	private static final String FILE_EXTENSIONS = "bruteforce.fileextensions";
 	
 	public static final int DEFAULT_THREAD_PER_SCAN = 10;
+	public static final int MAXIMUM_THREADS_PER_SCAN = 20;
 	public static final boolean DEFAULT_RECURSIVE = true;
 	public static final boolean DEFAULT_BROWSE_FILES = false;
 	public static final String EMPTY_STRING = "";

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -303,7 +303,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 							List<String> mandatoryParams = other.getMandatoryParamNames();
 							if (mandatoryParams != null) {
 								for (String param : mandatoryParams) {
-									if (params.getString(param) == null || params.getString(param).length() == 0) {
+									if (!params.has(param) || params.getString(param).length() == 0) {
 										throw new ApiException(ApiException.Type.MISSING_PARAMETER, param);
 									}
 								}

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -258,7 +258,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 									break;
 						case XML:	response = this.responseToXml(name, res);
 									break;
-						case HTML:	this.responseToHtml(name, res);
+						case HTML:	response = this.responseToHtml(name, res);
 									break;
 						default:
 									break;

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -272,7 +272,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 							List<String> mandatoryParams = view.getMandatoryParamNames();
 							if (mandatoryParams != null) {
 								for (String param : mandatoryParams) {
-									if (params.getString(param) == null || params.getString(param).length() == 0) {
+									if (!params.has(param) || params.getString(param).length() == 0) {
 										throw new ApiException(ApiException.Type.MISSING_PARAMETER, param);
 									}
 								}

File: src/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -40,6 +40,7 @@
 // ZAP: 2013/01/29 Catch Errors thrown by out of date extensions as well as Exceptions
 // ZAP: 2013/07/23 Issue 738: Options to hide tabs
 // ZAP: 2013/11/16 Issue 807: Error while loading ZAP when Quick Start Tab is closed
+// ZAP: 2013/11/16 Issue 845: AbstractPanel added twice to TabbedPanel2 in ExtensionLoader#addTabPanel
 
 package org.parosproxy.paros.extension;
 
@@ -477,7 +478,6 @@ private void addTabPanel(List<AbstractPanel> panelList, TabbedPanel2 tab) {
         for (int i=0; i<panelList.size(); i++) {
             try {
                 panel = panelList.get(i);
-                tab.add(panel, panel.getName());
                 
         		// ZAP: added icon
                 if (panel.getTabIndex() >= 0) {

File: src/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -39,6 +39,7 @@
 // ZAP: 2013/01/25 Refactored hookMenu(). Resolved some Checkstyle issues.
 // ZAP: 2013/01/29 Catch Errors thrown by out of date extensions as well as Exceptions
 // ZAP: 2013/07/23 Issue 738: Options to hide tabs
+// ZAP: 2013/11/16 Issue 807: Error while loading ZAP when Quick Start Tab is closed
 
 package org.parosproxy.paros.extension;
 
@@ -481,7 +482,7 @@ private void addTabPanel(List<AbstractPanel> panelList, TabbedPanel2 tab) {
         		// ZAP: added icon
                 if (panel.getTabIndex() >= 0) {
                 	tab.addTab(panel.getName() + " ", panel.getIcon(), panel, panel.isHideable(), panel.getTabIndex());
-                    if (panel.getTabIndex() == 0) {
+                    if (panel.getTabIndex() == 0  && tab.indexOfComponent(panel) != -1) {
                     	// Its now the first one, give it focus
                     	tab.setSelectedComponent(panel);	
                     }

File: src/org/zaproxy/zap/extension/httpsessions/DialogModifyToken.java
Patch:
@@ -46,7 +46,7 @@ public void setToken(HttpSessionToken token) {
     
     @Override
     protected boolean validateFields() {
-        if (token.getName().equals(getNameTextField().getText())) {
+        if (token.getName().equals(getNormalisedName())) {
             return true;
         }
         return super.validateFields();

File: src/org/zaproxy/zap/view/MainToolbarPanel.java
Patch:
@@ -294,7 +294,7 @@ private JButton getBtnSession() {
 
 				@Override
 				public void actionPerformed(java.awt.event.ActionEvent e) {
-					View.getSingleton().showSessionDialog(Model.getSingleton().getSession(), null);
+					Control.getSingleton().getMenuFileControl().properties();
 				}
 			});
 		}

File: src/org/parosproxy/paros/view/MainPopupMenu.java
Patch:
@@ -31,6 +31,7 @@
 // ZAP: 2012/10/08 Added check for PopupMenu safeness
 // ZAP: 2013/04/14 Issue 592: Do not show the main pop up menu if it doesn't have visible pop up menu items
 // ZAP: 2013/04/14 Issue 598: Replace/update "old" pop up menu items
+// ZAP: 2013/11/16 Issue 878: ExtensionPopupMenuItem#getMenuIndex() as no effect in MainPopupMenu
 
 package org.parosproxy.paros.view;
 
@@ -169,7 +170,7 @@ private void handleMenuItem(Component invoker, ExtensionPopupMenuItem menuItem)
 	            		if (menuItem.precedeWithSeparator()) {
 	    	                this.addSeparator();
 	            		}
-						if (menuItem.getMenuIndex() > menuItem.getComponentCount()) {
+						if (menuItem.getMenuIndex() > this.getComponentCount()) {
 							this.add(menuItem);
 						} else {
 							this.add(menuItem, menuItem.getMenuIndex());

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -30,6 +30,7 @@
 // ZAP: 2012/02/26 Cache the response body length as part of Issue 539
 // ZAP: 2013/08/07 Added TYPE_AUTHENTICATION
 // ZAP: 2013/11/16 Issue 869: Differentiate proxied requests from (ZAP) user requests
+// ZAP: 2013/11/16 Issue 892: Cache of response body length in HistoryReference might not be correct
 
 package org.parosproxy.paros.model;
 
@@ -222,7 +223,7 @@ private void build(long sessionId, int historyId, int historyType, HttpMessage m
         this.reason = msg.getResponseHeader().getReasonPhrase();
         this.rtt = msg.getTimeElapsedMillis();
         this.hasNote = msg.getNote() != null && msg.getNote().length() > 0;
-        this.responseBodyLength = msg.getResponseBody().toString().length();
+        this.responseBodyLength = msg.getResponseBody().length();
 
 	}
 	

File: src/org/zaproxy/zap/extension/ascan/ScriptsActiveScanner.java
Patch:
@@ -90,6 +90,9 @@ private ExtensionScript getExtension() {
 
     @Override
     public void scan(HttpMessage msg, String param, String value) {
+        if (this.getExtension() == null) {
+            return;
+        }
 		List<ScriptWrapper> scripts = this.getExtension().getScripts(ExtensionActiveScan.SCRIPT_TYPE_ACTIVE);
 			
 		for (ScriptWrapper script : scripts) {

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -205,7 +205,9 @@ protected void showPolicyDialog() {
 	    }
 	    // TODO This could be done in a cleaner way...
 		ExtensionPassiveScan pscan = (ExtensionPassiveScan) Control.getSingleton().getExtensionLoader().getExtension(ExtensionPassiveScan.NAME);
-		dialog.addPolicyPanel(pscan.getPolicyPanel());
+		if (pscan != null) {
+			dialog.addPolicyPanel(pscan.getPolicyPanel());
+		}
 
 		int result = dialog.showDialog(false);
 		if (result == JOptionPane.OK_OPTION) {

File: src/org/parosproxy/paros/db/RecordHistory.java
Patch:
@@ -22,6 +22,7 @@
 //      instead of String in the parameters reqBody and resBody.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/09/26 Issue 716: ZAP flags its own HTTP responses
+// ZAP: 2013/11/16 Issue 869: Differentiate proxied requests from (ZAP) user requests
 
 
 package org.parosproxy.paros.db;
@@ -35,7 +36,7 @@ public class RecordHistory {
     
     private int historyId = 0;
     private long sessionId = 0;
-	private int historyType = HistoryReference.TYPE_MANUAL;
+	private int historyType = HistoryReference.TYPE_PROXIED;
 	private HttpMessage httpMessage = null;
 	
 	public RecordHistory() {

File: src/org/parosproxy/paros/extension/history/ProxyListenerLog.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2012/07/29 Issue 43: Cleaned up access to ExtensionHistory UI
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2013/11/16 Issue 869: Differentiate proxied requests from (ZAP) user requests
 
 package org.parosproxy.paros.extension.history;
  
@@ -99,7 +100,7 @@ public boolean onHttpRequestSend(HttpMessage msg) {
 	@Override
 	public boolean onHttpResponseReceive(final HttpMessage msg) {
 
-        int type = HistoryReference.TYPE_MANUAL;
+        int type = HistoryReference.TYPE_PROXIED;
 		if (isSkipImage(msg.getRequestHeader()) || isSkipImage(msg.getResponseHeader())) {
             if (msg.getResponseHeader().getStatusCode() == HttpStatusCode.OK) {
                 type = HistoryReference.TYPE_HIDDEN;
@@ -140,7 +141,7 @@ private void addHistory(HttpMessage msg, int type) {
             return;
         }
 
-        if (type != HistoryReference.TYPE_MANUAL && type != HistoryReference.TYPE_HIDDEN) {
+        if (type != HistoryReference.TYPE_PROXIED && type != HistoryReference.TYPE_HIDDEN) {
             return;
         }
         

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java
Patch:
@@ -89,7 +89,7 @@ public void run() {
 						// Indicate UI new response arrived
 						responsePanel.updateContent();
 
-						final int finalType = HistoryReference.TYPE_MANUAL;
+						final int finalType = HistoryReference.TYPE_ZAP_USER;
 						final Thread t = new Thread(new Runnable() {
 							@Override
 							public void run() {

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -36,6 +36,7 @@
 // ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
 // ZAP: 2013/08/27 Issue 772: Restructuring of Saving/Loading Context Data
 // ZAP: 2013/09/26 Issue 747: Error opening session files on directories with special characters
+// ZAP: 2013/11/16 Issue 869: Differentiate proxied requests from (ZAP) user requests
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -213,7 +214,8 @@ protected void open(String fileName) throws SQLException, SAXException, IOExcept
 		siteTree.setRoot(newRoot);
 
 		// update history reference
-		List<Integer> list = model.getDb().getTableHistory().getHistoryList(getSessionId(), HistoryReference.TYPE_MANUAL);
+		List<Integer> list = model.getDb().getTableHistory().getHistoryList(getSessionId(), HistoryReference.TYPE_PROXIED);
+		list.addAll(model.getDb().getTableHistory().getHistoryList(getSessionId(), HistoryReference.TYPE_ZAP_USER));
 		HistoryReference historyRef = null;
 
 		discardContexts();

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -252,7 +252,9 @@ public void sessionChanged(Session session) {
 		// search for tokens...
         try {
 			List<Integer> list = getModel().getDb().getTableHistory().getHistoryList(
-					session.getSessionId(), HistoryReference.TYPE_MANUAL);
+					session.getSessionId(), HistoryReference.TYPE_PROXIED);
+			list.addAll(getModel().getDb().getTableHistory().getHistoryList(
+			        session.getSessionId(), HistoryReference.TYPE_ZAP_USER));
 			HistoryFilter filter = new HistoryFilter();
 			filter.setTags(Arrays.asList(new String[] {TAG}));
 			AntiCsrfDetectScanner scanner = new AntiCsrfDetectScanner();

File: src/org/zaproxy/zap/extension/compare/ExtensionCompare.java
Patch:
@@ -152,7 +152,8 @@ private void buildHistoryMap (TableHistory th, Map<String, String> map)
     		return;
     	}
 
-    	Vector<Integer> hIds = th.getHistoryList(rh.getSessionId(), HistoryReference.TYPE_MANUAL);
+    	Vector<Integer> hIds = th.getHistoryList(rh.getSessionId(), HistoryReference.TYPE_PROXIED);
+    	hIds.addAll(th.getHistoryList(rh.getSessionId(), HistoryReference.TYPE_ZAP_USER));
     	for (Integer hId : hIds) {
     		RecordHistory recH = th.read(hId);
     		URI uri = recH.getHttpMessage().getRequestHeader().getURI();

File: src/org/zaproxy/zap/extension/history/PopupMenuExportURLs.java
Patch:
@@ -125,8 +125,9 @@ private void exportURLs(SiteNode node, BufferedWriter writer, boolean html) {
         }
         try {
         	if (node.getHistoryReference() != null &&
-        			(node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_MANUAL ||
-        					node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_SPIDER)) {
+        			(node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_PROXIED ||
+        				node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_ZAP_USER ||
+         				node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_SPIDER)) {
         		
         	 	HttpMessage msg = node.getHistoryReference().getHttpMessage();
     			if (msg != null && msg.getRequestHeader() != null &&

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -102,7 +102,8 @@ public void run() {
 				}
 
 				if (href != null && 
-						(href.getHistoryType() == HistoryReference.TYPE_MANUAL ||
+						(href.getHistoryType() == HistoryReference.TYPE_PROXIED ||
+						href.getHistoryType() == HistoryReference.TYPE_ZAP_USER ||
 						href.getHistoryType() == HistoryReference.TYPE_SPIDER)) {
 					// Note that scanning TYPE_SCANNER records will result in a loop ;)
 					// Parse the record

File: src/org/zaproxy/zap/extension/search/SearchThread.java
Patch:
@@ -111,7 +111,8 @@ public void run() {
 			    }
 			    try {
 			    	RecordHistory hr = Model.getSingleton().getDb().getTableHistory().read(v);
-			        if (hr.getHistoryType() == HistoryReference.TYPE_MANUAL || 
+			        if (hr.getHistoryType() == HistoryReference.TYPE_PROXIED || 
+			                hr.getHistoryType() == HistoryReference.TYPE_ZAP_USER || 
 			        		hr.getHistoryType() == HistoryReference.TYPE_SPIDER) {
 			        	// Create the href to ensure the msg is set up correctly
 			        	HistoryReference href = new HistoryReference(hr.getHistoryId());

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -102,7 +102,8 @@ public ApiResponse handleApiView(String name, JSONObject params)
 					searchListener, type, false, false, 
 					this.getParam(params, PARAM_BASE_URL, (String)null),
 					this.getParam(params, PARAM_START, -1),
-					this.getParam(params, PARAM_COUNT, -1));
+					this.getParam(params, PARAM_COUNT, -1),
+					false);
 			
 			while(!searchListener.isSearchComplete()) {
 				Thread.sleep(100);

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsPanel.java
Patch:
@@ -405,7 +405,8 @@ public void reset() {
 		siteModel.removeAllElements();
 		siteModel.addElement(Constant.messages.getString("httpsessions.toolbar.site.select"));
 
-		sessionsModel.removeAllElements();
+		sessionsModel = new HttpSessionsTableModel(null);
+		getHttpSessionsTable().setModel(sessionsModel);
 	}
 
 	/**

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -29,7 +29,8 @@
 // ZAP: 2013/04/08 Issue 605: Force intercepts via header
 // ZAP: 2013/05/02 Re-arranged all modifiers into Java coding standard order
 // ZAP: 2013/09/02 Resolved header value setting on setHeader() which manage wrongly the "-" char
-//
+// ZAP: 2013/11/16 Issue 867: HttpMessage#getFormParams should return an empty TreeSet if
+// the request body is not "x-www-form-urlencoded"
 package org.parosproxy.paros.network;
 
 import java.util.Hashtable;
@@ -75,6 +76,7 @@ public abstract class HttpHeader implements java.io.Serializable {
     public static final String _CLOSE = "Close";
     public static final String _KEEP_ALIVE = "Keep-Alive";
     public static final String _CHUNKED = "Chunked";
+    public static final String FORM_URLENCODED_CONTENT_TYPE = "application/x-www-form-urlencoded";
     public static final String SCHEME_HTTP = "http://";
     public static final String SCHEME_HTTPS = "https://";
     public static final String HTTP = "http";

File: src/org/zaproxy/zap/extension/brk/BreakPanelToolbarFactory.java
Patch:
@@ -245,14 +245,14 @@ private void resetRequestSerialization (boolean forceSerialize) {
 		}
 	}
 
-	public void setBreakRequest(Boolean brk) {
+	public void setBreakRequest(boolean brk) {
 		isBreakRequest = brk;
 		resetRequestSerialization(false);
 
 		updateBreakRequestBtn();
 	}
 
-	public void setBreakResponse(Boolean brk) {
+	public void setBreakResponse(boolean brk) {
 		isBreakResponse = brk;
 		resetRequestSerialization(false);
 

File: src/org/parosproxy/paros/core/scanner/MultipartParam.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class MultipartParam {
 
-    private List<String> headers = new ArrayList();
+    private List<String> headers = new ArrayList<>();
     private String name;
     private String fileName;
     private String content;

File: src/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -64,7 +64,7 @@ public class Scanner implements Runnable {
 	// ZAP: Added scanner pause option
 	private boolean pause = false;
 	
-	private List<HostProcess> hostProcesses = new ArrayList<HostProcess>();
+	private List<HostProcess> hostProcesses = new ArrayList<>();
 
     /**
      * 

File: src/org/parosproxy/paros/core/scanner/VariantAbstractRPCQuery.java
Patch:
@@ -37,8 +37,8 @@
  */
 public abstract class VariantAbstractRPCQuery implements Variant {
     
-    private List<RPCParameter> listParam = new ArrayList();
-    private List<NameValuePair> params = new ArrayList();
+    private List<RPCParameter> listParam = new ArrayList<>();
+    private List<NameValuePair> params = new ArrayList<>();
     private String requestContent;
 
     @Override

File: src/org/parosproxy/paros/core/scanner/VariantCookie.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class VariantCookie implements Variant {
 
-    private List<NameValuePair> params = new ArrayList();
+    private List<NameValuePair> params = new ArrayList<>();
 
     /**
      * 
@@ -115,7 +115,7 @@ public String setEscapedParameter(HttpMessage msg, NameValuePair originalPair, S
      * @return 
      */
     private String setParameter(HttpMessage msg, NameValuePair originalPair, String name, String value, boolean escaped) {        
-        List<HttpCookie> cookies = new ArrayList();
+        List<HttpCookie> cookies = new ArrayList<>();
         String encodedValue = (escaped) ? value : getEscapedValue(value);
         NameValuePair param;
         

File: src/org/parosproxy/paros/core/scanner/VariantHeader.java
Patch:
@@ -45,7 +45,7 @@ public class VariantHeader implements Variant {
         HttpRequestHeader.HOST
     };
     
-    private List<NameValuePair> params = new ArrayList();
+    private List<NameValuePair> params = new ArrayList<>();
     private static Logger log = Logger.getLogger(VariantHeader.class);
 
     /**

File: src/org/parosproxy/paros/core/scanner/VariantMultipartFormQuery.java
Patch:
@@ -36,8 +36,8 @@
  */
 public class VariantMultipartFormQuery implements Variant {
 
-    private List<NameValuePair> stringParam = new ArrayList();
-    private List<MultipartParam> fileParam = new ArrayList();
+    private List<NameValuePair> stringParam = new ArrayList<>();
+    private List<MultipartParam> fileParam = new ArrayList<>();
     private String boundary = null;
 
     /**

File: src/org/parosproxy/paros/db/TableContext.java
Patch:
@@ -109,7 +109,7 @@ public synchronized void deleteAllDataForContextAndType(int contextId, int type)
     
 
     public List<RecordContext> getAllData () throws SQLException {
-    	List<RecordContext> result = new ArrayList<RecordContext>();
+    	List<RecordContext> result = new ArrayList<>();
     	ResultSet rs = psGetAllData.executeQuery();
     	while (rs.next()) {
     		result.add(new RecordContext(rs.getLong(DATAID), rs.getInt(CONTEXTID), rs.getInt(TYPE), rs.getString(DATA)));
@@ -120,7 +120,7 @@ public List<RecordContext> getAllData () throws SQLException {
     }
                 
     public List<RecordContext> getDataForContext (int contextId) throws SQLException {
-    	List<RecordContext> result = new ArrayList<RecordContext>();
+    	List<RecordContext> result = new ArrayList<>();
     	psGetAllDataForContext.setInt(1, contextId);
     	ResultSet rs = psGetAllDataForContext.executeQuery();
     	while (rs.next()) {
@@ -132,7 +132,7 @@ public List<RecordContext> getDataForContext (int contextId) throws SQLException
     }
                 
     public List<RecordContext> getDataForContextAndType (int contextId, int type) throws SQLException {
-    	List<RecordContext> result = new ArrayList<RecordContext>();
+    	List<RecordContext> result = new ArrayList<>();
     	psGetAllDataForContextAndType.setInt(1, contextId);
     	psGetAllDataForContextAndType.setInt(2, type);
     	ResultSet rs = psGetAllDataForContextAndType.executeQuery();

File: src/org/parosproxy/paros/extension/ExtensionHook.java
Patch:
@@ -51,7 +51,7 @@ public class ExtensionHook {
     // ZAP: Added support for site map listeners
     private Vector<SiteMapListener> siteMapListenerList = new Vector<>();
     private Vector<PersistentConnectionListener> persistentConnectionListenerList = new Vector<>();
-    private List<AddonFilesChangedListener> addonFilesChangedListenerList = new ArrayList<AddonFilesChangedListener>(); 
+    private List<AddonFilesChangedListener> addonFilesChangedListenerList = new ArrayList<>(); 
     
     private ViewDelegate view = null;
     private CommandLineArgument[] arg = new CommandLineArgument[0];

File: src/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -865,7 +865,7 @@ public void removeExtension(Extension extension, ExtensionHook hook) {
 	}
 
 	public List<String> getUnsavedResources() {
-		List<String> list = new ArrayList<String>();
+		List<String> list = new ArrayList<>();
 		List<String> l;
 		
         for (int i=0; i<getExtensionCount(); i++) {

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -110,8 +110,8 @@ public class ExtensionHistory extends ExtensionAdaptor implements SessionChanged
 	
 	private boolean showJustInScope = false;
 	
-	// Used to cache hrefs not added into the historyList
-	private Hashtable<Integer, HistoryReference> historyIdToRef = new Hashtable<Integer, HistoryReference>();
+	// Used to cache hrefs not added into the historyTableModel
+	private Hashtable<Integer, HistoryReference> historyIdToRef = new Hashtable<>();
 
     
 	private Logger logger = Logger.getLogger(ExtensionHistory.class);

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -102,7 +102,7 @@ public class HistoryReference {
 	private int statusCode = -1;
 	private int rtt = -1;
 	private String reason = null;
-	private List<String> tags = new ArrayList<String>();
+	private List<String> tags = new ArrayList<>();
 	private boolean hasNote = false;
 	private Boolean webSocketUpgrade = null;	// Deliberately a Boolean so we can initialise it from the msg
 	private int responseBodyLength = -1;

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -62,8 +62,8 @@ public class Model {
 	private String currentDBNameUntitled = "";
 	// ZAP: Added logger
 	private Logger logger = Logger.getLogger(Model.class);
-	private List <SessionListener> sessionListeners = new ArrayList<SessionListener>();
-	private List <ContextDataFactory> contextDataFactories = new ArrayList <ContextDataFactory>(); 
+	private List <SessionListener> sessionListeners = new ArrayList<>();
+	private List <ContextDataFactory> contextDataFactories = new ArrayList <>(); 
 	
 	public Model() {
 	    // make sure the variable here will not refer back to model itself.

File: src/org/parosproxy/paros/network/HtmlParameter.java
Patch:
@@ -91,7 +91,7 @@ public void setType(Type type) {
 
 	public Set<String> getFlags() {
 		if (this.flags == null)
-			this.flags = new HashSet<String>();
+			this.flags = new HashSet<>();
 		return this.flags;
 	}
 

File: src/org/parosproxy/paros/view/SessionDialog.java
Patch:
@@ -40,7 +40,7 @@ public class SessionDialog extends AbstractParamDialog {
 	private static final long serialVersionUID = 2078860056416521552L;
 
 	/** The map of duplicate of the contexts, used for temporary changes in the UI. */
-	private Map<Integer, Context> uiContexts = new HashMap<Integer, Context>();
+	private Map<Integer, Context> uiContexts = new HashMap<>();
 
 	public SessionDialog() {
 		super();

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -110,8 +110,8 @@ public class View implements ViewDelegate {
 
 	private JMenu menuShowTabs = null;
 
-    private List<AbstractParamPanel> contextPanels = new ArrayList<AbstractParamPanel>();
-    private List<ContextPanelFactory> contextPanelFactories = new ArrayList<ContextPanelFactory>();
+    private List<AbstractParamPanel> contextPanels = new ArrayList<>();
+    private List<ContextPanelFactory> contextPanelFactories = new ArrayList<>();
 
 	private static int displayOption = DISPLAY_OPTION_BOTTOM_FULL;
 

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -559,8 +559,8 @@ private void updateParameters() {
 			Set<HtmlParameter> params = HtmlParametersUtils.getParamsSet(Type.form,
 					this.postDataField.getText());
 			HtmlParameter paramsArray[] = params.toArray(new HtmlParameter[params.size()]);
-			this.usernameParameterCombo.setModel(new DefaultComboBoxModel<HtmlParameter>(paramsArray));
-			this.passwordParameterCombo.setModel(new DefaultComboBoxModel<HtmlParameter>(paramsArray));
+			this.usernameParameterCombo.setModel(new DefaultComboBoxModel<>(paramsArray));
+			this.passwordParameterCombo.setModel(new DefaultComboBoxModel<>(paramsArray));
 
 			int index = getIndexOfParamWithValue(paramsArray, FormBasedAuthenticationMethod.MSG_USER_PATTERN);
 			if (index >= 0)

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -152,7 +152,7 @@ private List<String> getListFromDom (Document dom, String element) {
 		List<String> list = null;
 		NodeList nl = dom.getElementsByTagName(element);
 		if (nl.getLength() > 0) {
-			list = new ArrayList<String>();
+			list = new ArrayList<>();
 			for (int i=0; i < nl.getLength(); i++) {
 				list.add(nl.item(i).getTextContent());
 			}

File: src/org/zaproxy/zap/control/AddOnCollection.java
Patch:
@@ -181,7 +181,7 @@ public AddOn getAddOn(String id) {
      * @return a list of addons from the supplied collection that are newer than the equivalent ones in this collection
      */
     public List <AddOn> getUpdatedAddOns(AddOnCollection aoc) {
-        List<AddOn> updatedAddOns = new ArrayList<AddOn>();
+        List<AddOn> updatedAddOns = new ArrayList<>();
 
     	for (AddOn ao : aoc.getAddOns()) {
         	for (AddOn addOn : addOns) {
@@ -204,7 +204,7 @@ public List <AddOn> getUpdatedAddOns(AddOnCollection aoc) {
      * @return a list of addons from the supplied collection that are newer than the equivalent ones in this collection
      */
     public List <AddOn> getNewAddOns(AddOnCollection aoc) {
-        List<AddOn> newAddOns = new ArrayList<AddOn>();
+        List<AddOn> newAddOns = new ArrayList<>();
 
     	for (AddOn ao : aoc.getAddOns()) {
     		boolean isNew = true;

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -195,7 +195,7 @@ public String getTokenValue(HttpMessage tokenMsg, String tokenName) {
 	}
 
 	public List<AntiCsrfToken> getTokensFromResponse(HttpMessage msg, Source source) {
-		List<AntiCsrfToken> list = new ArrayList<AntiCsrfToken>();
+		List<AntiCsrfToken> list = new ArrayList<>();
 		List<Element> formElements = source.getAllElements(HTMLElementName.FORM);
 
 		if (formElements != null && formElements.size() > 0) {

File: src/org/zaproxy/zap/extension/api/ApiDynamicActionImplementor.java
Patch:
@@ -48,7 +48,7 @@ public ApiResponse buildParamsDescription() {
 	}
 
 	private static ApiResponseSet buildParamMap(String paramName, boolean mandatory) {
-		Map<String, String> m = new HashMap<String, String>();
+		Map<String, String> m = new HashMap<>();
 		m.put("name", paramName);
 		m.put("mandatory", mandatory ? "true" : "false");
 		return new ApiResponseSet("param", m);

File: src/org/zaproxy/zap/extension/api/ApiGeneratorUtils.java
Patch:
@@ -53,7 +53,7 @@ public class ApiGeneratorUtils {
 	 * @return all of the available ApiImplementors.
 	 */
 	public static List<ApiImplementor> getAllImplementors() {
-		List<ApiImplementor> imps = new ArrayList<ApiImplementor>();
+		List<ApiImplementor> imps = new ArrayList<>();
 		
 		ApiImplementor api;
 

File: src/org/zaproxy/zap/extension/api/ApiImplementor.java
Patch:
@@ -38,7 +38,7 @@ public abstract class ApiImplementor {
 	private List<ApiAction> apiActions = new ArrayList<>();
 	private List<ApiView> apiViews = new ArrayList<>();
 	private List<ApiOther> apiOthers = new ArrayList<>();
-	private List<String> apiShortcuts = new ArrayList<String>();
+	private List<String> apiShortcuts = new ArrayList<>();
 	private AbstractParam param = null;
 	
 	public List<ApiView> getApiViews() {
@@ -73,7 +73,7 @@ public void addApiOptions(AbstractParam param) {
 		// Add option parameter getters and setters via reflection
 		this.param = param;
 		Method[] methods = param.getClass().getDeclaredMethods();
-		List<String> addedActions = new ArrayList<String>();
+		List<String> addedActions = new ArrayList<>();
 		// Check for string setters (which take precedence)
 		for (Method method : methods) {
 			if (method.getName().startsWith("get") && method.getParameterTypes().length == 0) {

File: src/org/zaproxy/zap/extension/api/ApiResponseList.java
Patch:
@@ -36,7 +36,7 @@ public class ApiResponseList extends ApiResponse {
 
 	public ApiResponseList(String name) {
 		super(name);
-		this.list = new ArrayList<ApiResponse>();
+		this.list = new ArrayList<>();
 	}
 
 	public ApiResponseList(Node node) 
@@ -53,7 +53,7 @@ public ApiResponseList(Node node, ApiResponseList template)
 			throws ClientApiException {
 		super(node.getNodeName());
 		try {
-			this.list = new ArrayList<ApiResponse>();
+			this.list = new ArrayList<>();
 			Class<? extends ApiResponse> clazz = template.getItemsClass();
 			if (clazz != null) {
 
@@ -71,7 +71,7 @@ public ApiResponseList(Node node, ApiResponseList template)
 
 	public ApiResponseList(String name, ApiResponse[] array) {
 		super(name);
-		this.list = new ArrayList<ApiResponse>();
+		this.list = new ArrayList<>();
 		for (ApiResponse resp: array) {
 			list.add(resp);
 		}

File: src/org/zaproxy/zap/extension/api/ApiResponseSet.java
Patch:
@@ -44,7 +44,7 @@ public ApiResponseSet(String name, Map<String, String> values) {
 	public ApiResponseSet(Node node) throws ClientApiException {
 		super(node.getNodeName());
 		Node child = node.getFirstChild();
-		this.values = new HashMap<String, String>();
+		this.values = new HashMap<>();
 		while (child != null) {
 			ApiResponseElement elem = (ApiResponseElement) ApiResponseFactory.getResponse(child);
 			values.put(elem.getName(), elem.getValue());

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -618,7 +618,7 @@ private void getURLs(SiteNode parent, ApiResponseList list) {
 	}
 
 	private ApiResponseSet alertToSet(Alert alert) {
-		Map<String, String> map = new HashMap<String, String>();
+		Map<String, String> map = new HashMap<>();
 		map.put("id", String.valueOf(alert.getAlertId()));
 		map.put("alert", alert.getAlert());
 		map.put("description", alert.getDescription());
@@ -645,7 +645,7 @@ private ApiResponseSet alertToSet(Alert alert) {
 	 * @return
 	 */
 	private ApiResponseSet httpMessageToSet(HttpMessage msg) {
-		Map<String, String> map = new HashMap<String, String>();
+		Map<String, String> map = new HashMap<>();
 		map.put("id", String.valueOf(msg.getHistoryRef().getHistoryId()));
 		map.put("cookieParams", msg.getCookieParamsAsString());
 		map.put("note", msg.getNote());

File: src/org/zaproxy/zap/extension/api/JavaAPIGenerator.java
Patch:
@@ -60,7 +60,7 @@ public class JavaAPIGenerator {
 	 */
 	private static final Map<String, String> nameMap;
     static {
-        Map<String, String> initMap = new HashMap<String, String>();
+        Map<String, String> initMap = new HashMap<>();
         initMap.put("break", "brk");
         nameMap = Collections.unmodifiableMap(initMap);
     }

File: src/org/zaproxy/zap/extension/api/PythonAPIGenerator.java
Patch:
@@ -61,7 +61,7 @@ public class PythonAPIGenerator {
 	 */
 	private static final Map<String, String> nameMap;
     static {
-        Map<String, String> initMap = new HashMap<String, String>();
+        Map<String, String> initMap = new HashMap<>();
         initMap.put("break", "brk");
         nameMap = Collections.unmodifiableMap(initMap);
     }

File: src/org/zaproxy/zap/extension/api/WebUI.java
Patch:
@@ -262,7 +262,7 @@ public String handleRequest(String component, ApiImplementor impl,
 				sb.append("</form>\n");
 
 			} else {
-				List<ApiElement> elementList = new ArrayList<ApiElement>();
+				List<ApiElement> elementList = new ArrayList<>();
 				List<ApiView> viewList = impl.getApiViews();
 				if (viewList != null && viewList.size() > 0) {
 					sb.append("<h3>");
@@ -277,7 +277,7 @@ public String handleRequest(String component, ApiImplementor impl,
 					sb.append("<h3>");
 					sb.append(Constant.messages.getString("api.html.actions"));
 					sb.append("</h3>\n");
-					elementList = new ArrayList<ApiElement>();
+					elementList = new ArrayList<>();
 					elementList.addAll(actionList);
 					this.appendElements(sb, component, RequestType.action.name(), elementList);
 				}
@@ -287,7 +287,7 @@ public String handleRequest(String component, ApiImplementor impl,
 					sb.append("<h3>");
 					sb.append(Constant.messages.getString("api.html.others"));
 					sb.append("</h3>\n");
-					elementList = new ArrayList<ApiElement>();
+					elementList = new ArrayList<>();
 					elementList.addAll(otherList);
 					this.appendElements(sb, component, RequestType.other.name(), elementList);
 				}

File: src/org/zaproxy/zap/extension/ascan/ScanProgressDialog.java
Patch:
@@ -157,7 +157,7 @@ private String getElapsedTime(Date start, Date end) {
 	private void showProgress() {
 		
 		List<HostProcess> list = scan.getHostProcesses();
-		List<String[]> values = new ArrayList<String[]>();
+		List<String[]> values = new ArrayList<>();
 		boolean completed = true;
 		
 		if (list != null) {

File: src/org/zaproxy/zap/extension/authentication/AuthenticationAPI.java
Patch:
@@ -78,7 +78,7 @@ public AuthenticationAPI(ExtensionAuthentication extension) {
 		this.addApiView(new ApiView(VIEW_GET_LOGGED_IN_INDICATOR, new String[] { PARAM_CONTEXT_ID }));
 		this.addApiView(new ApiView(VIEW_GET_LOGGED_OUT_INDICATOR, new String[] { PARAM_CONTEXT_ID }));
 
-		this.loadedAuthenticationMethodActions = new HashMap<String, ApiDynamicActionImplementor>();
+		this.loadedAuthenticationMethodActions = new HashMap<>();
 		// Load the authentication method actions
 		if (extension != null) {
 			for (AuthenticationMethodType t : extension.getAuthenticationMethodTypes()) {

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -94,7 +94,7 @@ public class ExtensionAutoUpdate extends ExtensionAdaptor implements CheckForUpd
     private AutoUpdateAPI api = null;
 
     // Files currently being downloaded
-	private List<Downloader> downloadFiles = new ArrayList<Downloader>();
+	private List<Downloader> downloadFiles = new ArrayList<>();
 
     /**
      * 
@@ -262,7 +262,7 @@ private void showWarningMessageUnableToCopyAddOnFile() {
 	}
 
 	private List <AddOnWrapper> getInstalledAddOns() {
-		List <AddOnWrapper> list = new ArrayList <AddOnWrapper>();
+		List <AddOnWrapper> list = new ArrayList <>();
 		
 		for (AddOn ao : this.getLocalVersionInfo().getAddOns()) {
 			list.add(new AddOnWrapper(ao, AddOnWrapper.Status.installed));
@@ -326,7 +326,7 @@ public void run() {
 	}
 	
 	public void installNewExtensions() {
-		List<Downloader> handledFiles = new ArrayList<Downloader>();
+		List<Downloader> handledFiles = new ArrayList<>();
 		
 		for (Downloader dl : downloadFiles) {
 			if (dl.getFinished() == null) {

File: src/org/zaproxy/zap/extension/autoupdate/InstalledAddOnsTableModel.java
Patch:
@@ -39,7 +39,7 @@ public class InstalledAddOnsTableModel extends AbstractMultipleOptionsTableModel
     
 	private static final int COLUMN_COUNT = COLUMN_NAMES.length;
     
-	private List <AddOnWrapper> addOns = new ArrayList<AddOnWrapper>();
+	private List <AddOnWrapper> addOns = new ArrayList<>();
     
     /**
      * 

File: src/org/zaproxy/zap/extension/autoupdate/ManageAddOnsDialog.java
Patch:
@@ -338,7 +338,7 @@ protected void setLatestVersionInfo(AddOnCollection latestInfo) {
 		getCorePanel(true);
 		
 		if (latestInfo != null) {
-			this.uninstalledAddOns = new ArrayList<AddOnWrapper>();
+			this.uninstalledAddOns = new ArrayList<>();
 
 			for (AddOn addOn : latestInfo.getAddOns()) {
 				boolean found = false;

File: src/org/zaproxy/zap/extension/autoupdate/UninstalledAddOnsTableModel.java
Patch:
@@ -39,7 +39,7 @@ public class UninstalledAddOnsTableModel extends AbstractMultipleOptionsTableMod
     
 	private static final int COLUMN_COUNT = COLUMN_NAMES.length;
     
-	private List <AddOnWrapper> addOns = new ArrayList<AddOnWrapper>();
+	private List <AddOnWrapper> addOns = new ArrayList<>();
     
     /**
      * 

File: src/org/zaproxy/zap/extension/brk/BreakpointMessageHandler.java
Patch:
@@ -40,7 +40,7 @@ public class BreakpointMessageHandler {
     
     protected List<BreakpointMessageInterface> enabledBreakpoints;
     
-    private List<String> enabledKeyBreakpoints = new ArrayList<String>();;
+    private List<String> enabledKeyBreakpoints = new ArrayList<>();;
     
     public List<String> getEnabledKeyBreakpoints() {
 		return enabledKeyBreakpoints;

File: src/org/zaproxy/zap/extension/brk/impl/http/BreakAddEditDialog.java
Patch:
@@ -72,7 +72,7 @@ public void init (HttpBreakpointMessage breakpoint, boolean add) {
 	}
 	
 	private List<String> getLocations() {
-		ArrayList<String> list = new ArrayList<String>();
+		ArrayList<String> list = new ArrayList<>();
 		for (Location loc : HttpBreakpointMessage.Location.values()) {
 			list.add(this.locToStr(loc));
 		}
@@ -93,7 +93,7 @@ private Location strToLoc (String str) {
 	}
 
 	private List<String> getMatches() {
-		ArrayList<String> list = new ArrayList<String>();
+		ArrayList<String> list = new ArrayList<>();
 		for (Match match : HttpBreakpointMessage.Match.values()) {
 			list.add(this.matchToStr(match));
 		}

File: src/org/zaproxy/zap/extension/bruteforce/BruteForceParam.java
Patch:
@@ -162,7 +162,7 @@ public List<String> getFileExtensionsList() {
 	    	return Collections.emptyList();
 	    }
 	    
-	    List<String> fileExtensionsList = new ArrayList<String>();
+	    List<String> fileExtensionsList = new ArrayList<>();
 	    for (String fileExtension: fileExtensions.replaceAll("\\s", 
 	    		EMPTY_STRING).split(",")) {
 	    	if (!fileExtension.equals(EMPTY_STRING)) {

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -492,7 +492,7 @@ public void sessionModeChanged(Mode mode) {
 	 * @return the http sessions for context
 	 */
 	public List<HttpSession> getHttpSessionsForContext(Context context) {
-		List<HttpSession> sessions = new LinkedList<HttpSession>();
+		List<HttpSession> sessions = new LinkedList<>();
 		if (this.sessions == null)
 			return sessions;
 

File: src/org/zaproxy/zap/extension/params/ParamsAPI.java
Patch:
@@ -62,7 +62,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			for (SiteParameters siteParam : siteParams) {
 				for (HtmlParameterStats param : siteParam.getParams()) {
 					ApiResponseList stats = new ApiResponseList("Parameter");
-					Map<String, String> map = new HashMap<String, String>();
+					Map<String, String> map = new HashMap<>();
 					map.put("site", param.getSite());
 					map.put("name", param.getName());
 					map.put("type", param.getType().name());

File: src/org/zaproxy/zap/extension/params/SiteParameters.java
Patch:
@@ -66,7 +66,7 @@ public HtmlParameterStats getParam(HtmlParameter.Type type, String name) {
 	}
 
 	public List<HtmlParameterStats> getParams(HtmlParameter.Type type) {
-		List<HtmlParameterStats> params = new ArrayList<HtmlParameterStats>();
+		List<HtmlParameterStats> params = new ArrayList<>();
 		switch (type) {
 		case cookie:
 			for (HtmlParameterStats param : this.cookieParams.values()) {
@@ -88,7 +88,7 @@ public List<HtmlParameterStats> getParams(HtmlParameter.Type type) {
 	}
 
 	public List<HtmlParameterStats> getParams() {
-		List<HtmlParameterStats> params = new ArrayList<HtmlParameterStats>();
+		List<HtmlParameterStats> params = new ArrayList<>();
 		for (HtmlParameterStats param : this.cookieParams.values()) {
 			params.add(param);
 		}

File: src/org/zaproxy/zap/extension/reauth/ExtensionReauth.java
Patch:
@@ -83,8 +83,8 @@ public class ExtensionReauth extends ExtensionAdaptor implements HttpSenderListe
 	private boolean reauthenticate = false;
 	private ReauthAPI api = null;
 	
-	private Map<Integer,SessionAuthenticationPanel> authPanelMap = new HashMap<Integer,SessionAuthenticationPanel>();
-	private Map<Integer,ContextAuth> contextAuthMap = new HashMap<Integer,ContextAuth>();
+	private Map<Integer,SessionAuthenticationPanel> authPanelMap = new HashMap<>();
+	private Map<Integer,ContextAuth> contextAuthMap = new HashMap<>();
 	
 	private Logger logger = Logger.getLogger(this.getClass());
 	

File: src/org/zaproxy/zap/extension/script/DefaultEngineWrapper.java
Patch:
@@ -34,7 +34,7 @@
 
 public class DefaultEngineWrapper extends ScriptEngineWrapper {
 
-    private Map<String, String> templateMap = new HashMap<String, String>();
+    private Map<String, String> templateMap = new HashMap<>();
 
     private static Logger logger = Logger.getLogger(DefaultEngineWrapper.class);
 

File: src/org/zaproxy/zap/extension/script/MultipleWriters.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class MultipleWriters extends Writer {
 	
-	private List<Writer> writers = new ArrayList<Writer>();
+	private List<Writer> writers = new ArrayList<>();
 
 	@Override
 	public void write(char[] cbuf, int off, int len) throws IOException {

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -83,7 +83,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 				throw new ApiException(ApiException.Type.BAD_VIEW);
 			}
 			this.searchInProgress = true;
-			this.results = new ArrayList<SearchResult>();
+			this.results = new ArrayList<>();
 			ExtensionSearch.Type type;
 			
 			if (VIEW_URLS_BY_URL_REGEX.equals(name)) {
@@ -111,7 +111,7 @@ public ApiResponse handleApiView(String name, JSONObject params)
 			}
 
 			for (SearchResult sr : this.results) {
-				Map<String, String> map = new HashMap<String, String>();
+				Map<String, String> map = new HashMap<>();
 				map.put("id", String.valueOf(sr.getMessage().getHistoryRef().getHistoryId()));
 				map.put("type", String.valueOf(sr.getMessage().getHistoryRef().getHistoryType()));
 				map.put("method", sr.getMessage().getRequestHeader().getMethod());

File: src/org/zaproxy/zap/extension/sessions/SessionManagementAPI.java
Patch:
@@ -78,7 +78,7 @@ public SessionManagementAPI(ExtensionSessionManagement extension) {
 				new String[] { PARAM_CONTEXT_ID, PARAM_METHOD_NAME },
 				new String[] { PARAM_METHOD_CONFIG_PARAMS }));
 
-		this.loadedSessionManagementMethodActions = new HashMap<String, ApiDynamicActionImplementor>();
+		this.loadedSessionManagementMethodActions = new HashMap<>();
 		// Load the session management method actions
 		if (extension != null) {
 			for (SessionManagementMethodType t : extension.getSessionManagementMethodTypes()) {

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextMenuItemFactory.java
Patch:
@@ -33,7 +33,7 @@ public abstract class PopupContextMenuItemFactory extends ExtensionPopupMenuItem
 
 	private static final long serialVersionUID = 2282358266003940700L;
 
-    private List<ExtensionPopupMenuItem> subMenus = new ArrayList<ExtensionPopupMenuItem>();
+    private List<ExtensionPopupMenuItem> subMenus = new ArrayList<>();
     private String parentMenu;
 
 	/**

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextMenuItemHolder.java
Patch:
@@ -83,7 +83,7 @@ public boolean isSubMenu() {
 	 */
 	private List<ExtensionPopupMenuItem> getSubmenuItems() {
 		if (subMenuItems == null)
-			subMenuItems = new ArrayList<ExtensionPopupMenuItem>();
+			subMenuItems = new ArrayList<>();
 		return subMenuItems;
 	}
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupContextMenuSiteNodeFactory.java
Patch:
@@ -35,7 +35,7 @@ public abstract class PopupContextMenuSiteNodeFactory extends PopupMenuSiteNode
 
 	private static final long serialVersionUID = 2282358266003940700L;
 
-    private List<ExtensionPopupMenuItem> subMenus = new ArrayList<ExtensionPopupMenuItem>();
+    private List<ExtensionPopupMenuItem> subMenus = new ArrayList<>();
     private String parentMenu;
 
 	/**

File: src/org/zaproxy/zap/extension/stdmenus/PopupUserMenuItemHolder.java
Patch:
@@ -119,7 +119,7 @@ public boolean isSubMenu() {
 	 */
 	private List<ExtensionPopupMenuItem> getSubmenuItems() {
 		if (subMenuItems == null)
-			subMenuItems = new ArrayList<ExtensionPopupMenuItem>();
+			subMenuItems = new ArrayList<>();
 		return subMenuItems;
 	}
 

File: src/org/zaproxy/zap/extension/users/UsersAPI.java
Patch:
@@ -101,7 +101,7 @@ public UsersAPI(ExtensionUserManagement extension) {
 		if (Control.getSingleton() != null) {
 			ExtensionAuthentication authenticationExtension = (ExtensionAuthentication) Control
 					.getSingleton().getExtensionLoader().getExtension(ExtensionAuthentication.NAME);
-			this.loadedAuthenticationMethodActions = new HashMap<Integer, ApiDynamicActionImplementor>();
+			this.loadedAuthenticationMethodActions = new HashMap<>();
 			if (authenticationExtension != null) {
 				for (AuthenticationMethodType t : authenticationExtension.getAuthenticationMethodTypes()) {
 					ApiDynamicActionImplementor i = t.getSetCredentialsForUserApiAction();
@@ -131,7 +131,7 @@ public ApiResponse handleApiView(String name, JSONObject params) throws ApiExcep
 			if (hasContextId(params))
 				users = extension.getContextUserAuthManager(getContextId(params)).getUsers();
 			else {
-				users = new ArrayList<User>();
+				users = new ArrayList<>();
 				for (Context c : Model.getSingleton().getSession().getContexts())
 					users.addAll(extension.getContextUserAuthManager(c.getIndex()).getUsers());
 			}

File: src/org/zaproxy/zap/extension/users/UsersTableModel.java
Patch:
@@ -42,7 +42,7 @@ public class UsersTableModel extends AbstractMultipleOptionsTableModel<User> {
 	private static final long serialVersionUID = 4463944219657112162L;
 
 	/** The users. */
-	private List<User> users = new ArrayList<User>();
+	private List<User> users = new ArrayList<>();
 
 	/**
 	 * Instantiates a new users table model. An internal copy of the provided list is stored.
@@ -57,7 +57,7 @@ public UsersTableModel(List<User> users) {
 	 * Instantiates a new user table model.
 	 */
 	public UsersTableModel() {
-		this.users = new ArrayList<User>();
+		this.users = new ArrayList<>();
 	}
 
 	@Override
@@ -118,7 +118,7 @@ public void setUsers(List<User> users) {
 	 * Removes all the users for this model.
 	 */
 	public void removeAllUsers(){
-		this.users=new ArrayList<User>();
+		this.users=new ArrayList<>();
 		this.fireTableDataChanged();
 	}
 

File: src/org/zaproxy/zap/session/CookieBasedSessionManagementMethodType.java
Patch:
@@ -115,7 +115,7 @@ public void processMessageToMatchSession(HttpMessage message, WebSession session
 
 		private ExtensionHttpSessions getHttpSessionsExtension() {
 			if (extHttpSessions == null || extHttpSessions.get() == null) {
-				extHttpSessions = new WeakReference<ExtensionHttpSessions>((ExtensionHttpSessions) Control
+				extHttpSessions = new WeakReference<>((ExtensionHttpSessions) Control
 						.getSingleton().getExtensionLoader().getExtension(ExtensionHttpSessions.class));
 				if (extHttpSessions == null)
 					log.error("An error occured while loading the ExtensionHttpSessions.");

File: src/org/zaproxy/zap/utils/I18N.java
Patch:
@@ -19,7 +19,7 @@ public class I18N {
 
     private ResourceBundle stdMessages = null;
     private Locale locale = null;
-    private Map<String, ResourceBundle> addonMessages = new HashMap<String, ResourceBundle>();
+    private Map<String, ResourceBundle> addonMessages = new HashMap<>();
     
 	private static final Logger logger = Logger.getLogger(I18N.class);
 

File: src/org/zaproxy/zap/utils/TableColumnManager.java
Patch:
@@ -89,7 +89,7 @@ public void reset() {
 		// Keep a duplicate TableColumns for managing hidden TableColumns
 
 		int count = columnModel.getColumnCount();
-		allColumns = new ArrayList<TableColumn>(count);
+		allColumns = new ArrayList<>(count);
 
 		for (int i = 0; i < count; i++) {
 			allColumns.add(columnModel.getColumn(i));

File: src/org/zaproxy/zap/view/ContextListPanel.java
Patch:
@@ -156,7 +156,7 @@ public void valueChanged(ListSelectionEvent arg0) {
 	public void initParam(Object obj) {
 	    Session session = (Session) obj;
 	    
-	    List<Object[]> values = new ArrayList<Object[]>();
+	    List<Object[]> values = new ArrayList<>();
 	    List<Context> contexts = session.getContexts();
 	    for (Context context : contexts) {
 	    	values.add(new Object[] {context.getIndex(), context.getName(), context.isInScope()});

File: src/org/zaproxy/zap/view/ContextTechnologyPanel.java
Patch:
@@ -58,7 +58,7 @@ public class ContextTechnologyPanel extends AbstractContextPropertiesPanel {
 	private JPanel panelSession = null;
 	private JScrollPane jScrollPane = null;
 	private TreeModel model = null;
-	private HashMap<Tech, DefaultMutableTreeNode> techToNodeMap = new HashMap<Tech, DefaultMutableTreeNode>();
+	private HashMap<Tech, DefaultMutableTreeNode> techToNodeMap = new HashMap<>();
 
 	private CheckboxTree techTree = null;
 
@@ -123,7 +123,7 @@ private JPanel getPanelSession() {
 	}
 
 	private TreePath getPath(TreeNode node) {
-		List<TreeNode> list = new ArrayList<TreeNode>();
+		List<TreeNode> list = new ArrayList<>();
 
 		// Add all nodes to list
 		while (node != null) {

File: src/org/zaproxy/zap/view/HistoryReferenceTable.java
Patch:
@@ -148,7 +148,7 @@ public HistoryReference getSelectedValue() {
 	public List<HistoryReference> getSelectedValues() {
 		int [] rows = this.getSelectedRows();
 		if (rows != null) {
-			List<HistoryReference> hrefList = new ArrayList<HistoryReference>(rows.length);
+			List<HistoryReference> hrefList = new ArrayList<>(rows.length);
 			for (int row : rows) {
 				hrefList.add(this.getHrefModel().getHistoryReference(row));
 			}

File: src/org/zaproxy/zap/view/OverlayIcon.java
Patch:
@@ -39,7 +39,7 @@ public class OverlayIcon extends ImageIcon {
 	public OverlayIcon(ImageIcon base) {
 		super(base.getImage());
 		this.base = base;
-		this.overlays = new ArrayList<ImageIcon>();
+		this.overlays = new ArrayList<>();
 	}
 	
 	public void add(ImageIcon overlay) {

File: src/org/zaproxy/zap/view/TabbedPanel2.java
Patch:
@@ -36,8 +36,8 @@ public class TabbedPanel2 extends TabbedPanel {
 	private static final Icon CLOSE_TAB_RED_ICON = new ImageIcon(
 			TabbedPanel2.class.getResource("/resource/icon/fugue/cross-small-red.png"));
 
-	private List<Component> fullTabList = new ArrayList<Component>();
-	private List<Component> removedTabList = new ArrayList<Component>();
+	private List<Component> fullTabList = new ArrayList<>();
+	private List<Component> removedTabList = new ArrayList<>();
 
 	private final Logger logger = Logger.getLogger(TabbedPanel2.class);
 

File: src/org/zaproxy/clientapi/gen/Acsrf.java
Patch:
@@ -77,11 +77,11 @@ public ApiResponse setOptionConfirmRemoveToken(boolean bool) throws ClientApiExc
 	/**
 	 * Generate a form for testing lack of anti CSRF tokens - typically invoked via ZAP
 	 */
-	public ApiResponse genForm(String hrefid) throws ClientApiException {
+	public byte[] genForm(String hrefid) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
 		map.put("hrefId", hrefid);
-		return api.callApi("acsrf", "other", "genForm", map);
+		return api.callApiOther("acsrf", "other", "genForm", map);
 	}
 
 }

File: src/org/zaproxy/zap/extension/api/ApiGeneratorUtils.java
Patch:
@@ -33,7 +33,7 @@
 import org.zaproxy.zap.extension.httpsessions.HttpSessionsAPI;
 import org.zaproxy.zap.extension.params.ParamsAPI;
 import org.zaproxy.zap.extension.pscan.PassiveScanAPI;
-import org.zaproxy.zap.extension.reauth.AuthAPI;
+import org.zaproxy.zap.extension.reauth.ReauthAPI;
 import org.zaproxy.zap.extension.search.SearchAPI;
 import org.zaproxy.zap.extension.sessions.SessionManagementAPI;
 import org.zaproxy.zap.extension.spider.SpiderAPI;
@@ -84,7 +84,7 @@ public static List<ApiImplementor> getAllImplementors() {
 
         imps.add(new ContextAPI());
 		
-		imps.add(new AuthAPI(null));
+		imps.add(new ReauthAPI(null));
 
 		imps.add(new HttpSessionsAPI(null));
 		

File: src/org/zaproxy/zap/extension/reauth/SessionAuthenticationPanel.java
Patch:
@@ -165,8 +165,8 @@ public void validateContextData(Session session) throws Exception {
 
 	@Override
 	public void saveContextData(Session session) throws Exception {
-		ExtensionAuth ext = (ExtensionAuth) Control.getSingleton().getExtensionLoader()
-				.getExtension(ExtensionAuth.NAME);
+		ExtensionReauth ext = (ExtensionReauth) Control.getSingleton().getExtensionLoader()
+				.getExtension(ExtensionReauth.NAME);
 		if (ext != null) {
 			ext.setLoginRequest(getContextIndex(), this.getTxtLoginUrl().getText(), this.getTxtLoginPostData()
 					.getText());

File: src/org/zaproxy/clientapi/gen/HttpSessions.java
Patch:
@@ -60,10 +60,11 @@ public ApiResponse sessionTokens(String site) throws ClientApiException {
 		return api.callApi("httpSessions", "view", "sessionTokens", map);
 	}
 
-	public ApiResponse createEmptySession(String site) throws ClientApiException {
+	public ApiResponse createEmptySession(String site, String session) throws ClientApiException {
 		Map<String, String> map = null;
 		map = new HashMap<String, String>();
 		map.put("site", site);
+		map.put("session", session);
 		return api.callApi("httpSessions", "action", "createEmptySession", map);
 	}
 

File: src/org/zaproxy/clientapi/gen/Pscan.java
Patch:
@@ -20,8 +20,8 @@
 
 package org.zaproxy.clientapi.gen;
 
+import java.util.HashMap;
 import java.util.Map;
-
 import org.zaproxy.clientapi.core.ApiResponse;
 import org.zaproxy.clientapi.core.ClientApi;
 import org.zaproxy.clientapi.core.ClientApiException;

File: src/org/parosproxy/paros/core/scanner/VariantAbstractQuery.java
Patch:
@@ -130,18 +130,17 @@ public String setEscapedParameter(HttpMessage msg, NameValuePair originalPair, S
 
     private String setParameter(HttpMessage msg, NameValuePair originalPair, String name, String value, boolean escaped) {
         StringBuilder sb = new StringBuilder();
-        String encodedValue;
+        String encodedValue = (escaped) ? value : getEscapedValue(msg, value);
         NameValuePair pair;
         boolean isAppended;
         
         for (int i = 0; i < getParamList().size(); i++) {
             pair = getParamList().get(i);
             if (i == originalPair.getPosition()) {
-                encodedValue = (escaped) ? value : getEscapedValue(msg, value);
                 isAppended = paramAppend(sb, name, encodedValue);
 
             } else {
-                isAppended = paramAppend(sb, pair.getName(), pair.getValue());
+                isAppended = paramAppend(sb, pair.getName(), getEscapedValue(msg, pair.getValue()));
             }
 
             if (isAppended && i < getParamList().size() - 1) {

File: src/org/parosproxy/paros/core/scanner/VariantHeader.java
Patch:
@@ -25,7 +25,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.regex.Pattern;
 import org.apache.commons.httpclient.URIException;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.network.HttpMessage;

File: src/org/zaproxy/zap/session/CookieBasedSessionManagementMethodType.java
Patch:
@@ -202,7 +202,7 @@ public CookieBasedSession(String name) {
 		}
 
 		public CookieBasedSession() {
-			super("Cookie Based Session " + generatedNameIndex, new HttpState());
+			super("Cookie Based Session " + generatedNameIndex++, new HttpState());
 		}
 
 	}

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java
Patch:
@@ -83,7 +83,6 @@ public HttpPanelSender(HttpPanelRequest requestPanel,
 	public void handleSendMessage(Message aMessage) throws IllegalArgumentException, IOException {
 		final HttpMessage httpMessage = (HttpMessage) aMessage;
 		try {
-			httpMessage.getRequestHeader().setContentLength(httpMessage.getRequestBody().length());
 			getDelegate().sendAndReceive(httpMessage, getButtonFollowRedirects().isSelected());
 			
 			EventQueue.invokeAndWait(new Runnable() {

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -29,6 +29,7 @@
 // ZAP: 2012/07/29 Issue 43: Added support for Scope
 // ZAP: 2012/08/29 Issue 250 Support for authentication management
 // ZAP: 2013/01/29 Handle structural nodes in findNode
+// ZAP: 2013/09/26 Issue 656: Content-length: 0 in GET requests
 
 package org.parosproxy.paros.model;
 
@@ -574,7 +575,7 @@ private HistoryReference createReference(SiteNode node, HistoryReference baseRef
         newMsg.getRequestHeader().setURI(uri);
         newMsg.getRequestHeader().setMethod(HttpRequestHeader.GET);
         newMsg.getRequestBody().setBody("");
-        newMsg.getRequestHeader().setContentLength(0);
+        newMsg.getRequestHeader().setHeader(HttpHeader.CONTENT_LENGTH, null);
         
 		//HistoryReference historyRef = new HistoryReference(model.getSession(), baseRef.getHistoryType(), newMsg);
 		HistoryReference historyRef = new HistoryReference(model.getSession(), HistoryReference.TYPE_TEMPORARY, newMsg);

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2013/08/31 Reauthentication when sending a message from the perspective of a User
 // ZAP: 2013/09/07 Switched to using HttpState for requesting User for cookie management
 // ZAP: 2013/09/26 Issue 716: ZAP flags its own HTTP responses
+// ZAP: 2013/09/26 Issue 656: Content-length: 0 in GET requests
 
 package org.parosproxy.paros.network;
 
@@ -338,7 +339,7 @@ public void sendAndReceive(HttpMessage msg, boolean isFollowRedirect) throws IOE
 				temp.getRequestHeader().setURI(newLocation);
 
 				temp.getRequestHeader().setMethod(HttpRequestHeader.GET);
-				temp.getRequestHeader().setContentLength(0);
+				temp.getRequestHeader().setHeader(HttpHeader.CONTENT_LENGTH, null);
 				// ZAP: Reauthentication when sending a message from the perspective of a User
 				sendAuthenticated(temp, true);
 			}

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestBodyByteHttpPanelViewModel.java
Patch:
@@ -18,6 +18,7 @@
 package org.zaproxy.zap.extension.httppanel.view.impl.models.http.request;
 
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpByteHttpPanelViewModel;
+import org.zaproxy.zap.extension.httppanel.view.impl.models.http.HttpPanelViewModelUtils;
 
 public class RequestBodyByteHttpPanelViewModel extends AbstractHttpByteHttpPanelViewModel {
 
@@ -37,6 +38,7 @@ public void setData(byte[] data) {
 		}
 		
 		httpMessage.getRequestBody().setBody(data);
+		HttpPanelViewModelUtils.updateRequestContentLength(httpMessage);
 	}
 
 }

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestBodyStringHttpPanelViewModel.java
Patch:
@@ -18,6 +18,7 @@
 package org.zaproxy.zap.extension.httppanel.view.impl.models.http.request;
 
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpStringHttpPanelViewModel;
+import org.zaproxy.zap.extension.httppanel.view.impl.models.http.HttpPanelViewModelUtils;
 
 public class RequestBodyStringHttpPanelViewModel extends AbstractHttpStringHttpPanelViewModel {
 
@@ -37,6 +38,7 @@ public void setData(String data) {
 		}
 		
 		httpMessage.getRequestBody().setBody(data);
+		HttpPanelViewModelUtils.updateRequestContentLength(httpMessage);
 	}
 
 }

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestByteHttpPanelViewModel.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpByteHttpPanelViewModel;
+import org.zaproxy.zap.extension.httppanel.view.impl.models.http.HttpPanelViewModelUtils;
 
 public class RequestByteHttpPanelViewModel extends AbstractHttpByteHttpPanelViewModel {
 	
@@ -59,6 +60,7 @@ public void setData(byte[] data) {
 		}
 		
 		httpMessage.getRequestBody().setBody(ArrayUtils.subarray(data, pos, data.length));
+		HttpPanelViewModelUtils.updateRequestContentLength(httpMessage);
 	}
 	
 	private int findHeaderLimit(byte[] data) {

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/request/RequestStringHttpPanelViewModel.java
Patch:
@@ -21,6 +21,7 @@
 import org.parosproxy.paros.network.HttpHeader;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpStringHttpPanelViewModel;
+import org.zaproxy.zap.extension.httppanel.view.impl.models.http.HttpPanelViewModelUtils;
 
 public class RequestStringHttpPanelViewModel extends AbstractHttpStringHttpPanelViewModel {
 	
@@ -52,6 +53,7 @@ public void setData(String data) {
 		} else {
 			httpMessage.setRequestBody("");
 		}
+		HttpPanelViewModelUtils.updateRequestContentLength(httpMessage);
 	}
 
 }

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseBodyByteHttpPanelViewModel.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.parosproxy.paros.network.HttpHeader;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpByteHttpPanelViewModel;
+import org.zaproxy.zap.extension.httppanel.view.impl.models.http.HttpPanelViewModelUtils;
 
 public class ResponseBodyByteHttpPanelViewModel extends AbstractHttpByteHttpPanelViewModel {
 
@@ -67,5 +68,6 @@ public void setData(byte[] data) {
 		}
 		
 		httpMessage.getResponseBody().setBody(data);
+		HttpPanelViewModelUtils.updateResponseContentLength(httpMessage);
 	}
 }

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseBodyStringHttpPanelViewModel.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.parosproxy.paros.network.HttpHeader;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpStringHttpPanelViewModel;
+import org.zaproxy.zap.extension.httppanel.view.impl.models.http.HttpPanelViewModelUtils;
 
 public class ResponseBodyStringHttpPanelViewModel extends AbstractHttpStringHttpPanelViewModel {
 
@@ -67,5 +68,6 @@ public void setData(String data) {
 		}
 		
 		httpMessage.getResponseBody().setBody(data);
+		HttpPanelViewModelUtils.updateResponseContentLength(httpMessage);
 	}
 }

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseByteHttpPanelViewModel.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpByteHttpPanelViewModel;
+import org.zaproxy.zap.extension.httppanel.view.impl.models.http.HttpPanelViewModelUtils;
 
 public class ResponseByteHttpPanelViewModel extends AbstractHttpByteHttpPanelViewModel {
 	
@@ -61,6 +62,7 @@ public void setData(byte[] data) {
 		}
 		
 		httpMessage.getResponseBody().setBody(ArrayUtils.subarray(data, pos, data.length));
+		HttpPanelViewModelUtils.updateResponseContentLength(httpMessage);
 	}
 	
 	private int findHeaderLimit(byte[] data) {

File: src/org/zaproxy/zap/extension/httppanel/view/impl/models/http/response/ResponseStringHttpPanelViewModel.java
Patch:
@@ -21,6 +21,7 @@
 import org.parosproxy.paros.network.HttpHeader;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
 import org.zaproxy.zap.extension.httppanel.view.impl.models.http.AbstractHttpStringHttpPanelViewModel;
+import org.zaproxy.zap.extension.httppanel.view.impl.models.http.HttpPanelViewModelUtils;
 
 public class ResponseStringHttpPanelViewModel extends AbstractHttpStringHttpPanelViewModel {
 	
@@ -52,5 +53,6 @@ public void setData(String data) {
 		} else {
 			httpMessage.setResponseBody("");
 		}
+		HttpPanelViewModelUtils.updateResponseContentLength(httpMessage);
 	}
 }

File: src/org/zaproxy/zap/extension/httppanel/view/paramtable/ExtensionHttpPanelRequestFormTableView.java
Patch:
@@ -120,6 +120,7 @@ public void saveAllParams() {
 			}
 			
 			httpMessage.setFormParams(form);
+			httpMessage.getRequestHeader().setContentLength(httpMessage.getRequestBody().length());
 		}
 
 		@Override

File: src/org/parosproxy/paros/db/RecordHistory.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2012/03/15 Changed the RecordHistory constructor to receive a byte[]
 //      instead of String in the parameters reqBody and resBody.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2013/09/26 Issue 716: ZAP flags its own HTTP responses
 
 
 package org.parosproxy.paros.db;
@@ -43,7 +44,7 @@ public RecordHistory() {
 	}
 
 	// ZAP: Added note to RecordHistory constructor
-	public RecordHistory(int historyId, int historyType, long sessionId, long timeSentMillis, int timeElapsedMillis, String reqHeader, byte[] reqBody, String resHeader, byte[] resBody, String tag, String note) throws HttpMalformedHeaderException {
+	public RecordHistory(int historyId, int historyType, long sessionId, long timeSentMillis, int timeElapsedMillis, String reqHeader, byte[] reqBody, String resHeader, byte[] resBody, String tag, String note, boolean responseFromTargetHost) throws HttpMalformedHeaderException {
 		setHistoryId(historyId);
 		setHistoryType(historyType);
         setSessionId(sessionId);
@@ -57,6 +58,7 @@ public RecordHistory(int historyId, int historyType, long sessionId, long timeSe
 			//httpMessage.addTag(tag);
 		}
         httpMessage.setNote(note);
+        httpMessage.setResponseFromTargetHost(responseFromTargetHost);
 	}
 	
 	/**

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -36,6 +36,7 @@
 // ZAP: 2013/07/25 Added support for sending the message from the perspective of a User
 // ZAP: 2013/08/31 Reauthentication when sending a message from the perspective of a User
 // ZAP: 2013/09/07 Switched to using HttpState for requesting User for cookie management
+// ZAP: 2013/09/26 Issue 716: ZAP flags its own HTTP responses
 
 package org.parosproxy.paros.network;
 
@@ -416,6 +417,7 @@ private void send(HttpMessage msg, boolean isFollowRedirect) throws IOException
 			if (!msg.isEventStream()) {
 				msg.getResponseBody().append(method.getResponseBody());
 			}
+			msg.setResponseFromTargetHost(true);
 
 			// ZAP: set method to retrieve upgraded channel later
 			if (method instanceof ZapGetMethod) {

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -265,7 +265,9 @@ public void sessionChanged(Session session) {
 						msg.getResponseBody().toString();
 					Source src = new Source(response);
 
-					scanner.scanHttpResponseReceive(msg, hRef.getHistoryId(), src);
+					if (msg.isResponseFromTargetHost()) {
+						scanner.scanHttpResponseReceive(msg, hRef.getHistoryId(), src);
+					}
 				}
 			}
 		} catch (SQLException | HttpMalformedHeaderException e) {

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -115,7 +115,9 @@ public void run() {
 							if (scanner.isEnabled()) {
 								scanner.setParent(this);
 								scanner.scanHttpRequestSend(msg, href.getHistoryId());
-								scanner.scanHttpResponseReceive(msg, href.getHistoryId(), src);
+								if (msg.isResponseFromTargetHost()) {
+									scanner.scanHttpResponseReceive(msg, href.getHistoryId(), src);
+								}
 							}
 							if (shutDown) {
 								return;

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -35,6 +35,7 @@
 // ZAP: 2012/12/14 Issue 438: Validate regexs as part of API enhancements
 // ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
 // ZAP: 2013/08/27 Issue 772: Restructuring of Saving/Loading Context Data
+// ZAP: 2013/09/26 Issue 747: Error opening session files on directories with special characters
 package org.parosproxy.paros.model;
 
 import java.awt.EventQueue;
@@ -201,7 +202,7 @@ public void run() {
 
 	protected void open(String fileName) throws SQLException, SAXException, IOException, Exception {
 
-		readAndParseFile(fileName);
+		readAndParseFile(new File(fileName).toURI().toASCIIString());
 		model.getDb().close(false);
 		model.getDb().open(fileName);
 		this.fileName = fileName;

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -556,10 +556,11 @@ public HttpMessage handleApiOther(HttpMessage msg, String name,
 						"Access-Control-Allow-Origin: *\r\n" + 
 						"Access-Control-Allow-Methods: GET,POST,OPTIONS\r\n" + 
 						"Access-Control-Allow-Headers: ZAP-Header\r\n" + 
-						"Content-Length: " + response.length() + 
-						"\r\nContent-Type: text/xml;");
+						"Content-Length: 0\r\n" + 
+						"Content-Type: text/xml; charset=UTF-8");
 				
 				msg.setResponseBody(response);
+				msg.getResponseHeader().setContentLength(msg.getResponseBody().length());
 		        
 				return msg;
 			} catch (Exception e) {

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -173,9 +173,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 					try {
 						format = Format.valueOf(elements[3].toUpperCase());
 						switch (format) {
-						case JSON: 	// Browsers will prompt for you to save application/json format, which is a pain
-									//contentType = "application/json"; 
-									contentType = "text/plain";
+						case JSON: 	contentType = "application/json"; 
 									break;
 						case JSONP: contentType = "application/javascript";
 									break;

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -51,6 +51,7 @@
 import org.parosproxy.paros.db.RecordHistory;
 import org.parosproxy.paros.db.TableAlert;
 import org.parosproxy.paros.db.TableHistory;
+import org.parosproxy.paros.extension.report.ReportGenerator;
 import org.parosproxy.paros.extension.report.ReportLastScan;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
@@ -546,7 +547,7 @@ public HttpMessage handleApiOther(HttpMessage msg, String name,
 				ReportLastScan rls = new ReportLastScan();
 		        StringBuilder report = new StringBuilder();
 				rls.generate(report, Model.getSingleton());
-				String response = report.toString();
+		        String response =  ReportGenerator.stringToHtml(report.toString(), "xml/report.xml.xsl");
 				
 				msg.setResponseHeader(
 						"HTTP/1.1 200 OK\r\n" +

File: src/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodType.java
Patch:
@@ -740,6 +740,8 @@ public void handleAction(JSONObject params) throws ApiException {
 					e.printStackTrace();
 					throw new ApiException(ApiException.Type.INTERNAL_ERROR, e.getMessage());
 				}
+				if(!context.getAuthenticationMethod().isSameType(method))
+					apiChangedAuthenticationMethodForContext(context.getIndex());
 				context.setAuthenticationMethod(method);
 			}
 		};

File: src/org/zaproxy/zap/authentication/ManualAuthenticationMethodType.java
Patch:
@@ -368,8 +368,9 @@ public ApiDynamicActionImplementor getSetMethodForContextApiAction() {
 			public void handleAction(JSONObject params) throws ApiException {
 				Context context = ApiUtils.getContextByParamId(params, AuthenticationAPI.PARAM_CONTEXT_ID);
 				ManualAuthenticationMethod method = createAuthenticationMethod(context.getIndex());
+				if(!context.getAuthenticationMethod().isSameType(method))
+					apiChangedAuthenticationMethodForContext(context.getIndex());
 				context.setAuthenticationMethod(method);
-
 			}
 		};
 	}

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -65,7 +65,7 @@ public enum RequestType {action, view, other};
 	private Map<String, ApiImplementor> shortcuts = new HashMap<>();
 
 	private Random random = new Random();
-    private Logger logger = Logger.getLogger(this.getClass());
+    private static final Logger logger = Logger.getLogger(API.class);
 
 	private static synchronized API newInstance() {
 		if (api == null) {
@@ -385,7 +385,7 @@ private String responseToXml(String name, ApiResponse res) {
 		return "";
 	}
 
-	private JSONObject getParams (String params) throws ApiException {
+	public static JSONObject getParams (String params) throws ApiException {
 		JSONObject jp = new JSONObject();
 		if (params == null || params.length() == 0) {
 			return jp;

File: src/org/zaproxy/zap/utils/ApiUtils.java
Patch:
@@ -60,6 +60,8 @@ public static int getIntParam(JSONObject params, String paramName) throws ApiExc
 	 * @throws ApiException the api exception thown if param not found or string empty
 	 */
 	public static String getNonEmptyStringParam(JSONObject params, String paramName) throws ApiException {
+		if (!params.containsKey(paramName))
+			throw new ApiException(Type.MISSING_PARAMETER, paramName);
 		String value = params.getString(paramName);
 		if (value == null || value.isEmpty())
 			throw new ApiException(Type.MISSING_PARAMETER, paramName);

File: src/org/zaproxy/zap/extension/userauth/ExtensionUserManagement.java
Patch:
@@ -117,7 +117,7 @@ protected ExtensionHttpSessions getExtensionHttpSessions() {
 	 */
 	private void initialize() {
 		this.setName(NAME);
-		this.setOrder(102);
+		this.setOrder(104);
 	}
 
 	@Override

File: src/org/parosproxy/paros/view/MainMenuBar.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
 // ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
+// ZAP: 2013/09/11 Issue 786: Snapshot session menu item not working
 
 package org.parosproxy.paros.view;
 
@@ -296,7 +297,7 @@ private javax.swing.JMenuItem getMenuFileSnapshot() {
 
 				@Override
 				public void actionPerformed(java.awt.event.ActionEvent e) {    
-					if (Model.getSingleton().getSession().isNewState()) {
+					if (! Model.getSingleton().getSession().isNewState()) {
 					    getMenuFileControl().saveSnapshot();
 					} else {
 						View.getSingleton().showWarningDialog(Constant.messages.getString("menu.file.snapshotSession.error"));

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -325,6 +325,7 @@ private Locale determineUsersSystemLocale() {
 	private ControlOverrides getOverrides() {
 		ControlOverrides overrides = new ControlOverrides();
 		overrides.setProxyPort(this.cmdLine.getPort());
+		overrides.setProxyHost(this.cmdLine.getHost());
 		return overrides;
 	}
 

File: src/org/zaproxy/zap/extension/script/ScriptWrapper.java
Patch:
@@ -35,7 +35,7 @@ public class ScriptWrapper {
 	private String typeName;
 	private String contents = "";
 	private String lastOutput = "";
-	private boolean changed;
+	private boolean changed = false;
 	private boolean enabled = false;
 	private boolean error = false;
 	private boolean loadOnStart = false;

File: src/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -79,6 +79,7 @@ public void scan() {
             try {
                 variant.setMessage(msg);
                 scanVariant();
+                
             } catch (Exception e) {
                 logger.error("Error occurred while scanning with variant " + variant.getClass().getCanonicalName(), e);
             }

File: src/org/parosproxy/paros/core/scanner/VariantHeader.java
Patch:
@@ -19,11 +19,13 @@
  */
 // ZAP: 2013/07/01 changed the name parameter retrieval on setParameter
 // ZAP: 2013/07/02 add dynamic check to avoid useless header scanning (to be improved)
+// ZAP: 2013/08/22 added regex escaping for header name setting (setHeader has trouble with '-' character)
 
 package org.parosproxy.paros.core.scanner;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.regex.Pattern;
 import org.apache.commons.httpclient.URIException;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.network.HttpMessage;
@@ -133,7 +135,7 @@ public String setEscapedParameter(HttpMessage msg, NameValuePair originalPair, S
     private String setParameter(HttpMessage msg, NameValuePair originalPair, String name, String value, boolean escaped) {        
         // Here gives null pointer exception...
         // maybe bacause the name value isn't equal to the original value one
-        msg.getRequestHeader().setHeader(originalPair.getName(), value);
+        msg.getRequestHeader().setHeader(Pattern.quote(originalPair.getName()), value);
         return name + ":" + value;
     }    
 }

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -28,6 +28,7 @@
 // ZAP: 2012/10/02 Issue 385: Added support for Contexts
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
+// ZAP: 2013/08/27 Issue 772: Restructuring of Saving/Loading Context Data
 
 package org.parosproxy.paros.model;
 
@@ -415,13 +416,13 @@ public void addContextDataFactory(ContextDataFactory cdf) {
     
     public void loadContext (Context ctx) {
 		for (ContextDataFactory cdf : this.contextDataFactories) {
-			cdf.loadContextData(ctx);
+			cdf.loadContextData(getSession(), ctx);
 		}
     }
     
     public void saveContext (Context ctx) {
 		for (ContextDataFactory cdf : this.contextDataFactories) {
-			cdf.saveContextData(ctx);
+			cdf.persistContextData(getSession(), ctx);
 		}
     }
     

File: src/org/zaproxy/zap/extension/auth/SessionAuthenticationPanel.java
Patch:
@@ -174,7 +174,6 @@ public void saveContextData(Session session) throws Exception {
 					.getText());
 			ext.setLoggedInIndicationRegex(getContextIndex(), this.txtLoggedInIndicaterRegex.getText());
 			ext.setLoggedOutIndicationRegex(getContextIndex(), this.txtLoggedOutIndicaterRegex.getText());
-			ext.saveAuthParams(getContextIndex());
 		}
 	}
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupExcludeFromContextMenu.java
Patch:
@@ -57,7 +57,6 @@ public void performAction(SiteNode sn) throws Exception {
 		
         Session session = Model.getSingleton().getSession();
         context.excludeFromContext(sn, ! sn.isLeaf());
-        session.saveContext(context);
 
         View.getSingleton().showSessionDialog(session, ContextExcludePanel.getPanelName(context.getIndex()));
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupIncludeInContextMenu.java
Patch:
@@ -86,7 +86,6 @@ protected void performAction(String url) throws SQLException {
         }
 
         context.addIncludeInContextRegex(url);
-        session.saveContext(context);
 
         View.getSingleton().showSessionDialog(Model.getSingleton().getSession(), ContextIncludePanel.getPanelName(context.getIndex()));
 	}

File: src/org/zaproxy/zap/view/ContextExcludePanel.java
Patch:
@@ -153,9 +153,7 @@ public void validateContextData(Session session) throws Exception {
 	@Override
 	public void saveContextData(Session session) throws Exception {
 		Context context = session.getContext(getContextIndex());
-		
 		context.setExcludeFromContextRegexs(getModel().getLines());
-		session.saveContext(context);		
 	}
 
 	@Override

File: src/org/zaproxy/zap/view/ContextIncludePanel.java
Patch:
@@ -157,9 +157,7 @@ public void validateContextData(Session session) {
 	@Override
 	public void saveContextData(Session session) throws Exception {
 		Context context = session.getContext(getContextIndex());
-
 		context.setIncludeInContextRegexs(getModel().getLines());
-		session.saveContext(context);
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/userauth/auth/ExtensionAuthentication.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsSite.java
Patch:
@@ -433,6 +433,9 @@ public void processHttpResponseMessage(HttpMessage message) {
 		session.setMessagesMatched(session.getMessagesMatched() + 1);
 
 		this.model.fireHttpSessionUpdated(session);
+		
+		// Store the session in the HttpMessage for caching purpose
+		message.setHttpSession(session);
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/userauth/ContextUsersPanel.java
Patch:
@@ -66,7 +66,7 @@ private void initialize() {
 		this.setName(getPanelName(this.contextId));
 		this.setLayout(new GridBagLayout());
 
-		this.add(new JLabel(Constant.messages.getString("httpsessions.options.label.tokens")),
+		this.add(new JLabel(Constant.messages.getString("userauth.user.panel.description")),
 				LayoutHelper.getGBC(0, 0, 1, 1.0d, 0.0d));
 
 		usersTableModel = new UsersTableModel();

File: src/org/zaproxy/zap/userauth/authentication/AbstractAuthenticationMethodOptionsPanel.java
Patch:
@@ -64,7 +64,7 @@ public abstract class AbstractAuthenticationMethodOptionsPanel<T extends Authent
 	 * 
 	 * @param method the method to be loaded/shown in the panel.
 	 */
-	public abstract void bindMethod(AuthenticationMethod<T> method)
+	public abstract void bindMethod(AuthenticationMethod method)
 			throws UnsupportedAuthenticationMethodException;
 
 	/**

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzerContentPanel.java
Patch:
@@ -47,6 +47,8 @@
 
 public class HttpFuzzerContentPanel implements FuzzerContentPanel {
 
+	public static final String PANEL_NAME = "HttpFuzzerContentPanel";
+	
     private static final Logger logger = Logger.getLogger(HttpFuzzerContentPanel.class);
 
     private JTable fuzzResultTable;
@@ -87,7 +89,7 @@ private JTable getFuzzResultTable() {
             fuzzResultTable = new JTable(resultsModel);
             fuzzResultTable.setDoubleBuffered(true);
             fuzzResultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
-            fuzzResultTable.setName("HttpFuzzerContentPanel");
+            fuzzResultTable.setName(PANEL_NAME);
             fuzzResultTable.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
             fuzzResultTable.setDefaultRenderer(Pair.class, new IconTableCellRenderer());
 

File: src/org/zaproxy/zap/extension/script/DefaultEngineWrapper.java
Patch:
@@ -57,7 +57,7 @@ public String getTemplate(String type) {
 		if (! templateMap.containsKey(type)) {
 			templateMap.put(type, this.getStringReource(
 					this.getLanguageName().toLowerCase() + File.separator + type.toLowerCase() + 
-					"-template" + this.getExtensions().get(0)));
+					"-template." + this.getExtensions().get(0)));
 		}
 		return templateMap.get(type);
 	}

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -31,6 +31,7 @@
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteNode;
 import org.zaproxy.zap.userauth.authentication.AuthenticationMethod;
+import org.zaproxy.zap.userauth.authentication.ManualAuthenticationMethodType.ManualAuthenticationMethod;
 import org.zaproxy.zap.userauth.session.CookieBasedSessionManagementMethodType.CookieBasedSessionManagementMethod;
 import org.zaproxy.zap.userauth.session.SessionManagementMethod;
 
@@ -62,6 +63,7 @@ public Context(Session session, int index) {
     	this.index = index;
     	this.name = String.valueOf(index);
     	this.sessionManagementMethod=new CookieBasedSessionManagementMethod();
+		this.authenticationMethod = new ManualAuthenticationMethod(index);
     }
 
 	public boolean isIncludedInScope(SiteNode sn) {

File: src/org/zaproxy/zap/extension/script/ScriptEventListener.java
Patch:
@@ -23,7 +23,9 @@ public interface ScriptEventListener {
 
 	void refreshScript(ScriptWrapper script);
 
-	void scriptAdded(ScriptWrapper script);
+	void scriptAdded(ScriptWrapper script, boolean display);
+
+	void scriptRemoved(ScriptWrapper script);
 
 	void preInvoke(ScriptWrapper script);
 

File: src/org/zaproxy/zap/extension/script/ScriptNode.java
Patch:
@@ -63,7 +63,7 @@ public String getNodeName() {
 		return nodeName;
 	}
 	
-	protected void setNodeName(String name) {
+	public void setNodeName(String name) {
 		this.nodeName = name;
 	}
 	

File: src/org/zaproxy/zap/extension/script/ScriptWrapper.java
Patch:
@@ -117,6 +117,9 @@ public void setType(ScriptType type) {
 	}
 	
 	public String getTypeName() {
+		if (type != null) {
+			return type.getName();
+		}
 		return typeName;
 	}
 

File: src/org/parosproxy/paros/core/scanner/VariantAbstractRPCQuery.java
Patch:
@@ -155,7 +155,7 @@ protected void setRequestContent(String requestContent) {
      * 
      * @return 
      */
-    protected String getReadableParametrizedQuery() {
+    public String getReadableParametrizedQuery() {
        StringBuilder result = new StringBuilder();
        int begin = 0;
        int end;

File: src/org/parosproxy/paros/core/scanner/VariantXMLQuery.java
Patch:
@@ -110,5 +110,5 @@ public void parseContent(String content) {
             
             addParameter(matcher.group(1), bidx, eidx, false);
         }
-    }    
+    }
 }

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -502,7 +502,7 @@ public List<HttpSession> getHttpSessionsForContext(Context context) {
 
 		for (Entry<String, HttpSessionsSite> e : this.sessions.entrySet()) {
 			String siteName = e.getKey();
-			siteName = siteName.substring(0, siteName.lastIndexOf(":"));
+//			siteName = siteName.substring(0, siteName.lastIndexOf(":"));
 			siteName = "http://" + siteName;
 			log.debug(siteName);
 			if (context.isInContext(siteName))

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -44,6 +44,7 @@
 // ZAP: 2013/04/14 Issue 588: ExtensionHistory.historyIdToRef should be cleared when changing session
 // ZAP: 2013/04/14 Issue 598: Replace/update "old" pop up menu items
 // ZAP: 2013/07/14 Issue 725: Clear alert's panel fields
+// ZAP: 2013/07/23 Issue 738: Options to hide tabs
 
 package org.parosproxy.paros.extension.history;
 
@@ -152,6 +153,8 @@ private LogPanel getLogPanel() {
 			logPanel.setName(Constant.messages.getString("history.panel.title"));	// ZAP: i18n
 			// ZAP: Added History (calendar) icon
 			logPanel.setIcon(new ImageIcon(ExtensionHistory.class.getResource("/resource/icon/16/025.png")));	// 'calendar' icon
+			// Dont allow this tab to be hidden
+			logPanel.setHideable(false);
 
             logPanel.setExtension(this);
 		}

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -22,6 +22,7 @@
 // ZAP: 2012/03/15 Removed the options of the http panels.
 // ZAP: 2012/08/01 Issue 332: added support for Modes
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
+// ZAP: 2013/07/23 Issue 738: Options to hide tabs
 
 package org.parosproxy.paros.extension.option;
 
@@ -49,6 +50,7 @@ public class OptionsParamView extends AbstractParam {
 	public static final String WARN_ON_TAB_DOUBLE_CLICK_OPTION = "view.warnOnTabDoubleClick";
 	public static final String REVEAL_OPTION = "view.reveal";
 	public static final String MODE_OPTION = "view.mode";
+	public static final String TAB_OPTION = "view.tab";
 
 	private int advancedViewEnabled = 0;
 	private int processImages = 0;

File: src/org/parosproxy/paros/view/MainFrame.java
Patch:
@@ -23,6 +23,8 @@
 // ZAP: 2012/03/15 Changed so the change display option stays visually selected.
 // ZAP: 2012/04/26 Removed the method setStatus(String) and instance variable
 // "txtStatus".
+// ZAP: 2013/07/23 Issue 738: Options to hide tabs
+
 package org.parosproxy.paros.view;
 
 import java.awt.CardLayout;
@@ -111,7 +113,7 @@ private JPanel getPaneContent() {
 	 *
 	 * @return org.parosproxy.paros.view.StandardPanel
 	 */
-	org.parosproxy.paros.view.WorkbenchPanel getWorkbench() {
+	public org.parosproxy.paros.view.WorkbenchPanel getWorkbench() {
 		if (paneStandard == null) {
 			paneStandard = new org.parosproxy.paros.view.WorkbenchPanel(displayOption);
 			paneStandard.setLayout(new CardLayout());

File: src/org/zaproxy/zap/extension/fuzz/OptionsFuzzerPanel.java
Patch:
@@ -255,7 +255,7 @@ public int getThreadPerScan() {
 
 	private JButton getAddFileButton() {
 		if (addFileButton == null) {
-	        addFileButton = new JButton(Constant.messages.getString("bruteforce.options.button.addfile")); 
+	        addFileButton = new JButton(Constant.messages.getString("fuzz.options.button.addfile")); 
 			addFileButton.addActionListener(new java.awt.event.ActionListener() { 
 				@Override
 				public void actionPerformed(java.awt.event.ActionEvent e) {    

File: src/org/zaproxy/clientapi/core/ClientApi.java
Patch:
@@ -258,8 +258,8 @@ public List<Alert> getAlerts(String baseUrl, int start, int count) throws Client
                         alertSet.getAttribute("reference"),
                         alertSet.getAttribute("solution"),
                         alertSet.getAttribute("evidence"),
-                        Integer.parseInt(alertSet.getAttribute("risk")),
-                        Integer.parseInt(alertSet.getAttribute("risk"))));
+                        Integer.parseInt(alertSet.getAttribute("cweid")),
+                        Integer.parseInt(alertSet.getAttribute("wascid"))));
             }
         }
     	return alerts;

File: src/org/parosproxy/paros/core/scanner/AbstractDefaultFilePlugin.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
 // ZAP: 2013/05/02 Re-arranged all modifiers into Java coding standard order
+// ZAP: 2013/07/12 Issue 713: Add CWE and WASC numbers to issues
 
 package org.parosproxy.paros.core.scanner;
 
@@ -132,7 +133,7 @@ public void scan() {
                 msg.getRequestBody().setLength(0);
                 sendAndReceive(msg);
                 if (isFileExist(msg)) {
-                    bingo(Alert.RISK_MEDIUM, Alert.SUSPICIOUS, uri.toString(), "", "", "", msg);
+                    bingo(Alert.RISK_MEDIUM, Alert.SUSPICIOUS, uri.toString(), "", "", "", "", msg);
                 }
             } catch (Exception e) {
             }

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -271,7 +271,7 @@ public void valueChanged(javax.swing.event.TreeSelectionEvent e) {
 				        Object obj = node.getUserObject();
 				        if (obj instanceof Alert) {
 				            Alert alert = (Alert) obj;
-						    setMessage(alert.getMessage(), alert.getAttack());
+						    setMessage(alert.getMessage(), alert.getEvidence());
 						    getAlertViewPanel().displayAlert(alert);
 				        } else {
 						    getAlertViewPanel().clearAlert();

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -249,6 +249,7 @@ private void writeAlertToDB(Alert alert, HistoryReference ref) throws HttpMalfor
                 scanId, alert.getPluginId(), alert.getAlert(), alert.getRisk(), alert.getReliability(),
                 alert.getDescription(), alert.getUri(), alert.getParam(), alert.getAttack(),
                 alert.getOtherInfo(), alert.getSolution(), alert.getReference(),
+                alert.getEvidence(), alert.getCweId(), alert.getWascId(),
                 ref.getHistoryId(), alert.getSourceHistoryId());
 
         alert.setAlertId(recordAlert.getAlertId());
@@ -268,8 +269,8 @@ private void updateAlertInDB(Alert alert) throws HttpMalformedHeaderException, S
         TableAlert tableAlert = getModel().getDb().getTableAlert();
         tableAlert.update(alert.getAlertId(), alert.getAlert(), alert.getRisk(),
                 alert.getReliability(), alert.getDescription(), alert.getUri(),
-                alert.getParam(), alert.getAttack(), alert.getOtherInfo(), alert.getSolution(),
-                alert.getReference(), alert.getSourceHistoryId());
+                alert.getParam(), alert.getAttack(), alert.getOtherInfo(), alert.getSolution(), alert.getReference(), 
+                alert.getEvidence(), alert.getCweId(), alert.getWascId(), alert.getSourceHistoryId());
     }
 
     public void displayAlert(Alert alert) {

File: src/org/parosproxy/paros/network/HttpMethodHelper.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2012/05/04 Changed to use the class ZapGetMethod instead of org.apache.commons.httpclient.methods.GetMethod
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/06/17 Issue 687: Change HTTP response header parser to be less strict
+// ZAP: 2013/07/10 Issue 721: Non POST and PUT requests receive a 504 when server expects a request body
 package org.parosproxy.paros.network;
 
 import java.util.regex.Pattern;
@@ -35,8 +36,6 @@
 import org.apache.commons.httpclient.URIException;
 import org.apache.commons.httpclient.methods.ByteArrayRequestEntity;
 import org.apache.commons.httpclient.methods.EntityEnclosingMethod;
-import org.apache.commons.httpclient.methods.PostMethod;
-import org.apache.commons.httpclient.methods.PutMethod;
 import org.apache.commons.httpclient.params.HttpMethodParams;
 import org.apache.log4j.Logger;
 import org.zaproxy.zap.ZapGetMethod;
@@ -223,7 +222,7 @@ public HttpMethod createRequestMethod(HttpRequestHeader header, HttpBody body) t
 		}
 
 		// set body if post method or put method
-		if (body != null && body.length() > 0 && (httpMethod instanceof PostMethod || httpMethod instanceof PutMethod)) {
+		if (body != null && body.length() > 0 &&  (httpMethod instanceof EntityEnclosingMethod)) {
 			EntityEnclosingMethod post = (EntityEnclosingMethod) httpMethod;
 //			post.setRequestEntity(new StringRequestEntity(body.toString()));
             post.setRequestEntity(new ByteArrayRequestEntity(body.getBytes()));

File: src/org/zaproxy/zap/extension/brk/BreakPanelToolbarFactory.java
Patch:
@@ -256,7 +256,7 @@ public void setBreakResponse(Boolean brk) {
 		isBreakResponse = brk;
 		resetRequestSerialization(false);
 
-		updateBreakRequestBtn();
+		updateBreakResponseBtn();
 	}
 
 	private void toggleBreakRequest() {

File: src/org/zaproxy/zap/extension/brk/BreakpointMessageHandler.java
Patch:
@@ -209,7 +209,7 @@ protected boolean isBreakOnEnabledBreakpoint(Message aMessage, boolean isRequest
             while(it.hasNext()) {
                 BreakpointMessageInterface breakpoint = it.next();
                 
-                if (breakpoint.match(aMessage, onlyIfInScope)) {
+                if (breakpoint.match(aMessage, isRequest, onlyIfInScope)) {
                     return true;
                 }
             }

File: src/org/zaproxy/zap/extension/brk/BreakpointMessageInterface.java
Patch:
@@ -26,7 +26,7 @@ public interface BreakpointMessageInterface {
 
     String getType();
     
-    boolean match(Message aMessage, boolean onlyIfInScope);
+    boolean match(Message aMessage, boolean isRequest, boolean onlyIfInScope);
 
     void setEnabled(boolean enabled);
 

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsAPI.java
Patch:
@@ -186,6 +186,7 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			if (sessionSST == null) {
 				throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, ACTION_PARAM_SESSION);
 			}
+			extension.addHttpSessionToken(params.getString(ACTION_PARAM_SITE), params.getString(ACTION_PARAM_TOKEN_NAME));
 			sessionSST.setTokenValue(params.getString(ACTION_PARAM_TOKEN_NAME),
 					params.getString(ACTION_PARAM_TOKEN_VALUE));
 			return ApiResponseElement.OK;

File: src/org/zaproxy/zap/spider/URLCanonicalizer.java
Patch:
@@ -126,7 +126,7 @@ public static String getCanonicalURL(String url, String baseURL) {
 			 * Normalize: no empty segments (i.e., "//"), no segments equal to ".", and no segments equal to
 			 * ".." that are preceded by a segment not equal to "..".
 			 */
-			String path = canonicalURI.normalize().getPath();
+			String path = canonicalURI.normalize().getRawPath();
 
 			/* Convert '//' -> '/' */
 			int idx = path.indexOf("//");

File: src/org/parosproxy/paros/CommandLine.java
Patch:
@@ -163,7 +163,7 @@ public void parse(Vector<CommandLineArgument[]> commandList) throws Exception {
 	    
 	    // check if there is some unknown keywords
 	    for (int i=0; i<args.length; i++) {
-	        if (args[i] != null && ! args[i].equals("org.zaproxy.zap.ZAP")) {
+	        if (args[i] != null) {
                 throw new Exception("Unknown options: " + args[i]);	            
 	        }
 	    }

File: src/org/zaproxy/zap/control/AddOnCollection.java
Patch:
@@ -142,6 +142,7 @@ private void addDirectory (File dir) throws Exception {
                                                 + " Not from=" + ao.getNotFromVersion() + " Current Version="
                                                 + Constant.PROGRAM_VERSION);
                                     }
+                                    add = false;
                                 }
 		            		} else {
 		            			// Same or older version, dont include

File: src/org/zaproxy/zap/extension/api/WebUI.java
Patch:
@@ -210,9 +210,9 @@ public String handleRequest(String component, ApiImplementor impl,
 					sb.append(Constant.messages.getString("api.html.format"));
 					sb.append("</td><td>\n");
 					sb.append("<select id=\"zapapiformat\" name=\"zapapiformat\">\n");
-					sb.append("<option>JSON</option>\n");
-					sb.append("<option>HTML</option>\n");
-					sb.append("<option>XML</option>\n");
+					sb.append("<option value=\"JSON\">JSON</option>\n");
+					sb.append("<option value=\"HTML\">HTML</option>\n");
+					sb.append("<option value=\"XML\">XML</option>\n");
 					sb.append("</select>\n");
 					sb.append("</td></tr>\n");
 				}

File: src/org/parosproxy/paros/CommandLine.java
Patch:
@@ -163,7 +163,7 @@ public void parse(Vector<CommandLineArgument[]> commandList) throws Exception {
 	    
 	    // check if there is some unknown keywords
 	    for (int i=0; i<args.length; i++) {
-	        if (args[i] != null) {
+	        if (args[i] != null && ! args[i].equals("org.zaproxy.zap.ZAP")) {
                 throw new Exception("Unknown options: " + args[i]);	            
 	        }
 	    }

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
 // ZAP: 2013/04/11 Issue 621: Handle requests to the proxy URL
 // ZAP: 2013/04/14 Issue 622: Local proxy unable to correctly detect requests to itself
+// ZAP: 2013/06/17 Issue 686: Log HttpException (as error) in the ProxyThread
 
 package org.parosproxy.paros.core.proxy;
 
@@ -202,6 +203,8 @@ public void run() {
 	    	}
 	    } catch (HttpMalformedHeaderException e) {
 	    	log.warn("Malformed Header: ", e);
+		} catch (HttpException e) {
+			log.error(e.getMessage(), e);
 		} catch (IOException e) {
 		    log.debug("IOException: ", e);
 		} finally {

File: src/org/zaproxy/zap/extension/ascan/OptionsScannerPanel.java
Patch:
@@ -120,7 +120,7 @@ private JPanel getPanelScanner() {
 			panelScanner.add(getComboStrength(), 
 					LayoutHelper.getGBC(1, 9, 1,  0.0D, 0, GridBagConstraints.HORIZONTAL, new Insets(2,2,2,2)));
 			panelScanner.add(getStrengthNotes(), 
-					LayoutHelper.getGBC(2, 10, 1,  1.0D, 0, GridBagConstraints.HORIZONTAL, new Insets(2,2,2,2)));
+					LayoutHelper.getGBC(2, 9, 1,  1.0D, 0, GridBagConstraints.HORIZONTAL, new Insets(2,2,2,2)));
 			
 			/*
 			panelScanner.add(new JLabel(Constant.messages.getString("ascan.options.params.label")), 

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -240,7 +240,7 @@ public boolean handleApiRequest (HttpRequestHeader requestHeader, HttpInputStrea
 							List<String> mandatoryParams = action.getMandatoryParamNames();
 							if (mandatoryParams != null) {
 								for (String param : mandatoryParams) {
-									if (params.getString(param) == null || params.getString(param).length() == 0) {
+									if (!params.has(param) || params.getString(param).length() == 0) {
 										throw new ApiException(ApiException.Type.MISSING_PARAMETER, param);
 									}
 								}

File: src/org/zaproxy/zap/extension/api/ApiResponseElement.java
Patch:
@@ -20,6 +20,7 @@
 import net.sf.json.JSON;
 import net.sf.json.JSONObject;
 
+import org.apache.commons.lang.StringEscapeUtils;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -77,7 +78,7 @@ public void toHTML(StringBuilder sb) {
 		sb.append("<tr><td>\n");
 		sb.append(this.getName());
 		sb.append("</td><td>\n");
-		sb.append(this.getValue());
+		sb.append(StringEscapeUtils.escapeHtml(this.getValue()));
 		sb.append("</td></tr>\n");
 		sb.append("</table>\n");
 	}

File: src/org/zaproxy/zap/extension/api/ApiResponseSet.java
Patch:
@@ -24,6 +24,7 @@
 import net.sf.json.JSON;
 import net.sf.json.JSONObject;
 
+import org.apache.commons.lang.StringEscapeUtils;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -96,7 +97,7 @@ public void toHTML(StringBuilder sb) {
 			sb.append("<tr><td>\n");
 			sb.append(val.getKey());
 			sb.append("</td><td>\n");
-			sb.append(val.getValue());
+			sb.append(StringEscapeUtils.escapeHtml(val.getValue()));
 			sb.append("</td></tr>\n");
 		}
 		sb.append("</table>\n");

File: src/org/zaproxy/zap/extension/invoke/InvokeParam.java
Patch:
@@ -93,7 +93,7 @@ protected void parse() {
             enabledApps.trimToSize();
             this.listInvokeEnabled = enabledApps;
         } catch (ConversionException e) {
-            logger.error("Error while loading anti CSRF tokens: " + e.getMessage(), e);
+            logger.error("Error while loading invoke applications: " + e.getMessage(), e);
         }
 
         try {

File: src/org/zaproxy/zap/extension/api/OptionsParamApi.java
Patch:
@@ -34,7 +34,7 @@ public OptionsParamApi() {
     @Override
     protected void parse() {
         
-	    enabled = getConfig().getBoolean(ENABLED, false);
+	    enabled = getConfig().getBoolean(ENABLED, true);
 	    //postActions = getConfig().getBoolean(POST_ACTIONS, false);
     }
 

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -39,7 +39,7 @@
 // ZAP: 2012/12/27 Hook new persistent connection listener.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/03/20 Issue 568: Allow extensions to run from the command line
-// ZAP: 2013/04/16 Issue TBA: Persist and snapshot sessions instead of saving them
+// ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
 
 package org.parosproxy.paros.control;
 

File: src/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -33,7 +33,7 @@
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
-// ZAP: 2013/04/16 Issue TBA: Persist and snapshot sessions instead of saving them
+// ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
 
 package org.parosproxy.paros.control;
  

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -27,7 +27,7 @@
 // ZAP: 2012/08/08 Check if file exist.
 // ZAP: 2012/10/02 Issue 385: Added support for Contexts
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
-// ZAP: 2013/04/16 Issue TBA: Persist and snapshot sessions instead of saving them
+// ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
 
 package org.parosproxy.paros.model;
 

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -33,7 +33,7 @@
 // ZAP: 2012/10/03 Issue 388: Added support for technologies
 // ZAP: 2012/10/08 Issue 391: Performance improvements
 // ZAP: 2012/12/14 Issue 438: Validate regexs as part of API enhancements
-// ZAP: 2013/04/16 Issue TBA: Persist and snapshot sessions instead of saving them
+// ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
 
 package org.parosproxy.paros.model;
 

File: src/org/parosproxy/paros/model/SessionListener.java
Patch:
@@ -19,7 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
-// ZAP: 2013/04/16 Issue TBA: Persist and snapshot sessions instead of saving them
+// ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
 
 package org.parosproxy.paros.model;
 

File: src/org/parosproxy/paros/view/MainMenuBar.java
Patch:
@@ -23,7 +23,7 @@
 // ZAP: 2012/10/17 Issue 393: Added more online links from menu
 // ZAP: 2013/01/23 Clean up of exception handling/logging.
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
-// ZAP: 2013/04/16 Issue TBA: Persist and snapshot sessions instead of saving them
+// ZAP: 2013/04/16 Issue 638: Persist and snapshot sessions instead of saving them
 
 package org.parosproxy.paros.view;
 

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/ManualHttpRequestEditorDialog.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/11/21 Heavily refactored extension to support non-HTTP messages.
+// ZAP: 2013/04/15 Issue 632: Manual Request Editor dialogue (HTTP) configurations not saved correctly
 
 package org.parosproxy.paros.extension.manualrequest.http.impl;
 
@@ -81,6 +82,8 @@ public class ManualHttpRequestEditorDialog extends ManualRequestEditorDialog {
 	public ManualHttpRequestEditorDialog(boolean isSendEnabled, String configurationKey) throws HeadlessException {
 		super(isSendEnabled, configurationKey);
 		
+		sender = new HttpPanelSender(getRequestPanel(), getResponsePanel());
+		
 		initialize();
 	}
 	
@@ -130,9 +133,6 @@ public void setMessage(Message aMessage) {
 
 	@Override
 	protected MessageSender getMessageSender() {
-		if (sender == null) {
-			sender = new HttpPanelSender(getRequestPanel(), getResponsePanel());
-		}
 		return sender;
 	}
 	

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -30,6 +30,7 @@
 // ZAP: 2013/01/19 Issue 460 Add support for a scan progress dialog
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/02/19 Issue 528 Scan progress dialog can show negative progress times
+// ZAP: 2013/04/14 Issue 611: Log the exceptions thrown by active scanners as error
 
 package org.parosproxy.paros.core.scanner;
 
@@ -241,7 +242,7 @@ public void run() {
                 scan();
             }
         } catch (Exception e) {
-            getLog().warn(e.getMessage());
+            getLog().error(e.getMessage(), e);
         }
         notifyPluginCompleted(getParent());
     	this.finished = new Date();

File: src/org/zaproxy/zap/extension/bruteforce/ExtensionBruteForce.java
Patch:
@@ -284,11 +284,11 @@ public void refreshFileList() {
 		this.getBruteForcePanel().refreshFileList();
 	}
 	
-	public List<String> getFileList() {
+	public List<ForcedBrowseFile> getFileList() {
 		return this.getBruteForcePanel().getFileList();
 	}
 	
-	public void setDefaultFile(String file) {
+	public void setDefaultFile(ForcedBrowseFile file) {
 		this.getBruteForcePanel().setDefaultFile(file);
 	}
 

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -126,7 +126,7 @@ public void hook(ExtensionHook extensionHook) {
 	    }
         extensionHook.addSessionListener(this);
         extensionHook.addProxyListener(this);
-        extensionHook.addSiteMapListner(this);
+        extensionHook.addSiteMapListener(this);
 
         extensionHook.addOptionsParamSet(getScannerParam());
         extensionHook.addCommandLine(getCommandLineArguments());

File: src/org/zaproxy/zap/extension/bruteforce/ExtensionBruteForce.java
Patch:
@@ -91,7 +91,7 @@ public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);
 	    extensionHook.addSessionListener(this);
         extensionHook.addProxyListener(this);
-        extensionHook.addSiteMapListner(this);
+        extensionHook.addSiteMapListener(this);
         extensionHook.addAddonFilesChangedListener(this);
 
         extensionHook.addOptionsParamSet(getBruteForceParam());

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -150,7 +150,7 @@ public void hook(ExtensionHook extensionHook) {
 		extensionHook.addOptionsParamSet(getParam());
 
 		extensionHook.addSessionListener(this);
-		extensionHook.addSiteMapListner(this);
+		extensionHook.addSiteMapListener(this);
 		HttpSender.addListener(this);
 
 		if (getView() != null) {

File: src/org/zaproxy/zap/extension/params/ExtensionParams.java
Patch:
@@ -100,7 +100,7 @@ private void initialize() {
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);
 	    extensionHook.addSessionListener(this);
-        extensionHook.addSiteMapListner(this);
+        extensionHook.addSiteMapListener(this);
 	    
 	    if (getView() != null) {
 	        @SuppressWarnings("unused")

File: src/org/zaproxy/zap/extension/spider/ExtensionSpider.java
Patch:
@@ -110,7 +110,7 @@ public void hook(ExtensionHook extensionHook) {
 		// Register for listeners
 		extensionHook.addSessionListener(this);
 		extensionHook.addProxyListener(this);
-		extensionHook.addSiteMapListner(this);
+		extensionHook.addSiteMapListener(this);
 
 		// Initialize views
 		if (getView() != null) {

File: src/org/zaproxy/zap/control/AddOn.java
Patch:
@@ -160,11 +160,12 @@ private List<String> getListFromDom (Document dom, String element) {
 		return list;
 	}
 	
-	public AddOn(String id, String name, String description, int version, Status status, 
+	public AddOn(String id, String name, String description, String author, int version, Status status, 
 			String changes, URL url, File file, long size, String notBeforeVersion, String notFromVersion) {
 		this.id = id;
 		this.name = name;
 		this.description = description;
+		this.author = author;
 		this.version = version;
 		this.status = status;
 		this.changes = changes;

File: src/org/zaproxy/zap/control/AddOnCollection.java
Patch:
@@ -72,6 +72,7 @@ private void load (ZapXmlConfiguration config) {
         						id, 
         						config.getString("addon_" + id + ".name"), 
         						config.getString("addon_" + id + ".description"), 
+        						config.getString("addon_" + id + ".author", ""),
         						config.getInt("addon_" + id + ".version"),
         						AddOn.Status.valueOf(config.getString("addon_" + id + ".status")),
         						config.getString("addon_" + id + ".changes"), 

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -41,6 +41,7 @@
 // ZAP: 2012/10/08 Issue 391: Performance improvements
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 // ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
+// ZAP: 2013/04/14 Issue 588: ExtensionHistory.historyIdToRef should be cleared when changing session
 
 package org.parosproxy.paros.extension.history;
 
@@ -216,6 +217,7 @@ public void run() {
 	
 	private void sessionChangedEventHandler(Session session) {
 	    getHistoryList().clear();
+	    historyIdToRef.clear();
 	    getLogPanel().getListLog().setModel(getHistoryList());
 	    if (getView() != null) { 
 	    	getView().getRequestPanel().clearView(true);

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -212,7 +212,7 @@ private void startSpider() {
 			spider.setExcludeList(extension.getExcludeList());
 
 			// Add seeds accordingly
-			if (startNode != null)
+			if (startNode != null || justScanInScope)
 				addSeeds(spider, startNode);
 			else
 				spider.addSeed(startURI);

File: src/org/zaproxy/zap/extension/httppanel/Message.java
Patch:
@@ -21,4 +21,6 @@
 
 public interface Message {
 	public boolean isInScope();
+	
+	public boolean isForceIntercept();
 }

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -110,7 +110,7 @@ public ExtensionAutoUpdate() {
 	private void initialize() {
         this.setName("ExtensionAutoUpdate");
         this.setOrder(40);
-        this.downloadManager = new DownloadManager();
+        this.downloadManager = new DownloadManager(Model.getSingleton().getOptionsParam().getConnectionParam());
         this.downloadManager.start();
         // Do this before it can get overwritten by the latest one
         this.getPreviousVersionInfo();

File: src/org/parosproxy/paros/db/TableHistory.java
Patch:
@@ -158,7 +158,7 @@ private void updateTable(Connection connection) throws SQLException {
 
         // Add the NOTE column to the db if necessary
         if (!DbUtils.hasColumn(connection, TABLE_NAME, NOTE)) {
-            DbUtils.executeAndClose(connection.prepareStatement("ALTER TABLE "+TABLE_NAME+" ADD COLUMN "+NOTE+" VARCHAR(32768) DEFAULT ''"));
+            DbUtils.executeAndClose(connection.prepareStatement("ALTER TABLE "+TABLE_NAME+" ADD COLUMN "+NOTE+" VARCHAR(1048576) DEFAULT ''"));
         }
         
         if (DbUtils.getColumnType(connection, TABLE_NAME, REQBODY) != Types.SQL_VARBINARY) {

File: src/org/zaproxy/zap/extension/spider/OptionsSpiderPanel.java
Patch:
@@ -102,7 +102,6 @@ private JPanel getPanelSpider() {
 			panelSpider = new JPanel();
 			panelSpider.setLayout(new GridBagLayout());
 			if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {
-				//panelSpider.setSize(114, 132);
 				panelSpider.setSize(114, 150);
 			}
 			panelSpider.setName("");

File: src/org/zaproxy/zap/spider/SpiderParam.java
Patch:
@@ -60,7 +60,7 @@ public class SpiderParam extends AbstractParam {
 	/** The Constant SPIDER_HANDLE_PARAMETERS. */
 	private static final String SPIDER_HANDLE_PARAMETERS = "spider.handleParameters";
 	
-	/** The Constant SPIDER_HANDLE_ODATA_URL. */
+	/** The Constant SPIDER_HANDLE_ODATA_PARAMETERS. */
 	private static final String SPIDER_HANDLE_ODATA_PARAMETERS = "spider.handleODataParameters";
 
 	/**
@@ -135,7 +135,7 @@ public String toString() {
 	private String userAgent = null;
 	/** The handle parameters visited. */
 	private HandleParametersOption handleParametersVisited = HandleParametersOption.USE_ALL;
-	/** Defines if we take care of OData specific parameters during the visit in orer to identify known URL **/
+	/** Defines if we take care of OData specific parameters during the visit in order to identify known URL **/
 	private boolean handleODataParametersVisited = false;
 	
 	/**
@@ -229,7 +229,7 @@ protected void parse() {
 		}
 		
 		try {
-			setHandleODataParametersVisited(getConfig().getBoolean(SPIDER_HANDLE_ODATA_PARAMETERS, false));
+			this.handleODataParametersVisited = getConfig().getBoolean(SPIDER_HANDLE_ODATA_PARAMETERS, false);
 		} catch (ConversionException e) {
 			log.error("Error while parsing config file: " + e.getMessage(), e);
 		}

File: src/org/zaproxy/clientapi/gen/Pscan.java
Patch:
@@ -20,8 +20,8 @@
 
 package org.zaproxy.clientapi.gen;
 
-import java.util.HashMap;
 import java.util.Map;
+
 import org.zaproxy.clientapi.core.ApiResponse;
 import org.zaproxy.clientapi.core.ClientApi;
 import org.zaproxy.clientapi.core.ClientApiException;

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -339,8 +339,7 @@ private void runCommandLine() {
 	        } else if (cmdLine.isReportVersion()) {
 	            System.out.println(Constant.PROGRAM_VERSION);
 	        } else {
-
-	            control.runCommandLineNewSession(cmdLine.getArgument(CommandLine.NEW_SESSION));
+	            control.runCommandLine();
 
 	            try {
 	                Thread.sleep(1000);

File: src/org/parosproxy/paros/core/scanner/PluginFactory.java
Patch:
@@ -27,6 +27,7 @@
 // ZAP: 2013/01/16 Issue 453: Dynamic loading and unloading of add-ons
 // ZAP: 2013/01/19 Issue 460 Add support for a scan progress dialog
 // ZAP: 2013/01/25 Catch any exceptions thrown when loading plugins to allow ZAP to still start
+// ZAP: 2013/03/18 Issue 564: Active scanner can hang if dependencies used
 
 package org.parosproxy.paros.core.scanner;
 
@@ -264,7 +265,7 @@ synchronized boolean existPluginToRun() {
     private Plugin probeNextPlugin() {
         Plugin plugin = null;
         int i=0;
-        while (plugin == null && i<listPending.size()) {
+        while (i<listPending.size()) {
             // ZAP: Removed unnecessary cast.
             plugin = listPending.get(i);
             if (isAllDependencyCompleted(plugin)) {

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -596,7 +596,8 @@ private String getHostName(URI uri) throws URIException {
 		int port = uri.getPort();		
 		if (port != -1 &&
 				((port == 80 && !"http".equals(scheme)) ||
-				(port == 443 && !"https".equals(scheme)))) {
+				(port == 443 && !"https".equals(scheme) ||
+				(port != 80 && port != 443)))) {
 			host.append(":").append(port);
 		}
 		

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -41,7 +41,7 @@ public class AntiCsrfParam extends AbstractParam {
     private static final String CONFIRM_REMOVE_TOKEN_KEY = ANTI_CSRF_BASE_KEY + ".confirmRemoveToken";
     
     private static final String[] DEFAULT_TOKENS_NAMES = { "anticsrf",
-            "CSRFToken", "__RequestVerificationToken" };
+            "CSRFToken", "__RequestVerificationToken", "csrfmiddlewaretoken" };
 
     private List<AntiCsrfParamToken> tokens = null;
     private List<String> enabledTokensNames = null;

File: src/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2012/12/06 Issue 428: Moved exit code to control to support the marketplace
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
 // ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
+// ZAP: 2013/03/03 Issue 547: Deprecate unused classes and methods
 
 package org.parosproxy.paros.control;
  
@@ -262,7 +263,6 @@ public void sessionOpened(File file, Exception e) {
     @Override
     public void sessionSaved(Exception e) {
         if (e == null) {
-            view.getMainFrame().getMainMenuBar().getMenuFileSave().setEnabled(true);
             // ZAP: Set the title consistently
             setTitle();
             //File file = new File(model.getSession().getFileName());

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -37,6 +37,7 @@
 // ZAP: 2012/11/01 Issue 411: Allow proxy port to be specified on the command line
 // ZAP: 2012/12/06 Issue 428: Added exit method to support the marketplace
 // ZAP: 2012/12/27 Hook new persistent connection listener.
+// ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 package org.parosproxy.paros.control;
 
 import java.awt.Desktop;
@@ -61,7 +62,6 @@
 /**
  *
  * Overall control with interaction on model and view.
- * Window - Preferences - Java - Code Generation - Code and Comments
  */
 public class Control extends AbstractControl implements SessionListener {
 

File: src/org/parosproxy/paros/core/scanner/Category.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2013/03/03 Issue 546: Remove all template Javadoc comments
 package org.parosproxy.paros.core.scanner;
 
 import org.parosproxy.paros.Constant;
@@ -29,8 +30,6 @@
  * 20000 - 29999 :
  * 30000 - 39999 :
  * 
- * To change the template for this generated type comment go to
- * Window - Preferences - Java - Code Generation - Code and Comments
  */
 public class Category {
     public static final int INFO_GATHER = 0;

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -38,6 +38,8 @@
 // ZAP: 2013/01/16 Issue 453: Dynamic loading and unloading of add-ons - added helper methods
 // ZAP: 2013/02/17 Issue 496: Allow to see the request and response at the same 
 // time in the main window
+// ZAP: 2013/02/26 Issue 540: Maximised work tabs hidden when response tab
+// position changed
 
 package org.parosproxy.paros.view;
 
@@ -156,7 +158,7 @@ public void init() {
 		messagePanelsPositionController = new MessagePanelsPositionController(
 		        requestPanel,
 		        responsePanel,
-		        mainFrame.getMainToolbarPanel(),
+		        mainFrame,
 		        getWorkbench());
 	}
 	

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2012/05/02 Changed to use the class literal, instead of getting the
 // class at runtime, to get the resource.
 // ZAP: 2012/07/29 Issue 43: added Scope support
+// ZAP: 2013/02/26 Issue 538: Allow non sequential lines to be selected in the history log
 
 package org.parosproxy.paros.extension.history;
 
@@ -257,7 +258,7 @@ protected javax.swing.JList<HistoryReference> getListLog() {
 			listLog = new javax.swing.JList<>();
 			listLog.setDoubleBuffered(true);
             listLog.setCellRenderer(getLogPanelCellRenderer());
-			listLog.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
+			listLog.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
 			listLog.setName("ListLog");
 			listLog.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
 			listLog.setFixedCellHeight(16);	// Significantly speeds up rendering

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -29,6 +29,7 @@
 // ZAP: 2012/10/03 Issue 388 Added enabling support for technologies
 // ZAP: 2013/01/19 Issue 460 Add support for a scan progress dialog
 // ZAP: 2013/01/25 Removed the "(non-Javadoc)" comments.
+// ZAP: 2013/02/19 Issue 528 Scan progress dialog can show negative progress times
 
 package org.parosproxy.paros.core.scanner;
 
@@ -663,6 +664,7 @@ public Date getTimeFinished() {
 	@Override
 	public void setTimeStarted() {
 		this.started = new Date();
+		this.finished = null;
 	}
 
 	@Override

File: src/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -330,7 +330,7 @@ public void setListAuth(List<HostAuthentication> listAuth) {
         
         ((HierarchicalConfiguration) getConfig()).clearTree(ALL_AUTHS_KEY);
         
-        ArrayList<HostAuthentication> enabledAuths = new ArrayList<>(listAuth);
+        ArrayList<HostAuthentication> enabledAuths = new ArrayList<>(listAuth.size());
         for (int i = 0, size = listAuth.size(); i < size; ++i) {
             String elementBaseKey = ALL_AUTHS_KEY + "(" + i + ").";
             HostAuthentication auth = listAuth.get(i);

File: src/org/zaproxy/zap/extension/bruteforce/BruteForcePanel.java
Patch:
@@ -146,7 +146,7 @@ private  void initialize() {
         // Wont need to do this if/when this class is changed to extend ScanPanel
         scanStatus = new ScanStatus(
         				new ImageIcon(
-        					BruteForcePanel.class.getResource("/resource/icon/16/086.png")),
+        					BruteForcePanel.class.getResource(ExtensionBruteForce.HAMMER_ICON_RESOURCE)),
         					Constant.messages.getString("bruteforce.panel.title"));
        
         if (View.isInitialised()) {

File: src/org/parosproxy/paros/view/MainFooterPanel.java
Patch:
@@ -219,10 +219,12 @@ private JLabel createAlertLabel(String toolTipText, URL imageUrl) throws NullPoi
 	// Support for dynamic scanning results in the footer
     public void addFooterToolbarRightLabel (JLabel label) {
     	this.footerToolbarRight.add(label);
+    	this.validate();
     }
     
     public void removeFooterToolbarRightLabel (JLabel label) {
         this.footerToolbarRight.remove(label);
+        this.validate();
     }
     
     //FIXME Still needed?

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -205,6 +205,8 @@ private void run() throws Exception {
 
 		if (isGUI) {
 
+			View.setDisplayOption(Model.getSingleton().getOptionsParam().getViewParam().getDisplayOption());
+
 		    // Prompt for language if not set
 			String locale = Model.getSingleton().getOptionsParam().getViewParam().getConfigLocale();
 		    if (locale == null || locale.length() == 0) {
@@ -229,7 +231,6 @@ private void run() throws Exception {
 				dialog.setVisible(true);
 		    }
 
-		    View.setDisplayOption(Model.getSingleton().getOptionsParam().getViewParam().getDisplayOption());
 		    runGUI();
 		    
 

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsSite.java
Patch:
@@ -140,6 +140,9 @@ public void setActiveSession(HttpSession activeSession) {
 			throw new IllegalArgumentException(
 					"When settting an active session, a non-null session has to be provided.");
 
+		if (this.activeSession == activeSession)
+			return;
+
 		if (this.activeSession != null) {
 			this.activeSession.setActive(false);
 			// If the active session was one with no tokens, delete it, as it will probably not

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -39,7 +39,7 @@ public class ApiException extends Exception {
 	private static final long serialVersionUID = 1L;
 	
 	public enum Type {BAD_FORMAT, BAD_TYPE, NO_IMPLEMENTOR, BAD_ACTION, BAD_VIEW, BAD_OTHER, INTERNAL_ERROR, MISSING_PARAMETER, 
-		URL_NOT_FOUND, HREF_NOT_FOUND, SCAN_IN_PROGRESS, DISABLED, ALREADY_EXISTS, DOES_NOT_EXIST};
+		URL_NOT_FOUND, HREF_NOT_FOUND, SCAN_IN_PROGRESS, DISABLED, ALREADY_EXISTS, DOES_NOT_EXIST, ILLEGAL_PARAMETER};
 	
 	private final String detail;
 

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsPanel.java
Patch:
@@ -74,7 +74,7 @@ public class HttpSessionsPanel extends AbstractPanel {
 	private SortedComboBoxModel<String> siteModel = new SortedComboBoxModel<>();
 
 	/** The sessions model. */
-	private HttpSessionsTableModel sessionsModel = new HttpSessionsTableModel();
+	private HttpSessionsTableModel sessionsModel = new HttpSessionsTableModel(null);
 
 	/**
 	 * Instantiates a new http session panel.

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -183,6 +183,8 @@ public String getDescription() {
 											FileCopier fileCopier = new FileCopier();
 											fileCopier.copy(file, targetFile);
 										}
+										// Refresh lists
+										reloadAddOnData();
 									}
 								} else {
 									View.getSingleton().showWarningDialog(

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -277,6 +277,7 @@ public boolean removeAddOn(AddOn ao) {
 						if (ext.canUnload()) {
 							logger.debug("Unloading ext: " + ext.getName());
 							ext.unload();
+							ExtensionFactory.unloadAddOnExtension(ext);
 							// TODO should remove from extension loader here to prevent duplicate name warning
 							// Control.getSingleton().getExtensionLoader().
 						} else {

File: src/org/zaproxy/zap/control/AddOnLoader.java
Patch:
@@ -176,6 +176,7 @@ public void addAddon(AddOn ao) {
     	}
     	if (this.aoc.addAddOn(ao)) {
             try {
+                addAddOnFile(ao);
             	this.addURL(ao.getFile().toURI().toURL());
             	
             	if (this.blockList.contains(ao.getId())) {

File: src/org/parosproxy/paros/extension/manualrequest/ExtensionManualRequestEditor.java
Patch:
@@ -32,6 +32,8 @@
 // ZAP: 2012/08/01 Issue 332: added support for Modes
 // ZAP: 2012/11/21 Heavily refactored extension to support non-HTTP messages.
 // ZAP: 2013/01/25 Added method removeManualSendEditor().
+// ZAP: 2013/02/06 Issue 499: NullPointerException while uninstalling an add-on
+// with a manual request editor
 
 package org.parosproxy.paros.extension.manualrequest;
 
@@ -98,9 +100,7 @@ public void removeManualSendEditor(Class<? extends Message> messageType) {
 		
 		// remove from GUI
 		dialogue.clear();
-		dialogue.setVisible(false);
-		dialogue.setEnabled(false);
-		dialogue.getParent().remove(dialogue);
+		dialogue.dispose();
 
 		if (getView() != null) {
 			// unload menu items

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -275,7 +275,7 @@ private void addSeeds(Spider spider, SiteNode node) {
 
 	@Override
 	public void spiderComplete(boolean successful) {
-		log.warn("Spider scanning complete: " + successful);
+		log.info("Spider scanning complete: " + successful);
 		stopScan = true;
 		this.isAlive = false;
 		this.listenner.scanFinshed(site);
@@ -313,7 +313,7 @@ public void readURI(HttpMessage msg) {
 
 			siteTree.addPath(historyRef, msg);
 		} catch (Exception e) {
-			log.warn(e.getMessage(), e);
+			log.error(e.getMessage(), e);
 		}
 	}
 

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -164,8 +164,8 @@ public void run() {
 		boolean isFiltered = false;
 		for (ParseFilter filter : parent.getController().getParseFilters()) {
 			if (filter.isFiltered(msg)) {
-				if (log.isInfoEnabled()) {
-					log.info("Resource fetched, but will not be parsed due to a ParseFilter rule: "
+				if (log.isDebugEnabled()) {
+					log.debug("Resource fetched, but will not be parsed due to a ParseFilter rule: "
 							+ msg.getRequestHeader().getURI());
 				}
 				isFiltered = true;

File: src/org/zaproxy/zap/spider/filters/DefaultFetchFilter.java
Patch:
@@ -45,7 +45,7 @@ public class DefaultFetchFilter extends FetchFilter {
 	@Override
 	public FetchStatus checkFilter(URI uri) {
 
-		log.info("Checking: " + uri);
+		log.debug("Checking: " + uri);
 		// Protocol check
 		String scheme = uri.getScheme();
 		if (scheme == null || (!scheme.equalsIgnoreCase("http") && !scheme.equalsIgnoreCase("https"))) {

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlFormParser.java
Patch:
@@ -107,17 +107,17 @@ public void parseResource(HttpMessage message, Source source, int depth) {
 			// Get method and action
 			String method = form.getAttributeValue("method");
 			String action = form.getAttributeValue("action");
-			log.info("Found new form with method: '" + method + "' and action: " + action);
+			log.debug("Found new form with method: '" + method + "' and action: " + action);
 
 			// If no action, skip the form
 			if (action == null) {
-				log.info("No form 'action' defined. Using base URL: " + baseURL);
+				log.debug("No form 'action' defined. Using base URL: " + baseURL);
 				action = baseURL;
 			}
 
 			// If POSTing forms is not enabled, skip processing of forms with POST method
 			if (!param.isPostForm() && method != null && method.trim().equalsIgnoreCase(METHOD_POST)) {
-				log.info("Skipping form with POST method because of user settings.");
+				log.debug("Skipping form with POST method because of user settings.");
 				continue;
 			}
 

File: src/org/zaproxy/zap/spider/parser/SpiderTextParser.java
Patch:
@@ -36,7 +36,7 @@ public class SpiderTextParser extends SpiderParser {
 
 	@Override
 	public void parseResource(HttpMessage message, Source source, int depth) {
-		log.info("Parsing non-HTML text resource.");
+		log.debug("Parsing non-HTML text resource.");
 
 		// Use a simple pattern matcher to find urls
 		if (message.getResponseBody() != null) {

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -131,8 +131,9 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc
 			scanURL(url);
 		} else if (ACTION_STOP_SCAN.equals(name)) {
 			// The action is to stop a pending scan
-			if (spiderThread != null)
+			if (spiderThread != null){
 				spiderThread.stopScan();
+			}
 		} else if (ACTION_CLEAR_EXCLUDED_FROM_SCAN.equals(name)) {
 			try {
 				Session session = Model.getSingleton().getSession();

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -223,7 +223,8 @@ protected int addToolBarElements(JToolBar toolBar, Location location, int gridX)
 	 * Update the count of found URIs.
 	 */
 	protected void updateFoundCount() {
-		if (this.currentResultsModel != null)
+		if (this.currentResultsModel != null){
 			this.getFoundCountValueLabel().setText(Integer.toString(this.currentResultsModel.getRowCount()));
+		}
 	}
 }

File: src/org/zaproxy/zap/extension/spider/SpiderPanelTableModel.java
Patch:
@@ -86,10 +86,11 @@ public Object getValueAt(int row, int col) {
 		SpiderScanResult result = scanResults.get(row);
 		switch (col) {
 		case 0:
-			if (result.skipped)
+			if (result.skipped) {
 				return skippedIcon;
-			else
+			} else {
 				return notSkippedIcon;
+			}
 		case 1:
 			return result.method;
 		case 2:

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -120,13 +120,13 @@ public void setTokens(List<AntiCsrfParamToken> tokens) {
         this.enabledTokensNames = enabledTokens;
     }
 
-    protected void addToken(String name) {
+    public void addToken(String name) {
         this.tokens.add(new AntiCsrfParamToken(name));
         
         this.enabledTokensNames.add(name);
     }
 
-    protected void removeToken(String name) {
+    public void removeToken(String name) {
         this.tokens.remove(new AntiCsrfParamToken(name));
         
         this.enabledTokensNames.remove(name);

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -90,7 +90,9 @@ public void hook(ExtensionHook extensionHook) {
 	        extensionHook.getHookMenu().addPopupMenuItem(this.getPopupMenuGenerateForm());
 	    }
 
-        API.getInstance().registerApiImplementor(new AntiCsrfAPI(this));
+	    AntiCsrfAPI api = new AntiCsrfAPI(this);
+        api.addApiOptions(getParam());
+        API.getInstance().registerApiImplementor(api);
 
 	}
 	

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -140,7 +140,7 @@ private void beginSSL(String targethost) throws IOException {
         	throw new MissingRootCertificateException(e); // throw again, cause will be catched later.
 		} catch (Exception e) {
 			// ZAP: transform for further processing 
-			throw new IOException("Error while establishing SSL connection!", e);
+			throw new IOException("Error while establishing SSL connection for '" + targethost + "'!", e);
 		}
         
         httpIn = new HttpInputStream(inSocket);

File: src/org/zaproxy/zap/spider/parser/SpiderRobotstxtParser.java
Patch:
@@ -54,8 +54,9 @@ public SpiderRobotstxtParser(SpiderParam params) {
 
 	@Override
 	public void parseResource(HttpMessage message, Source source, int depth) {
-		if (message == null || params.isParseRobotsTxt() == false)
+		if (message == null || !params.isParseRobotsTxt()) {
 			return;
+		}
 
 		// Get the response content
 		String content = message.getResponseBody().toString();

File: src/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -278,7 +278,6 @@ public void sessionSaved(Exception e) {
             //view.getMainFrame().setTitle(file.getName().replaceAll(".session\\z","") + " - " + Constant.PROGRAM_NAME);
         } else {
 		    view.showWarningDialog(Constant.messages.getString("menu.file.savingSession.error"));	// ZAP: i18n
-		    e.printStackTrace();
     	    log.error("error saving session file " + model.getSession().getFileName(), e);
             log.error(e.getMessage(), e);
 

File: src/org/parosproxy/paros/core/proxy/ProxyServer.java
Patch:
@@ -213,7 +213,6 @@ public void run() {
 			    // unknown IO exception - continue but with delay to avoid eating up CPU time if continue
 			    try {
                     Thread.sleep(100);
-                    //e.printStackTrace();
                 } catch (InterruptedException e1) {
                 }
 			}

File: src/org/parosproxy/paros/network/HttpMessage.java
Patch:
@@ -30,6 +30,7 @@
 // ZAP: 2012/08/01 Issue 332: added support for Modes
 // ZAP: 2012/08/09 Added HttpSession field 
 // ZAP: 2012/10/08 Issue 391: Performance improvements
+// ZAP: 2013/01/23 Clean up of exception handling/logging.
 
 package org.parosproxy.paros.network;
 
@@ -646,7 +647,7 @@ public HttpMessage cloneRequest() {
             try {
                 newMsg.getRequestHeader().setMessage(this.getRequestHeader().toString());
             } catch (HttpMalformedHeaderException e) {
-                e.printStackTrace();
+                log.error(e.getMessage(), e);
             }
             newMsg.setRequestBody(this.getRequestBody().getBytes());
         }

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -33,6 +33,7 @@
 // ZAP: 2012/06/24 Added new method of getting cookies from the request header.
 // ZAP: 2012/10/08 Issue 361: getHostPort on HttpRequestHeader for HTTPS CONNECT
 // requests returns the wrong port
+// ZAP: 2013/01/23 Clean up of exception handling/logging.
 package org.parosproxy.paros.network;
 
 import java.io.UnsupportedEncodingException;
@@ -144,7 +145,7 @@ public HttpRequestHeader(String method, URI uri, String version) throws HttpMalf
         try {
             setHeader(HOST, uri.getHost() + (uri.getPort() > 0 ? ":" + Integer.toString(uri.getPort()) : ""));
         } catch (URIException e) {
-            e.printStackTrace();
+            log.error(e.getMessage(), e);
         }
         setHeader(USER_AGENT, "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0;)");
         setHeader(PRAGMA, "no-cache");
@@ -450,7 +451,7 @@ public boolean isImage() {
                 return (patternImage.matcher(path).find());
             }
         } catch (URIException e) {
-            e.printStackTrace();
+            log.error(e.getMessage(), e);
         }
         return false;
     }

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -28,6 +28,7 @@
 //                 declaration where IOException already appears, 
 //                 introduced two helper methods for notifying listeners.
 // ZAP: 2013/01/19 Issue 459: Active scanner locking
+// ZAP: 2013/01/23 Clean up of exception handling/logging.
 
 package org.parosproxy.paros.network;
 
@@ -232,7 +233,7 @@ private void addAuth(HttpClient client) {
                 credentials = new NTCredentials(auth.getUserName(), auth.getPassword(), InetAddress.getLocalHost().getCanonicalHostName(), auth.getHostName());
                 client.getState().setCredentials(authScope, credentials);
             } catch (UnknownHostException e1) {
-                e1.printStackTrace();
+                log.error(e1.getMessage(), e1);
             }
         }
     }

File: src/org/parosproxy/paros/network/SSLConnector.java
Patch:
@@ -20,6 +20,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/04/23 Added @Override annotation to all appropriate methods.
+// ZAP: 2013/01/23 Clean up of exception handling/logging.
 package org.parosproxy.paros.network;
 
 import java.io.IOException;
@@ -167,7 +168,7 @@ public SSLSocketFactory getClientSocketFactory(String type) {
 			HttpsURLConnection.setDefaultSSLSocketFactory(clientSSLSockFactory);
 
 		} catch (Exception e) {
-			e.printStackTrace();
+			logger.error(e.getMessage(), e);
 		}
 
 		return clientSSLSockFactory;

File: src/org/zaproxy/zap/extension/bruteforce/BruteForcePanel.java
Patch:
@@ -79,6 +79,8 @@
 public class BruteForcePanel extends AbstractPanel implements BruteForceListenner {
 	
 	private static final long serialVersionUID = 1L;
+	
+	private static final Logger logger = Logger.getLogger(BruteForcePanel.class);
 
 	public static final String PANEL_NAME = "bruteforce";
 	
@@ -755,7 +757,7 @@ protected void bruteForceDirectory(SiteNode node) {
 				String dir = node.getHistoryReference().getHttpMessage().getRequestHeader().getURI().getPath();
 				startScan(dir, false);
 			} catch (Exception e) {
-				e.printStackTrace();
+				logger.error(e.getMessage(), e);
 			}
 		}
 	}

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -19,7 +19,6 @@
  */
 package org.zaproxy.zap.model;
 
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.LinkedList;
@@ -266,7 +265,7 @@ public void excludeFromContext(SiteNode sn, boolean recurse) throws Exception {
         addExcludeFromContextRegex(this.getPatternFromNode(sn, recurse));
 	}
 	
-	public void addIncludeInContextRegex(String includeRegex) throws SQLException {
+	public void addIncludeInContextRegex(String includeRegex) {
 		Pattern p = Pattern.compile(includeRegex, Pattern.CASE_INSENSITIVE);
 		includeInPatterns.add(p);
 		includeInRegexs.add(includeRegex);
@@ -306,7 +305,7 @@ public void setExcludeFromContextRegexs(List<String> excludeRegexs) throws Excep
 	    }
 	}
 
-	public void addExcludeFromContextRegex(String excludeRegex) throws SQLException {
+	public void addExcludeFromContextRegex(String excludeRegex) {
 		Pattern p = Pattern.compile(excludeRegex, Pattern.CASE_INSENSITIVE);
 		excludeFromPatterns.add(p);
 		excludeFromRegexs.add(excludeRegex);

File: src/com/sittinglittleduck/DirBuster/HTMLparse.java
Patch:
@@ -46,7 +46,7 @@ public class HTMLparse extends Thread
     /** Creates a new instance of HTMLparse */
     public HTMLparse()
     {
-
+        super("DirBuster-HTMLparse");
         manager = Manager.getInstance();
     }
 

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -242,7 +242,7 @@ public void installNewExtensions() {
 		   				// Report info to the Output tab
 		   				View.getSingleton().getOutputPanel().append(
 		   						MessageFormat.format(
-		   								Constant.messages.getString("cfu.output.installing"), 
+		   								Constant.messages.getString("cfu.output.installing") + "\n", 
 		   								ao.getName(),
 		   								ao.getVersion()));
 		   			}

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -151,7 +151,7 @@ public void showUpdatesDialog(boolean manual) {
 		
 		try {
 			if (updateDialog == null) {
-				if (this.getLatestVersionInfo() == null) {
+				if (latestVersionInfo == null) {
 					// Manually cancelled
 					return;
 				}

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -145,6 +145,7 @@ public void showUpdatesDialog(boolean manual) {
         	waitDialog = getView().getWaitMessageDialog(Constant.messages.getString("cfu.check.checking"));
         	// Allow user to close the dialog
         	waitDialog.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
+        	this.getLatestVersionInfo(false);
         	waitDialog.setVisible(true);
         }
 		

File: src/org/zaproxy/zap/extension/api/ApiGeneratorUtils.java
Patch:
@@ -71,6 +71,8 @@ public static List<ApiImplementor> getAllImplementors() {
 		api = new ActiveScanAPI(null);
 		api.addApiOptions(new ScannerParam());
 		imps.add(api);
+
+        imps.add(new ContextAPI());
 		
 		imps.add(new AuthAPI(null));
 

File: src/org/zaproxy/zap/extension/api/ExtensionAPI.java
Patch:
@@ -71,6 +71,9 @@ public void hook(ExtensionHook extensionHook) {
         coreApi.addApiOptions(extensionHook.getModel().getOptionsParam().getConnectionParam());
         API.getInstance().registerApiImplementor(coreApi);
 
+        API.getInstance().registerApiImplementor(new ContextAPI());
+
+
 	}
 
 	private OptionsApiPanel getOptionsAPIPanel() {

File: src/org/zaproxy/zap/extension/stdmenus/PopupIncludeInContextMenu.java
Patch:
@@ -19,6 +19,7 @@
  */
 package org.zaproxy.zap.extension.stdmenus;
 
+import java.sql.SQLException;
 import java.util.List;
 import java.util.regex.Pattern;
 
@@ -77,7 +78,7 @@ public void performAction(SiteNode sn) throws Exception {
         performAction(url);
 	}
 	
-	protected void performAction(String url) throws Exception {
+	protected void performAction(String url) throws SQLException {
         Session session = Model.getSingleton().getSession();
         
         if (context == null) {

File: src/org/zaproxy/zap/extension/websocket/WebSocketMessage.java
Patch:
@@ -157,7 +157,7 @@ public enum Direction {
 
 	// 1015 is another reserved status code
 	
-	public final static int[] OPCODES = {OPCODE_TEXT, OPCODE_BINARY, OPCODE_CLOSE, OPCODE_PING, OPCODE_PONG };
+	public static final int[] OPCODES = {OPCODE_TEXT, OPCODE_BINARY, OPCODE_CLOSE, OPCODE_PING, OPCODE_PONG };
 
 	/**
 	 * Indicates the opcode of this message.

File: src/org/zaproxy/zap/extension/websocket/WebSocketObserver.java
Patch:
@@ -39,7 +39,7 @@ public interface WebSocketObserver {
 	 * 
 	 * @return observing order
 	 */
-	public int getObservingOrder();
+	int getObservingOrder();
 	
 	/**
 	 * Called by the observed class ({@link WebSocketProxy}) when a new part of
@@ -54,7 +54,7 @@ public interface WebSocketObserver {
 	 *            contains message parts received so far
 	 * @return True for continuing to notify and forwarding message
 	 */
-	public boolean onMessageFrame(int channelId, WebSocketMessage message);
+	boolean onMessageFrame(int channelId, WebSocketMessage message);
 	
 	/**
 	 * Called by the observed class ({@link WebSocketProxy}) when its internal
@@ -66,5 +66,5 @@ public interface WebSocketObserver {
 	 * @param state new state
 	 * @param proxy
 	 */
-	public void onStateChange(State state, WebSocketProxy proxy);
+	void onStateChange(State state, WebSocketProxy proxy);
 }

File: src/org/zaproxy/zap/extension/websocket/filter/WebSocketFilter.java
Patch:
@@ -33,10 +33,10 @@ public interface WebSocketFilter extends Filter {
      * @param message
      * @throws WebSocketException 
      */
-    public void onWebSocketPayload(WebSocketMessage message) throws WebSocketException;
+    void onWebSocketPayload(WebSocketMessage message) throws WebSocketException;
     
     /**
      * Clean up dialogues or other settings. Call it on session change.
      */
-    public void reset();
+    void reset();
 }

File: src/org/zaproxy/zap/extension/websocket/ui/ChannelSortedListModel.java
Patch:
@@ -18,6 +18,7 @@
 package org.zaproxy.zap.extension.websocket.ui;
 
 import java.util.ArrayList;
+import java.util.List;
 
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.extension.websocket.WebSocketChannelDTO;
@@ -28,7 +29,7 @@ public class ChannelSortedListModel extends SortedListModel<WebSocketChannelDTO>
 	private static final long serialVersionUID = 83057590716441165L;
 	
 	private boolean isShowJustInScope = false;
-	private ArrayList<WebSocketChannelDTO> hiddenChannels = new ArrayList<>();
+	private List<WebSocketChannelDTO> hiddenChannels = new ArrayList<>();
 
 	public ChannelSortedListModel() {
 		super();

File: src/org/zaproxy/zap/extension/websocket/ui/OptionsWebSocketPanel.java
Patch:
@@ -132,12 +132,12 @@ public void initParam(Object obj) {
     }
 
     @Override
-    public void validateParam(Object obj) throws Exception {
+    public void validateParam(Object obj) {
     	// no validation needed for these check boxes
     }
 
     @Override
-    public void saveParam(Object obj) throws Exception {
+    public void saveParam(Object obj) {
     	wsParams.setForwardAll(checkBoxForwardAll.isSelected());
     	wsParams.setBreakOnAll(checkBoxBreakOnAll.isSelected());
     	wsParams.setBreakOnPingPong(checkBoxBreakOnPingPong.isSelected());

File: src/org/zaproxy/zap/extension/websocket/ui/PopupExcludeWebSocketFromContextMenu.java
Patch:
@@ -20,6 +20,7 @@
 package org.zaproxy.zap.extension.websocket.ui;
 
 import java.awt.Component;
+import java.sql.SQLException;
 import java.util.regex.Pattern;
 
 import javax.swing.JTable;
@@ -64,7 +65,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
 	    });
     }
     
-	protected void performAction() throws Exception {
+	protected void performAction() throws SQLException {
 		WebSocketMessageDTO message = wsPopupHelper.getSelectedMessage();
 		if (message != null) {
 			String url = Pattern.quote(message.channel.getContextUrl());

File: src/org/zaproxy/zap/extension/websocket/ui/PopupIncludeWebSocketInContextMenu.java
Patch:
@@ -20,6 +20,7 @@
 package org.zaproxy.zap.extension.websocket.ui;
 
 import java.awt.Component;
+import java.sql.SQLException;
 import java.util.regex.Pattern;
 
 import javax.swing.JTable;
@@ -64,7 +65,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
 	    });
     }
     
-	protected void performAction() throws Exception {
+	protected void performAction() throws SQLException {
 		WebSocketMessageDTO message = wsPopupHelper.getSelectedMessage();
 		if (message != null) {
 			String url = Pattern.quote(message.channel.getContextUrl());

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesViewModel.java
Patch:
@@ -152,7 +152,7 @@ public int getRowCount() {
 
 	protected List<Integer> getCriterianInScope() {
 		if (filter.getShowJustInScope()) {
-			ArrayList<Integer> inScopeChannelIds = new ArrayList<>();
+			List<Integer> inScopeChannelIds = new ArrayList<>();
 			
 			// iterate through channels, and derive channel-ids in scope
 			try {

File: src/org/zaproxy/zap/extension/websocket/ui/httppanel/models/ByteWebSocketPanelViewModel.java
Patch:
@@ -20,7 +20,6 @@
 import java.nio.charset.Charset;
 
 import org.zaproxy.zap.extension.websocket.WebSocketMessage;
-import org.zaproxy.zap.extension.websocket.ui.httppanel.models.AbstractWebSocketBytePanelViewModel;
 
 public class ByteWebSocketPanelViewModel extends AbstractWebSocketBytePanelViewModel {
 	

File: src/org/zaproxy/zap/extension/websocket/ui/httppanel/views/WebSocketFuzzableTextMessage.java
Patch:
@@ -58,7 +58,7 @@ public WebSocketMessageDTO getMessage() {
 	}
 
 	@Override
-	public WebSocketFuzzMessageDTO fuzz(String fuzzString) throws Exception {
+	public WebSocketFuzzMessageDTO fuzz(String fuzzString) throws IllegalArgumentException {
 		WebSocketFuzzMessageDTO fuzzedMessage = copyMessage(message);
 	    
 		if (!(fuzzedMessage.payload instanceof String)) {

File: src/org/zaproxy/zap/extension/websocket/utility/Utf8Util.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Encode or decode from byte[] to Utf8 and vice versa.
  */
-public class Utf8Util {
+public abstract class Utf8Util {
 	
 	/**
 	 * Used for en- & decoding from bytes to String and vice versa.

File: src/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -400,6 +400,7 @@ private void hookAllExtension() {
 
 				}
 				hookOptions(extHook);
+				getExtension(i).optionsLoaded();
 			} catch (Exception e) {
 				logger.error(e.getMessage(), e);
 			}

File: src/org/zaproxy/zap/extension/bruteforce/BruteForceListenner.java
Patch:
@@ -25,9 +25,9 @@
 
 public interface BruteForceListenner {
 
-	public void scanFinshed(String host);
+	void scanFinshed(String host);
 	
-	public void scanProgress(String host, int port, int done, int todo);
+	void scanProgress(String host, int port, int done, int todo);
 	
-    public void foundDir(URL url, int statusCode, String response, String baseCase, String rawResponse, BaseCase baseCaseObj);
+    void foundDir(URL url, int statusCode, String response, String baseCase, String rawResponse, BaseCase baseCaseObj);
 }

File: src/ch/csnc/extension/httpclient/SSLContextManager.java
Patch:
@@ -338,7 +338,7 @@ public int initPKCS11(String name, String library, int slot, int slotListIndex,
         Security.addProvider(pkcs11);
 
 		// init the key store
-		KeyStore ks = KeyStore.getInstance("PKCS11");
+		KeyStore ks = KeyStore.getInstance("PKCS11", Security.getProvider(pkcs11.getName()));
 		ks.load(null, kspassword == null ? null : kspassword.toCharArray());
 		return addKeyStore(ks, "PKCS#11: " + name, ""); // do not store pin code
 	}

File: src/org/zaproxy/zap/utils/I18N.java
Patch:
@@ -62,10 +62,10 @@ public Locale getLocal() {
     }
 
 	public boolean containsKey(String key) {
-    	if (key.indexOf(".") > 0) {
-    		String prefix = key.substring(0, key.indexOf(".") -1);
+		if (key.indexOf(".") > 0) {
+    		String prefix = key.substring(0, key.indexOf("."));
     		ResourceBundle bundle = this.addonMessages.get(prefix);
-    		if (bundle != null & bundle.containsKey(key)) {
+    		if (bundle != null && bundle.containsKey(key)) {
     			return true;
     		}
     	}

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -34,13 +34,13 @@
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.clientapi.core.ApiResponse;
+import org.zaproxy.clientapi.core.ApiResponseElement;
+import org.zaproxy.clientapi.core.ApiResponseList;
 import org.zaproxy.zap.extension.alert.ExtensionAlert;
 import org.zaproxy.zap.extension.api.ApiAction;
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiImplementor;
-import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseElement;
-import org.zaproxy.zap.extension.api.ApiResponseList;
 import org.zaproxy.zap.extension.api.ApiView;
 
 public class ActiveScanAPI extends ApiImplementor implements ScannerListener {

File: src/org/zaproxy/zap/extension/auth/AuthAPI.java
Patch:
@@ -24,11 +24,11 @@
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.clientapi.core.ApiResponse;
+import org.zaproxy.clientapi.core.ApiResponseElement;
 import org.zaproxy.zap.extension.api.ApiAction;
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiImplementor;
-import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseElement;
 import org.zaproxy.zap.extension.api.ApiView;
 
 public class AuthAPI extends ApiImplementor {

File: src/org/zaproxy/zap/extension/autoupdate/AutoUpdateAPI.java
Patch:
@@ -20,11 +20,11 @@
 import net.sf.json.JSONObject;
 
 import org.apache.log4j.Logger;
+import org.zaproxy.clientapi.core.ApiResponse;
+import org.zaproxy.clientapi.core.ApiResponseElement;
 import org.zaproxy.zap.extension.api.ApiAction;
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiImplementor;
-import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseElement;
 import org.zaproxy.zap.extension.api.ApiView;
 
 public class AutoUpdateAPI extends ApiImplementor {

File: src/org/zaproxy/zap/extension/autoupdate/OptionsCheckForUpdatesPanel.java
Patch:
@@ -254,7 +254,7 @@ private JCheckBox getChkReportAlphaAddons() {
 	@Override
 	public void initParam(Object obj) {
 	    OptionsParam options = (OptionsParam) obj;
-	    getChkCheckOnStart().setSelected(options.getCheckForUpdatesParam().getCheckOnStart() > 0);
+	    getChkCheckOnStart().setSelected(options.getCheckForUpdatesParam().isCheckOnStart());
 	    getChkDownloadNewRelease().setSelected(options.getCheckForUpdatesParam().isDownloadNewRelease());
 		getChkCheckAddonUpdates().setSelected(options.getCheckForUpdatesParam().isCheckAddonUpdates());
 		getChkInstallAddonUpdates().setSelected(options.getCheckForUpdatesParam().isInstallAddonUpdates());
@@ -274,7 +274,7 @@ public void validateParam(Object obj) {
 	@Override
 	public void saveParam (Object obj) throws Exception {
 	    OptionsParam options = (OptionsParam) obj;
-	    options.getCheckForUpdatesParam().setChckOnStart((getChkCheckOnStart().isSelected()) ? 1 : 0);
+	    options.getCheckForUpdatesParam().setCheckOnStart((getChkCheckOnStart().isSelected()) ? 1 : 0);
 	    options.getCheckForUpdatesParam().setDownloadNewRelease(getChkDownloadNewRelease().isSelected());
 		options.getCheckForUpdatesParam().setCheckAddonUpdates(getChkCheckAddonUpdates().isSelected());
 		options.getCheckForUpdatesParam().setInstallAddonUpdates(getChkInstallAddonUpdates().isSelected());

File: src/org/zaproxy/zap/extension/search/SearchAPI.java
Patch:
@@ -25,11 +25,11 @@
 import net.sf.json.JSONObject;
 
 import org.apache.log4j.Logger;
+import org.zaproxy.clientapi.core.ApiResponse;
+import org.zaproxy.clientapi.core.ApiResponseList;
+import org.zaproxy.clientapi.core.ApiResponseSet;
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiImplementor;
-import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseList;
-import org.zaproxy.zap.extension.api.ApiResponseSet;
 import org.zaproxy.zap.extension.api.ApiView;
 
 public class SearchAPI extends ApiImplementor implements SearchListenner {

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -30,12 +30,12 @@
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.clientapi.core.ApiResponse;
+import org.zaproxy.clientapi.core.ApiResponseElement;
+import org.zaproxy.clientapi.core.ApiResponseList;
 import org.zaproxy.zap.extension.api.ApiAction;
 import org.zaproxy.zap.extension.api.ApiException;
 import org.zaproxy.zap.extension.api.ApiImplementor;
-import org.zaproxy.zap.extension.api.ApiResponse;
-import org.zaproxy.zap.extension.api.ApiResponseElement;
-import org.zaproxy.zap.extension.api.ApiResponseList;
 import org.zaproxy.zap.extension.api.ApiView;
 import org.zaproxy.zap.model.ScanListenner;
 import org.zaproxy.zap.spider.SpiderListener;

File: src/com/sittinglittleduck/DirBuster/HTMLparse.java
Patch:
@@ -131,7 +131,7 @@ public void run()
                                         //add to vector to remove duplicates
                                         //links.addElement(urlString);
                                         Vector found = processURL(tempURL);
-                                        
+
                                         if(found != null)
                                         {
                                             for(int a = 0; a < found.size(); a++)
@@ -255,7 +255,7 @@ private Vector processURL(URL url)
 
             String toProcess = url.getPath();
             boolean noFile = url.getPath().endsWith("/");
-            String split[] = toProcess.split("/");
+            String[] split = toProcess.split("/");
 
             String found = "";
 
@@ -299,7 +299,7 @@ private BaseCase findBaseCasePoint(String item)
                 //System.out.println("found a / in findBaseCasePoint");
                 return GenBaseCase.genBaseCase(manager.getFirstPartOfURL() + "/", true, null);
             }
-            String array[] = item.split("/");
+            String[] array = item.split("/");
 
             String baseItem = "";
             for(int a = 0; a < array.length - 1; a++)

File: src/com/sittinglittleduck/DirBuster/gui/JDialogAdvSetup.java
Patch:
@@ -987,7 +987,7 @@ private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST
         }
         catch(NumberFormatException ex)
         {
-            //TODO: throw error when connection time out is not a number 
+            //TODO: throw error when connection time out is not a number
         }
 
         if(jTextFieldFailCaseString.getText() != null && !jTextFieldFailCaseString.getText().equals(""))
@@ -1002,7 +1002,7 @@ private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST
 
         String exts = jTextFieldExtToMiss.getText();
 
-        String extsArray[] = exts.split(",");
+        String[] extsArray = exts.split(",");
 
         manager.extsToMiss.clear();
 

File: src/org/parosproxy/paros/core/scanner/Alert.java
Patch:
@@ -29,6 +29,7 @@
 // ZAP: 2012/05/02 Changed to not create a new String in the setters.
 // ZAP: 2012/07/10 Issue 323: Added getIconUrl()
 // ZAP: 2012/10/08 Issue 391: Performance improvements
+// ZAP: 2012/12/19 Code Cleanup: Moved array brackets from variable name to type
 
 package org.parosproxy.paros.core.scanner;
 
@@ -57,9 +58,9 @@ public class Alert implements Comparable<Object>  {
 	public static final int SUSPICIOUS = 1;
 	public static final int WARNING = 2;
 	
-	public static final String MSG_RISK[] = {"Informational", "Low", "Medium", "High"};
+	public static final String[] MSG_RISK = {"Informational", "Low", "Medium", "High"};
 	// ZAP: Added "false positive"
-	public static final String MSG_RELIABILITY[] = {"False Positive", "Suspicious", "Warning"};
+	public static final String[] MSG_RELIABILITY = {"False Positive", "Suspicious", "Warning"};
 	
 	private int		alertId = -1;	// ZAP: Changed default alertId
 	private int		pluginId = 0;

File: src/org/parosproxy/paros/extension/filter/AllFilterPanel.java
Patch:
@@ -20,6 +20,7 @@
  */
 // ZAP: 2011/04/16 i18n
 // ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
+// ZAP: 2012/12/19 Code Cleanup: Moved array brackets from variable name to type
 
 package org.parosproxy.paros.extension.filter;
 
@@ -90,7 +91,7 @@ private void initialize() {
         this.add(getJScrollPane(), gridBagConstraints11);
 		
 	}
-	private static final int width[] = {400,50, 20};
+	private static final int[] width = {400,50, 20};
 	private JButton btnEnableAll = null;
 	private JButton btnDisableAll = null;
 	private AllFilterTableModel allFilterTableModel = null;  //  @jve:decl-index=0:parse,visual-constraint="43,246"

File: src/org/zaproxy/zap/utils/ClassLoaderUtil.java
Patch:
@@ -46,7 +46,7 @@ public static void addFile(File f) throws IOException {
     public static void addURL(URL u) throws IOException {
 
         URLClassLoader sysLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
-        URL urls[] = sysLoader.getURLs();
+        URL[] urls = sysLoader.getURLs();
         for (int i = 0; i < urls.length; i++) {
             if (StringUtils.equalsIgnoreCase(urls[i].toString(), u.toString())) {
                 if (log.isDebugEnabled()) {

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -376,6 +376,7 @@ private void runDaemon() throws Exception {
         final Thread t = new Thread(new Runnable() {
             @Override
 			public void run() {
+            	View.setDaemon(true);	// Prevents the View ever being initialised
         		Control.initSingletonWithoutView(getOverrides());
         		// This is the only non-daemon thread, so should keep running
         		// CoreAPI.handleApiAction uses System.exit to shutdown

File: src/org/zaproxy/zap/view/ContextGeneralPanel.java
Patch:
@@ -128,7 +128,7 @@ public void saveParam (Object obj) throws Exception {
 	    Context context = session.getContext(this.index);
 
     	String name = getTxtName().getText();
-    	if (! this.getName().equals(name)) {
+    	if (! this.getName().equals(name) && View.isInitialised()) {
     		View.getSingleton().renameContext(context);
     		this.setName(name);
     	}

File: src/com/sittinglittleduck/DirBuster/gui/JTableTree/DynamicTreeTableModel.java
Patch:
@@ -156,10 +156,9 @@ public Class getColumnClass(int column) {
      */
     public Object getValueAt(Object node, int column) {
 	try {
-	    Method method = node.getClass().getMethod(methodNames[column],
-						      null);
+	    Method method = node.getClass().getMethod(methodNames[column]);
 	    if (method != null) {
-		return method.invoke(node, null);
+		return method.invoke(node);
 	    }
 	}
 	catch  (Throwable th) {}

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -58,6 +58,9 @@ public String toString(API.Format format) {
 
 		case JSON:
 			return this.toJSON().toString();
+			
+		default:
+			break;
 		}
 		return null;
 	}

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -232,6 +232,7 @@ public void hook(ExtensionHook extensionHook) {
 			View.getSingleton().getMainFrame().getMainFooterPanel().addFooterToolbarRightLabel(getScanStatus().getCountLabel());
 	    }
         this.api = new AutoUpdateAPI(this);
+        this.api.addApiOptions(getModel().getOptionsParam().getCheckForUpdatesParam());
         API.getInstance().registerApiImplementor(this.api);
 	}
 	
@@ -390,6 +391,8 @@ public void run() {
 									report = true;
 								}
 								break;
+							default:
+									break;
 							}
 						}
 						if (report) {

File: src/org/zaproxy/zap/extension/dynssl/SslCertificateUtils.java
Patch:
@@ -59,7 +59,7 @@
 /**
  * @author MaWoKi
  */
-/*default*/ final class SslCertificateUtils {
+public class SslCertificateUtils {
 
 	private static final long DEFAULT_VALID_DAYS = 365L;
 

File: src/org/zaproxy/zap/extension/auth/AuthAPI.java
Patch:
@@ -85,12 +85,12 @@ public AuthAPI (ExtensionAuth extension) {
 		this.addApiAction(new ApiAction(ACTION_AUTO_REAUTH_ON));
 		this.addApiAction(new ApiAction(ACTION_AUTO_REAUTH_OFF));
 		this.addApiAction(new ApiAction(ACTION_SET_LOGIN_NODE, 
-				new String[] {ACTION_PARAM_CONTEXT_ID, ACTION_PARAM_URL, ACTION_PARAM_DATA}));
+				new String[] {ACTION_PARAM_CONTEXT_ID, ACTION_PARAM_URL}, new String[] {ACTION_PARAM_DATA}));
 		this.addApiAction(new ApiAction(ACTION_SET_LOGIN_INDICATOR, 
 				new String[] {ACTION_PARAM_CONTEXT_ID, ACTION_PARAM_INDICATOR}));
 		
 		this.addApiAction(new ApiAction(ACTION_SET_LOGOUT_NODE, 
-				new String[] {ACTION_PARAM_CONTEXT_ID, ACTION_PARAM_URL, ACTION_PARAM_DATA}));
+				new String[] {ACTION_PARAM_CONTEXT_ID, ACTION_PARAM_URL}, new String[] {ACTION_PARAM_DATA}));
 		this.addApiAction(new ApiAction(ACTION_SET_LOGOUT_INDICATOR, 
 				new String[] {ACTION_PARAM_CONTEXT_ID, ACTION_PARAM_INDICATOR}));
 

File: src/org/zaproxy/zap/extension/websocket/fuzz/WebSocketFuzzMessagesViewModel.java
Patch:
@@ -62,9 +62,8 @@ public class WebSocketFuzzMessagesViewModel extends WebSocketMessagesViewModel {
 	private static final String msgFail;
 	
 	static {
-		ResourceBundle msgs = Constant.messages;
-		msgSuccess = msgs.getString("websocket.fuzz.success");
-		msgFail = msgs.getString("websocket.fuzz.fail");
+		msgSuccess = Constant.messages.getString("websocket.fuzz.success");
+		msgFail = Constant.messages.getString("websocket.fuzz.fail");
 	}
     
 	/**

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -110,11 +110,12 @@ private void scanURL(String url, boolean scanChildren) throws ApiException {
 		}
 
 		activeScan = new ActiveScan(url, extension.getScannerParam(), 
-				extension.getModel().getOptionsParam().getConnectionParam(), null, scanChildren);
+				extension.getModel().getOptionsParam().getConnectionParam(), null);
 		
 		progress = 0;
 		activeScan.addScannerListener(this);
 		activeScan.setStartNode(startNode);
+        activeScan.setScanChildren(scanChildren);
 		activeScan.start();
 	}
 

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -523,7 +523,7 @@ public void onHttpRequestSend(HttpMessage msg, int initiator) {
 	 * .HttpMessage, int) */
 	@Override
 	public void onHttpResponseReceive(HttpMessage msg, int initiator) {
-		if (initiator == HttpSender.ACTIVE_SCANNER_INITIATOR) {
+		if (initiator == HttpSender.ACTIVE_SCANNER_INITIATOR || initiator == HttpSender.SPIDER_INITIATOR) {
 			// Not a session we care about
 			return;
 		}

File: src/org/zaproxy/clientapi/core/ClientApiMain.java
Patch:
@@ -129,6 +129,9 @@ private void initialize(String[] args) {
                     }else if(pair[0].contains("File")){
                         params.put(pair[0], new File(pair[1]));
                     }
+                    else{
+                        params.put(pair[0], pair[1]);
+                    }
                 }
             }
         } else {

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -32,6 +32,7 @@
 // ZAP: 2012/08/07 Issue 342 Support the HttpSenderListener
 // ZAP: 2012/08/07 Renamed Level to AlertThreshold and added support for AttackStrength
 // ZAP: 2012/08/31 Enabled control of AttackStrength
+// ZAP: 2012/11/22 Issue 421: Cleanly shut down any active scan threads on shutdown
 
 package org.parosproxy.paros.core.scanner;
 
@@ -101,7 +102,7 @@ public void run() {
         getAnalyser().start(startNode);
         
         Plugin plugin = null;
-        while (!isStop && getPluginFactory().existPluginToRun()) {
+        while (!isStop() && getPluginFactory().existPluginToRun()) {
             plugin = getPluginFactory().nextPlugin();
             if (plugin != null) {
             	plugin.setDelayInMs(this.scannerParam.getDelayInMs());
@@ -303,7 +304,7 @@ public boolean handleAntiCsrfTokens() {
 	void pluginCompleted(Plugin plugin) {
 	    Object obj = mapPluginStartTime.get(Long.valueOf(plugin.getId()));
 	    StringBuilder sb = new StringBuilder();
-	    if (isStop) {
+	    if (isStop()) {
 	        sb.append("stopped host/plugin ");
 	    } else {
 	        sb.append("completed host/plugin "); 

File: src/org/zaproxy/zap/extension/api/ApiException.java
Patch:
@@ -27,7 +27,7 @@ public class ApiException extends Exception {
 	private static final long serialVersionUID = 1L;
 	
 	public enum Type {BAD_FORMAT, BAD_TYPE, NO_IMPLEMENTOR, BAD_ACTION, BAD_VIEW, BAD_OTHER, INTERNAL_ERROR, MISSING_PARAMETER, 
-		URL_NOT_FOUND, HREF_NOT_FOUND, SCAN_IN_PROGRESS, DISABLED};
+		URL_NOT_FOUND, HREF_NOT_FOUND, SCAN_IN_PROGRESS, DISABLED, ALREADY_EXISTS, DOES_NOT_EXIST};
 	
 	private String detail = null;
 

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -59,6 +59,7 @@
 import org.parosproxy.paros.extension.ExtensionHookView;
 import org.parosproxy.paros.extension.SessionChangedListener;
 import org.parosproxy.paros.extension.manualrequest.ManualRequestEditorDialog;
+import org.parosproxy.paros.extension.manualrequest.http.impl.ManualHttpRequestEditorDialog;
 import org.parosproxy.paros.model.HistoryList;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
@@ -473,7 +474,7 @@ private PopupMenuPurgeHistory getPopupMenuPurgeHistory() {
 	 */    
 	public ManualRequestEditorDialog getResendDialog() {
 		if (resendDialog == null) {
-			resendDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, true, this, "resend");
+			resendDialog = new ManualHttpRequestEditorDialog(true, "resend");
 			resendDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
 		}
 		return resendDialog;

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzerContentPanel.java
Patch:
@@ -43,6 +43,7 @@
 import org.zaproxy.zap.extension.search.ExtensionSearch;
 import org.zaproxy.zap.extension.search.SearchMatch;
 import org.zaproxy.zap.extension.search.SearchResult;
+import org.zaproxy.zap.utils.Pair;
 
 public class HttpFuzzerContentPanel implements FuzzerContentPanel {
 

File: src/org/zaproxy/zap/extension/fuzz/impl/http/IconTableCellRenderer.java
Patch:
@@ -26,6 +26,8 @@
 import javax.swing.UIManager;
 import javax.swing.table.TableCellRenderer;
 
+import org.zaproxy.zap.utils.Pair;
+
 /**
  * Added via {@link JTable#setDefaultRenderer(Class, TableCellRenderer)} as
  * <code>JTable#setDefaultRenderer(Pair.class, new IconTableCellRenderer());</code>

File: src/org/zaproxy/zap/extension/websocket/ui/httppanel/models/AbstractWebSocketStringPanelViewModel.java
Patch:
@@ -15,6 +15,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
+
 package org.zaproxy.zap.extension.websocket.ui.httppanel.models;
 
 import org.zaproxy.zap.extension.httppanel.Message;

File: src/org/zaproxy/zap/extension/dynssl/SslCertificateUtils.java
Patch:
@@ -40,6 +40,7 @@
 import java.util.Vector;
 
 import org.apache.commons.codec.binary.Base64;
+import org.bouncycastle.asn1.DERObject;
 import org.bouncycastle.asn1.x500.X500NameBuilder;
 import org.bouncycastle.asn1.x500.style.BCStyle;
 import org.bouncycastle.asn1.x509.BasicConstraints;
@@ -72,7 +73,6 @@
 	 * or 'SHA1PRNG' Secure random number generator
 	 * @throws IllegalStateException in case of errors during assembling {@link KeyStore}
 	 */
-	@SuppressWarnings({ "unchecked", "rawtypes" })
 	public final static KeyStore createRootCA() throws NoSuchAlgorithmException {
 		final Date startDate = Calendar.getInstance().getTime();
 		final Date expireDate = new Date(startDate.getTime()+ (DEFAULT_VALID_DAYS * 24L * 60L * 60L * 1000L));
@@ -109,7 +109,7 @@ public final static KeyStore createRootCA() throws NoSuchAlgorithmException {
 			certGen.addExtension(X509Extension.basicConstraints, true, new BasicConstraints(true));
 			certGen.addExtension(X509Extension.keyUsage, false, new KeyUsage(KeyUsage.keyCertSign | KeyUsage.digitalSignature | KeyUsage.keyEncipherment | KeyUsage.dataEncipherment | KeyUsage.cRLSign));
 			
-			Vector eku = new Vector(5, 1);
+			Vector<DERObject> eku = new Vector<>(3, 1);
 			eku.add(KeyPurposeId.id_kp_serverAuth);
 			eku.add(KeyPurposeId.id_kp_clientAuth);
 			eku.add(KeyPurposeId.anyExtendedKeyUsage);

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -213,7 +213,7 @@ public void shutdown() {
     }
     
     private void addAuth(HttpClient client) {
-        List<HostAuthentication> list = param.getListAuth();
+        List<HostAuthentication> list = param.getListAuthEnabled();
         for (int i=0; i<list.size(); i++) {
             HostAuthentication auth = list.get(i);
             AuthScope authScope = null;

File: src/org/parosproxy/paros/view/OptionsDialog.java
Patch:
@@ -47,9 +47,9 @@ public OptionsDialog(Frame parent, boolean modal, String title)
 	 */
 	private void initialize() {
 
-		// ZAP: Increase height of options dialog
+		// ZAP: Increase width and height of options dialog
 	    //if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {
-	    	this.setSize(650, 570);
+	    	this.setSize(750, 570);
 	    //}
 	}
 	

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -113,7 +113,7 @@ protected AntiCsrfParam getParam() {
 	}
 	
 	public List<String> getAntiCsrfTokenNames() {
-		return this.getParam().getTokens();
+		return this.getParam().getTokensNames();
 	}
 	
 	public void addAntiCsrfTokenName(String token) {
@@ -231,7 +231,7 @@ public boolean isAntiCsrfToken(String name) {
 		if (name == null) {
 			return false;
 		}
-		return this.getParam().getTokens().contains(name.toLowerCase());
+		return this.getParam().getTokensNames().contains(name.toLowerCase());
 	}
 	
 	@Override

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -252,7 +252,7 @@ public HttpSessionsParam getParam() {
 	 * @return true, if it is a default session token
 	 */
 	public boolean isDefaultSessionToken(String token) {
-		if (getParam().getDefaultTokens().contains(token.toLowerCase(Locale.ENGLISH)))
+		if (getParam().getDefaultTokensEnabled().contains(token.toLowerCase(Locale.ENGLISH)))
 			return true;
 		return false;
 	}

File: src/org/zaproxy/zap/extension/invoke/ExtensionInvoke.java
Patch:
@@ -66,7 +66,7 @@ public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);
 	 
 	    if (getView() != null) {
-	        List<InvokableApp> apps = Model.getSingleton().getOptionsParam().getInvokeParam().getListInvoke();
+	        List<InvokableApp> apps = Model.getSingleton().getOptionsParam().getInvokeParam().getListInvokeEnabled();
 	        
 	        for (InvokableApp app: apps) {
 	            PopupMenuInvoke pmi = new PopupMenuInvoke(app.getDisplayName());

File: src/org/zaproxy/zap/extension/alert/AlertViewPanel.java
Patch:
@@ -628,8 +628,9 @@ public void setHistoryRef(HistoryReference historyRef) {
 		this.httpMessage = null;
 		try {
 			if (historyRef != null) {
-				setParamNames(historyRef.getHttpMessage().getParamNames());
-		        this.alertUrl.setText(historyRef.getHttpMessage().getRequestHeader().getURI().toString());
+				HttpMessage msg = historyRef.getHttpMessage();
+				setParamNames(msg.getParamNames());
+		        this.alertUrl.setText(msg.getRequestHeader().getURI().toString());
 			}
 		} catch (Exception e) {
 			logger.error(e.getMessage(), e);

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -426,7 +426,6 @@ private void deleteAlertFromDisplayEventHandler(Alert alert) {
                 if (href.getAlerts().contains(alert)) {
                     href.deleteAlert(alert);
                     try {
-                        node = siteTree.findNode(href.getHttpMessage());
                         // TODO Ideally should cache the param names (and change findNode) so we dont have to get
                         // the message from the db
                         node = siteTree.findNode(href.getHttpMessage());

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -105,7 +105,7 @@ public void run() {
 							if (scanner.isEnabled()) {
 								scanner.setParent(this);
 								scanner.scanHttpRequestSend(msg, href.getHistoryId());
-								scanner.scanHttpResponseReceive(href.getHttpMessage(), href.getHistoryId(), src);
+								scanner.scanHttpResponseReceive(msg, href.getHistoryId(), src);
 							}
 							if (shutDown) {
 								return;

File: src/org/zaproxy/zap/view/PopupMenuHttpMessage.java
Patch:
@@ -53,7 +53,7 @@ public boolean isEnabledForHttpMessage (HttpMessage msg) {
     
     @Override
     public void performAction (HistoryReference href) throws Exception {
-    	if (href != null && href.getHttpMessage() != null) {
+    	if (href != null) {
     		this.performAction(href.getHttpMessage());
     	}
     }

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -25,6 +25,7 @@
 // ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 // ZAP: 2012/10/04 Changed to initialise the instance variable mVersion with a 
 // valid version (HttpHeader.HTTP10).
+// ZAP: 2012/11/01 Issue 410: charset wrapped in quotation marks
 package org.parosproxy.paros.network;
 
 import java.util.Hashtable;
@@ -83,7 +84,8 @@ abstract public class HttpHeader implements java.io.Serializable{
 	public static final Pattern patternCRLF			= Pattern.compile("\\r\\n", Pattern.MULTILINE);
 	public static final Pattern patternLF				= Pattern.compile("\\n", Pattern.MULTILINE);
 	
-	private static final Pattern patternCharset = Pattern.compile("charset *= *([^;\\s]+)", Pattern.CASE_INSENSITIVE);
+	// ZAP: Issue 410: charset wrapped in quotation marks
+	private static final Pattern patternCharset = Pattern.compile("charset *= *\"?([^\";\\s]+)\"?", Pattern.CASE_INSENSITIVE);
 
 	protected static final String p_TEXT		= "[^\\x00-\\x1f\\r\\n]*"; 
 	protected static final String p_METHOD		= "(\\w+)";

File: src/org/zaproxy/zap/network/HttpResponseBody.java
Patch:
@@ -54,7 +54,7 @@ public String createCachedString(String charset) {
 				result = new String(getBytes(), charset);
 				isChangedCharset = false;
 			} catch (UnsupportedEncodingException e) {
-				log.error(e.getMessage(), e);
+				log.error("Unable to encode with the \"Content-Type\" charset: " + e.getMessage());
 			}
 		}
 		
@@ -89,7 +89,8 @@ private String createCachedStringWithMetaCharset() {
 				}
 			}
 		} catch(UnsupportedEncodingException e) {
-			log.error(e.getMessage(), e);
+			log.error("Unable to encode with the (X)HTML meta charset: " + e.getMessage());
+			log.warn("Using default charset: 8859_1");
 			
 			result = resultDefaultCharset;
 		}
@@ -107,7 +108,6 @@ private String toUTF8() {
 			utf8 = new String(buf1, "UTF8");
 			length2 = utf8.getBytes("UTF8").length;
 		} catch (UnsupportedEncodingException e) {
-			log.error(e.getMessage(), e);
 			log.warn("UTF8 not supported. Using 8859_1 instead.");
 			return null;
 		}

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -339,6 +339,7 @@ public List<String> getTags() {
    public void setNote(String note) {
        try {
            staticTableHistory.updateNote(historyId, note);
+           this.hasNote = note != null && note.length() > 0;
        } catch (SQLException e) {
            log.error(e.getMessage(), e);
        }

File: src/org/zaproxy/zap/extension/websocket/ui/ComboBoxChannelModel.java
Patch:
@@ -84,5 +84,5 @@ public void addListDataListener(ListDataListener l) {
     public void removeListDataListener(ListDataListener l) {
         delegate.removeListDataListener(l);
     }
-
+    
 }
\ No newline at end of file

File: src/org/zaproxy/zap/extension/websocket/ui/ExcludeFromWebSocketsMenuItem.java
Patch:
@@ -75,7 +75,7 @@ protected boolean isEnabledExtended() {
 	
 	@Override
 	protected String getInvokerName() {
-		return WebSocketMessagesView.TABLE_NAME;
+		return WebSocketMessagesView.PANEL_NAME;
 	}
 
 	protected String buildRegexForSelectedChannel() {

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesView.java
Patch:
@@ -44,7 +44,7 @@
  */
 public class WebSocketMessagesView implements Runnable {
 
-	public static final String TABLE_NAME = "websocket.table";
+	public static final String PANEL_NAME = "websocket.table";
 
 	private static final Logger logger = Logger.getLogger(WebSocketMessagesView.class);
 
@@ -96,7 +96,7 @@ public JTable getViewComponent() {
 	}
 
 	protected String getViewComponentName() {
-		return TABLE_NAME;
+		return PANEL_NAME;
 	}
 
 	protected MouseListener getMouseListener() {

File: src/org/zaproxy/zap/model/Context.java
Patch:
@@ -31,7 +31,6 @@
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteNode;
-import org.parosproxy.paros.network.HttpMessage;
 
 public class Context {
 	

File: src/org/zaproxy/zap/view/ContextTechnologyPanel.java
Patch:
@@ -188,6 +188,7 @@ private CheckboxTree getTechTree() {
 		if (techTree == null) {
 			techTree = new CheckboxTree() {
 				private static final long serialVersionUID = 1L;
+				@Override
 				protected void setExpandedState(TreePath path, boolean state) {
 			        // Ignore all collapse requests; collapse events will not be fired
 			        if (state) {

File: src/org/zaproxy/zap/view/PopupMenuHistoryReference.java
Patch:
@@ -86,7 +86,7 @@ protected Invoker getLastInvoker() {
 	/**
 	 * This method initializes this
 	 */
-	private void initialize() {
+	protected void initialize() {
 
         this.addActionListener(new java.awt.event.ActionListener() { 
 
@@ -233,7 +233,7 @@ private List<HistoryReference> getSelectedHistoryReferences() {
 	}
 	
 	@Override
-    public final boolean isEnableForComponent(Component invoker) {
+    public boolean isEnableForComponent(Component invoker) {
     	boolean display = false;
     	if (invoker.getName() == null) {
     		return false;

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -25,6 +25,7 @@
 import net.sf.json.JSONObject;
 import net.sf.json.xml.XMLSerializer;
 
+import org.apache.commons.collections.map.HashedMap;
 import org.apache.commons.httpclient.URI;
 import org.apache.commons.httpclient.URIException;
 import org.apache.log4j.Logger;

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -443,7 +443,7 @@ protected void postTaskExecution() {
 		int total = this.tasksTotalCount.get();
 
 		// Compute the progress and notify the listeners
-		this.notifyListenersSpiderProgress(done / total, done, total - done);
+		this.notifyListenersSpiderProgress(done*100 / total, done, total - done);
 
 		// Check for ending conditions
 		if (done == total && initialized == true)

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -111,7 +111,6 @@ private void initialize() {
         this.setName(NAME);
         this.setOrder(28);
 			
-        API.getInstance().registerApiImplementor(new ActiveScanAPI(this));
 
 	}
 
@@ -135,7 +134,9 @@ public void hook(ExtensionHook extensionHook) {
         extensionHook.addOptionsParamSet(getScannerParam());
         extensionHook.addCommandLine(getCommandLineArguments());
 
-
+        ActiveScanAPI api = new ActiveScanAPI(this);
+        api.addApiOptions(getScannerParam());
+        API.getInstance().registerApiImplementor(api);
 	}
 	
 	private ActiveScanPanel getActiveScanPanel() {

File: src/org/zaproxy/zap/extension/spider/ExtensionSpider.java
Patch:
@@ -124,7 +124,9 @@ public void hook(ExtensionHook extensionHook) {
 		extensionHook.addOptionsParamSet(getSpiderParam());
 
 		// Register as an API implementor
-		API.getInstance().registerApiImplementor(new SpiderAPI(this));
+		SpiderAPI spiderApi = new SpiderAPI(this);
+		spiderApi.addApiOptions(getSpiderParam());
+		API.getInstance().registerApiImplementor(spiderApi);
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -128,7 +128,7 @@ public String getAuthor() {
 	 * @see org.parosproxy.paros.extension.ExtensionAdaptor#getDescription() */
 	@Override
 	public String getDescription() {
-		return Constant.messages.getString("httpsession.desc");
+		return Constant.messages.getString("httpsessions.desc");
 	}
 
 	/* (non-Javadoc)

File: src/org/zaproxy/zap/extension/dynssl/SslCertificateUtils.java
Patch:
@@ -36,6 +36,7 @@
 import java.security.cert.X509Certificate;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.Random;
 import java.util.Vector;
 
 import org.apache.commons.codec.binary.Base64;
@@ -81,6 +82,7 @@ public final static KeyStore createRootCA() throws NoSuchAlgorithmException {
 		final KeyPair keypair = g.genKeyPair();
 		final PrivateKey privKey = keypair.getPrivate();
         final PublicKey  pubKey = keypair.getPublic();
+        Random rnd = new Random();
 
 		// using the hash code of the user's name and home path, keeps anonymity
 		// but also gives user a chance to distinguish between each other
@@ -94,7 +96,7 @@ public final static KeyStore createRootCA() throws NoSuchAlgorithmException {
 		
 		X509v3CertificateBuilder certGen = new JcaX509v3CertificateBuilder (
 												namebld.build(),
-												new BigInteger("3405691582"), // 0xCAFEBABE ;-)
+												BigInteger.valueOf(rnd.nextInt()),
 												startDate,
 												expireDate,
 												namebld.build(),

File: src/org/zaproxy/zap/extension/autoupdate/CheckForUpdates.java
Patch:
@@ -64,7 +64,7 @@ private boolean isNewerVersion (String progVersionStr, String latestVersionStr,
 		boolean newerVersion = false;
 		if (Constant.isDevBuild(progVersionStr)) {
 			return false;
-		} else if (checkDaily && Constant.isDailyBuild()) {
+		} else if (checkDaily && Constant.isDailyBuild(progVersionStr)) {
         	// Will just be a 'dated' version, which we can just use a string compare on
 			return progVersionStr.compareTo(latestVersionStr) < 0;
         } else if (latestVersionStr != null && latestVersionStr.length() > 0) {

File: src/org/zaproxy/zap/extension/autoupdate/CheckForUpdates.java
Patch:
@@ -62,7 +62,7 @@ protected String doInBackground() throws Exception {
 	
 	private boolean isNewerVersion (String progVersionStr, String latestVersionStr, boolean checkDaily) {
 		boolean newerVersion = false;
-		if (Constant.isDailyBuild(progVersionStr)) {
+		if (Constant.isDevBuild(progVersionStr)) {
 			return false;
 		} else if (checkDaily && Constant.isDailyBuild()) {
         	// Will just be a 'dated' version, which we can just use a string compare on

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -334,7 +334,7 @@ private void initializeFilesAndDirectories() {
 	            
 	            if (ver == VERSION_TAG) {
 	            	// Nothing to do
-	            } else if (isDevBuild() || isDevBuild()) {
+	            } else if (isDevBuild() || isDailyBuild()) {
 	            	// Nothing to do
 	            } else {
 	            	// Backup the old one

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -86,7 +86,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 				}
 
 			});
-			if (Constant.PROGRAM_VERSION.equals(Constant.DEV_VERSION)) {
+			if (Constant.isDevBuild()) {
 				// Dont enable if this is a developer build, ie build from source
 				menuItemCheckUpdate.setEnabled(false);
 			}
@@ -124,7 +124,7 @@ public void checkComplete (boolean newerVersion, String latestVersionName) {
 	
 	public void checkForUpdates(boolean manual) {
 
-		if (Constant.PROGRAM_VERSION.equals(Constant.DEV_VERSION)) {
+		if (Constant.isDevBuild()) {
 			// Dont enable if this is a developer build, ie build from source
 			return;
 		}

File: src/org/parosproxy/paros/core/scanner/Analyser.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2012/05/04 Catch CloneNotSupportedException whenever an Uri is cloned,
 // 		as introduced with version 3.1 of HttpClient
 // ZAP: 2012/07/30 Issue 43: Added support for Scope
+// ZAP: 2012/10/08 Issue 391: Performance improvements
 
 package org.parosproxy.paros.core.scanner;
 
@@ -195,7 +196,6 @@ private String getChildSuffix(SiteNode node, boolean performRecursiveCheck) {
 		String suffix = null;
 		SiteNode child = null;
         HistoryReference ref = null;
-		HttpMessage msg = null;
 		try {
 
 			for (int i=0; i<staticSuffixList.length; i++) {
@@ -204,8 +204,7 @@ private String getChildSuffix(SiteNode node, boolean performRecursiveCheck) {
 					child = (SiteNode) node.getChildAt(j);
                     ref = child.getHistoryReference();
 					try {
-					    msg = ref.getHttpMessage();
-                        if (msg.getRequestHeader().getURI().getPath().endsWith(suffix)) {
+                        if (ref.getURI().getPath().endsWith(suffix)) {
 					        return suffix;
 					    }
 					} catch (Exception e) {

File: src/org/parosproxy/paros/extension/history/PopupMenuEmbeddedBrowser.java
Patch:
@@ -122,10 +122,8 @@ private void showBrowser(HistoryReference ref) {
     	if (! supported) {
     		return;
     	}
-        HttpMessage msg = null;
         try {
-            msg = ref.getHttpMessage();
-            this.getBrowserLauncher().openURLinBrowser(msg.getRequestHeader().getURI().toString());
+            this.getBrowserLauncher().openURLinBrowser(ref.getURI().toString());
 
         } catch (Exception e) {
             extension.getView().showWarningDialog(Constant.messages.getString("history.browser.warning"));

File: src/org/zaproxy/zap/extension/alert/AlertViewPanel.java
Patch:
@@ -599,7 +599,7 @@ public Alert getAlert() {
 		    msg = httpMessage;
 		} else if (historyRef != null) {
 			try {
-				uri = historyRef.getHttpMessage().getRequestHeader().getURI().toString();
+				uri = historyRef.getURI().toString();
 				msg = historyRef.getHttpMessage();
 			} catch (Exception e) {
 				logger.error(e.getMessage(), e);

File: src/org/zaproxy/zap/extension/history/ManageTagsDialog.java
Patch:
@@ -202,7 +202,7 @@ private JList<String> getTagList() {
 		return tagList;
 	}
 	
-	public void setTags (Vector<String> tags) {
+	public void setTags (List<String> tags) {
 		addedTags.clear();
 		deletedTags.clear();
 		tagListModel.clear();

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -154,7 +154,7 @@ public void run() {
 			try {
 				log.debug("Spider Task Started. Processing uri at depth " + depth
 						+ " using already constructed message:  "
-						+ reference.getHttpMessage().getRequestHeader().getURI());
+						+ reference.getURI());
 			} catch (Exception e1) { // Ignore it
 			}
 		}

File: src/org/parosproxy/paros/db/RecordContext.java
Patch:
@@ -32,6 +32,8 @@ public class RecordContext {
 	public static final int TYPE_INCLUDE = 3;
 	public static final int TYPE_EXCLUDE = 4;
 	public static final int TYPE_IN_SCOPE = 5;
+	public static final int TYPE_INCLUDE_TECH = 6;
+	public static final int TYPE_EXCLUDE_TECH = 7;
 	
 	public static final int TYPE_AUTH_LOGIN_URL = 101;
 	public static final int TYPE_AUTH_LOGIN_POST_DATA = 102;

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -239,6 +239,7 @@ public void discardSession() {
 	public void createAndOpenUntitledDb() throws ClassNotFoundException, Exception {
 	    log.info("Create and Open Untitled Db");
 		getExtensionLoader().sessionAboutToChangeAllPlugin(null);
+		model.closeSession();
 		model.createAndOpenUntitledDb();
 		getExtensionLoader().sessionChangedAllPlugin(model.getSession());
 	}

File: src/org/parosproxy/paros/extension/ExtensionPopupMenuItem.java
Patch:
@@ -24,7 +24,8 @@
 // ZAP: 2012/03/03 Added setters for separators
 // ZAP: 2012/07/11 Issue 323: Added support for supermenus
 // ZAP: 2012/08/01 Issue 332: added support for Modes
-// ZAP: 2012/08/29 Issue 250 Support for authentication management
+// ZAP: 2012/08/29 Issue 250: Support for authentication management
+// ZAP: 2012/10/02 Issue 385: Added support for Contexts
 
 package org.parosproxy.paros.extension;
 
@@ -39,6 +40,7 @@ public class ExtensionPopupMenuItem extends JMenuItem {
 	
 	public static final int ATTACK_MENU_INDEX = 0;
 	public static final int EXCLUDE_MENU_INDEX = 1;
+	public static final int CONTEXT_FLAG_MENU_INDEX = 1;	// This is just shown in the response tab
 	public static final int FLAG_MENU_INDEX = 2;
 	public static final int INVOKE_MENU_INDEX = 3;
 	

File: src/org/zaproxy/zap/extension/websocket/ui/ExcludeFromScopeMenuItem.java
Patch:
@@ -59,12 +59,15 @@ protected void performAction() {
 		if (message != null) {
 			String url = message.channel.url;
         	url = Pattern.quote(url.substring(0, url.indexOf("?")));
+        	// TODO support contexts
+        	/*
 	        try {
 				Session session = Model.getSingleton().getSession();
 				session.addExcludeFromScopeRegex(url);
 			} catch (SQLException e) {
 				logger.error(e.getMessage(), e);
 			}
+			*/
 		}
 	}
 

File: src/org/zaproxy/zap/extension/websocket/ui/IncludeInScopeMenuItem.java
Patch:
@@ -59,7 +59,8 @@ protected void performAction() throws Exception {
 //			excluded.remove(url);
 //			session.setExcludeFromScopeRegexs(excluded);
         	Session session = Model.getSingleton().getSession();
-	        session.addIncludeInScopeRegex(url);
+        	// TODO support contexts
+	        //session.addIncludeInScopeRegex(url);
 		}
 	}
 

File: src/org/parosproxy/paros/CommandLine.java
Patch:
@@ -51,7 +51,7 @@ public class CommandLine {
     private boolean GUI = true;
     private boolean daemon = false;
     private String[] args = null;
-    private Hashtable<String, String> keywords = new Hashtable<String, String>();
+    private Hashtable<String, String> keywords = new Hashtable<>();
     private Vector<CommandLineArgument[]> commandList = null;
     
     public CommandLine(String[] args) throws Exception {

File: src/org/parosproxy/paros/common/DynamicLoader.java
Patch:
@@ -62,7 +62,7 @@ public class DynamicLoader extends URLClassLoader {
     private static final Logger logger = Logger.getLogger(DynamicLoader.class);
 
     // ZAP: Changed to use an ArrayList instead of Vector.
-    private List<String> listClassName = new ArrayList<String>();
+    private List<String> listClassName = new ArrayList<>();
     
     public DynamicLoader(String directory, String packageName) {
     	this(directory, packageName, false);
@@ -144,7 +144,7 @@ private void checkLocal(String packageName, boolean recurse) {
     public <T> List<T> getFilteredObject (Class<T> classType) {
         String className = "";
         Class<?> cls = null;
-        List<T> listClass = new ArrayList<T>();
+        List<T> listClass = new ArrayList<>();
         for (int i=0; i < listClassName.size(); i++) {
             className = listClassName.get(i);
             try {

File: src/org/parosproxy/paros/common/FileXML.java
Patch:
@@ -200,7 +200,7 @@ protected List<String> getValues(String tag) {
 		// ZAP: Added variable "length".
 		final int length = nodeList.getLength();
 		// ZAP: Changed to set the initial capacity.
-		ArrayList<String> resultList = new ArrayList<String>(length);
+		ArrayList<String> resultList = new ArrayList<>(length);
 		Element element = null;
 		// ZAP: Changed to use the variable "length".
 		for (int i = 0; i < length; i++) {

File: src/org/parosproxy/paros/core/proxy/ProxyServer.java
Patch:
@@ -56,12 +56,12 @@ public class ProxyServer implements Runnable {
 	protected boolean isProxyRunning = false;
 	protected ProxyParam proxyParam = new ProxyParam();
 	protected ConnectionParam connectionParam = new ConnectionParam();
-	protected Vector<ProxyListener> listenerList = new Vector<ProxyListener>();
+	protected Vector<ProxyListener> listenerList = new Vector<>();
 	// ZAP: Added listenersComparator.
     private static Comparator<ProxyListener> listenersComparator;
 	protected boolean serialize = false;
     protected boolean enableCacheProcessing = false;
-    protected Vector<CacheProcessingItem> cacheProcessingList = new Vector<CacheProcessingItem>();
+    protected Vector<CacheProcessingItem> cacheProcessingList = new Vector<>();
 
     private List<Pattern> excludeUrls = null;
     private static Logger log = Logger.getLogger(ProxyServer.class);
@@ -267,7 +267,7 @@ Vector<CacheProcessingItem> getCacheProcessingList() {
     }
     
 	public void setExcludeList(List<String> urls) {
-		excludeUrls = new ArrayList<Pattern>(urls.size());
+		excludeUrls = new ArrayList<>(urls.size());
 	    for (String url : urls) {
 			Pattern p = Pattern.compile(url, Pattern.CASE_INSENSITIVE);
 			excludeUrls.add(p);

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -97,7 +97,7 @@ class ProxyThread implements Runnable {
 	private static Object semaphoreSingleton = new Object();
 //	private Thread forwardThread = null;
     
-    private static Vector<Thread> proxyThreadList = new Vector<Thread>();
+    private static Vector<Thread> proxyThreadList = new Vector<>();
     
 	ProxyThread(ProxyServer server, Socket socket) {
 		parentServer = server;

File: src/org/parosproxy/paros/core/proxy/SenderThread.java
Patch:
@@ -41,7 +41,7 @@ public SenderThread(HttpSender httpSender, HttpMessage msg, SenderThreadListener
         this.httpSender = httpSender;
         this.msg = msg;
         // ZAP: Changed to ArrayList and added the initial capacity.
-        listenerList = new ArrayList<SenderThreadListener>(1);
+        listenerList = new ArrayList<>(1);
         listenerList.add(listener);
     }   
     

File: src/org/parosproxy/paros/core/scanner/AbstractAppParamPlugin.java
Patch:
@@ -31,7 +31,7 @@
 abstract public class AbstractAppParamPlugin extends AbstractAppPlugin {
 
 
-    private Vector<Variant> listVariant = new Vector<Variant>();
+    private Vector<Variant> listVariant = new Vector<>();
     
     private Variant variant = null;
     private NameValuePair originalPair = null;

File: src/org/parosproxy/paros/core/scanner/AbstractDefaultFilePlugin.java
Patch:
@@ -43,7 +43,7 @@ abstract public class AbstractDefaultFilePlugin extends AbstractHostPlugin {
     
 
     private URI baseURI = null;    
-    private Vector<URI> listURI = new Vector<URI>();
+    private Vector<URI> listURI = new Vector<>();
 		
 	protected void addTest(String directories, String files) {
 		String[] 	dirList = null,

File: src/org/parosproxy/paros/core/scanner/Analyser.java
Patch:
@@ -59,7 +59,7 @@ public class Analyser {
 	private static final String[] staticSuffixList = { ".cfm", ".jsp", ".php", ".asp", ".aspx", ".dll", ".exe", ".pl"};
 
 	private HttpSender	httpSender = null;
-	private TreeMap<String, SampleResponse>		mapVisited = new TreeMap<String, SampleResponse>();
+	private TreeMap<String, SampleResponse>		mapVisited = new TreeMap<>();
 	private boolean		isStop = false;
 	
     // ZAP Added delayInMs

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -64,7 +64,7 @@ public class HostProcess implements Runnable {
     private Kb kb = null;
     
     // time related 
-    private HashMap<Long, Long> mapPluginStartTime = new HashMap<Long, Long>();
+    private HashMap<Long, Long> mapPluginStartTime = new HashMap<>();
     private long hostProcessStartTime = 0;
 
 
@@ -151,7 +151,7 @@ private void traverse(Plugin plugin, SiteNode node, boolean incRelatedSiblings)
             return;
         }
         
-        Set<SiteNode> parentNodes = new HashSet<SiteNode>();
+        Set<SiteNode> parentNodes = new HashSet<>();
         parentNodes.add(node);
         
         scanSingleNode(plugin, node);

File: src/org/parosproxy/paros/core/scanner/Scanner.java
Patch:
@@ -52,7 +52,7 @@ public class Scanner implements Runnable {
     private static Logger log = Logger.getLogger(Scanner.class);
 	private static DecimalFormat decimalFormat = new java.text.DecimalFormat("###0.###");
 
-	private Vector<ScannerListener> listenerList = new Vector<ScannerListener>();
+	private Vector<ScannerListener> listenerList = new Vector<>();
 	private ScannerParam scannerParam = null;
 	private ConnectionParam connectionParam = null;
 	//private HttpSender httpSender = null;
@@ -238,13 +238,13 @@ public void notifyNewMessage(HttpMessage msg) {
 	
 	public void setExcludeList(List<String> urls) {
 		if (urls != null) {
-		    excludeUrls = new ArrayList<Pattern>(urls.size());
+		    excludeUrls = new ArrayList<>(urls.size());
 		    for (String url : urls) {
 				Pattern p = Pattern.compile(url, Pattern.CASE_INSENSITIVE);
 				excludeUrls.add(p);
 		    }
 		} else {
-			excludeUrls = new ArrayList<Pattern>(0);
+			excludeUrls = new ArrayList<>(0);
 		}
 	}
 	

File: src/org/parosproxy/paros/core/scanner/VariantAbstractQuery.java
Patch:
@@ -34,7 +34,7 @@ abstract public class VariantAbstractQuery implements Variant {
     
 	private static Pattern staticPatternParam = Pattern.compile("&", Pattern.CASE_INSENSITIVE);	
 
-    private Vector<NameValuePair> listParam = new Vector<NameValuePair>();
+    private Vector<NameValuePair> listParam = new Vector<>();
     
     public VariantAbstractQuery() {
         

File: src/org/parosproxy/paros/db/Database.java
Patch:
@@ -68,7 +68,7 @@ public class Database {
     private static final Logger log = Logger.getLogger(Database.class);
 
 	// ZAP: Added type arguments.
-	private Vector<DatabaseListener> listenerList = new Vector<DatabaseListener>();
+	private Vector<DatabaseListener> listenerList = new Vector<>();
 
 	public Database() {
 	    tableHistory = new TableHistory();

File: src/org/parosproxy/paros/db/RecordTag.java
Patch:
@@ -1,4 +1,3 @@
-
 /*
  * Zed Attack Proxy (ZAP) and its related class files.
  * 

File: src/org/parosproxy/paros/db/TableParam.java
Patch:
@@ -17,8 +17,6 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
-// ZAP: 2012/08/08 Upgrade to HSQLDB 2.x (introduced TABLE_NAME constant + DbUtils)
 
 package org.parosproxy.paros.db;
 
@@ -87,7 +85,7 @@ public synchronized RecordParam read(long urlId) throws SQLException {
 	}
 	
     public List<RecordParam> getAll () throws SQLException {
-    	List<RecordParam> result = new ArrayList<RecordParam>();
+    	List<RecordParam> result = new ArrayList<>();
     	ResultSet rs = psGetAll.executeQuery();
     	while (rs.next()) {
     		result.add(new RecordParam(rs.getLong(PARAMID), rs.getString(SITE), rs.getString(TYPE),  

File: src/org/parosproxy/paros/db/TableSessionUrl.java
Patch:
@@ -17,8 +17,6 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
-// ZAP: 2012/08/08 Upgrade to HSQLDB 2.x (introduced TABLE_NAME constant + DbUtils)
 
 package org.parosproxy.paros.db;
 
@@ -103,7 +101,7 @@ public synchronized void deleteAllUrlsForType(int type) throws SQLException {
     
 
     public List<RecordSessionUrl> getUrlsForType (int type) throws SQLException {
-    	List<RecordSessionUrl> result = new ArrayList<RecordSessionUrl>();
+    	List<RecordSessionUrl> result = new ArrayList<>();
     	psGetAlluRLSForType.setInt(1, type);
     	ResultSet rs = psGetAlluRLSForType.executeQuery();
     	while (rs.next()) {

File: src/org/parosproxy/paros/extension/AbstractDialog.java
Patch:
@@ -65,8 +65,6 @@ public AbstractDialog(Frame owner, boolean modal) throws HeadlessException {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		this.setVisible(false);

File: src/org/parosproxy/paros/extension/AbstractPanel.java
Patch:
@@ -50,8 +50,6 @@ public AbstractPanel() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private  void initialize() {
 	    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {

File: src/org/parosproxy/paros/extension/CommandLineArgument.java
Patch:
@@ -27,7 +27,7 @@ public class CommandLineArgument {
 
     private String name = "";
     private int numOfArguments = 0;
-    private Vector<String> arg = new Vector<String>();
+    private Vector<String> arg = new Vector<>();
     private boolean enabled = false;
     private Pattern pattern = null;
     private String errorMessage = "";

File: src/org/parosproxy/paros/extension/ExtensionLoader.java
Patch:
@@ -63,8 +63,8 @@
 
 public class ExtensionLoader {
 
-    private Vector<Extension> extensionList = new Vector<Extension>();
-    private Vector<ExtensionHook> hookList = new Vector<ExtensionHook>();
+    private Vector<Extension> extensionList = new Vector<>();
+    private Vector<ExtensionHook> hookList = new Vector<>();
     private Model model = null;
 
     private View view = null;
@@ -383,7 +383,7 @@ private void hookAllExtension() {
      * @param cmdLine
      */
     public void hookCommandLineListener (CommandLine cmdLine) throws Exception {
-        Vector<CommandLineArgument[]> allCommandLineList = new Vector<CommandLineArgument[]>();
+        Vector<CommandLineArgument[]> allCommandLineList = new Vector<>();
         for (int i=0; i<hookList.size(); i++) {
             ExtensionHook hook = hookList.get(i);
             CommandLineArgument[] arg = hook.getCommandLineArgument();

File: src/org/parosproxy/paros/extension/edit/ExtensionEdit.java
Patch:
@@ -61,8 +61,6 @@ public ExtensionEdit(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionEdit");

File: src/org/parosproxy/paros/extension/edit/PopupFindMenu.java
Patch:
@@ -54,8 +54,6 @@ public PopupFindMenu() {
 	
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("edit.find.popup"));	// ZAP: i18n

File: src/org/parosproxy/paros/extension/encoder/EncoderDialog.java
Patch:
@@ -77,8 +77,6 @@ public EncoderDialog(Frame owner, boolean modal) {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setTitle("Encode/Hash");

File: src/org/parosproxy/paros/extension/encoder/ExtensionEncoder.java
Patch:
@@ -54,7 +54,6 @@ public ExtensionEncoder() {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionEncoder");

File: src/org/parosproxy/paros/extension/filter/AllFilterPanel.java
Patch:
@@ -55,8 +55,6 @@ public AllFilterPanel() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         GridBagConstraints gridBagConstraints2 = new GridBagConstraints();

File: src/org/parosproxy/paros/extension/filter/AllFilterTableModel.java
Patch:
@@ -59,7 +59,7 @@ private void setAllFilters(List<Filter> allFilters) {
      */
     public AllFilterTableModel() {
         // ZAP: Added the type argument.
-        allFilters = new Vector<Filter>();
+        allFilters = new Vector<>();
     }
     
     // ZAP: Added the type argument.
@@ -169,7 +169,7 @@ void setAllFilterEnabled(boolean enabled) {
     // ZAP: Added the type arguments.
     public List<Filter> getAllFilters() {
         if (allFilters == null) {
-            allFilters = new Vector<Filter>();
+            allFilters = new Vector<>();
         }
         return allFilters;
     }

File: src/org/parosproxy/paros/extension/filter/FilterDetectSetCookie.java
Patch:
@@ -87,7 +87,7 @@ public void onHttpResponseReceive(HttpMessage msg) {
         
         if (resHeader.getHeader("Set-cookie") != null) {
             Matcher matcher = pattern.matcher(resHeader.toString());
-            List<String> result = new LinkedList<String>();
+            List<String> result = new LinkedList<>();
             
             while (matcher.find()){
                 String cookie = matcher.group(1);

File: src/org/parosproxy/paros/extension/filter/FilterFactory.java
Patch:
@@ -43,9 +43,9 @@ public class FilterFactory {
 
     private DynamicLoader loader = null;
     // ZAP: Added the type arguments.
-    private static TreeMap<Integer, Filter> mapAllFilter = new TreeMap<Integer, Filter>();
+    private static TreeMap<Integer, Filter> mapAllFilter = new TreeMap<>();
     // ZAP: Added the type arguments.
-    private Vector<Filter> listAllFilter = new Vector<Filter>();
+    private Vector<Filter> listAllFilter = new Vector<>();
 
     public void loadAllFilter() {
         if (loader == null) {

File: src/org/parosproxy/paros/extension/filter/FilterLogCookie.java
Patch:
@@ -65,7 +65,7 @@ public String getName() {
 
     public void init() {
 		// ZAP: Added type argument.
-		cookieList = new Vector<String>();
+		cookieList = new Vector<>();
      	
     }
 

File: src/org/parosproxy/paros/extension/filter/FilterLogGetQuery.java
Patch:
@@ -166,7 +166,7 @@ protected synchronized void writeLogFile(String line, Hashtable<String, String>
     // ZAP: Added type arguments.
     protected Hashtable<String, String> parseParameter(String param){
         // ZAP: Added type arguments.
-        Hashtable<String, String> table = new Hashtable<String, String>();
+        Hashtable<String, String> table = new Hashtable<>();
         
         try{	  
             matcher2 = pSeparator.matcher(param);

File: src/org/parosproxy/paros/extension/history/BrowserDialog.java
Patch:
@@ -59,7 +59,7 @@ public class BrowserDialog extends AbstractDialog {
 	private JButton btnClose = null;
 	private String title = "";
 	// ZAP: Added type argument.
-	private Vector<URL> URLs = new Vector<URL>();
+	private Vector<URL> URLs = new Vector<>();
     private JPanel jPanel = null;
     // ZAP: Disabled the platform specific browser
     //private EmbeddedBrowser embeddedBrowser = null;
@@ -78,8 +78,6 @@ public BrowserDialog(Frame frame, boolean modal) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		this.setContentPane(getJContentPane());

File: src/org/parosproxy/paros/extension/history/HistoryFilterDialog.java
Patch:
@@ -80,8 +80,6 @@ public HistoryFilterDialog(Frame arg0, boolean arg1) throws HeadlessException {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setContentPane(getJPanel());

File: src/org/parosproxy/paros/extension/history/PopupMenuDeleteHistory.java
Patch:
@@ -67,7 +67,6 @@ public PopupMenuDeleteHistory(String label) {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("history.delete.popup"));	// ZAP: i18n
@@ -91,7 +90,7 @@ public boolean isEnableForComponent(Component invoker) {
         
         if (invoker.getName() != null && invoker.getName().equals("ListLog")) {
             try {
-                JList list = (JList) invoker;
+                JList<?> list = (JList<?>) invoker;
                 if (list.getSelectedIndex() >= 0) {
                     this.setEnabled(true);
                 } else {

File: src/org/parosproxy/paros/extension/history/PopupMenuEmbeddedBrowser.java
Patch:
@@ -73,8 +73,6 @@ public PopupMenuEmbeddedBrowser(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("history.browser.popup"));
@@ -149,7 +147,7 @@ public boolean isEnableForComponent(Component invoker) {
         }
         
         if (invoker.getName().equalsIgnoreCase("ListLog")) {
-            JList list = (JList) invoker;
+            JList<?> list = (JList<?>) invoker;
             if (list.getSelectedIndex() >= 0) {
                 this.setEnabled(true);
             } else {

File: src/org/parosproxy/paros/extension/history/PopupMenuExportMessage.java
Patch:
@@ -76,8 +76,6 @@ public PopupMenuExportMessage(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("history.export.messages.popup"));	// ZAP: i18n
@@ -140,7 +138,7 @@ public boolean isEnableForComponent(Component invoker) {
         
         if (invoker.getName() != null && invoker.getName().equals("ListLog")) {
             try {
-                JList list = (JList) invoker;
+                JList<?> list = (JList<?>) invoker;
                 if (list.getSelectedIndex() >= 0) {
                     this.setEnabled(true);
                 } else {

File: src/org/parosproxy/paros/extension/history/PopupMenuExportResponse.java
Patch:
@@ -74,7 +74,6 @@ public PopupMenuExportResponse(String label) {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("history.export.response.popup"));	// ZAP: i18n
@@ -151,7 +150,7 @@ public boolean isEnableForComponent(Component invoker) {
         
         if (invoker.getName() != null && invoker.getName().equals("ListLog")) {
             try {
-                JList list = (JList) invoker;
+                JList<?> list = (JList<?>) invoker;
                 if (list.getSelectedIndex() >= 0) {
                     this.setEnabled(true);
                 } else {

File: src/org/parosproxy/paros/extension/history/PopupMenuPurgeHistory.java
Patch:
@@ -71,8 +71,6 @@ public PopupMenuPurgeHistory(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("history.purge.popup"));	// ZAP: i18n
@@ -103,7 +101,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
     public boolean isEnableForComponent(Component invoker) {
         if (invoker.getName() != null && invoker.getName().equals("ListLog")) {
             try {
-                JList list = (JList) invoker;
+                JList<?> list = (JList<?>) invoker;
                 if (list.getSelectedIndex() >= 0) {
                     this.setEnabled(true);
                 } else {

File: src/org/parosproxy/paros/extension/history/PopupMenuResend.java
Patch:
@@ -64,8 +64,6 @@ public PopupMenuResend(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("history.resend.popup"));	// ZAP: i18n
@@ -95,7 +93,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
     public boolean isEnableForComponent(Component invoker) {
         if (invoker.getName() != null && invoker.getName().equals("ListLog")) {
             try {
-                JList list = (JList) invoker;
+                JList<?> list = (JList<?>) invoker;
                 if (list.getSelectedIndex() >= 0) {
                     this.setEnabled(true);
                 } else {

File: src/org/parosproxy/paros/extension/history/PopupMenuResendSites.java
Patch:
@@ -70,8 +70,6 @@ public void setExtension(ExtensionHistory extension) {
 
     /**
 	 * This method initialises this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("sites.resend.popup"));	// ZAP: i18n

File: src/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -125,7 +125,7 @@ public ManualRequestEditorDialog(Frame parent, boolean modal, boolean isSendEnab
 		this.setPreferredSize(new Dimension(700, 800));
 		initialize();
         
-        mapMessageSenders = new HashMap<Class<? extends Message>, MessageSender>();
+        mapMessageSenders = new HashMap<>();
         mapMessageSenders.put(HttpMessage.class, new HttpPanelSender(getRequestPanel(), getResponsePanel()));
 	}
 

File: src/org/parosproxy/paros/extension/option/OptionsAuthenticationPanel.java
Patch:
@@ -57,8 +57,6 @@ public OptionsAuthenticationPanel() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         java.awt.GridBagConstraints gridBagConstraints2 = new GridBagConstraints();

File: src/org/parosproxy/paros/extension/option/OptionsConnectionPanel.java
Patch:
@@ -394,8 +394,6 @@ private ZapTextArea getTxtProxyChainSkipName() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/parosproxy/paros/extension/option/OptionsLocalProxyPanel.java
Patch:
@@ -383,8 +383,6 @@ private ZapPortNumberSpinner getSpinnerReverseProxyHttpPort() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/parosproxy/paros/extension/patternsearch/ExtensionPatternSearch.java
Patch:
@@ -65,8 +65,6 @@ public ExtensionPatternSearch() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionSearch");

File: src/org/parosproxy/paros/extension/patternsearch/SearchDialog.java
Patch:
@@ -89,8 +89,6 @@ public SearchDialog(Frame owner, boolean modal) {
 
     /**
      * This method initializes this
-     * 
-     * @return void
      */
     private void initialize() {
         this.setTitle("Extract Pattern in Session");

File: src/org/parosproxy/paros/extension/report/ExtensionReport.java
Patch:
@@ -69,7 +69,6 @@ public ExtensionReport(String name) {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionReport");

File: src/org/parosproxy/paros/model/HttpMessageList.java
Patch:
@@ -27,7 +27,7 @@
 
 public class HttpMessageList {
 
-    private Vector<HttpMessage> list = new Vector<HttpMessage>();
+    private Vector<HttpMessage> list = new Vector<>();
     public synchronized boolean add(HttpMessage msg) {
         return list.add(msg);
     }

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -61,7 +61,7 @@ public class Model {
 	private String currentDBNameUntitled = "";
 	// ZAP: Added logger
 	private Logger logger = Logger.getLogger(Model.class);
-	private List <SessionListener> sessionListeners = new ArrayList<SessionListener>();
+	private List <SessionListener> sessionListeners = new ArrayList<>();
 	
 	public Model() {
 	    // make sure the variable here will not refer back to model itself.

File: src/org/parosproxy/paros/model/OptionsParam.java
Patch:
@@ -80,7 +80,7 @@ public class OptionsParam extends AbstractParam {
 	// ZAP: Added the instance variable.
     private DatabaseParam databaseParam = new DatabaseParam();
 
-	private Vector<AbstractParam> paramSetList = new Vector<AbstractParam>();
+	private Vector<AbstractParam> paramSetList = new Vector<>();
 	private boolean gui = true;
 	private File userDirectory = null;
 	

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -58,7 +58,7 @@ public class SiteMap extends DefaultTreeModel {
 	private static final long serialVersionUID = 2311091007687218751L;
 	private static Pattern staticPatternParam = Pattern.compile("&", Pattern.CASE_INSENSITIVE);
 	
-	private static Map<Integer, SiteNode> hrefMap = new HashMap<Integer, SiteNode>();
+	private static Map<Integer, SiteNode> hrefMap = new HashMap<>();
 
 	private Model model = null;
 
@@ -67,7 +67,7 @@ public class SiteMap extends DefaultTreeModel {
     
     public static SiteMap createTree(Model model) {
         SiteNode root = new SiteNode(null, -1, Constant.messages.getString("tab.sites"));
-        hrefMap = new HashMap<Integer, SiteNode>();
+        hrefMap = new HashMap<>();
         return new SiteMap(root, model);        
     }
     
@@ -525,7 +525,7 @@ private String getLeafName(String nodeName, URI uri, String method, String postD
     }
     
 	private TreeSet<String> getParamNameSet(String params) {
-	    TreeSet<String> set = new TreeSet<String>();
+	    TreeSet<String> set = new TreeSet<>();
 	    String[] keyValue = staticPatternParam.split(params);
 		String key = null;
 		int pos = 0;

File: src/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -65,7 +65,7 @@ public class ConnectionParam extends AbstractParam {
 	private String proxyChainPassword = "";
 	private HttpState httpState = null;
 	private boolean httpStateEnabled = false;
-	private Vector<HostAuthentication> listAuth = new Vector<HostAuthentication>();
+	private Vector<HostAuthentication> listAuth = new Vector<>();
 	
 	// ZAP: Added prompt option and timeout
 	private boolean proxyChainPrompt = false;

File: src/org/parosproxy/paros/network/GenericMethod.java
Patch:
@@ -49,7 +49,7 @@ public class GenericMethod extends EntityEnclosingMethod {
     /** 
      * The buffered request body consisting of <code>NameValuePair</code>s. 
      */
-    private Vector<NameValuePair> params = new Vector<NameValuePair>();
+    private Vector<NameValuePair> params = new Vector<>();
     private String method = null;
 
     public GenericMethod(String method) {

File: src/org/parosproxy/paros/network/HtmlParameter.java
Patch:
@@ -28,7 +28,7 @@ public enum Flags {anticsrf, session};
 	private String name;
 	private String value;
 	private Type type;
-	private Set<String> flags = new HashSet<String>();
+	private Set<String> flags = new HashSet<>();
 	
 	public HtmlParameter(Type type, String name, String value) {
 		super();

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -601,7 +601,7 @@ public void setCookieParams(TreeSet<HtmlParameter> cookieParams) {
     }
     
     public TreeSet<HtmlParameter> getCookieParams() {
-		TreeSet<HtmlParameter> set = new TreeSet<HtmlParameter>();
+		TreeSet<HtmlParameter> set = new TreeSet<>();
 		
     	Vector<String> cookieLines = getHeaders(HttpHeader.COOKIE);
 		if (cookieLines != null) {
@@ -629,7 +629,7 @@ public TreeSet<HtmlParameter> getCookieParams() {
 	 * @throws IllegalArgumentException if a problem is encountered while processing the "Cookie: " header line.
 	 */
 	public List<HttpCookie> getHttpCookies() {
-		List<HttpCookie> cookies = new LinkedList<HttpCookie>();
+		List<HttpCookie> cookies = new LinkedList<>();
 
 		// Process each "Cookie: " header line
 		Vector<String> cookiesS = getHeaders(HttpHeader.COOKIE);

File: src/org/parosproxy/paros/network/HttpResponseHeader.java
Patch:
@@ -222,7 +222,7 @@ public String getPrimeHeader() {
 	
 	// ZAP: Added method for working directly with HttpCookie
 	public List<HttpCookie> getHttpCookies() {
-		List<HttpCookie> cookies = new LinkedList<HttpCookie>();
+		List<HttpCookie> cookies = new LinkedList<>();
 
 		Vector<String> cookiesS = getHeaders(HttpHeader.SET_COOKIE);
 		if (cookiesS != null)
@@ -240,7 +240,7 @@ public List<HttpCookie> getHttpCookies() {
 
 	// ZAP: Added method.
 	public TreeSet<HtmlParameter> getCookieParams() {
-		TreeSet<HtmlParameter> set = new TreeSet<HtmlParameter>();
+		TreeSet<HtmlParameter> set = new TreeSet<>();
 		
 		Vector<String> cookies = getHeaders(HttpHeader.SET_COOKIE);
     	if (cookies != null) {

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -70,7 +70,7 @@ public class HttpSender {
     // Issue 90
     private static boolean allowUnsafeSSLRenegotiation = false;
     
-    private static List<HttpSenderListener> listeners = new ArrayList<HttpSenderListener>();
+    private static List<HttpSenderListener> listeners = new ArrayList<>();
     private static Comparator<HttpSenderListener> listenersComparator = null;;
 
     static {        

File: src/org/parosproxy/paros/security/CachedSslCertifificateServiceImpl.java
Patch:
@@ -48,7 +48,7 @@ private CachedSslCertifificateServiceImpl() {
 		delegate = SslCertificateServiceImpl.getService();
 	}
 
-	private Map<String, KeyStore> cache = new HashMap<String, KeyStore>();
+	private Map<String, KeyStore> cache = new HashMap<>();
 
 	/* (non-Javadoc)
 	 * @see org.parosproxy.paros.security.SslCertificateService#createCertForHost(java.lang.String)

File: src/org/parosproxy/paros/view/AbstractFrame.java
Patch:
@@ -87,8 +87,6 @@ public AbstractFrame() {
 	}
 	/**
 	 * This method initializes this
-	 *
-	 * @return void
 	 */
 	private void initialize() {
 		// ZAP: Rebrand
@@ -263,7 +261,7 @@ private final Point restoreWindowLocation() {
 
 	protected List<Image> loadIconImages() {
 		if (icons == null) {
-			icons = new ArrayList<Image>(4);
+			icons = new ArrayList<>(4);
 			icons.add(Toolkit.getDefaultToolkit().getImage(AbstractFrame.class.getResource("/resource/zap16x16.png")));
 			icons.add(Toolkit.getDefaultToolkit().getImage(AbstractFrame.class.getResource("/resource/zap32x32.png")));
 			icons.add(Toolkit.getDefaultToolkit().getImage(AbstractFrame.class.getResource("/resource/zap48x48.png")));

File: src/org/parosproxy/paros/view/AbstractParamDialog.java
Patch:
@@ -64,7 +64,7 @@ public class AbstractParamDialog extends AbstractDialog {
 	private static final long serialVersionUID = -5223178126156052670L;
 
 	private Object paramObject = null;
-    private Hashtable<String, AbstractParamPanel> tablePanel = new Hashtable<String, AbstractParamPanel>();
+    private Hashtable<String, AbstractParamPanel> tablePanel = new Hashtable<>();
     private int exitResult = JOptionPane.CANCEL_OPTION;
     
 	private JPanel jContentPane = null;
@@ -112,8 +112,6 @@ public AbstractParamDialog(Frame parent, boolean modal, String title, String roo
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		// enables the options dialog to be in front, but an modal dialog
@@ -370,6 +368,7 @@ protected JPanel getPanelParam() {
 		}
 		return panelParam;
 	}
+	
 	/**
 	 * @return
 	 */

File: src/org/parosproxy/paros/view/AbstractParamPanel.java
Patch:
@@ -37,8 +37,6 @@ public AbstractParamPanel() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private  void initialize() {
 	    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {

File: src/org/parosproxy/paros/view/FindDialog.java
Patch:
@@ -85,8 +85,6 @@ public FindDialog(Frame arg0, boolean arg1) throws HeadlessException {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setVisible(false);

File: src/org/parosproxy/paros/view/LicenseFrame.java
Patch:
@@ -60,8 +60,6 @@ public LicenseFrame() {
 
 	/**
 	 * This method initializes this
-	 *
-	 * @return void
 	 */
 	private void initialize() {
         this.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);

File: src/org/parosproxy/paros/view/MainFrame.java
Patch:
@@ -67,8 +67,6 @@ public MainFrame(int displayOption) {
 
 	/**
 	 * This method initializes this
-	 *
-	 * @return void
 	 */
 	private void initialize() {
 		this.setJMenuBar(getMainMenuBar());

File: src/org/parosproxy/paros/view/MainMenuBar.java
Patch:
@@ -65,8 +65,6 @@ public MainMenuBar() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.add(getMenuFile());

File: src/org/parosproxy/paros/view/MainPopupMenu.java
Patch:
@@ -53,7 +53,7 @@ public class MainPopupMenu extends JPopupMenu {
 	private List<JMenuItem> itemList = null;
 	private PopupPurgeMenu popupPurgeMenu = null;
 	// ZAP: Added support for submenus
-    Map<String, JMenuItem> superMenus = new HashMap<String, JMenuItem>();
+    Map<String, JMenuItem> superMenus = new HashMap<>();
     View view = null;
     private static Logger log = Logger.getLogger(MainPopupMenu.class);
     /**
@@ -81,8 +81,6 @@ public MainPopupMenu(List<JMenuItem> itemList, View view) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         //this.setVisible(true);

File: src/org/parosproxy/paros/view/OptionsAuthenticationTableModel.java
Patch:
@@ -44,7 +44,7 @@ public class OptionsAuthenticationTableModel extends AbstractTableModel {
 				Constant.messages.getString("options.auth.label.password"), 
 				Constant.messages.getString("options.auth.label.realm")};
     
-    private Vector<HostAuthentication> listAuth = new Vector<HostAuthentication>();
+    private Vector<HostAuthentication> listAuth = new Vector<>();
     
     /**
      * 
@@ -133,14 +133,14 @@ public Vector<HostAuthentication> getListAuth() {
             i++;
         }
         
-        Vector<HostAuthentication> newList = new Vector<HostAuthentication>(listAuth);
+        Vector<HostAuthentication> newList = new Vector<>(listAuth);
         return newList;
     }
     /**
      * @param listAuth The listAuth to set.
      */
     public void setListAuth(Vector<HostAuthentication> listAuth) {
-        this.listAuth = new Vector<HostAuthentication>(listAuth);
+        this.listAuth = new Vector<>(listAuth);
         checkAndAppendNewRow();
   	  	fireTableDataChanged();
     }

File: src/org/parosproxy/paros/view/OptionsDialog.java
Patch:
@@ -44,8 +44,6 @@ public OptionsDialog(Frame parent, boolean modal, String title)
     }
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 

File: src/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -56,8 +56,6 @@ public OutputPanel() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/parosproxy/paros/view/PopupDeleteMenu.java
Patch:
@@ -56,8 +56,6 @@ public PopupDeleteMenu() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("sites.delete.popup"));	// ZAP: i18n

File: src/org/parosproxy/paros/view/PopupPurgeMenu.java
Patch:
@@ -59,8 +59,6 @@ public PopupPurgeMenu() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("sites.purge.popup"));	// ZAP: i18n

File: src/org/parosproxy/paros/view/SessionDialog.java
Patch:
@@ -54,8 +54,6 @@ public SessionDialog(Frame parent, boolean modal, String title, String rootName)
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 	    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {

File: src/org/parosproxy/paros/view/SessionGeneralPanel.java
Patch:
@@ -55,8 +55,6 @@ public SessionGeneralPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/parosproxy/paros/view/SiteMapPanel.java
Patch:
@@ -62,7 +62,7 @@ public class SiteMapPanel extends JPanel {
 	private View view = null;
 	
 	// ZAP: Added SiteMapListenners
-	private List<SiteMapListener> listenners = new ArrayList<SiteMapListener>();
+	private List<SiteMapListener> listenners = new ArrayList<>();
 	
 	/**
 	 * This is the default constructor
@@ -81,8 +81,6 @@ private View getView() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private  void initialize() {
 		this.setLayout(new CardLayout());

File: src/org/parosproxy/paros/view/TabbedPanel.java
Patch:
@@ -48,8 +48,6 @@ public TabbedPanel() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private  void initialize() {
 		if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -75,7 +75,7 @@ public class View implements ViewDelegate {
 	private HttpPanelResponse responsePanel = null;
 	private SiteMapPanel siteMapPanel  = null;
 	private OutputPanel outputPanel = null;
-	private Vector<JMenuItem> popupList = new Vector<JMenuItem>();
+	private Vector<JMenuItem> popupList = new Vector<>();
 	
 	private static int displayOption = DISPLAY_OPTION_BOTTOM_FULL;
 

File: src/org/parosproxy/paros/view/WaitMessageDialog.java
Patch:
@@ -57,8 +57,6 @@ public WaitMessageDialog(Frame arg0, boolean arg1) throws HeadlessException {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

File: src/org/parosproxy/paros/view/WorkbenchPanel.java
Patch:
@@ -82,8 +82,6 @@ public WorkbenchPanel(int displayOption) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		GridBagConstraints consGridBagConstraints1 = new GridBagConstraints();

File: src/org/zaproxy/clientapi/core/ClientApi.java
Patch:
@@ -111,7 +111,7 @@ public void saveSession (String name) throws Exception {
 	}
 
 	public void checkAlerts (List<Alert> ignoreAlerts, List<Alert> requireAlerts) throws Exception {
-		List<Alert> reportAlerts = new ArrayList<Alert>();
+		List<Alert> reportAlerts = new ArrayList<>();
 		JSONArray response = JSONArray.fromObject(openUrlViaProxy(proxy, "http://zap/json/core/view/alerts").toString());
 		if (response != null && response.size() == 1 && response.get(0) instanceof JSONArray) {
 			JSONArray alerts = (JSONArray)response.get(0);
@@ -178,7 +178,7 @@ public void checkAlerts (List<Alert> ignoreAlerts, List<Alert> requireAlerts) th
 	}
 	
 	private List<String> openUrlViaProxy (Proxy proxy, String apiurl) throws Exception {
-		List<String> response = new ArrayList<String>();
+		List<String> response = new ArrayList<>();
 		URL url = new URL(apiurl);
 		if (debug) {
 			System.out.println("Open URL: " + apiurl);

File: src/org/zaproxy/clientapi/core/Test.java
Patch:
@@ -28,7 +28,7 @@ public static void main(String[] args) {
 		// * Work out priorities for extending api
 		// * Complete tasks - more for internal use than anything else
 
-		List<Alert> ignoreAlerts = new ArrayList<Alert>(2);
+		List<Alert> ignoreAlerts = new ArrayList<>(2);
 		ignoreAlerts.add(new Alert("Cookie set without HttpOnly flag", null, Risk.Low, Reliability.Warning, null, null));
 		ignoreAlerts.add(new Alert(null, null, Risk.Low, Reliability.Warning, null, null));
 		
@@ -39,7 +39,7 @@ public static void main(String[] args) {
 			e.printStackTrace();
 		}
 
-		List<Alert> requireAlerts = new ArrayList<Alert>(1);
+		List<Alert> requireAlerts = new ArrayList<>(1);
 		//ignoreAlerts.add(new Alert(null, null, null, null, null, null));
 		requireAlerts.add(new Alert("Not present", null, Risk.Low, Reliability.Warning, null, null));
 		try {

File: src/org/zaproxy/zap/extension/alert/AlertPanel.java
Patch:
@@ -60,7 +60,6 @@ public class AlertPanel extends AbstractPanel {
 	
 	private ViewDelegate view = null;
 	private JTree treeAlert = null;
-	private JTree treeAlert2 = null;
 	private TreePath rootTreePath = null;	
 	
 	private JScrollPane paneScroll = null;
@@ -84,8 +83,6 @@ public AlertPanel() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertDelete.java
Patch:
@@ -58,8 +58,6 @@ public PopupMenuAlertDelete(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("scanner.delete.popup"));

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertEdit.java
Patch:
@@ -59,8 +59,6 @@ public PopupMenuAlertEdit(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("scanner.edit.popup"));

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertsRefresh.java
Patch:
@@ -53,8 +53,6 @@ public PopupMenuAlertsRefresh(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("alerts.refresh.popup"));

File: src/org/zaproxy/zap/extension/alert/PopupMenuShowAlerts.java
Patch:
@@ -34,7 +34,7 @@ public class PopupMenuShowAlerts extends PopupMenuHistoryReference {
 
 	private static final long serialVersionUID = 1L;
 
-    private List<PopupMenuShowAlert> subMenus = new ArrayList<PopupMenuShowAlert>();
+    private List<PopupMenuShowAlert> subMenus = new ArrayList<>();
     
     private String parentName = null;
 
@@ -81,7 +81,7 @@ public boolean isEnabledForHistoryReference (HistoryReference href) {
 			} catch (Exception e) {
 				// Ignore
 			}
-			List<PopupMenuShowAlert> alertList = new ArrayList<PopupMenuShowAlert>(); 
+			List<PopupMenuShowAlert> alertList = new ArrayList<>(); 
 			for (Alert alert : alerts) {
 				// Just show ones for this node
 				if (alert.getMessage() != null) {

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -51,9 +51,9 @@ public AntiCsrfParam() {
     @Override
 	protected void parse(){
     	try {
-    		this.tokens = new ArrayList<String>(Arrays.asList(getConfig().getStringArray(TOKENS_KEY)));
+    		this.tokens = new ArrayList<>(Arrays.asList(getConfig().getStringArray(TOKENS_KEY)));
     	} catch (ConversionException e) {
-    		this.tokens = new ArrayList<String>(DEFAULT_TOKENS.length);
+    		this.tokens = new ArrayList<>(DEFAULT_TOKENS.length);
     	}
     	if (this.tokens.size() == 0) {
     		this.tokens.addAll(Arrays.asList(DEFAULT_TOKENS));

File: src/org/zaproxy/zap/extension/anticsrf/OptionsAntiCsrfPanel.java
Patch:
@@ -46,8 +46,6 @@ public OptionsAntiCsrfPanel() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         java.awt.GridBagConstraints gridBagConstraints2 = new GridBagConstraints();

File: src/org/zaproxy/zap/extension/anticsrf/OptionsAntiCsrfTableModel.java
Patch:
@@ -33,7 +33,7 @@ public class OptionsAntiCsrfTableModel extends AbstractTableModel {
 	private static final String[] columnNames = {
 				Constant.messages.getString("options.acsrf.label.token")};
     
-    private List<String> tokens = new ArrayList<String>();
+    private List<String> tokens = new ArrayList<>();
     
     /**
      * 
@@ -83,14 +83,14 @@ public List<String> getTokens() {
             i++;
         }
         
-        List<String> newList = new ArrayList<String>(tokens);
+        List<String> newList = new ArrayList<>(tokens);
         return newList;
     }
     /**
      * @param tokens The tokens to set.
      */
     public void setTokens(List<String> tokens) {
-		this.tokens = new ArrayList<String>();
+		this.tokens = new ArrayList<>();
     	if (tokens != null) {
     		for (String token : tokens) {
     			if ( ! this.tokens.contains(token)) {

File: src/org/zaproxy/zap/extension/api/API.java
Patch:
@@ -45,10 +45,10 @@ public enum RequestType {action, view, other};
 	private static Pattern patternParam = Pattern.compile("&", Pattern.CASE_INSENSITIVE);
 	private static final String CALL_BACK_URL = "/zapCallBackUrl/";
 
-	private Map<String, ApiImplementor> implementors = new HashMap<String, ApiImplementor>();
+	private Map<String, ApiImplementor> implementors = new HashMap<>();
 	private static API api = null;
 	private WebUI webUI = new WebUI(this);
-	private Map<String, ApiImplementor> callBacks = new HashMap<String, ApiImplementor>();
+	private Map<String, ApiImplementor> callBacks = new HashMap<>();
 	
 	private Random random = new Random();
     private Logger logger = Logger.getLogger(this.getClass());

File: src/org/zaproxy/zap/extension/api/ApiAction.java
Patch:
@@ -23,7 +23,7 @@
 public class ApiAction {
 
 	private String name = null;
-	private List<String> paramNames = new ArrayList<String>();
+	private List<String> paramNames = new ArrayList<>();
 
 	public String getName() {
 		return name;
@@ -48,7 +48,7 @@ public ApiAction(String name, String[] paramNames) {
 		super();
 		this.name = name;
 		if (paramNames != null) {
-			this.paramNames = new ArrayList<String>(paramNames.length);
+			this.paramNames = new ArrayList<>(paramNames.length);
 			for (String param : paramNames) {
 				this.paramNames.add(param);
 			}

File: src/org/zaproxy/zap/extension/api/ApiImplementor.java
Patch:
@@ -35,9 +35,9 @@
 
 public abstract class ApiImplementor {
 
-	private List<ApiAction> apiActions = new ArrayList<ApiAction>();
-	private List<ApiView> apiViews = new ArrayList<ApiView>();
-	private List<ApiOther> apiOthers = new ArrayList<ApiOther>();
+	private List<ApiAction> apiActions = new ArrayList<>();
+	private List<ApiView> apiViews = new ArrayList<>();
+	private List<ApiOther> apiOthers = new ArrayList<>();
 	
 	public List<ApiView> getApiViews() {
 		return this.apiViews;

File: src/org/zaproxy/zap/extension/api/ApiOther.java
Patch:
@@ -23,7 +23,7 @@
 public class ApiOther {
 
 	private String name = null;
-	private List<String> paramNames = new ArrayList<String>();
+	private List<String> paramNames = new ArrayList<>();
 
 	public String getName() {
 		return name;
@@ -48,7 +48,7 @@ public ApiOther(String name, String[] paramNames) {
 		super();
 		this.name = name;
 		if (paramNames != null) {
-			this.paramNames = new ArrayList<String>(paramNames.length);
+			this.paramNames = new ArrayList<>(paramNames.length);
 			for (String param : paramNames) {
 				this.paramNames.add(param);
 			}

File: src/org/zaproxy/zap/extension/api/ApiView.java
Patch:
@@ -23,7 +23,7 @@
 public class ApiView {
 
 	private String name = null;
-	private List<String> paramNames = new ArrayList<String>();
+	private List<String> paramNames = new ArrayList<>();
 
 	public String getName() {
 		return name;
@@ -48,7 +48,7 @@ public ApiView(String name, String[] paramNames) {
 		super();
 		this.name = name;
 		if (paramNames != null) {
-			this.paramNames = new ArrayList<String>(paramNames.length);
+			this.paramNames = new ArrayList<>(paramNames.length);
 			for (String param : paramNames) {
 				this.paramNames.add(param);
 			}

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -72,7 +72,7 @@ public class CoreAPI extends ApiImplementor {
 
 	public CoreAPI() {
 
-		List<String> params = new ArrayList<String>(1);
+		List<String> params = new ArrayList<>(1);
 		params.add(ACTION_SESSION_PARAM_NAME);
 		this.addApiAction(new ApiAction(ACTION_SHUTDOWN));
 		this.addApiAction(new ApiAction(ACTION_NEW_SESSION, params));
@@ -347,7 +347,7 @@ public String actionResultToXML(String name, JSON result) {
 	}
 
 	private List<Alert> getAlerts() throws ApiException {
-		List<Alert> alerts = new ArrayList<Alert>();
+		List<Alert> alerts = new ArrayList<>();
 		try {
 			TableAlert tableAlert = Model.getSingleton().getDb()
 					.getTableAlert();
@@ -380,7 +380,7 @@ private ArrayList<HttpMessage> getHttpMessages() throws ApiException,
 					.getTableHistory();
 			Vector<Integer> v = tableHistory.getHistoryList(Model
 					.getSingleton().getSession().getSessionId());
-			ArrayList<HttpMessage> mgss = new ArrayList<HttpMessage>();
+			ArrayList<HttpMessage> mgss = new ArrayList<>();
 			for (int i = 0; i < v.size(); i++) {
 				int sessionId = v.get(i).intValue();
 				RecordHistory recAlert = tableHistory.read(sessionId);

File: src/org/zaproxy/zap/extension/api/ExtensionAPI.java
Patch:
@@ -52,8 +52,6 @@ public ExtensionAPI(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionAPI");

File: src/org/zaproxy/zap/extension/api/OptionsApiPanel.java
Patch:
@@ -46,8 +46,6 @@ public OptionsApiPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -56,7 +56,7 @@ public class ActiveScanAPI extends ApiImplementor implements ScannerListener {
 	
 	public ActiveScanAPI (ExtensionActiveScan extension) {
 		this.extension = extension;
-		List<String> scanParams = new ArrayList<String>(1);
+		List<String> scanParams = new ArrayList<>(1);
 		scanParams.add(ACTION_SCANSITE_PARAM_URL);
 		this.addApiAction(new ApiAction(ACTION_SCAN, scanParams));
 		this.addApiView(new ApiView(VIEW_STATUS));

File: src/org/zaproxy/zap/extension/ascan/AllCategoryTableModel.java
Patch:
@@ -41,7 +41,7 @@ public class AllCategoryTableModel extends DefaultTableModel {
 
 	private static final long serialVersionUID = 1L;
 	private static final String[] columnNames = {"Category", "Enabled"};
-    private List<Plugin> allPlugins = new Vector<Plugin>();
+    private List<Plugin> allPlugins = new Vector<>();
     
     /**
      * @param allPlugins The allPlugins to set.

File: src/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -45,7 +45,7 @@ public class CategoryTableModel extends DefaultTableModel {
 		Constant.messages.getString("ascan.policy.table.testname"), 
 		Constant.messages.getString("ascan.policy.table.enabled") };
 	
-    private Vector<Plugin> listTestCategory = new Vector<Plugin>();
+    private Vector<Plugin> listTestCategory = new Vector<>();
     
     /**
      * 
@@ -132,7 +132,7 @@ public Object getValueAt(int row, int col) {
     
     private List<Plugin> getTestList() {
         if (listTestCategory == null) {
-            listTestCategory = new Vector<Plugin>();
+            listTestCategory = new Vector<>();
         }
         return listTestCategory;
     }

File: src/org/zaproxy/zap/extension/ascan/PolicyAllCategoryPanel.java
Patch:
@@ -53,8 +53,6 @@ public PolicyAllCategoryPanel() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         GridBagConstraints gridBagConstraints2 = new GridBagConstraints();

File: src/org/zaproxy/zap/extension/ascan/PolicyCategoryPanel.java
Patch:
@@ -53,8 +53,6 @@ public PolicyCategoryPanel(int category, List<Plugin> allTest) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         java.awt.GridBagConstraints gridBagConstraints11 = new GridBagConstraints();

File: src/org/zaproxy/zap/extension/ascan/PolicyDialog.java
Patch:
@@ -46,7 +46,7 @@ public class PolicyDialog extends AbstractParamDialog {
 	
 	private static final String[] ROOT = {};
 	private PolicyAllCategoryPanel policyAllCategoryPanel = null;
-	private List<AbstractParamPanel> additionalPanels = new ArrayList<AbstractParamPanel>();
+	private List<AbstractParamPanel> additionalPanels = new ArrayList<>();
 
 	public PolicyDialog() {
         super();

File: src/org/zaproxy/zap/extension/ascan/PopupExcludeFromProxyMenu.java
Patch:
@@ -57,8 +57,6 @@ public PopupExcludeFromProxyMenu() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("sites.exclude.proxy.popup"));

File: src/org/zaproxy/zap/extension/ascan/PopupExcludeFromScanMenu.java
Patch:
@@ -53,8 +53,6 @@ public PopupExcludeFromScanMenu() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("sites.exclude.ascan.popup"));

File: src/org/zaproxy/zap/extension/auth/PopupFlagLoggedInIndicatorMenu.java
Patch:
@@ -50,7 +50,6 @@ public PopupFlagLoggedInIndicatorMenu(ExtensionAuth ext) {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("auth.popup.login.indicate"));

File: src/org/zaproxy/zap/extension/auth/PopupFlagLoggedOutIndicatorMenu.java
Patch:
@@ -50,7 +50,6 @@ public PopupFlagLoggedOutIndicatorMenu(ExtensionAuth ext) {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("auth.popup.logout.indicate"));

File: src/org/zaproxy/zap/extension/auth/SessionAuthenticationPanel.java
Patch:
@@ -57,7 +57,6 @@ public SessionAuthenticationPanel() {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -62,8 +62,6 @@ public ExtensionAutoUpdate() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionAutoUpdate");

File: src/org/zaproxy/zap/extension/beanshell/BeanShellPanel.java
Patch:
@@ -69,8 +69,6 @@ public BeanShellPanel() {
 	
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private  void initialize() {
 		GridBagConstraints gridBagConstraints4 = new GridBagConstraints();

File: src/org/zaproxy/zap/extension/brk/BreakpointsTableModel.java
Patch:
@@ -49,10 +49,10 @@ public class BreakpointsTableModel extends AbstractTableModel {
 	public BreakpointsTableModel() {
 		super();
 
-		breakpoints = new ArrayList<BreakpointMessageInterface>(0);
-		breakpointsEnabled = new ArrayList<BreakpointMessageInterface>(0);
+		breakpoints = new ArrayList<>(0);
+		breakpointsEnabled = new ArrayList<>(0);
 		
-        mapBreakpointRow = new HashMap<BreakpointMessageInterface, Integer>();
+        mapBreakpointRow = new HashMap<>();
 		
         lastAffectedRow = -1;
 	}

File: src/org/zaproxy/zap/extension/brk/ExtensionBreak.java
Patch:
@@ -114,8 +114,8 @@ public void hook(ExtensionHook extensionHook) {
 	        extensionHook.getHookMenu().addPopupMenuItem(getPopupMenuDelete());
             extensionHook.getHookMenu().addPopupMenuItem(getPopupMenuAddBreakHistory());
             
-            mapBreakpointUiManager = new HashMap<Class<? extends BreakpointMessageInterface>, BreakpointsUiManagerInterface>();
-            mapMessageUiManager = new HashMap<Class<? extends Message>, BreakpointsUiManagerInterface>();
+            mapBreakpointUiManager = new HashMap<>();
+            mapMessageUiManager = new HashMap<>();
             
             addBreakpointsUiManager(new HttpBreakpointsUiManagerInterface(this));
             
@@ -329,7 +329,7 @@ public boolean messageReceivedFromServer(Message aMessage) {
 	 */
 	public List<BreakpointMessageInterface> getBreakpointsEnabledList() {
 		if (mode.equals(Mode.safe)) {
-			return new ArrayList<BreakpointMessageInterface>();
+			return new ArrayList<>();
 		}
 		return getBreakpointsModel().getBreakpointsEnabledList();
 	}

File: src/org/zaproxy/zap/extension/bruteforce/ExtensionBruteForce.java
Patch:
@@ -78,8 +78,6 @@ public ExtensionBruteForce(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionBruteForce");

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceDirectory.java
Patch:
@@ -56,8 +56,6 @@ public PopupMenuBruteForceDirectory(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("bruteforce.dir.popup"));

File: src/org/zaproxy/zap/extension/copy/ExtensionCopy.java
Patch:
@@ -57,8 +57,6 @@ public ExtensionCopy(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionCopy");

File: src/org/zaproxy/zap/extension/copy/PopupCopyMenu.java
Patch:
@@ -53,7 +53,6 @@ public PopupCopyMenu() {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("copy.copy.popup"));

File: src/org/zaproxy/zap/extension/encoder2/EncodeDecodeDialog.java
Patch:
@@ -78,8 +78,6 @@ public EncodeDecodeDialog() throws HeadlessException {
 
 	/**
 	 * This method initializes this
-	 *
-	 * @return void
 	 */
 	private void initialize() {
 		this.setAlwaysOnTop(false);

File: src/org/zaproxy/zap/extension/encoder2/EncodeDecodeParamPanel.java
Patch:
@@ -46,7 +46,7 @@ public class EncodeDecodeParamPanel extends AbstractParamPanel {
 	
 	private static final String[] CHARSETS = {"ISO-8859-1", "US-ASCII", "UTF-8"};
 	
-	private JComboBox comboBoxBase64Charset;
+	private JComboBox<String> comboBoxBase64Charset;
 	
 	private JCheckBox checkBoxBase64DoBreakLines;
 	
@@ -104,9 +104,9 @@ private JPanel getBase64Panel() {
 		return base64Panel;
 	}
 	
-	private JComboBox getComboBoxBase64Charset() {
+	private JComboBox<String> getComboBoxBase64Charset() {
 		if (comboBoxBase64Charset == null) {
-			comboBoxBase64Charset = new JComboBox(new DefaultComboBoxModel(CHARSETS));
+			comboBoxBase64Charset = new JComboBox<>(new DefaultComboBoxModel<>(CHARSETS));
 		}
 		return comboBoxBase64Charset;
 	}

File: src/org/zaproxy/zap/extension/encoder2/ExtensionEncoder2.java
Patch:
@@ -66,8 +66,6 @@ public ExtensionEncoder2(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionEncode2");

File: src/org/zaproxy/zap/extension/encoder2/PopupEncoder2Menu.java
Patch:
@@ -52,7 +52,6 @@ public PopupEncoder2Menu() {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("enc2.tools.menu.encdec"));

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionPanel.java
Patch:
@@ -69,8 +69,6 @@ public OptionsExtensionPanel(ExtensionExtension ext) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         GridBagConstraints gridBagConstraints1 = new GridBagConstraints();

File: src/org/zaproxy/zap/extension/fuzz/AbstractFuzzProcess.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractFuzzProcess implements FuzzProcess {
     private String fuzz;
     
     
-    private List<FuzzerListener> listeners = new ArrayList<FuzzerListener>(1);
+    private List<FuzzerListener> listeners = new ArrayList<>(1);
     
     @Override
     public final void setFuzz(String fuzz) {

File: src/org/zaproxy/zap/extension/fuzz/DirCategory.java
Patch:
@@ -22,7 +22,7 @@
 
 public class DirCategory {
 	private String name;
-	private List<FileFuzzer> fuzzers = new ArrayList<FileFuzzer>();
+	private List<FileFuzzer> fuzzers = new ArrayList<>();
 	
 	public List<FileFuzzer> getFuzzers() {
 		return fuzzers;

File: src/org/zaproxy/zap/extension/fuzz/FileFuzzer.java
Patch:
@@ -35,7 +35,7 @@ public class FileFuzzer {
 
 	private File file = null;
 	private int length = -1;
-	private List<String> fuzzStrs = new ArrayList<String>();
+	private List<String> fuzzStrs = new ArrayList<>();
 	private Iterator<String> iter = null;
     private static Logger log = Logger.getLogger(FileFuzzer.class);
 

File: src/org/zaproxy/zap/extension/fuzz/FuzzerPanel.java
Patch:
@@ -78,8 +78,6 @@ public FuzzerPanel(ExtensionFuzz extension) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private  void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/extension/fuzz/FuzzerThread.java
Patch:
@@ -31,7 +31,7 @@ public class FuzzerThread implements Runnable {
 
     private static final Logger log = Logger.getLogger(FuzzerThread.class);
 	
-	private List<FuzzerListener> listenerList = new ArrayList<FuzzerListener>();
+	private List<FuzzerListener> listenerList = new ArrayList<>();
 
 	private Fuzzer[] fuzzers;
 	private FileFuzzer[] customFuzzers;

File: src/org/zaproxy/zap/extension/fuzz/PopupFuzzMenu.java
Patch:
@@ -56,8 +56,6 @@ public PopupFuzzMenu(ExtensionFuzz extension) {
 	
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("fuzz.tools.menu.fuzz"));

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzDialog.java
Patch:
@@ -81,6 +81,7 @@ public HttpFuzzDialog(HttpFuzzerHandler handler, ExtensionFuzz extension, Fuzzab
         }
     }
     
+    @Override
     protected int addCustomComponents(JPanel panel, int row) {
         int currentRow = row;
         if (incAcsrfToken) {

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzProcess.java
Patch:
@@ -77,7 +77,7 @@ public FuzzResult fuzz(String fuzz) {
                 tokenValue = extAntiCSRF.getTokenValue(tokenMsg, acsrfToken.getName());
 
                 if (showTokenRequests) {
-                    List<HttpMessage> tokenRequests = new ArrayList<HttpMessage>();
+                    List<HttpMessage> tokenRequests = new ArrayList<>();
                     tokenRequests.add(tokenMsg);
                     fuzzResult.setTokenRequestMessages(tokenRequests);
                 }

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzTableModel.java
Patch:
@@ -48,7 +48,7 @@ public class HttpFuzzTableModel extends AbstractTableModel {
     
     private static final int COLUMN_COUNT = COLUMN_NAMES.length;
     
-    private List<Pair<HttpFuzzerContentPanel.State, HistoryReference>> data = new LinkedList<Pair<HttpFuzzerContentPanel.State, HistoryReference>>();
+    private List<Pair<HttpFuzzerContentPanel.State, HistoryReference>> data = new LinkedList<>();
     
     @Override
     public int getColumnCount() {
@@ -110,7 +110,7 @@ public Object getValueAt(int row, int column) {
             }
             break;
         case 6:
-            Pair<String, ImageIcon> icons = new Pair<String, ImageIcon>();
+            Pair<String, ImageIcon> icons = new Pair<>();
             HttpFuzzerContentPanel.State state = result.first;
 
             switch (state) {
@@ -183,7 +183,7 @@ public HistoryReference getHistoryReferenceAtRow(int row) {
 
     public void addHistoryReference(HttpFuzzerContentPanel.State state, HistoryReference historyReference) {
         final int row = data.size();
-        data.add(new Pair<HttpFuzzerContentPanel.State, HistoryReference>(state, historyReference));
+        data.add(new Pair<>(state, historyReference));
         fireTableRowsInserted(row, row);
     }
 

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzerContentPanel.java
Patch:
@@ -59,7 +59,7 @@ public class HttpFuzzerContentPanel implements FuzzerContentPanel {
      * the instance variable {@code resultsModel}. Used to delete the
      * {@code HistoryReference}s from the database when no longer needed.
      */
-    private List<Integer> historyReferencesToDelete = new ArrayList<Integer>();
+    private List<Integer> historyReferencesToDelete = new ArrayList<>();
 
     private boolean showTokenRequests;
     
@@ -151,7 +151,7 @@ private void resetFuzzResultTable() {
             }
         }
         resultsModel = new HttpFuzzTableModel();
-        historyReferencesToDelete = new ArrayList<Integer>();
+        historyReferencesToDelete = new ArrayList<>();
         getFuzzResultTable().setModel(resultsModel);
     }
     
@@ -221,7 +221,7 @@ private void displayMessage(HttpMessage msg) {
     }
 
     public List<SearchResult> searchResults(Pattern pattern, boolean inverse) {
-        List<SearchResult> results = new ArrayList<SearchResult>();
+        List<SearchResult> results = new ArrayList<>();
         
         if (resultsModel == null) {
             return results;

File: src/org/zaproxy/zap/extension/fuzz/impl/http/HttpFuzzerHandler.java
Patch:
@@ -68,6 +68,7 @@ private FuzzerContentPanel getContentPanel() {
         return fuzzerPanel;
     }
     
+    @Override
     public List<SearchResult> searchResults(Pattern pattern, boolean inverse) {
         return fuzzerPanel.searchResults(pattern, inverse);
     }

File: src/org/zaproxy/zap/extension/help/ExtensionHelp.java
Patch:
@@ -69,8 +69,6 @@ public ExtensionHelp(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionHelp");

File: src/org/zaproxy/zap/extension/history/AlertAddDialog.java
Patch:
@@ -113,8 +113,6 @@ public AlertAddDialog(Frame arg0, boolean arg1) throws HeadlessException {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setTitle(Constant.messages.getString("alert.add.title"));

File: src/org/zaproxy/zap/extension/history/NotesAddDialog.java
Patch:
@@ -69,8 +69,6 @@ public NotesAddDialog(Frame arg0, boolean arg1) throws HeadlessException {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setTitle(Constant.messages.getString("history.addnote.title"));

File: src/org/zaproxy/zap/extension/history/PopupMenuExportURLs.java
Patch:
@@ -70,8 +70,6 @@ public PopupMenuExportURLs(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("exportUrls.popup"));

File: src/org/zaproxy/zap/extension/history/PopupMenuNote.java
Patch:
@@ -59,8 +59,6 @@ public PopupMenuNote(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("history.note.popup"));
@@ -89,7 +87,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
     public boolean isEnableForComponent(Component invoker) {
         if (invoker.getName() != null && invoker.getName().equals("ListLog")) {
             try {
-                JList list = (JList) invoker;
+                JList<?> list = (JList<?>) invoker;
                 if (list.getSelectedIndex() >= 0) {
                     this.setEnabled(true);
                 } else {

File: src/org/zaproxy/zap/extension/history/PopupMenuTag.java
Patch:
@@ -59,8 +59,6 @@ public PopupMenuTag(String label) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("history.tags.popup"));
@@ -90,7 +88,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
     public boolean isEnableForComponent(Component invoker) {
         if (invoker.getName() != null && invoker.getName().equals("ListLog")) {
             try {
-                JList list = (JList) invoker;
+                JList<?> list = (JList<?>) invoker;
                 if (list.getSelectedIndex() >= 0) {
                     this.setEnabled(true);
                 } else {

File: src/org/zaproxy/zap/extension/httppanel/HttpPanel.java
Patch:
@@ -75,8 +75,8 @@ public enum OptionsLocation {BEGIN, AFTER_COMPONENTS, END};
     private String componentsConfigurationKey;
     
     private SwitchComponentItemListener switchComponentItemListener;
-    private Hashtable<String, HttpPanelComponentInterface> components = new Hashtable<String, HttpPanelComponentInterface>();
-    private List<HttpPanelComponentInterface> enabledComponents = new ArrayList<HttpPanelComponentInterface>();
+    private Hashtable<String, HttpPanelComponentInterface> components = new Hashtable<>();
+    private List<HttpPanelComponentInterface> enabledComponents = new ArrayList<>();
     private HttpPanelComponentInterface currentComponent;
 
     private JPanel noComponentsPanel;

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelRequest.java
Patch:
@@ -36,7 +36,7 @@
 public class HttpPanelRequest extends HttpPanel {
 	private static final long serialVersionUID = 1L;
 	
-	private JComboBox comboChangeMethod;
+	private JComboBox<String> comboChangeMethod;
 	
 	private static final String REQUEST_KEY = "request.";
 	
@@ -71,7 +71,7 @@ public void setEnableViewSelect(boolean enableViewSelect) {
 	//	private JComboBox getComboChangeMethod() {
 	private void initComboChangeMethod() {
 		if (comboChangeMethod == null) {
-			comboChangeMethod = new JComboBox();
+			comboChangeMethod = new JComboBox<>();
 			comboChangeMethod.setEditable(false);
 			comboChangeMethod.addItem(Constant.messages.getString("manReq.pullDown.method"));
 			comboChangeMethod.addItem(HttpRequestHeader.CONNECT);

File: src/org/zaproxy/zap/extension/httppanel/component/split/request/HttpRequestHeaderPanelTextView.java
Patch:
@@ -49,6 +49,7 @@ private static class HttpRequestHeaderPanelTextArea extends FuzzableHttpRequestP
 
 		private static final long serialVersionUID = 985537589818833350L;
 		
+		@Override
 		public FuzzableMessage getFuzzableMessage() {
 			int start = getSelectionStart();
 			try {

File: src/org/zaproxy/zap/extension/httppanel/view/DefaultHttpPanelViewModel.java
Patch:
@@ -30,7 +30,7 @@ public class DefaultHttpPanelViewModel implements HttpPanelViewModel {
 	protected List<HttpPanelViewModelListener> listeners;
 	
 	public DefaultHttpPanelViewModel() {
-		listeners = new ArrayList<HttpPanelViewModelListener>(2);
+		listeners = new ArrayList<>(2);
 		message = null;
 	}
 	

File: src/org/zaproxy/zap/extension/httppanel/view/hex/HttpPanelHexModel.java
Patch:
@@ -31,7 +31,7 @@ public class HttpPanelHexModel extends AbstractTableModel {
 	private final static int COLUMN_COUNT = 34;
 	
 	private static final long serialVersionUID = 1L;
-    private List<String[]> listRow = new ArrayList<String[]>();
+    private List<String[]> listRow = new ArrayList<>();
     private boolean editable = false;
     private boolean changed = false;
     

File: src/org/zaproxy/zap/extension/httppanel/view/paramtable/ExtensionHttpPanelRequestFormTableView.java
Patch:
@@ -50,8 +50,8 @@ public HttpPanelFormParamTableView(HttpPanelViewModel model, HttpPanelParamTable
 		}
 
 		@Override
-		public JComboBox getComboBoxTypes() {
-			JComboBox comboBoxTypes = new JComboBox();
+		public JComboBox<HtmlParameter.Type> getComboBoxTypes() {
+			JComboBox<HtmlParameter.Type> comboBoxTypes = new JComboBox<>();
 			
 			comboBoxTypes.addItem(HtmlParameter.Type.form);
 			
@@ -70,7 +70,7 @@ protected void loadAllParams() {
 
 		@Override
 		public void saveAllParams() {
-			TreeSet<HtmlParameter> form = new TreeSet<HtmlParameter>();
+			TreeSet<HtmlParameter> form = new TreeSet<>();
 			
 			Iterator<HtmlParameter> it = allParams.iterator();
 			while (it.hasNext()) {

File: src/org/zaproxy/zap/extension/httppanel/view/paramtable/HttpPanelParamTableModel.java
Patch:
@@ -48,7 +48,7 @@ public abstract class HttpPanelParamTableModel extends AbstractTableModel {
 	private boolean hasChanged;
 	
 	public HttpPanelParamTableModel() {
-		allParams = new LinkedList<HtmlParameter>();
+		allParams = new LinkedList<>();
 	}
 	
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/view/posttable/RequestPostTableModel.java
Patch:
@@ -40,7 +40,7 @@ public class RequestPostTableModel extends AbstractTableModel {
     	Constant.messages.getString("http.panel.view.table.paramName"),
     	Constant.messages.getString("http.panel.view.table.paramValue")};	// ZAP: i18n
     private static final Pattern pSeparator	= Pattern.compile("([^=&]+)[=]([^=&]*)"); 
-    private Vector<String[]> listPair = new Vector<String[]>();
+    private Vector<String[]> listPair = new Vector<>();
     private boolean editable = true;
     private boolean isChanged = false;
     

File: src/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/HttpPanelSyntaxHighlightTextArea.java
Patch:
@@ -96,7 +96,7 @@ public HttpPanelSyntaxHighlightTextArea() {
 		((RSyntaxDocument)getDocument()).setTokenMakerFactory(getTokenMakerFactory());
 		setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_NONE);
 		
-		syntaxStyles = new Vector<SyntaxStyle>();
+		syntaxStyles = new Vector<>();
 		addSyntaxStyle(PLAIN_SYNTAX_LABEL, SyntaxConstants.SYNTAX_STYLE_NONE);
 		
 		if (syntaxMenu == null) {
@@ -353,7 +353,7 @@ protected static class CustomTokenMakerFactory extends AbstractTokenMakerFactory
 		
 		@Override
 		protected Map<String, String> createTokenMakerKeyToClassNameMap() {
-			HashMap<String, String> map = new HashMap<String, String>();
+			HashMap<String, String> map = new HashMap<>();
 
 			String pkg = "org.fife.ui.rsyntaxtextarea.modes.";
 			map.put(SYNTAX_STYLE_NONE, pkg + "PlainTextTokenMaker");

File: src/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/menus/SyntaxMenu.java
Patch:
@@ -56,7 +56,7 @@ public SyntaxMenu() {
 		super(MENU_LABEL);
 
 		syntaxStylesButtonGroup = new ButtonGroup();
-		syntaxOptions = new HashMap<String, JRadioButtonMenuItem>();
+		syntaxOptions = new HashMap<>();
 
 		autoDetectSyntax = new JCheckBoxMenuItem(new ChangeAutoDetectSyntaxAction(AUTO_DETECT_SYNTAX_OPTION));
 		add(autoDetectSyntax);

File: src/org/zaproxy/zap/extension/httpsessions/HttpSession.java
Patch:
@@ -56,7 +56,7 @@ public HttpSession(String name) {
 		this.active = false;
 		this.valid = true;
 		this.messagesMatched = 0;
-		this.tokenValues = new HashMap<String, String>(1);
+		this.tokenValues = new HashMap<>(1);
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsParam.java
Patch:
@@ -67,9 +67,9 @@ public HttpSessionsParam() {
 	protected void parse() {
 		// Parse the default token names
 		try {
-			this.defaultTokens = new ArrayList<String>(Arrays.asList(getConfig().getStringArray(DEFAULT_TOKENS_KEY)));
+			this.defaultTokens = new ArrayList<>(Arrays.asList(getConfig().getStringArray(DEFAULT_TOKENS_KEY)));
 		} catch (ConversionException e) {
-			this.defaultTokens = new ArrayList<String>(DEFAULT_TOKENS.length);
+			this.defaultTokens = new ArrayList<>(DEFAULT_TOKENS.length);
 			log.error("Error while parsing config file: " + e.getMessage(), e);
 		}
 		if (this.defaultTokens.size() == 0) {

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsTableModel.java
Patch:
@@ -84,6 +84,7 @@ public int getRowCount() {
 		return sessions.size();
 	}
 
+	@Override
 	public Object getValueAt(int row, int col) {
 		// Check if the row is valid
 		if (row >= sessions.size()) {

File: src/org/zaproxy/zap/extension/httpsessions/OptionsHttpSessionsTableModel.java
Patch:
@@ -40,7 +40,7 @@ public class OptionsHttpSessionsTableModel extends AbstractTableModel {
 	private static final String[] columnNames = { Constant.messages.getString("httpsessions.options.table.token") };
 
 	/** The token names. */
-	private List<String> tokenNames = new ArrayList<String>();
+	private List<String> tokenNames = new ArrayList<>();
 
 	/**
 	 * Instantiates a new options http sessions table model.
@@ -108,7 +108,7 @@ public List<String> getTokens() {
 		}
 
 		// Make a copy of the internal list
-		List<String> newList = new ArrayList<String>(tokenNames);
+		List<String> newList = new ArrayList<>(tokenNames);
 		return newList;
 	}
 
@@ -118,7 +118,7 @@ public List<String> getTokens() {
 	 * @param tokens the new tokens
 	 */
 	public void setTokens(List<String> tokens) {
-		this.tokenNames = new ArrayList<String>();
+		this.tokenNames = new ArrayList<>();
 		if (tokens != null) {
 			for (String token : tokens) {
 				if (!this.tokenNames.contains(token)) {

File: src/org/zaproxy/zap/extension/invoke/ExtensionInvoke.java
Patch:
@@ -34,7 +34,7 @@
 
 public class ExtensionInvoke extends ExtensionAdaptor {
 
-	private List <PopupMenuInvoke> invokeMenus = new ArrayList<PopupMenuInvoke>();
+	private List <PopupMenuInvoke> invokeMenus = new ArrayList<>();
 	private PopupMenuInvokeConfigure confPopup = null;
 	private OptionsInvokePanel optionsInvokePanel;
 	
@@ -55,8 +55,6 @@ public ExtensionInvoke(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionInvoke");

File: src/org/zaproxy/zap/extension/invoke/InvokeAppWorker.java
Patch:
@@ -90,7 +90,7 @@ protected Void doInBackground() throws Exception {
 			cookie = cookies.get(0);
 		}
 
-		List<String> cmd = new ArrayList<String>();
+		List<String> cmd = new ArrayList<>();
 		cmd.add(command);
 		if (parameters != null) {
 			// Replace all of the tags 

File: src/org/zaproxy/zap/extension/invoke/InvokeParam.java
Patch:
@@ -35,7 +35,7 @@ public class InvokeParam extends AbstractParam {
     private static final String INVOKE_NOTE = "note";
     private static final String INVOKE_DIRECTORY = "directory";
 
-	private List<InvokableApp> listInvoke = new ArrayList<InvokableApp>();
+	private List<InvokableApp> listInvoke = new ArrayList<>();
 	
 	public InvokeParam() {
 	}

File: src/org/zaproxy/zap/extension/invoke/OptionsInvokePanel.java
Patch:
@@ -74,8 +74,6 @@ public OptionsInvokePanel(ExtensionInvoke extension) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
 

File: src/org/zaproxy/zap/extension/invoke/OptionsInvokeTableModel.java
Patch:
@@ -40,7 +40,7 @@ public class OptionsInvokeTableModel extends AbstractTableModel {
 		Constant.messages.getString("invoke.options.label.name"), 
 		Constant.messages.getString("invoke.options.label.command")};
     
-    private List<InvokableApp> listApps = new ArrayList<InvokableApp>();
+    private List<InvokableApp> listApps = new ArrayList<>();
     
     /**
      * 
@@ -82,12 +82,12 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
      * @param apps The listAuth to set.
      */
     public void setListInvokableApps(List<InvokableApp> apps) {
-        this.listApps = new ArrayList<InvokableApp>(apps);
+        this.listApps = new ArrayList<>(apps);
   	  	fireTableDataChanged();
     }
     
     public List<InvokableApp> getListInvokableApps() {
-        return new ArrayList<InvokableApp>(listApps);
+        return new ArrayList<>(listApps);
     }
 
     public void addInvokableApp(InvokableApp app) {

File: src/org/zaproxy/zap/extension/invoke/PopupMenuInvokeConfigure.java
Patch:
@@ -59,8 +59,6 @@ public boolean precedeWithSeparator() {
 
     /**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("invoke.config.popup"));

File: src/org/zaproxy/zap/extension/log4j/ExtensionLog4j.java
Patch:
@@ -57,8 +57,6 @@ public ExtensionLog4j(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionLog4j");

File: src/org/zaproxy/zap/extension/option/OptionsCheckForUpdatesPanel.java
Patch:
@@ -47,8 +47,6 @@ public OptionsCheckForUpdatesPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/extension/params/HtmlParameterStats.java
Patch:
@@ -33,8 +33,8 @@ public class HtmlParameterStats implements Comparable<HtmlParameterStats> {
 	private String name;
 	private HtmlParameter.Type type;
 	private int timesUsed = 0;
-	private Set<String> flags = new HashSet<String>();
-	private Set<String> values = new HashSet<String>();
+	private Set<String> flags = new HashSet<>();
+	private Set<String> values = new HashSet<>();
 	
 	public HtmlParameterStats(String site, String name, HtmlParameter.Type type, String value, Set<String> flags) {
 		this.site = site;

File: src/org/zaproxy/zap/extension/params/ParamsAPI.java
Patch:
@@ -42,7 +42,7 @@ public class ParamsAPI extends ApiImplementor {
 	
 	public ParamsAPI (ExtensionParams extension) {
 		this.extension = extension;
-		List<String> paramViewParams = new ArrayList<String>(1);
+		List<String> paramViewParams = new ArrayList<>(1);
 		paramViewParams.add(VIEW_PARAMS_PARAM_SITE);
 		this.addApiView(new ApiView(VIEW_PARAMS, paramViewParams));
 

File: src/org/zaproxy/zap/extension/params/ParamsTableModel.java
Patch:
@@ -39,7 +39,7 @@ public class ParamsTableModel extends AbstractTableModel {
 	
 	public ParamsTableModel() {
 		super();
-		columnNames = new Vector<String>(COLUMN_COUNT);
+		columnNames = new Vector<>(COLUMN_COUNT);
 		columnNames.add(Constant.messages.getString("params.table.header.type"));
 		columnNames.add(Constant.messages.getString("params.table.header.name"));
 		columnNames.add(Constant.messages.getString("params.table.header.used"));

File: src/org/zaproxy/zap/extension/params/PopupMenuAddAntiCSRF.java
Patch:
@@ -58,8 +58,6 @@ public void setExtension(ExtensionParams extension) {
 
     /**
 	 * This method initialises this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("params.anticrsf.add.popup"));

File: src/org/zaproxy/zap/extension/params/PopupMenuAddSession.java
Patch:
@@ -58,8 +58,6 @@ public void setExtension(ExtensionParams extension) {
 
     /**
 	 * This method initialises this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("params.session.add.popup"));

File: src/org/zaproxy/zap/extension/params/PopupMenuParamSearch.java
Patch:
@@ -57,8 +57,6 @@ public void setExtension(ExtensionParams extension) {
 
     /**
 	 * This method initialises this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("params.search.popup"));

File: src/org/zaproxy/zap/extension/params/PopupMenuRemoveAntiCSRF.java
Patch:
@@ -58,8 +58,6 @@ public void setExtension(ExtensionParams extension) {
 
     /**
 	 * This method initialises this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("params.anticrsf.remove.popup"));

File: src/org/zaproxy/zap/extension/params/PopupMenuRemoveSession.java
Patch:
@@ -58,8 +58,6 @@ public void setExtension(ExtensionParams extension) {
 
     /**
 	 * This method initialises this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("params.session.remove.popup"));

File: src/org/zaproxy/zap/extension/portscan/OptionsPortScanPanel.java
Patch:
@@ -54,8 +54,6 @@ public OptionsPortScanPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
Patch:
@@ -56,7 +56,7 @@ public class ExtensionPassiveScan extends ExtensionAdaptor implements SessionCha
 	private static final List<Class<?>> DEPENDENCIES;
 	
 	static {
-		List<Class<?>> dep = new ArrayList<Class<?>>();
+		List<Class<?>> dep = new ArrayList<>();
 		dep.add(ExtensionAlert.class);
 		
 		DEPENDENCIES = Collections.unmodifiableList(dep);

File: src/org/zaproxy/zap/extension/pscan/OptionsPassiveScanTableModel.java
Patch:
@@ -42,7 +42,7 @@ public class OptionsPassiveScanTableModel extends AbstractTableModel {
 		Constant.messages.getString("pscan.options.table.type"),
 		Constant.messages.getString("pscan.options.table.enabled")};
     
-	private List <RegexAutoTagScanner> defns = new ArrayList<RegexAutoTagScanner>();
+	private List <RegexAutoTagScanner> defns = new ArrayList<>();
     //private Vector listAuth = new Vector();
     
     /**
@@ -100,7 +100,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
      * @param defns
      */
     public void setScanDefns(List <RegexAutoTagScanner> defns) {
-        this.defns = new ArrayList<RegexAutoTagScanner>(defns);
+        this.defns = new ArrayList<>(defns);
   	  	fireTableDataChanged();
     }
     

File: src/org/zaproxy/zap/extension/pscan/PassiveScannerList.java
Patch:
@@ -7,8 +7,8 @@
 
 public class PassiveScannerList {
 
-	private List<PassiveScanner> passiveScanners = new ArrayList<PassiveScanner>();
-	private Set<String> scannerNames = new HashSet<String>();
+	private List<PassiveScanner> passiveScanners = new ArrayList<>();
+	private Set<String> scannerNames = new HashSet<>();
 
 	protected void add (PassiveScanner scanner) {
 		if (scannerNames.contains(scanner.getName())) {

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanPanel.java
Patch:
@@ -51,8 +51,6 @@ public PolicyPassiveScanPanel() {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         java.awt.GridBagConstraints gridBagConstraints11 = new GridBagConstraints();

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -39,7 +39,7 @@ public class PolicyPassiveScanTableModel extends DefaultTableModel {
 									Constant.messages.getString("ascan.policy.table.testname"), 
 									Constant.messages.getString("ascan.policy.table.enabled")};
 
-    private List<PluginPassiveScanner> listScanners = new ArrayList<PluginPassiveScanner>();
+    private List<PluginPassiveScanner> listScanners = new ArrayList<>();
     
     /**
      * 

File: src/org/zaproxy/zap/extension/pscan/scanner/InformationDisclosureSuspiciousComments.java
Patch:
@@ -120,7 +120,7 @@ private void raiseAlert(HttpMessage msg, int id, String detail) {
 	
 	private List<Pattern> getPatterns() {
 		if (patterns == null) {
-			patterns = new ArrayList<Pattern>();
+			patterns = new ArrayList<>();
 			String line = null;
 			File f = new File(databaseErrorFile);
 			BufferedReader reader = null;

File: src/org/zaproxy/zap/extension/search/ExtensionSearch.java
Patch:
@@ -72,8 +72,6 @@ public ExtensionSearch(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName(NAME);

File: src/org/zaproxy/zap/extension/search/SearchResult.java
Patch:
@@ -42,7 +42,7 @@ public SearchResult(ExtensionSearch.Type type, String regEx, String stringFound,
 		this.type = type;
 		this.regEx = regEx;
 		this.stringFound = stringFound;
-		matches = new ArrayList<SearchMatch>(1);
+		matches = new ArrayList<>(1);
 		matches.add(sm);
 	}
 	
@@ -123,7 +123,7 @@ public SearchMatch getPrevMatch() {
 	}
 
 	private void enumerateMatches(HttpPanel reqPanel, HttpPanel resPanel) {
-		matches = new ArrayList<SearchMatch>();
+		matches = new ArrayList<>();
 
 		Pattern p = Pattern.compile(regEx, Pattern.MULTILINE| Pattern.CASE_INSENSITIVE);
 		

File: src/org/zaproxy/zap/extension/siterefresh/ExtensionSitesRefresh.java
Patch:
@@ -49,8 +49,6 @@ public ExtensionSitesRefresh(String name) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setName("ExtensionSitesRefresh");

File: src/org/zaproxy/zap/extension/siterefresh/PopupMenuSitesRefresh.java
Patch:
@@ -48,8 +48,6 @@ public PopupMenuSitesRefresh(String label) {
 
     /**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("siterefresh.popop"));

File: src/org/zaproxy/zap/extension/spider/SpiderAPI.java
Patch:
@@ -88,9 +88,9 @@ public class SpiderAPI extends ApiImplementor implements ScanListenner, SpiderLi
 	 */
 	public SpiderAPI(ExtensionSpider extension) {
 		this.extension = extension;
-		this.foundURIs = new ArrayList<String>();
+		this.foundURIs = new ArrayList<>();
 		// Register the actions
-		List<String> scanParams = new ArrayList<String>(1);
+		List<String> scanParams = new ArrayList<>(1);
 		scanParams.add(ACTION_SCANSITE_PARAM_URL);
 		this.addApiAction(new ApiAction(ACTION_START_SCAN, scanParams));
 		this.addApiAction(new ApiAction(ACTION_STOP_SCAN));

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -92,6 +92,7 @@ protected ScanThread newScanThread(String site, AbstractParam params) {
 	/* (non-Javadoc)
 	 * 
 	 * @see org.zaproxy.zap.view.ScanPanel#getSiteNode(java.lang.String) */
+	@Override
 	protected SiteNode getSiteNode(String site) {
 		return super.getSiteNode(site);
 	}

File: src/org/zaproxy/zap/extension/spider/SpiderPanelTableModel.java
Patch:
@@ -62,7 +62,7 @@ public class SpiderPanelTableModel extends AbstractTableModel {
 	public SpiderPanelTableModel() {
 		super();
 
-		scanResults = new ArrayList<SpiderScanResult>();
+		scanResults = new ArrayList<>();
 	}
 
 	@Override
@@ -80,6 +80,7 @@ public int getRowCount() {
 		return scanResults.size();
 	}
 
+	@Override
 	public Object getValueAt(int row, int col) {
 		// Get the ScanResult and the required field
 		SpiderScanResult result = scanResults.get(row);

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -92,7 +92,7 @@ public SpiderThread(ExtensionSpider extension, String site, ScanListenner listen
 		log.debug("Initializing spider thread for site: " + site);
 		this.extension = extension;
 		this.site = site;
-		this.pendingSpiderListeners = new LinkedList<SpiderListener>();
+		this.pendingSpiderListeners = new LinkedList<>();
 		this.resultsModel = new SpiderPanelTableModel();
 
 	}
@@ -150,7 +150,7 @@ public boolean isRunning() {
 	 * 
 	 * @see org.zaproxy.zap.model.GenericScanner#getList() */
 	@Override
-	public DefaultListModel getList() {
+	public DefaultListModel<?> getList() {
 		// Not used, as the SpiderPanel is relying on a TableModel
 		return null;
 	}

File: src/org/zaproxy/zap/extension/websocket/WebSocketProxy.java
Patch:
@@ -204,8 +204,8 @@ public WebSocketProxy(Socket localSocket, Socket remoteSocket) {
 		this.localSocket = localSocket;
 		this.remoteSocket = remoteSocket;
 		
-		unfinishedMessages = new HashMap<InputStream, WebSocketMessage>();
-		observerList = new Vector<WebSocketObserver>();
+		unfinishedMessages = new HashMap<>();
+		observerList = new Vector<>();
 		
 		// create unique identifier for this WebSocket connection
 		channelId = channelIdGenerator.incrementAndGet();

File: src/org/zaproxy/zap/extension/websocket/WebSocketProxyV13.java
Patch:
@@ -243,7 +243,7 @@ public void setRsv(int rsv) {
 //			}
 		}
 		
-		private ArrayList<WebSocketFrameV13> receivedFrames = new ArrayList<WebSocketFrameV13>();
+		private ArrayList<WebSocketFrameV13> receivedFrames = new ArrayList<>();
 		
 		/**
 		 * Temporary buffer that will be added to

File: src/org/zaproxy/zap/extension/websocket/fuzz/WebSocketFuzzMessagesViewModel.java
Patch:
@@ -54,7 +54,7 @@ public class WebSocketFuzzMessagesViewModel extends WebSocketMessagesViewModel {
 	/**
 	 * This list holds all erroneous messages for this view model.
 	 */
-	private List<WebSocketMessageDTO> erroneousMessages = new ArrayList<WebSocketMessageDTO>();
+	private List<WebSocketMessageDTO> erroneousMessages = new ArrayList<>();
 
 	private Integer currentFuzzId = Integer.valueOf(-1);
 
@@ -147,7 +147,7 @@ protected WebSocketMessageDTO getCriterionMessage() {
 
 	@Override
 	protected List<Integer> getCriterionOpcodes() {
-		return new ArrayList<Integer>();
+		return new ArrayList<>(0);
 	}
 
 	/**
@@ -212,7 +212,7 @@ protected List<WebSocketMessageDTO> loadPage(int offset, int length) {
 		
 			if (offset >= sqlRowCount) {
 				offset = offset - (sqlRowCount - 1);
-				return new ArrayList<WebSocketMessageDTO>(erroneousMessages.subList(offset, Math.min(erroneousRowCount, offset + length)));
+				return new ArrayList<>(erroneousMessages.subList(offset, Math.min(erroneousRowCount, offset + length)));
 			} else if (offset + length >= sqlRowCount) {
 				int sqlLength = sqlRowCount - offset;
 				List<WebSocketMessageDTO> page = super.loadPage(offset, sqlLength);

File: src/org/zaproxy/zap/extension/websocket/fuzz/WebSocketFuzzerHandler.java
Patch:
@@ -50,7 +50,7 @@ public class WebSocketFuzzerHandler implements FuzzerHandler, WebSocketObserver
     
     public WebSocketFuzzerHandler(TableWebSocket webSocketTable) {
         super();
-        wsProxies = new HashMap<Integer, WebSocketProxy>();
+        wsProxies = new HashMap<>();
         table = webSocketTable;
 		viewModel = new WebSocketFuzzMessagesViewModel(table);
     }

File: src/org/zaproxy/zap/extension/websocket/ui/ChannelSortedListModel.java
Patch:
@@ -21,7 +21,7 @@
 import org.zaproxy.zap.extension.websocket.WebSocketChannelDTO;
 import org.zaproxy.zap.utils.SortedListModel;
 
-public class ChannelSortedListModel extends SortedListModel {
+public class ChannelSortedListModel extends SortedListModel<WebSocketChannelDTO> {
 
 	private static final long serialVersionUID = 83057590716441165L;
 
@@ -73,7 +73,7 @@ public void updateElement(WebSocketChannelDTO channel) {
 		synchronized (this) {
 			final int index = indexOf(channel);
 			if (index != -1) {
-				WebSocketChannelDTO old = (WebSocketChannelDTO) getElementAt(index);
+				WebSocketChannelDTO old = getElementAt(index);
 				old.endTimestamp = channel.endTimestamp;
 
 				fireContentsChanged(this, index, index);

File: src/org/zaproxy/zap/extension/websocket/ui/ComboBoxChannelModel.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.zaproxy.zap.extension.websocket.WebSocketChannelDTO;
 
-public class ComboBoxChannelModel implements ComboBoxModel {
+public class ComboBoxChannelModel implements ComboBoxModel<WebSocketChannelDTO> {
 
     private ChannelSortedListModel delegate;
 
@@ -41,7 +41,7 @@ public void setSelectedChannelId(Integer channelId) {
         }
 
         for (int i = 0; i < getSize(); i++) {
-            WebSocketChannelDTO channel = (WebSocketChannelDTO) getElementAt(i);
+            WebSocketChannelDTO channel = getElementAt(i);
             if (channelId.equals(channel.id)) {
                 setSelectedItem(channel);
                 return;
@@ -71,7 +71,7 @@ public int getSize() {
     }
 
     @Override
-    public Object getElementAt(int index) {
+    public WebSocketChannelDTO getElementAt(int index) {
         return delegate.elementAt(index);
     }
 

File: src/org/zaproxy/zap/extension/websocket/ui/ComboBoxChannelRenderer.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Displays a connected or disconnected plug beside channel name.
  */
-public class ComboBoxChannelRenderer extends JLabel implements ListCellRenderer {
+public class ComboBoxChannelRenderer extends JLabel implements ListCellRenderer<WebSocketChannelDTO> {
 	private static final long serialVersionUID = 1749702362670451484L;
 
 	public ComboBoxChannelRenderer() {
@@ -40,9 +40,8 @@ public ComboBoxChannelRenderer() {
 	 * and returns the label, set up to display the text and image.
 	 */
 	@Override
-	public Component getListCellRendererComponent(JList list, Object value,
+	public Component getListCellRendererComponent(JList<? extends WebSocketChannelDTO> list, WebSocketChannelDTO channel,
 			int index, boolean isSelected, boolean cellHasFocus) {
-		WebSocketChannelDTO channel = (WebSocketChannelDTO) value;
 				
 		if (isSelected) {
             setBackground(list.getSelectionBackground());

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesView.java
Patch:
@@ -60,7 +60,7 @@ public class WebSocketMessagesView implements Runnable {
 	public WebSocketMessagesView(WebSocketMessagesViewModel model) {
 		this.model = model;
 		
-		displayQueue = new Vector<WebSocketMessageDTO>();
+		displayQueue = new Vector<>();
 	}
 	
 	/**

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesViewFilterDialog.java
Patch:
@@ -84,7 +84,6 @@ public WebSocketMessagesViewFilterDialog(Frame owner, boolean isModal) throws He
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         setContentPane(getJPanel());

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesViewModel.java
Patch:
@@ -227,7 +227,7 @@ protected List<WebSocketMessageDTO> loadPage(int offset, int length) {
 			return table.getMessages(getCriterionMessage(), getCriterionOpcodes(), offset, length, PAYLOAD_PREVIEW_LENGTH);
 		} catch (SQLException e) {
 			logger.error(e.getMessage(), e);
-			return new ArrayList<WebSocketMessageDTO>();
+			return new ArrayList<>(0);
 		}
 	}
 

File: src/org/zaproxy/zap/extension/websocket/utility/PagingTableModel.java
Patch:
@@ -45,8 +45,8 @@ public abstract class PagingTableModel<T> extends AbstractTableModel {
 	private static final int MAX_PAGE_SIZE = 50;
 
 	private int dataOffset = 0;
-	private List<T> data = new ArrayList<T>();
-	private SortedSet<Segment> pending = new TreeSet<Segment>();
+	private List<T> data = new ArrayList<>();
+	private SortedSet<Segment> pending = new TreeSet<>();
 
 	/**
 	 * Return number of all items. Scrollbar will appear accordingly. 

File: src/org/zaproxy/zap/httputils/HtmlContext.java
Patch:
@@ -36,7 +36,7 @@ public class HtmlContext {
 	private String target;
 	private int start = 0;
 	private int end = 0;
-	private List<String> parentTags = new ArrayList<String>();
+	private List<String> parentTags = new ArrayList<>();
 	private String tagAttribute = null;
 	private boolean inScriptAttribute = false;
 	private boolean inUrlAttribute = false;

File: src/org/zaproxy/zap/httputils/HtmlContextAnalyser.java
Patch:
@@ -134,7 +134,7 @@ public List<HtmlContext> getHtmlContexts (String target) {
 	}
 
 	public List<HtmlContext> getHtmlContexts (String target, HtmlContext targetContext, int ignoreFlags) {
-		List<HtmlContext> contexts = new ArrayList<HtmlContext>();
+		List<HtmlContext> contexts = new ArrayList<>();
 		
 		int offset = 0;
 		while ((offset = htmlPage.indexOf(target, offset)) >= 0) {

File: src/org/zaproxy/zap/junit/TestDaemonWave.java
Patch:
@@ -19,7 +19,7 @@
 public class TestDaemonWave {
 
 	private List<String> openUrlViaProxy (Proxy proxy, String apiurl) throws Exception {
-		List<String> response = new ArrayList<String>();
+		List<String> response = new ArrayList<>();
 		URL url = new URL(apiurl);
 		HttpURLConnection uc = (HttpURLConnection)url.openConnection(proxy);
 		uc.connect();

File: src/org/zaproxy/zap/junit/wavsep/WavsepStatic.java
Patch:
@@ -60,7 +60,7 @@ private static ClientApi initClientApi() throws Exception {
 	
 	// Note that this method is a copy of the code in org.parosproxy.paros.model
 	private static TreeSet<String> getParamNameSet(String params) throws Exception {
-	    TreeSet<String> set = new TreeSet<String>();
+	    TreeSet<String> set = new TreeSet<>();
 	    String[] keyValue = staticPatternParam.split(params);
 		String key = null;
 		int pos = 0;
@@ -147,10 +147,10 @@ public static void genericTest(String relativeUrl, Alert[] ignoreAlerts, Alert[]
 		client.activeScanUrl(nodeName);
 		Thread.sleep(sleepInMs);
 
-		List<Alert> ignoreAlertsList = new ArrayList<Alert>();
+		List<Alert> ignoreAlertsList = new ArrayList<>(ignoreAlerts.length);
 		ignoreAlertsList.addAll(Arrays.asList(setAlertsUrl(ignoreAlerts, url)));
 
-		List<Alert> requireAlertsList = new ArrayList<Alert>();
+		List<Alert> requireAlertsList = new ArrayList<>(requireAlerts.length);
 		requireAlertsList.addAll(Arrays.asList(setAlertsUrl(requireAlerts, url)));
 		
 		client.checkAlerts(ignoreAlertsList, requireAlertsList);

File: src/org/zaproxy/zap/model/GenericScanner.java
Patch:
@@ -56,7 +56,7 @@ public interface GenericScanner extends Runnable {
 
 	public boolean getJustScanInScope ();
 
-	public ListModel getList();
+	public ListModel<?> getList();
 
 	public void reset();
 	

File: src/org/zaproxy/zap/scanner/plugin/TestPathTraversal.java
Patch:
@@ -212,6 +212,7 @@ public void init() {
      * scans all GET and POST parameters for Path Traversal vulnerabilities
      * TODO: consider looking in header fields and cookies as well
      */
+    @Override
     public void scan () {
     
     	try {
@@ -254,7 +255,7 @@ public void scan () {
     		}
     		
 	    	//find all params set in the request (GET/POST)
-	    	TreeSet<HtmlParameter> htmlParams = new TreeSet<HtmlParameter> ();
+	    	TreeSet<HtmlParameter> htmlParams = new TreeSet<> ();
 	    	htmlParams.addAll(getBaseMsg().getUrlParams()); //add in the GET params
 			htmlParams.addAll(getBaseMsg().getFormParams());  //add in the POST params
 			

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -121,8 +121,8 @@ public Spider(SpiderParam spiderParam, ConnectionParam connectionParam, Model mo
 		this.connectionParam = connectionParam;
 		this.model = model;
 		this.controller = new SpiderController(this);
-		this.listeners = new LinkedList<SpiderListener>();
-		this.seedList = new ArrayList<URI>();
+		this.listeners = new LinkedList<>();
+		this.seedList = new ArrayList<>();
 		this.cookieManager = new CookieManager();
 
 		init();

File: src/org/zaproxy/zap/spider/URLCanonicalizer.java
Patch:
@@ -153,7 +153,7 @@ private static SortedMap<String, String> createParameterMap(final String querySt
 		}
 
 		final String[] pairs = queryString.split("&");
-		final Map<String, String> params = new HashMap<String, String>(pairs.length);
+		final Map<String, String> params = new HashMap<>(pairs.length);
 
 		for (final String pair : pairs) {
 			if (pair.length() == 0) {
@@ -174,7 +174,7 @@ private static SortedMap<String, String> createParameterMap(final String querySt
 				break;
 			}
 		}
-		return new TreeMap<String, String>(params);
+		return new TreeMap<>(params);
 	}
 
 	/**

File: src/org/zaproxy/zap/spider/filters/DefaultFetchFilter.java
Patch:
@@ -37,7 +37,7 @@
 public class DefaultFetchFilter extends FetchFilter {
 
 	/** The scope. */
-	private Set<String> scopes = new LinkedHashSet<String>();
+	private Set<String> scopes = new LinkedHashSet<>();
 
 	/** The exclude list. */
 	private List<String> excludeList = null;

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlFormParser.java
Patch:
@@ -177,7 +177,7 @@ public void parseResource(HttpMessage message, Source source, int depth) {
 	 * @return the list
 	 */
 	private List<HtmlParameter> prepareFormDataSet(FormFields form) {
-		List<HtmlParameter> formDataSet = new LinkedList<HtmlParameter>();
+		List<HtmlParameter> formDataSet = new LinkedList<>();
 
 		// Process each form field
 		Iterator<FormField> it = form.iterator();

File: src/org/zaproxy/zap/spider/parser/SpiderParser.java
Patch:
@@ -33,7 +33,7 @@
 public abstract class SpiderParser {
 
 	/** The listeners to spider parsing events. */
-	private LinkedList<SpiderParserListener> listeners = new LinkedList<SpiderParserListener>();
+	private LinkedList<SpiderParserListener> listeners = new LinkedList<>();
 
 	/** The Constant log. */
 	protected static final Logger log = Logger.getLogger(SpiderParser.class);

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -46,9 +46,9 @@ public static List<String> getAvailableLocales() {
 		List<String> locales;
 		if (files == null || files.length == 0) {
 			logger.error("Failed to find any locale files in directory " + dir.getAbsolutePath());
-			locales = new ArrayList<String>(1);
+			locales = new ArrayList<>(1);
 		} else {
-			locales = new ArrayList<String>(files.length + 1);
+			locales = new ArrayList<>(files.length + 1);
 			// XXX: Doing the sort here doesn't add much to the end user.
 			// This sort the locales (es_ES, in_ID). The sort should be made on
 			// the names ("español", "Bahasa Indonesia") returned by the method

File: src/org/zaproxy/zap/utils/StickyScrollbarAdjustmentListener.java
Patch:
@@ -30,6 +30,7 @@
 public class StickyScrollbarAdjustmentListener implements AdjustmentListener {
 	private int previousMaximum;
 
+	@Override
 	public void adjustmentValueChanged(AdjustmentEvent e) {
 		Adjustable source = (Adjustable) e.getSource();
 

File: src/org/zaproxy/zap/utils/XMLStringUtil.java
Patch:
@@ -21,7 +21,7 @@
 
 public class XMLStringUtil {
 
-	private static HashSet<Character> illegalChrSet = new HashSet<Character>();
+	private static HashSet<Character> illegalChrSet = new HashSet<>();
 	
 	static {
 		final String illegalChrs = "\u0000\u0001\u0002\u0003\u0004\u0005" +

File: src/org/zaproxy/zap/view/AboutDialog.java
Patch:
@@ -61,7 +61,6 @@ public AboutDialog(Frame arg0, boolean arg1) throws HeadlessException {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		this.setContentPane(getJPanel());

File: src/org/zaproxy/zap/view/AboutPanel.java
Patch:
@@ -95,7 +95,6 @@ public AboutPanel(LayoutManager arg0, boolean arg1) {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		

File: src/org/zaproxy/zap/view/AboutWindow.java
Patch:
@@ -34,7 +34,6 @@ public AboutWindow() {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
 		this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

File: src/org/zaproxy/zap/view/HighlighterManager.java
Patch:
@@ -24,7 +24,7 @@ static public HighlighterManager getInstance() {
 	private LinkedList<HighlightSearchEntry> highlights;
 	
 	public HighlighterManager() {
-		highlights = new LinkedList<HighlightSearchEntry>();
+		highlights = new LinkedList<>();
 	}
 	
 	public void reinitHighlights(LinkedList<HighlightSearchEntry> list) {

File: src/org/zaproxy/zap/view/LicenseFrame.java
Patch:
@@ -65,7 +65,6 @@ public LicenseFrame() {
 	/**
 	 * This method initializes this
 	 *
-	 * @return void
 	 */
 	private void initialize() {
         this.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);

File: src/org/zaproxy/zap/view/LocaleDialog.java
Patch:
@@ -68,7 +68,6 @@ public LocaleDialog(Frame arg0, boolean arg1) throws HeadlessException {
 	/**
 	 * This method initializes this
 	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setContentPane(getJPanel());

File: src/org/zaproxy/zap/view/OptionsConnectionPanel.java
Patch:
@@ -196,8 +196,6 @@ private JPanel getPanelProxyChain() {
 	}
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/ProxyDialog.java
Patch:
@@ -67,8 +67,6 @@ public ProxyDialog(Frame arg0, boolean arg1) throws HeadlessException {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setContentPane(getJPanel());

File: src/org/zaproxy/zap/view/SessionExcludeFromProxyPanel.java
Patch:
@@ -53,8 +53,6 @@ public SessionExcludeFromProxyPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/SessionExcludeFromScanPanel.java
Patch:
@@ -53,8 +53,6 @@ public SessionExcludeFromScanPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/SessionExcludeFromScopePanel.java
Patch:
@@ -54,8 +54,6 @@ public SessionExcludeFromScopePanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/SessionExcludeFromSpiderPanel.java
Patch:
@@ -53,8 +53,6 @@ public SessionExcludeFromSpiderPanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/zaproxy/zap/view/SessionIncludeInScopePanel.java
Patch:
@@ -54,8 +54,6 @@ public SessionIncludeInScopePanel() {
     
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	private void initialize() {
         this.setLayout(new CardLayout());

File: src/org/parosproxy/paros/extension/filter/Filter.java
Patch:
@@ -81,10 +81,11 @@ public interface Filter {
     public void editProperty();
 
     /**
-     * ZAP: Added method to be able to filter WebSocket communication.
+     * Filter WebSocket communication.
      * 
      * @param message
      * @throws WebSocketException 
      */
+    // ZAP: added method
     public void onWebSocketPayload(WebSocketMessage message) throws WebSocketException;
 }

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -213,9 +213,7 @@ public void hook(ExtensionHook extensionHook) {
 	public void sessionChanged(final Session session)  {
 	    if (EventQueue.isDispatchThread()) {
 		    sessionChangedEventHandler(session);
-
 	    } else {
-	        
 	        try {
 	            EventQueue.invokeAndWait(new Runnable() {
 	                @Override

File: src/org/parosproxy/paros/security/SslCertificateServiceImpl.java
Patch:
@@ -54,7 +54,6 @@
 import org.bouncycastle.operator.ContentSigner;
 import org.bouncycastle.operator.OperatorCreationException;
 import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
-import org.bouncycastle.x509.examples.AttrCertExample;
 import org.bouncycastle.x509.extension.SubjectKeyIdentifierStructure;
 
 /**

File: src/org/zaproxy/zap/extension/websocket/WebSocketMessage.java
Patch:
@@ -460,6 +460,7 @@ public WebSocketMessageDTO getDTO() {
 		return dto;
 	}
 	
+	@Override
 	public String toString() {
 		return "WebSocketMessage#" + getMessageId();
 	}

File: src/org/zaproxy/zap/extension/websocket/WebSocketMessageDTO.java
Patch:
@@ -136,14 +136,15 @@ public void setTime(Timestamp ts) {
 			dateTime = dateFormatter.format(ts);
 		}
 		
-		String nanos = (ts.getNanos() + "").replaceAll("0+$", "");
+		String nanos = Integer.toString(ts.getNanos()).replaceAll("0+$", "");
 		if (nanos.length() == 0) {
 			nanos = "0";
 		}
 		
 		dateTime = dateTime.replaceFirst("([0-9]+:[0-9]+:[0-9]+)", "$1." + nanos);
 	}
 
+	@Override
 	public String toString() {
 		return "#" + channel.id + "." + id;
 	}

File: src/org/zaproxy/zap/extension/websocket/WebSocketProxyV13.java
Patch:
@@ -475,7 +475,7 @@ private void readFrame(InputStream in, byte frameHeader) throws IOException {
 		 * @return
 		 */
 		private byte[] getReadableCloseFramePayload(byte[] payload, int statusCode) {
-			byte[] closeCode = (statusCode+"").getBytes();
+			byte[] closeCode = Integer.toString(statusCode).getBytes();
 			
 			// close code might consist of illegal 5 digits (as one of the Autobahn tests)
 			byte[] newPayload = new byte[payload.length + (closeCode.length - 2)];

File: src/org/zaproxy/zap/extension/websocket/brk/WebSocketBreakDialog.java
Patch:
@@ -25,7 +25,6 @@
 import java.awt.event.ActionListener;
 import java.util.regex.PatternSyntaxException;
 
-import javax.swing.ComboBoxModel;
 import javax.swing.JButton;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
@@ -35,6 +34,7 @@
 import org.parosproxy.paros.extension.AbstractDialog;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.websocket.WebSocketMessage.Direction;
+import org.zaproxy.zap.extension.websocket.ui.ChannelSortedListModel;
 import org.zaproxy.zap.extension.websocket.ui.WebSocketUiHelper;
 
 public abstract class WebSocketBreakDialog extends AbstractDialog {
@@ -50,13 +50,13 @@ public abstract class WebSocketBreakDialog extends AbstractDialog {
 	private JButton btnCancel = null;
 	private JScrollPane jScrollPane = null;
 
-    public WebSocketBreakDialog(WebSocketBreakpointsUiManagerInterface breakPointsManager, ComboBoxModel channelSelectModel) throws HeadlessException {
+    public WebSocketBreakDialog(WebSocketBreakpointsUiManagerInterface breakPointsManager, ChannelSortedListModel channelsModel) throws HeadlessException {
         super(View.getSingleton().getMainFrame(), false);
         
         this.breakPointsManager = breakPointsManager;
         
         wsUiHelper = new WebSocketUiHelper();
-        wsUiHelper.setChannelComboBoxModel(channelSelectModel);
+        wsUiHelper.setChannelsModel(channelsModel);
         
         initialize();
     }

File: src/org/zaproxy/zap/extension/websocket/brk/WebSocketBreakpointMessageHandler.java
Patch:
@@ -76,7 +76,7 @@ protected boolean isBreakOnAllResponses(Message aMessage, boolean isRequest) {
 	 */
 	@Override
 	protected boolean isBreakOnStepping(Message aMessage, boolean isRequest) {
-		if (aMessage instanceof WebSocketMessageDTO && super.isBreakOnStepping((Message) aMessage, isRequest)) {
+		if (aMessage instanceof WebSocketMessageDTO && super.isBreakOnStepping(aMessage, isRequest)) {
 			return isBreakOnOpcode(((WebSocketMessageDTO) aMessage).opcode);
 		}
 		return false;

File: src/org/zaproxy/zap/extension/websocket/brk/WebSocketBreakpointsUiManagerInterface.java
Patch:
@@ -91,7 +91,7 @@ private void populateAddDialogAndSetVisible(Message aMessage) {
     
     private void showAddDialog(Message aMessage) {
         if (addDialog == null) {
-            addDialog = new WebSocketBreakDialogAdd(this, wsPanel.getChannelComboBoxModel());
+            addDialog = new WebSocketBreakDialogAdd(this, wsPanel.getChannelsModel());
             populateAddDialogAndSetVisible(aMessage);
         } else if (!addDialog.isVisible()) {
             populateAddDialogAndSetVisible(aMessage);
@@ -110,7 +110,7 @@ private void populateEditDialogAndSetVisible(WebSocketBreakpointMessage breakpoi
     
     private void showEditDialog(WebSocketBreakpointMessage breakpoint) {
         if (editDialog == null) {
-            editDialog = new WebSocketBreakDialogEdit(this, wsPanel.getChannelComboBoxModel());
+            editDialog = new WebSocketBreakDialogEdit(this, wsPanel.getChannelsModel());
             populateEditDialogAndSetVisible(breakpoint);
         } else if (!editDialog.isVisible()) {
             populateEditDialogAndSetVisible(breakpoint);

File: src/org/zaproxy/zap/extension/websocket/fuzz/WebSocketFuzzDialog.java
Patch:
@@ -56,6 +56,7 @@ public void setFuzzableComponent(FuzzableComponent fuzzableComponent) {
 		fuzzableMessage = (WebSocketFuzzableTextMessage) fuzzableComponent.getFuzzableMessage();
 	}
     
+    @Override
     protected int addCustomComponents(JPanel panel, int row) {
         int currentRow = row;
 

File: src/org/zaproxy/zap/extension/websocket/fuzz/WebSocketFuzzMessagesView.java
Patch:
@@ -55,6 +55,7 @@ public WebSocketFuzzMessagesView(WebSocketMessagesViewModel model, TableWebSocke
     	super(model);
     }
 
+	@Override
 	protected String getViewComponentName() {
 		return TABLE_NAME;
 	}

File: src/org/zaproxy/zap/extension/websocket/ui/ExcludeFromScopeMenuItem.java
Patch:
@@ -47,9 +47,8 @@ protected boolean isEnabledExtended() {
 			Session session = Model.getSingleton().getSession();
 			if (session.isInScope(message.channel.url)) {
 				return true;
-			} else {
-				return false;
 			}
+			return false;
 		}
 		return super.isEnabledExtended();
 	}
@@ -71,7 +70,7 @@ protected void performAction() {
 
 	@Override
 	protected String getInvokerName() {
-		return "websocket.table";
+		return WebSocketMessagesView.TABLE_NAME;
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/websocket/ui/ExcludeFromWebSocketsMenuItem.java
Patch:
@@ -75,7 +75,7 @@ protected boolean isEnabledExtended() {
 	
 	@Override
 	protected String getInvokerName() {
-		return "websocket.table";
+		return WebSocketMessagesView.TABLE_NAME;
 	}
 
 	protected String buildRegexForSelectedChannel() {

File: src/org/zaproxy/zap/extension/websocket/ui/IncludeInScopeMenuItem.java
Patch:
@@ -65,7 +65,7 @@ protected void performAction() throws Exception {
 
 	@Override
 	protected String getInvokerName() {
-		return "websocket.table";
+		return WebSocketMessagesView.TABLE_NAME;
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/websocket/ui/OptionsWebSocketPanel.java
Patch:
@@ -39,7 +39,7 @@
  * <li>Forward Only - allows to avoid storing WebSocket communication.</li>
  * <li>Break on All - react on breakpoints set for all requests/responses.</li>
  * <li>Break on Ping/Pong - react on Ping & Pong messages that arrive while
- * while stepping or waiting for all requests/responses.</li>
+ * stepping or waiting for all requests/responses.</li>
  * </ul>
  * </p>
  */
@@ -133,7 +133,7 @@ public void initParam(Object obj) {
 
     @Override
     public void validateParam(Object obj) throws Exception {
-    	// no validation needed for these checkboxes
+    	// no validation needed for these check boxes
     }
 
     @Override

File: src/org/zaproxy/zap/extension/websocket/utility/LazyViewport.java
Patch:
@@ -45,6 +45,7 @@ public static JScrollPane createLazyScrollPaneFor(Component view) {
     /**
      * overridden to not repaint during during a vertical drag
      */
+    @Override
     public void setViewPosition(Point p) {
         Component parent = getParent();
         if ( parent instanceof JScrollPane &&

File: src/org/zaproxy/zap/view/SiteMapTreeCellRenderer.java
Patch:
@@ -26,6 +26,7 @@
 import javax.swing.tree.DefaultTreeCellRenderer;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.control.Control;
+import org.parosproxy.paros.model.SiteMap;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.SiteMapPanel;

File: src/org/zaproxy/zap/extension/pscan/scanner/XFrameOptionScanner.java
Patch:
@@ -63,7 +63,7 @@ private void raiseAlert(HttpMessage msg, int id, String xFrameOption, boolean is
 		    	    xFrameOption,
 		    	    "", 
 		    	    "",
-		    	    "Most modern Web browsers support the X-Frame-Options HTTP header, ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.",
+		    	    "Most modern Web browsers support the X-Frame-Options HTTP header, ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY).",
 		            "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true", 
 		            msg);
 	

File: src/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -337,8 +337,8 @@ private JToolBar getFooterStatusBar() {
 	private void setFooterStatus(HttpMessage msg){
 		if (msg != null) {
 			//get values
-			long totalLength = msg.getResponseBody().toString().length()+msg.getResponseHeader().getHeadersAsString().length();
-			long contentLength = msg.getResponseBody().toString().length();
+			long contentLength = msg.getResponseBody().length();
+			long totalLength = msg.getResponseHeader().toString().length() + contentLength;
 			long timeLapse =msg.getTimeElapsedMillis(); 
 			// show time lapse and content length between request and response Constant.messages.getString("manReq.label.timeLapse")
 			getLabelTimeLapse().setText(

File: src/org/zaproxy/zap/extension/auth/AuthAPI.java
Patch:
@@ -42,7 +42,7 @@ public class AuthAPI extends ApiImplementor {
 	private static final String VIEW_LOGOUT_DATA = "logoutData";
 	private static final String VIEW_LOGGED_OUT_INDICATOR = "loggedOutIndicator";
 	
-	private static final String ACTION_AUTHENTICATE = "authenticateo";
+	private static final String ACTION_AUTHENTICATE = "authenticate";
 	private static final String ACTION_AUTO_REAUTH_ON = "autoReauthOn";
 	private static final String ACTION_AUTO_REAUTH_OFF = "autoReauthOff";
 	private static final String ACTION_SET_LOGIN_NODE = "setLoginUrl";

File: src/org/parosproxy/paros/extension/ExtensionPopupMenuItem.java
Patch:
@@ -24,6 +24,7 @@
 // ZAP: 2012/03/03 Added setters for separators
 // ZAP: 2012/07/11 Issue 323: Added support for supermenus
 // ZAP: 2012/08/01 Issue 332: added support for Modes
+// ZAP: 2012/08/29 Issue 250 Support for authentication management
 
 package org.parosproxy.paros.extension;
 
@@ -38,7 +39,8 @@ public class ExtensionPopupMenuItem extends JMenuItem {
 	
 	public static final int ATTACK_MENU_INDEX = 0;
 	public static final int EXCLUDE_MENU_INDEX = 1;
-	public static final int INVOKE_MENU_INDEX = 2;
+	public static final int FLAG_MENU_INDEX = 2;
+	public static final int INVOKE_MENU_INDEX = 3;
 	
 	private int menuIndex = -1;
 	private int parentMenuIndex = -1;

File: src/org/parosproxy/paros/view/SessionDialog.java
Patch:
@@ -18,6 +18,8 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/08/29 Issue 250 Support for authentication management (enlarged window size)
+
 package org.parosproxy.paros.view;
 
 import java.awt.Frame;
@@ -57,7 +59,7 @@ public SessionDialog(Frame parent, boolean modal, String title, String rootName)
 	 */
 	private void initialize() {
 	    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {
-	    	this.setSize(500, 375);
+	    	this.setSize(650, 500);
 	    } else {
 	    	pack();
 	    }

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -267,7 +267,7 @@ public boolean isDefaultSessionToken(String token) {
 	 * @param token the token
 	 * @return true, if it is a previously removed default session token
 	 */
-	public boolean isRemovedDefaultSessionToken(String site, String token) {
+	private boolean isRemovedDefaultSessionToken(String site, String token) {
 		if (removedDefaultTokens == null)
 			return false;
 		HashSet<String> removed = removedDefaultTokens.get(site);
@@ -283,7 +283,7 @@ public boolean isRemovedDefaultSessionToken(String site, String token) {
 	 *            {@link ExtensionHttpSessions} class documentation.
 	 * @param token the token
 	 */
-	public void markRemovedDefaultSessionToken(String site, String token) {
+	private void markRemovedDefaultSessionToken(String site, String token) {
 		if (removedDefaultTokens == null)
 			removedDefaultTokens = new HashMap<String, HashSet<String>>(1);
 		HashSet<String> removedSet = removedDefaultTokens.get(site);
@@ -300,7 +300,7 @@ public void markRemovedDefaultSessionToken(String site, String token) {
 	 * @param site the site. This parameter has to be formed as defined in the
 	 * @param token the token {@link ExtensionHttpSessions} class documentation.
 	 */
-	public void unmarkRemovedDefaultSessionToken(String site, String token) {
+	private void unmarkRemovedDefaultSessionToken(String site, String token) {
 		if (removedDefaultTokens == null)
 			return;
 		HashSet<String> removed = removedDefaultTokens.get(site);

File: src/org/zaproxy/zap/extension/params/SiteParameters.java
Patch:
@@ -27,11 +27,10 @@
 
 import net.sf.json.JSONArray;
 
-import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.db.RecordParam;
 import org.parosproxy.paros.network.HtmlParameter;
-import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.network.HtmlParameter.Type;
+import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httpsessions.ExtensionHttpSessions;
 
 public class SiteParameters {

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsParam.java
Patch:
@@ -84,7 +84,7 @@ protected void parse() {
 	}
 
 	/**
-	 * Gets the default tokens. *
+	 * Gets the default tokens.
 	 * <p>
 	 * The list of default session tokens returned is read-only view of the internal default session
 	 * tokens representation and any modifications will result in

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsSite.java
Patch:
@@ -262,7 +262,7 @@ public void processHttpRequestMessage(HttpMessage message) {
 				}
 			}
 			// Store the session in the HttpMessage for caching purpose
-			message.setHttpSession(session);
+			message.setHttpSession(activeSession);
 
 			// Update the cookies in the message
 			message.getRequestHeader().setCookies(requestCookies);

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -373,7 +373,8 @@ private void complete() {
 		new Thread(new Runnable() {
 			@Override
 			public void run() {
-				threadPool.shutdownNow();
+				if (threadPool != null)
+					threadPool.shutdownNow();
 				// Notify the listeners -- in the meanwhile
 				notifyListenersSpiderComplete(true);
 				controller.reset();

File: src/org/parosproxy/paros/network/HttpResponseHeader.java
Patch:
@@ -23,8 +23,6 @@
 // Moved to this class the method getCookieParams().
 // ZAP: 2012/06/24 Added new method of getting cookies from the request header.
 // ZAP: 2012/07/11 Added method to check if response type is text/html (isHtml())
-// ZAP: 2012/06/24 Added new method of getting cookies from the request header.
-// ZAP: 2012/07/11 Added method to check if response type is text/html (isHtml())
 // ZAP: 2012/08/06 Modified isText() to also consider javascript as text 
 package org.parosproxy.paros.network;
 

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -26,7 +26,6 @@
 import javax.swing.DefaultListModel;
 
 import org.apache.log4j.Logger;
-import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.SiteMap;

File: src/org/zaproxy/zap/spider/SpiderController.java
Patch:
@@ -56,7 +56,7 @@ public class SpiderController implements SpiderParserListener {
 	/** The parsers for HTML files. */
 	private List<SpiderParser> htmlParsers;
 
-	/** The text parsers. Initialized dinamically, only if needed. */
+	/** The text parsers. Initialized dynamically, only if needed. */
 	private List<SpiderParser> txtParsers;
 
 	/** The spider. */

File: src/org/zaproxy/zap/spider/parser/SpiderRobotstxtParser.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.zaproxy.zap.spider.parser;
 
+import java.util.Locale;
 import java.util.StringTokenizer;
 
 import net.htmlparser.jericho.Source;
@@ -90,7 +91,7 @@ public void parseResource(HttpMessage message, Source source, int depth) {
 
 			// If the line is for defining the user agent
 			if (line.matches(PATTERNS_USERAGENT)) {
-				String ua = line.substring(PATTERNS_USERAGENT_LENGTH).trim().toLowerCase();
+				String ua = line.substring(PATTERNS_USERAGENT_LENGTH).trim().toLowerCase(Locale.ENGLISH);
 				if (ua.equals("*") || ua.contains(Constant.USER_AGENT)) {
 					log.debug("Parsing robots.txt file. Starting section applying to spider.");
 					inMatchingUserAgent = true;

File: src/org/zaproxy/zap/spider/parser/SpiderTextParser.java
Patch:
@@ -32,7 +32,7 @@
 public class SpiderTextParser extends SpiderParser {
 
 	/** The Constant urlPattern defining the pattern for an url. */
-	private static final Pattern patternURL = Pattern.compile("\\W(http://[^\\x00-\\x1f\"'\\s<>#]+)");
+	private static final Pattern patternURL = Pattern.compile("\\W(http(s?)://[^\\x00-\\x1f\"'\\s<>#]+)");
 
 	/* (non-Javadoc)
 	 * 

File: src/org/zaproxy/zap/extension/httpsessions/HttpSession.java
Patch:
@@ -169,7 +169,7 @@ public String getTokenValuesString() {
 		StringBuilder buf = new StringBuilder();
 
 		for (Map.Entry<String, String> entry : tokenValues.entrySet())
-			buf.append(entry.getKey() + "=" + entry.getValue() + ";");
+			buf.append(entry.getKey()).append('=').append(entry.getValue()).append(';');
 		buf.deleteCharAt(buf.length() - 1);
 
 		return buf.toString();

File: src/org/zaproxy/zap/extension/httpsessions/OptionsHttpSessionsPanel.java
Patch:
@@ -113,7 +113,7 @@ private void initialize() {
 	public void initParam(Object obj) {
 		// Initialize the default token names
 		OptionsParam optionsParam = (OptionsParam) obj;
-		HttpSessionsParam param = optionsParam.getHttpSessionsParam();
+		HttpSessionsParam param = (HttpSessionsParam) optionsParam.getParamSet(HttpSessionsParam.class);
 		getDefaultTokensModel().setTokens(param.getDefaultTokens());
 		getChkProxyOnly().setSelected(param.isEnabledProxyOnly());
 	}
@@ -131,7 +131,7 @@ public void validateParam(Object obj) throws Exception {
 	@Override
 	public void saveParam(Object obj) throws Exception {
 		OptionsParam optionsParam = (OptionsParam) obj;
-		HttpSessionsParam sessionParam = optionsParam.getHttpSessionsParam();
+		HttpSessionsParam sessionParam = (HttpSessionsParam) optionsParam.getParamSet(HttpSessionsParam.class);
 		sessionParam.setDefaultTokens(getDefaultTokensModel().getTokens());
 		sessionParam.setEnabledProxyOnly(getChkProxyOnly().isSelected());
 	}

File: src/org/zaproxy/zap/extension/httpsessions/OptionsHttpSessionsTableModel.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Locale;
 
 import javax.swing.table.AbstractTableModel;
 
@@ -85,7 +86,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
 	 * @see javax.swing.table.AbstractTableModel#setValueAt(java.lang.Object, int, int) */
 	@Override
 	public void setValueAt(Object value, int row, int col) {
-		tokenNames.set(row, ((String) value).toLowerCase());
+		tokenNames.set(row, ((String) value).toLowerCase(Locale.ENGLISH));
 		checkAndAppendNewRow();
 		fireTableCellUpdated(row, col);
 	}

File: src/org/parosproxy/paros/CommandLine.java
Patch:
@@ -215,7 +215,7 @@ public boolean isGUI() {
         return GUI;
     }
     /**
-     * @param noGUI The noGUI to set.
+     * @param GUI The noGUI to set.
      */
     public void setGUI(boolean GUI) {
         this.GUI = GUI;

File: src/org/parosproxy/paros/common/FileXML.java
Patch:
@@ -106,8 +106,8 @@ protected Element getElement(String[] path) {
 
 	/**
 	 * Get all elements under a base element matching a tag name
-	 * @param parent
-	 * @param childTagName
+	 * @param base
+	 * @param childTag
 	 * @return
 	 */
 	protected Element[] getElements(Element base, String childTag) {

File: src/org/parosproxy/paros/db/DbUtils.java
Patch:
@@ -132,7 +132,7 @@ public static int getColumnType(final Connection connection, final String tableN
     /**
      * Executes and closes the given {@code preparedStatement}.
      * 
-     * @param stmt
+     * @param preparedStatement
      *            the statement that will be executed and immediately closed
      * @throws SQLException
      *             if error occurred while executing the given

File: src/org/parosproxy/paros/db/RecordHistory.java
Patch:
@@ -80,7 +80,7 @@ public HttpMessage getHttpMessage() {
 		return httpMessage;
 	}
 	/**
-	 * @param id The id to set.
+	 * @param historyId The id to set.
 	 */
 	public void setHistoryId(int historyId) {
 		this.historyId = historyId;

File: src/org/parosproxy/paros/db/RecordScan.java
Patch:
@@ -35,9 +35,9 @@ public class RecordScan {
 
     
     /**
-     * @param sessionId
-     * @param sessionName
-     * @param lastAccess
+     * @param scanId
+     * @param scanName
+     * @param scanTime
      */
     public RecordScan(int scanId, String scanName, java.sql.Date scanTime) {
         super();

File: src/org/parosproxy/paros/extension/SessionChangedListener.java
Patch:
@@ -62,7 +62,7 @@ public interface SessionChangedListener {
      * Called when the user changes the mode.
      * sessionModeChanged may be called by non-event thread.  Should handle with care in
      * all the listener.  Use EventThread for each GUI event.
-     * @param session
+     * @param mode
      */
     public void sessionModeChanged(Mode mode);
     

File: src/org/parosproxy/paros/extension/filter/FilterReplaceDialog.java
Patch:
@@ -84,8 +84,6 @@ public void setView(ViewDelegate view) {
 
 	/**
 	 * This method initializes this
-	 * 
-	 * @return void
 	 */
 	protected void initialize() {
 		// ZAP: Changed visibility from private to protected.

File: src/org/parosproxy/paros/extension/option/OptionsParamCertificate.java
Patch:
@@ -46,9 +46,6 @@ public class OptionsParamCertificate extends AbstractParam {
     private int useClientCert = 0;
     private String clientCertLocation = "";
     
-    /**
-     * @param rootElementName
-     */
     public OptionsParamCertificate() {
     }
 

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -83,7 +83,7 @@ public OptionsParam getOptionsParam() {
 	}
 	
 	/**
-	 * @param optionsParam The optionsParam to set.
+	 * @param param The optionsParam to set.
 	 */
 	public void setOptionsParam(OptionsParam param) {
 		optionsParam = param;

File: src/org/parosproxy/paros/model/OptionsParam.java
Patch:
@@ -250,7 +250,7 @@ public File getUserDirectory() {
     }
 
     /**
-     * @param currentFolder The currentFolder to set.
+     * @param currentDirectory The currentFolder to set.
      */
     public void setUserDirectory(File currentDirectory) {
         this.userDirectory = currentDirectory;

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -94,7 +94,7 @@ public class Session extends FileXML {
 	
 	/**
 	 * Constructor for the current session.  The current system time will be used as the session ID.
-	 * @param sessionId
+	 * @param model
 	 */
 	protected Session(Model model) {
 		super(ROOT);

File: src/org/parosproxy/paros/network/HttpInputStream.java
Patch:
@@ -124,7 +124,7 @@ private static final boolean isHeaderEnd(StringBuilder sb) {
 
 	/**
 	 * Read Http body from input stream as a string basing on the content length on the method.
-	 * @param method
+	 * @param httpHeader
 	 * @return Http body
 	 */
 	public synchronized HttpRequestBody readRequestBody(HttpHeader httpHeader) {
@@ -140,7 +140,7 @@ public synchronized HttpRequestBody readRequestBody(HttpHeader httpHeader) {
 
 	/**
 	 * Read Http body from input stream as a string basing on the content length on the method.
-	 * @param method
+	 * @param httpHeader
 	 * @return Http body
 	 */
 	public synchronized HttpResponseBody readResponseBody(HttpHeader httpHeader) {

File: src/org/parosproxy/paros/network/HttpMethodHelper.java
Patch:
@@ -229,7 +229,7 @@ public HttpMethod createRequestMethod(HttpRequestHeader header, HttpBody body) t
 	}
 	
 	
-	/**
+	/*
 	 * Build a HttpMethod (eg GET, POST) from raw string.  All headers will be set accordingly as in
 	 * the raw string.
 	 * @param request	raw request string with header and body.

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -423,7 +423,7 @@ private void setCommonManagerParams(MultiThreadedHttpConnectionManager mgr) {
 
     }
     
-    /**
+    /*
      * Send and receive a HttpMessage.  
      * @param msg
      * @param isFollowRedirect
@@ -473,7 +473,7 @@ private void sendAndReceive(HttpMessage msg, boolean isFollowRedirect, HttpOutpu
     }
     */
     
-    /**
+    /*
      * Do not use this unless sure what is doing.  This method works but proxy may skip the pipe without
      * properly handle the filter.
      * 

File: src/org/parosproxy/paros/network/SSLConnector.java
Patch:
@@ -207,9 +207,9 @@ public Socket createSocket(String host, int port, InetAddress clientHost,
 	 *            the host name/IP
 	 * @param port
 	 *            the port on the host
-	 * @param clientHost
+	 * @param localAddress
 	 *            the local host name/IP to bind the socket to
-	 * @param clientPort
+	 * @param localPort
 	 *            the port on the local machine
 	 * @param params
 	 *            {@link HttpConnectionParams Http connection parameters}
@@ -220,6 +220,7 @@ public Socket createSocket(String host, int port, InetAddress clientHost,
 	 *             if an I/O error occurs while creating the socket
 	 * @throws UnknownHostException
 	 *             if the IP address of the host cannot be determined
+	 * @throws 	ConnectTimeoutException        
 	 */
 	@Override
 	public Socket createSocket(final String host, final int port,

File: src/org/parosproxy/paros/security/SslCertificateServiceImpl.java
Patch:
@@ -54,9 +54,9 @@
 import org.bouncycastle.operator.ContentSigner;
 import org.bouncycastle.operator.OperatorCreationException;
 import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
+import org.bouncycastle.x509.examples.AttrCertExample;
 import org.bouncycastle.x509.extension.SubjectKeyIdentifierStructure;
 
-
 /**
  * This is a singleton class. Use {@link #getService()} method to
  * obtain a service bean. This implementation is totally unbuffered and creates
@@ -70,8 +70,8 @@
  * At least, Firefox v3.x does.
  *
  * @author MaWoKi
- * @see {@link org.bouncycastle.x509.examples.AttrCertExample} how to manage CAs and stuff
- * @see {@link CachedSslCertifificateServiceImpl} for a cached {@link SslCertificateService}
+ * @see AttrCertExample how to manage CAs and stuff
+ * @see CachedSslCertifificateServiceImpl for a cached SslCertificateService
  */
 public final class SslCertificateServiceImpl implements SslCertificateService {
 

File: src/org/zaproxy/zap/ZapGetMethod.java
Patch:
@@ -61,7 +61,7 @@ public ZapGetMethod() {
 	/**
 	 * Constructor.
 	 * 
-	 * @param uriSocketChannel
+	 * @param uri
 	 */
 	public ZapGetMethod(String uri) {
 		super(uri);

File: src/org/zaproxy/zap/ZapHttpConnectionManager.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Custom {@link SimpleHttpConnectionManager} that uses
  * {@link ZapHttpConnection} for connection creation. Needed to expose the
- * underlying {@link Socket}.
+ * underlying socket.
  */
 public class ZapHttpConnectionManager extends SimpleHttpConnectionManager {
 

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -42,9 +42,6 @@ public class AntiCsrfParam extends AbstractParam {
 	
 	private List<String> tokens = null;
 	
-    /**
-     * @param rootElementName
-     */
     public AntiCsrfParam() {
     }
 

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -78,8 +78,7 @@ public class ActiveScanPanel extends ScanPanel implements ScanListenner, Scanner
     private static Logger logger = Logger.getLogger(ActiveScanPanel.class);
 
     /**
-     * @param portScanParam 
-     * 
+     * @param extension
      */
     public ActiveScanPanel(ExtensionActiveScan extension) {
     	// 'fire' icon

File: src/org/zaproxy/zap/extension/brk/BreakpointMessageHandler.java
Patch:
@@ -52,7 +52,7 @@ public void setEnabledBreakpoints(List<BreakpointMessageInterface> breakpoints)
      * 
      * @param aMessage
      * @param onlyIfInScope
-     * @return
+     * @return False if message should be dropped.
      */
     public boolean handleMessageReceivedFromClient(Message aMessage, boolean onlyIfInScope) {
         if ( ! isBreakpoint(aMessage, true, onlyIfInScope)) {
@@ -77,7 +77,7 @@ public boolean handleMessageReceivedFromClient(Message aMessage, boolean onlyIfI
      * 
      * @param aMessage
      * @param onlyIfInScope
-     * @return
+     * @return False if message should be dropped.
      */
     public boolean handleMessageReceivedFromServer(Message aMessage, boolean onlyIfInScope) {
         if (! isBreakpoint(aMessage, false, onlyIfInScope)) {
@@ -158,7 +158,7 @@ public void run() {
      * @param aMessage
      * @param isRequest
      * @param onlyIfInScope
-     * @return
+     * @return True if a breakpoint for given message exists.
      */
     public boolean isBreakpoint(Message aMessage, boolean isRequest, boolean onlyIfInScope) {
     	if (onlyIfInScope && ! aMessage.isInScope()) {

File: src/org/zaproxy/zap/extension/brk/ExtensionBreak.java
Patch:
@@ -325,7 +325,7 @@ public boolean messageReceivedFromServer(Message aMessage) {
 	/**
 	 * Exposes list of enabled breakpoints.
 	 * 
-	 * @return
+	 * @return list of enabled breakpoints
 	 */
 	public List<BreakpointMessageInterface> getBreakpointsEnabledList() {
 		if (mode.equals(Mode.safe)) {

File: src/org/zaproxy/zap/extension/bruteforce/BruteForceParam.java
Patch:
@@ -40,9 +40,6 @@ public class BruteForceParam extends AbstractParam {
 	private boolean recursive = DEFAULT_RECURSIVE;
 	private String defaultFile = null;
 	
-    /**
-     * @param rootElementName
-     */
     public BruteForceParam() {
     }
 

File: src/org/zaproxy/zap/extension/fuzz/FuzzerParam.java
Patch:
@@ -36,9 +36,6 @@ public class FuzzerParam extends AbstractParam {
 	private int threadPerScan = 5;
 	private int delayInMs = 0;
 	
-    /**
-     * @param rootElementName
-     */
     public FuzzerParam() {
     }
 

File: src/org/zaproxy/zap/extension/help/ExtensionHelp.java
Patch:
@@ -130,7 +130,7 @@ public static void enablePopupHelpKey (Component component, String key) {
 	*/
 
 	/**
-	 * @see {@link #showHelp(String))} using key "zap.intro"
+	 * @see #showHelp(String)
 	 */
 	public static void showHelp() {
 		showHelp("zap.intro");

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsTableModel.java
Patch:
@@ -126,7 +126,7 @@ public void addHttpSession(HttpSession session) {
 	/**
 	 * Cells are not editable.
 	 * 
-	 * @return
+	 * @return True if editable.
 	 */
 	@Override
 	public boolean isCellEditable(int row, int col) {

File: src/org/zaproxy/zap/extension/invoke/OptionsInvokeTableModel.java
Patch:
@@ -79,7 +79,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     }
     
     /**
-     * @param listAuth The listAuth to set.
+     * @param apps The listAuth to set.
      */
     public void setListInvokableApps(List<InvokableApp> apps) {
         this.listApps = new ArrayList<InvokableApp>(apps);

File: src/org/zaproxy/zap/extension/invoke/PopupMenuInvokeConfigure.java
Patch:
@@ -31,9 +31,7 @@
 public class PopupMenuInvokeConfigure extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
-    /**
-     * @param label
-     */
+	
     public PopupMenuInvokeConfigure() {
         super();
         this.initialize();

File: src/org/zaproxy/zap/extension/pscan/OptionsPassiveScanTableModel.java
Patch:
@@ -97,7 +97,7 @@ public boolean isCellEditable(int rowIndex, int columnIndex) {
     }
     
     /**
-     * @param listAuth The listAuth to set.
+     * @param defns
      */
     public void setScanDefns(List <RegexAutoTagScanner> defns) {
         this.defns = new ArrayList<RegexAutoTagScanner>(defns);

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -233,8 +233,6 @@ protected int addToolBarElements(JToolBar panelToolbar2, Location loc, int x) {
 
 	/**
 	 * Update the count of found URIs.
-	 * 
-	 * @param foundCount the found count
 	 */
 	protected void updateFoundCount() {
 		this.getFoundCountValueLabel().setText(Integer.toString(this.currentResultsModel.getRowCount()));

File: src/org/zaproxy/zap/extension/websocket/WebSocketMessageDTO.java
Patch:
@@ -27,7 +27,7 @@
 import org.zaproxy.zap.extension.websocket.utility.Utf8Util;
 
 /**
- * Data Access Object used for displaying WebSockets communication. Intended to
+ * Data Transfer Object used for displaying WebSockets communication. Intended to
  * decouple user interface representation from version specific
  * {@link WebSocketMessage}.
  */
@@ -175,7 +175,7 @@ public boolean isInScope() {
 	/**
 	 * Returns content of {@link WebSocketMessageDTO#payload} directly if it is
 	 * of type {@link String}. Otherwise it tries to convert it.
-	 * @return 
+	 * @return readable representation of payload
 	 * @throws InvalidUtf8Exception 
 	 */
 	public String getReadablePayload() throws InvalidUtf8Exception {

File: src/org/zaproxy/zap/extension/websocket/WebSocketObserver.java
Patch:
@@ -28,7 +28,7 @@ public interface WebSocketObserver {
 	/**
 	 * The lowest ordering value will receive the message first.
 	 * 
-	 * @return
+	 * @return observing order
 	 */
 	public int getObservingOrder();
 	
@@ -40,7 +40,7 @@ public interface WebSocketObserver {
 	 * 
 	 * @param channelId
 	 * @param message
-	 * @return
+	 * @return Continue to notify and forward on True.
 	 */
 	public boolean onMessageFrame(int channelId, WebSocketMessage message);
 	

File: src/org/zaproxy/zap/extension/websocket/brk/WebSocketBreakDialog.java
Patch:
@@ -206,9 +206,7 @@ private JScrollPane getJScrollPane() {
 	}
 	
 	/**
-	 * Returns {@link WebSocketBreakpointMessage} with values set in dialog.
-	 * 
-	 * @return
+	 * @return {@link WebSocketBreakpointMessage} with values set in dialog
 	 * @throws PatternSyntaxException
 	 */
     protected WebSocketBreakpointMessage getWebSocketBreakpointMessage() throws PatternSyntaxException {

File: src/org/zaproxy/zap/extension/websocket/filter/FilterWebSocketPayload.java
Patch:
@@ -74,8 +74,9 @@ public void onHttpResponseReceive(HttpMessage httpMessage) {
 
 	/**
 	 * Change message payload if pattern applies. Ignore binary messages so far
-	 * and apply only to other opcodes. Called by
-	 * {@link ExtensionFilter#onMessageFrame(int, WebSocketMessage)}.
+	 * and apply only to other opcodes.
+	 * 
+	 * @param wsMessage
 	 * @throws WebSocketException 
 	 */
 	@Override

File: src/org/zaproxy/zap/extension/websocket/ui/OptionsParamWebSocket.java
Patch:
@@ -46,7 +46,7 @@ protected void parse() {
 	 * If true, then all WebSocket communication is forwarded, but not stored in
 	 * database, nor shown in user interface.
 	 * 
-	 * @return
+	 * @return True if all traffic should only be forwarded.
 	 */
 	public boolean isForwardAll() {
 		return isForwardAll;
@@ -69,7 +69,7 @@ public void setForwardAll(boolean isForwardAll) {
 	 * <li>stepping through to next request/response</li>
 	 * </ul>
 	 * 
-	 * @return
+	 * @return True if it should break also on ping & pong messages.
 	 */
 	public boolean isBreakOnPingPong() {
 		return isBreakOnPingPong;
@@ -90,7 +90,7 @@ public void setBreakOnPingPong(boolean isCatchPingPong) {
 	 * requests/responses</i> is active. Otherwise WebSocket communication is
 	 * skipped.
 	 * 
-	 * @return
+	 * @return True if it should break on all HTTP requests/responses.
 	 */
 	public boolean isBreakOnAll() {
 		return isBreakOnAll;

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesPopupMenuItem.java
Patch:
@@ -79,15 +79,15 @@ public void actionPerformed(ActionEvent evt) {
 	/**
 	 * Which panel is allowed to show this popup item?
 	 * 
-	 * @return
+	 * @return Name of caller.
 	 */
 	abstract protected String getInvokerName();
 	
 	/**
 	 * More fine-grained control about enable-status of this item. Called by
 	 * {@link WebSocketMessagesPopupMenuItem#isEnableForComponent(Component)}.
 	 * 
-	 * @return
+	 * @return True
 	 */
 	protected boolean isEnabledExtended() {
 		return true;

File: src/org/zaproxy/zap/extension/websocket/ui/WiderDropdownJComboBox.java
Patch:
@@ -10,8 +10,7 @@
 import javax.swing.event.ListDataListener;
 
 /**
- * Got original code snippet from {@link http
- * ://tutiez.com/how-make-jcombobox-drop-down-width-as-wide-as-needed.html}.
+ * Got original code snippet from http://tutiez.com/how-make-jcombobox-drop-down-width-as-wide-as-needed.html
  */
 public class WiderDropdownJComboBox extends JComboBox {
 	private static final long serialVersionUID = -5796470611592964798L;

File: src/org/zaproxy/zap/extension/websocket/utility/Utf8Util.java
Patch:
@@ -47,7 +47,7 @@ public class Utf8Util {
 	 * Helper method to encode payload into UTF-8 string.
 	 * 
 	 * @param utf8bytes 
-	 * @return
+	 * @return readable representation
 	 * @throws InvalidUtf8Exception 
 	 */
 	public static String encodePayloadToUtf8(byte[] utf8bytes) throws InvalidUtf8Exception {
@@ -60,7 +60,7 @@ public static String encodePayloadToUtf8(byte[] utf8bytes) throws InvalidUtf8Exc
 	 * @param utf8bytes
 	 * @param offset
 	 * @param length
-	 * @return
+	 * @return readable representation
 	 * @throws InvalidUtf8Exception 
 	 */
 	public static String encodePayloadToUtf8(byte[] utf8bytes, int offset, int length) throws InvalidUtf8Exception {
@@ -89,7 +89,7 @@ public static String encodePayloadToUtf8(byte[] utf8bytes, int offset, int lengt
 	 * representation.
 	 * 
 	 * @param utf8string
-	 * @return
+	 * @return byte representation
 	 */
 	public static byte[] decodePayloadFromUtf8(String utf8string) {
 		synchronized (UTF8_CHARSET) {

File: src/org/zaproxy/zap/spider/SpiderListener.java
Patch:
@@ -27,8 +27,6 @@
  * registered with a component using the component's
  * <code>addSpiderListener<code> method. When  the spider event occurs, that object's appropriate
  * method is invoked.
- * 
- * @see SpiderEvent
  */
 public interface SpiderListener {
 

File: src/org/zaproxy/zap/spider/parser/SpiderParser.java
Patch:
@@ -62,7 +62,6 @@ public void removeSpiderParserListener(SpiderParserListener listener) {
 	 * @param message the http message containing the response.
 	 * @param depth the depth of this resource in the crawling tree
 	 * @param uri the uri
-	 * @param method the HTTP method that is required to fetch the resource
 	 */
 	protected void notifyListenersResourceFound(HttpMessage message, int depth, String uri) {
 		for (SpiderParserListener l : listeners)
@@ -90,7 +89,6 @@ protected void notifyListenersPostResourceFound(HttpMessage message, int depth,
 	 * @param depth the depth
 	 * @param localURL the local url
 	 * @param baseURL the base url
-	 * @param method the HTTP method that is required to fetch the resource
 	 */
 	protected void processURL(HttpMessage message, int depth, String localURL, String baseURL) {
 		// Build the absolute canonical URL

File: src/org/zaproxy/zap/utils/ZapTextArea.java
Patch:
@@ -38,8 +38,8 @@
  * </p>
  * 
  * @see #discardAllEdits()
+ * @see #setUndoManagerPolicy
  * @see #setEditsLimit(int)
- * @see #setUndoManagerPolicy(UndoManagerPolicy)
  * @see ZapTextComponentUndoManager
  */
 public class ZapTextArea extends JTextArea {

File: src/org/zaproxy/zap/utils/ZapTextField.java
Patch:
@@ -40,7 +40,7 @@
  * 
  * @see #discardAllEdits()
  * @see #setEditsLimit(int)
- * @see #setUndoManagerPolicy(UndoManagerPolicy)
+ * @see #setUndoManagerPolicy
  * @see ZapTextComponentUndoManager
  */
 public class ZapTextField extends JTextField {

File: src/org/zaproxy/zap/view/SiteMapTreeCellRenderer.java
Patch:
@@ -33,7 +33,7 @@
 import org.zaproxy.zap.extension.websocket.ui.WebSocketPanel;
 
 /**
- * Custom {@link TreeCellRenderer} for {@link SiteMapPanel} to set custom icons
+ * Custom renderer for {@link SiteMapPanel} to set custom icons
  * and tooltips. If you want tooltips you have to enable them via:
  * <code>ToolTipManager.sharedInstance().registerComponent(tree);</code>
  */

File: src/org/zaproxy/zap/spider/URLCanonicalizer.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.SortedMap;
 import java.util.TreeMap;
 
-import org.apache.log4j.BasicConfigurator;
 import org.apache.log4j.Logger;
 
 /**
@@ -132,10 +131,10 @@ public static String getCanonicalURL(String url, String baseURL) {
 			return result.toExternalForm();
 
 		} catch (MalformedURLException ex) {
-			log.error("Error while Processing URL in the spidering process (on base "+baseURL+"): " + ex.getMessage());
+			log.warn("Error while Processing URL in the spidering process (on base "+baseURL+"): " + ex.getMessage());
 			return null;
 		} catch (URISyntaxException ex) {
-			log.error("Error while Processing URI in the spidering process (on base "+baseURL+"): " + ex.getMessage());
+			log.warn("Error while Processing URI in the spidering process (on base "+baseURL+"): " + ex.getMessage());
 			return null;
 		}
 	}

File: src/org/zaproxy/zap/extension/lang/LangImporter.java
Patch:
@@ -104,13 +104,13 @@ public static void importLanguagePack(String languagePack) {
 			
 		} catch (IOException e) {
 			message = MSG_FILE_NOT_FOUND;
-			logger.error(e.getMessage());
+			logger.error(e.getMessage(), e);
 		} finally {
 			if (zipFile != null) {
 				try {
 					zipFile.close();
 				} catch (IOException e) {
-					logger.error(e.getMessage());
+					logger.error(e.getMessage(), e);
 				}
 			}
 		}

File: src/org/zaproxy/zap/extension/httpsessions/ExtensionHttpSessions.java
Patch:
@@ -390,7 +390,7 @@ public void onHttpRequestSend(HttpMessage msg, int initiator) {
 		this.getHttpSessionsPanel().addSite(site);
 
 		// Check if it's enabled for proxy only
-		if (param.isEnabledProxyOnly() && initiator != HttpSender.PROXY_INITIATOR)
+		if (getParam().isEnabledProxyOnly() && initiator != HttpSender.PROXY_INITIATOR)
 			return;
 
 		// Forward the request for proper processing
@@ -410,7 +410,7 @@ public void onHttpResponseReceive(HttpMessage msg, int initiator) {
 		this.getHttpSessionsPanel().addSite(site);
 
 		// Check if it's enabled for proxy only
-		if (param.isEnabledProxyOnly() && initiator != HttpSender.PROXY_INITIATOR)
+		if (getParam().isEnabledProxyOnly() && initiator != HttpSender.PROXY_INITIATOR)
 			return;
 
 		// Forward the request for proper processing

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsSite.java
Patch:
@@ -138,7 +138,7 @@ public void setActiveSession(HttpSession activeSession) {
 				this.removeHttpSession(this.activeSession);
 			else
 				// Notify the model that the session is updated
-				model.fireHttpSessionUpdated(activeSession);
+				model.fireHttpSessionUpdated(this.activeSession);
 		}
 		this.activeSession = activeSession;
 		activeSession.setActive(true);

File: src/org/zaproxy/zap/extension/spider/SpiderPanelTableModel.java
Patch:
@@ -110,7 +110,6 @@ public void removeAllElements() {
 		synchronized (scanResults) {
 			scanResults.clear();
 			fireTableDataChanged();
-			System.out.println("Cleanup");
 		}
 	}
 

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -65,8 +65,8 @@ public class SpiderThread extends ScanThread implements SpiderListener {
 	/** The spider done. */
 	private int spiderDone = 0;
 
-	/** The spider todo. */
-	private int spiderTodo = 100; // Will get updated ;)
+	/** The spider todo. It will be updated by the "spiderProgress()" method. */
+	private int spiderTodo = 1;
 
 	/** The Constant log used for logging. */
 	private static final Logger log = Logger.getLogger(SpiderThread.class);

File: src/org/parosproxy/paros/core/scanner/AbstractPlugin.java
Patch:
@@ -423,7 +423,7 @@ public AttackStrength getAttackStrength(boolean incDefault) {
 				level = this.defaultAttackStrength;
 			}
 			//log.debug("getAttackStrength default: " + level.name());
-		} else if (level.equals(AlertThreshold.DEFAULT)) {
+		} else if (level.equals(AttackStrength.DEFAULT)) {
 			if (incDefault) {
 				level = AttackStrength.DEFAULT;
 			} else {

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -364,6 +364,7 @@ public void setStartNode(SiteNode startNode) {
 	 * @see org.zaproxy.zap.model.GenericScanner#reset() */
 	@Override
 	public void reset() {
+		this.resultsModel.removeAllElements();
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/params/ParamsPanel.java
Patch:
@@ -315,7 +315,8 @@ private void siteSelected(String site) {
 		if (! site.equals(currentSite)) {
 			siteModel.setSelectedItem(site);
 			
-			this.getParamsTable().setModel(extension.getSiteParameters(site).getModel());
+			paramsModel=extension.getSiteParameters(site).getModel();
+			this.getParamsTable().setModel(paramsModel);
 			
 			this.setParamsTableColumnSizes();
 

File: src/org/zaproxy/zap/extension/websocket/WebSocketProxy.java
Patch:
@@ -647,10 +647,10 @@ public WebSocketChannelDTO getDTO() {
 				dto.url = handshakeRef.getHttpMessage().getRequestHeader().getURI().toString();
 			} catch (HttpMalformedHeaderException e) {
 				dto.url = "";
-				logger.error("HttpMessage for WebSockets-handshake not found!", e);
+				logger.error("HttpMessage for WebSockets-handshake not found!");
 			} catch (SQLException e) {
 				dto.url = "";
-				logger.error("HttpMessage for WebSockets-handshake not found!", e);
+				logger.error("HttpMessage for WebSockets-handshake not found!");
 			}
 			dto.historyId = handshakeRef.getHistoryId();
 		} else {

File: src/org/zaproxy/zap/extension/websocket/brk/WebSocketBreakpointMessage.java
Patch:
@@ -119,7 +119,6 @@ public void setDirection(Direction direction) {
 	@Override
 	public boolean match(Message aMessage, boolean onlyIfInScope) {
 	    if (aMessage instanceof WebSocketMessageDTO) {
-	    	// TODO: Add query for only if in scope!
 	        WebSocketMessageDTO msg = (WebSocketMessageDTO)aMessage;
 	        
 	        if (opcode != null) {

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesView.java
Patch:
@@ -31,7 +31,6 @@
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 import javax.swing.table.TableColumn;
-import javax.swing.table.TableModel;
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.view.View;

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketPanel.java
Patch:
@@ -37,7 +37,6 @@
 import javax.swing.JOptionPane;
 import javax.swing.JScrollPane;
 import javax.swing.JTabbedPane;
-import javax.swing.JTable;
 import javax.swing.JToolBar;
 import javax.swing.event.ListDataListener;
 

File: src/org/zaproxy/zap/extension/websocket/ui/httppanel/views/WebSocketFuzzableTextMessage.java
Patch:
@@ -62,6 +62,7 @@ public WebSocketFuzzMessageDTO fuzz(String fuzzString) throws Exception {
 		WebSocketFuzzMessageDTO fuzzedMessage = copyMessage(message);
 	    
 		if (!(fuzzedMessage.payload instanceof String)) {
+			// TODO: Exclude popup menu or support fuzzing binary payloads - why not?
 			throw new IllegalArgumentException("You cannot fuzz binary messages!");
 		}
 		String orig = (String) fuzzedMessage.payload;

File: src/org/zaproxy/zap/extension/websocket/utility/Utf8StringBuilder.java
Patch:
@@ -16,7 +16,7 @@
  * The UTF-8 code was inspired by http://javolution.org
  * 
  */
-public class Utf8StringBuilder 
+class Utf8StringBuilder 
 {
     StringBuilder _buffer;
     int _more;

File: src/org/zaproxy/zap/utils/StickyScrollbarAdjustmentListener.java
Patch:
@@ -21,8 +21,6 @@
 import java.awt.event.AdjustmentEvent;
 import java.awt.event.AdjustmentListener;
 
-import javax.swing.JScrollBar;
-
 /**
  * Returns a new instance of an {@link AdjustmentListener} that can be
  * applied to {@link JScrollBar#addAdjustmentListener(AdjustmentListener)}.

File: src/org/zaproxy/zap/extension/spider/SpiderPanelTableModel.java
Patch:
@@ -110,6 +110,7 @@ public void removeAllElements() {
 		synchronized (scanResults) {
 			scanResults.clear();
 			fireTableDataChanged();
+			System.out.println("Cleanup");
 		}
 	}
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderScope.java
Patch:
@@ -22,7 +22,6 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.model.SiteNode;
-import org.zaproxy.zap.extension.ascan.ExtensionActiveScan;
 import org.zaproxy.zap.extension.spider.ExtensionSpider;
 import org.zaproxy.zap.view.PopupMenuSiteNode;
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderSubtree.java
Patch:
@@ -22,7 +22,6 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.model.SiteNode;
-import org.zaproxy.zap.extension.ascan.ExtensionActiveScan;
 import org.zaproxy.zap.extension.spider.ExtensionSpider;
 import org.zaproxy.zap.view.PopupMenuSiteNode;
 

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuSpiderURL.java
Patch:
@@ -22,7 +22,6 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.model.SiteNode;
-import org.zaproxy.zap.extension.ascan.ExtensionActiveScan;
 import org.zaproxy.zap.extension.spider.ExtensionSpider;
 import org.zaproxy.zap.view.PopupMenuSiteNode;
 

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -390,7 +390,7 @@ private void initializeFilesAndDirectories() {
         	System.out.println("Failed to initialise locale " + e);
         }
         
-	    messages = ResourceBundle.getBundle(MESSAGES_PREFIX, locale);
+	    messages = ResourceBundle.getBundle("lang." + MESSAGES_PREFIX, locale);
     }
     
     private void copyProperty(XMLConfiguration fromConfig, XMLConfiguration toConfig, String key) {
@@ -428,7 +428,7 @@ private void upgradeFrom1_2_0(XMLConfiguration config) throws ConfigurationExcep
 	public static void setLocale (String loc) {
         String[] langArray = loc.split("_");
         locale = new Locale(langArray[0], langArray[1]);
-	    messages = ResourceBundle.getBundle(MESSAGES_PREFIX, locale);
+	    messages = ResourceBundle.getBundle("lang." + MESSAGES_PREFIX, locale);
     }
 	
 	public static Locale getLocale () {

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfToken.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.parosproxy.paros.network.HttpMessage;
 
-public class AntiCsrfToken {
+public class AntiCsrfToken implements Cloneable {
 
 	private HttpMessage msg; 
 	private String name;

File: src/org/zaproxy/zap/extension/params/SiteParameters.java
Patch:
@@ -85,6 +85,9 @@ public HtmlParameterStats addParam(String site, HtmlParameter param, HttpMessage
 				p.addFlag("session");
 			}
 			
+			if (params == null) {
+				params = new HashMap<String, HtmlParameterStats>();
+			}
 			params.put(param.getName(), p);
 			model.addHtmlParameterStats(p);
 		}

File: src/org/zaproxy/zap/extension/websocket/WebSocketMessageDTO.java
Patch:
@@ -22,7 +22,6 @@
 
 import org.apache.commons.lang.time.FastDateFormat;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.model.Model;
 import org.zaproxy.zap.extension.httppanel.Message;
 
 /**

File: src/org/zaproxy/zap/httputils/RequestUtils.java
Patch:
@@ -64,7 +64,8 @@ public static HttpRequestHeader changeMethod(String method, String header, Strin
 						sb.append('=');
 					}
 				}
-				body = sb.toString();
+				// fixed: dead store to variable body by commenting the following line
+				// body = sb.toString();
 				uri.setQuery(null);
 				hrh.setURI(uri);
 			}

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -296,7 +296,7 @@ public void start() {
 		this.threadPool = Executors.newFixedThreadPool(spiderParam.getThreadCount());
 
 		// Initialize the HTTP sender
-		httpSender = new HttpSender(connectionParam, true);
+		httpSender = new HttpSender(connectionParam, true, HttpSender.SPIDER_INITIATOR);
 		// Do not follow redirections because the request is not updated, the redirections will be
 		// handled manually.
 		httpSender.setFollowRedirect(false);

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -30,6 +30,8 @@
 // method processHttp().
 // ZAP: 2012/05/11 Do not close connections in final clause of run() method,
 // if boolean attribute keepSocketOpen is set to true.
+// ZAP: 2012/08/07 Issue 342 Support the HttpSenderListener
+
 package org.parosproxy.paros.core.proxy;
 
 import java.io.IOException;
@@ -620,7 +622,7 @@ private void modifyHeader(HttpMessage msg) {
 	protected HttpSender getHttpSender() {
 
 	    if (httpSender == null) {
-		    httpSender = new HttpSender(connectionParam, true);
+		    httpSender = new HttpSender(connectionParam, true, HttpSender.PROXY_INITIATOR);
 		}
 
 	    return httpSender;

File: src/org/parosproxy/paros/core/scanner/HostProcess.java
Patch:
@@ -29,6 +29,7 @@
 // creating a new Long.
 // ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 // ZAP: 2012/07/30 Issue 43: Added support for Scope
+// ZAP: 2012/08/07 Issue 342 Support the HttpSenderListener
 
 package org.parosproxy.paros.core.scanner;
 
@@ -73,7 +74,7 @@ public HostProcess(String hostAndPort, Scanner parentScanner, ScannerParam scann
         this.hostAndPort = hostAndPort;
         this.parentScanner = parentScanner;
         this.scannerParam = scannerParam;
-        httpSender = new HttpSender(connectionParam, true);
+        httpSender = new HttpSender(connectionParam, true, HttpSender.ACTIVE_SCANNER_INITIATOR);
         if (scannerParam.getHandleAntiCSRFTokens()) {
         	// Single thread if handling anti CSRF tokens, otherwise token requests might get out of step
         	threadPool = new ThreadPool(1);

File: src/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java
Patch:
@@ -122,7 +122,9 @@ public void cleanup() {
     
     private HttpSender getDelegate() {
         if (delegate == null) {
-            delegate = new HttpSender(Model.getSingleton().getOptionsParam().getConnectionParam(), getButtonUseTrackingSessionState().isSelected());
+            delegate = new HttpSender(Model.getSingleton().getOptionsParam().getConnectionParam(), 
+            				getButtonUseTrackingSessionState().isSelected(),
+            				HttpSender.MANUAL_REQUEST_INITIATOR);
         }
         return delegate;
     }

File: src/org/zaproxy/zap/extension/autoupdate/CheckForUpdates.java
Patch:
@@ -160,7 +160,7 @@ private String getLatestVersionNameFromUrl(String url) {
 
     private HttpSender getHttpSender() {
         if (httpSender == null) {
-            httpSender = new HttpSender(Model.getSingleton().getOptionsParam().getConnectionParam(), true);
+            httpSender = new HttpSender(Model.getSingleton().getOptionsParam().getConnectionParam(), true, HttpSender.CHECK_FOR_UPDATES_INITIATOR);
         }
         return httpSender;
     }

File: src/org/zaproxy/zap/extension/beanshell/BeanShellConsoleFrame.java
Patch:
@@ -340,7 +340,7 @@ private JPanel getJPanel() {
 			gbc.fill = java.awt.GridBagConstraints.BOTH;
 			gbc.anchor = java.awt.GridBagConstraints.NORTHWEST;
 			
-			HttpSender sender = new HttpSender(Model.getSingleton().getOptionsParam().getConnectionParam(), true);
+			HttpSender sender = new HttpSender(Model.getSingleton().getOptionsParam().getConnectionParam(), true, HttpSender.BEAN_SHELL_INITIATOR);
 			try {
 				getInterpreter().set("model", Model.getSingleton());
 				getInterpreter().set("sites", Model.getSingleton().getSession().getSiteTree());

File: src/org/zaproxy/zap/extension/fuzz/FuzzProcess.java
Patch:
@@ -76,7 +76,7 @@ public void run() {
 			// To support wizards etc need to loop back up the messages for previous tokens
 			try {
 				HttpMessage tokenMsg = this.acsrfToken.getMsg().cloneAll();
-				HttpSender httpSender = new HttpSender(connectionParam, true);
+				HttpSender httpSender = new HttpSender(connectionParam, true, HttpSender.FUZZER_INITIATOR);
 
 				httpSender.sendAndReceive(tokenMsg);
 
@@ -113,7 +113,7 @@ public void run() {
 			// Correct the content length for the above changes
 	        msg.getRequestHeader().setContentLength(msg.getRequestBody().length());
 			
-			HttpSender httpSender = new HttpSender(connectionParam, true);
+			HttpSender httpSender = new HttpSender(connectionParam, true, HttpSender.FUZZER_INITIATOR);
 			if (followRedirects) {
 				httpSender.setFollowRedirect(true);
 			}

File: src/org/zaproxy/zap/extension/httpsessions/HttpSessionsPanel.java
Patch:
@@ -94,7 +94,7 @@ private void initialize() {
 		this.setSize(474, 251);
 		this.setName(Constant.messages.getString("httpsessions.panel.title"));
 		this.setIcon(new ImageIcon(HttpSessionsPanel.class.getResource("/resource/icon/16/session.png")));
-		this.add(getPanelCommand());
+		this.add(getPanelCommand(), getPanelCommand().getName());
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/websocket/fuzz/WebSocketFuzzerHandler.java
Patch:
@@ -98,6 +98,9 @@ public boolean onMessageFrame(int channelId, WebSocketMessage message) {
 		return true;
 	}
 
+	/**
+	 * Keeps track of active WebSocket proxies.
+	 */
 	@Override
 	public void onStateChange(State state, WebSocketProxy proxy) {
 		if (proxy.isConnected()) {

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesView.java
Patch:
@@ -42,7 +42,6 @@
 /**
  * Encapsulates a {@link JTable} that is used to display WebSocket
  * messages. It expects a {@link TableModel} from the outside.
- * TODO: Limit characters of payload/fuzz shown in table. Use ViewTooltips for overfloating content?
  */
 public class WebSocketMessagesView implements Runnable {
 	private static final Logger logger = Logger.getLogger(WebSocketMessagesView.class);

File: src/org/zaproxy/zap/extension/brk/BreakpointMessageInterface.java
Patch:
@@ -26,7 +26,7 @@ public interface BreakpointMessageInterface {
 
     String getType();
     
-    boolean match(Message aMessage);
+    boolean match(Message aMessage, boolean onlyIfInScope);
 
     void setEnabled(boolean enabled);
 

File: src/org/zaproxy/zap/extension/httppanel/Message.java
Patch:
@@ -1,5 +1,5 @@
 package org.zaproxy.zap.extension.httppanel;
 
 public interface Message {
-
+	public boolean isInScope();
 }

File: src/org/zaproxy/zap/extension/websocket/brk/WebSocketBreakpointMessage.java
Patch:
@@ -117,7 +117,8 @@ public void setDirection(Direction direction) {
 	}
 
 	@Override
-	public boolean match(Message aMessage) {
+	public boolean match(Message aMessage, boolean onlyIfInScope) {
+		// TODO implement onlyIfInScope
 	    if (aMessage instanceof WebSocketMessageDAO) {			
 	        WebSocketMessageDAO msg = (WebSocketMessageDAO)aMessage;
 	        

File: src/org/zaproxy/zap/extension/httppanel/view/largeresponse/LargeResponseUtil.java
Patch:
@@ -23,7 +23,7 @@
 
 class LargeResponseUtil {
     
-    private static final int DEFAULT_MIN_CONTENT_LENGTH = 10000;
+    private static final int DEFAULT_MIN_CONTENT_LENGTH = ExtensionHttpPanelLargeResponseView.MIN_CONTENT_LENGTH;
     
     private static int minContentLength = DEFAULT_MIN_CONTENT_LENGTH;
     

File: src/org/zaproxy/zap/extension/spider/PopupMenuSpiderSite.java
Patch:
@@ -68,7 +68,7 @@ public void performAction(SiteNode node) throws Exception {
 			while (node.getParent() != null && node.getParent().getParent() != null) {
 				node = (SiteNode) node.getParent();
 			}
-	    	extension.spiderSite(node, false);
+	    	extension.spiderSite(node, true);
 	    }
 	}
 

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -150,8 +150,8 @@ private ActiveScanPanel getActiveScanPanel() {
 		return activeScanPanel;
 	}
 	
-	public void startScan() {
-		this.getActiveScanPanel().scanSite();
+	public void startScanAllInScope() {
+		this.getActiveScanPanel().scanAllInScope();
 	}
 
 	public void startScan(SiteNode startNode) {

File: src/org/zaproxy/zap/extension/stdmenus/PopupMenuActiveScanScope.java
Patch:
@@ -63,7 +63,7 @@ public int getParentMenuIndex() {
 
 	@Override
 	public void performAction(SiteNode node) throws Exception {
-    	extension.startScan();
+    	extension.startScanAllInScope();
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/websocket/fuzz/WebSocketFuzzMessagesViewModel.java
Patch:
@@ -205,7 +205,7 @@ protected List<WebSocketMessageDAO> loadPage(int offset, int length) {
 			int erroneousRowCount = erroneousMessages.size();
 		
 			if ((offset + 1) >= sqlRowCount) {
-				offset = offset - sqlRowCount;
+				offset = offset - (sqlRowCount - 1);
 				return new ArrayList<WebSocketMessageDAO>(erroneousMessages.subList(offset, Math.min(erroneousRowCount, offset + length)));
 			} else if (offset + length >= sqlRowCount) {
 				int sqlLength = sqlRowCount - offset;

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketPanel.java
Patch:
@@ -465,6 +465,7 @@ public void onStateChange(State state, WebSocketProxy proxy) {
 				if (!isConnectedChannel && dao.endTimestamp == null) {
 					connectedChannelIds.add(dao.channelId);
 					channelSelectModel.addElement(dao);
+					isNewChannel = true;
 				}
 				break;
 	            
@@ -485,7 +486,7 @@ public void onStateChange(State state, WebSocketProxy proxy) {
 		if (connectedChannelsCount == 0) {
 			// change icon, as no WebSocket channel is active
 			updateIcon(WebSocketPanel.disconnectIcon);
-		} else if (connectedChannelsCount == 1 && isNewChannel) {
+		} else if (connectedChannelsCount > 0 && isNewChannel) {
 			// change icon, as at least one WebSocket is available
 			updateIcon(WebSocketPanel.connectIcon);
 		}

File: src/org/zaproxy/zap/extension/websocket/ui/ComboBoxChannelModel.java
Patch:
@@ -61,7 +61,7 @@ public void setSelectedChannelId(Integer channelId) {
 		
 		for (int i = 0; i < getSize(); i++) {
 			WebSocketChannelDAO dao = (WebSocketChannelDAO) getElementAt(i);
-			if (dao.channelId.equals(channelId)) {
+			if (dao.channelId != null && dao.channelId.equals(channelId)) {
 				setSelectedItem(dao);
 				return;
 			}

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketPanel.java
Patch:
@@ -692,6 +692,8 @@ public void showMessage(WebSocketMessageDAO message) throws WebSocketException {
 		if (filter.isBlacklisted(message)) {
 			// make it visible by resetting filter
 			filter.reset();
+		    setFilterStatus();
+			applyFilter();
 		}
 		
 		// select message and scroll there

File: src/org/zaproxy/zap/extension/httppanel/component/all/response/HttpResponseAllPanelTextView.java
Patch:
@@ -49,7 +49,7 @@ protected static class HttpResponseAllPanelTextArea extends HttpPanelTextArea {
 
 		@Override
 		public void search(Pattern p, List<SearchMatch> matches) {
-			HttpMessage httpMessage = getHttpMessage();
+			HttpMessage httpMessage = (HttpMessage)getMessage();
 			//This only happens in the Request/Response Header
 			//As we replace all \r\n with \n we must add one character
 			//for each line until the line where the selection is.

File: src/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/HttpPanelSyntaxHighlightTextView.java
Patch:
@@ -89,7 +89,6 @@ public void mouseReleased(java.awt.event.MouseEvent e) {
 		mainPanel.add(scrollPane, BorderLayout.CENTER);
 	}
 	
-	
 	protected abstract HttpPanelSyntaxHighlightTextArea createHttpPanelTextArea();
 	
 	@Override
@@ -146,8 +145,7 @@ public HttpPanelViewModel getModel() {
 	
 	@Override
 	public void dataChanged(HttpPanelViewModelEvent e) {
-        // FIXME(Remove the dependency on the implementation HttpMessage)
-		//httpPanelTextArea.setHttpMessage((HttpMessage)model.getMessage());
+		httpPanelTextArea.setMessage(model.getMessage());
 		
 		final boolean isEditable = httpPanelTextArea.isEditable();
 		final boolean empty = model.getData().isEmpty();

File: src/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/components/all/response/HttpResponseAllPanelSyntaxHighlightTextView.java
Patch:
@@ -59,7 +59,7 @@ public HttpResponseAllPanelSyntaxHighlightTextArea() {
 		
 		@Override
 		public void search(Pattern p, List<SearchMatch> matches) {
-			HttpMessage httpMessage = getHttpMessage();
+			HttpMessage httpMessage = (HttpMessage)getMessage();
 			//This only happens in the Request/Response Header
 			//As we replace all \r\n with \n we must add one character
 			//for each line until the line where the selection is.

File: src/org/zaproxy/zap/extension/httppanel/view/text/HttpPanelTextView.java
Patch:
@@ -79,7 +79,6 @@ public void mouseReleased(java.awt.event.MouseEvent e) {
 		mainPanel.add(new JScrollPane(httpPanelTextArea), BorderLayout.CENTER);
 	}
 	
-	
 	protected abstract HttpPanelTextArea createHttpPanelTextArea();
 	
 	@Override
@@ -139,8 +138,7 @@ public HttpPanelViewModel getModel() {
 	
 	@Override
 	public void dataChanged(HttpPanelViewModelEvent e) {
-	    // FIXME(Remove the dependency on the implementation HttpMessage)
-		//httpPanelTextArea.setHttpMessage((HttpMessage)model.getMessage());
+		httpPanelTextArea.setMessage(model.getMessage());
 		
 		httpPanelTextArea.setText(model.getData());
 		httpPanelTextArea.setCaretPosition(0);

File: src/org/zaproxy/zap/extension/websocket/WebSocketException.java
Patch:
@@ -22,8 +22,8 @@
 /**
  * Reports a WebSocket-specific error.
  */
-@SuppressWarnings("serial")
 public class WebSocketException extends IOException {
+	private static final long serialVersionUID = -4708303277965511632L;
 
 	public WebSocketException() {
 		super();

File: src/org/zaproxy/zap/extension/websocket/ui/ExcludeFromWebSocketSessionPanel.java
Patch:
@@ -32,7 +32,7 @@
 import org.parosproxy.paros.view.AbstractParamPanel;
 import org.zaproxy.zap.view.SingleColumnTableModel;
 
-public class SessionExcludeFromWebSocketPanel extends AbstractParamPanel {
+public class ExcludeFromWebSocketSessionPanel extends AbstractParamPanel {
 	public static final String PANEL_NAME = Constant.messages.getString("websocket.session.exclude.title");
 	private static final long serialVersionUID = -1000465438379563850L;
 
@@ -41,7 +41,7 @@ public class SessionExcludeFromWebSocketPanel extends AbstractParamPanel {
 	private JScrollPane jScrollPane = null;
 	private SingleColumnTableModel model = null;
 
-	public SessionExcludeFromWebSocketPanel() {
+	public ExcludeFromWebSocketSessionPanel() {
 		super();
 		initialize();
 	}

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketMessagesViewFilter.java
Patch:
@@ -28,7 +28,7 @@
  * Used as filter for the {@link WebSocketPanel}, which is applied in the
  * {@link WebSocketPanelCellRenderer}.
  */
-public class WebSocketTableModelFilter {
+public class WebSocketMessagesViewFilter {
 
 	/**
 	 * Contains a sublist of {@link WebSocketMessage#OPCODES} or nothing, if not

File: src/org/zaproxy/zap/extension/websocket/utility/LazyViewport.java
Patch:
@@ -15,7 +15,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-package org.zaproxy.zap.extension.websocket.ui;
+package org.zaproxy.zap.extension.websocket.utility;
 
 import javax.swing.JViewport;
 import javax.swing.JScrollPane;

File: src/org/zaproxy/zap/extension/websocket/utility/PagingTableModel.java
Patch:
@@ -15,7 +15,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-package org.zaproxy.zap.extension.websocket.ui;
+package org.zaproxy.zap.extension.websocket.utility;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -64,7 +64,7 @@ public abstract class PagingTableModel<T> extends AbstractTableModel {
 	 * @param columnIndex
 	 * @return
 	 */
-	protected abstract Object getColumnValue(T rowObject, int columnIndex);
+	protected abstract Object getWebSocketValueAt(T rowObject, int columnIndex);
 
 	/**
 	 * Value returned is used to display while loading entry.
@@ -93,7 +93,7 @@ public final Object getValueAt(int rowIndex, int columnIndex) {
 			return getPlaceholderValueAt(columnIndex);
 		}
 		
-		return getColumnValue(rowObject, columnIndex);
+		return getWebSocketValueAt(rowObject, columnIndex);
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/websocket/utility/Utf8StringBuilder.java
Patch:
@@ -1,6 +1,6 @@
 // CHECKSTYLE_OFF
 // Copied verbatim (other than these lines) from jetty-util trunk @r1179.
-package org.zaproxy.zap.extension.websocket;
+package org.zaproxy.zap.extension.websocket.utility;
 
 
 /* ------------------------------------------------------------ */

File: src/org/zaproxy/zap/view/HighlightSearchEntry.java
Patch:
@@ -17,8 +17,7 @@
  * The UI which wants to implement highlights has to find the strings
  * for itself.
  * 
- * TODO:
- * Add Regex or similar, not only 
+ * TODO: Add Regex or similar, not only 
  */
 public class HighlightSearchEntry {
 

File: src/org/parosproxy/paros/extension/history/PopupMenuEmbeddedBrowser.java
Patch:
@@ -21,6 +21,8 @@
 // ZAP: 2012/01/12 Reflected the rename of the class ExtensionPopupMenu to
 // ExtensionPopupMenuItem.
 // ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
+// ZAP: 2012/07/29 Issue 43: Cleaned up access to ExtensionHistory UI
+
 package org.parosproxy.paros.extension.history;
 
 import java.awt.Component;
@@ -88,9 +90,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
                     return;
                 }
                 if (lastInvoker.getName().equalsIgnoreCase("ListLog")) {
-                    JList listLog = extension.getLogPanel().getListLog();
-                    
-                    ref = (HistoryReference) listLog.getSelectedValue();
+                    ref = extension.getSelectedHistoryReference();
                     showBrowser(ref);                                   
 
                 } else if (lastInvoker.getName().equals("treeSite")) {

File: src/org/parosproxy/paros/view/PopupPurgeMenu.java
Patch:
@@ -23,6 +23,7 @@
 // ZAP: 2012/03/15 Changed so no ConcurrentModificationException is thrown.
 // ZAP: 2012/04/23 Added @Override annotation to all appropriate methods.
 // ZAP: 2012/06/01 Issue 310 prevent infinite loop when deleting nodes
+// ZAP: 2012/07/29 Issue 43: Cleaned up access to ExtensionHistory UI
 
 package org.parosproxy.paros.view;
 
@@ -130,7 +131,7 @@ public static void purge(SiteMap map, SiteNode node) {
 
             // delete reference in node
             ExtensionHistory ext = (ExtensionHistory) Control.getSingleton().getExtensionLoader().getExtension("ExtensionHistory");
-            ext.getHistoryList().removeElement(node.getHistoryReference());
+            ext.removeFromHistoryList(node.getHistoryReference());
 
     		ExtensionAlert extAlert = (ExtensionAlert) Control.getSingleton().getExtensionLoader().getExtension(ExtensionAlert.NAME);
 
@@ -155,7 +156,7 @@ public static void purge(SiteMap map, SiteNode node) {
         				ref.getAlerts().remove(0);
         			}
 	            }
-                ext.getHistoryList().removeElement(ref);
+                ext.removeFromHistoryList(ref);
                 ref.delete();
                 node.getPastHistoryReference().remove(0);
             }

File: src/org/zaproxy/zap/extension/history/AlertAddDialog.java
Patch:
@@ -219,7 +219,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 							// Update history tree
 							if (historyRef != null) {
 								historyRef.updateAlert(alert);
-			                    extension.getHistoryList().notifyItemChanged(historyRef);
+			                    extension.notifyHistoryItemChanged(historyRef);
 							}
 
 						} else {
@@ -228,7 +228,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 						    }
 						    
 							historyRef.addAlert(alert);
-		                    extension.getHistoryList().notifyItemChanged(historyRef);
+		                    extension.notifyHistoryItemChanged(historyRef);
 						    // Raise it
 							if (extAlert != null) {
 								extAlert.alertFound(alert, historyRef);

File: src/org/zaproxy/zap/extension/history/ManageTagsDialog.java
Patch:
@@ -221,7 +221,7 @@ private void save() {
 		for (String tag : deletedTags) {
 			historyRef.deleteTag(tag);
 		}
-        extension.getHistoryList().notifyItemChanged(historyRef);
+        extension.notifyHistoryItemChanged(historyRef);
 	}
 	
 	private void addTag (String tag) {

File: src/org/zaproxy/zap/extension/history/NotesAddDialog.java
Patch:
@@ -170,7 +170,7 @@ private JButton getBtnOk() {
 				public void actionPerformed(java.awt.event.ActionEvent e) {
                     historyRef.setNote(getTxtDisplay().getText());
                     getTxtDisplay().discardAllEdits();
-                    extension.getHistoryList().notifyItemChanged(historyRef);
+                    extension.notifyHistoryItemChanged(historyRef);
 				    extension.hideNotesAddDialog();
 				}
 			});

File: src/org/zaproxy/zap/extension/history/PopupMenuNote.java
Patch:
@@ -70,8 +70,7 @@ private void initialize() {
         	@Override
         	public void actionPerformed(java.awt.event.ActionEvent e) {
         	    
-        	    JList listLog = extension.getLogPanel().getListLog();
-        	    HistoryReference ref = (HistoryReference) listLog.getSelectedValue();
+        	    HistoryReference ref = extension.getSelectedHistoryReference();
         	    HttpMessage msg = null;
         	    try {
                     msg = ref.getHttpMessage();

File: src/org/zaproxy/zap/extension/stdmenus/PopupExcludeFromProxyMenu.java
Patch:
@@ -66,8 +66,7 @@ private static void purge(SiteMap map, SiteNode node) {
            // delete reference in node
            ExtensionHistory ext = (ExtensionHistory) Control.getSingleton().getExtensionLoader().getExtension("ExtensionHistory");
            if (ext != null) {
-        	   // TODO shouldnt be allowed direct access to this!
-        	   ext.getHistoryList().removeElement(node.getHistoryReference());
+        	   ext.removeFromHistoryList(node.getHistoryReference());
            }
 
            if (node.getHistoryReference()!= null) {
@@ -78,7 +77,7 @@ private static void purge(SiteMap map, SiteNode node) {
            while (node.getPastHistoryReference().size() > 0) {
                HistoryReference ref = node.getPastHistoryReference().get(0);
                if (ext != null) {
-            	   ext.getHistoryList().removeElement(ref);
+            	   ext.removeFromHistoryList(ref);
                }
                ref.delete();
                node.getPastHistoryReference().remove(0);

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -459,12 +459,14 @@ private void refreshScope(SiteNode node) {
 	private void refreshScope() {
         if (EventQueue.isDispatchThread()) {
         	refreshScope((SiteNode) siteTree.getRoot());
+        	Control.getSingleton().sessionScopeChanged();
         } else {
             try {
                 EventQueue.invokeLater(new Runnable() {
                     @Override
                     public void run() {
                     	refreshScope((SiteNode) siteTree.getRoot());
+                    	Control.getSingleton().sessionScopeChanged();
                     }
                 });
             } catch (Exception e) {
@@ -535,7 +537,6 @@ public void setIncludeInScopeRegexs(List<String> includeRegexs) throws Exception
 		    }
 		    if (!changed) {
 		    	// No point reapplying the same regexs
-System.out.println("SBSB inc no change :)");
 		    	return;
 		    }
 		}
@@ -578,7 +579,6 @@ public void setExcludeFromScopeRegexs(List<String> excludeRegexs) throws Excepti
 		    }
 		    if (!changed) {
 		    	// No point reapplying the same regexs
-System.out.println("SBSB inc no change :)");
 		    	return;
 		    }
 		}

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -500,4 +500,7 @@ public URL getURL() {
 		}
 	}
 
+	@Override
+	public void sessionScopeChanged(Session session) {
+	}
 }

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -257,6 +257,9 @@ private void sessionChangedEventHandler(Session session) {
 		}
 	}
 
+	@Override
+	public void sessionScopeChanged(Session session) {
+	}
 
 	/**
 	 * This method initializes optionsScannerPanel	

File: src/org/parosproxy/paros/db/RecordSessionUrl.java
Patch:
@@ -30,6 +30,8 @@ public class RecordSessionUrl {
 	public static final int TYPE_EXCLUDE_FROM_PROXY = 1;
 	public static final int TYPE_EXCLUDE_FROM_SCAN = 2;
 	public static final int TYPE_EXCLUDE_FROM_SPIDER = 3;
+	public static final int TYPE_EXCLUDE_FROM_SCOPE = 4;
+	public static final int TYPE_INCLUDE_IN_SCOPE = 5;
 	
     private long urlId = 0;
     private int type = 0;

File: src/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -175,11 +175,11 @@ public void setHistoryReference(HistoryReference historyReference) {
 //                getPastHistoryReference().add(getHistoryReference());
 //            }
             
-        	if (this.justSpidered && this.clearIfManual && historyReference.getHistoryType() == HistoryReference.TYPE_MANUAL) {
+        	if (this.justSpidered && historyReference.getHistoryType() == HistoryReference.TYPE_MANUAL) {
         		this.justSpidered = false;
         		this.nodeChanged();
         	}
-        	if (this.specificIcon && historyReference.getHistoryType() == HistoryReference.TYPE_MANUAL) {
+        	if (this.specificIcon && this.clearIfManual && historyReference.getHistoryType() == HistoryReference.TYPE_MANUAL) {
     			this.specificIcon = false;
     			this.nodeChanged();
     		}

File: src/org/zaproxy/zap/extension/websocket/ui/ComboBoxChannelModel.java
Patch:
@@ -16,7 +16,7 @@ public ComboBoxChannelModel() {
 	 * Adds first element that is used as a wildcard entry.
 	 */
 	private void init() {
-		String text = Constant.messages.getString("websocket.toolbar.channel.select");
+		String text = Constant.messages.getString("websocket.dialog.channel.select_all");
 		WebSocketChannelDAO allChannelsItem = new WebSocketChannelDAO(text);
 		addElement(allChannelsItem);
 	}
@@ -39,7 +39,8 @@ public void reset() {
 	public void updateElement(WebSocketChannelDAO dao) {
 		synchronized (this) {
 			boolean isSelected = false;
-			if (getSelectedItem().equals(dao)) {
+			Object selectedItem = getSelectedItem();
+			if (selectedItem != null && selectedItem.equals(dao)) {
 				isSelected = true;
 			}
 			

File: src/org/parosproxy/paros/control/MenuFileControl.java
Patch:
@@ -28,6 +28,7 @@
 // class Control.
 // ZAP: 2012/07/02 Changed to use the new database compact option in the method
 // exit().
+// ZAP: 2012/07/23 Removed parameter from View.getSessionDialog call.
 
 package org.parosproxy.paros.control;
  
@@ -251,7 +252,8 @@ private void setTitle() {
 	}
 	
 	public void properties() {
-	    SessionDialog dialog = view.getSessionDialog(Constant.messages.getString("session.properties.title"));	// ZAP: i18n
+		// ZAP: removed session dialog parameter
+	    SessionDialog dialog = view.getSessionDialog();
 	    dialog.initParam(model.getSession());
 	    dialog.showDialog(false);
 

File: src/org/parosproxy/paros/db/RecordSessionUrl.java
Patch:
@@ -17,6 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
+// ZAP: 2012/07/23 Added constant TYPE_EXCLUDE_FROM_WEBSOCKET.
 
 package org.parosproxy.paros.db;
 
@@ -30,6 +31,7 @@ public class RecordSessionUrl {
 	public static final int TYPE_EXCLUDE_FROM_PROXY = 1;
 	public static final int TYPE_EXCLUDE_FROM_SCAN = 2;
 	public static final int TYPE_EXCLUDE_FROM_SPIDER = 3;
+	public static final int TYPE_EXCLUDE_FROM_WEBSOCKET = 4;
 	
     private long urlId = 0;
     private int type = 0;

File: src/org/zaproxy/zap/extension/websocket/brk/WebSocketBreakpointMessage.java
Patch:
@@ -128,7 +128,7 @@ public boolean match(Message aMessage) {
 	        }
 	        
 	        if (channelId != null) {
-	        	if (msg.channelId != channelId) {
+	        	if (!channelId.equals(msg.channelId)) {
 		        	return false;
 		        }
 	        }

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketTableModelFilter.java
Patch:
@@ -80,7 +80,7 @@ public void reset() {
 	 */
 	public boolean isBlacklisted(WebSocketMessageDAO message) {
 		if (opcodeList != null) {
-			if (!opcodeList.contains(message.readableOpcode)) {
+			if (!opcodeList.contains(message.opcode)) {
 				return true;
 			}
 		}

File: src/org/zaproxy/zap/junit/WebSocketsTest.java
Patch:
@@ -170,7 +170,7 @@ public void getAutobahnCaseCount() throws HttpException {
 		
 		// now I would send back a close frame and close the physical socket connection
 	}
-
+// requires Autobahn to be running via "wstest -m fuzzingserver"
 //	@Test
 	public void doAutobahnTest() throws HttpException {
 		// use HTTP-client with custom connection manager
@@ -203,7 +203,6 @@ public void doAutobahnTest() throws HttpException {
 		} catch (IOException e) {
 			assertTrue("reading websocket frame failed", false);
 		}
-		System.err.println(dst);
 	}
 
 //	/**

File: src/org/parosproxy/paros/model/OptionsParam.java
Patch:
@@ -200,6 +200,8 @@ protected void parse() {
 		getBruteForceParam().load(getConfig());
 		getExperimentalFeaturesParam().load(getConfig());
 		getSessionParam().load(getConfig());
+        // ZAP: Added the statement.
+        getWebSocketParam().load(getConfig());
 		// ZAP: Added the statement.
         getDatabaseParam().load(getConfig());
 		

File: src/org/zaproxy/zap/ZapHttpConnectionManager.java
Patch:
@@ -19,8 +19,6 @@
  */
 package org.zaproxy.zap;
 
-import java.net.Socket;
-
 import org.apache.commons.httpclient.HostConfiguration;
 import org.apache.commons.httpclient.HttpConnection;
 import org.apache.commons.httpclient.SimpleHttpConnectionManager;

File: src/org/zaproxy/zap/extension/brk/ExtensionBreak.java
Patch:
@@ -37,7 +37,6 @@
 import org.zaproxy.zap.extension.brk.impl.http.ProxyListenerBreak;
 import org.zaproxy.zap.extension.help.ExtensionHelp;
 import org.zaproxy.zap.extension.httppanel.Message;
-import org.zaproxy.zap.extension.websocket.WebSocketMessage;
 
 public class ExtensionBreak extends ExtensionAdaptor implements SessionChangedListener {
 

File: src/org/zaproxy/zap/extension/httppanel/component/HttpPanelComponentInterface.java
Patch:
@@ -45,6 +45,8 @@ public interface HttpPanelComponentInterface {
 	
 	JPanel getOptionsPanel();
 	
+    JPanel getMoreOptionsPanel();
+	
 	// Set a new Message for this Component
 	// For example, the user selects a new message in the history tab. 
 	// The component should update it's models accordingly.

File: src/org/zaproxy/zap/extension/httppanel/view/syntaxhighlight/HttpPanelSyntaxHighlightTextView.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.commons.configuration.FileConfiguration;
 import org.fife.ui.rtextarea.RTextScrollPane;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.httppanel.Message;
 import org.zaproxy.zap.extension.httppanel.view.AbstractStringHttpPanelViewModel;

File: src/org/zaproxy/zap/extension/websocket/ui/OptionsWebSocketPanel.java
Patch:
@@ -323,6 +323,7 @@ private void deleteEditForm() {
 	}
 
 	private void saveEditForm() {
+	    // FIXME Consider using the class ZapPortNumberSpinner or validate the port in the method validateParam.
 		CommunicationChannel channel = new CommunicationChannel(editDomain.getText(), new Integer(editPort.getText()));
 
 		if (originsTable.getSelectedRow() > -1) {

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketPanel.java
Patch:
@@ -42,7 +42,6 @@
 import javax.swing.JComboBox;
 import javax.swing.JComponent;
 import javax.swing.JLabel;
-import javax.swing.JList;
 import javax.swing.JOptionPane;
 import javax.swing.JScrollPane;
 import javax.swing.JTabbedPane;

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketTableModel.java
Patch:
@@ -22,12 +22,10 @@
 import java.util.ResourceBundle;
 import java.util.Vector;
 
-import javax.swing.table.AbstractTableModel;
-
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
-import org.zaproxy.zap.extension.websocket.WebSocketMessageDAO;
 import org.zaproxy.zap.extension.websocket.WebSocketMessage.Direction;
+import org.zaproxy.zap.extension.websocket.WebSocketMessageDAO;
 import org.zaproxy.zap.extension.websocket.db.TableWebSocket;
 import org.zaproxy.zap.extension.websocket.db.WebSocketMessagePrimaryKey;
 

File: src/org/zaproxy/zap/view/SiteMapTreeCellRenderer.java
Patch:
@@ -24,11 +24,9 @@
 import javax.swing.Icon;
 import javax.swing.JTree;
 import javax.swing.tree.DefaultTreeCellRenderer;
-import javax.swing.tree.TreeCellRenderer;
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.control.Control;
-import org.parosproxy.paros.model.SiteMap;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.SiteMapPanel;

File: src/org/zaproxy/zap/view/ScanPanel.java
Patch:
@@ -654,7 +654,7 @@ public void run() {
 	                }
 	            });
 	        } catch (InterruptedException e) {
-				log.info("Interupt scan progress update on GUI.");
+				log.info("Interrupt scan progress update on GUI.");
 			} 
 	        catch (Exception e) {
 	            log.error(e.getMessage(), e);

File: src/org/zaproxy/zap/extension/spider/OptionsSpiderPanel.java
Patch:
@@ -52,7 +52,7 @@ public class OptionsSpiderPanel extends AbstractParamPanel {
 	/** The Constant serialVersionUID. */
 	private static final long serialVersionUID = -5623691753271231473L;
 
-	/** The full panel for the spideroptions. */
+	/** The full panel for the spider options. */
 	private JPanel panelSpider = null;
 
 	// The controls for the options:
@@ -215,7 +215,7 @@ public void initParam(Object obj) {
 		SpiderParam param = (SpiderParam) options.getParamSet(SpiderParam.class);
 		getSliderMaxDepth().setValue(param.getMaxDepth());
 		getSliderThreads().setValue(param.getThreadCount());
-		getDomainScopeTextArea().setText(param.getScopeString());
+		getDomainScopeTextArea().setText(param.getScopeText());
 		getDomainScopeTextArea().discardAllEdits();
 		getChkProcessForm().setSelected(param.isProcessForm());
 		getChkPostForm().setSelected(param.isPostForm());

File: src/org/parosproxy/paros/network/HttpMessage.java
Patch:
@@ -24,6 +24,7 @@
 // Changed to use the byte[] body. Changed to use the class StringBuilder instead
 // of StringBuffer. Reworked some methods.
 // ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
+// ZAP: 2012/06/24 Added method to add Cookies of type java.net.HttpCookie to request header
 
 package org.parosproxy.paros.network;
 
@@ -799,7 +800,7 @@ public void setCookieParams(TreeSet<HtmlParameter> cookieParams) {
 	}
 	
 	// Rewrite cookie line in the Request Header,
-	// based on values in cookieParams
+	// based on values in cookies
 	public void setCookies(List<HttpCookie> cookies) {
 		mReqHeader.setCookies(cookies);
 	}

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -29,6 +29,7 @@
 //      validate the variable version instead of the variable method.
 // ZAP: 2012/03/15 Changed to use the class StringBuilder instead of StringBuffer. Reworked some methods.
 // ZAP: 2012/04/23 Added @Override annotation to all appropriate methods.
+// ZAP: 2012/06/24 Added method to add Cookies of type java.net.HttpCookie to request header
 package org.parosproxy.paros.network;
 
 import java.io.UnsupportedEncodingException;

File: src/org/parosproxy/paros/network/HttpResponseHeader.java
Patch:
@@ -21,7 +21,8 @@
  */
 // ZAP: 2012/03/15 Added the @Override annotation to the appropriate methods.
 // Moved to this class the method getCookieParams().
-// ZAP: 2012/06/20 Added new method of setting cookies in the response header.
+// ZAP: 2012/06/24 Added new method of getting cookies from the request header.
+// ZAP: 2012/07/11 Added method to check if response type is text/html (isHtml())
 package org.parosproxy.paros.network;
 
 import java.net.HttpCookie;
@@ -216,7 +217,7 @@ public String getPrimeHeader() {
 		return prime;
 	}
 	
-	// ZAP: Added method for working directly with HTTPCookie
+	// ZAP: Added method for working directly with HttpCookie
 	public List<HttpCookie> getHttpCookies() {
 		List<HttpCookie> cookies = new LinkedList<HttpCookie>();
 

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -238,7 +238,6 @@ private void run() throws Exception {
 		    }
 	    } else if (cmdLine.isDaemon()) {
 	    	runDaemon();
-	    	Thread.sleep(1000);
 	    } else {
 	        runCommandLine();
 	    }

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -216,6 +216,7 @@ ZapTextArea getTxtURIFound() {
 		if (txtURIFound == null) {
 			txtURIFound = new ZapTextArea();
 			txtURIFound.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
+			txtURIFound.setText(Constant.messages.getString("spider.panel.emptyView"));
 			txtURIFound.setEditable(false);
 			txtURIFound.setLineWrap(true);
 			txtURIFound.addMouseListener(new java.awt.event.MouseAdapter() {

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.IOException;
 import java.net.CookieStore;
 import java.net.HttpCookie;
+import java.net.SocketTimeoutException;
 import java.net.URISyntaxException;
 import java.sql.SQLException;
 import java.util.List;
@@ -241,7 +242,7 @@ private void processResource(HttpMessage msg) {
 	 * @throws IOException Signals that an I/O exception has occurred.
 	 * @throws SQLException
 	 */
-	private HttpMessage fetchResource() throws HttpException, IOException, SQLException {
+	private HttpMessage fetchResource() throws HttpException, IOException, SQLException, SocketTimeoutException {
 
 		// Build fetch the request message from the database
 		HttpMessage msg;

File: src/org/zaproxy/zap/spider/SpiderParam.java
Patch:
@@ -63,7 +63,7 @@ public class SpiderParam extends AbstractParam {
 	/** The user agent string, if diferent than the default one. */
 	private String userAgent = null;
 	/** Whether the spider sends back the cookies received from the server. */
-	private boolean sendCookies = true;
+	private boolean sendCookies = false;
 
 	/** The log. */
 	Logger log = Logger.getLogger(SpiderParam.class);

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketPanel.java
Patch:
@@ -439,7 +439,7 @@ protected JTable getMessagesLog() {
 
 			// channel + consecutive number
 			setColumnWidth(0, 50, 100, 70);
-			
+
 			// direction
 			setColumnWidth(1, 25, 100, 25);
 			

File: src/org/zaproxy/zap/extension/spider/ExtensionSpider.java
Patch:
@@ -192,7 +192,8 @@ public void nodeSelected(SiteNode node) {
 		this.getSpiderPanel().nodeSelected(node, true);
 	}
 
-    private PopupMenuSpider getPopupMenuSpider() {
+    @SuppressWarnings("unused")
+	private PopupMenuSpider getPopupMenuSpider() {
         if (popupMenuSpider == null) {
         	popupMenuSpider = new PopupMenuSpider();
         	popupMenuSpider.setExtension(this);

File: src/org/zaproxy/zap/extension/spider/SpiderPanelCellRenderer.java
Patch:
@@ -29,7 +29,6 @@
 import javax.swing.JPanel;
 import javax.swing.ListCellRenderer;
 
-import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.Model;
 
 public class SpiderPanelCellRenderer extends JPanel implements ListCellRenderer {

File: src/org/zaproxy/zap/spider/Spider.java
Patch:
@@ -291,6 +291,7 @@ public void start() {
 		log.info("Starting spider...");
 		this.stopped = false;
 		this.paused = false;
+		this.initialized = false;
 
 		// Initialize the thread pool
 		this.threadPool = Executors.newFixedThreadPool(spiderParam.getThreadCount());
@@ -329,7 +330,6 @@ public void stop() {
 		// Notify the controller to clean up memory
 		controller.reset();
 		this.threadPool = null;
-		System.gc();
 
 		// Notify the listeners -- in the meanwhile
 		notifyListenersSpiderComplete(false);
@@ -341,7 +341,6 @@ public void stop() {
 	private void complete() {
 		log.info("Spidering process is complete. Shutting down...");
 		this.stopped = true;
-		this.initialized = false;
 		if (httpSender != null) {
 			this.getHttpSender().shutdown();
 			httpSender = null;

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -211,7 +211,7 @@ public void run() {
 	private void processResource(HttpMessage msg) {
 		// Add the cookies
 		if (parent.getSpiderParam().isSendCookies()) {
-			
+
 			List<HttpCookie> cookies = msg.getResponseHeader().getHttpCookies();
 			if (!cookies.isEmpty()) {
 				CookieStore store = parent.getCookieManager().getCookieStore();
@@ -227,7 +227,7 @@ private void processResource(HttpMessage msg) {
 		}
 
 		// Parse the resource
-		List<SpiderParser> parsers = parent.getController().getParsers();
+		List<SpiderParser> parsers = parent.getController().getParsers(msg);
 		Source source = new Source(msg.getResponseBody().toString());
 		for (SpiderParser parser : parsers)
 			parser.parseResource(msg, source, depth);

File: src/org/zaproxy/zap/spider/URLCanonicalizer.java
Patch:
@@ -132,10 +132,10 @@ public static String getCanonicalURL(String url, String baseURL) {
 			return result.toExternalForm();
 
 		} catch (MalformedURLException ex) {
-			log.error("Error while Processing URL in the spidering process: " + url, ex);
+			log.error("Error while Processing URL in the spidering process: " + ex.getMessage());
 			return null;
 		} catch (URISyntaxException ex) {
-			log.error("Error while Processing URI in the spidering process: " + url, ex);
+			log.error("Error while Processing URI in the spidering process: " + ex.getMessage());
 			return null;
 		}
 	}

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -195,7 +195,7 @@ public void startSpider() {
 			inOrderSeed(spider, startNode);
 			// TODO: Debugging purpose
 //			try {
-//				spider.addSeed(new URI("http://www.feedrz.com/login.jsp", true));
+//				spider.addSeed(new URI("http://localhost:8080/Wavsep/spider/SpiderMediumTest7NonEscapedPaths/", true));
 //			} catch (URIException e) {
 //				// TODO Auto-generated catch block
 //				e.printStackTrace();

File: src/org/zaproxy/zap/spider/filters/DefaultFetchFilter.java
Patch:
@@ -48,6 +48,7 @@ public class DefaultFetchFilter extends FetchFilter {
 	@Override
 	public FetchStatus checkFilter(URI uri) {
 
+		log.info("Checking: "+uri);
 		// Protocol check
 		String scheme = uri.getScheme();
 		if (scheme == null || (!scheme.equalsIgnoreCase("http") && !scheme.equalsIgnoreCase("https")))

File: src/org/zaproxy/zap/extension/websocket/ui/ComboBoxChannelRenderer.java
Patch:
@@ -51,7 +51,7 @@ public Component getListCellRendererComponent(JList list, Object value,
 			setIcon(null);
 		}
 		
-		setText("<html><p style=\"padding: 3px;\">" + value.toString() + "</p></html>");
+		setText("<html><p style=\"padding:3px;white-space:nowrap;\">" + value.toString() + "</p></html>");
 		setFont(list.getFont());
 
 		return this;

File: src/org/zaproxy/zap/extension/history/AlertAddDialog.java
Patch:
@@ -120,7 +120,7 @@ private void initialize() {
         this.setTitle(Constant.messages.getString("alert.add.title"));
         this.setContentPane(getJPanel());
         if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {
-        	this.setSize(407, 607);
+        	this.setSize(407, 657);
         }
         this.addWindowListener(new java.awt.event.WindowAdapter() {   
         	@Override
@@ -285,6 +285,8 @@ public void setAlert(Alert alert) {
 		} else {
 			this.setHistoryRef(alert.getMessage().getHistoryRef());
 		}
+		// Change the title as we're editing an existing alert
+        this.setTitle(Constant.messages.getString("alert.edit.title"));
 	}
 	
 	/**

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -134,6 +134,7 @@ public final class Constant {
     private static Constant instance = null;
     
     public static final int MAX_HOST_CONNECTION = 50;
+    public static final int MAX_THREADS_PER_SCAN = 16;
     // ZAP: Dont announce ourselves
     //public static final String USER_AGENT = PROGRAM_NAME + "/" + PROGRAM_VERSION;
     public static final String USER_AGENT = "";

File: src/org/zaproxy/zap/extension/spider/OptionsSpiderPanel.java
Patch:
@@ -259,7 +259,7 @@ private JSlider getSliderMaxDepth() {
 	private JSlider getSliderThreads() {
 		if (sliderThreads == null) {
 			sliderThreads = new JSlider();
-			sliderThreads.setMaximum(Constant.MAX_HOST_CONNECTION);
+			sliderThreads.setMaximum(Constant.MAX_THREADS_PER_SCAN);
 			sliderThreads.setMinimum(1);
 			sliderThreads.setValue(1);
 			sliderThreads.setPaintTicks(true);

File: src/org/zaproxy/zap/spider/filters/DefaultFetchFilter.java
Patch:
@@ -49,7 +49,8 @@ public class DefaultFetchFilter extends FetchFilter {
 	public FetchStatus checkFilter(URI uri) {
 
 		// Protocol check
-		if (!uri.getScheme().equalsIgnoreCase("http") && !uri.getScheme().equalsIgnoreCase("https"))
+		String scheme = uri.getScheme();
+		if (scheme == null || (!scheme.equalsIgnoreCase("http") && !scheme.equalsIgnoreCase("https")))
 			return FetchStatus.ILLEGAL_PROTOCOL;
 
 		try {

File: src/org/zaproxy/zap/spider/parser/SpiderHtmlParser.java
Patch:
@@ -58,7 +58,6 @@ public void parseResource(HttpMessage message, Source source, int depth) {
 			baseURL = "";
 		else
 			baseURL = message.getRequestHeader().getURI().toString();
-		log.info("Base URL: " + baseURL);
 
 		// Process A elements
 		List<Element> elements = source.getAllElements(HTMLElementName.A);

File: src/org/zaproxy/zap/spider/filters/DefaultFetchFilter.java
Patch:
@@ -53,7 +53,6 @@ public FetchStatus checkFilter(URI uri) {
 			return FetchStatus.ILLEGAL_PROTOCOL;
 
 		try {
-
 			// Scope check
 			boolean ok = false;
 			for (String scope : scopes)

File: src/org/zaproxy/zap/extension/brk/AbstractBreakPointMessage.java
Patch:
@@ -21,7 +21,7 @@
 
 public abstract class AbstractBreakPointMessage implements BreakpointMessageInterface {
 
-	private boolean isEnabled = false;
+	private boolean isEnabled = true;
 
 	@Override
 	public void setEnabled(boolean enabled) {

File: src/org/zaproxy/zap/extension/brk/ExtensionBreak.java
Patch:
@@ -310,7 +310,8 @@ public boolean messageReceivedFromServer(Message aMessage) {
 	}
 
 	/**
-	 * Expose functionality of breakpointMessageHandler.
+	 * Expose functionality from
+	 * {@link BreakpointMessageHandler#isBreakpoint(Message, boolean)}.
 	 * 
 	 * @param message
 	 * @param isRequest

File: src/org/zaproxy/zap/extension/websocket/brk/PopupMenuAddBreakWebSocket.java
Patch:
@@ -95,5 +95,4 @@ public boolean isEnableForComponent(Component invoker) {
     public void setExtension(ExtensionBreak extension) {
         this.extension = extension;
     }
-
 }

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -69,9 +69,6 @@ public class SpiderPanel extends ScanPanel implements ScanListenner {
      */
     public SpiderPanel(ExtensionSpider extension, SpiderParam portScanParam) {
         super("spider", new ImageIcon(SpiderPanel.class.getResource("/resource/icon/16/spider.png")), extension, portScanParam);
-        //TODO: DEBUGGING PURPOSE
-        this.siteSelected("http://www.feedrz.com");
-        this.startScan();
     }
 
 	@Override

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -194,7 +194,7 @@ public void startSpider() {
 			// TODO: Debugging purpose
 			// inOrderSeed(spider, startNode);
 			try {
-				spider.addSeed(new URI("http://localhost:8080/Wavsep/spider/SpiderMediumTest5FormGet/", true));
+				spider.addSeed(new URI("http://localhost:8080/Wavsep/spider/SpiderAdvancedTest2FormControls/", true));
 			} catch (URIException e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -108,7 +108,8 @@ private void scanURL(String url) throws ApiException {
 		
 		progress = 0;
 		activeScan.addScannerListener(this);
-		activeScan.scan(startNode);
+		activeScan.setStartNode(startNode);
+		activeScan.start();
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -68,6 +68,7 @@ public void run() {
 	
 	private void runScan() {
 		// Do the scan
+		spiderDone = 0;
 		Date start = new Date();
 		log.debug("Starting scan on " + site + " at " + start);
 		list.clear();

File: src/org/parosproxy/paros/extension/filter/Filter.java
Patch:
@@ -25,6 +25,7 @@
 import org.parosproxy.paros.extension.ViewDelegate;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.zap.extension.websocket.WebSocketException;
 import org.zaproxy.zap.extension.websocket.WebSocketMessage;
 
 
@@ -83,6 +84,7 @@ public interface Filter {
      * ZAP: Added method to be able to filter WebSocket communication.
      * 
      * @param message
+     * @throws WebSocketException 
      */
-    public void onWebSocketPayload(WebSocketMessage message);
+    public void onWebSocketPayload(WebSocketMessage message) throws WebSocketException;
 }

File: src/org/parosproxy/paros/extension/filter/FilterAdaptor.java
Patch:
@@ -25,6 +25,7 @@
 import org.parosproxy.paros.extension.ViewDelegate;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.zap.extension.websocket.WebSocketException;
 import org.zaproxy.zap.extension.websocket.WebSocketMessage;
 
 
@@ -110,7 +111,7 @@ public ViewDelegate getView() {
     
     // ZAP: Added default implementation.
     @Override
-    public void onWebSocketPayload(WebSocketMessage message) {
+    public void onWebSocketPayload(WebSocketMessage message) throws WebSocketException {
         // default implementation does nothing
     }
 }

File: src/org/zaproxy/zap/extension/websocket/ExtensionWebSocket.java
Patch:
@@ -94,6 +94,9 @@ public class ExtensionWebSocket extends ExtensionAdaptor implements SessionChang
 	 */
 	private Vector<WebSocketObserver> allChannelObservers;
 
+	/**
+	 * Will be added to the hook view. 
+	 */
 	private OptionsWebSocketPanel optionsPanel;
 	
 	/**

File: src/org/zaproxy/zap/extension/websocket/WebSocketProxy.java
Patch:
@@ -359,8 +359,8 @@ public void processRead(InputStream in, OutputStream out, byte frameHeader) thro
 		// do not buffer frames until message is finished,
 		// as messages might have several MegaBytes!
 		if (notifyObservers(message)) {
-			// skip forwarding only if observer blocks or told us to skip this message
-			message.forwardCurrentFrame(out);
+			// skip forwarding only if observer told us to skip this message (frame)
+			message.forward(out);
 		}		
 	}
 

File: src/org/zaproxy/zap/extension/websocket/filter/FilterWebSocketPayload.java
Patch:
@@ -23,6 +23,7 @@
 import org.parosproxy.paros.extension.filter.FilterAbstractReplace;
 import org.parosproxy.paros.extension.filter.FilterReplaceDialog;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.zap.extension.websocket.WebSocketException;
 import org.zaproxy.zap.extension.websocket.WebSocketMessage;
 import org.zaproxy.zap.extension.websocket.WebSocketMessage.Direction;
 
@@ -60,9 +61,10 @@ public void onHttpResponseReceive(HttpMessage httpMessage) {
 	 * Change message payload if pattern applies. Ignore binary messages so far
 	 * and apply only to other opcodes. Called by
 	 * {@link ExtensionFilter#onMessageFrame(int, WebSocketMessage)}.
+	 * @throws WebSocketException 
 	 */
 	@Override
-	public void onWebSocketPayload(WebSocketMessage message) {
+	public void onWebSocketPayload(WebSocketMessage message) throws WebSocketException {
 		Direction direction = message.getDirection();
 
 		boolean isApplicable = (!message.isFinished() || message.getPayloadLength() == 0 || message.isBinary());

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketPanel.java
Patch:
@@ -68,7 +68,8 @@
 
 /**
  * Represents the WebSockets tab. It listens to all WebSocket channels and
- * displays messages accordingly.
+ * displays messages accordingly. For now it uses a {@link JTable} for this
+ * task.
  */
 public class WebSocketPanel extends AbstractPanel implements WebSocketObserver, Runnable {
 

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -323,7 +323,7 @@ private void runCommandLine() {
 	        System.out.println(e.getMessage());
 	        rc = 1;
 	    } finally {
-            control.shutdown(true);
+            control.shutdown(Model.getSingleton().getOptionsParam().getDatabaseParam().isCompactDatabase());
     	    log.info(Constant.PROGRAM_TITLE + " terminated.");
 	    }
 	    System.exit(rc);

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -98,7 +98,7 @@ public JSON handleApiAction(String name, JSONObject params)
 		Session session = Model.getSingleton().getSession();
 
 		if (ACTION_SHUTDOWN.equals(name)) {
-			Control.getSingleton().shutdown(true);
+			Control.getSingleton().shutdown(Model.getSingleton().getOptionsParam().getDatabaseParam().isCompactDatabase());
 			log.info(Constant.PROGRAM_TITLE + " terminated.");
 			System.exit(0);
 

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketFilter.java
Patch:
@@ -24,7 +24,7 @@
 
 import org.parosproxy.paros.Constant;
 import org.zaproxy.zap.extension.websocket.WebSocketMessage;
-import org.zaproxy.zap.extension.websocket.ui.WebSocketUiModel.WebSocketMessageDAO;
+import org.zaproxy.zap.extension.websocket.ui.WebSocketTableModel.WebSocketMessageDAO;
 
 /**
  * Used as filter for the {@link WebSocketPanel}, which is applied in the

File: src/org/zaproxy/zap/extension/websocket/ui/WebSocketPanelCellRenderer.java
Patch:
@@ -90,7 +90,7 @@ private void initialize() {
 
 		GridBagConstraints constraint = getDefaultConstraint(0, 0);
 		txtId = getDefaultLabel(40);
-		txtId.setHorizontalAlignment(SwingConstants.RIGHT);
+		txtId.setHorizontalAlignment(SwingConstants.LEFT);
 		txtId.setToolTipText(Constant.messages.getString("websocket.panel.id.help"));
 		add(txtId, constraint);
 
@@ -175,7 +175,7 @@ public Component getListCellRendererComponent(JList list, Object value,
 
 		WebSocketMessageDAO message = (WebSocketMessageDAO) value;
 		
-		txtId.setText(message.id);
+		txtId.setText("#" + message.channelId + "." + message.id);
 		
 		if (message.direction.equals(Direction.OUTGOING)) {
 			txtDirection.setText("→");

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -194,7 +194,7 @@ public void startSpider() {
 			// TODO: Debugging purpose
 			// inOrderSeed(spider, startNode);
 			try {
-				spider.addSeed(new URI("http://www.feedrz.com", true));
+				spider.addSeed(new URI("http://localhost:8080/Wavsep/spider/index-start.jsp", true));
 			} catch (URIException e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();

File: src/org/zaproxy/zap/spider/parser/SpiderParser.java
Patch:
@@ -72,7 +72,8 @@ protected void notifyListenersResourceFound(HttpMessage message, int depth, Stri
 	 * if possible, a Jericho source with the Response Body is provided.
 	 * 
 	 * @param message the full http message containing the request and the response
-	 * @param source a Jericho source with the Response Body from the HTTP message
+	 * @param source a Jericho source with the Response Body from the HTTP message. This parameter
+	 *            can be {@code null}, in which case the parser implementation should ignore it.
 	 * @param depth the depth of this resource
 	 */
 	public abstract void parseResource(final HttpMessage message, Source source, int depth);

File: src/org/zaproxy/zap/extension/websocket/WebSocketMessage.java
Patch:
@@ -143,6 +143,8 @@ public enum Direction {
 	 */
 	public static final int STATUS_CODE_SERVER_ERROR = 1011;
 
+	public final static int[] OPCODES = {OPCODE_TEXT, OPCODE_BINARY, OPCODE_CLOSE, OPCODE_PING, OPCODE_PONG };
+
 	// 1015 is another reserved status code
 
 	/**

File: src/org/zaproxy/zap/extension/websocket/WebSocketObserver.java
Patch:
@@ -37,8 +37,9 @@ public interface WebSocketObserver {
 	 * ). If it returns false, the given message will not be further processed
 	 * (i.e. forwarded).
 	 * 
+	 * @param channelId The identifier of the {@link WebSocketProxy} instance.
 	 * @param message The given message might not be finished so far.
 	 * @return False if it shouldn't be passed to further observers, nor forwarded.
 	 */
-	public boolean onMessageFrame(WebSocketMessage message);
+	public boolean onMessageFrame(int channelId, WebSocketMessage message);
 }

File: src/org/zaproxy/zap/extension/httppanel/view/HttpPanelDefaultViewSelector.java
Patch:
@@ -26,5 +26,7 @@ public interface HttpPanelDefaultViewSelector {
 	public boolean matchToDefaultView(HttpMessage httpMessage);
 	
 	public String getViewName();
+	
+	public int getOrder();
 
 }

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -34,6 +34,7 @@
 // ZAP: 2012/05/02 Added method createInstance and changed the method
 // getInstance to use it.
 // ZAP: 2012/05/03 Changed the Patterns used to detect the O.S. to be final.
+// ZAP: 2012/06/15 Issue 312 Increase the maximum number of scanning threads allowed
 
 package org.parosproxy.paros;
 
@@ -132,7 +133,7 @@ public final class Constant {
     
     private static Constant instance = null;
     
-    public static final int MAX_HOST_CONNECTION = 10;
+    public static final int MAX_HOST_CONNECTION = 50;
     // ZAP: Dont announce ourselves
     //public static final String USER_AGENT = PROGRAM_NAME + "/" + PROGRAM_VERSION;
     public static final String USER_AGENT = "";

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -304,10 +304,10 @@ public synchronized boolean addAlert(Alert alert) {
 	   
 	   //If this is the first alert
 	   if(alerts==null)
-		   alerts=new ArrayList<Alert>();
+		   alerts=new ArrayList<Alert>(1);
 	   
 	   for (Alert a : alerts) {
-		   if (a.getAlertId()==alert.getAlertId()) {
+		   if (alert.equals(a)) {
 			   // We've already recorded it
 			   return false;
 		   }

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -30,6 +30,7 @@
 
 import java.sql.SQLException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.parosproxy.paros.core.scanner.Alert;
@@ -295,7 +296,6 @@ public void loadAlerts() {
 				this.addAlert(new Alert(alert, this));
 			}
 		} catch (SQLException e) {
-			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
    }
@@ -369,6 +369,6 @@ public List<Alert> getAlerts() {
 	   if(alerts!=null)
 		   return this.alerts;
 	   else
-		   return new ArrayList<Alert>();
+		   return Collections.emptyList();
    }
 }

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -323,7 +323,7 @@ private void runCommandLine() {
 	        System.out.println(e.getMessage());
 	        rc = 1;
 	    } finally {
-            control.shutdown(false);
+            control.shutdown(true);
     	    log.info(Constant.PROGRAM_TITLE + " terminated.");
 	    }
 	    System.exit(rc);

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -289,7 +289,7 @@ private void sessionChangedEventHandler(Session session) {
         // XXX Temporary "hack" to check if ZAP is in GUI mode.
         // tree.recalcAlertCounts() calls View.getSingleton() that creates the
         // View, if a View exists and the API was not enabled (through
-        // configuration) the API becomes disabled everywhere (including demon
+        // configuration) the API becomes disabled everywhere (including daemon
         // mode).
         // Note: the API needs to be enabled all the time in daemon mode.
         if (View.isInitialised()) {

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -98,7 +98,7 @@ public JSON handleApiAction(String name, JSONObject params)
 		Session session = Model.getSingleton().getSession();
 
 		if (ACTION_SHUTDOWN.equals(name)) {
-			Control.getSingleton().shutdown(false);
+			Control.getSingleton().shutdown(true);
 			log.info(Constant.PROGRAM_TITLE + " terminated.");
 			System.exit(0);
 

File: src/org/zaproxy/zap/extension/ascan/ActiveScanAPI.java
Patch:
@@ -150,6 +150,7 @@ public void alertFound(Alert alert) {
 
 	@Override
 	public void hostComplete(String hostAndPort) {
+        activeScan.reset();
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -375,6 +375,7 @@ public List<Class<?>> getDependencies() {
 	@Override
 	public void sessionAboutToChange(Session session) {
 	}
+
 	@Override
 	public String getAuthor() {
 		return Constant.ZAP_TEAM;

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -259,7 +259,7 @@ public void spiderComplete(boolean successful) {
 		} catch (SQLException e) {
 			log.warn(e.getMessage(), e);
 		}
-
+		log.warn("Spider scanning complete.");
 		stopScan = true;
 
 	}

File: src/org/zaproxy/zap/spider/SpiderTask.java
Patch:
@@ -102,7 +102,7 @@ public void run() {
 	 * @param msg the HTTP Message
 	 */
 	private void processResource(HttpMessage msg) {
-		log.debug("Processing message with content: " + msg.getResponseBody().toString());
+		//log.debug("Processing message with content: " + msg.getResponseBody().toString());
 		SpiderParser parser = controller.getParser();
 		Source source = new Source(msg.getResponseBody().toString());
 		parser.parseResource(msg, source);
@@ -126,9 +126,9 @@ private HttpMessage fetchResource() throws HttpException, IOException {
 			msg.getRequestHeader().setHeader(HttpHeader.USER_AGENT, parent.getSpiderParam().getUserAgent());
 
 		// Fetch the page
-		log.debug("Fetching resource: " + uri + " using HttpMessage: " + msg.getRequestHeader().toString());
+		//log.debug("Fetching resource: " + uri + " using HttpMessage: " + msg.getRequestHeader().toString());
 		parent.getHttpSender().sendAndReceive(msg);
-		log.debug("Resource received from server - response header: " + msg.getResponseHeader().toString());
+		//log.debug("Resource received from server - response header: " + msg.getResponseHeader().toString());
 
 		return msg;
 

File: src/org/zaproxy/zap/extension/dynssl/ExtensionDynSSL.java
Patch:
@@ -55,8 +55,8 @@ public void hook(ExtensionHook extensionHook) {
 		super.hook(extensionHook);
 	    if (getView() != null) {
 	        extensionHook.getHookView().addOptionPanel(getOptionsPanel());
-	        extensionHook.addOptionsParamSet(getParams());
 	    }
+        extensionHook.addOptionsParamSet(getParams());
 	}
 
 	@Override

File: src/org/zaproxy/clientapi/ant/AlertTask.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.apache.tools.ant.Task;
 
-public abstract class AlertTask extends Task {
+public class AlertTask extends Task {
 	private String alert;
 	private String risk;
 	private String reliability;

File: src/org/zaproxy/clientapi/core/Alert.java
Patch:
@@ -23,7 +23,7 @@
 
 public class Alert {
 	
-	public enum Risk {Low, Medium, High};
+	public enum Risk {Informational, Low, Medium, High};
 	public enum Reliability {Suspicious, Warning};
 	
 	private String alert;

File: src/org/zaproxy/clientapi/core/ClientApi.java
Patch:
@@ -172,7 +172,7 @@ private List<String> openUrlViaProxy (Proxy proxy, String apiurl) throws Excepti
 		List<String> response = new ArrayList<String>();
 		URL url = new URL(apiurl);
 		if (debug) {
-			System.out.println("Oepn URL: " + apiurl);
+			System.out.println("Open URL: " + apiurl);
 		}
 		HttpURLConnection uc = (HttpURLConnection)url.openConnection(proxy);
 		uc.connect();
@@ -194,7 +194,7 @@ private List<String> openUrlViaProxy (Proxy proxy, String apiurl) throws Excepti
 	private void accessUrlViaProxy (Proxy proxy, String apiurl) throws Exception {
 		URL url = new URL(apiurl);
 		if (debug) {
-			System.out.println("Oepn URL: " + apiurl);
+			System.out.println("Open URL: " + apiurl);
 		}
 		HttpURLConnection uc = (HttpURLConnection)url.openConnection(proxy);
 		uc.connect();

File: src/org/zaproxy/zap/extension/pscan/PassiveScanThread.java
Patch:
@@ -44,6 +44,7 @@ public class PassiveScanThread extends Thread implements ProxyListener, SessionC
 
 	public PassiveScanThread (PassiveScannerList passiveScannerList) {
 		super("ZAP-PassiveScanner");
+		this.setDaemon(true);
 		
 		this.scannerList = passiveScannerList;
 		

File: src/org/zaproxy/zap/junit/BaseZapProxyTest.java
Patch:
@@ -64,6 +64,8 @@ public static void setup() throws Exception {
 	 * Set up logging levels, to ease debugging of tests.
 	 */
 	protected static void initializeLogger() {
+//		systemProperties.setProperty("javax.net.debug", "ssl");
+		
 		Logger rootLogger = Logger.getRootLogger();
 		if (!rootLogger.getAllAppenders().hasMoreElements()) {
 			rootLogger.setLevel(Level.DEBUG);
@@ -85,8 +87,6 @@ protected static void initializeProxySettings() {
 		systemProperties.setProperty("http.proxyPort", PROXY_PORT+"");
 		systemProperties.setProperty("https.proxyHost", PROXY_HOST);
 		systemProperties.setProperty("https.proxyPort", PROXY_PORT+"");
-		
-		systemProperties.setProperty("javax.net.debug", "ssl");
 	}
 
 	/**

File: src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
Patch:
@@ -92,7 +92,7 @@ private void addPassiveScanner (PluginPassiveScanner scanner) {
 
 			scannerList.add(scanner);
 
-			// FIXME temporary "hack" to check if ZAP is in GUI mode (see
+			// XXX temporary "hack" to check if ZAP is in GUI mode (see
 			// below).
 			if (View.isInitialised()) {
 				
@@ -159,7 +159,7 @@ protected void save (RegexAutoTagScanner defn) {
     	String pscanName = defn.getName();
 
     	// Note that the name and type cant change on a save
-		config.setProperty("pscans." + pscanName + ".config", defn.getConfig());
+		config.setProperty("pscans." + pscanName + ".config", defn.getConf());
 		config.setProperty("pscans." + pscanName + ".reqUrlRegex", defn.getRequestUrlRegex());
 		config.setProperty("pscans." + pscanName + ".reqHeadRegex", defn.getRequestHeaderRegex());
 		config.setProperty("pscans." + pscanName + ".resHeadRegex", defn.getResponseHeaderRegex());
@@ -180,7 +180,7 @@ protected void add (RegexAutoTagScanner defn) {
 
     	// Add the details
 		config.setProperty("pscans." + pscanName + ".type", defn.getType().toString());
-		config.setProperty("pscans." + pscanName + ".config", defn.getConfig());
+		config.setProperty("pscans." + pscanName + ".config", defn.getConf());
 		config.setProperty("pscans." + pscanName + ".reqUrlRegex", defn.getRequestUrlRegex());
 		config.setProperty("pscans." + pscanName + ".reqHeadRegex", defn.getRequestHeaderRegex());
 		config.setProperty("pscans." + pscanName + ".resHeadRegex", defn.getResponseHeaderRegex());

File: src/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScanner.java
Patch:
@@ -103,6 +103,7 @@ public RegexAutoTagScanner(String name, TYPE type, String config,
 		this.setResponseBodyRegex(responseBodyRegex);
 		this.type = type;
 		this.config = config;
+		setEnabled(enabled);
 	}
 
 	public String getRequestUrlRegex() {

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -406,7 +406,7 @@ public List<String> getExcludeFromScanRegexs() {
 	public void setExcludeFromScanRegexs(List<String> ignoredRegexs) throws SQLException {
 		this.excludeFromScanRegexs = ignoredRegexs;
 		ExtensionActiveScan extAscan = 
-			(ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension("ExtensionActiveScan");
+			(ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.NAME);
 		if (extAscan != null) {
 			extAscan.setExcludeList(ignoredRegexs);
 		}
@@ -420,7 +420,7 @@ public List<String> getExcludeFromSpiderRegexs() {
 	public void setExcludeFromSpiderRegexs(List<String> ignoredRegexs) throws SQLException {
 		this.excludeFromSpiderRegexs = ignoredRegexs;
 		ExtensionSpider extSpider = 
-			(ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension("ExtensionSpider");
+			(ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.NAME);
 		if (extSpider != null) {
 			extSpider.setExcludeList(ignoredRegexs);
 		}

File: src/org/zaproxy/zap/extension/brk/BreakPanel.java
Patch:
@@ -193,6 +193,7 @@ public void getMessage(HttpMessage msg, boolean isRequest) {
 		if (isRequest) {
 			requestPanel.saveData();
 			cl.show(panelContent, REQUEST_PANEL);
+			requestPanel.getHttpMessage().getRequestHeader().setContentLength(requestPanel.getHttpMessage().getRequestBody().length());
 			requestPanel.setMessage(msg);
 		} else {
 			responsePanel.saveData();

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -406,7 +406,7 @@ public List<String> getExcludeFromScanRegexs() {
 	public void setExcludeFromScanRegexs(List<String> ignoredRegexs) throws SQLException {
 		this.excludeFromScanRegexs = ignoredRegexs;
 		ExtensionActiveScan extAscan = 
-			(ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension("ExtensionActiveScan");
+			(ExtensionActiveScan) Control.getSingleton().getExtensionLoader().getExtension(ExtensionActiveScan.NAME);
 		if (extAscan != null) {
 			extAscan.setExcludeList(ignoredRegexs);
 		}
@@ -420,7 +420,7 @@ public List<String> getExcludeFromSpiderRegexs() {
 	public void setExcludeFromSpiderRegexs(List<String> ignoredRegexs) throws SQLException {
 		this.excludeFromSpiderRegexs = ignoredRegexs;
 		ExtensionSpider extSpider = 
-			(ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension("ExtensionSpider");
+			(ExtensionSpider) Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.NAME);
 		if (extSpider != null) {
 			extSpider.setExcludeList(ignoredRegexs);
 		}

File: src/org/zaproxy/zap/extension/brk/BreakPanel.java
Patch:
@@ -193,6 +193,7 @@ public void getMessage(HttpMessage msg, boolean isRequest) {
 		if (isRequest) {
 			requestPanel.saveData();
 			cl.show(panelContent, REQUEST_PANEL);
+			requestPanel.getHttpMessage().getRequestHeader().setContentLength(requestPanel.getHttpMessage().getRequestBody().length());
 			requestPanel.setMessage(msg);
 		} else {
 			responsePanel.saveData();

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -55,7 +55,6 @@
 import org.parosproxy.paros.network.HttpUtil;
 import org.parosproxy.paros.security.MissingRootCertificateException;
 import org.zaproxy.zap.extension.api.API;
-import org.zaproxy.zap.extension.websocket.ExtensionWebSocket;
 import org.zaproxy.zap.network.HttpRequestBody;
 
 

File: src/org/zaproxy/zap/ZapGetMethod.java
Patch:
@@ -127,6 +127,7 @@ protected boolean shouldCloseConnection(HttpConnection conn) {
 	            
 	            if (conn instanceof ZapHttpConnection) {
 	            	upgradedChannel = ((ZapHttpConnection) conn).getSocketChannel();
+	            	conn.setHttpConnectionManager(null); // avoid releasing connection
 	            }
 	            
 	        	return false;

File: src/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java
Patch:
@@ -226,7 +226,7 @@ public String getAuthor() {
 
 	@Override
 	public String getDescription() {
-		return Constant.messages.getString("webSocketsExt.desc");
+		return Constant.messages.getString("anticsrf.desc");
 	}
 
 	@Override

File: src/org/parosproxy/paros/core/proxy/ProxyParam.java
Patch:
@@ -19,6 +19,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.core.proxy;
 
 import java.net.InetAddress;
@@ -58,6 +59,7 @@ public class ProxyParam extends AbstractParam {
 	public ProxyParam() {
 	}
 	
+	@Override
 	protected void parse() {
 		proxyIp = getConfig().getString(PROXY_IP, "localhost");
 		try {

File: src/org/parosproxy/paros/core/proxy/ProxyServer.java
Patch:
@@ -23,6 +23,7 @@
 // ZAP: 2011/05/15 Support for exclusions
 // ZAP: 2011/11/15 Warn the user if the host is unknown
 // ZAP: 2012/03/15 Changed to sort the ProxyListeners. Set the name of the proxy server thread.
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.core.proxy;
  
@@ -190,6 +191,7 @@ public synchronized boolean stopServer(){
 		return true;
 	}
 
+	@Override
 	public void run() {
 
 		Socket clientSocket = null;

File: src/org/parosproxy/paros/core/proxy/ProxyServerSSL.java
Patch:
@@ -19,6 +19,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 package org.parosproxy.paros.core.proxy;
 
 import java.io.IOException;
@@ -45,6 +46,7 @@ public ProxyServerSSL() {
 	}
 	
 	
+	@Override
 	protected ServerSocket createServerSocket(String ip, int port) throws UnknownHostException, IOException {
 		
 //		ServerSocket socket = ssl.listen(port, 300, InetAddress.getByName(getProxyParam().getProxyIp()));
@@ -53,6 +55,7 @@ protected ServerSocket createServerSocket(String ip, int port) throws UnknownHos
 		return socket;
 	}
 	
+	@Override
 	protected ProxyThread createProxyProcess(Socket clientSocket) {
 		ProxyThreadSSL process = new ProxyThreadSSL(this, clientSocket);
 		return process;

File: src/org/parosproxy/paros/core/proxy/ProxyThreadSSL.java
Patch:
@@ -19,6 +19,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.core.proxy;
 
 import java.net.Socket;
@@ -43,6 +44,7 @@ public class ProxyThreadSSL extends ProxyThread {
 		
 	}
 
+	@Override
 	protected void disconnect() {
 	    
 //	    long startTime = System.currentTimeMillis();

File: src/org/parosproxy/paros/core/proxy/StreamForwarder.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.core.proxy;
 
 import java.io.IOException;
@@ -51,6 +52,7 @@ public void setStop(boolean isStop) {
         this.isStop = isStop;
     }
     
+    @Override
     public void run() {
         byte[] buffer = new byte[2048];
         int len = -1;

File: src/org/parosproxy/paros/core/scanner/AbstractAppPlugin.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.core.scanner;
 
 /**
@@ -30,6 +31,7 @@
  */
 abstract public class AbstractAppPlugin extends AbstractPlugin {
     
+    @Override
     public void notifyPluginCompleted(HostProcess parent) {
         /*	no need to notify parent this plugin is completed.  HostProcess will wait each
          	AbstractAppPlugin to finish.

File: src/org/parosproxy/paros/core/scanner/AbstractHostPlugin.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.core.scanner;
 
 /**
@@ -27,6 +28,7 @@
  */
 abstract public class AbstractHostPlugin extends AbstractPlugin {
 
+    @Override
     public void notifyPluginCompleted(HostProcess parent) {
         parent.pluginCompleted(this);
     }

File: src/org/parosproxy/paros/core/scanner/ScannerParam.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/08/30 Support for scanner levels
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.core.scanner;
 
@@ -49,6 +50,7 @@ public ScannerParam() {
     /* (non-Javadoc)
      * @see com.proofsecure.paros.common.FileXML#parse()
      */
+    @Override
     protected void parse(){
         
 		try {

File: src/org/parosproxy/paros/core/scanner/VariantURLQuery.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/02/21 Added logging
+// ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 
 package org.parosproxy.paros.core.scanner;
 
@@ -40,6 +41,7 @@ public VariantURLQuery() {
         super();
     }
     
+    @Override
     public void setMessage(HttpMessage msg) {
         try {
             parse(msg.getRequestHeader().getURI().getQuery());
@@ -48,6 +50,7 @@ public void setMessage(HttpMessage msg) {
         }
     }
     
+    @Override
     protected void buildMessage(HttpMessage msg, String query, boolean escaped) {
         try {
         	if (escaped) {

File: src/org/parosproxy/paros/core/spider/Html.java
Patch:
@@ -18,6 +18,7 @@
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.core.spider;
 
@@ -62,6 +63,7 @@ public URI getURI() {
 		return uri;
     }
 
+    @Override
     public String toString() {
 		return doc;
     }

File: src/org/parosproxy/paros/core/spider/SpiderParam.java
Patch:
@@ -18,6 +18,7 @@
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.core.spider;
 
@@ -53,6 +54,7 @@ public SpiderParam() {
     /* (non-Javadoc)
      * @see com.proofsecure.paros.common.FileXML#parse()
      */
+    @Override
     protected void parse() {
         
 		try {

File: src/org/parosproxy/paros/core/spider/SpiderThread.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2012/01/09 Commented the "HttpStatusCode.isSuccess" validations and
 //      added code to handle the redirect responses.
 // ZAP: 2012/03/15 Removed unnecessary casting in the method run.
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 
 
 package org.parosproxy.paros.core.spider;
@@ -82,6 +83,7 @@ void setStop(boolean stop) {
         this.stop = stop;
     }
     
+    @Override
     public void run() {
 
         QueueItem item = null;

File: src/org/parosproxy/paros/db/AbstractTable.java
Patch:
@@ -18,7 +18,7 @@
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.db;
 

File: src/org/parosproxy/paros/db/TableParam.java
Patch:
@@ -17,7 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.db;
 import java.sql.CallableStatement;
 import java.sql.Connection;

File: src/org/parosproxy/paros/db/TableScan.java
Patch:
@@ -19,7 +19,7 @@
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
 // ZAP: 2011/05/27 Ensure all PreparedStatements and ResultSets closed to prevent leaks 
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.db;
 import java.sql.CallableStatement;

File: src/org/parosproxy/paros/db/TableSession.java
Patch:
@@ -18,7 +18,7 @@
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.db;
 import java.sql.Connection;

File: src/org/parosproxy/paros/db/TableSessionUrl.java
Patch:
@@ -17,7 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.db;
 import java.sql.CallableStatement;
 import java.sql.Connection;

File: src/org/parosproxy/paros/db/TableTag.java
Patch:
@@ -17,7 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.db;
 import java.sql.CallableStatement;
 import java.sql.Connection;

File: src/org/parosproxy/paros/extension/AbstractDialog.java
Patch:
@@ -18,7 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.extension;
 
 

File: src/org/parosproxy/paros/extension/edit/PopupFindMenu.java
Patch:
@@ -19,7 +19,8 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/01/12 Reflected the rename of the class ExtensionPopupMenu to
-//                 ExtensionPopupMenuItem
+// ExtensionPopupMenuItem.
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.extension.edit;
 
 import java.awt.Component;
@@ -60,6 +61,7 @@ private void initialize() {
         this.setText(Constant.messages.getString("edit.find.popup"));	// ZAP: i18n
 	}
 	
+    @Override
     public boolean isEnableForComponent(Component invoker) {
         if (invoker instanceof JTextComponent) {
             setLastInvoker((JTextComponent) invoker);

File: src/org/parosproxy/paros/extension/encoder/ExtensionEncoder.java
Patch:
@@ -20,6 +20,7 @@
  */
 // ZAP: 2011/11/20 Explicitly depreciated
 // ZAP: 2012/03/17 Issue 282 Added getAuthor()
+// ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 
 package org.parosproxy.paros.extension.encoder;
 
@@ -85,6 +86,7 @@ private JMenuItem getMenuItemEncoder() {
 			menuItemEncoder.setText("Encoder/Hash...");
 			menuItemEncoder.addActionListener(new java.awt.event.ActionListener() { 
 
+				@Override
 				public void actionPerformed(java.awt.event.ActionEvent e) {    
 
 					getEncoderDialog().setVisible(true);
@@ -96,6 +98,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 		return menuItemEncoder;
 	}
 	
+	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);
 	    if (getView() != null) {

File: src/org/parosproxy/paros/extension/filter/FilterAbstractReplace.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 package org.parosproxy.paros.extension.filter;
 
 import java.util.regex.Pattern;
@@ -49,10 +50,12 @@ private FilterReplaceDialog getFilterReplaceDialog() {
 		return filterReplaceDialog;
 	}
 	
+	@Override
 	public boolean isPropertyExists() {
 	    return true;
 	}
 	
+	@Override
 	public void editProperty() {
 	    FilterReplaceDialog dialog = getFilterReplaceDialog();
 	    dialog.setView(getView());

File: src/org/parosproxy/paros/extension/filter/FilterChangeUserAgentDialog.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/04/16 i18n
+// ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 
 package org.parosproxy.paros.extension.filter;
 
@@ -168,6 +169,7 @@ private JButton getBtnOK() {
 			btnOK.setText(Constant.messages.getString("all.button.ok"));
 			btnOK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 			btnOK.addActionListener(new java.awt.event.ActionListener() { 
+				@Override
 				public void actionPerformed(java.awt.event.ActionEvent e) { 
 				    FilterChangeUserAgentDialog.this.dispose();
 				    exitCode = JOptionPane.OK_OPTION;
@@ -187,6 +189,7 @@ private JButton getBtnCancel() {
 			btnCancel = new JButton();
 			btnCancel.setText(Constant.messages.getString("all.button.cancel"));
 			btnCancel.addActionListener(new java.awt.event.ActionListener() { 
+				@Override
 				public void actionPerformed(java.awt.event.ActionEvent e) {
 				    FilterChangeUserAgentDialog.this.dispose();
 				    exitCode = JOptionPane.CANCEL_OPTION;

File: src/org/parosproxy/paros/extension/filter/FilterDialog.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/04/16 i18n
+// ZAP: 2012/04/25 Added argument type to generic type.
 
 package org.parosproxy.paros.extension.filter;
 
@@ -77,7 +78,8 @@ private AllFilterPanel getAllFilterPanel() {
 		return allFilterPanel;
 	}
 	
-	void setAllFilters(List allFilters) {
+    // ZAP: Added the type argument.
+	void setAllFilters(List<Filter> allFilters) {
 	    getAllFilterPanel().getAllFilterTableModel().setTable(allFilters);
 	}
    }  //  @jve:decl-index=0:visual-constraint="10,10"

File: src/org/parosproxy/paros/extension/history/LogPanelCellRenderer.java
Patch:
@@ -19,7 +19,8 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/03/15 Changed the method getListCellRendererComponent to use the 
-//      class StringBuilder instead of StringBuffer.
+// class StringBuilder instead of StringBuffer.
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 
 
 package org.parosproxy.paros.extension.history;
@@ -245,6 +246,7 @@ private void initialize() {
         this.add(txtTag, gridBagConstraints6);
     }
 
+    @Override
     public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
         
         HistoryReference ref = (HistoryReference) value;

File: src/org/parosproxy/paros/extension/option/ExtensionOption.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2011/11/20 Set order
 // ZAP: 2012/03/10 Issue 279: Flag as a core extension 
 // ZAP: 2012/03/17 Issue 282 Added getAuthor()
+// ZAP: 2012/04/25 Added @Override annotation to all appropriate methods.
 
 package org.parosproxy.paros.extension.option;
 
@@ -59,6 +60,7 @@ private void initialize() {
         this.setOrder(2);
 	}
 	
+	@Override
 	public void hook(ExtensionHook extensionHook) {
 	    super.hook(extensionHook);
 	    if (getView() != null) {
@@ -79,6 +81,7 @@ private JCheckBoxMenuItem getMenuViewImage() {
 			menuViewImage = new JCheckBoxMenuItem();
 			menuViewImage.setText(Constant.messages.getString("menu.view.enableImage"));	// ZAP: i18n
 			menuViewImage.addItemListener(new java.awt.event.ItemListener() { 
+				@Override
 				public void itemStateChanged(java.awt.event.ItemEvent e) {    
 					getModel().getOptionsParam().getViewParam().setProcessImages(getMenuViewImage().getState() ? 1 : 0);					
 				}

File: src/org/parosproxy/paros/extension/option/OptionsParamCertificate.java
Patch:
@@ -18,6 +18,7 @@
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
+// ZAP: 2012/04/25 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.extension.option;
 
@@ -54,6 +55,7 @@ public OptionsParamCertificate() {
     /* (non-Javadoc)
      * @see com.proofsecure.paros.common.FileXML#parse()
      */
+    @Override
     protected void parse() {
 
         // always turn off client cert

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -22,7 +22,7 @@
 // ZAP: 2011/12/04 Support deleting alerts
 // ZAP: 2012/03/15 Changed the method getDisplay to use the class StringBuilder 
 //      instead of StringBuffer.
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.model;
 

File: src/org/parosproxy/paros/model/Model.java
Patch:
@@ -19,7 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/02/18 Rationalised session handling
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.model;
 

File: src/org/parosproxy/paros/network/ConnectionParam.java
Patch:
@@ -20,7 +20,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/08/03 Cope with unexpected values in config file
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method and removed
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method and removed
 // unnecessary cast.
 
 package org.parosproxy.paros.network;

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -22,7 +22,7 @@
 // ZAP: 2012/01/12 Changed the method parse to use only CRLF as line separator.
 // ZAP: 2012/03/15 Removed an unnecessary try catch block and unnecessary casting.
 // Reworked the method getCharset.
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 package org.parosproxy.paros.network;
 
 import java.util.Hashtable;

File: src/org/parosproxy/paros/network/HttpMessage.java
Patch:
@@ -23,7 +23,7 @@
 // ZAP: 2012/03/15 Changed to use the classes HttpRequestBody and HttpResponseBody.
 // Changed to use the byte[] body. Changed to use the class StringBuilder instead
 // of StringBuffer. Reworked some methods.
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.network;
 

File: src/org/parosproxy/paros/view/MainPopupMenu.java
Patch:
@@ -24,7 +24,7 @@
 //      changed the method show to use the methods handleMenu and handleMenuItem.
 // ZAP: 2012/02/19 Removed the Delete button
 // ZAP: 2012/03/03 Moved popups to stdmenus extension
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.view;
 

File: src/org/parosproxy/paros/view/TabbedPanel.java
Patch:
@@ -18,7 +18,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/06/02 Warn the first time the user double clicks on a tab
-// ZAP: 2012/04/23 Added @Override annotation to appropriate method.
+// ZAP: 2012/04/23 Added @Override annotation to the appropriate method.
 
 package org.parosproxy.paros.view;
 

File: src/org/zaproxy/clientapi/ant/AccessUrlTask.java
Patch:
@@ -25,6 +25,7 @@ public class AccessUrlTask extends ZapTask {
 	
 	private String url;
 	
+	@Override
 	public void execute() throws BuildException {
 		try {
 			this.getClientApi().accessUrl(url);

File: src/org/zaproxy/clientapi/ant/ActiveScanUrlTask.java
Patch:
@@ -25,6 +25,7 @@ public class ActiveScanUrlTask extends ZapTask {
 	
 	private String url;
 	
+	@Override
 	public void execute() throws BuildException {
 		try {
 			this.getClientApi().activeScanUrl(url);

File: src/org/zaproxy/clientapi/ant/AlertCheckTask.java
Patch:
@@ -30,6 +30,7 @@ public class AlertCheckTask extends ZapTask {
 	private List<AlertTask> ignoreAlertTasks = new ArrayList<AlertTask>();
 	private List<AlertTask> requireAlertTasks = new ArrayList<AlertTask>();
 	
+	@Override
 	public void execute() throws BuildException {
 		try {
 			List<Alert> ignoreAlerts = new ArrayList<Alert>();

File: src/org/zaproxy/clientapi/ant/LoadSessionTask.java
Patch:
@@ -25,6 +25,7 @@ public class LoadSessionTask extends ZapTask {
 	
 	private String name;
 	
+	@Override
 	public void execute() throws BuildException {
 		try {
 			this.getClientApi().loadSession(name);

File: src/org/zaproxy/clientapi/ant/NewSessionTask.java
Patch:
@@ -25,6 +25,7 @@ public class NewSessionTask extends ZapTask {
 	
 	private String name;
 	
+	@Override
 	public void execute() throws BuildException {
 		try {
 			this.getClientApi().newSession(name);

File: src/org/zaproxy/clientapi/ant/SaveSessionTask.java
Patch:
@@ -25,6 +25,7 @@ public class SaveSessionTask extends ZapTask {
 	
 	private String name;
 	
+	@Override
 	public void execute() throws BuildException {
 		try {
 			this.getClientApi().saveSession(name);

File: src/org/zaproxy/clientapi/ant/SpiderUrlTask.java
Patch:
@@ -25,6 +25,7 @@ public class SpiderUrlTask extends ZapTask {
 	
 	private String url;
 	
+	@Override
 	public void execute() throws BuildException {
 		try {
 			this.getClientApi().spiderUrl(url);

File: src/org/zaproxy/clientapi/ant/StopZapTask.java
Patch:
@@ -23,6 +23,7 @@
 
 public class StopZapTask extends ZapTask {
 	
+	@Override
 	public void execute() throws BuildException {
 		try {
 			this.getClientApi().stopZap();

File: src/org/zaproxy/clientapi/core/Alert.java
Patch:
@@ -140,6 +140,7 @@ public boolean matches (Alert alertFilter) {
 		return matches;
 	}
 	
+	@Override
 	public String toString() {
 		StringBuilder sb = new StringBuilder();
 		sb.append("\tAlert: ").append(getAlert()).append(", ");

File: src/org/zaproxy/zap/extension/ascan/CategoryTableModel.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/03/14 Changed to use the internationalised strings.
+// ZAP: 2012/04/25 Changed to use the method Boolean.valueOf.
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.List;
@@ -121,7 +122,8 @@ public Object getValueAt(int row, int col) {
         switch (col) {
         	case 0:	result = test.getName();
         			break;
-        	case 1: result = new Boolean(test.isEnabled());
+        	case 1: // ZAP: Changed to use the method Boolean.valueOf.
+        			result = Boolean.valueOf(test.isEnabled());
         			break;
         	default: result = "";
         }

File: src/org/zaproxy/zap/extension/httppanelviews/paramtable/HttpPanelParamTableModel.java
Patch:
@@ -133,6 +133,7 @@ public boolean hasChanged() {
 		return hasChanged;
 	}
 	
+    @Override
     public boolean isCellEditable(int rowIndex, int columnIndex) {
         return isEditable;
     }
@@ -173,6 +174,7 @@ public void save() {
 		saveAllParams();
 	}
 
+    @Override
     public String getColumnName(int col) {
         return columnNames[col];
     }

File: src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
Patch:
@@ -147,13 +147,14 @@ protected void save (RegexAutoTagScanner defn) {
 		
 	}
 
-	@SuppressWarnings("unchecked")
+	
 	protected void add (RegexAutoTagScanner defn) {
         FileConfiguration config = this.getModel().getOptionsParam().getConfig();
     	String pscanName = defn.getName();
 
         // Add to the list
-    	List names = config.getList(PSCAN_NAMES);
+    	@SuppressWarnings("unchecked")
+    	List<String> names = config.getList(PSCAN_NAMES);
     	names.add(pscanName);
 		config.setProperty(PSCAN_NAMES, names);
 

File: src/org/zaproxy/zap/extension/pscan/PolicyPassiveScanTableModel.java
Patch:
@@ -113,7 +113,7 @@ public Object getValueAt(int row, int col) {
         switch (col) {
         	case 0:	result = test.getName();
         			break;
-        	case 1: result = new Boolean(test.isEnabled());
+        	case 1: result = Boolean.valueOf(test.isEnabled());
         			break;
         	default: result = "";
         }

File: src/org/zaproxy/zap/extension/pscan/scanner/RegexAutoTagScanner.java
Patch:
@@ -151,6 +151,7 @@ public void setResponseBodyRegex(String responseBodyRegex) {
 		}
 	}
 
+	@Override
 	public String getName() {
 		return name;
 	}
@@ -159,6 +160,7 @@ public void setName(String name) {
 		this.name = name;
 	}
 
+	@Override
 	public void scanHttpRequestSend(HttpMessage msg, int id) {
 		if (! this.isEnabled()) {
 			return;

File: src/org/zaproxy/zap/extension/brk/ExtensionBreak.java
Patch:
@@ -313,6 +313,8 @@ private void sessionAboutToChange() {
 	
 	@Override
 	public void destroy() {
-		breakPanel.savePanels();
+		if (breakPanel != null) {
+			breakPanel.savePanels();
+		}
 	}
 }
\ No newline at end of file

File: src/org/parosproxy/paros/extension/encoder/EncoderDialog.java
Patch:
@@ -211,7 +211,7 @@ private JScrollPane getJScrollPane1() {
 	/**
 	 * This method initializes txtEncode	
 	 * 	
-	 * @return javax.swing.ZapTextArea
+	 * @return org.zaproxy.zap.utils.ZapTextArea
 	 */    
 	private ZapTextArea getTxtEncode() {
 		if (txtEncode == null) {
@@ -242,7 +242,7 @@ public void mouseClicked(java.awt.event.MouseEvent e) {
 	/**
 	 * This method initializes txtDecode	
 	 * 	
-	 * @return javax.swing.ZapTextArea
+	 * @return org.zaproxy.zap.utils.ZapTextArea
 	 */    
 	private ZapTextArea getTxtDecode() {
 		if (txtDecode == null) {

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -496,7 +496,7 @@ private PopupMenuNote getPopupMenuNote() {
     }
     
     private void populateNotesAddDialogAndSetVisible(HistoryReference ref, String note) {
-    	dialogNotesAdd.getTxtDisplay().setText(note);
+    	dialogNotesAdd.setNote(note);
     	dialogNotesAdd.setHistoryRef(ref);
     	dialogNotesAdd.setVisible(true);
     }

File: src/org/parosproxy/paros/extension/history/HistoryFilterDialog.java
Patch:
@@ -229,7 +229,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	/**
 	 * This method initializes txtPattern	
 	 * 	
-	 * @return javax.swing.ZapTextField	
+	 * @return org.zaproxy.zap.utils.ZapTextField	
 	 */    
 	private ZapTextField getTxtPattern() {
 		if (txtPattern == null) {

File: src/org/parosproxy/paros/extension/patternsearch/SearchDialog.java
Patch:
@@ -270,7 +270,7 @@ private JScrollPane getJScrollPane1() {
     /**
      * This method initializes txtEncode
      * 
-     * @return javax.swing.ZapTextArea
+     * @return org.zaproxy.zap.utils.ZapTextArea
      */
     private ZapTextArea getTxtPattern() {
         if (txtPattern == null) {

File: src/org/parosproxy/paros/extension/spider/SpiderPanel.java
Patch:
@@ -160,7 +160,7 @@ private JPanel getRightPanel() {
 	/**
 	 * This method initializes txtURISkip	
 	 * 	
-	 * @return javax.swing.ZapTextArea	
+	 * @return org.zaproxy.zap.utils.ZapTextArea	
 	 */    
 	ZapTextArea getTxtURIFound() {
 		if (txtURIFound == null) {
@@ -204,7 +204,7 @@ private JScrollPane getJScrollPane() {
 	/**
 	 * This method initializes txtURISkip	
 	 * 	
-	 * @return javax.swing.ZapTextArea	
+	 * @return org.zaproxy.zap.utils.ZapTextArea	
 	 */    
 	ZapTextArea getTxtURISkip() {
 		if (txtURISkip == null) {

File: src/org/parosproxy/paros/view/AbstractParamDialog.java
Patch:
@@ -381,7 +381,7 @@ private JPanel getPanelHeadline() {
 	/**
 	 * This method initializes txtHeadline	
 	 * 	
-	 * @return javax.swing.ZapTextField	
+	 * @return org.zaproxy.zap.utils.ZapTextField	
 	 */    
 	private ZapTextField getTxtHeadline() {
 		if (txtHeadline == null) {

File: src/org/parosproxy/paros/view/FindDialog.java
Patch:
@@ -227,7 +227,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	/**
 	 * This method initializes txtFind	
 	 * 	
-	 * @return javax.swing.ZapTextField	
+	 * @return org.zaproxy.zap.utils.ZapTextField	
 	 */    
 	private ZapTextField getTxtFind() {
 		if (txtFind == null) {

File: src/org/parosproxy/paros/view/OutputPanel.java
Patch:
@@ -83,7 +83,7 @@ private JScrollPane getJScrollPane() {
 	/**
 	 * This method initializes txtOutput	
 	 * 	
-	 * @return javax.swing.ZapTextArea	
+	 * @return org.zaproxy.zap.utils.ZapTextArea	
 	 */    
 	private ZapTextArea getTxtOutput() {
 		if (txtOutput == null) {

File: src/org/zaproxy/zap/extension/beanshell/BeanShellConsoleFrame.java
Patch:
@@ -187,6 +187,7 @@ public void actionPerformed(ActionEvent e) {
 						try {
 							String temp = loadScript(fc.getSelectedFile());
 							getBeanShellPanel().getTxtEditor().setText(temp);
+							getBeanShellPanel().getTxtEditor().discardAllEdits();
 							getBeanShellPanel().setSaved(true);
 							currentScriptFile = fc.getSelectedFile();
 						} catch (IOException ee) {

File: src/org/zaproxy/zap/extension/httppanel/view/text/HttpPanelTextView.java
Patch:
@@ -132,6 +132,9 @@ public boolean isEditable() {
 	@Override
 	public void setEditable(boolean editable) {
 		httpPanelTextArea.setEditable(editable);
+		if (!editable) {
+			httpPanelTextArea.discardAllEdits();
+		}
 	}
 	
 	@Override

File: src/org/zaproxy/zap/extension/lang/OptionsLangPanel.java
Patch:
@@ -181,6 +181,7 @@ public void actionPerformed(ActionEvent evt) {
 					if (!fileTextField.getText().equals("")) {
 						LangImporter.importLanguagePack(fileTextField.getText());
 						fileTextField.setText("");
+						fileTextField.discardAllEdits();
 						loadLocales();
 					}
 				}
@@ -214,6 +215,7 @@ public boolean accept(java.io.File f) {
 
 		if (state == JFileChooser.APPROVE_OPTION) {
 			fileTextField.setText(fc.getSelectedFile().toString());
+			fileTextField.discardAllEdits();
 		}
 	}
 	

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -195,7 +195,7 @@ private JPanel getRightPanel() {
 	/**
 	 * This method initializes txtURISkip	
 	 * 	
-	 * @return javax.swing.ZapTextArea	
+	 * @return org.zaproxy.zap.utils.ZapTextArea	
 	 */    
 	ZapTextArea getTxtURIFound() {
 		if (txtURIFound == null) {
@@ -239,7 +239,7 @@ private JScrollPane getJScrollPane() {
 	/**
 	 * This method initializes txtURISkip	
 	 * 	
-	 * @return javax.swing.ZapTextArea	
+	 * @return org.zaproxy.zap.utils.ZapTextArea	
 	 */    
 	ZapTextArea getTxtURISkip() {
 		if (txtURISkip == null) {

File: src/org/zaproxy/zap/view/OptionsConnectionPanel.java
Patch:
@@ -219,7 +219,9 @@ public void initParam(Object obj) {
 		    if (connectionParam.getProxyChainUserName().equals("")) {
 		    } else {
 		        txtProxyChainRealm.setText(connectionParam.getProxyChainRealm());
+		        txtProxyChainRealm.discardAllEdits();
 		        txtProxyChainUserName.setText(connectionParam.getProxyChainUserName());
+		        txtProxyChainUserName.discardAllEdits();
 		    }
 	    }
 	}

File: src/org/zaproxy/zap/scanner/plugin/TestPathTraversal.java
Patch:
@@ -140,13 +140,13 @@ public void scan(HttpMessage msg, String param, String value) {
 				String response = msg.getResponseHeader().toString() + msg.getResponseBody().toString();
 	            matcher = Pattern.compile(PATTERNS[i]).matcher(response);
 	            if (matcher.find()) {
-	                bingo(Alert.RISK_HIGH, Alert.WARNING, "", null, param, TARGETS[i] , msg);
+	                bingo(Alert.RISK_HIGH, Alert.WARNING, "", param, null, TARGETS[i] , msg);
 	                break;
 	            }
 			}
 			
         } catch (Exception e) {
-            log.error(e.getMessage(), e);;
+            log.error(e.getMessage(), e);
         }
 	}
 }

File: src/org/zaproxy/zap/extension/pscan/scanner/CrossDomainScriptInclusionScanner.java
Patch:
@@ -93,7 +93,7 @@ private boolean isScriptFromOtherDomain (String host, String scriptURL){
 		try {
 			URI scriptURI = new URI(scriptURL, true);
 			String scriptHost = scriptURI.getHost();
-			if(scriptHost != null && scriptHost.toLowerCase().equals(host.toLowerCase())){
+			if(scriptHost != null && !scriptHost.toLowerCase().equals(host.toLowerCase())){
 				result = true;
 			} 
 		}catch (URIException e) {

File: src/org/zaproxy/zap/extension/pscan/scanner/ContentTypeMissingScanner.java
Patch:
@@ -42,7 +42,7 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 				if (contentType != null) {
 					for (String contentTypeDirective : contentType) {
 						if (contentTypeDirective.isEmpty()) {
-							this.raiseAlert(msg, id, contentTypeDirective, true);
+							this.raiseAlert(msg, id, contentTypeDirective, false);
 						}
 					}
 				} else {

File: src/org/zaproxy/zap/extension/pscan/scanner/ContentTypeMissingScanner.java
Patch:
@@ -42,11 +42,11 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 				if (contentType != null) {
 					for (String contentTypeDirective : contentType) {
 						if (contentTypeDirective.isEmpty()) {
-							this.raiseAlert(msg, id, contentTypeDirective, false);
+							this.raiseAlert(msg, id, contentTypeDirective, true);
 						}
 					}
 				} else {
-					this.raiseAlert(msg, id, "", false);
+					this.raiseAlert(msg, id, "", true);
 				}
 		}
 	}

File: src/org/zaproxy/zap/extension/pscan/OptionsPassiveScan.java
Patch:
@@ -337,7 +337,7 @@ public void mouseClicked(MouseEvent e){
 	        				RegexAutoTagScanner rats = (RegexAutoTagScanner) defn;
 	        				editName.setText(rats.getName());
 	        				editType.setText(rats.getType().name());
-	        				editConfig.setText(rats.getConfig());
+	        				editConfig.setText(rats.getConf());
 	        		    	editRequestUrlRegex.setText(rats.getRequestUrlRegex());
 	        		    	editRequestHeaderRegex.setText(rats.getRequestHeaderRegex());
 	        		    	editResponseHeaderRegex.setText(rats.getResponseHeaderRegex());
@@ -379,8 +379,8 @@ private void saveEditForm() {
 					editName.getText(), RegexAutoTagScanner.TYPE.TAG, editConfig.getText());
 			isNew = true;
 		}
-		// TODO validate params, eg config is mandatory
-		rats.setConfig(editConfig.getText());
+		// TODO validate params, eg conf is mandatory
+		rats.setConf(editConfig.getText());
 		rats.setRequestHeaderRegex(editRequestHeaderRegex.getText());
 		rats.setRequestUrlRegex(editRequestUrlRegex.getText());
 		rats.setResponseHeaderRegex(editResponseHeaderRegex.getText());

File: src/org/zaproxy/zap/extension/pscan/scanner/CrossSiteRequestForgeryScanner.java
Patch:
@@ -69,7 +69,7 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 		}
 
 		List<Element> formElements = source.getAllElements(HTMLElementName.FORM);
-		List<String> tokenNames = extAntiCSRF.getParam().getTokens();
+		List<String> tokenNames = extAntiCSRF.getAntiCsrfTokenNames();
 		boolean foundCsrfToken = false;
 		
 		if (formElements != null && formElements.size() > 0) {

File: src/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java
Patch:
@@ -69,11 +69,11 @@ public void setTokens(List<String> tokens) {
 		getConfig().setProperty(TOKENS, tokens);
 	}
 
-	public void addToken(String param) {
+	protected void addToken(String param) {
 		this.tokens.add(param);
 	}
 
-	public void removeToken(String name) {
+	protected void removeToken(String name) {
 		this.tokens.remove(name);
 	}
 	

File: src/org/zaproxy/zap/extension/params/ExtensionParams.java
Patch:
@@ -382,15 +382,14 @@ public void addAntiCsrfToken() {
 			(ExtensionAntiCSRF) Control.getSingleton().getExtensionLoader().getExtension(ExtensionAntiCSRF.NAME);
 
 		if (extAntiCSRF != null && item != null) {
-			extAntiCSRF.getParam().addToken(item.getName());
+			extAntiCSRF.addAntiCsrfTokenName(item.getName());
 			item.addFlag(HtmlParameter.Flags.anticsrf.name());
 			// Repaint so change shows up
 			this.getParamsPanel().getParamsTable().repaint();
 
 			// Dont think we need to do this... at least until rescan option implemented ...
 			//Control.getSingleton().getMenuToolsControl().options(Constant.messages.getString("options.acsrf.title"));
 			
-			
 		}
 
 	}
@@ -402,7 +401,7 @@ public void removeAntiCsrfToken() {
 			(ExtensionAntiCSRF) Control.getSingleton().getExtensionLoader().getExtension(ExtensionAntiCSRF.NAME);
 
 		if (extAntiCSRF != null && item != null) {
-			extAntiCSRF.getParam().removeToken(item.getName());
+			extAntiCSRF.removeAntiCsrfTokenName(item.getName());
 			item.removeFlag(HtmlParameter.Flags.anticsrf.name());
 			// Repaint so change shows up
 			this.getParamsPanel().getParamsTable().repaint();

File: src/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -613,6 +613,7 @@ private JSplitPane createSplitPane(int orientation) {
 			
 			final JSplitPane splitPane = new JSplitPane(orientation, tabbedPaneRequest, tabbedPaneResponse);
 			splitPane.setDividerSize(3);
+			splitPane.setResizeWeight(0.5d);
 			splitPane.setContinuousLayout(false);
 			splitPane.setDoubleBuffered(true);
 			

File: src/org/zaproxy/zap/extension/httppanel/component/split/request/RequestSplitComponent.java
Patch:
@@ -88,6 +88,7 @@ protected void initUi() {
 		
 		splitMain = new JSplitPane();
 		splitMain.setDividerSize(3);
+		splitMain.setResizeWeight(0.5d);
 		splitMain.setContinuousLayout(false);
 		splitMain.setOrientation(JSplitPane.VERTICAL_SPLIT);
 		

File: src/org/zaproxy/zap/extension/httppanelviews/syntaxhighlight/AutoDetectSyntaxHttpPanelTextArea.java
Patch:
@@ -70,6 +70,6 @@ public void loadConfiguration(String key, FileConfiguration fileConfiguration) {
 	public void saveConfiguration(String key, FileConfiguration fileConfiguration) {
 		super.saveConfiguration(key, fileConfiguration);
 		
-		fileConfiguration.setProperty(key + "syntax." + AUTO_DETECT, isAutoDetectSyntax);
+		fileConfiguration.setProperty(key + "syntax." + AUTO_DETECT, Boolean.valueOf(isAutoDetectSyntax));
 	}
 }

File: src/org/zaproxy/zap/extension/httppanelviews/syntaxhighlight/HttpPanelSyntaxHighlightTextArea.java
Patch:
@@ -109,7 +109,7 @@ public HttpPanelSyntaxHighlightTextArea() {
 		
 		setHyperlinksEnabled(false);
 
-		setAntiAliasingEnabled(false);
+		setAntiAliasingEnabled(true);
 
 		setLineWrap(true);
 		

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -26,6 +26,7 @@
 //      Removed the calls XMLConfiguration.load() as they are not needed, the XMLConfiguration constructor used already does that.
 // ZAP: 2011/11/20 Support for extension factory
 // ZAP: 2012/03/03 Added ZAP homepage
+// ZAP: 2012/03/15 Removed a @SuppressWarnings annotation from the method copyAllProperties.
 
 package org.parosproxy.paros;
 
@@ -378,9 +379,8 @@ private void copyProperty(XMLConfiguration fromConfig, XMLConfiguration toConfig
     	toConfig.setProperty(key, fromConfig.getProperty(key));
     }
     
-    @SuppressWarnings("unchecked")
 	private void copyAllProperties(XMLConfiguration fromConfig, XMLConfiguration toConfig, String prefix) {
-    	Iterator iter = fromConfig.getKeys(prefix);
+    	Iterator<?> iter = fromConfig.getKeys(prefix);
     	while (iter.hasNext()) {
     		String key = (String)iter.next();
     		copyProperty(fromConfig, toConfig, key);

File: src/org/parosproxy/paros/core/scanner/Analyser.java
Patch:
@@ -18,6 +18,8 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/03/15 Changed the method getPathRegex to use the class StringBuilder 
+//      instead of StringBuffer.
 package org.parosproxy.paros.core.scanner;
 
 import java.io.IOException;
@@ -219,7 +221,7 @@ private String getChildSuffix(SiteNode node, boolean performRecursiveCheck) {
 	private String getPathRegex(URI uri) throws URIException {
 	    URI newUri = (URI) uri.clone();
 	    String query = newUri.getQuery();
-	    StringBuffer sb = new StringBuffer(100);
+	    StringBuilder sb = new StringBuilder(100);
 		
 		// case should be sensitive
 		//sb.append("(?i)");

File: src/org/parosproxy/paros/core/scanner/plugin/TestCrossSiteScriptNoBracket.java
Patch:
@@ -20,6 +20,8 @@
  */
 // ZAP: 2011/11/30 Depreciated
 // ZAP: 2012/01/02 Separate param and attack
+// ZAP: 2012/03/15 Changed the method scan to use the class StringBuilder 
+//      instead of StringBuffer.
 
 package org.parosproxy.paros.core.scanner.plugin;
 
@@ -141,7 +143,7 @@ public void scan(HttpMessage msg, String param, String value) {
 		//	return;
 		//}
 
-        StringBuffer sb = new StringBuffer();
+		StringBuilder sb = new StringBuilder();
         //result = msg.getResponseBody().toString();
         if (matchBodyPattern(msg, patternXSS3, sb)) {
         	// ZAP: Changed XSS level to HIGH

File: src/org/parosproxy/paros/db/RecordHistory.java
Patch:
@@ -18,6 +18,8 @@
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
+// ZAP: 2012/03/15 Changed the RecordHistory constructor to receive a byte[]
+//      instead of String in the parameters reqBody and resBody.
 
 
 package org.parosproxy.paros.db;
@@ -45,7 +47,7 @@ public RecordHistory() {
 	}
 
 	// ZAP: Added note to RecordHistory constructor
-	public RecordHistory(int historyId, int historyType, long sessionId, long timeSentMillis, int timeElapsedMillis, String reqHeader, String reqBody, String resHeader, String resBody, String tag, String note) throws HttpMalformedHeaderException {
+	public RecordHistory(int historyId, int historyType, long sessionId, long timeSentMillis, int timeElapsedMillis, String reqHeader, byte[] reqBody, String resHeader, byte[] resBody, String tag, String note) throws HttpMalformedHeaderException {
 		setHistoryId(historyId);
 		setHistoryType(historyType);
         setSessionId(sessionId);

File: src/org/parosproxy/paros/extension/OptionsChangedListener.java
Patch:
@@ -18,6 +18,8 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/03/15 Changed the first letter of the method OptionsChanged to lower case.
+
 package org.parosproxy.paros.extension;
 
 import org.parosproxy.paros.model.OptionsParam;
@@ -28,6 +30,6 @@
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
 public interface OptionsChangedListener {
-    public void OptionsChanged(OptionsParam optionsParam);
+    public void optionsChanged(OptionsParam optionsParam);
     
 }

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -28,6 +28,8 @@
 // ZAP: 2011/12/21 Added 'show in history' popup
 // ZAP: 2012/02/18 Rationalised session handling
 // ZAP: 2012/03/03 Moved popups to stdmenus extension
+// ZAP: 2012/03/15 Changed the method getResendDialog to pass the configuration key
+//      to the ManualRequestEditorDialog.
 
 package org.parosproxy.paros.extension.history;
 
@@ -415,7 +417,7 @@ private PopupMenuPurgeHistory getPopupMenuPurgeHistory() {
 	 */    
 	public ManualRequestEditorDialog getResendDialog() {
 		if (resendDialog == null) {
-			resendDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, true, this);
+			resendDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, true, this, "resend");
 			resendDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
 		}
 		return resendDialog;

File: src/org/zaproxy/zap/control/ExtensionFactory.java
Patch:
@@ -106,7 +106,7 @@ public synchronized static void loadAllExtension(ExtensionLoader extensionLoader
             // Add the ordered extensions
             Iterator<Integer> iter = mapOrderToExtension.keySet().iterator();
             while (iter.hasNext()) {
-            	int order = iter.next();
+            	Integer order = iter.next();
             	Extension ext = mapOrderToExtension.get(order);
             	if (ext.isEnabled()) {
             		log.debug("Ordered extension " + order + " " + ext.getName());
@@ -128,7 +128,7 @@ public static List<Extension> getAllExtensions() {
     }
     
     public static Extension getExtension(int id) {
-        Extension test = (Extension) mapAllExtension.get(new Integer(id));
+        Extension test = mapAllExtension.get(new Integer(id));
         return test;
     }
     

File: src/org/zaproxy/zap/extension/ExtensionPopupMenu.java
Patch:
@@ -36,6 +36,9 @@ public ExtensionPopupMenu(String label) {
         super(label);
     }
     
+    /**
+	 * @param invoker  
+	 */
     public boolean isEnableForComponent(Component invoker) {
         return true;
     }

File: src/org/zaproxy/zap/extension/alert/AlertViewPanel.java
Patch:
@@ -188,10 +188,10 @@ public void actionPerformed(ActionEvent e) {
 									alertSolution.setText(v.getSolution());
 								}
 								if (v.getReferences() != null) {
-									StringBuffer sb = new StringBuffer();
+									StringBuilder sb = new StringBuilder();
 									for (String ref : v.getReferences()) {
 										sb.append(ref);
-										sb.append("\n");
+										sb.append('\n');
 									}
 									alertReference.setText(sb.toString());
 								}

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertDelete.java
Patch:
@@ -67,7 +67,7 @@ private void initialize() {
         this.addActionListener(new java.awt.event.ActionListener() { 
 
         	public void actionPerformed(java.awt.event.ActionEvent e) {
-			    TreePath[] paths = (TreePath[]) extension.getAlertPanel().getTreeAlert().getSelectionPaths();
+			    TreePath[] paths = extension.getAlertPanel().getTreeAlert().getSelectionPaths();
 			    if (paths != null) {
 			    	if (View.getSingleton().showConfirmDialog(Constant.messages.getString("scanner.delete.confirm")) 
 			    			!= JOptionPane.OK_OPTION) {

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -286,7 +286,7 @@ private JSONObject httpMessageToJSON(HttpMessage hm) {
 				GZIPInputStream gis = new GZIPInputStream(bais);
 				InputStreamReader isr = new InputStreamReader(gis);
 				BufferedReader br = new BufferedReader(isr);
-				StringBuffer sb = new StringBuffer();
+				StringBuilder sb = new StringBuilder();
 				String line = null;
 				while ((line = br.readLine()) != null) {
 					sb.append(line);
@@ -344,7 +344,7 @@ private List<Alert> getAlerts() throws ApiException {
 			Vector<Integer> v = tableAlert.getAlertList();
 
 			for (int i = 0; i < v.size(); i++) {
-				int alertId = ((Integer) v.get(i)).intValue();
+				int alertId = v.get(i).intValue();
 				RecordAlert recAlert = tableAlert.read(alertId);
 				Alert alert = new Alert(recAlert);
 
@@ -372,7 +372,7 @@ private ArrayList<HttpMessage> getHttpMessages() throws ApiException,
 					.getSingleton().getSession().getSessionId());
 			ArrayList<HttpMessage> mgss = new ArrayList<HttpMessage>();
 			for (int i = 0; i < v.size(); i++) {
-				int sessionId = ((Integer) v.get(i)).intValue();
+				int sessionId = v.get(i).intValue();
 				RecordHistory recAlert = tableHistory.read(sessionId);
 				HttpMessage msg = recAlert.getHttpMessage();
 				if ( ! msg.getRequestHeader().isImage() && ! msg.getResponseHeader().isImage()) {

File: src/org/zaproxy/zap/extension/api/WebUI.java
Patch:
@@ -36,7 +36,7 @@ public String handleRequest(String component, ApiImplementor impl,
 			RequestType reqType, String name) throws ApiException {
 		// Generate HTML UI
 		//contentType = "text/html";
-		StringBuffer sb = new StringBuffer();
+		StringBuilder sb = new StringBuilder();
 		sb.append("<head>\n");
 		sb.append("<title>");
 		sb.append(Constant.messages.getString("api.html.title"));

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanelCellRenderer.java
Patch:
@@ -249,7 +249,7 @@ public Component getListCellRendererComponent(JList list, Object value, int inde
             txtReason.setText(msg.getResponseHeader().getReasonPhrase());
             txtRTT.setText(msg.getTimeElapsedMillis()+"ms");
             // ZAP: Support for multiple tags
-            StringBuffer sb = new StringBuffer();
+            StringBuilder sb = new StringBuilder();
             for (String tag : msg.getTags()) {
             	if (sb.length() > 0) {
                 	sb.append(", ");

File: src/org/zaproxy/zap/extension/bruteforce/BruteForceListenner.java
Patch:
@@ -29,5 +29,5 @@ public interface BruteForceListenner {
 	
 	public void scanProgress(String host, int port, int done, int todo);
 	
-    public void foundDir(URL url, int statusCode, String responce, String baseCase, String rawResponce, BaseCase baseCaseObj);
+    public void foundDir(URL url, int statusCode, String response, String baseCase, String rawResponse, BaseCase baseCaseObj);
 }

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceCopy.java
Patch:
@@ -69,12 +69,12 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
                     return;
                 }
                 
-                StringBuffer sb = new StringBuffer();
+                StringBuilder sb = new StringBuilder();
                 for (Object obj: objs) {
                 	BruteForceItem item = (BruteForceItem)obj;
 
                 	sb.append(item.getUrl());
-                	sb.append("\n");
+                	sb.append('\n');
                 }
                 setClipboardContents(sb.toString());
         	}

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceDirectory.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.awt.Component;
 
-import javax.swing.ImageIcon;
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;

File: src/org/zaproxy/zap/extension/compare/ExtensionCompare.java
Patch:
@@ -220,7 +220,7 @@ public String getDescription() {
 				        sset.addAll(curMap.keySet());
 				        sset.addAll(cmpMap.keySet());
 				        
-					    StringBuffer sb = new StringBuffer(500);
+				        StringBuilder sb = new StringBuilder(500);
 					    sb.append("<?xml version=\"1.0\"?>");
 					    sb.append(CRLF);
 					    sb.append("<report>");

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLPanel.java
Patch:
@@ -69,7 +69,7 @@ public class DynamicSSLPanel extends AbstractParamPanel {
 
 	private KeyStore rootca;
 
-	private final Logger logger = Logger.getLogger(DynamicSSLPanel.class);
+	private static final Logger logger = Logger.getLogger(DynamicSSLPanel.class);
 
 	/**
 	 * Create the panel.

File: src/org/zaproxy/zap/extension/fuzz/FileFuzzer.java
Patch:
@@ -78,6 +78,8 @@ private void init() {
 	public Iterator<String> getIterator() {
 		if (length == -1) {
 			init();
+		} else {
+			iter = fuzzStrs.iterator();
 		}
 		return iter;
 	}

File: src/org/zaproxy/zap/extension/invoke/InvokeParam.java
Patch:
@@ -93,7 +93,7 @@ public void setListInvoke(List<InvokableApp> listAuth) {
             getConfig().clearProperty(INVOKE + ".A"+i);
         }
         for (int i=0; i<listAuth.size(); i++) {
-            app = (InvokableApp) listAuth.get(i);            
+            app = listAuth.get(i);            
             getConfig().setProperty(getInvoke(i, INVOKE_NAME), app.getDisplayName());
             if (app.getWorkingDirectory() != null) {
                 getConfig().setProperty(getInvoke(i, INVOKE_DIRECTORY), app.getWorkingDirectory().getAbsolutePath());

File: src/org/zaproxy/zap/extension/lang/OptionsLangPanel.java
Patch:
@@ -178,7 +178,7 @@ private JButton getImportButton() {
 			importButton.addActionListener(new ActionListener() {
 				@Override
 				public void actionPerformed(ActionEvent evt) {
-					if (fileTextField.getText() != "") {
+					if (!fileTextField.getText().equals("")) {
 						LangImporter.importLanguagePack(fileTextField.getText());
 						fileTextField.setText("");
 						loadLocales();

File: src/org/zaproxy/zap/extension/params/HtmlParameterStats.java
Patch:
@@ -100,7 +100,7 @@ public void addValue(String value) {
 	}
 	
 	public String getValuesSummary() {
-		StringBuffer sb = new StringBuffer();
+		StringBuilder sb = new StringBuilder();
 		for (String value: values) {
 			if (sb.length() > 0) {
 				sb.append(", ");
@@ -120,7 +120,7 @@ public void addFlag(String flag) {
 	}
 	
 	public String getAllFlags() {
-		StringBuffer sb = new StringBuffer();
+		StringBuilder sb = new StringBuilder();
 		for (String flag: flags) {
 			if (sb.length() > 0) {
 				sb.append(", ");

File: src/org/zaproxy/zap/extension/params/ParamsPanel.java
Patch:
@@ -211,7 +211,7 @@ private JScrollPane getJScrollPane() {
 		return jScrollPane;
 	}
 	
-	private void setParamsTableColumnSizes(JTable table) {
+	private void setParamsTableColumnSizes() {
 		
 		paramsTable.getColumnModel().getColumn(0).setMinWidth(50);
 		paramsTable.getColumnModel().getColumn(0).setMaxWidth(200);
@@ -248,7 +248,7 @@ protected JTable getParamsTable() {
 			paramsTable.setRowSelectionAllowed(true);
 			paramsTable.setAutoCreateRowSorter(true);
 
-			this.setParamsTableColumnSizes(paramsTable);
+			this.setParamsTableColumnSizes();
 
 			paramsTable.setName(PANEL_NAME);
 			paramsTable.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
@@ -315,7 +315,7 @@ private void siteSelected(String site) {
 			
 			this.getParamsTable().setModel(extension.getSiteParameters(site).getModel());
 			
-			this.setParamsTableColumnSizes(paramsTable);
+			this.setParamsTableColumnSizes();
 
 			currentSite = site;
 		}

File: src/org/zaproxy/zap/extension/params/ParamsTableModel.java
Patch:
@@ -92,7 +92,7 @@ private int getPercentChange(HtmlParameterStats param) {
 		if (param.getValues().size() == 1) {
 			return 0;
 		}
-		return (int)(param.getValues().size() * 100 / param.getTimesUsed());
+		return (param.getValues().size() * 100 / param.getTimesUsed());
 	}
 
 	public HtmlParameterStats getHtmlParameterStatsAtRow(int row) {

File: src/org/zaproxy/zap/extension/portscan/PopupMenuPortCopy.java
Patch:
@@ -69,18 +69,18 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
                     return;
                 }
                 
-                StringBuffer sb = new StringBuffer();
+                StringBuilder sb = new StringBuilder();
                 for (Object obj: objs) {
                 	Integer port = (Integer) obj;
                 	sb.append(port);
-                	sb.append("\t");
+                	sb.append('\t');
             		if (Constant.messages.containsKey("port." + port)) {
             			sb.append(Constant.messages.getString("port." + port));
             		} else {
             			sb.append(Constant.messages.getString("port.unknown"));
             		}
 
-                	sb.append("\n");
+                	sb.append('\n');
                 }
                 setClipboardContents(sb.toString());
         	}

File: src/org/zaproxy/zap/extension/pscan/scanner/CrossSiteRequestForgeryScanner.java
Patch:
@@ -170,10 +170,10 @@ public String getSolution() {
      */
     public String getReference() {
     	if (vuln != null) {
-    		StringBuffer sb = new StringBuffer();
+    		StringBuilder sb = new StringBuilder();
     		for (String ref : vuln.getReferences()) {
     			if (sb.length() > 0) {
-    				sb.append("\n");
+    				sb.append('\n');
     			}
     			sb.append(ref);
     		}

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -22,6 +22,7 @@
 // ZAP: 2011/12/04 Support deleting alerts
 // ZAP: 2012/02/11 Re-ordered icons, added spider icon and notify via SiteMap
 // ZAP: 2012/03/03 Moved popups to stdmenus extension
+// ZAP: 2012/03/11 Issue 280: Escape URLs in sites tree
 
 package org.parosproxy.paros.model;
 
@@ -358,7 +359,7 @@ private SiteNode findAndAddChild(SiteNode parent, String nodeName, HistoryRefere
             SiteNode newNode = new SiteNode(this, baseRef.getHistoryType(), nodeName);
             int pos = parent.getChildCount();
             for (int i=0; i< parent.getChildCount(); i++) {
-                if (nodeName.compareTo(SiteNode.cleanName(parent.getChildAt(i).toString())) < 0) {
+            	if (((SiteNode)parent.getChildAt(i)).isParentOf(nodeName)) {
                     pos = i;
                     break;
                 }
@@ -403,7 +404,7 @@ private SiteNode findAndAddLeaf(SiteNode parent, String nodeName, HistoryReferen
             
             int pos = parent.getChildCount();
             for (int i=0; i< parent.getChildCount(); i++) {
-                if (leafName.compareTo(SiteNode.cleanName(parent.getChildAt(i).toString())) < 0) {
+            	if (((SiteNode)parent.getChildAt(i)).isParentOf(nodeName)) {
                     pos = i;
                     break;
                 }

File: src/org/parosproxy/paros/extension/Extension.java
Patch:
@@ -100,5 +100,7 @@ public interface Extension {
 	public void setEnabled(boolean enabled);
 	
 	public List<Class<?>> getDependencies();
-
+	
+	public boolean isCore ();
+	
 }

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionPanel.java
Patch:
@@ -86,8 +86,6 @@ private void initialize() {
 	@Override
     public void initParam(Object obj) {
 	    OptionsParam optionsParam = (OptionsParam) obj;
-	    //AntiCsrfParam param = optionsParam.getAntiCsrfParam();
-	    //getAntiCsrfModel().setTokens(param.getTokens());
 		List<Extension> exts = extensionModel.getExtensions();
 		for (Extension ext : exts) {
             ext.setEnabled(optionsParam.getConfig().getBoolean("ext." + ext.getName(), true));
@@ -119,7 +117,8 @@ private JTable getTableExtension() {
 			tableExt.setModel(getExtensionModel());
 			tableExt.setRowHeight(18);
 			tableExt.getColumnModel().getColumn(0).setPreferredWidth(80);
-			tableExt.getColumnModel().getColumn(1).setPreferredWidth(400);
+			tableExt.getColumnModel().getColumn(1).setPreferredWidth(80);
+			tableExt.getColumnModel().getColumn(2).setPreferredWidth(320);
 		}
 		return tableExt;
 	}

File: src/org/zaproxy/zap/extension/bruteforce/ExtensionBruteForce.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 
 import org.apache.log4j.Logger;
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.core.proxy.ProxyListener;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
@@ -181,7 +182,7 @@ public void nodeSelected(SiteNode node) {
 
     private PopupMenuBruteForceSite getPopupMenuBruteForceSite() {
         if (popupMenuBruteForceSite == null) {
-        	popupMenuBruteForceSite = new PopupMenuBruteForceSite();
+        	popupMenuBruteForceSite = new PopupMenuBruteForceSite(Constant.messages.getString("bruteforce.site.popup"));
         	popupMenuBruteForceSite.setExtension(this);
         }
         return popupMenuBruteForceSite;

File: src/org/zaproxy/zap/extension/portscan/ExtensionPortScan.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.List;
 import javax.swing.DefaultListModel;
 import org.apache.log4j.Logger;
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.core.proxy.ProxyListener;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
 import org.parosproxy.paros.extension.ExtensionHook;
@@ -165,7 +166,7 @@ public void nodeSelected(SiteNode node) {
 
     private PopupMenuPortScan getPopupMenuPortScan() {
         if (popupMenuPortScan == null) {
-            popupMenuPortScan = new PopupMenuPortScan();
+            popupMenuPortScan = new PopupMenuPortScan(Constant.messages.getString("ports.site.popup"));
             popupMenuPortScan.setExtension(this);
         }
         return popupMenuPortScan;

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -25,6 +25,7 @@
 //      Changed to use the correct file when an error occurs during the load of the configuration file.
 //      Removed the calls XMLConfiguration.load() as they are not needed, the XMLConfiguration constructor used already does that.
 // ZAP: 2011/11/20 Support for extension factory
+// ZAP: 2012/03/03 Added ZAP homepage
 
 package org.parosproxy.paros;
 
@@ -55,6 +56,7 @@ public final class Constant {
 	// ZAP: rebrand
     public static final String PROGRAM_NAME     = "OWASP ZAP";
     public static final String PROGRAM_NAME_SHORT = "ZAP";
+    public static final String ZAP_HOMEPAGE		= "http://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project";
     
 //  ************************************************************
 //  the config.xml MUST be set to be the same as the version_tag

File: src/org/parosproxy/paros/core/scanner/Plugin.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/08/30 Support for scanner levels
+// ZAP: 2012/03/03 Added getLevel(boolean incDefault) 
 
 package org.parosproxy.paros.core.scanner;
 
@@ -126,6 +127,8 @@ public enum Level {OFF, DEFAULT, LOW, MEDIUM, HIGH};
 	
 	public void setDelayInMs(int delay);
 	
+	public Level getLevel(boolean incDefault);
+	
 	public Level getLevel();
 	
 	public void setLevel(Level level);

File: src/org/zaproxy/zap/extension/pscan/scanner/InformationDisclosureDatabaseErrors.java
Patch:
@@ -73,7 +73,7 @@ private boolean DoesRequestContainsDBErrorMessage (HttpBody body) {
 		try {
 			BufferedReader reader = new BufferedReader(new FileReader(databaseErrorFile));
 			while ((line = reader.readLine()) != null) {
-				if (!line.startsWith("#") && body.toString().contains(line)) {
+				if (!line.startsWith("#") && body.toString().toLowerCase().contains(line.toLowerCase())) {
 					return true;
 				}
 			}

File: src/org/zaproxy/zap/extension/pscan/scanner/InformationDisclosureDebugErrors.java
Patch:
@@ -73,7 +73,7 @@ private boolean DoesRequestContainsDebugErrorMessage (HttpBody body) {
 		try {
 			BufferedReader reader = new BufferedReader(new FileReader(debugErrorFile));
 			while ((line = reader.readLine()) != null) {
-				if (!line.startsWith("#") && body.toString().contains(line)) {
+				if (!line.startsWith("#") && body.toString().toLowerCase().contains(line.toLowerCase())) {
 					return true;
 				}
 			}

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -58,6 +58,8 @@ abstract public class HttpHeader implements java.io.Serializable{
 	public static final String SET_COOKIE		= "Set-Cookie";
 	public static final String SET_COOKIE2		= "Set-Cookie2";
 	public static final String X_XSS_PROTECTION = "X-XSS-Protection";
+	public static final String X_FRAME_OPTION	= "X-Frame-Options";
+	public static final String X_CONTENT_TYPE_OPTIONS = "X-Content-Type-Options";
 
 	public static final String HTTP09 	= "HTTP/0.9";
 	public static final String HTTP10 	= "HTTP/1.0";

File: src/org/zaproxy/zap/scanner/plugin/TestPathTraversal.java
Patch:
@@ -38,8 +38,7 @@ public class TestPathTraversal extends AbstractAppParamPlugin {
 		"%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f" + 
 				"%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
 		// Windows
-		"\\Windows\\system.ini",
-		"..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\Windows\\system.ini",
+		"%5cWindows%5csystem.ini",
 		"..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5cWindows%5csystem.ini",
 		"%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c" +
 				"%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5cWindows%5csystem.ini",
@@ -55,7 +54,6 @@ public class TestPathTraversal extends AbstractAppParamPlugin {
 		"\\[drivers\\]",
 		"\\[drivers\\]",
 		"\\[drivers\\]",
-		"\\[drivers\\]",
 	};
 
     private static Vulnerability vuln = Vulnerabilities.getVulnerability("wasc_33");
@@ -136,6 +134,7 @@ public void scan(HttpMessage msg, String param, String value) {
 	        Matcher matcher = null;
 
 			for (int i=0; i < TARGETS.length; i++) {
+				msg = msg.cloneRequest();
 				setEscapedParameter(msg, param, TARGETS[i]);
 	            sendAndReceive(msg);
 				String response = msg.getResponseHeader().toString() + msg.getResponseBody().toString();

File: src/org/parosproxy/paros/view/MainPopupMenu.java
Patch:
@@ -22,6 +22,8 @@
 //      ExtensionPopupMenuItem, added the methods addMenu(ExtensionPopupMenu menu),
 //      removeMenu(ExtensionPopupMenu menu), handleMenu and handleMenuItem and
 //      changed the method show to use the methods handleMenu and handleMenuItem.
+// ZAP: 2012/02/19 Removed the Delete button
+
 package org.parosproxy.paros.view;
 
 import java.awt.Component;
@@ -78,7 +80,7 @@ private void initialize() {
         
 	    // added pre-set popup menu here
 //        this.add(getPopupFindMenu());
-        this.add(getPopupDeleteMenu());
+        //this.add(getPopupDeleteMenu());
         this.add(getPopupPurgeMenu());
 	}
 	

File: src/org/parosproxy/paros/view/SessionGeneralPanel.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/05/15 i19n
+// ZAP: 2012/02/18 Rationalised session handling
 
 package org.parosproxy.paros.view;
 
@@ -30,6 +31,7 @@
 import javax.swing.JPanel;
 
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
 import org.zaproxy.zap.utils.ZapTextArea;
@@ -154,7 +156,7 @@ public void saveParam (Object obj) throws Exception {
 	    session.setSessionDesc(getTxtDescription().getText());
 	    // ZAP Save session details
 	    if ( ! session.isNewState()) {
-	    	session.save(session.getFileName());
+	    	Control.getSingleton().saveSession(session.getFileName());
 	    }
 	}
 

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2011/08/04 Changed to support new HttpPanel interface 
 // ZAP: 2011/05/15 Support for exclusions
 // ZAP: 2011/05/31 Added option to dynamically change the display
+// ZAP: 2012/02/18 Changed default to be 'bottom full'
 
 package org.parosproxy.paros.view;
 
@@ -63,7 +64,7 @@ public class View implements ViewDelegate {
 	private OutputPanel outputPanel = null;
 	private Vector<JMenuItem> popupList = new Vector<JMenuItem>();
 	
-	private static int displayOption = DISPLAY_OPTION_LEFT_FULL;
+	private static int displayOption = DISPLAY_OPTION_BOTTOM_FULL;
 	
 	/**
 	 * @return Returns the mainFrame.

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -120,7 +120,7 @@ public JSON handleApiAction(String name, JSONObject params)
 						filename);
 			}
 			try {
-				session.save(filename);
+		    	Control.getSingleton().saveSession(filename);
 			} catch (Exception e) {
 				throw new ApiException(ApiException.Type.INTERNAL_ERROR,
 						e.getMessage());

File: src/org/zaproxy/zap/extension/api/ExtensionAPI.java
Patch:
@@ -71,4 +71,7 @@ public void sessionChanged(Session session) {
 		//API.getInstance().setSession(session);
 	}
 
+	@Override
+	public void sessionAboutToChange(Session session) {
+	}
 }

File: src/org/zaproxy/zap/extension/highlighter/ExtensionHighlighter.java
Patch:
@@ -114,4 +114,7 @@ protected ParamsPanel getParamsPanel() {
     }
     */
 	
+	@Override
+	public void sessionAboutToChange(Session session) {
+	}
 }

File: src/org/zaproxy/zap/extension/params/ParamsPanel.java
Patch:
@@ -342,9 +342,6 @@ public void reset() {
 	}
 	
 	protected HtmlParameterStats getSelectedParam() {
-		System.out.println("PP.getSelectedParam row " + this.getParamsTable().getSelectedRow());
-		System.out.println("PP.getSelectedParam val0 " + this.getParamsTable().getValueAt(this.getParamsTable().getSelectedRow(), 0));
-		System.out.println("PP.getSelectedParam val1 " + this.getParamsTable().getValueAt(this.getParamsTable().getSelectedRow(), 1));
 
 		// TODO type is localized :(
 		String type = (String) this.getParamsTable().getValueAt(this.getParamsTable().getSelectedRow(), 0);

File: src/org/zaproxy/zap/extension/params/SiteParameters.java
Patch:
@@ -29,6 +29,7 @@
 
 import org.parosproxy.paros.db.RecordParam;
 import org.parosproxy.paros.network.HtmlParameter;
+import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.network.HtmlParameter.Type;
 
 public class SiteParameters {
@@ -60,7 +61,7 @@ public HtmlParameterStats getParam(HtmlParameter.Type type, String name) {
 		return null;
 	}
 	
-	public HtmlParameterStats addParam(String site, HtmlParameter param) {
+	public HtmlParameterStats addParam(String site, HtmlParameter param, HttpMessage msg) {
 		Map<String, HtmlParameterStats> params = null;
 		HtmlParameterStats p;
 		
@@ -87,6 +88,7 @@ public HtmlParameterStats addParam(String site, HtmlParameter param) {
 			params.put(param.getName(), p);
 			model.addHtmlParameterStats(p);
 		}
+		p.addHttpMessage(msg);
 		return p;
 	}
 

File: src/org/zaproxy/zap/view/SessionExcludeFromProxyPanel.java
Patch:
@@ -32,6 +32,7 @@
 import javax.swing.JTable;
 
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.view.AbstractParamPanel;
 
@@ -115,7 +116,7 @@ public void saveParam (Object obj) throws Exception {
 	    session.setExcludeFromProxyRegexs(getModel().getLines());
 	    // ZAP Save session details
 	    if ( ! session.isNewState()) {
-	    	session.save(session.getFileName());
+	    	Control.getSingleton().saveSession(session.getFileName());
 	    }
 	}
 	

File: src/org/zaproxy/zap/view/SessionExcludeFromScanPanel.java
Patch:
@@ -32,6 +32,7 @@
 import javax.swing.JTable;
 
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.view.AbstractParamPanel;
 
@@ -115,7 +116,7 @@ public void saveParam (Object obj) throws Exception {
 	    session.setExcludeFromScanRegexs(getModel().getLines());
 	    // ZAP Save session details
 	    if ( ! session.isNewState()) {
-	    	session.save(session.getFileName());
+	    	Control.getSingleton().saveSession(session.getFileName());
 	    }
 	}
 	

File: src/org/zaproxy/zap/view/SessionExcludeFromSpiderPanel.java
Patch:
@@ -32,6 +32,7 @@
 import javax.swing.JTable;
 
 import org.parosproxy.paros.Constant;
+import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.view.AbstractParamPanel;
 
@@ -115,7 +116,7 @@ public void saveParam (Object obj) throws Exception {
 	    session.setExcludeFromSpiderRegexs(getModel().getLines());
 	    // ZAP Save session details
 	    if ( ! session.isNewState()) {
-	    	session.save(session.getFileName());
+	    	Control.getSingleton().saveSession(session.getFileName());
 	    }
 	}
 	

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -107,7 +107,7 @@ protected void parse() {
 	    wmUiHandlingEnabled = getConfig().getInt(WMUIHANDLING_OPTION, 0);
 	    askOnExitEnabled = getConfig().getInt(ASKONEXIT_OPTION, 1);
 	    warnOnTabDoubleClick = getConfig().getBoolean(WARN_ON_TAB_DOUBLE_CLICK_OPTION, true);
-	    reveal = getConfig().getBoolean(REVEAL_OPTION, true);
+	    reveal = getConfig().getBoolean(REVEAL_OPTION, false);
 	    
 	    defaultReqViewManual = getConfig().getString(DEFAULT_VIEW_REQ_MANUAL, "");
 	    defaultReqViewProxy = getConfig().getString(DEFAULT_VIEW_REQ_PROXY, "");

File: src/org/zaproxy/zap/extension/ascan/PopupMenuActiveScanNode.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.Component;
 
+import javax.swing.ImageIcon;
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
@@ -70,7 +71,8 @@ public int getParentMenuIndex() {
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("ascan.node.popup"));
-        
+        this.setIcon(new ImageIcon(getClass().getResource("/resource/icon/16/093.png")));
+
         this.addActionListener(new java.awt.event.ActionListener() { 
 
         	public void actionPerformed(java.awt.event.ActionEvent e) {    

File: src/org/zaproxy/zap/extension/ascan/PopupMenuActiveScanSites.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.Component;
 
+import javax.swing.ImageIcon;
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
@@ -70,7 +71,8 @@ public int getParentMenuIndex() {
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("ascan.site.popup"));
-        
+        this.setIcon(new ImageIcon(getClass().getResource("/resource/icon/16/093.png")));
+
         this.addActionListener(new java.awt.event.ActionListener() { 
 
         	public void actionPerformed(java.awt.event.ActionEvent e) {    

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceDirectory.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.Component;
 
+import javax.swing.ImageIcon;
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceSite.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.Component;
 
+import javax.swing.ImageIcon;
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
@@ -75,7 +76,8 @@ public int getParentMenuIndex() {
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("bruteforce.site.popup"));
-        
+        this.setIcon(new ImageIcon(getClass().getResource("/resource/icon/16/086.png")));
+
         this.addActionListener(new java.awt.event.ActionListener() { 
 
         	public void actionPerformed(java.awt.event.ActionEvent e) {    

File: src/org/zaproxy/zap/extension/portscan/PopupMenuPortScan.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.Component;
 
+import javax.swing.ImageIcon;
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
@@ -70,7 +71,8 @@ public int getParentMenuIndex() {
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("ports.site.popup"));
-        
+        this.setIcon(new ImageIcon(getClass().getResource("/resource/icon/16/187.png")));
+
         this.addActionListener(new java.awt.event.ActionListener() { 
 
         	public void actionPerformed(java.awt.event.ActionEvent e) {    

File: src/org/zaproxy/zap/extension/spider/PopupMenuSpider.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.awt.Component;
 
+import javax.swing.ImageIcon;
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
@@ -70,7 +71,8 @@ public int getParentMenuIndex() {
 	 */
 	private void initialize() {
         this.setText(Constant.messages.getString("spider.site.popup"));
-        
+        this.setIcon(new ImageIcon(getClass().getResource("/resource/icon/16/spider.png")));
+
         this.addActionListener(new java.awt.event.ActionListener() { 
 
         	public void actionPerformed(java.awt.event.ActionEvent e) {    

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/05/15 Support for exclusions
+// ZAP: 2012/02/11 Re-ordered icons, added spider icon and notify via SiteMap
 
 package org.parosproxy.paros.model;
 
@@ -169,7 +170,7 @@ public void open(String fileName) throws SQLException, SAXException, IOException
 		
 		//historyList.removeAllElements();
 
-		SiteNode newRoot = new SiteNode(Constant.messages.getString("tab.sites"));
+		SiteNode newRoot = new SiteNode(siteTree, -1, Constant.messages.getString("tab.sites"));
 		siteTree.setRoot(newRoot);
 
 		// update history reference
@@ -309,7 +310,6 @@ public void save(String fileName) throws Exception {
 		}
 		
 		model.getDb().getTableSession().update(getSessionId(), getSessionName());
-
 	}
 	
     /**

File: src/org/zaproxy/zap/extension/spider/SpiderPanel.java
Patch:
@@ -61,7 +61,7 @@ public class SpiderPanel extends ScanPanel implements ScanListenner {
      * 
      */
     public SpiderPanel(ExtensionSpider extension, org.parosproxy.paros.core.spider.SpiderParam portScanParam) {
-        super("spider", new ImageIcon(extension.getClass().getResource("/resource/icon/spider.png")), extension, portScanParam);
+        super("spider", new ImageIcon(extension.getClass().getResource("/resource/icon/16/spider.png")), extension, portScanParam);
     }
 
 	@Override

File: src/org/zaproxy/zap/extension/spider/SpiderThread.java
Patch:
@@ -20,9 +20,7 @@
 
 import java.sql.SQLException;
 import java.util.Date;
-
 import javax.swing.DefaultListModel;
-
 import org.apache.commons.httpclient.URI;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.core.spider.Spider;

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -152,8 +152,5 @@ public void setExcludeFromProxyUrls(List<String> urls) {
 		this.getProxy().setIgnoreList(urls);
     }
     
-    public Session getSession() {
-        return model.getSession();
-    }
 
 }

File: src/org/zaproxy/zap/extension/XmlReporterExtension.java
Patch:
@@ -2,7 +2,7 @@
  * To change this template, choose Tools | Templates
  * and open the template in the editor.
  */
-package org.parosproxy.paros.extension;
+package org.zaproxy.zap.extension;
 
 import org.parosproxy.paros.model.SiteNode;
 

File: src/org/zaproxy/zap/extension/alert/ExtensionAlert.java
Patch:
@@ -38,7 +38,7 @@
 import org.parosproxy.paros.extension.ExtensionHook;
 import org.parosproxy.paros.extension.SessionChangedListener;
 import org.parosproxy.paros.extension.ViewDelegate;
-import org.parosproxy.paros.extension.XmlReporterExtension;
+import org.zaproxy.zap.extension.XmlReporterExtension;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteMap;

File: src/org/zaproxy/zap/extension/ascan/ActiveScan.java
Patch:
@@ -1,9 +1,7 @@
 package org.zaproxy.zap.extension.ascan;
 
 import java.util.Enumeration;
-
 import javax.swing.DefaultListModel;
-
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.core.scanner.Alert;
 import org.parosproxy.paros.core.scanner.HostProcess;

File: src/org/zaproxy/zap/extension/httppanel/view/text/AutoDetectSyntaxHttpPanelTextArea.java
Patch:
@@ -28,7 +28,7 @@ abstract public class AutoDetectSyntaxHttpPanelTextArea extends HttpPanelTextAre
 	public AutoDetectSyntaxHttpPanelTextArea(HttpMessage httpMessage) {
 		super(httpMessage);
 		
-		isAutoDetectSyntax = false;
+		isAutoDetectSyntax = true;
 	}
 	
 	@Override

File: src/org/parosproxy/paros/core/scanner/Alert.java
Patch:
@@ -283,7 +283,9 @@ public String paragraph(String text) {
     
     private String breakNoSpaceString(String text) {
         String result = null;
-        result = text.replaceAll("&amp;","&amp;<wbr/>");
+        if (text != null) {
+        	result = text.replaceAll("&amp;","&amp;<wbr/>");
+        }
         return result;
         
     }

File: src/org/zaproxy/zap/extension/httppanel/plugin/request/all/RequestAllView.java
Patch:
@@ -70,8 +70,6 @@ protected void initModel() {
 	protected void initPlugins() {
 		// Plugins - View
 		textView = new HttpRequestAllPanelTextView(modelText, httpPanel.isEditable());
-		//textView.setDocument(new HighlightedDocument(SyntaxType.HTTPREQ_2PHASE));
-		//textView.setStyleKey("text/httphtml");
 		tableView = new RequestAllTableView(modelTable, httpPanel.isEditable());
 		hexView = new HttpPanelHexView(modelText, httpPanel.isEditable());
 		

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertDelete.java
Patch:
@@ -28,14 +28,14 @@
 
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.core.scanner.Alert;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.view.View;
 
 
 /**
  * ZAP: New Popup Menu Alert Delete
  */
-public class PopupMenuAlertDelete extends ExtensionPopupMenu {
+public class PopupMenuAlertDelete extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertEdit.java
Patch:
@@ -27,14 +27,14 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.core.scanner.Alert;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
 
 
 /**
  * ZAP: New Popup Menu Alert Edit
  */
-public class PopupMenuAlertEdit extends ExtensionPopupMenu {
+public class PopupMenuAlertEdit extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/ascan/PopupExcludeFromProxyMenu.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
@@ -36,7 +36,7 @@
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.SessionExcludeFromProxyPanel;
 
-public class PopupExcludeFromProxyMenu extends ExtensionPopupMenu {
+public class PopupExcludeFromProxyMenu extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 2282358266003940700L;
 

File: src/org/zaproxy/zap/extension/ascan/PopupExcludeFromScanMenu.java
Patch:
@@ -25,14 +25,14 @@
 import javax.swing.tree.TreePath;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.SessionExcludeFromScanPanel;
 
-public class PopupExcludeFromScanMenu extends ExtensionPopupMenu {
+public class PopupExcludeFromScanMenu extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 2282358266003940700L;
 

File: src/org/zaproxy/zap/extension/ascan/PopupMenuActiveScanNode.java
Patch:
@@ -24,10 +24,10 @@
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.SiteNode;
 
-public class PopupMenuActiveScanNode extends ExtensionPopupMenu {
+public class PopupMenuActiveScanNode extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionActiveScan extension = null;

File: src/org/zaproxy/zap/extension/ascan/PopupMenuActiveScanSites.java
Patch:
@@ -24,10 +24,10 @@
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.SiteNode;
 
-public class PopupMenuActiveScanSites extends ExtensionPopupMenu {
+public class PopupMenuActiveScanSites extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionActiveScan extension = null;

File: src/org/zaproxy/zap/extension/ascan/PopupMenuScanHistory.java
Patch:
@@ -25,7 +25,7 @@
 import javax.swing.JList;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.SiteNode;
 
@@ -35,7 +35,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuScanHistory extends ExtensionPopupMenu {
+public class PopupMenuScanHistory extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionActiveScan extension = null;

File: src/org/zaproxy/zap/extension/brk/PopupMenuAddBreakHistory.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.commons.httpclient.URI;
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.HistoryReference;
 
 
@@ -35,7 +35,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuAddBreakHistory extends ExtensionPopupMenu {
+public class PopupMenuAddBreakHistory extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionBreak extension = null;

File: src/org/zaproxy/zap/extension/brk/PopupMenuAddBreakSites.java
Patch:
@@ -24,7 +24,7 @@
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.SiteNode;
 
 
@@ -33,7 +33,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuAddBreakSites extends ExtensionPopupMenu {
+public class PopupMenuAddBreakSites extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/brk/PopupMenuEditBreak.java
Patch:
@@ -22,15 +22,15 @@
 import java.awt.Component;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
 
 /**
  *
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuEditBreak extends ExtensionPopupMenu {
+public class PopupMenuEditBreak extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/brk/PopupMenuRemove.java
Patch:
@@ -22,15 +22,15 @@
 import java.awt.Component;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
 
 /**
  *
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuRemove extends ExtensionPopupMenu {
+public class PopupMenuRemove extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionBreak extension = null;

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceCopy.java
Patch:
@@ -28,9 +28,9 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
-public class PopupMenuBruteForceCopy extends ExtensionPopupMenu implements ClipboardOwner {
+public class PopupMenuBruteForceCopy extends ExtensionPopupMenuItem implements ClipboardOwner {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionBruteForce extension = null;

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceDirectory.java
Patch:
@@ -24,7 +24,7 @@
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.SiteNode;
 
 
@@ -33,7 +33,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuBruteForceDirectory extends ExtensionPopupMenu {
+public class PopupMenuBruteForceDirectory extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionBruteForce extension = null;

File: src/org/zaproxy/zap/extension/bruteforce/PopupMenuBruteForceSite.java
Patch:
@@ -24,7 +24,7 @@
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.SiteNode;
 
 
@@ -33,7 +33,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuBruteForceSite extends ExtensionPopupMenu {
+public class PopupMenuBruteForceSite extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionBruteForce extension = null;

File: src/org/zaproxy/zap/extension/encoder2/PopupEncoder2Menu.java
Patch:
@@ -26,9 +26,9 @@
 import javax.swing.text.JTextComponent;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
-public class PopupEncoder2Menu extends ExtensionPopupMenu {
+public class PopupEncoder2Menu extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private JTextComponent lastInvoker = null;

File: src/org/zaproxy/zap/extension/fuzz/PopupFuzzMenu.java
Patch:
@@ -25,12 +25,12 @@
 import javax.swing.JFrame;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.zaproxy.zap.extension.httppanel.HttpPanelRequest;
 import org.zaproxy.zap.extension.httppanel.HttpPanelResponse;
 import org.zaproxy.zap.extension.httppanel.view.text.HttpPanelTextArea;
 
-public class PopupFuzzMenu extends ExtensionPopupMenu {
+public class PopupFuzzMenu extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private Component lastInvoker = null;

File: src/org/zaproxy/zap/extension/history/PopupMenuExportURLs.java
Patch:
@@ -33,7 +33,7 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.SiteNode;
@@ -45,7 +45,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuExportURLs extends ExtensionPopupMenu {
+public class PopupMenuExportURLs extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private static final String CRLF = "\r\n";

File: src/org/zaproxy/zap/extension/history/PopupMenuNote.java
Patch:
@@ -25,7 +25,7 @@
 import javax.swing.JList;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
@@ -37,7 +37,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuNote extends ExtensionPopupMenu {
+public class PopupMenuNote extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionHistory extension = null;

File: src/org/zaproxy/zap/extension/history/PopupMenuTag.java
Patch:
@@ -25,7 +25,7 @@
 import javax.swing.JList;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
@@ -37,7 +37,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuTag extends ExtensionPopupMenu {
+public class PopupMenuTag extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionHistory extension = null;

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelRequest.java
Patch:
@@ -8,7 +8,6 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.Extension;
 import org.parosproxy.paros.extension.option.OptionsParamView;
-import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.network.HttpRequestHeader;
 import org.zaproxy.zap.extension.httppanel.plugin.request.all.RequestAllView;

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelUi.java
Patch:
@@ -1,11 +1,9 @@
 package org.zaproxy.zap.extension.httppanel;
 
 import org.parosproxy.paros.network.HttpMessage;
-import org.zaproxy.zap.extension.httppanel.view.text.HttpPanelTextArea.MessageType;
 import org.zaproxy.zap.extension.search.SearchMatch;
 
 public interface HttpPanelUi {
-	public MessageType getMessageType();
 	public void setHttpMessage(HttpMessage httpMessage);
 	public HttpMessage getHttpMessage();
 	public SearchMatch getTextSelection();

File: src/org/zaproxy/zap/extension/httppanel/view/hex/HttpPanelHexView.java
Patch:
@@ -26,7 +26,6 @@
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.HttpPanelView;
-import org.zaproxy.zap.extension.httppanel.view.text.HttpPanelTextArea.MessageType;
 import org.zaproxy.zap.extension.httppanel.view.text.HttpPanelTextModelInterface;
 
 public class HttpPanelHexView implements HttpPanelView {
@@ -38,7 +37,7 @@ public class HttpPanelHexView implements HttpPanelView {
 	private boolean isEditable = false;
 	private HttpPanelTextModelInterface model;
 	
-	public HttpPanelHexView(HttpPanelTextModelInterface model, MessageType messageType, boolean isEditable) {
+	public HttpPanelHexView(HttpPanelTextModelInterface model, boolean isEditable) {
 		this.model = model;
 		this.isEditable = isEditable;
 	}

File: src/org/zaproxy/zap/extension/httppanel/view/posttable/RequestPostTableModel.java
Patch:
@@ -85,7 +85,7 @@ public int getRowCount() {
      * @see javax.swing.table.TableModel#getValueAt(int, int)
      */
     public Object getValueAt(int row, int col) {
-        String[] cell = (String[]) listPair.get(row);
+        String[] cell = listPair.get(row);
         return cell[col];
     }
 
@@ -140,7 +140,7 @@ public synchronized String getText() {
         }
         
         for (int i=0; i<listPair.size(); i++) {
-            String[] cell = (String[]) listPair.get(i);
+            String[] cell = listPair.get(i);
             try {
             	String name = URLEncoder.encode(cell[0],"UTF8");
             	String value = URLEncoder.encode(cell[1],"UTF8");
@@ -180,7 +180,7 @@ public void setValueAt(Object value, int row, int col) {
             listPair.add(cell);
         }
         
-        cell = (String[]) listPair.get(row);
+        cell = listPair.get(row);
         cell[col] = (String) value;
         fireTableCellUpdated(row, col);
         

File: src/org/zaproxy/zap/extension/invoke/PopupMenuInvoke.java
Patch:
@@ -27,13 +27,13 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.View;
 
-public class PopupMenuInvoke extends ExtensionPopupMenu {
+public class PopupMenuInvoke extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
     private Component invoker = null;

File: src/org/zaproxy/zap/extension/invoke/PopupMenuInvokeConfigure.java
Patch:
@@ -26,9 +26,9 @@
 
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.control.Control;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
-public class PopupMenuInvokeConfigure extends ExtensionPopupMenu {
+public class PopupMenuInvokeConfigure extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
     /**

File: src/org/zaproxy/zap/extension/params/PopupMenuAddAntiCSRF.java
Patch:
@@ -22,7 +22,7 @@
 import java.awt.Component;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.network.HtmlParameter;
 
 
@@ -31,7 +31,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuAddAntiCSRF extends ExtensionPopupMenu {
+public class PopupMenuAddAntiCSRF extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/params/PopupMenuAddSession.java
Patch:
@@ -22,7 +22,7 @@
 import java.awt.Component;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.network.HtmlParameter;
 
 
@@ -31,7 +31,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuAddSession extends ExtensionPopupMenu {
+public class PopupMenuAddSession extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/params/PopupMenuParamSearch.java
Patch:
@@ -22,15 +22,15 @@
 import java.awt.Component;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
 
 /**
  *
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuParamSearch extends ExtensionPopupMenu {
+public class PopupMenuParamSearch extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/params/PopupMenuRemoveAntiCSRF.java
Patch:
@@ -22,7 +22,7 @@
 import java.awt.Component;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.network.HtmlParameter;
 
 
@@ -31,7 +31,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuRemoveAntiCSRF extends ExtensionPopupMenu {
+public class PopupMenuRemoveAntiCSRF extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/params/PopupMenuRemoveSession.java
Patch:
@@ -22,7 +22,7 @@
 import java.awt.Component;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.network.HtmlParameter;
 
 
@@ -31,7 +31,7 @@
  * To change the template for this generated type comment go to
  * Window - Preferences - Java - Code Generation - Code and Comments
  */
-public class PopupMenuRemoveSession extends ExtensionPopupMenu {
+public class PopupMenuRemoveSession extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 

File: src/org/zaproxy/zap/extension/portscan/PopupMenuPortCopy.java
Patch:
@@ -28,9 +28,9 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 
-public class PopupMenuPortCopy extends ExtensionPopupMenu implements ClipboardOwner {
+public class PopupMenuPortCopy extends ExtensionPopupMenuItem implements ClipboardOwner {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionPortScan extension = null;

File: src/org/zaproxy/zap/extension/portscan/PopupMenuPortScan.java
Patch:
@@ -24,10 +24,10 @@
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.SiteNode;
 
-public class PopupMenuPortScan extends ExtensionPopupMenu {
+public class PopupMenuPortScan extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionPortScan extension = null;

File: src/org/zaproxy/zap/extension/spider/PopupExcludeFromSpiderMenu.java
Patch:
@@ -28,14 +28,14 @@
 import javax.swing.tree.TreePath;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.Session;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.view.SessionExcludeFromSpiderPanel;
 
-public class PopupExcludeFromSpiderMenu extends ExtensionPopupMenu {
+public class PopupExcludeFromSpiderMenu extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 2282358266003940700L;
 

File: src/org/zaproxy/zap/extension/spider/PopupMenuSpider.java
Patch:
@@ -24,10 +24,10 @@
 import javax.swing.JTree;
 
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.SiteNode;
 
-public class PopupMenuSpider extends ExtensionPopupMenu {
+public class PopupMenuSpider extends ExtensionPopupMenuItem {
 
 	private static final long serialVersionUID = 1L;
 	private ExtensionSpider extension = null;

File: src/org/zaproxy/zap/view/PopupMenuHistoryReference.java
Patch:
@@ -27,7 +27,7 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.core.scanner.Alert;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.SiteNode;
@@ -39,7 +39,7 @@
 import org.zaproxy.zap.extension.fuzz.FuzzerPanel;
 import org.zaproxy.zap.extension.search.SearchResult;
 
-public abstract class PopupMenuHistoryReference extends ExtensionPopupMenu {
+public abstract class PopupMenuHistoryReference extends ExtensionPopupMenuItem {
 
 	public static enum Invoker {sites, history, alerts, ascan, search, fuzz, bruteforce};
 	

File: src/org/zaproxy/zap/view/PopupMenuHttpMessage.java
Patch:
@@ -27,7 +27,7 @@
 
 import org.apache.log4j.Logger;
 import org.parosproxy.paros.core.scanner.Alert;
-import org.parosproxy.paros.extension.ExtensionPopupMenu;
+import org.parosproxy.paros.extension.ExtensionPopupMenuItem;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
@@ -38,7 +38,7 @@
 import org.zaproxy.zap.extension.fuzz.FuzzerPanel;
 import org.zaproxy.zap.extension.search.SearchResult;
 
-public abstract class PopupMenuHttpMessage extends ExtensionPopupMenu {
+public abstract class PopupMenuHttpMessage extends ExtensionPopupMenuItem {
 
 	public static enum Invoker {sites, history, alerts, ascan, search, fuzz, bruteforce};
 	

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -69,7 +69,7 @@ public static String getLocalDisplayName(String locale) {
 	        Locale loc = null;
 	        if (langArray.length == 1) loc = new Locale(langArray[0]);
 	        if (langArray.length == 2) loc = new Locale(langArray[0], langArray[1]);
-	        if (langArray.length == 3) loc = new Locale(langArray[0], langArray[1], langArray[3]);
+	        if (langArray.length == 3) loc = new Locale(langArray[0], langArray[1], langArray[2]);
 	        if (loc != null) {
 	        	desc = loc.getDisplayLanguage(loc);
 	        }

File: src/org/parosproxy/paros/core/scanner/AbstractDefaultFilePlugin.java
Patch:
@@ -18,6 +18,8 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
+
 package org.parosproxy.paros.core.scanner;
 
 import java.util.Vector;
@@ -116,7 +118,7 @@ public void scan() {
                 msg.getRequestBody().setLength(0);
                 sendAndReceive(msg);
                 if (isFileExist(msg)) {
-                    bingo(Alert.RISK_MEDIUM, Alert.SUSPICIOUS, uri.toString(), "", "", msg);
+                    bingo(Alert.RISK_MEDIUM, Alert.SUSPICIOUS, uri.toString(), "", "", "", msg);
                 }
             } catch (Exception e) {
             }

File: src/org/parosproxy/paros/core/scanner/plugin/TestClientAutocomplete.java
Patch:
@@ -18,6 +18,8 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
+
 package org.parosproxy.paros.core.scanner.plugin;
 
 import java.util.regex.Matcher;
@@ -155,7 +157,7 @@ public void scan() {
                     if (matcherAutocomplete.find()) {
                         continue;
                     }
-                    bingo(Alert.RISK_MEDIUM, Alert.WARNING, null, "", s, msg);
+                    bingo(Alert.RISK_MEDIUM, Alert.WARNING, null, "", "", s, msg);
 
                 }
             }

File: src/org/parosproxy/paros/core/scanner/plugin/TestClientBrowserCache.java
Patch:
@@ -18,6 +18,8 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
+
 package org.parosproxy.paros.core.scanner.plugin;
 
 import java.util.regex.Pattern;
@@ -137,7 +139,7 @@ public void scan() {
 		}
 		
 		if (result) {
-		    bingo(Alert.RISK_MEDIUM, Alert.WARNING, null, null, "", msg);
+		    bingo(Alert.RISK_MEDIUM, Alert.WARNING, null, null, "", "", msg);
 		}
 
     }

File: src/org/parosproxy/paros/core/scanner/plugin/TestCrossSiteScript.java
Patch:
@@ -20,6 +20,7 @@
  */
 // ZAP: 2011/05/27 Added tests prefixed with single and double quotes
 // ZAP: 2011/11/30 Depreciated
+// ZAP: 2012/01/02 Separate param and attack
 
 package org.parosproxy.paros.core.scanner.plugin;
 
@@ -211,12 +212,12 @@ public void scan(HttpMessage msg, String param, String value) {
                 
                 if (result.charAt(pos-1) != '"' && result.charAt(pos+XSS[i].length()) != '"') {
                     // check if adjacent character is double quote.  If so, maybe OK
-                    bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param + "=" + XSS[i], null, msg);
+                    bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, XSS[i], null, msg);
                     return;
                 }
             } else {
             	// ZAP: Changed XSS level to HIGH
-		        bingo(Alert.RISK_HIGH, Alert.WARNING, null, param + "=" + XSS[i], null, msg);
+		        bingo(Alert.RISK_HIGH, Alert.WARNING, null, param, XSS[i], null, msg);
                 return;
 		    }
 		}

File: src/org/parosproxy/paros/core/scanner/plugin/TestCrossSiteScriptInScriptSection.java
Patch:
@@ -21,6 +21,7 @@
 // ZAP: 2011/08/02 No longer switched on -sp flag and fixed regex
 // ZAP: 2011/08/17 Check with double quotes as well as single 
 // ZAP: 2011/11/30 Depreciated
+// ZAP: 2012/01/02 Separate param and attack
 
 package org.parosproxy.paros.core.scanner.plugin;
 
@@ -142,7 +143,7 @@ public void scan(HttpMessage msg, String param, String value) {
 
         if (matchBodyPattern(msg, PATTERN_XSS_SCRIPT_1, null)) {
         	// ZAP: Changed XSS level to HIGH
-			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param + "=" + XSS_SCRIPT_1, null, msg);
+			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, XSS_SCRIPT_1, null, msg);
 			return;
 		}
 		
@@ -157,7 +158,7 @@ public void scan(HttpMessage msg, String param, String value) {
 
         if (matchBodyPattern(msg, PATTERN_XSS_SCRIPT_2, null)) {
         	// ZAP: Changed XSS level to HIGH
-			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param + "=" + XSS_SCRIPT_2, null, msg);
+			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, XSS_SCRIPT_2, null, msg);
 			return;
 		}
 

File: src/org/parosproxy/paros/core/scanner/plugin/TestCrossSiteScriptNoBracket.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/11/30 Depreciated
+// ZAP: 2012/01/02 Separate param and attack
 
 package org.parosproxy.paros.core.scanner.plugin;
 
@@ -144,7 +145,7 @@ public void scan(HttpMessage msg, String param, String value) {
         //result = msg.getResponseBody().toString();
         if (matchBodyPattern(msg, patternXSS3, sb)) {
         	// ZAP: Changed XSS level to HIGH
-			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param + "=" + XSS3, null, msg);
+			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, XSS3, null, msg);
 			return;
 		}
 		

File: src/org/parosproxy/paros/core/scanner/plugin/TestDirectoryBrowsing.java
Patch:
@@ -18,6 +18,8 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
+
 package org.parosproxy.paros.core.scanner.plugin;
 
 import java.io.IOException;
@@ -148,7 +150,7 @@ public void scan() {
         }
 		
 		if (result) {
-            bingo(Alert.RISK_MEDIUM, reliability, msg.getRequestHeader().getURI().toString(), "", "", msg);
+            bingo(Alert.RISK_MEDIUM, reliability, msg.getRequestHeader().getURI().toString(), "", "", "", msg);
 		}
 	}
     

File: src/org/parosproxy/paros/core/scanner/plugin/TestInfoPotentialPathManipulation.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/08/02 No longer switched on -sp flag
+// ZAP: 2012/01/02 Separate param and attack
 
 package org.parosproxy.paros.core.scanner.plugin;
 
@@ -129,7 +130,7 @@ public void scan(HttpMessage msg, String param, String value) {
             matcher = patternFilePath[i].matcher(value);
             if (matcher.find()) {
                 matchedFilePath = matcher.group(0);
-                bingo(Alert.RISK_INFO, Alert.SUSPICIOUS, "", (query == null || query.length() == 0)? "nil" : query, matchedFilePath , msg);
+                bingo(Alert.RISK_INFO, Alert.SUSPICIOUS, "", param, value, matchedFilePath , msg);
                 return;
             }
         }

File: src/org/parosproxy/paros/core/scanner/plugin/TestInfoPrivateAddressDisclosure.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
 package org.parosproxy.paros.core.scanner.plugin;
 
 import java.util.regex.Matcher;
@@ -138,7 +139,7 @@ public void scan() {
 		}
 		
 		if (txtFound != "") {
-			bingo(Alert.RISK_LOW, Alert.WARNING, null, null, txtFound, msg);
+			bingo(Alert.RISK_LOW, Alert.WARNING, null, "", "", txtFound, msg);
 		}
 		
     }

File: src/org/parosproxy/paros/core/scanner/plugin/TestInfoSessionIdURL.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
 package org.parosproxy.paros.core.scanner.plugin;
 
 import java.util.regex.Matcher;
@@ -139,7 +140,7 @@ public void scan() {
 
 				if (kb == null || !kb.equals(sessionIdValue)) {
 				    getKb().add("sessionId/nameValue", sessionIdValue);
-					bingo(Alert.RISK_LOW, Alert.WARNING, null, "", sessionIdValue, base);
+					bingo(Alert.RISK_LOW, Alert.WARNING, "", "", "", sessionIdValue, base);
 				}
 				kb = getKb().getString("sessionId/name");
 				getKb().add("sessionId/name", sessionIdName);
@@ -181,7 +182,7 @@ private void checkSessionIDExposure(HttpMessage msg) throws URIException {
 				linkHostName = matcher.group(1);
 				String host = msg.getRequestHeader().getURI().getHost();
 				if (host.compareToIgnoreCase(linkHostName) != 0) {
-					bingo(risk, Alert.WARNING, alertReferer, descReferer, null, null, linkHostName, solutionReferer, msg);
+					bingo(risk, Alert.WARNING, alertReferer, descReferer, null, "", "", linkHostName, solutionReferer, msg);
 				}
 			}
 		}

File: src/org/parosproxy/paros/core/scanner/plugin/TestInjectionMSSQLEnumeration.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
 package org.parosproxy.paros.core.scanner.plugin;
 
 import java.io.IOException;
@@ -214,7 +215,7 @@ private void checkDBUserName(HttpMessage msg, String param, String value) throws
 	    String result = sb.toString();
 	    if (result.length() > 0) {
 	        getKb().add("sql/mssql/username", result);
-			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, "", "db user name: " + result, msg);
+			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, "", "", "db user name: " + result, msg);
 
 	    }
 	}
@@ -295,7 +296,7 @@ private void checkDBTableName(HttpMessage msg, String param, String value) throw
 	        String result = sb.toString();
 	        if (result.length() > 0) {
 	            getKb().add("sql/mssql/tablename", result);
-	            bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, "", "table: " + result, msg);
+	            bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, "", "", "table: " + result, msg);
 	            
 	        }
 	    }

File: src/org/parosproxy/paros/core/scanner/plugin/TestInjectionOracleSQLEnumeration.java
Patch:
@@ -19,6 +19,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2011/08/02 No longer switched on -sp flag
+// ZAP: 2012/01/02 Separate param and attack
 
 package org.parosproxy.paros.core.scanner.plugin;
 
@@ -251,7 +252,7 @@ private void checkDBUserName(HttpMessage msg, String param, String value) throws
 	    String result = sb.toString();
 	    if (result.length() > 0) {
 	        getKb().add("sql/oracle/username", result);
-			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, "", "current db user name: " + result, msg);
+			bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, "", "", "current db user name: " + result, msg);
 
 	    }
 	}
@@ -333,7 +334,7 @@ private void checkDBTableName(HttpMessage msg, String param, String value) throw
 	        String result = sb.toString();
 	        if (result.length() > 0) {
 	            getKb().add("sql/oracle/tablename", result);
-	            bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, "", "table name: " + result, msg);
+	            bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, "", "", "table name: " + result, msg);
 	            
 	        }
 	    }

File: src/org/parosproxy/paros/core/scanner/plugin/TestObsoleteFile.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
 package org.parosproxy.paros.core.scanner.plugin;
 
 import java.io.IOException;
@@ -138,7 +139,7 @@ private void testSuffix(String suffix, boolean replaceSuffix) throws IOException
             return;
         }    		
         
-		bingo(Alert.RISK_LOW, Alert.WARNING, uri.toString(), "", "", msg);
+		bingo(Alert.RISK_LOW, Alert.WARNING, uri.toString(), "", "", "", msg);
 
         
     }

File: src/org/parosproxy/paros/core/scanner/plugin/TestObsoleteFileExtended.java
Patch:
@@ -18,6 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
+// ZAP: 2012/01/02 Separate param and attack
 package org.parosproxy.paros.core.scanner.plugin;
 
 import java.io.IOException;
@@ -133,7 +134,7 @@ private void testSuffix(String suffix, boolean replaceSuffix) throws IOException
             return;
         }    		
         
-		bingo(Alert.RISK_LOW, Alert.WARNING, uri.toString(), "", "", msg);
+		bingo(Alert.RISK_LOW, Alert.WARNING, uri.toString(), "", "", "", msg);
 
         
     }

File: src/org/zaproxy/zap/extension/alert/AlertTreeModel.java
Patch:
@@ -235,7 +235,7 @@ private AlertNode findLeaf(AlertNode parent, String nodeName, Alert alert) {
                 
                 Alert tmp = (Alert) child.getUserObject();
 
-                if (tmp.getParam().equals(alert.getParam())) {;
+                if (tmp.getParam().equals(alert.getParam()) && tmp.getAttack().equals(alert.getAttack())) {
                 	return child;
                 }
             }

File: src/org/zaproxy/zap/extension/api/CoreAPI.java
Patch:
@@ -260,6 +260,7 @@ private JSONObject alertToJSON(Alert alert) {
 		ja.put("url", alert.getUri());
 		ja.put("other", alert.getOtherInfo());
 		ja.put("param", XMLStringUtil.escapeControlChrs(alert.getParam()));
+		ja.put("attack", XMLStringUtil.escapeControlChrs(alert.getAttack()));
 		ja.put("reference", alert.getReference());
 		ja.put("solution", alert.getSolution());
 		return ja;

File: src/org/zaproxy/zap/extension/pscan/scanner/CookieHttpOnlyScanner.java
Patch:
@@ -75,7 +75,7 @@ private void raiseAlert(HttpMessage msg, int id, String cookie) {
 		    		"If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. " +
 		    		"If this is a session cookie then session hijacking may be possible.", 
 		    		msg.getRequestHeader().getURI().toString(),
-		    		cookie, "", 
+		    		cookie, "", "",
 		    		"Ensure that the HttpOnly flag is set for all cookies.", 
 		            "www.owasp.org/index.php/HttpOnly", 
 		            msg);

File: src/org/zaproxy/zap/extension/pscan/scanner/CookieSecureFlagScanner.java
Patch:
@@ -78,7 +78,7 @@ private void raiseAlert(HttpMessage msg, int id, String cookie) {
 		    	alert.setDetail(
 		    	    "A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.", 
 		    	    msg.getRequestHeader().getURI().toString(),
-		    	    cookie, "", 
+		    	    cookie, "", "",
 		    	    "Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. " +
                             "Ensure that the secure flag is set for cookies containing such sensitive information.", 
 		            "http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)", 

File: src/org/zaproxy/zap/extension/pscan/scanner/CrossSiteRequestForgeryScanner.java
Patch:
@@ -116,6 +116,7 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 				    		msg.getRequestHeader().getURI().toString(),
 				    		"", 
 				    		"", 
+				    		"",
 				    		getSolution(), 
 				            getReference(), 
 				            msg);

File: src/org/zaproxy/zap/extension/pscan/scanner/PasswordAutocompleteScanner.java
Patch:
@@ -81,6 +81,7 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 							    		"AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.", 
 							    		msg.getRequestHeader().getURI().toString(),
 							    		inputElement.getName(), 
+							    		"",
 							    		"", 
 							    		"Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'", 
 							            "http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp", 

File: src/org/zaproxy/zap/extension/pscan/scanner/WeakAuthenticationScanner.java
Patch:
@@ -67,6 +67,7 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {
 				    		"The credentials can be read and then reused by someone with access to the network. ",
 				    		msg.getRequestHeader().getURI().toString(),
 				    		"", HttpHeader.WWW_AUTHENTICATE + ": " + auth, 
+				    		"",
 				    		"Protect the connection using HTTPS or use a stronger authentication mechanism", 
 				            "www.owasp.org/index.php/Category:Authentication_Vulnerability", 
 				            msg);

File: src/org/zaproxy/zap/scanner/plugin/TestCrossSiteScriptInTag.java
Patch:
@@ -120,7 +120,7 @@ public void scan(HttpMessage msg, String param, String value) {
 						// Possible false positive, need to enhance the check to catch edge cases
 						if (this.getLevel().equals(Level.HIGH)) {
 							// Report anyway
-							bingo(Alert.RISK_MEDIUM, Alert.SUSPICIOUS, null, param + "=" + XSS_ATTACKS[i], null, msg);
+							bingo(Alert.RISK_MEDIUM, Alert.SUSPICIOUS, null, param, XSS_ATTACKS[i], null, msg);
 						}
 					} else {
 						if (this.getLevel().equals(Level.LOW)) {
@@ -130,7 +130,7 @@ public void scan(HttpMessage msg, String param, String value) {
 							}
 						}
 						
-						bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param + "=" + XSS_ATTACKS[i], null, msg);
+						bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, XSS_ATTACKS[i], null, msg);
 						return;
 						
 					}

File: src/org/zaproxy/zap/scanner/plugin/TestCrossSiteScriptInTagAttribute.java
Patch:
@@ -151,7 +151,7 @@ public void scan(HttpMessage msg, String param, String value) {
     	        			for (String vuln : VULN_ATTS) {
     	        				// Check all of the vulnerable attributes
 	    	        			if (vuln.equalsIgnoreCase(att.getName())) {
-	    							bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, 
+	    							bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, Constant.getEyeCatcher(),
 	    									"Tag=" + element.getStartTag().getName() + ", attribute=" + att.getName(), msg);
 	    							return;
 	    	        			}
@@ -189,7 +189,7 @@ public void scan(HttpMessage msg, String param, String value) {
 	        			String srcValue = element.getAttributeValue("src");
             			
         				if (srcValue != null && srcValue.toLowerCase().indexOf(BAD_SITE) >= 0) {
-	    					bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, null, msg);
+	    					bingo(Alert.RISK_HIGH, Alert.SUSPICIOUS, null, param, value + SRC_ATT_INJ, null, msg);
 	    					return;
         				}
             		}

File: src/org/zaproxy/zap/scanner/plugin/TestPathTraversal.java
Patch:
@@ -141,7 +141,7 @@ public void scan(HttpMessage msg, String param, String value) {
 				String response = msg.getResponseHeader().toString() + msg.getResponseBody().toString();
 	            matcher = Pattern.compile(PATTERNS[i]).matcher(response);
 	            if (matcher.find()) {
-	                bingo(Alert.RISK_HIGH, Alert.WARNING, "", null, param + "=" + TARGETS[i] , msg);
+	                bingo(Alert.RISK_HIGH, Alert.WARNING, "", null, param, TARGETS[i] , msg);
 	                break;
 	            }
 			}

File: src/org/zaproxy/zap/scanner/plugin/TestRedirect.java
Patch:
@@ -123,7 +123,7 @@ public void scan(HttpMessage msg, String param, String value) {
             	// Its a redirect, did it go to the target?
             	if (msg.getResponseHeader().getHeader(HttpHeader.LOCATION).startsWith(redirect)) {
             		// It did, so the param is vulnerable
-            		bingo(Alert.RISK_HIGH, Alert.WARNING, null, param, null, msg);
+            		bingo(Alert.RISK_HIGH, Alert.WARNING, null, param, redirect, null, msg);
             	}
     			return;
             }

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -61,7 +61,7 @@ public class HttpRequestHeader extends HttpHeader {
 	// private static final Pattern patternHostHeader
 	//	= Pattern.compile("([^:]+)\\s*?:?\\s*?(\\d*?)");
 	private static final Pattern patternImage
-		= Pattern.compile("\\.(jpg|jpeg|gif|tiff|tif|png)\\z", Pattern.CASE_INSENSITIVE);
+		= Pattern.compile("\\.(bmp|ico|jpg|jpeg|gif|tiff|tif|png)\\z", Pattern.CASE_INSENSITIVE);
 	private static final Pattern patternPartialRequestLine
 		= Pattern.compile("\\A *(OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT)\\b", Pattern.CASE_INSENSITIVE);
 	

File: src/org/zaproxy/zap/extension/ext/OptionsExtensionTableModel.java
Patch:
@@ -104,6 +104,7 @@ private void enableDependants(Extension extension, Boolean enabled) {
 			if (ext.getDependencies().contains(extension.getClass())) {
 				ext.setEnabled(enabled);
 				this.fireTableCellUpdated(row, 0);
+				enableDependants(ext, enabled); 
 			}
 			row++;
 		}

File: src/org/zaproxy/zap/extension/alert/AlertViewPanel.java
Patch:
@@ -3,7 +3,7 @@
  * 
  * ZAP is an HTTP/HTTPS proxy for assessing web application security.
  * 
- * Copyright 2010 psiinon@gmail.com
+ * Copyright 2011 The ZAP Development team
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); 
  * you may not use this file except in compliance with the License. 
@@ -17,7 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-package org.zaproxy.zap.extension.ascan;
+package org.zaproxy.zap.extension.alert;
 
 
 import java.awt.CardLayout;
@@ -109,7 +109,7 @@ public AlertViewPanel(boolean editable) {
 	private void initialize() {
 		cardLayout = new CardLayout();
         this.setLayout(cardLayout);
-        this.setName("Alert View");
+        this.setName("AlertView");
 
         if (! editable) {
         	this.add(getDefaultPane(), getDefaultPane().getName());

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertDelete.java
Patch:
@@ -17,7 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-package org.zaproxy.zap.extension.ascan;
+package org.zaproxy.zap.extension.alert;
 
 import java.awt.Component;
 
@@ -39,7 +39,7 @@ public class PopupMenuAlertDelete extends ExtensionPopupMenu {
 
 	private static final long serialVersionUID = 1L;
 
-	private ExtensionActiveScan extension = null;
+	private ExtensionAlert extension = null;
 
     /**
      * 
@@ -111,7 +111,7 @@ public boolean isEnableForComponent(Component invoker) {
         return false;
     }
     
-    void setExtension(ExtensionActiveScan extension) {
+    void setExtension(ExtensionAlert extension) {
         this.extension = extension;
     }
 }

File: src/org/zaproxy/zap/extension/alert/PopupMenuAlertEdit.java
Patch:
@@ -17,7 +17,7 @@
  * See the License for the specific language governing permissions and 
  * limitations under the License. 
  */
-package org.zaproxy.zap.extension.ascan;
+package org.zaproxy.zap.extension.alert;
 
 import java.awt.Component;
 
@@ -38,7 +38,7 @@ public class PopupMenuAlertEdit extends ExtensionPopupMenu {
 
 	private static final long serialVersionUID = 1L;
 
-	private ExtensionActiveScan extension = null;
+	private ExtensionAlert extension = null;
 
 	private ExtensionHistory extHist = null; 
 
@@ -105,7 +105,7 @@ public boolean isEnableForComponent(Component invoker) {
         return false;
     }
     
-    void setExtension(ExtensionActiveScan extension) {
+    void setExtension(ExtensionAlert extension) {
         this.extension = extension;
     }
 }

File: src/org/zaproxy/zap/view/PopupMenuHistoryReference.java
Patch:
@@ -32,8 +32,8 @@
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.zap.extension.alert.AlertNode;
 import org.zaproxy.zap.extension.ascan.ActiveScanPanel;
-import org.zaproxy.zap.extension.ascan.AlertNode;
 import org.zaproxy.zap.extension.bruteforce.BruteForceItem;
 import org.zaproxy.zap.extension.bruteforce.BruteForcePanel;
 import org.zaproxy.zap.extension.fuzz.FuzzerPanel;

File: src/org/zaproxy/zap/view/PopupMenuHttpMessage.java
Patch:
@@ -31,8 +31,8 @@
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.SiteNode;
 import org.parosproxy.paros.network.HttpMessage;
+import org.zaproxy.zap.extension.alert.AlertNode;
 import org.zaproxy.zap.extension.ascan.ActiveScanPanel;
-import org.zaproxy.zap.extension.ascan.AlertNode;
 import org.zaproxy.zap.extension.bruteforce.BruteForceItem;
 import org.zaproxy.zap.extension.bruteforce.BruteForcePanel;
 import org.zaproxy.zap.extension.fuzz.FuzzerPanel;

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelResponse.java
Patch:
@@ -4,6 +4,7 @@
 import org.parosproxy.paros.extension.option.OptionsParamView;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.plugin.response.split.ResponseSplitView;
+import org.zaproxy.zap.extension.httppanel.plugin.response.all.ResponseAllView;
 import org.zaproxy.zap.extension.httppanel.plugin.response.image.ResponseImageView;
 
 public class HttpPanelResponse extends HttpPanel  {
@@ -25,6 +26,7 @@ public HttpPanelResponse(boolean isEditable, Extension extension, HttpMessage ht
 	protected void initPlugins() {
 		// TODO: elsewhere
 		new ResponseSplitView(this, httpMessage);
+		new ResponseAllView(this, httpMessage);
 		new ResponseImageView(this, httpMessage);
 	}
 

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelResponse.java
Patch:
@@ -4,6 +4,7 @@
 import org.parosproxy.paros.extension.option.OptionsParamView;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.plugin.response.split.ResponseSplitView;
+import org.zaproxy.zap.extension.httppanel.plugin.response.image.ResponseImageView;
 
 public class HttpPanelResponse extends HttpPanel  {
 	private static final long serialVersionUID = 1L;
@@ -24,6 +25,7 @@ public HttpPanelResponse(boolean isEditable, Extension extension, HttpMessage ht
 	protected void initPlugins() {
 		// TODO: elsewhere
 		new ResponseSplitView(this, httpMessage);
+		new ResponseImageView(this, httpMessage);
 	}
 
 	protected void initSpecial() {

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -146,6 +146,7 @@ public final class Constant {
 	public static URL LOW_FLAG_IMAGE_URL = Constant.class.getResource("/resource/icon/10/074.png");		// Yellow
 	public static URL MED_FLAG_IMAGE_URL = Constant.class.getResource("/resource/icon/10/076.png");		// Orange
 	public static URL HIGH_FLAG_IMAGE_URL = Constant.class.getResource("/resource/icon/10/071.png");	// Red
+	public static URL BLANK_IMAGE_URL = Constant.class.getResource("/resource/icon/10/blank.png");
 
     public static String getEyeCatcher() {
         return staticEyeCatcher;

File: src/org/zaproxy/zap/extension/highlighter/HighlighterManager.java
Patch:
@@ -31,7 +31,6 @@ public HighlighterManager() {
 	
 	public void reinitHighlights(LinkedList<HighlightSearchEntry> list) {
 		this.highlights = (LinkedList<HighlightSearchEntry>) list.clone();
-		System.out.println("Now have: " + list.size());
 		
 		setChanged();
 		notifyObservers(null);

File: src/org/zaproxy/zap/extension/fuzz/FuzzerThread.java
Patch:
@@ -125,7 +125,7 @@ private void fuzz(HttpMessage msg, FileFuzzer[] customFuzzers,
 		
 		int total = 0;
 		for (FileFuzzer fuzzer : customFuzzers) {
-			total += (int)fuzzer.getLength();
+			total += fuzzer.getLength();
 		}
 		extension.scanProgress(0, total);
 		

File: src/org/zaproxy/zap/extension/fuzz/ExtensionFuzz.java
Patch:
@@ -108,11 +108,11 @@ public void scanProgress(int done, int todo) {
 
 	public void startFuzzers (HttpMessage msg, Fuzzer[] fuzzers, FileFuzzer[] customFuzzers, boolean fuzzHeader, 
 			int startOffset, int endOffset, AntiCsrfToken acsrfToken, 
-			boolean showTokenRequests, boolean followRedirects) {
+			boolean showTokenRequests, boolean followRedirects, boolean urlEncode) {
 		this.getFuzzerPanel().scanStarted();
 
 		fuzzerThread = new FuzzerThread(this, getFuzzerParam(), getModel().getOptionsParam().getConnectionParam());
-		fuzzerThread.setTarget(msg, fuzzers, customFuzzers, fuzzHeader, startOffset, endOffset, acsrfToken, showTokenRequests, followRedirects);
+		fuzzerThread.setTarget(msg, fuzzers, customFuzzers, fuzzHeader, startOffset, endOffset, acsrfToken, showTokenRequests, followRedirects, urlEncode);
 		fuzzerThread.addFuzzerListener(this);
 		fuzzerThread.start();
 

File: src/org/parosproxy/paros/view/MainPopupMenu.java
Patch:
@@ -86,7 +86,8 @@ public synchronized void show(Component invoker, int x, int y) {
 	        try {
 	            if (getComponent(i) != null && getComponent(i) instanceof ExtensionPopupMenu) {
 	                menu = (ExtensionPopupMenu) getComponent(i);
-	                menu.setVisible(menu.isEnableForComponent(invoker) && menu.isEnabled());
+	                // ZAP: prevents a NullPointerException when the treeSite doesn't have a node selected and a popup menu option (Delete/Purge) is selected
+	                menu.setVisible(menu.isEnableForComponent(invoker));
 	            }
 	        } catch (Exception e) {
 	            e.printStackTrace();

File: src/org/zaproxy/zap/view/ProxyDialog.java
Patch:
@@ -117,7 +117,7 @@ private JPanel getJPanel() {
 	
 	private OptionsConnectionPanel getConnPanel() {
 		if (connPanel == null) {
-			connPanel = new OptionsConnectionPanel();
+			connPanel = new OptionsConnectionPanel(true);
 			connPanel.setProxyDialog(this);
 		}
 		return connPanel;

File: src/org/zaproxy/zap/extension/invoke/InvokeAppWorker.java
Patch:
@@ -83,7 +83,7 @@ protected Void doInBackground() throws Exception {
 		}
 		if (msg.getRequestBody() != null) {
 			postdata = msg.getRequestBody().toString();
-			postdata.replaceAll("\n", "\\n");
+			postdata = postdata.replaceAll("\n", "\\n");
 		}
 		Vector<String> cookies = msg.getRequestHeader().getHeaders(HttpHeader.COOKIE);
 		if (cookies != null && cookies.size() > 0) {

File: src/org/zaproxy/zap/extension/invoke/OptionsInvokePanel.java
Patch:
@@ -238,7 +238,9 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 
 	        editParameters = new ZapTextField();
 	        editNote = new JCheckBox();
-	        editOutput = new JCheckBox();
+			editNote.setEnabled(false);
+
+			editOutput = new JCheckBox();
 	        editOutput.addActionListener(new ActionListener() {
 
 				@Override

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelView.java
Patch:
@@ -82,4 +82,6 @@ public interface HttpPanelView {
 	 * @param editable
 	 */
 	public void setEditable(boolean editable);
+	
+	public String getConfigName();
 }

File: src/org/zaproxy/zap/extension/httppanel/plugin/BasicPlugin.java
Patch:
@@ -49,10 +49,11 @@ public BasicPlugin(HttpPanel httpPanel, HttpMessage httpMessage) {
 	protected void switchView(String name) {
 		if (name == null) {
 			String configView = Model.getSingleton().getOptionsParam().getViewParam().getPluginView(this.getName(), isRequest());
+			System.out.println("Configview: " + configView);
 			if (configView == null) {
 				// Fallback
-				this.currentView = views.get(Constant.messages.getString("request.panel.view.text"));
-				name = Constant.messages.getString("request.panel.view.text");
+				this.currentView = views.get("Text");
+				name = "Text";
 			} else {
 				// From config
 				this.currentView = views.get(configView);

File: src/org/zaproxy/zap/extension/httppanel/view/hex/HttpPanelHexView.java
Patch:
@@ -45,7 +45,7 @@ public HttpPanelHexView(HttpPanelTextModelInterface model, MessageType messageTy
 	
 	@Override
 	public String getName() {
-		return VIEW_HEX;
+		return "Hex";
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/view/paramtable/RequestAllTableView.java
Patch:
@@ -115,7 +115,7 @@ public void save() {
 
 	@Override
 	public String getName() {
-		return Constant.messages.getString("request.panel.view.table");
+		return "Table";
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/view/posttable/RequestPostTableView.java
Patch:
@@ -48,7 +48,7 @@ private void init() {
 	
 	@Override
 	public String getName() {
-		return Constant.messages.getString("request.panel.view.table");
+		return "Table";
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/view/text/HttpPanelTextView.java
Patch:
@@ -82,7 +82,7 @@ public void save() {
 	
 	@Override
 	public String getName() {
-		return Constant.messages.getString("request.panel.view.text");
+		return "Text";
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelView.java
Patch:
@@ -57,6 +57,7 @@ public interface HttpPanelView {
 	 * Gets the content
 	 * @return a string representation of the content
 	 */
+// DOBIN
 //	public String getModel();
 
 	

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -131,6 +131,7 @@ public final class Constant {
     
     // ZAP: Added dirbuster dir
     public String DIRBUSTER_DIR = "dirbuster";
+    public String DIRBUSTER_CUSTOM_DIR = DIRBUSTER_DIR;
 
 	public static URL OK_FLAG_IMAGE_URL = Constant.class.getResource("/resource/icon/10/072.png"); 		// Green
 	public static URL INFO_FLAG_IMAGE_URL = Constant.class.getResource("/resource/icon/10/073.png"); 	// Blue
@@ -195,6 +196,7 @@ private void initializeFilesAndDirectories() {
 		FOLDER_SESSION = zapHome + FOLDER_SESSION;
 		DBNAME_UNTITLED = zapHome + DBNAME_UNTITLED;
 		ACCEPTED_LICENSE = zapHome + ACCEPTED_LICENSE;
+		DIRBUSTER_CUSTOM_DIR = zapHome + DIRBUSTER_DIR;
 
         try {
             System.setProperty(SYSTEM_PAROS_USER_LOG, zapHome);

File: src/org/zaproxy/zap/extension/invoke/ExtensionInvoke.java
Patch:
@@ -66,6 +66,7 @@ private void initialize() {
             pmi.setWorkingDir(app.getWorkingDirectory());
             pmi.setParameters(app.getParameters());
             pmi.setCaptureOutput(app.isCaptureOutput());
+            pmi.setOutputNote(app.isOutputNote());
             this.invokeMenus.add(pmi);
         	
         }
@@ -111,6 +112,7 @@ protected void replaceInvokeMenus(List<InvokableApp> apps) {
             pmi.setWorkingDir(app.getWorkingDirectory());
             pmi.setParameters(app.getParameters());
             pmi.setCaptureOutput(app.isCaptureOutput());
+            pmi.setOutputNote(app.isOutputNote());
     		View.getSingleton().getPopupMenu().addMenu(pmi);
             this.invokeMenus.add(pmi);
 		}

File: src/org/zaproxy/zap/extension/bruteforce/BruteForce.java
Patch:
@@ -122,7 +122,7 @@ public void run() {
 				startPoint = directory;
 			}
 			log.debug("BruteForce : starting on http://" + site + startPoint);
-			log.debug("BruteForce : using recursive=" + recursive);
+			log.debug("BruteForce : file: " + fileName + " recursive=" + recursive);
 			manager.setupManager(startPoint, fileName, protocol, host, port, exts, null, threads, true, true, recursive, false, extsVector);
 			
 			manager.start();

File: src/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -47,6 +47,7 @@
 import org.parosproxy.paros.control.Control;
 import org.parosproxy.paros.extension.Extension;
 import org.parosproxy.paros.extension.history.ExtensionHistory;
+import org.parosproxy.paros.extension.option.OptionsParamView;
 import org.parosproxy.paros.model.HistoryList;
 import org.parosproxy.paros.model.HistoryReference;
 import org.parosproxy.paros.model.Model;
@@ -179,8 +180,7 @@ private JPanel getPanelHeader() {
 	 */
 	private HttpPanelRequest getRequestPanel() {
 		if (requestPanel == null) {
-
-			requestPanel = new HttpPanelRequest(true, extension, httpMessage);
+			requestPanel = new HttpPanelRequest(true, extension, httpMessage, OptionsParamView.ViewType.req_manual);
 		}
 		return requestPanel;
 	}
@@ -241,7 +241,7 @@ private JComponent getPanelTab() {
 	 */
 	private HttpPanelResponse getResponsePanel() {
 		if (responsePanel == null) {
-			responsePanel = new HttpPanelResponse(false, extension, httpMessage);
+			responsePanel = new HttpPanelResponse(false, extension, httpMessage, OptionsParamView.ViewType.res_manual);
 		}
 		return responsePanel;
 	}

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -36,6 +36,7 @@
 
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.ViewDelegate;
+import org.parosproxy.paros.extension.option.OptionsParamView;
 import org.parosproxy.paros.model.Session;
 import org.zaproxy.zap.extension.help.ExtensionHelp;
 import org.zaproxy.zap.extension.httppanel.HttpPanelRequest;
@@ -172,7 +173,7 @@ public OutputPanel getOutputPanel() {
 
     public HttpPanelRequest getRequestPanel() {
         if (requestPanel == null) {
-            requestPanel = new HttpPanelRequest(false, null);
+            requestPanel = new HttpPanelRequest(false, null, null, OptionsParamView.ViewType.req_history);
     		// ZAP: Added 'right arrow' icon
     		requestPanel.setIcon(new ImageIcon(getClass().getResource("/resource/icon/16/105.png")));
             requestPanel.setName(Constant.messages.getString("request.panel.title"));	// ZAP: i18n
@@ -182,7 +183,7 @@ public HttpPanelRequest getRequestPanel() {
     
     public HttpPanelResponse getResponsePanel() {
         if (responsePanel == null) {
-            responsePanel = new HttpPanelResponse(false, null);
+            responsePanel = new HttpPanelResponse(false, null, null, OptionsParamView.ViewType.res_history);
     		// ZAP: Added 'left arrow' icon
             responsePanel.setIcon(new ImageIcon(getClass().getResource("/resource/icon/16/106.png")));
             responsePanel.setName(Constant.messages.getString("response.panel.title"));	// ZAP: i18n

File: src/org/zaproxy/zap/extension/brk/BreakPanel.java
Patch:
@@ -29,6 +29,7 @@
 import javax.swing.JPanel;
 
 import org.parosproxy.paros.extension.AbstractPanel;
+import org.parosproxy.paros.extension.option.OptionsParamView;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.View;
@@ -76,8 +77,8 @@ private void initialize() {
 		panelContent = new JPanel(new CardLayout());
 		this.add(panelContent, BorderLayout.CENTER);
 
-		requestPanel = new HttpPanelRequest(true, null);
-		responsePanel = new HttpPanelResponse(true, null);
+		requestPanel = new HttpPanelRequest(true, null, null, OptionsParamView.ViewType.req_proxy);
+		responsePanel = new HttpPanelResponse(true, null, null,  OptionsParamView.ViewType.res_proxy);
 
 		panelContent.add(requestPanel, "request");
 		panelContent.add(responsePanel, "response");

File: src/org/parosproxy/paros/extension/manualrequest/ManualRequestEditorDialog.java
Patch:
@@ -241,7 +241,7 @@ private JComponent getPanelTab() {
 	 */
 	private HttpPanelResponse getResponsePanel() {
 		if (responsePanel == null) {
-			responsePanel = new HttpPanelResponse(true, extension, httpMessage);
+			responsePanel = new HttpPanelResponse(false, extension, httpMessage);
 		}
 		return responsePanel;
 	}

File: src/org/zaproxy/zap/extension/httppanel/view/text/HttpPanelTextView.java
Patch:
@@ -72,7 +72,7 @@ public void highlight(SearchMatch sm) {
 	
 	public void load() {
 		httpPanelTextArea.setText(model.getData());
-		httpPanelTextArea.setCaretPosition(0);	
+		httpPanelTextArea.setCaretPosition(0);
 	}
 	
 	public void save() {

File: src/org/zaproxy/zap/extension/bruteforce/BruteForce.java
Patch:
@@ -51,6 +51,7 @@ public class BruteForce extends Thread implements BruteForceListenner {
 	private boolean isPaused = false;
 	private BruteForceListenner listenner;
 	private int threads = 0;
+	private boolean recursive = BruteForceParam.DEFAULT_RECURSIVE;
 	private DirBusterManager manager = null;
 	
     private static Logger log = Logger.getLogger(BruteForce.class);
@@ -61,6 +62,7 @@ public BruteForce (String site, String fileName, BruteForceListenner listenner,
 		this.directory = directory;
 		this.listenner = listenner;
 		this.threads = bruteForceParam.getThreadPerScan();
+		this.recursive = bruteForceParam.getRecursive();
 
 		this.list = new SortedListModel();
 		log.info("BruteForce : " + site + "/" + directory + " threads: " + threads);
@@ -113,14 +115,14 @@ public void run() {
 			manager.setAuto(true);
 			manager.setHeadLessMode(true);
             
-            boolean recursive = true;
 			Vector extsVector = new Vector();
 			String exts = "php";
 			String startPoint = "/";
 			if (directory != null) {
 				startPoint = directory;
 			}
 			log.debug("BruteForce : starting on http://" + site + startPoint);
+			log.debug("BruteForce : using recursive=" + recursive);
 			manager.setupManager(startPoint, fileName, protocol, host, port, exts, null, threads, true, true, recursive, false, extsVector);
 			
 			manager.start();

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -112,7 +112,7 @@ public final class Constant {
     
     private static Constant instance = null;
     
-    public static final int MAX_HOST_CONNECTION = 5;
+    public static final int MAX_HOST_CONNECTION = 10;
     // ZAP: Dont announce ourselves
     //public static final String USER_AGENT = PROGRAM_NAME + "/" + PROGRAM_VERSION;
     public static final String USER_AGENT = "";

File: src/org/zaproxy/zap/model/Vulnerabilities.java
Patch:
@@ -40,7 +40,9 @@ private static synchronized void init() {
 			// Read them in from the file
 	        try {
 	        	File f = new File(Constant.getInstance().VULNS_CONFIG);
-	        	XMLConfiguration config = new XMLConfiguration(f);
+	        	XMLConfiguration config = new XMLConfiguration();
+	        	config.setDelimiterParsingDisabled(true);
+	        	config.load(f);
 	        	List<String> test = config.getList("vuln_items");
 	        	vulns = new ArrayList<Vulnerability>();
 	        	for (String item : test) {

File: src/org/zaproxy/zap/extension/brk/PopupMenuAddBreakHistory.java
Patch:
@@ -97,7 +97,7 @@ public boolean isEnableForComponent(Component invoker) {
                 listLog = list;
                 Object[] obj = listLog.getSelectedValues();
 
-                if (obj.length == 1) {
+                if (obj.length == 1 && extension.canAddBreakPoint()) {
                     this.setEnabled(true);
                 } else {
                     this.setEnabled(false);

File: src/org/zaproxy/zap/extension/brk/PopupMenuAddBreakSites.java
Patch:
@@ -93,7 +93,7 @@ public boolean isEnableForComponent(Component invoker) {
         treeSite = getTree(invoker);
         if (treeSite != null) {
 		    SiteNode node = (SiteNode) treeSite.getLastSelectedPathComponent();
-		    if (node != null && ! node.isRoot()) {
+		    if (node != null && ! node.isRoot() && extension.canAddBreakPoint()) {
 		        this.setEnabled(true);
 		    } else {
 		        this.setEnabled(false);

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -541,7 +541,8 @@ private HistoryReference createReference(SiteNode node, HistoryReference baseRef
         }
         HttpMessage newMsg = base.cloneRequest();
         
-        URI uri = new URI(sb.toString(), true);
+        // ZAP: Prevents a possible URIException, because the passed string is not escaped.
+        URI uri = new URI(sb.toString(), false);
         newMsg.getRequestHeader().setURI(uri);
         newMsg.getRequestHeader().setMethod(HttpRequestHeader.GET);
         newMsg.getRequestBody().setBody("");

File: src/org/zaproxy/zap/extension/reveal/ExtensionReveal.java
Patch:
@@ -130,7 +130,7 @@ public boolean onHttpResponseReceive(HttpMessage msg) {
 										ATT_READONLY.equalsIgnoreCase(att.getName()) ||
 										(ATT_TYPE.equalsIgnoreCase(att.getName()) && 
 												TYPE_HIDDEN.equalsIgnoreCase(att.getValue()))) {
-										logger.info("Removing " + att.getName() + ": " + response.substring(att.getBegin(), att.getEnd()));
+										logger.debug("Removing " + att.getName() + ": " + response.substring(att.getBegin(), att.getEnd()));
 										outputDocument.remove(att);
 										changed = true;
 									}

File: src/org/zaproxy/zap/extension/ascan/AlertPanel.java
Patch:
@@ -120,7 +120,6 @@ JTree getTreeAlert() {
 			treeAlert.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
 			treeAlert.addMouseListener(new java.awt.event.MouseAdapter() { 
 				public void mousePressed(java.awt.event.MouseEvent e) {
-					mouseClicked(e);
 				}
 					
 				public void mouseReleased(java.awt.event.MouseEvent e) {

File: src/org/zaproxy/clientapi/core/Alert.java
Patch:
@@ -169,7 +169,7 @@ public boolean matches (Alert alertFilter) {
 	
 	public String toString() {
 		StringBuffer sb = new StringBuffer();
-		sb.append("\tAlert: alert=\"" + getAlert() + "\" ");
+		sb.append("Alert: alert=\"" + getAlert() + "\" ");
 		if (getRisk() != null) {
 			sb.append("risk=\"");
 			sb.append(getRisk().name());

File: src/org/zaproxy/clientapi/core/ClientApi.java
Patch:
@@ -117,7 +117,7 @@ public void checkAlerts (List<Alert> ignoreAlerts, List<Alert> requireAlerts) th
 					for (Alert ignoreAlert : ignoreAlerts) {
 						if (foundAlert.matches(ignoreAlert)) {
 							if (debug) {
-								System.out.println("Ignoring alert " + ignoreAlert);
+								System.out.println("Ignoring " + foundAlert);
 							}
 							ignore = true;
 							break;
@@ -128,7 +128,7 @@ public void checkAlerts (List<Alert> ignoreAlerts, List<Alert> requireAlerts) th
 					for (Alert requireAlert : requireAlerts) {
 						if (foundAlert.matches(requireAlert)) {
 							if (debug) {
-								System.out.println("Found alert " + foundAlert);
+								System.out.println("Found " + foundAlert);
 							}
 							requireAlerts.remove(requireAlert);
 							ignore = true;

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -69,6 +69,8 @@ abstract public class HttpHeader implements java.io.Serializable{
 	public static final String HTTP				= "http";
 	public static final String HTTPS			= "https";
 
+	public static final String GZIP				= "gzip";
+
 	public static final Pattern patternCRLF			= Pattern.compile("\\r\\n", Pattern.MULTILINE);
 	public static final Pattern patternLF				= Pattern.compile("\\n", Pattern.MULTILINE);
 	

File: src/org/parosproxy/paros/Constant.java
Patch:
@@ -314,6 +314,9 @@ private void initializeFilesAndDirectories() {
             config.load();
 
             lang = config.getString(OptionsParamView.LOCALE, OptionsParamView.DEFAULT_LOCALE);
+            if (lang.length() == 0) {
+            	lang = OptionsParamView.DEFAULT_LOCALE;
+            }
             String[] langArray = lang.split("_");
             locale = new Locale(langArray[0], langArray[1]);
         } catch (Exception e) {

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -182,9 +182,10 @@ private void run() throws Exception {
 		if (Model.getSingleton().getOptionsParam().isGUI()) {
 
 		    // Prompt for language if not set
-		    if (Model.getSingleton().getOptionsParam().getViewParam().getConfigLocale() == null) {
+			String locale = Model.getSingleton().getOptionsParam().getViewParam().getConfigLocale();
+		    if (locale == null || locale.length() == 0) {
 	        	// Dont use a parent of the MainFrame - that will initialise it with English!
-				Locale userloc = determineUsersSystemLocale();
+				final Locale userloc = determineUsersSystemLocale();
 		    	if (userloc == null) {
 		    		// Only show the dialog, when the user's langauge can't be guessed.
 					final LocaleDialog dialog = new LocaleDialog(null, true);

File: src/org/zaproxy/zap/extension/autoupdate/ExtensionAutoUpdate.java
Patch:
@@ -154,6 +154,9 @@ public void checkForUpdates(boolean manual) {
 			
 		}
 		
+		checkForUpdates = new CheckForUpdates(this);
+		checkForUpdates.execute();
+        
         if (manual) {
         	waitDialog = getView().getWaitMessageDialog(Constant.messages.getString("cfu.check.checking"));
         	// Allow user to close the dialog
@@ -162,9 +165,6 @@ public void checkForUpdates(boolean manual) {
         	waitDialog.setVisible(true);
         }
 
-		checkForUpdates = new CheckForUpdates(this);
-		checkForUpdates.execute();
-        
 	}
 
 

File: src/org/parosproxy/paros/db/TableAlert.java
Patch:
@@ -219,8 +219,7 @@ public Vector<Integer> getAlertLists() throws SQLException {
 	
 	public void deleteAlert(int alertId) throws SQLException {
 	    psDeleteAlert.setInt(1, alertId);
-	    ResultSet rs = psDeleteAlert.executeQuery();
-	    rs.close();
+	    psDeleteAlert.execute();
 	}
 	
 	public synchronized void update(int alertId, String alert, 

File: src/org/zaproxy/zap/extension/httppanel/plugin/request/split/RequestSplitView.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.manualrequest.ManualRequestEditorDialog;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.HttpPanel;
@@ -86,7 +87,7 @@ protected void initModel() {
 
 	protected void initUi() {
 		// Common
-		buttonShowView = new JButton("Split");
+		buttonShowView = new JButton(Constant.messages.getString("request.panel.button.split"));
 		panelOptions = new JPanel();
 		comboxSelectView = new JComboBox();		
 

File: src/org/zaproxy/zap/extension/httppanel/view/table/HttpPanelTabularView.java
Patch:
@@ -4,10 +4,10 @@
 
 import javax.swing.JComponent;
 import javax.swing.JPanel;
-import javax.swing.JScrollPane;
 import javax.swing.JTable;
 import javax.swing.table.AbstractTableModel;
 
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.httppanel.HttpPanelView;
 
@@ -44,7 +44,7 @@ private void init() {
 	
 	@Override
 	public String getName() {
-		return "Table";
+		return Constant.messages.getString("request.panel.view.table");
 	}
 
 	@Override

File: src/org/zaproxy/zap/extension/httppanel/view/text/HttpPanelTextView.java
Patch:
@@ -7,6 +7,7 @@
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.View;
 import org.zaproxy.zap.extension.httppanel.HttpPanelView;
@@ -80,7 +81,7 @@ public void save() {
 	
 	@Override
 	public String getName() {
-		return "Text";
+		return Constant.messages.getString("request.panel.view.text");
 	}
 
 	@Override

File: src/org/parosproxy/paros/view/MainFrame.java
Patch:
@@ -79,7 +79,6 @@ public void windowClosing(WindowEvent e) {
 		});
 
 		this.setVisible(false);
-    	this.pack();
 	}
 
 	/**
@@ -93,7 +92,6 @@ private JPanel getPaneContent() {
 			paneContent = new JPanel();
 			paneContent.setLayout(new BoxLayout(getPaneContent(), BoxLayout.Y_AXIS));
 			paneContent.setEnabled(true);
-			paneContent.setPreferredSize(new Dimension(800, 600));
 
 			if (Model.getSingleton().getOptionsParam().getViewParam().getShowMainToolbar() == 1) {
 				paneContent.add(getMainToolbarPanel(), null);

File: src/org/parosproxy/paros/view/WorkbenchPanel.java
Patch:
@@ -127,7 +127,7 @@ private JSplitPane getSplitVert() {
 		if (splitVert == null) {
 			splitVert = new JSplitPane();
 
-			splitVert.setDividerLocation(restoreDividerLocation(DIVIDER_VERTICAL, 400));
+			splitVert.setDividerLocation(restoreDividerLocation(DIVIDER_VERTICAL, 300));
 			splitVert.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new DividerResizedListener(DIVIDER_VERTICAL));
 
 			splitVert.setDividerSize(3);

File: src/org/zaproxy/zap/extension/lang/OptionsLangPanel.java
Patch:
@@ -250,6 +250,6 @@ public void saveParam (Object obj) throws Exception {
 	
 	@Override
 	public String getHelpIndex() {
-		return "ui.dialogs.options.lang";
+		return "ui.dialogs.options.language";
 	}
 }

File: src/org/zaproxy/zap/extension/history/PopupMenuExportURLs.java
Patch:
@@ -133,7 +133,8 @@ private void exportURLs(SiteNode node, BufferedWriter writer, boolean html) {
         try {
         	
         	if (node.getHistoryReference() != null &&
-        			node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_MANUAL &&
+        			(node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_MANUAL ||
+        					node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_SPIDER) &&
         			node.getHistoryReference().getHttpMessage() != null &&
         			node.getHistoryReference().getHttpMessage().getRequestHeader() != null &&
         			node.getHistoryReference().getHttpMessage().getRequestHeader().getURI() != null) {

File: src/org/zaproxy/zap/extension/brk/BreakPanel.java
Patch:
@@ -189,6 +189,7 @@ public void getMessage(HttpMessage msg, boolean isRequest) {
 			requestPanel.setMessage(msg);
 		} else {
 			responsePanel.saveData();
+			responsePanel.getHttpMessage().getResponseHeader().setContentLength(responsePanel.getHttpMessage().getResponseBody().length());
 			cl.show(panelContent, "response");
 			responsePanel.setMessage(msg);
 		}

File: src/org/zaproxy/zap/ZAP.java
Patch:
@@ -84,7 +84,7 @@ public static void main(String[] args) throws Exception {
 	    try {
 	        zap.run();
 	    } catch (final Exception e) {
-	        log.fatal(e.getStackTrace());
+	        log.fatal(e.getMessage(), e);
 	        //throw e;
 	        System.exit(1);
 	    }
@@ -308,7 +308,7 @@ private void runCommandLine() {
 	        }
 		    rc = 0;
 	    } catch (final Exception e) {
-	        log.error(e.getMessage());
+	        log.error(e.getMessage(), e);
 	        System.out.println(e.getMessage());
 	        rc = 1;
 	    } finally {

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -176,7 +176,7 @@ public void alertFound(Alert alert) {
 
 	@Override
 	public void hostComplete(String hostAndPort) {
-		this.scanFinshed(cleanSiteName(hostAndPort));
+		this.scanFinshed(cleanSiteName(hostAndPort, true));
 		
 	}
 
@@ -188,7 +188,7 @@ public void hostNewScan(String hostAndPort, HostProcess hostThread) {
 
 	@Override
 	public void hostProgress(String hostAndPort, String msg, int percentage) {
-		this.scanProgress(this.cleanSiteName(hostAndPort), percentage, 100);
+		this.scanProgress(cleanSiteName(hostAndPort, true), percentage, 100);
 	}
 
 

File: src/org/zaproxy/zap/extension/anticsrf/OptionsAntiCsrfPanel.java
Patch:
@@ -60,16 +60,15 @@ private void initialize() {
         this.setSize(409, 268);
         this.setName(Constant.messages.getString("options.acsrf.title"));
         jLabel.setText(Constant.messages.getString("options.acsrf.label.tokens"));
-        jLabel.setPreferredSize(new java.awt.Dimension(494,80));
-        jLabel.setMinimumSize(new java.awt.Dimension(494,16));
+        jLabel.setPreferredSize(new java.awt.Dimension(494,25));
+        jLabel.setMinimumSize(new java.awt.Dimension(494,25));
         gridBagConstraints1.gridx = 0;
         gridBagConstraints1.gridy = 0;
         gridBagConstraints1.gridheight = 1;
         gridBagConstraints1.ipady = 50;
         gridBagConstraints1.insets = new java.awt.Insets(10,0,5,0);
         gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
         gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
-        gridBagConstraints1.weightx = 1.0D;
         gridBagConstraints2.gridx = 0;
         gridBagConstraints2.gridy = 1;
         gridBagConstraints2.weightx = 1.0;

File: src/org/zaproxy/zap/extension/invoke/ExtensionInvoke.java
Patch:
@@ -63,6 +63,7 @@ private void initialize() {
         for (InvokableApp app: apps) {
             PopupMenuInvoke pmi = new PopupMenuInvoke(app.getDisplayName());
             pmi.setCommand(app.getFullCommand());
+            pmi.setWorkingDir(app.getWorkingDirectory());
             pmi.setParameters(app.getParameters());
             pmi.setCaptureOutput(app.isCaptureOutput());
             this.invokeMenus.add(pmi);
@@ -107,6 +108,7 @@ protected void replaceInvokeMenus(List<InvokableApp> apps) {
 		for (InvokableApp app : apps) {
             PopupMenuInvoke pmi = new PopupMenuInvoke(app.getDisplayName());
             pmi.setCommand(app.getFullCommand());
+            pmi.setWorkingDir(app.getWorkingDirectory());
             pmi.setParameters(app.getParameters());
             pmi.setCaptureOutput(app.isCaptureOutput());
     		View.getSingleton().getPopupMenu().addMenu(pmi);

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -144,6 +144,9 @@ public void setMessage(String data, boolean isSecure) throws HttpMalformedHeader
     	}
 
     	if (mMalformedHeader) {
+    		if (log.isDebugEnabled()) {
+    			log.debug("Malformed header: " + data);
+    		}
     		throw new HttpMalformedHeaderException();
     	}
 

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -147,9 +147,9 @@ public void run() {
 				// ZAP: added host name variable
                 String hostName = firstHeader.getHostName();
 				try {
-					beginSSL(hostName);
 					httpOut.write(CONNECT_HTTP_200);
 					httpOut.flush();
+					beginSSL(hostName);
 				} catch (MissingRootCertificateException e) {
 					// Unluckily Firefox and Internet Explorer will not show this message.
 					// We should find a way to let the browsers display this error message.

File: src/ch/csnc/extension/httpclient/SSLContextManager.java
Patch:
@@ -324,8 +324,7 @@ public int initPKCS11(String name, String library, int slot, int slotListIndex,
             Constructor c = pkcs11Class.getConstructor(new Class[] { InputStream.class });
             pkcs11 = (Provider) c.newInstance(new Object[] { is });
         } catch (Exception e) {
-            System.err.println("Error instantiating the PKCS11 provider");
-            e.printStackTrace();
+        	log.error("Error instantiating the PKCS11 provider", e);
         }
         
         Security.addProvider(pkcs11);

File: src/org/parosproxy/paros/security/SslCertificateService.java
Patch:
@@ -61,7 +61,7 @@ public interface SslCertificateService {
 	 * @throws KeyStoreException
 	 * @throws IOException
 	 * @throws UnrecoverableKeyException
-	 * @throws IllegalStateException when it wasn't initialized.
+	 * @throws MissingRootCertificateException when it wasn't initialized.
 	 */
 	public abstract KeyStore createCertForHost(String hostname)
 			throws NoSuchAlgorithmException, InvalidKeyException,

File: src/org/parosproxy/paros/security/SslCertificateServiceImpl.java
Patch:
@@ -118,7 +118,7 @@ public KeyStore createCertForHost(String hostname) throws NoSuchAlgorithmExcepti
     	}
 
     	if (this.caCert == null || this.caPrivKey == null || this.caPubKey == null) {
-    		throw new IllegalStateException(this.getClass() + " wasn't initialized! Got to options 'Dynamic SSL Certs' and create one.");
+    		throw new MissingRootCertificateException(this.getClass() + " wasn't initialized! Got to options 'Dynamic SSL Certs' and create one.");
     	}
 
         final KeyPair mykp = this.createKeyPair();

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLWelcomeDialog.java
Patch:
@@ -159,6 +159,7 @@ public void actionPerformed(ActionEvent e) {
 					@Override
 					public void run() {
 						OptionsDialog optdlg = View.getSingleton().getOptionsDialog("");
+						optdlg.initParam(Model.getSingleton().getOptionsParam());
 						optdlg.showDialog(true, Constant.messages.getString("dynssl.options.name"));
 					}
 				});

File: src/org/zaproxy/zap/extension/dynssl/DynamicSSLWelcomeDialog.java
Patch:
@@ -69,9 +69,9 @@ public DynamicSSLWelcomeDialog(Frame owner, boolean modal) throws HeadlessExcept
 
 	private void initLayout() {
 	    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {
-	    	this.setSize(450,300);
+	    	this.setSize(480,300);
 	    }
-	    this.setPreferredSize(new Dimension(450, 300));
+	    this.setPreferredSize(new Dimension(480, 300));
 		JTextArea txtSslWontWork = new JTextArea();
 		txtSslWontWork.setEditable(false);
 		txtSslWontWork.setBackground(SystemColor.control); // XXX: this doesn't work like expected, it should be the same color as the control's background :-/

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -14,6 +14,9 @@ public class LocaleUtils {
 
 	private static Logger logger = Logger.getLogger(LocaleUtils.class);
 
+	/**
+	 * @return The list of available translations, ZAP provides
+	 */
 	public static List<String> getAvailableLocales() {
 		List<String> locales = new ArrayList<String>();
 		File dir = new File("lang");

File: src/org/zaproxy/zap/extension/beanshell/BeanShellPanel.java
Patch:
@@ -77,7 +77,7 @@ private  void initialize() {
 		GridBagConstraints gridBagConstraints1 = new GridBagConstraints();
 
 		this.setLayout(new GridBagLayout());
-		this.setSize(403, 296);
+		this.setPreferredSize(new Dimension(400, 300));
 		gridBagConstraints1.gridx = 0;
 		gridBagConstraints1.gridy = 0;
 		gridBagConstraints1.weightx = 1.0;
@@ -102,7 +102,7 @@ private  void initialize() {
 	private JSplitPane getSplitVert() {
 		if (splitVert == null) {
 			splitVert = new JSplitPane();
-			splitVert.setDividerLocation(220);
+			splitVert.setDividerLocation(0.5d);
 			splitVert.setDividerSize(3);
 			splitVert.setOrientation(JSplitPane.VERTICAL_SPLIT);
 			splitVert.setPreferredSize(new Dimension(400,400));

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -509,7 +509,6 @@ private PopupMenuResend getPopupMenuResend() {
 	public ManualRequestEditorDialog getResendDialog() {
 		if (resendDialog == null) {
 			resendDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, true, this);
-			//resendDialog.setSize(700, 800);
 			resendDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
 		}
 		return resendDialog;

File: src/org/parosproxy/paros/extension/manualrequest/ExtensionManualRequestEditor.java
Patch:
@@ -121,9 +121,6 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	ManualRequestEditorDialog getManualRequestEditorDialog() {
 		if (manualRequestEditorDialog == null) {
 			manualRequestEditorDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, true, this);
-		    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {
-		    	manualRequestEditorDialog.setSize(700, 800);
-		    }
 			manualRequestEditorDialog.setTitle(Constant.messages.getString("manReq.dialog.title"));	// ZAP: i18n
 		}
 		return manualRequestEditorDialog;

File: src/org/parosproxy/paros/extension/scanner/ExtensionScanner.java
Patch:
@@ -507,9 +507,6 @@ ManualRequestEditorDialog getManualRequestEditorDialog() {
 		if (manualRequestEditorDialog == null) {
 			manualRequestEditorDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, false, this);
 			manualRequestEditorDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
-		    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {
-		    	manualRequestEditorDialog.setSize(700, 800);
-		    }
 		}
 		return manualRequestEditorDialog;
 	}

File: src/org/zaproxy/zap/extension/ascan/ExtensionActiveScan.java
Patch:
@@ -433,7 +433,6 @@ ManualRequestEditorDialog getManualRequestEditorDialog() {
 		if (manualRequestEditorDialog == null) {
 			manualRequestEditorDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, false, this);
 			manualRequestEditorDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
-			manualRequestEditorDialog.setSize(700, 800);
 		}
 		return manualRequestEditorDialog;
 	}

File: src/org/zaproxy/zap/extension/beanshell/ExtensionBeanShell.java
Patch:
@@ -20,6 +20,8 @@
 
 package org.zaproxy.zap.extension.beanshell;
 
+import java.awt.Dimension;
+
 import javax.swing.JMenuItem;
 
 import org.parosproxy.paros.Constant;
@@ -90,7 +92,7 @@ BeanShellConsoleFrame getBeanShellConsoleDialog() {
 		if (beanShellConsoleDialog == null) {
 			beanShellConsoleDialog = new BeanShellConsoleFrame(getView().getMainFrame(), false, this);
 			beanShellConsoleDialog.setView(getView());
-			beanShellConsoleDialog.setSize(600, 600);
+			beanShellConsoleDialog.setPreferredSize(new Dimension(600, 600));
 			beanShellConsoleDialog.setTitle(Constant.messages.getString("beanshell.title"));
 		}
 		return beanShellConsoleDialog;

File: src/org/parosproxy/paros/view/AbstractParamPanel.java
Patch:
@@ -57,7 +57,5 @@ private  void initialize() {
 	 *         OR use return null, if no help key is available.
 	 *         When a valid key is returned, there will be a help button displayed.
 	 */
-	public String getHelpIndex() {
-		return null;
-	}
+	abstract public String getHelpIndex();
 }

File: src/org/zaproxy/zap/extension/search/ExtensionSearch.java
Patch:
@@ -69,7 +69,6 @@ public ExtensionSearch(String name) {
 	private void initialize() {
         this.setName("ExtensionSearch");
 
-        ExtensionHelp.enableHelpKey(getSearchPanel(), "ui.tabs.search");
 	}
 	
 	public void hook(ExtensionHook extensionHook) {
@@ -82,6 +81,8 @@ public void hook(ExtensionHook extensionHook) {
 	        extensionHook.getHookMenu().addEditMenuItem(getMenuPrev());
 	        
 	        getSearchPanel().setDisplayPanel(getView().getRequestPanel(), getView().getResponsePanel());
+
+	        ExtensionHelp.enableHelpKey(getSearchPanel(), "ui.tabs.search");
 	    }
 	}
 	

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -240,6 +240,7 @@ public javax.swing.JList getListLog() {
 			listLog.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
 			listLog.setName("ListLog");
 			listLog.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
+			listLog.setFixedCellHeight(16);	// Significantly speeds up rendering
 			listLog.addMouseListener(new java.awt.event.MouseAdapter() { 
 				public void mousePressed(java.awt.event.MouseEvent e) {    
 				    if ((e.getModifiers() & InputEvent.BUTTON3_MASK) != 0) {  // right mouse button

File: src/org/zaproxy/zap/extension/search/SearchPanel.java
Patch:
@@ -99,6 +99,8 @@ private  void initialize() {
         this.add(getPanelCommand(), getPanelCommand().getName());
         
         resultsList.setName("listSearch");
+		resultsList.setFixedCellHeight(16);	// Significantly speeds up rendering
+
         resultsList.addMouseListener(new java.awt.event.MouseAdapter() { 
 			public void mousePressed(java.awt.event.MouseEvent e) {    
 			    if (SwingUtilities.isRightMouseButton(e)) { 
@@ -313,7 +315,6 @@ public void valueChanged(javax.swing.event.ListSelectionEvent e) {
 		});
 	}
 
-	
 	public void addSearchResult(SearchResult str) {
 		resultsModel.addElement(str);
 		if (resultsModel.size() == 1) {

File: src/org/zaproxy/zap/extension/fuzz/FuzzDialog.java
Patch:
@@ -322,7 +322,7 @@ public void setSelection(Component source) {
 				selectionEnd = sm.getEnd();
 				httpMessage = sm.getMessage();
 				
-				if (sm.getLocation().equals(SearchMatch.Locations.REQUEST_HEAD)) {
+				if (sm.getLocation().equals(SearchMatch.Location.REQUEST_HEAD)) {
 					fuzzHeader = true;
 				} else {
 					fuzzHeader = false;

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelHexUi.java
Patch:
@@ -4,4 +4,6 @@
 
 public class HttpPanelHexUi extends AbstractPanel {
 
+	private static final long serialVersionUID = 1L;
+
 }
\ No newline at end of file

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelTableUi.java
Patch:
@@ -4,12 +4,12 @@
 import java.awt.GridBagLayout;
 
 import javax.swing.JTable;
-import javax.swing.JTextArea;
 
 import org.parosproxy.paros.extension.AbstractPanel;
 
 public class HttpPanelTableUi extends AbstractPanel {
 
+	private static final long serialVersionUID = 1L;
 	private JTable jTable;
 	
 	public HttpPanelTableUi() {

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelTextArea.java
Patch:
@@ -1,13 +1,13 @@
 package org.zaproxy.zap.extension.httppanel;
 
 import javax.swing.JTextArea;
-import javax.swing.text.JTextComponent;
 
 import org.parosproxy.paros.network.HttpMessage;
 import org.zaproxy.zap.extension.search.SearchMatch;
 
 public class HttpPanelTextArea extends JTextArea {
 
+	private static final long serialVersionUID = 1L;
 	private HttpMessage httpMessage;
 	private MessageType messageType;
 	
@@ -41,13 +41,13 @@ public SearchMatch getTextSelection() {
 		if (messageType.equals(MessageType.Header)) {
 			sm = new SearchMatch(
 					httpMessage,
-					SearchMatch.Locations.REQUEST_HEAD, 
+					SearchMatch.Location.REQUEST_HEAD, 
 					getSelectionStart(),
 					getSelectionEnd());
 		} else if (messageType.equals(MessageType.Body)) {
 			sm = new SearchMatch(
 					httpMessage,
-					SearchMatch.Locations.REQUEST_BODY, 
+					SearchMatch.Location.REQUEST_BODY, 
 					getSelectionStart(),
 					getSelectionEnd());
 			

File: src/org/zaproxy/zap/extension/httppanel/HttpPanelTextUi.java
Patch:
@@ -14,13 +14,13 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.parosproxy.paros.extension.AbstractPanel;
-import org.zaproxy.zap.extension.httppanel.model.HttpDataModel;
 import org.zaproxy.zap.extension.search.SearchMatch;
 
 public class HttpPanelTextUi extends AbstractPanel {
 
+	private static final long serialVersionUID = 1L;
+
 	private JTextArea jTextArea;
-	private HttpDataModel httpDataModel;
 	
     private static Log log = LogFactory.getLog(HttpPanelTextUi.class);
 	

File: src/org/zaproxy/zap/extension/httppanel/model/HttpDataModelReqAll.java
Patch:
@@ -1,7 +1,6 @@
 package org.zaproxy.zap.extension.httppanel.model;
 
 import org.parosproxy.paros.network.HttpMalformedHeaderException;
-import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.HttpPanel;
 import org.zaproxy.zap.extension.httppanel.HttpPanelHexUi;
 import org.zaproxy.zap.extension.httppanel.HttpPanelTableUi;

File: src/org/zaproxy/zap/extension/httppanel/model/HttpDataModelReqHeader.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.HttpPanel;
 import org.zaproxy.zap.extension.httppanel.HttpPanelHexUi;
 import org.zaproxy.zap.extension.httppanel.HttpPanelTableUi;
@@ -65,7 +64,7 @@ public void search(Pattern p, List<SearchMatch> matches) {
 		m = p.matcher(getHttpMessage().getRequestHeader().toString());
 		while (m.find()) {
 			matches.add(
-				new SearchMatch(SearchMatch.Locations.REQUEST_HEAD,
+				new SearchMatch(SearchMatch.Location.REQUEST_HEAD,
 						m.start(), m.end()));
 		}
 	}

File: src/org/zaproxy/zap/extension/httppanel/model/HttpDataModelReqPost.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.parosproxy.paros.network.HttpMessage;
 import org.parosproxy.paros.view.HttpPanel;
 import org.zaproxy.zap.extension.httppanel.HttpPanelHexUi;
 import org.zaproxy.zap.extension.httppanel.HttpPanelTableUi;
@@ -62,7 +61,7 @@ public void search(Pattern p, List<SearchMatch> matches) {
 		m = p.matcher(getHttpMessage().getRequestBody().toString());
 		while (m.find()) {
 			matches.add(
-				new SearchMatch(SearchMatch.Locations.REQUEST_BODY,
+				new SearchMatch(SearchMatch.Location.REQUEST_BODY,
 						m.start(), m.end()));
 		}
 	}

File: src/org/zaproxy/zap/extension/httppanel/model/HttpDataModelResContent.java
Patch:
@@ -61,7 +61,7 @@ public void search(Pattern p, List<SearchMatch> matches) {
 		Matcher m;
 		m = p.matcher(getHttpMessage().getRequestBody().toString());
 		while (m.find()) {
-			matches.add(new SearchMatch(SearchMatch.Locations.RESPONSE_BODY, m.start(), m.end()));
+			matches.add(new SearchMatch(SearchMatch.Location.RESPONSE_BODY, m.start(), m.end()));
 		}
 	}
 

File: src/org/zaproxy/zap/extension/httppanel/model/HttpDataModelResHeader.java
Patch:
@@ -62,7 +62,7 @@ public void search(Pattern p, List<SearchMatch> matches) {
 		Matcher m;
 		m = p.matcher(getHttpMessage().getRequestBody().toString());
 		while (m.find()) {
-			matches.add(new SearchMatch(SearchMatch.Locations.RESPONSE_HEAD, m.start(), m.end()));
+			matches.add(new SearchMatch(SearchMatch.Location.RESPONSE_HEAD, m.start(), m.end()));
 		}
 	}
 

File: src/org/zaproxy/zap/extension/search/ExtensionSearch.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class ExtensionSearch extends ExtensionAdaptor implements SessionChangedListener {
 
-	public enum Type {All, URL, Request, Response, Header};
+	public enum Type {All, URL, Request, Response, Header, Fuzz};
 
 	private SearchPanel searchPanel = null;
     private JMenuItem menuSearch = null;

File: src/org/parosproxy/paros/core/scanner/plugin/TestClientAutocomplete.java
Patch:
@@ -54,7 +54,7 @@ public boolean isDepreciated() {
 
     // used reluctant quantifier to make sure the same form and input element is referred 
     //public final static Pattern patternForm = Pattern.compile("(<FORM\\s*[^>]+\\s*>)(.*?)</FORM>", PATTERN_PARAM| Pattern.DOTALL);
-    public final static Pattern patternForm = Pattern.compile("(<FORM\\b[^>]*>(.*?)</FORM>", PATTERN_PARAM| Pattern.DOTALL);
+    public final static Pattern patternForm = Pattern.compile("(<FORM\\b[^>]*>(.*?)</FORM>)", PATTERN_PARAM| Pattern.DOTALL);
     public final static Pattern patternInput = Pattern.compile("(<INPUT\\s*[^>]+type=[\"']?PASSWORD[\"']?[^>]+\\s*>)", PATTERN_PARAM| Pattern.DOTALL);
 
     

File: src/org/parosproxy/paros/core/scanner/plugin/TestClientAutocomplete.java
Patch:
@@ -52,9 +52,9 @@ public boolean isDepreciated() {
     // check for autocomplete
     public final static Pattern patternAutocomplete = Pattern.compile("AUTOCOMPLETE\\s*=[^>]*OFF[^>]*", PATTERN_PARAM);
 
-    // used reluctant quantifer to make sure the same form and input element is referred 
+    // used reluctant quantifier to make sure the same form and input element is referred 
     //public final static Pattern patternForm = Pattern.compile("(<FORM\\s*[^>]+\\s*>)(.*?)</FORM>", PATTERN_PARAM| Pattern.DOTALL);
-    public final static Pattern patternForm = Pattern.compile("(<FORM\b[^>]*>(.*?)</FORM>", PATTERN_PARAM| Pattern.DOTALL);
+    public final static Pattern patternForm = Pattern.compile("(<FORM\\b[^>]*>(.*?)</FORM>", PATTERN_PARAM| Pattern.DOTALL);
     public final static Pattern patternInput = Pattern.compile("(<INPUT\\s*[^>]+type=[\"']?PASSWORD[\"']?[^>]+\\s*>)", PATTERN_PARAM| Pattern.DOTALL);
 
     

File: src/com/sittinglittleduck/DirBuster/gui/Tree/ResultsNode.java
Patch:
@@ -129,7 +129,7 @@ public Vector<ResultsNode> getChildrenVector()
     
     public void clearData()
     {
-        children.removeAll(children);
+        children.removeAllElements();
         result = null;
         name = null;
     }

File: src/org/parosproxy/paros/extension/option/OptionsCertificatePanel.java
Patch:
@@ -537,11 +537,10 @@ private void addPkcs11ButtonActionPerformed(java.awt.event.ActionEvent evt) {//G
 			int ksIndex = contextManager.initPKCS11(name, library, slot, slotIndex, kspass);
 			keyStoreListModel.insertElementAt(contextManager.getKeyStoreDescription(ksIndex), ksIndex);
 		} catch (Exception e) {
-			// TODO what was label.2?
 			JOptionPane.showMessageDialog(null, new String[] {
 					Constant.messages.getString("options.cert.error"),
 					Constant.messages.getString("options.cert.error.password")}, 
-					Constant.messages.getString("options.cert.label.2"), JOptionPane.ERROR_MESSAGE);
+					Constant.messages.getString("options.cert.label.client.cert"), JOptionPane.ERROR_MESSAGE);
 			e.printStackTrace();
 			return;
 		}

File: src/org/zaproxy/zap/extension/encoder2/ExtensionEncoder2.java
Patch:
@@ -94,7 +94,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 	
     private void showEncodeDecodeDialog(JFrame frame, JTextComponent lastInvoker) {
         if (encodeDecodeDialog == null || encodeDecodeDialog.getParent() != frame) {
-            encodeDecodeDialog = new EncodeDecodeDialog(frame, false);            
+            encodeDecodeDialog = new EncodeDecodeDialog();            
 			
             /*
             // TODO doesnt work yet

File: src/org/parosproxy/paros/extension/option/OptionsCertificatePanel.java
Patch:
@@ -600,7 +600,7 @@ private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-
 			@Override
 			public String getDescription()
 			{
-				return Constant.messages.getString("options.cert.label.clientcert");
+				return Constant.messages.getString("options.cert.label.client.cert");
 			}
 			@Override
 			public boolean accept(File f) {

File: src/org/parosproxy/paros/core/scanner/plugin/TestClientAutocomplete.java
Patch:
@@ -62,7 +62,7 @@ public boolean isDepreciated() {
      * @see com.proofsecure.paros.core.scanner.Plugin#getId()
      */
     public int getId() {
-        return 10001;
+        return 10000;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestClientBrowserCache.java
Patch:
@@ -49,7 +49,7 @@ public class TestClientBrowserCache extends AbstractAppPlugin {
      * @see com.proofsecure.paros.core.scanner.Plugin#getId()
      */
     public int getId() {
-        return 10002;
+        return 10001;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestCrossSiteScript.java
Patch:
@@ -51,7 +51,7 @@ public class TestCrossSiteScript extends AbstractAppParamPlugin {
 
     
     public int getId() {
-        return 40003;
+        return 40000;
     }
 
     public String getName() {

File: src/org/parosproxy/paros/core/scanner/plugin/TestCrossSiteScriptInScriptSection.java
Patch:
@@ -43,7 +43,7 @@ public class TestCrossSiteScriptInScriptSection extends AbstractAppParamPlugin {
 	     = Pattern.compile("<SCRIPT>.*?alert\\('\\{" + Constant.getEyeCatcher() + "\\}'\\);.*?</SCRIPT>", Pattern.DOTALL);
 	
     public int getId() {
-        return 40005;
+        return 40001;
     }
 
     public String getName() {

File: src/org/parosproxy/paros/core/scanner/plugin/TestCrossSiteScriptNoBracket.java
Patch:
@@ -49,7 +49,7 @@ public class TestCrossSiteScriptNoBracket extends AbstractAppParamPlugin {
 	         + "javascript:alert\\('" + Constant.getEyeCatcher() + "'\\)\\)\".*>");
 	
     public int getId() {
-        return 40004;
+        return 40002;
     }
 
     public String getName() {

File: src/org/parosproxy/paros/core/scanner/plugin/TestDefaultFileColdFusion.java
Patch:
@@ -41,7 +41,7 @@ public boolean isDepreciated() {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 20001;
+        return 20000;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestDefaultFileDomino.java
Patch:
@@ -41,7 +41,7 @@ public boolean isDepreciated() {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 20006;
+        return 20001;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestDefaultFileIIS.java
Patch:
@@ -41,7 +41,7 @@ public boolean isDepreciated() {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 20000;
+        return 20002;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestDefaultFileJrun.java
Patch:
@@ -41,7 +41,7 @@ public boolean isDepreciated() {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 20002;
+        return 20003;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestDefaultFileTomcat.java
Patch:
@@ -41,7 +41,7 @@ public boolean isDepreciated() {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 20003;
+        return 20004;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestDefaultFileWeblogic.java
Patch:
@@ -41,7 +41,7 @@ public boolean isDepreciated() {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 20004;
+        return 20005;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestDefaultFileWebsphere.java
Patch:
@@ -41,7 +41,7 @@ public boolean isDepreciated() {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 20005;
+        return 20006;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestDirectoryBrowsing.java
Patch:
@@ -54,7 +54,7 @@ public class TestDirectoryBrowsing extends AbstractAppPlugin {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 00001;
+        return 00000;
     }
 
     /* (non-Javadoc)
@@ -82,7 +82,7 @@ public String getDescription() {
     }
     
     public int getCategory() {
-        return Category.SERVER;
+        return Category.INFO_GATHER;
     }
 
     public String getSolution() {

File: src/org/parosproxy/paros/core/scanner/plugin/TestInfoSessionIdURL.java
Patch:
@@ -66,7 +66,7 @@ public class TestInfoSessionIdURL extends AbstractAppPlugin {
      * @see com.proofsecure.paros.core.scanner.Plugin#getId()
      */
     public int getId() {
-        return 00004;
+        return 00003;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestInjectionCRLF.java
Patch:
@@ -52,7 +52,7 @@ public class TestInjectionCRLF extends AbstractAppParamPlugin {
      * @see com.proofsecure.paros.core.scanner.Plugin#getId()
      */
     public int getId() {
-        return 40001;
+        return 40003;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestInjectionMSSQLEnumeration.java
Patch:
@@ -51,7 +51,7 @@ public class TestInjectionMSSQLEnumeration extends AbstractAppParamPlugin {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 40031;
+        return 40006;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestInjectionSQL.java
Patch:
@@ -108,7 +108,7 @@ public class TestInjectionSQL extends AbstractAppParamPlugin {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 40030;
+        return 40005;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestInjectionSQLFingerprint.java
Patch:
@@ -68,7 +68,7 @@ public class TestInjectionSQLFingerprint extends AbstractAppParamPlugin {
      * @see com.proofsecure.paros.core.scanner.Test#getId()
      */
     public int getId() {
-        return 40000;
+        return 40004;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestObsoleteFileExtended.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.commons.httpclient.URI;
 import org.parosproxy.paros.core.scanner.AbstractAppPlugin;
 import org.parosproxy.paros.core.scanner.Alert;
+import org.parosproxy.paros.core.scanner.Category;
 import org.parosproxy.paros.network.HttpMessage;
 
 
@@ -72,8 +73,9 @@ public String getSolution() {
     public String getReference() {
         return "";
     }
+
     public int getCategory() {
-        return 0;
+        return Category.INFO_GATHER;
     }
     
     public void init() {

File: src/org/parosproxy/paros/core/scanner/plugin/TestParameterTamper.java
Patch:
@@ -65,7 +65,7 @@ public class TestParameterTamper extends AbstractAppParamPlugin {
      * @see com.proofsecure.paros.core.scanner.Plugin#getId()
      */
     public int getId() {
-        return 40010;
+        return 40008;
     }
 
     /* (non-Javadoc)

File: src/org/parosproxy/paros/core/scanner/plugin/TestServerSideInclude.java
Patch:
@@ -41,7 +41,7 @@ public class TestServerSideInclude extends AbstractAppParamPlugin {
 	private static Pattern patternSSIWin = Pattern.compile("\\bprogram files\\b.*\\b(WINDOWS|WINNT)\\b", PATTERN_PARAM);
 
     public int getId() {
-        return 40002;
+        return 40009;
     }
 
     public String getName() {

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -70,7 +70,7 @@ protected void parse() {
 	    showMainToolbar = getConfig().getInt(SHOW_MAIN_TOOLBAR_OPTION, 1);
 	    advancedViewEnabled = getConfig().getInt(ADVANCEDUI_OPTION, 0);
 	    wmUiHandlingEnabled = getConfig().getInt(WMUIHANDLING_OPTION, 0);
-	    askOnExitEnabled = getConfig().getInt(ADVANCEDUI_OPTION, 1);
+	    askOnExitEnabled = getConfig().getInt(ASKONEXIT_OPTION, 1);
     }
 
 	/**

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -242,7 +242,7 @@ protected void processHttp(HttpRequestHeader requestHeader, boolean isSecure) th
 			        
 //			        notifyWrittenToForwardProxy();
 			    } catch (HttpException e) {
-			    	System.out.println("HttpException");
+//			    	System.out.println("HttpException");
 			    	throw e;
 			    } catch (IOException e) {
 			    	msg.setResponseBody("ZAP Error: " + e.getLocalizedMessage());
@@ -258,8 +258,7 @@ protected void processHttp(HttpRequestHeader requestHeader, boolean isSecure) th
 			            httpOut.write(msg.getResponseBody().getBytes());
 			            httpOut.flush();
 			        }
-		            
-			    	System.out.println("uargh2: " + e.getLocalizedMessage());
+
 			        //throw e;
 			    }
 			}	// release semaphore

File: src/org/parosproxy/paros/extension/filter/FilterZapRequestId.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
+import java.util.concurrent.atomic.AtomicLong;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -38,6 +39,7 @@
  */
 public class FilterZapRequestId extends FilterAdaptor {
 
+	private static final AtomicLong requestCounter = new AtomicLong(1);
 	private static final Log LOG = LogFactory.getLog(FilterZapRequestId.class);
 	
 	private Model model = null;
@@ -77,7 +79,7 @@ public void onHttpRequestSend(HttpMessage httpMessage) {
 			} catch (UnsupportedEncodingException e) {
 				LOG.error("UTF8 is not supported?! Using fallback session name.", e);
 			}
-			rhead.addHeader(HttpHeader.X_ZAP_REQUESTID, sessname + "-" + Long.toString(model.getSession().getSessionId()));
+			rhead.addHeader(HttpHeader.X_ZAP_REQUESTID, sessname + "-" + Long.toString(requestCounter.getAndIncrement()));
 		}
 	}
 

File: src/org/parosproxy/paros/view/HttpPanel.java
Patch:
@@ -25,6 +25,7 @@
 import java.awt.BorderLayout;
 import java.awt.CardLayout;
 import java.awt.FlowLayout;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.regex.Pattern;
 import javax.swing.JPanel;
@@ -138,6 +139,8 @@ protected JPanel getPanelHeader() {
 	 */
 	abstract public void updateContent();
 	
+	abstract public void addHeaderPanel(JPanel aPanel);
+	
 	/* Set new HttpMessage
 	 * Update UI accordingly.
 	 */

File: src/org/parosproxy/paros/extension/history/ManualRequestEditorDialog.java
Patch:
@@ -504,9 +504,6 @@ public void run() {
         t.start();
     }
     
-
-
-
 	private JComboBox getComboChangeMethod() {
 		if (comboChangeMethod == null) {
 			comboChangeMethod = new JComboBox();

File: src/org/parosproxy/paros/view/HttpPanel.java
Patch:
@@ -76,7 +76,7 @@ abstract public class HttpPanel extends AbstractPanel implements Tab {
 	private JPanel panelView = null;
 	
 	protected HttpMessage httpMessage;
-
+	protected List<HttpPanelView> views = new ArrayList<HttpPanelView>();
 	
 	/*** Constructors ***/
 
@@ -127,7 +127,6 @@ protected JPanel getPanelContent() {
 	protected JPanel getPanelHeader() {
 		if (panelHeader == null) {
 			panelHeader = new JPanel();
-			
 			panelView = new JPanel();
 			panelSpecial = new JPanel();
 			

File: src/org/parosproxy/paros/extension/filter/FilterZapRequestId.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
-import java.util.concurrent.atomic.AtomicLong;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -39,7 +38,6 @@
  */
 public class FilterZapRequestId extends FilterAdaptor {
 
-	private static final AtomicLong requestCounter = new AtomicLong(1);
 	private static final Log LOG = LogFactory.getLog(FilterZapRequestId.class);
 	
 	private Model model = null;
@@ -79,7 +77,7 @@ public void onHttpRequestSend(HttpMessage httpMessage) {
 			} catch (UnsupportedEncodingException e) {
 				LOG.error("UTF8 is not supported?! Using fallback session name.", e);
 			}
-			rhead.addHeader(HttpHeader.X_ZAP_REQUESTID, sessname + "-" + Long.toString(requestCounter.getAndIncrement()));
+			rhead.addHeader(HttpHeader.X_ZAP_REQUESTID, sessname + "-" + Long.toString(model.getSession().getSessionId()));
 		}
 	}
 

File: src/org/parosproxy/paros/view/HttpPanel.java
Patch:
@@ -40,6 +40,8 @@
 import org.zaproxy.zap.view.HttpPanelManager;
 import org.zaproxy.zap.view.HttpPanelView;
 
+// ZAP: 2011/08/04 Changed to support new interface
+
 /**
  *
  * Panel to display HTTP request/response with header and body.

File: src/org/zaproxy/zap/extension/httppanel/model/HttpDataModelResSplit.java
Patch:
@@ -14,11 +14,11 @@ public HttpDataModelResSplit(HttpPanel httpPanel, HttpPanelSplitUi splitUi) {
 	}
 		
 	public void loadData() {
-		splitUi.setMessage(httpPanel.getHttpMessage(), true);
+		splitUi.setMessage(httpPanel.getHttpMessage(), false);
 	}
 
 	public void saveData() {
-		splitUi.getMessage(httpPanel.getHttpMessage(), true);
+		splitUi.getMessage(httpPanel.getHttpMessage(), false);
 	}
 	
 }
\ No newline at end of file

File: src/org/parosproxy/paros/extension/filter/FilterZapRequestId.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.network.HttpHeader;
 import org.parosproxy.paros.network.HttpMessage;
@@ -62,7 +63,7 @@ public int getId() {
 	 */
 	@Override
 	public String getName() {
-		return "Send ZAP session request ID";
+		return Constant.messages.getString("filter.request.header.send.id");
 	}
 
 	/* (non-Javadoc)

File: src/org/parosproxy/paros/extension/filter/FilterAdaptor.java
Patch:
@@ -21,6 +21,7 @@
 package org.parosproxy.paros.extension.filter;
 
 import org.parosproxy.paros.extension.ViewDelegate;
+import org.parosproxy.paros.model.Model;
 import org.parosproxy.paros.network.HttpMessage;
 
 
@@ -34,7 +35,7 @@ abstract public class FilterAdaptor implements Filter {
     private boolean enabled = false;
     private ViewDelegate view = null;
     
-    public void init() {
+    public void init(Model model) {
     }
     
     public void initView(ViewDelegate view) {

File: src/org/parosproxy/paros/network/HttpHeader.java
Patch:
@@ -50,6 +50,7 @@ abstract public class HttpHeader implements java.io.Serializable{
 	public static final String CACHE_CONTROL	= "Cache-control";
 	public static final String PRAGMA			= "Pragma";
 	public static final String REFERER			= "Referer";
+	public static final String X_ZAP_REQUESTID  = "X-ZAP-RequestID";
 	// ZAP: Added cookie headers
 	public static final String COOKIE			= "Cookie";
 	public static final String SET_COOKIE		= "Set-Cookie";

File: src/org/parosproxy/paros/extension/history/LogPanel.java
Patch:
@@ -434,4 +434,3 @@ public void setFilterStatus (HistoryFilter filter) {
     	filterStatus.setToolTipText(filter.toLongString());
     }
 }
-

File: src/org/parosproxy/paros/extension/history/PopupMenuResend.java
Patch:
@@ -109,4 +109,4 @@ void setExtension(ExtensionHistory extension) {
         this.extension = extension;
     }
 	
-}
+}
\ No newline at end of file

File: src/org/parosproxy/paros/extension/option/OptionsParamView.java
Patch:
@@ -145,4 +145,4 @@ public void setAdvancedViewOption(int isEnabled) {
 		getConfig().setProperty(ADVANCED_UI, Integer.toString(isEnabled));
 	}
 	
-}
+}
\ No newline at end of file

File: src/org/parosproxy/paros/extension/option/OptionsViewPanel.java
Patch:
@@ -387,4 +387,4 @@ public void saveParam (Object obj) throws Exception {
 	    options.getViewParam().setAdvancedViewOption(getChkAdvancedView().isSelected() ? 1 : 0);
 	}
 	
-     }  //  @jve:decl-index=0:visual-constraint="10,10"
+     }  //  @jve:decl-index=0:visual-constraint="10,10"
\ No newline at end of file

File: src/org/parosproxy/paros/network/HttpMessage.java
Patch:
@@ -673,4 +673,4 @@ public void setNote(String note) {
         this.note = note;
     }
 
-}
+}
\ No newline at end of file

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -39,6 +39,7 @@
 import org.zaproxy.zap.extension.brk.ExtensionBreak;
 import org.zaproxy.zap.extension.bruteforce.ExtensionBruteForce;
 import org.zaproxy.zap.extension.compare.ExtensionCompare;
+import org.zaproxy.zap.extension.dynssl.ExtensionDynSSL;
 import org.zaproxy.zap.extension.encoder2.ExtensionEncoder2;
 import org.zaproxy.zap.extension.fuzz.ExtensionFuzz;
 import org.zaproxy.zap.extension.help.ExtensionHelp;
@@ -142,6 +143,8 @@ protected void addExtension() {
         getExtensionLoader().addExtension(new ExtensionInvoke());
         getExtensionLoader().addExtension(new ExtensionHexView());
         getExtensionLoader().addExtension(new ExtensionFuzz());
+        // ZAP: adding connection SSL options right after regular ones
+        getExtensionLoader().addExtension(new ExtensionDynSSL());
 
         // Params extension not fully implemented
         //getExtensionLoader().addExtension(new ExtensionParams());

File: src/org/parosproxy/paros/extension/history/PopupMenuEmbeddedBrowser.java
Patch:
@@ -156,7 +156,7 @@ public boolean isEnableForComponent(Component invoker) {
         	JTree tree = (JTree) invoker;
         	lastInvoker = tree;
             SiteNode node = (SiteNode) tree.getLastSelectedPathComponent();
-            this.setEnabled(node.getHistoryReference() != null);
+            this.setEnabled(node != null && node.getHistoryReference() != null);
             return true;
         }
         return false;

File: src/org/parosproxy/paros/core/proxy/ProxyThread.java
Patch:
@@ -117,7 +117,7 @@ private void beginSSL(String targethost) throws IOException {
 
         boolean isSecure = true;
         HttpRequestHeader firstHeader = null;
-
+		// ZAP: added parameter 'targethost'
         inSocket = HttpSender.getSSLConnector().createTunnelServerSocket(targethost, inSocket);
         
         httpIn = new HttpInputStream(inSocket);
@@ -142,6 +142,7 @@ public void run() {
 				httpOut.write(CONNECT_HTTP_200);
                 httpOut.flush();
 				
+				// ZAP: added host name variable
                 String hostName = firstHeader.getHostName();
 				beginSSL(hostName);
                 //processForwardPort();

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -73,6 +73,7 @@ public class HttpRequestHeader extends HttpHeader {
 	 *
 	 */
 	public HttpRequestHeader() {
+		// ZAP: added local log variable
 		log = LogFactory.getLog(this.getClass());
 	    clear();
 	}
@@ -333,6 +334,7 @@ private void parseHostName(String hostHeader) {
 	public String getHostName() {
 		String hostName = mHostName;
 		try {
+			// ZAP: fixed cases, where host name is null
 			hostName = ((mUri.getHost() != null) ? mUri.getHost() : mHostName);
 		} catch (URIException e) {
 			if (log.isWarnEnabled()) {

File: src/org/parosproxy/paros/network/HttpRequestHeader.java
Patch:
@@ -436,5 +436,4 @@ public static URI parseURI(String sUri) throws URIException {
 		return uri;
 	}
 
-
 }
\ No newline at end of file

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -174,7 +174,7 @@ public HttpPanelResponse getResponsePanel() {
     		// ZAP: Added 'left arrow' icon
             responsePanel.setIcon(new ImageIcon(getClass().getResource("/resource/icon/16/106.png")));
             responsePanel.setName(Constant.messages.getString("response.panel.title"));	// ZAP: i18n
-            responsePanel.setMessage("","",false);
+            responsePanel.clearView(false);
         }
         return responsePanel;
     }

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -510,8 +510,8 @@ private PopupMenuResend getPopupMenuResend() {
 	 */    
 	ManualRequestEditorDialog getResendDialog() {
 		if (resendDialog == null) {
-			resendDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, false, this);
-			resendDialog.setSize(700, 800);
+			resendDialog = new ManualRequestEditorDialog(getView().getMainFrame(), false, true, this);
+			//resendDialog.setSize(700, 800);
 			resendDialog.setTitle(Constant.messages.getString("manReq.resend.popup"));	// ZAP: i18n
 		}
 		return resendDialog;

File: src/org/parosproxy/paros/extension/manualrequest/ExtensionManualRequestEditor.java
Patch:
@@ -97,7 +97,7 @@ public void actionPerformed(java.awt.event.ActionEvent e) {
 		    	        try {
 		    	            URI uri = new URI("http://www.any_domain_name.org/path", true);
                             msg.setRequestHeader(new HttpRequestHeader(HttpRequestHeader.GET, uri, HttpHeader.HTTP10));
-                            dialog.getRequestPanel().setMessage(msg, true);
+                            dialog.getRequestPanel().setMessage(msg);
                         } catch (Exception e1) {
                         	// ZAP: Log the exception
                         	logger.error(e1.getMessage(), e1);

File: src/org/zaproxy/zap/extension/brk/ExtensionBreak.java
Patch:
@@ -163,8 +163,8 @@ public void run() {
 	}
 	
 	private void sessionChangedEventHandler(Session session) {
-
-	    getBreakPanel().setMessage("","", false);
+	    getBreakPanel().setMessage(null, true);
+	    getBreakPanel().setMessage(null, false);
 	}
 	
 	

File: src/org/parosproxy/paros/network/HttpSender.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.commons.httpclient.protocol.Protocol;
 import org.apache.commons.httpclient.protocol.ProtocolSocketFactory;
 import org.parosproxy.paros.Constant;
-import org.parosproxy.paros.view.View;
 
 
 /**
@@ -355,7 +354,8 @@ public static void setUserAgent(String userAgent) {
     }
     
     private void setCommonManagerParams(MultiThreadedHttpConnectionManager mgr) {
-        mgr.getParams().setSoTimeout(40000);
+    	// ZAP: set timeout
+        mgr.getParams().setSoTimeout(this.param.getTimeoutInSecs() * 1000);
         mgr.getParams().setStaleCheckingEnabled(true);
         
         mgr.getParams().setDefaultMaxConnectionsPerHost((Constant.MAX_HOST_CONNECTION > 5) ? 10 : 5*Constant.MAX_HOST_CONNECTION);

File: src/org/zaproxy/zap/extension/encoder2/EncodeDecodeDialog.java
Patch:
@@ -222,10 +222,10 @@ public void keyPressed(KeyEvent e) {
 				}
 
 				public void keyReleased(KeyEvent e) {
+					updateEncodeDecodeFields();
 				}
 
 				public void keyTyped(KeyEvent e) {
-					updateEncodeDecodeFields();
 				}
 				
 			});

File: src/org/parosproxy/paros/model/HistoryReference.java
Patch:
@@ -309,9 +309,9 @@ public synchronized void updateAlert(Alert alert) {
    }
    
    public int getHighestAlert() {
-	   int i = Alert.RISK_INFO;
+	   int i = -1;
 	   for (Alert a : alerts) {
-		   if (a.getRisk() > i) {
+		   if (a.getReliability() != Alert.FALSE_POSITIVE && a.getRisk() > i) {
 			   i = a.getRisk();
 		   }
 	   }

File: src/org/parosproxy/paros/model/SiteNode.java
Patch:
@@ -52,9 +52,9 @@ private String getMaxAlertString() {
     	if (alerts.size() == 0) {
     		return "";
     	}
-    	int highest = 0;
+    	int highest = -1;
     	for (Alert alert : alerts) {
-    		if (alert.getRisk() > highest) {
+    		if (alert.getReliability() != Alert.FALSE_POSITIVE && alert.getRisk() > highest) {
     			highest = alert.getRisk();
     		}
     	}

File: src/org/zaproxy/zap/extension/bruteforce/BruteForcePanel.java
Patch:
@@ -20,7 +20,6 @@
 package org.zaproxy.zap.extension.bruteforce;
 
 import java.awt.CardLayout;
-import java.awt.Dimension;
 import java.awt.GridBagConstraints;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;

File: src/org/zaproxy/zap/utils/LocaleUtils.java
Patch:
@@ -17,7 +17,7 @@ public class LocaleUtils {
 
 	public static List<String> getAvailableLocales() {
 		List<String> locales = new ArrayList<String>();
-		File dir = new File(".");
+		File dir = new File("lang");
 		FilenameFilter filter = new FilenameExtensionFilter("properties", true);
 		String[] files = dir.list(filter );
 

File: src/org/zaproxy/zap/extension/bruteforce/BruteForcePanel.java
Patch:
@@ -579,6 +579,7 @@ private void siteSelected(String site) {
 				File f = new File(fileName);
 				if (! f.exists()) {
 					log.error("No such file: " + f.getAbsolutePath());
+					return;
 				} else {
 					bruteForce = new BruteForce(site, fileName, this, this.bruteForceParam, null);
 					bruteForceMap.put(site, bruteForce);
@@ -753,6 +754,7 @@ public void reset() {
 		while (iter.hasNext()) {
 			Entry<String, BruteForce> entry = iter.next();
 			entry.getValue().stopScan();
+			entry.getValue().clearList();
 		}
 		// Wait until all threads have stopped
 		while (activeScans.size() > 0) {

File: src/org/zaproxy/zap/extension/history/ManageTagsDialog.java
Patch:
@@ -151,7 +151,6 @@ private JPanel getJPanel() {
 
 			gridBagConstraints30.weightx = 1.0D;
 			gridBagConstraints30.weighty = 1.0D;
-			gridBagConstraints30.fill = java.awt.GridBagConstraints.HORIZONTAL;
 			gridBagConstraints30.fill = java.awt.GridBagConstraints.BOTH;
 			gridBagConstraints30.insets = new java.awt.Insets(2,2,2,2);
 			gridBagConstraints30.gridy = 3;

File: src/org/zaproxy/zap/extension/history/NotesAddDialog.java
Patch:
@@ -127,7 +127,6 @@ private JPanel getJPanel() {
 
 			gridBagConstraints15.weightx = 1.0D;
 			gridBagConstraints15.weighty = 1.0D;
-			gridBagConstraints15.fill = java.awt.GridBagConstraints.HORIZONTAL;
 			gridBagConstraints15.fill = java.awt.GridBagConstraints.BOTH;
 			gridBagConstraints15.insets = new java.awt.Insets(2,2,2,2);
 			gridBagConstraints15.gridwidth = 3;

File: src/org/parosproxy/paros/extension/report/ReportLastScan.java
Patch:
@@ -102,6 +102,7 @@ private String getAlertXML(Database db, RecordScan recordScan) throws SQLExcepti
                 lastAlert = alert;
 
             }
+            rs.close();
 
             if (lastAlert != null) {
                 sb.append(lastAlert.toPluginXML(sbURLs.toString()));

File: src/org/parosproxy/paros/db/DatabaseServer.java
Patch:
@@ -165,6 +165,7 @@ void shutdown(boolean compact) throws SQLException {
         }
         
         psCompact.execute();
+        psCompact.close();
         mConn.close();
         mConn = null;
     }

File: src/org/parosproxy/paros/db/TableHistory.java
Patch:
@@ -361,6 +361,7 @@ public boolean containsURI(long sessionId, int historyType, String method, Strin
 	    psContainsURI.executeQuery();
 		ResultSet rs = psContainsURI.getResultSet();
 	    if (rs.next()) {
+		    rs.close();		// ZAP: Memory leak fix
 	        return true;
 	    }
 	    rs.close();

File: src/org/zaproxy/zap/extension/bruteforce/OptionsBruteForcePanel.java
Patch:
@@ -112,6 +112,7 @@ private JPanel getPanelPortScan() {
 		}
 		return panelPortScan;
 	}
+	
 	public void initParam(Object obj) {
 	    OptionsParam options = (OptionsParam) obj;
 	    BruteForceParam param = (BruteForceParam) options.getParamSet(BruteForceParam.class);

File: src/org/parosproxy/paros/extension/history/ExtensionHistory.java
Patch:
@@ -289,6 +289,7 @@ private void buildHistory(HistoryList historyList, List dbList) {
 
 	            try {
 	                    historyRef = new HistoryReference(historyId);
+	                    historyRef.loadAlerts();
 	                    historyList.addElement(historyRef);
 	            } catch (Exception e) {
 	            	e.printStackTrace();
@@ -309,6 +310,7 @@ private void buildHistory(HistoryList historyList, List<Integer> dbList,
 
 	            try {
                     historyRef = new HistoryReference(historyId);
+                    historyRef.loadAlerts();
                     if (historyFilter.matches(historyRef)) {
                     	historyList.addElement(historyRef);
                     }
@@ -720,7 +722,6 @@ public void showAlertAddDialog(HistoryReference ref) {
     	dialogAlertAdd = new AlertAddDialog(getView().getMainFrame(), false);
     	dialogAlertAdd.setPlugin(this);
     	dialogAlertAdd.setVisible(true);
-    	// TODO
     	dialogAlertAdd.setHistoryRef(ref);
     }
 

File: src/org/parosproxy/paros/model/Session.java
Patch:
@@ -177,6 +177,8 @@ public void open(String fileName) throws SQLException, SAXException, IOException
 			try {
 				historyRef = new HistoryReference(historyId);
 				getSiteTree().addPath(historyRef);
+				// ZAP: Load alerts from db
+				historyRef.loadAlerts();
 
 				if (i % 100 == 99) Thread.yield();
 			} catch (Exception e) {

File: src/org/parosproxy/paros/model/SiteMap.java
Patch:
@@ -196,7 +196,8 @@ public synchronized void addPath(HistoryReference ref, HttpMessage msg) {
                 if (folder != null && !folder.equals("")) {
                     if (tokenizer.countTokens() == 0) {
                         // leaf - path name
-                        findAndAddLeaf(parent, folder, ref, msg);
+                        SiteNode sn = findAndAddLeaf(parent, folder, ref, msg);
+                        ref.setSiteNode(sn);
                     } else {
                         parent = findAndAddChild(parent, folder, ref, msg);
                     }

File: src/org/parosproxy/paros/extension/option/OptionsAuthenticationPanel.java
Patch:
@@ -65,7 +65,7 @@ private void initialize() {
         this.setLayout(new GridBagLayout());
         this.setSize(409, 268);
         this.setName("Authentication");
-        jLabel.setText("<html><body><p>Enter the HTTP authentication of varioius hosts into the table below.</p><p>Currently basic authentication is supported.  NTLM support works in some hosts but not extensively tested.</p><p>To delete an entry, just leave the host name blank.</p></body></html>");
+        jLabel.setText("<html><body><p>Enter the HTTP authentication of various hosts into the table below.</p><p>Currently basic authentication is supported.  NTLM support works in some hosts but not extensively tested.</p><p>To delete an entry, just leave the host name blank.</p></body></html>");
         jLabel.setPreferredSize(new java.awt.Dimension(494,80));
         jLabel.setMinimumSize(new java.awt.Dimension(494,16));
         gridBagConstraints1.gridx = 0;

File: src/org/parosproxy/paros/view/View.java
Patch:
@@ -31,6 +31,7 @@
 
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.extension.ViewDelegate;
+import org.zaproxy.zap.extension.help.ExtensionHelp;
 
 
 
@@ -80,6 +81,8 @@ public void init() {
 		siteMapPanel = new SiteMapPanel();
 		outputPanel = new OutputPanel();
 
+        ExtensionHelp.enableHelpKey(outputPanel, "ui.tabs.output");
+
 		// do not allow editable in request panel
 		getWorkbench().getTabbedWork().add(getRequestPanel());
 		getWorkbench().getTabbedWork().add(getResponsePanel());

File: src/org/zaproxy/zap/extension/ascan/ActiveScanPanel.java
Patch:
@@ -90,10 +90,13 @@ private synchronized JList getMessageList() {
 			messageList.setName(PANEL_NAME);
 			messageList.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
 			
+			messageList.setFixedCellHeight(16);	// Significantly speeds up rendering
+			
 			messageList.addListSelectionListener(new ListSelectionListener() {
 
 				@Override
 				public void valueChanged(ListSelectionEvent e) {
+
 					HttpMessage msg = (HttpMessage) messageList.getSelectedValue();
 					displayMessage(msg);
 				}});

File: src/org/zaproxy/zap/extension/bruteforce/BruteForcePanel.java
Patch:
@@ -458,6 +458,8 @@ private JList getBruteForceList() {
 			bruteForceList.setName(PANEL_NAME);
 			bruteForceList.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
 			
+			bruteForceList.setFixedCellHeight(16);	// Significantly speeds up rendering
+
 			bruteForceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() { 
 
 				public void valueChanged(javax.swing.event.ListSelectionEvent e) {

File: src/org/zaproxy/zap/extension/portscan/PortScanPanel.java
Patch:
@@ -87,6 +87,8 @@ private synchronized JList getPortList() {
 			portList.setName(PANEL_NAME);
 			portList.setFont(new java.awt.Font("Default", java.awt.Font.PLAIN, 12));
 			
+			portList.setFixedCellHeight(16);	// Significantly speeds up rendering
+
 			resetPortList();
 		}
 		return portList;

File: src/org/parosproxy/paros/extension/report/ReportLastScan.java
Patch:
@@ -141,8 +141,8 @@ public File generate(String fileName, Model model) throws Exception {
 	    sb.append(getAlertXML(model.getDb(), null));
 	    sb.append("</report>");	
 	    
-	    if (!fileName.endsWith(".htm")) {
-	        fileName = fileName + ".htm";		        
+	    if (!fileName.toLowerCase().endsWith(".htm") && !fileName.toLowerCase().endsWith(".html")) {
+	        fileName = fileName + ".html";		        
 	    }
 	    
 	    File report = ReportGenerator.stringToHtml(sb.toString(), "xml" + File.separator + "reportLatestScan.xsl", fileName);

File: src/org/zaproxy/zap/extension/bruteforce/BruteForceListenner.java
Patch:
@@ -27,7 +27,7 @@ public interface BruteForceListenner {
 
 	public void scanFinshed(String host);
 	
-	public void scanProgress(String host, int done, int todo);
+	public void scanProgress(String host, int port, int done, int todo);
 	
     public void foundDir(URL url, int statusCode, String responce, String baseCase, String rawResponce, BaseCase baseCaseObj);
 }

File: src/org/parosproxy/paros/control/Control.java
Patch:
@@ -40,11 +40,9 @@
 import org.zaproxy.zap.extension.compare.ExtensionCompare;
 import org.zaproxy.zap.extension.encoder2.ExtensionEncoder2;
 import org.zaproxy.zap.extension.help.ExtensionHelp;
-import org.zaproxy.zap.extension.params.ExtensionParams;
 import org.zaproxy.zap.extension.portscan.ExtensionPortScan;
 import org.zaproxy.zap.extension.pscan.ExtensionPassiveScan;
 import org.zaproxy.zap.extension.search.ExtensionSearch;
-import org.zaproxy.zap.extension.test.ExtensionTest;
 
 
 /**

