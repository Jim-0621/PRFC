File: Java/Ch 16. Moderate/Q16_03_Intersection/Tester.java
Patch:
@@ -4,8 +4,6 @@
 
 public class Tester {
 
-
-
 	public static boolean equalish(double a, double b) {
 		return Math.abs(a - b) < .001;
 	}

File: Java/Ch 16. Moderate/Q16_18_Pattern_Matcher/QuestionA.java
Patch:
@@ -7,7 +7,7 @@ public static boolean doesMatch(String pattern, String value) {
 		if (pattern.length() == 0) return value.length() == 0;
 		int size = value.length();
 		
-		for (int mainSize = 0; mainSize < size; mainSize++) {
+		for (int mainSize = 0; mainSize <= size; mainSize++) {
 			String main = value.substring(0, mainSize);
 			for (int altStart = mainSize; altStart <= size; altStart++) {
 				for (int altEnd = altStart; altEnd <= size; altEnd++) {

File: Java/Ch 10. Sorting and Searching/Q10_03_Search_in_Rotated_Array/Question.java
Patch:
@@ -26,7 +26,7 @@ public static int search(int a[], int left, int right, int x) {
 			} else {
 				return search(a, mid + 1, right, x);
 			}
-		} else if (a[mid] < a[left]) { // Right is normally ordered.
+		} else if (a[mid] < a[right]) { // Right is normally ordered.
 			if (x > a[mid] && x <= a[right]) {
 				return search(a, mid + 1, right, x);
 			} else {

File: Java/Ch 10. Sorting and Searching/Introduction/BinarySearch.java
Patch:
@@ -8,7 +8,7 @@ public static int binarySearch(int[] a, int x) {
 		int mid;
 		
 		while (low <= high) {
-			mid = (low + high) / 2;
+			mid = low + (high - low) / 2;
 			if (a[mid] < x) {
 				low = mid + 1;
 			} else if (a[mid] > x) {

File: Java/Ch 10. Sorting and Searching/Introduction/MergeSort.java
Patch:
@@ -10,7 +10,7 @@ public static void mergesort(int[] array) {
 
 	public static void mergesort(int[] array, int[] helper, int low, int high) {
 		if (low < high) {
-			int middle = (low + high) / 2;
+			int middle = low + (high - low) / 2;
 			mergesort(array, helper, low, middle); // Sort left half
 			mergesort(array, helper, middle+1, high); // Sort right half
 			merge(array, helper, low, middle, high); // Merge them

File: Java/Ch 10. Sorting and Searching/Introduction/Quicksort.java
Patch:
@@ -10,7 +10,7 @@ public static void swap(int[] array, int i, int j) {
 	}
 	
 	public static int partition(int[] arr, int left, int right) {
-		int pivot = arr[(left + right) / 2]; // Pick a pivot point. Can be an element		
+		int pivot = arr[left + (right - left) / 2]; // Pick a pivot point. Can be an element		
 		
 		while (left <= right) { // Until we've gone through the whole array
 			// Find element on left that should be on right

File: Java/Ch 05. Bit Manipulation/Q5_03_Flip_Bit_to_Win/QuestionB.java
Patch:
@@ -44,7 +44,7 @@ public static int findLongestSequence(ArrayList<Integer> seq) {
 			int thisSeq = 0;
 			if (zerosSeq == 1) { // Can merge
 				thisSeq = onesSeqLeft + 1 + onesSeqRight; 
-			} else if (zerosSeq > 1) { // Just add a zero to either side
+			} else if (zerosSeq > 1) { // Just add a one to either side
 				thisSeq = 1 + Math.max(onesSeqRight, onesSeqLeft);
 			} else if (zerosSeq == 0) { // No zero, but take either side
 				thisSeq = Math.max(onesSeqRight, onesSeqLeft);

File: Java/Ch 04. Trees and Graphs/Q4_10_Check_Subtree/QuestionB.java
Patch:
@@ -31,7 +31,7 @@ public static boolean matchTree(TreeNode r1, TreeNode r2) {
 		if (r1 == null && r2 == null) {
 			return true; // nothing left in the subtree
 		} else if (r1 == null || r2 == null) { 
-			return false; // exactly tree is empty, therefore trees don't match
+			return false; // exactly one tree is empty, therefore trees don't match
 		} else if (r1.data != r2.data) {  
 			return false;  // data doesn't match
 		} else {

File: Java/Ch 17. Hard/Q17_17_Multi_Search/TrieNode.java
Patch:
@@ -6,7 +6,6 @@
 public class TrieNode {
 	private HashMap<Character, TrieNode> children;
 	private ArrayList<Integer> indexes;
-	private char value;
 	
 	public TrieNode() { 
 		children = new HashMap<Character, TrieNode>();
@@ -17,7 +16,7 @@ public TrieNode() {
 	public void insertString(String s, int index) {
 		indexes.add(index);
 		if (s != null && s.length() > 0) {
-			value = s.charAt(0);
+			char value = s.charAt(0);
 			TrieNode child = null;
 			if (children.containsKey(value)) {
 				child = children.get(value);

File: Java/Ch 04. Trees and Graphs/Q4_07_Build_Order/DFS/Project.java
Patch:
@@ -21,6 +21,7 @@ public String getName() {
 	public void addNeighbor(Project node) {
 		if (!map.containsKey(node.getName())) {
 			children.add(node);
+			map.put(node.getName(), node);
 		}
 	}
 	

File: Java/Ch 04. Trees and Graphs/Q4_07_Build_Order/EdgeRemoval/Project.java
Patch:
@@ -20,6 +20,7 @@ public String getName() {
 	public void addNeighbor(Project node) {
 		if (!map.containsKey(node.getName())) {
 			children.add(node);
+			map.put(node.getName(), node);
 			node.incrementDependencies();
 		}
 	}

File: Java/Ch 04. Trees and Graphs/Q4_07_Build_Order/EdgeRemoval/Question.java
Patch:
@@ -93,6 +93,7 @@ public static void main(String[] args) {
 				{"a", "b"},
 				{"b", "c"},
 				{"a", "c"},
+				{"a", "c"},
 				{"d", "e"},
 				{"b", "d"},
 				{"e", "f"},
@@ -109,9 +110,6 @@ public static void main(String[] args) {
 				System.out.println(s);
 			}
 		}
-		
-		int k = 16/2^2;
-		System.out.println(k);
 	}
 
 }

File: Java/Ch 16. Moderate/Q16_03_Intersection/Question.java
Patch:
@@ -42,7 +42,7 @@ public static Point intersection(Point start1, Point end1, Point start2, Point e
 		
 		/* If the lines are parallel, they intercept only if they have the same y intercept and start 2 is on line 1. */
 		if (line1.slope == line2.slope) {
-			if (line1.yintercept == line2.yintercept && isBetween(start1, start2, end2)) {
+			if (line1.yintercept == line2.yintercept && isBetween(start1, start2, end1)) {
 				return start2;
 			}
 			return null;
@@ -62,8 +62,8 @@ public static Point intersection(Point start1, Point end1, Point start2, Point e
 	
 	public static void main(String[] args) {
 		int[][] coordinates = {
-				{8, 8}, {6, 6},
-				{1, 1}, {10, 10}};
+				{8, 8}, {8, 16},
+				{1, 1}, {1, 10}};
 		Point[] points = {createPoint(coordinates[0]), createPoint(coordinates[1]), createPoint(coordinates[2]), createPoint(coordinates[3])};
 		Point intersection = intersection(points[0], points[1], points[2], points[3]);
 		if (intersection == null) {

File: Java/Ch 07. Object-Oriented Design/Q7_06_Jigsaw/Edge.java
Patch:
@@ -1,4 +1,4 @@
-package Q7_07_Jigsaw;
+package Q7_06_Jigsaw;
 
 public class Edge {	
 	private Shape shape;

File: Java/Ch 07. Object-Oriented Design/Q7_06_Jigsaw/Orientation.java
Patch:
@@ -1,4 +1,4 @@
-package Q7_07_Jigsaw;
+package Q7_06_Jigsaw;
 
 public enum Orientation {
 	LEFT, TOP, RIGHT, BOTTOM; // Should stay in this order 

File: Java/Ch 07. Object-Oriented Design/Q7_06_Jigsaw/Piece.java
Patch:
@@ -1,4 +1,4 @@
-package Q7_07_Jigsaw;
+package Q7_06_Jigsaw;
 
 import java.util.HashMap;
 import java.util.Map.Entry;

File: Java/Ch 07. Object-Oriented Design/Q7_06_Jigsaw/Puzzle.java
Patch:
@@ -1,4 +1,4 @@
-package Q7_07_Jigsaw;
+package Q7_06_Jigsaw;
 
 import java.util.LinkedList;
 

File: Java/Ch 07. Object-Oriented Design/Q7_06_Jigsaw/Question.java
Patch:
@@ -1,4 +1,4 @@
-package Q7_07_Jigsaw;
+package Q7_06_Jigsaw;
 
 import java.util.LinkedList;
 import java.util.Random;

File: Java/Ch 07. Object-Oriented Design/Q7_06_Jigsaw/Shape.java
Patch:
@@ -1,4 +1,4 @@
-package Q7_07_Jigsaw;
+package Q7_06_Jigsaw;
 
 public enum Shape {
 	INNER, OUTER, FLAT;

File: Java/Introduction/Big_O/Q_05.java
Patch:
@@ -15,7 +15,7 @@ public static int sqrt_helper(int n, int min, int max) {
 	    } else if (guess * guess < n) { // too low
 	        return sqrt_helper(n, guess + 1, max); // try higher
 	    } else { // too high
-	        return sqrt_helper(n, 1, guess - 1); // try lower
+	        return sqrt_helper(n, min, guess - 1); // try lower
 	    }
 	}
 	        

File: Java/Introduction/Big_O/Q_05.java
Patch:
@@ -15,7 +15,7 @@ public static int sqrt_helper(int n, int min, int max) {
 	    } else if (guess * guess < n) { // too low
 	        return sqrt_helper(n, guess + 1, max); // try higher
 	    } else { // too high
-	        return sqrt_helper(n, 1, guess - 1); // try lower
+	        return sqrt_helper(n, min, guess - 1); // try lower
 	    }
 	}
 	        

File: Java/Ch 03. Stacks and Queues/Q3_01_Three_in_One/MultiStack.java
Patch:
@@ -5,7 +5,7 @@
 import CtCILibrary.AssortedMethods;
 
 public class MultiStack {
-	/* StackData is a simple class that holds a set of data about 
+	/* StackInfo is a simple class that holds a set of data about 
 	 * each stack. It does not hold the actual items in the stack. 
 	 * We could have done this with just a bunch of individual 
 	 * variables, but that’s messy and doesn’t gain us much. */
@@ -26,8 +26,7 @@ public boolean isWithinStackCapacity(int index) {
 			}
 			
 			/* If index wraps around, adjust it. */
-			int contiguousIndex = index < start ? 
-								  index + values.length : index;
+			int contiguousIndex = index < start ? index + values.length : index;
 			int end = start + capacity;
 			return start <= contiguousIndex && contiguousIndex < end;
 		}

File: Java/CtCILibrary/CtCILibrary/AssortedMethods.java
Patch:
@@ -215,8 +215,9 @@ public static TreeNode createTreeFromArray(int[] array) {
 				} else {
 					queue.remove();
 				}
-				if (i == array.length)
+				if (i == array.length) {
 					done = true;
+				}
 			}
 			return root;
 		} else {

File: Java/Introduction/CompareBinaryToHex/CompareBinaryToHex.java
Patch:
@@ -2,7 +2,7 @@
 
 public class CompareBinaryToHex {
 
-	public static int valueOfHexDigit(char c) {
+	public static int digitToValue(char c) {
 		if (c >= '0' && c <= '9') {
 			return c - '0';
 		} else if (c >= 'A' && c <= 'F') {
@@ -17,7 +17,7 @@ public static int convertFromBase(String number, int base) {
 		if (base < 2 || (base > 10 && base != 16)) return -1;
 		int value = 0;
 		for (int i = number.length() - 1; i >= 0; i--) {
-			int digit = valueOfHexDigit(number.charAt(i));
+			int digit = digitToValue(number.charAt(i));
 			if (digit < 0 || digit >= base) {
 				return -1;
 			}

File: Java/Ch 02. Linked Lists/Q2_02_Return_Kth_To_Last/QuestionD.java
Patch:
@@ -8,7 +8,7 @@ public static LinkedListNode nthToLast(LinkedListNode head, int k) {
 		LinkedListNode p1 = head;
 		LinkedListNode p2 = head;
 		
-		/* Move p2 k nodes into the list.*/
+		/* Move p1 k nodes into the list.*/
 		for (int i = 0; i < k; i++) {
 			if (p1 == null) return null; // Out of bounds
 			p1 = p1.next;

File: Java/Ch 02. Linked Lists/Q2_02_Return_Kth_To_Last/QuestionD.java
Patch:
@@ -8,7 +8,7 @@ public static LinkedListNode nthToLast(LinkedListNode head, int k) {
 		LinkedListNode p1 = head;
 		LinkedListNode p2 = head;
 		
-		/* Move p2 k nodes into the list.*/
+		/* Move p1 k nodes into the list.*/
 		for (int i = 0; i < k; i++) {
 			if (p1 == null) return null; // Out of bounds
 			p1 = p1.next;

