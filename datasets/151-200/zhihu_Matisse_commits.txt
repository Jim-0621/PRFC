File: matisse/src/main/java/com/zhihu/matisse/internal/entity/Album.java
Patch:
@@ -21,7 +21,6 @@
 import android.net.Uri;
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.provider.MediaStore;
 
 import androidx.annotation.Nullable;
 

File: matisse/src/main/java/com/zhihu/matisse/internal/entity/Album.java
Patch:
@@ -22,6 +22,7 @@
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.provider.MediaStore;
+
 import androidx.annotation.Nullable;
 
 import com.zhihu.matisse.R;
@@ -67,9 +68,10 @@ private Album(Parcel source) {
      * This method is not responsible for managing cursor resource, such as close, iterate, and so on.
      */
     public static Album valueOf(Cursor cursor) {
+        String clumn = cursor.getString(cursor.getColumnIndex(AlbumLoader.COLUMN_URI));
         return new Album(
                 cursor.getString(cursor.getColumnIndex("bucket_id")),
-                Uri.parse(cursor.getString(cursor.getColumnIndex(AlbumLoader.COLUMN_URI))),
+                Uri.parse(clumn != null ? clumn : ""),
                 cursor.getString(cursor.getColumnIndex("bucket_display_name")),
                 cursor.getLong(cursor.getColumnIndex(AlbumLoader.COLUMN_COUNT)));
     }

File: matisse/src/main/java/com/zhihu/matisse/internal/entity/SelectionSpec.java
Patch:
@@ -56,6 +56,7 @@ public final class SelectionSpec {
     public boolean autoHideToobar;
     public int originalMaxSize;
     public OnCheckedListener onCheckedListener;
+    public boolean showPreview;
 
     private SelectionSpec() {
     }
@@ -91,6 +92,7 @@ private void reset() {
         originalable = false;
         autoHideToobar = false;
         originalMaxSize = Integer.MAX_VALUE;
+        showPreview = true;
     }
 
     public boolean singleSelectionModeEnabled() {

File: matisse/src/main/java/com/zhihu/matisse/internal/loader/AlbumMediaLoader.java
Patch:
@@ -151,7 +151,8 @@ public static CursorLoader newInstance(Context context, Album album, boolean cap
         } else {
             if (SelectionSpec.getInstance().onlyShowGif()) {
                 selection = SELECTION_ALBUM_FOR_GIF;
-                selectionArgs = getSelectionAlbumArgsForGifType(MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE, album.getId());
+                selectionArgs = getSelectionAlbumArgsForGifType(MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE,
+                        album.getId());
             } else if (SelectionSpec.getInstance().onlyShowImages()) {
                 selection = SELECTION_ALBUM_FOR_SINGLE_MEDIA_TYPE;
                 selectionArgs = getSelectionAlbumArgsForSingleMediaType(MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE,

File: matisse/src/main/java/com/zhihu/matisse/MimeType.java
Patch:
@@ -19,7 +19,9 @@
 import android.content.ContentResolver;
 import android.net.Uri;
 import android.text.TextUtils;
+
 import androidx.collection.ArraySet;
+
 import android.webkit.MimeTypeMap;
 
 import com.zhihu.matisse.internal.utils.PhotoMetadataUtils;
@@ -114,7 +116,7 @@ public static Set<MimeType> ofImage(boolean onlyGif) {
         return EnumSet.of(GIF);
     }
 
-    public static Set<MimeType> ofGif(){
+    public static Set<MimeType> ofGif() {
         return ofImage(true);
     }
 

File: matisse/src/main/java/com/zhihu/matisse/internal/ui/BasePreviewActivity.java
Patch:
@@ -271,14 +271,14 @@ public void onPageScrollStateChanged(int state) {
     private void updateApplyButton() {
         int selectedCount = mSelectedCollection.count();
         if (selectedCount == 0) {
-            mButtonApply.setText(R.string.button_sure_default);
+            mButtonApply.setText(R.string.button_apply_default);
             mButtonApply.setEnabled(false);
         } else if (selectedCount == 1 && mSpec.singleSelectionModeEnabled()) {
-            mButtonApply.setText(R.string.button_sure_default);
+            mButtonApply.setText(R.string.button_apply_default);
             mButtonApply.setEnabled(true);
         } else {
             mButtonApply.setEnabled(true);
-            mButtonApply.setText(getString(R.string.button_sure, selectedCount));
+            mButtonApply.setText(getString(R.string.button_apply, selectedCount));
         }
 
         if (mSpec.originalable) {

File: matisse/src/main/java/com/zhihu/matisse/ui/MatisseActivity.java
Patch:
@@ -253,15 +253,15 @@ private void updateBottomToolbar() {
         if (selectedCount == 0) {
             mButtonPreview.setEnabled(false);
             mButtonApply.setEnabled(false);
-            mButtonApply.setText(getString(R.string.button_sure_default));
+            mButtonApply.setText(getString(R.string.button_apply_default));
         } else if (selectedCount == 1 && mSpec.singleSelectionModeEnabled()) {
             mButtonPreview.setEnabled(true);
-            mButtonApply.setText(R.string.button_sure_default);
+            mButtonApply.setText(R.string.button_apply_default);
             mButtonApply.setEnabled(true);
         } else {
             mButtonPreview.setEnabled(true);
             mButtonApply.setEnabled(true);
-            mButtonApply.setText(getString(R.string.button_sure, selectedCount));
+            mButtonApply.setText(getString(R.string.button_apply, selectedCount));
         }
 
 

File: matisse/src/main/java/com/zhihu/matisse/ui/MatisseActivity.java
Patch:
@@ -31,6 +31,8 @@
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.Toolbar;
+
+import android.util.Log;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.AdapterView;

File: matisse/src/main/java/com/zhihu/matisse/internal/entity/SelectionSpec.java
Patch:
@@ -17,6 +17,7 @@
 package com.zhihu.matisse.internal.entity;
 
 import android.content.pm.ActivityInfo;
+
 import androidx.annotation.StyleRes;
 
 import com.zhihu.matisse.MimeType;
@@ -109,7 +110,7 @@ public boolean onlyShowVideos() {
     }
 
     public boolean onlyShowGif() {
-        return showSingleMediaType && MimeType.ofImage().contains(MimeType.GIF);
+        return showSingleMediaType && MimeType.ofGif().equals(mimeTypeSet);
     }
 
     private static final class InstanceHolder {

File: sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
Patch:
@@ -79,7 +79,7 @@ public void onNext(Boolean aBoolean) {
                             switch (v.getId()) {
                                 case R.id.zhihu:
                                     Matisse.from(SampleActivity.this)
-                                            .choose(MimeType.ofAll(), false)
+                                            .choose(MimeType.of(MimeType.GIF), true)
                                             .countable(true)
                                             .capture(true)
                                             .captureStrategy(
@@ -101,6 +101,7 @@ public void onSelected(
 
                                                 }
                                             })
+                                            .showSingleMediaType(true)
                                             .originalEnable(true)
                                             .maxOriginalSize(10)
                                             .autoHideToolbarOnSingleTap(true)

File: matisse/src/main/java/com/zhihu/matisse/internal/ui/widget/RoundedRectangleImageView.java
Patch:
@@ -53,7 +53,7 @@ private void init(Context context) {
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-        mRectF.set(0.0f, 0.0f, getWidth(), getHeight());
+        mRectF.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
         mRoundedRectPath.addRoundRect(mRectF, mRadius, mRadius, Path.Direction.CW);
     }
 

File: sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
Patch:
@@ -83,7 +83,7 @@ public void onNext(Boolean aBoolean) {
                                             .countable(true)
                                             .capture(true)
                                             .captureStrategy(
-                                                    new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider"))
+                                                    new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider","test"))
                                             .maxSelectable(9)
                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))
                                             .gridExpectedSize(

File: matisse/src/main/java/com/zhihu/matisse/internal/utils/MediaStoreCompat.java
Patch:
@@ -105,6 +105,7 @@ public void dispatchCaptureIntent(Context context, int requestCode) {
         }
     }
 
+    @SuppressWarnings("ResultOfMethodCallIgnored")
     private File createImageFile() throws IOException {
         // Create an image file name
         String timeStamp =
@@ -114,6 +115,7 @@ private File createImageFile() throws IOException {
         if (mCaptureStrategy.isPublic) {
             storageDir = Environment.getExternalStoragePublicDirectory(
                     Environment.DIRECTORY_PICTURES);
+            if (!storageDir.exists()) storageDir.mkdirs();
         } else {
             storageDir = mContext.get().getExternalFilesDir(Environment.DIRECTORY_PICTURES);
         }

File: matisse/src/main/java/com/zhihu/matisse/internal/utils/MediaStoreCompat.java
Patch:
@@ -105,6 +105,7 @@ public void dispatchCaptureIntent(Context context, int requestCode) {
         }
     }
 
+    @SuppressWarnings("ResultOfMethodCallIgnored")
     private File createImageFile() throws IOException {
         // Create an image file name
         String timeStamp =
@@ -114,6 +115,7 @@ private File createImageFile() throws IOException {
         if (mCaptureStrategy.isPublic) {
             storageDir = Environment.getExternalStoragePublicDirectory(
                     Environment.DIRECTORY_PICTURES);
+            if (!storageDir.exists()) storageDir.mkdirs();
         } else {
             storageDir = mContext.get().getExternalFilesDir(Environment.DIRECTORY_PICTURES);
         }

File: matisse/src/main/java/com/zhihu/matisse/internal/utils/PhotoMetadataUtils.java
Patch:
@@ -172,7 +172,7 @@ public static float getSizeInMB(long sizeInBytes) {
         df.applyPattern("0.0");
         String result = df.format((float) sizeInBytes / 1024 / 1024);
         Log.e(TAG, "getSizeInMB: " + result);
-        result = result.replaceAll(",","."); // in some case , 0.0 will be 0,0
+        result = result.replaceAll(",", "."); // in some case , 0.0 will be 0,0
         return Float.valueOf(result);
     }
 }

File: matisse/src/main/java/com/zhihu/matisse/internal/ui/AlbumPreviewActivity.java
Patch:
@@ -71,7 +71,7 @@ public void onAlbumMediaLoad(Cursor cursor) {
         while (cursor.moveToNext()) {
             items.add(Item.valueOf(cursor));
         }
-        cursor.close();
+//        cursor.close();
 
         if (items.isEmpty()) {
             return;

File: matisse/src/main/java/com/zhihu/matisse/internal/utils/PhotoMetadataUtils.java
Patch:
@@ -172,7 +172,7 @@ public static float getSizeInMB(long sizeInBytes) {
         df.applyPattern("0.0");
         String result = df.format((float) sizeInBytes / 1024 / 1024);
         Log.e(TAG, "getSizeInMB: " + result);
-        result = result.replaceAll(",","."); // in some case , 0.0 will be 0,0
+        result = result.replaceAll(",", "."); // in some case , 0.0 will be 0,0
         return Float.valueOf(result);
     }
 }

File: matisse/src/main/java/com/zhihu/matisse/internal/ui/SelectedPreviewActivity.java
Patch:
@@ -30,8 +30,6 @@ public class SelectedPreviewActivity extends BasePreviewActivity {
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         if (!SelectionSpec.getInstance().hasInited) {
-            // When hasInited == false, indicate that Activity is restarting
-            // after app process was killed.
             setResult(RESULT_CANCELED);
             finish();
             return;

File: matisse/src/main/java/com/zhihu/matisse/internal/entity/SelectionSpec.java
Patch:
@@ -49,6 +49,7 @@ public final class SelectionSpec {
     public int gridExpectedSize;
     public float thumbnailScale;
     public ImageEngine imageEngine;
+    public boolean hasInited;
     public OnSelectedListener onSelectedListener;
     public boolean originalable;
     public int originalMaxSize;
@@ -84,6 +85,7 @@ private void reset() {
         gridExpectedSize = 0;
         thumbnailScale = 0.5f;
         imageEngine = new GlideEngine();
+        hasInited = true;
         originalable = false;
         originalMaxSize = Integer.MAX_VALUE;
     }

File: matisse/src/main/java/com/zhihu/matisse/internal/model/AlbumCollection.java
Patch:
@@ -83,7 +83,9 @@ public void onSaveInstanceState(Bundle outState) {
     }
 
     public void onDestroy() {
-        mLoaderManager.destroyLoader(LOADER_ID);
+        if (mLoaderManager != null) {
+            mLoaderManager.destroyLoader(LOADER_ID);
+        }
         mCallbacks = null;
     }
 

File: matisse/src/main/java/com/zhihu/matisse/internal/model/AlbumMediaCollection.java
Patch:
@@ -81,7 +81,9 @@ public void onCreate(@NonNull FragmentActivity context, @NonNull AlbumMediaCallb
     }
 
     public void onDestroy() {
-        mLoaderManager.destroyLoader(LOADER_ID);
+        if (mLoaderManager != null) {
+            mLoaderManager.destroyLoader(LOADER_ID);
+        }
         mCallbacks = null;
     }
 

File: matisse/src/main/java/com/zhihu/matisse/engine/impl/GlideEngine.java
Patch:
@@ -59,6 +59,7 @@ public void loadImage(Context context, int resizeX, int resizeY, ImageView image
                 .load(uri)
                 .override(resizeX, resizeY)
                 .priority(Priority.HIGH)
+                .fitCenter()
                 .into(imageView);
     }
 

File: matisse/src/main/java/com/zhihu/matisse/internal/ui/adapter/AlbumMediaAdapter.java
Patch:
@@ -208,6 +208,7 @@ private boolean assertAddSelection(Context context, Item item) {
         return cause == null;
     }
 
+
     public void registerCheckStateListener(CheckStateListener listener) {
         mCheckStateListener = listener;
     }

File: matisse/src/main/java/com/zhihu/matisse/Matisse.java
Patch:
@@ -98,12 +98,13 @@ public static List<String> obtainPathResult(Intent data) {
 
     /**
      * Obtain state whether user decide to use selected media in original
+     *
      * @param data Intent passed by {@link Activity#onActivityResult(int, int, Intent)} or
      *             {@link Fragment#onActivityResult(int, int, Intent)}.
      * @return Whether use original photo
      */
-    public static boolean obtainOriginalState(Intent data){
-        return data.getBooleanExtra(MatisseActivity.EXTRA_RESULT_ORIGINAL_ENABLE,false);
+    public static boolean obtainOriginalState(Intent data) {
+        return data.getBooleanExtra(MatisseActivity.EXTRA_RESULT_ORIGINAL_ENABLE, false);
     }
 
     /**

File: matisse/src/main/java/com/zhihu/matisse/internal/entity/SelectionSpec.java
Patch:
@@ -84,8 +84,8 @@ private void reset() {
         gridExpectedSize = 0;
         thumbnailScale = 0.5f;
         imageEngine = new GlideEngine();
-        originalable=false;
-        originalMaxSize =Integer.MAX_VALUE;
+        originalable = false;
+        originalMaxSize = Integer.MAX_VALUE;
     }
 
     public boolean singleSelectionModeEnabled() {

File: matisse/src/main/java/com/zhihu/matisse/internal/model/AlbumMediaCollection.java
Patch:
@@ -81,7 +81,9 @@ public void onCreate(@NonNull FragmentActivity context, @NonNull AlbumMediaCallb
     }
 
     public void onDestroy() {
-        mLoaderManager.destroyLoader(LOADER_ID);
+        if (mLoaderManager != null) {
+            mLoaderManager.destroyLoader(LOADER_ID);
+        }
         mCallbacks = null;
     }
 

File: matisse/src/main/java/com/zhihu/matisse/internal/entity/SelectionSpec.java
Patch:
@@ -47,6 +47,7 @@ public final class SelectionSpec {
     public int gridExpectedSize;
     public float thumbnailScale;
     public ImageEngine imageEngine;
+    public boolean hasInited;
 
     private SelectionSpec() {
     }
@@ -78,6 +79,7 @@ private void reset() {
         gridExpectedSize = 0;
         thumbnailScale = 0.5f;
         imageEngine = new GlideEngine();
+        hasInited = true;
     }
 
     public boolean singleSelectionModeEnabled() {

File: matisse/src/main/java/com/zhihu/matisse/internal/model/AlbumCollection.java
Patch:
@@ -83,7 +83,9 @@ public void onSaveInstanceState(Bundle outState) {
     }
 
     public void onDestroy() {
-        mLoaderManager.destroyLoader(LOADER_ID);
+        if (mLoaderManager != null) {
+            mLoaderManager.destroyLoader(LOADER_ID);
+        }
         mCallbacks = null;
     }
 

File: matisse/src/main/java/com/zhihu/matisse/internal/model/AlbumCollection.java
Patch:
@@ -41,7 +41,7 @@ public Loader<Cursor> onCreateLoader(int id, Bundle args) {
         if (context == null) {
             return null;
         }
-        return new AlbumLoader(context);
+        return AlbumLoader.newInstance(context);
     }
 
     @Override

File: sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java
Patch:
@@ -79,8 +79,8 @@ public void onNext(Boolean aBoolean) {
                                             .choose(MimeType.ofAll(), false)
                                             .countable(true)
                                             .capture(true)
-                                            .captureStrategy(new CaptureStrategy(true, "com.zhihu.matisse.sample" +
-                                                    ".fileprovider"))
+                                            .captureStrategy(
+                                                    new CaptureStrategy(true, "com.zhihu.matisse.sample.fileprovider"))
                                             .maxSelectable(9)
                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))
                                             .gridExpectedSize(

File: matisse/src/main/java/com/zhihu/matisse/internal/ui/widget/AlbumsSpinner.java
Patch:
@@ -107,6 +107,7 @@ public void onClick(View v) {
                 mListPopupWindow.show();
             }
         });
+        mSelected.setOnTouchListener(mListPopupWindow.createDragToOpenListener(mSelected));
     }
 
     public void setPopupAnchorView(View view) {

File: matisse/src/main/java/com/zhihu/matisse/internal/entity/SelectionSpec.java
Patch:
@@ -62,7 +62,7 @@ private void reset() {
         themeId = R.style.Matisse_Zhihu;
         orientation = 0;
         countable = false;
-        maxSelectable = 0;
+        maxSelectable = 1;
         filters = null;
         capture = false;
         captureStrategy = null;

File: matisse/src/main/java/com/zhihu/matisse/internal/ui/SelectedPreviewActivity.java
Patch:
@@ -19,6 +19,7 @@
 import android.support.annotation.Nullable;
 
 import com.zhihu.matisse.internal.entity.Item;
+import com.zhihu.matisse.internal.model.SelectedItemCollection;
 
 import java.util.List;
 
@@ -28,7 +29,8 @@ public class SelectedPreviewActivity extends BasePreviewActivity {
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        List<Item> selected = getIntent().getParcelableArrayListExtra(EXTRA_DEFAULT_SELECTED);
+        Bundle bundle = getIntent().getBundleExtra(EXTRA_DEFAULT_BUNDLE);
+        List<Item> selected = bundle.getParcelableArrayList(SelectedItemCollection.STATE_SELECTION);
         mAdapter.addAll(selected);
         mAdapter.notifyDataSetChanged();
         if (mSpec.countable) {

File: sample/src/main/java/com/zhihu/matisse/sample/MainActivity.java
Patch:
@@ -75,7 +75,7 @@ public void onNext(Boolean aBoolean) {
                             switch (v.getId()) {
                                 case R.id.zhihu:
                                     Matisse.from(MainActivity.this)
-                                            .choose(MimeType.allOf())
+                                            .choose(MimeType.ofAll())
                                             .countable(true)
                                             .maxSelectable(9)
                                             .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))

File: matisse/src/main/java/com/zhihu/matisse/SelectionSpecBuilder.java
Patch:
@@ -188,7 +188,8 @@ public SelectionSpecBuilder captureStrategy(CaptureStrategy captureStrategy) {
     /**
      * Set the desired orientation of this activity.
      *
-     * @param orientation An orientation constant as used in {@link ScreenOrientation}. Default value is {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}.
+     * @param orientation An orientation constant as used in {@link ScreenOrientation}.
+     *                    Default value is {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}.
      * @return {@link SelectionSpecBuilder} for fluent API.
      * @see Activity#setRequestedOrientation(int)
      */

File: matisse/src/main/java/com/zhihu/matisse/internal/loader/AlbumLoader.java
Patch:
@@ -52,7 +52,6 @@ public class AlbumLoader extends CursorLoader {
             String.valueOf(MediaStore.Files.FileColumns.MEDIA_TYPE_VIDEO),
     };
     private static final String BUCKET_ORDER_BY = "datetaken DESC";
-    private static final String MEDIA_ID_DUMMY = String.valueOf(-1);
 
     public AlbumLoader(Context context) {
         super(context, QUERY_URI, PROJECTION, SELECTION, SELECTION_ARGS, BUCKET_ORDER_BY);
@@ -72,7 +71,8 @@ public Cursor loadInBackground() {
         } else {
             allAlbumCoverPath = "";
         }
-        allAlbum.addRow(new String[]{Album.ALBUM_ID_ALL, Album.ALBUM_ID_ALL, Album.ALBUM_NAME_ALL, allAlbumCoverPath, String.valueOf(totalCount)});
+        allAlbum.addRow(new String[]{Album.ALBUM_ID_ALL, Album.ALBUM_ID_ALL, Album.ALBUM_NAME_ALL, allAlbumCoverPath,
+                String.valueOf(totalCount)});
 
         return new MergeCursor(new Cursor[]{allAlbum, albums});
     }

File: matisse/src/main/java/com/zhihu/matisse/internal/loader/AlbumMediaLoader.java
Patch:
@@ -100,7 +100,7 @@ public Cursor loadInBackground() {
             return result;
         }
         MatrixCursor dummy = new MatrixCursor(PROJECTION);
-        dummy.addRow(new Object[]{Item.ITEM_ID_CAPTURE, Item.ITEM_DISPLAY_NAME_CAPTURE, "", 0});
+        dummy.addRow(new Object[]{Item.ITEM_ID_CAPTURE, Item.ITEM_DISPLAY_NAME_CAPTURE, "", 0, 0});
         return new MergeCursor(new Cursor[]{dummy, result});
     }
 

File: matisse/src/main/java/com/zhihu/matisse/internal/loader/AlbumMediaLoader.java
Patch:
@@ -100,7 +100,7 @@ public Cursor loadInBackground() {
             return result;
         }
         MatrixCursor dummy = new MatrixCursor(PROJECTION);
-        dummy.addRow(new Object[]{Item.ITEM_ID_CAPTURE, Item.ITEM_DISPLAY_NAME_CAPTURE, "", 0});
+        dummy.addRow(new Object[]{Item.ITEM_ID_CAPTURE, Item.ITEM_DISPLAY_NAME_CAPTURE, "", 0, 0});
         return new MergeCursor(new Cursor[]{dummy, result});
     }
 

File: matisse/src/main/java/com/zhihu/matisse/internal/loader/AlbumLoader.java
Patch:
@@ -18,7 +18,6 @@
 
 import android.content.Context;
 import android.database.Cursor;
-import android.database.DatabaseUtils;
 import android.database.MatrixCursor;
 import android.database.MergeCursor;
 import android.net.Uri;

File: matisse/src/main/java/com/zhihu/matisse/internal/loader/AlbumPhotoLoader.java
Patch:
@@ -18,14 +18,12 @@
 
 import android.content.Context;
 import android.database.Cursor;
-import android.database.DatabaseUtils;
 import android.database.MatrixCursor;
 import android.database.MergeCursor;
 import android.net.Uri;
 import android.provider.MediaStore;
 import android.support.v4.content.CursorLoader;
 
-import com.zhihu.matisse.BuildConfig;
 import com.zhihu.matisse.internal.entity.Album;
 import com.zhihu.matisse.internal.entity.Item;
 import com.zhihu.matisse.internal.utils.MediaStoreCompat;
@@ -95,7 +93,6 @@ public static CursorLoader newInstance(Context context, Album album, boolean cap
     @Override
     public Cursor loadInBackground() {
         Cursor result = super.loadInBackground();
-        DatabaseUtils.dumpCursor(result);
         if (!mEnableCapture || !MediaStoreCompat.hasCameraFeature(getContext())) {
             return result;
         }

File: matisse/src/main/java/com/zhihu/matisse/ui/MatisseActivity.java
Patch:
@@ -184,13 +184,12 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     }
 
     private void updateBottomToolbar() {
+        mButtonPreview.setEnabled(mSelectedCollection.getCollectionType() == SelectedItemCollection.COLLECTION_IMAGE);
         int selectedCount = mSelectedCollection.count();
         if (selectedCount == 0) {
-            mButtonPreview.setEnabled(false);
-            mButtonApply.setText(getString(R.string.button_apply_disable));
             mButtonApply.setEnabled(false);
+            mButtonApply.setText(getString(R.string.button_apply_disable));
         } else {
-            mButtonPreview.setEnabled(true);
             mButtonApply.setEnabled(true);
             mButtonApply.setText(getString(R.string.button_apply, selectedCount));
         }

