File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -1578,6 +1578,7 @@ public void run() {
                     } else {
                         try {
                             reconfigFlagClear();
+                            checkSuspended();
                             if (shuttingDownLE) {
                                 shuttingDownLE = false;
                                 startLeaderElection();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -1806,7 +1806,7 @@ private void processSasl(RequestRecord request, ServerCnxn cnxn, RequestHeader r
                     }
                 }
             } catch (SaslException e) {
-                LOG.warn("Client {} failed to SASL authenticate: {}", cnxn.getRemoteSocketAddress(), e);
+                LOG.warn("Client {} failed to SASL authenticate", cnxn.getRemoteSocketAddress(), e);
                 if (shouldAllowSaslFailedClientsConnect() && !authHelper.isSaslAuthRequired()) {
                     LOG.warn("Maintaining client connection despite SASL authentication failure.");
                 } else {
@@ -2370,7 +2370,7 @@ public boolean authWriteRequest(Request request) {
                 try {
                     request.cnxn.sendResponse(rh, null, null);
                 } catch (IOException e) {
-                    LOG.error("IOException : {}", e);
+                    LOG.warn("IOException", e);
                 }
             }
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferRequestRecord.java
Patch:
@@ -8,9 +8,9 @@
  * with the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *uuuuu
+ *
  * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "/RequuuAS IS" BASIS,
+ * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
Patch:
@@ -8,9 +8,9 @@
  * with the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *uuuuu
+ *
  * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "/RequuuAS IS" BASIS,
+ * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestRecord.java
Patch:
@@ -8,9 +8,9 @@
  * with the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *uuuuu
+ *
  * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "/RequuuAS IS" BASIS,
+ * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/SimpleRequestRecord.java
Patch:
@@ -8,9 +8,9 @@
  * with the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *uuuuu
+ *
  * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "/RequuuAS IS" BASIS,
+ * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.

File: zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java
Patch:
@@ -278,7 +278,7 @@ private void becomeFailed(Exception e) {
      * Fetch the (user supplied) hostname of the current leader. Note that by the
      * time this method returns, state could have changed so do not depend on this
      * to be strongly consistent. This method has to read all leader offers from
-     * ZooKeeper to deterime who the leader is (i.e. there is no caching) so
+     * ZooKeeper to determine who the leader is (i.e. there is no caching) so
      * consider the performance implications of frequent invocation. If there are
      * no leader offers this method returns null.
      *

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java
Patch:
@@ -402,7 +402,7 @@ void testableCloseSocket() throws IOException {
         }
     }
 
-    // *************** <END> CientCnxnSocketNetty </END> ******************
+    // *************** <END> ClientCnxnSocketNetty </END> ******************
     private static class WakeupPacket {
 
         private static final Packet instance = new Packet(null, null, null, null, null);

File: zookeeper-server/src/main/java/org/apache/zookeeper/metrics/MetricsProviderLifeCycleException.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.zookeeper.metrics;
 
 /**
- * A generic exception thrown during the licecycle of a MetricsProvider.
+ * A generic exception thrown during the lifecycle of a MetricsProvider.
  * <p>These exception will prevent the system from booting.</p>
  * <p>Normally these exception will be ignored during shutdown.</p>
  */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java
Patch:
@@ -66,8 +66,8 @@ public enum PurgeTaskStatus {
      *            transaction log directory
      * @param snapRetainCount
      *            number of snapshots to be retained after purge
-     * @param purgeInterval
-     *            purge interval in hours
+     * @param purgeIntervalInMs
+     *            purge interval in milliseconds
      */
     public DatadirCleanupManager(File snapDir, File dataLogDir, int snapRetainCount, int purgeIntervalInMs) {
         this.snapDir = snapDir;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -410,7 +410,7 @@ Optional<ServerSocket> createServerSocket(InetSocketAddress address, boolean por
 
     /**
      * This message type is sent by the leader to indicate that the follower is
-     * now uptodate andt can start responding to clients.
+     * now uptodate and can start responding to clients.
      */
     static final int UPTODATE = 12;
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperSaslServer.java
Patch:
@@ -41,7 +41,7 @@ public class ZooKeeperSaslServer {
     private SaslServer createSaslServer(final Login login) {
         synchronized (login) {
             Subject subject = login.getSubject();
-            return SecurityUtils.createSaslServer(subject, "zookeeper", "zk-sasl-md5", login.callbackHandler, LOG);
+            return SecurityUtils.createSaslServer(subject, "zookeeper", "zk-sasl-md5", login.newCallbackHandler(), LOG);
         }
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/KerberosTicketRenewalTest.java
Patch:
@@ -127,7 +127,9 @@ private static class TestableKerberosLogin extends Login {
     private CountDownLatch continueRefreshThread = new CountDownLatch(1);
 
     public TestableKerberosLogin() throws LoginException {
-      super(JAAS_CONFIG_SECTION, (callbacks) -> {}, new ZKConfig());
+      super(JAAS_CONFIG_SECTION, () -> {
+        return (callbacks) -> {};
+      }, new ZKConfig());
     }
 
     @Override

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java
Patch:
@@ -294,7 +294,7 @@ public long loadDataBase() throws IOException {
     }
 
     /**
-     * Fast forward the database adding transactions from the committed log into memory.
+     * Fast-forward the database adding transactions from the committed log into memory.
      * @return the last valid zxid.
      * @throws IOException
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -192,9 +192,7 @@ public void runFromConfig(ServerConfig config) throws IOException, AdminServerEx
             if (secureCnxnFactory != null) {
                 secureCnxnFactory.join();
             }
-            if (zkServer.canShutdown()) {
-                zkServer.shutdown(true);
-            }
+            zkServer.shutdown(true);
         } catch (InterruptedException e) {
             // warn, but generally this is ok
             LOG.warn("Server interrupted", e);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
Patch:
@@ -313,7 +313,7 @@ public long restore(DataTree dt, Map<Long, Integer> sessions, PlayBackListener l
     }
 
     /**
-     * This function will fast forward the server database to have the latest
+     * This function will fast-forward the server database to have the latest
      * transactions in it.  This is the same as restore, but only reads from
      * the transaction logs and not restores from a snapshot.
      * @param dt the datatree to write transactions to.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -155,11 +155,11 @@ protected void unregisterMetrics() {
     }
 
     @Override
-    public synchronized void shutdown() {
+    protected synchronized void shutdownComponents() {
         if (containerManager != null) {
             containerManager.stop();
         }
-        super.shutdown();
+        super.shutdownComponents();
     }
 
     @Override

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SendAckRequestProcessor.java
Patch:
@@ -46,7 +46,7 @@ public void processRequest(Request si) {
                 learner.writePacket(qp, false);
             } catch (IOException e) {
                 LOG.warn("Closing connection to leader, exception during packet send", e);
-                learner.closeSockSync();
+                learner.closeSocket();
             }
         }
     }
@@ -56,7 +56,7 @@ public void flush() throws IOException {
             learner.writePacket(null, true);
         } catch (IOException e) {
             LOG.warn("Closing connection to leader, exception during packet send", e);
-            learner.closeSockSync();
+            learner.closeSocket();
         }
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/WatchLeakTest.java
Patch:
@@ -97,7 +97,7 @@ public Boolean answer(InvocationOnMock invocation) throws Throwable {
             }
         });
 
-        ZKDatabase database = new ZKDatabase(null);
+        ZKDatabase database = new ZKDatabase(mock(FileTxnSnapLog.class));
         database.setlastProcessedZxid(2L);
         QuorumPeer quorumPeer = mock(QuorumPeer.class);
         FileTxnSnapLog logfactory = mock(FileTxnSnapLog.class);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java
Patch:
@@ -30,7 +30,7 @@
 public class IPAuthenticationProvider implements AuthenticationProvider {
     public static final String X_FORWARDED_FOR_HEADER_NAME = "X-Forwarded-For";
 
-    static final String SKIP_X_FORWARDED_FOR_KEY = "zookeeper.IPAuthenticationProvider.skipxforwardedfor";
+    public static final String USE_X_FORWARDED_FOR_KEY = "zookeeper.IPAuthenticationProvider.usexforwardedfor";
 
     public String getScheme() {
         return "ip";
@@ -152,7 +152,7 @@ public boolean isValid(String id) {
      * @return IP address
      */
     public static String getClientIPAddress(final HttpServletRequest request) {
-        if (Boolean.getBoolean(SKIP_X_FORWARDED_FOR_KEY)) {
+        if (!Boolean.getBoolean(USE_X_FORWARDED_FOR_KEY)) {
             return request.getRemoteAddr();
         }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java
Patch:
@@ -116,7 +116,7 @@ public void testQuota() throws Exception {
         stopServer();
         startServer();
         ZooKeeperServer server = serverFactory.getZooKeeperServer();
-        assertNotNull(server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null, "Quota is still set");
+        assertNotNull(server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path), "Quota is still set");
     }
 
     @Test

File: zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java
Patch:
@@ -289,7 +289,7 @@ private void init() throws IOException {
 	String line = in.readLine();
 	Matcher m = null;
 
-	// if we have read data from the file, and it matchs the timep pattern
+	// if we have read data from the file, and it matches the timep pattern
 	if ((line != null) && (m = timep.matcher(line)).lookingAt()) {
 	    starttime = timestampFromText(dateformat, m.group(1));
 	} else {

File: zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java
Patch:
@@ -307,7 +307,7 @@ public Response createZNode(
             throw new WebApplicationException(Response.status(
                     Response.Status.BAD_REQUEST).entity(
                     new ZError(ui.getRequestUri().toString(), path
-                            + " bad operaton " + op)).build());
+                            + " bad operation " + op)).build());
         }
 
         if (setNull.equals("true")) {
@@ -358,7 +358,7 @@ public Response createZNodeAsOctet(@PathParam("path") String path,
             throw new WebApplicationException(Response.status(
                     Response.Status.BAD_REQUEST).entity(
                     new ZError(ui.getRequestUri().toString(), path
-                            + " bad operaton " + op)).build());
+                            + " bad operation " + op)).build());
         }
 
         if (setNull.equals("true")) {

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java
Patch:
@@ -142,7 +142,7 @@ class SingleToaster extends javax.swing.JWindow
 
 
 		/***
-		 * Simple costructor that initialized components...
+		 * Simple constructor that initialized components...
 		 */
 		public SingleToaster()
 		{

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeSelectionListener.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zookeeper.inspector.gui.nodeviewer;
 
 /**
- * An interface to be implented by any component that needs notification when a new element
+ * An interface to be implemented by any component that needs notification when a new element
  * is selected in the UI JTree representing the set of available ZNodes.
  */
 public interface NodeSelectionListener {

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerMetaData.java
Patch:
@@ -167,17 +167,17 @@ protected void done() {
 
                 private String formatValByKeyType(String key, String value) {
                     if(key==null) return value;
-                    String formatedVal=value;
+                    String formattedVal=value;
                     switch (key){
                         case "Ephemeral Owner":
                             try{
-                                formatedVal = String.format("0x%x", Long.parseLong(value));
+                                formattedVal = String.format("0x%x", Long.parseLong(value));
                             }catch (NumberFormatException e){
                                 LoggerFactory.getLogger().warn("parse {}'s value {} to hex fail",key,value,e);
                             }
                             break;
                     }
-                    return formatedVal;
+                    return formattedVal;
                 }
             };
             worker.execute();

File: zookeeper-jute/src/main/java/org/apache/jute/compiler/JFile.java
Patch:
@@ -81,7 +81,7 @@ public void genCode(String language, File outputDirectory)
                     outputDirectory);
             gen.genCode();
         } else {
-            throw new IOException("Cannnot recognize language:" + language);
+            throw new IOException("Cannot recognize language:" + language);
         }
     }
 }

File: zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java
Patch:
@@ -407,7 +407,7 @@ public void genJavaCode(File outputDirectory) throws IOException {
         if (!pkgdir.exists()) {
             // create the pkg directory
             if (!pkgdir.mkdirs()) {
-                throw new IOException("Cannnot create directory: " + pkgpath);
+                throw new IOException("Cannot create directory: " + pkgpath);
             }
         } else if (!pkgdir.isDirectory()) {
             throw new IOException(pkgpath + " is not a directory.");
@@ -580,7 +580,7 @@ public void genCsharpCode(File outputDirectory) throws IOException {
         if (!outputDirectory.exists()) {
             // create the pkg directory
             if (!outputDirectory.mkdirs()) {
-                throw new IOException("Cannnot create directory: " + outputDirectory);
+                throw new IOException("Cannot create directory: " + outputDirectory);
             }
         } else if (!outputDirectory.isDirectory()) {
             throw new IOException(outputDirectory + " is not a directory.");

File: zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java
Patch:
@@ -437,7 +437,7 @@ public PrometheusGaugeWrapper(String name, Gauge gauge, io.prometheus.client.Gau
         }
 
         /**
-         * Call the callack and update Prometheus Gauge. This method is called
+         * Call the callback and update Prometheus Gauge. This method is called
          * when the server is polling for a value.
          */
         private void sample() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java
Patch:
@@ -154,12 +154,12 @@ void doIO(Queue<Packet> pendingQueue, ClientCnxn cnxn) throws InterruptedExcepti
         }
     }
 
-    private Packet findSendablePacket(LinkedBlockingDeque<Packet> outgoingQueue, boolean tunneledAuthInProgres) {
+    private Packet findSendablePacket(LinkedBlockingDeque<Packet> outgoingQueue, boolean tunneledAuthInProgress) {
         if (outgoingQueue.isEmpty()) {
             return null;
         }
         // If we've already starting sending the first packet, we better finish
-        if (outgoingQueue.getFirst().bb != null || !tunneledAuthInProgres) {
+        if (outgoingQueue.getFirst().bb != null || !tunneledAuthInProgress) {
             return outgoingQueue.getFirst();
         }
         // Since client's authentication with server is in progress,

File: zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java
Patch:
@@ -356,7 +356,7 @@ public enum Code implements CodeDeprecated {
         OPERATIONTIMEOUT(OperationTimeout),
         /** Invalid arguments */
         BADARGUMENTS(BadArguments),
-        /** No quorum of new config is connected and up-to-date with the leader of last commmitted config - try
+        /** No quorum of new config is connected and up-to-date with the leader of last committed config - try
          *  invoking reconfiguration after new servers are connected and synced */
         NEWCONFIGNOQUORUM(NewConfigNoQuorum),
         /** Another reconfiguration is in progress -- concurrent reconfigs not supported (yet) */

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -1357,7 +1357,7 @@ private String prependChroot(String clientPath) {
      * of the node by getChildren calls.
      * <p>
      * The maximum allowable size of the data array is 1 MB (1,048,576 bytes).
-     * Arrays larger than this will cause a KeeperExecption to be thrown.
+     * Arrays larger than this will cause a KeeperException to be thrown.
      *
      * @param path
      *                the path for the node
@@ -1439,7 +1439,7 @@ public String create(
      * of the node by getChildren calls.
      * <p>
      * The maximum allowable size of the data array is 1 MB (1,048,576 bytes).
-     * Arrays larger than this will cause a KeeperExecption to be thrown.
+     * Arrays larger than this will cause a KeeperException to be thrown.
      *
      * @param path
      *                the path for the node
@@ -2319,7 +2319,7 @@ public void getACL(final String path, Stat stat, ACLCallback cb, Object ctx) {
      * @return the stat of the node.
      * @throws InterruptedException If the server transaction is interrupted.
      * @throws KeeperException If the server signals an error with a non-zero error code.
-     * @throws org.apache.zookeeper.KeeperException.InvalidACLException If the acl is invalide.
+     * @throws org.apache.zookeeper.KeeperException.InvalidACLException If the acl is invalid.
      * @throws IllegalArgumentException if an invalid path is specified
      */
     public Stat setACL(final String path, List<ACL> acl, int aclVersion) throws KeeperException, InterruptedException {

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliWrapperException.java
Patch:
@@ -52,7 +52,7 @@ private static String getMessage(Throwable cause) {
                 return "Another reconfiguration is in progress -- concurrent " + "reconfigs not supported (yet)";
             } else if (keeperException instanceof KeeperException.NewConfigNoQuorum) {
                 return "No quorum of new config is connected and "
-                       + "up-to-date with the leader of last commmitted config - try invoking reconfiguration after "
+                       + "up-to-date with the leader of last committed config - try invoking reconfiguration after "
                        + "new servers are connected and synced";
             } else if (keeperException instanceof KeeperException.QuotaExceededException) {
                 return "Quota has exceeded : " + keeperException.getPath();

File: zookeeper-server/src/main/java/org/apache/zookeeper/client/ConnectStringParser.java
Patch:
@@ -44,7 +44,7 @@ public final class ConnectStringParser {
     private final ArrayList<InetSocketAddress> serverAddresses = new ArrayList<>();
 
     /**
-     * Parse host and port by spliting client connectString
+     * Parse host and port by splitting client connectString
      * with support for IPv6 literals
      * @throws IllegalArgumentException
      *             for an invalid chroot path.

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/IOUtils.java
Patch:
@@ -70,7 +70,7 @@ public static void cleanup(Logger log, Closeable... closeables) {
      * Copies from one stream to another.
      *
      * @param in
-     *            InputStrem to read from
+     *            InputStream to read from
      * @param out
      *            OutputStream to write to
      * @param buffSize
@@ -100,7 +100,7 @@ public static void copyBytes(InputStream in, OutputStream out, int buffSize, boo
      * Copies from one stream to another.
      *
      * @param in
-     *            InputStrem to read from
+     *            InputStream to read from
      * @param out
      *            OutputStream to write to
      * @param buffSize

File: zookeeper-server/src/main/java/org/apache/zookeeper/metrics/Summary.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Summaries track the size and number of events.
- * They are able to publish minumum, maximum, average values, depending on the capabilities of the MetricsProvider.
+ * They are able to publish minimum, maximum, average values, depending on the capabilities of the MetricsProvider.
  */
 public interface Summary {
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/metrics/SummarySet.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Summaries track the size and number of events.
- * They are able to publish minumum, maximum, average values, depending on the capabilities of the MetricsProvider.
+ * They are able to publish minimum, maximum, average values, depending on the capabilities of the MetricsProvider.
  * A SummarySet is a set of {@link Summary}.
  */
 public interface SummarySet {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java
Patch:
@@ -204,7 +204,7 @@ private static void logWeighedThrottlingSetting() {
         logWeighedThrottlingSetting();
     }
 
-    /* Varation of Integer.getInteger for real number properties */
+    /* Variation of Integer.getInteger for real number properties */
     private static double getDoubleProp(String name, double def) {
         String val = System.getProperty(name);
         if (val != null) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionMXBean.java
Patch:
@@ -48,7 +48,7 @@ public interface ConnectionMXBean {
      */
     long getPacketsSent();
     /**
-     * @return number of requets being processed
+     * @return number of requests being processed
      */
     long getOutstandingRequests();
     /**
@@ -62,7 +62,7 @@ public interface ConnectionMXBean {
      */
     void terminateSession();
     /**
-     * Terminate thei client connection. The client will immediately attempt to
+     * Terminate the client connection. The client will immediately attempt to
      * reconnect with the same session id.
      */
     void terminateConnection();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java
Patch:
@@ -52,7 +52,7 @@ public class ContainerManager {
 
     /**
      * @param zkDb the ZK database
-     * @param requestProcessor request processer - used to inject delete
+     * @param requestProcessor request processor - used to inject delete
      *                         container requests
      * @param checkIntervalMs how often to check containers in milliseconds
      * @param maxPerMinute the max containers to delete per second - avoids
@@ -64,7 +64,7 @@ public ContainerManager(ZKDatabase zkDb, RequestProcessor requestProcessor, int
 
     /**
      * @param zkDb the ZK database
-     * @param requestProcessor request processer - used to inject delete
+     * @param requestProcessor request processor - used to inject delete
      *                         container requests
      * @param checkIntervalMs how often to check containers in milliseconds
      * @param maxPerMinute the max containers to delete per second - avoids

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java
Patch:
@@ -77,7 +77,7 @@ public Long remove(E elem) {
      * Adds or updates expiration time for element in queue, rounding the
      * timeout to the expiry interval bucketed used by this queue.
      * @param elem     element to add/update
-     * @param timeout  timout in milliseconds
+     * @param timeout  timeout in milliseconds
      * @return time at which the element is now set to expire if
      *                 changed, or null if unchanged
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -976,7 +976,7 @@ private void validateCreateRequest(String path, CreateMode createMode, Request r
     /**
      * This method checks out the acl making sure it isn't null or empty,
      * it has valid schemes and ids, and expanding any relative ids that
-     * depend on the requestor's authentication information.
+     * depend on the requester's authentication information.
      *
      * @param authInfo list of ACL IDs associated with the client connection
      * @param acls list of ACLs being assigned to the node (create or setACL operation)
@@ -1004,7 +1004,7 @@ public static List<ACL> fixupACL(String path, List<Id> authInfo, List<ACL> acls)
                 rv.add(a);
             } else if (id.getScheme().equals("auth")) {
                 // This is the "auth" id, so we have to expand it to the
-                // authenticated ids of the requestor
+                // authenticated ids of the requester
                 boolean authIdValid = false;
                 for (Id cid : authInfo) {
                     ServerAuthenticationProvider ap = ProviderRegistry.getServerProvider(cid.getScheme());

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java
Patch:
@@ -110,7 +110,7 @@ public void deserialize(InputArchive ia) throws IOException {
             List<ACL> aclList = new ArrayList<>();
             Index j = ia.startVector("acls");
             if (j == null) {
-                throw new RuntimeException("Incorrent format of InputArchive when deserialize DataTree - missing acls");
+                throw new RuntimeException("Incorrect format of InputArchive when deserialize DataTree - missing acls");
             }
             while (!j.done()) {
                 ACL acl = new ACL();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java
Patch:
@@ -36,7 +36,7 @@
  * the connection layer always allows a connection to send at least one request
  * before disabling selection on that connection. Thus, in a scenario with 40000
  * client connections, the total number of requests inflight may be as high as
- * 40000 even if the <code>globalOustandingLimit</code> was set lower.
+ * 40000 even if the <code>globalOutstandingLimit</code> was set lower.
  *
  * The RequestThrottler addresses this issue by adding additional queueing. When
  * enabled, client connections no longer submit requests directly to the request

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java
Patch:
@@ -130,7 +130,7 @@ public void startup(ZooKeeperServer zkServer) throws IOException, InterruptedExc
         startup(zkServer, true);
     }
 
-    // This method is to maintain compatiblity of startup(zks) and enable sharing of zks
+    // This method is to maintain compatibility of startup(zks) and enable sharing of zks
     // when we add secureCnxnFactory.
     public abstract void startup(ZooKeeperServer zkServer, boolean startServer) throws IOException, InterruptedException;
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java
Patch:
@@ -258,7 +258,7 @@ public void shutdown() {
             this.join();
             this.flush();
         } catch (InterruptedException e) {
-            LOG.warn("Interrupted while wating for {} to finish", this);
+            LOG.warn("Interrupted while waiting for {} to finish", this);
             Thread.currentThread().interrupt();
         } catch (IOException e) {
             LOG.warn("Got IO exception during shutdown");

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java
Patch:
@@ -468,7 +468,7 @@ public void setlastProcessedZxid(long zxid) {
     }
 
     /**
-     * the process txn on the data and perform digest comparision.
+     * the process txn on the data and perform digest comparison.
      * @param hdr the txnheader for the txn
      * @param txn the transaction that needs to be processed
      * @param digest the expected digest. A null value would skip the check
@@ -666,7 +666,7 @@ public void serializeSnapshot(OutputArchive oa) throws IOException, InterruptedE
     /**
      * append to the underlying transaction log
      * @param si the request to append
-     * @return true if the append was succesfull and false if not
+     * @return true if the append was successful and false if not
      */
     public boolean append(Request si) throws IOException {
         if (this.snapLog.append(si)) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -259,7 +259,7 @@ protected enum State {
     private static volatile int maxBatchSize;
 
     /**
-     * Starting size of read and write ByteArroyOuputBuffers. Default is 32 bytes.
+     * Starting size of read and write ByteArrayOutputBuffers. Default is 32 bytes.
      * Flag not used for small transfers like connectResponses.
      */
     public static final String INT_BUFFER_STARTING_SIZE_BYTES = "zookeeper.intBufferStartingSizeBytes";
@@ -1829,7 +1829,7 @@ private void processSasl(RequestRecord request, ServerCnxn cnxn, RequestHeader r
                     int error;
                     if (authHelper.isSaslAuthRequired()) {
                         LOG.warn(
-                            "Closing client connection due to server requires client SASL authenticaiton,"
+                            "Closing client connection due to server requires client SASL authentication,"
                                 + "but client SASL authentication has failed, or client is not configured with SASL "
                                 + "authentication.");
                         error = Code.SESSIONCLOSEDREQUIRESASLAUTH.intValue();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ExitHandler.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Behaviour of the server in case of internal error.
  * When you are running tests you will use {@link #LOG_ONLY},
- * but please take care of using {@link #EXIT} when runnning in production.
+ * but please take care of using {@link #EXIT} when running in production.
  */
 public enum ExitHandler {
     /**

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbedded.java
Patch:
@@ -51,7 +51,7 @@ class ZookKeeperServerEmbeddedBuilder {
         /**
          * Base directory of the server.
          * The system will create a temporary configuration file inside this directory.
-         * Please remember that dynamic configuration files wil be saved into this directory by default.
+         * Please remember that dynamic configuration files will be saved into this directory by default.
          * <p>
          * If you do not set a 'dataDir' configuration entry the system will use a subdirectory of baseDir.
          * @param baseDir

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java
Patch:
@@ -128,7 +128,7 @@ public void run() {
                     try {
                         maincluster.runFromConfig(config);
                         maincluster.close();
-                        LOG.info("ZK server died. Requsting stop on JVM");
+                        LOG.info("ZK server died. Requesting stop on JVM");
                         if (!stopping) {
                             ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
                         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java
Patch:
@@ -182,7 +182,7 @@ public static void checkSealIntegrity(CheckedInputStream is, InputArchive ia) th
     /**
      * Verifies that the file is a valid snapshot. Snapshot may be invalid if
      * it's incomplete as in a situation when the server dies while in the
-     * process of storing a snapshot. Any files that are improperly formated
+     * process of storing a snapshot. Any files that are improperly formatted
      * or corrupted are invalid. Any file that is not a snapshot is also an
      * invalid snapshot.
      *

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java
Patch:
@@ -1074,7 +1074,7 @@ public Vote lookForLeader() throws InterruptedException {
                         * In ZOOKEEPER-3922, we separate the behaviors of FOLLOWING and LEADING.
                         * To avoid the duplication of codes, we create a method called followingBehavior which was used to
                         * shared by FOLLOWING and LEADING. This method returns a Vote. When the returned Vote is null, it follows
-                        * the original idea to break swtich statement; otherwise, a valid returned Vote indicates, a leader
+                        * the original idea to break switch statement; otherwise, a valid returned Vote indicates, a leader
                         * is generated.
                         *
                         * The reason why we need to separate these behaviors is to make the algorithm runnable for 2-node

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -295,7 +295,7 @@ protected long nanoTime() {
 
     /**
      * Overridable helper method to simply call sock.connect(). This can be
-     * overriden in tests to fake connection success/failure for connectToLeader.
+     * overridden in tests to fake connection success/failure for connectToLeader.
      */
     protected void sockConnect(Socket sock, InetSocketAddress addr, int timeout) throws IOException {
         sock.connect(addr, timeout);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java
Patch:
@@ -82,7 +82,7 @@ public void commitRequest(Request request) {
 
     /**
      * Set up the request processors for an Observer:
-     * firstProcesor-&gt;commitProcessor-&gt;finalProcessor
+     * firstProcessor-&gt;commitProcessor-&gt;finalProcessor
      */
     @Override
     protected void setupRequestProcessors() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -862,7 +862,7 @@ public synchronized void setCurrentVote(Vote v) {
      * This class simply responds to requests for the current leader of this
      * node.
      * <p>
-     * The request contains just an xid generated by the requestor.
+     * The request contains just an xid generated by the requester.
      * <p>
      * The response has the xid, the id of this server, the id of the leader,
      * and the zxid of the leader.
@@ -1036,7 +1036,7 @@ public synchronized ServerState getPeerState() {
     /**
      * Resolves hostname for a given server ID.
      *
-     * This method resolves hostname for a given server ID in both quorumVerifer
+     * This method resolves hostname for a given server ID in both quorumVerifier
      * and lastSeenQuorumVerifier. If the server ID matches the local server ID,
      * it also updates myAddrs.
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/util/OSMXBean.java
Patch:
@@ -84,7 +84,7 @@ private Long getOSUnixMXBeanMethod(String mBeanMethodName) {
                 return (Long) mBeanMethod.invoke(unixos);
             }
         } catch (Exception e) {
-            LOG.warn("Not able to load class or method for com.sun.managment.UnixOperatingSystemMXBean.", e);
+            LOG.warn("Not able to load class or method for com.sun.management.UnixOperatingSystemMXBean.", e);
         }
         return null;
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java
Patch:
@@ -83,7 +83,7 @@ public class RequestPathMetricsCollector {
     public static final String PATH_STATS_COLLECTOR_DELAY = "zookeeper.pathStats.delay";
     public static final String PATH_STATS_TOP_PATH_MAX = "zookeeper.pathStats.topPathMax";
     public static final String PATH_STATS_ENABLED = "zookeeper.pathStats.enabled";
-    private static final String PATH_SEPERATOR = "/";
+    private static final String PATH_SEPARATOR = "/";
 
     private final Map<String, PathStatsQueue> immutableRequestsMap;
     private final ScheduledThreadPoolExecutor scheduledExecutor;
@@ -155,9 +155,9 @@ static boolean isWriteOp(int requestType) {
     static String trimPathDepth(String path, int maxDepth) {
         int count = 0;
         StringBuilder sb = new StringBuilder();
-        StringTokenizer pathTokenizer = new StringTokenizer(path, PATH_SEPERATOR);
+        StringTokenizer pathTokenizer = new StringTokenizer(path, PATH_SEPARATOR);
         while (pathTokenizer.hasMoreElements() && count++ < maxDepth) {
-            sb.append(PATH_SEPERATOR);
+            sb.append(PATH_SEPARATOR);
             sb.append(pathTokenizer.nextToken());
         }
         path = sb.toString();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java
Patch:
@@ -137,7 +137,7 @@ public WatcherOrBitSet triggerWatch(String path, EventType type, long zxid, List
     }
 
     @Override
-    public WatcherOrBitSet triggerWatch(String path, EventType type, long zxid, List<ACL> acl, WatcherOrBitSet supress) {
+    public WatcherOrBitSet triggerWatch(String path, EventType type, long zxid, List<ACL> acl, WatcherOrBitSet suppress) {
         WatchedEvent e = new WatchedEvent(type, KeeperState.SyncConnected, path, zxid);
         Set<Watcher> watchers = new HashSet<>();
         synchronized (this) {
@@ -182,7 +182,7 @@ public WatcherOrBitSet triggerWatch(String path, EventType type, long zxid, List
         }
 
         for (Watcher w : watchers) {
-            if (supress != null && supress.contains(w)) {
+            if (suppress != null && suppress.contains(w)) {
                 continue;
             }
             if (w instanceof ServerWatcher) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketFragilityTest.java
Patch:
@@ -316,7 +316,7 @@ void waitUntilHitUnsafeRegion() {
         @Override
         protected void onConnecting(InetSocketAddress addr) {
             if (closing) {
-                LOG.info("Attempt to connnecting {} {} {}", addr, closing, state);
+                LOG.info("Attempt to connecting {} {} {}", addr, closing, state);
                 ///////// Unsafe Region ////////
                 // Slow down and zoom out the unsafe point to make risk
                 // The unsafe point is that startConnect happens after sendThread.close

File: zookeeper-server/src/test/java/org/apache/zookeeper/GetAllChildrenNumberTest.java
Patch:
@@ -91,12 +91,12 @@ public void testGetAllChildrenNumberAsync() throws IOException, KeeperException,
         }
     }
 
-    private void generatePaths(int persistantCnt, int ephemeralCnt) throws KeeperException, InterruptedException {
+    private void generatePaths(int persistentCnt, int ephemeralCnt) throws KeeperException, InterruptedException {
 
         zk.create(BASE, BASE.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
         zk.create(BASE_EXT, BASE_EXT.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
 
-        for (int p = 0; p < persistantCnt; p++) {
+        for (int p = 0; p < persistentCnt; p++) {
             String base = BASE + "/" + p;
             zk.create(base, base.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
             for (int e = 0; e < ephemeralCnt; e++) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/GetEphemeralsTest.java
Patch:
@@ -174,10 +174,10 @@ public void testGetEphemeralsErrors() throws KeeperException {
         }
     }
 
-    private String[] generatePaths(int persistantCnt, int ephemeralCnt) throws KeeperException, InterruptedException {
+    private String[] generatePaths(int persistentCnt, int ephemeralCnt) throws KeeperException, InterruptedException {
 
-        final String[] expected = new String[persistantCnt * ephemeralCnt];
-        for (int p = 0; p < persistantCnt; p++) {
+        final String[] expected = new String[persistentCnt * ephemeralCnt];
+        for (int p = 0; p < persistentCnt; p++) {
             String base = BASE + p;
             zk.create(base, base.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
             for (int e = 0; e < ephemeralCnt; e++) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/JaasConfiguration.java
Patch:
@@ -31,7 +31,7 @@
  * Example:
  *   jaas = new JaasConfiguration();
  *   jaas.addSection("Server", "org.apache.zookeeper.server.auth.DigestLoginModule",
- *                   "username", "passowrd");
+ *                   "username", "password");
  */
 public class JaasConfiguration extends javax.security.auth.login.Configuration {
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/PortAssignment.java
Patch:
@@ -107,7 +107,7 @@ public static synchronized int unique() {
      * uses these 2 pieces of information to split the available ports into
      * disjoint ranges.  Each JUnit process only assigns ports from its own range
      * in order to prevent bind errors during concurrent test runs.  If any of
-     * this information is unavailable or unparseable, then the default behavior
+     * this information is unavailable or unparsable, then the default behavior
      * is for this process to use the entire available port range.  This is
      * expected when running tests outside of Ant.
      *

File: zookeeper-server/src/test/java/org/apache/zookeeper/client/ZKClientConfigTest.java
Patch:
@@ -149,7 +149,7 @@ public void testIntegerRetrievalFromProperty() {
 
         // property is set but can not be parsed to int, we should get the
         // NumberFormatException
-        conf.setProperty(ZKConfig.JUTE_MAXBUFFER, "InvlaidIntValue123");
+        conf.setProperty(ZKConfig.JUTE_MAXBUFFER, "InvalidIntValue123");
         try {
             result = conf.getInt(ZKConfig.JUTE_MAXBUFFER, defaultValue);
             fail("NumberFormatException is expected");

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ClientSSLReloadTest.java
Patch:
@@ -102,13 +102,13 @@ public void teardown() throws Exception {
      * 3) ZK client will connect to the server on the secure client port using keyStoreFile1 and trustStoreFile1.
      * 4) Update the keyStoreFile1 and trustStoreFile1 files in the filesystem with keyStoreFile2 and trustStoreFile2.
      * 5) Till FileChangeWatcher thread is triggered & SSLContext options are reset, ZK client should continue to connect.
-     *    In Junit tests, FileChangeWatcher thread is not triggered immediately upon certifcate update in the filesystem.
-     * 6) Once the certficates are reloaded by the server, ZK client connect will fail.
+     *    In Junit tests, FileChangeWatcher thread is not triggered immediately upon certificate update in the filesystem.
+     * 6) Once the certificates are reloaded by the server, ZK client connect will fail.
      * 7) Next, create a new ZK client with updated keystore & truststore paths (keyStoreFile2 and trustStoreFile2).
      * 8) Server should accept the connection on the secure client port.
      */
     @Test
-    public void certficateReloadTest() throws Exception {
+    public void certificateReloadTest() throws Exception {
 
         final Properties configZookeeper = getServerConfig();
         try (ZooKeeperServerEmbedded zkServer = ZooKeeperServerEmbedded

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java
Patch:
@@ -27,7 +27,7 @@
 public class DataNodeTest {
 
     @Test
-    public void testGetChildrenShouldReturnEmptySetWhenThereAreNoChidren() {
+    public void testGetChildrenShouldReturnEmptySetWhenThereAreNoChildren() {
         // create DataNode and call getChildren
         DataNode dataNode = new DataNode();
         Set<String> children = dataNode.getChildren();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java
Patch:
@@ -260,7 +260,7 @@ public void testPathTrieClearOnDeserialize() throws Exception {
 
     /* ZOOKEEPER-3531 - org.apache.zookeeper.server.DataTree#serialize calls the aclCache.serialize when doing
      * dataree serialization, however, org.apache.zookeeper.server.ReferenceCountedACLCache#serialize
-     * could get stuck at OutputArchieve.writeInt due to potential network/disk issues.
+     * could get stuck at OutputArchive.writeInt due to potential network/disk issues.
      * This can cause the system experiences hanging issues similar to ZooKeeper-2201.
      * This test verifies the fix that we should not hold ACL cache during dumping aclcache to snapshots
     */

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java
Patch:
@@ -116,7 +116,7 @@ public void testPurge() throws Exception {
 
     /**
      * Tests purge when logs are rolling or a new snapshot is created, then
-     * these newer files should alse be excluded in the current cycle.
+     * these newer files should also be excluded in the current cycle.
      *
      * For frequent snapshotting, configured SnapCount to 30. There are three
      * threads which will create 1000 znodes each and simultaneously do purge

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java
Patch:
@@ -210,7 +210,7 @@ public void commit() throws IOException {
         try {
             // do create operation, so that injected IOException is thrown
             zk.create("/foo2", "foobar".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
-            fail("IOException is expected as error is injected in transaction log commit funtionality");
+            fail("IOException is expected as error is injected in transaction log commit functionality");
         } catch (Exception e) {
             // do nothing
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerStartupTest.java
Patch:
@@ -186,11 +186,11 @@ public void run() {
                 try {
                     servcnxnf.startup(zks);
                 } catch (IOException e) {
-                    LOG.error("Unexcepted exception during server startup", e);
+                    LOG.error("Unexpected exception during server startup", e);
                     // Ignoring exception. If there is an ioexception
                     // then one of the following assertion will fail
                 } catch (InterruptedException e) {
-                    LOG.error("Unexcepted exception during server startup", e);
+                    LOG.error("Unexpected exception during server startup", e);
                     // Ignoring exception. If there is an interrupted exception
                     // then one of the following assertion will fail
                 }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperThreadTest.java
Patch:
@@ -52,7 +52,7 @@ public MyCriticalThread(String threadName) {
             super(threadName, new ZooKeeperServerListener() {
 
                 @Override
-                public void notifyStopping(String threadName, int erroCode) {
+                public void notifyStopping(String threadName, int errorCode) {
 
                 }
             });

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java
Patch:
@@ -291,7 +291,7 @@ public void testLogSizeLimit(@TempDir File tmpDir) throws Exception {
         for (long i = 0; i < txnCount; i++) {
             Stat stat = new Stat();
             byte[] data = db.getData("/node-" + i, stat, null);
-            assertArrayEquals(bytes, data, "Missmatch data");
+            assertArrayEquals(bytes, data, "Mismatch data");
             assertTrue(zxids.contains(stat.getMzxid()), "Unknown zxid ");
         }
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java
Patch:
@@ -309,14 +309,14 @@ public void testCnxManagerListenerThreadConfigurableRetry() throws Exception {
         final QuorumPeer peer = new QuorumPeer(unresolvablePeers, ClientBase.createTmpDir(), ClientBase.createTmpDir(), 2181, 3, myid, 1000, 2, 2, 2);
         final QuorumCnxManager cnxManager = peer.createCnxnManager();
         final QuorumCnxManager.Listener listener = cnxManager.listener;
-        final AtomicBoolean errorHappend = new AtomicBoolean(false);
-        listener.setSocketBindErrorHandler(() -> errorHappend.set(true));
+        final AtomicBoolean errorHappened = new AtomicBoolean(false);
+        listener.setSocketBindErrorHandler(() -> errorHappened.set(true));
         listener.start();
         // listener thread should stop and throws error which notify QuorumPeer about error.
         // QuorumPeer should start shutdown process
         listener.join(15000); // set wait time, if listener contains bug and thread not stops.
         assertFalse(listener.isAlive());
-        assertTrue(errorHappend.get());
+        assertTrue(errorHappened.get());
         assertFalse(listener.isAlive(), QuorumPeer.class.getSimpleName() + " not stopped after " + "listener thread death");
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java
Patch:
@@ -169,7 +169,7 @@ public void committedAndUncommittedOfTheSameSessionRaceTest() throws Exception {
      * i.e., 5 sessions, each has different amount or read requests, followed by
      * single write and afterwards single read. The idea is to check that all of
      * the reads that can be processed concurrently do so, and that none of the
-     * uncommited requests, followed by the reads are processed.
+     * uncommitted requests, followed by the reads are processed.
      */
     @Test
     public void processAsMuchUncommittedRequestsAsPossibleTest() throws Exception {
@@ -224,7 +224,7 @@ public void processAsMuchUncommittedRequestsAsPossibleTest() throws Exception {
      */
     @Test
     public void processAllFollowingUncommittedAfterFirstCommitTest() throws Exception {
-        final String path = "/testUncommittedFollowingCommited";
+        final String path = "/testUncommittedFollowingCommitted";
         Set<Request> shouldBeInPending = new HashSet<>();
         Set<Request> shouldBeProcessedAfterPending = new HashSet<>();
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FuzzySnapshotRelatedTest.java
Patch:
@@ -177,7 +177,7 @@ public void process(String path) {
     }
 
     /**
-     * It's possibel during SNAP sync, the parent is serialized before the
+     * It's possible during SNAP sync, the parent is serialized before the
      * child get deleted during sending the snapshot over.
      *
      * In which case, we need to make sure the pzxid get correctly updated

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumDigestTest.java
Patch:
@@ -179,11 +179,11 @@ public void testDigestMismatchesWhenTxnLost() throws Exception {
         // start the follower and observer to have a diff sync
         startServers(targets);
 
-        long misMatchCount = getMismatchDigestCount();
-        assertNotEquals(0L, misMatchCount);
+        long mismatchCount = getMismatchDigestCount();
+        assertNotEquals(0L, mismatchCount);
 
         triggerOps(leader, "/p2");
-        assertNotEquals(misMatchCount, getMismatchDigestCount());
+        assertNotEquals(mismatchCount, getMismatchDigestCount());
     }
 
     private void stopServers(List<Integer> sids) throws InterruptedException {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java
Patch:
@@ -194,7 +194,7 @@ public void testParseBoolean() throws IOException, ConfigException {
         zkProp.setProperty("localSessionsEnabled", "yes");
         try {
             quorumPeerConfig.parseProperties(zkProp);
-            fail("Must throw exception as 'yes' is not accpetable for parseBoolean!");
+            fail("Must throw exception as 'yes' is not acceptable for parseBoolean!");
         } catch (ConfigException e) {
             // expected
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -309,7 +309,7 @@ public void testHighestZxidJoinLate() throws Exception {
 
         assertEquals(output[0], 1, "Expecting old value 1 since 2 isn't committed yet");
 
-        // Do some other update, so we bump the maxCommttedZxid
+        // Do some other update, so we bump the maxCommittedZxid
         // by setting the value to 2
         servers.zk[nonleader].setData(path + nonleader, input, -1);
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java
Patch:
@@ -95,7 +95,7 @@ public static class MainThread implements Runnable {
         final File tmpDir;
 
         public static final int UNSET_STATIC_CLIENTPORT = -1;
-        // standalone mode doens't need myid
+        // standalone mode doesn't need myid
         public static final int UNSET_MYID = -1;
 
         volatile TestQPMain main;

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java
Patch:
@@ -195,7 +195,7 @@ public void setup() throws Exception {
 
         rootKeyPair = createKeyPair();
         contentSigner = new JcaContentSignerBuilder("SHA256WithRSAEncryption").build(rootKeyPair.getPrivate());
-        rootCertificate = createSelfSignedCertifcate(rootKeyPair);
+        rootCertificate = createSelfSignedCertificate(rootKeyPair);
 
         // Write the truststore
         KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
@@ -304,7 +304,7 @@ public void handle(com.sun.net.httpserver.HttpExchange httpExchange) throws IOEx
 
     }
 
-    private X509Certificate createSelfSignedCertifcate(KeyPair keyPair) throws Exception {
+    private X509Certificate createSelfSignedCertificate(KeyPair keyPair) throws Exception {
         X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);
         nameBuilder.addRDN(BCStyle.CN, HOSTNAME);
         BigInteger serialNumber = new BigInteger(128, new Random());

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SyncRequestProcessorMetricTest.java
Patch:
@@ -64,15 +64,15 @@ public void setup() throws Exception {
         }).when(nextProcessor).processRequest(any(Request.class));
     }
 
-    private Request createRquest(long sessionId, int xid) {
+    private Request createRequest(long sessionId, int xid) {
         return new Request(null, sessionId, xid, ZooDefs.OpCode.setData, RequestRecord.fromBytes(new byte[10]), null);
     }
 
     @Test
     public void testSyncProcessorMetrics() throws Exception {
         SyncRequestProcessor syncProcessor = new SyncRequestProcessor(zks, nextProcessor);
         for (int i = 0; i < 500; i++) {
-            syncProcessor.processRequest(createRquest(1, i));
+            syncProcessor.processRequest(createRequest(1, i));
         }
 
         Map<String, Object> values = MetricsUtils.currentServerMetrics();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AdHashTest.java
Patch:
@@ -52,7 +52,7 @@ private static void removeListOfDigests(AdHash hash, List<Long> digests) {
     }
 
     /**
-     * Test thhe add and remove digest from AdHash is working as expected.
+     * Test the add and remove digest from AdHash is working as expected.
      */
     @Test
     public void testAdHash() throws Exception {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java
Patch:
@@ -553,7 +553,7 @@ private void startServer(int serverId) throws Exception {
         Set<ObjectName> children = JMXEnv.ensureParent("InMemoryDataTree", "StandaloneServer_port");
         // Remove beans which are related to zk client sessions. Strong
         // assertions cannot be done for these client sessions because
-        // registeration of these beans with server will happen only on their
+        // registration of these beans with server will happen only on their
         // respective reconnection interval
         verifyUnexpectedBeans(children);
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java
Patch:
@@ -262,7 +262,7 @@ public void process(WatchedEvent event) {
      * in the right order.
      */
     @Test
-    public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {
+    public void testMultipleWatcherObjs() throws IOException, InterruptedException, KeeperException {
         ZooKeeper zk = createClient(new CountdownWatcher(), hostPort);
         try {
             MyWatcher[] watchers = new MyWatcher[100];

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/GetProposalFromTxnTest.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.apache.zookeeper.test;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import java.io.File;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Iterator;
 import org.apache.jute.Record;
 import org.apache.zookeeper.CreateMode;
@@ -117,7 +117,7 @@ public void testGetProposalFromTxn() throws Exception {
         }
 
         // All zxid should match what we created
-        assertTrue(Arrays.equals(zxids, retrievedZxids.toArray(new Long[0])), "Zxids missmatches");
+        assertArrayEquals(zxids, retrievedZxids.toArray(new Long[0]), "Zxids mismatches");
 
         // There should be 2000 create requests
         assertTrue((createCount == MSG_COUNT), "create proposal count == " + MSG_COUNT);

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LoadFromLogNoServerTest.java
Patch:
@@ -104,7 +104,7 @@ public void testTxnFailure() throws Exception {
 
     /*
      * Does create/delete depending on the type and verifies
-     * if cversion before the operation is 1 less than cversion afer.
+     * if cversion before the operation is 1 less than cversion after.
      */
     private void doOp(FileTxnSnapLog logFile, int type, String path, DataTree dt, DataNode parent, int cversion) throws Exception {
         int lastSlash = path.lastIndexOf('/');

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LocalSessionRequestTest.java
Patch:
@@ -71,7 +71,7 @@ public void testLocalSessionsOnLeader() throws Exception {
     }
 
     /**
-     * Walk through the target peer commmittedLog.
+     * Walk through the target peer committedLog.
      * @param sessionId
      * @param peerId
      */

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java
Patch:
@@ -571,7 +571,7 @@ public void testUpdateConflict(boolean useAsync) throws Exception {
     @ValueSource(booleans = {true, false})
     public void testDeleteUpdateConflict(boolean useAsync) throws Exception {
 
-        /* Delete of a node folowed by an update of the (now) deleted node */
+        /* Delete of a node followed by an update of the (now) deleted node */
         try {
             multi(zk, Arrays.asList(
                     Op.create("/multi", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT),
@@ -590,7 +590,7 @@ public void testDeleteUpdateConflict(boolean useAsync) throws Exception {
     @ParameterizedTest
     @ValueSource(booleans = {true, false})
     public void testGetResults(boolean useAsync) throws Exception {
-        /* Delete of a node folowed by an update of the (now) deleted node */
+        /* Delete of a node followed by an update of the (now) deleted node */
         Iterable<Op> ops = Arrays.asList(
                 Op.create("/multi", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT),
                 Op.delete("/multi", 0),

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverTest.java
Patch:
@@ -56,7 +56,7 @@ public void testObserverOnly() throws Exception {
      * (and will not come up with standalone server).
      */
     @Test
-    public void testObserverWithStandlone() throws Exception {
+    public void testObserverWithStandalone() throws Exception {
         ClientBase.setupTestEnv();
         final int CLIENT_PORT_QP1 = PortAssignment.unique();
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumOracleMajTest.java
Patch:
@@ -69,13 +69,13 @@ public void testMajQuorums() throws Throwable {
             s = s2;
         }
 
-        noDropConectionTest(s);
+        noDropConnectionTest(s);
 
         dropConnectionTest(s, leader);
 
     }
 
-    private void noDropConectionTest(QuorumPeer s) {
+    private void noDropConnectionTest(QuorumPeer s) {
         Leader.Proposal p = new Leader.Proposal();
 
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumTest.java
Patch:
@@ -120,7 +120,7 @@ public void testViewContains() {
         // Test view contains other servers
         assertTrue(qb.s1.viewContains(qb.s2.getMyId()));
 
-        // Test view does not contain non-existant servers
+        // Test view does not contain non-existent servers
         assertFalse(qb.s1.viewContains(-1L));
     }
 
@@ -178,7 +178,7 @@ public void testLeaderShutdown() throws IOException, InterruptedException, Keepe
 
     @Test
     public void testMultipleWatcherObjs() throws IOException, InterruptedException, KeeperException {
-        ct.testMutipleWatcherObjs();
+        ct.testMultipleWatcherObjs();
     }
 
     /**

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ReconfigTest.java
Patch:
@@ -553,7 +553,7 @@ public void testRoleChange() throws Exception {
 
         // during first and second iteration, leavingIndex will correspond to a
         // follower
-        // during third and fouth iteration leavingIndex will be the index of
+        // during third and fourth iteration leavingIndex will be the index of
         // the leader
         int changingIndex = (leaderIndex == 1) ? 2 : 1;
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/RecoveryTest.java
Patch:
@@ -55,7 +55,7 @@ public class RecoveryTest extends ZKTestCase implements Watcher {
      * server to restart within the connection timeout period.
      *
      * Also note that the client latches are used to eliminate any chance
-     * of spurrious connectionloss exceptions on the read ops. Specifically
+     * of spurious connectionloss exceptions on the read ops. Specifically
      * a sync operation will throw this exception if the server goes down
      * (as recognized by the client) during the operation. If the operation
      * occurs after the server is down, but before the client recognizes

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ServerCnxnTest.java
Patch:
@@ -114,7 +114,7 @@ private static StringBuilder readLine(BufferedReader reader) {
             // After the socket is closed, when the client tries to read a
             // line of text it will throw java.net.SocketException.
             // @see jira issue ZOOKEEPER-1862
-            LOG.info("Connnection is expired", ioe);
+            LOG.info("Connection is expired", ioe);
         }
         return sb;
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionInvalidationTest.java
Patch:
@@ -41,7 +41,7 @@ public class SessionInvalidationTest extends ClientBase {
      *
      * We're using our own marshalling here in order to force an operation
      * after the session is closed (ZooKeeper.class will not allow this). Also
-     * by filling the pipe with operations it increases the likelyhood that
+     * by filling the pipe with operations it increases the likelihood that
      * the server will process the create before FinalRequestProcessor
      * removes the session from the tracker.
      */

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java
Patch:
@@ -121,8 +121,8 @@ private DisconnectableZooKeeper createClient(int timeout, CountdownWatcher watch
     // TODO this test is failing due to client close race condition fixing in separate patch for ZOOKEEPER-63
     //    /**
     //     * this test checks to see if the sessionid that was created for the
-    //     * first zookeeper client can be reused for the second one immidiately
-    //     * after the first client closes and the new client resues them.
+    //     * first zookeeper client can be reused for the second one immediately
+    //     * after the first client closes and the new client reuses them.
     //     * @throws IOException
     //     * @throws InterruptedException
     //     * @throws KeeperException

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionUpgradeTest.java
Patch:
@@ -94,7 +94,7 @@ private void testLocalSessionsWithoutEphemeral(boolean testLeader) throws Except
         byte[] localSessionPwd = zk.getSessionPasswd().clone();
 
         // Try connecting with the same session id on a different
-        // server.  This should fail since it is a local sesion.
+        // server.  This should fail since it is a local session.
         try {
             watcher.reset();
             DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SledgeHammer.java
Patch:
@@ -58,9 +58,9 @@ public void run() {
             for (int i = 0; i < count; i++) {
                 try {
                     System.out.print(i + "\r");
-                    List<String> childs = zk.getChildren("/hammers", false);
-                    Collections.shuffle(childs);
-                    for (String s : childs) {
+                    List<String> children = zk.getChildren("/hammers", false);
+                    Collections.shuffle(children);
+                    for (String s : children) {
                         if (s.startsWith("hammer-")) {
                             s = "/hammers/" + s;
                             zk.setData(s, tag, -1);

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/StaticHostProviderTest.java
Patch:
@@ -827,7 +827,7 @@ public InetAddress[] getAllByName(String name) {
         assertFalse(resolvedThird.isUnresolved(), "HostProvider should return resolved addresses");
         assertThat("Bad IP address returned", ipList, hasItems(resolvedThird.getAddress().getHostAddress()));
 
-        verify(spyResolver, times(3)).getAllByName("www.apache.org");  // resolution occured every time
+        verify(spyResolver, times(3)).getAllByName("www.apache.org");  // resolution occurred every time
     }
 
     @Test

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java
Patch:
@@ -41,7 +41,7 @@ public OldStatsTrack() {
          * the stat string should be of the form count=int,bytes=long
          * if stats is called with null the count and bytes are initialized
          * to -1.
-         * @param stats the stat string to be intialized with
+         * @param stats the stat string to be initialized with
          */
         public OldStatsTrack(String stats) {
             if (stats == null) {
@@ -85,7 +85,7 @@ public long getBytes() {
         }
 
         /**
-         * set teh bytes for this stat tracker.
+         * set the bytes for this stat tracker.
          *
          * @param bytes
          *            the bytes to set with

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java
Patch:
@@ -702,7 +702,7 @@ private void sendNotifications() {
                 qv.toString().getBytes(UTF_8));
 
             LOG.debug(
-                "Sending Notification: {} (n.leader), 0x{} (n.peerEpoch), 0x{} (n.zxid), 0x{} (n.round), {} (recipient),"
+                "Sending Notification: {} (n.leader), 0x{} (n.zxid), 0x{} (n.peerEpoch), 0x{} (n.round), {} (recipient),"
                     + " {} (myid) ",
                 proposedLeader,
                 Long.toHexString(proposedZxid),

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -957,7 +957,7 @@ protected long queueCommittedProposals(Iterator<Proposal> itr, long peerLastZxid
         while (itr.hasNext()) {
             Proposal propose = itr.next();
 
-            long packetZxid = propose.packet.getZxid();
+            long packetZxid = propose.getZxid();
             // abort if we hit the limit
             if ((maxZxid != null) && (packetZxid > maxZxid)) {
                 break;
@@ -1020,7 +1020,7 @@ protected long queueCommittedProposals(Iterator<Proposal> itr, long peerLastZxid
 
             // Since this is already a committed proposal, we need to follow
             // it by a commit packet
-            queuePacket(propose.packet);
+            queuePacket(propose.getQuorumPacket());
             queueOpPacket(Leader.COMMIT, packetZxid);
             queuedZxid = packetZxid;
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/GetProposalFromTxnTest.java
Patch:
@@ -107,7 +107,7 @@ public void testGetProposalFromTxn() throws Exception {
         while (itr.hasNext()) {
             Proposal proposal = itr.next();
             TxnLogEntry logEntry = SerializeUtils.deserializeTxn(
-                    proposal.packet.getData());
+                    proposal.getQuorumPacket().getData());
             TxnHeader hdr = logEntry.getHeader();
             Record rec = logEntry.getTxn();
             if (hdr.getType() == OpCode.create) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LocalSessionRequestTest.java
Patch:
@@ -82,8 +82,8 @@ private void validateRequestLog(long sessionId, int peerId) {
         QuorumPeer peer = qb.getPeerList().get(peerId);
         ZKDatabase db = peer.getActiveServer().getZKDatabase();
         for (Proposal p : db.getCommittedLog()) {
-            assertFalse(p.request.sessionId == sessionId,
-                    "Should not see " + Request.op2String(p.request.type)
+            assertFalse(p.getRequest().sessionId == sessionId,
+                    "Should not see " + Request.op2String(p.getRequest().type)
                             + " request from local session 0x" + session + " on the " + peerType);
         }
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/CRCTest.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.zookeeper.server.persistence.TxnLog.TxnIterator;
 import org.apache.zookeeper.test.ClientBase;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -102,8 +103,7 @@ private boolean getCheckSum(File snapFile) throws IOException {
      * @throws Exception
      */
     @Test
-    public void testChecksums() throws Exception {
-        File tmpDir = ClientBase.createTmpDir();
+    public void testChecksums(@TempDir File tmpDir) throws Exception {
         ClientBase.setupTestEnv();
         ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
         SyncRequestProcessor.setSnapCount(150);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java
Patch:
@@ -64,6 +64,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 
 
 public class PrepRequestProcessorTest extends ClientBase {
@@ -81,8 +82,7 @@ public class PrepRequestProcessorTest extends ClientBase {
     private boolean isStandaloneEnabledPreviously;
 
     @BeforeEach
-    public void setup() throws Exception {
-        File tmpDir = ClientBase.createTmpDir();
+    public void setup(@TempDir File tmpDir) throws Exception {
         ClientBase.setupTestEnv();
         zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
         SyncRequestProcessor.setSnapCount(100);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java
Patch:
@@ -27,12 +27,12 @@
 import org.apache.jute.Record;
 import org.apache.zookeeper.ZooDefs;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
-import org.apache.zookeeper.test.ClientBase;
 import org.apache.zookeeper.txn.SetDataTxn;
 import org.apache.zookeeper.txn.TxnHeader;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 
 public class ZooKeeperServerBeanTest {
 
@@ -47,9 +47,8 @@ public void teardown() throws Exception {
     }
 
     @Test
-    public void testTxnLogElapsedSyncTime() throws IOException {
+    public void testTxnLogElapsedSyncTime(@TempDir File tmpDir) throws IOException {
 
-        File tmpDir = ClientBase.createEmptyTestDir();
         FileTxnSnapLog fileTxnSnapLog = new FileTxnSnapLog(new File(tmpDir, "data"), new File(tmpDir, "data_txnlog"));
 
         ZooKeeperServer zks = new ZooKeeperServer();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java
Patch:
@@ -21,8 +21,8 @@
 import java.io.File;
 import org.apache.zookeeper.proto.ConnectRequest;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
-import org.apache.zookeeper.test.ClientBase;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 
 public class ZooKeeperServerCreationTest {
 
@@ -31,8 +31,7 @@ public class ZooKeeperServerCreationTest {
      * that all needed fields are initialized properly, etc.
      */
     @Test
-    public void testDefaultConstructor() throws Exception {
-        File tmpDir = ClientBase.createEmptyTestDir();
+    public void testDefaultConstructor(@TempDir File tmpDir) throws Exception {
         FileTxnSnapLog fileTxnSnapLog = new FileTxnSnapLog(new File(tmpDir, "data"), new File(tmpDir, "data_txnlog"));
 
         ZooKeeperServer zks = new ZooKeeperServer() {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java
Patch:
@@ -43,11 +43,11 @@
 import org.apache.zookeeper.server.quorum.QuorumPeer.LearnerType;
 import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;
 import org.apache.zookeeper.server.quorum.flexible.QuorumVerifier;
-import org.apache.zookeeper.test.ClientBase;
 import org.apache.zookeeper.txn.TxnHeader;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 import org.mockito.Mockito;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
@@ -60,6 +60,8 @@ public class LeaderBeanTest {
     private LeaderZooKeeperServer zks;
     private QuorumPeer qp;
     private QuorumVerifier quorumVerifierMock;
+    @TempDir
+    File tmpDir;
 
     public static Map<Long, QuorumServer> getMockedPeerViews(long myId) {
         int clientPort = PortAssignment.unique();
@@ -80,7 +82,6 @@ public void setUp() throws IOException, X509Exception {
         when(quorumVerifierMock.getAllMembers()).thenReturn(getMockedPeerViews(qp.getMyId()));
 
         qp.setQuorumVerifier(quorumVerifierMock, false);
-        File tmpDir = ClientBase.createEmptyTestDir();
         fileTxnSnapLog = new FileTxnSnapLog(new File(tmpDir, "data"), new File(tmpDir, "data_txnlog"));
         ZKDatabase zkDb = new ZKDatabase(fileTxnSnapLog);
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderWithObserverTest.java
Patch:
@@ -29,22 +29,22 @@
 import java.util.Map;
 import java.util.Set;
 import org.apache.zookeeper.PortAssignment;
-import org.apache.zookeeper.test.ClientBase;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 
 public class LeaderWithObserverTest {
 
     QuorumPeer peer;
     Leader leader;
+    @TempDir
     File tmpDir;
     long participantId;
     long observerId;
 
     @BeforeEach
     public void setUp() throws Exception {
-        tmpDir = ClientBase.createTmpDir();
         peer = createQuorumPeer(tmpDir);
         participantId = 1;
         Map<Long, QuorumPeer.QuorumServer> peers = peer.getQuorumVerifier().getAllMembers();
@@ -60,7 +60,6 @@ public void setUp() throws Exception {
     @AfterEach
     public void tearDown() {
         leader.shutdown("end of test");
-        tmpDir.delete();
     }
 
     @Test

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.zookeeper.PortAssignment;
 import org.apache.zookeeper.server.quorum.QuorumPeer.LearnerType;
 import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;
-import org.apache.zookeeper.test.ClientBase;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 
 public class QuorumPeerTest {
 
@@ -45,9 +45,8 @@ public class QuorumPeerTest {
      * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2301
      */
     @Test
-    public void testQuorumPeerListendOnSpecifiedClientIP() throws IOException {
+    public void testQuorumPeerListendOnSpecifiedClientIP(@TempDir File dataDir) throws IOException {
         long myId = 1;
-        File dataDir = ClientBase.createTmpDir();
         int clientPort = PortAssignment.unique();
         Map<Long, QuorumServer> peersView = new HashMap<>();
         InetAddress clientIP = InetAddress.getLoopbackAddress();

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ACLCountTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.zookeeper.server.SyncRequestProcessor;
 import org.apache.zookeeper.server.ZooKeeperServer;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -58,8 +59,7 @@ public class ACLCountTest extends ZKTestCase {
      * since there are only 2 *unique* ACL values.
      */
     @Test
-    public void testAclCount() throws Exception {
-        File tmpDir = ClientBase.createTmpDir();
+    public void testAclCount(@TempDir File tmpDir) throws Exception {
         ClientBase.setupTestEnv();
         ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
         SyncRequestProcessor.setSnapCount(1000);

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientPortBindTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.zookeeper.server.ServerCnxnFactory;
 import org.apache.zookeeper.server.ZooKeeperServer;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -44,7 +45,7 @@ public class ClientPortBindTest extends ZKTestCase {
      * Verify that the server binds to the specified address
      */
     @Test
-    public void testBindByAddress() throws Exception {
+    public void testBindByAddress(@TempDir File tmpDir) throws Exception {
         String bindAddress = null;
         Enumeration<NetworkInterface> intfs = NetworkInterface.getNetworkInterfaces();
         // if we have a loopback and it has an address use it
@@ -78,8 +79,6 @@ public void testBindByAddress() throws Exception {
         final String HOSTPORT = bindAddress + ":" + PORT;
         LOG.info("Using {} as the host/port", HOSTPORT);
 
-        File tmpDir = ClientBase.createTmpDir();
-
         ClientBase.setupTestEnv();
         ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/RecoveryTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.zookeeper.server.SyncRequestProcessor;
 import org.apache.zookeeper.server.ZooKeeperServer;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -61,8 +62,7 @@ public class RecoveryTest extends ZKTestCase implements Watcher {
      * that the server is down (ping) then the op will throw connectionloss.
      */
     @Test
-    public void testRecovery() throws Exception {
-        File tmpDir = ClientBase.createTmpDir();
+    public void testRecovery(@TempDir File tmpDir) throws Exception {
 
         ClientBase.setupTestEnv();
         ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java
Patch:
@@ -135,7 +135,7 @@ public boolean accept(File f) {
 
         }
         // add all non-excluded log files
-        File[] logs = txnLog.getDataDir().listFiles(new MyFileFilter(PREFIX_LOG));
+        File[] logs = txnLog.getDataLogDir().listFiles(new MyFileFilter(PREFIX_LOG));
         List<File> files = new ArrayList<>();
         if (logs != null) {
             files.addAll(Arrays.asList(logs));

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
Patch:
@@ -204,11 +204,11 @@ public boolean accept(File dir, String name) {
     }
 
     /**
-     * get the datadir used by this filetxn
+     * get the data log dir used by this filetxn
      * snap log
-     * @return the data dir
+     * @return the data log dir
      */
-    public File getDataDir() {
+    public File getDataLogDir() {
         return this.dataDir;
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java
Patch:
@@ -198,7 +198,7 @@ public void testNonRecoverableError() throws Exception {
         // inject problem in server
         ZooKeeperServer zooKeeperServer = main.getCnxnFactory().getZooKeeperServer();
         FileTxnSnapLog snapLog = zooKeeperServer.getTxnLogFactory();
-        FileTxnSnapLog fileTxnSnapLogWithError = new FileTxnSnapLog(snapLog.getDataDir(), snapLog.getSnapDir()) {
+        FileTxnSnapLog fileTxnSnapLogWithError = new FileTxnSnapLog(snapLog.getDataLogDir(), snapLog.getSnapDir()) {
             @Override
             public void commit() throws IOException {
                 throw new IOException("Input/output error");

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java
Patch:
@@ -177,7 +177,7 @@ public void testWithAutoCreateDataDir() throws IOException {
 
         assertTrue(logDir.exists());
         assertTrue(snapDir.exists());
-        assertTrue(fileTxnSnapLog.getDataDir().exists());
+        assertTrue(fileTxnSnapLog.getDataLogDir().exists());
         assertTrue(fileTxnSnapLog.getSnapDir().exists());
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -935,7 +935,7 @@ public void testDataDirAndDataLogDir() throws Exception {
 
             // Assert
             FileTxnSnapLog txnFactory = qpMain.getQuorumPeer().getTxnFactory();
-            assertEquals(Paths.get(dataLogDir.getAbsolutePath(), "version-2").toString(), txnFactory.getDataDir().getAbsolutePath());
+            assertEquals(Paths.get(dataLogDir.getAbsolutePath(), "version-2").toString(), txnFactory.getDataLogDir().getAbsolutePath());
             assertEquals(Paths.get(dataDir.getAbsolutePath(), "version-2").toString(), txnFactory.getSnapDir().getAbsolutePath());
         } finally {
             FileUtils.deleteDirectory(dataDir);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java
Patch:
@@ -368,7 +368,7 @@ public boolean isAlive() {
         }
 
         public void reinitialize() throws IOException {
-            File dataDir = main.quorumPeer.getTxnFactory().getDataDir();
+            File dataDir = main.quorumPeer.getTxnFactory().getDataLogDir();
             ClientBase.recursiveDelete(dataDir);
             ClientBase.createInitializeFile(dataDir.getParentFile());
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/WatchLeakTest.java
Patch:
@@ -102,7 +102,7 @@ public Boolean answer(InvocationOnMock invocation) throws Throwable {
         QuorumPeer quorumPeer = mock(QuorumPeer.class);
         FileTxnSnapLog logfactory = mock(FileTxnSnapLog.class);
         // Directories are not used but we need it to avoid NPE
-        when(logfactory.getDataDir()).thenReturn(new File(""));
+        when(logfactory.getDataLogDir()).thenReturn(new File(""));
         when(logfactory.getSnapDir()).thenReturn(new File(""));
         FollowerZooKeeperServer fzks = null;
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java
Patch:
@@ -575,7 +575,7 @@ public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f)
                 File tmpDir = File.createTempFile("test", "dir", testData);
                 tmpDir.delete();
                 tmpDir.mkdir();
-                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();
+                File logDir = f.fzk.getTxnLogFactory().getDataLogDir().getParentFile();
                 File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();
                 //Spy on ZK so we can check if a snapshot happened or not.
                 f.zk = spy(f.zk);
@@ -709,7 +709,7 @@ public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f)
                 File tmpDir = File.createTempFile("test", "dir", testData);
                 tmpDir.delete();
                 tmpDir.mkdir();
-                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();
+                File logDir = f.fzk.getTxnLogFactory().getDataLogDir().getParentFile();
                 File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();
                 //Spy on ZK so we can check if a snapshot happened or not.
                 f.zk = spy(f.zk);
@@ -940,7 +940,7 @@ public void converseWithObserver(InputArchive ia, OutputArchive oa, Observer o)
                 File tmpDir = File.createTempFile("test", "dir", testData);
                 tmpDir.delete();
                 tmpDir.mkdir();
-                File logDir = o.zk.getTxnLogFactory().getDataDir().getParentFile();
+                File logDir = o.zk.getTxnLogFactory().getDataLogDir().getParentFile();
                 File snapDir = o.zk.getTxnLogFactory().getSnapDir().getParentFile();
                 try {
                     assertEquals(0, o.self.getAcceptedEpoch());

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/NonRecoverableErrorTest.java
Patch:
@@ -93,7 +93,7 @@ public void testZooKeeperServiceAvailableOnLeader() throws Exception {
 
         // inject problem in leader
         FileTxnSnapLog snapLog = leader.getActiveServer().getTxnLogFactory();
-        FileTxnSnapLog fileTxnSnapLogWithError = new FileTxnSnapLog(snapLog.getDataDir(), snapLog.getSnapDir()) {
+        FileTxnSnapLog fileTxnSnapLogWithError = new FileTxnSnapLog(snapLog.getDataLogDir(), snapLog.getSnapDir()) {
             @Override
             public void commit() throws IOException {
                 throw new IOException("Input/output error");

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/RepeatStartupTest.java
Patch:
@@ -49,7 +49,7 @@ public void testFail() throws Exception {
         QuorumBase.shutdown(qb.s4);
         QuorumBase.shutdown(qb.s5);
         String hp = qb.hostPort.split(",")[0];
-        ZooKeeperServer zks = new ZooKeeperServer(qb.s1.getTxnFactory().getSnapDir(), qb.s1.getTxnFactory().getDataDir(), 3000);
+        ZooKeeperServer zks = new ZooKeeperServer(qb.s1.getTxnFactory().getSnapDir(), qb.s1.getTxnFactory().getDataLogDir(), 3000);
         final int PORT = Integer.parseInt(hp.split(":")[1]);
         ServerCnxnFactory factory = ServerCnxnFactory.createFactory(PORT, -1);
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/TruncateTest.java
Patch:
@@ -121,7 +121,7 @@ public void testTruncationNullLog() throws Exception {
             append(zkdb, i);
         }
         zkdb.close();
-        File[] logs = snaplog.getDataDir().listFiles();
+        File[] logs = snaplog.getDataLogDir().listFiles();
         for (int i = 0; i < logs.length; i++) {
             LOG.debug("Deleting: {}", logs[i].getName());
             assertTrue(logs[i].delete(), "Failed to delete log file: " + logs[i].getName());

File: zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java
Patch:
@@ -80,8 +80,9 @@ public void testValidateFileInputDirectory() throws Exception {
 
     @Test
     public void testUnreadableFileInput() throws Exception {
-        //skip this test on Windows, coverage on Linux
-        assumeTrue(!org.apache.zookeeper.Shell.WINDOWS);
+        //skip this test on Windows and WSL, coverage on Linux
+        assumeTrue("Skipping this test on Windows and WSL",
+                !(org.apache.zookeeper.Shell.WINDOWS || org.apache.zookeeper.Shell.isWsl()));
         File file = File.createTempFile("test", ".junit", testData);
         file.setReadable(false, false);
         file.deleteOnExit();

File: zookeeper-server/src/main/java/org/apache/zookeeper/Environment.java
Patch:
@@ -85,9 +85,9 @@ public static List<Entry> list() {
         // Get memory information.
         Runtime runtime = Runtime.getRuntime();
         int mb = 1024 * 1024;
-        put(l, "os.memory.free", runtime.freeMemory() / mb + "MB");
-        put(l, "os.memory.max", runtime.maxMemory() / mb + "MB");
-        put(l, "os.memory.total", runtime.totalMemory() / mb + "MB");
+        put(l, "jvm.memory.free", runtime.freeMemory() / mb + "MB");
+        put(l, "jvm.memory.max", runtime.maxMemory() / mb + "MB");
+        put(l, "jvm.memory.total", runtime.totalMemory() / mb + "MB");
 
         return l;
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java
Patch:
@@ -155,7 +155,7 @@ public void testDump() throws IOException, InterruptedException {
 
     @Test
     public void testEnvironment() throws IOException, InterruptedException {
-        testCommand("environment", new Field("zookeeper.version", String.class), new Field("host.name", String.class), new Field("java.version", String.class), new Field("java.vendor", String.class), new Field("java.home", String.class), new Field("java.class.path", String.class), new Field("java.library.path", String.class), new Field("java.io.tmpdir", String.class), new Field("java.compiler", String.class), new Field("os.name", String.class), new Field("os.arch", String.class), new Field("os.version", String.class), new Field("user.name", String.class), new Field("user.home", String.class), new Field("user.dir", String.class), new Field("os.memory.free", String.class), new Field("os.memory.max", String.class), new Field("os.memory.total", String.class));
+        testCommand("environment", new Field("zookeeper.version", String.class), new Field("host.name", String.class), new Field("java.version", String.class), new Field("java.vendor", String.class), new Field("java.home", String.class), new Field("java.class.path", String.class), new Field("java.library.path", String.class), new Field("java.io.tmpdir", String.class), new Field("java.compiler", String.class), new Field("os.name", String.class), new Field("os.arch", String.class), new Field("os.version", String.class), new Field("user.name", String.class), new Field("user.home", String.class), new Field("user.dir", String.class), new Field("jvm.memory.free", String.class), new Field("jvm.memory.max", String.class), new Field("jvm.memory.total", String.class));
     }
 
     @Test

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -655,7 +655,7 @@ public long getDataDirSize() {
         if (zkDb == null) {
             return 0L;
         }
-        File path = zkDb.snapLog.getDataDir();
+        File path = zkDb.snapLog.getSnapDir();
         return getDirSize(path);
     }
 
@@ -664,7 +664,7 @@ public long getLogDirSize() {
         if (zkDb == null) {
             return 0L;
         }
-        File path = zkDb.snapLog.getSnapDir();
+        File path = zkDb.snapLog.getDataDir();
         return getDirSize(path);
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
Patch:
@@ -51,10 +51,10 @@
  */
 public class FileTxnSnapLog {
 
-    //the directory containing the
+    //the directory containing
     //the transaction logs
     final File dataDir;
-    //the directory containing the
+    //the directory containing
     //the snapshot directory
     final File snapDir;
     TxnLog txnLog;

File: zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/ExportJvmInfoTest.java
Patch:
@@ -19,15 +19,14 @@
 package org.apache.zookeeper.metrics.prometheus;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import io.prometheus.client.CollectorRegistry;
 import java.util.Properties;
 import org.junit.jupiter.api.Test;
 
 /**
  * Tests about Prometheus Metrics Provider. Please note that we are not testing
  * Prometheus but our integration.
  */
-public class ExportJvmInfoTest {
+public class ExportJvmInfoTest extends PrometheusMetricsTestBase {
 
     @Test
     public void exportInfo() throws Exception {
@@ -40,7 +39,6 @@ public void doNotExportInfo() throws Exception {
     }
 
     private void runTest(boolean exportJvmInfo) throws Exception {
-        CollectorRegistry.defaultRegistry.clear();
         PrometheusMetricsProvider provider = new PrometheusMetricsProvider();
         try {
             Properties configuration = new Properties();

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * Manage watchers and handle events generated by the {@link ClientCnxn} object.
- *
+ * <p>
  * This class is intended to be packaged-private so that it doesn't serve
  * as part of ZooKeeper client API.
  */

File: zookeeper-server/src/test/java/org/apache/zookeeper/ClientReconnectTest.java
Patch:
@@ -67,7 +67,6 @@ public void testClientReconnect() throws IOException, InterruptedException {
 
         ClientCnxnSocketNIO nioCnxn = new MockCnxn();
         ClientCnxn clientCnxn = new ClientCnxn(
-            "tmp",
             hostProvider,
             5000,
             zk.getClientConfig(),

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
Patch:
@@ -361,7 +361,6 @@ public boolean isQuorum() {
         case OpCode.deleteContainer:
         case OpCode.setACL:
         case OpCode.setData:
-        case OpCode.check:
         case OpCode.multi:
         case OpCode.reconfig:
             return true;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -181,7 +181,6 @@ protected boolean needCommit(Request request) {
         case OpCode.reconfig:
         case OpCode.multi:
         case OpCode.setACL:
-        case OpCode.check:
             return true;
         case OpCode.sync:
             return matchSyncs;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
Patch:
@@ -108,7 +108,6 @@ public void run() {
                 case OpCode.reconfig:
                 case OpCode.setACL:
                 case OpCode.multi:
-                case OpCode.check:
                     zks.getFollower().request(request);
                     break;
                 case OpCode.createSession:

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java
Patch:
@@ -109,7 +109,6 @@ public void run() {
                 case OpCode.reconfig:
                 case OpCode.setACL:
                 case OpCode.multi:
-                case OpCode.check:
                     zks.getObserver().request(request);
                     break;
                 case OpCode.createSession:

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyRequestProcessor.java
Patch:
@@ -85,7 +85,6 @@ public void run() {
                 case OpCode.reconfig:
                 case OpCode.setACL:
                 case OpCode.multi:
-                case OpCode.check:
                     sendErrorResponse(request);
                     continue;
                 case OpCode.closeSession:

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java
Patch:
@@ -147,7 +147,6 @@ static boolean isWriteOp(int requestType) {
         case ZooDefs.OpCode.reconfig:
         case ZooDefs.OpCode.setACL:
         case ZooDefs.OpCode.multi:
-        case ZooDefs.OpCode.check:
             return true;
         }
         return false;

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java
Patch:
@@ -109,10 +109,10 @@ private static boolean deleteInBatch(ZooKeeper zk, List<String> tree, int batchS
         List<Op> ops = new ArrayList<>();
         BatchedDeleteCbContext context = new BatchedDeleteCbContext(rateLimit);
         MultiCallback cb = (rc, path, ctx, opResults) -> {
-            ((BatchedDeleteCbContext) ctx).sem.release();
             if (rc != Code.OK.intValue()) {
                 ((BatchedDeleteCbContext) ctx).success.set(false);
             }
+            ((BatchedDeleteCbContext) ctx).sem.release();
         };
 
         // Delete the leaves first and eventually get rid of the root

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ReadOnlyModeTest.java
Patch:
@@ -191,6 +191,7 @@ public void testConnectionEvents() throws Exception {
 
         // Re-connect the client (in case we were connected to the shut down
         // server and the local session was not persisted).
+        watcher = new CountdownWatcher();
         zk = new ZooKeeper(qu.getConnString(), CONNECTION_TIMEOUT, watcher, true);
         long start = Time.currentElapsedTime();
         while (!(zk.getState() == States.CONNECTEDREADONLY)) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -1031,7 +1031,7 @@ protected long queueCommittedProposals(Iterator<Proposal> itr, long peerLastZxid
             // is the catch when our history older than learner and there is
             // no new txn since then. So we need an empty diff
             LOG.info(
-                "Sending TRUNC zxid=0x{}  for peer sid: {}",
+                "Sending DIFF zxid=0x{}  for peer sid: {}",
                 Long.toHexString(lastCommittedZxid),
                 getSid());
             queueOpPacket(Leader.DIFF, lastCommittedZxid);

File: zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java
Patch:
@@ -191,7 +191,7 @@ void prepare() {
     @Measurement(iterations = 3, time = 10, timeUnit = TimeUnit.SECONDS)
     public void testTriggerConcentrateWatch(InvocationState state) throws Exception {
         for (String path : state.paths) {
-            state.watchManager.triggerWatch(path, event);
+            state.watchManager.triggerWatch(path, event, WatchedEvent.NO_ZXID);
         }
     }
 
@@ -225,7 +225,7 @@ public void tearDown() {
 
             // clear all the watches
             for (String path : paths) {
-                watchManager.triggerWatch(path, event);
+                watchManager.triggerWatch(path, event, WatchedEvent.NO_ZXID);
             }
         }
     }
@@ -294,7 +294,7 @@ public void prepare() {
     @Measurement(iterations = 3, time = 10, timeUnit = TimeUnit.SECONDS)
     public void testTriggerSparseWatch(TriggerSparseWatchState state) throws Exception {
         for (String path : state.paths) {
-            state.watchManager.triggerWatch(path, event);
+            state.watchManager.triggerWatch(path, event, WatchedEvent.NO_ZXID);
         }
     }
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -902,7 +902,7 @@ void readResponse(ByteBuffer incomingBuffer) throws IOException {
                     event.setPath(clientPath);
                 }
 
-                WatchedEvent we = new WatchedEvent(event);
+                WatchedEvent we = new WatchedEvent(event, replyHdr.getZxid());
                 LOG.debug("Got {} for session id 0x{}", we, Long.toHexString(sessionId));
                 eventThread.queueEvent(we);
                 return;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -705,7 +705,7 @@ public int sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, St
      */
     @Override
     public void process(WatchedEvent event) {
-        ReplyHeader h = new ReplyHeader(ClientCnxn.NOTIFICATION_XID, -1L, 0);
+        ReplyHeader h = new ReplyHeader(ClientCnxn.NOTIFICATION_XID, event.getZxid(), 0);
         if (LOG.isTraceEnabled()) {
             ZooTrace.logTraceMessage(
                 LOG,

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java
Patch:
@@ -162,7 +162,7 @@ public int getSessionTimeout() {
 
     @Override
     public void process(WatchedEvent event) {
-        ReplyHeader h = new ReplyHeader(ClientCnxn.NOTIFICATION_XID, -1L, 0);
+        ReplyHeader h = new ReplyHeader(ClientCnxn.NOTIFICATION_XID, event.getZxid(), 0);
         if (LOG.isTraceEnabled()) {
             ZooTrace.logTraceMessage(
                 LOG,

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogMetricsTest.java
Patch:
@@ -79,8 +79,7 @@ public void testFileTxnSnapLogMetrics() throws Exception {
         }
 
         // It is possible that above writes will trigger more than one snapshot due to randomization.
-        WaitForCondition newSnapshot = () -> (long) MetricsUtils.currentServerMetrics().get("cnt_snapshottime") >= 2L;
-        waitFor("no snapshot in 10s", newSnapshot, 10);
+        waitForMetric("cnt_snapshottime", greaterThanOrEqualTo(2L), 10);
 
         // Pauses snapshot and logs more txns.
         cnxnFactory.getZooKeeperServer().getTxnLogFactory().snapLog.close();

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/UnsupportedAddWatcherTest.java
Patch:
@@ -59,12 +59,12 @@ public void removeWatcher(Watcher watcher) {
         }
 
         @Override
-        public WatcherOrBitSet triggerWatch(String path, Watcher.Event.EventType type) {
+        public WatcherOrBitSet triggerWatch(String path, Watcher.Event.EventType type, long zxid) {
             return new WatcherOrBitSet(Collections.emptySet());
         }
 
         @Override
-        public WatcherOrBitSet triggerWatch(String path, Watcher.Event.EventType type, WatcherOrBitSet suppress) {
+        public WatcherOrBitSet triggerWatch(String path, Watcher.Event.EventType type, long zxid, WatcherOrBitSet suppress) {
             return new WatcherOrBitSet(Collections.emptySet());
         }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/WatchedEventTest.java
Patch:
@@ -61,7 +61,7 @@ public void testCreatingWatchedEventFromWrapper() {
         for (EventType et : allTypes) {
             for (KeeperState ks : allStates) {
                 wep = new WatcherEvent(et.getIntValue(), ks.getIntValue(), "blah");
-                we = new WatchedEvent(wep);
+                we = new WatchedEvent(wep, WatchedEvent.NO_ZXID);
                 assertEquals(et, we.getType());
                 assertEquals(ks, we.getState());
                 assertEquals("blah", we.getPath());
@@ -75,7 +75,7 @@ public void testCreatingWatchedEventFromInvalidWrapper() {
 
         try {
             WatcherEvent wep = new WatcherEvent(-2342, -252352, "foo");
-            new WatchedEvent(wep);
+            new WatchedEvent(wep, WatchedEvent.NO_ZXID);
             fail("Was able to create WatchedEvent from bad wrapper");
         } catch (RuntimeException re) {
             // we're good

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ConnectionMetricsTest.java
Patch:
@@ -57,8 +57,8 @@ public void testRevalidateCount() throws Exception {
         util.enableLocalSession(false);
         util.startAll();
 
-        int follower1 = (int) util.getFollowerQuorumPeers().get(0).getId();
-        int follower2 = (int) util.getFollowerQuorumPeers().get(1).getId();
+        int follower1 = (int) util.getFollowerQuorumPeers().get(0).getMyId();
+        int follower2 = (int) util.getFollowerQuorumPeers().get(1).getMyId();
         LOG.info("connecting to server: {}", follower1);
         ClientBase.CountdownWatcher watcher = new ClientBase.CountdownWatcher();
         // create a connection to follower

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ConnectionMetricsTest.java
Patch:
@@ -57,8 +57,8 @@ public void testRevalidateCount() throws Exception {
         util.enableLocalSession(false);
         util.startAll();
 
-        int follower1 = (int) util.getFollowerQuorumPeers().get(0).getId();
-        int follower2 = (int) util.getFollowerQuorumPeers().get(1).getId();
+        int follower1 = (int) util.getFollowerQuorumPeers().get(0).getMyId();
+        int follower2 = (int) util.getFollowerQuorumPeers().get(1).getMyId();
         LOG.info("connecting to server: {}", follower1);
         ClientBase.CountdownWatcher watcher = new ClientBase.CountdownWatcher();
         // create a connection to follower

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -804,9 +804,7 @@ protected void syncWithLeader(long newLeaderZxid) throws Exception {
                     continue;
                 }
                 packetsCommitted.remove();
-                Request request = new Request(null, p.hdr.getClientId(), p.hdr.getCxid(), p.hdr.getType(), null, null);
-                request.setTxn(p.rec);
-                request.setHdr(p.hdr);
+                Request request = new Request(p.hdr.getClientId(), p.hdr.getCxid(), p.hdr.getType(), p.hdr, p.rec, -1);
                 request.setTxnDigest(p.digest);
                 ozk.commitRequest(request);
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -43,6 +43,7 @@
 import org.apache.zookeeper.ZooDefs.OpCode;
 import org.apache.zookeeper.common.Time;
 import org.apache.zookeeper.server.Request;
+import org.apache.zookeeper.server.RequestRecord;
 import org.apache.zookeeper.server.ServerMetrics;
 import org.apache.zookeeper.server.TxnLogProposalIterator;
 import org.apache.zookeeper.server.ZKDatabase;
@@ -702,9 +703,9 @@ public void run() {
                     bb = bb.slice();
                     Request si;
                     if (type == OpCode.sync) {
-                        si = new LearnerSyncRequest(this, sessionId, cxid, type, bb, qp.getAuthinfo());
+                        si = new LearnerSyncRequest(this, sessionId, cxid, type, RequestRecord.fromBytes(bb), qp.getAuthinfo());
                     } else {
-                        si = new Request(null, sessionId, cxid, type, bb, qp.getAuthinfo());
+                        si = new Request(null, sessionId, cxid, type, RequestRecord.fromBytes(bb), qp.getAuthinfo());
                     }
                     si.setOwner(this);
                     learnerMaster.submitLearnerRequest(si);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSyncRequest.java
Patch:
@@ -18,17 +18,17 @@
 
 package org.apache.zookeeper.server.quorum;
 
-import java.nio.ByteBuffer;
 import java.util.List;
 import org.apache.zookeeper.data.Id;
 import org.apache.zookeeper.server.Request;
+import org.apache.zookeeper.server.RequestRecord;
 
 public class LearnerSyncRequest extends Request {
 
     LearnerHandler fh;
     public LearnerSyncRequest(
-        LearnerHandler fh, long sessionId, int xid, int type, ByteBuffer bb, List<Id> authInfo) {
-        super(null, sessionId, xid, type, bb, authInfo);
+        LearnerHandler fh, long sessionId, int xid, int type, RequestRecord request, List<Id> authInfo) {
+        super(null, sessionId, xid, type, request, authInfo);
         this.fh = fh;
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/MultiOpSessionUpgradeTest.java
Patch:
@@ -117,7 +117,7 @@ private Request makeGetDataRequest(String path, long sessionId) throws IOExcepti
         GetDataRequest getDataRequest = new GetDataRequest(path, false);
         getDataRequest.serialize(boa, "request");
         ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray());
-        return new Request(null, sessionId, 1, ZooDefs.OpCode.getData, bb, new ArrayList<Id>());
+        return new Request(null, sessionId, 1, ZooDefs.OpCode.getData, RequestRecord.fromBytes(bb), new ArrayList<Id>());
     }
 
     private Request makeCreateRequest(String path, long sessionId) throws IOException {
@@ -126,7 +126,7 @@ private Request makeCreateRequest(String path, long sessionId) throws IOExceptio
         CreateRequest createRequest = new CreateRequest(path, "data".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());
         createRequest.serialize(boa, "request");
         ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray());
-        return new Request(null, sessionId, 1, ZooDefs.OpCode.create2, bb, new ArrayList<Id>());
+        return new Request(null, sessionId, 1, ZooDefs.OpCode.create2, RequestRecord.fromBytes(bb), new ArrayList<Id>());
     }
 
     private QuorumZooKeeperServer getConnectedServer(long sessionId) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperCriticalThreadMetricsTest.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.zookeeper.server;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import java.nio.ByteBuffer;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import org.apache.zookeeper.ZKTestCase;
@@ -67,7 +66,7 @@ public void testUnrecoverableErrorCountFromRequestProcessor() throws Exception {
         PrepRequestProcessor processor = new MyPrepRequestProcessor();
         processor.start();
 
-        processor.processRequest(new Request(null, 1L, 1, ZooDefs.OpCode.setData, ByteBuffer.wrap(new byte[10]), null));
+        processor.processRequest(new Request(null, 1L, 1, ZooDefs.OpCode.setData, RequestRecord.fromBytes(new byte[10]), null));
         processed.await();
 
         processor.shutdown();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.apache.zookeeper.proto.SetDataRequest;
 import org.apache.zookeeper.server.Request;
 import org.apache.zookeeper.server.RequestProcessor;
+import org.apache.zookeeper.server.RequestRecord;
 import org.apache.zookeeper.server.WorkerService;
 import org.apache.zookeeper.server.ZooKeeperServerListener;
 import org.junit.jupiter.api.AfterEach;
@@ -129,7 +130,7 @@ private Request newRequest(Record rec, int type, int sessionId, int xid) throws
         BinaryOutputArchive boa = BinaryOutputArchive.getArchive(boas);
         rec.serialize(boa, "request");
         ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray());
-        return new Request(null, sessionId, xid, type, bb, new ArrayList<Id>());
+        return new Request(null, sessionId, xid, type, RequestRecord.fromBytes(bb), new ArrayList<Id>());
     }
 
     /**

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorMetricsTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.lessThanOrEqualTo;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import java.nio.ByteBuffer;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -31,6 +30,7 @@
 import org.apache.zookeeper.metrics.MetricsUtils;
 import org.apache.zookeeper.server.Request;
 import org.apache.zookeeper.server.RequestProcessor;
+import org.apache.zookeeper.server.RequestRecord;
 import org.apache.zookeeper.server.ServerMetrics;
 import org.apache.zookeeper.server.WorkerService;
 import org.junit.jupiter.api.AfterEach;
@@ -192,11 +192,11 @@ private void checkTimeMetric(long actual, long lBoundrary, long hBoundrary) {
     }
 
     private Request createReadRequest(long sessionId, int xid) {
-        return new Request(null, sessionId, xid, ZooDefs.OpCode.getData, ByteBuffer.wrap(new byte[10]), null);
+        return new Request(null, sessionId, xid, ZooDefs.OpCode.getData, RequestRecord.fromBytes(new byte[10]), null);
     }
 
     private Request createWriteRequest(long sessionId, int xid) {
-        return new Request(null, sessionId, xid, ZooDefs.OpCode.setData, ByteBuffer.wrap(new byte[10]), null);
+        return new Request(null, sessionId, xid, ZooDefs.OpCode.setData, RequestRecord.fromBytes(new byte[10]), null);
     }
 
     private void processRequestWithWait(Request request) throws Exception {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.zookeeper.server.PrepRequestProcessor;
 import org.apache.zookeeper.server.Request;
 import org.apache.zookeeper.server.RequestProcessor;
+import org.apache.zookeeper.server.RequestRecord;
 import org.apache.zookeeper.server.ZooKeeperServer;
 import org.apache.zookeeper.test.ClientBase;
 import org.junit.jupiter.api.AfterEach;
@@ -160,7 +161,7 @@ public void sendWriteRequest() throws Exception {
                                                         + (++nodeId), new byte[0], Ids.OPEN_ACL_UNSAFE, 1);
             createReq.serialize(boa, "request");
             ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray());
-            Request req = new Request(null, sessionId, ++cxid, OpCode.create, bb, new ArrayList<Id>());
+            Request req = new Request(null, sessionId, ++cxid, OpCode.create, RequestRecord.fromBytes(bb), new ArrayList<Id>());
             zks.getFirstProcessor().processRequest(req);
 
         }
@@ -174,7 +175,7 @@ public void sendReadRequest() throws Exception {
                                                                + nodeId, false);
             getDataRequest.serialize(boa, "request");
             ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray());
-            Request req = new Request(null, sessionId, ++cxid, OpCode.getData, bb, new ArrayList<Id>());
+            Request req = new Request(null, sessionId, ++cxid, OpCode.getData, RequestRecord.fromBytes(bb), new ArrayList<Id>());
             zks.getFirstProcessor().processRequest(req);
         }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SessionUpgradeQuorumTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.zookeeper.data.Id;
 import org.apache.zookeeper.proto.CreateRequest;
 import org.apache.zookeeper.server.Request;
+import org.apache.zookeeper.server.RequestRecord;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.test.ClientBase;
 import org.junit.jupiter.api.AfterEach;
@@ -317,8 +318,7 @@ protected void request(Request request) throws IOException {
                             }
 
                             if (request.type == ZooDefs.OpCode.create && request.cnxn != null) {
-                                CreateRequest createRequest = new CreateRequest();
-                                request.readRequestRecord(createRequest);
+                                CreateRequest createRequest = request.readRequestRecord(CreateRequest::new);
                                 try {
                                     CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags());
                                     if (createMode.isEphemeral()) {
@@ -355,7 +355,7 @@ private Request createEphemeralRequest(String path, long sessionId) throws IOExc
         CreateRequest createRequest = new CreateRequest(path, "data".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());
         createRequest.serialize(boa, "request");
         ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray());
-        return new Request(null, sessionId, 1, ZooDefs.OpCode.create2, bb, new ArrayList<Id>());
+        return new Request(null, sessionId, 1, ZooDefs.OpCode.create2, RequestRecord.fromBytes(bb), new ArrayList<Id>());
     }
 
 }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SyncRequestProcessorMetricTest.java
Patch:
@@ -26,14 +26,14 @@
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import java.nio.ByteBuffer;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import org.apache.zookeeper.ZooDefs;
 import org.apache.zookeeper.metrics.MetricsUtils;
 import org.apache.zookeeper.server.Request;
 import org.apache.zookeeper.server.RequestProcessor;
+import org.apache.zookeeper.server.RequestRecord;
 import org.apache.zookeeper.server.SyncRequestProcessor;
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.ZooKeeperServer;
@@ -65,7 +65,7 @@ public void setup() throws Exception {
     }
 
     private Request createRquest(long sessionId, int xid) {
-        return new Request(null, sessionId, xid, ZooDefs.OpCode.setData, ByteBuffer.wrap(new byte[10]), null);
+        return new Request(null, sessionId, xid, ZooDefs.OpCode.setData, RequestRecord.fromBytes(new byte[10]), null);
     }
 
     @Test

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.zookeeper.data.Stat;
 import org.apache.zookeeper.proto.CreateRequest;
 import org.apache.zookeeper.server.Request;
+import org.apache.zookeeper.server.RequestRecord;
 import org.apache.zookeeper.server.quorum.QuorumPeer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -100,7 +101,7 @@ public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {
 
         LOG.info("Fake session Id: {}", Long.toHexString(fakeSessionId));
 
-        Request request = new Request(null, fakeSessionId, 0, OpCode.create, bb, new ArrayList<Id>());
+        Request request = new Request(null, fakeSessionId, 0, OpCode.create, RequestRecord.fromBytes(bb), new ArrayList<Id>());
 
         // Submit request directly to leader
         leader.getActiveServer().submitRequest(request);
@@ -138,7 +139,7 @@ public void testCreatePersistent() throws Exception {
 
         LOG.info("Local session Id: {}", Long.toHexString(locallSession));
 
-        Request request = new Request(null, locallSession, 0, OpCode.create, bb, new ArrayList<Id>());
+        Request request = new Request(null, locallSession, 0, OpCode.create, RequestRecord.fromBytes(bb), new ArrayList<Id>());
 
         // Submit request directly to leader
         leader.getActiveServer().submitRequest(request);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java
Patch:
@@ -48,7 +48,6 @@ public void submitRequest(Request si) {
         zks.setZKDatabase(new ZKDatabase(fileTxnSnapLog));
         zks.createSessionTracker();
 
-        ServerCnxnFactory cnxnFactory = ServerCnxnFactory.createFactory();
         ServerCnxn cnxn = new MockServerCnxn();
 
         ConnectRequest connReq = new ConnectRequest();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.Mockito.mock;
 import java.nio.ByteBuffer;
-import org.apache.zookeeper.server.NIOServerCnxn;
+import org.apache.zookeeper.server.MockServerCnxn;
 import org.apache.zookeeper.server.ServerCnxn;
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.ZooKeeperServer;
@@ -55,8 +55,7 @@ public void testReadOnlyZookeeperServer() {
         output.flip();
 
         ServerCnxn.CloseRequestException e = assertThrows(ServerCnxn.CloseRequestException.class, () -> {
-            final NIOServerCnxn nioServerCnxn = mock(NIOServerCnxn.class);
-            readOnlyZooKeeperServer.processConnectRequest(nioServerCnxn, output);
+            readOnlyZooKeeperServer.processConnectRequest(new MockServerCnxn(), output);
         });
         assertEquals(e.getReason(), ServerCnxn.DisconnectReason.NOT_READ_ONLY_CLIENT);
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/WatchLeakTest.java
Patch:
@@ -255,8 +255,8 @@ private ByteBuffer createConnRequest() {
         Random r = new Random(SESSION_ID ^ superSecret);
         byte[] p = new byte[16];
         r.nextBytes(p);
-        ConnectRequest conReq = new ConnectRequest(0, 1L, 30000, SESSION_ID, p);
-        MockPacket packet = new MockPacket(null, null, conReq, null, null, false);
+        ConnectRequest conReq = new ConnectRequest(0, 1L, 30000, SESSION_ID, p, false);
+        MockPacket packet = new MockPacket(null, null, conReq, null, null);
         return packet.createAndReturnBB();
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionInvalidationTest.java
Patch:
@@ -53,7 +53,7 @@ public void testCreateAfterCloseShouldFail() throws Exception {
 
             // open a connection
             boa.writeInt(44, "len");
-            ConnectRequest conReq = new ConnectRequest(0, 0, 30000, 0, new byte[16]);
+            ConnectRequest conReq = new ConnectRequest(0, 0, 30000, 0, new byte[16], false);
             conReq.serialize(boa, "connect");
 
             // close connection

File: zookeeper-server/src/test/java/org/apache/zookeeper/ZKTestCase.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 import java.io.File;
-import java.time.LocalDateTime;
+import java.time.Instant;
 import org.apache.zookeeper.util.ServiceUtils;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
@@ -100,8 +100,8 @@ public interface WaitForCondition {
      * @throws InterruptedException
      */
     public void waitFor(String msg, WaitForCondition condition, int timeout) throws InterruptedException {
-        final LocalDateTime deadline = LocalDateTime.now().plusSeconds(timeout);
-        while (LocalDateTime.now().isBefore(deadline)) {
+        final Instant deadline = Instant.now().plusSeconds(timeout);
+        while (Instant.now().isBefore(deadline)) {
             if (condition.evaluate()) {
                 return;
             }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java
Patch:
@@ -47,7 +47,7 @@ public class QuorumBase extends ClientBase {
 
     private static final Logger LOG = LoggerFactory.getLogger(QuorumBase.class);
 
-    private static final String LOCALADDR = "127.0.0.1";
+    protected static final String LOCALADDR = "127.0.0.1";
 
     private File oracleDir;
     private static final String oraclePath_0 = "/oraclePath/0/mastership/";

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
Patch:
@@ -355,7 +355,7 @@ public static String op2String(int op) {
             case OpCode.deleteContainer:
                 return "deleteContainer";
             case OpCode.createTTL:
-                return "createTtl";
+                return "createTTL";
             case OpCode.multiRead:
                 return "multiRead";
             case OpCode.auth:
@@ -364,6 +364,8 @@ public static String op2String(int op) {
                 return "setWatches";
             case OpCode.setWatches2:
                 return "setWatches2";
+            case OpCode.addWatch:
+                return "addWatch";
             case OpCode.sasl:
                 return "sasl";
             case OpCode.getEphemerals:

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/util/SerializeUtils.java
Patch:
@@ -101,7 +101,7 @@ public static TxnLogEntry deserializeTxn(byte[] txnBytes) throws IOException {
             txn = new MultiTxn();
             break;
         default:
-            throw new IOException("Unsupported Txn with type=%d" + hdr.getType());
+            throw new IOException("Unsupported Txn with type=" + hdr.getType());
         }
         if (txn != null) {
             try {

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorConnectionPropertiesDialog.java
Patch:
@@ -56,7 +56,7 @@ public class ZooInspectorConnectionPropertiesDialog extends JDialog {
     /**
      * @param lastConnectionProps
      *            - the last connection properties used. if this is the first
-     *            conneciton since starting the applications this will be the
+     *            connection since starting the applications this will be the
      *            default settings
      * @param connectionPropertiesTemplateAndLabels
      *            - the connection properties and labels to show in this dialog

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java
Patch:
@@ -54,7 +54,6 @@
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 
-import org.apache.zookeeper.inspector.gui.Toolbar.Button;
 import org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer;
 import org.apache.zookeeper.inspector.logger.LoggerFactory;
 import org.apache.zookeeper.inspector.manager.ZooInspectorManager;
@@ -90,9 +89,9 @@ public ZooInspectorNodeViewersDialog(Frame frame,
         final List<ZooInspectorNodeViewer> newViewers = new ArrayList<ZooInspectorNodeViewer>(
                 currentViewers);
         this.setLayout(new BorderLayout());
-        this.setIconImage(iconResource.get(IconResource.ICON_ChangeNodeViewers,"")
+        this.setIconImage(iconResource.get(IconResource.ICON_CHANGE_NODE_VIEWERS,"Change Node Viewers")
                 .getImage());
-        this.setTitle("About ZooInspector");
+        this.setTitle("Change Node Viewers");
         this.setModal(true);
         this.setAlwaysOnTop(true);
         this.setResizable(true);

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManager.java
Patch:
@@ -55,7 +55,7 @@ public interface ZooInspectorManager extends ZooInspectorNodeManager,
      *         {@link JComboBox} with the first selected as default.</li>
      *         <li>a {@link Map} of property keys to the label to show on the UI
      *         </li>
-     *         <ul>
+     *         </ul>
      * 
      */
     public Pair<Map<String, List<String>>, Map<String, String>> getConnectionPropertiesTemplate();

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * A Class which extends {@link ZooKeeper} and will automatically retry calls to
- * zookeeper if a {@link KeeperException.ConnectionLossException} occurs
+ * zookeeper if a {@link org.apache.zookeeper.KeeperException.ConnectionLossException} occurs.
  */
 public class ZooKeeperRetry extends ZooKeeper {
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java
Patch:
@@ -303,7 +303,7 @@ protected void initMaxCnxns() {
         maxCnxns = Integer.getInteger(ZOOKEEPER_MAX_CONNECTION, ZOOKEEPER_MAX_CONNECTION_DEFAULT);
         if (maxCnxns < 0) {
             maxCnxns = ZOOKEEPER_MAX_CONNECTION_DEFAULT;
-            LOG.warn("maxCnxns should be greater than or equal to 0, using default vlaue {}.",
+            LOG.warn("maxCnxns should be greater than or equal to 0, using default value {}.",
                     ZOOKEEPER_MAX_CONNECTION_DEFAULT);
         } else if (maxCnxns == ZOOKEEPER_MAX_CONNECTION_DEFAULT) {
             LOG.warn("maxCnxns is not configured, using default value {}.",

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -1096,7 +1096,7 @@ private void acceptConnections() {
                             break;
                         }
 
-                        LOG.error("Exception while listening", e);
+                        LOG.error("Exception while listening to address {}", address, e);
 
                         if (e instanceof SocketException) {
                             socketException.set(true);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -595,9 +595,9 @@ public void processRequest(Request request) {
             ByteBuffer bb = request.request;
             bb.rewind();
             while (bb.hasRemaining()) {
-                sb.append(Integer.toHexString(bb.get() & 0xff));
+                sb.append(String.format("%02x", (0xff & bb.get())));
             }
-            LOG.error("Dumping request buffer: 0x{}", sb.toString());
+            LOG.error("Dumping request buffer for request type {}: 0x{}", Request.op2String(request.type), sb);
             err = Code.MARSHALLINGERROR;
         }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -955,13 +955,13 @@ private void pRequestHelper(Request request) throws RequestProcessorException {
             if (bb != null) {
                 bb.rewind();
                 while (bb.hasRemaining()) {
-                    sb.append(Integer.toHexString(bb.get() & 0xff));
+                    sb.append(String.format("%02x", (0xff & bb.get())));
                 }
             } else {
                 sb.append("request buffer is null");
             }
 
-            LOG.error("Dumping request buffer: 0x{}", sb.toString());
+            LOG.error("Dumping request buffer for request type {}: 0x{}", Request.op2String(request.type), sb);
             if (request.getHdr() != null) {
                 request.getHdr().setType(OpCode.error);
                 request.setTxn(new ErrorTxn(Code.MARSHALLINGERROR.intValue()));

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumOracleMajTest.java
Patch:
@@ -56,6 +56,7 @@ public void testMajQuorums() throws Throwable {
             assertTrue(electionTimeTaken >= 0, "Wrong electionTimeTaken value!");
         }
 
+        tearDown();
         //setup servers 1-2 to be followers
         // id=1, oracle is false; id=2, oracle is true
         setUp();

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -226,7 +226,7 @@ public void updateServerList(String connectString) throws IOException {
     }
 
     public ZooKeeperSaslClient getSaslClient() {
-        return cnxn.zooKeeperSaslClient;
+        return cnxn.getZooKeeperSaslClient();
     }
 
     private final ZKClientConfig clientConfig;

File: zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java
Patch:
@@ -215,7 +215,7 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta
             // data[] contains the Zookeeper Server's SASL token.
             // ctx is the ZooKeeperSaslClient object. We use this object's respondToServer() method
             // to reply to the Zookeeper Server's SASL token
-            ZooKeeperSaslClient client = ((ClientCnxn) ctx).zooKeeperSaslClient;
+            ZooKeeperSaslClient client = ((ClientCnxn) ctx).getZooKeeperSaslClient();
             if (client == null) {
                 LOG.warn("sasl client was unexpectedly null: cannot respond to Zookeeper server.");
                 return;
@@ -458,6 +458,7 @@ public boolean clientTunneledAuthenticationInProgress() {
     public void shutdown() {
         if (null != login) {
             login.shutdown();
+            login = null;
         }
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketFragilityTest.java
Patch:
@@ -338,9 +338,6 @@ public void disconnect() {
                 LOG.warn("Got interrupted while waiting for the sender thread to close", ex);
             }
             eventThread.queueEventOfDeath();
-            if (zooKeeperSaslClient != null) {
-                zooKeeperSaslClient.shutdown();
-            }
         }
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -1290,7 +1290,7 @@ public void run() {
                         break;
                     } else {
                         LOG.warn(
-                            "Session 0x{} for sever {}, Closing socket connection. "
+                            "Session 0x{} for server {}, Closing socket connection. "
                                 + "Attempting reconnect except it is a SessionExpiredException.",
                             Long.toHexString(getSessionId()),
                             serverAddress,

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java
Patch:
@@ -68,7 +68,7 @@ public class RequestThrottler extends ZooKeeperCriticalThread {
     private volatile boolean killed;
 
     private static final String SHUTDOWN_TIMEOUT = "zookeeper.request_throttler.shutdownTimeout";
-    private static int shutdownTimeout = 10000;
+    private static int shutdownTimeout;
 
     static {
         shutdownTimeout = Integer.getInteger(SHUTDOWN_TIMEOUT, 10000);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java
Patch:
@@ -62,8 +62,6 @@ public abstract class ServerCnxn implements Stats, Watcher {
 
     private Set<Id> authInfo = Collections.newSetFromMap(new ConcurrentHashMap<Id, Boolean>());
 
-    private static final byte[] fourBytes = new byte[4];
-
     /**
      * If the client is of old version, we don't send r-o mode info to it.
      * The reason is that if we would, old C client doesn't read it, which
@@ -388,7 +386,6 @@ protected void packetSent() {
 
     protected long count;
     protected long totalLatency;
-    protected long requestsProcessedCount;
     protected DisconnectReason disconnectReason = DisconnectReason.UNKNOWN;
 
     public synchronized void resetStats() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java
Patch:
@@ -52,7 +52,6 @@ public class WorkerService {
     private final String threadNamePrefix;
     private int numWorkerThreads;
     private boolean threadsAreAssignable;
-    private long shutdownTimeoutMS = 5000;
 
     private volatile boolean stopped = true;
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java
Patch:
@@ -90,7 +90,6 @@ public class ZKDatabase {
     public static final String COMMIT_LOG_COUNT = "zookeeper.commitLogCount";
     public static final int DEFAULT_COMMIT_LOG_COUNT = 500;
     public int commitLogCount;
-    protected static int commitLogBuffer = 700;
     protected Queue<Proposal> committedLog = new ArrayDeque<>();
     protected ReentrantReadWriteLock logLock = new ReentrantReadWriteLock();
     private volatile boolean initialized = false;

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/StringUtilTest.java
Patch:
@@ -38,6 +38,9 @@ public void testStringSplit() {
 
         final String s3 = "1, , 2";
         assertEquals(Arrays.asList("1", "2"), StringUtils.split(s3, ","));
+
+        final String s4 = "1, \t , 2";
+        assertEquals(Arrays.asList("1", "2"), StringUtils.split(s4, ","));
     }
 
     @Test

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java
Patch:
@@ -193,7 +193,8 @@ public static List<String> listSubTreeBFS(
             String node = queue.poll();
             List<String> children = zk.getChildren(node, false);
             for (final String child : children) {
-                final String childPath = node + "/" + child;
+                // Fix IllegalArgumentException when list "/".
+                final String childPath = (node.equals("/") ? "" : node) + "/" + child;
                 queue.add(childPath);
                 tree.add(childPath);
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -253,7 +253,7 @@ protected enum State {
         intBufferStartingSizeBytes = Integer.getInteger(INT_BUFFER_STARTING_SIZE_BYTES, DEFAULT_STARTING_BUFFER_SIZE);
 
         if (intBufferStartingSizeBytes < 32) {
-            String msg = "Buffer starting size must be greater than or equal to 32."
+            String msg = "Buffer starting size (" + intBufferStartingSizeBytes + ") must be greater than or equal to 32. "
                          + "Configure with \"-Dzookeeper.intBufferStartingSizeBytes=<size>\" ";
             LOG.error(msg);
             throw new IllegalArgumentException(msg);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -1135,7 +1135,6 @@ public synchronized void start() {
             adminServer.start();
         } catch (AdminServerException e) {
             LOG.warn("Problem starting AdminServer", e);
-            System.out.println(e);
         }
         startLeaderElection();
         startJvmPauseMonitor();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerClusterMutualAuthTest.java
Patch:
@@ -119,9 +119,9 @@ public void testStart() throws Exception {
             zkServer2.start();
             zkServer3.start();
 
-            assertTrue(ClientBase.waitForServerUp("localhost:" + clientport1, 60000));
-            assertTrue(ClientBase.waitForServerUp("localhost:" + clientport2, 60000));
-            assertTrue(ClientBase.waitForServerUp("localhost:" + clientport3, 60000));
+            assertTrue(ClientBase.waitForServerUp(zkServer1.getConnectionString(), 60000));
+            assertTrue(ClientBase.waitForServerUp(zkServer2.getConnectionString(), 60000));
+            assertTrue(ClientBase.waitForServerUp(zkServer3.getConnectionString(), 60000));
 
             for (int i = 0; i < 100; i++) {
                 ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus("ReplicatedServer*");

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerClusterTest.java
Patch:
@@ -101,9 +101,9 @@ public void testStart() throws Exception {
             zkServer2.start();
             zkServer3.start();
 
-            assertTrue(ClientBase.waitForServerUp("localhost:" + clientport1, 60000));
-            assertTrue(ClientBase.waitForServerUp("localhost:" + clientport2, 60000));
-            assertTrue(ClientBase.waitForServerUp("localhost:" + clientport3, 60000));
+            assertTrue(ClientBase.waitForServerUp(zkServer1.getConnectionString(), 60000));
+            assertTrue(ClientBase.waitForServerUp(zkServer2.getConnectionString(), 60000));
+            assertTrue(ClientBase.waitForServerUp(zkServer3.getConnectionString(), 60000));
             for (int i = 0; i < 100; i++) {
                 ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus("ReplicatedServer*");
                 System.out.println("status:" + status);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerSslEmbeddedTest.java
Patch:
@@ -87,7 +87,7 @@ public void testStart() throws Exception {
                 .exitHandler(ExitHandler.LOG_ONLY)
                 .build()) {
             zkServer.start();
-            assertTrue(ClientBase.waitForServerUp("localhost:" + clientPort, 60000));
+            assertTrue(ClientBase.waitForServerUp(zkServer.getConnectionString(), 60000));
             for (int i = 0; i < 100; i++) {
                 ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus("StandaloneServer*");
                 if (status.isLeader() && status.isStandaloneMode()) {
@@ -104,7 +104,7 @@ public void testStart() throws Exception {
             zKClientConfig.setProperty("zookeeper.client.secure", "true");
             // only netty supports TLS
             zKClientConfig.setProperty("zookeeper.clientCnxnSocket", org.apache.zookeeper.ClientCnxnSocketNetty.class.getName());
-            try (ZooKeeper zk = new ZooKeeper("localhost:" + clientSecurePort, 60000, (WatchedEvent event) -> {
+            try (ZooKeeper zk = new ZooKeeper(zkServer.getSecureConnectionString(), 60000, (WatchedEvent event) -> {
                 switch (event.getState()) {
                     case SyncConnected:
                         l.countDown();

File: zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java
Patch:
@@ -56,6 +56,7 @@ public void setup() throws Exception {
         CollectorRegistry.defaultRegistry.clear();
         provider = new PrometheusMetricsProvider();
         Properties configuration = new Properties();
+        configuration.setProperty("httpHost", "127.0.0.1"); // local host for test
         configuration.setProperty("httpPort", "0"); // ephemeral port
         configuration.setProperty("exportJvmInfo", "false");
         provider.configure(configuration);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -1707,7 +1707,7 @@ public boolean deserializeZxidDigest(InputArchive ia, long startZxidOfSnapshot)
             if (zxidDigest.zxid > 0) {
                 digestFromLoadedSnapshot = zxidDigest;
                 LOG.info("The digest in the snapshot has digest version of {}, "
-                        + ", with zxid as 0x{}, and digest value as {}",
+                        + "with zxid as 0x{}, and digest value as {}",
                         digestFromLoadedSnapshot.digestVersion,
                         Long.toHexString(digestFromLoadedSnapshot.zxid),
                         digestFromLoadedSnapshot.digest);

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java
Patch:
@@ -117,7 +117,7 @@ void updateLastSendAndHeard() {
 
     void readLength() throws IOException {
         int len = incomingBuffer.getInt();
-        if (len < 0 || len >= packetLen) {
+        if (len < 0 || len > packetLen) {
             throw new IOException("Packet len " + len + " is out of range!");
         }
         incomingBuffer = ByteBuffer.allocate(len);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -251,7 +251,7 @@ protected enum State {
         intBufferStartingSizeBytes = Integer.getInteger(INT_BUFFER_STARTING_SIZE_BYTES, DEFAULT_STARTING_BUFFER_SIZE);
 
         if (intBufferStartingSizeBytes < 32) {
-            String msg = "Buffer starting size must be greater than 0."
+            String msg = "Buffer starting size must be greater than or equal to 32."
                          + "Configure with \"-Dzookeeper.intBufferStartingSizeBytes=<size>\" ";
             LOG.error(msg);
             throw new IllegalArgumentException(msg);

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/AtomicFileOutputStream.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class AtomicFileOutputStream extends FilterOutputStream {
 
-    private static final String TMP_EXTENSION = ".tmp";
+    public static final String TMP_EXTENSION = ".tmp";
 
     private static final Logger LOG = LoggerFactory.getLogger(AtomicFileOutputStream.class);
 

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/encryption/BasicDataEncryptionManager.java
Patch:
@@ -30,6 +30,9 @@ public class BasicDataEncryptionManager implements DataEncryptionManager {
      * (byte[])
      */
     public String decryptData(byte[] encrypted) throws Exception {
+        if(encrypted == null) {
+            return "";
+        }
         return new String(encrypted);
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetCommand.java
Patch:
@@ -90,7 +90,7 @@ public boolean exec() throws CliException {
         } catch (IllegalArgumentException ex) {
             throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException | InterruptedException ex) {
-            throw new CliException(ex);
+            throw new CliWrapperException(ex);
         }
         data = (data == null) ? "null".getBytes() : data;
         out.println(new String(data, UTF_8));

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -768,7 +768,7 @@ synchronized void connectOne(long sid) {
             if (lastSeenQV != null
                 && lastProposedView.containsKey(sid)
                 && (!knownId
-                    || (lastProposedView.get(sid).electionAddr != lastCommittedView.get(sid).electionAddr))) {
+                    || !lastProposedView.get(sid).electionAddr.equals(lastCommittedView.get(sid).electionAddr))) {
                 knownId = true;
                 LOG.debug("Server {} knows {} already, it is in the lastProposedView", self.getId(), sid);
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/ReconfigCommand.java
Patch:
@@ -130,7 +130,7 @@ public CliCommand parse(String[] cmdArgs) throws CliParseException {
                 //check that membership makes sense; leader will make these checks again
                 //don't check for leader election ports since
                 //client doesn't know what leader election alg is used
-                members = QuorumPeerConfig.parseDynamicConfig(dynamicCfg, 0, true, false).toString();
+                members = QuorumPeerConfig.parseDynamicConfig(dynamicCfg, 0, true, false, null).toString();
             } catch (Exception e) {
                 throw new CliParseException("Error processing " + cl.getOptionValue("file") + e.getMessage());
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java
Patch:
@@ -120,6 +120,7 @@ public boolean equals(Object o) {
         }
         return true;
     }
+
     /**
      * This constructor requires the quorum configuration
      * to be declared in a separate file, and it takes the

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/EagerACLFilterTest.java
Patch:
@@ -72,7 +72,7 @@ public void setUp(ServerState serverState, boolean checkEnabled) throws Exceptio
         ensureCheck(checkEnabled);
         CountdownWatcher clientWatch = new CountdownWatcher();
         CountdownWatcher clientWatchB = new CountdownWatcher();
-        super.setUp(true);
+        super.setUp(true, true);
 
         String hostPort = getPeersMatching(serverState).split(",")[0];
         int clientPort = Integer.parseInt(hostPort.split(":")[1]);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java
Patch:
@@ -203,6 +203,7 @@ public void testParseBoolean() throws IOException, ConfigException {
     private Properties getDefaultZKProperties() {
         Properties zkProp = new Properties();
         zkProp.setProperty("dataDir", new File("myDataDir").getAbsolutePath());
+        zkProp.setProperty("oraclePath", new File("mastership").getAbsolutePath());
         return zkProp;
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumRequestPipelineTest.java
Patch:
@@ -69,7 +69,7 @@ public void setUp() {
 
     public void setUp(ServerState serverState) throws Exception {
         CountdownWatcher clientWatch = new CountdownWatcher();
-        super.setUp(true);
+        super.setUp(true, true);
         zkClient = createClient(clientWatch, getPeersMatching(serverState));
         zkClient.addAuthInfo(AUTH_PROVIDER, AUTH);
         clientWatch.waitForConnected(CONNECTION_TIMEOUT);

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/AsyncHammerTest.java
Patch:
@@ -47,7 +47,7 @@ public class AsyncHammerTest extends ZKTestCase implements StringCallback, VoidC
     private volatile boolean bang;
 
     public void setUp(boolean withObservers) throws Exception {
-        qb.setUp(withObservers);
+        qb.setUp(withObservers, false);
     }
 
     protected void restart() throws Exception {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverLETest.java
Patch:
@@ -35,7 +35,7 @@ public class ObserverLETest extends ZKTestCase {
 
     @BeforeEach
     public void establishThreeParticipantOneObserverEnsemble() throws Exception {
-        qb.setUp(true);
+        qb.setUp(true, false);
         ct.hostPort = qb.hostPort;
         ct.setUpAll();
         qb.s5.shutdown();

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverQuorumHammerTest.java
Patch:
@@ -28,7 +28,7 @@ public class ObserverQuorumHammerTest extends QuorumHammerTest {
     @BeforeEach
     @Override
     public void setUp() throws Exception {
-        qb.setUp(true);
+        qb.setUp(true, false);
         cht.hostPort = qb.hostPort;
         cht.setUpAll();
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumMajorityTest.java
Patch:
@@ -57,7 +57,7 @@ public void testMajQuorums() throws Throwable {
         }
 
         //setup servers 1-5 to be followers
-        setUp(false);
+        setUp(false, true);
 
         Proposal p = new Proposal();
 
@@ -77,7 +77,7 @@ public void testMajQuorums() throws Throwable {
         assertEquals(true, p.hasAllQuorums());
 
         //setup servers 1-3 to be followers and 4 and 5 to be observers
-        setUp(true);
+        setUp(true, true);
 
         p = new Proposal();
         p.addQuorumVerifier(s1.getQuorumVerifier());

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ThrottledOpObserverTest.java
Patch:
@@ -35,7 +35,7 @@ public static void applyMockUps() {
     @BeforeEach
     @Override
     public void setUp() throws Exception {
-        super.setUp(true /* withObservers */);
+        super.setUp(true /* withObservers */, false);
     }
 
     @Test

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -394,7 +394,7 @@ protected void pRequest2Txn(int type, long zxid, Request request, Record record,
             validatePath(path, request.sessionId);
             nodeRecord = getRecordForPath(path);
             zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.WRITE, request.authInfo, path, null);
-            zks.checkQuota(path, setDataRequest.getData(), OpCode.setData);
+            zks.checkQuota(path, nodeRecord.data, setDataRequest.getData(), OpCode.setData);
             int newVersion = checkAndIncVersion(nodeRecord.stat.getVersion(), setDataRequest.getVersion(), path);
             request.setTxn(new SetDataTxn(path, setDataRequest.getData(), newVersion));
             nodeRecord = nodeRecord.duplicate(request.getHdr().getZxid());
@@ -698,7 +698,7 @@ private void pRequest2TxnCreate(int type, Request request, Record record, boolea
             throw new KeeperException.NoChildrenForEphemeralsException(path);
         }
         int newCversion = parentRecord.stat.getCversion() + 1;
-        zks.checkQuota(path, data, OpCode.create);
+        zks.checkQuota(path, null, data, OpCode.create);
         if (type == OpCode.createContainer) {
             request.setTxn(new CreateContainerTxn(path, data, listACL, newCversion));
         } else if (type == OpCode.createTTL) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -1224,7 +1224,7 @@ public void setSecureServerCnxnFactory(ServerCnxnFactory factory) {
     }
 
     /**
-     * return the last proceesed id from the
+     * return the last processed id from the
      * datatree
      */
     public long getLastProcessedZxid() {
@@ -1233,7 +1233,7 @@ public long getLastProcessedZxid() {
 
     /**
      * return the outstanding requests
-     * in the queue, which havent been
+     * in the queue, which haven't been
      * processed yet
      */
     public long getOutstandingRequests() {
@@ -1259,7 +1259,7 @@ public int getNumAliveConnections() {
     }
 
     /**
-     * trunccate the log to get in sync with others
+     * truncate the log to get in sync with others
      * if in a quorum
      * @param zxid the zxid that it needs to get in sync
      * with others

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -712,7 +712,7 @@ public static QuorumVerifier parseDynamicConfig(Properties dynamicConfigProp, in
                 if (numParticipators <= 2) {
                     LOG.warn("No server failure will be tolerated. You need at least 3 servers.");
                 } else if (numParticipators % 2 == 0) {
-                    LOG.warn("Non-optimial configuration, consider an odd number of servers.");
+                    LOG.warn("Non-optimal configuration, consider an odd number of servers.");
                 }
             }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -551,7 +551,7 @@ public void run() {
             boolean needSnap = syncFollower(peerLastZxid, learnerMaster);
 
             // syncs between followers and the leader are exempt from throttling because it
-            // is importatnt to keep the state of quorum servers up-to-date. The exempted syncs
+            // is important to keep the state of quorum servers up-to-date. The exempted syncs
             // are counted as concurrent syncs though
             boolean exemptFromThrottle = getLearnerType() != LearnerType.OBSERVER;
             /* if we are not truncating or sending a diff just send a snapshot */

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliWrapperException.java
Patch:
@@ -54,6 +54,8 @@ private static String getMessage(Throwable cause) {
                 return "No quorum of new config is connected and "
                        + "up-to-date with the leader of last commmitted config - try invoking reconfiguration after "
                        + "new servers are connected and synced";
+            } else if (keeperException instanceof KeeperException.QuotaExceededException) {
+                return "Quota has exceeded : " + keeperException.getPath();
             }
         }
         return cause.getMessage();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -394,6 +394,7 @@ protected void pRequest2Txn(int type, long zxid, Request request, Record record,
             validatePath(path, request.sessionId);
             nodeRecord = getRecordForPath(path);
             zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.WRITE, request.authInfo, path, null);
+            zks.checkQuota(path, setDataRequest.getData(), OpCode.setData);
             int newVersion = checkAndIncVersion(nodeRecord.stat.getVersion(), setDataRequest.getVersion(), path);
             request.setTxn(new SetDataTxn(path, setDataRequest.getData(), newVersion));
             nodeRecord = nodeRecord.duplicate(request.getHdr().getZxid());
@@ -697,6 +698,7 @@ private void pRequest2TxnCreate(int type, Request request, Record record, boolea
             throw new KeeperException.NoChildrenForEphemeralsException(path);
         }
         int newCversion = parentRecord.stat.getCversion() + 1;
+        zks.checkQuota(path, data, OpCode.create);
         if (type == OpCode.createContainer) {
             request.setTxn(new CreateContainerTxn(path, data, listACL, newCversion));
         } else if (type == OpCode.createTTL) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java
Patch:
@@ -233,8 +233,8 @@ public void testPathTrieClearOnDeserialize() throws Exception {
         DataTree dserTree = new DataTree();
 
         dserTree.createNode("/bug", new byte[20], null, -1, 1, 1, 1);
-        dserTree.createNode(Quotas.quotaZookeeper + "/bug", null, null, -1, 1, 1, 1);
-        dserTree.createNode(Quotas.quotaPath("/bug"), new byte[20], null, -1, 1, 1, 1);
+        dserTree.createNode(Quotas.quotaPath("/bug"), null, null, -1, 1, 1, 1);
+        dserTree.createNode(Quotas.limitPath("/bug"), new byte[20], null, -1, 1, 1, 1);
         dserTree.createNode(Quotas.statPath("/bug"), new byte[20], null, -1, 1, 1, 1);
 
         //deserialize a DataTree; this should clear the old /bug nodes and pathTrie

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -507,8 +507,8 @@ private List<InetSocketAddress> excludedSpecialAddresses(List<InetSocketAddress>
                 }
                 InetAddress inetaddr = addr.getAddress();
 
-                if (inetaddr == null || inetaddr.isAnyLocalAddress() || // wildCard addresses (0.0.0.0 or [::])
-                    inetaddr.isLoopbackAddress()) { // loopback address(localhost/127.0.0.1)
+                if (inetaddr == null || inetaddr.isAnyLocalAddress() // wildCard addresses (0.0.0.0 or [::])
+                    || inetaddr.isLoopbackAddress()) { // loopback address(localhost/127.0.0.1)
                     continue;
                 }
                 included.add(addr);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -802,6 +802,9 @@ public void shutdown() {
      */
     public synchronized void shutdown(boolean fullyShutDown) {
         if (!canShutdown()) {
+            if (fullyShutDown && zkDb != null) {
+                zkDb.clear();
+            }
             LOG.debug("ZooKeeper server is not running, so not proceeding to shutdown!");
             return;
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -859,7 +859,9 @@ public void shutdown() {
         closeSocket();
         // shutdown previous zookeeper
         if (zk != null) {
-            zk.shutdown();
+            // If we haven't finished SNAP sync, force fully shutdown
+            // to avoid potential inconsistency
+            zk.shutdown(self.getSyncMode().equals(QuorumPeer.SyncMode.SNAP));
         }
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java
Patch:
@@ -603,6 +603,7 @@ public void configure(InetSocketAddress addr, int maxClientCnxns, int backlog, b
         this.maxClientCnxns = maxClientCnxns;
         this.secure = secure;
         this.listenBacklog = backlog;
+        LOG.info("configure {} secure: {} on addr {}", this, secure, addr);
     }
 
     /** {@inheritDoc} */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerShutdownHandler.java
Patch:
@@ -26,9 +26,9 @@
  * SHUTDOWN server state transitions, which in turn releases the associated
  * shutdown latch.
  */
-class ZooKeeperServerShutdownHandler {
+public final class ZooKeeperServerShutdownHandler {
 
-    private final CountDownLatch shutdownLatch;
+        private final CountDownLatch shutdownLatch;
 
     ZooKeeperServerShutdownHandler(CountDownLatch shutdownLatch) {
         this.shutdownLatch = shutdownLatch;
@@ -39,7 +39,7 @@ class ZooKeeperServerShutdownHandler {
      *
      * @param state new server state
      */
-    void handle(State state) {
+    public void handle(State state) {
         if (state == State.ERROR || state == State.SHUTDOWN) {
             shutdownLatch.countDown();
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/util/ServiceUtils.java
Patch:
@@ -51,7 +51,7 @@ private ServiceUtils() {
                 + "Actually System.exit is disabled", code);
     };
 
-    private static Consumer<Integer> systemExitProcedure = SYSTEM_EXIT;
+    private static volatile Consumer<Integer> systemExitProcedure = SYSTEM_EXIT;
 
     /**
      * Override system callback. Useful for preventing the JVM to exit in tests

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -1394,7 +1394,7 @@ public void processConnectRequest(ServerCnxn cnxn, ByteBuffer incomingBuffer)
         if (!readOnly && this instanceof ReadOnlyZooKeeperServer) {
             String msg = "Refusing session request for not-read-only client " + cnxn.getRemoteSocketAddress();
             LOG.info(msg);
-            throw new CloseRequestException(msg, ServerCnxn.DisconnectReason.CLIENT_ZXID_AHEAD);
+            throw new CloseRequestException(msg, ServerCnxn.DisconnectReason.NOT_READ_ONLY_CLIENT);
         }
         if (connReq.getLastZxidSeen() > zkDb.dataTree.lastProcessedZxid) {
             String msg = "Refusing session request for client "
@@ -1406,7 +1406,7 @@ public void processConnectRequest(ServerCnxn cnxn, ByteBuffer incomingBuffer)
                          + " client must try another server";
 
             LOG.info(msg);
-            throw new CloseRequestException(msg, ServerCnxn.DisconnectReason.NOT_READ_ONLY_CLIENT);
+            throw new CloseRequestException(msg, ServerCnxn.DisconnectReason.CLIENT_ZXID_AHEAD);
         }
         int sessionTimeout = connReq.getTimeOut();
         byte[] passwd = connReq.getPasswd();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java
Patch:
@@ -432,6 +432,9 @@ public CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs)
      *   - "open_file_descriptor_count": Long (unix only)
      *   - "max_file_descriptor_count": Long (unix only)
      *   - "fsync_threshold_exceed_count": Long
+     *   - "non_mtls_conn_count": Long
+     *   - "non_mtls_remote_conn_count": Long
+     *   - "non_mtls_local_conn_count": Long
      *   - "followers": Integer (leader only)
      *   - "synced_followers": Integer (leader only)
      *   - "pending_syncs": Integer (leader only)

File: zookeeper-server/src/test/java/org/apache/zookeeper/common/BCFKSFileLoaderTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
-
 public class BCFKSFileLoaderTest extends BaseX509ParameterizedTestCase {
 
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java
Patch:
@@ -165,6 +165,9 @@ public void testMonitor() throws IOException, InterruptedException {
                 new Field("last_client_response_size", Integer.class),
                 new Field("max_client_response_size", Integer.class),
                 new Field("min_client_response_size", Integer.class),
+                new Field("auth_failed_count", Long.class),
+                new Field("non_mtls_remote_conn_count", Long.class),
+                new Field("non_mtls_local_conn_count", Long.class),
                 new Field("uptime", Long.class),
                 new Field("global_sessions", Long.class),
                 new Field("local_sessions", Long.class),

File: zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java
Patch:
@@ -179,7 +179,7 @@ private static void logMultiOperation(Request request, ProcessTxnResult rc) thro
     }
 
     private static void log(Request request, String path, String op, String acls, String createMode, Result result) {
-        log(request.getUsers(), op, path, acls, createMode,
+        log(request.getUsersForAudit(), op, path, acls, createMode,
                 request.cnxn.getSessionIdHex(), request.cnxn.getHostAddress(), result);
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/audit/Log4jAuditLoggerTest.java
Patch:
@@ -301,7 +301,7 @@ private String getUser() {
         ServerCnxn next = getServerCnxn();
         Request request = new Request(next, -1, -1, -1, null,
                 next.getAuthInfo());
-        return request.getUsers();
+        return request.getUsersForAudit();
     }
 
     private String getIp() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -1132,6 +1132,7 @@ private ServerSocket createNewServerSocket() throws IOException {
                 }
 
                 socket.setReuseAddress(true);
+                address = new InetSocketAddress(address.getHostString(), address.getPort());
                 socket.bind(address);
 
                 return socket;

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -2806,6 +2806,7 @@ public void removeAllWatches(String path, WatcherType watcherType, boolean local
     public void addWatch(String basePath, Watcher watcher, AddWatchMode mode)
             throws KeeperException, InterruptedException {
         PathUtils.validatePath(basePath);
+        validateWatcher(watcher);
         String serverPath = prependChroot(basePath);
 
         RequestHeader h = new RequestHeader();
@@ -2857,6 +2858,7 @@ public void addWatch(
             Object ctx
     ) {
         PathUtils.validatePath(basePath);
+        validateWatcher(watcher);
         String serverPath = prependChroot(basePath);
 
         RequestHeader h = new RequestHeader();

File: zookeeper-jute/src/main/java/org/apache/jute/compiler/JBoolean.java
Patch:
@@ -39,7 +39,7 @@ public String genJavaCompareTo(String fname) {
     }
 
     public String genJavaHashCode(String fname) {
-        return "     ret = (" + fname + ")?0:1;\n";
+        return "     ret = java.lang.Boolean.hashCode(" + fname + ");\n";
     }
 
     String genCsharpHashCode(String fname) {

File: zookeeper-jute/src/main/java/org/apache/jute/compiler/JDouble.java
Patch:
@@ -35,8 +35,7 @@ public String getSignature() {
     }
 
     public String genJavaHashCode(String fname) {
-        String tmp = "Double.doubleToLongBits(" + fname + ")";
-        return "    ret = (int)(" + tmp + "^(" + tmp + ">>>32));\n";
+        return "    ret = java.lang.Double.hashCode(" + fname + ");\n";
     }
 
 }

File: zookeeper-jute/src/main/java/org/apache/jute/compiler/JFloat.java
Patch:
@@ -35,7 +35,7 @@ public String getSignature() {
     }
 
     public String genJavaHashCode(String fname) {
-        return "    ret = Float.floatToIntBits(" + fname + ");\n";
+        return "    ret = java.lang.Float.hashCode(" + fname + ");\n";
     }
 
 }

File: zookeeper-jute/src/main/java/org/apache/jute/compiler/JLong.java
Patch:
@@ -35,6 +35,6 @@ public String getSignature() {
     }
 
     public String genJavaHashCode(String fname) {
-        return "    ret = (int) (" + fname + "^(" + fname + ">>>32));\n";
+        return "    ret = java.lang.Long.hashCode(" + fname + ");\n";
     }
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.zookeeper.server.admin.AdminServer;
 import org.apache.zookeeper.server.admin.AdminServer.AdminServerException;
 import org.apache.zookeeper.server.admin.AdminServerFactory;
+import org.apache.zookeeper.server.auth.ProviderRegistry;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog.DatadirException;
 import org.apache.zookeeper.server.quorum.QuorumPeerConfig.ConfigException;
@@ -130,6 +131,7 @@ public void runFromConfig(ServerConfig config) throws IOException, AdminServerEx
                 throw new IOException("Cannot boot MetricsProvider " + config.getMetricsProviderClassName(), error);
             }
             ServerMetrics.metricsProviderInitialized(metricsProvider);
+            ProviderRegistry.initialize();
             // Note that this thread isn't going to be doing anything else,
             // so rather than spawning another thread, we will just call
             // run() in this thread.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.ZooKeeperServerMain;
 import org.apache.zookeeper.server.admin.AdminServer.AdminServerException;
+import org.apache.zookeeper.server.auth.ProviderRegistry;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog.DatadirException;
 import org.apache.zookeeper.server.quorum.QuorumPeerConfig.ConfigException;
@@ -159,6 +160,7 @@ public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServ
         }
         try {
             ServerMetrics.metricsProviderInitialized(metricsProvider);
+            ProviderRegistry.initialize();
             ServerCnxnFactory cnxnFactory = null;
             ServerCnxnFactory secureCnxnFactory = null;
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/AddAuthCommand.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.cli;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -57,7 +58,7 @@ public CliCommand parse(String[] cmdArgs) throws CliParseException {
     public boolean exec() throws CliException {
         byte[] b = null;
         if (args.length >= 3) {
-            b = args[2].getBytes();
+            b = args[2].getBytes(UTF_8);
         }
 
         zk.addAuthInfo(args[1], b);

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/CreateCommand.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.cli;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.util.List;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
@@ -112,7 +113,7 @@ public boolean exec() throws CliException {
         String path = args[1];
         byte[] data = null;
         if (args.length > 2) {
-            data = args[2].getBytes();
+            data = args[2].getBytes(UTF_8);
         }
         List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;
         if (args.length > 3) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetCommand.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.cli;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -92,7 +93,7 @@ public boolean exec() throws CliException {
             throw new CliException(ex);
         }
         data = (data == null) ? "null".getBytes() : data;
-        out.println(new String(data));
+        out.println(new String(data, UTF_8));
         if (cl.hasOption("s")) {
             new StatPrinter(out).print(stat);
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/ReconfigCommand.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.cli;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.FileInputStream;
 import java.util.Properties;
 import org.apache.commons.cli.CommandLine;
@@ -151,7 +152,7 @@ public boolean exec() throws CliException {
             }
 
             byte[] curConfig = ((ZooKeeperAdmin) zk).reconfigure(joining, leaving, members, version, stat);
-            out.println("Committed new configuration:\n" + new String(curConfig));
+            out.println("Committed new configuration:\n" + new String(curConfig, UTF_8));
 
             if (cl.hasOption("s")) {
                 new StatPrinter(out).print(stat);

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetCommand.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.cli;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Options;
@@ -62,7 +63,7 @@ public CliCommand parse(String[] cmdArgs) throws CliParseException {
     @Override
     public boolean exec() throws CliException {
         String path = args[1];
-        byte[] data = args[2].getBytes();
+        byte[] data = args[2].getBytes(UTF_8);
         int version;
         if (cl.hasOption("v")) {
             version = Integer.parseInt(cl.getOptionValue("v"));

File: zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.client;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -113,7 +114,7 @@ public static String send4LetterWord(
         BufferedReader reader = null;
         try {
             OutputStream outstream = sock.getOutputStream();
-            outstream.write(cmd.getBytes());
+            outstream.write(cmd.getBytes(UTF_8));
             outstream.flush();
 
             // this replicates NC - close the output stream before reading

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.nio.ByteBuffer;
 import java.util.Collection;
 import java.util.HashSet;
@@ -128,7 +129,7 @@ public void checkContainers() throws InterruptedException {
         for (String containerPath : getCandidates()) {
             long startMs = Time.currentElapsedTime();
 
-            ByteBuffer path = ByteBuffer.wrap(containerPath.getBytes());
+            ByteBuffer path = ByteBuffer.wrap(containerPath.getBytes(UTF_8));
             Request request = new Request(null, 0, 0, ZooDefs.OpCode.deleteContainer, path, null);
             try {
                 LOG.info("Attempting to delete candidate container: {}", containerPath);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
@@ -329,7 +330,7 @@ public void processRequest(Request request) {
             case OpCode.reconfig: {
                 lastOp = "RECO";
                 rsp = new GetDataResponse(
-                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),
+                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(UTF_8),
                     rc.stat);
                 err = Code.get(rc.err);
                 break;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -442,7 +443,7 @@ private class SendBufferWriter extends Writer {
          */
         private void checkFlush(boolean force) {
             if ((force && sb.length() > 0) || sb.length() > 2048) {
-                sendBufferSync(ByteBuffer.wrap(sb.toString().getBytes()));
+                sendBufferSync(ByteBuffer.wrap(sb.toString().getBytes(UTF_8)));
                 // clear our internal buffer
                 sb.setLength(0);
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.CompositeByteBuf;
@@ -233,7 +234,7 @@ private class SendBufferWriter extends Writer {
          */
         private void checkFlush(boolean force) {
             if ((force && sb.length() > 0) || sb.length() > 2048) {
-                sendBuffer(ByteBuffer.wrap(sb.toString().getBytes()));
+                sendBuffer(ByteBuffer.wrap(sb.toString().getBytes(UTF_8)));
                 // clear our internal buffer
                 sb.setLength(0);
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.StringReader;
@@ -331,7 +332,7 @@ protected void pRequest2Txn(int type, long zxid, Request request, Record record,
             break;
         }
         case OpCode.deleteContainer: {
-            String path = new String(request.request.array());
+            String path = new String(request.request.array(), UTF_8);
             String parentPath = getParentPathAndValidate(path);
             ChangeRecord nodeRecord = getRecordForPath(path);
             if (nodeRecord.childCount > 0) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.nio.ByteBuffer;
 import java.util.List;
 import org.apache.jute.Record;
@@ -408,7 +409,7 @@ public String toString() {
                 if (pathLen >= 0 && pathLen < 4096 && rbuf.remaining() >= pathLen) {
                     byte[] b = new byte[pathLen];
                     rbuf.get(b);
-                    path = new String(b);
+                    path = new String(b, UTF_8);
                 }
             } catch (Exception e) {
                 // ignore - can't find the path, will output "n/a" instead

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -677,7 +678,7 @@ public synchronized void initConfigInZKDatabase(QuorumVerifier qv) {
             }
             this.dataTree.setData(
                 ZooDefs.CONFIG_NODE,
-                qv.toString().getBytes(),
+                qv.toString().getBytes(UTF_8),
                 -1,
                 qv.getVersion(),
                 Time.currentWallTime());

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.auth;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import org.apache.zookeeper.KeeperException;
@@ -88,7 +89,7 @@ private static char encode(int i) {
 
     public static String generateDigest(String idPassword) throws NoSuchAlgorithmException {
         String[] parts = idPassword.split(":", 2);
-        byte[] digest = MessageDigest.getInstance("SHA1").digest(idPassword.getBytes());
+        byte[] digest = MessageDigest.getInstance("SHA1").digest(idPassword.getBytes(UTF_8));
         return parts[0] + ":" + base64Encode(digest);
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/EnsembleAuthenticationProvider.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.auth;
 
+import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
 import java.util.Set;
 import org.apache.zookeeper.KeeperException;
@@ -76,7 +77,7 @@ public KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authDat
             return KeeperException.Code.OK;
         }
 
-        String receivedEnsembleName = new String(authData);
+        String receivedEnsembleName = new String(authData, StandardCharsets.UTF_8);
 
         if (ensembleNames == null) {
             ServerMetrics.getMetrics().ENSEMBLE_AUTH_SKIP.add(1);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.quorum;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.Collections;
@@ -176,7 +177,7 @@ protected void processPacket(QuorumPacket qp) throws Exception {
 
             if (hdr.getType() == OpCode.reconfig) {
                 SetDataTxn setDataTxn = (SetDataTxn) txn;
-                QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData()));
+                QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData(), UTF_8));
                 self.setLastSeenQuorumVerifier(qv, true);
             }
 
@@ -213,7 +214,7 @@ protected void processPacket(QuorumPacket qp) throws Exception {
             // get the new configuration from the request
             Request request = fzk.pendingTxns.element();
             SetDataTxn setDataTxn = (SetDataTxn) request.getTxn();
-            QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData()));
+            QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData(), UTF_8));
 
             // get new designated leader from (current) leader's message
             ByteBuffer buffer = ByteBuffer.wrap(qp.getData());

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.quorum;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -1693,7 +1694,7 @@ public String getPeerInfo(long sid) {
 
     @Override
     public byte[] getQuorumVerifierBytes() {
-        return self.getLastSeenQuorumVerifier().toString().getBytes();
+        return self.getLastSeenQuorumVerifier().toString().getBytes(UTF_8);
     }
 
     @Override

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.quorum;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.nio.ByteBuffer;
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.jute.Record;
@@ -216,7 +217,7 @@ protected void processPacket(QuorumPacket qp) throws Exception {
             hdr = logEntry.getHeader();
             txn = logEntry.getTxn();
             digest = logEntry.getDigest();
-            QuorumVerifier qv = self.configFromString(new String(((SetDataTxn) txn).getData()));
+            QuorumVerifier qv = self.configFromString(new String(((SetDataTxn) txn).getData(), UTF_8));
 
             request = new Request(hdr.getClientId(), hdr.getCxid(), hdr.getType(), hdr, txn, 0);
             request.setTxnDigest(digest);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.quorum;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
@@ -343,7 +344,7 @@ public String getPeerInfo(long sid) {
 
     @Override
     public byte[] getQuorumVerifierBytes() {
-        return self.getLastSeenQuorumVerifier().toString().getBytes();
+        return self.getLastSeenQuorumVerifier().toString().getBytes(UTF_8);
     }
 
     @Override

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.quorum;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.apache.zookeeper.common.NetUtils.formatInetAddr;
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
@@ -255,7 +256,7 @@ public static InitialMessage parse(Long protocolVersion, DataInputStream din) th
 
             // in PROTOCOL_VERSION_V1 we expect to get a single address here represented as a 'host:port' string
             // in PROTOCOL_VERSION_V2 we expect to get multiple addresses like: 'host1:port1|host2:port2|...'
-            String[] addressStrings = new String(b).split("\\|");
+            String[] addressStrings = new String(b, UTF_8).split("\\|");
             List<InetSocketAddress> addresses = new ArrayList<>(addressStrings.length);
             for (String addr : addressStrings) {
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java
Patch:
@@ -186,7 +186,7 @@ public void dumpConf(PrintWriter pwriter) {
         pwriter.print("peerType=");
         pwriter.println(self.getLearnerType().ordinal());
         pwriter.println("membership: ");
-        pwriter.print(new String(self.getQuorumVerifier().toString().getBytes()));
+        pwriter.print(self.getQuorumVerifier().toString());
     }
 
     @Override

File: zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.Writer;
+import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import org.apache.zookeeper.ZKTestCase;
 import org.apache.zookeeper.common.AtomicFileWritingIdiom.OutputStreamStatement;
@@ -335,7 +336,7 @@ public void write(Writer os) throws IOException {
         assertFalse(target.exists(), "file should not exist");
     }
 
-    private String getContent(File file, String encoding) throws IOException {
+    private String getContent(File file, Charset encoding) throws IOException {
         StringBuilder result = new StringBuilder();
         FileInputStream fis = new FileInputStream(file);
         byte[] b = new byte[20];
@@ -348,7 +349,7 @@ private String getContent(File file, String encoding) throws IOException {
     }
 
     private String getContent(File file) throws IOException {
-        return getContent(file, "ASCII");
+        return getContent(file, StandardCharsets.US_ASCII);
     }
 
     private void createFile(File file, String content) throws IOException {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java
Patch:
@@ -110,7 +110,8 @@ public void testGetValidAddress() throws NoRouteToHostException {
     @Test
     public void testGetValidAddressWithNotValid() {
         assertThrows(NoRouteToHostException.class, () -> {
-            MultipleAddresses multipleAddresses = new MultipleAddresses(new InetSocketAddress("10.0.0.1", 22));
+            // IP chosen because it is reserved for documentation/examples and should be unreachable (RFC 5737)
+            MultipleAddresses multipleAddresses = new MultipleAddresses(new InetSocketAddress("203.0.113.1", 22));
             multipleAddresses.getReachableAddress();
         });
     }
@@ -259,4 +260,4 @@ private List<String> getHostStrings(List<InetSocketAddress> addresses) {
                 .mapToObj(i -> "127.0.0." + i).collect(Collectors.toList());
     }
 
-}
\ No newline at end of file
+}

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java
Patch:
@@ -39,10 +39,10 @@ private static class Entry {
 
     private final Map<String, Entry> cache;
 
-    public ResponseCache(int cacheSize) {
+    public ResponseCache(int cacheSize, String requestType) {
         this.cacheSize = cacheSize;
         cache = Collections.synchronizedMap(new LRUCache<>(cacheSize));
-        LOG.info("Response cache size is initialized with value {}.", cacheSize);
+        LOG.info("{} response cache size is initialized with value {}.", requestType, cacheSize);
     }
 
     public int getCacheSize() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -327,11 +327,11 @@ public ZooKeeperServer(FileTxnSnapLog txnLogFactory, int tickTime, int minSessio
 
         readResponseCache = new ResponseCache(Integer.getInteger(
             GET_DATA_RESPONSE_CACHE_SIZE,
-            ResponseCache.DEFAULT_RESPONSE_CACHE_SIZE));
+            ResponseCache.DEFAULT_RESPONSE_CACHE_SIZE), "getData");
 
         getChildrenResponseCache = new ResponseCache(Integer.getInteger(
             GET_CHILDREN_RESPONSE_CACHE_SIZE,
-            ResponseCache.DEFAULT_RESPONSE_CACHE_SIZE));
+            ResponseCache.DEFAULT_RESPONSE_CACHE_SIZE), "getChildren");
 
         this.initialConfig = initialConfig;
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -69,7 +69,7 @@ public class NIOServerCnxn extends ServerCnxn {
 
     private final ByteBuffer lenBuffer = ByteBuffer.allocate(4);
 
-    private ByteBuffer incomingBuffer = lenBuffer;
+    protected ByteBuffer incomingBuffer = lenBuffer;
 
     private final Queue<ByteBuffer> outgoingBuffers = new LinkedBlockingQueue<ByteBuffer>();
 
@@ -381,7 +381,7 @@ void doIO(SelectionKey k) throws InterruptedException {
         }
     }
 
-    private void readRequest() throws IOException {
+    protected void readRequest() throws IOException {
         zkServer.processPacket(this, incomingBuffer);
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java
Patch:
@@ -315,7 +315,7 @@ private boolean doAccept() {
      * If there is no worker thread pool, the SelectorThread performs the I/O
      * directly.
      */
-    class SelectorThread extends AbstractSelectThread {
+    public class SelectorThread extends AbstractSelectThread {
 
         private final int id;
         private final Queue<SocketChannel> acceptedQueue;

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/FileKeyStoreLoaderBuilderProvider.java
Patch:
@@ -38,6 +38,8 @@ static FileKeyStoreLoader.Builder<? extends FileKeyStoreLoader> getBuilderForKey
             return new PEMFileLoader.Builder();
         case PKCS12:
             return new PKCS12FileLoader.Builder();
+        case BCFKS:
+            return new BCFKSFileLoader.Builder();
         default:
             throw new AssertionError("Unexpected StoreFileType: " + type.name());
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java
Patch:
@@ -568,7 +568,7 @@ void halt() {
     long proposedEpoch;
 
     /**
-     * Returns the current vlue of the logical clock counter
+     * Returns the current value of the logical clock counter
      */
     public long getLogicalClock() {
         return logicalclock.get();
@@ -1088,7 +1088,7 @@ public Vote lookForLeader() throws InterruptedException {
                         }
                         break;
                     default:
-                        LOG.warn("Notification state unrecoginized: {} (n.state), {}(n.sid)", n.state, n.sid);
+                        LOG.warn("Notification state unrecognized: {} (n.state), {}(n.sid)", n.state, n.sid);
                         break;
                     }
                 } else {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java
Patch:
@@ -115,6 +115,9 @@ public void close() {
         // if this is not in cnxns then it's already closed
         if (!factory.cnxns.remove(this)) {
             LOG.debug("cnxns size:{}", factory.cnxns.size());
+            if (channel.isOpen()) {
+                channel.close();
+            }
             return;
         }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliWrapperException.java
Patch:
@@ -43,7 +43,7 @@ private static String getMessage(Throwable cause) {
             } else if (keeperException instanceof KeeperException.InvalidACLException) {
                 return "Acl is not valid : " + keeperException.getPath();
             } else if (keeperException instanceof KeeperException.NoAuthException) {
-                return "Authentication is not valid : " + keeperException.getPath();
+                return "Insufficient permission : " + keeperException.getPath();
             } else if (keeperException instanceof KeeperException.BadArgumentsException) {
                 return "Arguments are not valid : " + keeperException.getPath();
             } else if (keeperException instanceof KeeperException.BadVersionException) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java
Patch:
@@ -26,6 +26,8 @@
 import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
 import java.nio.channels.SocketChannel;
+import java.nio.channels.UnresolvedAddressException;
+import java.nio.channels.UnsupportedAddressTypeException;
 import java.util.Iterator;
 import java.util.Queue;
 import java.util.Set;
@@ -266,7 +268,7 @@ void connect(InetSocketAddress addr) throws IOException {
         SocketChannel sock = createSock();
         try {
             registerAndConnect(sock, addr);
-        } catch (IOException e) {
+        } catch (UnresolvedAddressException | UnsupportedAddressTypeException | SecurityException | IOException e) {
             LOG.error("Unable to open socket to {}", addr);
             sock.close();
             throw e;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -133,6 +133,7 @@ public static void setFailCreate(boolean b) {
     }
     @Override
     public void run() {
+        LOG.info(String.format("PrepRequestProcessor (sid:%d) started, reconfigEnabled=%s", zks.getServerId(), zks.reconfigEnabled));
         try {
             while (true) {
                 ServerMetrics.getMetrics().PREP_PROCESSOR_QUEUE_SIZE.add(submittedRequests.size());
@@ -405,7 +406,7 @@ protected void pRequest2Txn(int type, long zxid, Request request, Record record,
             addChangeRecord(nodeRecord);
             break;
         case OpCode.reconfig:
-            if (!QuorumPeerConfig.isReconfigEnabled()) {
+            if (!zks.isReconfigEnabled()) {
                 LOG.error("Reconfig operation requested but reconfig feature is disabled.");
                 throw new KeeperException.ReconfigDisabledException();
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -571,7 +571,7 @@ protected void syncWithLeader(long newLeaderZxid) throws Exception {
                 // ZOOKEEPER-2819: overwrite config node content extracted
                 // from leader snapshot with local config, to avoid potential
                 // inconsistency of config node content during rolling restart.
-                if (!QuorumPeerConfig.isReconfigEnabled()) {
+                if (!self.isReconfigEnabled()) {
                     LOG.debug("Reset config node content from local config after deserialization of snapshot.");
                     zk.getZKDatabase().initConfigInZKDatabase(self.getQuorumVerifier());
                 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -148,7 +148,7 @@ public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServ
             LOG.warn("Unable to register log4j JMX control", e);
         }
 
-        LOG.info("Starting quorum peer");
+        LOG.info("Starting quorum peer, myid=" + config.getServerId());
         MetricsProvider metricsProvider;
         try {
             metricsProvider = MetricsProviderBootstrap.startMetricsProvider(

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java
Patch:
@@ -49,7 +49,8 @@ public abstract class QuorumZooKeeperServer extends ZooKeeperServer {
 
     protected QuorumZooKeeperServer(FileTxnSnapLog logFactory, int tickTime, int minSessionTimeout,
                                     int maxSessionTimeout, int listenBacklog, ZKDatabase zkDb, QuorumPeer self) {
-        super(logFactory, tickTime, minSessionTimeout, maxSessionTimeout, listenBacklog, zkDb, self.getInitialConfig());
+        super(logFactory, tickTime, minSessionTimeout, maxSessionTimeout, listenBacklog, zkDb, self.getInitialConfig(),
+              self.isReconfigEnabled());
         this.self = self;
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java
Patch:
@@ -52,7 +52,8 @@ public class ReadOnlyZooKeeperServer extends ZooKeeperServer {
             self.maxSessionTimeout,
             self.clientPortListenBacklog,
             zkDb,
-            self.getInitialConfig());
+            self.getInitialConfig(),
+            self.isReconfigEnabled());
         this.self = self;
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/WatchDeregistration.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Set;
 import org.apache.zookeeper.Watcher.Event.EventType;
 import org.apache.zookeeper.Watcher.WatcherType;
-import org.apache.zookeeper.ZooKeeper.ZKWatchManager;
 
 /**
  * Handles the special case of removing watches which has registered for a

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -576,7 +576,7 @@ private void processEvent(Object event) {
                         try {
                             watcher.process(pair.event);
                         } catch (Throwable t) {
-                            LOG.error("Error while calling watcher ", t);
+                            LOG.error("Error while calling watcher.", t);
                         }
                     }
                 } else if (event instanceof LocalCallback) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -1431,7 +1431,8 @@ public void processConnectRequest(ServerCnxn cnxn, ByteBuffer incomingBuffer)
     }
 
     public boolean shouldThrottle(long outStandingCount) {
-        if (getGlobalOutstandingLimit() < getInflight()) {
+        int globalOutstandingLimit = getGlobalOutstandingLimit();
+        if (globalOutstandingLimit < getInflight() || globalOutstandingLimit < getInProcess()) {
             return outStandingCount > 0;
         }
         return false;

File: zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java
Patch:
@@ -434,6 +434,7 @@ public void genJavaCode(File outputDirectory) throws IOException {
             jj.write("\n");
             jj.write("package " + getJavaPackage() + ";\n\n");
             jj.write("import org.apache.jute.*;\n");
+            jj.write("import org.apache.jute.Record; // JDK14 needs explicit import due to clash with java.lang.Record\n");
             jj.write("import org.apache.yetus.audience.InterfaceAudience;\n");
             jj.write("@InterfaceAudience.Public\n");
             jj.write("public class " + getName() + " implements Record {\n");

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -303,7 +303,9 @@ protected void connectToLeader(MultipleAddresses multiAddr, String hostname) thr
         this.leaderAddr = multiAddr;
         Set<InetSocketAddress> addresses;
         if (self.isMultiAddressReachabilityCheckEnabled()) {
-            addresses = multiAddr.getAllReachableAddresses();
+            // even if none of the addresses are reachable, we want to try to establish connection
+            // see ZOOKEEPER-3758
+            addresses = multiAddr.getAllReachableAddressesOrAll();
         } else {
             addresses = multiAddr.getAllAddresses();
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/version/util/VerGen.java
Patch:
@@ -80,7 +80,7 @@ public static void generateFile(File outputDir, Version version, String rev, Str
             w.write("    int MAJOR=" + version.maj + ";\n");
             w.write("    int MINOR=" + version.min + ";\n");
             w.write("    int MICRO=" + version.micro + ";\n");
-            w.write("    String QUALIFIER=" + (version.qualifier == null ? null : "\"" + version.qualifier + "\"") + ";\n");
+            w.write("    String QUALIFIER=" + (version.qualifier == null ? "\"\"" : "\"" + version.qualifier + "\"") + ";\n");
             if (rev.equals("-1")) {
                 System.out.println("Unknown REVISION number, using " + rev);
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -204,6 +204,7 @@ public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServ
             if (config.sslQuorumReloadCertFiles) {
                 quorumPeer.getX509Util().enableCertFileReloading();
             }
+            quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());
             quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());
             quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java
Patch:
@@ -430,6 +430,7 @@ public void setSSLSystemProperties() {
 
     @After
     public void cleanUp() throws Exception {
+        System.clearProperty(QuorumPeer.CONFIG_KEY_MULTI_ADDRESS_ENABLED);
         clearSSLSystemProperties();
         if (q1 != null) {
             q1.shutdown();
@@ -480,6 +481,7 @@ public void testQuorumSSL() throws Exception {
 
     @Test
     public void testQuorumSSLWithMultipleAddresses() throws Exception {
+        System.setProperty(QuorumPeer.CONFIG_KEY_MULTI_ADDRESS_ENABLED, "true");
         quorumConfiguration = generateMultiAddressQuorumConfiguration();
 
         q1 = new MainThread(1, clientPortQp1, quorumConfiguration, SSL_QUORUM_ENABLED);
@@ -598,6 +600,7 @@ public void testHostnameVerificationWithInvalidIpAddressAndInvalidHostname() thr
 
     @Test
     public void testHostnameVerificationForInvalidMultiAddressServerConfig() throws Exception {
+        System.setProperty(QuorumPeer.CONFIG_KEY_MULTI_ADDRESS_ENABLED, "true");
         quorumConfiguration = generateMultiAddressQuorumConfiguration();
 
         String badhostnameKeystorePath = tmpDir + "/badhost.jks";

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/QuorumAuthUpgradeTest.java
Patch:
@@ -67,8 +67,10 @@ public class QuorumAuthUpgradeTest extends QuorumAuthTestBase {
     }
 
     @After
+    @Override
     public void tearDown() throws Exception {
         shutdownAll();
+        super.tearDown();
     }
 
     @AfterClass

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/QuorumDigestAuthTest.java
Patch:
@@ -60,11 +60,13 @@ public class QuorumDigestAuthTest extends QuorumAuthTestBase {
     }
 
     @After
+    @Override
     public void tearDown() throws Exception {
         for (MainThread mainThread : mt) {
             mainThread.shutdown();
             mainThread.deleteBaseDir();
         }
+        super.tearDown();
     }
 
     @AfterClass

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/QuorumKerberosAuthTest.java
Patch:
@@ -88,11 +88,13 @@ public static void setUp() throws Exception {
     }
 
     @After
+    @Override
     public void tearDown() throws Exception {
         for (MainThread mainThread : mt) {
             mainThread.shutdown();
             mainThread.deleteBaseDir();
         }
+        super.tearDown();
     }
 
     @AfterClass

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/QuorumKerberosHostBasedAuthTest.java
Patch:
@@ -113,11 +113,13 @@ public static void setUp() throws Exception {
     }
 
     @After
+    @Override
     public void tearDown() throws Exception {
         for (MainThread mainThread : mt) {
             mainThread.shutdown();
             mainThread.deleteBaseDir();
         }
+        super.tearDown();
     }
 
     @AfterClass

File: zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java
Patch:
@@ -168,7 +168,7 @@ public void process(WatchedEvent event) {
     }
 
     /**
-     * a zoookeeper operation that is mainly responsible
+     * a zookeeper operation that is mainly responsible
      * for all the magic required for locking.
      */
     private class LockZooKeeperOperation implements ZooKeeperOperation {

File: zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java
Patch:
@@ -335,7 +335,7 @@ public byte[] run() throws SaslException {
                     error += " Zookeeper Client will go to AUTH_FAILED state.";
                     LOG.error(error);
                     saslState = SaslState.FAILED;
-                    throw new SaslException(error);
+                    throw new SaslException(error, e);
                 }
             }
         } else {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java
Patch:
@@ -195,7 +195,7 @@ public byte[] run() throws SaslException {
                                  + " '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your server's JVMFLAGS environment.";
                     }
                     LOG.error(error);
-                    throw new SaslException(error);
+                    throw new SaslException(error, e);
                 }
             }
         } else {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java
Patch:
@@ -597,7 +597,7 @@ public void run() {
 
     private void makeValidSnapshot(File snapFile) throws IOException {
         SnapStream.setStreamMode(SnapStream.StreamMode.CHECKED);
-        CheckedOutputStream os = SnapStream.getOutputStream(snapFile);
+        CheckedOutputStream os = SnapStream.getOutputStream(snapFile, true);
         OutputArchive oa = BinaryOutputArchive.getArchive(os);
         FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);
         header.serialize(oa, "fileheader");
@@ -610,7 +610,7 @@ private void makeValidSnapshot(File snapFile) throws IOException {
 
     private void makeInvalidSnapshot(File snapFile) throws IOException {
         SnapStream.setStreamMode(SnapStream.StreamMode.CHECKED);
-        OutputStream os = SnapStream.getOutputStream(snapFile);
+        OutputStream os = SnapStream.getOutputStream(snapFile, true);
         os.write(1);
         os.flush();
         os.close();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java
Patch:
@@ -79,7 +79,7 @@ public static void purge(File dataDir, File snapDir, int num) throws IOException
 
         FileTxnSnapLog txnLog = new FileTxnSnapLog(dataDir, snapDir);
 
-        List<File> snaps = txnLog.findNRecentSnapshots(num);
+        List<File> snaps = txnLog.findNValidSnapshots(num);
         int numSnaps = snaps.size();
         if (numSnaps > 0) {
             purgeOlderSnapshots(txnLog, snaps.get(numSnaps - 1));

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java
Patch:
@@ -159,7 +159,7 @@ public File findMostRecentSnapshot() throws IOException {
      * less than n in case enough snapshots are not available).
      * @throws IOException
      */
-    private List<File> findNValidSnapshots(int n) throws IOException {
+    protected List<File> findNValidSnapshots(int n) throws IOException {
         List<File> files = Util.sortDataDir(snapDir.listFiles(), SNAPSHOT_FILE_PREFIX, false);
         int count = 0;
         List<File> list = new ArrayList<File>();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java
Patch:
@@ -260,6 +260,8 @@ public synchronized void serialize(
                     Util.getZxidFromName(snapShot.getName(), SNAPSHOT_FILE_PREFIX),
                     snapShot.lastModified() / 1000);
             }
+        } else {
+            throw new IOException("FileSnap has already been closed");
         }
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
+import java.io.Closeable;
 import java.io.EOFException;
 import java.io.File;
 import java.io.FileInputStream;
@@ -93,7 +94,7 @@
  *     0 padded to EOF (filled during preallocation stage)
  * </pre></blockquote>
  */
-public class FileTxnLog implements TxnLog {
+public class FileTxnLog implements TxnLog, Closeable {
 
     private static final Logger LOG;
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/SnapshotDigestTest.java
Patch:
@@ -194,6 +194,8 @@ private void reloadSnapshotAndCheckDigest() throws Exception {
         startServer();
         QuorumPeerMainTest.waitForOne(zk, States.CONNECTED);
 
+        server = serverFactory.getZooKeeperServer();
+
         // Snapshot digests always match
         assertEquals(0L, ServerMetrics.getMetrics().DIGEST_MISMATCHES_COUNT.get());
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
Patch:
@@ -132,7 +132,7 @@ public FileTxnSnapLog(File dataDir, File snapDir) throws IOException {
                     ZOOKEEPER_DATADIR_AUTOCREATE));
             }
 
-            if (!this.dataDir.mkdirs()) {
+            if (!this.dataDir.mkdirs() && !this.dataDir.exists()) {
                 throw new DatadirException("Unable to create data directory " + this.dataDir);
             }
         }
@@ -151,7 +151,7 @@ public FileTxnSnapLog(File dataDir, File snapDir) throws IOException {
                     ZOOKEEPER_DATADIR_AUTOCREATE));
             }
 
-            if (!this.snapDir.mkdirs()) {
+            if (!this.snapDir.mkdirs() && !this.snapDir.exists()) {
                 throw new DatadirException("Unable to create snap directory " + this.snapDir);
             }
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -204,6 +204,8 @@ public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServ
             if (config.sslQuorumReloadCertFiles) {
                 quorumPeer.getX509Util().enableCertFileReloading();
             }
+            quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());
+            quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());
 
             // sets quorum sasl authentication configurations
             quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -470,7 +470,7 @@ public void testBadPeerAddressInQuorum() throws Exception {
         LineNumberReader r = new LineNumberReader(new StringReader(os.toString()));
         String line;
         boolean found = false;
-        Pattern p = Pattern.compile(".*None of the addresses .* are reachable for sid 2");
+        Pattern p = Pattern.compile(".*Cannot open channel to .* at election address .*");
         while ((line = r.readLine()) != null) {
             found = p.matcher(line).matches();
             if (found) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/LsCommand.java
Patch:
@@ -127,11 +127,10 @@ private void printChildren(List<String> children, Stat stat) {
             }
             out.append(child);
         }
-        out.append("]");
+        out.append("]\n");
         if (stat != null) {
             new StatPrinter(out).print(stat);
         }
-        out.append("\n");
     }
 
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java
Patch:
@@ -248,8 +248,8 @@ private void flush() throws IOException, RequestProcessorException {
             if (this.nextProcessor instanceof Flushable) {
                 ((Flushable) this.nextProcessor).flush();
             }
-            lastFlushTime = Time.currentElapsedTime();
         }
+        lastFlushTime = Time.currentElapsedTime();
     }
 
     public void shutdown() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java
Patch:
@@ -59,7 +59,7 @@ public class ContainerManager {
      *                     herding of container deletions
      */
     public ContainerManager(ZKDatabase zkDb, RequestProcessor requestProcessor, int checkIntervalMs, int maxPerMinute) {
-        this(zkDb, requestProcessor, checkIntervalMs, maxPerMinute, Long.MAX_VALUE);
+        this(zkDb, requestProcessor, checkIntervalMs, maxPerMinute, 0);
     }
 
     /**

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -414,7 +414,7 @@ public ZooKeeperServerConf getConf() {
             zkDb.snapLog.getSnapDir().getAbsolutePath(),
             zkDb.snapLog.getDataDir().getAbsolutePath(),
             getTickTime(),
-            serverCnxnFactory.getMaxClientCnxnsPerHost(),
+            getMaxClientCnxnsPerHost(),
             getMinSessionTimeout(),
             getMaxSessionTimeout(),
             getServerId(),

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -378,7 +378,6 @@ public void testElectionFraud() throws IOException, InterruptedException {
                                                                             != null);
 
             // to keep the quorum peer running and force it to go into the looking state, we kill leader election
-            // and close the connection to the leader
             servers.mt[falseLeader].main.quorumPeer.electionAlg.shutdown();
             servers.mt[falseLeader].main.quorumPeer.follower.getSocket().close();
 
@@ -473,7 +472,7 @@ public void testBadPeerAddressInQuorum() throws Exception {
         LineNumberReader r = new LineNumberReader(new StringReader(os.toString()));
         String line;
         boolean found = false;
-        Pattern p = Pattern.compile(".*Cannot open channel to .* at election address .*");
+        Pattern p = Pattern.compile(".*None of the addresses .* are reachable for sid 2");
         while ((line = r.readLine()) != null) {
             found = p.matcher(line).matches();
             if (found) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigFailureCasesTest.java
Patch:
@@ -77,8 +77,8 @@ public void testIncrementalReconfigInvokedOnHiearchicalQS() throws Exception {
 
         for (int i = 1; i <= 5; i++) {
             members.add("server." + i + "=127.0.0.1:"
-                        + qu.getPeer(i).peer.getQuorumAddress().getPort()
-                        + ":" + qu.getPeer(i).peer.getElectionAddress().getPort()
+                        + qu.getPeer(i).peer.getQuorumAddress().getAllPorts().get(0)
+                        + ":" + qu.getPeer(i).peer.getElectionAddress().getAllPorts().get(0)
                         + ";" + "127.0.0.1:"
                         + qu.getPeer(i).peer.getClientPort());
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java
Patch:
@@ -148,7 +148,7 @@ public void startAll() throws IOException {
 
         LOG.info("Checking ports {}", hostPort);
         for (String hp : hostPort.split(",")) {
-            assertTrue("waiting for server up", ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT));
+            assertTrue("waiting for server " + hp + " up", ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT));
             LOG.info("{} is accepting client connections", hp);
         }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ReconfigExceptionTest.java
Patch:
@@ -198,9 +198,9 @@ private boolean reconfigPort() throws KeeperException, InterruptedException {
         }
         int followerId = leaderId == 1 ? 2 : 1;
         joiningServers.add("server." + followerId + "=localhost:"
-                           + qu.getPeer(followerId).peer.getQuorumAddress().getPort() /*quorum port*/
+                           + qu.getPeer(followerId).peer.getQuorumAddress().getAllPorts().get(0) /*quorum port*/
                            + ":"
-                           + qu.getPeer(followerId).peer.getElectionAddress().getPort() /*election port*/
+                           + qu.getPeer(followerId).peer.getElectionAddress().getAllPorts().get(0) /*election port*/
                            + ":participant;localhost:"
                            + PortAssignment.unique()/* new client port */);
         zkAdmin.reconfigure(joiningServers, null, null, -1, new Stat());

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ReconfigMisconfigTest.java
Patch:
@@ -121,9 +121,9 @@ private boolean reconfigPort() throws KeeperException, InterruptedException {
         int followerId = leaderId == 1 ? 2 : 1;
         joiningServers.add("server." + followerId
                            + "=localhost:"
-                           + qu.getPeer(followerId).peer.getQuorumAddress().getPort() /*quorum port*/
+                           + qu.getPeer(followerId).peer.getQuorumAddress().getAllPorts().get(0) /*quorum port*/
                            + ":"
-                           + qu.getPeer(followerId).peer.getElectionAddress().getPort() /*election port*/
+                           + qu.getPeer(followerId).peer.getElectionAddress().getAllPorts().get(0) /*election port*/
                            + ":participant;localhost:"
                            + PortAssignment.unique()/* new client port */);
         zkAdmin.reconfigure(joiningServers, null, null, -1, new Stat());

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -66,6 +66,7 @@
 import org.apache.zookeeper.cli.VersionCommand;
 import org.apache.zookeeper.client.ZKClientConfig;
 import org.apache.zookeeper.server.ExitCode;
+import org.apache.zookeeper.util.ServiceUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -353,7 +354,7 @@ void run() throws CliException, IOException, InterruptedException {
             // Command line args non-null.  Run what was passed.
             processCmd(cl);
         }
-        System.exit(exitCode);
+        ServiceUtils.requestSystemExit(exitCode);
     }
 
     public void executeLine(String line) throws CliException, InterruptedException, IOException {
@@ -396,7 +397,7 @@ protected boolean processZKCmd(MyCommandOptions co) throws CliException, IOExcep
 
         if (cmd.equals("quit")) {
             zk.close();
-            System.exit(exitCode);
+            ServiceUtils.requestSystemExit(exitCode);
         } else if (cmd.equals("redo") && args.length >= 2) {
             Integer i = Integer.decode(args[1]);
             if (commandCount <= i || i < 0) { // don't allow redoing this redo

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -78,6 +78,7 @@
 import org.apache.zookeeper.txn.SetDataTxn;
 import org.apache.zookeeper.txn.Txn;
 import org.apache.zookeeper.txn.TxnHeader;
+import org.apache.zookeeper.util.ServiceUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -301,7 +302,7 @@ public DataTree() {
             childWatches = WatchManagerFactory.createWatchManager();
         } catch (Exception e) {
             LOG.error("Unexpected exception when creating WatchManager, exiting abnormally", e);
-            System.exit(ExitCode.UNEXPECTED_ERROR.getValue());
+            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
         }
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.yetus.audience.InterfaceAudience;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.server.persistence.Util;
+import org.apache.zookeeper.util.ServiceUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -230,7 +231,7 @@ private static int validateAndGetCount(String number) {
 
     private static void printUsageThenExit() {
         printUsage();
-        System.exit(ExitCode.UNEXPECTED_ERROR.getValue());
+        ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
     }
 
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java
Patch:
@@ -20,6 +20,7 @@
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.concurrent.LinkedBlockingQueue;
+import org.apache.zookeeper.util.ServiceUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -257,7 +258,7 @@ public void shutdown() {
         } catch (InterruptedException e) {
             LOG.warn("Interrupted while waiting for {} to finish", this);
             //TODO apply ZOOKEEPER-575 and remove this line.
-            System.exit(ExitCode.UNEXPECTED_ERROR.getValue());
+            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
         }
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java
Patch:
@@ -25,6 +25,7 @@
 import java.text.DateFormat;
 import java.util.Date;
 import org.apache.zookeeper.ZooDefs.OpCode;
+import org.apache.zookeeper.util.ServiceUtils;
 
 public class TraceFormatter {
 
@@ -35,7 +36,7 @@ public class TraceFormatter {
     public static void main(String[] args) throws IOException {
         if (args.length != 1) {
             System.err.println("USAGE: TraceFormatter trace_file");
-            System.exit(ExitCode.INVALID_INVOCATION.getValue());
+            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
         }
         FileChannel fc = new FileInputStream(args[0]).getChannel();
         while (true) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -80,6 +80,7 @@
 import org.apache.zookeeper.server.util.RequestPathMetricsCollector;
 import org.apache.zookeeper.txn.CreateSessionTxn;
 import org.apache.zookeeper.txn.TxnHeader;
+import org.apache.zookeeper.util.ServiceUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -511,7 +512,7 @@ public void takeSnapshot(boolean syncSnap) {
             LOG.error("Severe unrecoverable error, exiting", e);
             // This is a severe error that we cannot recover from,
             // so we need to exit
-            System.exit(ExitCode.TXNLOG_ERROR_TAKING_SNAPSHOT.getValue());
+            ServiceUtils.requestSystemExit(ExitCode.TXNLOG_ERROR_TAKING_SNAPSHOT.getValue());
         }
         long elapsed = Time.currentElapsedTime() - start;
         LOG.info("Snapshot taken in {} ms", elapsed);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java
Patch:
@@ -58,6 +58,7 @@
 import org.apache.zookeeper.txn.SetDataTxn;
 import org.apache.zookeeper.txn.Txn;
 import org.apache.zookeeper.txn.TxnHeader;
+import org.apache.zookeeper.util.ServiceUtils;
 
 public class TxnLogToolkit implements Closeable {
 
@@ -126,7 +127,7 @@ public static void main(String[] args) throws Exception {
             printHelpAndExit(e.getExitCode(), e.getOptions());
         } catch (TxnLogToolkitException e) {
             System.err.println(e.getMessage());
-            System.exit(e.getExitCode());
+            ServiceUtils.requestSystemExit(e.getExitCode());
         }
     }
 
@@ -424,7 +425,7 @@ private static TxnLogToolkit parseCommandLine(String[] args) throws TxnLogToolki
     private static void printHelpAndExit(int exitCode, Options options) {
         HelpFormatter help = new HelpFormatter();
         help.printHelp(120, "TxnLogToolkit [-dhrvc] <txn_log_file_name> (-z <zxid>)", "", options, "");
-        System.exit(exitCode);
+        ServiceUtils.requestSystemExit(exitCode);
     }
 
     private void printStat() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.txn.TxnHeader;
+import org.apache.zookeeper.util.ServiceUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -100,7 +101,7 @@ public void commit(long zxid) {
         if (firstElementZxid != zxid) {
             LOG.error("Committing zxid 0x" + Long.toHexString(zxid)
                       + " but next pending txn 0x" + Long.toHexString(firstElementZxid));
-            System.exit(ExitCode.UNMATCHED_TXN_COMMIT.getValue());
+            ServiceUtils.requestSystemExit(ExitCode.UNMATCHED_TXN_COMMIT.getValue());
         }
         Request request = pendingTxns.remove();
         request.logLatency(ServerMetrics.getMetrics().COMMIT_PROPAGATION_LATENCY);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -52,6 +52,7 @@
 import org.apache.zookeeper.server.util.ZxidUtils;
 import org.apache.zookeeper.txn.SetDataTxn;
 import org.apache.zookeeper.txn.TxnHeader;
+import org.apache.zookeeper.util.ServiceUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -455,14 +456,13 @@ protected void syncWithLeader(long newLeaderZxid) throws Exception {
                 if (!truncated) {
                     // not able to truncate the log
                     LOG.error("Not able to truncate the log 0x{}", Long.toHexString(qp.getZxid()));
-                    System.exit(ExitCode.QUORUM_PACKET_ERROR.getValue());
+                    ServiceUtils.requestSystemExit(ExitCode.QUORUM_PACKET_ERROR.getValue());
                 }
                 zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());
 
             } else {
                 LOG.error("Got unexpected packet from leader: {}, exiting ... ", LearnerHandler.packetToString(qp));
-                System.exit(ExitCode.QUORUM_PACKET_ERROR.getValue());
-
+                ServiceUtils.requestSystemExit(ExitCode.QUORUM_PACKET_ERROR.getValue());
             }
             zk.getZKDatabase().initConfigInZKDatabase(self.getQuorumVerifier());
             zk.createSessionTracker();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.zookeeper.server.quorum.flexible.QuorumVerifier;
 import org.apache.zookeeper.server.util.ConfigUtils;
 import org.apache.zookeeper.util.CircularBlockingQueue;
+import org.apache.zookeeper.util.ServiceUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -825,7 +826,7 @@ public class Listener extends ZooKeeperThread {
         private static final int DEFAULT_PORT_BIND_MAX_RETRY = 3;
 
         private final int portBindMaxRetry;
-        private Runnable socketBindErrorHandler = () -> System.exit(ExitCode.UNABLE_TO_BIND_QUORUM_PORT.getValue());
+        private Runnable socketBindErrorHandler = () -> ServiceUtils.requestSystemExit(ExitCode.UNABLE_TO_BIND_QUORUM_PORT.getValue());
         volatile ServerSocket ss = null;
 
         public Listener() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.zookeeper.server.persistence.FileHeader;
 import org.apache.zookeeper.server.persistence.FileTxnLog;
 import org.apache.zookeeper.txn.TxnHeader;
+import org.apache.zookeeper.util.ServiceUtils;
 
 /**
  * this class will chop the log at the specified zxid
@@ -49,7 +50,7 @@ public static void main(String[] args) {
             System.out.println("Usage: LogChopper zxid_to_chop_to txn_log_to_chop chopped_filename");
             System.out.println("    this program will read the txn_log_to_chop file and copy all the transactions");
             System.out.println("    from it up to (and including) the given zxid into chopped_filename.");
-            System.exit(rc.getValue());
+            ServiceUtils.requestSystemExit(rc.getValue());
         }
         String txnLog = args[1];
         String choppedLog = args[2];
@@ -63,7 +64,7 @@ public static void main(String[] args) {
         } catch (Exception e) {
             System.out.println("Got exception: " + e.getMessage());
         }
-        System.exit(rc.getValue());
+        ServiceUtils.requestSystemExit(rc.getValue());
     }
 
     public static boolean chop(InputStream is, OutputStream os, long zxid) throws IOException {

File: zookeeper-server/src/main/java/org/apache/zookeeper/version/util/VerGen.java
Patch:
@@ -18,13 +18,15 @@
 
 package org.apache.zookeeper.version.util;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import org.apache.zookeeper.server.ExitCode;
 
+@SuppressFBWarnings("DM_EXIT")
 public class VerGen {
 
     private static final String PACKAGE_NAME = "org.apache.zookeeper.version";
@@ -123,7 +125,7 @@ public static void generateFile(File outputDir, Version version, String rev, Str
             w.write("}\n");
         } catch (IOException e) {
             System.out.println("Unable to generate version.VersionInfoMain file: " + e.getMessage());
-            System.exit(1);
+            System.exit(ExitCode.UNEXPECTED_ERROR.getValue());
         }
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -169,7 +169,9 @@ public void runFromConfig(ServerConfig config) throws IOException, AdminServerEx
                 zkServer.getZKDatabase(),
                 zkServer.firstProcessor,
                 Integer.getInteger("znode.container.checkIntervalMs", (int) TimeUnit.MINUTES.toMillis(1)),
-                Integer.getInteger("znode.container.maxPerMinute", 10000));
+                Integer.getInteger("znode.container.maxPerMinute", 10000),
+                Long.getLong("znode.container.maxNeverUsedIntervalMs", 0)
+            );
             containerManager.start();
             ZKAuditProvider.addZKStartStopAuditLog();
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -81,7 +81,9 @@ private synchronized void setupContainerManager() {
             getZKDatabase(),
             prepRequestProcessor,
             Integer.getInteger("znode.container.checkIntervalMs", (int) TimeUnit.MINUTES.toMillis(1)),
-            Integer.getInteger("znode.container.maxPerMinute", 10000));
+            Integer.getInteger("znode.container.maxPerMinute", 10000),
+            Long.getLong("znode.container.maxNeverUsedIntervalMs", 0)
+        );
     }
 
     @Override

File: zookeeper-server/src/main/java/org/apache/zookeeper/client/ZKClientConfig.java
Patch:
@@ -99,6 +99,7 @@ protected void handleBackwardCompatibility() {
          * backward compatibility for client specific properties
          */
         setProperty(ZK_SASL_CLIENT_USERNAME, System.getProperty(ZK_SASL_CLIENT_USERNAME));
+        setProperty(ZK_SASL_CLIENT_CANONICALIZE_HOSTNAME, System.getProperty(ZK_SASL_CLIENT_CANONICALIZE_HOSTNAME));
         setProperty(LOGIN_CONTEXT_NAME_KEY, System.getProperty(LOGIN_CONTEXT_NAME_KEY));
         setProperty(ENABLE_CLIENT_SASL_KEY, System.getProperty(ENABLE_CLIENT_SASL_KEY));
         setProperty(ZOOKEEPER_SERVER_REALM, System.getProperty(ZOOKEEPER_SERVER_REALM));

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Set;
 import org.apache.commons.lang.StringUtils;
 import org.apache.jute.Record;
+import org.apache.zookeeper.ClientCnxn;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.KeeperException.Code;
 import org.apache.zookeeper.KeeperException.SessionMovedException;
@@ -200,7 +201,7 @@ public void processRequest(Request request) {
                 lastOp = "PING";
                 updateStats(request, lastOp, lastZxid);
 
-                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, "response");
+                cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, "response");
                 return;
             }
             case OpCode.createSession: {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.jute.BinaryInputArchive;
 import org.apache.jute.Record;
+import org.apache.zookeeper.ClientCnxn;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.ZooDefs;
 import org.apache.zookeeper.data.Id;
@@ -681,7 +682,7 @@ public void sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, S
      */
     @Override
     public void process(WatchedEvent event) {
-        ReplyHeader h = new ReplyHeader(-1, -1L, 0);
+        ReplyHeader h = new ReplyHeader(ClientCnxn.NOTIFICATION_XID, -1L, 0);
         if (LOG.isTraceEnabled()) {
             ZooTrace.logTraceMessage(
                 LOG,

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java
Patch:
@@ -40,6 +40,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.jute.BinaryInputArchive;
 import org.apache.jute.Record;
+import org.apache.zookeeper.ClientCnxn;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.data.Id;
 import org.apache.zookeeper.data.Stat;
@@ -147,7 +148,7 @@ public int getSessionTimeout() {
 
     @Override
     public void process(WatchedEvent event) {
-        ReplyHeader h = new ReplyHeader(-1, -1L, 0);
+        ReplyHeader h = new ReplyHeader(ClientCnxn.NOTIFICATION_XID, -1L, 0);
         if (LOG.isTraceEnabled()) {
             ZooTrace.logTraceMessage(
                 LOG,

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/WatchLeakTest.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.Random;
 import org.apache.jute.InputArchive;
 import org.apache.jute.OutputArchive;
+import org.apache.zookeeper.ClientCnxn;
 import org.apache.zookeeper.MockPacket;
 import org.apache.zookeeper.ZKParameterized;
 import org.apache.zookeeper.ZooDefs;
@@ -251,7 +252,7 @@ private ByteBuffer createWatchesMessage() {
         SetWatches sw = new SetWatches(1L, dataWatches, existWatches, childWatches);
         RequestHeader h = new RequestHeader();
         h.setType(ZooDefs.OpCode.setWatches);
-        h.setXid(-8);
+        h.setXid(ClientCnxn.SET_WATCHES_XID);
         MockPacket p = new MockPacket(h, new ReplyHeader(), sw, null, null);
         return p.createAndReturnBB();
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java
Patch:
@@ -61,7 +61,8 @@ public void close(DisconnectReason reason) {
     }
 
     @Override
-    public void sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, Stat stat) throws IOException {
+    public void sendResponse(ReplyHeader h, Record r, String tag,
+                             String cacheKey, Stat stat, int opCode) throws IOException {
     }
 
     @Override

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java
Patch:
@@ -167,13 +167,14 @@ public void process(WatchedEvent event) {
     }
 
     @Override
-    public void sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, Stat stat) throws IOException {
+    public void sendResponse(ReplyHeader h, Record r, String tag,
+                             String cacheKey, Stat stat, int opCode) throws IOException {
         // cacheKey and stat are used in caching, which is not
         // implemented here. Implementation example can be found in NIOServerCnxn.
         if (closingChannel || !channel.isOpen()) {
             return;
         }
-        sendBuffer(serialize(h, r, tag, cacheKey, stat));
+        sendBuffer(serialize(h, r, tag, cacheKey, stat, opCode));
         decrOutstandingAndCheckThrottle(h);
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/MockServerCnxn.java
Patch:
@@ -46,7 +46,8 @@ public void close(DisconnectReason reason) {
     }
 
     @Override
-    public void sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, Stat stat) throws IOException {
+    public void sendResponse(ReplyHeader h, Record r, String tag,
+                             String cacheKey, Stat stat, int opCode) throws IOException {
     }
 
     @Override

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.yetus.audience.InterfaceAudience;
 import org.apache.zookeeper.admin.ZooKeeperAdmin;
 import org.apache.zookeeper.cli.AddAuthCommand;
+import org.apache.zookeeper.cli.AddWatchCommand;
 import org.apache.zookeeper.cli.CliCommand;
 import org.apache.zookeeper.cli.CliException;
 import org.apache.zookeeper.cli.CloseCommand;
@@ -123,6 +124,7 @@ public boolean getPrintWatches() {
         new GetEphemeralsCommand().addToMap(commandMapCli);
         new GetAllChildrenNumberCommand().addToMap(commandMapCli);
         new VersionCommand().addToMap(commandMapCli);
+        new AddWatchCommand().addToMap(commandMapCli);
 
         // add all to commandMap
         for (Entry<String, CliCommand> entry : commandMapCli.entrySet()) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -797,10 +797,12 @@ protected void pRequest(Request request) throws RequestProcessorException {
             case OpCode.getChildren2:
             case OpCode.ping:
             case OpCode.setWatches:
+            case OpCode.setWatches2:
             case OpCode.checkWatches:
             case OpCode.removeWatches:
             case OpCode.getEphemerals:
             case OpCode.multiRead:
+            case OpCode.addWatch:
                 zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
                 break;
             default:

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java
Patch:
@@ -32,6 +32,7 @@
 import static org.apache.zookeeper.ZooDefs.OpCode.removeWatches;
 import static org.apache.zookeeper.ZooDefs.OpCode.setACL;
 import static org.apache.zookeeper.ZooDefs.OpCode.setData;
+import static org.apache.zookeeper.ZooDefs.OpCode.setWatches2;
 import static org.apache.zookeeper.ZooDefs.OpCode.sync;
 import java.io.PrintWriter;
 import java.util.Arrays;
@@ -131,6 +132,7 @@ public RequestPathMetricsCollector(boolean accurateMode) {
         requestsMap.put(Request.op2String(getChildren2), new PathStatsQueue(getChildren2));
         requestsMap.put(Request.op2String(checkWatches), new PathStatsQueue(checkWatches));
         requestsMap.put(Request.op2String(removeWatches), new PathStatsQueue(removeWatches));
+        requestsMap.put(Request.op2String(setWatches2), new PathStatsQueue(setWatches2));
         requestsMap.put(Request.op2String(sync), new PathStatsQueue(sync));
         this.immutableRequestsMap = java.util.Collections.unmodifiableMap(requestsMap);
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java
Patch:
@@ -49,7 +49,7 @@ public class WatchManagerTest extends ZKTestCase {
 
     protected static final Logger LOG = LoggerFactory.getLogger(WatchManagerTest.class);
 
-    private static final String PATH_PREFIX = "path";
+    private static final String PATH_PREFIX = "/path";
 
     private ConcurrentHashMap<Integer, DumbWatcher> watchers;
     private Random r;

File: zookeeper-server/src/main/java/org/apache/zookeeper/client/ZKClientConfig.java
Patch:
@@ -57,7 +57,7 @@ public class ZKClientConfig extends ZKConfig {
      */
     @SuppressWarnings("deprecation")
     public static final String SECURE_CLIENT = ZooKeeper.SECURE_CLIENT;
-    public static final int CLIENT_MAX_PACKET_LENGTH_DEFAULT = 4096 * 1024; /* 4 MB */
+    public static final int CLIENT_MAX_PACKET_LENGTH_DEFAULT = 0xfffff; /* 1 MB */
     public static final String ZOOKEEPER_REQUEST_TIMEOUT = "zookeeper.request.timeout";
     public static final String ZOOKEEPER_SERVER_PRINCIPAL = "zookeeper.server.principal";
     /**

File: zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java
Patch:
@@ -282,7 +282,7 @@ public void add(long delta) {
             try {
                 inner.inc(delta);
             } catch (IllegalArgumentException err) {
-                LOG.error("invalid delta " + delta + " for metric " + name, err);
+                LOG.error("invalid delta {} for metric {}", delta, name, err);
             }
         }
 
@@ -354,7 +354,7 @@ public void add(long delta) {
             try {
                 inner.observe(delta);
             } catch (IllegalArgumentException err) {
-                LOG.error("invalid delta " + delta + " for metric " + name, err);
+                LOG.error("invalid delta {} for metric {}", delta, name, err);
             }
         }
 
@@ -389,7 +389,7 @@ public void add(String key, long value) {
             try {
                 inner.labels(key).observe(value);
             } catch (IllegalArgumentException err) {
-                LOG.error("invalid value " + value + " for metric " + name + " with key " + key, err);
+                LOG.error("invalid value {} for metric {} with key {}", value, name, key, err);
             }
         }
 

File: zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java
Patch:
@@ -44,12 +44,12 @@ public ZNodeName(String name) {
             this.prefix = name.substring(0, idx);
             try {
                 this.sequence = Integer.parseInt(name.substring(idx + 1));
-                // If an exception occurred we misdetected a sequence suffix,
+                // If an exception occurred we mis-detected a sequence suffix,
                 // so return -1.
             } catch (NumberFormatException e) {
-                LOG.info("Number format exception for " + idx, e);
+                LOG.warn("Number format exception for {}.", idx, e);
             } catch (ArrayIndexOutOfBoundsException e) {
-                LOG.info("Array out of bounds for " + idx, e);
+                LOG.warn("Array out of bounds for {}.", idx, e);
             }
         }
     }

File: zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java
Patch:
@@ -34,7 +34,6 @@ public class DistributedQueueTest extends ClientBase {
     @After
     public void tearDown() throws Exception {
         super.tearDown();
-        LOG.info("FINISHED " + getTestName());
     }
 
     @Test

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java
Patch:
@@ -147,7 +147,7 @@ public void operationComplete(ChannelFuture channelFuture) throws Exception {
                     connectLock.lock();
                     try {
                         if (!channelFuture.isSuccess()) {
-                            LOG.info("future isn't success, cause:", channelFuture.cause());
+                            LOG.warn("future isn't success.", channelFuture.cause());
                             return;
                         } else if (connectFuture == null) {
                             LOG.info("connect attempt cancelled");
@@ -519,7 +519,7 @@ protected void channelRead0(ChannelHandlerContext ctx, ByteBuf buf) throws Excep
 
         @Override
         public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
-            LOG.warn("Exception caught", cause);
+            LOG.error("Unexpected throwable", cause);
             cleanup();
         }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java
Patch:
@@ -182,7 +182,7 @@ private class WatcherThread extends ZooKeeperThread {
         @Override
         public void run() {
             try {
-                LOG.info(getName() + " thread started");
+                LOG.info("{} thread started", getName());
                 if (!compareAndSetState(FileChangeWatcher.State.STARTING, FileChangeWatcher.State.RUNNING)) {
                     // stop() called shortly after start(), before
                     // this thread started running.
@@ -202,7 +202,7 @@ public void run() {
                 } catch (IOException e) {
                     LOG.warn("Error closing watch service", e);
                 }
-                LOG.info(getName() + " thread finished");
+                LOG.info("{} thread finished", getName());
                 FileChangeWatcher.this.setState(FileChangeWatcher.State.STOPPED);
             }
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java
Patch:
@@ -151,9 +151,7 @@ public boolean verify(final String host, final SSLSession session) {
             verify(host, x509);
             return true;
         } catch (final SSLException ex) {
-            if (log.isDebugEnabled()) {
-                log.debug(ex.getMessage(), ex);
-            }
+            log.debug("Unexpected exception", ex);
             return false;
         }
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java
Patch:
@@ -107,7 +107,7 @@ public void register(ZKMBeanInfo bean, ZKMBeanInfo parent) throws JMException {
                 mapBean2Path.put(bean, path);
             }
         } catch (JMException e) {
-            LOG.warn("Failed to register MBean " + bean.getName());
+            LOG.warn("Failed to register MBean {}", bean.getName());
             throw e;
         }
     }
@@ -215,7 +215,7 @@ protected ObjectName makeObjectName(String path, ZKMBeanInfo bean) throws Malfor
         try {
             return new ObjectName(beanName.toString());
         } catch (MalformedObjectNameException e) {
-            LOG.warn("Invalid name \"" + beanName.toString() + "\" for class " + bean.getClass().toString());
+            LOG.warn("Invalid name \"{}\" for class {}", beanName, bean.getClass());
             throw e;
         }
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java
Patch:
@@ -100,7 +100,7 @@ public void terminateSession() {
         try {
             zk.closeSession(sessionId);
         } catch (Exception e) {
-            LOG.warn("Unable to closeSession() for session: 0x" + getSessionId(), e);
+            LOG.warn("Unable to closeSession() for session: 0x{}", getSessionId(), e);
         }
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java
Patch:
@@ -64,7 +64,7 @@ public ContainerManager(ZKDatabase zkDb, RequestProcessor requestProcessor, int
         this.maxPerMinute = maxPerMinute;
         timer = new Timer("ContainerManagerTask", true);
 
-        LOG.info(String.format("Using checkIntervalMs=%d maxPerMinute=%d", checkIntervalMs, maxPerMinute));
+        LOG.info("Using checkIntervalMs={} maxPerMinute={}", checkIntervalMs, maxPerMinute);
     }
 
     /**

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java
Patch:
@@ -75,8 +75,8 @@ public DatadirCleanupManager(File snapDir, File dataLogDir, int snapRetainCount,
         this.dataLogDir = dataLogDir;
         this.snapRetainCount = snapRetainCount;
         this.purgeInterval = purgeInterval;
-        LOG.info("autopurge.snapRetainCount set to " + snapRetainCount);
-        LOG.info("autopurge.purgeInterval set to " + purgeInterval);
+        LOG.info("autopurge.snapRetainCount set to {}", snapRetainCount);
+        LOG.info("autopurge.purgeInterval set to {}", purgeInterval);
     }
 
     /**

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -536,14 +536,14 @@ public void processRequest(Request request) {
         } catch (Exception e) {
             // log at error level as we are returning a marshalling
             // error to the user
-            LOG.error("Failed to process " + request, e);
+            LOG.error("Failed to process {}", request, e);
             StringBuilder sb = new StringBuilder();
             ByteBuffer bb = request.request;
             bb.rewind();
             while (bb.hasRemaining()) {
                 sb.append(Integer.toHexString(bb.get() & 0xff));
             }
-            LOG.error("Dumping request buffer: 0x" + sb.toString());
+            LOG.error("Dumping request buffer: 0x{}", sb.toString());
             err = Code.MARSHALLINGERROR;
         }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java
Patch:
@@ -89,7 +89,7 @@ public synchronized List<ACL> convertLong(Long longVal) {
         }
         List<ACL> acls = longKeyMap.get(longVal);
         if (acls == null) {
-            LOG.error("ERROR: ACL not available for long " + longVal);
+            LOG.error("ERROR: ACL not available for long {}", longVal);
             throw new RuntimeException("Failed to fetch acls for " + longVal);
         }
         return acls;
@@ -171,7 +171,7 @@ public synchronized void addUsage(Long acl) {
         }
 
         if (!longKeyMap.containsKey(acl)) {
-            LOG.info("Ignoring acl " + acl + " as it does not exist in the cache");
+            LOG.info("Ignoring acl {} as it does not exist in the cache", acl);
             return;
         }
 
@@ -189,7 +189,7 @@ public synchronized void removeUsage(Long acl) {
         }
 
         if (!longKeyMap.containsKey(acl)) {
-            LOG.info("Ignoring acl " + acl + " as it does not exist in the cache");
+            LOG.info("Ignoring acl {} as it does not exist in the cache", acl);
             return;
         }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java
Patch:
@@ -259,7 +259,7 @@ public void shutdown() {
             this.join();
             this.flush();
         } catch (InterruptedException e) {
-            LOG.warn("Interrupted while wating for " + this + " to finish");
+            LOG.warn("Interrupted while wating for {} to finish", this);
             Thread.currentThread().interrupt();
         } catch (IOException e) {
             LOG.warn("Got IO exception during shutdown");

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooTrace.java
Patch:
@@ -58,7 +58,7 @@ public static synchronized long getTextTraceLevel() {
     public static synchronized void setTextTraceLevel(long mask) {
         traceMask = mask;
         final Logger LOG = LoggerFactory.getLogger(ZooTrace.class);
-        LOG.info("Set text trace mask to 0x" + Long.toHexString(mask));
+        LOG.info("Set text trace mask to 0x{}", Long.toHexString(mask));
     }
 
     public static synchronized boolean isTraceEnabled(Logger log, long mask) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java
Patch:
@@ -125,10 +125,10 @@ public JettyAdminServer(
                 try {
                     keyStore = X509Util.loadKeyStore(privateKeyPath, privateKeyPassword, privateKeyType);
                     trustStore = X509Util.loadTrustStore(certAuthPath, certAuthPassword, certAuthType);
-                    LOG.info("Successfully loaded private key from " + privateKeyPath);
-                    LOG.info("Successfully loaded certificate authority from " + certAuthPath);
+                    LOG.info("Successfully loaded private key from {}", privateKeyPath);
+                    LOG.info("Successfully loaded certificate authority from {}", certAuthPath);
                 } catch (Exception e) {
-                    LOG.error("Failed to load authentication certificates for admin server: " + e);
+                    LOG.error("Failed to load authentication certificates for admin server.", e);
                     throw e;
                 }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ProviderRegistry.java
Patch:
@@ -56,7 +56,7 @@ public static void initialize() {
                         AuthenticationProvider ap = (AuthenticationProvider) c.getDeclaredConstructor().newInstance();
                         authenticationProviders.put(ap.getScheme(), ap);
                     } catch (Exception e) {
-                        LOG.warn("Problems loading " + className, e);
+                        LOG.warn("Problems loading {}", className, e);
                     }
                 }
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java
Patch:
@@ -89,7 +89,7 @@ public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
     private void handleNameCallback(NameCallback nc) {
         // check to see if this user is in the user password database.
         if (credentials.get(nc.getDefaultName()) == null) {
-            LOG.warn("User '" + nc.getDefaultName() + "' not found in list of DIGEST-MD5 authenticateable users.");
+            LOG.warn("User '{}' not found in list of DIGEST-MD5 authenticateable users.", nc.getDefaultName());
             return;
         }
         nc.setName(nc.getDefaultName());
@@ -103,7 +103,7 @@ private void handlePasswordCallback(PasswordCallback pc) {
         } else if (credentials.containsKey(userName)) {
             pc.setPassword(credentials.get(userName).toCharArray());
         } else {
-            LOG.warn("No password found for user: " + userName);
+            LOG.warn("No password found for user: {}", userName);
         }
     }
 
@@ -132,7 +132,7 @@ private void handleAuthorizeCallback(AuthorizeCallback ac) {
             if (shouldAppendRealm(kerberosName)) {
                 userNameBuilder.append("@").append(kerberosName.getRealm());
             }
-            LOG.info("Setting authorizedID: " + userNameBuilder);
+            LOG.info("Setting authorizedID: {}", userNameBuilder);
             ac.setAuthorizedID(userNameBuilder.toString());
         } catch (IOException e) {
             LOG.error("Failed to set name based on Kerberos authentication rules.", e);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FilePadding.java
Patch:
@@ -38,7 +38,7 @@ public class FilePadding {
             try {
                 preAllocSize = Long.parseLong(size) * 1024;
             } catch (NumberFormatException e) {
-                LOG.warn(size + " is not a valid value for preAllocSize");
+                LOG.warn("{} is not a valid value for preAllocSize", size);
             }
         }
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java
Patch:
@@ -81,7 +81,7 @@ public long deserialize(DataTree dt, Map<Long, Integer> sessions) throws IOExcep
         boolean foundValid = false;
         for (int i = 0, snapListSize = snapList.size(); i < snapListSize; i++) {
             snap = snapList.get(i);
-            LOG.info("Reading snapshot " + snap);
+            LOG.info("Reading snapshot {}", snap);
             try (CheckedInputStream snapIS = SnapStream.getInputStream(snap)) {
                 InputArchive ia = BinaryInputArchive.getArchive(snapIS);
                 deserialize(dt, sessions, ia);
@@ -93,7 +93,7 @@ public long deserialize(DataTree dt, Map<Long, Integer> sessions) throws IOExcep
                 foundValid = true;
                 break;
             } catch (IOException e) {
-                LOG.warn("problem reading snap file " + snap, e);
+                LOG.warn("problem reading snap file {}", snap, e);
             }
         }
         if (!foundValid) {
@@ -167,7 +167,7 @@ private List<File> findNValidSnapshots(int n) throws IOException {
                     }
                 }
             } catch (IOException e) {
-                LOG.info("invalid snapshot " + f, e);
+                LOG.warn("invalid snapshot {}", f, e);
             }
         }
         return list;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
Patch:
@@ -131,7 +131,7 @@ void processRequest(Request request, boolean checkForUpgrade) {
                         request.setTxn(new ErrorTxn(ke.code().intValue()));
                     }
                     request.setException(ke);
-                    LOG.info("Error creating upgrade request", ke);
+                    LOG.warn("Error creating upgrade request", ke);
                 } catch (IOException ie) {
                     LOG.error("Unexpected error in upgrade", ie);
                 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderRequestProcessor.java
Patch:
@@ -63,7 +63,7 @@ public void processRequest(Request request) throws RequestProcessorException {
                 request.setTxn(new ErrorTxn(ke.code().intValue()));
             }
             request.setException(ke);
-            LOG.info("Error creating upgrade request " + ke.getMessage());
+            LOG.warn("Error creating upgrade request", ke);
         } catch (IOException ie) {
             LOG.error("Unexpected error in upgrade", ie);
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java
Patch:
@@ -86,7 +86,7 @@ public boolean trackSession(long sessionId, int sessionTimeout) {
         if (localSessionsEnabled && tracked) {
             // Only do extra logging so we know what kind of session this is
             // if we're supporting both kinds of sessions
-            LOG.info("Tracking global session 0x" + Long.toHexString(sessionId));
+            LOG.info("Tracking global session 0x{}", Long.toHexString(sessionId));
         }
         return tracked;
     }
@@ -101,7 +101,7 @@ public synchronized boolean commitSession(
         boolean added = globalSessionTracker.commitSession(sessionId, sessionTimeout);
 
         if (added) {
-            LOG.info("Committing global session 0x" + Long.toHexString(sessionId));
+            LOG.info("Committing global session 0x{}", Long.toHexString(sessionId));
         }
 
         // If the session moved before the session upgrade finished, it's

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandlerBean.java
Patch:
@@ -59,7 +59,7 @@ public boolean isHidden() {
 
     @Override
     public void terminateConnection() {
-        LOG.info("terminating learner handler connection on demand " + toString());
+        LOG.info("terminating learner handler connection on demand {}", toString());
         learnerHandler.shutdown();
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerMaster.java
Patch:
@@ -44,10 +44,10 @@ public abstract class LearnerMaster {
 
     static {
         DEFAULT_CONCURRENT_SNAPSYNCS = Integer.getInteger(MAX_CONCURRENT_SNAPSYNCS, 10);
-        LOG.info(MAX_CONCURRENT_SNAPSYNCS + " = " + DEFAULT_CONCURRENT_SNAPSYNCS);
+        LOG.info("{} = {}", MAX_CONCURRENT_SNAPSYNCS, DEFAULT_CONCURRENT_SNAPSYNCS);
 
         DEFAULT_CONCURRENT_DIFF_SYNCS = Integer.getInteger(MAX_CONCURRENT_DIFF_SYNCS, 100);
-        LOG.info(MAX_CONCURRENT_DIFF_SYNCS + " = " + DEFAULT_CONCURRENT_DIFF_SYNCS);
+        LOG.info("{} = {}", MAX_CONCURRENT_DIFF_SYNCS, DEFAULT_CONCURRENT_DIFF_SYNCS);
     }
 
     private volatile int maxConcurrentSnapSyncs = DEFAULT_CONCURRENT_SNAPSYNCS;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java
Patch:
@@ -113,7 +113,7 @@ public synchronized boolean commitSession(long sessionId, int sessionTimeout) {
         if (added) {
             // Only do extra logging so we know what kind of session this is
             // if we're supporting both kinds of sessions
-            LOG.info("Committing global session 0x" + Long.toHexString(sessionId));
+            LOG.info("Committing global session 0x{}", Long.toHexString(sessionId));
         }
 
         // If the session moved before the session upgrade finished, it's

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java
Patch:
@@ -52,7 +52,7 @@ public class ObserverZooKeeperServer extends LearnerZooKeeperServer {
 
     ObserverZooKeeperServer(FileTxnSnapLog logFactory, QuorumPeer self, ZKDatabase zkDb) throws IOException {
         super(logFactory, self.tickTime, self.minSessionTimeout, self.maxSessionTimeout, self.clientPortListenBacklog, zkDb, self);
-        LOG.info("syncEnabled =" + syncRequestProcessorEnabled);
+        LOG.info("syncEnabled ={}", syncRequestProcessorEnabled);
     }
 
     public Observer getObserver() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -128,7 +128,7 @@ protected void initializeAndRun(String[] args) throws ConfigException, IOExcepti
         if (args.length == 1 && config.isDistributed()) {
             runFromConfig(config);
         } else {
-            LOG.warn("Either no config or no quorum defined in config, running " + " in standalone mode");
+            LOG.warn("Either no config or no quorum defined in config, running in standalone mode");
             // there is only server in the quorum -- run as standalone
             ZooKeeperServerMain.main(args);
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java
Patch:
@@ -89,7 +89,7 @@ public int upgradeSession(long sessionId) {
         // will get the timeout from the map
         Integer timeout = localSessionsWithTimeouts.remove(sessionId);
         if (timeout != null) {
-            LOG.info("Upgrading session 0x" + Long.toHexString(sessionId));
+            LOG.info("Upgrading session 0x{}", Long.toHexString(sessionId));
             // Track global session, which will add to global session tracker
             // on leader and do nothing on learner. Need to start track global
             // session in leader now to update the session expire between

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java
Patch:
@@ -136,7 +136,7 @@ public QuorumHierarchical(String filename) throws ConfigException {
 
     public QuorumHierarchical(Properties qp) throws ConfigException {
         parse(qp);
-        LOG.info(serverWeight.size() + ", " + serverGroup.size() + ", " + groupWeight.size());
+        LOG.info("{}, {}, {}", serverWeight.size(), serverGroup.size(), groupWeight.size());
     }
 
     /**
@@ -155,7 +155,7 @@ public long getWeight(long id) {
     private void readConfigFile(String filename) throws ConfigException {
         File configFile = new File(filename);
 
-        LOG.info("Reading configuration from: " + configFile);
+        LOG.info("Reading configuration from: {}", configFile);
 
         try {
             if (!configFile.exists()) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java
Patch:
@@ -186,10 +186,10 @@ public void start() {
         scheduledExecutor.scheduleWithFixedDelay(() -> {
             LOG.info("%nHere are the top Read paths:");
             logTopPaths(aggregatePaths(4, queue -> !queue.isWriteOperation()),
-                        entry -> LOG.info(entry.getKey() + " : " + entry.getValue()));
+                        entry -> LOG.info("{} : {}", entry.getKey(), entry.getValue()));
             LOG.info("%nHere are the top Write paths:");
             logTopPaths(aggregatePaths(4, queue -> queue.isWriteOperation()),
-                        entry -> LOG.info(entry.getKey() + " : " + entry.getValue()));
+                        entry -> LOG.info("{} : {}", entry.getKey(), entry.getValue()));
         }, COLLECTOR_INITIAL_DELAY, COLLECTOR_DELAY, TimeUnit.MINUTES);
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/InvalidSnapshotTest.java
Patch:
@@ -61,7 +61,7 @@ public void testInvalidSnapshot() throws Exception {
 
         // now corrupt the snapshot
         File snapFile = factory.zkServer.getTxnLogFactory().findMostRecentSnapshot();
-        LOG.info("Corrupting " + snapFile);
+        LOG.info("Corrupting {}", snapFile);
         RandomAccessFile raf = new RandomAccessFile(snapFile, "rws");
         raf.setLength(3);
         raf.close();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java
Patch:
@@ -529,7 +529,7 @@ public void run() {
                             znodes.add(mynode);
                             zk.create(mynode, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
                         } catch (Exception e) {
-                            LOG.error("Unexpected exception occurred!", e);
+                            LOG.error("Unexpected exception", e);
                         }
                         if (i == 200) {
                             doPurge.countDown();
@@ -547,7 +547,7 @@ public void run() {
         try {
             assertTrue("ZkClient ops is not finished!", finished.await(OP_TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS));
         } catch (InterruptedException ie) {
-            LOG.error("Unexpected exception occurred!", ie);
+            LOG.error("Unexpected exception", ie);
             fail("Unexpected exception occurred!");
         }
         return znodes;

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerStartupTest.java
Patch:
@@ -161,7 +161,7 @@ public void testFourLetterWords() throws Exception {
 
     private void verify(String cmd, String expected) throws IOException, SSLContextException {
         String resp = sendRequest(cmd);
-        LOG.info("cmd " + cmd + " expected " + expected + " got " + resp);
+        LOG.info("cmd {} expected {} got {}", cmd, expected, resp);
         assertTrue("Unexpected response", resp.contains(expected));
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java
Patch:
@@ -86,7 +86,7 @@ public void setupEncryption() {
                 "zookeeper.ssl.quorum.trustStore.location",
                 x509TestContext.getTrustStoreFile(KeyStoreFileType.PEM).getAbsolutePath());
         } catch (Exception e) {
-            LOG.info("Problems encountered while setting up encryption for Jetty admin server test: " + e);
+            LOG.info("Problems encountered while setting up encryption for Jetty admin server test", e);
         }
         System.setProperty("zookeeper.ssl.quorum.keyStore.password", "");
         System.setProperty("zookeeper.ssl.quorum.keyStore.type", "PEM");
@@ -111,7 +111,7 @@ public void checkServerTrusted(X509Certificate[] certs, String authType) {
             sc = SSLContext.getInstance("SSL");
             sc.init(null, trustAllCerts, new java.security.SecureRandom());
         } catch (Exception e) {
-            LOG.error("Failed to customize encryption for HTTPS: e");
+            LOG.error("Failed to customize encryption for HTTPS", e);
         }
 
         // Create all-trusting hostname verifier

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java
Patch:
@@ -207,7 +207,7 @@ public void processAsMuchUncommittedRequestsAsPossibleTest() throws Exception {
         Thread.sleep(1000);
         shouldBeProcessed.removeAll(processedRequests);
         for (Request r : shouldBeProcessed) {
-            LOG.error("Did not process " + r);
+            LOG.error("Did not process {}", r);
         }
         assertTrue("Not all requests were processed", shouldBeProcessed.isEmpty());
         assertFalse("Processed a wrong request", shouldNotBeProcessed.removeAll(processedRequests));
@@ -251,7 +251,7 @@ public void processAllFollowingUncommittedAfterFirstCommitTest() throws Exceptio
 
         shouldBeInPending.removeAll(processor.pendingRequests.get(writeReq.sessionId));
         for (Request r : shouldBeInPending) {
-            LOG.error("Should be in pending " + r);
+            LOG.error("Should be in pending {}", r);
         }
         assertTrue("Not all requests moved to pending from queuedRequests", shouldBeInPending.isEmpty());
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java
Patch:
@@ -466,9 +466,7 @@ private void validateReadRequestVariant(Request request) {
         }
 
         private void validateRequest(Request request) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Got request " + request);
-            }
+            LOG.debug("Got request {}", request);
 
             // Zxids should always be in order for write requests
             if (request.getHdr() != null) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FuzzySnapshotRelatedTest.java
Patch:
@@ -191,7 +191,7 @@ public void testPZxidUpdatedDuringSnapSyncing() throws Exception {
         mt[followerA].start();
         QuorumPeerMainTest.waitForOne(zk[followerA], States.CONNECTED);
 
-        LOG.info("Check and make sure the pzxid of the parent is the same " + "on leader and follower A");
+        LOG.info("Check and make sure the pzxid of the parent is the same on leader and follower A");
         compareStat(parent, leaderId, followerA);
     }
 
@@ -229,7 +229,7 @@ public void testPZxidUpdatedWhenLoadingSnapshot() throws Exception {
 
         QuorumPeerMainTest.waitForOne(zk[followerA], States.CONNECTED);
 
-        LOG.info("Check and make sure the pzxid of the parent is the same " + "on leader and follower A");
+        LOG.info("Check and make sure the pzxid of the parent is the same on leader and follower A");
         compareStat(parent, leaderId, followerA);
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerMetricsTest.java
Patch:
@@ -102,7 +102,7 @@ private void waitForMetric(final String metricKey, final Matcher<Long> matcher)
         waitFor(errorMessage, () -> {
             long actual = (long) MetricsUtils.currentServerMetrics().get(metricKey);
             if (!matcher.matches(actual)) {
-                LOG.info(String.format("match failed on %s, actual value: %d", metricKey, actual));
+                LOG.info("match failed on {}, actual value: {}", metricKey, actual);
                 return false;
             }
             return true;

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -828,12 +828,12 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {
         // there can be extra sessionClose proposals
         assertTrue(outstanding.size() > 0);
         Proposal p = findProposalOfType(outstanding, OpCode.create);
-        LOG.info(String.format("Old leader id: %d. All proposals: %s", leader, outstanding));
+        LOG.info("Old leader id: {}. All proposals: {}", leader, outstanding);
         assertNotNull("Old leader doesn't have 'create' proposal", p);
 
         // make sure it has a chance to write it to disk
         int sleepTime = 0;
-        Long longLeader = Long.valueOf(leader);
+        Long longLeader = (long) leader;
         while (!p.qvAcksetPairs.get(0).getAckset().contains(longLeader)) {
             if (sleepTime > 2000) {
                 fail("Transaction not synced to disk within 1 second " + p.qvAcksetPairs.get(0).getAckset() + " expected " + leader);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SessionUpgradeQuorumTest.java
Patch:
@@ -61,7 +61,7 @@ public class SessionUpgradeQuorumTest extends QuorumPeerTestBase {
 
     @Before
     public void setUp() throws Exception {
-        LOG.info("STARTING quorum " + getClass().getName());
+        LOG.info("STARTING quorum {}", getClass().getName());
         // setup the env with RetainDB and local session upgrading
         ClientBase.setupTestEnv();
 
@@ -97,7 +97,7 @@ public TestQPMain getTestQPMain() {
 
     @After
     public void tearDown() throws Exception {
-        LOG.info("STOPPING quorum " + getClass().getName());
+        LOG.info("STOPPING quorum {}", getClass().getName());
         for (int i = 0; i < SERVER_COUNT; i++) {
             mt[i].shutdown();
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketModeDetectionTest.java
Patch:
@@ -144,7 +144,7 @@ public UnifiedServerSocket.UnifiedSocket call() throws Exception {
                 try {
                     return (UnifiedServerSocket.UnifiedSocket) listeningSocket.accept();
                 } catch (IOException e) {
-                    LOG.error("Error in accept(): ", e);
+                    LOG.error("Error in accept()", e);
                     throw e;
                 }
             }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java
Patch:
@@ -796,8 +796,8 @@ public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f)
                         Thread.sleep(1);
                         zkDb2.loadDataBase();
                     }
-                    LOG.info("zkdb2 sessions:" + zkDb2.getSessions());
-                    LOG.info("zkdb2 with timeouts:" + zkDb2.getSessionWithTimeOuts());
+                    LOG.info("zkdb2 sessions:{}", zkDb2.getSessions());
+                    LOG.info("zkdb2 with timeouts:{}", zkDb2.getSessionWithTimeOuts());
                     assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));
                     //Snapshot was never taken during very simple sync
                     verify(f.zk, never()).takeSnapshot();
@@ -912,7 +912,7 @@ public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) thro
                 for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {
                     try {
                         ia.readRecord(qp, null);
-                        LOG.info("Ping received: " + i);
+                        LOG.info("Ping received: {}", i);
                         qp = new QuorumPacket(Leader.PING, qp.getZxid(), "".getBytes(), null);
                         oa.writeRecord(qp, null);
                     } catch (EOFException e) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java
Patch:
@@ -346,14 +346,14 @@ public synchronized void stop() {
     private void delete(File f) {
         if (f.isFile()) {
             if (!f.delete()) {
-                LOG.warn("WARNING: cannot delete file " + f.getAbsolutePath());
+                LOG.warn("WARNING: cannot delete file {}", f.getAbsolutePath());
             }
         } else {
             for (File c : f.listFiles()) {
                 delete(c);
             }
             if (!f.delete()) {
-                LOG.warn("WARNING: cannot delete directory " + f.getAbsolutePath());
+                LOG.warn("WARNING: cannot delete directory {}", f.getAbsolutePath());
             }
         }
     }
@@ -380,7 +380,7 @@ public synchronized void createPrincipal(String principal, String password) thro
     public synchronized void createPrincipal(File keytabFile, String... principals) throws Exception {
         simpleKdc.createPrincipals(principals);
         if (keytabFile.exists() && !keytabFile.delete()) {
-            LOG.error("Failed to delete keytab file: " + keytabFile);
+            LOG.error("Failed to delete keytab file: {}", keytabFile);
         }
         for (String principal : principals) {
             simpleKdc.getKadmin().exportKeytab(keytabFile, principal);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/QuorumAuthUpgradeTest.java
Patch:
@@ -222,7 +222,7 @@ private void restartServer(
         int index,
         ZooKeeper zk,
         CountdownWatcher watcher) throws IOException, KeeperException, InterruptedException, TimeoutException {
-        LOG.info("Restarting server myid=" + index);
+        LOG.info("Restarting server myid={}", index);
         MainThread m = shutdown(index);
         startServer(m, authConfigs);
         assertTrue(

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ACLTest.java
Patch:
@@ -205,13 +205,13 @@ public void testAcls() throws Exception {
      * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.WatcherEvent)
      */
     public void process(WatchedEvent event) {
-        LOG.info("Event:" + event.getState() + " " + event.getType() + " " + event.getPath());
+        LOG.info("Event:{} {} {}", event.getState(), event.getType(), event.getPath());
         if (event.getState() == KeeperState.SyncConnected) {
             if (startSignal != null && startSignal.getCount() > 0) {
                 LOG.info("startsignal.countDown()");
                 startSignal.countDown();
             } else {
-                LOG.warn("startsignal " + startSignal);
+                LOG.warn("startsignal {}", startSignal);
             }
         }
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/AsyncOpsTest.java
Patch:
@@ -46,7 +46,7 @@ public class AsyncOpsTest extends ClientBase {
     public void setUp() throws Exception {
         super.setUp();
 
-        LOG.info("Creating client " + getTestName());
+        LOG.info("Creating client {}", getTestName());
 
         zk = createClient();
         zk.addAuthInfo("digest", "ben:passwd".getBytes());

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/BufferSizeTest.java
Patch:
@@ -125,7 +125,7 @@ private void testStartupFailure(File testDir, String failureMsg) throws Exceptio
             startServer();
             fail(failureMsg);
         } catch (IOException e) {
-            LOG.info("Successfully caught IOException: " + e);
+            LOG.debug("Successfully caught IOException", e);
         } finally {
             tmpDir = oldTmpDir;
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ChrootAsyncTest.java
Patch:
@@ -35,7 +35,7 @@ public void setUp() throws Exception {
 
         super.setUp();
 
-        LOG.info("Creating client " + getTestName());
+        LOG.info("Creating client {}", getTestName());
 
         ZooKeeper zk = createClient(hp);
         try {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ChrootClientTest.java
Patch:
@@ -37,7 +37,7 @@ public void setUp() throws Exception {
         System.out.println(hostPort);
         super.setUp();
 
-        LOG.info("STARTING " + getTestName());
+        LOG.info("STARTING {}", getTestName());
 
         ZooKeeper zk = createClient(hp);
         try {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientPortBindTest.java
Patch:
@@ -65,7 +65,7 @@ public void testBindByAddress() throws Exception {
                     }
                 }
             } catch (SocketException se) {
-                LOG.warn("Couldn't find  loopback interface: " + se.getMessage());
+                LOG.warn("Couldn't find loopback interface", se);
             }
         }
         if (bindAddress == null) {
@@ -74,9 +74,9 @@ public void testBindByAddress() throws Exception {
         }
         final int PORT = PortAssignment.unique();
 
-        LOG.info("Using " + bindAddress + " as the bind address");
+        LOG.info("Using {} as the bind address", bindAddress);
         final String HOSTPORT = bindAddress + ":" + PORT;
-        LOG.info("Using " + HOSTPORT + " as the host/port");
+        LOG.info("Using {} as the host/port", HOSTPORT);
 
         File tmpDir = ClientBase.createTmpDir();
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/DuplicateLocalSessionUpgradeTest.java
Patch:
@@ -49,7 +49,7 @@ public class DuplicateLocalSessionUpgradeTest extends ZKTestCase {
 
     @Before
     public void setUp() throws Exception {
-        LOG.info("STARTING quorum " + getClass().getName());
+        LOG.info("STARTING quorum {}", getClass().getName());
         qb.localSessionsEnabled = true;
         qb.localSessionsUpgradingEnabled = true;
         qb.setUp();
@@ -58,7 +58,7 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() throws Exception {
-        LOG.info("STOPPING quorum " + getClass().getName());
+        LOG.info("STOPPING quorum {}", getClass().getName());
         qb.tearDown();
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsQuorumTest.java
Patch:
@@ -102,7 +102,7 @@ public void testFourLetterWords() throws Exception {
     private void verify(String hp, String cmd, String expected) throws IOException, SSLContextException {
         for (HostPort hpobj : parseHostPortList(hp)) {
             String resp = send4LetterWord(hpobj.host, hpobj.port, cmd);
-            LOG.info("cmd " + cmd + " expected " + expected + " got " + resp);
+            LOG.info("cmd {} expected {} got {}", cmd, expected, resp);
             if (cmd.equals("dump")) {
                 assertTrue(resp.contains(expected) || resp.contains("Sessions with Ephemerals"));
             } else {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java
Patch:
@@ -125,7 +125,7 @@ private String sendRequest(String cmd, int timeout) throws IOException, SSLConte
 
     private void verify(String cmd, String expected) throws IOException, SSLContextException {
         String resp = sendRequest(cmd);
-        LOG.info("cmd " + cmd + " expected " + expected + " got " + resp);
+        LOG.info("cmd {} expected {} got {}", cmd, expected, resp);
         assertTrue(resp.contains(expected));
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsWhiteListTest.java
Patch:
@@ -230,7 +230,7 @@ private String sendRequest(String cmd) throws IOException, SSLContextException {
 
     private void verifyFuzzyMatch(String cmd, String expected) throws IOException, SSLContextException {
         String resp = sendRequest(cmd);
-        LOG.info("cmd " + cmd + " expected " + expected + " got " + resp);
+        LOG.info("cmd {} expected {} got {}", cmd, expected, resp);
         assertTrue(resp.contains(expected));
     }
 
@@ -240,7 +240,7 @@ private String generateExpectedMessage(String command) {
 
     private void verifyExactMatch(String cmd, String expected) throws IOException, SSLContextException {
         String resp = sendRequest(cmd);
-        LOG.info("cmd " + cmd + " expected an exact match of " + expected + "; got " + resp);
+        LOG.info("cmd {} expected an exact match of {}; got {}", cmd, expected, resp);
         assertTrue(resp.trim().equals(expected));
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/KeyAuthClientTest.java
Patch:
@@ -39,12 +39,12 @@ public class KeyAuthClientTest extends ClientBase {
 
     public void createNodePrintAcl(ZooKeeper zk, String path, String testName) {
         try {
-            LOG.debug("KeyAuthenticationProvider Creating Test Node:" + path + ".\n");
+            LOG.debug("KeyAuthenticationProvider Creating Test Node:{}\n", path);
             zk.create(path, null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);
             List<ACL> acls = zk.getACL(path, null);
-            LOG.debug("Node: " + path + " Test:" + testName + " ACLs:");
+            LOG.debug("Node:{} Test:{} ACLs:", path, testName);
             for (ACL acl : acls) {
-                LOG.debug("  " + acl.toString());
+                LOG.debug("  {}", acl.toString());
             }
         } catch (Exception e) {
             LOG.debug("  EXCEPTION THROWN", e);

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java
Patch:
@@ -98,7 +98,7 @@ public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {
         long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();
         long fakeSessionId = (sid << 56) + 1;
 
-        LOG.info("Fake session Id: " + Long.toHexString(fakeSessionId));
+        LOG.info("Fake session Id: {}", Long.toHexString(fakeSessionId));
 
         Request request = new Request(null, fakeSessionId, 0, OpCode.create, bb, new ArrayList<Id>());
 
@@ -136,7 +136,7 @@ public void testCreatePersistent() throws Exception {
         long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();
         long locallSession = (sid << 56) + 1;
 
-        LOG.info("Local session Id: " + Long.toHexString(locallSession));
+        LOG.info("Local session Id: {}", Long.toHexString(locallSession));
 
         Request request = new Request(null, locallSession, 0, OpCode.create, bb, new ArrayList<Id>());
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LocalSessionRequestTest.java
Patch:
@@ -47,7 +47,7 @@ public class LocalSessionRequestTest extends ZKTestCase {
 
     @Before
     public void setUp() throws Exception {
-        LOG.info("STARTING quorum " + getClass().getName());
+        LOG.info("STARTING quorum {}", getClass().getName());
         qb.localSessionsEnabled = true;
         qb.localSessionsUpgradingEnabled = true;
         qb.setUp();
@@ -56,7 +56,7 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() throws Exception {
-        LOG.info("STOPPING quorum " + getClass().getName());
+        LOG.info("STOPPING quorum {}", getClass().getName());
         qb.tearDown();
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LocalSessionsOnlyTest.java
Patch:
@@ -52,7 +52,7 @@ public class LocalSessionsOnlyTest extends ZKTestCase {
 
     @Before
     public void setUp() throws Exception {
-        LOG.info("STARTING quorum " + getClass().getName());
+        LOG.info("STARTING quorum {}", getClass().getName());
         qb.localSessionsEnabled = true;
         qb.localSessionsUpgradingEnabled = false;
         qb.setUp();
@@ -61,7 +61,7 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() throws Exception {
-        LOG.info("STOPPING quorum " + getClass().getName());
+        LOG.info("STOPPING quorum {}", getClass().getName());
         qb.tearDown();
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/NIOConnectionFactoryFdLeakTest.java
Patch:
@@ -46,7 +46,7 @@ public void testFileDescriptorLeak() throws Exception {
         }
 
         long startFdCount = osMbean.getOpenFileDescriptorCount();
-        LOG.info("Start fdcount is: " + startFdCount);
+        LOG.info("Start fdcount is: {}", startFdCount);
 
         for (int i = 0; i < 50; ++i) {
             NIOServerCnxnFactory factory = new NIOServerCnxnFactory();
@@ -57,7 +57,7 @@ public void testFileDescriptorLeak() throws Exception {
         }
 
         long endFdCount = osMbean.getOpenFileDescriptorCount();
-        LOG.info("End fdcount is: " + endFdCount);
+        LOG.info("End fdcount is: {}", endFdCount);
 
         // On my box, if selector.close() is not called fd diff is > 700.
         assertTrue("Possible fd leakage", ((endFdCount - startFdCount) < 50));

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/OSMXBeanTest.java
Patch:
@@ -54,7 +54,7 @@ public final void testGetUnix() {
     public final void testGetOpenFileDescriptorCount() {
         if (osMbean != null && osMbean.getUnix()) {
             ofdc = osMbean.getOpenFileDescriptorCount();
-            LOG.info("open fdcount is: " + ofdc);
+            LOG.info("open fdcount is: {}", ofdc);
         }
         assertFalse("The number of open file descriptor is negative", (ofdc < 0));
     }
@@ -63,7 +63,7 @@ public final void testGetOpenFileDescriptorCount() {
     public final void testGetMaxFileDescriptorCount() {
         if (osMbean != null && osMbean.getUnix()) {
             mfdc = osMbean.getMaxFileDescriptorCount();
-            LOG.info("max fdcount is: " + mfdc);
+            LOG.info("max fdcount is: {}", mfdc);
         }
         assertFalse("The max file descriptor number is negative", (mfdc < 0));
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumTest.java
Patch:
@@ -229,7 +229,7 @@ public void processResult(int rc, String path, Object ctx) {
                     result.wait(5000);
                 }
             }
-            LOG.info(hostPorts[(i + 1) % hostPorts.length] + " Sync returned " + result[0]);
+            LOG.info("{} Sync returned {}", hostPorts[(i + 1) % hostPorts.length], result[0]);
             assertTrue(result[0] == KeeperException.Code.OK.intValue());
             try {
                 zk.setData("/", new byte[1], -1);

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/RecoveryTest.java
Patch:
@@ -175,7 +175,7 @@ public void testRecovery() throws Exception {
      * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.WatcherEvent)
      */
     public void process(WatchedEvent event) {
-        LOG.info("Event:" + event.getState() + " " + event.getType() + " " + event.getPath());
+        LOG.info("Event:{} {} {}", event.getState(), event.getType(), event.getPath());
         if (event.getState() == KeeperState.SyncConnected && startSignal != null && startSignal.getCount() > 0) {
             startSignal.countDown();
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SaslAuthFailDesignatedClientTest.java
Patch:
@@ -80,7 +80,7 @@ public void testAuth() throws Exception {
             fail("Should have gotten exception.");
         } catch (KeeperException e) {
             // ok, exception as expected.
-            LOG.info("Got exception as expected: " + e);
+            LOG.debug("Got exception as expected", e);
         } finally {
             zk.close();
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SaslAuthFailTest.java
Patch:
@@ -82,7 +82,7 @@ public void testAuthFail() {
             fail("Should have gotten exception.");
         } catch (Exception e) {
             // ok, exception as expected.
-            LOG.info("Got exception as expected: " + e);
+            LOG.debug("Got exception as expected", e);
         }
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SaslAuthMissingClientConfigTest.java
Patch:
@@ -71,7 +71,7 @@ public void testAuth() throws Exception {
             fail("Should have gotten exception.");
         } catch (KeeperException e) {
             // ok, exception as expected.
-            LOG.info("Got exception as expected: " + e);
+            LOG.debug("Got exception as expected", e);
         } finally {
             zk.close();
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ServerCnxnTest.java
Patch:
@@ -63,7 +63,7 @@ public void testServerCnxnExpiry() throws Exception {
 
     private void verify(String cmd, String expected) throws IOException {
         String resp = sendRequest(cmd, 0);
-        LOG.info("cmd " + cmd + " expected " + expected + " got " + resp);
+        LOG.info("cmd {} expected {} got {}", cmd, expected, resp);
         assertTrue(resp.contains(expected));
     }
 
@@ -74,12 +74,12 @@ private String sendRequest(String cmd, int delay) throws IOException {
 
     private static String send4LetterWord(
             String host, int port, String cmd, int delay) throws IOException {
-        LOG.info("connecting to " + host + " " + port);
+        LOG.info("connecting to {} {}", host, port);
         Socket sock = new Socket(host, port);
         BufferedReader reader = null;
         try {
             try {
-                LOG.info("Sleeping for " + delay + "ms");
+                LOG.info("Sleeping for {}ms", delay);
                 Thread.sleep(delay);
             } catch (InterruptedException e) {
                 // ignore

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionUpgradeTest.java
Patch:
@@ -50,7 +50,7 @@ public class SessionUpgradeTest extends ZKTestCase {
 
     @Before
     public void setUp() throws Exception {
-        LOG.info("STARTING quorum " + getClass().getName());
+        LOG.info("STARTING quorum {}", getClass().getName());
         qb.localSessionsEnabled = true;
         qb.localSessionsUpgradingEnabled = true;
         qb.setUp();
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() throws Exception {
-        LOG.info("STOPPING quorum " + getClass().getName());
+        LOG.info("STOPPING quorum {}", getClass().getName());
         qb.tearDown();
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SyncCallTest.java
Patch:
@@ -48,11 +48,11 @@ public class SyncCallTest extends ClientBase implements ChildrenCallback, Childr
     @Test
     public void testSync() throws Exception {
         try {
-            LOG.info("Starting ZK:" + (new Date()).toString());
+            LOG.info("Starting ZK:{}", (new Date()).toString());
             opsCount = new CountDownLatch(limit);
             ZooKeeper zk = createClient();
 
-            LOG.info("Beginning test:" + (new Date()).toString());
+            LOG.info("Beginning test:{}", (new Date()).toString());
             for (int i = 0; i < 50; i++) {
                 zk.create("/test" + i, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (StringCallback) this, results);
             }
@@ -70,7 +70,7 @@ public void testSync() throws Exception {
             for (int i = 0; i < 100; i++) {
                 zk.getChildren("/", DummyWatcher.INSTANCE, (Children2Callback) this, results);
             }
-            LOG.info("Submitted all operations:" + (new Date()).toString());
+            LOG.info("Submitted all operations:{}", (new Date()).toString());
 
             if (!opsCount.await(10000, TimeUnit.MILLISECONDS)) {
                 fail("Haven't received all confirmations" + opsCount.getCount());

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ZkDatabaseCorruptionTest.java
Patch:
@@ -50,13 +50,13 @@ public class ZkDatabaseCorruptionTest extends ZKTestCase {
 
     @Before
     public void setUp() throws Exception {
-        LOG.info("STARTING quorum " + getClass().getName());
+        LOG.info("STARTING quorum {}", getClass().getName());
         qb.setUp();
     }
 
     @After
     public void tearDown() throws Exception {
-        LOG.info("STOPPING quorum " + getClass().getName());
+        LOG.info("STOPPING quorum {}", getClass().getName());
     }
 
     private void corruptFile(File f) throws IOException {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/LogFormatter.java
Patch:
@@ -104,7 +104,7 @@ public static void main(String[] args) throws Exception {
                 + " session 0x" + Long.toHexString(hdr.getClientId())
                 + " cxid 0x" + Long.toHexString(hdr.getCxid())
                 + " zxid 0x" + Long.toHexString(hdr.getZxid())
-                + " " + TraceFormatter.op2String(hdr.getType())
+                + " " + Request.op2String(hdr.getType())
                 + " " + txn);
             if (logStream.readByte("EOR") != 'B') {
                 LOG.error("Last transaction was partial.");

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LocalSessionRequestTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertFalse;
 import org.apache.zookeeper.ZKTestCase;
 import org.apache.zookeeper.ZooKeeper;
-import org.apache.zookeeper.server.TraceFormatter;
+import org.apache.zookeeper.server.Request;
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.quorum.Leader.Proposal;
 import org.apache.zookeeper.server.quorum.QuorumPeer;
@@ -83,7 +83,7 @@ private void validateRequestLog(long sessionId, int peerId) {
         ZKDatabase db = peer.getActiveServer().getZKDatabase();
         for (Proposal p : db.getCommittedLog()) {
             assertFalse("Should not see "
-                                       + TraceFormatter.op2String(p.request.type)
+                                       + Request.op2String(p.request.type)
                                        + " request from local session 0x"
                                        + session
                                        + " on the "

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java
Patch:
@@ -65,7 +65,7 @@ public LearnerSessionTracker(SessionExpirer expirer, ConcurrentMap<Long, Integer
         this.touchTable.set(new ConcurrentHashMap<Long, Integer>());
         this.globalSessionsWithTimeouts = sessionsWithTimeouts;
         this.serverId = id;
-        nextSessionId.set(SessionTrackerImpl.initializeNextSession(serverId));
+        nextSessionId.set(SessionTrackerImpl.initializeNextSessionId(serverId));
 
         this.localSessionsEnabled = localSessionsEnabled;
         if (this.localSessionsEnabled) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LoadFromLogNoServerTest.java
Patch:
@@ -34,10 +34,10 @@
 import org.apache.zookeeper.common.Time;
 import org.apache.zookeeper.server.DataNode;
 import org.apache.zookeeper.server.DataTree;
+import org.apache.zookeeper.server.ZooKeeperServer;
 import org.apache.zookeeper.server.persistence.FileHeader;
 import org.apache.zookeeper.server.persistence.FileTxnLog;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
-import org.apache.zookeeper.server.util.DigestCalculator;
 import org.apache.zookeeper.txn.CreateTxn;
 import org.apache.zookeeper.txn.DeleteTxn;
 import org.apache.zookeeper.txn.MultiTxn;
@@ -58,7 +58,7 @@ public class LoadFromLogNoServerTest extends ZKTestCase {
     @Test
     public void testTxnFailure() throws Exception {
         try {
-            DigestCalculator.setDigestEnabled(true);
+            ZooKeeperServer.setDigestEnabled(true);
 
             long count = 1;
             File tmpDir = ClientBase.createTmpDir();
@@ -97,7 +97,7 @@ public void testTxnFailure() throws Exception {
             // LOG.info("Attempting to delete " + "/test/" + (count + 1));
             // doOp(logFile, OpCode.delete, "/test/" + (count + 1), dt, zk);
         } finally {
-            DigestCalculator.setDigestEnabled(false);
+            ZooKeeperServer.setDigestEnabled(false);
         }
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottler.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Utility class to limit the number of concurrent syncs from a leader to
- * observers and followers orß from a follower to observers.  {@link LearnerHandler}
+ * observers and followers or from a follower to observers.  {@link LearnerHandler}
  * objects should call {@link #beginSync(boolean)} before sending a sync and
  * {@link #endSync()} after finishing, successfully or not.
  *

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -697,10 +697,9 @@ public String getMaxPrefixWithQuota(String path) {
         // root node for now.
         String lastPrefix = pTrie.findMaxPrefix(path);
 
-        if (rootZookeeper.equals(lastPrefix) || "".equals(lastPrefix)) {
+        if (rootZookeeper.equals(lastPrefix) || lastPrefix.isEmpty()) {
             return null;
-        }
-        else {
+        } else {
             return lastPrefix;
         }
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java
Patch:
@@ -256,7 +256,7 @@ public void testPathTrieClearOnDeserialize() throws Exception {
         PathTrie pTrie = (PathTrie)pfield.get(dserTree);
 
         //Check that the node path is removed from pTrie
-        Assert.assertEquals("/bug is still in pTrie", "", pTrie.findMaxPrefix("/bug"));
+        Assert.assertEquals("/bug is still in pTrie", "/", pTrie.findMaxPrefix("/bug"));
     }
 
     /*

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -170,7 +170,7 @@ public void processRequest(Request request) {
              * CLOCK_MONOTONIC.
              */
             long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();
-            if (propagationLatency > 0) {
+            if (propagationLatency >= 0) {
                 ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);
             }
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
Patch:
@@ -402,7 +402,7 @@ public void logLatency(Summary metric, long currentTime){
              * CLOCK_MONOTONIC.
              */
             long latency = currentTime - hdr.getTime();
-            if (latency > 0) {
+            if (latency >= 0) {
                 metric.add(latency);
             }
         }
@@ -415,7 +415,7 @@ public void logLatency(SummarySet metric, String key, long currentTime) {
              * CLOCK_MONOTONIC.
              */
             long latency = currentTime - hdr.getTime();
-            if (latency > 0) {
+            if (latency >= 0) {
                 metric.add(key, latency);
             }
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -169,7 +169,7 @@ protected void processPacket(QuorumPacket qp) throws Exception{
                  */
                 long now = Time.currentWallTime();
                 long latency = now - hdr.getTime();
-                if (latency > 0) {
+                if (latency >= 0) {
                     ServerMetrics.getMetrics().PROPOSAL_LATENCY.add(latency);
                 }
             }

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorMetricsTest.java
Patch:
@@ -377,9 +377,11 @@ public void testConcurrentRequestProcessingInCommitProcessor() throws Exception
 
         //three read requests will be processed in parallel
         commitSeen = new CountDownLatch(1);
+        requestScheduled = new CountDownLatch(3);
         commitProcessor.processRequest(createReadRequest(1l, 2));
         commitProcessor.processRequest(createReadRequest(1l, 3));
         commitProcessor.processRequest(createReadRequest(1l, 4));
+        requestScheduled.await(5, TimeUnit.SECONDS);
 
         //add a commit request to trigger waitForEmptyPool, which will record number of requests being proccessed
         poolEmpytied = new CountDownLatch(1);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -186,6 +186,7 @@ protected boolean needCommit(Request request) {
             case OpCode.reconfig:
             case OpCode.multi:
             case OpCode.setACL:
+            case OpCode.check:
                 return true;
             case OpCode.sync:
                 return matchSyncs;

File: zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java
Patch:
@@ -126,8 +126,8 @@ protected Object retryOperation(ZooKeeperOperation operation)
                 if (exception == null) {
                     exception = e;
                 }
-                LOG.debug("Attempt " + i + " failed with connection loss so " +
-                		"attempting to reconnect: " + e, e);
+                LOG.debug("Attempt {} failed with connection loss so " +
+                    "attempting to reconnect", i, e);
                 retryDelay(i);
             }
         }
@@ -186,7 +186,7 @@ protected void retryDelay(int attemptCount) {
             try {
                 Thread.sleep(attemptCount * retryDelay);
             } catch (InterruptedException e) {
-                LOG.debug("Failed to sleep: " + e, e);
+                LOG.debug("Failed to sleep", e);
             }
         }
     }

File: zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java
Patch:
@@ -218,8 +218,7 @@ public LatchChildWatcher(){
         }
 
         public void process(WatchedEvent event){
-            LOG.debug("Watcher fired on path: " + event.getPath() + " state: " + 
-                    event.getState() + " type " + event.getType());
+            LOG.debug("Watcher fired: {}", event);
             latch.countDown();
         }
         public void await() throws InterruptedException {

File: zookeeper-server/src/main/java/org/apache/zookeeper/Login.java
Patch:
@@ -335,8 +335,8 @@ private synchronized KerberosTicket getTGT() {
         for(KerberosTicket ticket: tickets) {
             KerberosPrincipal server = ticket.getServer();
             if (server.getName().equals("krbtgt/" + server.getRealm() + "@" + server.getRealm())) {
-                LOG.debug("Client principal is \"" + ticket.getClient().getName() + "\".");
-                LOG.debug("Server principal is \"" + ticket.getServer().getName() + "\".");
+                LOG.debug("Client principal is \"{}\".", ticket.getClient().getName());
+                LOG.debug("Server principal is \"{}\".",  ticket.getServer().getName());
                 return ticket;
             }
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java
Patch:
@@ -71,9 +71,7 @@ static String getServerPrincipal(WrapperInetSocketAddress addr, ZKClientConfig c
             if (!canonicalHostName.equals(ia.getHostAddress())) {
                 hostName = canonicalHostName;
             }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Canonicalized address to {}", hostName);
-            }
+            LOG.debug("Canonicalized address to {}", hostName);
         }
         String serverPrincipal = principalUserName + "/" + hostName;
         return serverPrincipal;

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -405,7 +405,7 @@ protected boolean processZKCmd(MyCommandOptions co) throws CliException, IOExcep
         }
         
         boolean watch = false;
-        LOG.debug("Processing " + cmd);
+        LOG.debug("Processing {}", cmd);
 
 
         if (cmd.equals("quit")) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KeyAuthenticationProvider.java
Patch:
@@ -108,7 +108,9 @@ public KeeperException.Code handleAuthentication(ServerObjs serverObjs, byte[] a
                     // empty key
                     keyStr = authStr;
                 }
-                LOG.debug("KeyAuthenticationProvider handleAuthentication ("+keyStr+", "+authStr+") -> FAIL.\n");
+                LOG.debug(
+                    "KeyAuthenticationProvider handleAuthentication ({}, {}) -> FAIL.\n",
+                    keyStr, authStr);
                 return KeeperException.Code.AUTHFAILED;
             }
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java
Patch:
@@ -109,7 +109,7 @@ private void handlePasswordCallback(PasswordCallback pc) {
     }
 
     private void handleRealmCallback(RealmCallback rc) {
-        LOG.debug("client supplied realm: " + rc.getDefaultText());
+        LOG.debug("client supplied realm: {}", rc.getDefaultText());
         rc.setText(rc.getDefaultText());
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -723,10 +723,10 @@ protected void inStreamCreated(InputArchive ia, InputStream is)
         protected InputArchive createInputArchive(File logFile) throws IOException {
             if(inputStream==null){
                 inputStream= new PositionInputStream(new BufferedInputStream(new FileInputStream(logFile)));
-                LOG.debug("Created new input stream " + logFile);
+                LOG.debug("Created new input stream: {}", logFile);
                 ia  = BinaryInputArchive.getArchive(inputStream);
                 inStreamCreated(ia,inputStream);
-                LOG.debug("Created new input archive " + logFile);
+                LOG.debug("Created new input archive: {}", logFile);
             }
             return ia;
         }
@@ -764,7 +764,7 @@ public boolean next() throws IOException {
                 hdr = new TxnHeader();
                 record = SerializeUtils.deserializeTxn(bytes, hdr);
             } catch (EOFException e) {
-                LOG.debug("EOF exception " + e);
+                LOG.debug("EOF exception", e);
                 inputStream.close();
                 inputStream = null;
                 ia = null;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java
Patch:
@@ -191,8 +191,8 @@ private byte[] createSaslToken(final byte[] saslToken,
                     final byte[] retval = Subject.doAs(login.getSubject(),
                             new PrivilegedExceptionAction<byte[]>() {
                                 public byte[] run() throws SaslException {
-                                    LOG.debug("saslClient.evaluateChallenge(len="
-                                                    + saslToken.length + ")");
+                                    LOG.debug("saslClient.evaluateChallenge(len={})",
+                                        saslToken.length);
                                     return saslClient.evaluateChallenge(saslToken);
                                 }
                             });

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java
Patch:
@@ -911,9 +911,8 @@ public Vote lookForLeader() throws InterruptedException {
             LOG.warn("Failed to register with JMX", e);
             self.jmxLeaderElectionBean = null;
         }
-        if (self.start_fle == 0) {
-           self.start_fle = Time.currentElapsedTime();
-        }
+
+        self.start_fle = Time.currentElapsedTime();
         try {
             Map<Long, Vote> recvset = new HashMap<Long, Vote>();
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -1399,7 +1399,6 @@ public void run() {
                     }
                     break;
                 }
-                start_fle = Time.currentElapsedTime();
             }
         } finally {
             LOG.warn("QuorumPeer main thread exited");

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -801,7 +801,9 @@ public List<ACL> getACL(String path, Stat stat)
             throw new KeeperException.NoNodeException();
         }
         synchronized (n) {
-            n.copyStat(stat);
+            if (stat != null) {
+                n.copyStat(stat);
+            }
             return new ArrayList<ACL>(aclCache.convertLong(n.acl));
         }
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
Patch:
@@ -278,7 +278,7 @@ public boolean isQuorum() {
         }
     }
 
-    static String op2String(int op) {
+    public static String op2String(int op) {
         switch (op) {
         case OpCode.notification:
             return "notification";

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -319,7 +319,7 @@ private void setMyAddrs() {
             this.myAddrs = excludedSpecialAddresses(this.myAddrs);
         }
 
-        private static String delimitedHostString(InetSocketAddress addr)
+        public static String delimitedHostString(InetSocketAddress addr)
         {
             String host = addr.getHostString();
             if (host.contains(":")) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumQuotaTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.zookeeper.ZooKeeper;
 import org.apache.zookeeper.ZooKeeperMain;
 import org.apache.zookeeper.ZooDefs.Ids;
+import org.apache.zookeeper.cli.SetQuotaCommand;
 import org.apache.zookeeper.data.Stat;
 import org.junit.Assert;
 import org.junit.Test;
@@ -41,7 +42,7 @@ public void testQuotaWithQuorum() throws Exception {
             zk.create("/a/" + i, "some".getBytes(), Ids.OPEN_ACL_UNSAFE,
                     CreateMode.PERSISTENT);
         }
-        ZooKeeperMain.createQuota(zk, "/a", 1000L, 5000);
+        SetQuotaCommand.createQuota(zk, "/a", 1000L, 5000);
         String statPath = Quotas.quotaZookeeper + "/a"+ "/" + Quotas.statNode;
         byte[] data = zk.getData(statPath, false, new Stat());
         StatsTrack st = new StatsTrack(new String(data));

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/FileKeyStoreLoaderBuilderProvider.java
Patch:
@@ -36,6 +36,8 @@ public class FileKeyStoreLoaderBuilderProvider {
                 return new JKSFileLoader.Builder();
             case PEM:
                 return new PEMFileLoader.Builder();
+            case PKCS12:
+                return new PKCS12FileLoader.Builder();
             default:
                 throw new AssertionError(
                         "Unexpected StoreFileType: " + type.name());

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -827,7 +827,10 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {
         int leader = servers.findLeader();
         Map<Long, Proposal> outstanding =  servers.mt[leader].main.quorumPeer.leader.outstandingProposals;
         // increase the tick time to delay the leader going to looking
+        int previousTick = servers.mt[leader].main.quorumPeer.tickTime;
         servers.mt[leader].main.quorumPeer.tickTime = LEADER_TIMEOUT_MS;
+        // let the previous tick on the leader exhaust itself so the new tick time takes effect
+        Thread.sleep(previousTick);
         LOG.warn("LEADER {}", leader);
 
         for (int i = 0; i < SERVER_COUNT; i++) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooDefs.java
Patch:
@@ -75,6 +75,8 @@ public interface OpCode {
 
         public final int createTTL = 21;
 
+        public final int multiRead = 22;
+
         public final int auth = 100;
 
         public final int setWatches = 101;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java
Patch:
@@ -89,6 +89,8 @@ public static String op2String(int op) {
             return "setWatches";
         case OpCode.sasl:
             return "sasl";
+        case OpCode.multiRead:
+            return "multiRead";
         default:
             return "unknown " + op;
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
-import org.apache.zookeeper.MultiTransactionRecord;
+import org.apache.zookeeper.MultiOperationRecord;
 import org.apache.zookeeper.Op;
 import org.apache.zookeeper.ZooDefs.OpCode;
 import org.apache.zookeeper.metrics.MetricsContext;
@@ -72,7 +72,7 @@ public Request checkUpgradeSession(Request request)
         }
 
         if (OpCode.multi == request.type) {
-            MultiTransactionRecord multiTransactionRecord = new MultiTransactionRecord();
+            MultiOperationRecord multiTransactionRecord = new MultiOperationRecord();
             request.request.rewind();
             ByteBufferInputStream.byteBuffer2Record(request.request, multiTransactionRecord);
             request.request.rewind();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.KeeperException.SessionExpiredException;
 import org.apache.zookeeper.KeeperException.SessionMovedException;
-import org.apache.zookeeper.MultiTransactionRecord;
+import org.apache.zookeeper.MultiOperationRecord;
 import org.apache.zookeeper.Op;
 import org.apache.zookeeper.PortAssignment;
 import org.apache.zookeeper.ZooDefs.Ids;
@@ -116,7 +116,7 @@ private void process(List<Op> ops) throws Exception {
         pLatch = new CountDownLatch(1);
         processor = new PrepRequestProcessor(zks, new MyRequestProcessor());
 
-        Record record = new MultiTransactionRecord(ops);
+        Record record = new MultiOperationRecord(ops);
         Request req = createRequest(record, OpCode.multi);
 
         processor.pRequest(req);

File: zookeeper-server/src/main/java/org/apache/zookeeper/version/util/VerGen.java
Patch:
@@ -33,7 +33,7 @@ public class VerGen {
 
     static void printUsage() {
         System.out.print("Usage:\tjava  -cp <classpath> org.apache.zookeeper."
-                + "version.util.VerGen maj.min.micro[-qualifier] rev buildDate");
+                + "version.util.VerGen maj.min.micro[-qualifier] rev buildDate outputDirectory");
         System.exit(ExitCode.UNEXPECTED_ERROR.getValue());
     }
 
@@ -183,7 +183,7 @@ public static Version parseVersionString(String input) {
      *            </ul>
      */
     public static void main(String[] args) {
-        if (args.length != 3)
+        if (args.length != 4)
             printUsage();
         try {
             Version version = parseVersionString(args[0]);
@@ -198,7 +198,7 @@ public static void main(String[] args) {
             } else {
                 rev = rev.trim();
             }
-            generateFile(new File("."), version, rev, args[2]);
+            generateFile(new File(args[3]), version, rev, args[2]);
         } catch (NumberFormatException e) {
             System.err.println(
                     "All version-related parameters must be valid integers!");

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ClientCnxnLimitException.java
Patch:
@@ -22,6 +22,8 @@
  * Indicates that the number of client connections has exceeded some limit.
  */
 public class ClientCnxnLimitException extends Exception {
+    private static final long serialVersionUID = -8655587505476768446L;
+
     public ClientCnxnLimitException() {
         super("Connection throttle rejected connection");
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/LogFormatter.java
Patch:
@@ -40,6 +40,7 @@
 /**
  * @deprecated deprecated in 3.5.5, use @see TxnLogToolkit instead
  */
+@Deprecated
 @InterfaceAudience.Public
 public class LogFormatter {
     private static final Logger LOG = LoggerFactory.getLogger(LogFormatter.class);

File: zookeeper-server/src/main/java/org/apache/zookeeper/metrics/Gauge.java
Patch:
@@ -31,5 +31,5 @@ public interface Gauge {
      *
      * @return the current value for the gauge
      */
-    long get();
+    Number get();
 }

File: zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java
Patch:
@@ -91,7 +91,6 @@
  * the entire process and thus the connection to ZK and the leader offer
  * resulting in another round of leader determination.</li>
  * </ul>
- * </p>
  */
 public class LeaderElectionSupport implements Watcher {
 

File: zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java
Patch:
@@ -34,9 +34,9 @@
 
 /**
  * A <a href="package.html">protocol to implement an exclusive
- *  write lock or to elect a leader</a>. <p/> You invoke {@link #lock()} to 
+ *  write lock or to elect a leader</a>. <p> You invoke {@link #lock()} to 
  *  start the process of grabbing the lock; you may get the lock then or it may be 
- *  some time later. <p/> You can register a listener so that you are invoked 
+ *  some time later. <p> You can register a listener so that you are invoked 
  *  when you get the lock; otherwise you can ask if you have the lock
  *  by calling {@link #isOwner()}
  *

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -387,7 +387,6 @@ public ClientCnxn(String chrootPath, HostProvider hostProvider, int sessionTimeo
      * @param canBeReadOnly
      *                whether the connection is allowed to go to read-only
      *                mode in case of partitioning
-     * @throws IOException
      */
     public ClientCnxn(String chrootPath, HostProvider hostProvider, int sessionTimeout, ZooKeeper zooKeeper,
             ClientWatchManager watcher, ClientCnxnSocket clientCnxnSocket,

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java
Patch:
@@ -61,7 +61,6 @@ boolean isConnected() {
     }
     
     /**
-     * @return true if a packet was received
      * @throws InterruptedException
      * @throws IOException
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java
Patch:
@@ -92,7 +92,7 @@ public class ClientCnxnSocketNetty extends ClientCnxnSocket {
 
     /**
      * lifecycles diagram:
-     * <p/>
+     * <p>
      * loop:
      * - try:
      * - - !isConnected()
@@ -101,7 +101,7 @@ public class ClientCnxnSocketNetty extends ClientCnxnSocket {
      * - catch:
      * - - cleanup()
      * close()
-     * <p/>
+     * <p>
      * Other non-lifecycle methods are in jeopardy getting a null channel
      * when calling in concurrency. We must handle it.
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java
Patch:
@@ -253,7 +253,7 @@ public void run() {
     }
   }
 
-  /** return an array containing the command name & its parameters */ 
+  /** return an array containing the command name and its parameters */ 
   protected abstract String[] getExecString();
   
   /** Parse the execution result */

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java
Patch:
@@ -41,7 +41,6 @@ public class ZKUtil {
      * If there is an error with deleting one of the sub-nodes in the tree,
      * this operation would abort and would be the responsibility of the app to handle the same.
      *
-     * See {@link #delete(String, int)} for more details.
      *
      * @throws IllegalArgumentException if an invalid path is specified
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java
Patch:
@@ -157,7 +157,6 @@ TrieNode getChild(String childName) {
         /**
          * get the list of children of this 
          * trienode.
-         * @param node to get its children
          * @return the string list of its children
          */
         String[] getChildren() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/StringUtils.java
Patch:
@@ -25,7 +25,7 @@ public class StringUtils {
     private StringUtils() {/** non instantiable and non inheritable **/}
 
     /**
-     * This method returns an immutable List<String>, but different from String's split()
+     * This method returns an immutable List&lt;String&gt;, but different from String's split()
      * it trims the results in the input String, and removes any empty string from
      * the resulting List.
      *
@@ -43,7 +43,7 @@ public static List<String> split(String value, String separator) {
     }
     
     /**
-     * This method takes a List<String> and a delimiter and joins the strings
+     * This method takes a List&lt;String&gt; and a delimiter and joins the strings
      * into a single string, where the original strings are separated using 
      * the given delimiter.
      *

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Exception.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: zookeeper-server/src/main/java/org/apache/zookeeper/jmx/ManagedUtil.java
Patch:
@@ -57,7 +57,7 @@ private static boolean isLog4jJmxEnabled() {
     /**
      * Register the log4j JMX mbeans. Set environment variable
      * "zookeeper.jmx.log4j.disable" to true to disable registration.
-     * @see http://logging.apache.org/log4j/1.2/apidocs/index.html?org/apache/log4j/jmx/package-summary.html
+     * See http://logging.apache.org/log4j/1.2/apidocs/index.html?org/apache/log4j/jmx/package-summary.html
      * @throws JMException if registration fails
      */
     @SuppressWarnings("rawtypes")

File: zookeeper-server/src/main/java/org/apache/zookeeper/metrics/MetricsContext.java
Patch:
@@ -80,7 +80,6 @@ static enum DetailLevel {
      * @param name
      * @param detailLevel
      * @return the summary identified by name in this context.
-     * @see #getSummary(java.lang.String)
      */
     Summary getSummary(String name, DetailLevel detailLevel);
 
@@ -90,7 +89,6 @@ static enum DetailLevel {
      * @param name
      * @param detailLevel
      * @return the summary identified by name in this context.
-     * @see #getSummary(java.lang.String)
      */
     SummarySet getSummarySet(String name, DetailLevel detailLevel);
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/metrics/MetricsProvider.java
Patch:
@@ -25,7 +25,7 @@
  * A MetricsProvider is a system which collects Metrics and publishes current values to external facilities.
  *
  * The system will create an instance of the configured class using the default constructor, which must be public.<br>
- * After the instantiation of the provider, the system will call {@link #configure(java.util.Map) } in order to provide configuration,
+ * After the instantiation of the provider, the system will call {@link #configure(java.util.Properties) } in order to provide configuration,
  * and then when the system is ready to work it will call {@link #start() }.
  * <br>
  * Providers can be used both on ZooKeeper servers and on ZooKeeper clients.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ClientCnxnLimitException.java
Patch:
@@ -20,8 +20,6 @@
 
 /**
  * Indicates that the number of client connections has exceeded some limit.
- * @see org.apache.zookeeper.server.ClientCnxnLimit#checkLimit()
- * @see org.apache.zookeeper.server.ClientCnxnLimit#checkLimit(int)
  */
 public class ClientCnxnLimitException extends Exception {
     public ClientCnxnLimitException() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -32,7 +32,7 @@
  * Manages cleanup of container ZNodes. This class is meant to only
  * be run from the leader. There's no harm in running from followers/observers
  * but that will be extra work that's not needed. Once started, it periodically
- * checks container nodes that have a cversion > 0 and have no children. A
+ * checks container nodes that have a cversion &gt; 0 and have no children. A
  * delete is attempted on the node. The result of the delete is unimportant.
  * If the proposal fails or the container node is not empty there's no harm.
  */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java
Patch:
@@ -71,8 +71,6 @@ public class DataNode implements Record {
     /**
      * create a DataNode with parent, data, acls and stat
      * 
-     * @param parent
-     *            the parent of this DataNode
      * @param data
      *            the data to be set
      * @param acl

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -403,7 +403,6 @@ public void updateCountBytes(String lastPrefix, long bytesDiff, int countDiff) {
      * @param time
      * @throws NodeExistsException
      * @throws NoNodeException
-     * @throws KeeperException
      */
     public void createNode(final String path, byte data[], List<ACL> acl,
             long ephemeralOwner, int parentCVersion, long zxid, long time)
@@ -429,7 +428,6 @@ public void createNode(final String path, byte data[], List<ACL> acl,
      * 			  A Stat object to store Stat output results into.
      * @throws NodeExistsException
      * @throws NoNodeException
-     * @throws KeeperException
      */
     public void createNode(final String path, byte data[], List<ACL> acl,
             long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat)
@@ -1223,7 +1221,6 @@ private void setupQuota() {
      * @param path
      *            a string builder.
      * @throws IOException
-     * @throws InterruptedException
      */
     void serializeNode(OutputArchive oa, StringBuilder path) throws IOException {
         String pathString = path.toString();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralTypeEmulate353.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Date;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicLong;
@@ -181,7 +180,7 @@ public void dump(PrintWriter pwriter) {
     }
 
     /**
-     * Returns an unmodifiable view of the expiration time -> elements mapping.
+     * Returns an unmodifiable view of the expiration time -&gt; elements mapping.
      */
     public Map<Long, Set<E>> getExpiryMap() {
         return Collections.unmodifiableMap(expiryMap);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java
Patch:
@@ -382,7 +382,6 @@ public String toString() {
     /**
      * Print information about the connection.
      * @param brief iff true prints brief details, otw full detail
-     * @return information about this connection
      */
     public synchronized void
     dumpConnectionInfo(PrintWriter pwriter, boolean brief) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java
Patch:
@@ -68,7 +68,6 @@ public class ServerConfig {
     /**
      * Parse arguments for server configuration
      * @param args clientPort dataDir and optional tickTime and maxClientCnxns
-     * @return ServerConfig configured wrt arguments
      * @throws IllegalArgumentException on invalid usage
      */
     public void parse(String[] args) {
@@ -90,7 +89,6 @@ public void parse(String[] args) {
     /**
      * Parse a ZooKeeper configuration file
      * @param path the patch of the configuration file
-     * @return ServerConfig configured wrt arguments
      * @throws ConfigException error processing configuration
      */
     public void parse(String path) throws ConfigException {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java
Patch:
@@ -123,7 +123,7 @@ private long getRemainingDelay() {
         return 0;
     }
 
-    /** If both flushDelay and maxMaxBatchSize are set (> 0), flush
+    /** If both flushDelay and maxMaxBatchSize are set (bigger than 0), flush
      * whenever either condition is hit. If only one or the other is
      * set, flush only when the relevant condition is hit.
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java
Patch:
@@ -59,7 +59,7 @@ public class WorkerService {
     private volatile boolean stopped = true;
 
     /**
-     * @param name                  worker threads are named <name>Thread-##
+     * @param name                  worker threads are named &lt;name&gt;Thread-##
      * @param numThreads            number of worker threads (0 - N)
      *                              If 0, scheduled work is run immediately by
      *                              the calling thread.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Command.java
Patch:
@@ -65,7 +65,7 @@ public interface Command {
      * map with an appropriate message rather than throwing an exception.
      *
      * @param zkServer
-     * @param kwargs keyword -> argument value mapping
+     * @param kwargs keyword -&gt; argument value mapping
      * @return Map representing response to command containing at minimum:
      *    - "command" key containing the command's primary name
      *    - "error" key containing a String error message or null if no error

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java
Patch:
@@ -43,8 +43,8 @@
  * This class encapsulates a Jetty server for running Commands.
  *
  * Given the default settings, start a ZooKeeper server and visit
- * http://<hostname>:8080/commands for links to all registered commands. Visiting
- * http://<hostname>:8080/commands/<commandname> will execute the associated
+ * http://hostname:8080/commands for links to all registered commands. Visiting
+ * http://hostname:8080/commands/commandname will execute the associated
  * Command and return the result in the body of the response. Any keyword
  * arguments to the command are specified with URL parameters (e.g.,
  * http://localhost:8080/commands/set_trace_mask?traceMask=306).

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java
Patch:
@@ -33,7 +33,7 @@ public class DigestAuthenticationProvider implements AuthenticationProvider {
 
     /** specify a command line property with key of 
      * "zookeeper.DigestAuthenticationProvider.superDigest"
-     * and value of "super:<base64encoded(SHA1(password))>" to enable
+     * and value of "super:&lt;base64encoded(SHA1(password))&gt;" to enable
      * super user access (i.e. acls disabled)
      */
     private final static String superDigest = System.getProperty(

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java
Patch:
@@ -298,7 +298,7 @@ static String replaceSubstitution(String base, Pattern from, String to,
      * Try to apply this rule to the given name represented as a parameter
      * array.
      * @param params first element is the realm, second and later elements are
-     *        are the components of the name "a/b@FOO" -> {"FOO", "a", "b"}
+     *        are the components of the name "a/b@FOO" -&gt; {"FOO", "a", "b"}
      * @return the short name if this rule applies or null
      * @throws IOException throws if something is wrong with the rules
      */
@@ -351,7 +351,6 @@ static List<Rule> parseRules(String rules) {
 
   /**
    * Set the static configuration to get the rules.
-   * @param conf the new configuration
    * @throws IOException
    */
   public static void setConfiguration() throws IOException {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FilePadding.java
Patch:
@@ -84,14 +84,13 @@ long padFile(FileChannel fileChannel) throws IOException {
     /**
      * Calculates a new file size with padding. We only return a new size if
      * the current file position is sufficiently close (less than 4K) to end of
-     * file and preAllocSize is > 0.
+     * file and preAllocSize is &gt; 0.
      *
      * @param position     the point in the file we have written to
      * @param fileSize     application keeps track of the current file size
      * @param preAllocSize how many bytes to pad
      * @return the new file size. It can be the same as fileSize if no
      * padding was done.
-     * @throws IOException
      */
     // VisibleForTesting
     public static long calculateFileSizeWithPadding(long position, long fileSize, long preAllocSize) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -717,8 +717,7 @@ protected void inStreamCreated(InputArchive ia, InputStream is)
 
         /**
          * Invoked to indicate that the input stream has been created.
-         * @param ia input archive
-         * @param is file input stream associated with the input archive.
+         * @param logFile the file to read.
          * @throws IOException
          **/
         protected InputArchive createInputArchive(File logFile) throws IOException {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java
Patch:
@@ -97,7 +97,7 @@ public static StreamMode fromString(String name) {
     /**
      * Return the CheckedInputStream based on the extension of the fileName.
      *
-     * @param fileName the file the InputStream read from
+     * @param file the file the InputStream read from
      * @return the specific InputStream
      * @throws IOException
      */
@@ -121,7 +121,7 @@ public static CheckedInputStream getInputStream(File file) throws IOException {
     /**
      * Return the OutputStream based on predefined stream mode.
      *
-     * @param fileName the file the OutputStream writes to
+     * @param file the file the OutputStream writes to
      * @return the specific OutputStream
      * @throws IOException
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java
Patch:
@@ -724,8 +724,6 @@ private void printNotification(Notification n) {
      * Check if a pair (server id, zxid) succeeds our
      * current vote.
      *
-     * @param id    Server identifier
-     * @param zxid  Last zxid observed by the issuer of this vote
      */
     protected boolean totalOrderPredicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch) {
         LOG.debug("id: " + newId + ", proposed id: " + curId + ", zxid: 0x" +

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java
Patch:
@@ -40,7 +40,7 @@
 
 /**
  * Just like the standard ZooKeeperServer. We just replace the request
- * processors: FollowerRequestProcessor -> CommitProcessor ->
+ * processors: FollowerRequestProcessor -&gt; CommitProcessor -&gt;
  * FinalRequestProcessor
  *
  * A SyncRequestProcessor is also spawned off to log proposals from the leader.
@@ -55,8 +55,6 @@ public class FollowerZooKeeperServer extends LearnerZooKeeperServer {
     ConcurrentLinkedQueue<Request> pendingSyncs;
 
     /**
-     * @param port
-     * @param dataDir
      * @throws IOException
      */
     FollowerZooKeeperServer(FileTxnSnapLog logFactory,QuorumPeer self,

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -1095,7 +1095,7 @@ public static QuorumPacket buildInformAndActivePacket(long zxid,
     }
 
     /**
-     * Create an inform&activate packet and send it to all observers.
+     * Create an inform and activate packet and send it to all observers.
      */
     public void informAndActivate(Proposal proposal, long designatedLeader) {
         sendObserverPacket(buildInformAndActivePacket(proposal.request.zxid,
@@ -1211,7 +1211,6 @@ public void sendSync(LearnerSyncRequest r){
      *
      * @param handler handler of the follower
      * @return last proposed zxid
-     * @throws InterruptedException
      */
     @Override
     synchronized public long startForwarding(LearnerHandler handler,
@@ -1283,7 +1282,7 @@ public static void setMaxTimeToWaitForEpoch(int maxTimeToWaitForEpoch) {
     /**
      * Quit condition:
      *
-     * 1 voter goes to looking again and time waitForEpoch > maxTimeToWaitForEpoch
+     * 1 voter goes to looking again and time waitForEpoch &gt; maxTimeToWaitForEpoch
      *
      * Note: the voter may go to looking again in case of:
      * 1. change mind in the last minute when received a different notification

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -115,7 +115,6 @@ public int getPendingRevalidationsCount() {
      *                the client to be revalidated
      * @param timeout
      *                the timeout for which the session is valid
-     * @return
      * @throws IOException
      */
     void validateSession(ServerCnxn cnxn, long clientId, int timeout)
@@ -249,8 +248,8 @@ protected void sockConnect(Socket sock, InetSocketAddress addr, int timeout)
      * Retries until either initLimit time has elapsed or 5 tries have happened.
      * @param addr - the address of the Peer to connect to.
      * @throws IOException - if the socket connection fails on the 5th attempt
-     * <li>if there is an authentication failure while connecting to leader</li>
-     * @throws ConnectException
+     * if there is an authentication failure while connecting to leader
+     * @throws X509Exception
      * @throws InterruptedException
      */
     protected void connectToLeader(InetSocketAddress addr, String hostname)

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java
Patch:
@@ -83,7 +83,7 @@ public void commitRequest(Request request) {
     
     /**
      * Set up the request processors for an Observer:
-     * firstProcesor->commitProcessor->finalProcessor
+     * firstProcesor-&gt;commitProcessor-&gt;finalProcessor
      */
     @Override
     protected void setupRequestProcessors() {      

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -1210,8 +1210,8 @@ public void run() {
     /**
      * Inserts an element in the specified queue. If the Queue is full, this
      * method removes an element from the head of the Queue and then inserts
-     * the element at the tail. It can happen that the an element is removed
-     * by another thread in {@link SendWorker#processMessage() processMessage}
+     * the element at the tail. It can happen that an element is removed
+     * by another thread in {@link SendWorker#run() }
      * method before this method attempts to remove an element from the queue.
      * This will cause {@link ArrayBlockingQueue#remove() remove} to throw an
      * exception, which is safe to ignore.

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumMXBean.java
Patch:
@@ -43,12 +43,12 @@ public interface QuorumMXBean {
     public int getSyncLimit();
 
     /**
-     * @param the number of ticks that the initial synchronization phase can take
+     * @param initLimit the number of ticks that the initial synchronization phase can take
      */
     public void setInitLimit(int initLimit);
 
     /**
-     * @param the number of ticks that can pass between sending a request and getting an acknowledgment
+     * @param syncLimit the number of ticks that can pass between sending a request and getting an acknowledgment
      */
     public void setSyncLimit(int syncLimit);
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -2221,7 +2221,7 @@ private boolean updateVote(long designatedLeader, long zxid){
      * around by skipping comparing the zxid and electionEpoch when counting for 
      * votes for out of election servers during looking for leader.
      * 
-     * {@see https://issues.apache.org/jira/browse/ZOOKEEPER-1732}
+     * See https://issues.apache.org/jira/browse/ZOOKEEPER-1732
      */
     protected void updateElectionVote(long newEpoch) {
         Vote currentVote = getCurrentVote();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/IWatchManager.java
Patch:
@@ -128,7 +128,6 @@ public WatcherOrBitSet triggerWatch(
      * @param byPath iff true output watches by paths, otw output
      * watches by connection
      *
-     * @return string representation of watches
      */
     public void dumpWatches(PrintWriter pwriter, boolean byPath);
 }

File: zookeeper-server/src/test/java/org/apache/zookeeper/RemoveWatchesTest.java
Patch:
@@ -1238,7 +1238,7 @@ public boolean matches() throws InterruptedException {
     /**
      * Checks if a session is registered with the server as a watcher.
      *
-     * @param long sessionId the session ID to check
+     * @param sessionId the session ID to check
      * @param path the path to check for watchers
      * @param type the type of watcher
      * @return true if the client session is a watcher on path for the type

File: zookeeper-server/src/test/java/org/apache/zookeeper/ZKParameterized.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/MockServerCnxn.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java
Patch:
@@ -326,7 +326,7 @@ public void testStandalone() throws Exception {
     }
 
     /**
-     * Test verifies that the server shouldn't allow minsessiontimeout >
+     * Test verifies that the server shouldn't allow minsessiontimeout greater than
      * maxsessiontimeout
      */
     @Test

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerStartupTest.java
Patch:
@@ -72,7 +72,7 @@ public void teardown() throws Exception {
 
     /**
      * Test case for
-     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-2383}.
+     * https://issues.apache.org/jira/browse/ZOOKEEPER-2383
      */
     @Test(timeout = 30000)
     public void testClientConnectionRequestDuringStartupWithNIOServerCnxn()
@@ -110,7 +110,7 @@ public void testClientConnectionRequestDuringStartupWithNIOServerCnxn()
 
     /**
      * Test case for
-     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-2383}.
+     * https://issues.apache.org/jira/browse/ZOOKEEPER-2383
      */
     @Test(timeout = 30000)
     public void testClientConnectionRequestDuringStartupWithNettyServerCnxn()
@@ -163,7 +163,7 @@ public void testClientConnectionRequestDuringStartupWithNettyServerCnxn()
 
     /**
      * Test case for
-     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-2383}.
+     * https://issues.apache.org/jira/browse/ZOOKEEPER-2383
      */
     @Test(timeout = 30000)
     public void testFourLetterWords() throws Exception {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java
Patch:
@@ -296,9 +296,9 @@ public void testDirCheckWithLogFilesInSnapDir() throws IOException {
      *   1. Server A starts to have snap sync with leader
      *   2. After serializing the ACL map to Server A, there is a txn T1 to
      *      create a node N1 with new ACL_1 which was not exist in ACL map
-     *   3. On leader, after this txn, the ACL map will be ID1 -> (ACL_1, COUNT: 1),
-     *      and data tree N1 -> ID1
-     *   4. On server A, it will be empty ACL map, and N1 -> ID1 in fuzzy snapshot
+     *   3. On leader, after this txn, the ACL map will be ID1 -&gt; (ACL_1, COUNT: 1),
+     *      and data tree N1 -&gt; ID1
+     *   4. On server A, it will be empty ACL map, and N1 -&gt; ID1 in fuzzy snapshot
      *   5. When replaying the txn T1, it will skip at the beginning since the
      *      node is already exist, which leaves an empty ACL map, and N1 is
      *      referencing to a non-exist ACL ID1

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FLEBackwardElectionRoundTest.java
Patch:
@@ -81,7 +81,7 @@ public void tearDown() throws Exception {
      * they can't get a consistent set of notifications from a
      * quorum.
      *
-     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-1514}
+     * https://issues.apache.org/jira/browse/ZOOKEEPER-1514
      *
      *
      * @throws Exception

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java
Patch:
@@ -489,7 +489,7 @@ public void testNewEpochZxid() throws Exception {
 
     /**
      * Test cases when learner has new-epcoh zxid
-     * (zxid & 0xffffffffL) == 0;
+     * (zxid &amp; 0xffffffffL) == 0;
      */
     @Test
     public void testNewEpochZxidWithTxnlogOnly() throws Exception {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigBackupTest.java
Patch:
@@ -246,7 +246,7 @@ public void testReconfigCreateNewVersionFile() throws Exception {
     /**
      * This test checks that if a version is appended to dynamic file,
      * then peer should use that version as quorum config version.
-     * <p/>
+     * <p>
      * The scenario: one server has an older version of 3 servers, and
      * four others have newer version of 5 servers. Finally, the lag-off one
      * should have server config of 5 servers.

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigLegacyTest.java
Patch:
@@ -140,7 +140,7 @@ public void testConfigFileBackwardCompatibility() throws Exception {
     }
 
     /**
-     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-1992}
+     * https://issues.apache.org/jira/browse/ZOOKEEPER-1992
      * 1. When a server starts from old style static config, without a client port in the server
      *    specification, it should keep the client port in static config file.
      * 2. After port reconfig, the old port should be removed from static file

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/StandaloneDisabledTest.java
Patch:
@@ -197,7 +197,7 @@ private void shutDownServer(int id) throws Exception {
     }
 
     /**
-     * Starts servers 1 & 2 as participants and
+     * Starts servers 1 and 2 as participants and
      * adds them to the list to be reconfigured
      * into the ensemble.
      */
@@ -212,7 +212,7 @@ private void startFollowers() throws Exception {
         }
     }
      /**
-     * Starts servers 1 & 2 as participants,
+     * Starts servers 1 and 2 as participants,
      * adds them to the list to be reconfigured
      * into the ensemble, and adds an observer
      * version of their information to a list

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java
Patch:
@@ -181,7 +181,7 @@ public void testLeaderInConnectingFollowers() throws Exception {
      * follower with lastAcceptedEpoch = 6 doesn't change the value
      * of epoch, and the test fails. It passes with the fix to predicate.
      * 
-     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-1343}
+     * https://issues.apache.org/jira/browse/ZOOKEEPER-1343
      * 
      * 
      * @throws Exception

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/AsyncOps.java
Patch:
@@ -99,7 +99,7 @@ public void processResult(Code rc, String path, Object ctx)
             latch.countDown();
         }
         
-        /** String format is rc:path:<suffix> where <suffix> is defined by each
+        /** String format is rc:path:&lt;suffix&gt; where &lt;suffix&gt; is defined by each
          * subclass individually. */
         @Override
         public String toString() {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientSSLTest.java
Patch:
@@ -65,12 +65,12 @@ public void teardown() throws Exception {
     }
 
     /**
-     * This test checks that client <-> server SSL works in cluster setup of ZK servers, which includes:
+     * This test checks that client - server SSL works in cluster setup of ZK servers, which includes:
      * 1. setting "secureClientPort" in "zoo.cfg" file.
      * 2. setting jvm flags for serverCnxn, keystore, truststore.
      * Finally, a zookeeper client should be able to connect to the secure port and
      * communicate with server via secure connection.
-     * <p/>
+     * <p>
      * Note that in this test a ZK server has two ports -- clientPort and secureClientPort.
      */
     @Test
@@ -120,7 +120,7 @@ public void testClientServerSSL() throws Exception {
     /**
      * Developers might use standalone mode (which is the default for one server).
      * This test checks SSL works in standalone mode of ZK server.
-     * <p/>
+     * <p>
      * Note that in this test the Zk server has only secureClientPort
      */
     @Test

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java
Patch:
@@ -825,7 +825,6 @@ public void testClientCleanup() throws Throwable {
 
     /**
      * We create a perfectly valid 'exists' request, except that the opcode is wrong.
-     * @return
      * @throws Exception
      */
     @Test

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/CnxManagerTest.java
Patch:
@@ -284,7 +284,7 @@ public void testCnxManagerSpinLock() throws Exception {
     /**
      * Tests a bug in QuorumCnxManager that causes a NPE when a 3.4.6
      * observer connects to a 3.5.0 server. 
-     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-1789}
+     * see https://issues.apache.org/jira/browse/ZOOKEEPER-1789
      * 
      * @throws Exception
      */

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/FollowerResyncConcurrencyTest.java
Patch:
@@ -365,7 +365,7 @@ public void processResult(int rc, String path, Object ctx, String name) {
      * This test:
      * Starts up 3 ZKs. The non-leader ZKs are writing to cluster
      * Shut down one of the non-leader ZKs.
-     * Restart after sessions have expired but <500 txns have taken place (get a diff)
+     * Restart after sessions have expired but less than 500 txns have taken place (get a diff)
      * Shut down immediately after restarting, start running separate thread with other transactions
      * Restart to a diff while transactions are running in leader
      *

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java
Patch:
@@ -95,7 +95,7 @@ public static MBeanServerConnection conn() throws IOException {
      * @param expectedNames
      * @return
      * @throws IOException
-     * @throws MalformedObjectNameException
+     * @throws InterruptedException
      */
     public static Set<ObjectName> ensureAll(String... expectedNames)
         throws IOException, InterruptedException
@@ -140,7 +140,7 @@ public static Set<ObjectName> ensureAll(String... expectedNames)
      * @param expectedNames
      * @return
      * @throws IOException
-     * @throws MalformedObjectNameException
+     * @throws InterruptedException
      */
     public static Set<ObjectName> ensureOnly(String... expectedNames)
         throws IOException, InterruptedException
@@ -216,7 +216,7 @@ public static void dump() throws IOException {
      * failing if there is a mismatch. This will return the beans which are not
      * matched.
      * 
-     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-1858}
+     * https://issues.apache.org/jira/browse/ZOOKEEPER-1858
      * 
      * @param expectedNames
      *            - expected beans

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SSLAuthTest.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/TestHammer.java
Patch:
@@ -27,9 +27,6 @@
 
 public class TestHammer implements VoidCallback {
 
-    /**
-     * @param args
-     */
     static int REPS = 50000;
     public static void main(String[] args) {
             long startTime = Time.currentElapsedTime();

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p/>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerMetricsTest.java
Patch:
@@ -81,7 +81,7 @@ public void testLearnerMetricsTest() throws Exception {
         Assert.assertEquals(8L, values.get("learner_proposal_received_count"));
         Assert.assertEquals(8L, values.get("cnt_proposal_latency"));
         Assert.assertThat((long)values.get("min_proposal_latency"), greaterThan(0L));
-        Assert.assertEquals(8L, values.get("cnt_proposal_ack_creation_latency"));
+        Assert.assertEquals(10L, values.get("cnt_proposal_ack_creation_latency"));
         Assert.assertThat((long)values.get("min_proposal_ack_creation_latency"), greaterThan(0L));
 
         // there are five learners, each received two commits, one for leader election, one for the create request

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java
Patch:
@@ -136,7 +136,6 @@ synchronized public void sync(){
     public int getGlobalOutstandingLimit() {
         int divisor = self.getQuorumSize() > 2 ? self.getQuorumSize() - 1 : 1;
         int globalOutstandingLimit = super.getGlobalOutstandingLimit() / divisor;
-        LOG.info("Override {} to {}", GLOBAL_OUTSTANDING_LIMIT, globalOutstandingLimit);
         return globalOutstandingLimit;
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -108,7 +108,6 @@ public synchronized void shutdown() {
     public int getGlobalOutstandingLimit() {
         int divisor = self.getQuorumSize() > 2 ? self.getQuorumSize() - 1 : 1;
         int globalOutstandingLimit = super.getGlobalOutstandingLimit() / divisor;
-        LOG.info("Override {} to {}", GLOBAL_OUTSTANDING_LIMIT, globalOutstandingLimit);
         return globalOutstandingLimit;
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.zookeeper.cli.GetAllChildrenNumberCommand;
 import org.apache.zookeeper.cli.GetEphemeralsCommand;
 import org.apache.zookeeper.cli.MalformedCommandException;
+import org.apache.zookeeper.cli.VersionCommand;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.zookeeper.ZooDefs.Ids;
@@ -126,6 +127,7 @@ public boolean getPrintWatches( ) {
         new RemoveWatchesCommand().addToMap(commandMapCli);
         new GetEphemeralsCommand().addToMap(commandMapCli);
         new GetAllChildrenNumberCommand().addToMap(commandMapCli);
+        new VersionCommand().addToMap(commandMapCli);
 
         // add all to commandMap
         for (Entry<String, CliCommand> entry : commandMapCli.entrySet()) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/ClientReconnectTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zookeeper;
 
 
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java
Patch:
@@ -47,8 +47,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertNotEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerMetricsTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -35,7 +35,7 @@
 import java.util.Map;
 
 import static org.hamcrest.number.OrderingComparison.greaterThan;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -66,7 +66,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
                 Thread.sleep(5);
                 return  null;
             }
-        }).when(oa).writeRecord(any(QuorumPacket.class), Matchers.anyString());
+        }).when(oa).writeRecord(any(QuorumPacket.class), ArgumentMatchers.anyString());
 
         learnerHandler = new MockLearnerHandler(socket, leader);
         learnerHandler.setOutputArchive(oa);

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
 import static org.apache.zookeeper.test.ClientBase.createEmptyTestDir;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doCallRealMethod;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 
 import java.net.InetSocketAddress;
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/WatchLeakTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zookeeper.server.quorum;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.junit.Assert.*;

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/util/SerializeUtilsTest.java
Patch:
@@ -34,9 +34,9 @@
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.zookeeper.server.metric;
 
 import java.math.BigDecimal;
+import java.math.RoundingMode;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLong;
@@ -69,7 +70,7 @@ public double getAvg() {
         if (currentCount > 0) {
             double avgLatency = currentTotal / (double)currentCount;
             BigDecimal bg = new BigDecimal(avgLatency);
-            return bg.setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();
+            return bg.setScale(4, RoundingMode.HALF_UP).doubleValue();
         }
         return 0;
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerFactory.java
Patch:
@@ -39,7 +39,8 @@ public static IWatchManager createWatchManager() throws IOException {
         }
         try {
             IWatchManager watchManager =
-                    (IWatchManager) Class.forName(watchManagerName).newInstance();
+                    (IWatchManager) Class.forName(watchManagerName)
+                            .getConstructor().newInstance();
             LOG.info("Using {} as watch manager", watchManagerName);
             return watchManager;
         } catch (Exception e) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/JUnit4ZKTestRunner.java
Patch:
@@ -40,6 +40,7 @@ public JUnit4ZKTestRunner(Class<?> klass) throws InitializationError {
         super(klass);
     }
 
+    @SuppressWarnings("unchecked")
     public static List<FrameworkMethod> computeTestMethodsForClass(final Class klass, final List<FrameworkMethod> defaultMethods) {
         List<FrameworkMethod> list = defaultMethods;
         String methodName = System.getProperty("test.method");

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -871,7 +871,7 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {
 
         // make sure it has a chance to write it to disk
         int sleepTime = 0;
-        Long longLeader = new Long(leader);
+        Long longLeader = Long.valueOf(leader);
         while (!p.qvAcksetPairs.get(0).getAckset().contains(longLeader)) {
             if (sleepTime > 2000) {
                 Assert.fail("Transaction not synced to disk within 1 second " + p.qvAcksetPairs.get(0).getAckset()

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java
Patch:
@@ -17,7 +17,6 @@
  */
 
 package org.apache.zookeeper.server.quorum.auth;
-import org.apache.commons.io.Charsets;
 import org.apache.kerby.kerberos.kerb.KrbException;
 import org.apache.kerby.kerberos.kerb.server.KdcConfigKey;
 import org.apache.kerby.kerberos.kerb.server.SimpleKdcServer;
@@ -32,6 +31,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Locale;
@@ -103,7 +103,7 @@ public static void main(String[] args) throws Exception {
         Properties userConf = new Properties();
         InputStreamReader r = null;
         try {
-            r = new InputStreamReader(new FileInputStream(file), Charsets.UTF_8);
+            r = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8);
             userConf.load(r);
         } finally {
             if (r != null) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/QuorumKerberosHostBasedAuthTest.java
Patch:
@@ -34,11 +34,10 @@
 import org.apache.zookeeper.test.ClientBase.CountdownWatcher;
 import org.junit.After;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import junit.framework.Assert;
-
 public class QuorumKerberosHostBasedAuthTest extends KerberosSecurityTestcase {
     private static File keytabFile;
     private static String hostServerPrincipal = KerberosTestUtils.getHostServerPrincipal();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherOrBitSetTest.java
Patch:
@@ -49,7 +49,7 @@ public void testBitSet() {
         WatcherOrBitSet bitSet = new WatcherOrBitSet(bset);
         Assert.assertEquals(0, bitSet.size());
 
-        Integer bit = new Integer(1);
+        Integer bit = 1;
         Assert.assertFalse(bitSet.contains(1));
         Assert.assertFalse(bitSet.contains(bit));
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/CnxManagerTest.java
Patch:
@@ -245,10 +245,10 @@ public void testCnxManagerSpinLock() throws Exception {
         SocketChannel sc = SocketChannel.open();
         sc.socket().connect(peers.get(1L).electionAddr, 5000);
 
-        InetSocketAddress otherAddr = peers.get(new Long(2)).electionAddr;
+        InetSocketAddress otherAddr = peers.get(Long.valueOf(2)).electionAddr;
         DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());
         dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);
-        dout.writeLong(new Long(2));
+        dout.writeLong(2);
         String addr = otherAddr.getHostString()+ ":" + otherAddr.getPort();
         byte[] addr_bytes = addr.getBytes();
         dout.writeInt(addr_bytes.length);

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java
Patch:
@@ -44,7 +44,7 @@ public class FourLetterWordsTest extends ClientBase {
         LoggerFactory.getLogger(FourLetterWordsTest.class);
 
     @Rule
-    public Timeout timeout = new Timeout(30000);
+    public Timeout timeout = Timeout.millis(30000);
 
     /** Test the various four letter words */
     @Test

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/InvalidSnapshotTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.zookeeper.PortAssignment;
 import org.apache.zookeeper.ZKTestCase;
 import org.apache.zookeeper.ZooKeeper;
-import org.apache.zookeeper.server.LogFormatter;
 import org.apache.zookeeper.server.ServerCnxnFactory;
 import org.apache.zookeeper.server.SnapshotFormatter;
 import org.apache.zookeeper.server.SyncRequestProcessor;
@@ -46,12 +45,13 @@ public class InvalidSnapshotTest extends ZKTestCase{
     /**
      * Verify the LogFormatter by running it on a known file.
      */
+    @SuppressWarnings("deprecation")
     @Test
     public void testLogFormatter() throws Exception {
         File snapDir = new File(testData, "invalidsnap");
         File logfile = new File(new File(snapDir, "version-2"), "log.274");
         String[] args = {logfile.getCanonicalFile().toString()};
-        LogFormatter.main(args);
+        org.apache.zookeeper.server.LogFormatter.main(args);
     }
 
     /**

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/LoadFromLogTest.java
Patch:
@@ -179,7 +179,7 @@ public void testRestore() throws Exception {
         String[] tokens = lastPath.split("-");
         String expectedPath = "/invalidsnap/test-"
                 + String.format("%010d",
-                (new Integer(tokens[1])).intValue() + 1);
+                (Integer.parseInt(tokens[1])) + 1);
         ZooKeeperServer zks = getServer(serverFactory);
         long eZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();
         // force the zxid to be behind the content

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ReconfigMisconfigTest.java
Patch:
@@ -81,15 +81,15 @@ public void testReconfigFailWithoutSuperuserPasswordConfiguredOnServer() throws
             reconfigPort();
             Assert.fail(errorMsg);
         } catch (KeeperException e) {
-            Assert.assertTrue(e.getCode() == KeeperException.Code.NoAuth);
+            Assert.assertTrue(e.code() == KeeperException.Code.NOAUTH);
         }
 
         try {
             zkAdmin.addAuthInfo("digest", "super:".getBytes());
             reconfigPort();
             Assert.fail(errorMsg);
         } catch (KeeperException e) {
-            Assert.assertTrue(e.getCode() == KeeperException.Code.NoAuth);
+            Assert.assertTrue(e.code() == KeeperException.Code.NOAUTH);
         }
     }
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SyncCallTest.java
Patch:
@@ -107,12 +107,14 @@ public void processResult(int rc, String path, Object ctx, String name){
     }
 
     @SuppressWarnings("unchecked")
+    @Override
     public void processResult(int rc, String path, Object ctx){
         ((List<Integer>) ctx).add(rc);    
         opsCount.countDown();
     
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public void processResult(int rc, String path, Object ctx, String name,
         Stat stat) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/Version.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.zookeeper.server.ExitCode;
 
 public class Version implements org.apache.zookeeper.version.Info {
@@ -41,6 +42,8 @@ public static String getBuildDate() {
         return BUILD_DATE;
     }
 
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE",
+            justification = "Missing QUALIFIER causes redundant null-check")
     public static String getVersion() {
         return MAJOR + "." + MINOR + "." + MICRO
             + (QUALIFIER == null ? "" : "-" + QUALIFIER);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/LogFormatter.java
Patch:
@@ -37,6 +37,9 @@
 import org.apache.zookeeper.server.util.SerializeUtils;
 import org.apache.zookeeper.txn.TxnHeader;
 
+/**
+ * @deprecated deprecated in 3.5.5, use @see TxnLogToolkit instead
+ */
 @InterfaceAudience.Public
 public class LogFormatter {
     private static final Logger LOG = LoggerFactory.getLogger(LogFormatter.class);

File: zookeeper-server/src/main/java/org/apache/zookeeper/metrics/Counter.java
Patch:
@@ -29,7 +29,7 @@ public interface Counter {
      * <p>This method is thread safe, The MetricsProvider will take care of synchronization.</p>
      */
     default void inc() {
-        inc(1);
+        add(1);
     }
 
     /**
@@ -38,7 +38,7 @@ default void inc() {
      *
      * @param delta amount to increment, this cannot be a negative number.
      */
-    void inc(long delta);
+    void add(long delta);
 
     /**
      * Get the current value held by the counter.

File: zookeeper-server/src/main/java/org/apache/zookeeper/metrics/Summary.java
Patch:
@@ -30,6 +30,6 @@ public interface Summary {
       *
       * @param value current value
       */
-     void registerValue(long value);
+     void add(long value);
 
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -1539,14 +1539,14 @@ private void updateReadStat(String path, long bytes) {
             return;
         }
         long totalBytes = path.length() + bytes + STAT_OVERHEAD_BYTES;
-        ServerMetrics.READ_PER_NAMESPACE.add(namespace, totalBytes);
+        ServerMetrics.getMetrics().READ_PER_NAMESPACE.add(namespace, totalBytes);
     }
 
     private void updateWriteStat(String path, long bytes) {
         String namespace = getTopNamespace(path);
         if (namespace == null) {
             return;
         }
-        ServerMetrics.WRITE_PER_NAMESPACE.add(namespace, path.length() + bytes);
+        ServerMetrics.getMetrics().WRITE_PER_NAMESPACE.add(namespace, path.length() + bytes);
     }
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -168,7 +168,7 @@ public void processRequest(Request request) {
              */
             long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();
             if (propagationLatency > 0) {
-                ServerMetrics.PROPAGATION_LATENCY.add(propagationLatency);
+                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);
             }
         }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -362,7 +362,7 @@ void doIO(SelectionKey k) throws InterruptedException {
             close();
         } catch (ClientCnxnLimitException e) {
             // Common case exception, print at debug level
-            ServerMetrics.CONNECTION_REJECTED.add(1);
+            ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Exception causing close of session 0x"
                           + Long.toHexString(sessionId) + ": " + e.getMessage());

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java
Patch:
@@ -310,7 +310,7 @@ private boolean doAccept() {
                 acceptErrorLogger.flush();
             } catch (IOException e) {
                 // accept, maxClientCnxns, configureBlocking
-                ServerMetrics.CONNECTION_REJECTED.add(1);
+                ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);
                 acceptErrorLogger.rateLimitLog(
                     "Error accepting new connection: " + e.getMessage());
                 fastCloseSock(sc);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java
Patch:
@@ -531,7 +531,7 @@ private void receiveMessage(ByteBuf message) {
             close();
         } catch(ClientCnxnLimitException e) {
             // Common case exception, print at debug level
-            ServerMetrics.CONNECTION_REJECTED.add(1);
+            ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);
             if (LOG.isDebugEnabled()) {
                 LOG.debug("Closing connection to " + getRemoteSocketAddress(), e);
             }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java
Patch:
@@ -109,7 +109,7 @@ public void channelActive(ChannelHandlerContext ctx) throws Exception {
             InetAddress addr = ((InetSocketAddress) channel.remoteAddress())
                     .getAddress();
             if (maxClientCnxns > 0 && getClientCnxnCount(addr) >= maxClientCnxns) {
-                ServerMetrics.CONNECTION_REJECTED.add(1);
+                ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);
                 LOG.warn("Too many connections from {} - max is {}", addr,
                         maxClientCnxns);
                 channel.close();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java
Patch:
@@ -137,9 +137,9 @@ protected ByteBuffer[] serialize(ReplyHeader h, Record r, String tag,
                     // Cache miss, serialize the response and put it in cache.
                     data = serializeRecord(r);
                     cache.put(cacheKey, data, stat);
-                    ServerMetrics.RESPONSE_PACKET_CACHE_MISSING.add(1);
+                    ServerMetrics.getMetrics().RESPONSE_PACKET_CACHE_MISSING.add(1);
                 } else {
-                    ServerMetrics.RESPONSE_PACKET_CACHE_HITS.add(1);
+                    ServerMetrics.getMetrics().RESPONSE_PACKET_CACHE_HITS.add(1);
                 }
             } else {
                 data = serializeRecord(r);
@@ -235,7 +235,7 @@ protected void packetReceived(long bytes) {
         if (serverStats != null) {
             serverStats().incrementPacketsReceived();
         }
-        ServerMetrics.BYTES_RECEIVED_COUNT.add(bytes);
+        ServerMetrics.getMetrics().BYTES_RECEIVED_COUNT.add(bytes);
     }
 
     protected void packetSent() {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Properties;
 
 import org.apache.yetus.audience.InterfaceAudience;
-import org.apache.zookeeper.metrics.impl.NullMetricsProvider;
+import org.apache.zookeeper.metrics.impl.DefaultMetricsProvider;
 import org.apache.zookeeper.server.quorum.QuorumPeerConfig;
 import org.apache.zookeeper.server.quorum.QuorumPeerConfig.ConfigException;
 
@@ -50,7 +50,7 @@ public class ServerConfig {
     protected int minSessionTimeout = -1;
     /** defaults to -1 if not set explicitly */
     protected int maxSessionTimeout = -1;
-    protected String metricsProviderClassName = NullMetricsProvider.class.getName();
+    protected String metricsProviderClassName = DefaultMetricsProvider.class.getName();
     protected Properties metricsProviderConfiguration = new Properties();
     /** defaults to -1 if not set explicitly */
     protected int listenBacklog = -1;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java
Patch:
@@ -255,7 +255,7 @@ public long loadDataBase() throws IOException {
         long zxid = snapLog.restore(dataTree, sessionsWithTimeouts, commitProposalPlaybackListener);
         initialized = true;
         long loadTime = Time.currentElapsedTime() - startTime;
-        ServerMetrics.DB_INIT_TIME.add(loadTime);
+        ServerMetrics.getMetrics().DB_INIT_TIME.add(loadTime);
         LOG.info("Snapshot loaded in " + loadTime + " ms");
         return zxid;
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperCriticalThread.java
Patch:
@@ -47,6 +47,6 @@ public ZooKeeperCriticalThread(String threadName, ZooKeeperServerListener listen
     protected void handleException(String threadName, Throwable e) {
         LOG.error("Severe unrecoverable error, from thread : {}", threadName, e);
         listener.notifyStopping(threadName, ExitCode.UNEXPECTED_ERROR.getValue());
-        ServerMetrics.UNRECOVERABLE_ERROR_COUNT.add(1);
+        ServerMetrics.getMetrics().UNRECOVERABLE_ERROR_COUNT.add(1);
     }
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -129,7 +129,7 @@ public void runFromConfig(ServerConfig config)
                 throw new IOException("Cannot boot MetricsProvider "+config.getMetricsProviderClassName(),
                     error);
             }
-
+            ServerMetrics.metricsProviderInitialized(metricsProvider);
             // Note that this thread isn't going to be doing anything else,
             // so rather than spawning another thread, we will just call
             // run() in this thread.
@@ -138,7 +138,6 @@ public void runFromConfig(ServerConfig config)
             final ZooKeeperServer zkServer = new ZooKeeperServer(txnLog,
                     config.tickTime, config.minSessionTimeout, config.maxSessionTimeout,
                     config.listenBacklog, null);
-            zkServer.setRootMetricsContext(metricsProvider.getRootContext());
             txnLog.setServerStats(zkServer.serverStats());
 
             // Registers shutdown handler which will be used to know the

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -388,7 +388,8 @@ public synchronized void commit() throws IOException {
                             + "File size is " + channel.size() + " bytes. "
                             + "See the ZooKeeper troubleshooting guide");
                 }
-                ServerMetrics.FSYNC_TIME.add(syncElapsedMS);
+                
+                ServerMetrics.getMetrics().FSYNC_TIME.add(syncElapsedMS);
             }
         }
         while (streamsToFlush.size() > 1) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -70,7 +70,7 @@ void followLeader() throws InterruptedException {
         self.end_fle = Time.currentElapsedTime();
         long electionTimeTaken = self.end_fle - self.start_fle;
         self.setElectionTimeTaken(electionTimeTaken);
-        ServerMetrics.ELECTION_TIME.add(electionTimeTaken);
+        ServerMetrics.getMetrics().ELECTION_TIME.add(electionTimeTaken);
         LOG.info("FOLLOWING - LEADER ELECTION TOOK - {} {}", electionTimeTaken,
                 QuorumPeer.FLE_TIME_UNIT);
         self.start_fle = 0;
@@ -96,7 +96,7 @@ void followLeader() throws InterruptedException {
                     syncWithLeader(newEpochZxid);
                 } finally {
                     long syncTime = Time.currentElapsedTime() - startTime;
-                    ServerMetrics.FOLLOWER_SYNC_TIME.add(syncTime);
+                    ServerMetrics.getMetrics().FOLLOWER_SYNC_TIME.add(syncTime);
                 }
                 if (self.getObserverMasterPort() > 0) {
                     LOG.info("Starting ObserverMaster");

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -481,11 +481,11 @@ public void run() {
                     bufferedOutput.flush();
                 } finally {
                     snapshot.close();
-                    ServerMetrics.SNAP_COUNT.add(1);
+                    ServerMetrics.getMetrics().SNAP_COUNT.add(1);
                 }
             }
             else {
-                ServerMetrics.DIFF_COUNT.add(1);
+                ServerMetrics.getMetrics().DIFF_COUNT.add(1);
             }
 
             LOG.debug("Sending NEWLEADER message to " + sid);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -56,7 +56,7 @@
 import org.apache.zookeeper.server.util.VerifyingFileFactory;
 
 import static org.apache.zookeeper.common.NetUtils.formatInetAddr;
-import org.apache.zookeeper.metrics.impl.NullMetricsProvider;
+import org.apache.zookeeper.metrics.impl.DefaultMetricsProvider;
 
 @InterfaceAudience.Public
 public class QuorumPeerConfig {
@@ -83,7 +83,7 @@ public class QuorumPeerConfig {
     protected int minSessionTimeout = -1;
     /** defaults to -1 if not set explicitly */
     protected int maxSessionTimeout = -1;
-    protected String metricsProviderClassName = NullMetricsProvider.class.getName();
+    protected String metricsProviderClassName = DefaultMetricsProvider.class.getName();
     protected Properties metricsProviderConfiguration = new Properties();
     protected boolean localSessionsEnabled = false;
     protected boolean localSessionsUpgradingEnabled = false;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.zookeeper.server.ServerCnxnFactory;
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.DatadirCleanupManager;
+import org.apache.zookeeper.server.ServerMetrics;
 import org.apache.zookeeper.server.ZooKeeperServerMain;
 import org.apache.zookeeper.server.admin.AdminServer.AdminServerException;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
@@ -154,7 +155,7 @@ public void runFromConfig(QuorumPeerConfig config)
                       error);
       }
       try {
-
+          ServerMetrics.metricsProviderInitialized(metricsProvider);
           ServerCnxnFactory cnxnFactory = null;
           ServerCnxnFactory secureCnxnFactory = null;
 
@@ -173,7 +174,6 @@ public void runFromConfig(QuorumPeerConfig config)
           }
 
           quorumPeer = getQuorumPeer();
-          quorumPeer.setRootMetricsContext(metricsProvider.getRootContext());
           quorumPeer.setTxnFactory(new FileTxnSnapLog(
                       config.getDataLogDir(),
                       config.getDataDir()));

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerMetricsTest.java
Patch:
@@ -99,7 +99,7 @@ private void testSimpleCounter(SimpleCounter metric, int size) {
         }
 
         long expectedCount = Arrays.stream(values).sum();
-        Assert.assertEquals(expectedCount, metric.getCount());
+        Assert.assertEquals(expectedCount, metric.get());
 
         final Map<String, Object> results = metric.values();
         Assert.assertEquals(expectedCount, (long)results.get("test"));

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java
Patch:
@@ -60,7 +60,6 @@
 import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;
 
 import org.apache.zookeeper.server.util.ZxidUtils;
-import org.apache.zookeeper.test.ClientBase;
 import org.apache.zookeeper.test.TestUtils;
 import org.apache.zookeeper.txn.CreateSessionTxn;
 import org.apache.zookeeper.txn.CreateTxn;

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/NonRecoverableErrorTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.zookeeper.PortAssignment;
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.ZooKeeper;
+import org.apache.zookeeper.server.ServerMetrics;
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.server.quorum.QuorumPeer;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerMetrics.java
Patch:
@@ -74,6 +74,8 @@ public enum ServerMetrics {
     CONNECTION_TOKEN_DEFICIT(new AvgMinMaxCounter("connection_token_deficit")),
     CONNECTION_REJECTED(new SimpleCounter("connection_rejected")),
 
+    UNRECOVERABLE_ERROR_COUNT(new SimpleCounter("unrecoverable_error_count")),
+
     BYTES_RECEIVED_COUNT(new SimpleCounter("bytes_received_count")),
 
     /**

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperCriticalThread.java
Patch:
@@ -47,5 +47,6 @@ public ZooKeeperCriticalThread(String threadName, ZooKeeperServerListener listen
     protected void handleException(String threadName, Throwable e) {
         LOG.error("Severe unrecoverable error, from thread : {}", threadName, e);
         listener.notifyStopping(threadName, ExitCode.UNEXPECTED_ERROR.getValue());
+        ServerMetrics.UNRECOVERABLE_ERROR_COUNT.add(1);
     }
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -653,6 +653,7 @@ synchronized private boolean connectOne(long sid, InetSocketAddress electionAddr
                  sslSock.connect(electionAddr, cnxTO);
                  sslSock.startHandshake();
                  sock = sslSock;
+                 LOG.info("SSL handshake complete with {} - {} - {}", sslSock.getRemoteSocketAddress(), sslSock.getSession().getProtocol(), sslSock.getSession().getCipherSuite());
              } else {
                  sock = new Socket();
                  setSockOpts(sock);
@@ -870,8 +871,10 @@ public void run() {
             while((!shutdown) && (numRetries < 3)){
                 try {
                     if (self.shouldUsePortUnification()) {
+                        LOG.info("Creating TLS-enabled quorum server socket");
                         ss = new UnifiedServerSocket(self.getX509Util(), true);
                     } else if (self.isSslQuorum()) {
+                        LOG.info("Creating TLS-only quorum server socket");
                         ss = new UnifiedServerSocket(self.getX509Util(), false);
                     } else {
                         ss = new ServerSocket();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java
Patch:
@@ -269,9 +269,11 @@ private void detectMode() throws IOException {
                 }
                 prependableSocket = null;
                 mode = Mode.TLS;
+                LOG.info("Accepted TLS connection from {} - {} - {}", sslSocket.getRemoteSocketAddress(), sslSocket.getSession().getProtocol(), sslSocket.getSession().getCipherSuite());
             } else if (allowInsecureConnection) {
                 prependableSocket.prependToInputStream(litmus, 0, bytesRead);
                 mode = Mode.PLAINTEXT;
+                LOG.info("Accepted plaintext connection from {}", prependableSocket.getRemoteSocketAddress());
             } else {
                 prependableSocket.close();
                 mode = Mode.PLAINTEXT;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.zookeeper.KeeperException.Code;
 import org.apache.zookeeper.KeeperException.SessionExpiredException;
 import org.apache.zookeeper.ZooDefs.OpCode;
+import org.apache.zookeeper.ZookeeperBanner;
 import org.apache.zookeeper.common.Time;
 import org.apache.zookeeper.data.ACL;
 import org.apache.zookeeper.data.Id;
@@ -91,6 +92,8 @@ public class ZooKeeperServer implements SessionExpirer, ServerStats.Provider {
     static {
         LOG = LoggerFactory.getLogger(ZooKeeperServer.class);
 
+        ZookeeperBanner.printBanner(LOG);
+
         Environment.logEnv("Server environment:", LOG);
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java
Patch:
@@ -268,7 +268,7 @@ protected void configureSaslLogin() throws IOException {
             if (securityException != null && (loginContextName != null || jaasFile != null)) {
                 String errorMessage = "No JAAS configuration section named '" + serverSection +  "' was found";
                 if (jaasFile != null) {
-                    errorMessage += "in '" + jaasFile + "'.";
+                    errorMessage += " in '" + jaasFile + "'.";
                 }
                 if (loginContextName != null) {
                     errorMessage += " But " + ZooKeeperSaslServer.LOGIN_CONTEXT_NAME_KEY + " was set.";

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -2675,7 +2675,7 @@ public void getChildren(String path, boolean watch, Children2Callback cb,
      *
      * @since 3.6.0
      * @param path
-     * @return
+     * @return Children nodes count under path
      * @throws KeeperException
      * @throws InterruptedException
      */
@@ -2705,7 +2705,6 @@ public int getAllChildrenNumber(final String path)
      *
      * @since 3.6.0
      * @param path
-     * @return
      * @throws KeeperException
      * @throws InterruptedException
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooDefs.java
Patch:
@@ -83,6 +83,8 @@ public interface OpCode {
 
         public final int getEphemerals = 103;
 
+        public final int getAllChildrenNumber = 104;
+
         public final int createSession = -10;
 
         public final int closeSession = -11;

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.yetus.audience.InterfaceAudience;
 import org.apache.zookeeper.cli.CliException;
 import org.apache.zookeeper.cli.CommandNotFoundException;
+import org.apache.zookeeper.cli.GetAllChildrenNumberCommand;
 import org.apache.zookeeper.cli.GetEphemeralsCommand;
 import org.apache.zookeeper.cli.MalformedCommandException;
 import org.slf4j.Logger;
@@ -124,7 +125,8 @@ public boolean getPrintWatches( ) {
         new GetConfigCommand().addToMap(commandMapCli);
         new RemoveWatchesCommand().addToMap(commandMapCli);
         new GetEphemeralsCommand().addToMap(commandMapCli);
-        
+        new GetAllChildrenNumberCommand().addToMap(commandMapCli);
+
         // add all to commandMap
         for (Entry<String, CliCommand> entry : commandMapCli.entrySet()) {
             commandMap.put(entry.getKey(), entry.getValue().getOptionStr());

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -854,6 +854,7 @@ protected void pRequest(Request request) throws RequestProcessorException {
             case OpCode.getData:
             case OpCode.getACL:
             case OpCode.getChildren:
+            case OpCode.getAllChildrenNumber:
             case OpCode.getChildren2:
             case OpCode.ping:
             case OpCode.setWatches:

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java
Patch:
@@ -59,6 +59,8 @@ public static String op2String(int op) {
             return "setACL";
         case OpCode.getChildren:
             return "getChildren";
+        case OpCode.getAllChildrenNumber:
+            return "getAllChildrenNumber";
         case OpCode.getChildren2:
             return "getChildren2";
         case OpCode.getEphemerals:

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/AddAuthCommand.java
Patch:
@@ -17,13 +17,11 @@
  */
 package org.apache.zookeeper.cli;
 
-import java.io.IOException;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.Parser;
 import org.apache.commons.cli.PosixParser;
-import org.apache.zookeeper.KeeperException;
 
 /**
  * addAuth command for cli

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliCommand.java
Patch:
@@ -45,23 +45,23 @@ public CliCommand(String cmdStr, String optionStr) {
     }
 
     /**
-     * Set out printStream (useable for testing)
+     * Set out printStream (usable for testing)
      * @param out 
      */
     public void setOut(PrintStream out) {
         this.out = out;
     }
 
     /**
-     * Set err printStream (useable for testing)
+     * Set err printStream (usable for testing)
      * @param err 
      */
     public void setErr(PrintStream err) {
         this.err = err;
     }
 
     /**
-     * set the zookeper instance
+     * set the zookeeper instance
      * @param zk the ZooKeeper instance.
      */
     public void setZk(ZooKeeper zk) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/DelQuotaCommand.java
Patch:
@@ -71,7 +71,7 @@ public boolean exec() throws CliException {
             } else if (cl.hasOption("n")) {
                 delQuota(zk, path, false, true);
             } else if (args.length == 2) {
-                // we dont have an option specified.
+                // we don't have an option specified.
                 // just delete whole quota node
                 delQuota(zk, path, true, true);
             }
@@ -139,7 +139,7 @@ public static boolean delQuota(ZooKeeper zk, String path,
      * @param zk the zookeeper client
      * @param path the path to start from and go up and see if their is any
      * unwanted parent in the path.
-     * @return true if sucessful
+     * @return true if successful
      * @throws KeeperException
      * @throws IOException
      * @throws InterruptedException

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/DeleteCommand.java
Patch:
@@ -29,7 +29,7 @@ public class DeleteCommand extends CliCommand {
     private String[] args;
     private CommandLine cl;
 
-    {
+    static {
         options.addOption("v", true, "version");
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetAclCommand.java
Patch:
@@ -36,7 +36,7 @@ public class GetAclCommand extends CliCommand {
     private String args[];
     private CommandLine cl;
 
-    {
+    static {
         options.addOption("s", false, "stats");
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetCommand.java
Patch:
@@ -30,7 +30,7 @@ public class GetCommand extends CliCommand {
     private String args[];
     private CommandLine cl;
 
-    {
+    static {
         options.addOption("s", false, "stats");
         options.addOption("w", false, "watch");
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetConfigCommand.java
Patch:
@@ -31,7 +31,7 @@ public class GetConfigCommand extends CliCommand {
     private String args[];
     private CommandLine cl;
 
-    {
+    static {
         options.addOption("s", false, "stats");
         options.addOption("w", false, "watch");
         options.addOption("c", false, "client connection string");

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/ListQuotaCommand.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.zookeeper.data.Stat;
 
 /**
- * listQuta command for cli
+ * listQuota command for cli
  */
 public class ListQuotaCommand extends CliCommand {
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/LsCommand.java
Patch:
@@ -33,7 +33,7 @@ public class LsCommand extends CliCommand {
     private String args[];
     private CommandLine cl;
 
-    {
+    static {
         options.addOption("?", false, "help");
         options.addOption("s", false, "stat");
         options.addOption("w", false, "watch");

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/RemoveWatchesCommand.java
Patch:
@@ -34,7 +34,7 @@ public class RemoveWatchesCommand extends CliCommand {
     private String[] args;
     private CommandLine cl;
 
-    {
+    static {
         options.addOption("c", false, "child watcher type");
         options.addOption("d", false, "data watcher type");
         options.addOption("a", false, "any watcher type");

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetAclCommand.java
Patch:
@@ -37,7 +37,7 @@ public class SetAclCommand extends CliCommand {
     private String[] args;
     private CommandLine cl;
 
-    {
+    static {
         options.addOption("s", false, "stats");
         options.addOption("v", true, "version");
         options.addOption("R", false, "recursive");

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetCommand.java
Patch:
@@ -30,7 +30,7 @@ public class SetCommand extends CliCommand {
     private String[] args;
     private CommandLine cl;
 
-    {
+    static {
         options.addOption("s", false, "stats");
         options.addOption("v", true, "version");
     }

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetQuotaCommand.java
Patch:
@@ -109,7 +109,7 @@ public static boolean createQuota(ZooKeeper zk, String path,
 
         String quotaPath = Quotas.quotaZookeeper;
         // check for more than 2 children --
-        // if zookeeper_stats and zookeeper_qutoas
+        // if zookeeper_stats and zookeeper_quotas
         // are not the children then this path
         // is an ancestor of some path that
         // already has quota
@@ -148,7 +148,7 @@ public static boolean createQuota(ZooKeeper zk, String path,
         StringBuilder sb = new StringBuilder();
         sb.append(quotaPath);
         for (int i = 1; i < splits.length; i++) {
-            sb.append("/" + splits[i]);
+            sb.append("/").append(splits[i]);
             quotaPath = sb.toString();
             try {
                 zk.create(quotaPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE,

File: zookeeper-server/src/main/java/org/apache/zookeeper/cli/SyncCommand.java
Patch:
@@ -16,14 +16,12 @@
  */
 package org.apache.zookeeper.cli;
 
-import java.io.IOException;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.Parser;
 import org.apache.commons.cli.PosixParser;
 import org.apache.zookeeper.AsyncCallback;
-import org.apache.zookeeper.KeeperException;
 
 /**
  * sync command for cli

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java
Patch:
@@ -27,7 +27,7 @@
  * Generic long counter that keep track of min/max/avg. The counter is
  * thread-safe
  */
-public class AvgMinMaxCounter implements Metric {
+public class AvgMinMaxCounter extends Metric {
     private String name;
     private AtomicLong total = new AtomicLong();
     private AtomicLong min = new AtomicLong(Long.MAX_VALUE);
@@ -111,6 +111,8 @@ public Map<String, Object> values() {
         m.put("min_" + name, this.getMin());
         m.put("max_" + name, this.getMax());
         m.put("cnt_" + name, this.getCount());
+        m.put("sum_" + name, this.getTotal());
         return m;
     }
+
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounter.java
Patch:
@@ -18,11 +18,12 @@
 
 package org.apache.zookeeper.server.metric;
 
+import java.lang.Override;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLong;
 
-public class SimpleCounter implements Metric {
+public class SimpleCounter extends Metric {
     private final String name;
     private final AtomicLong counter = new AtomicLong();
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java
Patch:
@@ -310,6 +310,7 @@ private boolean doAccept() {
                 acceptErrorLogger.flush();
             } catch (IOException e) {
                 // accept, maxClientCnxns, configureBlocking
+                ServerMetrics.CONNECTION_REJECTED.add(1);
                 acceptErrorLogger.rateLimitLog(
                     "Error accepting new connection: " + e.getMessage());
                 fastCloseSock(sc);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java
Patch:
@@ -108,6 +108,7 @@ public void channelActive(ChannelHandlerContext ctx) throws Exception {
             InetAddress addr = ((InetSocketAddress) channel.remoteAddress())
                     .getAddress();
             if (maxClientCnxns > 0 && getClientCnxnCount(addr) >= maxClientCnxns) {
+                ServerMetrics.CONNECTION_REJECTED.add(1);
                 LOG.warn("Too many connections from {} - max is {}", addr,
                         maxClientCnxns);
                 channel.close();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java
Patch:
@@ -354,6 +354,7 @@ public CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs)
             OSMXBean osMbean = new OSMXBean();
             response.put("open_file_descriptor_count", osMbean.getOpenFileDescriptorCount());
             response.put("max_file_descriptor_count", osMbean.getMaxFileDescriptorCount());
+            response.put("connection_drop_probability", zkServer.getConnectionDropChance());
 
             response.put("last_client_response_size", stats.getClientResponseStats().getLastBufferSize());
             response.put("max_client_response_size", stats.getClientResponseStats().getMaxBufferSize());

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java
Patch:
@@ -190,7 +190,8 @@ public void testMonitor() throws IOException, InterruptedException {
                 new Field("min_client_response_size", Integer.class),
                 new Field("uptime", Long.class),
                 new Field("global_sessions", Long.class),
-                new Field("local_sessions", Long.class)
+                new Field("local_sessions", Long.class),
+                new Field("connection_drop_probability", Double.class)
         ));
         for (String metric : ServerMetrics.getAllValues().keySet()) {
             if (metric.startsWith("avg_")) {

File: zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.zookeeper.recipes.leader;
 
+import java.io.Serializable;
 import java.util.Comparator;
 
 /**
@@ -72,7 +73,8 @@ public void setHostName(String hostName) {
    * Compare two instances of {@link LeaderOffer} using only the {code}id{code}
    * member.
    */
-  public static class IdComparator implements Comparator<LeaderOffer> {
+  public static class IdComparator
+          implements Comparator<LeaderOffer>, Serializable {
 
     @Override
     public int compare(LeaderOffer o1, LeaderOffer o2) {

File: zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java
Patch:
@@ -87,7 +87,7 @@ private Map<Long,String> orderedChildren(Watcher watcher) throws KeeperException
                     continue;
                 }
                 String suffix = childName.substring(prefix.length());
-                Long childId = new Long(suffix);
+                Long childId = Long.parseLong(suffix);
                 orderedChildren.put(childId,childName);
             }catch(NumberFormatException e){
                 LOG.warn("Found child node with improper format : " + childName + " " + e,e);
@@ -209,7 +209,7 @@ public byte[] remove() throws NoSuchElementException, KeeperException, Interrupt
         }
     }
 
-    private class LatchChildWatcher implements Watcher {
+    private static class LatchChildWatcher implements Watcher {
 
         CountDownLatch latch;
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -505,7 +505,7 @@ public void processRequest(Request request) {
                 // so these values are passed along with the response.
                 GetDataResponse getDataResponse = (GetDataResponse)rsp;
                 Stat stat = null;
-                if (getDataResponse != null && getDataResponse.getStat() != null) {
+                if (getDataResponse.getStat() != null) {
                     stat = getDataResponse.getStat();
                 }
                 cnxn.sendResponse(hdr, rsp, "response", path, stat);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -456,9 +456,9 @@ public void processRequest(Request request) {
                 if (StringUtils.isBlank(prefixPath) || "/".equals(prefixPath.trim())) {
                     ephemerals.addAll(allEphems);
                 } else {
-                    for (String path: allEphems) {
-                        if(path.startsWith(prefixPath)) {
-                            ephemerals.add(path);
+                    for (String p: allEphems) {
+                        if(p.startsWith(prefixPath)) {
+                            ephemerals.add(p);
                         }
                     }
                 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooDefs.java
Patch:
@@ -81,6 +81,8 @@ public interface OpCode {
 
         public final int sasl = 102;
 
+        public final int getEphemerals = 103;
+
         public final int createSession = -10;
 
         public final int closeSession = -11;

File: zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.yetus.audience.InterfaceAudience;
 import org.apache.zookeeper.cli.CliException;
 import org.apache.zookeeper.cli.CommandNotFoundException;
+import org.apache.zookeeper.cli.GetEphemeralsCommand;
 import org.apache.zookeeper.cli.MalformedCommandException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -122,6 +123,7 @@ public boolean getPrintWatches( ) {
         new ReconfigCommand().addToMap(commandMapCli);
         new GetConfigCommand().addToMap(commandMapCli);
         new RemoveWatchesCommand().addToMap(commandMapCli);
+        new GetEphemeralsCommand().addToMap(commandMapCli);
         
         // add all to commandMap
         for (Entry<String, CliCommand> entry : commandMapCli.entrySet()) {

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -859,6 +859,7 @@ protected void pRequest(Request request) throws RequestProcessorException {
             case OpCode.setWatches:
             case OpCode.checkWatches:
             case OpCode.removeWatches:
+            case OpCode.getEphemerals:
                 zks.sessionTracker.checkSession(request.sessionId,
                         request.getOwner());
                 break;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java
Patch:
@@ -61,6 +61,8 @@ public static String op2String(int op) {
             return "getChildren";
         case OpCode.getChildren2:
             return "getChildren2";
+        case OpCode.getEphemerals:
+            return "getEphemerals";
         case OpCode.ping:
             return "ping";
         case OpCode.createSession:

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMXBean.java
Patch:
@@ -95,6 +95,9 @@ public interface ZooKeeperServerMXBean {
      */
     public void setMaxSessionTimeout(int max);
 
+    public boolean getResponseCachingEnabled();
+    public void setResponseCachingEnabled(boolean isEnabled);
+
     /**
      * Reset packet and latency statistics 
      */

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/MockServerCnxn.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.jute.Record;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.proto.ReplyHeader;
+import org.apache.zookeeper.data.Stat;
 
 public class MockServerCnxn extends ServerCnxn {
     public Certificate[] clientChain;
@@ -43,7 +44,7 @@ void close() {
     }
 
     @Override
-    public void sendResponse(ReplyHeader h, Record r, String tag)
+    public void sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, Stat stat)
             throws IOException {
     }
 
@@ -80,7 +81,7 @@ public void setClientCertificateChain(Certificate[] chain) {
     }
 
     @Override
-    void sendBuffer(ByteBuffer closeConn) {
+    void sendBuffer(ByteBuffer... closeConn) {
     }
 
     @Override

File: zookeeper-jute/src/main/java/org/apache/jute/XmlInputArchive.java
Patch:
@@ -143,6 +143,8 @@ public XmlInputArchive(InputStream in)
         valList = new ArrayList<Value>();
         DefaultHandler handler = new XMLParser(valList);
         SAXParserFactory factory = SAXParserFactory.newInstance();
+        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);
+        factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
         SAXParser parser = factory.newSAXParser();
         parser.parse(in, handler);
         vLen = valList.size();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerMetrics.java
Patch:
@@ -83,12 +83,12 @@ public void reset() {
         metric.reset();
     }
 
-    Map<String, Long> getValues() {
+    Map<String, Object> getValues() {
         return metric.values();
     }
 
-    static public Map<String, Long> getAllValues() {
-        LinkedHashMap<String, Long> m = new LinkedHashMap<>();
+    static public Map<String, Object> getAllValues() {
+        LinkedHashMap<String, Object> m = new LinkedHashMap<>();
         for (ServerMetrics metric : ServerMetrics.values()) {
             m.putAll(metric.getValues());
         }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java
Patch:
@@ -64,7 +64,7 @@ public long getMinLatency() {
         return requestLatency.getMin();
     }
 
-    public long getAvgLatency() {
+    public double getAvgLatency() {
         return requestLatency.getAvg();
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java
Patch:
@@ -59,7 +59,7 @@ public String getVersion() {
         return Version.getFullVersion();
     }
     
-    public long getAvgRequestLatency() {
+    public double getAvgRequestLatency() {
         return zks.serverStats().getAvgLatency();
     }
     

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMXBean.java
Patch:
@@ -41,7 +41,7 @@ public interface ZooKeeperServerMXBean {
     /**
      * @return average request latency in ms
      */
-    public long getAvgRequestLatency();
+    public double getAvgRequestLatency();
     /**
      * @return max request latency in ms
      */

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/Metric.java
Patch:
@@ -23,5 +23,5 @@
 public interface Metric {
     void add(long value);
     void reset();
-    Map<String, Long> values();
+    Map<String, Object> values();
 }

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounter.java
Patch:
@@ -45,8 +45,8 @@ public long getCount() {
     }
 
     @Override
-    public Map<String, Long> values() {
-        Map<String, Long> m = new LinkedHashMap<String, Long>();
+    public Map<String, Object> values() {
+        Map<String, Object> m = new LinkedHashMap<String, Object>();
         m.put(name, this.getCount());
         return m;
     }

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java
Patch:
@@ -153,7 +153,7 @@ public void testValidateStatOutput() throws Exception {
         Assert.assertTrue(count >= 2);
 
         line = in.readLine();
-        Assert.assertTrue(Pattern.matches("^Latency min/avg/max: \\d+/\\d+/\\d+$", line));
+        Assert.assertTrue(Pattern.matches("^Latency min/avg/max: \\d+/-?[0-9]*.?[0-9]*/\\d+$", line));
         line = in.readLine();
         Assert.assertTrue(Pattern.matches("^Received: \\d+$", line));
         line = in.readLine();

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.util.HashSet;
 import java.util.Set;
@@ -36,6 +37,7 @@
  * array of ACLs, a stat object, and a set of its children's paths.
  * 
  */
+@SuppressFBWarnings("EI_EXPOSE_REP2")
 public class DataNode implements Record {
     /** the data for this datanode */
     byte data[];

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.zookeeper.CreateMode;
 
 import java.util.Collections;
@@ -210,6 +211,8 @@ public static void validateServerId(long serverId) {
      * @param ttl  ttl
      * @throws IllegalArgumentException if the ttl is not valid for the mode
      */
+    @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT",
+            justification = "toEphemeralOwner may throw IllegalArgumentException")
     public static void validateTTL(CreateMode mode, long ttl) {
         if (mode.isTTL()) {
             TTL.toEphemeralOwner(ttl);

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -180,7 +180,7 @@ public static void setPreallocSize(long size) {
      * @param serverStats used to update fsyncThresholdExceedCount
      */
     @Override
-    public void setServerStats(ServerStats serverStats) {
+    public synchronized void setServerStats(ServerStats serverStats) {
         this.serverStats = serverStats;
     }
 

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/AuthFastLeaderElection.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.quorum;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
@@ -460,6 +461,8 @@ public void run() {
                 }
             }
 
+            @SuppressFBWarnings(value = "RV_RETURN_VALUE_IGNORED",
+                    justification = "tryAcquire result not chacked, but it is not an issue")
             private void process(ToSend m) {
                 int attempts = 0;
                 byte zeroes[];

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.quorum;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.LinkedList;
@@ -395,6 +396,7 @@ public void doWork() throws RequestProcessorException {
         }
     }
 
+    @SuppressFBWarnings("NN_NAKED_NOTIFY")
     synchronized private void wakeup() {
         notifyAll();
     }
@@ -416,6 +418,7 @@ public void commit(Request request) {
         wakeup();
     }
 
+    @Override
     public void processRequest(Request request) {
         if (stopped) {
             return;

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitMap.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.util;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Map;
 import java.util.HashMap;
 import java.util.BitSet;
@@ -37,6 +38,8 @@ public class BitMap<T> {
 
     private final ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
 
+    @SuppressFBWarnings(value = "DLS_DEAD_LOCAL_STORE",
+            justification = "SpotBugs false positive")
     public Integer add(T value) {
         /*
          * Optimized for code which will add the same value again and again,

File: zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestHelpers.java
Patch:
@@ -152,7 +152,7 @@ public static X509Certificate newCert(
                 certPublicKey);
         builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false)); // not a CA
         builder.addExtension(
-                Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyAgreement));
+                Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));
         builder.addExtension(
                 Extension.extendedKeyUsage,
                 true,

File: zookeeper-it/src/test/java/org/apache/zookeeper/test/system/BaseSysTest.java
Patch:
@@ -39,7 +39,7 @@
 @Ignore("No tests in this class.")
 public class BaseSysTest {
     private static final File testData = new File(
-            System.getProperty("test.data.dir", "build/test/data"));
+            System.getProperty("test.data.dir", "src/test/resources/data"));
     private static int fakeBasePort = 33222;
     private static String zkHostPort;
     protected String prefix = "/sysTest";

File: zookeeper-it/src/test/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java
Patch:
@@ -39,7 +39,7 @@
 class QuorumPeerInstance implements Instance {
     final private static Logger LOG = LoggerFactory.getLogger(QuorumPeerInstance.class);
     private static final File testData = new File(
-        System.getProperty("test.data.dir", "build/test/data"));
+        System.getProperty("test.data.dir", "src/test/resources/data"));
 
     private static final int syncLimit = 3;
     private static final int initLimit = 3;

File: zookeeper-server/src/test/java/org/apache/zookeeper/PortAssignment.java
Patch:
@@ -63,7 +63,9 @@ public final class PortAssignment {
      */
     public synchronized static int unique() {
         if (portRange == null) {
+            Integer threadId = Integer.getInteger("zookeeper.junit.threadid");
             portRange = setupPortRange(System.getProperty("test.junit.threads"),
+                    threadId != null ? "threadid=" + threadId :
                     System.getProperty("sun.java.command"));
             nextPort = portRange.getMinimum();
         }

File: zookeeper-server/src/test/java/org/apache/zookeeper/client/ZKClientConfigTest.java
Patch:
@@ -47,7 +47,7 @@
 import org.junit.rules.Timeout;
 
 public class ZKClientConfigTest {
-    private static final File testData = new File(System.getProperty("test.data.dir", "build/test/data"));
+    private static final File testData = new File(System.getProperty("test.data.dir", "src/test/resources/data"));
     @Rule
     public Timeout timeout = new Timeout(10, TimeUnit.SECONDS);
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java
Patch:
@@ -41,7 +41,7 @@
 
 public class TxnLogToolkitTest {
     private static final File testData = new File(
-            System.getProperty("test.data.dir", "build/test/data"));
+            System.getProperty("test.data.dir", "src/test/resources/data"));
 
     private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
     private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java
Patch:
@@ -43,7 +43,7 @@
 
 public class LearnerTest extends ZKTestCase {
     private static final File testData = new File(
-        System.getProperty("test.data.dir", "build/test/data"));
+        System.getProperty("test.data.dir", "src/test/resources/data"));
 
     static class SimpleLearnerZooKeeperServer extends LearnerZooKeeperServer {
 

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java
Patch:
@@ -79,7 +79,7 @@ public class Zab1_0Test extends ZKTestCase {
     private static final Logger LOG = LoggerFactory.getLogger(Zab1_0Test.class);
 
     private static final File testData = new File(
-            System.getProperty("test.data.dir", "build/test/data"));
+            System.getProperty("test.data.dir", "src/test/resources/data"));
 
     @Before
     public void setUp() {

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/BufferSizeTest.java
Patch:
@@ -35,7 +35,7 @@
 public class BufferSizeTest extends ClientBase {
     public static final int TEST_MAXBUFFER = 100;
     private static final File TEST_DATA = new File(
-            System.getProperty("test.data.dir", "build/test/data"),
+            System.getProperty("test.data.dir", "src/test/resources/data"),
             "buffersize");
     
     private ZooKeeper zk;

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientSSLTest.java
Patch:
@@ -42,7 +42,7 @@ public class ClientSSLTest extends QuorumPeerTestBase {
     @Before
     public void setup() {
         clientX509Util = new ClientX509Util();
-        String testDataPath = System.getProperty("test.data.dir", "build/test/data");
+        String testDataPath = System.getProperty("test.data.dir", "src/test/resources/data");
         System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory");
         System.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty");
         System.setProperty(ZKClientConfig.SECURE_CLIENT, "true");

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/InvalidSnapshotTest.java
Patch:
@@ -41,7 +41,7 @@ public class InvalidSnapshotTest extends ZKTestCase{
             "127.0.0.1:" + PortAssignment.unique();
 
     private static final File testData = new File(
-            System.getProperty("test.data.dir", "build/test/data"));
+            System.getProperty("test.data.dir", "src/test/resources/data"));
 
     /**
      * Verify the LogFormatter by running it on a known file.

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/SSLAuthTest.java
Patch:
@@ -37,7 +37,7 @@ public class SSLAuthTest extends ClientBase {
     @Before
     public void setUp() throws Exception {
         clientX509Util = new ClientX509Util();
-        String testDataPath = System.getProperty("test.data.dir", "build/test/data");
+        String testDataPath = System.getProperty("test.data.dir", "src/test/resources/data");
         System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory");
         System.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty");
         System.setProperty(ZKClientConfig.SECURE_CLIENT, "true");
@@ -76,7 +76,7 @@ public void teardown() throws Exception {
 
     @Test
     public void testRejection() throws Exception {
-        String testDataPath = System.getProperty("test.data.dir", "build/test/data");
+        String testDataPath = System.getProperty("test.data.dir", "src/test/resources/data");
 
         // Replace trusted keys with a valid key that is not trusted by the server
         System.setProperty(clientX509Util.getSslKeystoreLocationProperty(), testDataPath + "/ssl/testUntrustedKeyStore.jks");

File: zookeeper-server/src/test/java/org/apache/zookeeper/test/ReconfigTest.java
Patch:
@@ -839,7 +839,7 @@ public void testQuorumSystemChange() throws Exception {
         testNormalOperation(zkArr[4], zkArr[5]);
 
         for (int i = 1; i <= 5; i++) {
-            if (!(qu.getPeer(i).peer.quorumVerifier instanceof QuorumHierarchical))
+            if (!(qu.getPeer(i).peer.getQuorumVerifier() instanceof QuorumHierarchical))
                 Assert.fail("peer " + i
                         + " doesn't think the quorum system is Hieararchical!");
         }
@@ -876,7 +876,7 @@ public void testQuorumSystemChange() throws Exception {
         testNormalOperation(zkArr[1], zkArr[2]);
 
         for (int i = 1; i <= 2; i++) {
-            if (!(qu.getPeer(i).peer.quorumVerifier instanceof QuorumMaj))
+            if (!(qu.getPeer(i).peer.getQuorumVerifier() instanceof QuorumMaj))
                 Assert.fail("peer "
                         + i
                         + " doesn't think the quorum system is a majority quorum system!");

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java
Patch:
@@ -85,7 +85,7 @@ public void checkServerTrusted(X509Certificate[] chain, String authType, Socket
 
     @Override
     public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {
-        x509ExtendedTrustManager.checkServerTrusted(chain, authType, engine);
+        x509ExtendedTrustManager.checkClientTrusted(chain, authType, engine);
         if (clientHostnameVerificationEnabled) {
             try {
                 performHostVerification(InetAddress.getByName(engine.getPeerHost()), chain[0]);

File: zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java
Patch:
@@ -130,6 +130,8 @@ private void putSSLProperties(X509Util x509Util) {
                 System.getProperty(x509Util.getSslCrlEnabledProperty()));
         properties.put(x509Util.getSslOcspEnabledProperty(),
                 System.getProperty(x509Util.getSslOcspEnabledProperty()));
+        properties.put(x509Util.getSslHandshakeDetectionTimeoutMillisProperty(),
+                System.getProperty(x509Util.getSslHandshakeDetectionTimeoutMillisProperty()));
     }
 
     /**

File: zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -315,9 +315,8 @@ public void parseProperties(Properties zkProp)
                 }
             } else if (key.equals("sslQuorum")){
                 sslQuorum = Boolean.parseBoolean(value);
-// TODO: UnifiedServerSocket is currently buggy, will be fixed when @ivmaykov's PRs are merged. Disable port unification until then.
-//            } else if (key.equals("portUnification")){
-//                shouldUsePortUnification = Boolean.parseBoolean(value);
+            } else if (key.equals("portUnification")){
+                shouldUsePortUnification = Boolean.parseBoolean(value);
             } else if ((key.startsWith("server.") || key.startsWith("group") || key.startsWith("weight")) && zkProp.containsKey("dynamicConfigFile")) {
                 throw new ConfigException("parameter: " + key + " must be in a separate dynamic config file");
             } else if (key.equals(QuorumAuth.QUORUM_SASL_AUTH_ENABLED)) {

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java
Patch:
@@ -80,7 +80,6 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.Timeout;
@@ -442,7 +441,6 @@ public void testQuorumSSL() throws Exception {
         Assert.assertFalse(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp3, CONNECTION_TIMEOUT));
     }
 
-    @Ignore("portUnification is currently broken and disabled")
     @Test
     public void testRollingUpgrade() throws Exception {
         // Form a quorum without ssl

File: zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FuzzySnapshotRelatedTest.java
Patch:
@@ -227,6 +227,7 @@ public void testPZxidUpdatedWhenLoadingSnapshot() throws Exception {
 
         LOG.info("Restarting follower A to load snapshot");
         mt[followerA].shutdown();
+        QuorumPeerMainTest.waitForOne(zk[followerA], States.CONNECTING);
         mt[followerA].start();
         QuorumPeerMainTest.waitForOne(zk[followerA], States.CONNECTED);
 

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -712,6 +712,7 @@ private void setupClientPort() throws ConfigException {
                         " is different from client address found in dynamic file: " + qs.clientAddr);
         }
         if (qs != null && qs.clientAddr != null) clientPortAddress = qs.clientAddr;
+        if (qs != null && qs.clientAddr == null) qs.clientAddr = clientPortAddress;
     }
 
     private void setupPeerType() {

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -801,7 +801,7 @@ public RWServerFoundException(String msg) {
     class SendThread extends ZooKeeperThread {
         private long lastPingSentNs;
         private final ClientCnxnSocket clientCnxnSocket;
-        private Random r = new Random(System.nanoTime());        
+        private Random r = new Random();
         private boolean isFirstConnect = true;
 
         void readResponse(ByteBuffer incomingBuffer) throws IOException {

File: src/java/main/org/apache/zookeeper/server/SyncRequestProcessor.java
Patch:
@@ -61,7 +61,7 @@ public class SyncRequestProcessor extends ZooKeeperCriticalThread implements
      * invoked after flush returns successfully.
      */
     private final LinkedList<Request> toFlush = new LinkedList<Request>();
-    private final Random r = new Random(System.nanoTime());
+    private final Random r = new Random();
     /**
      * The number of log entries to log before starting a snapshot
      */

File: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -452,7 +452,7 @@ public void testElectionFraud() throws IOException, InterruptedException {
         Assert.assertTrue("falseLeader never rejoins the quorum", foundFollowing);
     }
 
-    private void waitForOne(ZooKeeper zk, States state) throws InterruptedException {
+    public static void waitForOne(ZooKeeper zk, States state) throws InterruptedException {
         int iterations = ClientBase.CONNECTION_TIMEOUT / 500;
         while (zk.getState() != state) {
             if (iterations-- == 0) {
@@ -466,7 +466,7 @@ private void waitForAll(Servers servers, States state) throws InterruptedExcepti
         waitForAll(servers.zk, state);
     }
 
-    private void waitForAll(ZooKeeper[] zks, States state) throws InterruptedException {
+    public static void waitForAll(ZooKeeper[] zks, States state) throws InterruptedException {
         int iterations = ClientBase.CONNECTION_TIMEOUT / 1000;
         boolean someoneNotConnected = true;
         while (someoneNotConnected) {
@@ -487,7 +487,7 @@ private void waitForAll(ZooKeeper[] zks, States state) throws InterruptedExcepti
         }
     }
 
-    private void logStates(ZooKeeper[] zks) {
+    public static void logStates(ZooKeeper[] zks) {
             StringBuilder sbBuilder = new StringBuilder("Connection States: {");
            for (int i = 0; i < zks.length; i++) {
                 sbBuilder.append(i + " : " + zks[i].getState() + ", ");

File: src/java/main/org/apache/zookeeper/server/ServerCnxn.java
Patch:
@@ -92,7 +92,7 @@ public void sendResponse(ReplyHeader h, Record r, String tag) throws IOException
     }
 
     /* notify the client the session is closing and close/cleanup socket */
-    abstract void sendCloseSession();
+    public abstract void sendCloseSession();
 
     public abstract void process(WatchedEvent event);
 

File: src/java/test/org/apache/zookeeper/server/MockServerCnxn.java
Patch:
@@ -44,7 +44,7 @@ public void sendResponse(ReplyHeader h, Record r, String tag)
     }
 
     @Override
-    void sendCloseSession() {
+    public void sendCloseSession() {
     }
 
     @Override
@@ -110,4 +110,4 @@ public InetSocketAddress getRemoteSocketAddress() {
     public int getInterestOps() {
         return 0;
     }
-}
\ No newline at end of file
+}

File: src/java/test/org/apache/zookeeper/server/SessionTrackerTest.java
Patch:
@@ -51,7 +51,7 @@ public void testAddSessionAfterSessionExpiry() throws Exception {
         ZooKeeperServer zks = setupSessionTracker();
 
         latch = new CountDownLatch(1);
-        zks.sessionTracker.addSession(sessionId, sessionTimeout);
+        zks.sessionTracker.trackSession(sessionId, sessionTimeout);
         SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;
         SessionImpl sessionImpl = sessionTrackerImpl.sessionsById
                 .get(sessionId);
@@ -68,7 +68,7 @@ public void testAddSessionAfterSessionExpiry() throws Exception {
         // Simulating FinalRequestProcessor logic: create session request has
         // delayed and now reaches FinalRequestProcessor. Here the leader zk
         // will do sessionTracker.addSession(id, timeout)
-        sessionTrackerImpl.addSession(sessionId, sessionTimeout);
+        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);
         try {
             sessionTrackerImpl.checkSession(sessionId, sessionOwner);
             Assert.fail("Should throw session expiry exception "
@@ -93,7 +93,7 @@ public void testCloseSessionRequestAfterSessionExpiry() throws Exception {
         ZooKeeperServer zks = setupSessionTracker();
 
         latch = new CountDownLatch(1);
-        zks.sessionTracker.addSession(sessionId, sessionTimeout);
+        zks.sessionTracker.trackSession(sessionId, sessionTimeout);
         SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;
         SessionImpl sessionImpl = sessionTrackerImpl.sessionsById
                 .get(sessionId);

File: zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java
Patch:
@@ -93,9 +93,9 @@ public class ZooInspectorManagerImpl implements ZooInspectorManager {
 
 
     private static final File defaultNodeViewersFile = new File(
-            "./config/defaultNodeViewers.cfg");
+            "./src/main/resources/defaultNodeViewers.cfg");
     private static final File defaultConnectionFile = new File(
-            "./config/defaultConnectionSettings.cfg");
+            "./src/main/resources/defaultConnectionSettings.cfg");
 
     private DataEncryptionManager encryptionManager;
     private String connectString;

File: src/java/test/org/apache/zookeeper/server/persistence/FileTxnLogTest.java
Patch:
@@ -115,7 +115,7 @@ public void testSyncThresholdExceedCount() throws IOException {
     // Given ...
 
     // Set threshold to -1, as after the first commit it takes 0ms to commit to disk.
-    java.lang.System.setProperty("zookeeper.fsync.warningthresholdms", "-1");
+    java.lang.System.setProperty(FileTxnLog.ZOOKEEPER_FSYNC_WARNING_THRESHOLD_MS_PROPERTY, "-1");
     ServerStats.Provider providerMock = mock(ServerStats.Provider.class);
     ServerStats serverStats = new ServerStats(providerMock);
 

File: src/java/test/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java
Patch:
@@ -60,7 +60,7 @@ public void testClientAddress() throws Exception {
 
         result = remotePeerBean.getClientAddress();
         String ipv4 = "0.0.0.0:" + clientPort;
-        String ipv6 = "0:0:0:0:0:0:0:0:" + clientPort;
+        String ipv6 = "[0:0:0:0:0:0:0:0]:" + clientPort;
         assertTrue(result.equals(ipv4) || result.equals(ipv6));
         // cleanup
         cnxnFactory.shutdown();

File: src/java/main/org/apache/zookeeper/ClientCnxnSocket.java
Patch:
@@ -115,7 +115,7 @@ void updateLastSendAndHeard() {
         this.lastHeard = now;
     }
 
-    protected void readLength() throws IOException {
+    void readLength() throws IOException {
         int len = incomingBuffer.getInt();
         if (len < 0 || len >= packetLen) {
             throw new IOException("Packet len " + len + " is out of range!");

File: src/java/main/org/apache/zookeeper/server/command/MonitorCommand.java
Patch:
@@ -75,9 +75,9 @@ public void commandRun() {
             print("synced_followers", leader.getForwardingFollowers().size());
             print("pending_syncs", leader.getNumPendingSyncs());
 
-            print("last_proposal_size", leader.getProposalStats().getLastProposalSize());
-            print("max_proposal_size", leader.getProposalStats().getMaxProposalSize());
-            print("min_proposal_size", leader.getProposalStats().getMinProposalSize());
+            print("last_proposal_size", leader.getProposalStats().getLastBufferSize());
+            print("max_proposal_size", leader.getProposalStats().getMaxBufferSize());
+            print("min_proposal_size", leader.getProposalStats().getMinBufferSize());
         }
     }
 

File: src/java/main/org/apache/zookeeper/server/command/StatCommand.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.zookeeper.server.ServerStats;
 import org.apache.zookeeper.server.quorum.Leader;
 import org.apache.zookeeper.server.quorum.LeaderZooKeeperServer;
-import org.apache.zookeeper.server.quorum.ProposalStats;
+import org.apache.zookeeper.server.quorum.BufferStats;
 import org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -64,7 +64,7 @@ public void commandRun() {
             pw.println(zkServer.getZKDatabase().getNodeCount());
             if (serverStats.getServerState().equals("leader")) {
                 Leader leader = ((LeaderZooKeeperServer)zkServer).getLeader();
-                ProposalStats proposalStats = leader.getProposalStats();
+                BufferStats proposalStats = leader.getProposalStats();
                 pw.printf("Proposal sizes last/min/max: %s%n", proposalStats.toString());
             }
         }

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderBean.java
Patch:
@@ -55,17 +55,17 @@ public long getElectionTimeTaken() {
 
     @Override
     public int getLastProposalSize() {
-        return leader.getProposalStats().getLastProposalSize();
+        return leader.getProposalStats().getLastBufferSize();
     }
 
     @Override
     public int getMinProposalSize() {
-        return leader.getProposalStats().getMinProposalSize();
+        return leader.getProposalStats().getMinBufferSize();
     }
 
     @Override
     public int getMaxProposalSize() {
-        return leader.getProposalStats().getMaxProposalSize();
+        return leader.getProposalStats().getMaxBufferSize();
     }
 
     @Override

File: src/java/test/org/apache/zookeeper/server/quorum/StatCommandTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
@@ -44,7 +43,7 @@ public class StatCommandTest {
     private ServerStats.Provider providerMock;
 
     @Before
-    public void setUp() throws IOException {
+    public void setUp() {
         outputWriter = new StringWriter();
         ServerCnxn serverCnxnMock = mock(ServerCnxn.class);
 
@@ -55,7 +54,7 @@ public void setUp() throws IOException {
         ZKDatabase zkDatabaseMock = mock(ZKDatabase.class);
         when(zks.getZKDatabase()).thenReturn(zkDatabaseMock);
         Leader leaderMock = mock(Leader.class);
-        when(leaderMock.getProposalStats()).thenReturn(new ProposalStats());
+        when(leaderMock.getProposalStats()).thenReturn(new BufferStats());
         when(zks.getLeader()).thenReturn(leaderMock);
 
         ServerCnxnFactory serverCnxnFactory = mock(ServerCnxnFactory.class);

File: src/java/test/org/apache/zookeeper/server/quorum/StatResetCommandTest.java
Patch:
@@ -96,8 +96,8 @@ public void testStatResetWithLeader() {
 
         when(serverStats.getServerState()).thenReturn("leader");
 
-        ProposalStats proposalStats = mock(ProposalStats.class);
-        when(leader.getProposalStats()).thenReturn(proposalStats);
+        BufferStats bufferStats = mock(BufferStats.class);
+        when(leader.getProposalStats()).thenReturn(bufferStats);
 
         // Act
         statResetCommand.commandRun();
@@ -106,6 +106,6 @@ public void testStatResetWithLeader() {
         String output = outputWriter.toString();
         assertEquals("Server stats reset.\n", output);
         verify(serverStats, times(1)).reset();
-        verify(proposalStats, times(1)).reset();
+        verify(bufferStats, times(1)).reset();
     }
 }

File: src/java/main/org/apache/jute/OutputArchive.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.TreeMap;
 
 /**
- * Interface that alll the serializers have to implement.
+ * Interface that all the serializers have to implement.
  *
  */
 public interface OutputArchive {

File: src/java/main/org/apache/zookeeper/ClientCnxnSocket.java
Patch:
@@ -118,7 +118,7 @@ void updateLastSendAndHeard() {
     protected void readLength() throws IOException {
         int len = incomingBuffer.getInt();
         if (len < 0 || len >= packetLen) {
-            throw new IOException("Packet len" + len + " is out of range!");
+            throw new IOException("Packet len " + len + " is out of range!");
         }
         incomingBuffer = ByteBuffer.allocate(len);
     }

File: src/java/main/org/apache/zookeeper/cli/DelQuotaCommand.java
Patch:
@@ -63,7 +63,7 @@ public CliCommand parse(String[] cmdArgs) throws CliParseException {
     @Override
     public boolean exec() throws CliException {
         //if neither option -n or -b is specified, we delete
-        // the quota node for thsi node.
+        // the quota node for this node.
         String path = args[1];
         try {
             if (cl.hasOption("b")) {

File: src/java/main/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -120,7 +120,7 @@ public class DataTree {
             .substring(procZookeeper.length() + 1);
 
     /**
-     * the path trie that keeps track fo the quota nodes in this datatree
+     * the path trie that keeps track of the quota nodes in this datatree
      */
     private final PathTrie pTrie = new PathTrie();
 

File: src/java/systest/org/apache/zookeeper/test/system/QuorumPeerInstance.java
Patch:
@@ -275,7 +275,7 @@ public static void startInstance(InstanceManager im, String quorumHostPort, int
     /**
      * Stop an instance of the quorumPeer
      * @param im the manager of the instance
-     * @param index the zero based index fo the server to stop
+     * @param index the zero based index of the server to stop
      * @throws InterruptedException
      * @throws KeeperException
      * @throws NoAssignmentException

File: src/java/test/org/apache/zookeeper/test/LoadFromLogTest.java
Patch:
@@ -91,7 +91,7 @@ public void testLoad() throws Exception {
             hdr = itr.getHeader();
             expectedZxid++;
             Assert.assertTrue("not the same transaction. lastZxid=" + lastZxid + ", zxid=" + hdr.getZxid(), lastZxid != hdr.getZxid());
-            Assert.assertTrue("excepting next transaction. expected=" + expectedZxid + ", retreived=" + hdr.getZxid(), (hdr.getZxid() == expectedZxid));
+            Assert.assertTrue("excepting next transaction. expected=" + expectedZxid + ", retrieved=" + hdr.getZxid(), (hdr.getZxid() == expectedZxid));
             lastZxid = hdr.getZxid();
         }while(itr.next());
 

File: src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java
Patch:
@@ -143,10 +143,10 @@ public void processResult(int rc, String path, Object ctx,
             }
             for (int i = 0; i < res.results.size(); i++) {
                 OpResult opResult = res.results.get(i);
-                Assert.assertTrue("Did't recieve proper error response",
+                Assert.assertTrue("Did't receive proper error response",
                         opResult instanceof ErrorResult);
                 ErrorResult errRes = (ErrorResult) opResult;
-                Assert.assertEquals("Did't recieve proper error code",
+                Assert.assertEquals("Did't receive proper error code",
                         expectedResultCodes.get(i).intValue(), errRes.getErr());
             }
         } else {

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -153,6 +153,7 @@ public ZooKeeperServer(FileTxnSnapLog txnLogFactory, int tickTime,
             int minSessionTimeout, int maxSessionTimeout, ZKDatabase zkDb) {
         serverStats = new ServerStats(this);
         this.txnLogFactory = txnLogFactory;
+        this.txnLogFactory.setServerStats(this.serverStats);
         this.zkDb = zkDb;
         this.tickTime = tickTime;
         setMinSessionTimeout(minSessionTimeout);

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -124,6 +124,7 @@ public void runFromConfig(ServerConfig config)
             txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);
             final ZooKeeperServer zkServer = new ZooKeeperServer(txnLog,
                     config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, null);
+            txnLog.setServerStats(zkServer.serverStats());
 
             // Registers shutdown handler which will be used to know the
             // server error or shutdown state changes.

File: src/java/main/org/apache/zookeeper/server/admin/Commands.java
Patch:
@@ -290,6 +290,7 @@ public CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs)
      *   - "approximate_data_size": Long
      *   - "open_file_descriptor_count": Long (unix only)
      *   - "max_file_descritpor_count": Long (unix only)
+     *   - "fsync_threshold_exceed_count": Long
      *   - "followers": Integer (leader only)
      *   - "synced_followers": Integer (leader only)
      *   - "pending_syncs": Integer (leader only)

File: src/java/test/org/apache/zookeeper/server/quorum/auth/KerberosTestUtils.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.zookeeper.util.SecurityUtils;
 
 public class KerberosTestUtils {
-    private static String keytabFile = new File(System.getProperty("test.dir", "build"), UUID.randomUUID().toString())
+    private static String keytabFile = new File(System.getProperty("build.test.dir", "build"), UUID.randomUUID().toString())
             .getAbsolutePath();
 
     public static String getRealm() {

File: src/java/test/org/apache/zookeeper/test/DisconnectedWatcherTest.java
Patch:
@@ -178,7 +178,7 @@ public void testDeepChildWatcherAutoResetWithChroot() throws Exception {
 
     // @see jira issue ZOOKEEPER-706. Test auto reset of a large number of
     // watches which require multiple SetWatches calls.
-    @Test
+    @Test(timeout = 600000)
     public void testManyChildWatchersAutoReset() throws Exception {
         ZooKeeper zk1 = createClient();
 
@@ -199,6 +199,7 @@ public void testManyChildWatchersAutoReset() throws Exception {
                                      CreateMode.PERSISTENT_SEQUENTIAL);
             paths.add(path);
         }
+        LOG.info("Created 10,000 nodes.");
 
         MyWatcher childWatcher = new MyWatcher();
 

File: src/java/main/org/apache/zookeeper/common/PathUtils.java
Patch:
@@ -90,7 +90,7 @@ public static void validatePath(String path) throws IllegalArgumentException {
                     || c >= '\u007f' && c <= '\u009F'
                     || c >= '\ud800' && c <= '\uf8ff'
                     || c >= '\ufff0' && c <= '\uffff') {
-                reason = "invalid charater @" + i;
+                reason = "invalid character @" + i;
                 break;
             }
         }

File: src/java/test/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.PrintStream;
-import java.io.StringReader;
+import java.util.Scanner;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -138,7 +138,7 @@ public void testRecoveryInteractiveMode() throws Exception {
         TxnLogToolkit lt = new TxnLogToolkit(true, false, logfile.toString(), false);
 
         // Act
-        lt.dump(new StringReader("y\n"));
+        lt.dump(new Scanner("y\n"));
 
         // Assert
         String output = outContent.toString();

File: src/java/main/org/apache/zookeeper/server/EphemeralType.java
Patch:
@@ -166,7 +166,7 @@ public static boolean extendedEphemeralTypesEnabled() {
     public static EphemeralType get(long ephemeralOwner) {
         if (extendedEphemeralTypesEnabled()) {
             if (Boolean.getBoolean(TTL_3_5_3_EMULATION_PROPERTY)) {
-                if (OldEphemeralType.get(ephemeralOwner) == OldEphemeralType.TTL) {
+                if (EphemeralTypeEmulate353.get(ephemeralOwner) == EphemeralTypeEmulate353.TTL) {
                     return TTL;
                 }
             }

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -50,7 +50,6 @@
 import org.apache.zookeeper.common.Time;
 import org.apache.zookeeper.jmx.MBeanRegistry;
 import org.apache.zookeeper.jmx.ZKMBeanInfo;
-import org.apache.zookeeper.server.EphemeralType;
 import org.apache.zookeeper.server.ServerCnxnFactory;
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.ZooKeeperServer;

File: src/java/test/org/apache/zookeeper/server/Emulate353TTLTest.java
Patch:
@@ -69,7 +69,7 @@ public void testCreate()
     public void test353TTL()
             throws KeeperException, InterruptedException {
         DataTree dataTree = serverFactory.zkServer.getZKDatabase().dataTree;
-        long ephemeralOwner = OldEphemeralType.ttlToEphemeralOwner(100);
+        long ephemeralOwner = EphemeralTypeEmulate353.ttlToEphemeralOwner(100);
         dataTree.createNode("/foo", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, ephemeralOwner,
                 dataTree.getNode("/").stat.getCversion()+1, 1, 1);
 

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -1522,7 +1522,7 @@ public String create(final String path, byte data[], List<ACL> acl,
      * or {@link CreateMode#PERSISTENT_SEQUENTIAL_WITH_TTL}. If the znode has not been modified
      * within the given TTL, it will be deleted once it has no children. The TTL unit is
      * milliseconds and must be greater than 0 and less than or equal to
-     * {@link EphemeralType#MAX_TTL}.
+     * {@link EphemeralType#maxValue()} for {@link EphemeralType#TTL}.
      */
     public String create(final String path, byte data[], List<ACL> acl,
             CreateMode createMode, Stat stat, long ttl)

File: src/java/main/org/apache/zookeeper/cli/CreateCommand.java
Patch:
@@ -100,7 +100,7 @@ public boolean exec() throws CliException {
         }
         if (hasT) {
             try {
-                EphemeralType.ttlToEphemeralOwner(ttl);
+                EphemeralType.TTL.toEphemeralOwner(ttl);
             } catch (IllegalArgumentException e) {
                 throw new MalformedCommandException(e.getMessage());
             }

File: src/java/main/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -812,7 +812,7 @@ public ProcessTxnResult processTxn(TxnHeader header, Record txn)
                             createTtlTxn.getPath(),
                             createTtlTxn.getData(),
                             createTtlTxn.getAcl(),
-                            EphemeralType.ttlToEphemeralOwner(createTtlTxn.getTtl()),
+                            EphemeralType.TTL.toEphemeralOwner(createTtlTxn.getTtl()),
                             createTtlTxn.getParentCVersion(),
                             header.getZxid(), header.getTime(), stat);
                     rc.stat = stat;

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.zookeeper.common.Time;
 import org.apache.zookeeper.jmx.MBeanRegistry;
 import org.apache.zookeeper.jmx.ZKMBeanInfo;
+import org.apache.zookeeper.server.EphemeralType;
 import org.apache.zookeeper.server.ServerCnxnFactory;
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.ZooKeeperServer;

File: src/java/test/org/apache/zookeeper/test/TruncateTest.java
Patch:
@@ -153,7 +153,7 @@ public void testTruncate() throws Exception {
         int maxCnxns = 100;
         ServerCnxnFactory factory = ClientBase.createNewServerInstance(null,
                 hostPort, maxCnxns);
-        ClientBase.startServerInstance(dataDir1, factory, hostPort);
+        ClientBase.startServerInstance(dataDir1, factory, hostPort, 1);
         ClientBase.shutdownServerInstance(factory, hostPort);
 
         // standalone starts with 0 epoch while quorum starts with 1
@@ -162,7 +162,7 @@ public void testTruncate() throws Exception {
         origfile.renameTo(newfile);
 
         factory = ClientBase.createNewServerInstance(null, hostPort, maxCnxns);
-        ClientBase.startServerInstance(dataDir1, factory, hostPort);
+        ClientBase.startServerInstance(dataDir1, factory, hostPort, 1);
 
         ZooKeeper zk = ClientBase.createZKClient(hostPort, 15000);
         for(int i = 0; i < 50; i++) {

File: src/java/main/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -201,6 +201,9 @@ protected QuorumServer findLeader() {
         Vote current = self.getCurrentVote();
         for (QuorumServer s : self.getView().values()) {
             if (s.id == current.getId()) {
+                // Ensure we have the leader's correct IP address before
+                // attempting to connect.
+                s.recreateSocketAddresses();
                 leaderServer = s;
                 break;
             }

File: src/java/main/org/apache/zookeeper/server/ReferenceCountedACLCache.java
Patch:
@@ -109,6 +109,9 @@ public synchronized void deserialize(InputArchive ia) throws IOException {
             }
             List<ACL> aclList = new ArrayList<ACL>();
             Index j = ia.startVector("acls");
+            if (j == null) {
+                throw new RuntimeException("Incorrent format of InputArchive when deserialize DataTree - missing acls");
+            }
             while (!j.done()) {
                 ACL acl = new ACL();
                 acl.deserialize(ia, "acl");

File: src/java/test/org/apache/zookeeper/test/ClientBase.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.zookeeper.server.ServerCnxnFactoryAccessor;
 import org.apache.zookeeper.server.ZKDatabase;
 import org.apache.zookeeper.server.ZooKeeperServer;
+import org.apache.zookeeper.server.persistence.FilePadding;
 import org.apache.zookeeper.server.persistence.FileTxnLog;
 import org.apache.zookeeper.server.quorum.QuorumPeer;
 import org.apache.zookeeper.server.util.OSMXBean;
@@ -485,7 +486,7 @@ public static void setupTestEnv() {
         // resulting in test Assert.failure (client timeout on first session).
         // set env and directly in order to handle static init/gc issues
         System.setProperty("zookeeper.preAllocSize", "100");
-        FileTxnLog.setPreallocSize(100 * 1024);
+        FilePadding.setPreallocSize(100 * 1024);
     }
 
     protected void setUpAll() throws Exception {

File: src/java/main/org/apache/zookeeper/server/ContainerManager.java
Patch:
@@ -116,12 +116,12 @@ public void checkContainers()
             Request request = new Request(null, 0, 0,
                     ZooDefs.OpCode.deleteContainer, path, null);
             try {
-                LOG.info("Attempting to delete candidate container: %s",
+                LOG.info("Attempting to delete candidate container: {}",
                         containerPath);
                 requestProcessor.processRequest(request);
             } catch (Exception e) {
-                LOG.error(String.format("Could not delete container: %s" ,
-                        containerPath), e);
+                LOG.error("Could not delete container: {}",
+                        containerPath, e);
             }
 
             long elapsedMs = Time.currentElapsedTime() - startMs;

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -515,7 +515,7 @@ public Set<Watcher> materialize(Watcher.Event.KeeperState state,
                 synchronized (existWatches) {
                     Set<Watcher> list = existWatches.remove(clientPath);
                     if (list != null) {
-                        addTo(existWatches.remove(clientPath), result);
+                        addTo(list, result);
                         LOG.warn("We are triggering an exists watch for delete! Shouldn't happen!");
                     }
                 }

File: src/java/main/org/apache/zookeeper/server/command/AbstractFourLetterCommand.java
Patch:
@@ -35,7 +35,9 @@
 public abstract class AbstractFourLetterCommand {
     private static final Logger LOG = LoggerFactory
         .getLogger(AbstractFourLetterCommand.class);
-    protected static final String ZK_NOT_SERVING = "This ZooKeeper instance is not currently serving requests";
+
+    public static final String ZK_NOT_SERVING = "This ZooKeeper instance is not currently serving requests";
+
     protected PrintWriter pw;
     protected ServerCnxn serverCnxn;
     protected ZooKeeperServer zkServer;

File: src/java/test/org/apache/zookeeper/server/ZooKeeperServerStartupTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zookeeper.server;
 
 import static org.apache.zookeeper.client.FourLetterWordMain.send4LetterWord;
+import static org.apache.zookeeper.server.command.AbstractFourLetterCommand.ZK_NOT_SERVING;
 
 import java.io.File;
 import java.io.IOException;
@@ -45,7 +46,6 @@ public class ZooKeeperServerStartupTest extends ZKTestCase {
     private static int PORT = PortAssignment.unique();
     private static String HOST = "127.0.0.1";
     private static String HOSTPORT = HOST + ":" + PORT;
-    private static final String ZK_NOT_SERVING = "This ZooKeeper instance is not currently serving requests";
 
     private ServerCnxnFactory servcnxnf;
     private ZooKeeperServer zks;

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -185,11 +185,11 @@ public void dumpConf(PrintWriter pwriter) {
         pwriter.print("secureClientPort=");
         pwriter.println(getSecureClientPort());
         pwriter.print("dataDir=");
-        pwriter.println(zkDb.snapLog.getDataDir().getAbsolutePath());
+        pwriter.println(zkDb.snapLog.getSnapDir().getAbsolutePath());
         pwriter.print("dataDirSize=");
         pwriter.println(getDataDirSize());
         pwriter.print("dataLogDir=");
-        pwriter.println(zkDb.snapLog.getSnapDir().getAbsolutePath());
+        pwriter.println(zkDb.snapLog.getDataDir().getAbsolutePath());
         pwriter.print("dataLogSize=");
         pwriter.println(getLogDirSize());
         pwriter.print("tickTime=");

File: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.log4j.Layout;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
+import org.apache.log4j.PatternLayout;
 import org.apache.log4j.WriterAppender;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
@@ -346,9 +347,9 @@ public void testHighestZxidJoinLate() throws Exception {
     @Test
     public void testElectionFraud() throws IOException, InterruptedException {
         // capture QuorumPeer logging
-        Layout layout = Logger.getRootLogger().getAppender("CONSOLE").getLayout();
         ByteArrayOutputStream os = new ByteArrayOutputStream();
-        WriterAppender appender = new WriterAppender(layout, os);
+        String loggingPattern = ((PatternLayout) Logger.getRootLogger().getAppender("CONSOLE").getLayout()).getConversionPattern();
+        WriterAppender appender = new WriterAppender(new PatternLayout(loggingPattern), os);
         appender.setThreshold(Level.INFO);
         Logger qlogger = Logger.getLogger(QuorumPeer.class);
         qlogger.addAppender(appender);

File: src/java/main/org/apache/zookeeper/Login.java
Patch:
@@ -299,7 +299,7 @@ private synchronized LoginContext login(final String loginContextName) throws Lo
         }
         LoginContext loginContext = new LoginContext(loginContextName,callbackHandler);
         loginContext.login();
-        LOG.info("successfully logged in.");
+        LOG.info("{} successfully logged in.", loginContextName);
         return loginContext;
     }
 

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -61,6 +61,7 @@
 import org.apache.zookeeper.server.ServerCnxn.CloseRequestException;
 import org.apache.zookeeper.server.SessionTracker.Session;
 import org.apache.zookeeper.server.SessionTracker.SessionExpirer;
+import org.apache.zookeeper.server.auth.AuthenticationProvider;
 import org.apache.zookeeper.server.auth.ProviderRegistry;
 import org.apache.zookeeper.server.auth.ServerAuthenticationProvider;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;

File: src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java
Patch:
@@ -1078,6 +1078,8 @@ && checkLeader(outofelection, n.leader, IGNOREVALUE)) {
                 LOG.warn("Failed to unregister with JMX", e);
             }
             self.jmxLeaderElectionBean = null;
+            LOG.debug("Number of connection processing threads: {}",
+                    manager.getConnectionThreadCount());
         }
     }
 }

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.zookeeper.common.Time;
 import org.apache.zookeeper.server.Request;
 import org.apache.zookeeper.server.quorum.flexible.QuorumVerifier;
+import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;
 import org.apache.zookeeper.server.util.SerializeUtils;
 import org.apache.zookeeper.server.util.ZxidUtils;
 import org.apache.zookeeper.txn.SetDataTxn;
@@ -71,9 +72,9 @@ void followLeader() throws InterruptedException {
         self.end_fle = 0;
         fzk.registerJMX(new FollowerBean(this, zk), self.jmxLocalPeerBean);
         try {
-            InetSocketAddress addr = findLeader();            
+            QuorumServer leaderServer = findLeader();
             try {
-                connectToLeader(addr);
+                connectToLeader(leaderServer.addr, leaderServer.hostname);
                 long newEpochZxid = registerWithLeader(Leader.FOLLOWERINFO);
                 if (self.isReconfigStateChange())
                    throw new Exception("learned about role change");

File: src/java/test/org/apache/zookeeper/server/quorum/FLEBackwardElectionRoundTest.java
Patch:
@@ -115,7 +115,7 @@ public void testBackwardElectionRound() throws Exception {
          * Start mock server 1
          */
         QuorumPeer mockPeer = new QuorumPeer(peers, tmpdir[1], tmpdir[1], port[1], 3, 1, 1000, 2, 2);
-        cnxManagers[0] = new QuorumCnxManager(mockPeer);
+        cnxManagers[0] = mockPeer.createCnxnManager();
         cnxManagers[0].listener.start();
 
         cnxManagers[0].toSend(0l, initialMsg0);
@@ -124,7 +124,7 @@ public void testBackwardElectionRound() throws Exception {
          * Start mock server 2
          */
         mockPeer = new QuorumPeer(peers, tmpdir[2], tmpdir[2], port[2], 3, 2, 1000, 2, 2);
-        cnxManagers[1] = new QuorumCnxManager(mockPeer);
+        cnxManagers[1] = mockPeer.createCnxnManager();
         cnxManagers[1].listener.start();
 
         cnxManagers[1].toSend(0l, initialMsg1);

File: src/java/test/org/apache/zookeeper/server/quorum/FLELostMessageTest.java
Patch:
@@ -95,7 +95,7 @@ public void testLostMessage() throws Exception {
 
     void mockServer() throws InterruptedException, IOException {
         QuorumPeer peer = new QuorumPeer(peers, tmpdir[0], tmpdir[0], port[0], 3, 0, 1000, 2, 2);
-        cnxManager = new QuorumCnxManager(peer);
+        cnxManager = peer.createCnxnManager();
         cnxManager.listener.start();
 
         cnxManager.toSend(1l, FLETestUtils.createMsg(ServerState.LOOKING.ordinal(), 0, 0, 0));

File: src/java/test/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java
Patch:
@@ -24,6 +24,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.net.Socket;
 import java.util.Iterator;
@@ -55,7 +56,7 @@ class MockLearnerHandler extends LearnerHandler {
         boolean threadStarted = false;
 
         MockLearnerHandler(Socket sock, Leader leader) throws IOException {
-            super(sock, leader);
+            super(sock, new BufferedInputStream(sock.getInputStream()), leader);
         }
 
         protected void startSendingPackets() {

File: src/java/test/org/apache/zookeeper/server/quorum/LearnerTest.java
Patch:
@@ -110,7 +110,7 @@ public void connectionRetryTimeoutTest() throws Exception {
         InetSocketAddress addr = new InetSocketAddress(1111);
 
         // we expect this to throw an IOException since we're faking socket connect errors every time
-        learner.connectToLeader(addr);
+        learner.connectToLeader(addr, "");
     }
     @Test
     public void connectionInitLimitTimeoutTest() throws Exception {
@@ -130,7 +130,7 @@ public void connectionInitLimitTimeoutTest() throws Exception {
 
         // we expect this to throw an IOException since we're faking socket connect errors every time
         try {
-            learner.connectToLeader(addr);
+            learner.connectToLeader(addr, "");
             Assert.fail("should have thrown IOException!");
         } catch (IOException e) {
             //good, wanted to see that, let's make sure we ran out of time

File: src/java/test/org/apache/zookeeper/test/FLEPredicateTest.java
Patch:
@@ -41,7 +41,7 @@ public class FLEPredicateTest extends ZKTestCase {
     
     class MockFLE extends FastLeaderElection {
         MockFLE(QuorumPeer peer){
-            super(peer, new QuorumCnxManager(peer));
+            super(peer, peer.createCnxnManager());
         }
         
         boolean predicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch){

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -506,7 +506,7 @@ protected void setState(State state) {
         if (zkShutdownHandler != null) {
             zkShutdownHandler.handle(state);
         } else {
-            LOG.error("ZKShutdownHandler is not registered, so ZooKeeper server "
+            LOG.debug("ZKShutdownHandler is not registered, so ZooKeeper server "
                     + "won't take any action on ERROR or SHUTDOWN server state changes");
         }
     }

File: src/contrib/loggraph/src/java/org/apache/zookeeper/graph/FilterOp.java
Patch:
@@ -18,11 +18,12 @@
 package org.apache.zookeeper.graph;
 
 import java.util.ArrayList;
+import java.util.List;
 import org.apache.zookeeper.graph.filterops.*;
 
 public abstract class FilterOp {
-    protected ArrayList<FilterOp> subOps;
-    protected ArrayList<Arg> args;
+    protected List<FilterOp> subOps;
+    protected List<Arg> args;
 
     public enum ArgType {
 	STRING, NUMBER, SYMBOL

File: src/contrib/loggraph/src/java/org/apache/zookeeper/graph/JsonGenerator.java
Patch:
@@ -31,10 +31,11 @@
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.ListIterator;
+import java.util.Set;
 
 public class JsonGenerator {
     private JSONObject root;
-    private HashSet<Integer> servers;
+    private Set<Integer> servers;
 
     private class Message {
 	private int from;

File: src/contrib/loggraph/src/java/org/apache/zookeeper/graph/LogEntry.java
Patch:
@@ -19,9 +19,10 @@
 
 import java.io.Serializable;
 import java.util.HashMap;
+import java.util.Map;
 
 public abstract class LogEntry implements Serializable {
-    private HashMap attributes;
+    private Map attributes;
 
     public enum Type { UNKNOWN, LOG4J, TXN };
         

File: src/contrib/loggraph/src/java/org/apache/zookeeper/graph/MeasureThroughput.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.PrintStream;
 
 import java.util.HashSet;
+import java.util.Set;
 
 public class MeasureThroughput {
     private static final int MS_PER_SEC = 1000;
@@ -45,7 +46,7 @@ public static void main(String[] args) throws IOException {
 	long currentsec = 0;
 	long currentmin = 0;
 	long currenthour = 0;
-	HashSet<Long> zxids_ms = new HashSet<Long>();
+	Set<Long> zxids_ms = new HashSet<Long>();
 	long zxid_sec = 0;
 	long zxid_min = 0;
 	long zxid_hour = 0;

File: src/contrib/loggraph/src/java/org/apache/zookeeper/graph/servlets/Throughput.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.util.HashSet;
 import java.util.LinkedHashMap;
+import java.util.Set;
 
 import org.apache.zookeeper.graph.*;
 import org.slf4j.Logger;
@@ -80,7 +81,7 @@ public String handleRequest(JsonRequest request) throws Exception {
 	
 	long current = 0;
 	long currentms = 0;
-	HashSet<Long> zxids_ms = new HashSet<Long>();
+	Set<Long> zxids_ms = new HashSet<Long>();
 	long zxidcount = 0;
 
 	JSONArray events = new JSONArray();

File: src/contrib/zooinspector/src/java/org/apache/zookeeper/inspector/gui/ZooInspectorConnectionPropertiesDialog.java
Patch:
@@ -51,7 +51,7 @@
  */
 public class ZooInspectorConnectionPropertiesDialog extends JDialog {
 
-    private final HashMap<String, JComponent> components;
+    private final Map<String, JComponent> components;
 
     /**
      * @param lastConnectionProps

File: src/contrib/zooinspector/src/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java
Patch:
@@ -64,7 +64,7 @@ public ZooInspectorPanel(final ZooInspectorManager zooInspectorManager, final Ic
         this.zooInspectorManager = zooInspectorManager;
         this.iconResource = iconResource;
         toolbar = new Toolbar(iconResource);
-        final ArrayList<ZooInspectorNodeViewer> nodeViewers = new ArrayList<ZooInspectorNodeViewer>();
+        final List<ZooInspectorNodeViewer> nodeViewers = new ArrayList<ZooInspectorNodeViewer>();
         try {
             List<String> defaultNodeViewersClassNames = this.zooInspectorManager
                     .getDefaultNodeViewerConfiguration();

File: src/java/main/org/apache/jute/compiler/CSharpGenerator.java
Patch:
@@ -20,10 +20,10 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.util.ArrayList;
+import java.util.List;
 
 public class CSharpGenerator {
-    private ArrayList<JRecord> mRecList;
+    private List<JRecord> mRecList;
     private final File outputDirectory;
 
     /** Creates a new instance of CSharpGenerator
@@ -33,7 +33,7 @@ public class CSharpGenerator {
      * @param rlist List of records defined within this file
      * @param outputDirectory
      */
-    CSharpGenerator(String name, ArrayList<JFile> ilist, ArrayList<JRecord> rlist,
+    CSharpGenerator(String name, List<JFile> ilist, List<JRecord> rlist,
             File outputDirectory)
      {
         this.outputDirectory = outputDirectory;

File: src/java/main/org/apache/jute/compiler/JFile.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Container for the Hadoop Record DDL.
@@ -31,8 +32,8 @@
 public class JFile {
     
     private String mName;
-    private ArrayList<JFile> mInclFiles;
-    private ArrayList<JRecord> mRecords;
+    private List<JFile> mInclFiles;
+    private List<JRecord> mRecords;
     
     /** Creates a new instance of JFile
      *

File: src/java/main/org/apache/zookeeper/Environment.java
Patch:
@@ -48,12 +48,12 @@ public String toString() {
         }
     }
 
-    private static void put(ArrayList<Entry> l, String k, String v) {
+    private static void put(List<Entry> l, String k, String v) {
         l.add(new Entry(k,v));
     }
 
     public static List<Entry> list() {
-        ArrayList<Entry> l = new ArrayList<Entry>();
+        List<Entry> l = new ArrayList<Entry>();
         put(l, "zookeeper.version", Version.getFullVersion());
 
         try {

File: src/java/main/org/apache/zookeeper/common/PathTrie.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -53,7 +54,7 @@ public class PathTrie {
     
     static class TrieNode {
         boolean property = false;
-        final HashMap<String, TrieNode> children;
+        final Map<String, TrieNode> children;
         TrieNode parent = null;
         /**
          * create a trienode with parent

File: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java
Patch:
@@ -74,7 +74,7 @@ public class NettyServerCnxnFactory extends ServerCnxnFactory {
     ServerBootstrap bootstrap;
     Channel parentChannel;
     ChannelGroup allChannels = new DefaultChannelGroup("zkServerCnxns");
-    HashMap<InetAddress, Set<NettyServerCnxn>> ipMap =
+    Map<InetAddress, Set<NettyServerCnxn>> ipMap =
         new HashMap<InetAddress, Set<NettyServerCnxn>>( );
     InetSocketAddress localAddress;
     int maxClientCnxns = 60;
@@ -547,7 +547,7 @@ public void resetAllConnectionStats() {
 
     @Override
     public Iterable<Map<String, Object>> getAllConnectionInfo(boolean brief) {
-        HashSet<Map<String,Object>> info = new HashSet<Map<String,Object>>();
+        Set<Map<String,Object>> info = new HashSet<Map<String,Object>>();
         // No need to synchronize since cnxns is backed by a ConcurrentHashMap
         for (ServerCnxn c : cnxns) {
             info.add(c.getConnectionInfo(brief));

File: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -201,7 +201,7 @@ private void addChangeRecord(ChangeRecord c) {
      *         rolled back in any failure.
      */
     private Map<String, ChangeRecord> getPendingChanges(MultiTransactionRecord multiRequest) {
-        HashMap<String, ChangeRecord> pendingChangeRecords = new HashMap<String, ChangeRecord>();
+        Map<String, ChangeRecord> pendingChangeRecords = new HashMap<String, ChangeRecord>();
 
         for (Op op : multiRequest) {
             String path = op.getPath();
@@ -911,7 +911,7 @@ protected void pRequest(Request request) throws RequestProcessorException {
 
     private List<ACL> removeDuplicates(List<ACL> acl) {
 
-        LinkedList<ACL> retval = new LinkedList<ACL>();
+        List<ACL> retval = new LinkedList<ACL>();
         if (acl != null) {
             for (ACL a : acl) {
                 if (!retval.contains(a)) {
@@ -958,7 +958,7 @@ private List<ACL> fixupACL(String path, List<Id> authInfo, List<ACL> acls)
         // check for well formed ACLs
         // This resolves https://issues.apache.org/jira/browse/ZOOKEEPER-1877
         List<ACL> uniqacls = removeDuplicates(acls);
-        LinkedList<ACL> rv = new LinkedList<ACL>();
+        List<ACL> rv = new LinkedList<ACL>();
         if (uniqacls == null || uniqacls.size() == 0) {
             throw new KeeperException.InvalidACLException(path);
         }

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -115,7 +115,7 @@ protected enum State {
     private final AtomicInteger requestsInProcess = new AtomicInteger(0);
     final List<ChangeRecord> outstandingChanges = new ArrayList<ChangeRecord>();
     // this data structure must be accessed under the outstandingChanges lock
-    final HashMap<String, ChangeRecord> outstandingChangesForPath =
+    final Map<String, ChangeRecord> outstandingChangesForPath =
         new HashMap<String, ChangeRecord>();
 
     protected ServerCnxnFactory serverCnxnFactory;
@@ -284,7 +284,7 @@ public void loadData() throws IOException, InterruptedException {
         }
         
         // Clean up dead sessions
-        LinkedList<Long> deadSessions = new LinkedList<Long>();
+        List<Long> deadSessions = new LinkedList<Long>();
         for (Long session : zkDb.getSessions()) {
             if (zkDb.getSessionWithTimeOuts().get(session) == null) {
                 deadSessions.add(session);

File: src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.Enumeration;
 import java.util.HashMap;
+import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -30,7 +31,7 @@ public class ProviderRegistry {
     private static final Logger LOG = LoggerFactory.getLogger(ProviderRegistry.class);
 
     private static boolean initialized = false;
-    private static HashMap<String, AuthenticationProvider> authenticationProviders =
+    private static Map<String, AuthenticationProvider> authenticationProviders =
         new HashMap<>();
 
     //VisibleForTesting

File: src/java/main/org/apache/zookeeper/server/quorum/AuthFastLeaderElection.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -801,7 +802,7 @@ private boolean totalOrderPredicate(long id, long zxid) {
 
     }
 
-    private boolean termPredicate(HashMap<InetSocketAddress, Vote> votes,
+    private boolean termPredicate(Map<InetSocketAddress, Vote> votes,
             long l, long zxid) {
 
 

File: src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.LinkedList;
+import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.LinkedBlockingQueue;
 
@@ -94,7 +95,7 @@ public class CommitProcessor extends ZooKeeperCriticalThread implements
      * Requests that we are holding until commit comes in. Keys represent
      * session ids, each value is a linked list of the session's requests.
      */
-    protected final HashMap<Long, LinkedList<Request>> pendingRequests =
+    protected final Map<Long, LinkedList<Request>> pendingRequests =
             new HashMap<Long, LinkedList<Request>>(10000);
 
     /** The number of requests currently being processed */

File: src/java/main/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.ConcurrentHashMap;
@@ -148,7 +149,7 @@ private void addObserverLearnerHandler(LearnerHandler lh) {
     }
 
     // Pending sync requests. Must access under 'this' lock.
-    private final HashMap<Long,List<LearnerSyncRequest>> pendingSyncs =
+    private final Map<Long,List<LearnerSyncRequest>> pendingSyncs =
         new HashMap<Long,List<LearnerSyncRequest>>();
 
     synchronized public int getNumPendingSyncs() {

File: src/java/main/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java
Patch:
@@ -35,8 +35,8 @@
  */
 public class QuorumMaj implements QuorumVerifier {
     private Map<Long, QuorumServer> allMembers = new HashMap<Long, QuorumServer>();
-    private HashMap<Long, QuorumServer> votingMembers = new HashMap<Long, QuorumServer>();
-    private HashMap<Long, QuorumServer> observingMembers = new HashMap<Long, QuorumServer>();
+    private Map<Long, QuorumServer> votingMembers = new HashMap<Long, QuorumServer>();
+    private Map<Long, QuorumServer> observingMembers = new HashMap<Long, QuorumServer>();
     private long version = 0;
     private int half;
 

File: src/java/systest/org/apache/zookeeper/test/system/BaseSysTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.net.InetSocketAddress;
 import java.net.UnknownHostException;
 import java.util.HashMap;
+import java.util.Map;
 
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
@@ -143,7 +144,7 @@ private void distributedConfigureServers(int count) throws IOException {
 
     private QuorumPeer qps[];
     private File qpsDirs[];
-    HashMap<Long,QuorumServer> peers;
+    Map<Long,QuorumServer> peers;
     private void fakeConfigureServers(int count) throws IOException {
         peers = new HashMap<Long,QuorumServer>();
         qps = new QuorumPeer[count];

File: src/java/systest/org/apache/zookeeper/test/system/InstanceContainer.java
Patch:
@@ -225,7 +225,7 @@ public void process(WatchedEvent event) {
         }
     }
 
-    HashMap<String, Instance> instances = new HashMap<String, Instance>();
+    Map<String, Instance> instances = new HashMap<String, Instance>();
 
     @Override
     public void processResult(int rc, String path, Object ctx, List<String> children) {
@@ -234,7 +234,7 @@ public void processResult(int rc, String path, Object ctx, List<String> children
             zk.getChildren(assignmentsNode, true, this, null);
             return;
         }
-        HashMap<String, Instance> newList = new HashMap<String, Instance>();
+        Map<String, Instance> newList = new HashMap<String, Instance>();
         // check for differences
         Stat stat = new Stat();
         for(String child: children) {

File: src/java/systest/org/apache/zookeeper/test/system/QuorumPeerInstance.java
Patch:
@@ -26,6 +26,7 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.HashMap;
+import java.util.Map;
 import java.util.Properties;
 
 import org.slf4j.Logger;
@@ -55,7 +56,7 @@ public void setReporter(Reporter r) {
     InetSocketAddress clientAddr;
     InetSocketAddress quorumLeaderAddr;
     InetSocketAddress quorumLeaderElectionAddr;
-    HashMap<Long, QuorumServer> peers;
+    Map<Long, QuorumServer> peers;
     File snapDir, logDir;
 
     public QuorumPeerInstance() {

File: src/java/test/org/apache/zookeeper/server/quorum/FLEBackwardElectionRoundTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 import java.util.HashMap;
+import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -42,7 +43,7 @@ public class FLEBackwardElectionRoundTest extends ZKTestCase {
     protected static final Logger LOG = LoggerFactory.getLogger(FLELostMessageTest.class);
 
     int count;
-    HashMap<Long,QuorumServer> peers;
+    Map<Long,QuorumServer> peers;
     File tmpdir[];
     int port[];
 

File: src/java/test/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.net.Socket;
 import java.util.Iterator;
 import java.util.LinkedList;
+import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
@@ -90,7 +91,7 @@ public long getminCommittedLog() {
             return 0;
         }
 
-        public LinkedList<Proposal> getCommittedLog() {
+        public List<Proposal> getCommittedLog() {
             return committedLog;
         }
 

File: src/java/test/org/apache/zookeeper/server/quorum/QuorumRequestPipelineTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
@@ -47,7 +48,7 @@ public class QuorumRequestPipelineTest extends QuorumBase {
     protected final CountDownLatch callComplete = new CountDownLatch(1);
     protected boolean complete = false;
     protected final static String PARENT_PATH = "/foo";
-    protected final static HashSet<String> CHILDREN = new HashSet<String>(Arrays.asList("1", "2", "3"));
+    protected final static Set<String> CHILDREN = new HashSet<String>(Arrays.asList("1", "2", "3"));
     protected final static String AUTH_PROVIDER = "digest";
     protected final static byte[] AUTH = "hello".getBytes();
     protected final static byte[] DATA = "Hint Water".getBytes();

File: src/java/test/org/apache/zookeeper/server/quorum/ReconfigFailureCasesTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.KeeperException.NewConfigNoQuorum;
@@ -226,7 +227,7 @@ public void testObserverToParticipantConversionFails() throws Exception {
         int[][] ports = ReconfigRecoveryTest.generatePorts(SERVER_COUNT);
 
         // generate old config string
-        HashSet<Integer> observers = new HashSet<Integer>();
+        Set<Integer> observers = new HashSet<Integer>();
         observers.add(3);
         StringBuilder sb = ReconfigRecoveryTest.generateConfig(SERVER_COUNT, ports, observers);
         String currentQuorumCfgSection = sb.toString();

File: src/java/test/org/apache/zookeeper/test/ACLTest.java
Patch:
@@ -127,7 +127,7 @@ public void testAcls() throws Exception {
                 id.setId("1.1.1."+j);
                 id.setScheme("ip");
                 acl.setId(id);
-                ArrayList<ACL> list = new ArrayList<ACL>();
+                List<ACL> list = new ArrayList<ACL>();
                 list.add(acl);
                 zk.create(path, path.getBytes(), list, CreateMode.PERSISTENT);
             }

File: src/java/test/org/apache/zookeeper/test/AsyncTest.java
Patch:
@@ -20,6 +20,7 @@
 
 
 import java.util.LinkedList;
+import java.util.List;
 
 import org.apache.zookeeper.AsyncCallback.DataCallback;
 import org.apache.zookeeper.AsyncCallback.StringCallback;
@@ -67,7 +68,8 @@ private ZooKeeper createClient(String hp)
         return zk;
     }
 
-    LinkedList<Integer> results = new LinkedList<Integer>();
+    List<Integer> results = new LinkedList<Integer>();
+
     @Test
     public void testAsync() throws Exception
     {

File: src/java/test/org/apache/zookeeper/test/ClientBase.java
Patch:
@@ -211,7 +211,7 @@ protected TestableZooKeeper createClient(CountdownWatcher watcher)
         return createClient(watcher, hostPort);
     }
 
-    private LinkedList<ZooKeeper> allClients;
+    private List<ZooKeeper> allClients;
     private boolean allClientsSetup = false;
 
     protected TestableZooKeeper createClient(CountdownWatcher watcher, String hp)

File: src/java/test/org/apache/zookeeper/test/CnxManagerTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.Map;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.net.Socket;
@@ -54,7 +55,7 @@ public class CnxManagerTest extends ZKTestCase {
     protected static final int THRESHOLD = 4;
 
     int count;
-    HashMap<Long,QuorumServer> peers;
+    Map<Long,QuorumServer> peers;
     File peerTmpdir[];
     int peerQuorumPort[];
     int peerClientPort[];

File: src/java/test/org/apache/zookeeper/test/FLEZeroWeightTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Map;
 import java.util.Properties;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -44,7 +45,7 @@ public class FLEZeroWeightTest extends ZKTestCase {
     Properties qp;
 
     int count;
-    HashMap<Long,QuorumServer> peers;
+    Map<Long,QuorumServer> peers;
     ArrayList<LEThread> threads;
     File tmpdir[];
     int port[];

File: src/java/test/org/apache/zookeeper/test/IntegrityCheck.java
Patch:
@@ -33,6 +33,7 @@
  */
 import java.util.Date;
 import java.util.HashMap;
+import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -49,7 +50,7 @@ public class IntegrityCheck implements StatCallback, DataCallback {
 
     ZooKeeper zk;
 
-    HashMap<String, byte[]> lastValue = new HashMap<String, byte[]>();
+    Map<String, byte[]> lastValue = new HashMap<String, byte[]>();
 
     int count;
 

File: src/java/test/org/apache/zookeeper/test/LocalSessionsOnlyTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.zookeeper.test;
 
 import java.util.HashMap;
+import java.util.Map;
 import java.util.Map.Entry;
 
 import org.apache.zookeeper.CreateMode;
@@ -107,7 +108,7 @@ private void testLocalSessions(boolean testLeader) throws Exception {
         zk.close();
 
         // Validate data on both follower and leader
-        HashMap<String, Integer> peers = new HashMap<String, Integer>();
+        Map<String, Integer> peers = new HashMap<String, Integer>();
         peers.put("leader", leaderIdx);
         peers.put("follower", followerIdx);
         for (Entry<String, Integer> entry: peers.entrySet()) {

File: src/java/test/org/apache/zookeeper/test/OOMTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.List;
 
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
@@ -47,7 +48,7 @@ public void testOOM() throws IOException, InterruptedException, KeeperException
         File tmpDir = ClientBase.createTmpDir();
         // Grab some memory so that it is easier to cause an
         // OOM condition;
-        ArrayList<byte[]> hog = new ArrayList<byte[]>();
+        List<byte[]> hog = new ArrayList<byte[]>();
         while (true) {
             try {
                 hog.add(new byte[1024 * 1024 * 2]);

File: src/java/test/org/apache/zookeeper/test/QuorumBase.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedHashSet;
+import java.util.Map;
 import java.util.Set;
 
 import org.slf4j.Logger;
@@ -136,7 +137,7 @@ void startServers(boolean withObservers) throws Exception {
         int tickTime = 2000;
         int initLimit = 3;
         int syncLimit = 3;
-        HashMap<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();
+        Map<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();
         peers.put(Long.valueOf(1), new QuorumServer(1, 
                 new InetSocketAddress(LOCALADDR, port1),
                 new InetSocketAddress(LOCALADDR, portLE1),
@@ -293,7 +294,7 @@ public void setupServers() throws IOException {
         setupServer(5);
     }
 
-    HashMap<Long,QuorumServer> peers = null;
+    Map<Long,QuorumServer> peers = null;
     public void setupServer(int i) throws IOException {
         int tickTime = 2000;
         int initLimit = 3;

File: src/java/test/org/apache/zookeeper/test/ReconfigTest.java
Patch:
@@ -479,7 +479,7 @@ public void testRemoveOneAsynchronous() throws Exception {
         // lets remove someone who's not the leader
         leavingServers.add(getLeaderId(qu) == 5 ? "4": "5");
  
-        LinkedList<Integer> results = new LinkedList<Integer>();
+        List<Integer> results = new LinkedList<Integer>();
         
         zkAdminArr[1].reconfigure(null, leavingServers, null, -1, this, results);
         

File: src/java/test/org/apache/zookeeper/test/SessionTest.java
Patch:
@@ -414,7 +414,7 @@ public void testSessionTimeoutAccess() throws Exception {
     }
 
     private class DupWatcher extends CountdownWatcher {
-        public LinkedList<WatchedEvent> states = new LinkedList<WatchedEvent>();
+        public List<WatchedEvent> states = new LinkedList<WatchedEvent>();
         public void process(WatchedEvent event) {
             super.process(event);
             if (event.getType() == EventType.None) {

File: src/java/test/org/apache/zookeeper/test/TruncateTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.util.HashMap;
+import java.util.Map;
 
 import org.apache.jute.Record;
 import org.apache.zookeeper.CreateMode;
@@ -190,7 +191,7 @@ public void testTruncate() throws Exception {
         int port3 = PortAssignment.unique();
         
         // Start up two of the quorum and add 10 txns
-        HashMap<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();
+        Map<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();
         peers.put(Long.valueOf(1), new QuorumServer(1,
                        new InetSocketAddress("127.0.0.1", PortAssignment.unique()),
                        new InetSocketAddress("127.0.0.1", PortAssignment.unique()),

File: src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java
Patch:
@@ -435,7 +435,7 @@ public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversa
             Assert.assertTrue(zxid > ZxidUtils.makeZxid(1, 0));
             
             // Generate snapshot and close files.
-            snapLog.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts());
+            snapLog.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts(), false);
             snapLog.close();
             
             QuorumPeer peer = createQuorumPeer(tmpDir);
@@ -714,7 +714,7 @@ public void converseWithFollower(InputArchive ia, OutputArchive oa,
                     Assert.assertEquals(1, f.self.getAcceptedEpoch());
                     Assert.assertEquals(1, f.self.getCurrentEpoch());
                     //Make sure that we did take the snapshot now
-                    verify(f.zk).takeSnapshot();
+                    verify(f.zk).takeSnapshot(true);
                     Assert.assertEquals(firstZxid, f.fzk.getLastProcessedZxid());
                     
                     // Make sure the data was recorded in the filesystem ok
@@ -1367,7 +1367,7 @@ public void testInitialAcceptedCurrent() throws Exception {
             FileTxnSnapLog logFactory = new FileTxnSnapLog(tmpDir, tmpDir);
             File version2 = new File(tmpDir, "version-2");
             version2.mkdir();
-            logFactory.save(new DataTree(), new ConcurrentHashMap<Long, Integer>());
+            logFactory.save(new DataTree(), new ConcurrentHashMap<Long, Integer>(), false);
             long zxid = ZxidUtils.makeZxid(3, 3);
             logFactory.append(new Request(1, 1, ZooDefs.OpCode.error,
                     new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.error),

File: src/java/test/org/apache/zookeeper/test/TruncateTest.java
Patch:
@@ -75,7 +75,7 @@ public void testTruncationStreamReset() throws Exception {
         ZKDatabase zkdb = new ZKDatabase(snaplog);
         // make sure to snapshot, so that we have something there when
         // truncateLog reloads the db
-        snaplog.save(zkdb.getDataTree(), zkdb.getSessionWithTimeOuts());
+        snaplog.save(zkdb.getDataTree(), zkdb.getSessionWithTimeOuts(), false);
 
         for (int i = 1; i <= 100; i++) {
             append(zkdb, i);

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -515,7 +515,8 @@ public void write(Writer out) throws IOException {
     }
 
 
-    public static void deleteFile(String filename){        
+    public static void deleteFile(String filename){
+       if (filename == null) return;
        File f = new File(filename);
        if (f.exists()) {
            try{ 

File: src/java/test/org/apache/zookeeper/server/quorum/ReconfigDuringLeaderSyncTest.java
Patch:
@@ -257,6 +257,7 @@ public void runFromConfig(QuorumPeerConfig config)
             quorumPeer = new CustomQuorumPeer(config.getQuorumVerifier().getAllMembers(), config.getDataDir(),
                     config.getDataLogDir(), config.getClientPortAddress().getPort(), config.getElectionAlg(),
                     config.getServerId(), config.getTickTime(), config.getInitLimit(), config.getSyncLimit());
+            quorumPeer.setConfigFileName(config.getConfigFilename());
             quorumPeer.start();
             try {
                 quorumPeer.join();

File: src/java/main/org/apache/zookeeper/client/ZooKeeperSaslClient.java
Patch:
@@ -361,7 +361,7 @@ public void respondToServer(byte[] serverToken, ClientCnxn cnxn) {
                 }
             } catch (SaslException e) {
                 LOG.error("SASL authentication failed using login context '" +
-                        this.getLoginContext() + "'.");
+                        this.getLoginContext() + "' with exception: {}", e);
                 saslState = SaslState.FAILED;
                 gotLastPacket = true;
             }

File: src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -399,7 +399,7 @@ public void processRequest(Request request) {
                         checkWatches.getPath(), type, cnxn);
                 if (!containsWatcher) {
                     String msg = String.format(Locale.ENGLISH, "%s (type: %s)",
-                            new Object[] { checkWatches.getPath(), type });
+                            checkWatches.getPath(), type);
                     throw new KeeperException.NoWatcherException(msg);
                 }
                 break;
@@ -414,7 +414,7 @@ public void processRequest(Request request) {
                         removeWatches.getPath(), type, cnxn);
                 if (!removed) {
                     String msg = String.format(Locale.ENGLISH, "%s (type: %s)",
-                            new Object[] { removeWatches.getPath(), type });
+                            removeWatches.getPath(), type);
                     throw new KeeperException.NoWatcherException(msg);
                 }
                 break;

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -61,7 +61,6 @@
 import org.apache.zookeeper.server.ServerCnxn.CloseRequestException;
 import org.apache.zookeeper.server.SessionTracker.Session;
 import org.apache.zookeeper.server.SessionTracker.SessionExpirer;
-import org.apache.zookeeper.server.auth.AuthenticationProvider;
 import org.apache.zookeeper.server.auth.ProviderRegistry;
 import org.apache.zookeeper.server.auth.ServerAuthenticationProvider;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
@@ -104,7 +103,7 @@ public class ZooKeeperServer implements SessionExpirer, ServerStats.Provider {
     protected volatile State state = State.INITIAL;
 
     protected enum State {
-        INITIAL, RUNNING, SHUTDOWN, ERROR;
+        INITIAL, RUNNING, SHUTDOWN, ERROR
     }
 
     /**
@@ -229,7 +228,7 @@ public ZooKeeperServer(File snapDir, File logDir, int tickTime)
     }
 
     /**
-     * Default constructor, relies on the config for its agrument values
+     * Default constructor, relies on the config for its argument values
      *
      * @throws IOException
      */

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -1052,6 +1052,8 @@ private void sendPing() {
         private boolean saslLoginFailed = false;
 
         private void startConnect() throws IOException {
+            // initializing it for new connection
+            saslLoginFailed = false;
             if(!isFirstConnect){
                 try {
                     Thread.sleep(r.nextInt(1000));

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -693,10 +693,8 @@ private void finishPacket(Packet p) {
                     }
                 }
             } catch (KeeperException.NoWatcherException nwe) {
-                LOG.error("Failed to find watcher!", nwe);
                 p.replyHeader.setErr(nwe.code().intValue());
             } catch (KeeperException ke) {
-                LOG.error("Exception when removing watcher", ke);
                 p.replyHeader.setErr(ke.code().intValue());
             }
         }

File: src/java/test/org/apache/zookeeper/ZooKeeperTest.java
Patch:
@@ -293,7 +293,7 @@ public void testCreateNodeWithoutData() throws Exception {
                     .processZKCmd(zkMain.cl));
             Assert.fail("Created the node with wrong option should "
                     + "throw Exception.");
-        } catch (IllegalArgumentException e) {
+        } catch (MalformedPathException e) {
             Assert.assertEquals("Path must start with / character", e
                     .getMessage());
         }

File: src/java/main/org/apache/zookeeper/cli/CreateCommand.java
Patch:
@@ -118,6 +118,8 @@ public boolean exec() throws CliException {
         try {
             String newPath = hasT ? zk.create(path, data, acl, flags, new Stat(), ttl) : zk.create(path, data, acl, flags);
             err.println("Created " + newPath);
+        } catch(IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch(KeeperException.EphemeralOnLocalSessionException e) {
             err.println("Unable to create ephemeral node on a local session");
             throw new CliWrapperException(e);

File: src/java/main/org/apache/zookeeper/cli/DelQuotaCommand.java
Patch:
@@ -95,7 +95,7 @@ public boolean exec() throws CliException {
      */
     public static boolean delQuota(ZooKeeper zk, String path,
             boolean bytes, boolean numNodes)
-            throws KeeperException, IOException, InterruptedException {
+            throws KeeperException, IOException, InterruptedException, MalformedPathException {
         String parentPath = Quotas.quotaZookeeper + path;
         String quotaPath = Quotas.quotaZookeeper + path + "/" + 
                 Quotas.limitNode;
@@ -106,6 +106,8 @@ public static boolean delQuota(ZooKeeper zk, String path,
         byte[] data = null;
         try {
             data = zk.getData(quotaPath, false, new Stat());
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException.NoNodeException ne) {
             System.err.println("quota does not exist for " + path);
             return true;

File: src/java/main/org/apache/zookeeper/cli/DeleteAllCommand.java
Patch:
@@ -65,6 +65,8 @@ public boolean exec() throws CliException {
         String path = args[1];
         try {
             ZKUtil.deleteRecursive(zk, path);
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/DeleteCommand.java
Patch:
@@ -80,7 +80,9 @@ public boolean exec() throws CliException {
         }
         
         try {
-        zk.delete(path, version);
+            zk.delete(path, version);
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch(KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/GetAclCommand.java
Patch:
@@ -67,6 +67,8 @@ public boolean exec() throws CliException {
         List<ACL> acl;
         try {
            acl = zk.getACL(path, stat);
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/GetCommand.java
Patch:
@@ -83,6 +83,8 @@ public boolean exec() throws CliException {
         byte data[];
         try {
             data = zk.getData(path, watch, stat);
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/ListQuotaCommand.java
Patch:
@@ -69,6 +69,8 @@ public boolean exec() throws CliException {
                     + Quotas.statNode, false, stat);
             out.println("Output stat for " + path + " "
                     + new StatsTrack(new String(data)).toString());
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException.NoNodeException ne) {
             err.println("quota for " + path + " does not exist.");
         } catch (KeeperException|InterruptedException ex) {

File: src/java/main/org/apache/zookeeper/cli/Ls2Command.java
Patch:
@@ -60,6 +60,8 @@ public boolean exec() throws CliException {
         List<String> children;
         try {
             children = zk.getChildren(path, watch, stat);
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/LsCommand.java
Patch:
@@ -108,6 +108,8 @@ public void processResult(int rc, String path, Object ctx, String name) {
                 List<String> children = zk.getChildren(path, watch, stat);
                 printChildren(children, stat);
             }
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/RemoveWatchesCommand.java
Patch:
@@ -62,7 +62,7 @@ public CliCommand parse(String[] cmdArgs) throws CliParseException {
     }
 
     @Override
-    public boolean exec() throws CliWrapperException {
+    public boolean exec() throws CliWrapperException, MalformedPathException {
         String path = args[1];
         WatcherType wtype = WatcherType.Any;
         // if no matching option -c or -d or -a is specified, we remove
@@ -79,6 +79,8 @@ public boolean exec() throws CliWrapperException {
 
         try {
             zk.removeAllWatches(path, wtype, local);
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/SetAclCommand.java
Patch:
@@ -73,6 +73,8 @@ public boolean exec() throws CliException {
             if (cl.hasOption("s")) {
                 new StatPrinter(out).print(stat);
             }
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/SetCommand.java
Patch:
@@ -71,6 +71,8 @@ public boolean exec() throws CliException {
             if (cl.hasOption("s")) {
                 new StatPrinter(out).print(stat);
             }
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/cli/StatCommand.java
Patch:
@@ -81,6 +81,8 @@ public boolean exec() throws CliException {
         Stat stat;
         try {
             stat = zk.exists(path, watch);
+        } catch (IllegalArgumentException ex) {
+            throw new MalformedPathException(ex.getMessage());
         } catch (KeeperException|InterruptedException ex) {
             throw new CliWrapperException(ex);
         }

File: src/java/main/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -724,7 +724,9 @@ synchronized public boolean tryToCommit(Proposal p, long zxid, SocketAddress fol
        // concurrent reconfigs are allowed, this can happen.
        if (outstandingProposals.containsKey(zxid - 1)) return false;
        
-       // getting a quorum from all necessary configurations
+       // in order to be committed, a proposal must be accepted by a quorum.
+       //
+       // getting a quorum from all necessary configurations.
         if (!p.hasAllQuorums()) {
            return false;                 
         }
@@ -737,8 +739,6 @@ synchronized public boolean tryToCommit(Proposal p, long zxid, SocketAddress fol
                     + (lastCommitted+1));
         }     
         
-        // in order to be committed, a proposal must be accepted by a quorum              
-        
         outstandingProposals.remove(zxid);
         
         if (p.request != null) {

File: src/java/main/org/apache/zookeeper/admin/ZooKeeperAdmin.java
Patch:
@@ -47,6 +47,8 @@
  *
  * @since 3.5.3
  */
+// See ZooKeeper.java for an explanation of why we need @SuppressWarnings("try")
+@SuppressWarnings("try")
 public class ZooKeeperAdmin extends ZooKeeper {
     private static final Logger LOG = LoggerFactory.getLogger(ZooKeeperAdmin.class);
 

File: src/java/test/org/apache/zookeeper/test/ReconfigTest.java
Patch:
@@ -678,7 +678,6 @@ ClientBase.CONNECTION_TIMEOUT, new Watcher() {
 
         Assert.assertTrue(qu.getPeer(leaderIndex).peer.getQuorumAddress()
                 .getPort() == newQuorumPort);
-        Assert.assertTrue(getLeaderId(qu) != leaderIndex); // the leader changed
 
         joiningServers.clear();
 

File: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java
Patch:
@@ -144,8 +144,8 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
             if (cnxn != null) {
                 if (LOG.isDebugEnabled()) {
                     LOG.debug("Closing " + cnxn);
-                    cnxn.close();
                 }
+                cnxn.close();
             }
         }
 

File: src/java/test/org/apache/zookeeper/server/quorum/StandaloneDisabledTest.java
Patch:
@@ -90,6 +90,9 @@ public void startSingleServerTest() throws Exception {
         LOG.info("Configuration after removing leader and follower 1:\n"
                 + new String(zkHandles[follower2].getConfig(this, new Stat())));
 
+        // Kill server 1 to avoid it interferences with FLE of the quorum {2, 3, 4}.
+        shutDownServer(follower1);
+
         // Try to remove follower2, which is the only remaining server. This should fail.
         reconfigServers.clear();
         reconfigServers.add(Integer.toString(follower2));

File: src/java/test/org/apache/zookeeper/ZKTestCase.java
Patch:
@@ -51,6 +51,9 @@ public void starting(FrameworkMethod method) {
             // accidentally attempting to start multiple admin servers on the
             // same port.
             System.setProperty("zookeeper.admin.enableServer", "false");
+            // ZOOKEEPER-2693 disables all 4lw by default.
+            // Here we enable the 4lw which ZooKeeper tests depends.
+            System.setProperty("zookeeper.4lw.commands.whitelist", "*");
             testName = method.getName();
             LOG.info("STARTING " + testName);
         }

File: src/java/main/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -590,8 +590,9 @@ void lead() throws IOException, InterruptedException {
 
                     // check leader running status
                     if (!this.isRunning()) {
-                        shutdown("Unexpected internal error");
-                        return;
+                        // set shutdown flag
+                        shutdownMessage = "Unexpected internal error";
+                        break;
                     }
 
                     if (!tickSkip && !syncedAckSet.hasAllQuorums()) {

File: src/java/main/org/apache/zookeeper/server/ContainerManager.java
Patch:
@@ -149,15 +149,15 @@ protected Collection<String> getCandidates() {
                 would be immediately be deleted.
              */
             if ((node != null) && (node.stat.getCversion() > 0) &&
-                    (node.getChildren().size() == 0)) {
+                    (node.getChildren().isEmpty())) {
                 candidates.add(containerPath);
             }
         }
         for (String ttlPath : zkDb.getDataTree().getTtls()) {
             DataNode node = zkDb.getDataTree().getNode(ttlPath);
             if (node != null) {
                 Set<String> children = node.getChildren();
-                if ((children == null) || (children.size() == 0)) {
+                if (children.isEmpty()) {
                     long elapsed = getElapsed(node);
                     long ttl = EphemeralType.getTTL(node.stat.getEphemeralOwner());
                     if ((ttl != 0) && (elapsed > ttl)) {

File: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -168,8 +168,7 @@ private ChangeRecord getRecordForPath(String path) throws KeeperException.NoNode
                     synchronized(n) {
                         children = n.getChildren();
                     }
-                    lastChange = new ChangeRecord(-1, path, n.stat,
-                        children != null ? children.size() : 0,
+                    lastChange = new ChangeRecord(-1, path, n.stat, children.size(),
                             zks.getZKDatabase().aclForNode(n));
                 }
             }

File: src/java/test/org/apache/zookeeper/ServerConfigTest.java
Patch:
@@ -24,6 +24,8 @@
 
 import static org.junit.Assert.assertEquals;
 
+import java.io.File;
+
 public class ServerConfigTest {
 
     private ServerConfig serverConfig;
@@ -45,7 +47,7 @@ public void testValidArguments() {
         serverConfig.parse(args);
 
         assertEquals(2181, serverConfig.getClientPortAddress().getPort());
-        assertEquals("/data/dir", serverConfig.getDataDir());
+        assertEquals(new File("/data/dir"), serverConfig.getDataDir());
         assertEquals(60000, serverConfig.getTickTime());
         assertEquals(10000, serverConfig.getMaxClientCnxns());
     }

File: src/java/main/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -74,8 +74,8 @@
  */
 public class ZooKeeperMain {
     private static final Logger LOG = LoggerFactory.getLogger(ZooKeeperMain.class);
-    protected static final Map<String,String> commandMap = new HashMap<String,String>( );
-    protected static final Map<String,CliCommand> commandMapCli = 
+    static final Map<String,String> commandMap = new HashMap<String,String>( );
+    static final Map<String,CliCommand> commandMapCli =
             new HashMap<String,CliCommand>( );
 
     protected MyCommandOptions cl = new MyCommandOptions();

File: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -478,7 +478,7 @@ private boolean checkFourLetterWord(final SelectionKey k, final int len)
     {
         // We take advantage of the limited size of the length to look
         // for cmds. They are all 4-bytes which fits inside of an int
-        String cmd = FourLetterCommands.cmd2String.get(len);
+        String cmd = FourLetterCommands.getCmdMapView().get(len);
         if (cmd == null) {
             return false;
         }

File: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java
Patch:
@@ -267,7 +267,7 @@ private boolean checkFourLetterWord(final Channel channel,
     {
         // We take advantage of the limited size of the length to look
         // for cmds. They are all 4-bytes which fits inside of an int
-        String cmd = FourLetterCommands.cmd2String.get(len);
+        String cmd = FourLetterCommands.getCmdMapView().get(len);
         if (cmd == null) {
             return false;
         }

File: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -112,7 +112,7 @@ public NIOServerCnxn(ZooKeeperServer zk, SocketChannel sock,
         sock.socket().setSoLinger(false, -1);
         InetAddress addr = ((InetSocketAddress) sock.socket()
                 .getRemoteSocketAddress()).getAddress();
-        authInfo.add(new Id("ip", addr.getHostAddress()));
+        addAuthInfo(new Id("ip", addr.getHostAddress()));
         this.sessionTimeout = factory.sessionlessCnxnTimeout;
     }
 

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -63,6 +63,7 @@
 import org.apache.zookeeper.server.SessionTracker.SessionExpirer;
 import org.apache.zookeeper.server.auth.AuthenticationProvider;
 import org.apache.zookeeper.server.auth.ProviderRegistry;
+import org.apache.zookeeper.server.auth.ServerAuthenticationProvider;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer;
 import org.apache.zookeeper.txn.CreateSessionTxn;
@@ -1034,11 +1035,11 @@ public void processPacket(ServerCnxn cnxn, ByteBuffer incomingBuffer) throws IOE
             AuthPacket authPacket = new AuthPacket();
             ByteBufferInputStream.byteBuffer2Record(incomingBuffer, authPacket);
             String scheme = authPacket.getScheme();
-            AuthenticationProvider ap = ProviderRegistry.getProvider(scheme);
+            ServerAuthenticationProvider ap = ProviderRegistry.getServerProvider(scheme);
             Code authReturn = KeeperException.Code.AUTHFAILED;
             if(ap != null) {
                 try {
-                    authReturn = ap.handleAuthentication(cnxn, authPacket.getAuth());
+                    authReturn = ap.handleAuthentication(new ServerAuthenticationProvider.ServerObjs(this, cnxn), authPacket.getAuth());
                 } catch(RuntimeException e) {
                     LOG.warn("Caught runtime exception from AuthenticationProvider: " + scheme + " due to " + e);
                     authReturn = KeeperException.Code.AUTHFAILED;

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -1523,14 +1523,14 @@ public void sendPacket(Record request, Record response, AsyncCallback cb, int op
         sendThread.sendPacket(p);
     }
 
-    Packet queuePacket(RequestHeader h, ReplyHeader r, Record request,
+    public Packet queuePacket(RequestHeader h, ReplyHeader r, Record request,
             Record response, AsyncCallback cb, String clientPath,
             String serverPath, Object ctx, WatchRegistration watchRegistration) {
         return queuePacket(h, r, request, response, cb, clientPath, serverPath,
                 ctx, watchRegistration, null);
     }
 
-    Packet queuePacket(RequestHeader h, ReplyHeader r, Record request,
+    public Packet queuePacket(RequestHeader h, ReplyHeader r, Record request,
             Record response, AsyncCallback cb, String clientPath,
             String serverPath, Object ctx, WatchRegistration watchRegistration,
             WatchDeregistration watchDeregistration) {

File: src/java/main/org/apache/zookeeper/cli/CliCommand.java
Patch:
@@ -25,7 +25,6 @@
  * base class for all CLI commands
  */
 abstract public class CliCommand {
-
     protected ZooKeeper zk;
     protected PrintStream out;
     protected PrintStream err;
@@ -63,7 +62,7 @@ public void setErr(PrintStream err) {
 
     /**
      * set the zookeper instance
-     * @param zk the zookeper instance
+     * @param zk the ZooKeeper instance.
      */
     public void setZk(ZooKeeper zk) {
         this.zk = zk;

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -169,7 +169,8 @@ public ZooKeeperServer(FileTxnSnapLog txnLogFactory, int tickTime,
      * @param tickTime the ticktime for the server
      * @throws IOException
      */
-    public ZooKeeperServer(FileTxnSnapLog txnLogFactory, int tickTime) throws IOException {
+    public ZooKeeperServer(FileTxnSnapLog txnLogFactory, int tickTime)
+            throws IOException {
         this(txnLogFactory, tickTime, -1, -1, new ZKDatabase(txnLogFactory));
     }
 

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -110,7 +110,8 @@ protected void initializeAndRun(String[] args)
      * @throws IOException
      * @throws AdminServerException
      */
-    public void runFromConfig(ServerConfig config) throws IOException, AdminServerException {
+    public void runFromConfig(ServerConfig config)
+            throws IOException, AdminServerException {
         LOG.info("Starting server");
         FileTxnSnapLog txnLog = null;
         try {

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -126,7 +126,9 @@ protected void initializeAndRun(String[] args)
         }
     }
 
-    public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException {
+    public void runFromConfig(QuorumPeerConfig config)
+            throws IOException, AdminServerException
+    {
       try {
           ManagedUtil.registerLog4jMBeans();
       } catch (JMException e) {

File: src/java/systest/org/apache/zookeeper/test/system/BaseSysTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.net.UnknownHostException;
 import java.util.HashMap;
 
-
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.ZooKeeper;

File: src/java/test/org/apache/zookeeper/TestableZooKeeper.java
Patch:
@@ -25,10 +25,11 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.jute.Record;
+import org.apache.zookeeper.admin.ZooKeeperAdmin;
 import org.apache.zookeeper.proto.ReplyHeader;
 import org.apache.zookeeper.proto.RequestHeader;
 
-public class TestableZooKeeper extends ZooKeeper {
+public class TestableZooKeeper extends ZooKeeperAdmin {
 
     public TestableZooKeeper(String host, int sessionTimeout,
             Watcher watcher) throws IOException {

File: src/java/test/org/apache/zookeeper/server/quorum/LearnerTest.java
Patch:
@@ -49,7 +49,8 @@ static class SimpleLearnerZooKeeperServer extends LearnerZooKeeperServer {
 
         Learner learner;
 
-        public SimpleLearnerZooKeeperServer(FileTxnSnapLog ftsl, QuorumPeer self) throws IOException {
+        public SimpleLearnerZooKeeperServer(FileTxnSnapLog ftsl, QuorumPeer self)
+                throws IOException {
             super(ftsl, 2000, 2000, 2000, new ZKDatabase(ftsl), self);
         }
 

File: src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java
Patch:
@@ -1216,13 +1216,13 @@ public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)
     }
     
     private Leader createLeader(File tmpDir, QuorumPeer peer)
-    throws IOException, NoSuchFieldException, IllegalAccessException{
+    throws IOException, NoSuchFieldException, IllegalAccessException {
         LeaderZooKeeperServer zk = prepareLeader(tmpDir, peer);
         return new Leader(peer, zk);
     }
     
     private Leader createMockLeader(File tmpDir, QuorumPeer peer)
-    throws IOException, NoSuchFieldException, IllegalAccessException{
+    throws IOException, NoSuchFieldException, IllegalAccessException {
         LeaderZooKeeperServer zk = prepareLeader(tmpDir, peer);
         return new MockLeader(peer, zk);
     }

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -480,6 +480,7 @@ public void write(Writer out) throws IOException {
                         || key.startsWith("group")
                         || key.startsWith("weight")
                         || key.startsWith("dynamicConfigFile")
+                        || key.startsWith("peerType")
                         || (eraseClientPortAddress
                             && (key.startsWith("clientPort")
                                 || key.startsWith("clientPortAddress")))) {

File: src/java/main/org/apache/zookeeper/cli/CliException.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.apache.zookeeper.cli;
 
+@SuppressWarnings("serial")
 public class CliException extends Exception {
 
     protected int exitCode;

File: src/java/main/org/apache/zookeeper/cli/CliParseException.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.commons.cli.ParseException;
 
+@SuppressWarnings("serial")
 public class CliParseException extends CliException {
     public CliParseException(ParseException parseException) {
         super(parseException);

File: src/java/main/org/apache/zookeeper/cli/CliWrapperException.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.zookeeper.KeeperException;
 
+@SuppressWarnings("serial")
 public class CliWrapperException extends CliException {
     public CliWrapperException(Throwable cause) {
         super(getMessage(cause), cause);

File: src/java/main/org/apache/zookeeper/cli/CommandNotFoundException.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.apache.zookeeper.cli;
 
+@SuppressWarnings("serial")
 public class CommandNotFoundException extends CliException {
 
     public CommandNotFoundException(String command) {

File: src/java/main/org/apache/zookeeper/cli/MalformedCommandException.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.apache.zookeeper.cli;
 
+@SuppressWarnings("serial")
 public class MalformedCommandException extends CliException {
     public MalformedCommandException(String message) {
         super(message);

File: src/java/main/org/apache/zookeeper/client/ZooKeeperSaslClient.java
Patch:
@@ -64,6 +64,7 @@ public class ZooKeeperSaslClient {
     public static final String LOGIN_CONTEXT_NAME_KEY = "zookeeper.sasl.clientconfig";
     public static final String ENABLE_CLIENT_SASL_KEY = "zookeeper.sasl.client";
     public static final String ENABLE_CLIENT_SASL_DEFAULT = "true";
+    private static volatile boolean initializedLogin = false; 
 
     /**
      * Returns true if the SASL client is enabled. By default, the client
@@ -217,7 +218,7 @@ public void processResult(int rc, String path, Object ctx, byte data[], Stat sta
     private SaslClient createSaslClient(final String servicePrincipal,
                                                      final String loginContext) throws LoginException {
         try {
-            if (login == null) {
+            if (!initializedLogin) {
                 synchronized (ZooKeeperSaslClient.class) {
                     if (login == null) {
                         if (LOG.isDebugEnabled()) {
@@ -227,6 +228,7 @@ private SaslClient createSaslClient(final String servicePrincipal,
                         // in order to ensure the login is initialized only once, it must be synchronized the code snippet.
                         login = new Login(loginContext, new ClientCallbackHandler(null));
                         login.startThreadIfNeeded();
+                        initializedLogin = true;
                     }
                 }
             }

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -46,7 +46,6 @@
 import org.apache.jute.BinaryInputArchive;
 import org.apache.jute.BinaryOutputArchive;
 import org.apache.jute.Record;
-import org.apache.log4j.MDC;
 import org.apache.zookeeper.AsyncCallback.ACLCallback;
 import org.apache.zookeeper.AsyncCallback.Children2Callback;
 import org.apache.zookeeper.AsyncCallback.ChildrenCallback;
@@ -88,6 +87,7 @@
 import org.apache.zookeeper.server.ZooTrace;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.slf4j.MDC;
 
 /**
  * This class manages the socket i/o for the client. ClientCnxn maintains a list

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -762,7 +762,7 @@ private void loadDataBase() {
             	writeLongToFile(ACCEPTED_EPOCH_FILENAME, acceptedEpoch);
             }
             if (acceptedEpoch < currentEpoch) {
-                throw new IOException("The current epoch, " + ZxidUtils.zxidToString(currentEpoch) + " is less than the accepted epoch, " + ZxidUtils.zxidToString(acceptedEpoch));
+                throw new IOException("The accepted epoch, " + ZxidUtils.zxidToString(acceptedEpoch) + " is less than the current epoch, " + ZxidUtils.zxidToString(currentEpoch));
             }
         } catch(IOException ie) {
             LOG.error("Unable to load database on disk", ie);

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -304,7 +304,7 @@ public void parseProperties(Properties zkProp)
 
         if (clientPort == 0) {
             LOG.info("clientPort is not set");
-            if (this.clientPortAddress != null) {
+            if (clientPortAddress != null) {
                 throw new IllegalArgumentException("clientPortAddress is set but clientPort is not set");
             }
         } else if (clientPortAddress != null) {
@@ -318,8 +318,8 @@ public void parseProperties(Properties zkProp)
 
         if (secureClientPort == 0) {
             LOG.info("secureClientPort is not set");
-            if (this.secureClientPortAddress != null) {
-                throw new IllegalArgumentException("clientPortAddress is set but clientPort is not set");
+            if (secureClientPortAddress != null) {
+                throw new IllegalArgumentException("secureClientPortAddress is set but secureClientPort is not set");
             }
         } else if (secureClientPortAddress != null) {
             this.secureClientPortAddress = new InetSocketAddress(

File: src/java/main/org/apache/zookeeper/server/quorum/LocalPeerBean.java
Patch:
@@ -66,7 +66,7 @@ public int getTick() {
     }
     
     public String getState() {
-        return peer.getState().toString();
+        return peer.getServerState();
     }
     
     public String getQuorumAddress() {

File: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -255,9 +255,8 @@ private void sendPackets() throws InterruptedException {
     }
 
     static public String packetToString(QuorumPacket p) {
-        String type = null;
+        String type;
         String mess = null;
-        Record txn = null;
 
         switch (p.getType()) {
         case Leader.ACK:
@@ -279,7 +278,7 @@ static public String packetToString(QuorumPacket p) {
             type = "PROPOSAL";
             TxnHeader hdr = new TxnHeader();
             try {
-                txn = SerializeUtils.deserializeTxn(p.getData(), hdr);
+                SerializeUtils.deserializeTxn(p.getData(), hdr);
                 // mess = "transaction: " + txn.toString();
             } catch (IOException e) {
                 LOG.warn("Unexpected exception",e);

File: src/java/main/org/apache/zookeeper/server/quorum/Observer.java
Patch:
@@ -154,6 +154,9 @@ protected void processPacket(QuorumPacket qp) throws Exception{
                throw new Exception("changes proposed in reconfig");
            }            
             break;
+        default:
+            LOG.warn("Unknown packet type: {}", LearnerHandler.packetToString(qp));
+            break;
         }
     }
 

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -165,7 +165,7 @@ protected void processPacket(QuorumPacket qp) throws Exception{
             fzk.sync();
             break;
         default:
-            LOG.warn("unknown type " + qp.getType());
+            LOG.warn("Unknown packet type: {}", LearnerHandler.packetToString(qp));
             break;
         }
     }

File: src/java/main/org/apache/zookeeper/server/quorum/Learner.java
Patch:
@@ -389,8 +389,8 @@ else if (qp.getType() == Leader.SNAP) {
 
             }
             else {
-                LOG.error("Got unexpected packet from leader "
-                        + qp.getType() + " exiting ... " );
+                LOG.error("Got unexpected packet from leader: {}, exiting ... ",
+                          LearnerHandler.packetToString(qp));
                 System.exit(13);
 
             }

File: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -481,7 +481,8 @@ public void run() {
             qp = new QuorumPacket();
             ia.readRecord(qp, "packet");
             if(qp.getType() != Leader.ACK){
-                LOG.error("Next packet was supposed to be an ACK");
+                LOG.error("Next packet was supposed to be an ACK,"
+                    + " but received packet: {}", packetToString(qp));
                 return;
             }
 

File: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -255,8 +255,6 @@ private void sendPackets() throws InterruptedException {
     }
 
     static public String packetToString(QuorumPacket p) {
-        if (true)
-            return null;
         String type = null;
         String mess = null;
         Record txn = null;
@@ -573,6 +571,8 @@ public void run() {
                     leader.zk.submitLearnerRequest(si);
                     break;
                 default:
+                    LOG.warn("unexpected quorum packet, type: {}", packetToString(qp));
+                    break;
                 }
             }
         } catch (IOException e) {

File: src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -133,7 +133,9 @@ protected boolean needCommit(Request request) {
         switch (request.type) {
             case OpCode.create:
             case OpCode.create2:
+            case OpCode.createContainer:
             case OpCode.delete:
+            case OpCode.deleteContainer:
             case OpCode.setData:
             case OpCode.reconfig:
             case OpCode.multi:

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
Patch:
@@ -84,7 +84,9 @@ public void run() {
                     break;
                 case OpCode.create:
                 case OpCode.create2:
+                case OpCode.createContainer:
                 case OpCode.delete:
+                case OpCode.deleteContainer:
                 case OpCode.setData:
                 case OpCode.reconfig:
                 case OpCode.setACL:

File: src/java/main/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java
Patch:
@@ -93,7 +93,9 @@ public void run() {
                     break;
                 case OpCode.create:
                 case OpCode.create2:
+                case OpCode.createContainer:
                 case OpCode.delete:
+                case OpCode.deleteContainer:
                 case OpCode.setData:
                 case OpCode.reconfig:
                 case OpCode.setACL:

File: src/java/main/org/apache/zookeeper/server/quorum/ReadOnlyRequestProcessor.java
Patch:
@@ -82,7 +82,9 @@ public void run() {
                 case OpCode.sync:
                 case OpCode.create:
                 case OpCode.create2:
+                case OpCode.createContainer:
                 case OpCode.delete:
+                case OpCode.deleteContainer:
                 case OpCode.setData:
                 case OpCode.reconfig:
                 case OpCode.setACL:

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -1391,7 +1391,7 @@ public synchronized QuorumVerifier setQuorumVerifier(QuorumVerifier qv, boolean
                     LOG.error("Error closing file: ", e.getMessage());
                 }
             } else {
-                LOG.error("writeToDisk == true but configFilename == null");
+                LOG.info("writeToDisk == true but configFilename == null");
             }
         }
 

File: src/java/systest/org/apache/zookeeper/test/system/QuorumPeerInstance.java
Patch:
@@ -166,8 +166,8 @@ public void configure(String params) {
             peers = new HashMap<Long,QuorumServer>();
             for(int i = 0; i < parts.length; i++) {
                 // parts[i] == "host:leaderPort:leaderElectionPort;clientPort"
-                String subparts[] = (parts[i].split(";"))[0].split(":");
-		String clientPort = (parts[i].split(";"))[1];
+                String subparts[] = ((parts[i].split(";"))[0]).split(":");
+                String clientPort = (parts[i].split(";"))[1];
                 peers.put(Long.valueOf(i),
                           new QuorumServer(
                                 i,

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -2493,6 +2493,9 @@ private Record getRemoveWatchesRequest(int opCode, WatcherType watcherType,
             rmReq.setType(watcherType.getIntValue());
             request = rmReq;
             break;
+        default:
+            LOG.warn("unknown type " + opCode);
+            break;
         }
         return request;
     }

File: src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -676,8 +676,6 @@ public boolean next() throws IOException {
                 crc.update(bytes, 0, bytes.length);
                 if (crcValue != crc.getValue())
                     throw new IOException(CRC_ERROR);
-                if (bytes == null || bytes.length == 0)
-                    return false;
                 hdr = new TxnHeader();
                 record = SerializeUtils.deserializeTxn(bytes, hdr);
             } catch (EOFException e) {

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -163,6 +163,9 @@ protected void processPacket(QuorumPacket qp) throws Exception{
         case Leader.SYNC:
             fzk.sync();
             break;
+        default:
+            LOG.warn("unknown type " + qp.getType());
+            break;
         }
     }
 

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -144,7 +144,7 @@ public QuorumCnxManager(QuorumPeer self) {
         
         String cnxToValue = System.getProperty("zookeeper.cnxTimeout");
         if(cnxToValue != null){
-            this.cnxTO = new Integer(cnxToValue); 
+            this.cnxTO = Integer.parseInt(cnxToValue);
         }
         
         this.self = self;

File: src/java/main/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -414,7 +414,7 @@ void lead() throws IOException, InterruptedException {
         zk.registerJMX(new LeaderBean(this, zk), self.jmxLocalPeerBean);
 
         try {
-            self.tick = 0;
+            self.tick.set(0);
             zk.loadData();
 
             leaderStateSummary = new StateSummary(self.getCurrentEpoch(), zk.getLastProcessedZxid());
@@ -558,7 +558,7 @@ void lead() throws IOException, InterruptedException {
                     }
 
                     if (!tickSkip) {
-                        self.tick++;
+                        self.tick.incrementAndGet();
                     }
 
                     // We use an instance of SyncedLearnerTracker to

File: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -322,7 +322,7 @@ static public String packetToString(QuorumPacket p) {
     @Override
     public void run() {
         try {
-            tickOfNextAckDeadline = leader.self.tick
+            tickOfNextAckDeadline = leader.self.tick.get()
                     + leader.self.initLimit + leader.self.syncLimit;
 
             ia = BinaryInputArchive.getArchive(new BufferedInputStream(sock
@@ -499,7 +499,7 @@ public void run() {
                 if (LOG.isTraceEnabled()) {
                     ZooTrace.logQuorumPacket(LOG, traceMask, 'i', qp);
                 }
-                tickOfNextAckDeadline = leader.self.tick + leader.self.syncLimit;
+                tickOfNextAckDeadline = leader.self.tick.get() + leader.self.syncLimit;
 
 
                 ByteBuffer bb;
@@ -931,7 +931,7 @@ void queuePacket(QuorumPacket p) {
 
     public boolean synced() {
         return isAlive()
-        && leader.self.tick <= tickOfNextAckDeadline;
+        && leader.self.tick.get() <= tickOfNextAckDeadline;
     }
     
     /**

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.Map.Entry;
 import java.util.Properties;
 import java.util.Set;
+import java.util.concurrent.atomic.AtomicInteger;
 
 
 import org.apache.zookeeper.KeeperException.NoNodeException;
@@ -434,7 +435,7 @@ public synchronized void setCurrentVote(Vote v){
     /**
      * The current tick
      */
-    protected volatile int tick;
+    protected AtomicInteger tick = new AtomicInteger();
 
     /**
      * Whether or not to listen on all IPs for the two quorum ports
@@ -1257,7 +1258,7 @@ public void setInitLimit(int initLimit) {
      * Get the current tick
      */
     public int getTick() {
-        return tick;
+        return tick.get();
     }
 
     public QuorumVerifier configFromString(String s) throws IOException, ConfigException{

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -1184,7 +1184,7 @@ public void enableLocalSessionsUpgrading(boolean flag) {
 
     /** minimum session timeout in milliseconds */
     public int getMinSessionTimeout() {
-        return minSessionTimeout == -1 ? tickTime * 2 : minSessionTimeout;
+        return minSessionTimeout;
     }
 
     /** minimum session timeout in milliseconds */
@@ -1195,7 +1195,7 @@ public void setMinSessionTimeout(int min) {
 
     /** maximum session timeout in milliseconds */
     public int getMaxSessionTimeout() {
-        return maxSessionTimeout == -1 ? tickTime * 20 : maxSessionTimeout;
+        return maxSessionTimeout;
     }
 
     /** maximum session timeout in milliseconds */

File: src/java/test/org/apache/zookeeper/test/ClientBase.java
Patch:
@@ -188,14 +188,13 @@ protected TestableZooKeeper createClient(CountdownWatcher watcher,
             }
             if (allClients != null) {
                 allClients.add(zk);
+                JMXEnv.ensureAll("0x" + Long.toHexString(zk.getSessionId()));
             } else {
                 // test done - close the zk, not needed
                 zk.close();
             }
         }
 
-        JMXEnv.ensureAll("0x" + Long.toHexString(zk.getSessionId()));
-
         return zk;
     }
 

File: src/java/test/org/apache/zookeeper/test/QuorumUtil.java
Patch:
@@ -179,6 +179,8 @@ public void startAll() throws IOException {
             JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));
         } catch (IOException e) {
             LOG.warn("IOException during JMXEnv operation", e);
+        } catch (InterruptedException e) {
+            LOG.warn("InterruptedException during JMXEnv operation", e);
         }
     }
 

File: src/java/test/org/apache/zookeeper/ClientReconnectTest.java
Patch:
@@ -60,7 +60,7 @@ SocketChannel createSock() {
     public void testClientReconnect() throws IOException, InterruptedException {
         HostProvider hostProvider = mock(HostProvider.class);
         when(hostProvider.size()).thenReturn(1);
-        InetSocketAddress inaddr = new InetSocketAddress(1111);
+        InetSocketAddress inaddr = new InetSocketAddress("127.0.0.1", 1111);
         when(hostProvider.next(anyLong())).thenReturn(inaddr);
         ZooKeeper zk = mock(ZooKeeper.class);
         sc =  SocketChannel.open();
@@ -75,4 +75,4 @@ public void testClientReconnect() throws IOException, InterruptedException {
         Assert.assertTrue(countDownLatch.getCount() == 0);
         clientCnxn.close();
     }
-}
\ No newline at end of file
+}

File: src/java/test/org/apache/zookeeper/test/JMXEnv.java
Patch:
@@ -49,7 +49,7 @@ public class JMXEnv {
     public static void setUp() throws IOException {
         MBeanServer mbs = MBeanRegistry.getInstance().getPlatformMBeanServer();
         
-        JMXServiceURL url = new JMXServiceURL("service:jmx:rmi://");
+        JMXServiceURL url = new JMXServiceURL("service:jmx:rmi://127.0.0.1");
         cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs);
         cs.start();
 

File: src/java/test/org/apache/zookeeper/test/NIOConnectionFactoryFdLeakTest.java
Patch:
@@ -51,8 +51,9 @@ public void testFileDescriptorLeak() throws Exception {
 
         for (int i = 0; i < 50; ++i) {
             NIOServerCnxnFactory factory = new NIOServerCnxnFactory();
-            factory.configure(new InetSocketAddress(PortAssignment.unique()),
-                    10);
+            factory.configure(
+                new InetSocketAddress(
+                    "127.0.0.1", PortAssignment.unique()), 10);
             factory.start();
             Thread.sleep(100);
             factory.shutdown();

File: src/contrib/zooinspector/src/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java
Patch:
@@ -732,7 +732,7 @@ public List<String> loadNodeViewersFile(File selectedFile)
                 try {
                     while (buff.ready()) {
                         String line = buff.readLine();
-                        if (line != null && line.length() > 0) {
+                        if (line != null && line.length() > 0 && !line.startsWith("#")) {
                             result.add(line);
                         }
                     }

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -225,7 +225,7 @@ public void parseProperties(Properties zkProp)
                 snapRetainCount = Integer.parseInt(value);
             } else if (key.equals("autopurge.purgeInterval")) {
                 purgeInterval = Integer.parseInt(value);
-            } else if ((key.startsWith("server.") || key.startsWith("group") || key.startsWith("weight")) && zkProp.entrySet().contains("dynamicConfigFile")){                
+            } else if ((key.startsWith("server.") || key.startsWith("group") || key.startsWith("weight")) && zkProp.containsKey("dynamicConfigFile")){                
                throw new ConfigException("parameter: " + key + " must be in a separate dynamic config file");
             } else {
                 System.setProperty("zookeeper." + key, value);

File: src/java/main/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -849,10 +849,10 @@ record = new ErrorTxn(ec);
                     break;
             }
         } catch (KeeperException e) {
-             LOG.warn("Failed: " + debug, e);
-             rc.err = e.code().intValue();
+            LOG.debug("Failed: " + debug, e);
+            rc.err = e.code().intValue();
         } catch (IOException e) {
-            LOG.warn("Failed:" + debug, e);
+            LOG.debug("Failed:" + debug, e);
         }
         /*
          * A snapshot might be in progress while we are modifying the data

File: src/java/test/org/apache/zookeeper/ZooKeeperTest.java
Patch:
@@ -210,8 +210,8 @@ public void testCreateNodeWithoutData() throws Exception {
         try {
             Assert.assertTrue("Created node with wrong option", zkMain
                     .processZKCmd(zkMain.cl));
-            Assert
-                    .fail("Created the node with wrong option should throw Exception.");
+            Assert.fail("Created the node with wrong option should "
+                    + "throw Exception.");
         } catch (IllegalArgumentException e) {
             Assert.assertEquals("Path must start with / character", e
                     .getMessage());

File: src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -67,7 +67,7 @@ public CommitProcessor(RequestProcessor nextProcessor, String id, boolean matchS
     public void run() {
         ArrayList<Request> toProcess = new ArrayList<Request>();
         try {
-            Request nextPending = null;            
+            Request nextPending = null;
             while (!finished) {
                 for (Request request : toProcess) {
                     nextProcessor.processRequest(request);
@@ -118,6 +118,7 @@ public void run() {
                         case OpCode.delete:
                         case OpCode.setData:
                         case OpCode.multi:
+                        case OpCode.check:
                         case OpCode.setACL:
                         case OpCode.createSession:
                         case OpCode.closeSession:
@@ -163,7 +164,7 @@ synchronized public void processRequest(Request request) {
         if (LOG.isDebugEnabled()) {
             LOG.debug("Processing request:: " + request);
         }
-        
+
         if (!finished) {
             queuedRequests.add(request);
             notifyAll();

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
Patch:
@@ -67,7 +67,7 @@ public void run() {
                 // the request to the leader so that we are ready to receive
                 // the response
                 nextProcessor.processRequest(request);
-                
+
                 // We now ship the request to the leader. As with all
                 // other quorum operations, sync also follows this code
                 // path, but different from others, we need to keep track
@@ -85,6 +85,7 @@ public void run() {
                 case OpCode.createSession:
                 case OpCode.closeSession:
                 case OpCode.multi:
+                case OpCode.check:
                     zks.getFollower().request(request);
                     break;
                 }

File: src/java/main/org/apache/zookeeper/JLineZNodeCompletor.java
Patch:
@@ -29,7 +29,7 @@ public JLineZNodeCompletor(ZooKeeper zk) {
         this.zk = zk;
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public int complete(String buffer, int cursor, List candidates) {
         // Guarantee that the final token is the one we're expanding
         buffer = buffer.substring(0,cursor);

File: src/java/main/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -294,16 +294,15 @@ public ZooKeeperMain(ZooKeeper zk) {
       this.zk = zk;
     }
 
-    @SuppressWarnings("unchecked")
     void run() throws KeeperException, IOException, InterruptedException {
         if (cl.getCommand() == null) {
             System.out.println("Welcome to ZooKeeper!");
 
             boolean jlinemissing = false;
             // only use jline if it's in the classpath
             try {
-                Class consoleC = Class.forName("jline.ConsoleReader");
-                Class completorC =
+                Class<?> consoleC = Class.forName("jline.ConsoleReader");
+                Class<?> completorC =
                     Class.forName("org.apache.zookeeper.JLineZNodeCompletor");
 
                 System.out.println("JLine support is enabled");

File: src/java/main/org/apache/zookeeper/server/ByteBufferOutputStream.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
 
-import org.apache.jute.BinaryInputArchive;
 import org.apache.jute.BinaryOutputArchive;
 import org.apache.jute.Record;
 

File: src/java/main/org/apache/zookeeper/server/PurgeTxnLog.java
Patch:
@@ -28,8 +28,6 @@
 import java.util.List;
 import java.util.Set;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.server.persistence.Util;
 

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.zookeeper.server;
 
-import java.io.File;
 import java.io.IOException;
 
 import javax.management.JMException;

File: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.IOException;
 import java.net.Socket;
 import java.nio.ByteBuffer;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.locks.ReentrantReadWriteLock;

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.apache.zookeeper.server.quorum;
 
-import java.io.File;
 import java.io.IOException;
 
 import javax.management.JMException;

File: src/java/systest/org/apache/zookeeper/test/system/BaseSysTest.java
Patch:
@@ -52,7 +52,6 @@ public class BaseSysTest extends TestCase {
     @Override
     protected void setUp() throws Exception {
         if (!fakeMachines) {
-            String localHost = InetAddress.getLocalHost().getCanonicalHostName();
             zk = new ZooKeeper(zkHostPort, 15000, new Watcher() {public void process(WatchedEvent e){}});
             im = new InstanceManager(zk, prefix);
         }

File: src/java/systest/org/apache/zookeeper/test/system/SimpleClient.java
Patch:
@@ -18,8 +18,6 @@
 
 package org.apache.zookeeper.test.system;
 
-import java.io.IOException;
-
 import org.apache.zookeeper.AsyncCallback;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.WatchedEvent;

File: src/java/test/org/apache/zookeeper/TestableZooKeeper.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.IOException;
 import java.net.SocketAddress;
-import java.nio.channels.SocketChannel;
 import java.util.List;
 
 public class TestableZooKeeper extends ZooKeeper {

File: src/java/test/org/apache/zookeeper/ZKTestCase.java
Patch:
@@ -32,6 +32,7 @@
  * Basic utilities shared by all tests. Also logging of various events during
  * the test execution (start/stop/success/failure/etc...)
  */
+@SuppressWarnings("deprecation")
 @RunWith(JUnit4ZKTestRunner.class)
 public class ZKTestCase {
     private static final Logger LOG = LoggerFactory.getLogger(ZKTestCase.class);

File: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
Patch:
@@ -385,7 +385,6 @@ public void testBadPeerAddressInQuorum() throws Exception {
 
         try {
             final int CLIENT_PORT_QP1 = PortAssignment.unique();
-            final int CLIENT_PORT_QP2 = PortAssignment.unique();
 
             String quorumCfgSection =
                     "server.1=127.0.0.1:" + PortAssignment.unique()

File: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java
Patch:
@@ -30,8 +30,6 @@
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.ZKTestCase;
-import org.apache.zookeeper.server.ZooKeeperServer;
-import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
 import org.apache.zookeeper.test.ClientBase;
 import org.apache.zookeeper.test.QuorumBase;
 

File: src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java
Patch:
@@ -26,15 +26,13 @@
 import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
-import java.net.SocketAddress;
 import java.nio.ByteBuffer;
 import java.util.HashMap;
 
 import org.apache.jute.BinaryInputArchive;
 import org.apache.jute.BinaryOutputArchive;
 import org.apache.jute.InputArchive;
 import org.apache.jute.OutputArchive;
-import org.apache.zookeeper.ZKUtil;
 import org.apache.zookeeper.server.ByteBufferOutputStream;
 import org.apache.zookeeper.server.DataTree;
 import org.apache.zookeeper.server.ServerCnxn;
@@ -47,7 +45,6 @@
 import org.apache.zookeeper.server.quorum.LearnerInfo;
 import org.apache.zookeeper.server.quorum.QuorumPacket;
 import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;
-import org.apache.zookeeper.server.quorum.Zab1_0Test.LeaderConversation;
 import org.apache.zookeeper.server.quorum.flexible.QuorumMaj;
 import org.apache.zookeeper.server.util.ZxidUtils;
 import org.junit.Assert;

File: src/java/test/org/apache/zookeeper/test/ClientTest.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.List;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
-import java.util.logging.Level;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.zookeeper.CreateMode;

File: src/java/test/org/apache/zookeeper/test/CreateModeTest.java
Patch:
@@ -65,14 +65,14 @@ public void testFlagConversion() throws KeeperException {
     @Test
     public void testInvalidFlagConversion() throws KeeperException {
         try {
-            CreateMode cm = CreateMode.fromFlag(99);
+            CreateMode.fromFlag(99);
             Assert.fail("Shouldn't be able to convert 99 to a CreateMode.");
         } catch(KeeperException ke) {
             Assert.assertEquals(Code.BADARGUMENTS, ke.code());
         }
 
         try {
-            CreateMode cm = CreateMode.fromFlag(-1);
+            CreateMode.fromFlag(-1);
             Assert.fail("Shouldn't be able to convert -1 to a CreateMode.");
         } catch(KeeperException ke) {
             Assert.assertEquals(Code.BADARGUMENTS, ke.code());

File: src/java/test/org/apache/zookeeper/test/EventTypeTest.java
Patch:
@@ -40,7 +40,7 @@ public void testIntConversion() {
     @Test
     public void testInvalidIntConversion() {
         try {
-            EventType et = EventType.fromInt(324242);
+            EventType.fromInt(324242);
             Assert.fail("Was able to create an invalid EventType via an integer");
         } catch(RuntimeException re) {
             // we're good.

File: src/java/test/org/apache/zookeeper/test/FLELostMessageTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.slf4j.LoggerFactory;
 import org.apache.zookeeper.PortAssignment;
 import org.apache.zookeeper.ZKTestCase;
-import org.apache.zookeeper.server.quorum.FastLeaderElection;
 import org.apache.zookeeper.server.quorum.QuorumCnxManager;
 import org.apache.zookeeper.server.quorum.QuorumPeer;
 import org.apache.zookeeper.server.quorum.Vote;
@@ -77,7 +76,6 @@ static class LEThread extends Thread {
         }
 
         public void run(){
-            boolean flag = true;
             try{
                 Vote v = null;
                 peer.setPeerState(ServerState.LOOKING);

File: src/java/test/org/apache/zookeeper/test/FLETest.java
Patch:
@@ -259,7 +259,6 @@ public void testLE() throws Exception {
 
         FastLeaderElection le[] = new FastLeaderElection[count];
         leaderDies = true;
-        boolean allowOneBadLeader = leaderDies;
 
         LOG.info("TestLE: " + getTestName()+ ", " + count);
         for(int i = 0; i < count; i++) {

File: src/java/test/org/apache/zookeeper/test/FLEZeroWeightTest.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Properties;
-import java.util.Random;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.zookeeper.PortAssignment;

File: src/java/test/org/apache/zookeeper/test/KeeperStateTest.java
Patch:
@@ -41,7 +41,7 @@ public void testIntConversion() {
     @Test
     public void testInvalidIntConversion() {
         try {
-            KeeperState ks = KeeperState.fromInt(324142);
+            KeeperState.fromInt(324142);
             Assert.fail("Was able to create an invalid KeeperState via an integer");
         } catch(RuntimeException re) {
             // we're good.

File: src/java/test/org/apache/zookeeper/test/LENonTerminateTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.net.InetSocketAddress;
 import java.net.SocketException;
 import java.nio.ByteBuffer;
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -49,6 +48,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class LENonTerminateTest extends ZKTestCase {
     public static class MockLeaderElection extends LeaderElection {
         public MockLeaderElection(QuorumPeer self) {

File: src/java/test/org/apache/zookeeper/test/LETest.java
Patch:
@@ -35,6 +35,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class LETest extends ZKTestCase {
     private static final Logger LOG = LoggerFactory.getLogger(LETest.class);
     volatile Vote votes[];

File: src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java
Patch:
@@ -30,13 +30,10 @@
 import org.junit.Test;
 
 import java.io.File;
-import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 import java.util.ArrayList;
 
-import org.apache.zookeeper.data.Stat;
-
 import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
 
 public class MultiTransactionTest extends ZKTestCase implements Watcher {

File: src/java/test/org/apache/zookeeper/test/QuorumTest.java
Patch:
@@ -20,15 +20,13 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.List;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 
 import org.apache.zookeeper.AsyncCallback;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.Op;
-import org.apache.zookeeper.OpResult;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.Watcher.Event.KeeperState;

File: src/java/test/org/apache/zookeeper/test/WatcherTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.TestableZooKeeper;
 import org.apache.zookeeper.WatchedEvent;
-import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.ZooKeeper;
 import org.apache.zookeeper.AsyncCallback.StatCallback;
 import org.apache.zookeeper.AsyncCallback.VoidCallback;

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -100,8 +100,7 @@ public void runFromConfig(ServerConfig config) throws IOException {
             // create a file logger url from the command line args
             ZooKeeperServer zkServer = new ZooKeeperServer();
 
-            FileTxnSnapLog ftxn = new FileTxnSnapLog(new
-                   File(config.dataLogDir), new File(config.dataDir));
+            FileTxnSnapLog ftxn = new FileTxnSnapLog(config.dataLogDir, config.dataDir);
             zkServer.setTxnLogFactory(ftxn);
             zkServer.setTickTime(config.tickTime);
             zkServer.setMinSessionTimeout(config.minSessionTimeout);

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
Patch:
@@ -133,8 +133,8 @@ public void runFromConfig(QuorumPeerConfig config) throws IOException {
           quorumPeer = new QuorumPeer();
           quorumPeer.setClientPortAddress(config.getClientPortAddress());
           quorumPeer.setTxnFactory(new FileTxnSnapLog(
-                      new File(config.getDataLogDir()),
-                      new File(config.getDataDir())));
+                      config.getDataLogDir(),
+                      config.getDataDir()));
           quorumPeer.setQuorumPeers(config.getServers());
           quorumPeer.setElectionType(config.getElectionAlg());
           quorumPeer.setMyid(config.getServerId());

File: src/java/test/org/apache/zookeeper/JUnit4ZKTestRunner.java
Patch:
@@ -37,7 +37,7 @@ public JUnit4ZKTestRunner(Class<?> klass) throws InitializationError {
         super(klass);
     }
 
-    public class LoggedInvokeMethod extends InvokeMethod {
+    public static class LoggedInvokeMethod extends InvokeMethod {
         private String name;
 
         public LoggedInvokeMethod(FrameworkMethod method, Object target) {

File: src/java/test/org/apache/zookeeper/test/ChrootTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.Test;
 
 public class ChrootTest extends ClientBase {
-    private class MyWatcher implements Watcher {
+    private static class MyWatcher implements Watcher {
         private final String path;
         private String eventPath;
         private CountDownLatch latch = new CountDownLatch(1);
@@ -87,7 +87,7 @@ public void testChrootSynchronous()
 
             MyWatcher w3 = new MyWatcher("/ch2");
             Assert.assertNotNull(zk2.exists("/ch2", w3));
-            
+
             // set watches on child
             MyWatcher w4 = new MyWatcher("/ch1");
             zk1.getChildren("/ch1",w4);
@@ -121,7 +121,7 @@ public void testChrootSynchronous()
             zk2.delete("/ch2", -1);
             Assert.assertTrue(w4.matches());
             Assert.assertTrue(w5.matches());
-            
+
             zk1.delete("/ch1", -1);
             Assert.assertNull(zk1.exists("/ch1", false));
             Assert.assertNull(zk1.exists("/ch1/ch2", false));

File: src/java/test/org/apache/zookeeper/test/ClientHammerTest.java
Patch:
@@ -214,8 +214,8 @@ public void verifyHammer(long start, HammerThread[] threads, int childCount)
         for (HammerThread h : threads) {
             final int safetyFactor = 3;
             verifyThreadTerminated(h,
-                    threads.length * childCount
-                    * HAMMERTHREAD_LATENCY * safetyFactor);
+                    (long)threads.length * (long)childCount
+                    * HAMMERTHREAD_LATENCY * (long)safetyFactor);
         }
         LOG.info(new Date() + " Total time "
                 + (System.currentTimeMillis() - start));

File: src/java/test/org/apache/zookeeper/test/FLETest.java
Patch:
@@ -317,9 +317,9 @@ public void testLE() throws Exception {
     /*
      * Class to verify of the thread has become a follower
      */
-    class VerifyState extends Thread {
+    static class VerifyState extends Thread {
         volatile private boolean success = false;
-        QuorumPeer peer;
+        private QuorumPeer peer;
         public VerifyState(QuorumPeer peer) {
             this.peer = peer;
         }

File: src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java
Patch:
@@ -36,7 +36,7 @@ public class StaticHostProviderTest extends ZKTestCase {
     public void testNextGoesRound() throws UnknownHostException {
         HostProvider hostProvider = getHostProvider(2);
         InetSocketAddress first = hostProvider.next(0);
-        assertTrue(first instanceof InetSocketAddress);
+        assertTrue(first != null);
         hostProvider.next(0);
         assertEquals(first, hostProvider.next(0));
     }

File: src/java/test/org/apache/zookeeper/test/UpgradeTest.java
Patch:
@@ -69,7 +69,7 @@ public void testUpgrade() throws Exception {
         Assert.assertTrue("waiting for server being up",
                 ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));
         ZooKeeper zk = new ZooKeeper(HOSTPORT, CONNECTION_TIMEOUT, this);
-        Stat stat = zk.exists("/", false);
+        zk.exists("/", false);
         List<String> children = zk.getChildren("/", false);
         Collections.sort(children);
         for (int i = 0; i < 10; i++) {

File: src/java/test/org/apache/zookeeper/test/WatcherTest.java
Patch:
@@ -44,7 +44,7 @@
 public class WatcherTest extends ClientBase {
     protected static final Logger LOG = LoggerFactory.getLogger(WatcherTest.class);
 
-    private final class MyStatCallback implements StatCallback {
+    private final static class MyStatCallback implements StatCallback {
         int rc;
         public void processResult(int rc, String path, Object ctx, Stat stat) {
             ((int[])ctx)[0]++;
@@ -131,7 +131,7 @@ public void processResult(int rc, String path, Object ctx) {
     }
 
     @Test
-    public void testWatcherCount() 
+    public void testWatcherCount()
     throws IOException, InterruptedException, KeeperException {
         ZooKeeper zk1 = null, zk2 = null;
         try {
@@ -213,7 +213,7 @@ public void testWatchAutoResetWithPending() throws Exception {
        Assert.assertEquals(COUNT, count[0]);
        zk.close();
     }
-    
+
     final int TIMEOUT = 5000;
 
     @Test

File: src/java/test/org/apache/zookeeper/test/ZooKeeperTestClient.java
Patch:
@@ -288,7 +288,7 @@ private void enode_test_2() throws IOException,
     System.out.println("session id of zk_1: " + zk_1.getSessionId());
     zk.close();
 
-    Stat no_stat = zk_1.exists("nosuchnode", false);
+    zk_1.exists("nosuchnode", false);
 
     event = this.getEvent(10);
     if (event == null) {

File: src/java/main/org/apache/zookeeper/ClientCnxnSocketNIO.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.zookeeper.ClientCnxn.EndOfStreamException;
 import org.apache.zookeeper.ClientCnxn.Packet;
 import org.apache.zookeeper.ZooDefs.OpCode;
-import org.apache.zookeeper.ZooKeeper.States;
 
 public class ClientCnxnSocketNIO extends ClientCnxnSocket {
     private static final Logger LOG = LoggerFactory

File: src/java/main/org/apache/zookeeper/Environment.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 
 import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * Provide insight into the runtime environment.

File: src/java/main/org/apache/zookeeper/MultiResponse.java
Patch:
@@ -57,7 +57,6 @@ public int size() {
     public void serialize(OutputArchive archive, String tag) throws IOException {
         archive.startRecord(this, tag);
 
-        int index = 0;
         for (OpResult result : results) {
             int err = result.getType() == ZooDefs.OpCode.error ? ((OpResult.ErrorResult)result).getErr() : 0;
 

File: src/java/main/org/apache/zookeeper/MultiTransactionRecord.java
Patch:
@@ -62,7 +62,6 @@ public int size() {
     @Override
     public void serialize(OutputArchive archive, String tag) throws IOException {
         archive.startRecord(this, tag);
-        int index = 0 ;
         for (Op op : ops) {
             MultiHeader h = new MultiHeader(op.getType(), false, -1);
             h.serialize(archive, tag);

File: src/java/main/org/apache/zookeeper/Shell.java
Patch:
@@ -273,6 +273,7 @@ public int getExitCode() {
   /**
    * This is an IOException with exit code added.
    */
+  @SuppressWarnings("serial")
   public static class ExitCodeException extends IOException {
     int exitCode;
     

File: src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -55,8 +55,6 @@
 import org.apache.zookeeper.txn.CreateSessionTxn;
 import org.apache.zookeeper.txn.ErrorTxn;
 
-import org.apache.zookeeper.MultiTransactionRecord;
-import org.apache.zookeeper.Op;
 import org.apache.zookeeper.OpResult;
 import org.apache.zookeeper.OpResult.CheckResult;
 import org.apache.zookeeper.OpResult.CreateResult;

File: src/java/main/org/apache/zookeeper/server/LogFormatter.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.zookeeper.server;
 
-import java.io.ByteArrayInputStream;
 import java.io.EOFException;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -28,7 +27,6 @@
 import java.util.zip.Checksum;
 
 import org.apache.jute.BinaryInputArchive;
-import org.apache.jute.InputArchive;
 import org.apache.jute.Record;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: src/java/main/org/apache/zookeeper/server/PurgeTxnLog.java
Patch:
@@ -42,8 +42,6 @@
  * and the corresponding logs.
  */
 public class PurgeTxnLog {
-    private static final Logger LOG = LoggerFactory.getLogger(PurgeTxnLog.class);
-
     static void printUsage(){
         System.out.println("PurgeTxnLog dataLogDir [snapDir] -n count");
         System.out.println("\tdataLogDir -- path to the txn log directory");

File: src/java/main/org/apache/zookeeper/server/Request.java
Patch:
@@ -35,8 +35,6 @@
  * onto the request as it is processed.
  */
 public class Request {
-    private static final Logger LOG = LoggerFactory.getLogger(Request.class);
-
     public final static Request requestOfDeath = new Request(null, 0, 0, 0,
             null, null);
 

File: src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
-import java.io.ByteArrayInputStream;
 import java.io.EOFException;
 import java.io.File;
 import java.io.FileInputStream;

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -18,11 +18,9 @@
 
 package org.apache.zookeeper.server.quorum;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 
-import org.apache.jute.BinaryInputArchive;
 import org.apache.jute.Record;
 import org.apache.zookeeper.server.util.SerializeUtils;
 import org.apache.zookeeper.server.util.ZxidUtils;

File: src/java/main/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map.Entry;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
@@ -465,8 +464,6 @@ void shutdown(String reason) {
      * @param followerAddr
      */
     synchronized public void processAck(long sid, long zxid, SocketAddress followerAddr) {
-        boolean first = true;
-        
         if (LOG.isTraceEnabled()) {
             LOG.trace("Ack zxid: 0x" + Long.toHexString(zxid));
             for (Proposal p : outstandingProposals.values()) {

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderElection.java
Patch:
@@ -24,10 +24,8 @@
 import java.net.InetSocketAddress;
 import java.net.SocketException;
 import java.nio.ByteBuffer;
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Random;
 import java.util.Map.Entry;

File: src/java/main/org/apache/zookeeper/server/quorum/Observer.java
Patch:
@@ -18,11 +18,9 @@
 
 package org.apache.zookeeper.server.quorum;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 
-import org.apache.jute.BinaryInputArchive;
 import org.apache.jute.Record;
 import org.apache.zookeeper.server.ObserverBean;
 import org.apache.zookeeper.server.Request;

File: src/java/main/org/apache/zookeeper/server/quorum/ProposalRequestProcessor.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.zookeeper.server.Request;
 import org.apache.zookeeper.server.RequestProcessor;
 import org.apache.zookeeper.server.SyncRequestProcessor;
-import org.apache.zookeeper.server.ZooKeeperServer;
 
 /**
  * This RequestProcessor simply forwards requests to an AckRequestProcessor and

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -34,8 +34,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.NoSuchElementException;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.Date;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -31,7 +31,6 @@
 import java.net.SocketException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;

File: src/java/main/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java
Patch:
@@ -18,10 +18,8 @@
 
 package org.apache.zookeeper.server.quorum.flexible;
 
-import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.FileReader;
 import java.io.IOException;
 import java.util.HashSet;
 import java.util.HashMap;

File: src/java/main/org/apache/zookeeper/server/upgrade/DataTreeV1.java
Patch:
@@ -328,7 +328,6 @@ public Stat setACL(String path, List<ACL> acl, int version) throws KeeperExcepti
         }
     }
 
-    @SuppressWarnings("unchecked")
     public List<ACL> getACL(String path, Stat stat) throws KeeperException.NoNodeException {
         DataNodeV1 n = nodes.get(path);
         if (n == null) {
@@ -385,7 +384,6 @@ public int hashCode() {
 
     public volatile long lastProcessedZxid = 0;
 
-    @SuppressWarnings("unchecked")
     public ProcessTxnResult processTxn(TxnHeader header, Record txn) {
         ProcessTxnResult rc = new ProcessTxnResult();
 

File: src/java/main/org/apache/zookeeper/server/upgrade/UpgradeSnapShotV1.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.zookeeper.server.upgrade;
 
 import java.io.BufferedInputStream;
-import java.io.ByteArrayInputStream;
 import java.io.EOFException;
 import java.io.File;
 import java.io.FileInputStream;

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -1204,7 +1204,7 @@ public void close() throws IOException {
 
     private int xid = 1;
 
-    private volatile States state;
+    private volatile States state = States.NOT_CONNECTED;
 
     synchronized private int getXid() {
         return xid++;

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -310,7 +310,7 @@ protected Map<String, Set<Watcher>> getWatches(int rc) {
 
     public enum States {
         CONNECTING, ASSOCIATING, CONNECTED, CONNECTEDREADONLY,
-        CLOSED, AUTH_FAILED;
+        CLOSED, AUTH_FAILED, NOT_CONNECTED;
 
         public boolean isAlive() {
             return this != CLOSED && this != AUTH_FAILED;

File: src/java/main/org/apache/jute/compiler/JBuffer.java
Patch:
@@ -76,7 +76,7 @@ public String genJavaEquals(String fname, String peer) {
     }
     
     public String genJavaHashCode(String fname) {
-        return "    ret = Arrays.toString("+fname+").hashCode();\n";
+        return "    ret = java.util.Arrays.toString("+fname+").hashCode();\n";
     }
     
     public String genJavaSlurpBytes(String b, String s, String l) {

File: src/java/main/org/apache/jute/compiler/JRecord.java
Patch:
@@ -349,7 +349,7 @@ public void genCppCode(FileWriter hh, FileWriter cc)
 
         cc.write("bool "+getCppFQName()+"::validate() const {\n");
         cc.write("  if (bs_.size() != bs_.count()) return false;\n");
-        for (Iterator i = mFields.iterator(); i.hasNext(); fIdx++) {
+        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
             JField jf = (JField) i.next();
             JType type = jf.getType();
             if (type instanceof JRecord) {
@@ -425,7 +425,6 @@ public void genJavaCode(File outputDirectory) throws IOException {
         jj.write("*/\n");
         jj.write("\n");
         jj.write("package "+getJavaPackage()+";\n\n");
-        jj.write("import java.util.*;\n");
         jj.write("import org.apache.jute.*;\n");
         jj.write("public class "+getName()+" implements Record {\n");
         for (Iterator<JField> i = mFields.iterator(); i.hasNext();) {

File: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -660,6 +660,7 @@ public void commandRun() {
                     }
                     for(NIOServerCnxn c : cnxnset){
                         c.dumpConnectionInfo(pw, true);
+                        pw.println();
                     }
                     pw.println();
                 }
@@ -690,6 +691,7 @@ public void commandRun() {
                 }
                 for (NIOServerCnxn c : cnxns) {
                     c.dumpConnectionInfo(pw, false);
+                    pw.println();
                 }
                 pw.println();
             }

File: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java
Patch:
@@ -472,6 +472,7 @@ public void commandRun() {
                     }
                     for(ServerCnxn c : cnxns){
                         c.dumpConnectionInfo(pw, true);
+                        pw.println();
                     }
                     pw.println();
                 }
@@ -501,6 +502,7 @@ public void commandRun() {
                 }
                 for (ServerCnxn c : cnxns) {
                     c.dumpConnectionInfo(pw, false);
+                    pw.println();
                 }
                 pw.println();
             }

File: src/java/main/org/apache/zookeeper/server/ServerCnxn.java
Patch:
@@ -442,6 +442,7 @@ public String toString() {
                 pwriter.print(getMaxLatency());
             }
         }
+        pwriter.print(")");
     }
 
 }

File: src/java/main/org/apache/zookeeper/ClientWatchManager.java
Patch:
@@ -33,7 +33,8 @@ public interface ClientWatchManager {
      * @param state event state
      * @param type event type
      * @param path event path
-     * @return
+     * @return may be empty set but must not be null
      */
-    public Set<Watcher> materialize(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path);
+    public Set<Watcher> materialize(Watcher.Event.KeeperState state,
+        Watcher.Event.EventType type, String path);
 }

File: src/java/main/org/apache/zookeeper/Op.java
Patch:
@@ -127,7 +127,6 @@ public static Op setData(String path, byte[] data, int version) {
      *                the path of the node
      * @param version
      *                the expected matching version
-     * @return
      */
     public static Op check(String path, int version) {
         return new Check(path, version);

File: src/java/test/org/apache/zookeeper/test/DataTreeTest.java
Patch:
@@ -70,10 +70,10 @@ public void process(WatchedEvent event) {
     public void testIncrementCversion() throws Exception {
         dt.createNode("/test", new byte[0], null, 0, dt.getNode("/").stat.getCversion()+1, 1, 1);
         DataNode zk = dt.getNode("/test");
-        long prevCversion = zk.stat.getCversion();
+        int prevCversion = zk.stat.getCversion();
         long prevPzxid = zk.stat.getPzxid();
-        dt.incrementCversion("/test/",  prevPzxid + 1);
-        long newCversion = zk.stat.getCversion();
+        dt.setCversionPzxid("/test/",  prevCversion + 1, prevPzxid + 1);
+        int newCversion = zk.stat.getCversion();
         long newPzxid = zk.stat.getPzxid();
         Assert.assertTrue("<cversion, pzxid> verification failed. Expected: <" +
                 (prevCversion + 1) + ", " + (prevPzxid + 1) + ">, found: <" +

File: src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -569,10 +569,8 @@ public boolean next() throws IOException {
                     throw new IOException(CRC_ERROR);
                 if (bytes == null || bytes.length == 0)
                     return false;
-                InputArchive iab = BinaryInputArchive
-                                    .getArchive(new ByteArrayInputStream(bytes));
                 hdr = new TxnHeader();
-                record = SerializeUtils.deserializeTxn(iab, hdr);
+                record = SerializeUtils.deserializeTxn(bytes, hdr);
             } catch (EOFException e) {
                 LOG.debug("EOF excepton " + e);
                 inputStream.close();

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -113,9 +113,7 @@ protected void processPacket(QuorumPacket qp) throws IOException{
             break;
         case Leader.PROPOSAL:            
             TxnHeader hdr = new TxnHeader();
-            BinaryInputArchive ia = BinaryInputArchive
-            .getArchive(new ByteArrayInputStream(qp.getData()));
-            Record txn = SerializeUtils.deserializeTxn(ia, hdr);
+            Record txn = SerializeUtils.deserializeTxn(qp.getData(), hdr);
             if (hdr.getZxid() != lastQueued + 1) {
                 LOG.warn("Got zxid 0x"
                         + Long.toHexString(hdr.getZxid())

File: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -190,11 +190,9 @@ static public String packetToString(QuorumPacket p) {
             break;
         case Leader.PROPOSAL:
             type = "PROPOSAL";
-            BinaryInputArchive ia = BinaryInputArchive
-                    .getArchive(new ByteArrayInputStream(p.getData()));
             TxnHeader hdr = new TxnHeader();
             try {
-                txn = SerializeUtils.deserializeTxn(ia, hdr);
+                txn = SerializeUtils.deserializeTxn(p.getData(), hdr);
                 // mess = "transaction: " + txn.toString();
             } catch (IOException e) {
                 LOG.warn("Unexpected exception",e);

File: src/java/main/org/apache/zookeeper/server/quorum/Observer.java
Patch:
@@ -118,9 +118,7 @@ protected void processPacket(QuorumPacket qp) throws IOException{
             break;
         case Leader.INFORM:            
             TxnHeader hdr = new TxnHeader();
-            BinaryInputArchive ia = BinaryInputArchive
-                    .getArchive(new ByteArrayInputStream(qp.getData()));
-            Record txn = SerializeUtils.deserializeTxn(ia, hdr);
+            Record txn = SerializeUtils.deserializeTxn(qp.getData(), hdr);
             Request request = new Request (null, hdr.getClientId(), 
                                            hdr.getCxid(),
                                            hdr.getType(), null, null);

File: src/java/main/org/apache/zookeeper/server/upgrade/UpgradeSnapShotV1.java
Patch:
@@ -115,10 +115,8 @@ public long playLog(InputArchive logStream) throws IOException {
                     // empty transaction
                     throw new EOFException();
                 }
-                InputArchive ia = BinaryInputArchive
-                        .getArchive(new ByteArrayInputStream(bytes));
                 TxnHeader hdr = new TxnHeader();
-                Record txn = SerializeUtils.deserializeTxn(ia, hdr);
+                Record txn = SerializeUtils.deserializeTxn(bytes, hdr);
                 if (logStream.readByte("EOR") != 'B') {
                     LOG.warn("Last transaction was partial.");
                     throw new EOFException("Last transaction was partial.");

File: src/java/test/org/apache/zookeeper/server/DataTreeUnitTest.java
Patch:
@@ -53,7 +53,7 @@ public void process(WatchedEvent event) {
         // set a watch on the root node
         dt.getChildren("/", new Stat(), watcher);
         // add a new node, should trigger a watch
-        dt.createNode("/xyz", new byte[0], null, 0, 1, 1);
+        dt.createNode("/xyz", new byte[0], null, 0, dt.getNode("/").stat.getCversion()+1, 1, 1);
         Assert.assertFalse("Root node watch not triggered",!watcher.fired);
     }
 

File: src/java/test/org/apache/zookeeper/server/DeserializationPerfTest.java
Patch:
@@ -40,7 +40,7 @@ private static void deserializeTree(int depth, int width, int len)
         int count;
         {
             DataTree tree = new DataTree();
-            SerializationPerfTest.createNodes(tree, "/", depth, width, new byte[len]);
+            SerializationPerfTest.createNodes(tree, "/", depth, tree.getNode("/").stat.getCversion(), width, new byte[len]);
             count = tree.getNodeCount();
 
             ByteArrayOutputStream baos = new ByteArrayOutputStream();

File: src/java/test/org/apache/zookeeper/test/DataTreeTest.java
Patch:
@@ -59,7 +59,7 @@ public void process(WatchedEvent event) {
         // set a watch on the root node
         dt.getChildren("/", new Stat(), watcher);
         // add a new node, should trigger a watch
-        dt.createNode("/xyz", new byte[0], null, 0, 1, 1);
+        dt.createNode("/xyz", new byte[0], null, 0, dt.getNode("/").stat.getCversion()+1, 1, 1);
         Assert.assertFalse("Root node watch not triggered",!watcher.fired);
     }
 
@@ -68,7 +68,7 @@ public void process(WatchedEvent event) {
      */
     @Test
     public void testIncrementCversion() throws Exception {
-        dt.createNode("/test", new byte[0], null, 0, 1, 1);
+        dt.createNode("/test", new byte[0], null, 0, dt.getNode("/").stat.getCversion()+1, 1, 1);
         DataNode zk = dt.getNode("/test");
         long prevCversion = zk.stat.getCversion();
         long prevPzxid = zk.stat.getPzxid();

File: src/java/main/org/apache/zookeeper/server/Request.java
Patch:
@@ -155,7 +155,7 @@ static String op2String(int op) {
         case OpCode.exists:
             return "exists";
         case OpCode.getData:
-            return "getDate";
+            return "getData";
         case OpCode.setData:
             return "setData";
         case OpCode.sync:

File: src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java
Patch:
@@ -70,7 +70,7 @@ public void uncaughtException(Thread t, Throwable e) {
     final HashMap<InetAddress, Set<NIOServerCnxn>> ipMap =
         new HashMap<InetAddress, Set<NIOServerCnxn>>( );
 
-    int maxClientCnxns = 10;
+    int maxClientCnxns = 60;
 
 
     /**
@@ -303,4 +303,4 @@ public Iterable<ServerCnxn> getConnections() {
         return cnxns;
     }
 
-}
\ No newline at end of file
+}

File: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java
Patch:
@@ -54,7 +54,7 @@ public class NettyServerCnxnFactory extends ServerCnxnFactory {
     HashMap<InetAddress, Set<NettyServerCnxn>> ipMap =
         new HashMap<InetAddress, Set<NettyServerCnxn>>( );
     InetSocketAddress localAddress;
-    int maxClientCnxns = 10;
+    int maxClientCnxns = 60;
     
     /**
      * This is an inner class since we need to extend SimpleChannelHandler, but

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -48,7 +48,7 @@ public class QuorumPeerConfig {
     protected String dataDir;
     protected String dataLogDir;
     protected int tickTime = ZooKeeperServer.DEFAULT_TICK_TIME;
-    protected int maxClientCnxns = 10;
+    protected int maxClientCnxns = 60;
     /** defaults to -1 if not set explicitly */
     protected int minSessionTimeout = -1;
     /** defaults to -1 if not set explicitly */

File: src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -46,6 +46,7 @@ public class CommitProcessor extends Thread implements RequestProcessor {
     LinkedList<Request> committedRequests = new LinkedList<Request>();
 
     RequestProcessor nextProcessor;
+    ArrayList<Request> toProcess = new ArrayList<Request>();
 
     /**
      * This flag indicates whether we need to wait for a response to come back from the
@@ -65,8 +66,7 @@ public CommitProcessor(RequestProcessor nextProcessor, String id, boolean matchS
     @Override
     public void run() {
         try {
-            Request nextPending = null;
-            ArrayList<Request> toProcess = new ArrayList<Request>();
+            Request nextPending = null;            
             while (!finished) {
                 int len = toProcess.size();
                 for (int i = 0; i < len; i++) {

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -125,8 +125,7 @@ protected void processPacket(QuorumPacket qp) throws IOException{
             fzk.commit(qp.getZxid());
             break;
         case Leader.UPTODATE:
-            fzk.takeSnapshot();
-            self.cnxnFactory.setZooKeeperServer(fzk);
+            LOG.error("Received an UPTODATE message after Follower started");
             break;
         case Leader.REVALIDATE:
             revalidate(qp);

File: src/java/main/org/apache/zookeeper/server/quorum/Observer.java
Patch:
@@ -111,8 +111,7 @@ protected void processPacket(QuorumPacket qp) throws IOException{
             LOG.warn("Ignoring commit");            
             break;            
         case Leader.UPTODATE:
-            zk.takeSnapshot();
-            self.cnxnFactory.setZooKeeperServer(zk);
+            LOG.error("Received an UPTODATE message after Observer started");
             break;
         case Leader.REVALIDATE:
             revalidate(qp);

File: src/java/main/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -782,6 +782,9 @@ protected boolean processZKCmd(MyCommandOptions co)
             }
         } else if (cmd.equals("close")) {
                 zk.close();            
+        } else if (cmd.equals("sync") && args.length >= 2) {
+            path = args[1];
+            zk.sync(path, new AsyncCallback.VoidCallback() { public void processResult(int rc, String path, Object ctx) { System.out.println("Sync returned " + rc); } }, null );
         } else if (cmd.equals("addauth") && args.length >=2 ) {
             byte[] b = null;
             if (args.length >= 3)

File: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java
Patch:
@@ -367,7 +367,9 @@ public void run() {
                 switch (qp.getType()) {
                 case Leader.ACK:
                     if (this.learnerType == LearnerType.OBSERVER) {
-                        LOG.error("Received ACK from Observer  " + this.sid);
+                        if (LOG.isDebugEnabled()) {
+                            LOG.debug("Received ACK from Observer  " + this.sid);
+                        }
                     }
                     leader.processAck(this.sid, qp.getZxid(), sock.getLocalSocketAddress());
                     break;

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -200,7 +200,7 @@ void followLeader() throws InterruptedException {
                 readPacket(qp);
                 synchronized (zk) {
                     if (qp.getType() == Leader.DIFF) {
-                        LOG.info("Getting a diff from the leader!");
+                        LOG.info("Getting a diff from the leader 0x" + Long.toHexString(qp.getZxid()));
                         zk.loadData();
                     }
                     else if (qp.getType() == Leader.SNAP) {

File: src/java/main/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -647,8 +647,7 @@ synchronized public long startForwarding(FollowerHandler handler,
                 }
                 handler.queuePacket(p.packet);
                 // Since the proposal has been committed we need to send the
-                // commit message
-                // also
+                // commit message also
                 QuorumPacket qp = new QuorumPacket(Leader.COMMIT, p.packet
                         .getZxid(), null, null);
                 handler.queuePacket(qp);

File: src/java/test/org/apache/zookeeper/test/ClientBase.java
Patch:
@@ -261,7 +261,7 @@ static File createTmpDir(File parentDir) throws IOException {
         File tmpFile = File.createTempFile("test", ".junit", parentDir);
         // don't delete tmpFile - this ensures we don't attempt to create
         // a tmpDir with a duplicate name
-
+        tmpFile.delete();
         File tmpDir = new File(tmpFile + ".dir");
         assertFalse(tmpDir.exists()); // never true if tmpfile does it's job
         assertTrue(tmpDir.mkdirs());
@@ -395,7 +395,7 @@ public static MBeanServerConnection jmxConn() throws IOException {
         return JMXEnv.conn();
     }
 
-    private static boolean recursiveDelete(File d) {
+    public static boolean recursiveDelete(File d) {
         if (d.isDirectory()) {
             File children[] = d.listFiles();
             for (File f : children) {

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -47,8 +47,8 @@ public class QuorumPeerConfig {
 
     protected int initLimit;
     protected int syncLimit;
-    protected int electionAlg;
-    protected int electionPort;
+    protected int electionAlg = 3;
+    protected int electionPort = 2182;
     protected int maxClientCnxns = 10;
     protected final HashMap<Long,QuorumServer> servers =
         new HashMap<Long, QuorumServer>();

File: src/java/main/org/apache/zookeeper/Environment.java
Patch:
@@ -56,7 +56,7 @@ public static List<Entry> list() {
 
         try {
             put(l, "host.name",
-                InetAddress.getLocalHost().getCanonicalHostName().toString());
+                InetAddress.getLocalHost().getCanonicalHostName());
         } catch (UnknownHostException e) {
             put(l, "host.name", "<NA>");
         }

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -165,7 +165,7 @@ public Set<Watcher> materialize(Watcher.Event.KeeperState state,
                 }
 
                 // clear the watches if auto watch reset is not enabled
-                if (ClientCnxn.disableAutoWatchReset &&
+                if (ClientCnxn.getDisableAutoResetWatch() &&
                         state != Watcher.Event.KeeperState.SyncConnected)
                 {
                     synchronized(dataWatches) {

File: src/java/main/org/apache/zookeeper/server/SessionTrackerImpl.java
Patch:
@@ -44,7 +44,6 @@ public class SessionTrackerImpl extends Thread implements SessionTracker {
 
     ConcurrentHashMap<Long, Integer> sessionsWithTimeout;
     long nextSessionId = 0;
-    long serverId;
     long nextExpirationTime;
 
     int expirationInterval;
@@ -87,7 +86,6 @@ public SessionTrackerImpl(SessionExpirer expirer,
         this.expirationInterval = tickTime;
         this.sessionsWithTimeout = sessionsWithTimeout;
         nextExpirationTime = roundToInterval(System.currentTimeMillis());
-        this.serverId = sid;
         this.nextSessionId = initializeNextSession(sid);
         for (Entry<Long, Integer> e : sessionsWithTimeout.entrySet()) {
             addSession(e.getKey(), e.getValue());

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -108,14 +108,13 @@ public DataTree build() {
     protected long hzxid = 0;
     final public static Exception ok = new Exception("No prob");
     protected RequestProcessor firstProcessor;
-    LinkedBlockingQueue<Long> sessionsToDie = new LinkedBlockingQueue<Long>();
     protected volatile boolean running;
 
     /**
      * This is the secret that we use to generate passwords, for the moment it
      * is more of a sanity check.
      */
-    final private long superSecret = 0XB3415C00L;
+    static final private long superSecret = 0XB3415C00L;
 
     int requestsInProcess;
     List<ChangeRecord> outstandingChanges = new ArrayList<ChangeRecord>();

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -64,8 +64,9 @@ protected void setupRequestProcessors() {
         commitProcessor = new CommitProcessor(toBeAppliedProcessor,
                 Long.toString(getServerId()), false);
         commitProcessor.start();
-        RequestProcessor proposalProcessor = new ProposalRequestProcessor(this,
+        ProposalRequestProcessor proposalProcessor = new ProposalRequestProcessor(this,
                 commitProcessor);
+        proposalProcessor.initialize();
         firstProcessor = new PrepRequestProcessor(this, proposalProcessor);
         ((PrepRequestProcessor)firstProcessor).start();
     }

File: src/java/test/org/apache/zookeeper/server/CRCTest.java
Patch:
@@ -119,7 +119,7 @@ public void testChecksums() throws Exception {
         File tmpDir = ClientBase.createTmpDir();
         ClientBase.setupTestEnv();
         zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
-        SyncRequestProcessor.snapCount = 150;
+        SyncRequestProcessor.setSnapCount(150);
         final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
         NIOServerCnxn.Factory f = new NIOServerCnxn.Factory(PORT);
         f.startup(zks);

File: src/java/test/org/apache/zookeeper/server/InvalidSnapshotTest.java
Patch:
@@ -52,7 +52,7 @@ public void testInvalidSnapshot() throws Exception {
        File tmpDir = ClientBase.createTmpDir();
        ClientBase.setupTestEnv();
        zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
-       SyncRequestProcessor.snapCount = 100;
+       SyncRequestProcessor.setSnapCount(100);
        final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
        NIOServerCnxn.Factory f = new NIOServerCnxn.Factory(PORT);
        f.startup(zks);
@@ -73,7 +73,7 @@ public void testInvalidSnapshot() throws Exception {
        raf.close();
        // now restart the server and see if it starts
        zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
-       SyncRequestProcessor.snapCount = 100;
+       SyncRequestProcessor.setSnapCount(100);
        f = new NIOServerCnxn.Factory(PORT);
        f.startup(zks);
        assertTrue("waiting for server being up ", 

File: src/java/test/org/apache/zookeeper/test/ClientTest.java
Patch:
@@ -532,14 +532,14 @@ public void testPathValidation() throws Exception {
 
         
         //check for the code path that throws at server
-        PrepRequestProcessor.failCreate = true;
+        PrepRequestProcessor.setFailCreate(true);
         try {
             zk.create("/m", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
             assertTrue(false);
         } catch(KeeperException.BadArgumentsException be) {
             // catch this.
         }
-        PrepRequestProcessor.failCreate = false;
+        PrepRequestProcessor.setFailCreate(false);
         zk.create("/.foo", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
         zk.create("/.f.", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
         zk.create("/..f", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

File: src/java/test/org/apache/zookeeper/test/InvalidSnapshotTest.java
Patch:
@@ -58,7 +58,7 @@ protected void tearDown() throws Exception {
     public void testSnapshot() throws Exception {
         File snapDir = new File(testData, "invalidsnap");
         zks = new ZooKeeperServer(snapDir, snapDir, 3000);
-        SyncRequestProcessor.snapCount = 1000;
+        SyncRequestProcessor.setSnapCount(1000);
         final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
         NIOServerCnxn.Factory f = new NIOServerCnxn.Factory(PORT);
         f.startup(zks);

File: src/java/test/org/apache/zookeeper/test/PurgeTxnTest.java
Patch:
@@ -52,7 +52,7 @@ public void testPurge() throws Exception {
         File tmpDir = ClientBase.createTmpDir();
         ClientBase.setupTestEnv();
         zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
-        SyncRequestProcessor.snapCount = 100;
+        SyncRequestProcessor.setSnapCount(100);
         final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
         NIOServerCnxn.Factory f = new NIOServerCnxn.Factory(PORT);
         f.startup(zks);

File: src/java/test/org/apache/zookeeper/test/RecoveryTest.java
Patch:
@@ -74,8 +74,8 @@ public void testRecovery() throws Exception {
         ClientBase.setupTestEnv();
         ZooKeeperServer zs = new ZooKeeperServer(tmpDir, tmpDir, 3000);
 
-        int oldSnapCount = SyncRequestProcessor.snapCount;
-        SyncRequestProcessor.snapCount = 1000;
+        int oldSnapCount = SyncRequestProcessor.getSnapCount();
+        SyncRequestProcessor.setSnapCount(1000);
         try {
             final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
             NIOServerCnxn.Factory f = new NIOServerCnxn.Factory(PORT);
@@ -190,7 +190,7 @@ public void testRecovery() throws Exception {
                        ClientBase.waitForServerDown(HOSTPORT,
                                                     CONNECTION_TIMEOUT));
         } finally {
-            SyncRequestProcessor.snapCount = oldSnapCount;
+            SyncRequestProcessor.setSnapCount(oldSnapCount);
         }
     }
 

File: src/java/test/org/apache/zookeeper/test/UpgradeTest.java
Patch:
@@ -66,7 +66,7 @@ public void testUpgrade() throws Exception {
         UpgradeMain upgrade = new UpgradeMain(upgradeDir, upgradeDir);
         upgrade.runUpgrade();
         zks = new ZooKeeperServer(upgradeDir, upgradeDir, 3000);
-        SyncRequestProcessor.snapCount = 1000;
+        SyncRequestProcessor.setSnapCount(1000);
         final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
         NIOServerCnxn.Factory f = new NIOServerCnxn.Factory(PORT);
         f.startup(zks);

File: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -584,7 +584,7 @@ private void readConnectRequest() throws IOException, InterruptedException {
                 + " our last zxid is 0x"
                 + Long.toHexString(zk.dataTree.lastProcessedZxid);
 
-            LOG.error(msg);
+            LOG.warn(msg);
             throw new IOException(msg);
         }
         sessionTimeout = connReq.getTimeOut();

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -80,9 +80,9 @@ public class ClientCnxn {
      * Clients automatically reset watches during session reconnect, this
      * option allows the client to turn off this behavior by setting
      * the environment variable "zookeeper.disableAutoWatchReset" to "true" */
-    public static boolean disableAutoWatchReset;
+    public static final boolean disableAutoWatchReset;
    
-    public static int packetLen;
+    public static final int packetLen;
     static {
         // this var should not be public, but otw there is no easy way 
         // to test

File: src/java/main/org/apache/zookeeper/server/SyncRequestProcessor.java
Patch:
@@ -51,7 +51,7 @@ public class SyncRequestProcessor extends Thread implements RequestProcessor {
     /**
      * The number of log entries to log before starting a snapshot
      */
-    public static int snapCount = ZooKeeperServer.getSnapCount();
+    public static final int snapCount = ZooKeeperServer.getSnapCount();
 
     private Request requestOfDeath = Request.requestOfDeath;
 

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -64,8 +64,9 @@ protected void setupRequestProcessors() {
         commitProcessor = new CommitProcessor(toBeAppliedProcessor,
                 Long.toString(getServerId()), false);
         commitProcessor.start();
-        RequestProcessor proposalProcessor = new ProposalRequestProcessor(this,
+        ProposalRequestProcessor proposalProcessor = new ProposalRequestProcessor(this,
                 commitProcessor);
+        proposalProcessor.initialize();
         firstProcessor = new PrepRequestProcessor(this, proposalProcessor);
         ((PrepRequestProcessor)firstProcessor).start();
     }

File: src/java/main/org/apache/jute/BinaryInputArchive.java
Patch:
@@ -19,13 +19,12 @@
 package org.apache.jute;
 
 import java.io.DataInput;
-import java.io.IOException;
 import java.io.DataInputStream;
+import java.io.IOException;
 import java.io.InputStream;
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class BinaryInputArchive implements InputArchive {
     

File: src/java/main/org/apache/jute/Index.java
Patch:
@@ -31,7 +31,6 @@
  * }
  * </code>
  *
- * @author Milind Bhandarkar
  */
 public interface Index {
     public boolean done();

File: src/java/main/org/apache/jute/InputArchive.java
Patch:
@@ -19,12 +19,10 @@
 package org.apache.jute;
 
 import java.io.IOException;
-import java.io.ByteArrayOutputStream;
 
 /**
  * Interface that all the Deserializers have to implement.
  *
- * @author Milind Bhandarkar
  */
 public interface InputArchive {
     public byte readByte(String tag) throws IOException;

File: src/java/main/org/apache/jute/OutputArchive.java
Patch:
@@ -25,7 +25,6 @@
 /**
  * Interface that alll the serializers have to implement.
  *
- * @author Milind Bhandarkar
  */
 public interface OutputArchive {
     public void writeByte(byte b, String tag) throws IOException;

File: src/java/main/org/apache/jute/Record.java
Patch:
@@ -23,7 +23,6 @@
 /**
  * Interface that is implemented by generated classes.
  * 
- * @author Milind Bhandarkar
  */
 public interface Record {
     public void serialize(OutputArchive archive, String tag)

File: src/java/main/org/apache/jute/Utils.java
Patch:
@@ -23,7 +23,6 @@
 
 /**
  * Various utility functions for Hadoop record I/O runtime.
- * @author Milind Bhandarkar
  */
 public class Utils {
     

File: src/java/main/org/apache/jute/compiler/JBoolean.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JBoolean extends JType {
     

File: src/java/main/org/apache/jute/compiler/JBuffer.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JBuffer extends JCompType {
     
@@ -77,7 +76,7 @@ public String genJavaEquals(String fname, String peer) {
     }
     
     public String genJavaHashCode(String fname) {
-        return "    ret = "+fname+".toString().hashCode();\n";
+        return "    ret = Arrays.toString("+fname+").hashCode();\n";
     }
     
     public String genJavaSlurpBytes(String b, String s, String l) {

File: src/java/main/org/apache/jute/compiler/JByte.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JByte extends JType {
     

File: src/java/main/org/apache/jute/compiler/JCompType.java
Patch:
@@ -21,8 +21,6 @@
 /**
  * Abstract base class for all the "compound" types such as ustring,
  * buffer, vector, map, and record.
- *
- * @author Milind Bhandarkar
  */
 abstract class JCompType extends JType {
     

File: src/java/main/org/apache/jute/compiler/JDouble.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JDouble extends JType {
     

File: src/java/main/org/apache/jute/compiler/JField.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JField {
     private JType mType;

File: src/java/main/org/apache/jute/compiler/JFloat.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JFloat extends JType {
     

File: src/java/main/org/apache/jute/compiler/JInt.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JInt extends JType {
     

File: src/java/main/org/apache/jute/compiler/JLong.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JLong extends JType {
     

File: src/java/main/org/apache/jute/compiler/JString.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JString extends JCompType {
     

File: src/java/main/org/apache/jute/compiler/JType.java
Patch:
@@ -21,7 +21,6 @@
 /**
  * Abstract Base class for all types supported by Hadoop Record I/O.
  * 
- * @author Milind Bhandarkar
  */
 abstract public class JType {
     

File: src/java/main/org/apache/jute/compiler/JVector.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  *
- * @author Milind Bhandarkar
  */
 public class JVector extends JCompType {
     
@@ -47,7 +46,8 @@ public String getSignature() {
     }
     
     public String genJavaCompareTo(String fname) {
-        return "";
+        return "    throw new UnsupportedOperationException(\"comparing "
+            + fname + " is unimplemented\");\n";
     }
     
     public String genJavaReadWrapper(String fname, String tag, boolean decl) {

File: src/java/systest/org/apache/zookeeper/test/system/InstanceContainer.java
Patch:
@@ -42,8 +42,6 @@
 
 /**
  * This class starts up, 
- * @author breed
- *
  */
 public class InstanceContainer implements Watcher, AsyncCallback.ChildrenCallback {
     private final class MyWatcher implements Watcher {

File: src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -58,7 +58,6 @@ public CommitProcessor(RequestProcessor nextProcessor, String id, boolean matchS
         super("CommitProcessor:" + id);
         this.nextProcessor = nextProcessor;
         this.matchSyncs = matchSyncs;
-        start();
     }
 
     volatile boolean finished = false;
@@ -141,8 +140,8 @@ public void run() {
                     }
                 }
             }
-        } catch (Exception e) {
-            LOG.error("Unexpected exception causing exit", e);
+        } catch (InterruptedException e) {
+            LOG.warn("Interrupted exception while waiting", e);
         }
         LOG.info("CommitProcessor exited loop!");
     }

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -228,6 +228,7 @@ else if (qp.getType() == Leader.SNAP) {
                         LOG.fatal("Got unexpected packet from leader "
                                 + qp.getType() + " exiting ... " );
                         System.exit(13);
+
                     }
                     zk.dataTree.lastProcessedZxid = newLeaderZxid;
                 }

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerHandler.java
Patch:
@@ -79,7 +79,6 @@ long getSid(){
         this.sock = sock;
         this.leader = leader;
         leader.addFollowerHandler(this);
-        start();
     }
     
     @Override

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
Patch:
@@ -48,7 +48,6 @@ public FollowerRequestProcessor(FollowerZooKeeperServer zks,
         super("FollowerRequestProcessor:" + zks.getServerId());
         this.zks = zks;
         this.nextProcessor = nextProcessor;
-        start();
     }
 
     @Override

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java
Patch:
@@ -84,7 +84,9 @@ protected void setupRequestProcessors() {
         RequestProcessor finalProcessor = new FinalRequestProcessor(this);
         commitProcessor = new CommitProcessor(finalProcessor,
                 Long.toString(getServerId()), true);
+        commitProcessor.start();
         firstProcessor = new FollowerRequestProcessor(this, commitProcessor);
+        ((FollowerRequestProcessor) firstProcessor).start();
         syncProcessor = new SyncRequestProcessor(this,
                 new SendAckRequestProcessor(getFollower()));
         syncProcessor.start();

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderElection.java
Patch:
@@ -134,7 +134,7 @@ public Vote lookForLeader() throws InterruptedException {
                 s = new DatagramSocket();
                 s.setSoTimeout(200);
             } catch (SocketException e1) {
-                e1.printStackTrace();
+                LOG.error("Socket exception when creating socket for leader election", e1);
                 System.exit(4);
             }
             DatagramPacket requestPacket = new DatagramPacket(requestBytes,

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -63,6 +63,7 @@ protected void setupRequestProcessors() {
                 finalProcessor, getLeader().toBeApplied);
         commitProcessor = new CommitProcessor(toBeAppliedProcessor,
                 Long.toString(getServerId()), false);
+        commitProcessor.start();
         RequestProcessor proposalProcessor = new ProposalRequestProcessor(this,
                 commitProcessor);
         firstProcessor = new PrepRequestProcessor(this, proposalProcessor);

File: src/java/main/org/apache/zookeeper/server/quorum/ProposalRequestProcessor.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class ProposalRequestProcessor implements RequestProcessor {
     LeaderZooKeeperServer zks;
-
+    
     RequestProcessor nextProcessor;
 
     SyncRequestProcessor syncProcessor;

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -344,6 +344,7 @@ public ZooKeeper(String host, int sessionTimeout, Watcher watcher)
 
         watchManager.defaultWatcher = watcher;
         cnxn = new ClientCnxn(host, sessionTimeout, this, watchManager);
+        cnxn.start();
     }
 
     /**
@@ -388,6 +389,7 @@ public ZooKeeper(String host, int sessionTimeout, Watcher watcher,
         watchManager.defaultWatcher = watcher;
         cnxn = new ClientCnxn(host, sessionTimeout, this, watchManager,
                 sessionId, sessionPasswd);
+        cnxn.start();
     }
 
     /**

File: src/java/main/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -447,6 +447,7 @@ private static void checkIfParentQuota(ZooKeeper zk, String path)
             try {
                 children = zk.getChildren(quotaPath, false);
             } catch(KeeperException.NoNodeException ne) {
+                LOG.debug("child removed during quota check", ne);
                 return;
             }
             if (children.size() == 0) {

File: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -86,8 +86,6 @@ public PrepRequestProcessor(ZooKeeperServer zks,
         super("ProcessThread:" + zks.getClientPort());
         this.nextProcessor = nextProcessor;
         this.zks = zks;
-
-        start();
     }
 
     @Override

File: src/java/main/org/apache/zookeeper/server/SyncRequestProcessor.java
Patch:
@@ -60,7 +60,6 @@ public SyncRequestProcessor(ZooKeeperServer zks,
         super("SyncThread:" + zks.getServerId());
         this.zks = zks;
         this.nextProcessor = nextProcessor;
-        start();
     }
 
     @Override

File: src/java/main/org/apache/zookeeper/server/ZooKeeperServerMain.java
Patch:
@@ -94,9 +94,8 @@ protected void initializeAndRun(String[] args)
                    File(config.dataLogDir), new File(config.dataDir));
             zkServer.setTxnLogFactory(ftxn);
             zkServer.setTickTime(config.tickTime);
-            zkServer.startup();
             cnxnFactory = new NIOServerCnxn.Factory(config.clientPort);
-            cnxnFactory.setZooKeeperServer(zkServer);
+            cnxnFactory.startup(zkServer);
             cnxnFactory.join();
             if (zkServer.isRunning()) {
                 zkServer.shutdown();

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java
Patch:
@@ -87,6 +87,7 @@ protected void setupRequestProcessors() {
         firstProcessor = new FollowerRequestProcessor(this, commitProcessor);
         syncProcessor = new SyncRequestProcessor(this,
                 new SendAckRequestProcessor(getFollower()));
+        syncProcessor.start();
     }
 
     @Override

File: src/java/main/org/apache/zookeeper/server/quorum/ProposalRequestProcessor.java
Patch:
@@ -39,6 +39,7 @@ public ProposalRequestProcessor(LeaderZooKeeperServer zks,
         this.nextProcessor = nextProcessor;
         AckRequestProcessor ackProcessor = new AckRequestProcessor(zks.getLeader());
         syncProcessor = new SyncRequestProcessor(zks, ackProcessor);
+        syncProcessor.start();
     }
 
     public void processRequest(Request request) {

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -306,6 +306,7 @@ QuorumStats quorumStats() {
     
     @Override
     public synchronized void start() {
+        cnxnFactory.start();
         startLeaderElection();
         super.start();
     }

File: src/contrib/bookkeeper/src/java/org/apache/bookkeeper/client/ClientCBWorker.java
Patch:
@@ -113,10 +113,11 @@ public void run(){
                     case Operation.ADD:
                         AddOp aOp = (AddOp) op;
                     
+                        aOp.getLedger().setAddConfirmed(aOp.entry);
                         aOp.cb.addComplete(aOp.getErrorCode(),
                             aOp.getLedger().getId(), aOp.entry, 
                             aOp.ctx);
-                        aOp.getLedger().setAddConfirmed(aOp.entry);
+                        
                         break;
                     case Operation.READ:
                         ReadOp rOp = (ReadOp) op;

File: src/contrib/bookkeeper/src/java/org/apache/bookkeeper/client/LedgerHandle.java
Patch:
@@ -444,8 +444,8 @@ public void close()
     throws KeeperException, InterruptedException {
         //Set data on zookeeper
         ByteBuffer last = ByteBuffer.allocate(8);
-        last.putLong(getLast());
-        LOG.info("Last saved on ZK is: " + getLast());
+        last.putLong(lastAddConfirmed);
+        LOG.info("Last saved on ZK is: " + lastAddConfirmed);
         String closePath = BookKeeper.prefix + bk.getZKStringId(getId()) + BookKeeper.close; 
         if(bk.getZooKeeper().exists(closePath, false) == null){
            bk.getZooKeeper().create(closePath, 

File: src/contrib/bookkeeper/src/java/org/apache/bookkeeper/client/LedgerRecoveryMonitor.java
Patch:
@@ -150,14 +150,12 @@ boolean recover(byte[] passwd) throws
                     hasMore = false;
                     LOG.debug("Recovering: " + lh.getLast());
                     LedgerSequence ls = lh.readEntries(lh.getLast(), lh.getLast());
-                    //if(ls == null) throw BKException.create(Code.ReadException);
                     LOG.debug("Received entry for: " + lh.getLast());
                     
                     byte[] le = ls.nextElement().getEntry();
                     if(le != null){
                         if(notLegitimate) notLegitimate = false;
                         lh.addEntry(le);
-                        //lh.incLast();
                         hasMore = true;
                     }
                 }
@@ -168,7 +166,7 @@ boolean recover(byte[] passwd) throws
          * Write counter as the last entry of ledger
          */
         if(!notLegitimate){
-            //lh.setLast(readCounter);
+            lh.setAddConfirmed(readCounter);
             lh.close();
             
             return true;

File: src/contrib/bookkeeper/test/org/apache/bookkeeper/test/LedgerRecoveryTest.java
Patch:
@@ -243,7 +243,7 @@ public void testLedgerRecovery(){
             /*
              * Check if has recovered properly.
              */
-            assertTrue("Has not recovered correctly: " + afterlh.getLast(), afterlh.getLast() == 1000);
+            assertTrue("Has not recovered correctly: " + afterlh.getLast(), afterlh.getLast() == 999);
         } catch (KeeperException e) {
             LOG.error("Error when opening ledger", e);
             fail("Couldn't open ledger");
@@ -328,7 +328,7 @@ public void testEmptyLedgerRecovery(){
             /*
              * Check if has recovered properly.
              */
-            assertTrue("Has not recovered correctly: " + afterlh.getLast(), afterlh.getLast() == 1);
+            assertTrue("Has not recovered correctly: " + afterlh.getLast(), afterlh.getLast() == 0);
         } catch (KeeperException e) {
             LOG.error("Error when opening ledger", e);
             fail("Couldn't open ledger");

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderElection.java
Patch:
@@ -39,7 +39,8 @@
 
 public class LeaderElection implements Election  {
     private static final Logger LOG = Logger.getLogger(LeaderElection.class);
-
+    private static Random epochGen = new Random();
+    
     QuorumPeer self;
 
     public LeaderElection(QuorumPeer self) {
@@ -130,7 +131,7 @@ public Vote lookForLeader() throws InterruptedException {
                 responseBytes.length);
         HashMap<InetSocketAddress, Vote> votes = new HashMap<InetSocketAddress, Vote>(
                 self.quorumPeers.size());
-        int xid = new Random().nextInt();
+        int xid = epochGen.nextInt();
         while (self.running) {
             votes.clear();
             requestBuffer.clear();

File: src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java
Patch:
@@ -562,6 +562,7 @@ public Vote lookForLeader() throws InterruptedException {
                             n.epoch + ", " + self.getId() + ", " + self.getPeerState() + 
                             ", " + n.state + ", " + n.sid);
                     if (n.epoch > logicalclock) {
+                        LOG.debug("Increasing logical clock: " + n.epoch);
                         logicalclock = n.epoch;
                         recvset.clear();
                         if(totalOrderPredicate(n.leader, n.zxid, self.getId(), self.getLastLoggedZxid()))

File: src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java
Patch:
@@ -76,7 +76,7 @@ long addEntry(ByteBuffer entry) throws IOException {
          */
         offsetBuffer.rewind();
         offsetBuffer.putLong(ledger.position());
-        LOG.debug("Offset: " + ledger.position() + ", " + entry.position() + ", " + calcEntryOffset(entryId) + ", " + entryId);
+        //LOG.debug("Offset: " + ledger.position() + ", " + entry.position() + ", " + calcEntryOffset(entryId) + ", " + entryId);
         offsetBuffer.flip();
         
         /*

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -487,7 +487,7 @@ public synchronized void close() throws InterruptedException {
      *                the initial data for the node
      * @param acl
      *                the acl for the node
-     * @param flags
+     * @param createMode
      *                specifying whether the node to be created is ephemeral
      *                and/or sequential
      * @return the actual path of the created node
@@ -591,7 +591,7 @@ public static void validatePath(String path) throws IllegalArgumentException {
      * The Asynchronous version of create. The request doesn't actually until
      * the asynchronous callback is called.
      *
-     * @see #create(String, byte[], List<ACL>, CreateMode)
+     * @see #create(String, byte[], List, CreateMode)
      */
 
     public void create(String path, byte data[], List<ACL> acl,

File: src/java/main/org/apache/zookeeper/server/upgrade/UpgradeMain.java
Patch:
@@ -129,7 +129,6 @@ void copyFiles(File srcDir, File dstDir, String filter) throws IOException {
     
     /**
      * run the upgrade
-     * @return 0 if success else it failed
      * @throws IOException
      */
     public void runUpgrade() throws IOException {

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -483,7 +483,9 @@ public void shutdown() {
             follower.shutdown();
         }
         cnxnFactory.shutdown();
-        udpSocket.close();
+        if(udpSocket != null) {
+            udpSocket.close();
+        }
     }
 
     public String[] getQuorumPeers() {

File: src/java/main/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -45,7 +45,6 @@
 import org.apache.zookeeper.data.ACL;
 import org.apache.zookeeper.data.Stat;
 import org.apache.zookeeper.data.StatPersisted;
-import org.apache.zookeeper.proto.WatcherEvent;
 import org.apache.zookeeper.txn.CreateTxn;
 import org.apache.zookeeper.txn.DeleteTxn;
 import org.apache.zookeeper.txn.ErrorTxn;

File: src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -22,11 +22,9 @@
 import java.util.LinkedList;
 
 import org.apache.log4j.Logger;
-
 import org.apache.zookeeper.ZooDefs.OpCode;
 import org.apache.zookeeper.server.Request;
 import org.apache.zookeeper.server.RequestProcessor;
-import org.apache.zookeeper.server.ZooTrace;
 
 /**
  * This RequestProcessor matches the incoming committed requests with the

File: src/java/main/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -558,7 +558,8 @@ public ProcessTxnResult processTxn(TxnHeader header, Record txn) {
         } catch (KeeperException e) {
             // These are expected errors since we take a lazy snapshot
             if (initialized
-                    || (e.getCode() != Code.NoNode && e.getCode() != Code.NodeExists)) {
+                    || (e.code() != Code.NONODE 
+                            && e.code() != Code.NODEEXISTS)) {
                 LOG.warn(debug);
                 LOG.error("FIXMSG",e);
             }

File: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -358,7 +358,7 @@ protected void pRequest(Request request) {
         } catch (KeeperException e) {
             if (txnHeader != null) {
                 txnHeader.setType(OpCode.error);
-                txn = new ErrorTxn(e.getCode());
+                txn = new ErrorTxn(e.code().intValue());
             }
         } catch (Exception e) {
             LOG.error("*********************************" + request);
@@ -375,7 +375,7 @@ protected void pRequest(Request request) {
             LOG.error("Unexpected exception", e);
             if (txnHeader != null) {
                 txnHeader.setType(OpCode.error);
-                txn = new ErrorTxn(Code.MarshallingError);
+                txn = new ErrorTxn(Code.MARSHALLINGERROR.intValue());
             }
         }
         request.hdr = txnHeader;

File: src/java/main/org/apache/zookeeper/server/auth/AuthenticationProvider.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server.auth;
 
+import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.server.ServerCnxn;
 
 /**
@@ -45,7 +46,7 @@ public interface AuthenticationProvider {
      *                the authentication data received.
      * @return TODO
      */
-    int handleAuthentication(ServerCnxn cnxn, byte authData[]);
+    KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte authData[]);
 
     /**
      * This method is called to see if the given id matches the given id

File: src/java/main/org/apache/zookeeper/server/upgrade/DataTreeV1.java
Patch:
@@ -437,7 +437,8 @@ public ProcessTxnResult processTxn(TxnHeader header, Record txn) {
         } catch (KeeperException e) {
             // These are expected errors since we take a lazy snapshot
             if (initialized
-                    || (e.getCode() != Code.NoNode && e.getCode() != Code.NodeExists)) {
+                    || (e.code() != Code.NONODE 
+                            && e.code() != Code.NODEEXISTS)) {
                 LOG.warn(debug);
                 LOG.error("FIXMSG",e);
             }

File: src/java/test/org/apache/zookeeper/test/CreateModeTest.java
Patch:
@@ -68,14 +68,14 @@ public void testInvalidFlagConversion() throws KeeperException {
             CreateMode cm = CreateMode.fromFlag(99);
             fail("Shouldn't be able to convert 99 to a CreateMode.");
         } catch(KeeperException ke) {
-            assertEquals(Code.BadArguments, ke.getCode());
+            assertEquals(Code.BADARGUMENTS, ke.code());
         }
 
         try {
             CreateMode cm = CreateMode.fromFlag(-1);
             fail("Shouldn't be able to convert -1 to a CreateMode.");
         } catch(KeeperException ke) {
-            assertEquals(Code.BadArguments, ke.getCode());
+            assertEquals(Code.BADARGUMENTS, ke.code());
         }
     }
 }

File: src/java/main/org/apache/zookeeper/server/DataNode.java
Patch:
@@ -96,7 +96,7 @@ public void copyStat(Stat to) {
         to.setPzxid(stat.getPzxid());
         to.setVersion(stat.getVersion());
         to.setEphemeralOwner(stat.getEphemeralOwner());
-        to.setDataLength(data.length);
+        to.setDataLength(data == null ? 0 : data.length);
         to.setNumChildren(children.size());
     }
 

File: src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
Patch:
@@ -438,7 +438,7 @@ public boolean next() throws IOException {
                 hdr = new TxnHeader();
                 record = SerializeUtils.deserializeTxn(iab, hdr);
             } catch (EOFException e) {
-                LOG.info("EOF excepton " + e);
+                LOG.debug("EOF excepton " + e);
                 inputStream.close();
                 inputStream = null;
                 // thsi means that the file has ended 
@@ -477,4 +477,4 @@ public void close() throws IOException {
         }
     }
 
-}
\ No newline at end of file
+}

File: src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
Patch:
@@ -110,8 +110,8 @@ public long restore(DataTree dt, Map<Long, Integer> sessions,
                 //empty logs 
                 return dt.lastProcessedZxid;
             }
-            if (hdr.getZxid() <= highestZxid && highestZxid != 0) {
-                LOG.error(highestZxid + "(higestZxid) >= "
+            if (hdr.getZxid() < highestZxid && highestZxid != 0) {
+                LOG.error(highestZxid + "(higestZxid) > "
                         + hdr.getZxid() + "(next log) for type "
                         + hdr.getType());
             } else {
@@ -243,4 +243,4 @@ public void rollLog() {
         txnLog.rollLog();
     }
     
-}
\ No newline at end of file
+}

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -493,13 +493,13 @@ void readResponse() throws IOException {
                 // -1 means notification
                 WatcherEvent event = new WatcherEvent();
                 event.deserialize(bbia, "response");
-                
+                WatchedEvent we = new WatchedEvent(event);
                 if (LOG.isDebugEnabled()) {
-                    LOG.debug("Got an event: " + event + " for sessionid 0x"
+                    LOG.debug("Got " + we + " for sessionid 0x"
                             + Long.toHexString(sessionId));
                 }
                 
-                eventThread.queueEvent( new WatchedEvent(event) );
+                eventThread.queueEvent( we );
                 return;
             }
             if (pendingQueue.size() == 0) {

File: src/java/main/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -51,8 +51,7 @@ static void usage() {
 
     static private class MyWatcher implements Watcher {
         public void process(WatchedEvent event) {
-            System.err.println(event.getPath() + ": " + event.getState() + "-"
-                    + event.getType());
+            System.err.println(event);
         }
     }
 

File: src/java/main/org/apache/zookeeper/ClientWatchManager.java
Patch:
@@ -20,7 +20,8 @@
 
 import java.util.Set;
 
-import org.apache.zookeeper.proto.WatcherEvent;
+import org.apache.zookeeper.Watcher.Event.EventType;
+import org.apache.zookeeper.Watcher.Event.KeeperState;
 
 /**
  */
@@ -37,5 +38,5 @@ public interface ClientWatchManager {
      * @param path event path
      * @return
      */
-    public Set<Watcher> materialize(int state, int type, String path);
+    public Set<Watcher> materialize(Watcher.Event.KeeperState state, Watcher.Event.EventType type, String path);
 }

File: src/java/main/org/apache/zookeeper/ZooKeeperMain.java
Patch:
@@ -51,7 +51,7 @@ static void usage() {
     }
 
     static private class MyWatcher implements Watcher {
-        public void process(WatcherEvent event) {
+        public void process(WatchedEvent event) {
             System.err.println(event.getPath() + ": " + event.getState() + "-"
                     + event.getType());
         }

File: src/java/main/org/apache/zookeeper/server/ServerCnxn.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.jute.Record;
 import org.apache.zookeeper.Watcher;
+import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.data.Id;
 import org.apache.zookeeper.proto.ReplyHeader;
 import org.apache.zookeeper.proto.WatcherEvent;
@@ -57,7 +58,7 @@ public abstract void sendResponse(ReplyHeader h, Record r, String tag)
 
     public void finishSessionInit(boolean valid);
 
-    public abstract void process(WatcherEvent event);
+    public abstract void process(WatchedEvent event);
 
     public abstract long getSessionId();
 

File: src/java/test/org/apache/zookeeper/test/DataTreeTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.log4j.Logger;
 import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.data.Stat;
-import org.apache.zookeeper.proto.WatcherEvent;
+import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.server.DataTree;
 
 public class DataTreeTest extends TestCase {
@@ -46,7 +46,7 @@ public void tearDown() throws Exception {
     public void testRootWatchTriggered() throws Exception {
         class MyWatcher implements Watcher{
             boolean fired=false;
-            public void process(WatcherEvent event) {
+            public void process(WatchedEvent event) {
                 if(event.getPath().equals("/"))
                     fired=true;
             }

File: src/java/test/org/apache/zookeeper/test/OOMTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.data.Stat;
-import org.apache.zookeeper.proto.WatcherEvent;
+import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.server.NIOServerCnxn;
 import org.apache.zookeeper.server.ZooKeeperServer;
 
@@ -142,7 +142,7 @@ private void utestChildren() throws IOException, InterruptedException, KeeperExc
      *
      * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.proto.WatcherEvent)
      */
-    public void process(WatcherEvent event) {
+    public void process(WatchedEvent event) {
         System.err.println("Got event " + event.getType() + " "
                 + event.getState() + " " + event.getPath());
     }

File: src/java/test/org/apache/zookeeper/test/SledgeHammer.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.data.Stat;
-import org.apache.zookeeper.proto.WatcherEvent;
+import org.apache.zookeeper.WatchedEvent;
 
 public class SledgeHammer extends Thread implements Watcher {
     ZooKeeper zk;
@@ -106,7 +106,7 @@ public static void main(String[] args) throws NumberFormatException,
         System.exit(0);
     }
 
-    public void process(WatcherEvent event) {
+    public void process(WatchedEvent event) {
         synchronized (this) {
             notifyAll();
         }

File: src/java/main/org/apache/zookeeper/server/quorum/Vote.java
Patch:
@@ -44,4 +44,7 @@ public int hashCode() {
         return (int) (id & zxid);
     }
 
+    public String toString() {
+        return "(" + id + ", " + Long.toHexString(zxid) + ")";
+    }
 }
\ No newline at end of file

File: src/java/test/org/apache/zookeeper/test/AsyncOps.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.ZooKeeper;
 import org.apache.zookeeper.AsyncCallback.ACLCallback;
@@ -133,7 +134,7 @@ protected void verify() {
     public static class StringCB extends AsyncCB implements StringCallback {
         byte[] data = new byte[10];
         List<ACL> acl = Ids.CREATOR_ALL_ACL;
-        int flags = 0;
+        CreateMode flags = CreateMode.PERSISTENT;
         String name = path;
         
         StringCB(ZooKeeper zk) {

File: src/java/test/org/apache/zookeeper/test/GenerateLoad.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.zookeeper.AsyncCallback.StatCallback;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.Watcher;
-import org.apache.zookeeper.ZooDefs.CreateFlags;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.ZooKeeper;
 import org.apache.zookeeper.data.Stat;
@@ -313,7 +313,7 @@ public void run() {
                     try {
                         Thread.sleep(100);
                         path = zk.create("/client", new byte[16], Ids.OPEN_ACL_UNSAFE,
-                                CreateFlags.EPHEMERAL|CreateFlags.SEQUENCE);
+                                CreateMode.EPHEMERAL_SEQUENTIAL);
                         break;
                     } catch(KeeperException e) {
                         LOG.error("keeper exception thrown", e);

File: src/java/test/org/apache/zookeeper/test/IntegrityCheck.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.ZooDefs;
 import org.apache.zookeeper.ZooKeeper;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.AsyncCallback.DataCallback;
 import org.apache.zookeeper.AsyncCallback.StatCallback;
@@ -115,7 +116,7 @@ void readAll() {
     void doCreate() throws InterruptedException, KeeperException {
         // create top level znode
         try{
-            zk.create(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, 0);
+            zk.create(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
         }catch(KeeperException.NodeExistsException e){
             // ignore duplicate create
         }
@@ -127,7 +128,7 @@ void doCreate() throws InterruptedException, KeeperException {
             try{
                 if(i%10==0)
                     LOG.warn("Creating znode "+cpath);
-                zk.create(cpath, v, ZooDefs.Ids.OPEN_ACL_UNSAFE, 0);
+                zk.create(cpath, v, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
             }catch(KeeperException.NodeExistsException e){
                 // ignore duplicate create
             }

File: src/java/test/org/apache/zookeeper/test/OOMTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.ZooKeeper;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.data.Stat;
 import org.apache.zookeeper.proto.WatcherEvent;
@@ -115,7 +116,7 @@ private void utestPrep() throws IOException,
             InterruptedException, KeeperException {
         ZooKeeper zk = new ZooKeeper("127.0.0.1:33221", 30000, this);
         for (int i = 0; i < 10000; i++) {
-            zk.create("/" + i, null, Ids.OPEN_ACL_UNSAFE, 0);
+            zk.create("/" + i, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
         }
         zk.close();
     }

File: src/java/test/org/apache/zookeeper/test/SessionTest.java
Patch:
@@ -28,9 +28,9 @@
 import junit.framework.TestCase;
 
 import org.apache.log4j.Logger;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.Watcher;
-import org.apache.zookeeper.ZooDefs.CreateFlags;
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.data.Stat;
 import org.apache.zookeeper.proto.WatcherEvent;
@@ -145,7 +145,7 @@ public void testSession()
     {
         DisconnectableZooKeeper zk = createClient();
         zk.create("/e", new byte[0], Ids.OPEN_ACL_UNSAFE,
-                        CreateFlags.EPHEMERAL);
+                        CreateMode.EPHEMERAL);
         LOG.info("zk with session id 0x" + Long.toHexString(zk.getSessionId())
                 + " was destroyed!");
 

File: src/java/test/org/apache/zookeeper/test/SledgeHammer.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.ZooKeeper;
-import org.apache.zookeeper.ZooDefs.CreateFlags;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.data.Stat;
 import org.apache.zookeeper.proto.WatcherEvent;
@@ -48,7 +48,7 @@ public void run() {
         try {
             Stat stat = new Stat();
             String path = zk.create("/hammers/hammer-", new byte[0],
-                    Ids.OPEN_ACL_UNSAFE, CreateFlags.SEQUENCE);
+                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);
             byte tag[] = (path + " was here!").getBytes();
             synchronized (this) {
                 String startPath = "/hammers/start";

File: src/java/test/org/apache/zookeeper/test/SyncCallTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.zookeeper.ZooKeeper;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.AsyncCallback.ChildrenCallback;
 import org.apache.zookeeper.AsyncCallback.StringCallback;
 import org.apache.zookeeper.AsyncCallback.VoidCallback;
@@ -51,7 +52,7 @@ public void testSync() throws Exception {
             LOG.info("Beginning test:" + (new Date()).toString());
             for(int i = 0; i < 100; i++)
                 zk.create("/test" + i, new byte[0], Ids.OPEN_ACL_UNSAFE,
-                        0, this, results);
+                        CreateMode.PERSISTENT, this, results);
             zk.sync("/test", this, results);
             for(int i = 0; i < 100; i++)
                 zk.delete("/test" + i, 0, this, results);

File: src/java/test/org/apache/zookeeper/test/TestHammer.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.zookeeper.ZooKeeper;
 import org.apache.zookeeper.AsyncCallback.VoidCallback;
-import org.apache.zookeeper.ZooDefs.CreateFlags;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.ZooDefs.Ids;
 
 public class TestHammer implements VoidCallback {
@@ -44,7 +44,7 @@ public static void main(String[] args) {
             for(int i = 0; i < REPS; i++) {
                 try {
                     String name = zk.create("/testFile-", new byte[16], Ids.OPEN_ACL_UNSAFE,
-                        CreateFlags.EPHEMERAL|CreateFlags.SEQUENCE);
+                        CreateMode.EPHEMERAL_SEQUENTIAL);
                     zk.delete(name, -1, new TestHammer(), null);
                 } catch(Exception e) {
                     i--;

File: src/java/jmx/org/apache/zookeeper/jmx/server/ConnectionBean.java
Patch:
@@ -88,6 +88,7 @@ public void terminateConnection() {
         connection.close();
     }
     
+    @Override
     public String toString() {
         return "ConnectionBean{ClientIP="+getSourceIP()+",SessionId=0x"+getSessionId()+"}";
     }

File: src/java/jmx/org/apache/zookeeper/server/ManagedZooKeeperServerMain.java
Patch:
@@ -23,7 +23,6 @@
 import java.io.File;
 import java.io.IOException;
 
-import org.apache.log4j.Logger;
 import org.apache.zookeeper.jmx.server.ConnectionMXBean;
 import org.apache.zookeeper.jmx.server.DataTreeMXBean;
 import org.apache.zookeeper.jmx.server.ZooKeeperServerMXBean;

File: src/java/jmx/org/apache/zookeeper/server/ObservableZooKeeperServer.java
Patch:
@@ -21,7 +21,8 @@
 import java.io.File;
 import java.io.IOException;
 
-import org.apache.zookeeper.server.ZooKeeperServer.DataTreeBuilder;
+import org.apache.zookeeper.server.util.ObserverManager;
+import org.apache.zookeeper.server.util.ServerObserver;
 /**
  * The observable server broadcast notifications when its state changes. 
  * 

File: src/java/jmx/org/apache/zookeeper/server/quorum/ObservableQuorumPeer.java
Patch:
@@ -24,8 +24,6 @@
 
 import org.apache.zookeeper.server.NIOServerCnxn;
 import org.apache.zookeeper.server.ZooKeeperServer;
-import org.apache.zookeeper.server.NIOServerCnxn.Factory;
-import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;
 import org.apache.zookeeper.server.util.EventInfo;
 import org.apache.zookeeper.server.util.ObservableComponent;
 import org.apache.zookeeper.server.util.ObserverManager;

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -241,6 +241,7 @@ public ExistsWatchRegistration(Map<String, Set<Watcher>> watches,
         {
             super(watches, watcher, path);
         }
+        @Override
         protected boolean shouldAddWatch(int rc) {
             return rc == 0 || rc == KeeperException.Code.NoNode;
         }

File: src/java/main/org/apache/zookeeper/server/DataNode.java
Patch:
@@ -39,6 +39,7 @@
  */
 public class DataNode implements Record {
     DataNode() {
+        // default rather than public constructor
     }
 
     DataNode(DataNode parent, byte data[], List<ACL> acl, Stat stat) {

File: src/java/main/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -74,6 +74,7 @@ public class DataTree {
     /** A debug string * */
     private String debug = "debug";
 
+    @SuppressWarnings("unchecked")
     public HashSet<String> getEphemerals(long sessionId) {
         HashSet<String> retv = ephemerals.get(sessionId);
         if (retv == null) {

File: src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -242,6 +242,8 @@ public void processRequest(Request request) {
     }
 
     public void shutdown() {
+        // we are the final link in the chain
+        LOG.info("shutdown of request processor complete");
     }
 
 }

File: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -83,6 +83,7 @@ public PrepRequestProcessor(ZooKeeperServer zks,
         start();
     }
 
+    @Override
     public void run() {
         try {
             while (true) {
@@ -404,6 +405,7 @@ private boolean fixupACL(List<Id> authInfo, List<ACL> acl) {
             ACL a = it.next();
             Id id = a.getId();
             if (id.getScheme().equals("world") && id.getId().equals("anyone")) {
+                // wide open
             } else if (id.getScheme().equals("auth")) {
                 // This is the "auth" id, so we have to expand it to the
                 // authenticated ids of the requestor

File: src/java/main/org/apache/zookeeper/server/SyncRequestProcessor.java
Patch:
@@ -135,6 +135,7 @@ private long padLogFile(FileChannel fc,long fileSize) throws IOException{
         return fileSize;
     }
 
+    @Override
     public void run() {
         try {
             long fileSize = 0;
@@ -238,6 +239,7 @@ public void run() {
                                      "SyncRequestProcessor exiyed!");
     }
 
+    @SuppressWarnings("unchecked")
     private void flush(LinkedList<Request> toFlush) throws IOException {
         if (toFlush.size() == 0) {
             return;
@@ -251,7 +253,7 @@ private void flush(LinkedList<Request> toFlush) throws IOException {
         for (FileOutputStream fos : streamsToFlushNow) {
             fos.flush();
             if (forceSync) {
-                ((FileChannel) fos.getChannel()).force(false);
+                fos.getChannel().force(false);
             }
         }
         while (streamsToFlushNow.size() > 1) {

File: src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java
Patch:
@@ -112,7 +112,7 @@ static public class Notification {
      * of reception of notification.
      */
     static public class ToSend {
-    	static enum mType {crequest, challenge, notification, ack};
+    	static enum mType {crequest, challenge, notification, ack}
         
         ToSend(mType type, 
         		long leader, 

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -205,7 +205,7 @@ else if (qp.getType() == Leader.SNAP) {
                     // Send back the ping with our session data
                     ByteArrayOutputStream bos = new ByteArrayOutputStream();
                     DataOutputStream dos = new DataOutputStream(bos);
-                    HashMap<Long, Integer> touchTable = ((FollowerZooKeeperServer) zk)
+                    HashMap<Long, Integer> touchTable = zk
                             .getTouchSnapshot();
                     for (Entry<Long, Integer> entry : touchTable.entrySet()) {
                         dos.writeLong(entry.getKey());

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerHandler.java
Patch:
@@ -176,6 +176,7 @@ static public String packetToString(QuorumPacket p) {
      * This thread will receive packets from the follower and process them and
      * also listen to new connections from new followers.
      */
+    @Override
     public void run() {
         try {
 

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
Patch:
@@ -50,6 +50,7 @@ public FollowerRequestProcessor(FollowerZooKeeperServer zks,
         start();
     }
 
+    @Override
     public void run() {
         try {
             while (!finished) {

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java
Patch:
@@ -72,11 +72,13 @@ public Follower getFollower(){
         return self.follower;
     }
     
+    @Override
     protected void createSessionTracker() {
         sessionTracker = new FollowerSessionTracker(this, sessionsWithTimeouts,
                 self.getId());
     }
 
+    @Override
     protected void setupRequestProcessors() {
         RequestProcessor finalProcessor = new FinalRequestProcessor(this);
         commitProcessor = new CommitProcessor(finalProcessor);
@@ -160,6 +162,7 @@ public void addCommittedProposal(Request r) {
         //do nothing
     }
     
+    @Override
     public void shutdown() {
         try {
             super.shutdown();

File: src/java/main/org/apache/zookeeper/server/quorum/Leader.java
Patch:
@@ -49,6 +49,7 @@ static public class Proposal {
 
         public Request request;
 
+        @Override
         public String toString() {
             return packet.getType() + ", " + packet.getZxid() + ", " + request;
         }
@@ -217,6 +218,7 @@ void lead() throws IOException, InterruptedException {
         }
         outstandingProposals.add(newLeaderProposal);
         new Thread() {
+            @Override
             public void run() {
                 try {
                     while (true) {
@@ -226,7 +228,7 @@ public void run() {
                         new FollowerHandler(s, Leader.this);
                     }
                 } catch (Exception e) {
-                    // 
+                    LOG.warn("Exception while accepting follower", e);
                 }
             }
         }.start();

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderElection.java
Patch:
@@ -76,7 +76,7 @@ private ElectionResult countVotes(HashMap<InetSocketAddress, Vote> votes) {
         for (Vote v : votesCast) {
             Integer count = countTable.get(v);
             if (count == null) {
-                count = new Integer(0);
+                count = Integer.valueOf(0);
             }
             countTable.put(v, count + 1);
             if (v.id == result.vote.id) {

File: src/java/main/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -54,6 +54,7 @@ public Leader getLeader(){
         return self.leader;
     }
     
+    @Override
     protected void setupRequestProcessors() {
         RequestProcessor finalProcessor = new FinalRequestProcessor(this);
         RequestProcessor toBeAppliedProcessor = new Leader.ToBeAppliedRequestProcessor(
@@ -69,6 +70,7 @@ public int getGlobalOutstandingLimit() {
         return super.getGlobalOutstandingLimit() / (self.getQuorumSize() - 1);
     }
     
+    @Override
     protected void createSessionTracker() {
         sessionTracker = new SessionTrackerImpl(this, sessionsWithTimeouts,
                 tickTime, self.getId());

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -161,6 +161,7 @@ class ResponderThread extends Thread {
             super("ResponderThread");
         }
 
+        @Override
         public void run() {
             try {
                 byte b[] = new byte[36];
@@ -289,7 +290,7 @@ public synchronized void start() {
                 udpSocket = new DatagramSocket(myQuorumAddr.getPort());
                 new ResponderThread().start();
             } catch (SocketException e) {
-                new RuntimeException(e);
+                throw new RuntimeException(e);
             }
         }
         this.electionAlg = createElectionAlgorithm(electionType);
@@ -368,6 +369,7 @@ else if(follower!=null)
         return null;
     }
 
+    @Override
     public void run() {
         /*
          * Main loop

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumStats.java
Patch:
@@ -48,13 +48,16 @@ public void setStatsProvider(Provider newProvider){
         qprovider=newProvider;
     }
     
+    @Override
     public String getServerState(){
         return (qprovider!=null)?qprovider.getServerState():Provider.UNKNOWN_STATE;
     }
     
     public String[] getQuorumPeers(){
         return (qprovider!=null)?qprovider.getQuorumPeers():new String[0];
     }
+
+    @Override
     public String toString(){
         StringBuilder sb=new StringBuilder(super.toString());
         String state=getServerState();

File: src/java/test/org/apache/zookeeper/test/ClientBase.java
Patch:
@@ -333,4 +333,4 @@ void verifyRootOfAllServersMatch(String hostPort)
             assertEquals("node count not consistent", counts[i-1], counts[i]);
         }
     }
-}
\ No newline at end of file
+}

File: src/java/test/org/apache/zookeeper/test/ClientTest.java
Patch:
@@ -40,7 +40,6 @@
 import org.apache.zookeeper.data.Stat;
 import org.apache.zookeeper.proto.WatcherEvent;
 import org.junit.Test;
-
 public class ClientTest extends ClientBase {
     protected static final Logger LOG = Logger.getLogger(ClientTest.class);
 

File: src/java/test/org/apache/zookeeper/test/SessionTest.java
Patch:
@@ -44,7 +44,6 @@ public class SessionTest extends TestCase implements Watcher {
     protected static final Logger LOG = Logger.getLogger(SessionTest.class);
 
     private static final String HOSTPORT = "127.0.0.1:33299";
-
     private NIOServerCnxn.Factory serverFactory;
     
     private CountDownLatch startSignal;

File: src/java/test/org/apache/zookeeper/test/ZooKeeperTestClient.java
Patch:
@@ -40,7 +40,7 @@
 public class ZooKeeperTestClient extends TestCase implements Watcher {
   protected String hostPort = "127.0.0.1:22801";
 
-  protected static String dirOnZK = "/test_dir";
+  protected static final String dirOnZK = "/test_dir";
 
   protected String testDirOnZK = dirOnZK + "/" + System.currentTimeMillis();
 

File: src/java/main/org/apache/zookeeper/server/quorum/Follower.java
Patch:
@@ -114,15 +114,16 @@ void readPacket(QuorumPacket pp) throws IOException {
     void followLeader() throws InterruptedException {
         InetSocketAddress addr = null;
         // Find the leader by id
+        Vote current = self.getCurrentVote();
         for (QuorumServer s : self.quorumPeers) {
-            if (s.id == self.currentVote.id) {
+            if (s.id == current.id) {
                 addr = s.addr;
                 break;
             }
         }
         if (addr == null) {
             LOG.warn("Couldn't find the leader with id = "
-                    + self.currentVote.id);
+                    + current.id);
         }
         LOG.info("Following " + addr);
         sock = new Socket();

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -493,6 +493,8 @@ class SendWorker extends Thread {
             this.addr = channel.socket().getInetAddress();
             this.channel = channel;
             recvWorker = null;
+            
+            LOG.debug("Address of remote peer: " + this.addr);
         }
 
         void setRecv(RecvWorker recvWorker) {

File: src/java/main/org/apache/zookeeper/ClientCnxn.java
Patch:
@@ -73,7 +73,7 @@
  *
  */
 class ClientCnxn {
-    private static final Logger LOG = Logger.getLogger(ZooKeeperServer.class);
+    private static final Logger LOG = Logger.getLogger(ClientCnxn.class);
 
     private ArrayList<InetSocketAddress> serverAddrs = new ArrayList<InetSocketAddress>();
 

File: src/java/test/org/apache/zookeeper/test/ClientTest.java
Patch:
@@ -44,7 +44,7 @@
 import org.junit.Test;
 
 public class ClientTest extends ClientBase implements Watcher {
-    protected static final Logger LOG = Logger.getLogger(ClientBase.class);
+    protected static final Logger LOG = Logger.getLogger(ClientTest.class);
 
     LinkedBlockingQueue<WatcherEvent> events =
         new LinkedBlockingQueue<WatcherEvent>();

File: src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java
Patch:
@@ -158,6 +158,7 @@ public void processRequest(Request request) {
                 err = rc.err;
                 break;
             case OpCode.sync:
+                LOG.debug("OpCode.sync " + request);
                 SyncRequest syncRequest = new SyncRequest();
                 ZooKeeperServer.byteBuffer2Record(request.request,
                         syncRequest);

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
Patch:
@@ -64,10 +64,11 @@ public void run() {
                 // the response
                 nextProcessor.processRequest(request);
                 switch (request.type) {
+                case OpCode.sync:
+                    zks.pendingSyncs.add(request);
                 case OpCode.create:
                 case OpCode.delete:
                 case OpCode.setData:
-                case OpCode.sync:
                 case OpCode.setACL:
                 case OpCode.createSession:
                 case OpCode.closeSession:

File: src/java/main/org/apache/zookeeper/server/DataTree.java
Patch:
@@ -292,7 +292,6 @@ public ArrayList<String> getChildren(String path, Stat stat, Watcher watcher) th
         synchronized (n) {
             ArrayList<String> children = new ArrayList<String>();
             children.addAll(n.children);
-            Collections.sort(children);
             if (watcher != null) {
                 childWatches.addWatch(path, watcher);
             }

File: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
Patch:
@@ -204,7 +204,7 @@ protected void pRequest(Request request) {
                         request.authInfo);
                 int parentCVersion = parentRecord.stat.getCversion();
                 if ((createRequest.getFlags() & CreateFlags.SEQUENCE) != 0) {
-                    path = path + parentCVersion;
+                    path = path + String.format("%010d", parentCVersion);
                 }
                 try {
                     if (getRecordForPath(path) != null) {

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -70,8 +70,8 @@ public static void parse(String[] args) {
             int tickTime = 0;
             int initLimit = 0;
             int syncLimit = 0;
-            int electionAlg = 0;
-            int electionPort = 0;
+            int electionAlg = 3;
+            int electionPort = 2182;
             for (Entry<Object, Object> entry : cfg.entrySet()) {
                 String key = entry.getKey().toString();
                 String value = entry.getValue().toString();

File: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
Patch:
@@ -417,7 +417,7 @@ private void readRequest() throws IOException {
                     LOG.error("No authentication provider for scheme: "
                             + scheme);
                 else
-                    LOG.error("Authentication failed for scheme: "
+                    LOG.debug("Authentication failed for scheme: "
                             + scheme);
                 // send a response...
                 ReplyHeader rh = new ReplyHeader(h.getXid(), 0,
@@ -427,7 +427,7 @@ private void readRequest() throws IOException {
                 sendBuffer(NIOServerCnxn.closeConn);
                 disableRecv();
             } else {
-                LOG.error("Authentication succeeded for scheme: "
+                LOG.debug("Authentication succeeded for scheme: "
                         + scheme);
                 ReplyHeader rh = new ReplyHeader(h.getXid(), 0,
                         KeeperException.Code.Ok);

File: src/java/test/org/apache/zookeeper/test/DataTreeTest.java
Patch:
@@ -15,6 +15,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.zookeeper.test;
 
 import static org.junit.Assert.*;
@@ -31,7 +32,7 @@
 
 public class DataTreeTest extends TestCase {
     DataTree dt;
-    
+
     public void setUp() throws Exception {
         dt=new DataTree();
     }
@@ -40,7 +41,7 @@ public void tearDown() throws Exception {
         dt=null;
     }
 
-   
+
     public void testRootWatchTriggered() throws Exception {
         class MyWatcher implements Watcher{
             boolean fired=false;

File: src/java/main/org/apache/zookeeper/ZooKeeper.java
Patch:
@@ -1103,7 +1103,7 @@ private static List<ACL> parseACLs(String aclString) {
         acl = new ArrayList<ACL>();
         for (String a : acls) {
             int firstColon = a.indexOf(':');
-            int lastColon = a.indexOf(':');
+            int lastColon = a.lastIndexOf(':');
             if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) {
                 System.err
                         .println(a + " does not have the form scheme:id:perm");

File: src/java/test/org/apache/zookeeper/test/ClientBase.java
Patch:
@@ -41,7 +41,7 @@ protected void setUp() throws Exception {
         ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
         f = new NIOServerCnxn.Factory(33221);
         f.startup(zks);
-        //Thread.sleep(5000);
+        Thread.sleep(5000);
         LOG.info("Client test setup finished");
     }
 

File: src/java/jmx/org/apache/zookeeper/jmx/CommonNames.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx;
+package org.apache.zookeeper.jmx;
 
 /**
  * A bunch of constants.
  * TODO: will get rid of it eventually.
  */
 public class CommonNames {
-    public static final String DOMAIN="com.yahoo.ZookeeperService";
+    public static final String DOMAIN="org.apache.ZookeeperService";
     public static final String DATA_TREE_KEY="DataTree";
     public static final String STANDALONE_SERVER_KEY="StandaloneServer";
 }

File: src/java/jmx/org/apache/zookeeper/jmx/MBeanRegistry.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx;
+package org.apache.zookeeper.jmx;
 
 import java.lang.management.ManagementFactory;
 import java.util.Map;

File: src/java/jmx/org/apache/zookeeper/jmx/ZKMBeanInfo.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx;
+package org.apache.zookeeper.jmx;
 
 /**
  * Zookeeper MBean info interface. MBeanRegistry uses the interface to generate

File: src/java/jmx/org/apache/zookeeper/jmx/server/ConnectionMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server;
+package org.apache.zookeeper.jmx.server;
 
 /**
  * This MBean represents a client connection.

File: src/java/jmx/org/apache/zookeeper/jmx/server/DataTreeMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server;
+package org.apache.zookeeper.jmx.server;
 
 /**
  * Zookeeper data tree MBean.

File: src/java/jmx/org/apache/zookeeper/jmx/server/ZooKeeperServerMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server;
+package org.apache.zookeeper.jmx.server;
 
 /**
  * Zookeeper server MBean.

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/FollowerBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 /**
  * Follower MBean inteface implementation

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/FollowerMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 /**
  * Follower MBean

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/LeaderBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 /**
  * Leader MBean interface implementation.

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/LeaderElectionBean.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 import java.util.Date;
 
-import com.yahoo.zookeeper.jmx.ZKMBeanInfo;
+import org.apache.zookeeper.jmx.ZKMBeanInfo;
 
 /**
  * Leader election MBean interface implementation

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/LeaderElectionMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 /**
  * Leader election protocol MBean. 

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/LeaderMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 /**
  * Leader MBean.

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/LocalPeerBean.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
-import com.yahoo.zookeeper.jmx.server.ZooKeeperServerBean;
-import com.yahoo.zookeeper.server.quorum.QuorumPeer;
+import org.apache.zookeeper.jmx.server.ZooKeeperServerBean;
+import org.apache.zookeeper.server.quorum.QuorumPeer;
 
 /**
  * Implementation of the local peer MBean interface.

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/LocalPeerMXBean.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
-import com.yahoo.zookeeper.jmx.server.ZooKeeperServerMXBean;
+import org.apache.zookeeper.jmx.server.ZooKeeperServerMXBean;
 
 /**
  * A local zookeeper server MBean interface. Unlike the remote peer, the local

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/QuorumBean.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
-import com.yahoo.zookeeper.jmx.ZKMBeanInfo;
-import com.yahoo.zookeeper.server.quorum.QuorumPeer;
+import org.apache.zookeeper.jmx.ZKMBeanInfo;
+import org.apache.zookeeper.server.quorum.QuorumPeer;
 
 public class QuorumBean implements QuorumMXBean,ZKMBeanInfo {
 

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/QuorumMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 /**
  * An MBean representing a zookeeper cluster nodes (aka quorum peers)

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/RemotePeerBean.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
-import com.yahoo.zookeeper.jmx.ZKMBeanInfo;
-import com.yahoo.zookeeper.server.quorum.QuorumPeer;
+import org.apache.zookeeper.jmx.ZKMBeanInfo;
+import org.apache.zookeeper.server.quorum.QuorumPeer;
 
 /**
  * A remote peer bean only provides limited information about the remote peer,

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/RemotePeerMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 /**
  * A proxy for a remote quorum peer.

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/ServerBean.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 import java.util.Date;
 
-import com.yahoo.zookeeper.jmx.ZKMBeanInfo;
+import org.apache.zookeeper.jmx.ZKMBeanInfo;
 
 /**
  * An abstract base class for the leader and follower MBeans.

File: src/java/jmx/org/apache/zookeeper/jmx/server/quorum/ServerMXBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.jmx.server.quorum;
+package org.apache.zookeeper.jmx.server.quorum;
 
 /**
  * A quorum server MBean.

File: src/java/jmx/org/apache/zookeeper/server/ObservableZooKeeperServer.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import java.io.File;
 import java.io.IOException;

File: src/java/jmx/org/apache/zookeeper/server/util/ConnectionObserver.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.util;
+package org.apache.zookeeper.server.util;
 
-import com.yahoo.zookeeper.server.ServerCnxn;
+import org.apache.zookeeper.server.ServerCnxn;
 
 /**
  * Application must implement this interface and register its instance with

File: src/java/jmx/org/apache/zookeeper/server/util/DataTreeObserver.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.util;
+package org.apache.zookeeper.server.util;
 
-import com.yahoo.zookeeper.server.DataNode;
-import com.yahoo.zookeeper.server.DataTree;
+import org.apache.zookeeper.server.DataNode;
+import org.apache.zookeeper.server.DataTree;
 
 /**
  * Application must implement this interface and register its instance with

File: src/java/jmx/org/apache/zookeeper/server/util/EventInfo.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.util;
+package org.apache.zookeeper.server.util;
 
 /**
  * A helper interface used to make event generation and dispatching more 

File: src/java/jmx/org/apache/zookeeper/server/util/ObservableComponent.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.util;
+package org.apache.zookeeper.server.util;
 
 /**
  * An observable component is responsible for decoding and dispatching its events

File: src/java/jmx/org/apache/zookeeper/server/util/ObserverManager.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.util;
+package org.apache.zookeeper.server.util;
 
 import java.util.Collections;
 import java.util.Map;

File: src/java/jmx/org/apache/zookeeper/server/util/ServerObserver.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.util;
+package org.apache.zookeeper.server.util;
 
-import com.yahoo.zookeeper.server.ZooKeeperServer;
+import org.apache.zookeeper.server.ZooKeeperServer;
 
 /**
  * Application must implement this interface and register its instance with

File: src/java/main/org/apache/jute/BinaryInputArchive.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.DataInput;
 import java.io.IOException;

File: src/java/main/org/apache/jute/BinaryOutputArchive.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.IOException;
 import java.io.ByteArrayOutputStream;

File: src/java/main/org/apache/jute/CsvInputArchive.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.InputStreamReader;
 import java.io.InputStream;

File: src/java/main/org/apache/jute/CsvOutputArchive.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.IOException;
 import java.util.List;

File: src/java/main/org/apache/jute/Index.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 /**
  * Interface that acts as an iterator for deserializing maps.

File: src/java/main/org/apache/jute/InputArchive.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.IOException;
 import java.io.ByteArrayOutputStream;

File: src/java/main/org/apache/jute/OutputArchive.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.IOException;
 import java.util.List;

File: src/java/main/org/apache/jute/Record.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.IOException;
 

File: src/java/main/org/apache/jute/RecordReader.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.IOException;
 import java.io.InputStream;

File: src/java/main/org/apache/jute/RecordWriter.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: src/java/main/org/apache/jute/Utils.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.ByteArrayOutputStream;
 import java.io.DataInput;

File: src/java/main/org/apache/jute/XmlInputArchive.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.InputStream;
 import java.io.IOException;

File: src/java/main/org/apache/jute/XmlOutputArchive.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute;
+package org.apache.jute;
 
 import java.io.IOException;
 import java.util.List;

File: src/java/main/org/apache/jute/compiler/CGenerator.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 import java.util.ArrayList;
 import java.io.File;

File: src/java/main/org/apache/jute/compiler/CppGenerator.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 import java.util.ArrayList;
 import java.io.File;

File: src/java/main/org/apache/jute/compiler/JBoolean.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JByte.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JCompType.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  * Abstract base class for all the "compound" types such as ustring,

File: src/java/main/org/apache/jute/compiler/JDouble.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JField.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JFile.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: src/java/main/org/apache/jute/compiler/JFloat.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JInt.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JLong.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JMap.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *
@@ -60,7 +60,7 @@ public String genJavaReadWrapper(String fname, String tag, boolean decl) {
         }
         ret.append("    {\n");
         incrLevel();
-        ret.append("      com.yahoo.jute.Index "+getId("midx")+" = a_.startMap(\""+tag+"\");\n");
+        ret.append("      org.apache.jute.Index "+getId("midx")+" = a_.startMap(\""+tag+"\");\n");
         ret.append("      "+fname+"=new java.util.TreeMap();\n");
         ret.append("      for (; !"+getId("midx")+".done(); "+getId("midx")+".incr()) {\n");
         ret.append(mKey.genJavaReadWrapper(getId("k"),getId("k"),true));

File: src/java/main/org/apache/jute/compiler/JRecord.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 import java.io.File;
 import java.io.FileWriter;
@@ -377,7 +377,7 @@ public void genJavaCode() throws IOException {
         FileWriter jj = new FileWriter(jfile);
         jj.write("// File generated by hadoop record compiler. Do not edit.\n");
         jj.write("package "+getJavaPackage()+";\n\n");
-        jj.write("import com.yahoo.jute.*;\n");
+        jj.write("import org.apache.jute.*;\n");
         jj.write("public class "+getName()+" implements Record {\n");
         for (Iterator i = mFields.iterator(); i.hasNext();) {
             JField jf = (JField) i.next();

File: src/java/main/org/apache/jute/compiler/JString.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JType.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  * Abstract Base class for all types supported by Hadoop Record I/O.

File: src/java/main/org/apache/jute/compiler/JVector.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 /**
  *

File: src/java/main/org/apache/jute/compiler/JavaGenerator.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler;
+package org.apache.jute.compiler;
 
 import java.util.ArrayList;
 import java.io.File;

File: src/java/main/org/apache/jute/compiler/generated/ParseException.java
Patch:
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler.generated;
+package org.apache.jute.compiler.generated;
 
 /**
  * This exception is thrown when parse errors are encountered.

File: src/java/main/org/apache/jute/compiler/generated/Rcc.java
Patch:
@@ -17,9 +17,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler.generated;
+package org.apache.jute.compiler.generated;
 
-import com.yahoo.jute.compiler.*;
+import org.apache.jute.compiler.*;
 import java.util.ArrayList;
 import java.util.Hashtable;
 import java.util.Iterator;

File: src/java/main/org/apache/jute/compiler/generated/RccConstants.java
Patch:
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler.generated;
+package org.apache.jute.compiler.generated;
 
 public interface RccConstants {
 

File: src/java/main/org/apache/jute/compiler/generated/RccTokenManager.java
Patch:
@@ -17,8 +17,8 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler.generated;
-import com.yahoo.jute.compiler.*;
+package org.apache.jute.compiler.generated;
+import org.apache.jute.compiler.*;
 import java.util.ArrayList;
 import java.util.Hashtable;
 import java.util.Iterator;

File: src/java/main/org/apache/jute/compiler/generated/SimpleCharStream.java
Patch:
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler.generated;
+package org.apache.jute.compiler.generated;
 
 /**
  * An implementation of interface CharStream, where the stream is assumed to

File: src/java/main/org/apache/jute/compiler/generated/Token.java
Patch:
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler.generated;
+package org.apache.jute.compiler.generated;
 
 /**
  * Describes the input token stream.

File: src/java/main/org/apache/jute/compiler/generated/TokenMgrError.java
Patch:
@@ -17,7 +17,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.jute.compiler.generated;
+package org.apache.jute.compiler.generated;
 
 public class TokenMgrError extends Error
 {

File: src/java/main/org/apache/zookeeper/AsyncCallback.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.yahoo.zookeeper;
+package org.apache.zookeeper;
 
 import java.util.List;
 
-import com.yahoo.zookeeper.data.ACL;
-import com.yahoo.zookeeper.data.Stat;
+import org.apache.zookeeper.data.ACL;
+import org.apache.zookeeper.data.Stat;
 
 public interface AsyncCallback {
     interface StatCallback extends AsyncCallback {

File: src/java/main/org/apache/zookeeper/KeeperException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper;
+package org.apache.zookeeper;
 
 @SuppressWarnings("serial")
 public abstract class KeeperException extends Exception {

File: src/java/main/org/apache/zookeeper/ServerAdminClient.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper;
+package org.apache.zookeeper;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -26,7 +26,7 @@
 
 import org.apache.log4j.Logger;
 
-import com.yahoo.zookeeper.server.ZooTrace;
+import org.apache.zookeeper.server.ZooTrace;
 
 public class ServerAdminClient {
     private static final Logger LOG = Logger.getLogger(ServerAdminClient.class);
@@ -230,7 +230,7 @@ public static void getTraceMask(String host, int port) {
 
     private static void usage() {
         System.out
-                .println("usage: java [-cp CLASSPATH] com.yahoo.zookeeper.ServerAdminClient "
+                .println("usage: java [-cp CLASSPATH] org.apache.zookeeper.ServerAdminClient "
                         + "host port op (ruok|stat|dump|kill|gettracemask|settracemask) [arguments]");
 
     }

File: src/java/main/org/apache/zookeeper/Version.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper;
+package org.apache.zookeeper;
 
-public class Version implements com.yahoo.zookeeper.version.Info{
+public class Version implements org.apache.zookeeper.version.Info{
 
     public static int getRevision() {
         return REVISION;
@@ -40,7 +40,7 @@ public static String getFullVersion() {
 
     public static void printUsage() {
         System.out
-                .print("Usage:\tjava -cp ... com.yahoo.zookeeper.Version "
+                .print("Usage:\tjava -cp ... org.apache.zookeeper.Version "
                         + "[--full | --short | --revision],\n\tPrints --full version "
                         + "info if no arg specified.");
         System.exit(1);

File: src/java/main/org/apache/zookeeper/Watcher.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper;
+package org.apache.zookeeper;
 
-import com.yahoo.zookeeper.proto.WatcherEvent;
+import org.apache.zookeeper.proto.WatcherEvent;
 
 /**
  * This interface specifies the public interface an event handler class must

File: src/java/main/org/apache/zookeeper/ZooDefs.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper;
+package org.apache.zookeeper;
 
 import java.util.ArrayList;
 import java.util.Collections;
 
-import com.yahoo.zookeeper.data.ACL;
-import com.yahoo.zookeeper.data.Id;
+import org.apache.zookeeper.data.ACL;
+import org.apache.zookeeper.data.Id;
 
 public class ZooDefs {
     public interface OpCode {

File: src/java/main/org/apache/zookeeper/server/ByteBufferInputStream.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import java.io.IOException;
 import java.io.InputStream;

File: src/java/main/org/apache/zookeeper/server/PurgeTxnLog.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import java.io.File;
 import java.io.FileFilter;

File: src/java/main/org/apache/zookeeper/server/RequestProcessor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 /**
  * RequestProcessors are chained together to process transactions. Requests are

File: src/java/main/org/apache/zookeeper/server/ServerConfig.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 public class ServerConfig {
     private int clientPort;

File: src/java/main/org/apache/zookeeper/server/ServerStats.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 
 public class ServerStats {

File: src/java/main/org/apache/zookeeper/server/SessionTracker.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
-import com.yahoo.zookeeper.KeeperException;
+import org.apache.zookeeper.KeeperException;
 
 /**
  * This is the basic interface that ZooKeeperServer uses to track sessions. The

File: src/java/main/org/apache/zookeeper/server/SessionTrackerImpl.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -25,7 +25,7 @@
 
 import org.apache.log4j.Logger;
 
-import com.yahoo.zookeeper.KeeperException;
+import org.apache.zookeeper.KeeperException;
 
 /**
  * This is a full featured SessionTracker. It tracks session in grouped by tick

File: src/java/main/org/apache/zookeeper/server/TraceFormatter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -23,7 +23,7 @@
 import java.text.DateFormat;
 import java.util.Date;
 
-import com.yahoo.zookeeper.ZooDefs.OpCode;
+import org.apache.zookeeper.ZooDefs.OpCode;
 
 public class TraceFormatter {
 

File: src/java/main/org/apache/zookeeper/server/WatchManager.java
Patch:
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Set;
 
 import org.apache.log4j.Logger;
 
-import com.yahoo.zookeeper.Watcher;
-import com.yahoo.zookeeper.proto.WatcherEvent;
+import org.apache.zookeeper.Watcher;
+import org.apache.zookeeper.proto.WatcherEvent;
 
 /**
  * This class manages watches. It allows watches to be associated with a string

File: src/java/main/org/apache/zookeeper/server/ZooTrace.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import org.apache.log4j.Logger;
 
-import com.yahoo.zookeeper.server.quorum.QuorumPacket;
+import org.apache.zookeeper.server.quorum.QuorumPacket;
 
 /**
  * This class encapsulates and centralizes tracing for the ZooKeeper server.

File: src/java/main/org/apache/zookeeper/server/auth/AuthenticationProvider.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.auth;
+package org.apache.zookeeper.server.auth;
 
-import com.yahoo.zookeeper.server.ServerCnxn;
+import org.apache.zookeeper.server.ServerCnxn;
 
 /**
  * This interface is implemented by authentication providers to add new kinds of

File: src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.auth;
+package org.apache.zookeeper.server.auth;
 
 import java.util.Enumeration;
 import java.util.HashMap;
 
 import org.apache.log4j.Logger;
 
-import com.yahoo.zookeeper.server.ZooKeeperServer;
+import org.apache.zookeeper.server.ZooKeeperServer;
 
 public class ProviderRegistry {
     private static final Logger LOG = Logger.getLogger(ProviderRegistry.class);

File: src/java/main/org/apache/zookeeper/server/quorum/AckRequestProcessor.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.quorum;
+package org.apache.zookeeper.server.quorum;
 
-import com.yahoo.zookeeper.server.Request;
-import com.yahoo.zookeeper.server.RequestProcessor;
+import org.apache.zookeeper.server.Request;
+import org.apache.zookeeper.server.RequestProcessor;
 
 /**
  * This is a very simple RequestProcessor that simply forwards a request from a

File: src/java/main/org/apache/zookeeper/server/quorum/Election.java
Patch:
@@ -1,7 +1,7 @@
-package com.yahoo.zookeeper.server.quorum;
+package org.apache.zookeeper.server.quorum;
 
 
-import com.yahoo.zookeeper.server.quorum.Vote;
+import org.apache.zookeeper.server.quorum.Vote;
 
 interface Election {
     public Vote lookForLeader() throws InterruptedException;

File: src/java/main/org/apache/zookeeper/server/quorum/FollowerSessionTracker.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.quorum;
+package org.apache.zookeeper.server.quorum;
 
 import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
 
-import com.yahoo.zookeeper.server.SessionTracker;
-import com.yahoo.zookeeper.server.SessionTrackerImpl;
+import org.apache.zookeeper.server.SessionTracker;
+import org.apache.zookeeper.server.SessionTrackerImpl;
 
 /**
  * This is really just a shell of a SessionTracker that tracks session activity

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.quorum;
+package org.apache.zookeeper.server.quorum;
 
 import java.io.IOException;
 import java.net.InetAddress;

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.quorum;
+package org.apache.zookeeper.server.quorum;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -27,8 +27,8 @@
 
 import org.apache.log4j.Logger;
 
-import com.yahoo.zookeeper.server.ServerConfig;
-import com.yahoo.zookeeper.server.quorum.QuorumPeer.QuorumServer;
+import org.apache.zookeeper.server.ServerConfig;
+import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;
 
 public class QuorumPeerConfig extends ServerConfig {
     private static final Logger LOG = Logger.getLogger(QuorumPeerConfig.class);

File: src/java/main/org/apache/zookeeper/server/quorum/QuorumStats.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.quorum;
+package org.apache.zookeeper.server.quorum;
 
-import com.yahoo.zookeeper.server.ServerStats;
+import org.apache.zookeeper.server.ServerStats;
 
 public class QuorumStats extends ServerStats {
     

File: src/java/main/org/apache/zookeeper/server/quorum/Vote.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.quorum;
+package org.apache.zookeeper.server.quorum;
 
 
 public class Vote {

File: src/java/main/org/apache/zookeeper/server/util/Profiler.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.yahoo.zookeeper.server.util;
+package org.apache.zookeeper.server.util;
 
 import org.apache.log4j.Logger;
 

File: src/java/test/org/apache/zookeeper/server/SerializationPerfTest.java
Patch:
@@ -1,12 +1,12 @@
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import java.io.IOException;
 import java.io.OutputStream;
 
 import junit.framework.TestCase;
 
-import com.yahoo.jute.BinaryOutputArchive;
-import com.yahoo.zookeeper.KeeperException;
+import org.apache.jute.BinaryOutputArchive;
+import org.apache.zookeeper.KeeperException;
 
 public class SerializationPerfTest extends TestCase {
     private static class NullOutputStream extends OutputStream {

File: src/java/test/org/apache/zookeeper/server/ZooKeeperServerTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.yahoo.zookeeper.server;
+package org.apache.zookeeper.server;
 
 import java.io.File;
 import java.util.List;

File: zookeeper/java/src/com/yahoo/zookeeper/server/SessionTracker.java
Patch:
@@ -52,5 +52,5 @@ public static interface SessionExpirer {
      */
     void removeSession(long sessionId);
 
-    void checkSession(long sessionId) throws KeeperException;
+    void checkSession(long sessionId) throws KeeperException.SessionExpiredException;
 }

File: zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java
Patch:
@@ -190,7 +190,7 @@ public void shutdown() {
                                  "Shutdown SessionTrackerImpl!");
     }
 
-
+   
     synchronized public long createSession(int sessionTimeout) {
         addSession(nextSessionId, sessionTimeout);
         return nextSessionId++;
@@ -212,9 +212,9 @@ synchronized public void addSession(long id, int sessionTimeout) {
         touchSession(id, sessionTimeout);
     }
 
-    public void checkSession(long sessionId) throws KeeperException {
+    public void checkSession(long sessionId) throws KeeperException.SessionExpiredException {
         if (sessionsById.get(sessionId) == null) {
-            throw new KeeperException(KeeperException.Code.SessionExpired);
+            throw new KeeperException.SessionExpiredException();
         }
     }
 }

File: zookeeper/java/src/com/yahoo/zookeeper/server/auth/HostAuthenticationProvider.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.yahoo.zookeeper.server.auth;
 
-import com.yahoo.zookeeper.KeeperException;
 import com.yahoo.zookeeper.data.Id;
 import com.yahoo.zookeeper.server.ServerCnxn;
+import com.yahoo.zookeeper.KeeperException;
 
 public class HostAuthenticationProvider implements AuthenticationProvider {
 

File: zookeeper/java/src/com/yahoo/zookeeper/server/auth/IPAuthenticationProvider.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.yahoo.zookeeper.server.auth;
 
-import com.yahoo.zookeeper.KeeperException;
 import com.yahoo.zookeeper.data.Id;
 import com.yahoo.zookeeper.server.ServerCnxn;
+import com.yahoo.zookeeper.KeeperException;
 
 public class IPAuthenticationProvider implements AuthenticationProvider {
 

File: zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerSessionTracker.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
 
-import com.yahoo.zookeeper.KeeperException;
 import com.yahoo.zookeeper.server.SessionTracker;
 import com.yahoo.zookeeper.server.SessionTrackerImpl;
 
@@ -78,7 +77,7 @@ synchronized public long createSession(int sessionTimeout) {
         return (nextSessionId++);
     }
 
-    public void checkSession(long sessionId) throws KeeperException {
+    public void checkSession(long sessionId)  {
         // Nothing to do here. Sessions are checked at the Leader
     }
 }

File: zookeeper/test/com/yahoo/zookeeper/test/AsyncTest.java
Patch:
@@ -59,7 +59,7 @@ protected void tearDown() throws Exception {
         LOG.error("Client test shutdown finished");
     }
     
-    private ZooKeeper createClient() throws KeeperException, IOException,InterruptedException{
+    private ZooKeeper createClient() throws IOException,InterruptedException{
         clientConnected=new CountDownLatch(1);
 		ZooKeeper zk = new ZooKeeper(hostPort, 30000, this);
 		if(!clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)){
@@ -140,8 +140,8 @@ public void testHammer() throws Exception {
     
     LinkedList<Integer> results = new LinkedList<Integer>();
     @Test
-    public void testAsync() throws KeeperException, IOException,
-			InterruptedException {
+    public void testAsync() throws IOException,
+            InterruptedException, KeeperException {
 		ZooKeeper zk = null;
 		zk = createClient();
 		zk.addAuthInfo("digest", "ben:passwd".getBytes());

File: zookeeper/test/com/yahoo/zookeeper/test/GenerateLoad.java
Patch:
@@ -329,12 +329,9 @@ public void process(WatcherEvent event) {
             if (event.getType() == Watcher.Event.EventNone && event.getState() == Watcher.Event.KeeperStateExpired) {
                 try {
                     zk = new ZooKeeper(host, 10000, this);
-                } catch (KeeperException e) {
-                    e.printStackTrace();
                 } catch (IOException e) {
                     e.printStackTrace();
                 }
-                
             }
         }
 

File: zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java
Patch:
@@ -103,7 +103,7 @@
  * 
  */
 public class ZooKeeper {
-    Watcher watcher;
+    volatile Watcher watcher;
 
     public enum States {
         CONNECTING, ASSOCIATING, CONNECTED, CLOSED, AUTH_FAILED;
@@ -119,16 +119,16 @@ public boolean isAlive() {
 
     public ZooKeeper(String host, int sessionTimeout, Watcher watcher)
             throws KeeperException, IOException {
-        cnxn = new ClientCnxn(host, sessionTimeout, this);
         this.watcher = watcher;
+        cnxn = new ClientCnxn(host, sessionTimeout, this);
     }
 
     public ZooKeeper(String host, int sessionTimeout, Watcher watcher,
             long sessionId, byte[] sessionPasswd) throws KeeperException,
             IOException {
+        this.watcher = watcher;
         cnxn = new ClientCnxn(host, sessionTimeout, this, sessionId,
                 sessionPasswd);
-        this.watcher = watcher;
     }
 
     public long getSessionId() {

File: zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -320,9 +320,6 @@ public void loadData() throws IOException, FileNotFoundException,
                     new BufferedInputStream(new FileInputStream(f));
                 highestZxid = playLog(BinaryInputArchive.getArchive(logIS));
                 logIS.close();                
-                FileInputStream logStream = new FileInputStream(f);
-                highestZxid = playLog(BinaryInputArchive.getArchive(logStream));
-                logStream.close();
             }
             hzxid = highestZxid;
             ZooLog.logWarn("Snapshot/log data restored");

File: zookeeper/java/src/com/yahoo/zookeeper/server/Request.java
Patch:
@@ -135,7 +135,7 @@ static String op2String(int op) {
         case OpCode.setData:
             return "setData";
         case OpCode.sync:
-          	return "sync:";
+              return "sync:";
         case OpCode.getACL:
             return "getACL";
         case OpCode.setACL:

File: zookeeper/java/src/com/yahoo/zookeeper/server/ZooLog.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.Date;
 import java.util.GregorianCalendar;
 
-import com.yahoo.zookeeper.server.quorum.FollowerHandler;
 import com.yahoo.zookeeper.server.quorum.QuorumPacket;
 
 /**
@@ -137,6 +136,8 @@ public static void logException(Throwable e) {
 
     final static public long WARNING_TRACE_MASK = 1 << 8;
 
+    final static public long JMX_TRACE_MASK = 1 << 9;
+
     static long binaryTraceMask = CLIENT_REQUEST_TRACE_MASK
             | SERVER_PACKET_TRACE_MASK | SESSION_TRACE_MASK
             | WARNING_TRACE_MASK;

File: zookeeper/java/src/com/yahoo/zookeeper/server/quorum/CommitProcessor.java
Patch:
@@ -120,9 +120,9 @@ public void run() {
                             nextPending = request;
                             break;
                         case OpCode.sync:
-                        	nextPending = request;
-                        	pendingSyncs.add(request);
-                        	break;
+                            nextPending = request;
+                            pendingSyncs.add(request);
+                            break;
                         default:
                             toProcess.add(request);
                         }

File: zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java
Patch:
@@ -309,8 +309,8 @@ public void run() {
                     DataOutputStream dos = new DataOutputStream(bos);
                     dos.writeLong(id);
                     boolean valid = leader.zk.touch(id, to);
-                    ZooLog.logTextTraceMessage("Session " + id + " is valid: "
-                            + valid, ZooLog.SESSION_TRACE_MASK);
+                    ZooLog.logTextTraceMessage("Session " + Long.toHexString(id)
+                            + " is valid: "+ valid, ZooLog.SESSION_TRACE_MASK);
                     dos.writeBoolean(valid);
                     qp.setData(bos.toByteArray());
                     queuedPackets.add(qp);
@@ -322,7 +322,7 @@ public void run() {
                     type = bb.getInt();
                     bb = bb.slice();
                     if(type == OpCode.sync){
-                    	leader.setSyncHandler(this, sessionId);
+                        leader.setSyncHandler(this, sessionId);
                     }
                     leader.zk.submitRequest(null, sessionId, type, cxid, bb,
                             qp.getAuthinfo());

File: zookeeper/java/src/com/yahoo/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -43,13 +43,13 @@ public class LeaderZooKeeperServer extends ZooKeeperServer {
      * @throws IOException
      */
     LeaderZooKeeperServer(File dataDir, File dataLogDir,
-            QuorumPeer self) throws IOException {
-        super(dataDir, dataLogDir, self.tickTime);
+            QuorumPeer self,DataTreeBuilder treeBuilder) throws IOException {
+        super(dataDir, dataLogDir, self.tickTime,treeBuilder);
         this.self = self;
     }
 
     public Leader getLeader(){
-    	return self.leader;
+        return self.leader;
     }
     
     protected void setupRequestProcessors() {

File: zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java
Patch:
@@ -105,7 +105,7 @@
 public class ZooKeeper {
     Watcher watcher;
 
-    enum States {
+    public enum States {
         CONNECTING, ASSOCIATING, CONNECTED, CLOSED, AUTH_FAILED;
 
         public boolean isAlive() {

File: zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java
Patch:
@@ -667,7 +667,6 @@ public void sync(String path, VoidCallback cb, Object ctx){
     	SyncResponse response = new SyncResponse();
     	request.setPath(path);
     	cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, path, ctx);
-    	System.out.println("Sending sync!");
     }
     
     public States getState() {

File: zookeeper/java/src/com/yahoo/zookeeper/server/ZooKeeperServer.java
Patch:
@@ -347,7 +347,7 @@ public long playLog(InputArchive logStream) throws IOException {
                             ((CreateSessionTxn) txn).getTimeOut());
                     ZooLog.logTextTraceMessage(
                             "playLog --- create session in log: "
-                                    + hdr.getClientId() + " with timeout: "
+                                    + Long.toHexString(hdr.getClientId()) + " with timeout: "
                                     + ((CreateSessionTxn) txn).getTimeOut(),
                             ZooLog.SESSION_TRACE_MASK);
                     // give dataTree a chance to sync its lastProcessedZxid
@@ -357,7 +357,7 @@ public long playLog(InputArchive logStream) throws IOException {
                     sessionsWithTimeouts.remove(hdr.getClientId());
                     ZooLog.logTextTraceMessage(
                             "playLog --- close session in log: "
-                                    + hdr.getClientId(),
+                                    + Long.toHexString(hdr.getClientId()),
                             ZooLog.SESSION_TRACE_MASK);
                     dataTree.processTxn(hdr, txn);
                     break;

File: zookeeper/test/com/yahoo/zookeeper/test/AsyncTest.java
Patch:
@@ -45,7 +45,7 @@ protected void restart() throws Exception {
     @After
     protected void tearDown() throws Exception {
         qt.tearDown();
-    	ZooLog.logError("Clent test shutdown");
+    	ZooLog.logError("Client test shutdown");
         if (f != null) {
             f.shutdown();
         }

File: zookeeper/java/src/com/yahoo/zookeeper/server/SessionTrackerImpl.java
Patch:
@@ -58,7 +58,6 @@ public static long initializeNextSession(long id) {
     	long nextSid = 0;
     	nextSid = (System.currentTimeMillis() << 24) >> 8;
     	nextSid =  nextSid | (id <<56);
-    	ZooLog.logWarn("printing the initiailzied next session with id " +  id + " next id " + Long.toHexString(nextSid));
     	return nextSid;
     }
     

File: zookeeper/test/com/yahoo/zookeeper/test/QuorumTest.java
Patch:
@@ -30,10 +30,10 @@ protected void setUp() throws Exception {
         s3dir = new File(s3dir + ".dir");
         s3dir.mkdirs();
         s4dir = File.createTempFile("test", ".junit", baseTest);
-        s4dir = new File(s3dir + ".dir");
+        s4dir = new File(s4dir + ".dir");
         s4dir.mkdirs();
         s5dir = File.createTempFile("test", ".junit", baseTest);
-        s5dir = new File(s3dir + ".dir");
+        s5dir = new File(s5dir + ".dir");
         s5dir.mkdirs();
         startServers();
         ZooLog.logWarn("Setup finished");

File: zookeeper/java/src/com/yahoo/zookeeper/server/DataTree.java
Patch:
@@ -411,7 +411,7 @@ void killSession(long session) {
                 try {
                     deleteNode(path);
                     ZooLog.logTextTraceMessage("Deleting ephemeral node "
-                            + path + " for session " + session,
+                            + path + " for session " + Long.toHexString(session),
                             ZooLog.SESSION_TRACE_MASK);
                 } catch (KeeperException e) {
                     ZooLog.logException(e);

File: zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java
Patch:
@@ -264,7 +264,7 @@ public void run() {
                     int type = bb.getInt();
                     bb = bb.slice();
                     leader.zk.submitRequest(null, sessionId, type, cxid, bb,
-                            null);
+                            qp.getAuthinfo());
                     break;
                 default:
                 }

File: zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerZooKeeperServer.java
Patch:
@@ -54,7 +54,7 @@ class FollowerZooKeeperServer extends ZooKeeperServer {
      */
     FollowerZooKeeperServer(long serverId, File dataDir, File dataLogDir,
             Follower follower) throws IOException {
-        super(dataDir, dataLogDir);
+        super(dataDir, dataLogDir, follower.self.tickTime);
         this.serverId = serverId;
         this.follower = follower;
     }

File: zookeeper/java/src/com/yahoo/zookeeper/server/quorum/LeaderZooKeeperServer.java
Patch:
@@ -45,7 +45,7 @@ public class LeaderZooKeeperServer extends ZooKeeperServer {
      */
     LeaderZooKeeperServer(long serverId, File dataDir, File dataLogDir,
             Leader leader) throws IOException {
-        super(dataDir, dataLogDir);
+        super(dataDir, dataLogDir, leader.self.tickTime);
         this.serverId = serverId;
         this.leader = leader;
     }

File: zookeeper/java/src/com/yahoo/zookeeper/server/quorum/QuorumPeer.java
Patch:
@@ -505,7 +505,7 @@ public static void main(String args[]) {
                 self.join();
             } else {
                 int port = clientPort;
-                ZooKeeperServer zk = new ZooKeeperServer(dataDir, dataLogDir);
+                ZooKeeperServer zk = new ZooKeeperServer(dataDir, dataLogDir, tickTime);
                 zk.startup();
                 NIOServerCnxn.Factory t = new NIOServerCnxn.Factory(port);
                 t.setZooKeeperServer(zk);

