File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/RadioStatUtil.java
Patch:
@@ -1,6 +1,7 @@
 package com.tencent.matrix.batterycanary.utils;
 
 import android.Manifest;
+import android.annotation.SuppressLint;
 import android.app.usage.NetworkStats;
 import android.app.usage.NetworkStatsManager;
 import android.content.Context;
@@ -113,6 +114,7 @@ public static RadioBps getCurrentBps(Context context) {
         }
     }
 
+    @SuppressLint("MissingPermission")
     @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
     private static Pair<Long, Long> getCurrentBps(Context context, String typeName) {
         long rxBwBps = 0, txBwBps = 0;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -35,6 +35,7 @@ public class TraceConfig implements IDefaultConfig {
     private static final String TAG = "Matrix.TraceConfig";
     public static final int STACK_STYLE_SIMPLE = 0;
     public static final int STACK_STYLE_WHOLE = 1;
+    public static final int STACK_STYLE_RAW = 2;
     public IDynamicConfig dynamicConfig;
     public boolean defaultFpsEnable;
     public boolean defaultMethodTraceEnable;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IDoFrameListener.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Created by caichongyang on 2017/5/26.
  * <br/>
- * Use {@link IFrameListener} or {@link IActivityFrameListener} instead.
+ * Use {@link IFrameListener} or {@link ISceneFrameListener} instead.
  **/
 @Deprecated
 public class IDoFrameListener {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IFrameListener.java
Patch:
@@ -16,17 +16,16 @@
 
 package com.tencent.matrix.trace.listeners;
 
-import android.app.Activity;
 import android.os.Build;
 import android.view.FrameMetrics;
 
 import androidx.annotation.RequiresApi;
 
 /**
- * Use {@link IActivityFrameListener} to analyze frame metrics of specified activity, or use
+ * Use {@link ISceneFrameListener} to analyze frame metrics of specified scene, or use
  * {@link IDropFrameListener} to only analyze dropped frame.
  */
 @RequiresApi(Build.VERSION_CODES.N)
 public interface IFrameListener {
-    void onFrameMetricsAvailable(Activity activity, FrameMetrics frameMetrics, float droppedFrames, float refreshRate);
+    void onFrameMetricsAvailable(String sceneName, FrameMetrics frameMetrics, float droppedFrames, float refreshRate);
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/view/FrameDecorator.java
Patch:
@@ -42,14 +42,14 @@
 import com.tencent.matrix.trace.R;
 import com.tencent.matrix.trace.TracePlugin;
 import com.tencent.matrix.trace.constants.Constants;
-import com.tencent.matrix.trace.listeners.IActivityFrameListener;
+import com.tencent.matrix.trace.listeners.ISceneFrameListener;
 import com.tencent.matrix.trace.tracer.FrameTracer;
 import com.tencent.matrix.util.MatrixLog;
 
 import java.util.Arrays;
 
 @RequiresApi(Build.VERSION_CODES.N)
-public class FrameDecorator implements IActivityFrameListener {
+public class FrameDecorator implements ISceneFrameListener {
     private static final String TAG = "Matrix.FrameDecorator";
     private WindowManager windowManager;
     private WindowManager.LayoutParams layoutParam;
@@ -341,7 +341,7 @@ public int getThreshold() {
 
     @SuppressLint("DefaultLocale")
     @Override
-    public void onFrameMetricsAvailable(@NonNull String scene, long[] avgDurations, int[] dropLevel, int[] dropSum, float avgDroppedFrame, float avgRefreshRate, final float fps) {
+    public void onFrameMetricsAvailable(@NonNull String sceneName, long[] avgDurations, int[] dropLevel, int[] dropSum, float avgDroppedFrame, float avgRefreshRate, final float fps) {
         final String unknownDelay = String.format("unknown delay: %.1fms", (double) avgDurations[FrameTracer.FrameDuration.UNKNOWN_DELAY_DURATION.ordinal()] / Constants.TIME_MILLIS_TO_NANO);
         final String inputHandling = String.format("input handling: %.1fms", (double) avgDurations[FrameTracer.FrameDuration.INPUT_HANDLING_DURATION.ordinal()] / Constants.TIME_MILLIS_TO_NANO);
         final String animation = String.format("animation: %.1fms", (double) avgDurations[FrameTracer.FrameDuration.ANIMATION_DURATION.ordinal()] / Constants.TIME_MILLIS_TO_NANO);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IDoFrameListener.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Created by caichongyang on 2017/5/26.
  * <br/>
- * Use {@link IFrameListener} or {@link IActivityFrameListener} instead.
+ * Use {@link IFrameListener} or {@link ISceneFrameListener} instead.
  **/
 @Deprecated
 public class IDoFrameListener {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IFrameListener.java
Patch:
@@ -16,17 +16,16 @@
 
 package com.tencent.matrix.trace.listeners;
 
-import android.app.Activity;
 import android.os.Build;
 import android.view.FrameMetrics;
 
 import androidx.annotation.RequiresApi;
 
 /**
- * Use {@link IActivityFrameListener} to analyze frame metrics of specified activity, or use
+ * Use {@link ISceneFrameListener} to analyze frame metrics of specified scene, or use
  * {@link IDropFrameListener} to only analyze dropped frame.
  */
 @RequiresApi(Build.VERSION_CODES.N)
 public interface IFrameListener {
-    void onFrameMetricsAvailable(Activity activity, FrameMetrics frameMetrics, float droppedFrames, float refreshRate);
+    void onFrameMetricsAvailable(String sceneName, FrameMetrics frameMetrics, float droppedFrames, float refreshRate);
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/view/FrameDecorator.java
Patch:
@@ -42,14 +42,14 @@
 import com.tencent.matrix.trace.R;
 import com.tencent.matrix.trace.TracePlugin;
 import com.tencent.matrix.trace.constants.Constants;
-import com.tencent.matrix.trace.listeners.IActivityFrameListener;
+import com.tencent.matrix.trace.listeners.ISceneFrameListener;
 import com.tencent.matrix.trace.tracer.FrameTracer;
 import com.tencent.matrix.util.MatrixLog;
 
 import java.util.Arrays;
 
 @RequiresApi(Build.VERSION_CODES.N)
-public class FrameDecorator implements IActivityFrameListener {
+public class FrameDecorator implements ISceneFrameListener {
     private static final String TAG = "Matrix.FrameDecorator";
     private WindowManager windowManager;
     private WindowManager.LayoutParams layoutParam;
@@ -341,7 +341,7 @@ public int getThreshold() {
 
     @SuppressLint("DefaultLocale")
     @Override
-    public void onFrameMetricsAvailable(@NonNull String scene, long[] avgDurations, int[] dropLevel, int[] dropSum, float avgDroppedFrame, float avgRefreshRate, final float fps) {
+    public void onFrameMetricsAvailable(@NonNull String sceneName, long[] avgDurations, int[] dropLevel, int[] dropSum, float avgDroppedFrame, float avgRefreshRate, final float fps) {
         final String unknownDelay = String.format("unknown delay: %.1fms", (double) avgDurations[FrameTracer.FrameDuration.UNKNOWN_DELAY_DURATION.ordinal()] / Constants.TIME_MILLIS_TO_NANO);
         final String inputHandling = String.format("input handling: %.1fms", (double) avgDurations[FrameTracer.FrameDuration.INPUT_HANDLING_DURATION.ordinal()] / Constants.TIME_MILLIS_TO_NANO);
         final String animation = String.format("animation: %.1fms", (double) avgDurations[FrameTracer.FrameDuration.ANIMATION_DURATION.ordinal()] / Constants.TIME_MILLIS_TO_NANO);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -85,7 +85,7 @@ public void onDispatchBegin(String log) {
 
     @Override
     public void onDispatchEnd(String log, long beginNs, long endNs) {
-        long dispatchCost = endNs - beginNs;
+        long dispatchCost = (endNs - beginNs) / Constants.TIME_MILLIS_TO_NANO;
         try {
             if (dispatchCost >= evilThresholdMs) {
                 long[] data = AppMethodBeat.getInstance().copyData(indexRecord);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -85,7 +85,7 @@ public void onDispatchBegin(String log) {
 
     @Override
     public void onDispatchEnd(String log, long beginNs, long endNs) {
-        long dispatchCost = endNs - beginNs;
+        long dispatchCost = (endNs - beginNs) / Constants.TIME_MILLIS_TO_NANO;
         try {
             if (dispatchCost >= evilThresholdMs) {
                 long[] data = AppMethodBeat.getInstance().copyData(indexRecord);

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecordManager.java
Patch:
@@ -238,7 +238,7 @@ public void clear() {
 
     public boolean isEglContextReleased(OpenGLInfo info) {
         synchronized (mContextRecord) {
-            return mContextRecord.contains(info.getEglContextNativeHandle());
+            return !mContextRecord.contains(info.getEglContextNativeHandle());
         }
 //        synchronized (mReleaseContext) {
 //            long eglContextNativeHandle = info.getEglContextNativeHandle();

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecordManager.java
Patch:
@@ -238,7 +238,7 @@ public void clear() {
 
     public boolean isEglContextReleased(OpenGLInfo info) {
         synchronized (mContextRecord) {
-            return mContextRecord.contains(info.getEglContextNativeHandle());
+            return !mContextRecord.contains(info.getEglContextNativeHandle());
         }
 //        synchronized (mReleaseContext) {
 //            long eglContextNativeHandle = info.getEglContextNativeHandle();

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLInfo.java
Patch:
@@ -161,13 +161,13 @@ public boolean equals(Object o) {
         OpenGLInfo that = (OpenGLInfo) o;
         return id == that.id &&
                 getEglContextNativeHandle() == that.getEglContextNativeHandle() &&
-                threadId.equals(that.threadId) &&
+                /*threadId.equals(that.threadId) &&*/
                 type == that.type;
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(id, getEglContextNativeHandle(), threadId, type);
+        return Objects.hash(id, getEglContextNativeHandle(), type);
     }
 
 }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLInfo.java
Patch:
@@ -167,7 +167,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-        return Objects.hash(id, getEglContextNativeHandle(), threadId, type);
+        return Objects.hash(id, getEglContextNativeHandle(), type);
     }
 
 }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLInfo.java
Patch:
@@ -161,7 +161,7 @@ public boolean equals(Object o) {
         OpenGLInfo that = (OpenGLInfo) o;
         return id == that.id &&
                 getEglContextNativeHandle() == that.getEglContextNativeHandle() &&
-                threadId.equals(that.threadId) &&
+                /*threadId.equals(that.threadId) &&*/
                 type == that.type;
     }
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/OpenglLeakPlugin.java
Patch:
@@ -99,8 +99,7 @@ private void executeHook(IBinder iBinder) {
             }
 
             // hook
-            OpenGLHook.hookEglCreateContext();
-            OpenGLHook.hookEglDestroyContext(); // hook eglCreateContext/eglDestroyContext first
+            OpenGLHook.hookEgl(); // hook eglCreateContext/eglDestroyContext first
             OpenGLHook.getInstance().hook(FuncNameString.GL_GEN_TEXTURES, map.get(FuncNameString.GL_GEN_TEXTURES));
             OpenGLHook.getInstance().hook(FuncNameString.GL_DELETE_TEXTURES, map.get(FuncNameString.GL_DELETE_TEXTURES));
             OpenGLHook.getInstance().hook(FuncNameString.GL_GEN_BUFFERS, map.get(FuncNameString.GL_GEN_BUFFERS));

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/hook/OpenGLHook.java
Patch:
@@ -134,9 +134,7 @@ public boolean hook(String targetFuncName, int index) {
 
     private static native boolean hookGlRenderbufferStorage(int index);
 
-    public static native boolean hookEglCreateContext();
-
-    public static native boolean hookEglDestroyContext();
+    public static native boolean hookEgl();
 
     public static native String dumpNativeStack(long nativeStackPtr);
 

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/AbsHook.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.tencent.matrix.hook;
 
-import androidx.annotation.Nullable;
+import androidx.annotation.NonNull;
 
 /**
  * Created by Yves on 2020-03-18
@@ -40,7 +40,7 @@ public Status getStatus() {
         return mStatus;
     }
 
-    @Nullable
+    @NonNull
     protected abstract String getNativeLibraryName();
 
     protected abstract boolean onConfigure();

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/memory/MemoryHook.java
Patch:
@@ -19,7 +19,7 @@
 import android.text.TextUtils;
 
 import androidx.annotation.Keep;
-import androidx.annotation.Nullable;
+import androidx.annotation.NonNull;
 
 import com.tencent.matrix.hook.AbsHook;
 import com.tencent.matrix.hook.HookManager;
@@ -123,7 +123,7 @@ public void hook() throws HookManager.HookFailedException {
                 .commitHooks();
     }
 
-    @Nullable
+    @NonNull
     @Override
     protected String getNativeLibraryName() {
         return "matrix-memoryhook";

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/memory/WVPreAllocHook.java
Patch:
@@ -18,14 +18,14 @@
 
 import android.os.Build;
 
-import androidx.annotation.Nullable;
+import androidx.annotation.NonNull;
 
 import com.tencent.matrix.hook.AbsHook;
 
 public class WVPreAllocHook extends AbsHook {
     public static final WVPreAllocHook INSTANCE = new WVPreAllocHook();
 
-    @Nullable
+    @NonNull
     @Override
     protected String getNativeLibraryName() {
         return "matrix-memoryhook";

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/pthread/PthreadHook.java
Patch:
@@ -146,7 +146,7 @@ public void enableLogger(boolean enable) {
         }
     }
 
-    @Nullable
+    @NonNull
     @Override
     protected String getNativeLibraryName() {
         return "matrix-pthreadhook";

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/AbsHook.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.tencent.matrix.hook;
 
-import androidx.annotation.Nullable;
+import androidx.annotation.NonNull;
 
 /**
  * Created by Yves on 2020-03-18
@@ -40,7 +40,7 @@ public Status getStatus() {
         return mStatus;
     }
 
-    @Nullable
+    @NonNull
     protected abstract String getNativeLibraryName();
 
     protected abstract boolean onConfigure();

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/memory/MemoryHook.java
Patch:
@@ -19,7 +19,7 @@
 import android.text.TextUtils;
 
 import androidx.annotation.Keep;
-import androidx.annotation.Nullable;
+import androidx.annotation.NonNull;
 
 import com.tencent.matrix.hook.AbsHook;
 import com.tencent.matrix.hook.HookManager;
@@ -123,7 +123,7 @@ public void hook() throws HookManager.HookFailedException {
                 .commitHooks();
     }
 
-    @Nullable
+    @NonNull
     @Override
     protected String getNativeLibraryName() {
         return "matrix-memoryhook";

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/memory/WVPreAllocHook.java
Patch:
@@ -18,14 +18,14 @@
 
 import android.os.Build;
 
-import androidx.annotation.Nullable;
+import androidx.annotation.NonNull;
 
 import com.tencent.matrix.hook.AbsHook;
 
 public class WVPreAllocHook extends AbsHook {
     public static final WVPreAllocHook INSTANCE = new WVPreAllocHook();
 
-    @Nullable
+    @NonNull
     @Override
     protected String getNativeLibraryName() {
         return "matrix-memoryhook";

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/pthread/PthreadHook.java
Patch:
@@ -146,7 +146,7 @@ public void enableLogger(boolean enable) {
         }
     }
 
-    @Nullable
+    @NonNull
     @Override
     protected String getNativeLibraryName() {
         return "matrix-pthreadhook";

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/shrinker/ApkUtil.java
Patch:
@@ -216,7 +216,7 @@ public static void sevenZipFile(String sevenZipPath, String inputFile, String ou
             new File(sevenZipPath).setExecutable(true);
         }
         ProcessBuilder processBuilder = new ProcessBuilder();
-        processBuilder.command(sevenZipPath, "a", "-tzip", outputFile, inputFile, deflated ? "-mx9" : "-mx0");
+        processBuilder.command(sevenZipPath, "a", "-tzip", outputFile, inputFile, deflated ? "-mx5" : "-mx0");
         //Log.i(TAG, "%s", processBuilder.command())
         Process process = processBuilder.start();
 //        process.waitForProcessOutput(System.out, System.err);

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/shrinker/ApkUtil.java
Patch:
@@ -93,7 +93,7 @@ public static String parseEntryResourceType(String entry) {
         int prefixLength = entry.indexOf('/');
         if (prefixLength == -1) return "";
         if (!Util.isNullOrNil(entry)) {
-            String typeName = entry.substring(prefixLength, entry.lastIndexOf('/'));
+            String typeName = entry.substring(prefixLength + 1, entry.lastIndexOf('/'));
             if (!Util.isNullOrNil(typeName)) {
                 int index = typeName.indexOf('-');
                 if (index >= 0) {

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java
Patch:
@@ -96,7 +96,7 @@ private void sendResultNotification(DestroyedActivityInfo activityInfo, String h
         targetIntent.putExtra(SharePluginInfo.ISSUE_HPROF_PATH, hprofPath);
         targetIntent.putExtra(SharePluginInfo.ISSUE_LEAK_DETAIL, refChain);
 
-        PendingIntent pIntent = PendingIntent.getActivity(context, 0, targetIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+        PendingIntent pIntent = PendingIntent.getActivity(context, 0, targetIntent, Build.VERSION.SDK_INT >= 31 ? PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE : PendingIntent.FLAG_UPDATE_CURRENT);
 
         String dumpingHeapTitle = context.getString(R.string.resource_canary_leak_tip);
         ResourceConfig config = getWatcher().getResourcePlugin().getConfig();

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java
Patch:
@@ -96,7 +96,7 @@ private void sendResultNotification(DestroyedActivityInfo activityInfo, String h
         targetIntent.putExtra(SharePluginInfo.ISSUE_HPROF_PATH, hprofPath);
         targetIntent.putExtra(SharePluginInfo.ISSUE_LEAK_DETAIL, refChain);
 
-        PendingIntent pIntent = PendingIntent.getActivity(context, 0, targetIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+        PendingIntent pIntent = PendingIntent.getActivity(context, 0, targetIntent, Build.VERSION.SDK_INT >= 31 ? PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE : PendingIntent.FLAG_UPDATE_CURRENT);
 
         String dumpingHeapTitle = context.getString(R.string.resource_canary_leak_tip);
         ResourceConfig config = getWatcher().getResourcePlugin().getConfig();

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/shrinker/ApkUtil.java
Patch:
@@ -93,7 +93,7 @@ public static String parseEntryResourceType(String entry) {
         int prefixLength = entry.indexOf('/');
         if (prefixLength == -1) return "";
         if (!Util.isNullOrNil(entry)) {
-            String typeName = entry.substring(prefixLength, entry.lastIndexOf('/'));
+            String typeName = entry.substring(prefixLength + 1, entry.lastIndexOf('/'));
             if (!Util.isNullOrNil(typeName)) {
                 int index = typeName.indexOf('-');
                 if (index >= 0) {

File: matrix/matrix-android/matrix-arscutil/src/main/java/com/tencent/mm/arscutil/ArscUtil.java
Patch:
@@ -115,7 +115,7 @@ public static void removeResource(ResTable resTable, int resourceId, String reso
                 resType.refresh();
             }
             if (resNameStringPoolIndex != -1) {
-                Log.i(TAG, "try to remove %s (%H), find resource %s", resourceName, resourceId, ResStringBlock.resolveStringPoolEntry(resPackage.getResNamePool().getStrings().get(resNameStringPoolIndex).array(), resPackage.getResNamePool().getCharSet()));
+                Log.d(TAG, "try to remove %s (%H), find resource %s", resourceName, resourceId, ResStringBlock.resolveStringPoolEntry(resPackage.getResNamePool().getStrings().get(resNameStringPoolIndex).array(), resPackage.getResNamePool().getCharSet()));
             }
             resPackage.shrinkResNameStringPool();
             resPackage.refresh();
@@ -126,7 +126,7 @@ public static void removeResource(ResTable resTable, int resourceId, String reso
     public static boolean replaceFileResource(ResTable resTable, int sourceResId, String sourceFile, int targetResId, String targetFile) throws IOException {
         int sourcePkgId = getPackageId(sourceResId);
         int targetPkgId = getPackageId(targetResId);
-        Log.i(TAG, "try to replace %H(%s) with %H(%s)", sourceResId, sourceFile, targetResId, targetFile);
+        Log.d(TAG, "try to replace %H(%s) with %H(%s)", sourceResId, sourceFile, targetResId, targetFile);
         if (sourcePkgId == targetPkgId) {
             ResPackage resPackage = findResPackage(resTable, sourcePkgId);
             if (resPackage != null) {
@@ -252,7 +252,7 @@ public static void replaceResEntryName(ResTable resTable, Map<Integer, String> r
     }
 
     public static boolean replaceResFileName(ResTable resTable, int resId, String srcFileName, String targetFileName) {
-        Log.i(TAG, "try to replace resource (%H) file %s with %s", resId, srcFileName, targetFileName);
+        Log.d(TAG, "try to replace resource (%H) file %s with %s", resId, srcFileName, targetFileName);
         ResPackage resPackage = findResPackage(resTable, getPackageId(resId));
         boolean result = false;
         if (resPackage != null) {

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/OpenglLeakPlugin.java
Patch:
@@ -115,8 +115,8 @@ private void executeHook(IBinder iBinder) {
             OpenGLHook.getInstance().hook(FuncNameString.GL_BIND_RENDERBUFFER, map.get(FuncNameString.GL_BIND_RENDERBUFFER));
             OpenGLHook.getInstance().hook(FuncNameString.GL_BUFFER_DATA, map.get(FuncNameString.GL_BUFFER_DATA));
             OpenGLHook.getInstance().hook(FuncNameString.GL_RENDER_BUFFER_STORAGE, map.get(FuncNameString.GL_RENDER_BUFFER_STORAGE));
-//            OpenGLHook.getInstance().hookEglCreate();
-//            OpenGLHook.getInstance().hookEglDestory();
+            OpenGLHook.getInstance().hookEglCreate();
+            OpenGLHook.getInstance().hookEglDestory();
             MatrixLog.e(TAG, "hook finish");
         } catch (Throwable e) {
             e.printStackTrace();

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/config/SharePluginInfo.java
Patch:
@@ -32,7 +32,9 @@ public class SharePluginInfo {
     public static final String ISSUE_COST_MILLIS   = "cost_millis";
     public static final String ISSUE_RETRY_COUNT   = "retry_count";
     public static final String ISSUE_LEAK_PROCESS  = "leak_process";
+    @Deprecated
     public static final String ISSUE_DUMP_DATA     = "dump_data";
+    public static final String ISSUE_HPROF_PATH     = "hprof_path";
     public static final String ISSUE_NOTIFICATION_ID     = "notification_id";
 
     public static final class IssueType {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -75,7 +75,7 @@ public static Handler getDefaultHandler() {
         return defaultHandler;
     }
 
-    public static HandlerThread getNewHandlerThread(String name, int priority) {
+    public static synchronized HandlerThread getNewHandlerThread(String name, int priority) {
         for (Iterator<HandlerThread> i = handlerThreads.iterator(); i.hasNext(); ) {
             HandlerThread element = i.next();
             if (!element.isAlive()) {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -75,7 +75,7 @@ public static Handler getDefaultHandler() {
         return defaultHandler;
     }
 
-    public static HandlerThread getNewHandlerThread(String name, int priority) {
+    public static synchronized HandlerThread getNewHandlerThread(String name, int priority) {
         for (Iterator<HandlerThread> i = handlerThreads.iterator(); i.hasNext(); ) {
             HandlerThread element = i.next();
             if (!element.isAlive()) {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/stats/HealthStatsFeature.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Map;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
 /**
@@ -257,6 +258,7 @@ public HealthStatsSnapshot currHealthStatsSnapshot() {
 
     public static class HealthStatsSnapshot extends Snapshot<HealthStatsSnapshot> {
         @VisibleForTesting
+        @Nullable
         public HealthStats healthStats;
         public Map<String, Object> extras = Collections.emptyMap();
 

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/stats/HealthStatsFeature.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Map;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
 /**
@@ -257,6 +258,7 @@ public HealthStatsSnapshot currHealthStatsSnapshot() {
 
     public static class HealthStatsSnapshot extends Snapshot<HealthStatsSnapshot> {
         @VisibleForTesting
+        @Nullable
         public HealthStats healthStats;
         public Map<String, Object> extras = Collections.emptyMap();
 

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/hooks/TestHooksActivity.java
Patch:
@@ -24,7 +24,7 @@
 import com.tencent.matrix.hook.HookManager;
 import com.tencent.matrix.hook.memory.MemoryHook;
 import com.tencent.matrix.hook.pthread.PthreadHook;
-import com.tencent.matrix.jectl.JeCtl;
+import com.tencent.matrix.mallctl.MallCtl;
 
 import java.io.File;
 
@@ -231,8 +231,8 @@ public void threadTest(View view) {
     }
 
     public void jectlTest(View view) {
-        Log.d(TAG, "jemalloc version = " + JeCtl.version());
-        Log.d(TAG, "set retain, old value = " + JeCtl.setRetain(true));
+        Log.d(TAG, "jemalloc version = " + MallCtl.jeVersion());
+        Log.d(TAG, "set retain, old value = " + MallCtl.jeSetRetain(true));
     }
 
     public void killSelf(View view) {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/hooks/TestHooksActivity.java
Patch:
@@ -24,7 +24,7 @@
 import com.tencent.matrix.hook.HookManager;
 import com.tencent.matrix.hook.memory.MemoryHook;
 import com.tencent.matrix.hook.pthread.PthreadHook;
-import com.tencent.matrix.jectl.JeCtl;
+import com.tencent.matrix.mallctl.MallCtl;
 
 import java.io.File;
 
@@ -231,8 +231,8 @@ public void threadTest(View view) {
     }
 
     public void jectlTest(View view) {
-        Log.d(TAG, "jemalloc version = " + JeCtl.version());
-        Log.d(TAG, "set retain, old value = " + JeCtl.setRetain(true));
+        Log.d(TAG, "jemalloc version = " + MallCtl.jeVersion());
+        Log.d(TAG, "set retain, old value = " + MallCtl.jeSetRetain(true));
     }
 
     public void killSelf(View view) {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/BatteryEventDelegate.java
Patch:
@@ -669,7 +669,7 @@ public DefaultListenerImpl(boolean keepAlive) {
 
             @Override
             public boolean onStateChanged(String event) {
-                return !mKeepAlive;
+                throw new RuntimeException("Use #onStateChanged(BatteryState, String) instead");
             }
 
             @Override

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/BatteryCanaryUtil.java
Patch:
@@ -685,7 +685,8 @@ public static int getBatteryCapacityImmediately(Context context) {
             Method method;
             try {
                 method = profileClass.getMethod("getAveragePower", String.class);
-                return (int) method.invoke(profileObject, PowerProfile.POWER_BATTERY_CAPACITY);
+                double capacity = (double) method.invoke(profileObject, PowerProfile.POWER_BATTERY_CAPACITY);
+                return (int) capacity;
             } catch (Throwable e) {
                 MatrixLog.w(TAG, "get PowerProfile failed: " + e.getMessage());
             }

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/BatteryCanaryUtil.java
Patch:
@@ -685,7 +685,8 @@ public static int getBatteryCapacityImmediately(Context context) {
             Method method;
             try {
                 method = profileClass.getMethod("getAveragePower", String.class);
-                return (int) method.invoke(profileObject, PowerProfile.POWER_BATTERY_CAPACITY);
+                double capacity = (double) method.invoke(profileObject, PowerProfile.POWER_BATTERY_CAPACITY);
+                return (int) capacity;
             } catch (Throwable e) {
                 MatrixLog.w(TAG, "get PowerProfile failed: " + e.getMessage());
             }

File: matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/Examples.java
Patch:
@@ -146,6 +146,7 @@ public void exampleForCpuLoadNormalize() {
                 Assert.assertTrue("cpuLoad: " + cpuLoad, cpuLoad >= 0);
 
                 MonitorFeature.Snapshot.Sampler.Result result = compositor.getSamplingResult(DeviceStatMonitorFeature.CpuFreqSnapshot.class);
+                Assert.assertNotNull(result);
                 List<int[]> cpuFreqSteps = BatteryCanaryUtil.getCpuFreqSteps();
                 long sumMax = 0;
                 for (int[] item : cpuFreqSteps) {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/hooks/TestHooksActivity.java
Patch:
@@ -82,7 +82,6 @@ public void onReport(ReportEvent type, Object... args) {
                 WeChatBacktrace.instance()
                         .configure(getApplication())
                         .setBacktraceMode(WeChatBacktrace.Mode.Fp)
-                        .setQuickenAlwaysOn()
                         .commit();
             } else {
                 WeChatBacktrace.instance()

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/hooks/TestHooksActivity.java
Patch:
@@ -82,7 +82,6 @@ public void onReport(ReportEvent type, Object... args) {
                 WeChatBacktrace.instance()
                         .configure(getApplication())
                         .setBacktraceMode(WeChatBacktrace.Mode.Fp)
-                        .setQuickenAlwaysOn()
                         .commit();
             } else {
                 WeChatBacktrace.instance()

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/CanaryWorkerService.java
Patch:
@@ -25,7 +25,6 @@
 
 import com.tencent.matrix.Matrix;
 import com.tencent.matrix.resource.analyzer.model.HeapDump;
-import com.tencent.matrix.resource.dumper.DumpStorageManager;
 import com.tencent.matrix.resource.hproflib.HprofBufferShrinker;
 import com.tencent.matrix.util.MatrixLog;
 
@@ -126,9 +125,9 @@ private void doShrinkHprofAndReport(HeapDump heapDump) {
 
     private String getShrinkHprofName(File origHprof) {
         final String origHprofName = origHprof.getName();
-        final int extPos = origHprofName.indexOf(DumpStorageManager.HPROF_EXT);
+        final int extPos = origHprofName.indexOf(".hprof");
         final String namePrefix = origHprofName.substring(0, extPos);
-        return namePrefix + "_shrink" + DumpStorageManager.HPROF_EXT;
+        return namePrefix + "_shrink.hprof";
     }
 
     private String getResultZipName(String prefix) {

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ResourcePlugin.java
Patch:
@@ -25,6 +25,7 @@
 import com.tencent.matrix.plugin.PluginListener;
 import com.tencent.matrix.resource.config.ResourceConfig;
 import com.tencent.matrix.resource.config.SharePluginInfo;
+import com.tencent.matrix.resource.dumper.HprofFileManager;
 import com.tencent.matrix.resource.processor.BaseLeakProcessor;
 import com.tencent.matrix.resource.watcher.ActivityRefWatcher;
 import com.tencent.matrix.util.MatrixLog;
@@ -68,6 +69,7 @@ public void init(Application app, PluginListener listener) {
             return;
         }
         mWatcher = new ActivityRefWatcher(app, this);
+        HprofFileManager.INSTANCE.checkExpiredFile();
     }
 
     @Override

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/SilenceAnalyseProcessor.java
Patch:
@@ -55,6 +55,7 @@ public void onReceive(Context context, Intent intent) {
 
     @Override
     public boolean process(DestroyedActivityInfo destroyedActivityInfo) {
+        publishIssue(SharePluginInfo.IssueType.LEAK_FOUND, ResourceConfig.DumpMode.NO_DUMP, destroyedActivityInfo.mActivityName, destroyedActivityInfo.mKey, "no dump", "0");
         return onLeak(destroyedActivityInfo.mActivityName, destroyedActivityInfo.mKey);
     }
 

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ForkAnalyseProcessor.java
Patch:
@@ -30,6 +30,8 @@ public ForkAnalyseProcessor(ActivityRefWatcher watcher) {
 
     @Override
     public boolean process(DestroyedActivityInfo destroyedActivityInfo) {
+        publishIssue(SharePluginInfo.IssueType.LEAK_FOUND, ResourceConfig.DumpMode.NO_DUMP, destroyedActivityInfo.mActivityName, destroyedActivityInfo.mKey, "no dump", "0");
+
         if (Build.VERSION.SDK_INT > ResourceConfig.FORK_DUMP_SUPPORTED_API_GUARD) {
             MatrixLog.e(TAG, "cannot fork-dump with unsupported API version " + Build.VERSION.SDK_INT);
             publishIssue(

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ForkDumpProcessor.java
Patch:
@@ -6,6 +6,7 @@
 import com.tencent.matrix.resource.analyzer.model.DestroyedActivityInfo;
 import com.tencent.matrix.resource.analyzer.model.HeapDump;
 import com.tencent.matrix.resource.config.ResourceConfig;
+import com.tencent.matrix.resource.config.SharePluginInfo;
 import com.tencent.matrix.resource.dumper.HprofFileManager;
 import com.tencent.matrix.resource.watcher.ActivityRefWatcher;
 import com.tencent.matrix.util.MatrixLog;
@@ -29,6 +30,8 @@ public ForkDumpProcessor(ActivityRefWatcher watcher) {
 
     @Override
     public boolean process(DestroyedActivityInfo destroyedActivityInfo) {
+        publishIssue(SharePluginInfo.IssueType.LEAK_FOUND, ResourceConfig.DumpMode.NO_DUMP, destroyedActivityInfo.mActivityName, destroyedActivityInfo.mKey, "no dump", "0");
+
         if (Build.VERSION.SDK_INT > ResourceConfig.FORK_DUMP_SUPPORTED_API_GUARD) {
             MatrixLog.e(TAG, "unsupported API version " + Build.VERSION.SDK_INT);
             return false;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/LazyForkAnalyzeProcessor.java
Patch:
@@ -113,6 +113,8 @@ public void onDestroy() {
 
     @Override
     public boolean process(DestroyedActivityInfo destroyedActivityInfo) {
+        publishIssue(SharePluginInfo.IssueType.LEAK_FOUND, ResourceConfig.DumpMode.NO_DUMP, destroyedActivityInfo.mActivityName, destroyedActivityInfo.mKey, "no dump", "0");
+
         if (Build.VERSION.SDK_INT > ResourceConfig.FORK_DUMP_SUPPORTED_API_GUARD) {
             MatrixLog.e(TAG, "cannot fork-dump with unsupported API version " + Build.VERSION.SDK_INT);
             publishIssue(

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/SilenceAnalyseProcessor.java
Patch:
@@ -55,6 +55,7 @@ public void onReceive(Context context, Intent intent) {
 
     @Override
     public boolean process(DestroyedActivityInfo destroyedActivityInfo) {
+        publishIssue(SharePluginInfo.IssueType.LEAK_FOUND, ResourceConfig.DumpMode.NO_DUMP, destroyedActivityInfo.mActivityName, destroyedActivityInfo.mKey, "no dump", "0");
         return onLeak(destroyedActivityInfo.mActivityName, destroyedActivityInfo.mKey);
     }
 

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -182,7 +182,6 @@ private TracePlugin configureTracePlugin(DynamicConfigImplDemo dynamicConfig) {
                 .enableAnrTrace(traceEnable)
                 .enableStartup(traceEnable)
                 .enableIdleHandlerTrace(traceEnable)                    // Introduced in Matrix 2.0
-                .enableMainThreadPriorityTrace(true)                    // Introduced in Matrix 2.0
                 .enableSignalAnrTrace(signalAnrTraceEnable)             // Introduced in Matrix 2.0
                 .anrTracePath(anrTraceFile.getAbsolutePath())
                 .printTracePath(printTraceFile.getAbsolutePath())
@@ -261,7 +260,7 @@ private BatteryMonitorPlugin configureBatteryCanary(Context context) {
     }
 
     private MatrixLifecycleConfig configureMatrixLifecycle() {
-        return new MatrixLifecycleConfig(new SupervisorConfig(true, true, new ArrayList<String>()), true, true, new LifecycleThreadConfig());
+        return new MatrixLifecycleConfig(new SupervisorConfig(true, true, new ArrayList<String>()), true, true, new LifecycleThreadConfig(), true);
     }
 
     public static Context getContext() {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -182,7 +182,6 @@ private TracePlugin configureTracePlugin(DynamicConfigImplDemo dynamicConfig) {
                 .enableAnrTrace(traceEnable)
                 .enableStartup(traceEnable)
                 .enableIdleHandlerTrace(traceEnable)                    // Introduced in Matrix 2.0
-                .enableMainThreadPriorityTrace(true)                    // Introduced in Matrix 2.0
                 .enableSignalAnrTrace(signalAnrTraceEnable)             // Introduced in Matrix 2.0
                 .anrTracePath(anrTraceFile.getAbsolutePath())
                 .printTracePath(printTraceFile.getAbsolutePath())
@@ -261,7 +260,7 @@ private BatteryMonitorPlugin configureBatteryCanary(Context context) {
     }
 
     private MatrixLifecycleConfig configureMatrixLifecycle() {
-        return new MatrixLifecycleConfig(new SupervisorConfig(true, true, new ArrayList<String>()), true, true, new LifecycleThreadConfig());
+        return new MatrixLifecycleConfig(new SupervisorConfig(true, true, new ArrayList<String>()), true, true, new LifecycleThreadConfig(), true);
     }
 
     public static Context getContext() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/ThreadTracer.java
Patch:
@@ -44,7 +44,9 @@ public class ThreadTracer extends Tracer {
     @Override
     protected void onAlive() {
         super.onAlive();
-        nativeInitThreadHook(enableThreadPriorityTracer ? 1 : 0, enablePthreadKeyTracer ? 1 : 0);
+        if (enableThreadPriorityTracer || enablePthreadKeyTracer) {
+            nativeInitThreadHook(enableThreadPriorityTracer ? 1 : 0, enablePthreadKeyTracer ? 1 : 0);
+        }
     }
 
     @Override

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/ThreadTracer.java
Patch:
@@ -44,7 +44,9 @@ public class ThreadTracer extends Tracer {
     @Override
     protected void onAlive() {
         super.onAlive();
-        nativeInitThreadHook(enableThreadPriorityTracer ? 1 : 0, enablePthreadKeyTracer ? 1 : 0);
+        if (enableThreadPriorityTracer || enablePthreadKeyTracer) {
+            nativeInitThreadHook(enableThreadPriorityTracer ? 1 : 0, enablePthreadKeyTracer ? 1 : 0);
+        }
     }
 
     @Override

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ForkAnalyseProcessor.java
Patch:
@@ -63,7 +63,7 @@ private boolean dumpAndAnalyse(String activity, String key) {
         try {
             hprof = HprofFileManager.INSTANCE.prepareHprofFile("FAP");
         } catch (FileNotFoundException e) {
-            MatrixLog.printErrStackTrace(TAG, e , "");
+            MatrixLog.printErrStackTrace(TAG, e, "");
         }
 
         if (hprof != null) {

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ForkDumpProcessor.java
Patch:
@@ -40,7 +40,7 @@ public boolean process(DestroyedActivityInfo destroyedActivityInfo) {
         try {
             hprof = HprofFileManager.INSTANCE.prepareHprofFile("FDP");
         } catch (FileNotFoundException e) {
-            MatrixLog.printErrStackTrace(TAG, e , "");
+            MatrixLog.printErrStackTrace(TAG, e, "");
         }
 
         if (hprof == null) {

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/LazyForkAnalyzeProcessor.java
Patch:
@@ -144,7 +144,7 @@ private boolean dumpAndAnalyse(String activity, String key) {
         try {
             hprof = HprofFileManager.INSTANCE.prepareHprofFile("LFAP");
         } catch (FileNotFoundException e) {
-            MatrixLog.printErrStackTrace(TAG, e , "");
+            MatrixLog.printErrStackTrace(TAG, e, "");
         }
 
         if (hprof != null) {

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java
Patch:
@@ -179,7 +179,7 @@ private ManualDumpData dumpAndAnalyse(String activity, String key) {
         try {
             file = HprofFileManager.INSTANCE.prepareHprofFile("MDP");
         } catch (FileNotFoundException e) {
-            MatrixLog.printErrStackTrace(TAG, e , "");
+            MatrixLog.printErrStackTrace(TAG, e, "");
         }
         final ActivityLeakResult result = MemoryUtil.dumpAndAnalyze(file.getAbsolutePath(), key, 600);
         if (result.mLeakFound) {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/JiffiesMonitorFeature.java
Patch:
@@ -550,6 +550,7 @@ protected UidJiffiesSnapshot computeDelta() {
                                 empty.totalJiffies = DigitEntry.of(0L);
                                 empty.threadEntries = ListEntry.ofEmpty();
                                 empty.threadNum = DigitEntry.of(0);
+                                last = empty;
                             }
                             Delta<JiffiesSnapshot> deltaPidJiffies = end.diff(last);
                             delta.pidDeltaJiffiesList.add(deltaPidJiffies);

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/JiffiesMonitorFeature.java
Patch:
@@ -509,6 +509,7 @@ public static UidJiffiesSnapshot of(Context context, boolean isStatPidProc) {
                 int pid = item.first;
                 String procName = String.valueOf(item.second);
                 if (ProcStatUtil.exists(pid)) {
+                    MatrixLog.i(TAG, " #exits: " + "/proc/" + pid + "/stat");
                     JiffiesSnapshot snapshot = JiffiesSnapshot.currentJiffiesSnapshot(ProcessInfo.getProcessInfo(pid), isStatPidProc);
                     snapshot.name = TopThreadIndicator.getProcSuffix(procName);
                     sum += snapshot.totalJiffies.get();

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/DeviceStatMonitorFeature.java
Patch:
@@ -228,7 +228,7 @@ public boolean onStateChanged(String event) {
                                 break;
                             case Intent.ACTION_SCREEN_ON:
                                 if (!mIsCharging) {
-                                    mListener.accept(AppStats.DEV_STAT_CHARGING);
+                                    mListener.accept(AppStats.DEV_STAT_SCREEN_ON);
                                 }
                                 break;
                             case Intent.ACTION_SCREEN_OFF:

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -135,9 +135,9 @@ public void dispatchEnd() {
 
         });
         this.isInit = true;
+        choreographer = Choreographer.getInstance();
         frameIntervalNanos = ReflectUtils.reflectObject(choreographer, "mFrameIntervalNanos", Constants.DEFAULT_FRAME_DURATION);
         if (!useFrameMetrics) {
-            choreographer = Choreographer.getInstance();
             callbackQueueLock = ReflectUtils.reflectObject(choreographer, "mLock", new Object());
             callbackQueues = ReflectUtils.reflectObject(choreographer, "mCallbackQueues", null);
             if (null != callbackQueues) {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -135,9 +135,9 @@ public void dispatchEnd() {
 
         });
         this.isInit = true;
+        choreographer = Choreographer.getInstance();
         frameIntervalNanos = ReflectUtils.reflectObject(choreographer, "mFrameIntervalNanos", Constants.DEFAULT_FRAME_DURATION);
         if (!useFrameMetrics) {
-            choreographer = Choreographer.getInstance();
             callbackQueueLock = ReflectUtils.reflectObject(choreographer, "mLock", new Object());
             callbackQueues = ReflectUtils.reflectObject(choreographer, "mCallbackQueues", null);
             if (null != callbackQueues) {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/MonitorFeature.java
Patch:
@@ -469,7 +469,7 @@ public void run() {
             double mSampleMin = Double.MIN_VALUE;
             double mSampleAvg = Double.MIN_VALUE;
 
-            public Sampler( Handler handler, Callable<? extends Number> onSampling) {
+            public Sampler(Handler handler, Callable<? extends Number> onSampling) {
                 this("default", handler, onSampling);
             }
 

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/JiffiesMonitorFeature.java
Patch:
@@ -8,6 +8,7 @@
 
 import com.tencent.matrix.Matrix;
 import com.tencent.matrix.batterycanary.monitor.BatteryMonitorCore.Callback;
+import com.tencent.matrix.batterycanary.monitor.feature.MonitorFeature.Snapshot;
 import com.tencent.matrix.batterycanary.monitor.feature.MonitorFeature.Snapshot.Entry.DigitEntry;
 import com.tencent.matrix.batterycanary.monitor.feature.MonitorFeature.Snapshot.Entry.ListEntry;
 import com.tencent.matrix.batterycanary.utils.BatteryCanaryUtil;

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/util/ApkUtil.java
Patch:
@@ -24,7 +24,6 @@
 import org.jf.baksmali.BaksmaliOptions;
 import org.jf.baksmali.formatter.BaksmaliWriter;
 import org.jf.dexlib2.iface.ClassDef;
-import org.jf.util.IndentingWriter;
 
 import java.io.BufferedWriter;
 import java.io.ByteArrayOutputStream;

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/utils/ActivityRecorder.java
Patch:
@@ -60,6 +60,7 @@ public void onActivityStarted(@NonNull Activity activity) {
     @Override
     public void onActivityResumed(@NonNull Activity activity) {
         currentActivityInfo = new ActivityInfo(activity.hashCode(), activity.getLocalClassName());
+        OpenGLHook.getInstance().updateCurrActivity(currentActivityInfo.toString());
     }
 
     @Override

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/utils/ActivityRecorder.java
Patch:
@@ -60,6 +60,7 @@ public void onActivityStarted(@NonNull Activity activity) {
     @Override
     public void onActivityResumed(@NonNull Activity activity) {
         currentActivityInfo = new ActivityInfo(activity.hashCode(), activity.getLocalClassName());
+        OpenGLHook.getInstance().updateCurrActivity(currentActivityInfo.toString());
     }
 
     @Override

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/LeakMonitorForBackstage.java
Patch:
@@ -68,9 +68,9 @@ public void run() {
                         if (null != mLeakListener) {
                             if (!ResRecordManager.getInstance().isGLInfoRelease(item)) {
                                 mLeakListener.onLeak(item);
+                                allInfos.add(item);
                             }
                         }
-                        allInfos.add(item);
                         it.remove();
                     }
                 }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecordManager.java
Patch:
@@ -279,7 +279,7 @@ private String getResListString(List<OpenGLDumpInfo> resList) {
         AutoWrapBuilder result = new AutoWrapBuilder();
         for (OpenGLDumpInfo report : resList) {
             result.append(String.format(" alloc count = %d", report.getAllocCount()))
-                    .append(String.format(" egl is release = %d", report.innerInfo.isEglContextReleased()))
+                    .append(String.format(" egl context is release = %s", report.innerInfo.isEglContextReleased()))
                     .append(String.format(" egl surface is release = %s", report.innerInfo.isEglSurfaceRelease()))
                     .append(String.format(" total size = %s", report.getTotalSize()))
                     .append(String.format(" id = %s", report.getAllocIdList()))

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/lifecycle/LifecycleTest.java
Patch:
@@ -13,6 +13,7 @@
 import com.tencent.matrix.lifecycle.owners.ProcessUIResumedStateOwner;
 import com.tencent.matrix.lifecycle.owners.ProcessUIStartedStateOwner;
 import com.tencent.matrix.lifecycle.supervisor.AppExplicitBackgroundOwner;
+import com.tencent.matrix.lifecycle.supervisor.AppStagedBackgroundOwner;
 import com.tencent.matrix.lifecycle.supervisor.AppUIForegroundOwner;
 import com.tencent.matrix.lifecycle.supervisor.ProcessSupervisor;
 import com.tencent.matrix.listeners.IAppForeground;
@@ -109,7 +110,7 @@ public void off() {
             }
         });
 
-        ProcessSupervisor.INSTANCE.getAppStagedBackgroundOwner().observeForever(new IStateObserver() {
+        AppStagedBackgroundOwner.INSTANCE.observeForever(new IStateObserver() {
             @Override
             public void on() {
                 MatrixLog.d(TAG, "AppStagedBg: on");

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-analyzer/src/main/java/com/tencent/matrix/resource/analyzer/model/ActivityLeakResult.java
Patch:
@@ -105,7 +105,7 @@ public String toString() {
         StringBuilder sb = new StringBuilder("Leak Reference:");
         if (referenceChain != null) {
             for (ReferenceTraceElement element : referenceChain.elements) {
-                sb.append(element.toString()).append(";");
+                sb.append(element.toCollectableString()).append(";");
             }
         }
 

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ForkAnalyseProcessor.java
Patch:
@@ -60,7 +60,7 @@ private boolean dumpAndAnalyse(String activity, String key) {
         final File hprof = getDumpStorageManager().newHprofFile();
 
         if (hprof != null) {
-            if (!MemoryUtil.dump(hprof.getPath())) {
+            if (!MemoryUtil.dump(hprof.getPath(), 600)) {
                 MatrixLog.e(TAG, String.format("heap dump for further analyzing activity with key [%s] was failed, just ignore.",
                         key));
                 return false;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ForkDumpProcessor.java
Patch:
@@ -41,7 +41,7 @@ public boolean process(DestroyedActivityInfo destroyedActivityInfo) {
             return true;
         }
 
-        if (!MemoryUtil.dump(hprof.getPath())) {
+        if (!MemoryUtil.dump(hprof.getPath(), 600)) {
             MatrixLog.e(TAG, String.format("heap dump for further analyzing activity with key [%s] was failed, just ignore.",
                     destroyedActivityInfo.mKey));
             return true;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/LazyForkAnalyzeProcessor.java
Patch:
@@ -141,7 +141,7 @@ private boolean dumpAndAnalyse(String activity, String key) {
         final File hprof = getDumpStorageManager().newHprofFile();
 
         if (hprof != null) {
-            if (!MemoryUtil.dump(hprof.getPath())) {
+            if (!MemoryUtil.dump(hprof.getPath(), 600)) {
                 MatrixLog.e(TAG, String.format("heap dump for further analyzing activity with key [%s] was failed, just ignore.",
                         key));
                 return false;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java
Patch:
@@ -174,7 +174,7 @@ private ManualDumpData dumpAndAnalyse(String activity, String key) {
         getWatcher().triggerGc();
 
         File file = getDumpStorageManager().newHprofFile();
-        final ActivityLeakResult result = MemoryUtil.dumpAndAnalyze(file.getAbsolutePath(), key);
+        final ActivityLeakResult result = MemoryUtil.dumpAndAnalyze(file.getAbsolutePath(), key, 600);
         if (result.mLeakFound) {
             final String leakChain = result.toString();
             publishIssue(

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ForkAnalyseProcessor.java
Patch:
@@ -60,7 +60,7 @@ private boolean dumpAndAnalyse(String activity, String key) {
         final File hprof = getDumpStorageManager().newHprofFile();
 
         if (hprof != null) {
-            if (!MemoryUtil.dump(hprof.getPath())) {
+            if (!MemoryUtil.dump(hprof.getPath(), 600)) {
                 MatrixLog.e(TAG, String.format("heap dump for further analyzing activity with key [%s] was failed, just ignore.",
                         key));
                 return false;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ForkDumpProcessor.java
Patch:
@@ -41,7 +41,7 @@ public boolean process(DestroyedActivityInfo destroyedActivityInfo) {
             return true;
         }
 
-        if (!MemoryUtil.dump(hprof.getPath())) {
+        if (!MemoryUtil.dump(hprof.getPath(), 600)) {
             MatrixLog.e(TAG, String.format("heap dump for further analyzing activity with key [%s] was failed, just ignore.",
                     destroyedActivityInfo.mKey));
             return true;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/LazyForkAnalyzeProcessor.java
Patch:
@@ -141,7 +141,7 @@ private boolean dumpAndAnalyse(String activity, String key) {
         final File hprof = getDumpStorageManager().newHprofFile();
 
         if (hprof != null) {
-            if (!MemoryUtil.dump(hprof.getPath())) {
+            if (!MemoryUtil.dump(hprof.getPath(), 600)) {
                 MatrixLog.e(TAG, String.format("heap dump for further analyzing activity with key [%s] was failed, just ignore.",
                         key));
                 return false;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java
Patch:
@@ -174,7 +174,7 @@ private ManualDumpData dumpAndAnalyse(String activity, String key) {
         getWatcher().triggerGc();
 
         File file = getDumpStorageManager().newHprofFile();
-        final ActivityLeakResult result = MemoryUtil.dumpAndAnalyze(file.getAbsolutePath(), key);
+        final ActivityLeakResult result = MemoryUtil.dumpAndAnalyze(file.getAbsolutePath(), key, 600);
         if (result.mLeakFound) {
             final String leakChain = result.toString();
             publishIssue(

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -30,6 +30,7 @@
 import com.tencent.matrix.hook.pthread.PthreadHook;
 import com.tencent.matrix.iocanary.IOCanaryPlugin;
 import com.tencent.matrix.iocanary.config.IOConfig;
+import com.tencent.matrix.lifecycle.LifecycleThreadConfig;
 import com.tencent.matrix.lifecycle.MatrixLifecycleConfig;
 import com.tencent.matrix.lifecycle.supervisor.SupervisorConfig;
 import com.tencent.matrix.memory.canary.MemoryCanaryPlugin;
@@ -252,7 +253,7 @@ private BatteryMonitorPlugin configureBatteryCanary() {
     }
 
     private MatrixLifecycleConfig configureMatrixLifecycle() {
-        return new MatrixLifecycleConfig(new SupervisorConfig(true, true, new ArrayList<String>()), true, true);
+        return new MatrixLifecycleConfig(new SupervisorConfig(true, true, new ArrayList<String>()), true, true, new LifecycleThreadConfig());
     }
 
     public static Context getContext() {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/lifecycle/LifecycleTest.java
Patch:
@@ -96,12 +96,12 @@ public void off() {
         ProcessSupervisor.INSTANCE.getAppUIForegroundOwner().observeForever(new IStateObserver() {
             @Override
             public void on() {
-                MatrixLog.d(TAG, "AppUI: on ...... %s", ProcessSupervisor.INSTANCE.recentScene());
+                MatrixLog.d(TAG, "AppUI: on ...... %s", ProcessSupervisor.INSTANCE.getRecentScene());
             }
 
             @Override
             public void off() {
-                MatrixLog.d(TAG, "AppUI: off ...... %s", ProcessSupervisor.INSTANCE.recentScene());
+                MatrixLog.d(TAG, "AppUI: off ...... %s", ProcessSupervisor.INSTANCE.getRecentScene());
             }
         });
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -28,6 +28,7 @@
 import androidx.annotation.RequiresApi;
 
 import com.tencent.matrix.Matrix;
+import com.tencent.matrix.lifecycle.owners.ProcessUILifecycleOwner;
 import com.tencent.matrix.report.Issue;
 import com.tencent.matrix.trace.TracePlugin;
 import com.tencent.matrix.trace.config.SharePluginInfo;
@@ -148,7 +149,7 @@ private void notifyListener(final String focusedActivity, final long startNs, fi
                     try {
                         if (MatrixUtil.getTopActivityName() != null) {
                             long lastResumeTime = lastResumeTimeMap.get(MatrixUtil.getTopActivityName());
-                            dropFrameListener.dropFrame(dropFrame, MatrixUtil.getTopActivityName(), lastResumeTime);
+                            dropFrameListener.dropFrame(dropFrame, jitter, MatrixUtil.getTopActivityName(), lastResumeTime);
                         }
                     } catch (Exception e) {
                         MatrixLog.e(TAG, "dropFrameListener error e:" + e.getMessage());
@@ -379,7 +380,7 @@ public void onFrameMetricsAvailable(Window window, FrameMetrics frameMetrics, in
                     long vsynTime = frameMetricsCopy.getMetric(FrameMetrics.VSYNC_TIMESTAMP);
                     long intendedVsyncTime = frameMetricsCopy.getMetric(FrameMetrics.INTENDED_VSYNC_TIMESTAMP);
                     frameMetricsCopy.getMetric(FrameMetrics.DRAW_DURATION);
-                    notifyListener(AppActiveMatrixDelegate.INSTANCE.getVisibleScene(), intendedVsyncTime, vsynTime, true, intendedVsyncTime, 0, 0, 0);
+                    notifyListener(ProcessUILifecycleOwner.INSTANCE.getVisibleScene(), intendedVsyncTime, vsynTime, true, intendedVsyncTime, 0, 0, 0);
                 }
             };
             this.frameListenerMap.put(activity.hashCode(), onFrameMetricsAvailableListener);

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ResourcePlugin.java
Patch:
@@ -26,7 +26,6 @@
 import com.tencent.matrix.resource.config.ResourceConfig;
 import com.tencent.matrix.resource.config.SharePluginInfo;
 import com.tencent.matrix.resource.processor.BaseLeakProcessor;
-import com.tencent.matrix.resource.watcher.ActivityLifeCycleCallbacksAdapter;
 import com.tencent.matrix.resource.watcher.ActivityRefWatcher;
 import com.tencent.matrix.util.MatrixLog;
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -134,7 +134,7 @@ public void dispatchEnd() {
             }
 
         });
-
+        this.isInit = true;
         frameIntervalNanos = ReflectUtils.reflectObject(choreographer, "mFrameIntervalNanos", Constants.DEFAULT_FRAME_DURATION);
         if (!useFrameMetrics) {
             choreographer = Choreographer.getInstance();
@@ -147,8 +147,6 @@ public void dispatchEnd() {
             }
             vsyncReceiver = ReflectUtils.reflectObject(choreographer, "mDisplayEventReceiver", null);
 
-
-            this.isInit = true;
             MatrixLog.i(TAG, "[UIThreadMonitor] %s %s %s %s %s %s frameIntervalNanos:%s", callbackQueueLock == null, callbackQueues == null,
                     addInputQueue == null, addTraversalQueue == null, addAnimationQueue == null, vsyncReceiver == null, frameIntervalNanos);
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -134,7 +134,7 @@ public void dispatchEnd() {
             }
 
         });
-
+        this.isInit = true;
         frameIntervalNanos = ReflectUtils.reflectObject(choreographer, "mFrameIntervalNanos", Constants.DEFAULT_FRAME_DURATION);
         if (!useFrameMetrics) {
             choreographer = Choreographer.getInstance();
@@ -147,8 +147,6 @@ public void dispatchEnd() {
             }
             vsyncReceiver = ReflectUtils.reflectObject(choreographer, "mDisplayEventReceiver", null);
 
-
-            this.isInit = true;
             MatrixLog.i(TAG, "[UIThreadMonitor] %s %s %s %s %s %s frameIntervalNanos:%s", callbackQueueLock == null, callbackQueues == null,
                     addInputQueue == null, addTraversalQueue == null, addAnimationQueue == null, vsyncReceiver == null, frameIntervalNanos);
 

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -239,6 +239,9 @@ private SQLiteLintPlugin configureSQLiteLintPlugin() {
     }
 
     private BatteryMonitorPlugin configureBatteryCanary(Context context) {
+        if (!BatteryEventDelegate.isInit()) {
+            BatteryEventDelegate.init((Application) context.getApplicationContext());
+        }
         // Configuration of battery plugin is really complicated.
         // See it in BatteryCanaryInitHelper.
         // return BatteryCanarySimpleInitHelper.createMonitor(context);  // for simplified showcase

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/lifecycle/LifecycleTest.java
Patch:
@@ -96,12 +96,12 @@ public void off() {
         ProcessSupervisor.INSTANCE.getAppUIForegroundOwner().observeForever(new IStateObserver() {
             @Override
             public void on() {
-                MatrixLog.d(TAG, "AppUI: on ...... %s", ProcessSupervisor.INSTANCE.recentScene());
+                MatrixLog.d(TAG, "AppUI: on ...... %s", ProcessSupervisor.INSTANCE.getRecentScene());
             }
 
             @Override
             public void off() {
-                MatrixLog.d(TAG, "AppUI: off ...... %s", ProcessSupervisor.INSTANCE.recentScene());
+                MatrixLog.d(TAG, "AppUI: off ...... %s", ProcessSupervisor.INSTANCE.getRecentScene());
             }
         });
 

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/stats/BatteryRecorder.java
Patch:
@@ -106,7 +106,7 @@ public List<BatteryRecord> read(String date, String proc) {
                 return Collections.emptyList();
             }
             List<BatteryRecord> records = new ArrayList<>(Math.min(16, keys.length));
-            String keyPrefix = getRecordKeyPrefix(date, proc);
+            String keyPrefix = getRecordKeyPrefix(date, proc) + "-";
             for (String item : keys) {
                 if (item.startsWith(keyPrefix)) {
                     try {

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/pthread/PthreadHook.java
Patch:
@@ -124,6 +124,9 @@ public void hook() throws HookManager.HookFailedException {
     }
 
     public void dump(String path) {
+        if (TextUtils.isEmpty(path)) {
+            throw new IllegalArgumentException("path NOT valid: " + path);
+        }
         if (getStatus() == Status.COMMIT_SUCCESS) {
             dumpNative(path);
         }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/hooks/TestHooksActivity.java
Patch:
@@ -220,8 +220,10 @@ public void threadTest(View view) {
             new HandlerThread("Test").start();
         }
 
+        JNIObj.threadTest();
+
         try {
-            Thread.sleep(500);
+            Thread.sleep(5000);
         } catch (InterruptedException e) {
             e.printStackTrace();
         }

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/pthread/PthreadHook.java
Patch:
@@ -124,6 +124,9 @@ public void hook() throws HookManager.HookFailedException {
     }
 
     public void dump(String path) {
+        if (TextUtils.isEmpty(path)) {
+            throw new IllegalArgumentException("path NOT valid: " + path);
+        }
         if (getStatus() == Status.COMMIT_SUCCESS) {
             dumpNative(path);
         }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/hooks/TestHooksActivity.java
Patch:
@@ -220,8 +220,10 @@ public void threadTest(View view) {
             new HandlerThread("Test").start();
         }
 
+        JNIObj.threadTest();
+
         try {
-            Thread.sleep(500);
+            Thread.sleep(5000);
         } catch (InterruptedException e) {
             e.printStackTrace();
         }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -327,7 +327,7 @@ public Builder setIdleHandlerThreshold(int threshold) {
             return this;
         }
 
-        public Builder enableTouchEventTraceEnable(boolean enable) {
+        public Builder enableTouchEventTrace(boolean enable) {
             config.defaultTouchEventTraceEnable = enable;
             return this;
         }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -317,7 +317,7 @@ public Builder printTracePath(String anrTraceFilePath) {
             return this;
         }
 
-        public Builder enableIdleHandlerTraceEnable(boolean enable) {
+        public Builder enableIdleHandlerTrace(boolean enable) {
             config.defaultIdleHandlerTraceEnable = enable;
             return this;
         }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -138,7 +138,7 @@ private void useSignalAnrTraceAlone(String anrFilePath, String printTraceFile) {
         SignalAnrTracer signalAnrTracer = new SignalAnrTracer(this, anrFilePath, printTraceFile);
         signalAnrTracer.setSignalAnrDetectedListener(new SignalAnrTracer.SignalAnrDetectedListener() {
             @Override
-            public void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState) {
+            public void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState, String cpuset) {
                 // got an ANR
             }
         });

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/matrix/backtrace/WarmUpService.java
Patch:
@@ -33,6 +33,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.tencent.matrix.util.MatrixHandlerThread;
 import com.tencent.matrix.util.MatrixLog;
 import com.tencent.matrix.xlog.XLogNative;
 
@@ -221,8 +222,8 @@ public Bundle call(int cmd, Bundle args) {
 
     final static int CMD_WARM_UP_SINGLE_ELF_FILE = 100;
 
-    private final Messenger mMessenger = new Messenger(new Handler() {
-        @SuppressLint("HandlerLeak")
+    @SuppressLint("HandlerLeak")
+    private final Messenger mMessenger = new Messenger(new Handler(MatrixHandlerThread.getDefaultHandlerThread().getLooper()) {
         @Override
         public void handleMessage(final Message msg) {
             super.handleMessage(msg);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java
Patch:
@@ -252,6 +252,8 @@ private static boolean checkErrorState() {
                     continue;
                 }
 
+                MatrixLog.i(TAG, "error sate longMsg = %s", proc.longMsg);
+
                 return true;
             }
             return false;

File: matrix/matrix-android/matrix-traffic/src/main/java/com/tencent/matrix/traffic/TrafficPlugin.java
Patch:
@@ -35,7 +35,8 @@ public void start() {
         }
         super.start();
         MatrixLog.i(TAG, "start");
-        nativeInitMatrixTraffic(trafficConfig.isRxCollectorEnable(), trafficConfig.isTxCollectorEnable(), trafficConfig.willDumpStackTrace());
+        String[] ignoreSoFiles = trafficConfig.getIgnoreSoFiles();
+        nativeInitMatrixTraffic(trafficConfig.isRxCollectorEnable(), trafficConfig.isTxCollectorEnable(), trafficConfig.willDumpStackTrace(), ignoreSoFiles);
     }
 
 
@@ -62,7 +63,7 @@ public void clearTrafficInfo() {
         nativeClearTrafficInfo();
     }
 
-    private static native void nativeInitMatrixTraffic(boolean rxEnable, boolean txEnable, boolean dumpStackTrace);
+    private static native void nativeInitMatrixTraffic(boolean rxEnable, boolean txEnable, boolean dumpStackTrace, String[] ignoreSoFiles);
     private static native String nativeGetTrafficInfo();
     private static native String nativeGetAllStackTraceTrafficInfo();
     private static native void nativeReleaseMatrixTraffic();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java
Patch:
@@ -282,6 +282,6 @@ public static void printTrace() {
     private static native void nativePrintTrace();
 
     public interface SignalAnrDetectedListener {
-        void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState) throws InterruptedException;
+        void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState);
     }
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java
Patch:
@@ -252,6 +252,8 @@ private static boolean checkErrorState() {
                     continue;
                 }
 
+                MatrixLog.i(TAG, "error sate longMsg = %s", proc.longMsg);
+
                 return true;
             }
             return false;
@@ -280,6 +282,6 @@ public static void printTrace() {
     private static native void nativePrintTrace();
 
     public interface SignalAnrDetectedListener {
-        void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState);
+        void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState) throws InterruptedException;
     }
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IDefaultConfig.java
Patch:
@@ -30,7 +30,9 @@ public interface IDefaultConfig {
 
     boolean isAnrTraceEnable();
 
-    boolean isIdleHandlerEnable();
+    boolean isIdleHandlerTraceEnable();
+
+    boolean isTouchEventTraceEnable();
 
     boolean isSignalAnrTraceEnable();
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -18,6 +18,7 @@
 
 import android.os.Process;
 
+import com.tencent.matrix.AppActiveMatrixDelegate;
 import com.tencent.matrix.Matrix;
 import com.tencent.matrix.report.Issue;
 import com.tencent.matrix.trace.TracePlugin;
@@ -97,7 +98,7 @@ public void dispatchEnd(long beginNs, long cpuBeginMs, long endNs, long cpuEndMs
                 long[] data = AppMethodBeat.getInstance().copyData(indexRecord);
                 long[] queueCosts = new long[3];
                 System.arraycopy(queueTypeCosts, 0, queueCosts, 0, 3);
-                String scene = AppMethodBeat.getVisibleScene();
+                String scene = AppActiveMatrixDelegate.INSTANCE.getVisibleScene();
                 MatrixHandlerThread.getDefaultHandler().post(new AnalyseTask(isForeground(), scene, data, queueCosts, cpuEndMs - cpuBeginMs, dispatchCost, endNs / Constants.TIME_MILLIS_TO_NANO));
             }
         } finally {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java
Patch:
@@ -28,13 +28,13 @@
 import androidx.annotation.Keep;
 import androidx.annotation.RequiresApi;
 
+import com.tencent.matrix.AppActiveMatrixDelegate;
 import com.tencent.matrix.Matrix;
 import com.tencent.matrix.report.Issue;
 import com.tencent.matrix.trace.TracePlugin;
 import com.tencent.matrix.trace.config.SharePluginInfo;
 import com.tencent.matrix.trace.config.TraceConfig;
 import com.tencent.matrix.trace.constants.Constants;
-import com.tencent.matrix.trace.core.AppMethodBeat;
 import com.tencent.matrix.trace.util.AppForegroundUtil;
 import com.tencent.matrix.trace.util.Utils;
 import com.tencent.matrix.util.DeviceUtil;
@@ -160,7 +160,7 @@ private static void report(boolean fromProcessErrorState) {
                 return;
             }
 
-            String scene = AppMethodBeat.getVisibleScene();
+            String scene = AppActiveMatrixDelegate.INSTANCE.getVisibleScene();
 
             JSONObject jsonObject = new JSONObject();
             jsonObject = DeviceUtil.getDeviceInfo(jsonObject, Matrix.with().getApplication());

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -18,6 +18,7 @@
 
 import android.os.Process;
 
+import com.tencent.matrix.AppActiveMatrixDelegate;
 import com.tencent.matrix.Matrix;
 import com.tencent.matrix.report.Issue;
 import com.tencent.matrix.trace.TracePlugin;
@@ -97,7 +98,7 @@ public void dispatchEnd(long beginNs, long cpuBeginMs, long endNs, long cpuEndMs
                 long[] data = AppMethodBeat.getInstance().copyData(indexRecord);
                 long[] queueCosts = new long[3];
                 System.arraycopy(queueTypeCosts, 0, queueCosts, 0, 3);
-                String scene = AppMethodBeat.getVisibleScene();
+                String scene = AppActiveMatrixDelegate.INSTANCE.getVisibleScene();
                 MatrixHandlerThread.getDefaultHandler().post(new AnalyseTask(isForeground(), scene, data, queueCosts, cpuEndMs - cpuBeginMs, dispatchCost, endNs / Constants.TIME_MILLIS_TO_NANO));
             }
         } finally {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java
Patch:
@@ -28,13 +28,13 @@
 import androidx.annotation.Keep;
 import androidx.annotation.RequiresApi;
 
+import com.tencent.matrix.AppActiveMatrixDelegate;
 import com.tencent.matrix.Matrix;
 import com.tencent.matrix.report.Issue;
 import com.tencent.matrix.trace.TracePlugin;
 import com.tencent.matrix.trace.config.SharePluginInfo;
 import com.tencent.matrix.trace.config.TraceConfig;
 import com.tencent.matrix.trace.constants.Constants;
-import com.tencent.matrix.trace.core.AppMethodBeat;
 import com.tencent.matrix.trace.util.AppForegroundUtil;
 import com.tencent.matrix.trace.util.Utils;
 import com.tencent.matrix.util.DeviceUtil;
@@ -160,7 +160,7 @@ private static void report(boolean fromProcessErrorState) {
                 return;
             }
 
-            String scene = AppMethodBeat.getVisibleScene();
+            String scene = AppActiveMatrixDelegate.INSTANCE.getVisibleScene();
 
             JSONObject jsonObject = new JSONObject();
             jsonObject = DeviceUtil.getDeviceInfo(jsonObject, Matrix.with().getApplication());

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/hook/OpenGLHook.java
Patch:
@@ -488,7 +488,7 @@ public void run() {
 
     }
 
-    public static void onGlBufferData(final int target, final long size, final int usage, final String javaStack, final long nativeStack) {
+    public static void onGlBufferData(final int target, final int usage, final long size, final String javaStack, final long nativeStack) {
         if (Thread.currentThread().getName().equals("RenderThread")) {
             return;
         }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/OpenglLeakPlugin.java
Patch:
@@ -185,7 +185,7 @@ public void setNativeStackDump(boolean open) {
     }
 
     public void setJavaStackDump(boolean open) {
-        OpenGLHook.getInstance().setJavaStackDump(true);
+        OpenGLHook.getInstance().setJavaStackDump(open);
     }
 
     public void clear() {

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/detector/OpenglIndexDetectorService.java
Patch:
@@ -39,7 +39,6 @@ public IBinder onBind(Intent intent) {
     private Map<String, Integer> seekOpenglFuncIndex() {
         // 初始化 egl 环境，目的为了初始化 gl 表
         EGLHelper.initOpenGL();
-
         OpenGLHook.getInstance().init();
         MatrixLog.i(TAG, "init env succ");
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLInfo.java
Patch:
@@ -66,6 +66,7 @@ public void setMemoryInfo(MemoryInfo memoryInfo) {
         if (this.memoryInfo != null) {
             if (memoryInfo.getNativeStackPtr() != 0) {
                 ResRecordManager.releaseNative(memoryInfo.getNativeStackPtr());
+                memoryInfo.releaseNativeStackPtr();
             }
         }
         this.memoryInfo = memoryInfo;

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecordManager.java
Patch:
@@ -80,6 +80,7 @@ public void delete(final OpenGLInfo del) {
                 long memNativePtr = memoryInfo.getNativeStackPtr();
                 if (memNativePtr != 0) {
                     releaseNative(memNativePtr);
+                    memoryInfo.releaseNativeStackPtr();
                 }
             }
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/MemoryInfo.java
Patch:
@@ -204,7 +204,7 @@ public String toString() {
                 ", nativeStack='" + nativeStack + '\'' +
                 ", nativeStackPtr=" + nativeStackPtr +
                 ", resType=" + resType +
-                ", size=" + size +
+                ", size=" + getSize() +
                 ", faces=" + Arrays.toString(faces) +
                 '}';
     }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/CustomizeLeakMonitor.java
Patch:
@@ -20,7 +20,7 @@ public void checkStart() {
 
     public List<OpenGLInfo> checkEnd() {
         mResRecorder.end();
-        return mResRecorder.getCopyList();
+        return mResRecorder.getCurList();
     }
 
 }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLReportInfo.java
Patch:
@@ -19,14 +19,14 @@ public OpenGLReportInfo(OpenGLInfo innerInfo) {
         this.innerInfo = innerInfo;
         idList.add(innerInfo.getId());
         appendParamsInfos(innerInfo.getMemoryInfo());
-        totalSize += innerInfo.getMemoryInfo().getSize();
     }
 
     public void appendParamsInfos(MemoryInfo memoryInfo) {
         if (memoryInfo == null) {
             return;
         }
         OpenGLInfo.TYPE resType = memoryInfo.getResType();
+        totalSize += innerInfo.getMemoryInfo().getSize();
         if (resType == OpenGLInfo.TYPE.TEXTURE) {
             FaceInfo[] faces = memoryInfo.getFaces();
             for (FaceInfo faceInfo : faces) {

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLReportInfo.java
Patch:
@@ -19,6 +19,7 @@ public OpenGLReportInfo(OpenGLInfo innerInfo) {
         this.innerInfo = innerInfo;
         idList.add(innerInfo.getId());
         appendParamsInfos(innerInfo.getMemoryInfo());
+        totalSize += innerInfo.getMemoryInfo().getSize();
     }
 
     public void appendParamsInfos(MemoryInfo memoryInfo) {

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLReportInfo.java
Patch:
@@ -11,7 +11,7 @@ public class OpenGLReportInfo {
 
     private final List<String> paramsList = new ArrayList<>();
 
-    private int allocCount;
+    private int allocCount = 1;
 
     public OpenGLReportInfo(OpenGLInfo innerInfo) {
         this.innerInfo = innerInfo;

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecorder.java
Patch:
@@ -52,9 +52,7 @@ public List<OpenGLInfo> getCopyList() {
 
     public void clear() {
         synchronized (mList) {
-            if (null != mList) {
-                mList.clear();
-            }
+            mList.clear();
         }
     }
 }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/CustomizeLeakMonitor.java
Patch:
@@ -7,7 +7,7 @@
 
 public class CustomizeLeakMonitor {
 
-    private ResRecorder mResRecorder;
+    private final ResRecorder mResRecorder;
 
     public CustomizeLeakMonitor() {
         mResRecorder = new ResRecorder();

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecorder.java
Patch:
@@ -9,7 +9,7 @@ public class ResRecorder implements ResRecordManager.Callback {
     public ResRecorder() {
     }
 
-    private List<OpenGLInfo> mList = new LinkedList<>();
+    private final List<OpenGLInfo> mList = new LinkedList<>();
 
     public void start() {
         ResRecordManager.getInstance().registerCallback(this);

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/utils/ActivityRecorder.java
Patch:
@@ -13,8 +13,8 @@
 
 public class ActivityRecorder implements Application.ActivityLifecycleCallbacks {
 
-    private static ActivityRecorder mInstance = new ActivityRecorder();
-    private List<ActivityInfo> mList = new LinkedList<>();
+    private static final ActivityRecorder mInstance = new ActivityRecorder();
+    private final List<ActivityInfo> mList = new LinkedList<>();
 
     private ActivityRecorder() {
     }
@@ -73,7 +73,7 @@ public void onActivityDestroyed(@NonNull Activity activity) {
         mList.remove(new ActivityInfo(activity.hashCode(), activity.getLocalClassName()));
     }
 
-    public class ActivityInfo {
+    public static class ActivityInfo {
         public int activityHashcode;
         public String name;
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/utils/ExecuteCenter.java
Patch:
@@ -1,9 +1,6 @@
 package com.tencent.matrix.openglleak.utils;
 
-import android.opengl.GLES20;
-import android.opengl.GLES30;
 import android.os.Handler;
-import android.os.HandlerThread;
 
 public class ExecuteCenter {
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecordManager.java
Patch:
@@ -139,7 +139,7 @@ public String getNativeStack(OpenGLInfo item) {
         }
     }
 
-    private native String dumpNativeStack(long nativeStackPtr);
+    public static native String dumpNativeStack(long nativeStackPtr);
 
     private native void releaseNative(long nativeStackPtr);
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/OpenGLResRecorder.java
Patch:
@@ -198,8 +198,9 @@ public String dumpToString() {
             int javaHash = info.getJavaStack().hashCode();
             int nativeHash = info.getNativeStack().hashCode();
 
-            int memoryJavaHash = info.getJavaStack().hashCode();
-            int memoryNativeHash = info.getNativeStack().hashCode();
+            MemoryInfo memoryInfo = info.getMemoryInfo();
+            int memoryJavaHash = memoryInfo == null ? 0 : memoryInfo.getJavaStack().hashCode();
+            int memoryNativeHash = memoryInfo == null ? 0 : info.getNativeStack().hashCode();
 
             long infoHash = javaHash + nativeHash + memoryNativeHash + memoryJavaHash;
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/OpenGLResRecorder.java
Patch:
@@ -11,6 +11,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
+
 import com.tencent.matrix.openglleak.utils.ExecuteCenter;
 
 import java.util.ArrayList;
@@ -310,7 +311,7 @@ private String getResListString(List<OpenGLInfo> resList) {
                     .append("\n")
                     .append(String.format(" native stack = %s", res.getNativeStack()))
                     .append("\n")
-                    .append(String.format(" memory info = %s", res.getMemoryInfo().toString()))
+                    .append(String.format(" memory info = %s", res.getMemoryInfo() == null ? "" : res.getMemoryInfo().toString()))
                     .append("\n");
         }
         return result.toString();

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLInfo.java
Patch:
@@ -1,6 +1,7 @@
 package com.tencent.matrix.openglleak.statistics.resource;
 
 import com.tencent.matrix.openglleak.utils.ActivityRecorder;
+
 import java.util.Objects;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -97,7 +98,7 @@ public long getNativeStackPtr() {
         return nativeStackPtr;
     }
 
-    public ActivityRecorder.ActivityInfo getActivityInfo(){
+    public ActivityRecorder.ActivityInfo getActivityInfo() {
         return activityInfo;
     }
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/hook/OpenGLHook.java
Patch:
@@ -1,6 +1,7 @@
 package com.tencent.matrix.openglleak.hook;
 
 import android.opengl.EGL14;
+import android.util.Log;
 
 import com.tencent.matrix.openglleak.comm.FuncNameString;
 import com.tencent.matrix.openglleak.statistics.BindCenter;
@@ -311,6 +312,7 @@ public static void onGlTexImage2D(int target, long size) {
             openGLInfo.setSize(size);
             OpenGLResRecorder.getInstance().replace(openGLInfo);
         }
+        Log.e("Backtrace.Benchmark", "onGlTexImage2D egl context = " + eglContextId);
     }
 
     public static void onGetError(int eid) {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -30,6 +30,7 @@
 import com.tencent.matrix.hook.pthread.PthreadHook;
 import com.tencent.matrix.iocanary.IOCanaryPlugin;
 import com.tencent.matrix.iocanary.config.IOConfig;
+import com.tencent.matrix.lifecycle.supervisor.SupervisorConfig;
 import com.tencent.matrix.memory.canary.MemoryCanaryPlugin;
 import com.tencent.matrix.resource.ResourcePlugin;
 import com.tencent.matrix.resource.config.ResourceConfig;
@@ -126,6 +127,7 @@ public void onCreate() {
         BatteryMonitorPlugin batteryMonitorPlugin = configureBatteryCanary();
         builder.plugin(batteryMonitorPlugin);
 
+        builder.supervisorConfig(new SupervisorConfig(true, false));
         Matrix.init(builder.build());
 
         // Trace Plugin need call start() at the beginning.

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/hooks/TestHooksActivity.java
Patch:
@@ -211,7 +211,7 @@ public void run() {
                         + Debug.getNativeHeapFreeSize());
 
         String output = getExternalCacheDir() + "/memory_hook.log";
-        MemoryHook.INSTANCE.dump(output, output);
+        MemoryHook.INSTANCE.dump(output, output + ".json");
     }
 
     public void threadTest(View view) {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/memory/MemInfoTest.java
Patch:
@@ -24,7 +24,7 @@ public static void test() {
         MatrixLog.d(TAG, "getCurrentProcessMemInfoWithPss %s", info);
 
         info = MemInfo.getCurrentProcessMemInfoWithAmsPss();
-        MatrixLog.d(TAG, "getCurrentProcessMemInfoWithPssAms %s", info);
+        MatrixLog.d(TAG, "getCurrentProcessMemInfoWithAmsPss %s", info);
 
         MemInfo[] infos = MemInfo.getAllProcessPss();
         MatrixLog.d(TAG, "getAllProcessPss %s", Arrays.toString(infos));

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/TraceClassWriter.java
Patch:
@@ -24,12 +24,12 @@
  */
 class TraceClassWriter extends ClassWriter {
     private ClassLoader mClassLoader;
-    public TraceClassWriter(int flags, ClassLoader classLoader) {
+    TraceClassWriter(int flags, ClassLoader classLoader) {
         super(flags);
         mClassLoader = classLoader;
     }
 
-    public TraceClassWriter(ClassReader classReader, int flags, ClassLoader classLoader) {
+    TraceClassWriter(ClassReader classReader, int flags, ClassLoader classLoader) {
         super(classReader, flags);
         mClassLoader = classLoader;
     }

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/extension/MatrixTraceExtension.java
Patch:
@@ -5,7 +5,7 @@ public class MatrixTraceExtension {
     String baseMethodMapFile;
     String blackListFile;
     String customDexTransformName;
-    boolean skipCheckClass;
+    boolean skipCheckClass = true; // skip by default
 
     boolean enable;
 

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/extension/MatrixTraceExtension.java
Patch:
@@ -5,7 +5,7 @@ public class MatrixTraceExtension {
     String baseMethodMapFile;
     String blackListFile;
     String customDexTransformName;
-    boolean skipCheckClass;
+    boolean skipCheckClass = true; // skip by default
 
     boolean enable;
 

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java
Patch:
@@ -10,7 +10,6 @@
 import android.content.IntentFilter;
 import android.os.Build;
 
-import com.tencent.matrix.Matrix;
 import com.tencent.matrix.resource.R;
 import com.tencent.matrix.resource.analyzer.model.ActivityLeakResult;
 import com.tencent.matrix.resource.analyzer.model.DestroyedActivityInfo;
@@ -189,7 +188,7 @@ public static class ManualDumpProcessorHelper extends BroadcastReceiver {
 
         private static final String DUMP_PERMISSION_SUFFIX = ".manual.dump";
 
-        private static final String ACTION_DUMP = Matrix.with().getApplication().getPackageName() + ".manual.dump";
+        private static final String ACTION_DUMP = "com.tencent.matrix.manual.dump";
         private static final String ACTION_RESULT = "com.tencent.matrix.manual.result";
 
         private static final String KEY_RESULT_PROCESS = "result_process";

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java
Patch:
@@ -10,6 +10,7 @@
 import android.content.IntentFilter;
 import android.os.Build;
 
+import com.tencent.matrix.Matrix;
 import com.tencent.matrix.resource.R;
 import com.tencent.matrix.resource.analyzer.model.ActivityLeakResult;
 import com.tencent.matrix.resource.analyzer.model.DestroyedActivityInfo;
@@ -188,7 +189,7 @@ public static class ManualDumpProcessorHelper extends BroadcastReceiver {
 
         private static final String DUMP_PERMISSION_SUFFIX = ".manual.dump";
 
-        private static final String ACTION_DUMP = "com.tencent.matrix.manual.dump";
+        private static final String ACTION_DUMP = Matrix.with().getApplication().getPackageName() + ".manual.dump";
         private static final String ACTION_RESULT = "com.tencent.matrix.manual.result";
 
         private static final String KEY_RESULT_PROCESS = "result_process";

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/lifecycle/LifecycleTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.tencent.matrix.AppActiveMatrixDelegate;
 import com.tencent.matrix.lifecycle.IStateObserver;
-import com.tencent.matrix.lifecycle.owners.CombinedProcessForegroundStatefulOwner;
+import com.tencent.matrix.lifecycle.owners.CombinedProcessForegroundOwner;
 import com.tencent.matrix.lifecycle.owners.MultiProcessLifecycleOwner;
 import com.tencent.matrix.lifecycle.supervisor.ProcessSupervisor;
 import com.tencent.matrix.listeners.IAppForeground;
@@ -58,7 +58,7 @@ private void onProcessStopped() {
             }
         });
 
-        CombinedProcessForegroundStatefulOwner.INSTANCE.observeForever(new IStateObserver() {
+        CombinedProcessForegroundOwner.INSTANCE.observeForever(new IStateObserver() {
             @Override
             public void on() {
                 MatrixLog.d(TAG, "CombinedProcessForegroundStatefulOwner: ON");
@@ -92,7 +92,7 @@ public void onForeground(boolean isForeground) {
 
     public static void test2(LifecycleOwner owner) {
         // auto remove when LifecycleOwner is destroyed
-        CombinedProcessForegroundStatefulOwner.INSTANCE.observeWithLifecycle(owner, new IStateObserver() {
+        CombinedProcessForegroundOwner.INSTANCE.observeWithLifecycle(owner, new IStateObserver() {
             @Override
             public void on() {
 

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.tencent.matrix.javalib.util.FileUtil;
 import com.tencent.matrix.javalib.util.Log;
+import com.tencent.matrix.plugin.compat.AgpCompat;
 import com.tencent.matrix.trace.item.TraceMethod;
 import com.tencent.matrix.trace.retrace.MappingCollector;
 
@@ -142,7 +143,7 @@ private void innerTraceMethodFromSrc(File input, File output, ClassLoader classL
                     is = new FileInputStream(classFile);
                     ClassReader classReader = new ClassReader(is);
                     ClassWriter classWriter = new TraceClassWriter(ClassWriter.COMPUTE_FRAMES, classLoader);
-                    ClassVisitor classVisitor = new TraceClassAdapter(Opcodes.ASM6, classWriter);
+                    ClassVisitor classVisitor = new TraceClassAdapter(AgpCompat.getAsmApi(), classWriter);
                     classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
                     is.close();
 
@@ -201,7 +202,7 @@ private void innerTraceMethodFromJar(File input, File output, final ClassLoader
                     InputStream inputStream = zipFile.getInputStream(zipEntry);
                     ClassReader classReader = new ClassReader(inputStream);
                     ClassWriter classWriter = new TraceClassWriter(ClassWriter.COMPUTE_FRAMES, classLoader);
-                    ClassVisitor classVisitor = new TraceClassAdapter(Opcodes.ASM6, classWriter);
+                    ClassVisitor classVisitor = new TraceClassAdapter(AgpCompat.getAsmApi(), classWriter);
                     classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
                     byte[] data = classWriter.toByteArray();
 //

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -169,7 +169,7 @@ private void innerTraceMethodFromSrc(File input, File output, ClassLoader classL
                     FileUtil.copyFileUsingStream(classFile, changedFileOutput);
                 }
             } catch (Exception e) {
-                Log.e(TAG, "[innerTraceMethodFromSrc] input:%s e:%s", input.getName(), e);
+                Log.e(TAG, "[innerTraceMethodFromSrc] input:%s e:%s", input.getName(), e.getMessage());
                 try {
                     Files.copy(input.toPath(), output.toPath(), StandardCopyOption.REPLACE_EXISTING);
                 } catch (Exception e1) {
@@ -226,7 +226,7 @@ private void innerTraceMethodFromJar(File input, File output, final ClassLoader
                 }
             }
         } catch (Exception e) {
-            Log.e(TAG, "[innerTraceMethodFromJar] input:%s output:%s e:%s", input, output, e);
+            Log.e(TAG, "[innerTraceMethodFromJar] input:%s output:%s e:%s", input, output, e.getMessage());
             if (e instanceof ZipException) {
                 e.printStackTrace();
             }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/LooperAnrTracer.java
Patch:
@@ -141,7 +141,7 @@ public void run() {
                 issue.setTag(SharePluginInfo.TAG_PLUGIN_EVIL_METHOD);
                 issue.setContent(jsonObject);
                 plugin.onDetectIssue(issue);
-                MatrixLog.e(TAG, "happens lag : %s ", jsonObject.toString());
+                MatrixLog.e(TAG, "happens lag : %s, scene : %s ", dumpStack, scene);
 
             } catch (JSONException e) {
                 MatrixLog.e(TAG, "[JSONException error: %s", e);

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/Matrix.java
Patch:
@@ -21,6 +21,7 @@
 import com.tencent.matrix.plugin.DefaultPluginListener;
 import com.tencent.matrix.plugin.Plugin;
 import com.tencent.matrix.plugin.PluginListener;
+import com.tencent.matrix.lifecycle.MultiProcessLifecycleInitializer;
 import com.tencent.matrix.util.MatrixLog;
 
 import java.util.HashSet;
@@ -43,6 +44,7 @@ private Matrix(Application app, PluginListener listener, HashSet<Plugin> plugins
         this.application = app;
         this.pluginListener = listener;
         this.plugins = plugins;
+        MultiProcessLifecycleInitializer.initForOtherProcesses(app);
         AppActiveMatrixDelegate.INSTANCE.init(application);
         for (Plugin plugin : plugins) {
             plugin.init(application, pluginListener);

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/LeakMonitor.java
Patch:
@@ -225,7 +225,7 @@ public void run() {
 
                 if (item.getMaybeLeak()) {
                     if ((now - item.getMaybeLeakTime()) > mDoubleCheckTime) {
-                        if(OpenglLeakPlugin.sCallback != null) {
+                        if (OpenglLeakPlugin.sCallback != null) {
                             OpenglLeakPlugin.sCallback.onBeforeIgnore(item);
                         }
                         OpenGLResRecorder.getInstance().setLeak(item);

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/detector/OpenglIndexDetectorService.java
Patch:
@@ -5,7 +5,6 @@
 import android.os.IBinder;
 import android.os.RemoteException;
 
-import com.tencent.matrix.openglleak.OpenglLeakPlugin;
 import com.tencent.matrix.openglleak.comm.FuncNameString;
 import com.tencent.matrix.openglleak.hook.OpenGLHook;
 import com.tencent.matrix.openglleak.utils.EGLHelper;
@@ -66,7 +65,6 @@ private Map<String, Integer> seekOpenglFuncIndex() {
 
         if ((glGenTexturesIndex * glDeleteTexturesIndex * glGenBuffersIndex * glDeleteBuffersIndex * glGenFramebuffersIndex * glDeleteFramebuffersIndex * glGenRenderbuffersIndex * glDeleteRenderbuffersIndex) == 0) {
             MatrixLog.e(TAG, "seek func index fail!");
-            OpenglLeakPlugin.sCallback.onHookFail();
             return null;
         }
 
@@ -81,7 +79,6 @@ private Map<String, Integer> seekOpenglFuncIndex() {
         out.put(FuncNameString.GL_DELETE_RENDERBUFFERS, glDeleteRenderbuffersIndex);
 
         MatrixLog.i(TAG, "seek func index succ!");
-        OpenglLeakPlugin.sCallback.onHookSuccess();
 
         return out;
     }

File: matrix/matrix-android/matrix-commons/src/main/java/com/android/dexdeps/DexData.java
Patch:
@@ -149,7 +149,6 @@ void loadStrings() throws IOException {
 
         mStrings = new String[count];
 
-        seek(stringOffsets[0]);
         for (int i = 0; i < count; i++) {
             seek(stringOffsets[i]);         // should be a no-op
             mStrings[i] = readString();

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/OpenGLResRecorder.java
Patch:
@@ -219,7 +219,8 @@ private boolean isNeedIgnore(OpenGLInfo info) {
                                 && !line.contains("libhwui.so")
                                 && !line.contains("libutils.so")
                                 && !line.contains("libandroid_runtime.so")
-                                && !line.contains("libc.so")) {
+                                && !line.contains("libc.so")
+                                && line.contains(".so")) {
                             isIgnore = false;
                             break;
                         }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/OpenGLResRecorder.java
Patch:
@@ -219,7 +219,8 @@ private boolean isNeedIgnore(OpenGLInfo info) {
                                 && !line.contains("libhwui.so")
                                 && !line.contains("libutils.so")
                                 && !line.contains("libandroid_runtime.so")
-                                && !line.contains("libc.so")) {
+                                && !line.contains("libc.so")
+                                && line.contains(".so")) {
                             isIgnore = false;
                             break;
                         }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/IdleHandlerLagTracer.java
Patch:
@@ -108,6 +108,9 @@ public void run() {
 
     private static void detectIdleHandler() {
         try {
+            if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.M) {
+                return;
+            }
             MessageQueue mainQueue = Looper.getMainLooper().getQueue();
             Field field = MessageQueue.class.getDeclaredField("mIdleHandlers");
             field.setAccessible(true);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/IdleHandlerLagTracer.java
Patch:
@@ -108,6 +108,9 @@ public void run() {
 
     private static void detectIdleHandler() {
         try {
+            if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.M) {
+                return;
+            }
             MessageQueue mainQueue = Looper.getMainLooper().getQueue();
             Field field = MessageQueue.class.getDeclaredField("mIdleHandlers");
             field.setAccessible(true);

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/LeakMonitor.java
Patch:
@@ -228,6 +228,7 @@ public void run() {
                 if (item.getMaybeLeak()) {
                     if ((now - item.getMaybeLeakTime()) > mDoubleCheckTime) {
                         OpenGLResRecorder.getInstance().setLeak(item);
+                        OpenGLResRecorder.getInstance().remove(item);
                     }
                 }
             }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/LeakMonitor.java
Patch:
@@ -27,7 +27,8 @@ public class LeakMonitor implements Application.ActivityLifecycleCallbacks {
     private Map<WeakReference<Activity>, List<Integer>> maps;
     private String currentActivityName = "";
 
-    private long mDoubleCheckTime = 1000 * 60 * 30;
+    //    private long mDoubleCheckTime = 1000 * 60 * 30;
+    private long mDoubleCheckTime = 1;
     private final long mDoubleCheckLooper = 1000 * 60 * 1;
 
     private LeakMonitor() {
@@ -228,6 +229,7 @@ public void run() {
                 if (item.getMaybeLeak()) {
                     if ((now - item.getMaybeLeakTime()) > mDoubleCheckTime) {
                         OpenGLResRecorder.getInstance().setLeak(item);
+                        OpenGLResRecorder.getInstance().removeAll();
                     }
                 }
             }

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/LeakMonitor.java
Patch:
@@ -169,7 +169,7 @@ private boolean findLeak(List<Integer> createList, List<Integer> destroyList) {
             if (isLeak) {
                 OpenGLInfo leakInfo = OpenGLResRecorder.getInstance().getItemByHashCode(destroy);
 
-                if (!leakInfo.getMaybeLeak()) {
+                if ((leakInfo != null) && !leakInfo.getMaybeLeak()) {
                     OpenGLResRecorder.getInstance().getNativeStack(leakInfo);
                     OpenGLResRecorder.getInstance().setMaybeLeak(leakInfo);
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/LeakMonitor.java
Patch:
@@ -153,7 +153,9 @@ private boolean findLeak(List<OpenGLInfo> createList, List<OpenGLInfo> destroyLi
                     continue;
                 }
 
-                if ((create.getType() == destroy.getType()) && (create.getThreadId().equals(destroy.getThreadId())) && (create.getId() == destroy.getId())) {
+                if ((create.getType() == destroy.getType())
+                        && (create.getThreadId().equals(destroy.getThreadId())) && (create.getId()
+                        == destroy.getId()) && (create.getEglContextNativeHandle() == destroy.getEglContextNativeHandle())) {
                     break;
                 }
 

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/OpenGLInfo.java
Patch:
@@ -64,7 +64,7 @@ public OpenGLInfo(TYPE type, int id, String threadId, long eglContextNativeHandl
         this.type = type;
     }
 
-    public OpenGLInfo(TYPE type, int id, String threadId, long eglContextId, String javaStack, long nativeStackPtr, boolean genOrDelete, String activityName, AtomicInteger counter) {
+    public OpenGLInfo(TYPE type, int id, String threadId, long eglContextNativeHandle, String javaStack, long nativeStackPtr, boolean genOrDelete, String activityName, AtomicInteger counter) {
         this.id = id;
         this.threadId = threadId;
         this.eglContextNativeHandle = eglContextNativeHandle;

File: matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/OpenGLInfo.java
Patch:
@@ -23,7 +23,7 @@ public class OpenGLInfo {
     private boolean isRelease;
 
     private boolean maybeLeak = false;
-    private long maybeLeakCheckTime = 0l;
+    private long maybeLeakCheckTime = 0L;
     private boolean isReported = false;
 
     private String activityName;
@@ -92,7 +92,7 @@ public String getThreadId() {
         return threadId;
     }
 
-    public long getEglContextNativeHandle(){
+    public long getEglContextNativeHandle() {
         return eglContextNativeHandle;
     }
 

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/DeviceUtil.java
Patch:
@@ -105,12 +105,10 @@ public static LEVEL getLevel(Context context) {
         } else if (totalMemory >= 2 * 1024 * MB) {
             if (coresNum >= 4) {
                 sLevelCache = LEVEL.MIDDLE;
-            } else if (coresNum >= 2) {
-                sLevelCache = LEVEL.LOW;
             } else if (coresNum > 0) {
                 sLevelCache = LEVEL.LOW;
             }
-        } else if (0 <= totalMemory && totalMemory < 1024 * MB) {
+        } else if (totalMemory >= 0) {
             sLevelCache = LEVEL.BAD;
         } else {
             sLevelCache = LEVEL.UN_KNOW;

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/DeviceUtil.java
Patch:
@@ -105,12 +105,10 @@ public static LEVEL getLevel(Context context) {
         } else if (totalMemory >= 2 * 1024 * MB) {
             if (coresNum >= 4) {
                 sLevelCache = LEVEL.MIDDLE;
-            } else if (coresNum >= 2) {
-                sLevelCache = LEVEL.LOW;
             } else if (coresNum > 0) {
                 sLevelCache = LEVEL.LOW;
             }
-        } else if (0 <= totalMemory && totalMemory < 1024 * MB) {
+        } else if (totalMemory >= 0) {
             sLevelCache = LEVEL.BAD;
         } else {
             sLevelCache = LEVEL.UN_KNOW;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.tencent.matrix.trace.config;
 
-import android.os.Build;
-
 import com.tencent.matrix.trace.constants.Constants;
 import com.tencent.matrix.trace.listeners.IDefaultConfig;
 import com.tencent.mrs.plugin.IDynamicConfig;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/ThreadPriorityTracer.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.json.JSONObject;
 
-public class ThreadPriorityTracer extends Tracer{
+public class ThreadPriorityTracer extends Tracer {
 
     private static final String TAG = "ThreadPriorityTracer";
     private static MainThreadPriorityModifiedListener sMainThreadPriorityModifiedListener;
@@ -106,6 +106,7 @@ private static void onMainThreadTimerSlackModified(long timerSlack) {
 
     public interface MainThreadPriorityModifiedListener {
         void onMainThreadPriorityModified(int priority);
+
         void onMainThreadTimerSlackModified(long timerSlack);
     }
 }

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/memory/MemoryHook.java
Patch:
@@ -137,7 +137,7 @@ protected boolean onHook(boolean enableDebug) {
     }
 
     public void dump(String logPath, String jsonPath) {
-        if (HookManager.INSTANCE.hasHooked()) {
+        if (getStatus() == Status.COMMIT_SUCCESS) {
             dumpNative(logPath, jsonPath);
         }
     }

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/pthread/PthreadHook.java
Patch:
@@ -97,7 +97,7 @@ public void hook() throws HookManager.HookFailedException {
     }
 
     public void dump(String path) {
-        if (HookManager.INSTANCE.hasHooked()) {
+        if (getStatus() == Status.COMMIT_SUCCESS) {
             dumpNative(path);
         }
     }

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/memory/MemoryHook.java
Patch:
@@ -137,7 +137,7 @@ protected boolean onHook(boolean enableDebug) {
     }
 
     public void dump(String logPath, String jsonPath) {
-        if (HookManager.INSTANCE.hasHooked()) {
+        if (getStatus() == Status.COMMIT_SUCCESS) {
             dumpNative(logPath, jsonPath);
         }
     }

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/pthread/PthreadHook.java
Patch:
@@ -97,7 +97,7 @@ public void hook() throws HookManager.HookFailedException {
     }
 
     public void dump(String path) {
-        if (HookManager.INSTANCE.hasHooked()) {
+        if (getStatus() == Status.COMMIT_SUCCESS) {
             dumpNative(path);
         }
     }

File: matrix/matrix-android/matrix-commons/src/main/java/com/tencent/matrix/javalib/util/FileUtil.java
Patch:
@@ -269,6 +269,7 @@ public static void unzip(String filePath, String destFolder) {
                     bos.write(data, 0, count);
                 }
                 bos.flush();
+                closeQuietly(bos);
             }
         } catch (Exception e) {
             // ignore

File: matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/pthread/PthreadHook.java
Patch:
@@ -164,7 +164,7 @@ protected boolean onHook(boolean enableDebug) {
 
     @Keep
     private native void setThreadStackShrinkEnabledNative(boolean enabled);
-    
+
     @Keep
     private native boolean setThreadStackShrinkIgnoredCreatorSoPatternsNative(String[] patterns);
 

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/Configuration.java
Patch:
@@ -33,7 +33,7 @@ public Configuration() { }
     public int parseBlockFile(MappingCollector processor) {
         String blockStr = TraceBuildConstants.DEFAULT_BLOCK_TRACE + FileUtil.readFileAsString(blockListFilePath);
 
-        String[] blockArray = blockStr.trim().replace("/", ".").split("\n");
+        String[] blockArray = blockStr.trim().replace("/", ".").replace("\r","").split("\n");
 
         if (blockArray != null) {
             for (String block : blockArray) {

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/matrix/backtrace/WarmUpDelegate.java
Patch:
@@ -33,7 +33,6 @@
 
 import com.tencent.matrix.backtrace.WarmUpScheduler.TaskType;
 import com.tencent.matrix.util.MatrixLog;
-import com.tencent.matrix.xlog.XLogNative;
 
 import java.io.File;
 import java.io.FileFilter;

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/BlueToothMonitorFeature.java
Patch:
@@ -2,11 +2,11 @@
 
 import android.bluetooth.le.ScanSettings;
 import android.os.Build;
+import android.text.TextUtils;
+
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import android.text.TextUtils;
 
-import com.tencent.matrix.batterycanary.monitor.BatteryMonitorConfig;
 import com.tencent.matrix.batterycanary.utils.BatteryCanaryUtil;
 import com.tencent.matrix.batterycanary.utils.BluetoothManagerServiceHooker;
 import com.tencent.matrix.util.MatrixLog;

File: matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/detect/CloseGuardHooker.java
Patch:
@@ -17,6 +17,8 @@
 package com.tencent.matrix.iocanary.detect;
 
 
+import android.annotation.SuppressLint;
+
 import com.tencent.matrix.report.IssuePublisher;
 import com.tencent.matrix.util.MatrixLog;
 
@@ -75,6 +77,7 @@ private boolean tryHook() {
         try {
             Class<?> closeGuardCls = Class.forName("dalvik.system.CloseGuard");
             Class<?> closeGuardReporterCls = Class.forName("dalvik.system.CloseGuard$Reporter");
+            @SuppressLint("SoonBlockedPrivateApi") // FIXME
             Method methodGetReporter = closeGuardCls.getDeclaredMethod("getReporter");
             Method methodSetReporter = closeGuardCls.getDeclaredMethod("setReporter", closeGuardReporterCls);
             Method methodSetEnabled = closeGuardCls.getDeclaredMethod("setEnabled", boolean.class);

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java
Patch:
@@ -221,7 +221,9 @@ public Status execute() {
                 MatrixLog.i(TAG, "DestroyedActivityInfo is empty! wait...");
                 synchronized (mDestroyedActivityInfos) {
                     try {
-                        mDestroyedActivityInfos.wait();
+                        while (mDestroyedActivityInfos.isEmpty()) {
+                            mDestroyedActivityInfos.wait();
+                        }
                     } catch (Throwable ignored) {
                         // Ignored.
                     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IDefaultConfig.java
Patch:
@@ -23,7 +23,7 @@
 public interface IDefaultConfig {
 
     boolean isAppMethodBeatEnable();
-    
+
     boolean isFPSEnable();
 
     boolean isEvilMethodTraceEnable();

File: matrix/matrix-android/test/test-backtrace/src/main/java/com/tencent/wxperf/sample/BenchmarkActivity.java
Patch:
@@ -289,7 +289,7 @@ public boolean accept(File file) {
                             if (file.getName().endsWith(".so") || file.getName().endsWith(".oat")
                                     || file.getName().endsWith(".odex")) {
                                 Log.e(TAG, "Start statistics -> " + file.getAbsolutePath());
-                                int[] result = WeChatBacktrace._DoStatistic(file.getAbsolutePath());
+                                int[] result = WeChatBacktrace.doStatistic(file.getAbsolutePath());
                                 maps.put(file.getName(), result);
                                 Log.e(TAG,
                                         "Start statistics <- " + file.getAbsolutePath() + " end.");

File: samples/sample-android/matrix-hooks-sample/src/androidTest/java/com/tencent/matrix/hooks/sample/ExampleInstrumentedTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.tencent.wxperf.sample;
+package com.tencent.matrix.hooks.sample;
 
 import android.content.Context;
 import android.support.test.InstrumentationRegistry;

File: samples/sample-android/matrix-hooks-sample/src/main/java/com/tencent/matrix/hooks/sample/OtherProcessService.java
Patch:
@@ -1,4 +1,4 @@
-package com.tencent.wxperf.sample;
+package com.tencent.matrix.hooks.sample;
 
 import android.app.Service;
 import android.content.Intent;

File: samples/sample-android/matrix-hooks-sample/src/test/java/com/tencent/matrix/hooks/sample/ExampleUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.tencent.wxperf.sample;
+package com.tencent.matrix.hooks.sample;
 
 import org.junit.Test;
 

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/BlueToothMonitorFeature.java
Patch:
@@ -2,11 +2,11 @@
 
 import android.bluetooth.le.ScanSettings;
 import android.os.Build;
+import android.text.TextUtils;
+
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import android.text.TextUtils;
 
-import com.tencent.matrix.batterycanary.monitor.BatteryMonitorConfig;
 import com.tencent.matrix.batterycanary.utils.BatteryCanaryUtil;
 import com.tencent.matrix.batterycanary.utils.BluetoothManagerServiceHooker;
 import com.tencent.matrix.util.MatrixLog;

File: matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/detect/CloseGuardHooker.java
Patch:
@@ -17,6 +17,8 @@
 package com.tencent.matrix.iocanary.detect;
 
 
+import android.annotation.SuppressLint;
+
 import com.tencent.matrix.report.IssuePublisher;
 import com.tencent.matrix.util.MatrixLog;
 
@@ -75,6 +77,7 @@ private boolean tryHook() {
         try {
             Class<?> closeGuardCls = Class.forName("dalvik.system.CloseGuard");
             Class<?> closeGuardReporterCls = Class.forName("dalvik.system.CloseGuard$Reporter");
+            @SuppressLint("SoonBlockedPrivateApi") // FIXME
             Method methodGetReporter = closeGuardCls.getDeclaredMethod("getReporter");
             Method methodSetReporter = closeGuardCls.getDeclaredMethod("setReporter", closeGuardReporterCls);
             Method methodSetEnabled = closeGuardCls.getDeclaredMethod("setEnabled", boolean.class);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IDefaultConfig.java
Patch:
@@ -23,7 +23,7 @@
 public interface IDefaultConfig {
 
     boolean isAppMethodBeatEnable();
-    
+
     boolean isFPSEnable();
 
     boolean isEvilMethodTraceEnable();

File: matrix/matrix-android/test/test-backtrace/src/main/java/com/tencent/wxperf/sample/BenchmarkActivity.java
Patch:
@@ -289,7 +289,7 @@ public boolean accept(File file) {
                             if (file.getName().endsWith(".so") || file.getName().endsWith(".oat")
                                     || file.getName().endsWith(".odex")) {
                                 Log.e(TAG, "Start statistics -> " + file.getAbsolutePath());
-                                int[] result = WeChatBacktrace._DoStatistic(file.getAbsolutePath());
+                                int[] result = WeChatBacktrace.doStatistic(file.getAbsolutePath());
                                 maps.put(file.getName(), result);
                                 Log.e(TAG,
                                         "Start statistics <- " + file.getAbsolutePath() + " end.");

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java
Patch:
@@ -221,7 +221,9 @@ public Status execute() {
                 MatrixLog.i(TAG, "DestroyedActivityInfo is empty! wait...");
                 synchronized (mDestroyedActivityInfos) {
                     try {
-                        mDestroyedActivityInfos.wait();
+                        while (mDestroyedActivityInfos.isEmpty()) {
+                            mDestroyedActivityInfos.wait();
+                        }
                     } catch (Throwable ignored) {
                         // Ignored.
                     }

File: samples/sample-android/matrix-hooks-sample/src/main/java/com/tencent/matrix/hooks/sample/MainActivity.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MainActivity extends Activity {
 
-    private static final String TAG = "Wxperf.Main";
+    private static final String TAG = "Matrix.test.Main";
 
     String threadNameRegex = "[GT]TestHT-?".replace("[", "\\[").replace("]", "\\]").replace("?", "[0-9]*");
 

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java
Patch:
@@ -579,7 +579,7 @@ public void arrangeTask(Runnable runnable, String tag) {
             }
         }
 
-        volatile long[] mTaskStartTS = {0};
+        long[] mTaskStartTS = {0};
 
         @Override
         public void run() {

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java
Patch:
@@ -550,15 +550,15 @@ final static class ThreadTaskExecutor implements Runnable, Handler.Callback {
 
         private boolean mThreadBlocked = false;
 
-        public ThreadTaskExecutor(String threadName) {
+        ThreadTaskExecutor(String threadName) {
             mThreadName = threadName;
         }
 
-        public boolean isThreadBlocked() {
+        boolean isThreadBlocked() {
             return mThreadBlocked;
         }
 
-        public void arrangeTask(Runnable runnable, String tag) {
+        void arrangeTask(Runnable runnable, String tag) {
             synchronized (mTaskQueue) {
                 if (mTaskQueue.contains(tag)) {
                     return;

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/BlueToothMonitorFeature.java
Patch:
@@ -2,11 +2,11 @@
 
 import android.bluetooth.le.ScanSettings;
 import android.os.Build;
+import android.text.TextUtils;
+
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import android.text.TextUtils;
 
-import com.tencent.matrix.batterycanary.monitor.BatteryMonitorConfig;
 import com.tencent.matrix.batterycanary.utils.BatteryCanaryUtil;
 import com.tencent.matrix.batterycanary.utils.BluetoothManagerServiceHooker;
 import com.tencent.matrix.util.MatrixLog;

File: matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/detect/CloseGuardHooker.java
Patch:
@@ -17,6 +17,8 @@
 package com.tencent.matrix.iocanary.detect;
 
 
+import android.annotation.SuppressLint;
+
 import com.tencent.matrix.report.IssuePublisher;
 import com.tencent.matrix.util.MatrixLog;
 
@@ -75,6 +77,7 @@ private boolean tryHook() {
         try {
             Class<?> closeGuardCls = Class.forName("dalvik.system.CloseGuard");
             Class<?> closeGuardReporterCls = Class.forName("dalvik.system.CloseGuard$Reporter");
+            @SuppressLint("SoonBlockedPrivateApi") // FIXME
             Method methodGetReporter = closeGuardCls.getDeclaredMethod("getReporter");
             Method methodSetReporter = closeGuardCls.getDeclaredMethod("setReporter", closeGuardReporterCls);
             Method methodSetEnabled = closeGuardCls.getDeclaredMethod("setEnabled", boolean.class);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IDefaultConfig.java
Patch:
@@ -23,7 +23,7 @@
 public interface IDefaultConfig {
 
     boolean isAppMethodBeatEnable();
-    
+
     boolean isFPSEnable();
 
     boolean isEvilMethodTraceEnable();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IDefaultConfig.java
Patch:
@@ -23,7 +23,7 @@
 public interface IDefaultConfig {
 
     boolean isAppMethodBeatEnable();
-    
+
     boolean isFPSEnable();
 
     boolean isEvilMethodTraceEnable();

File: matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/detect/CloseGuardHooker.java
Patch:
@@ -17,6 +17,8 @@
 package com.tencent.matrix.iocanary.detect;
 
 
+import android.annotation.SuppressLint;
+
 import com.tencent.matrix.report.IssuePublisher;
 import com.tencent.matrix.util.MatrixLog;
 
@@ -75,6 +77,7 @@ private boolean tryHook() {
         try {
             Class<?> closeGuardCls = Class.forName("dalvik.system.CloseGuard");
             Class<?> closeGuardReporterCls = Class.forName("dalvik.system.CloseGuard$Reporter");
+            @SuppressLint("SoonBlockedPrivateApi") // FIXME
             Method methodGetReporter = closeGuardCls.getDeclaredMethod("getReporter");
             Method methodSetReporter = closeGuardCls.getDeclaredMethod("setReporter", closeGuardReporterCls);
             Method methodSetEnabled = closeGuardCls.getDeclaredMethod("setEnabled", boolean.class);

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/BlueToothMonitorFeature.java
Patch:
@@ -2,11 +2,11 @@
 
 import android.bluetooth.le.ScanSettings;
 import android.os.Build;
+import android.text.TextUtils;
+
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import android.text.TextUtils;
 
-import com.tencent.matrix.batterycanary.monitor.BatteryMonitorConfig;
 import com.tencent.matrix.batterycanary.utils.BatteryCanaryUtil;
 import com.tencent.matrix.batterycanary.utils.BluetoothManagerServiceHooker;
 import com.tencent.matrix.util.MatrixLog;

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java
Patch:
@@ -550,15 +550,15 @@ final static class ThreadTaskExecutor implements Runnable, Handler.Callback {
 
         private boolean mThreadBlocked = false;
 
-        public ThreadTaskExecutor(String threadName) {
+        ThreadTaskExecutor(String threadName) {
             mThreadName = threadName;
         }
 
-        public boolean isThreadBlocked() {
+        boolean isThreadBlocked() {
             return mThreadBlocked;
         }
 
-        public void arrangeTask(Runnable runnable, String tag) {
+        void arrangeTask(Runnable runnable, String tag) {
             synchronized (mTaskQueue) {
                 if (mTaskQueue.contains(tag)) {
                     return;

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java
Patch:
@@ -128,7 +128,7 @@ boolean isBacktraceThreadBlocked() {
         return true;
     }
 
-    public void setSavingPath(String savingPath) {
+    void setSavingPath(String savingPath) {
         mSavingPath = savingPath;
         WeChatBacktraceNative.setSavingPath(savingPath);
     }

File: matrix/matrix-android/test/test-backtrace/src/main/java/com/tencent/wxperf/sample/BenchmarkActivity.java
Patch:
@@ -289,7 +289,7 @@ public boolean accept(File file) {
                             if (file.getName().endsWith(".so") || file.getName().endsWith(".oat")
                                     || file.getName().endsWith(".odex")) {
                                 Log.e(TAG, "Start statistics -> " + file.getAbsolutePath());
-                                int[] result = WeChatBacktrace._DoStatistic(file.getAbsolutePath());
+                                int[] result = WeChatBacktrace.doStatistic(file.getAbsolutePath());
                                 maps.put(file.getName(), result);
                                 Log.e(TAG,
                                         "Start statistics <- " + file.getAbsolutePath() + " end.");

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java
Patch:
@@ -128,7 +128,7 @@ boolean isBacktraceThreadBlocked() {
         return true;
     }
 
-    public void setSavingPath(String savingPath) {
+    void setSavingPath(String savingPath) {
         mSavingPath = savingPath;
         WeChatBacktraceNative.setSavingPath(savingPath);
     }

File: matrix/matrix-android/test/test-backtrace/src/main/java/com/tencent/wxperf/sample/BenchmarkActivity.java
Patch:
@@ -289,7 +289,7 @@ public boolean accept(File file) {
                             if (file.getName().endsWith(".so") || file.getName().endsWith(".oat")
                                     || file.getName().endsWith(".odex")) {
                                 Log.e(TAG, "Start statistics -> " + file.getAbsolutePath());
-                                int[] result = WeChatBacktrace._DoStatistic(file.getAbsolutePath());
+                                int[] result = WeChatBacktrace.doStatistic(file.getAbsolutePath());
                                 maps.put(file.getName(), result);
                                 Log.e(TAG,
                                         "Start statistics <- " + file.getAbsolutePath() + " end.");

File: samples/sample-android/matrix-hooks-sample/src/androidTest/java/com/tencent/matrix/hooks/sample/ExampleInstrumentedTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.tencent.wxperf.sample;
+package com.tencent.matrix.hooks.sample;
 
 import android.content.Context;
 import android.support.test.InstrumentationRegistry;

File: samples/sample-android/matrix-hooks-sample/src/main/java/com/tencent/matrix/hooks/sample/OtherProcessService.java
Patch:
@@ -1,4 +1,4 @@
-package com.tencent.wxperf.sample;
+package com.tencent.matrix.hooks.sample;
 
 import android.app.Service;
 import android.content.Intent;

File: samples/sample-android/matrix-hooks-sample/src/test/java/com/tencent/matrix/hooks/sample/ExampleUnitTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.tencent.wxperf.sample;
+package com.tencent.matrix.hooks.sample;
 
 import org.junit.Test;
 

File: matrix/matrix-android/test/matrix-backtrace-benchmark/src/main/java/com/tencent/matrix/benchmark/test/UnwindBenchmarkTest.java
Patch:
@@ -10,6 +10,8 @@ public class UnwindBenchmarkTest {
 
     public static native void nativeBenchmark();
 
+    public static native void nativeBenchmarkJavaStack();
+
     public static native void nativeTry();
 
     public static native void nativeRefreshMaps();

File: matrix/matrix-android/benchmark/matrix-backtrace-benchmark/src/main/java/com/tencent/matrix/benchmark/test/UnwindBenchmarkTest.java
Patch:
@@ -10,6 +10,8 @@ public class UnwindBenchmarkTest {
 
     public static native void nativeBenchmark();
 
+    public static native void nativeBenchmarkJavaStack();
+
     public static native void nativeTry();
 
     public static native void nativeRefreshMaps();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -79,18 +79,18 @@ public void removeListener(IDoFrameListener listener) {
     @Override
     public void onAlive() {
         super.onAlive();
-        UIThreadMonitor.getMonitor().addObserver(this);
         if (isFPSEnable) {
+            UIThreadMonitor.getMonitor().addObserver(this);
             Matrix.with().getApplication().registerActivityLifecycleCallbacks(this);
         }
     }
 
     @Override
     public void onDead() {
         super.onDead();
-        UIThreadMonitor.getMonitor().removeObserver(this);
         removeDropFrameListener();
         if (isFPSEnable) {
+            UIThreadMonitor.getMonitor().removeObserver(this);
             Matrix.with().getApplication().unregisterActivityLifecycleCallbacks(this);
         }
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -79,18 +79,18 @@ public void removeListener(IDoFrameListener listener) {
     @Override
     public void onAlive() {
         super.onAlive();
-        UIThreadMonitor.getMonitor().addObserver(this);
         if (isFPSEnable) {
+            UIThreadMonitor.getMonitor().addObserver(this);
             Matrix.with().getApplication().registerActivityLifecycleCallbacks(this);
         }
     }
 
     @Override
     public void onDead() {
         super.onDead();
-        UIThreadMonitor.getMonitor().removeObserver(this);
         removeDropFrameListener();
         if (isFPSEnable) {
+            UIThreadMonitor.getMonitor().removeObserver(this);
             Matrix.with().getApplication().unregisterActivityLifecycleCallbacks(this);
         }
     }

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java
Patch:
@@ -451,7 +451,7 @@ public boolean accept(File pathname) {
                             return false;
                         }
                     });
-                } catch (CancellationException e) {
+                } catch (CancellationException | OperationCanceledException e) {
                     return;
                 } finally {
                     mWarmUpScheduler.taskFinished(TaskType.DiskUsage);

File: matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java
Patch:
@@ -451,7 +451,7 @@ public boolean accept(File pathname) {
                             return false;
                         }
                     });
-                } catch (CancellationException e) {
+                } catch (CancellationException | OperationCanceledException e) {
                     return;
                 } finally {
                     mWarmUpScheduler.taskFinished(TaskType.DiskUsage);

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -264,12 +264,12 @@ public void visit(int version, int access, String name, String signature, String
         @Override
         public MethodVisitor visitMethod(int access, String name, String desc,
                                          String signature, String[] exceptions) {
+            if (!hasWindowFocusMethod) {
+                hasWindowFocusMethod = MethodCollector.isWindowFocusChangeMethod(name, desc);
+            }
             if (isABSClass) {
                 return super.visitMethod(access, name, desc, signature, exceptions);
             } else {
-                if (!hasWindowFocusMethod) {
-                    hasWindowFocusMethod = MethodCollector.isWindowFocusChangeMethod(name, desc);
-                }
                 MethodVisitor methodVisitor = cv.visitMethod(access, name, desc, signature, exceptions);
                 return new TraceMethodAdapter(api, methodVisitor, access, name, desc, this.className,
                         hasWindowFocusMethod, isActivityOrSubClass, isNeedTrace);

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -264,12 +264,12 @@ public void visit(int version, int access, String name, String signature, String
         @Override
         public MethodVisitor visitMethod(int access, String name, String desc,
                                          String signature, String[] exceptions) {
+            if (!hasWindowFocusMethod) {
+                hasWindowFocusMethod = MethodCollector.isWindowFocusChangeMethod(name, desc);
+            }
             if (isABSClass) {
                 return super.visitMethod(access, name, desc, signature, exceptions);
             } else {
-                if (!hasWindowFocusMethod) {
-                    hasWindowFocusMethod = MethodCollector.isWindowFocusChangeMethod(name, desc);
-                }
                 MethodVisitor methodVisitor = cv.visitMethod(access, name, desc, signature, exceptions);
                 return new TraceMethodAdapter(api, methodVisitor, access, name, desc, this.className,
                         hasWindowFocusMethod, isActivityOrSubClass, isNeedTrace);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/TracePlugin.java
Patch:
@@ -89,7 +89,7 @@ public void run() {
                     }
                 }
 
-                if(traceConfig.isAppMethodBeatEnable()) {
+                if (traceConfig.isAppMethodBeatEnable()) {
                     AppMethodBeat.getInstance().onStart();
                 }
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -38,7 +38,7 @@ public class TraceConfig implements IDefaultConfig {
     public boolean defaultFpsEnable;
     public boolean defaultMethodTraceEnable;
     public boolean defaultStartupEnable;
-    public boolean defaultAppMethodBeatEnable;
+    public boolean defaultAppMethodBeatEnable = true;
     public boolean defaultAnrEnable;
     public boolean isDebug;
     public boolean isDevEnv;

File: matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/utils/TimeBreakerTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.tencent.matrix.batterycanary.utils;
 
 import android.content.Context;
-¬
 import androidx.test.InstrumentationRegistry;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 

File: matrix/matrix-android/test/test-backtrace/src/main/java/com/tencent/wxperf/sample/BenchmarkActivity.java
Patch:
@@ -126,6 +126,8 @@ public void onReport(ReportEvent type, Object... args) {
         // Init backtrace
         WeChatBacktrace.instance().configure(getApplicationContext())
                 .warmUpSettings(WeChatBacktrace.WarmUpTiming.PostStartup, 0)
+                .directoryToWarmUp(WeChatBacktrace.getSystemFrameworkOATPath() + "boot.oat")
+                .directoryToWarmUp(WeChatBacktrace.getSystemFrameworkOATPath() + "boot-framework.oat")
 //                .enableIsolateProcessLogger(true)
 //                .enableOtherProcessLogger(true)
                 .commit();

File: matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/monitor/feature/MonitorFeatureAlarmTest.java
Patch:
@@ -19,9 +19,10 @@
 import android.app.AlarmManager;
 import android.app.Application;
 import android.app.PendingIntent;
-import androidx.arch.core.util.Function;
 import android.content.Context;
 import android.content.Intent;
+
+import androidx.arch.core.util.Function;
 import androidx.test.platform.app.InstrumentationRegistry;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import android.text.TextUtils;

File: matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/monitor/feature/MonitorFeatureJiffiesTest.java
Patch:
@@ -17,11 +17,12 @@
 package com.tencent.matrix.batterycanary.monitor.feature;
 
 import android.app.Application;
-import androidx.arch.core.util.Function;
 import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Process;
+
+import androidx.arch.core.util.Function;
 import androidx.test.platform.app.InstrumentationRegistry;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 

File: matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/utils/BleManagerHookerTest.java
Patch:
@@ -72,7 +72,6 @@ public void testDiscovery() {
         Assert.assertEquals(ContextCompat.checkSelfPermission(mContext, "android.permission.ACCESS_FINE_LOCATION") == 0, discovery);
     }
 
-    @Ignore
     @Test
     public void testScanning() throws Exception {
         final AtomicInteger discInc = new AtomicInteger();
@@ -292,7 +291,6 @@ public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {
         hooker.doUnHook();
     }
 
-    @Ignore
     @Test
     public void testBleHooker() throws InterruptedException {
         final AtomicInteger discInc = new AtomicInteger();

File: matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/utils/CanaryUtilsTest.java
Patch:
@@ -26,9 +26,10 @@
 import android.os.Handler;
 import android.os.IBinder;
 import android.os.Looper;
+
+import androidx.core.app.NotificationCompat;
 import androidx.test.platform.app.InstrumentationRegistry;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
-import androidx.core.app.NotificationCompat;
 import android.text.TextUtils;
 import android.util.Log;
 import android.widget.Toast;

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/AppStats.java
Patch:
@@ -138,7 +138,9 @@ public static AppStats current() {
         if (Matrix.isInstalled()) {
             BatteryMonitorPlugin plugin = Matrix.with().getPluginByClass(BatteryMonitorPlugin.class);
             if (plugin != null) {
-                return new CurrAppStats(plugin.core());
+                AppStats currAppStats = new CurrAppStats(plugin.core());
+                currAppStats.isValid = true;
+                return currAppStats;
             }
         }
         return current(1L);

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/AbsTaskMonitorFeature.java
Patch:
@@ -327,9 +327,7 @@ protected void updateDeltas(TaskJiffiesSnapshot bgn, TaskJiffiesSnapshot end) {
             return;
         }
 
-        MatrixLog.i(TAG,
-                "onTaskReport: " + delta.dlt.name + ", jiffies = " + delta.dlt.jiffies.get()
-                        + ", millis = " + delta.during);
+        MatrixLog.i(TAG, "onTaskReport: %s, jiffies = %s, millis = %s", delta.dlt.name, delta.dlt.jiffies.get(), delta.during);
 
         // Compute task context info
         if (mAppStatFeat != null) {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/BluetoothManagerServiceHooker.java
Patch:
@@ -155,7 +155,7 @@ public Object invoke(Object proxy, Method method, Object[] args) {
                     }
 
                     try {
-                        return method.invoke(proxy, args);
+                        return method.invoke(delegate, args);
                     } catch (Throwable e) {
                         MatrixLog.printErrStackTrace(TAG, e, "invokeBluetooth fail");
                         return null;
@@ -209,7 +209,7 @@ public Object invoke(Object proxy, Method method, Object[] args) {
                     }
 
                     try {
-                        return method.invoke(proxy, args);
+                        return method.invoke(delegate, args);
                     } catch (Throwable e) {
                         MatrixLog.printErrStackTrace(TAG, e, "invokeBluetoothGatt fail");
                         return null;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java
Patch:
@@ -111,7 +111,7 @@ private ActivityRefWatcher(Application app,
         super(app, FILE_CONFIG_EXPIRED_TIME_MILLIS, resourcePlugin.getTag(), resourcePlugin);
         this.mResourcePlugin = resourcePlugin;
         final ResourceConfig config = resourcePlugin.getConfig();
-        mHandlerThread = MatrixHandlerThread.getNewHandlerThread("matrix_res"); // avoid blocking default matrix thread
+        mHandlerThread = MatrixHandlerThread.getNewHandlerThread("matrix_res", Thread.NORM_PRIORITY); // avoid blocking default matrix thread
         mHandler = new Handler(mHandlerThread.getLooper());
         mDumpHprofMode = config.getDumpHprofMode();
         mBgScanTimes = config.getBgScanIntervalMillis();
@@ -314,7 +314,7 @@ public void triggerGc() {
         try {
             Thread.sleep(100);
         } catch (InterruptedException e) {
-            e.printStackTrace();
+            MatrixLog.printErrStackTrace(TAG, e, "");
         }
         Runtime.getRuntime().runFinalization();
         MatrixLog.v(TAG, "gc was triggered.");

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java
Patch:
@@ -314,7 +314,7 @@ public void triggerGc() {
         try {
             Thread.sleep(100);
         } catch (InterruptedException e) {
-            e.printStackTrace();
+            MatrixLog.printErrStackTrace(TAG, e, "");
         }
         Runtime.getRuntime().runFinalization();
         MatrixLog.v(TAG, "gc was triggered.");

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java
Patch:
@@ -111,7 +111,7 @@ private ActivityRefWatcher(Application app,
         super(app, FILE_CONFIG_EXPIRED_TIME_MILLIS, resourcePlugin.getTag(), resourcePlugin);
         this.mResourcePlugin = resourcePlugin;
         final ResourceConfig config = resourcePlugin.getConfig();
-        mHandlerThread = MatrixHandlerThread.getNewHandlerThread("matrix_res"); // avoid blocking default matrix thread
+        mHandlerThread = MatrixHandlerThread.getNewHandlerThread("matrix_res", Thread.NORM_PRIORITY); // avoid blocking default matrix thread
         mHandler = new Handler(mHandlerThread.getLooper());
         mDumpHprofMode = config.getDumpHprofMode();
         mBgScanTimes = config.getBgScanIntervalMillis();

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -366,7 +366,8 @@ private boolean isActivityOrSubClass(String className, ConcurrentHashMap<String,
         className = className.replace(".", "/");
         boolean isActivity = className.equals(TraceBuildConstants.MATRIX_TRACE_ACTIVITY_CLASS)
                 || className.equals(TraceBuildConstants.MATRIX_TRACE_V4_ACTIVITY_CLASS)
-                || className.equals(TraceBuildConstants.MATRIX_TRACE_V7_ACTIVITY_CLASS);
+                || className.equals(TraceBuildConstants.MATRIX_TRACE_V7_ACTIVITY_CLASS)
+                || className.equals(TraceBuildConstants.MATRIX_TRACE_ANDROIDX_ACTIVITY_CLASS);
         if (isActivity) {
             return true;
         } else {

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/TraceBuildConstants.java
Patch:
@@ -30,6 +30,7 @@ public class TraceBuildConstants {
     public final static String MATRIX_TRACE_ACTIVITY_CLASS = "android/app/Activity";
     public final static String MATRIX_TRACE_V7_ACTIVITY_CLASS = "android/support/v7/app/AppCompatActivity";
     public final static String MATRIX_TRACE_V4_ACTIVITY_CLASS = "android/support/v4/app/FragmentActivity";
+    public final static String MATRIX_TRACE_ANDROIDX_ACTIVITY_CLASS = "androidx/appcompat/app/AppCompatActivity";
     public final static String MATRIX_TRACE_APPLICATION_CLASS = "android/app/Application";
     public final static String MATRIX_TRACE_METHOD_BEAT_CLASS = "com/tencent/matrix/trace/core/AppMethodBeat";
     public final static String MATRIX_TRACE_ON_WINDOW_FOCUS_METHOD_ARGS = "(Z)V";

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryMonitorCallback.java
Patch:
@@ -275,7 +275,7 @@ public void onWatchingThreads(ListEntry<? extends ThreadJiffiesEntry> threadJiff
                     StackTraceElement[] elements = entry.getValue();
                     String threadName = thread.getName();
 
-                    for (ThreadJiffiesEntry threadJiffies: threadJiffiesList.getList()) {
+                    for (ThreadJiffiesEntry threadJiffies : threadJiffiesList.getList()) {
                         String targetThreadName = threadJiffies.name;
                         if (targetThreadName.equalsIgnoreCase(threadName)
                                 || threadName.contains(targetThreadName)) {

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java
Patch:
@@ -9,7 +9,8 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.os.Build;
-import android.support.v4.app.NotificationCompat;
+
+import androidx.core.app.NotificationCompat;
 
 import com.tencent.matrix.resource.R;
 import com.tencent.matrix.resource.analyzer.model.ActivityLeakResult;

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -90,7 +90,7 @@ public static HandlerThread getNewHandlerThread(String name) {
         return handlerThread;
     }
 
-    public static HandlerThread getNewHandlerThread(String name,int priority) {
+    public static HandlerThread getNewHandlerThread(String name, int priority) {
         HandlerThread handlerThread = getNewHandlerThread(name);
         handlerThread.setPriority(priority);
         return handlerThread;
@@ -147,7 +147,8 @@ public int compare(Info o1, Info o2) {
                 });
                 hashMap.clear();
                 if (!list.isEmpty()) {
-                    MatrixLog.i(TAG, "matrix default thread has exec in background! %s cost:%s", list, System.currentTimeMillis() - start);
+                    MatrixLog.i(TAG, "matrix default thread has exec in background! %s cost:%s", list,
+                            System.currentTimeMillis() - start);
                 }
             } else {
                 hashMap.clear();

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/config/ResourceConfig.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.tencent.matrix.resource.config;
 
-import android.content.Intent;
-
 import com.tencent.mrs.plugin.IDynamicConfig;
 
 import java.util.concurrent.TimeUnit;
@@ -46,7 +44,7 @@ public enum DumpMode {
     private final IDynamicConfig mDynamicConfig;
     private final DumpMode mDumpHprofMode;
     private final boolean mDetectDebugger;
-    private final String  mTargetActivity;
+    private final String mTargetActivity;
 
     private ResourceConfig(IDynamicConfig dynamicConfig, DumpMode dumpHprofMode, boolean detectDebuger, String targetActivity) {
         this.mDynamicConfig = dynamicConfig;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/dumper/DumpStorageManager.java
Patch:
@@ -19,7 +19,6 @@
 import android.os.Environment;
 import android.os.Process;
 
-import com.tencent.matrix.Matrix;
 import com.tencent.matrix.util.MatrixLog;
 import com.tencent.matrix.util.MatrixUtil;
 
@@ -28,7 +27,6 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
-import java.util.UUID;
 
 /**
  * Created by tangyinsheng on 2017/6/2.
@@ -67,7 +65,8 @@ public File newHprofFile() {
         final String hprofFileName = "dump"
                 + "_" + MatrixUtil.getProcessName(mContext).replace(".", "_").replace(":", "_")
                 + "_" + Process.myPid()
-                + "_" + new SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault()).format(new Date())
+                + "_"
+                + new SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault()).format(new Date())
                 + HPROF_EXT;
         return new File(storageDir, hprofFileName);
     }

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/NoDumpProcessor.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * Created by Yves on 2021/3/4
  */
-public class NoDumpProcessor extends BaseLeakProcessor{
+public class NoDumpProcessor extends BaseLeakProcessor {
 
     private static final String TAG = "Matrix.LeakProcessor.NoDump";
 

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/CanaryWorkerService.java
Patch:
@@ -22,7 +22,7 @@
 
 import com.tencent.matrix.resource.analyzer.model.HeapDump;
 import com.tencent.matrix.resource.hproflib.HprofBufferShrinker;
-import com.tencent.matrix.resource.watcher.DumpStorageManager;
+import com.tencent.matrix.resource.dumper.DumpStorageManager;
 import com.tencent.matrix.util.MatrixLog;
 
 import java.io.BufferedOutputStream;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/SplashActivity.java
Patch:
@@ -40,7 +40,7 @@ public void run() {
                 startActivity(intent);
                 finish();
             }
-        }, 2000);
+        }, 500);
         sHandlerThread = new HandlerThread("SplashActivity");
         sHandlerThread.start();
 

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -75,8 +75,8 @@ public static Handler getDefaultHandler() {
         return defaultHandler;
     }
 
-    public static HandlerThread getNewHandlerThread(String name,int priority) {
-        for (Iterator<HandlerThread> i = handlerThreads.iterator(); i.hasNext(); ) {
+    public static HandlerThread getNewHandlerThread(String name, int priority) {
+        for (Iterator<HandlerThread> i = handlerThreads.iterator(); i.hasNext();) {
             HandlerThread element = i.next();
             if (!element.isAlive()) {
                 i.remove();

File: matrix/matrix-android/matrix-arscutil/src/main/java/com/tencent/mm/arscutil/data/ResPackage.java
Patch:
@@ -131,7 +131,7 @@ public void shrinkResNameStringPool() {
         HashMap<Integer, Integer> countMap = new HashMap<>();
         for (ResChunk resType : resTypeArray) {
             if (resType.getType() == ArscConstants.RES_TABLE_TYPE_TYPE) {
-                for ( int index : ((ResType) resType).getResNameStringCountMap().keySet()) {
+                for (int index : ((ResType) resType).getResNameStringCountMap().keySet()) {
                     if (!countMap.containsKey(index)) {
                         countMap.put(index, 0);
                     }

File: matrix/matrix-android/matrix-arscutil/src/main/java/com/tencent/mm/arscutil/data/ResStringBlock.java
Patch:
@@ -164,7 +164,7 @@ public static byte[] encodeStringPoolEntry(String str, Charset charSet) {
             resultBuf = ByteBuffer.allocate(content.length + 2 + 1);
             resultBuf.order(ByteOrder.LITTLE_ENDIAN);
             if (len > 0xFF) {
-                resultBuf.put( (byte) (((len & 0x7F00) >> 8) | 0x80));
+                resultBuf.put((byte) (((len & 0x7F00) >> 8) | 0x80));
                 resultBuf.put((byte) (len & 0xFF));
             } else {
                 resultBuf.put((byte) (len & 0xFF));
@@ -234,7 +234,7 @@ public void refresh() {
     }
 
     @Override
-    public byte[] toBytes()  {
+    public byte[] toBytes() {
         ByteBuffer byteBuffer = ByteBuffer.allocate(chunkSize);
         byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
         byteBuffer.clear();

File: matrix/matrix-android/matrix-arscutil/src/main/java/com/tencent/mm/arscutil/io/ArscReader.java
Patch:
@@ -268,9 +268,9 @@ private ResValue readResValue() throws IOException {
         //Log.d(TAG, "resValue data %d", resValue.getData());
 
         if (resValue.getDataType() == ArscConstants.RES_VALUE_DATA_TYPE_STRING) {
-        	Log.d(TAG,  "resValue string %s", ResStringBlock.resolveStringPoolEntry(globalResTable.getGlobalStringPool().getStrings().get(resValue.getData()).array(), globalResTable.getGlobalStringPool().getCharSet()));
+            Log.d(TAG, "resValue string %s", ResStringBlock.resolveStringPoolEntry(globalResTable.getGlobalStringPool().getStrings().get(resValue.getData()).array(), globalResTable.getGlobalStringPool().getCharSet()));
         } else {
-        	Log.d(TAG, "resValue %s", resValue.printData());
+            Log.d(TAG, "resValue %s", resValue.printData());
         }
 
         return resValue;

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryMonitorCore.java
Patch:
@@ -74,7 +74,7 @@ private class BackgroundLoopCheckTask implements Runnable {
         int round = 0;
         @Override
         public void run() {
-            round ++;
+            round++;
             MatrixLog.i(TAG, "#onBackgroundLoopCheck, round = " + round);
             if (!isForeground()) {
                 synchronized (BatteryMonitorCore.class) {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/JiffiesMonitorFeature.java
Patch:
@@ -31,6 +31,7 @@ public final class JiffiesMonitorFeature extends AbsMonitorFeature {
     public interface JiffiesListener {
         @Deprecated
         void onParseError(int pid, int tid);
+
         void onWatchingThreads(ListEntry<? extends JiffiesSnapshot.ThreadJiffiesEntry> threadJiffiesList);
     }
 
@@ -233,7 +234,8 @@ public static JiffiesSnapshot currentJiffiesSnapshot(ProcessInfo processInfo, bo
         public ListEntry<ThreadJiffiesSnapshot> threadEntries;
         public DigitEntry<Integer> threadNum;
 
-        private JiffiesSnapshot() {}
+        private JiffiesSnapshot() {
+        }
 
         @Override
         public Delta<JiffiesSnapshot> diff(JiffiesSnapshot bgn) {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/TrafficMonitorFeature.java
Patch:
@@ -1,13 +1,10 @@
 package com.tencent.matrix.batterycanary.monitor.feature;
 
 import android.content.Context;
-import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.tencent.matrix.batterycanary.monitor.BatteryMonitorCore;
 import com.tencent.matrix.batterycanary.monitor.feature.MonitorFeature.Snapshot.Differ.DigitDiffer;
 import com.tencent.matrix.batterycanary.utils.RadioStatUtil;
-import com.tencent.matrix.util.MatrixLog;
 
 /**
  * Device Status Monitoring:

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/LocationManagerServiceHooker.java
Patch:
@@ -23,7 +23,6 @@
 
 import com.tencent.matrix.util.MatrixLog;
 
-import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/TimeBreaker.java
Patch:
@@ -124,7 +124,7 @@ public Long apply(String input) {
 
             List<Pair<String, Integer>> portions = new ArrayList<>();
             for (Map.Entry<String, Long> item : mapper.entrySet()) {
-                String key  = item.getKey();
+                String key = item.getKey();
                 long value = item.getValue();
                 portions.add(new Pair<>(key, configureRatio(value, totalMillis)));
             }
@@ -180,7 +180,8 @@ public static TimePortions ofInvalid() {
         public List<Pair<String, Integer>> portions = Collections.emptyList();
         private boolean mIsValid = true;
 
-        TimePortions() {}
+        TimePortions() {
+        }
 
         public boolean isValid() {
             return mIsValid;

File: matrix/matrix-android/matrix-commons/src/main/java/com/tencent/matrix/javalib/util/Pair.java
Patch:
@@ -14,7 +14,7 @@ public boolean equals(Object o) {
             return true;
         } else if (o != null && this.getClass() == o.getClass()) {
             boolean equal = false;
-            Pair<?, ?> pair = (Pair)o;
+            Pair<?, ?> pair = (Pair) o;
             if (this.left != null) {
                 if (this.left.equals(pair.left)) {
                     equal = true;

File: matrix/matrix-android/matrix-commons/src/main/java/com/tencent/matrix/javalib/util/Util.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.tencent.matrix.javalib.util;
 
-import java.util.Locale;
 import java.util.regex.Pattern;
 
 /**

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/shrinker/RemoveUnusedResourceHelper.java
Patch:
@@ -56,7 +56,7 @@ public static void shrinkResourceTxtFile(String resourceTxt, HashMap<String, Int
             }
             for (String styleable : styleableMap.keySet()) {
                 StringBuilder strBuilder = new StringBuilder();
-                Pair<String, Integer> styleableAttrs[] = styleableMap.get(styleable);
+                Pair<String, Integer>[] styleableAttrs = styleableMap.get(styleable);
                 strBuilder.append("int[]").append(" ")
                         .append("styleable").append(" ")
                         .append(styleable.substring(styleable.indexOf('.', 2) + 1)).append(" ")
@@ -123,7 +123,7 @@ public static void readResourceTxtFile(File resTxtFile, HashMap<String, Integer>
                                         styleableAttrs.add(columns[i]);
                                     }
                                 }
-                                Pair<String, Integer> array[] =
+                                Pair<String, Integer>[] array =
                                         (Pair<String, Integer>[]) Array.newInstance(Pair.class, styleableAttrs.size());
                                 styleableMap.put(styleableName, array);
                             }

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/Configuration.java
Patch:
@@ -17,7 +17,7 @@ public class Configuration {
     public String traceClassOut;
     public HashSet<String> blockSet = new HashSet<>();
 
-    public Configuration() {}
+    public Configuration() { }
 
     Configuration(String packageName, String mappingDir, String baseMethodMapPath, String methodMapFilePath,
                   String ignoreMethodMapFilePath, String blockListFilePath, String traceClassOut) {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -9,7 +9,6 @@
 import com.tencent.matrix.trace.constants.Constants;
 import com.tencent.matrix.trace.listeners.LooperObserver;
 import com.tencent.matrix.trace.util.Utils;
-import com.tencent.matrix.util.DeviceUtil;
 import com.tencent.matrix.util.MatrixLog;
 import com.tencent.matrix.util.ReflectUtils;
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IDoFrameListener.java
Patch:
@@ -22,7 +22,6 @@
 
 import java.util.LinkedList;
 import java.util.List;
-import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executor;
 
 /**

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/LooperObserver.java
Patch:
@@ -10,7 +10,7 @@ public abstract class LooperObserver {
     public void dispatchBegin(long beginNs, long cpuBeginNs, long token) {
         isDispatchBegin = true;
     }
-    
+
     public void doFrame(String focusedActivity, long startNs, long endNs, boolean isVsyncFrame, long intendedFrameTimeNs, long inputCostNs, long animationCostNs, long traversalCostNs) {
 
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -142,7 +142,7 @@ public AppMethodBeat.IndexRecord getBeginRecord() {
             return beginRecord;
         }
 
-        public AnrHandleTask() {
+        AnrHandleTask() {
         }
 
         AnrHandleTask(AppMethodBeat.IndexRecord record, long token) {

File: matrix/matrix-android/work-in-progress/matrix-thread-canary/src/main/java/com/tencent/matrix/threadcanary/ThreadMonitor.java
Patch:
@@ -7,14 +7,12 @@
 import android.util.LongSparseArray;
 
 import com.tencent.matrix.AppActiveMatrixDelegate;
-import com.tencent.matrix.Matrix;
 import com.tencent.matrix.plugin.Plugin;
 import com.tencent.matrix.report.Issue;
 import com.tencent.matrix.trace.core.AppMethodBeat;
 import com.tencent.matrix.util.MatrixHandlerThread;
 import com.tencent.matrix.util.MatrixLog;
 import com.tencent.matrix.util.MatrixUtil;
-import com.tencent.matrix.util.ReflectUtils;
 
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -149,7 +147,8 @@ public void next(ThreadInfo threadInfo) {
                         if (threadInfo.tid == mainTid) {
                             threadInfo.name = "main";
                         } else {
-                            threadInfo.name = appThreadInfo.name.replaceAll("-?[0-9]\\d*", "?") + "J";
+                            threadInfo.name =
+                                    appThreadInfo.name.replaceAll("-?[0-9]\\d*", "?") + "J";
                         }
                         threadInfo.stackTrace = appThreadInfo.stackTrace;
                         threadInfo.isHandlerThread = appThreadInfo.isHandlerThread;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/MatrixJobIntentService.java
Patch:
@@ -37,8 +37,6 @@
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 
-import androidx.legacy.content.WakefulBroadcastReceiver;
-
 import com.tencent.matrix.util.MatrixLog;
 
 import java.util.ArrayList;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ResourcePlugin.java
Patch:
@@ -49,6 +49,7 @@ public static void activityLeakFixer(Application application) {
             public void onActivityDestroyed(Activity activity) {
                 ActivityLeakFixer.fixInputMethodManagerLeak(activity);
                 ActivityLeakFixer.unbindDrawables(activity);
+                ActivityLeakFixer.fixViewLocationHolderLeakApi28(activity);
             }
         });
     }

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ResourcePlugin.java
Patch:
@@ -106,7 +106,9 @@ public String getTag() {
     @Override
     public void onForeground(boolean isForeground) {
         MatrixLog.d(TAG, "onForeground: %s", isForeground);
-        mWatcher.onForeground(isForeground);
+        if (isPluginStarted() && mWatcher != null) {
+            mWatcher.onForeground(isForeground);
+        }
     }
 
     public ResourceConfig getConfig() {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/DeviceStatMonitorFeature.java
Patch:
@@ -191,9 +191,11 @@ public boolean startListen(Context context) {
                     public boolean onStateChanged(String event) {
                         switch (event) {
                             case Intent.ACTION_POWER_CONNECTED:
+                                mIsCharging = true;
                                 mListener.accept(1);
                                 break;
                             case Intent.ACTION_POWER_DISCONNECTED:
+                                mIsCharging = false;
                                 mListener.accept(2);
                                 break;
                             case Intent.ACTION_SCREEN_ON:

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -359,7 +359,8 @@ private boolean isActivityOrSubClass(String className, ConcurrentHashMap<String,
         className = className.replace(".", "/");
         boolean isActivity = className.equals(TraceBuildConstants.MATRIX_TRACE_ACTIVITY_CLASS)
                 || className.equals(TraceBuildConstants.MATRIX_TRACE_V4_ACTIVITY_CLASS)
-                || className.equals(TraceBuildConstants.MATRIX_TRACE_V7_ACTIVITY_CLASS);
+                || className.equals(TraceBuildConstants.MATRIX_TRACE_V7_ACTIVITY_CLASS)
+                || className.equals(TraceBuildConstants.MATRIX_TRACE_ANDROIDX_ACTIVITY_CLASS);
         if (isActivity) {
             return true;
         } else {

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/TraceBuildConstants.java
Patch:
@@ -30,6 +30,7 @@ public class TraceBuildConstants {
     public final static String MATRIX_TRACE_ACTIVITY_CLASS = "android/app/Activity";
     public final static String MATRIX_TRACE_V7_ACTIVITY_CLASS = "android/support/v7/app/AppCompatActivity";
     public final static String MATRIX_TRACE_V4_ACTIVITY_CLASS = "android/support/v4/app/FragmentActivity";
+    public final static String MATRIX_TRACE_ANDROIDX_ACTIVITY_CLASS = "androidx/appcompat/app/AppCompatActivity";
     public final static String MATRIX_TRACE_APPLICATION_CLASS = "android/app/Application";
     public final static String MATRIX_TRACE_METHOD_BEAT_CLASS = "com/tencent/matrix/trace/core/AppMethodBeat";
     public final static String MATRIX_TRACE_ON_WINDOW_FOCUS_METHOD_ARGS = "(Z)V";

File: app/src/main/java/com/tencent/wxperf/sample/MainActivity.java
Patch:
@@ -427,7 +427,7 @@ public void jectlTest(View view) {
 //        int ret = JeCtl.compact();
 //        Log.d(TAG, "tryDisableRetain result :" + ret);
         Log.d(TAG, "jemalloc version = " + JeCtl.version());
-        Log.d(TAG, "set retain = " +  JeCtl.setRetain(true));
+        Log.d(TAG, "set retain, old value = " +  JeCtl.setRetain(true));
     }
 
     public void killSelf(View view) {

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktrace.java
Patch:
@@ -175,7 +175,7 @@ private void configure(Configuration configuration) {
 
             // Init saving path
             String savingPath = WarmUpUtility.validateSavingPath(configuration);
-            Log.i(TAG, "Set saving path = %s", savingPath);
+            Log.i(TAG, "Set saving path: %s", savingPath);
             File file = new File(savingPath);
             file.mkdirs();
             if (!savingPath.endsWith(File.separator)) {
@@ -200,7 +200,7 @@ private void configure(Configuration configuration) {
                 }
             }
             WeChatBacktraceNative.setBacktraceMode(mode.value);
-
+            Log.i(TAG, "Has warmed up: %s", hasWarmedUp);
             // Set warmed up flag
             WeChatBacktraceNative.setWarmedUp(hasWarmedUp);
 

File: matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/utils/LocationManagerHookerTest.java
Patch:
@@ -189,7 +189,7 @@ public void onProviderDisabled(String provider) {
     }
 
     @Test
-    public void testWifiCounting() {
+    public void testLocationCounting() {
         final AtomicLong minTimeRef = new AtomicLong();
         final AtomicReference<Float> minDistanceRef = new AtomicReference<>();
 

File: app/src/main/java/com/tencent/wxperf/sample/MainActivity.java
Patch:
@@ -62,7 +62,6 @@ public void onServiceDisconnected(ComponentName name) {
         WeChatBacktrace.instance().configure(getApplicationContext())
                 .setBacktraceMode(WeChatBacktrace.Mode.Quicken)
                 .warmUpSettings(WeChatBacktrace.WarmUpTiming.PostStartup, 10000)
-                .clearWarmUpDirectorySet()
                 .directoryToWarmUp("/system/framework/arm/boot.oat")
                 .directoryToWarmUp("/system/framework/arm/boot-framework.oat")
                 .enableIsolateProcessLogger(true)

File: app/src/main/java/com/tencent/wxperf/sample/MainActivity.java
Patch:
@@ -62,6 +62,7 @@ public void onServiceDisconnected(ComponentName name) {
         WeChatBacktrace.instance().configure(getApplicationContext())
                 .setBacktraceMode(WeChatBacktrace.Mode.Quicken)
                 .warmUpSettings(WeChatBacktrace.WarmUpTiming.PostStartup, 10000)
+                .clearWarmUpDirectorySet()
                 .directoryToWarmUp("/system/framework/arm/boot.oat")
                 .directoryToWarmUp("/system/framework/arm/boot-framework.oat")
                 .enableIsolateProcessLogger(true)

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpReporter.java
Patch:
@@ -7,6 +7,8 @@ enum ReportEvent {
         CleanedUp,
         WarmUpThreadBlocked,
         WarmUpFailed,
+        WarmUpDuration,
+        ConsumeRequestDuration,
     }
 
     void onReport(ReportEvent type, Object ... args);

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktrace.java
Patch:
@@ -162,7 +162,9 @@ private void configure(Configuration configuration) {
         // Load backtrace library.
         loadLibrary(configuration.mLibraryLoader);
 
-        enableLogger(configuration.mPathOfXLogSo, configuration.mEnableLog);
+        if (configuration.mEnableLog) {
+            enableLogger(configuration.mPathOfXLogSo, true);
+        }
 
         Log.i(TAG, configuration.toString());
 

File: app/src/main/java/com/tencent/wxperf/sample/JNIObj.java
Patch:
@@ -45,6 +45,8 @@ public static void init() {
 
     public native static void concurrentMapTest();
 
+    public native static void mutexTest();
+
     public static String calledByJNI() {
         Log.d(TAG, "called By JNI");
         return stackTraceToString(new Throwable().getStackTrace());

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpReporter.java
Patch:
@@ -6,8 +6,9 @@ enum ReportEvent {
         WarmedUp,
         CleanedUp,
         WarmUpThreadBlocked,
+        WarmUpFailed,
     }
 
-    void onReport(ReportEvent type);
+    void onReport(ReportEvent type, Object ... args);
 
 }

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktraceNative.java
Patch:
@@ -50,7 +50,7 @@ public class WeChatBacktraceNative {
      * @param so_path
      */
     @Keep
-    static native void warmUp(String so_path, int elf_start_offset);
+    static native boolean warmUp(String so_path, int elf_start_offset, boolean only_save_file);
 
     /**
      * Notify warmed-up elf file to native library.

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/WakeLockMonitorFeature.java
Patch:
@@ -141,7 +141,6 @@ public void onReleaseWakeLock(IBinder token, int flags) {
 
         } else {
             MatrixLog.w(TAG, "missing tracking, token = " + token);
-            throw new RuntimeException("foo");
         }
     }
 

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpUtility.java
Patch:
@@ -20,7 +20,7 @@ class WarmUpUtility {
     private final static String FILE_WARMED_UP = "warmed-up";
     private final static String FILE_CLEAN_UP_TIMESTAMP = "clean-up.timestamp";
 
-    final static long DURATION_LAST_ACCESS_EXPIRED = 15L * 24 * 3600 * 1000; // milliseconds
+    final static long DURATION_LAST_ACCESS_EXPIRED = 60L * 24 * 3600 * 1000; // milliseconds
     final static long DURATION_CLEAN_UP_EXPIRED = 3L * 24 * 3600 * 1000; // milliseconds
     final static long DURATION_CLEAN_UP = 7L * 24 * 3600 * 1000; // milliseconds
 

File: wxperf-benchmark/src/main/java/com/tencent/wxperf/jni/test/UnwindBenckmarkTest.java
Patch:
@@ -16,4 +16,6 @@ public class UnwindBenckmarkTest {
     public static native void debugNative();
 
     public static native void refreshMapsInfoNative();
+
+    public static native void unwindAdapter();
 }

File: app/src/main/java/com/tencent/wxperf/sample/MainActivity.java
Patch:
@@ -135,6 +135,7 @@ public void onClick(View v) {
                 .directoryToWarmUp(getApplicationInfo().nativeLibraryDir)
                 .directoryToWarmUp(WeChatBacktrace.getSystemLibraryPath())
                 .setBacktraceMode(WeChatBacktrace.Mode.Quicken)
+                .immediateGeneration(false)
                 .isWarmUpProcess(true)
                 .commit();
     }

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktraceNative.java
Patch:
@@ -27,7 +27,7 @@ public class WeChatBacktraceNative {
     static native void setWarmedUp(boolean hasWarmUp);
 
     /**
-     * mode = 0: FramePointer-based unwind
+     * mode = 0: Fp-based unwind
      * mode = 1: Quicken-based unwind
      * mode = 2: Dwarf-based unwind
      *

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktrace.java
Patch:
@@ -666,7 +666,7 @@ private void configure(Configuration configuration) {
         if (configuration.mThisIsWarmUpProcess && !hasWarmedUp()) {
             mIdleHandler.sendMessageDelayed(
                     Message.obtain(mIdleHandler, MSG_WARM_UP, fakeCS),
-                    DELAY_WARM_UP * 1
+                    DELAY_WARM_UP * 10
             );
         }
     }

File: wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktrace.java
Patch:
@@ -18,11 +18,11 @@
 
 import com.tencent.stubs.logger.Log;
 
+import java.io.File;
 import java.io.FileFilter;
 import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.IOException;
-import java.io.File;
 import java.util.HashSet;
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
@@ -111,7 +111,7 @@ private final class IdleReceiver extends BroadcastReceiver {
         private CancellationSignal mCancellationSignal;
 
         private synchronized void triggerIdle() {
-            Log.i(TAG, "Idle status changed: charging = %s, interactive = %s",mIsCharging, mIsInteractive);
+            Log.i(TAG, "Idle status changed: charging = %s, interactive = %s", mIsCharging, mIsInteractive);
 
             if (!mIsInteractive && mCancellationSignal == null) {
                 mCancellationSignal = new CancellationSignal();
@@ -352,8 +352,8 @@ public void run() {
                             @Override
                             public boolean accept(File file) {
                                 if (file.exists() && file.getAbsolutePath().endsWith(".so")) {
-                                    WeChatBacktraceNative.warmUp(file.getAbsolutePath());
                                     Log.i(TAG, "Warming up so %s", file.getAbsolutePath());
+                                    WeChatBacktraceNative.warmUp(file.getAbsolutePath());
                                 }
                                 return false;
                             }

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/DeviceStatMonitorFeature.java
Patch:
@@ -42,7 +42,9 @@ public final class DeviceStatMonitorFeature implements MonitorFeature {
         @Override
         public void run() {
             if (mStampList.size() >= mMonitor.getConfig().overHeatCount) {
-                TimeBreaker.gcList(mStampList);
+                synchronized (TAG) {
+                    TimeBreaker.gcList(mStampList);
+                }
             }
         }
     };

File: app/src/main/java/com/tencent/wxperf/sample/MainActivity.java
Patch:
@@ -133,7 +133,6 @@ public void onClick(View v) {
 
         System.loadLibrary("wechatbacktrace");
 
-        Log.i("Matrix.Qut", "WTF------????? %s", "123123123123");
         WeChatBacktrace.instance().configure(getApplicationContext())
                 .directoryToWarmUp(getApplicationInfo().nativeLibraryDir)
                 .directoryToWarmUp(WeChatBacktrace.getSystemLibraryPath())
@@ -395,7 +394,6 @@ public void unwindBenchmarkDebug(View view) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                Log.e(TAG, "WTF ----- unwindBenchmarkDebug");
                 UnwindBenckmarkTest.benchmarkInitNative();
                 UnwindBenckmarkTest.debugNative();
             }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java
Patch:
@@ -117,7 +117,6 @@ private final static class HackCallback implements Handler.Callback {
         private static final int STOP_ACTIVITY_SHOW = 103;
         private static final int STOP_ACTIVITY_HIDE = 104;
         private static final int SLEEPING = 137;
-        private static final boolean API_LEVEL_HIGHER_THAN_25 = Build.VERSION.SDK_INT > 25;
 
         HackCallback(Handler.Callback callback) {
             this.mOriginalCallback = callback;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ResourcePlugin.java
Patch:
@@ -49,6 +49,7 @@ public static void activityLeakFixer(Application application) {
             public void onActivityDestroyed(Activity activity) {
                 ActivityLeakFixer.fixInputMethodManagerLeak(activity);
                 ActivityLeakFixer.unbindDrawables(activity);
+                ActivityLeakFixer.fixViewLocationHolderLeakApi28(activity);
             }
         });
     }

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryMonitorCore.java
Patch:
@@ -26,7 +26,7 @@ public class BatteryMonitorCore implements Handler.Callback, LooperTaskMonitorFe
 
     public interface JiffiesListener {
         void onTraceBegin();
-        void onTraceEnd(boolean isForeground);
+        void onTraceEnd(boolean isForeground); // TODO: configurable status support
     }
 
     private class ForegroundLoopCheckTask implements Runnable {

File: app/src/main/java/com/tencent/wxperf/sample/MainActivity.java
Patch:
@@ -376,6 +376,7 @@ public void unwindBenchmarkDebug(View view) {
         new Thread(new Runnable() {
             @Override
             public void run() {
+                Log.e(TAG, "WTF ----- unwindBenchmarkDebug");
                 UnwindBenckmarkTest.benchmarkInitNative();
                 UnwindBenckmarkTest.debugNative();
             }

File: app/src/main/java/com/tencent/wxperf/sample/MainActivity.java
Patch:
@@ -114,7 +114,6 @@ public void onClick(View v) {
         });
 
         QuickenUnwinder.instance().configure(getApplicationContext())
-                .savingPath(getFilesDir().getAbsolutePath() + "/test/")
                 .directoryToWarmUp(getApplicationInfo().nativeLibraryDir)
                 .directoryToWarmUp(QuickenUnwinder.getSystemLibraryPath())
                 .isWarmUpProcess(true)

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java
Patch:
@@ -124,7 +124,7 @@ private final static class HackCallback implements Handler.Callback {
         @Override
         public boolean handleMessage(Message msg) {
 
-            if (Build.VERSION.SDK_INT >= 21 && Build.VERSION.SDK_INT <= 26) {
+            if (Build.VERSION.SDK_INT >= 21) {
                 if (msg.what == SERIVCE_ARGS || msg.what == STOP_SERVICE || msg.what == STOP_ACTIVITY_SHOW || msg.what == STOP_ACTIVITY_HIDE || msg.what == SLEEPING) {
                     MatrixLog.i(TAG, "[Matrix.fix.sp.apply] start to fix msg.waht=" + msg.what);
                     fix();

File: app/src/main/java/com/tencent/wxperf/sample/MainActivity.java
Patch:
@@ -57,7 +57,7 @@ protected void onCreate(Bundle savedInstanceState) {
 //                            .addHookSo(".*libnative-lib\\.so$")
                             .addHookSo(".*libnative-lib\\.so$")
                             .enableStacktrace(true)
-                            .stacktraeLogThreshold(0)
+                            .stacktraceLogThreshold(0)
                             .enableMmapHook(false))
                     .addHook(PthreadHook.INSTANCE
 //                            .addHookSo(".*libnative-lib\\.so$")

File: wxperf-hook/src/main/java/com/tencent/wxperf/jni/memory/MemoryHook.java
Patch:
@@ -21,7 +21,7 @@ public class MemoryHook extends AbsHook {
 
     private int     mMinTraceSize;
     private int     mMaxTraceSize;
-    private int     mStacktraceLogThreshold;
+    private int     mStacktraceLogThreshold = 10 * 1024 * 1024;
     private double  mSampling = 1;
     private boolean mEnableStacktrace;
     private boolean mEnableMmap;
@@ -105,7 +105,7 @@ public MemoryHook enableMmapHook(boolean enable) {
         return this;
     }
 
-    public MemoryHook stacktraeLogThreshold(int threshold) {
+    public MemoryHook stacktraceLogThreshold(int threshold) {
         mStacktraceLogThreshold = threshold;
         return this;
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -264,6 +264,8 @@ public static void o(int methodId) {
     /**
      * when the special method calls,it's will be called.
      *
+     * called after {@link #i(int)}
+     *
      * @param activity now at which activity
      * @param isFocus  this window if has focus
      */

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java
Patch:
@@ -124,7 +124,7 @@ private final static class HackCallback implements Handler.Callback {
         @Override
         public boolean handleMessage(Message msg) {
 
-            if (Build.VERSION.SDK_INT >= 21 && Build.VERSION.SDK_INT <= 25) {
+            if (Build.VERSION.SDK_INT >= 21 && Build.VERSION.SDK_INT <= 26) {
                 if (msg.what == SERIVCE_ARGS || msg.what == STOP_SERVICE || msg.what == STOP_ACTIVITY_SHOW || msg.what == STOP_ACTIVITY_HIDE || msg.what == SLEEPING) {
                     MatrixLog.i(TAG, "[Matrix.fix.sp.apply] start to fix msg.waht=" + msg.what);
                     fix();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java
Patch:
@@ -124,7 +124,7 @@ private final static class HackCallback implements Handler.Callback {
         @Override
         public boolean handleMessage(Message msg) {
 
-            if (Build.VERSION.SDK_INT >= 21 && Build.VERSION.SDK_INT <= 25) {
+            if (Build.VERSION.SDK_INT >= 21 && Build.VERSION.SDK_INT <= 26) {
                 if (msg.what == SERIVCE_ARGS || msg.what == STOP_SERVICE || msg.what == STOP_ACTIVITY_SHOW || msg.what == STOP_ACTIVITY_HIDE || msg.what == SLEEPING) {
                     MatrixLog.i(TAG, "[Matrix.fix.sp.apply] start to fix msg.waht=" + msg.what);
                     fix();

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -75,7 +75,7 @@ public static Handler getDefaultHandler() {
         return defaultHandler;
     }
 
-    public static HandlerThread getNewHandlerThread(String name) {
+    public static HandlerThread getNewHandlerThread(String name, int priority) {
         for (Iterator<HandlerThread> i = handlerThreads.iterator(); i.hasNext();) {
             HandlerThread element = i.next();
             if (!element.isAlive()) {
@@ -84,6 +84,7 @@ public static HandlerThread getNewHandlerThread(String name) {
             }
         }
         HandlerThread handlerThread = new HandlerThread(name);
+        handlerThread.setPriority(priority);
         handlerThread.start();
         handlerThreads.add(handlerThread);
         MatrixLog.w(TAG, "warning: create new handler thread with name %s, alive thread size:%d", name, handlerThreads.size());

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -30,8 +30,10 @@ public class Constants {
     public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 700;
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
+    public static final int DEFAULT_INPUT_EXPIRED_TIME = 500;
     public static final int DEFAULT_ANR = 5 * 1000;
     public static final int DEFAULT_ANR_INVALID = 6 * 1000;
+    public static final long DEFAULT_FRAME_DURATION = 16666667L;
 
     public static final int DEFAULT_DROPPED_NORMAL = 3;
     public static final int DEFAULT_DROPPED_MIDDLE = 9;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -120,14 +120,15 @@ public void onCreate() {
                 sqlLiteConfig = new SQLiteLintConfig(SQLiteLint.SqlExecutionCallbackMode.CUSTOM_NOTIFY);
             }
             builder.plugin(new SQLiteLintPlugin(sqlLiteConfig));
+
         }
 
         Matrix.init(builder.build());
 
         //start only startup tracer, close other tracer.
         tracePlugin.start();
-    }
 
+    }
 
     public static Context getContext() {
         return sContext;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/trace/TestTraceMainActivity.java
Patch:
@@ -132,8 +132,7 @@ public void testANR(final View view) {
        /* for (long i = 0; i < 1l; i++) {
             testInnerSleep();
         }*/
-
-        evilMethod5(true);
+        A();
     }
 
     private void A() {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -75,7 +75,7 @@ public static Handler getDefaultHandler() {
         return defaultHandler;
     }
 
-    public static HandlerThread getNewHandlerThread(String name) {
+    public static HandlerThread getNewHandlerThread(String name, int priority) {
         for (Iterator<HandlerThread> i = handlerThreads.iterator(); i.hasNext();) {
             HandlerThread element = i.next();
             if (!element.isAlive()) {
@@ -84,6 +84,7 @@ public static HandlerThread getNewHandlerThread(String name) {
             }
         }
         HandlerThread handlerThread = new HandlerThread(name);
+        handlerThread.setPriority(priority);
         handlerThread.start();
         handlerThreads.add(handlerThread);
         MatrixLog.w(TAG, "warning: create new handler thread with name %s, alive thread size:%d", name, handlerThreads.size());

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -30,8 +30,10 @@ public class Constants {
     public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 700;
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
+    public static final int DEFAULT_INPUT_EXPIRED_TIME = 500;
     public static final int DEFAULT_ANR = 5 * 1000;
     public static final int DEFAULT_ANR_INVALID = 6 * 1000;
+    public static final long DEFAULT_FRAME_DURATION = 16666667L;
 
     public static final int DEFAULT_DROPPED_NORMAL = 3;
     public static final int DEFAULT_DROPPED_MIDDLE = 9;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -120,14 +120,15 @@ public void onCreate() {
                 sqlLiteConfig = new SQLiteLintConfig(SQLiteLint.SqlExecutionCallbackMode.CUSTOM_NOTIFY);
             }
             builder.plugin(new SQLiteLintPlugin(sqlLiteConfig));
+
         }
 
         Matrix.init(builder.build());
 
         //start only startup tracer, close other tracer.
         tracePlugin.start();
-    }
 
+    }
 
     public static Context getContext() {
         return sContext;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/trace/TestTraceMainActivity.java
Patch:
@@ -132,8 +132,7 @@ public void testANR(final View view) {
        /* for (long i = 0; i < 1l; i++) {
             testInnerSleep();
         }*/
-
-        evilMethod5(true);
+        A();
     }
 
     private void A() {

File: wxperf-hook/src/main/java/com/tencent/wxperf/jni/HookManager.java
Patch:
@@ -69,7 +69,7 @@ public HookManager clearHooks() {
 
     @Keep
     public static String getStack() {
-        return stackTraceToString(new Throwable().getStackTrace());
+        return stackTraceToString(Thread.currentThread().getStackTrace());
     }
 
     private static String stackTraceToString(final StackTraceElement[] arr) {

File: wxperf-hook/src/main/java/com/tencent/wxperf/jni/memory/MemoryHook.java
Patch:
@@ -137,7 +137,9 @@ protected void onHook() {
     }
 
     public void dump(String into) {
-        dumpNative(into);
+        if (HookManager.INSTANCE.hasHooked()) {
+            dumpNative(into);
+        }
     }
 
     private native void dumpNative(String path);

File: wxperf-hook/src/main/java/com/tencent/wxperf/jni/pthread/PthreadHook.java
Patch:
@@ -78,7 +78,9 @@ public void hook() throws HookManager.HookFailedException {
     }
 
     public void dump(String path) {
-        dumpNative(path);
+        if (HookManager.INSTANCE.hasHooked()) {
+            dumpNative(path);
+        }
     }
 
     @Override

File: wxperf-hook/src/main/java/com/tencent/wxperf/jni/HookManager.java
Patch:
@@ -21,7 +21,7 @@ public class HookManager {
 
     private HookManager(){
         try {
-            System.loadLibrary("wxperf");
+            System.loadLibrary("wxperf-jni");
         } catch (Throwable e) {
             Log.printStack(Log.ERROR, TAG, e);
         }

File: wxperf/src/main/java/com/tencent/mm/performance/jni/FDDumpBridge.java
Patch:
@@ -1,4 +1,4 @@
-package com.tencent.mm.performance.jni.fd;
+package com.tencent.mm.performance.jni;
 
 import com.tencent.mm.performance.jni.LibWxPerfManager;
 import com.tencent.stubs.logger.Log;

File: wxperf/src/main/java/com/tencent/mm/performance/jni/HookManager.java
Patch:
@@ -9,6 +9,7 @@
 /**
  * Created by Yves on 2020-03-17
  */
+@Keep
 public class HookManager {
 
     static {

File: wxperf/src/main/java/com/tencent/mm/performance/jni/LibWxPerfManager.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Created by Yves on 2019-08-20
  */
-public class LibWxPerfManager {
+/* package */ class LibWxPerfManager {
 
     private static final String TAG = "LibWxPerfManager";
 

File: app/src/main/java/com/tencent/mm/libwxperf/MainActivity.java
Patch:
@@ -39,8 +39,8 @@ protected void onCreate(Bundle savedInstanceState) {
             HookManager.INSTANCE
                     .addHook(MemoryHook.INSTANCE
                             .addHookSo(".*libnative-lib\\.so$")
-                            .enableStacktrace(true)
-                            .enableMmapHook(true))
+                            .enableStacktrace(false)
+                            .enableMmapHook(false))
 //                    .addHook(PthreadHook.INSTANCE
 //                                    .addHookSo(".*\\.so$")
 //                                    .addHookThread(".*")

File: wxperf/src/main/java/com/tencent/mm/performance/jni/HookManager.java
Patch:
@@ -1,5 +1,6 @@
 package com.tencent.mm.performance.jni;
 
+import android.support.annotation.Keep;
 import android.support.annotation.Nullable;
 
 import java.util.HashSet;
@@ -61,6 +62,7 @@ public HookManager clearHooks() {
         return this;
     }
 
+    @Keep
     public static String getStack() {
         return stackTraceToString(new Throwable().getStackTrace());
     }

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/plugin/JiffiesMonitorPlugin.java
Patch:
@@ -349,7 +349,7 @@ private Set<ThreadInfo> getThreadsInfo2(int pid) {
     private static void parseJiffiesInfo(String path, ThreadInfo info) {
         final int readBytes = readProcStat(path, sBuffer);
 
-        MatrixLog.d(TAG, "%d: %s", readBytes, sBuffer);
+        MatrixLog.d(TAG, "%d: %s", readBytes, new String(sBuffer));
 
         for (int i = 0, spaceIdx = 0; i < readBytes;) {
             if (Character.isSpaceChar(sBuffer[i])) {
@@ -360,7 +360,7 @@ private static void parseJiffiesInfo(String path, ThreadInfo info) {
 
             switch (spaceIdx) {
                 case 1: { // read thread name
-                    int begin = i + 1;
+                    int begin = i;
                     int length = 0;
 
                     for (;i < readBytes && !Character.isSpaceChar(sBuffer[i]); i++, length++);
@@ -378,7 +378,7 @@ private static void parseJiffiesInfo(String path, ThreadInfo info) {
                         info.name = new String(sBuffer, begin, length);
                     }
 
-                    MatrixLog.d(TAG, "read name = %s", info.name);
+                    MatrixLog.d(TAG, "read name = %s, begin = %d, length = %d", info.name, begin, length);
 
                     break;
                 }

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryPrinter.java
Patch:
@@ -26,7 +26,7 @@ public void onJiffies(JiffiesMonitorPlugin.JiffiesResult result) {
                 .append("\t\t").append("diff(jiffies)=").append(result.jiffiesDiff).append("<").append(result.jiffiesDiff2)
                 .append("\t\t").append("average(jiffies/min)=").append(result.jiffiesDiff2 / Math.max(1, result.upTimeDiff / ONE_MIN)).append("\n");
         sb.append("==============================================================================================").append("\n");
-        for (JiffiesMonitorPlugin.ThreadResult threadResult : result.threadResults.subList(0, Math.min(result.threadResults.size, 8))) {
+        for (JiffiesMonitorPlugin.ThreadResult threadResult : result.threadResults.subList(0, Math.min(result.threadResults.size(), 8))) {
             if (threadResult.jiffiesDiff <= 0) {
                 sb.append("|\t\t......\n");
                 break;

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryPrinter.java
Patch:
@@ -26,7 +26,7 @@ public void onJiffies(JiffiesMonitorPlugin.JiffiesResult result) {
                 .append("\t\t").append("diff(jiffies)=").append(result.jiffiesDiff).append("<").append(result.jiffiesDiff2)
                 .append("\t\t").append("average(jiffies/min)=").append(result.jiffiesDiff2 / Math.max(1, result.upTimeDiff / ONE_MIN)).append("\n");
         sb.append("==============================================================================================").append("\n");
-        for (JiffiesMonitorPlugin.ThreadResult threadResult : result.threadResults.subList(0, 8)) {
+        for (JiffiesMonitorPlugin.ThreadResult threadResult : result.threadResults.subList(0, Math.min(result.threadResults.size, 8))) {
             if (threadResult.jiffiesDiff <= 0) {
                 sb.append("|\t\t......\n");
                 break;

File: wxperf/src/main/java/com/tencent/mm/performance/jni/HookManager.java
Patch:
@@ -1,5 +1,7 @@
 package com.tencent.mm.performance.jni;
 
+import android.util.Log;
+
 import java.util.HashSet;
 import java.util.Set;
 
@@ -18,7 +20,6 @@ public class HookManager {
     private Set<AbsHook> mHooks = new HashSet<>();
 
     private HookManager(){
-//        initNative();
     }
 
     private void exclusiveHook() {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/ReflectUtils.java
Patch:
@@ -51,7 +51,7 @@ public static <T> T reflectObject(Object instance, String name, T defaultValue,
     }
 
     public static <T> T reflectObject(Object instance, String name, T defaultValue) {
-        return reflectObject(instance, name, defaultValue);
+        return reflectObject(instance, name, defaultValue, true);
     }
 
     public static Method reflectMethod(Object instance, boolean isHard, String name, Class<?>... argTypes) {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -71,7 +71,7 @@ public void dispatchBegin(long beginNs, long cpuBeginMs, long token) {
 //        }
         anrTask = new AnrHandleTask(AppMethodBeat.getInstance().maskIndex("AnrTracer#dispatchBegin"), token);
         if (traceConfig.isDevEnv()) {
-            MatrixLog.v(TAG, "* [dispatchBegin] token:%s index:%s inputCost:%s", token, anrTask.beginRecord.index, inputCost);
+            MatrixLog.v(TAG, "* [dispatchBegin] token:%s index:%s", token, anrTask.beginRecord.index);
         }
         anrHandler.postDelayed(anrTask, Constants.DEFAULT_ANR - (System.nanoTime() - token) / Constants.TIME_MILLIS_TO_NANO);
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -30,6 +30,7 @@ public class Constants {
     public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 700;
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
+    public static final int DEFAULT_INPUT_EXPIRED_TIME = 500;
     public static final int DEFAULT_ANR = 5 * 1000;
     public static final int DEFAULT_ANR_INVALID = 6 * 1000;
     public static final long DEFAULT_FRAME_DURATION = 16666667L;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/trace/TestTraceMainActivity.java
Patch:
@@ -132,8 +132,7 @@ public void testANR(final View view) {
        /* for (long i = 0; i < 1l; i++) {
             testInnerSleep();
         }*/
-
-        evilMethod5(true);
+        A();
     }
 
     private void A() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -32,6 +32,7 @@ public class Constants {
     public static final int TIME_MILLIS_TO_NANO = 1000000;
     public static final int DEFAULT_ANR = 5 * 1000;
     public static final int DEFAULT_ANR_INVALID = 6 * 1000;
+    public static final long DEFAULT_FRAME_DURATION = 16666667L;
 
     public static final int DEFAULT_DROPPED_NORMAL = 3;
     public static final int DEFAULT_DROPPED_MIDDLE = 9;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -196,6 +196,7 @@ private String printEvil(String scene, int[] processStat, boolean isForeground,
             print.append("|*\t\tScene: ").append(scene).append("\n");
             print.append("|*\t\tForeground: ").append(isForeground).append("\n");
             print.append("|*\t\tPriority: ").append(processStat[0]).append("\tNice: ").append(processStat[1]).append("\n");
+            print.append("|*\t\tis64BitRuntime: ").append(DeviceUtil.is64BitRuntime()).append("\n");
             print.append("|*\t\tCPU: ").append(usage).append("\n");
             print.append("|* [doFrame]").append("\n");
             print.append("|*\t\tinputCost:animationCost:traversalCost").append("\n");

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -99,7 +99,7 @@ public void onCreate() {
                 .enableStartup(traceEnable)
                 .splashActivities("sample.tencent.matrix.SplashActivity;")
                 .isDebug(true)
-                .isDevEnv(false)
+                .isDevEnv(true)
                 .build();
 
         TracePlugin tracePlugin = (new TracePlugin(traceConfig));

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -175,7 +175,7 @@ void collect(int droppedFrames) {
             float frameIntervalCost = 1f * UIThreadMonitor.getMonitor().getFrameIntervalNanos() / Constants.TIME_MILLIS_TO_NANO;
             sumFrameCost += (droppedFrames + 1) * frameIntervalCost;
             sumDroppedFrames += droppedFrames;
-
+            sumFrame++;
             if (droppedFrames >= frozenThreshold) {
                 dropLevel[DropStatus.DROPPED_FROZEN.index]++;
                 dropSum[DropStatus.DROPPED_FROZEN.index] += droppedFrames;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -273,7 +273,7 @@ public static void at(Activity activity, boolean isFocus) {
             if (sFocusActivitySet.add(activityName)) {
                 synchronized (listeners) {
                     for (IAppMethodBeatListener listener : listeners) {
-                        listener.onActivityFocused(activityName);
+                        listener.onActivityFocused(activity);
                     }
                 }
                 MatrixLog.i(TAG, "[at] visibleScene[%s] has %s focus!", getVisibleScene(), "attach");

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IAppMethodBeatListener.java
Patch:
@@ -16,11 +16,13 @@
 
 package com.tencent.matrix.trace.listeners;
 
+import android.app.Activity;
+
 /**
  * Created by caichongyang on 2017/5/27.
  */
 
 public interface IAppMethodBeatListener {
 
-    void onActivityFocused(String activity);
+    void onActivityFocused(Activity activity);
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -160,7 +160,9 @@ private static void treeToStack(TreeNode root, LinkedList<MethodItem> list) {
 
         for (int i = 0; i < root.children.size(); i++) {
             TreeNode node = root.children.get(i);
-            list.add(node.item);
+            if (node.item != null) {
+                list.add(node.item);
+            }
             if (!node.children.isEmpty()) {
                 treeToStack(node, list);
             }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -29,7 +29,7 @@ public class FrameTracer extends Tracer {
 
     private static final String TAG = "Matrix.FrameTracer";
     private final HashSet<IDoFrameListener> listeners = new HashSet<>();
-    private final long frameIntervalMs;
+    private final float frameIntervalMs;
     private final TraceConfig config;
     private long timeSliceMs;
     private boolean isFPSEnable;
@@ -40,7 +40,7 @@ public class FrameTracer extends Tracer {
 
     public FrameTracer(TraceConfig config) {
         this.config = config;
-        this.frameIntervalMs = TimeUnit.MILLISECONDS.convert(UIThreadMonitor.getMonitor().getFrameIntervalNanos(), TimeUnit.NANOSECONDS) + 1;
+        this.frameIntervalMs = UIThreadMonitor.getMonitor().getFrameIntervalNanos() / 1000000f;
         this.timeSliceMs = config.getTimeSliceMs();
         this.isFPSEnable = config.isFPSEnable();
         this.frozenThreshold = config.getFrozenThreshold();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/view/FrameDecorator.java
Patch:
@@ -46,8 +46,7 @@ public class FrameDecorator extends IDoFrameListener implements IAppForeground {
     private View.OnClickListener clickListener;
     private DisplayMetrics displayMetrics = new DisplayMetrics();
     private boolean isEnable = true;
-    private long frameIntervalMs;
-
+    private float frameIntervalMs;
 
     private int bestColor;
     private int normalColor;
@@ -58,7 +57,7 @@ public class FrameDecorator extends IDoFrameListener implements IAppForeground {
 
     @SuppressLint("ClickableViewAccessibility")
     private FrameDecorator(Context context, final FloatFrameView view) {
-        this.frameIntervalMs = TimeUnit.MILLISECONDS.convert(UIThreadMonitor.getMonitor().getFrameIntervalNanos(), TimeUnit.NANOSECONDS) + 1;
+        this.frameIntervalMs = UIThreadMonitor.getMonitor().getFrameIntervalNanos() / 1000000f;
         this.view = view;
         this.bestColor = context.getResources().getColor(R.color.level_best_color);
         this.normalColor = context.getResources().getColor(R.color.level_normal_color);

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixUtil.java
Patch:
@@ -195,7 +195,7 @@ protected MessageDigest initialValue() {
             try {
                 return MessageDigest.getInstance("MD5");
             } catch (NoSuchAlgorithmException e) {
-                throw new RuntimeException("Initialize MD5-DIGEST failed.", e);
+                throw new RuntimeException("Initialize MD5 failed.", e);
             }
         }
     };

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -217,7 +217,6 @@ public static void i(int methodId) {
         }
 
         long threadId = Thread.currentThread().getId();
-
         if (sMethodEnterListener != null) {
             sMethodEnterListener.enter(methodId, threadId);
         }

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixUtil.java
Patch:
@@ -195,7 +195,7 @@ protected MessageDigest initialValue() {
             try {
                 return MessageDigest.getInstance("MD5");
             } catch (NoSuchAlgorithmException e) {
-                throw new RuntimeException("Initialize SHA256-DIGEST failed.", e);
+                throw new RuntimeException("Initialize MD5-DIGEST failed.", e);
             }
         }
     };

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/view/FrameDecorator.java
Patch:
@@ -10,7 +10,6 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.util.DisplayMetrics;
-import android.util.Log;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
@@ -375,7 +374,9 @@ private void initLayoutParams(Context context) {
             layoutParam.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                     | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
             layoutParam.gravity = Gravity.START | Gravity.TOP;
-            layoutParam.x = metrics.widthPixels - view.getLayoutParams().width * 2;
+            if (null != view) {
+                layoutParam.x = metrics.widthPixels - view.getLayoutParams().width * 2;
+            }
             layoutParam.y = 0;
             layoutParam.width = WindowManager.LayoutParams.WRAP_CONTENT;
             layoutParam.height = WindowManager.LayoutParams.WRAP_CONTENT;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java
Patch:
@@ -271,12 +271,12 @@ public Status execute() {
                 ++destroyedActivityInfo.mDetectedCount;
 
                 if (destroyedActivityInfo.mDetectedCount < mMaxRedetectTimes
-                    || !mResourcePlugin.getConfig().getDetectDebugger()) {
+                        && !mResourcePlugin.getConfig().getDetectDebugger()) {
                     // Although the sentinel tell us the activity should have been recycled,
                     // system may still ignore it, so try again until we reach max retry times.
                     MatrixLog.i(TAG, "activity with key [%s] should be recycled but actually still \n"
-                            + "exists in %s times, wait for next detection to confirm.",
-                        destroyedActivityInfo.mKey, destroyedActivityInfo.mDetectedCount);
+                                    + "exists in %s times, wait for next detection to confirm.",
+                            destroyedActivityInfo.mKey, destroyedActivityInfo.mDetectedCount);
                     continue;
                 }
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java
Patch:
@@ -38,7 +38,7 @@ public class ActivityThreadHacker {
     private static long sLastLaunchActivityTime = 0L;
     public static AppMethodBeat.IndexRecord sLastLaunchActivityMethodIndex = new AppMethodBeat.IndexRecord();
     public static AppMethodBeat.IndexRecord sApplicationCreateBeginMethodIndex = new AppMethodBeat.IndexRecord();
-    public static int sApplicationCreateScene = -100;
+    public static int sApplicationCreateScene = Integer.MIN_VALUE;
 
     public static void hackSysHandlerCallback() {
         try {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/Plugin.java
Patch:
@@ -72,7 +72,7 @@ public void onDetectIssue(Issue issue) {
             if (issue.getTag() != null) {
                 content.put(Issue.ISSUE_REPORT_TAG, issue.getTag());
             }
-            if (issue.getType() != null) {
+            if (issue.getType() != 0) {
                 content.put(Issue.ISSUE_REPORT_TYPE, issue.getType());
             }
             content.put(Issue.ISSUE_REPORT_PROCESS, MatrixUtil.getProcessName(application));

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/FilePublisher.java
Patch:
@@ -35,10 +35,12 @@ public class FilePublisher extends IssuePublisher {
     private final SharedPreferences        sharedPreferences;
     private final SharedPreferences.Editor editor;
     private final HashMap<String, Long>    mPublishedMap;
+    protected final Context context;
 
 
     public FilePublisher(Context context, long expire, String tag, OnIssueDetectListener issueDetectListener) {
         super(issueDetectListener);
+        this.context = context;
         expiredTime = expire;
         sharedPreferences = context.getSharedPreferences(tag + MatrixUtil.getProcessName(context), Context.MODE_PRIVATE);
         mPublishedMap = new HashMap<>();

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/Issue.java
Patch:
@@ -27,7 +27,7 @@
  */
 
 public class Issue {
-    private Integer    type;
+    private int        type;
     private String     tag;
     private String     key;
     private JSONObject content;
@@ -73,7 +73,7 @@ public void setTag(String tag) {
         this.tag = tag;
     }
 
-    public Integer getType() {
+    public int getType() {
         return type;
     }
 

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -69,6 +69,9 @@ public static HandlerThread getDefaultHandlerThread() {
     }
 
     public static Handler getDefaultHandler() {
+        if (defaultHandler == null) {
+            getDefaultHandlerThread();
+        }
         return defaultHandler;
     }
 
@@ -122,7 +125,6 @@ public void println(String x) {
         @Override
         public void onForeground(boolean isForeground) {
             this.isForeground = isForeground;
-            MatrixLog.d(TAG, "onForeground:%s", isForeground);
             if (isForeground) {
                 long start = System.currentTimeMillis();
                 LinkedList<Info> list = new LinkedList<>();

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/mrs/plugin/IDynamicConfig.java
Patch:
@@ -71,6 +71,7 @@ enum ExptEnum {
 
         //resource
         clicfg_matrix_resource_detect_interval_millis,
+        clicfg_matrix_resource_detect_interval_millis_bg,
         clicfg_matrix_resource_max_detect_times,
         clicfg_matrix_resource_dump_hprof_enable,
 

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/TraceBuildConstants.java
Patch:
@@ -29,6 +29,7 @@ public class TraceBuildConstants {
     public final static String MATRIX_TRACE_APPLICATION_ON_CREATE_ARGS = "()V";
     public final static String MATRIX_TRACE_ACTIVITY_CLASS = "android/app/Activity";
     public final static String MATRIX_TRACE_V7_ACTIVITY_CLASS = "android/support/v7/app/AppCompatActivity";
+    public final static String MATRIX_TRACE_V4_ACTIVITY_CLASS = "android/support/v4/app/FragmentActivity";
     public final static String MATRIX_TRACE_APPLICATION_CLASS = "android/app/Application";
     public final static String MATRIX_TRACE_METHOD_BEAT_CLASS = "com/tencent/matrix/trace/core/AppMethodBeat";
     public final static String MATRIX_TRACE_ON_WINDOW_FOCUS_METHOD_ARGS = "(Z)V";

File: matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/config/IOConfig.java
Patch:
@@ -80,7 +80,7 @@ public int getFileMainThreadTriggerThreshold() {
     }
 
     public int getFileBufferSmallThreshold() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_io_small_buffer_operator_times.name(), DEFAULT_FILE_BUFFER_SMALL_THRESHOLD);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_io_small_buffer_threshold.name(), DEFAULT_FILE_BUFFER_SMALL_THRESHOLD);
     }
 
     public int getFilBufferSmallOpTimes() {

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/analyzer/model/DestroyedActivityInfo.java
Patch:
@@ -35,13 +35,11 @@ public class DestroyedActivityInfo {
     public final String mActivityName;
 
     public final WeakReference<Activity> mActivityRef;
-    public final long mLastCreatedActivityCount;
     public int mDetectedCount = 0;
 
-    public DestroyedActivityInfo(String key, Activity activity, String activityName, long lastCreatedActivityCount) {
+    public DestroyedActivityInfo(String key, Activity activity, String activityName) {
         mKey = key;
         mActivityName = activityName;
         mActivityRef = new WeakReference<>(activity);
-        mLastCreatedActivityCount = lastCreatedActivityCount;
     }
 }

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/config/SharePluginInfo.java
Patch:
@@ -25,5 +25,5 @@ public class SharePluginInfo {
 
     public static final String ISSUE_RESULT_PATH   = "resultZipPath";
     public static final String ISSUE_ACTIVITY_NAME = "activity";
-
+    public static final String ISSUE_REF_KEY = "ref_key";
 }

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/AndroidHeapDumper.java
Patch:
@@ -30,7 +30,6 @@
 import com.tencent.matrix.util.MatrixLog;
 
 import java.io.File;
-import java.io.IOException;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -91,7 +90,7 @@ public File dumpHeap() {
             Debug.dumpHprofData(hprofFile.getAbsolutePath());
             cancelToast(waitingForToast.get());
             return hprofFile;
-        } catch (IOException e) {
+        } catch (Exception e) {
             MatrixLog.printErrStackTrace(TAG, e, "failed to dump heap into file: %s.", hprofFile.getAbsolutePath());
             return null;
         }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/SharePluginInfo.java
Patch:
@@ -32,6 +32,7 @@ public class SharePluginInfo {
     public static final String ISSUE_DROP_LEVEL = "dropLevel";
     public static final String ISSUE_DROP_SUM = "dropSum";
     public static final String ISSUE_FPS = "fps";
+    public static final String ISSUE_SUM_TASK_FRAME = "dropTaskFrameSum";
     public static final String ISSUE_TRACE_STACK = "stack";
     public static final String ISSUE_THREAD_STACK = "threadStack";
     public static final String ISSUE_PROCESS_PRIORITY = "processPriority";

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -31,7 +31,7 @@ public class Constants {
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
     public static final int DEFAULT_ANR = 5 * 1000;
-    public static final int DEFAULT_ANR_INVALID = 5 * 1000 + 500;
+    public static final int DEFAULT_ANR_INVALID = 6 * 1000;
 
     public static final int DEFAULT_DROPPED_NORMAL = 3;
     public static final int DEFAULT_DROPPED_MIDDLE = 9;
@@ -47,6 +47,7 @@ public class Constants {
 
     public static final int LIMIT_WARM_THRESHOLD_MS = 5 * 1000;
 
+
     public enum Type {
         NORMAL, ANR, STARTUP
     }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/config/MatrixEnum.java
Patch:
@@ -65,5 +65,6 @@ public enum MatrixEnum {
     clicfg_matrix_resource_max_detect_times,
     clicfg_matrix_resource_dump_hprof_enable,
 
+
     /******matrix end*******/
 }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/issue/IssuesListActivity.java
Patch:
@@ -152,9 +152,6 @@ public void bind(Issue issue) {
             if (TextUtils.isEmpty(issue.getKey())) tvKey.setVisibility(View.GONE);
             else tvKey.setText("KEY -> " + issue.getKey());
 
-            if (issue.getType() == null) tvType.setVisibility(View.GONE);
-            else tvType.setText("TYPE -> " + issue.getType());
-
             tvIndex.setText((IssuesMap.getCount() - position) + "");
             tvIndex.setTextColor(getColor(position));
             if (isShow)

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/AndroidHeapDumper.java
Patch:
@@ -91,7 +91,7 @@ public File dumpHeap() {
             Debug.dumpHprofData(hprofFile.getAbsolutePath());
             cancelToast(waitingForToast.get());
             return hprofFile;
-        } catch (IOException e) {
+        } catch (Exception e) {
             MatrixLog.printErrStackTrace(TAG, e, "failed to dump heap into file: %s.", hprofFile.getAbsolutePath());
             return null;
         }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -100,7 +100,7 @@ public void onCreate() {
             //resource
             builder.plugin(new ResourcePlugin(new ResourceConfig.Builder()
                     .dynamicConfig(dynamicConfig)
-                    .setDumpHprof(false)
+                    .setAutoDumpHprofMode(ResourceConfig.DumpMode.MANUAL_DUMP)
                     .setDetectDebuger(true)     //only set true when in sample, not in your app
                     .build()));
             ResourcePlugin.activityLeakFixer(this);
@@ -118,7 +118,7 @@ public void onCreate() {
             SQLiteLintPlugin sqLiteLintPlugin = new SQLiteLintPlugin(config);
             builder.plugin(sqLiteLintPlugin);
 
-            ThreadMonitor threadMonitor = new ThreadMonitor(new ThreadMonitorConfig.Builder().dynamicConfig(dynamicConfig).build());
+            ThreadMonitor threadMonitor = new ThreadMonitor(new ThreadMonitorConfig.Builder().build());
             builder.plugin(threadMonitor);
 
             BatteryMonitor batteryMonitor = new BatteryMonitor(new BatteryMonitor.Builder()

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/StartupTracer.java
Patch:
@@ -101,7 +101,7 @@ public void onActivityFocused(String activity) {
                     MatrixLog.i(TAG, "default splash activity[%s]", activity);
                     coldCost = firstScreenCost;
                 } else {
-                    MatrixLog.w(TAG, "pass this activity[%s] at duration of start up!", activity);
+                    MatrixLog.w(TAG, "pass this activity[%s] at duration of start up! splashActivities=%s", activity, splashActivities);
                 }
             }
             if (coldCost > 0) {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -22,7 +22,6 @@
 import android.util.Printer;
 
 import com.tencent.matrix.AppActiveMatrixDelegate;
-import com.tencent.matrix.Matrix;
 import com.tencent.matrix.listeners.IAppForeground;
 
 import java.util.Collections;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -113,15 +113,15 @@ public void dispatchEnd() {
         });
         this.isInit = true;
         MatrixLog.i(TAG, "[UIThreadMonitor] %s %s %s %s %s frameIntervalNanos:%s", callbackQueueLock == null, callbackQueues == null, addInputQueue == null, addTraversalQueue == null, addAnimationQueue == null, frameIntervalNanos);
-        
+
         if (config.isDevEnv()) {
             addObserver(new LooperObserver() {
                 @Override
                 public void doFrame(String focusedActivityName, long start, long end, long frameCostMs, long inputCost, long animationCost, long traversalCost) {
                     MatrixLog.i(TAG, "activityName[%s] frame cost:%sms [%s|%s|%s]ns", focusedActivityName, frameCostMs, inputCost, animationCost, traversalCost);
                 }
             });
-        }        
+        }
     }
 
     private synchronized void addFrameCallback(int type, Runnable callback, boolean isAddHeader) {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -22,6 +22,7 @@
 import android.util.Printer;
 
 import com.tencent.matrix.AppActiveMatrixDelegate;
+import com.tencent.matrix.Matrix;
 import com.tencent.matrix.listeners.IAppForeground;
 
 import java.util.Collections;

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixHandlerThread.java
Patch:
@@ -22,6 +22,7 @@
 import android.util.Printer;
 
 import com.tencent.matrix.AppActiveMatrixDelegate;
+import com.tencent.matrix.Matrix;
 import com.tencent.matrix.listeners.IAppForeground;
 
 import java.util.Collections;
@@ -122,7 +123,6 @@ public void println(String x) {
         @Override
         public void onForeground(boolean isForeground) {
             this.isForeground = isForeground;
-            MatrixLog.d(TAG, "onForeground:%s", isForeground);
             if (isForeground) {
                 long start = System.currentTimeMillis();
                 LinkedList<Info> list = new LinkedList<>();

File: app/src/main/java/com/tencent/mm/libwxperf/JNIObj.java
Patch:
@@ -16,6 +16,8 @@ public static void init() {
         }
     }
 
+    public native void reallocTest();
+
     public native void doSomeThing();
 
     public native void doMmap();

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/Plugin.java
Patch:
@@ -72,7 +72,7 @@ public void onDetectIssue(Issue issue) {
             if (issue.getTag() != null) {
                 content.put(Issue.ISSUE_REPORT_TAG, issue.getTag());
             }
-            if (issue.getType() != null) {
+            if (issue.getType() != 0) {
                 content.put(Issue.ISSUE_REPORT_TYPE, issue.getType());
             }
             content.put(Issue.ISSUE_REPORT_PROCESS, MatrixUtil.getProcessName(application));

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/FilePublisher.java
Patch:
@@ -35,10 +35,12 @@ public class FilePublisher extends IssuePublisher {
     private final SharedPreferences        sharedPreferences;
     private final SharedPreferences.Editor editor;
     private final HashMap<String, Long>    mPublishedMap;
+    protected final Context context;
 
 
     public FilePublisher(Context context, long expire, String tag, OnIssueDetectListener issueDetectListener) {
         super(issueDetectListener);
+        this.context = context;
         expiredTime = expire;
         sharedPreferences = context.getSharedPreferences(tag + MatrixUtil.getProcessName(context), Context.MODE_PRIVATE);
         mPublishedMap = new HashMap<>();

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/Issue.java
Patch:
@@ -27,7 +27,7 @@
  */
 
 public class Issue {
-    private Integer    type;
+    private int        type;
     private String     tag;
     private String     key;
     private JSONObject content;
@@ -61,7 +61,7 @@ public void setContent(JSONObject content) {
     @Override
     public String toString() {
         String strContent = "";
-        if(null != content) strContent = content.toString();
+        if (null != content) strContent = content.toString();
         return String.format("tag[%s]type[%d];key[%s];content[%s]", tag, type, key, strContent);
     }
 
@@ -73,7 +73,7 @@ public void setTag(String tag) {
         this.tag = tag;
     }
 
-    public Integer getType() {
+    public int getType() {
         return type;
     }
 

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/BatteryCanaryPlugin.java
Patch:
@@ -21,6 +21,7 @@
 import com.tencent.matrix.batterycanary.config.BatteryConfig;
 import com.tencent.matrix.batterycanary.config.SharePluginInfo;
 import com.tencent.matrix.batterycanary.core.BatteryCanaryCore;
+import com.tencent.matrix.batterycanary.monitor.BatteryMonitor;
 import com.tencent.matrix.batterycanary.util.BatteryCanaryUtil;
 import com.tencent.matrix.plugin.Plugin;
 import com.tencent.matrix.plugin.PluginListener;

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/Configuration.java
Patch:
@@ -4,7 +4,6 @@
 import com.tencent.matrix.javalib.util.Util;
 import com.tencent.matrix.trace.retrace.MappingCollector;
 
-import java.io.File;
 import java.util.HashSet;
 
 public class Configuration {

File: matrix/matrix-android/matrix-memory-canary/src/main/java/com/tencent/matrix/memorycanary/core/MemoryCanaryCore.java
Patch:
@@ -398,7 +398,7 @@ private void fillMemoryInfo(JSONObject json, final MatrixMemoryInfo matrixMemory
         inner.put(SharePluginInfo.ISSUE_DALVIK_HEAP, matrixMemoryInfo.mDalvikHeap);
         inner.put(SharePluginInfo.ISSUE_NATIVE_HEAP, matrixMemoryInfo.mNativeHeap);
         inner.put(SharePluginInfo.ISSUE_VMSIZE, DeviceUtil.getVmSize());
-        if (!activity.isEmpty()) {
+        if (null != activity && !activity.isEmpty()) {
             inner.put(SharePluginInfo.ISSUE_ACTIVITY, activity);
         }
         json.put(tag, inner);

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/config/SharePluginInfo.java
Patch:
@@ -25,5 +25,5 @@ public class SharePluginInfo {
 
     public static final String ISSUE_RESULT_PATH   = "resultZipPath";
     public static final String ISSUE_ACTIVITY_NAME = "activity";
-
+    public static final String ISSUE_REF_KEY = "ref_key";
 }

File: matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/behaviour/persistence/IssueStorage.java
Patch:
@@ -122,8 +122,8 @@ public static List<SQLiteLintIssue> getIssueListByDb(String dbLabel) {
             return issueList;
         }
 
-        String querySql = String.format("SELECT * FROM %s where %s='%s' ORDER BY %s DESC", TABLE_NAME, COLUMN_DB_PATH, dbLabel, COLUMN_CREATE_TIME);
-        Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, null);
+        String querySql = String.format("SELECT * FROM %s where %s=? ORDER BY %s DESC", TABLE_NAME, COLUMN_DB_PATH, COLUMN_CREATE_TIME);
+        Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, new String[]{dbLabel});
         try {
             while (cursor.moveToNext()) {
                 issueList.add(issueConvertFromCursor(cursor));

File: matrix/matrix-android/matrix-thread-canary/src/main/java/com/tencent/matrix/threadcanary/Constants.java
Patch:
@@ -10,8 +10,8 @@ public class Constants {
     public static final String REPORT_KEY_THREAD_GROUP_THREAD_LIST = "list";
     public static final String REPORT_KEY_THREAD_INFO_TID = "tid";
     public static final String REPORT_KEY_THREAD_INFO_STATE = "state";
-    public static final String REPORT_KEY_THREAD_INFO_JIFFIES = "jiffies";
     public static final String REPORT_KEY_THREAD_INFO_STACK = "stack";
-    public static final String REPORT_KEY_THREAD_INFO_STACK_MD5 = "stack_md5";
-
+    public static final String REPORT_KEY_THREAD_INFO_TARGET = "target";
+    public static final String REPORT_KEY_THREAD_INFO_IS_HANDLER = "isHandlerThread";
+    public static final int MAX_PENDING_THREAD_REPORT = 10;
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -31,7 +31,7 @@ public class Constants {
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
     public static final int DEFAULT_ANR = 5 * 1000;
-    public static final int DEFAULT_ANR_INVALID = 5 * 1000 + 500;
+    public static final int DEFAULT_ANR_INVALID = 6 * 1000;
 
     public static final int DEFAULT_DROPPED_NORMAL = 3;
     public static final int DEFAULT_DROPPED_MIDDLE = 9;
@@ -47,6 +47,7 @@ public class Constants {
 
     public static final int LIMIT_WARM_THRESHOLD_MS = 5 * 1000;
 
+
     public enum Type {
         NORMAL, ANR, STARTUP
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -170,7 +170,7 @@ public void fallback(List<MethodItem> stack, int size) {
                     printAnr(scene, processStat, memoryInfo, status, logcatBuilder, isForeground, stack.size(),
                             stackKey, dumpStack, inputCost, animationCost, traversalCost, stackCost), token, curTime); // for logcat
 
-            if (stackCost >= Constants.DEFAULT_ANR_INVALID || processStat[0] > 10) {
+            if (stackCost >= Constants.DEFAULT_ANR_INVALID) {
                 MatrixLog.w(TAG, "The checked anr task was not executed on time. " +
                         "The possible reason is that the current process has a low priority. just pass this report");
                 return;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -195,7 +195,7 @@ void report() {
 
             try {
                 TracePlugin plugin = Matrix.with().getPluginByClass(TracePlugin.class);
-                if(null == plugin){
+                if (null == plugin) {
                     return;
                 }
                 JSONObject dropLevelObject = new JSONObject();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/StartupTracer.java
Patch:
@@ -3,7 +3,6 @@
 import android.app.Activity;
 import android.app.Application;
 import android.os.Bundle;
-import android.os.SystemClock;
 
 import com.tencent.matrix.Matrix;
 import com.tencent.matrix.report.Issue;
@@ -28,7 +27,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static android.os.SystemClock.*;
+import static android.os.SystemClock.uptimeMillis;
 
 /**
  * Created by caichongyang on 2019/3/04.

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -206,8 +206,8 @@ public static int stackToTree(LinkedList<MethodItem> resultStack, TreeNode root)
 
 
     public static long stackToString(LinkedList<MethodItem> stack, StringBuilder reportBuilder, StringBuilder logcatBuilder) {
-        logcatBuilder.append("|*\tTraceStack:").append("\n");
-        logcatBuilder.append("|*\t\t[id count cost]").append("\n");
+        logcatBuilder.append("|*\t\tTraceStack:").append("\n");
+        logcatBuilder.append("|*\t\t\t[id count cost]").append("\n");
         Iterator<MethodItem> listIterator = stack.iterator();
         long stackCost = 0; // fix cost
         while (listIterator.hasNext()) {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/config/MatrixEnum.java
Patch:
@@ -65,5 +65,6 @@ public enum MatrixEnum {
     clicfg_matrix_resource_max_detect_times,
     clicfg_matrix_resource_dump_hprof_enable,
 
+
     /******matrix end*******/
 }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/trace/TestTraceMainActivity.java
Patch:
@@ -57,7 +57,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
             MatrixLog.i(TAG, "plugin-trace start");
             plugin.start();
         }
-        decorator = FrameDecorator.create(this);
+        decorator = FrameDecorator.getInstance(this);
         if (!canDrawOverlays()) {
             requestWindowPermission();
         } else {

File: matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/config/IOConfig.java
Patch:
@@ -80,7 +80,7 @@ public int getFileMainThreadTriggerThreshold() {
     }
 
     public int getFileBufferSmallThreshold() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_io_small_buffer_operator_times.name(), DEFAULT_FILE_BUFFER_SMALL_THRESHOLD);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_io_small_buffer_threshold.name(), DEFAULT_FILE_BUFFER_SMALL_THRESHOLD);
     }
 
     public int getFilBufferSmallOpTimes() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -189,14 +189,14 @@ public static int stackToTree(LinkedList<MethodItem> resultStack, TreeNode root)
             if (lastNode == null || depth == 0) {
                 root.add(node);
             } else if (lastNode.depth() >= depth) {
-                while (lastNode.depth() > depth) {
+                while (null != lastNode && lastNode.depth() > depth) {
                     lastNode = lastNode.father;
                 }
-                if (lastNode.father != null) {
+                if (lastNode != null && lastNode.father != null) {
                     node.father = lastNode.father;
                     lastNode.father.add(node);
                 }
-            } else if (lastNode.depth() < depth) {
+            } else {
                 lastNode.add(node);
             }
             lastNode = node;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/SharePluginInfo.java
Patch:
@@ -32,6 +32,7 @@ public class SharePluginInfo {
     public static final String ISSUE_DROP_LEVEL = "dropLevel";
     public static final String ISSUE_DROP_SUM = "dropSum";
     public static final String ISSUE_FPS = "fps";
+    public static final String ISSUE_SUM_TASK_FRAME = "dropTaskFrameSum";
     public static final String ISSUE_TRACE_STACK = "stack";
     public static final String ISSUE_THREAD_STACK = "threadStack";
     public static final String ISSUE_PROCESS_PRIORITY = "processPriority";

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/AppActiveMatrixDelegate.java
Patch:
@@ -40,9 +40,9 @@ public void init(Application application) {
             return;
         }
         this.isInit = true;
+        this.handler = new Handler(MatrixHandlerThread.getDefaultHandlerThread().getLooper());
         application.registerComponentCallbacks(controller);
         application.registerActivityLifecycleCallbacks(controller);
-        this.handler = new Handler(MatrixHandlerThread.getDefaultHandlerThread().getLooper());
     }
 
     public String getCurrentFragmentName() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -20,7 +20,7 @@ public class UIThreadMonitor implements BeatLifecycle, Runnable {
     private static final String ADD_CALLBACK = "addCallbackLocked";
     private volatile boolean isAlive = false;
     private long[] dispatchTimeMs = new long[4];
-    private HashSet<LooperObserver> observers = new HashSet<>();
+    private final HashSet<LooperObserver> observers = new HashSet<>();
     private volatile long token = 0L;
     private boolean isBelongFrame = false;
 

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/Issue.java
Patch:
@@ -61,7 +61,7 @@ public void setContent(JSONObject content) {
     @Override
     public String toString() {
         String strContent = "";
-        if(null != content) strContent = content.toString();
+        if (null != content) strContent = content.toString();
         return String.format("tag[%s]type[%d];key[%s];content[%s]", tag, type, key, strContent);
     }
 

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/Configuration.java
Patch:
@@ -4,7 +4,6 @@
 import com.tencent.matrix.javalib.util.Util;
 import com.tencent.matrix.trace.retrace.MappingCollector;
 
-import java.io.File;
 import java.util.HashSet;
 
 public class Configuration {

File: matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/behaviour/persistence/IssueStorage.java
Patch:
@@ -122,8 +122,8 @@ public static List<SQLiteLintIssue> getIssueListByDb(String dbLabel) {
             return issueList;
         }
 
-        String querySql = String.format("SELECT * FROM %s where %s='%s' ORDER BY %s DESC", TABLE_NAME, COLUMN_DB_PATH, dbLabel, COLUMN_CREATE_TIME);
-        Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, null);
+        String querySql = String.format("SELECT * FROM %s where %s=? ORDER BY %s DESC", TABLE_NAME, COLUMN_DB_PATH, COLUMN_CREATE_TIME);
+        Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, new String[]{dbLabel});
         try {
             while (cursor.moveToNext()) {
                 issueList.add(issueConvertFromCursor(cursor));

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -195,7 +195,7 @@ void report() {
 
             try {
                 TracePlugin plugin = Matrix.with().getPluginByClass(TracePlugin.class);
-                if(null == plugin){
+                if (null == plugin) {
                     return;
                 }
                 JSONObject dropLevelObject = new JSONObject();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/StartupTracer.java
Patch:
@@ -3,7 +3,6 @@
 import android.app.Activity;
 import android.app.Application;
 import android.os.Bundle;
-import android.os.SystemClock;
 
 import com.tencent.matrix.Matrix;
 import com.tencent.matrix.report.Issue;
@@ -28,7 +27,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static android.os.SystemClock.*;
+import static android.os.SystemClock.uptimeMillis;
 
 /**
  * Created by caichongyang on 2019/3/04.

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/view/FrameDecorator.java
Patch:
@@ -107,7 +107,7 @@ public boolean onTouch(final View v, MotionEvent event) {
                         ((ValueAnimator) animator).addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                             @Override
                             public void onAnimationUpdate(ValueAnimator animation) {
-                                if(!isShowing){
+                                if (!isShowing) {
                                     return;
                                 }
                                 int value = (int) animation.getAnimatedValue("trans");

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java
Patch:
@@ -259,7 +259,7 @@ public Status execute() {
 
             while (infoIt.hasNext()) {
                 final DestroyedActivityInfo destroyedActivityInfo = infoIt.next();
-                if (isPublished(destroyedActivityInfo.mActivityName)) {
+                if (!mResourcePlugin.getConfig().getDetectDebugger() && isPublished(destroyedActivityInfo.mActivityName)) {
                     MatrixLog.v(TAG, "activity with key [%s] was already published.", destroyedActivityInfo.mActivityName);
                     infoIt.remove();
                     continue;

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java
Patch:
@@ -201,7 +201,7 @@ public AndroidHeapDumper getHeapDumper() {
 
     private void pushDestroyedActivityInfo(Activity activity) {
         final String activityName = activity.getClass().getName();
-        if (isPublished(activityName)) {
+        if (!mResourcePlugin.getConfig().getDetectDebugger() && isPublished(activityName)) {
             MatrixLog.d(TAG, "activity leak with name %s had published, just ignore", activityName);
             return;
         }

File: app/src/main/java/com/tencent/mm/libwxperf/MainActivity.java
Patch:
@@ -29,7 +29,7 @@ protected void onCreate(Bundle savedInstanceState) {
 //        MemoryHook.groupByMemorySize(true);
         MemoryHook.INSTANCE
                 .addHookSo(".*libnative-lib\\.so$")
-                .enableStacktrace(false)
+                .enableStacktrace(true)
                 .enableMmapHook(true)
                 .hook();
 

File: app/src/main/java/com/tencent/mm/libwxperf/MainActivity.java
Patch:
@@ -29,7 +29,7 @@ protected void onCreate(Bundle savedInstanceState) {
 //        MemoryHook.groupByMemorySize(true);
         MemoryHook.INSTANCE
                 .addHookSo(".*libnative-lib\\.so$")
-                .enableStacktrace(false)
+                .enableStacktrace(true)
                 .enableMmapHook(true)
                 .hook();
 

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/Plugin.java
Patch:
@@ -72,7 +72,7 @@ public void onDetectIssue(Issue issue) {
             if (issue.getTag() != null) {
                 content.put(Issue.ISSUE_REPORT_TAG, issue.getTag());
             }
-            if (issue.getType() != null) {
+            if (issue.getType() != 0) {
                 content.put(Issue.ISSUE_REPORT_TYPE, issue.getType());
             }
             content.put(Issue.ISSUE_REPORT_PROCESS, MatrixUtil.getProcessName(application));

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/Issue.java
Patch:
@@ -27,7 +27,7 @@
  */
 
 public class Issue {
-    private Integer    type;
+    private int        type;
     private String     tag;
     private String     key;
     private JSONObject content;
@@ -73,7 +73,7 @@ public void setTag(String tag) {
         this.tag = tag;
     }
 
-    public Integer getType() {
+    public int getType() {
         return type;
     }
 

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/BatteryCanaryPlugin.java
Patch:
@@ -21,6 +21,7 @@
 import com.tencent.matrix.batterycanary.config.BatteryConfig;
 import com.tencent.matrix.batterycanary.config.SharePluginInfo;
 import com.tencent.matrix.batterycanary.core.BatteryCanaryCore;
+import com.tencent.matrix.batterycanary.monitor.BatteryMonitor;
 import com.tencent.matrix.batterycanary.util.BatteryCanaryUtil;
 import com.tencent.matrix.plugin.Plugin;
 import com.tencent.matrix.plugin.PluginListener;

File: matrix/matrix-android/matrix-memory-canary/src/main/java/com/tencent/matrix/memorycanary/core/MemoryCanaryCore.java
Patch:
@@ -398,7 +398,7 @@ private void fillMemoryInfo(JSONObject json, final MatrixMemoryInfo matrixMemory
         inner.put(SharePluginInfo.ISSUE_DALVIK_HEAP, matrixMemoryInfo.mDalvikHeap);
         inner.put(SharePluginInfo.ISSUE_NATIVE_HEAP, matrixMemoryInfo.mNativeHeap);
         inner.put(SharePluginInfo.ISSUE_VMSIZE, DeviceUtil.getVmSize());
-        if (!activity.isEmpty()) {
+        if (null != activity && !activity.isEmpty()) {
             inner.put(SharePluginInfo.ISSUE_ACTIVITY, activity);
         }
         json.put(tag, inner);

File: matrix/matrix-android/matrix-thread-canary/src/main/java/com/tencent/matrix/threadcanary/Constants.java
Patch:
@@ -10,8 +10,8 @@ public class Constants {
     public static final String REPORT_KEY_THREAD_GROUP_THREAD_LIST = "list";
     public static final String REPORT_KEY_THREAD_INFO_TID = "tid";
     public static final String REPORT_KEY_THREAD_INFO_STATE = "state";
-    public static final String REPORT_KEY_THREAD_INFO_JIFFIES = "jiffies";
     public static final String REPORT_KEY_THREAD_INFO_STACK = "stack";
-    public static final String REPORT_KEY_THREAD_INFO_STACK_MD5 = "stack_md5";
-
+    public static final String REPORT_KEY_THREAD_INFO_TARGET = "target";
+    public static final String REPORT_KEY_THREAD_INFO_IS_HANDLER = "isHandlerThread";
+    public static final int MAX_PENDING_THREAD_REPORT = 10;
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -31,7 +31,7 @@ public class Constants {
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
     public static final int DEFAULT_ANR = 5 * 1000;
-    public static final int DEFAULT_ANR_INVALID = 5 * 1000 + 500;
+    public static final int DEFAULT_ANR_INVALID = 6 * 1000;
 
     public static final int DEFAULT_DROPPED_NORMAL = 3;
     public static final int DEFAULT_DROPPED_MIDDLE = 9;
@@ -47,6 +47,7 @@ public class Constants {
 
     public static final int LIMIT_WARM_THRESHOLD_MS = 5 * 1000;
 
+
     public enum Type {
         NORMAL, ANR, STARTUP
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -170,7 +170,7 @@ public void fallback(List<MethodItem> stack, int size) {
                     printAnr(scene, processStat, memoryInfo, status, logcatBuilder, isForeground, stack.size(),
                             stackKey, dumpStack, inputCost, animationCost, traversalCost, stackCost), token, curTime); // for logcat
 
-            if (stackCost >= Constants.DEFAULT_ANR_INVALID || processStat[0] > 10) {
+            if (stackCost >= Constants.DEFAULT_ANR_INVALID) {
                 MatrixLog.w(TAG, "The checked anr task was not executed on time. " +
                         "The possible reason is that the current process has a low priority. just pass this report");
                 return;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -206,8 +206,8 @@ public static int stackToTree(LinkedList<MethodItem> resultStack, TreeNode root)
 
 
     public static long stackToString(LinkedList<MethodItem> stack, StringBuilder reportBuilder, StringBuilder logcatBuilder) {
-        logcatBuilder.append("|*\tTraceStack:").append("\n");
-        logcatBuilder.append("|*\t\t[id count cost]").append("\n");
+        logcatBuilder.append("|*\t\tTraceStack:").append("\n");
+        logcatBuilder.append("|*\t\t\t[id count cost]").append("\n");
         Iterator<MethodItem> listIterator = stack.iterator();
         long stackCost = 0; // fix cost
         while (listIterator.hasNext()) {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/config/MatrixEnum.java
Patch:
@@ -65,5 +65,6 @@ public enum MatrixEnum {
     clicfg_matrix_resource_max_detect_times,
     clicfg_matrix_resource_dump_hprof_enable,
 
+
     /******matrix end*******/
 }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/trace/TestTraceMainActivity.java
Patch:
@@ -57,7 +57,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
             MatrixLog.i(TAG, "plugin-trace start");
             plugin.start();
         }
-        decorator = FrameDecorator.create(this);
+        decorator = FrameDecorator.getInstance(this);
         if (!canDrawOverlays()) {
             requestWindowPermission();
         } else {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -31,7 +31,7 @@ public class Constants {
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
     public static final int DEFAULT_ANR = 5 * 1000;
-    public static final int DEFAULT_ANR_INVALID = 5 * 1000 + 500;
+    public static final int DEFAULT_ANR_INVALID = 6 * 1000;
 
     public static final int DEFAULT_DROPPED_NORMAL = 3;
     public static final int DEFAULT_DROPPED_MIDDLE = 9;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -170,7 +170,7 @@ public void fallback(List<MethodItem> stack, int size) {
                     printAnr(scene, processStat, memoryInfo, status, logcatBuilder, isForeground, stack.size(),
                             stackKey, dumpStack, inputCost, animationCost, traversalCost, stackCost), token, curTime); // for logcat
 
-            if (stackCost >= Constants.DEFAULT_ANR_INVALID || processStat[0] > 16) {
+            if (stackCost >= Constants.DEFAULT_ANR_INVALID) {
                 MatrixLog.w(TAG, "The checked anr task was not executed on time. " +
                         "The possible reason is that the current process has a low priority. just pass this report");
                 return;

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryPrinter.java
Patch:
@@ -24,7 +24,7 @@ public void onJiffies(JiffiesMonitorPlugin.JiffiesResult result) {
         sb.append("| ").append("pid=").append(Process.myPid())
                 .append("\t\t").append("during(min)=").append(result.upTimeDiff / ONE_MIN).append("<").append(result.timeDiff / ONE_MIN)
                 .append("\t\t").append("diff(jiffies)=").append(result.jiffiesDiff).append("<").append(result.jiffiesDiff2)
-                .append("\t\t").append("average(jiffies/min)=").append(result.jiffiesDiff / Math.max(1, result.upTimeDiff / ONE_MIN)).append("\n");
+                .append("\t\t").append("average(jiffies/min)=").append(result.jiffiesDiff2 / Math.max(1, result.upTimeDiff / ONE_MIN)).append("\n");
         sb.append("==============================================================================================").append("\n");
         for (JiffiesMonitorPlugin.ThreadResult threadResult : result.threadResults.subList(0, 8)) {
             if (threadResult.jiffiesDiff <= 0) {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/AppActiveMatrixDelegate.java
Patch:
@@ -68,6 +68,9 @@ private void onDispatchForeground(String visibleScene) {
         }
 
         MatrixLog.i(TAG, "onForeground... visibleScene[%s]", visibleScene);
+        if (MatrixHandlerThread.getDefaultHandler() == null) {
+            MatrixHandlerThread.getDefaultHandlerThread();
+        }
         MatrixHandlerThread.getDefaultHandler().post(new Runnable() {
             @Override
             public void run() {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryPrinter.java
Patch:
@@ -34,7 +34,7 @@ public void onJiffies(JiffiesMonitorPlugin.JiffiesResult result) {
             sb.append("| -> ").append(threadResult).append("\n");
             List<LooperTaskMonitorPlugin.TaskTraceInfo> threadTasks = tasks.get(threadResult.threadInfo.tid);
             if (null != threadTasks && !threadTasks.isEmpty()) {
-                for (LooperTaskMonitorPlugin.TaskTraceInfo task : threadTasks.subList(0, Math.min(10, threadTasks.size()))) {
+                for (LooperTaskMonitorPlugin.TaskTraceInfo task : threadTasks.subList(0, Math.min(3, threadTasks.size()))) {
                     sb.append("|\t\t").append(task).append("\n");
                 }
             }

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryPrinter.java
Patch:
@@ -34,7 +34,9 @@ public void onJiffies(JiffiesMonitorPlugin.JiffiesResult result) {
             sb.append("| -> ").append(threadResult).append("\n");
             List<LooperTaskMonitorPlugin.TaskTraceInfo> threadTasks = tasks.get(threadResult.threadInfo.tid);
             if (null != threadTasks && !threadTasks.isEmpty()) {
-                sb.append("|\t\t").append(threadTasks).append("\n");
+                for (LooperTaskMonitorPlugin.TaskTraceInfo task : threadTasks.subList(0, Math.min(10, threadTasks.size()))) {
+                    sb.append("|\t\t").append(task).append("\n");
+                }
             }
         }
         sb.append("**********************************************************************************************");

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/plugin/LooperTaskMonitorPlugin.java
Patch:
@@ -110,6 +110,9 @@ public LinkedList<TaskTraceInfo> unbindLooperMonitor(Thread thread) {
         LooperMonitor looperMonitor;
         synchronized (looperMonitorArray) {
             looperMonitor = looperMonitorArray.get(thread.getId());
+            if(null != looperMonitor){
+                looperMonitorArray.remove(thread.getId());
+            }
         }
         LinkedList<TaskTraceInfo> list = new LinkedList<>();
         if (null != looperMonitor) {

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryPrinter.java
Patch:
@@ -24,7 +24,7 @@ public void onJiffies(JiffiesMonitorPlugin.JiffiesResult result) {
         sb.append("| ").append("pid=").append(Process.myPid())
                 .append("\t\t").append("during(min)=").append(result.upTimeDiff / ONE_MIN).append("<").append(result.timeDiff / ONE_MIN)
                 .append("\t\t").append("diff(jiffies)=").append(result.jiffiesDiff).append("<").append(result.jiffiesDiff2)
-                .append("\t\t").append("average(jiffies/min)=").append(result.jiffiesDiff / Math.min(1, result.upTimeDiff / ONE_MIN)).append("\n");
+                .append("\t\t").append("average(jiffies/min)=").append(result.jiffiesDiff / Math.max(1, result.upTimeDiff / ONE_MIN)).append("\n");
         sb.append("==============================================================================================").append("\n");
         for (JiffiesMonitorPlugin.ThreadResult threadResult : result.threadResults.subList(0, 8)) {
             if (threadResult.jiffiesDiff <= 0) {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/trace/TestTraceMainActivity.java
Patch:
@@ -57,7 +57,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
             MatrixLog.i(TAG, "plugin-trace start");
             plugin.start();
         }
-        decorator = FrameDecorator.getInstance(this);
+        decorator = FrameDecorator.create(this);
         if (!canDrawOverlays()) {
             requestWindowPermission();
         } else {

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/TraceBuildConstants.java
Patch:
@@ -29,6 +29,7 @@ public class TraceBuildConstants {
     public final static String MATRIX_TRACE_APPLICATION_ON_CREATE_ARGS = "()V";
     public final static String MATRIX_TRACE_ACTIVITY_CLASS = "android/app/Activity";
     public final static String MATRIX_TRACE_V7_ACTIVITY_CLASS = "android/support/v7/app/AppCompatActivity";
+    public final static String MATRIX_TRACE_V4_ACTIVITY_CLASS = "android/support/v4/app/FragmentActivity";
     public final static String MATRIX_TRACE_APPLICATION_CLASS = "android/app/Application";
     public final static String MATRIX_TRACE_METHOD_BEAT_CLASS = "com/tencent/matrix/trace/core/AppMethodBeat";
     public final static String MATRIX_TRACE_ON_WINDOW_FOCUS_METHOD_ARGS = "(Z)V";

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/issue/IssuesListActivity.java
Patch:
@@ -152,9 +152,6 @@ public void bind(Issue issue) {
             if (TextUtils.isEmpty(issue.getKey())) tvKey.setVisibility(View.GONE);
             else tvKey.setText("KEY -> " + issue.getKey());
 
-            if (issue.getType() == null) tvType.setVisibility(View.GONE);
-            else tvType.setText("TYPE -> " + issue.getType());
-
             tvIndex.setText((IssuesMap.getCount() - position) + "");
             tvIndex.setTextColor(getColor(position));
             if (isShow)

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/TraceBuildConstants.java
Patch:
@@ -29,6 +29,7 @@ public class TraceBuildConstants {
     public final static String MATRIX_TRACE_APPLICATION_ON_CREATE_ARGS = "()V";
     public final static String MATRIX_TRACE_ACTIVITY_CLASS = "android/app/Activity";
     public final static String MATRIX_TRACE_V7_ACTIVITY_CLASS = "android/support/v7/app/AppCompatActivity";
+    public final static String MATRIX_TRACE_V4_ACTIVITY_CLASS = "android/support/v4/app/FragmentActivity";
     public final static String MATRIX_TRACE_APPLICATION_CLASS = "android/app/Application";
     public final static String MATRIX_TRACE_METHOD_BEAT_CLASS = "com/tencent/matrix/trace/core/AppMethodBeat";
     public final static String MATRIX_TRACE_ON_WINDOW_FOCUS_METHOD_ARGS = "(Z)V";

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/issue/IssuesListActivity.java
Patch:
@@ -152,9 +152,6 @@ public void bind(Issue issue) {
             if (TextUtils.isEmpty(issue.getKey())) tvKey.setVisibility(View.GONE);
             else tvKey.setText("KEY -> " + issue.getKey());
 
-            if (issue.getType() == null) tvType.setVisibility(View.GONE);
-            else tvType.setText("TYPE -> " + issue.getType());
-
             tvIndex.setText((IssuesMap.getCount() - position) + "");
             tvIndex.setTextColor(getColor(position));
             if (isShow)

File: app/src/main/java/com/tencent/mm/libwxperf/JNIObj.java
Patch:
@@ -19,6 +19,8 @@ public static void init() {
     public native void doSomeThing();
     public native void dump(String libPath);
 
+    public native void nullptr(String[] ss);
+
     public static void onDumpFinished(String res) {
 
     }

File: app/src/main/java/com/tencent/mm/libwxperf/MainActivity.java
Patch:
@@ -34,6 +34,7 @@ protected void onCreate(Bundle savedInstanceState) {
             @Override
             public void onClick(View v) {
                 jniObj.doSomeThing();
+                jniObj.nullptr(null);
             }
         });
 

File: wxperf/src/main/java/com/tencent/mm/performance/jni/memory/MemoryHook.java
Patch:
@@ -5,6 +5,7 @@
 
 /**
  * Created by Yves on 2019-08-08
+ * fixme 接口重构
  */
 public class MemoryHook {
 
@@ -77,6 +78,7 @@ public static void hook(String[] hookSoList) {
             xhookRegisterNative(hookSoList);
         }
 
+        xhookIgnoreNative(null);
         enableStacktraceNative(false);
         xhookEnableDebugNative(true);
         xhookEnableSigSegvProtectionNative(!BuildConfig.DEBUG);

File: app/src/main/java/com/tencent/mm/libwxperf/JNIObj.java
Patch:
@@ -16,8 +16,8 @@ public static void init() {
         }
     }
 
-//    public native void doSomeThing();
-//    public native void dump(String libPath);
+    public native void doSomeThing();
+    public native void dump(String libPath);
 
     public static void onDumpFinished(String res) {
 

File: matrix/matrix-android/matrix-memory-canary/src/main/java/com/tencent/matrix/memorycanary/core/MemoryCanaryCore.java
Patch:
@@ -398,7 +398,7 @@ private void fillMemoryInfo(JSONObject json, final MatrixMemoryInfo matrixMemory
         inner.put(SharePluginInfo.ISSUE_DALVIK_HEAP, matrixMemoryInfo.mDalvikHeap);
         inner.put(SharePluginInfo.ISSUE_NATIVE_HEAP, matrixMemoryInfo.mNativeHeap);
         inner.put(SharePluginInfo.ISSUE_VMSIZE, DeviceUtil.getVmSize());
-        if (!activity.isEmpty()) {
+        if (null != activity && !activity.isEmpty()) {
             inner.put(SharePluginInfo.ISSUE_ACTIVITY, activity);
         }
         json.put(tag, inner);

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/Plugin.java
Patch:
@@ -72,7 +72,7 @@ public void onDetectIssue(Issue issue) {
             if (issue.getTag() != null) {
                 content.put(Issue.ISSUE_REPORT_TAG, issue.getTag());
             }
-            if (issue.getType() != null) {
+            if (issue.getType() != 0) {
                 content.put(Issue.ISSUE_REPORT_TYPE, issue.getType());
             }
             content.put(Issue.ISSUE_REPORT_PROCESS, MatrixUtil.getProcessName(application));

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/Issue.java
Patch:
@@ -73,7 +73,7 @@ public void setTag(String tag) {
         this.tag = tag;
     }
 
-    public Integer getType() {
+    public int getType() {
         return type;
     }
 

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/Issue.java
Patch:
@@ -27,7 +27,7 @@
  */
 
 public class Issue {
-    private Integer    type;
+    private int        type;
     private String     tag;
     private String     key;
     private JSONObject content;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -204,7 +204,7 @@ public static void i(int methodId) {
         }
 
         if (status == STATUS_DEFAULT) {
-            synchronized (statunnnnnnnsLock) {
+            synchronized (statusLock) {
                 if (status == STATUS_DEFAULT) {
                     realExecute();
                     status = STATUS_READY;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java
Patch:
@@ -94,7 +94,7 @@ private final static class HackCallback implements Handler.Callback {
         public boolean handleMessage(Message msg) {
 
             if (!AppMethodBeat.isRealTrace()) {
-                return null == mOriginalCallback ? false : mOriginalCallback.handleMessage(msg);
+                return null != mOriginalCallback && mOriginalCallback.handleMessage(msg);
             }
 
             boolean isLaunchActivity = isLaunchActivity(msg);
@@ -115,7 +115,7 @@ public boolean handleMessage(Message msg) {
                 }
             }
 
-            return null == mOriginalCallback ? false : mOriginalCallback.handleMessage(msg);
+            return null != mOriginalCallback && mOriginalCallback.handleMessage(msg);
         }
 
         private Method method = null;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -167,7 +167,7 @@ public void fallback(List<MethodItem> stack, int size) {
             // stackKey
             String stackKey = TraceDataUtils.getTreeKey(stack, stackCost);
             MatrixLog.w(TAG, "%s \npostTime:%s curTime:%s",
-                    printAnr(processStat, memoryInfo, status, logcatBuilder, isForeground, stack.size(),
+                    printAnr(scene, processStat, memoryInfo, status, logcatBuilder, isForeground, stack.size(),
                             stackKey, dumpStack, inputCost, animationCost, traversalCost, stackCost), token, curTime); // for logcat
 
             if (stackCost >= Constants.DEFAULT_ANR_INVALID || processStat[0] > 10) {
@@ -211,10 +211,11 @@ public void fallback(List<MethodItem> stack, int size) {
 
         }
 
-        private String printAnr(int[] processStat, long[] memoryInfo, Thread.State state, StringBuilder stack, boolean isForeground,
+        private String printAnr(String scene, int[] processStat, long[] memoryInfo, Thread.State state, StringBuilder stack, boolean isForeground,
                                 long stackSize, String stackKey, String dumpStack, long inputCost, long animationCost, long traversalCost, long stackCost) {
             StringBuilder print = new StringBuilder();
             print.append(String.format("-\n>>>>>>>>>>>>>>>>>>>>>>> maybe happens ANR(%s ms)! <<<<<<<<<<<<<<<<<<<<<<<\n", stackCost));
+            print.append("|* scene: ").append(scene).append("\n");
             print.append("|* [ProcessStat]").append("\n");
             print.append("|*\t\tPriority: ").append(processStat[0]).append("\n");
             print.append("|*\t\tNice: ").append(processStat[1]).append("\n");

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -155,7 +155,7 @@ public void fallback(List<MethodItem> stack, int size) {
             long stackCost = Math.max(cost, TraceDataUtils.stackToString(stack, reportBuilder, logcatBuilder));
             String stackKey = TraceDataUtils.getTreeKey(stack, stackCost);
 
-            MatrixLog.w(TAG, "%s", printEvil(processStat, isForeground, logcatBuilder, stack.size(), stackKey, usage, queueCost[0], queueCost[1], queueCost[2], cost)); // for logcat
+            MatrixLog.w(TAG, "%s", printEvil(scene, processStat, isForeground, logcatBuilder, stack.size(), stackKey, usage, queueCost[0], queueCost[1], queueCost[2], cost)); // for logcat
 
             if (stackCost >= Constants.DEFAULT_ANR_INVALID || processStat[0] > 10) {
                 MatrixLog.w(TAG, "The checked anr task was not executed on time. " +
@@ -195,17 +195,17 @@ public void run() {
             analyse();
         }
 
-        private String printEvil(int[] processStat, boolean isForeground, StringBuilder stack, long stackSize, String stackKey, String usage, long inputCost,
+        private String printEvil(String scene, int[] processStat, boolean isForeground, StringBuilder stack, long stackSize, String stackKey, String usage, long inputCost,
                                  long animationCost, long traversalCost, long allCost) {
             StringBuilder print = new StringBuilder();
             print.append(String.format("-\n>>>>>>>>>>>>>>>>>>>>> maybe happens Jankiness!(%sms) <<<<<<<<<<<<<<<<<<<<<\n", allCost));
+            print.append("|* scene: ").append(scene).append("\n");
             print.append("|* [ProcessStat]").append("\n");
             print.append("|*\t\tPriority: ").append(processStat[0]).append("\n");
             print.append("|*\t\tNice: ").append(processStat[1]).append("\n");
             print.append("|*\t\tForeground: ").append(isForeground).append("\n");
             print.append("|* [CPU]").append("\n");
             print.append("|*\t\tusage: ").append(usage).append("\n");
-            print.append("|* [Memory]").append("\n");  // todo
             print.append("|* [doFrame]").append("\n");
             print.append("|*\t\tinputCost: ").append(inputCost).append("\n");
             print.append("|*\t\tanimationCost: ").append(animationCost).append("\n");

File: wxperf/src/main/java/com/tencent/mm/performance/jni/fd/FDDumpBridge.java
Patch:
@@ -1,4 +1,4 @@
-package com.tencent.mm.performance.fd;
+package com.tencent.mm.performance.jni.fd;
 
 /**
  * Created by Yves on 2019-07-22

File: matrix/matrix-android/matrix-thread-canary/src/main/java/com/tencent/matrix/threadcanary/Constants.java
Patch:
@@ -12,5 +12,6 @@ public class Constants {
     public static final String REPORT_KEY_THREAD_INFO_STATE = "state";
     public static final String REPORT_KEY_THREAD_INFO_STACK = "stack";
     public static final String REPORT_KEY_THREAD_INFO_TARGET = "target";
+    public static final String REPORT_KEY_THREAD_INFO_IS_HANDLER = "isHandlerThread";
     public static final int MAX_PENDING_THREAD_REPORT = 10;
 }

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/Issue.java
Patch:
@@ -60,7 +60,9 @@ public void setContent(JSONObject content) {
 
     @Override
     public String toString() {
-        return String.format("tag[%s]type[%d];key[%s];content[%s]", tag, type, key, content);
+        String strContent = "";
+        if(null != content) strContent = content.toString();
+        return String.format("tag[%s]type[%d];key[%s];content[%s]", tag, type, key, strContent);
     }
 
     public void setKey(String key) {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -27,7 +27,7 @@ public class Constants {
     public static final int FILTER_STACK_MAX_COUNT = 60;
     public static final float FILTER_STACK_KEY_ALL_PERCENT = .3F;
     public static final float FILTER_STACK_KEY_PATENT_PERCENT = .8F;
-    public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 1000;
+    public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 700;
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
     public static final int DEFAULT_ANR = 5 * 1000;

File: matrix/matrix-android/matrix-memory-canary/src/main/java/com/tencent/matrix/memorycanary/core/MemoryCanaryCore.java
Patch:
@@ -230,6 +230,7 @@ public void start() {
     public void stop() {
         ((Application) mContext).unregisterActivityLifecycleCallbacks(mActivityLifecycleCallback);
         mContext.unregisterComponentCallbacks(mComponentCallback);
+        mIsOpen = false;
     }
 
     @Override

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -60,7 +60,7 @@ public static void structuredDataToStack(long[] buffer, LinkedList<MethodItem> r
                     long in = rawData.peek();
                     int inMethodId = getMethodId(in);
                     if (inMethodId != outMethodId) {
-                        MatrixLog.e(TAG, "inMethodId[%s] != outMethodId[%s] throw this outMethodId!");
+                        MatrixLog.e(TAG, "inMethodId[%s] != outMethodId[%s] throw this outMethodId!", inMethodId, outMethodId);
                         continue;
                     }
                     in = rawData.pop();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -27,7 +27,7 @@ public class Constants {
     public static final int FILTER_STACK_MAX_COUNT = 60;
     public static final float FILTER_STACK_KEY_ALL_PERCENT = .3F;
     public static final float FILTER_STACK_KEY_PATENT_PERCENT = .8F;
-    public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 1000;
+    public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 700;
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;
     public static final int DEFAULT_ANR = 5 * 1000;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -212,7 +212,7 @@ public static void i(int methodId) {
             }
         }
 
-        if (Thread.currentThread() == sMainThread) {
+        if (Thread.currentThread().getId() == sMainThread.getId()) {
             if (assertIn) {
                 android.util.Log.e(TAG, "ERROR!!! AppMethodBeat.i Recursive calls!!!");
                 return;
@@ -241,7 +241,7 @@ public static void o(int methodId) {
         if (methodId >= METHOD_ID_MAX) {
             return;
         }
-        if (Thread.currentThread() == sMainThread) {
+        if (Thread.currentThread().getId() == sMainThread.getId()) {
             if (sIndex < Constants.BUFFER_SIZE) {
                 mergeData(methodId, sIndex, false);
             } else {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -5,7 +5,6 @@
 import android.os.HandlerThread;
 import android.os.Looper;
 import android.os.SystemClock;
-import android.util.Log;
 
 import com.tencent.matrix.AppActiveMatrixDelegate;
 import com.tencent.matrix.trace.constants.Constants;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -60,8 +60,8 @@ public static void structuredDataToStack(long[] buffer, LinkedList<MethodItem> r
                 if (!rawData.isEmpty()) {
                     long in = rawData.pop();
                     depth--;
-                    int inMethodId = getMethodId(in);
-                    while (inMethodId != methodId && !rawData.isEmpty()) {
+                    int inMethodId;
+                    while ((inMethodId = getMethodId(in)) != methodId && !rawData.isEmpty()) {
                         MatrixLog.w(TAG, "[structuredDataToStack] outMethod[%s] not match inMethod[%s]! pop to continue find! inSize:%s", methodId, inMethodId, rawData.size());
                         in = rawData.pop();
                         depth--;

File: matrix/matrix-android/matrix-memory-canary/src/main/java/com/tencent/matrix/memorycanary/core/MemoryCanaryCore.java
Patch:
@@ -445,6 +445,8 @@ private int getFib(int n) {
             return 1;
         } else if (n == 2) {
             return 2;
+        } else if(n >= 8) {
+            return 30;
         } else {
             return getFib(n - 1) + getFib(n - 2);
         }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -329,7 +329,9 @@ public IndexRecord maskIndex(String source) {
                         indexRecord.next = tmp;
                     } else {
                         IndexRecord tmp = last.next;
-                        last.next = indexRecord;
+                        if (null != last.next) {
+                            last.next = indexRecord;
+                        }
                         indexRecord.next = tmp;
                     }
                     return indexRecord;

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/Issue.java
Patch:
@@ -60,7 +60,9 @@ public void setContent(JSONObject content) {
 
     @Override
     public String toString() {
-        return String.format("tag[%s]type[%d];key[%s];content[%s]", tag, type, key, content);
+        String strContent = "";
+        if(null != content) strContent = content.toString();
+        return String.format("tag[%s]type[%d];key[%s];content[%s]", tag, type, key, strContent);
     }
 
     public void setKey(String key) {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/DefaultPluginListener.java
Patch:
@@ -56,7 +56,7 @@ public void onDestroy(Plugin plugin) {
 
     @Override
     public void onReportIssue(Issue issue) {
-        MatrixLog.i(TAG, "report issue content: %s", issue);
+        MatrixLog.i(TAG, "report issue content: %s", issue == null ? "" : issue);
     }
 
 }

File: matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/behaviour/persistence/IssueStorage.java
Patch:
@@ -122,8 +122,8 @@ public static List<SQLiteLintIssue> getIssueListByDb(String dbLabel) {
             return issueList;
         }
 
-        String querySql = String.format("SELECT * FROM %s where %s='%s' ORDER BY %s DESC", TABLE_NAME, COLUMN_DB_PATH, dbLabel, COLUMN_CREATE_TIME);
-        Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, null);
+        String querySql = String.format("SELECT * FROM %s where %s=? ORDER BY %s DESC", TABLE_NAME, COLUMN_DB_PATH, COLUMN_CREATE_TIME);
+        Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, new String[]{dbLabel});
         try {
             while (cursor.moveToNext()) {
                 issueList.add(issueConvertFromCursor(cursor));

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -200,7 +200,7 @@ public static void i(int methodId) {
         }
 
         if (status == STATUS_DEFAULT) {
-            synchronized (statusLock) {
+            synchronized (statunnnnnnnsLock) {
                 if (status == STATUS_DEFAULT) {
                     realExecute();
                     status = STATUS_READY;
@@ -426,7 +426,7 @@ public long[] copyData(IndexRecord startRecord, IndexRecord endRecord) {
                 return data;
             }
             return data;
-        } catch (Exception e) {
+        } catch (OutOfMemoryError e) {
             MatrixLog.e(TAG, e.toString());
             return data;
         } finally {

File: matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/behaviour/persistence/IssueStorage.java
Patch:
@@ -122,8 +122,8 @@ public static List<SQLiteLintIssue> getIssueListByDb(String dbLabel) {
             return issueList;
         }
 
-        String querySql = String.format("SELECT * FROM %s where %s='%s' ORDER BY %s DESC", TABLE_NAME, COLUMN_DB_PATH, dbLabel, COLUMN_CREATE_TIME);
-        Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, null);
+        String querySql = String.format("SELECT * FROM %s where %s=? ORDER BY %s DESC", TABLE_NAME, COLUMN_DB_PATH, COLUMN_CREATE_TIME);
+        Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, new String[]{dbLabel});
         try {
             while (cursor.moveToNext()) {
                 issueList.add(issueConvertFromCursor(cursor));

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -177,7 +177,7 @@ private static void dispatchBegin() {
         isPauseUpdateTime = false;
 
         synchronized (updateTimeLock) {
-            updateTimeLock.notifyAll();
+            updateTimeLock.notify();
         }
     }
 
@@ -262,11 +262,11 @@ public static void at(Activity activity, boolean isFocus) {
                         listener.onActivityFocused(activityName);
                     }
                 }
-                MatrixLog.i(TAG, "[at] visibleScene[%s] has %s focus!", getVisibleScene(), isFocus ? "attach" : "detach");
+                MatrixLog.i(TAG, "[at] visibleScene[%s] has %s focus!", getVisibleScene(), "attach");
             }
         } else {
             if (sFocusActivitySet.remove(activityName)) {
-                MatrixLog.i(TAG, "[at] visibleScene[%s] has %s focus!", getVisibleScene(), isFocus ? "attach" : "detach");
+                MatrixLog.i(TAG, "[at] visibleScene[%s] has %s focus!", getVisibleScene(), "detach");
             }
         }
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -195,6 +195,9 @@ void report() {
 
             try {
                 TracePlugin plugin = Matrix.with().getPluginByClass(TracePlugin.class);
+                if(null == plugin){
+                    return;
+                }
                 JSONObject dropLevelObject = new JSONObject();
                 dropLevelObject.put(DropStatus.DROPPED_FROZEN.name(), dropLevel[DropStatus.DROPPED_FROZEN.index]);
                 dropLevelObject.put(DropStatus.DROPPED_HIGH.name(), dropLevel[DropStatus.DROPPED_HIGH.index]);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/StartupTracer.java
Patch:
@@ -203,6 +203,9 @@ private void report(long applicationCost, long firstScreenCost, StringBuilder re
                             long allCost, boolean isWarmStartUp, int scene) {
 
             TracePlugin plugin = Matrix.with().getPluginByClass(TracePlugin.class);
+            if (null == plugin) {
+                return;
+            }
             try {
                 JSONObject costObject = new JSONObject();
                 costObject = DeviceUtil.getDeviceInfo(costObject, Matrix.with().getApplication());

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -346,7 +346,7 @@ public static String getTreeKey(List<MethodItem> stack, long stackCost) {
         Collections.sort(sortList, new Comparator<MethodItem>() {
             @Override
             public int compare(MethodItem o1, MethodItem o2) {
-                return Long.compare((o2.depth + 1) * o2.durTime, (o1.depth + 1) * o1.durTime);
+                return Integer.compare((o2.depth + 1) * o2.durTime, (o1.depth + 1) * o1.durTime);
             }
         });
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/view/FrameDecorator.java
Patch:
@@ -229,8 +229,8 @@ public FloatFrameView getView() {
 
     private void initLayoutParams(Context context) {
         windowManager = (WindowManager) context.getApplicationContext().getSystemService(Context.WINDOW_SERVICE);
-        windowManager.getDefaultDisplay().getMetrics(displayMetrics);
         try {
+            windowManager.getDefaultDisplay().getMetrics(displayMetrics);
             DisplayMetrics metrics = new DisplayMetrics();
             windowManager.getDefaultDisplay().getMetrics(metrics);
             layoutParam = new WindowManager.LayoutParams();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -350,10 +350,10 @@ public int compare(MethodItem o1, MethodItem o2) {
             }
         });
 
-        MethodItem root = stack.get(0);
         if (sortList.isEmpty() && !stack.isEmpty()) {
+            MethodItem root = stack.get(0);
             sortList.add(root);
-        } else if (sortList.size() > 1 && sortList.peek().methodId == root.methodId) {
+        } else if (sortList.size() > 1 && sortList.peek().methodId == AppMethodBeat.METHOD_ID_DISPATCH) {
             sortList.removeFirst();
         }
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/view/FrameDecorator.java
Patch:
@@ -106,6 +106,9 @@ public boolean onTouch(final View v, MotionEvent event) {
                         ((ValueAnimator) animator).addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                             @Override
                             public void onAnimationUpdate(ValueAnimator animation) {
+                                if(!isShowing){
+                                    return;
+                                }
                                 int value = (int) animation.getAnimatedValue("trans");
                                 layoutParam.x = value;
                                 windowManager.updateViewLayout(v, layoutParam);

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/AppActiveMatrixDelegate.java
Patch:
@@ -177,7 +177,7 @@ private void updateScene(Activity activity) {
     }
 
     private void updateScene(String currentFragmentName) {
-        StringBuilder ss = new StringBuilder(currentActivityName);
+        StringBuilder ss = new StringBuilder(currentActivityName == null ? "?" : currentActivityName);
         if (!TextUtils.isEmpty(currentFragmentName)) {
             ss.append("#").append(currentFragmentName);
         }

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/AppActiveMatrixDelegate.java
Patch:
@@ -177,7 +177,7 @@ private void updateScene(Activity activity) {
     }
 
     private void updateScene(String currentFragmentName) {
-        StringBuilder ss = new StringBuilder(currentFragmentName);
+        StringBuilder ss = new StringBuilder(currentActivityName);
         if (!TextUtils.isEmpty(currentFragmentName)) {
             ss.append("#").append(currentFragmentName);
         }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/Utils.java
Patch:
@@ -57,7 +57,7 @@ public static int[] getProcessPriority(int pid) {
         try {
             String content = DeviceUtil.getStringFromFile(name).trim();
             String[] args = content.split(" ");
-            if (args.length <= 19) {
+            if (args.length >= 19) {
                 priority = Integer.parseInt(args[17].trim());
                 nice = Integer.parseInt(args[18].trim());
             }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -287,6 +287,9 @@ public static String getFocusedActivity() {
      * @param isIn
      */
     private static void mergeData(int methodId, int index, boolean isIn) {
+        if (methodId == AppMethodBeat.METHOD_ID_DISPATCH) {
+            sCurrentDiffTime = SystemClock.uptimeMillis() - sDiffTime;
+        }
         long trueId = 0L;
         if (isIn) {
             trueId |= 1L << 63;

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/AppForegroundDelegate.java
Patch:
@@ -46,7 +46,7 @@ public void init(Application application) {
     public String getForegroundActivity() {
         return foregroundActivity;
     }
-f
+
     private void onDispatchForeground(String activity) {
         if (isAppForeground || !isInited) {
             return;

File: matrix/matrix-android/matrix-thread-canary/src/main/java/com/tencent/matrix/threadcanary/ThreadConfig.java
Patch:
@@ -7,10 +7,10 @@
 public final class ThreadConfig {
     public static final String TAG = "Matrix.ThreadConfig";
 
-    private static final long DEFAULT_CHECK_TIME = 20 * 60 * 1000L;
+    private static final long DEFAULT_CHECK_TIME = 10 * 60 * 1000L;
     private static final long DEFAULT_CHECK_TIME_IN_BACKGROUND = DEFAULT_CHECK_TIME * 2;
     private static final int DEFAULT_LIMIT_THREAD_COUNT = 40;
-    private static final long DEFAULT_REPORT_TIME = 2 * 60 * 60 * 1000L;
+    private static final long DEFAULT_REPORT_TIME = 30 * 60 * 1000L;
     private static final String DEFAULT_FILTER_SET = "";
 
     private final IDynamicConfig mDynamicConfig;

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/DefaultPluginListener.java
Patch:
@@ -56,7 +56,7 @@ public void onDestroy(Plugin plugin) {
 
     @Override
     public void onReportIssue(Issue issue) {
-        MatrixLog.i(TAG, "report issue content: %s", issue);
+        MatrixLog.i(TAG, "report issue content: %s", issue == null ? "" : issue);
     }
 
 }

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/Configuration.java
Patch:
@@ -4,7 +4,6 @@
 import com.tencent.matrix.javalib.util.Util;
 import com.tencent.matrix.trace.retrace.MappingCollector;
 
-import java.io.File;
 import java.util.HashSet;
 
 public class Configuration {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -426,7 +426,7 @@ public long[] copyData(IndexRecord startRecord, IndexRecord endRecord) {
                 return data;
             }
             return data;
-        } catch (Exception e) {
+        } catch (OutOfMemoryError e) {
             MatrixLog.e(TAG, e.toString());
             return data;
         } finally {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/DefaultPluginListener.java
Patch:
@@ -56,7 +56,7 @@ public void onDestroy(Plugin plugin) {
 
     @Override
     public void onReportIssue(Issue issue) {
-        MatrixLog.i(TAG, "report issue content: %s", issue);
+        MatrixLog.i(TAG, "report issue content: %s", issue == null ? "" : issue);
     }
 
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -426,7 +426,7 @@ public long[] copyData(IndexRecord startRecord, IndexRecord endRecord) {
                 return data;
             }
             return data;
-        } catch (Exception e) {
+        } catch (OutOfMemoryError e) {
             MatrixLog.e(TAG, e.toString());
             return data;
         } finally {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/mrs/plugin/IDynamicConfig.java
Patch:
@@ -76,6 +76,8 @@ enum ExptEnum {
 
         //thread
         clicfg_matrix_thread_check_time,
+        clicfg_matrix_thread_check_bg_time,
+        clicfg_matrix_thread_limit_count,
         clicfg_matrix_thread_report_time,
         clicfg_matrix_thread_contain_sys,
         clicfg_matrix_thread_filter_thread_set,

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/IPlugin.java
Patch:
@@ -23,6 +23,9 @@
  */
 
 public interface IPlugin {
+
+    Application getApplication();
+
     void init(Application application, PluginListener pluginListener);
 
     void start();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IAppMethodBeatListener.java
Patch:
@@ -20,7 +20,7 @@
  * Created by caichongyang on 2017/5/27.
  */
 
-public interface IFrameBeatListener {
-    void doFrame(long lastFrameNanos, long frameNanos);
-    void cancelFrame();
+public interface IAppMethodBeatListener {
+
+    void onActivityFocused(String activity);
 }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MainActivity.java
Patch:
@@ -18,6 +18,7 @@
 
 import android.content.Intent;
 import android.os.Bundle;
+import android.os.Handler;
 import android.support.v7.app.AppCompatActivity;
 import android.view.View;
 import android.widget.Button;
@@ -81,4 +82,5 @@ public void onClick(View v) {
 
     }
 
+
 }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/SplashActivity.java
Patch:
@@ -38,6 +38,7 @@ public void run() {
                 Intent intent = new Intent(SplashActivity.this, MainActivity.class);
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                 startActivity(intent);
+                finish();
             }
         }, 2000);
         sHandlerThread = new HandlerThread("SplashActivity");

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/config/DynamicConfigImplDemo.java
Patch:
@@ -64,7 +64,7 @@ public int get(String key, int defInt) {
         }
 
         if (MatrixEnum.clicfg_matrix_trace_fps_time_slice.name().equals(key)) {
-            return 1000;
+            return 12000;
         }
 
         return defInt;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/config/MatrixEnum.java
Patch:
@@ -41,6 +41,7 @@ public enum MatrixEnum {
     clicfg_matrix_fps_dropped_high,
     clicfg_matrix_fps_dropped_frozen,
     clicfg_matrix_trace_evil_method_enable,
+    clicfg_matrix_trace_startup_enable,
 
     clicfg_matrix_trace_app_start_up_threshold,
     clicfg_matrix_trace_fps_frame_fresh_threshold,

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/issue/IssuesMap.java
Patch:
@@ -40,7 +40,8 @@ public static List<Issue> get(@IssueFilter.FILTER String filter) {
     }
 
     public static int getCount() {
-        return issues.get(IssueFilter.getCurrentFilter()).size();
+        List list = issues.get(IssueFilter.getCurrentFilter());
+        return null == list ? 0 : list.size();
     }
 
     public static void clear() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -137,7 +137,6 @@ public void fallback(List<MethodItem> stack, int size) {
                 });
             }
 
-
             StringBuilder reportBuilder = new StringBuilder();
             StringBuilder logcatBuilder = new StringBuilder();
             long stackCost = Math.max(cost, TraceDataUtils.stackToString(stack, reportBuilder, logcatBuilder));

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/IPlugin.java
Patch:
@@ -23,6 +23,9 @@
  */
 
 public interface IPlugin {
+
+    Application getApplication();
+
     void init(Application application, PluginListener pluginListener);
 
     void start();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IAppMethodBeatListener.java
Patch:
@@ -20,7 +20,7 @@
  * Created by caichongyang on 2017/5/27.
  */
 
-public interface IFrameBeatListener {
-    void doFrame(long lastFrameNanos, long frameNanos);
-    void cancelFrame();
+public interface IAppMethodBeatListener {
+
+    void onActivityFocused(String activity);
 }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MainActivity.java
Patch:
@@ -18,6 +18,7 @@
 
 import android.content.Intent;
 import android.os.Bundle;
+import android.os.Handler;
 import android.support.v7.app.AppCompatActivity;
 import android.view.View;
 import android.widget.Button;
@@ -81,4 +82,5 @@ public void onClick(View v) {
 
     }
 
+
 }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/SplashActivity.java
Patch:
@@ -38,6 +38,7 @@ public void run() {
                 Intent intent = new Intent(SplashActivity.this, MainActivity.class);
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                 startActivity(intent);
+                finish();
             }
         }, 2000);
         sHandlerThread = new HandlerThread("SplashActivity");

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/config/DynamicConfigImplDemo.java
Patch:
@@ -64,7 +64,7 @@ public int get(String key, int defInt) {
         }
 
         if (MatrixEnum.clicfg_matrix_trace_fps_time_slice.name().equals(key)) {
-            return 1000;
+            return 12000;
         }
 
         return defInt;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/config/MatrixEnum.java
Patch:
@@ -41,6 +41,7 @@ public enum MatrixEnum {
     clicfg_matrix_fps_dropped_high,
     clicfg_matrix_fps_dropped_frozen,
     clicfg_matrix_trace_evil_method_enable,
+    clicfg_matrix_trace_startup_enable,
 
     clicfg_matrix_trace_app_start_up_threshold,
     clicfg_matrix_trace_fps_frame_fresh_threshold,

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/issue/IssuesMap.java
Patch:
@@ -40,7 +40,8 @@ public static List<Issue> get(@IssueFilter.FILTER String filter) {
     }
 
     public static int getCount() {
-        return issues.get(IssueFilter.getCurrentFilter()).size();
+        List list = issues.get(IssueFilter.getCurrentFilter());
+        return null == list ? 0 : list.size();
     }
 
     public static void clear() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -25,6 +25,8 @@ public class Constants {
     public static final int BUFFER_SIZE = 100 * 10000; // 7.6M
     public static final int TIME_UPDATE_CYCLE_MS = 5;
     public static final int FILTER_STACK_MAX_COUNT = 60;
+    public static final float FILTER_STACK_KEY_ALL_PERCENT = .3F;
+    public static final float FILTER_STACK_KEY_PATENT_PERCENT = .8F;
     public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 1000;
     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;
     public static final int TIME_MILLIS_TO_NANO = 1000000;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -135,11 +135,11 @@ public void fallback(List<MethodItem> stack, int size) {
                 });
             }
 
-            String stackKey = TraceDataUtils.getTreeKey(stack, Constants.MAX_LIMIT_ANALYSE_STACK_KEY_NUM);
 
             StringBuilder reportBuilder = new StringBuilder();
             StringBuilder logcatBuilder = new StringBuilder();
             long stackCost = Math.max(cost, TraceDataUtils.stackToString(stack, reportBuilder, logcatBuilder));
+            String stackKey = TraceDataUtils.getTreeKey(stack, stackCost);
 
             MatrixLog.w(TAG, "%s", printEvil(logcatBuilder, stack.size(), stackKey, usage, queueCost[0], queueCost[1], queueCost[2], cost)); // for logcat
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/StartupTracer.java
Patch:
@@ -187,7 +187,7 @@ public void fallback(List<MethodItem> stack, int size) {
             StringBuilder reportBuilder = new StringBuilder();
             StringBuilder logcatBuilder = new StringBuilder();
             long stackCost = Math.max(allCost, TraceDataUtils.stackToString(stack, reportBuilder, logcatBuilder));
-            String stackKey = TraceDataUtils.getTreeKey(stack, Constants.MAX_LIMIT_ANALYSE_STACK_KEY_NUM);
+            String stackKey = TraceDataUtils.getTreeKey(stack, stackCost);
 
             // for logcat
             if ((allCost > coldStartupThresholdMs && !isWarmStartUp)

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/core/AlarmDetector.java
Patch:
@@ -652,6 +652,8 @@ void load() {
                 MatrixLog.w(TAG, "load : exp:%s", e);
             } catch (ClassNotFoundException e) {
                 MatrixLog.w(TAG, "load : exp:%s", e);
+            } catch (Exception e) {
+                MatrixLog.w(TAG, "load: exp:%s", e);
             } finally {
                 try {
                     if (ois != null) {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/LooperMonitor.java
Patch:
@@ -71,7 +71,7 @@ public void println(String x) {
                 if (null != originPrinter) {
                     originPrinter.println(x);
                 }
-                dispatch(x.charAt(0) == '<');
+                dispatch(x.charAt(0) == '>');
             }
         });
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -5,7 +5,6 @@
 import android.os.HandlerThread;
 import android.os.Looper;
 import android.os.SystemClock;
-import android.util.Log;
 
 import com.tencent.matrix.trace.constants.Constants;
 import com.tencent.matrix.trace.hacker.ActivityThreadHacker;
@@ -162,11 +161,13 @@ public boolean isValid() {
 
             @Override
             public void dispatchStart() {
+                super.dispatchStart();
                 AppMethodBeat.dispatchBegin();
             }
 
             @Override
             public void dispatchEnd() {
+                super.dispatchEnd();
                 AppMethodBeat.dispatchEnd();
             }
         });

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -79,7 +79,7 @@ public void onCreate() {
                 .enableStartup(traceEnable)
                 .splashActivities("sample.tencent.matrix.SplashActivity;")
                 .isDebug(true)
-                .isDevEnv(true)
+                .isDevEnv(false)
                 .build();
 
         TracePlugin tracePlugin = (new TracePlugin(traceConfig));

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/core/WakeLockDetector.java
Patch:
@@ -215,6 +215,7 @@ private void detectWakeLockAggregation() {
             wakeLockAggregation = entry.getValue();
             statisticalTimeFrame = now - wakeLockAggregation.sinceTime;
             currentHours = (int) (statisticalTimeFrame / 3600000L) + 1;
+            currentHours = currentHours <=0?1:currentHours;
 //            averageAcquireCnt1H = wakeLockAggregation.totalAcquireCnt / currentHours;
             averageAcquireCntWhenScreenOff1H = wakeLockAggregation.totalAcquireCntWhenScreenOff / currentHours;
             averageHoldTime1H = wakeLockAggregation.totalHoldTimeWhenScreenOff / currentHours;

File: matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/core/WakeLockDetector.java
Patch:
@@ -215,6 +215,7 @@ private void detectWakeLockAggregation() {
             wakeLockAggregation = entry.getValue();
             statisticalTimeFrame = now - wakeLockAggregation.sinceTime;
             currentHours = (int) (statisticalTimeFrame / 3600000L) + 1;
+            currentHours = currentHours <=0?1:currentHours;
 //            averageAcquireCnt1H = wakeLockAggregation.totalAcquireCnt / currentHours;
             averageAcquireCntWhenScreenOff1H = wakeLockAggregation.totalAcquireCntWhenScreenOff / currentHours;
             averageHoldTime1H = wakeLockAggregation.totalHoldTimeWhenScreenOff / currentHours;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -131,9 +131,6 @@ private synchronized void addFrameCallback(int type, Runnable callback, boolean
 
         if (callbackExist[type]) {
             MatrixLog.w(TAG, "[addFrameCallback] this type %s callback has exist!", type);
-            if (config.isDevEnv) {
-                throw new RuntimeException(String.format("repeatedly added callback type[%s] ", type));
-            }
             return;
         }
 
@@ -368,4 +365,5 @@ public synchronized void onStop() {
     public boolean isAlive() {
         return isAlive;
     }
+
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -166,6 +166,7 @@ public void fallback(List<MethodItem> stack, int size) {
                 jsonObject = DeviceUtil.getDeviceInfo(jsonObject, Matrix.with().getApplication());
                 jsonObject.put(SharePluginInfo.ISSUE_STACK_TYPE, Constants.Type.ANR);
                 jsonObject.put(SharePluginInfo.ISSUE_COST, stackCost);
+                jsonObject.put(SharePluginInfo.ISSUE_STACK_KEY, stackKey);
                 jsonObject.put(SharePluginInfo.ISSUE_STACK, reportBuilder.toString());
                 // memory info
                 JSONObject memJsonObject = new JSONObject();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -111,6 +111,9 @@ public void run() {
             // memory
             long[] memoryInfo = dumpMemory();
 
+            // sql
+
+
             // Thread state
             Thread.State status = Looper.getMainLooper().getThread().getState();
             String dumpStack = Utils.getStack(Looper.getMainLooper().getThread().getStackTrace(), "|*        ", 12);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java
Patch:
@@ -45,7 +45,7 @@ public void addListener(IDoFrameListener listener) {
 
     public void removeListener(IDoFrameListener listener) {
         synchronized (listeners) {
-            listeners.add(listener);
+            listeners.remove(listener);
         }
     }
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/LooperMonitor.java
Patch:
@@ -49,7 +49,6 @@ public boolean queueIdle() {
     private static void resetPrinter() {
         final Printer originPrinter = reflectObject(Looper.getMainLooper(), "mLogging");
         if (originPrinter == printer && null != printer) {
-            MatrixLog.v(TAG, "[resetPrinter] self printer is right!");
             return;
         }
         if (null != printer) {

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MainActivity.java
Patch:
@@ -18,6 +18,7 @@
 
 import android.content.Intent;
 import android.os.Bundle;
+import android.os.Handler;
 import android.support.v7.app.AppCompatActivity;
 import android.view.View;
 import android.widget.Button;
@@ -81,4 +82,5 @@ public void onClick(View v) {
 
     }
 
+
 }

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -77,7 +77,7 @@ public void onCreate() {
                 .enableEvilMethodTrace(traceEnable)
                 .enableAnrTrace(traceEnable)
                 .enableStartup(traceEnable)
-                .careActivities("sample.tencent.matrix.MainActivity;")
+                .splashActivities("sample.tencent.matrix.SplashActivity;")
                 .isDebug(true)
                 .isDevEnv(true)
                 .build();

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/SplashActivity.java
Patch:
@@ -38,6 +38,7 @@ public void run() {
                 Intent intent = new Intent(SplashActivity.this, MainActivity.class);
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                 startActivity(intent);
+                finish();
             }
         }, 2000);
         sHandlerThread = new HandlerThread("SplashActivity");

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-public class EvilMethodTracer extends Tracer implements UIThreadMonitor.ILooperObserver {
+public class EvilMethodTracer extends Tracer {
 
     private static final String TAG = "Matrix.EvilMethodTracer";
     private final TraceConfig config;
@@ -51,6 +51,7 @@ public void onDead() {
 
     @Override
     public void dispatchBegin(long beginMs, long cpuBeginMs, long token) {
+        super.dispatchBegin(beginMs, cpuBeginMs, token);
         indexRecord = AppMethodBeat.getInstance().maskIndex("EvilMethodTracer#dispatchBegin");
     }
 
@@ -65,6 +66,7 @@ public void doFrame(String focusedActivityName, long start, long end, long frame
 
     @Override
     public void dispatchEnd(long beginMs, long cpuBeginMs, long endMs, long cpuEndMs, long token, boolean isBelongFrame) {
+        super.dispatchEnd(beginMs, cpuBeginMs, endMs, cpuEndMs, token, isBelongFrame);
         long start = System.currentTimeMillis();
         try {
             long dispatchCost = endMs - beginMs;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/BeatLifecycle.java
Patch:
@@ -5,4 +5,6 @@ public interface BeatLifecycle {
     void onStart();
 
     void onStop();
+
+    boolean isAlive();
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/ITracer.java
Patch:
@@ -8,4 +8,5 @@ public interface ITracer {
 
     void onCloseTrace();
 
+
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/Tracer.java
Patch:
@@ -9,15 +9,15 @@ public abstract class Tracer implements ITracer {
     protected abstract void onDead();
 
     @Override
-    final public void onStartTrace() {
+    final synchronized public void onStartTrace() {
         if (!isAlive) {
             this.isAlive = true;
             onAlive();
         }
     }
 
     @Override
-    final public void onCloseTrace() {
+    final synchronized public void onCloseTrace() {
         if (isAlive) {
             this.isAlive = false;
             onDead();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java
Patch:
@@ -57,7 +57,7 @@ public static void hackSysHandlerCallback() {
             Handler.Callback originalCallback = (Handler.Callback) callbackField.get(handler);
             HackCallback callback = new HackCallback(originalCallback);
             callbackField.set(handler, callback);
-            MatrixLog.i(TAG, "hook system handler completed. start:%s", sApplicationCreateBeginTime);
+            MatrixLog.i(TAG, "hook system handler completed. start:%s SDK_INT:%s", sApplicationCreateBeginTime, Build.VERSION.SDK_INT);
         } catch (Exception e) {
             MatrixLog.e(TAG, "hook system handler err! %s", e.getCause().toString());
         }
@@ -122,7 +122,6 @@ public boolean handleMessage(Message msg) {
 
         private boolean isLaunchActivity(Message msg) {
             if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O_MR1) {
-                MatrixLog.i(TAG, "[isLaunchActivity] Build.VERSION.SDK_INT > Build.VERSION_CODES.O");
                 if (msg.what == EXECUTE_TRANSACTION && msg.obj != null) {
                     try {
                         if (null == method) {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -104,7 +104,7 @@ void analyse() {
             LinkedList<MethodItem> stack = new LinkedList();
             if (data.length > 0) {
                 TraceDataUtils.structuredDataToStack(data, stack);
-                TraceDataUtils.trimStack(stack, 5, new TraceDataUtils.IStructuredDataFilter() {
+                TraceDataUtils.trimStack(stack, Constants.TARGET_EVIL_METHOD_STACK, new TraceDataUtils.IStructuredDataFilter() {
                     @Override
                     public boolean isFilter(long during, int filterCount) {
                         return during < filterCount * Constants.TIME_UPDATE_CYCLE_MS;

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/Configuration.java
Patch:
@@ -54,11 +54,9 @@ public int parseBlackFile(MappingCollector processor) {
                 if (black.startsWith("-keepclass ")) {
                     black = black.replace("-keepclass ", "");
                     blackSet.add(processor.proguardClassName(black, black));
-                    blackSet.add(black);
                 } else if (black.startsWith("-keeppackage ")) {
                     black = black.replace("-keeppackage ", "");
                     blackSet.add(processor.proguardPackageName(black, black));
-                    blackSet.add(black);
                 }
             }
         }

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodCollector.java
Patch:
@@ -419,6 +419,7 @@ public static boolean isNeedTrace(Configuration configuration, String clsName, M
             if (null != mappingCollector) {
                 clsName = mappingCollector.originalClassName(clsName, clsName);
             }
+            clsName = clsName.replaceAll("/", ".");
             for (String packageName : configuration.blackSet) {
                 if (clsName.startsWith(packageName.replaceAll("/", "."))) {
                     isNeed = false;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -120,7 +120,9 @@ private static void realExecute() {
         sHandler.postDelayed(checkOutTimeRunnable = new Runnable() {
             @Override
             public void run() {
-                isOutTimeToStart = true;
+                if (!isAlive) {
+                    isOutTimeToStart = true;
+                }
             }
         }, Constants.DEFAULT_RELEASE_BUFFER_DELAY);
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java
Patch:
@@ -105,7 +105,6 @@ public boolean handleMessage(Message msg) {
             if (isLaunchActivity) {
                 ActivityThreadHacker.sLastLaunchActivityTime = SystemClock.uptimeMillis();
                 ActivityThreadHacker.sLastLaunchActivityMethodIndex = AppMethodBeat.getInstance().maskIndex("LastLaunchActivityMethodIndex");
-                AppMethodBeat.getInstance().onStart();
             }
 
             if (!isCreated) {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java
Patch:
@@ -38,7 +38,7 @@ public class Constants {
     public static final int DEFAULT_STARTUP_THRESHOLD_MS_WARM = 4 * 1000;
     public static final int DEFAULT_STARTUP_THRESHOLD_MS_COLD = 10 * 1000;
 
-    public static final int DEFAULT_RELEASE_BUFFER_DELAY = 30 * 1000;
+    public static final int DEFAULT_RELEASE_BUFFER_DELAY = 15 * 1000;
     public static final int TARGET_EVIL_METHOD_STACK = 30;
     public static final int MAX_LIMIT_ANALYSE_STACK_KEY_NUM = 10;
 

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -79,6 +79,7 @@ public void onCreate() {
                 .enableStartup(traceEnable)
                 .careActivities("sample.tencent.matrix.MainActivity;")
                 .isDebug(true)
+                .isDevEnv(true)
                 .build();
 
         TracePlugin tracePlugin = (new TracePlugin(traceConfig));

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -252,6 +252,9 @@ public static void trimStack(List<MethodItem> stack, int targetCount, IStructure
                 if (filter.isFilter(item.durTime, filterCount)) {
                     iterator.remove();
                     curStackSize--;
+                    if (curStackSize <= targetCount) {
+                        return;
+                    }
                 }
             }
             curStackSize = stack.size();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/SharePluginInfo.java
Patch:
@@ -35,9 +35,9 @@ public class SharePluginInfo {
     public static final String ISSUE_STACK = "stack";
     public static final String ISSUE_STACK_KEY = "stackKey";
     public static final String ISSUE_MEMORY = "memory";
-    public static final String ISSUE_MEMORY_NATIVIE = "native_heap";
+    public static final String ISSUE_MEMORY_NATIVE = "native_heap";
     public static final String ISSUE_MEMORY_DALVIK = "dalvik_heap";
-    public static final String ISSUE_MEMORY_VMSIZE = "vm_size";
+    public static final String ISSUE_MEMORY_VM_SIZE = "vm_size";
     public static final String ISSUE_COST = "cost";
     public static final String ISSUE_CPU_USAGE = "usage";
     public static final String ISSUE_STACK_TYPE = "detail";

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/AnrTracer.java
Patch:
@@ -164,8 +164,8 @@ public void fallback(List<MethodItem> stack, int size) {
                 // memory info
                 JSONObject memJsonObject = new JSONObject();
                 memJsonObject.put(SharePluginInfo.ISSUE_MEMORY_DALVIK, memoryInfo[0]);
-                memJsonObject.put(SharePluginInfo.ISSUE_MEMORY_NATIVIE, memoryInfo[1]);
-                memJsonObject.put(SharePluginInfo.ISSUE_MEMORY_VMSIZE, memoryInfo[2]);
+                memJsonObject.put(SharePluginInfo.ISSUE_MEMORY_NATIVE, memoryInfo[1]);
+                memJsonObject.put(SharePluginInfo.ISSUE_MEMORY_VM_SIZE, memoryInfo[2]);
                 jsonObject.put(SharePluginInfo.ISSUE_MEMORY, memJsonObject);
 
                 Issue issue = new Issue();

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -421,6 +421,7 @@ public void fallback(List<MethodItem> stack, int size) {
                     MatrixLog.w(TAG, "[fallback] size:%s", size);
                     Iterator iterator = stack.listIterator(Constants.MAX_EVIL_METHOD_STACK);
                     while (iterator.hasNext()) {
+                        iterator.next();
                         iterator.remove();
                     }
                 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -421,6 +421,7 @@ public void fallback(List<MethodItem> stack, int size) {
                     MatrixLog.w(TAG, "[fallback] size:%s", size);
                     Iterator iterator = stack.listIterator(Constants.MAX_EVIL_METHOD_STACK);
                     while (iterator.hasNext()) {
+                        iterator.next();
                         iterator.remove();
                     }
                 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/SharePluginInfo.java
Patch:
@@ -42,7 +42,9 @@ public class SharePluginInfo {
     public static final String ISSUE_CPU_USAGE = "usage";
     public static final String ISSUE_STACK_TYPE = "detail";
     public static final String ISSUE_IS_WARM_START_UP = "is_warm_start_up";
+    public static final String ISSUE_SUB_TYPE = "subType";
     public static final String STAGE_APPLICATION_CREATE = "application_create";
+    public static final String STAGE_APPLICATION_CREATE_SCENE = "application_create_scene";
     public static final String STAGE_FIRST_ACTIVITY_CREATE = "first_activity_create";
     public static final String STAGE_STARTUP_DURATION = "startup_duration";
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java
Patch:
@@ -262,6 +262,8 @@ private void dispatchEnd() {
         dispatchTimeMs[3] = SystemClock.currentThreadTimeMillis();
         dispatchTimeMs[1] = SystemClock.uptimeMillis();
 
+        AppMethodBeat.o(AppMethodBeat.METHOD_ID_DISPATCH);
+
         synchronized (observers) {
             for (IFrameObserver observer : observers) {
                 if (observer instanceof ILooperObserver) {
@@ -271,8 +273,6 @@ private void dispatchEnd() {
             }
         }
 
-        AppMethodBeat.o(AppMethodBeat.METHOD_ID_DISPATCH);
-
     }
 
     private void doQueueBegin(int type) {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/DeviceUtil.java
Patch:
@@ -401,7 +401,7 @@ public static long getVmSize() {
             String[] args = content.split("\n");
             if (args.length > 12) {
                 String size = args[12].split(":")[1].trim();
-                return Long.parseLong(size.split(" ")[0]) * 1024L;
+                return Long.parseLong(size.split(" ")[0]); // in KB
             }
         } catch (Exception e) {
             return -1;

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/TracePlugin.java
Patch:
@@ -25,6 +25,7 @@
 import com.tencent.matrix.trace.config.SharePluginInfo;
 import com.tencent.matrix.trace.config.TraceConfig;
 import com.tencent.matrix.trace.core.AppMethodBeat;
+import com.tencent.matrix.trace.core.UIThreadMonitor;
 import com.tencent.matrix.trace.tracer.AnrTracer;
 import com.tencent.matrix.trace.tracer.EvilMethodTracer;
 import com.tencent.matrix.trace.tracer.FrameTracer;
@@ -69,6 +70,7 @@ public void start() {
         Runnable runnable = new Runnable() {
             @Override
             public void run() {
+                UIThreadMonitor.getMonitor().setConfig(mTraceConfig);
                 AppMethodBeat.getInstance().onStart();
                 if (null == mAnrTracer) {
                     mAnrTracer = new AnrTracer(mTraceConfig);

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/MatrixApplication.java
Patch:
@@ -114,7 +114,6 @@ public void onCreate() {
         tracePlugin.start();
 
         MatrixLog.i("Matrix.HackCallback", "end:%s", System.currentTimeMillis());
-        SystemClock.sleep(8000);
     }
 
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/listeners/IAppMethodBeatListener.java
Patch:
@@ -21,7 +21,6 @@
  */
 
 public interface IAppMethodBeatListener {
-    void onApplicationCreated(long beginMs, long endMs, int scene);
 
     void onActivityFocused(String activity);
 }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/util/TraceDataUtils.java
Patch:
@@ -86,7 +86,7 @@ public static void structuredDataToStack(long[] buffer, LinkedList<MethodItem> r
             }
         }
 
-        while (!rawData.isEmpty()) {
+        while (!rawData.isEmpty() && isStrict) {
             long trueId = rawData.pop();
             int methodId = getMethodId(trueId);
             boolean isIn = isIn(trueId);
@@ -162,7 +162,8 @@ public static int stackToTree(LinkedList<MethodItem> resultStack, TreeNode root)
 
 
     public static long stackToString(LinkedList<MethodItem> stack, StringBuilder reportBuilder, StringBuilder logcatBuilder) {
-        logcatBuilder.append("|*   TraceStack:[id count cost] ").append("\n");
+        logcatBuilder.append("|*   TraceStack:").append("\n");
+        logcatBuilder.append("|*        [id count cost]").append("\n");
         Iterator<MethodItem> listIterator = stack.iterator();
         long stackCost = 0; // fix cost
         while (listIterator.hasNext()) {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/EvilMethodTracer.java
Patch:
@@ -419,7 +419,7 @@ public int getFilterMaxCount() {
                 @Override
                 public void fallback(List<MethodItem> stack, int size) {
                     resultStack.clear();
-                    resultStack.addAll(stack.subList(0, Math.min(size - 1, Constants.MAX_EVIL_METHOD_STACK));
+                    resultStack.addAll(stack.subList(0, Math.min(size - 1, Constants.MAX_EVIL_METHOD_STACK)));
                 }
             });
 

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java
Patch:
@@ -36,7 +36,6 @@ public class AppMethodBeat implements BeatLifecycle {
     private static Set<String> sFocusActivitySet = new HashSet<>();
     private static String sFocusedActivity = "";
     private static HashSet<IAppMethodBeatListener> listeners = new HashSet<>();
-    private boolean isHandleMessageEnd = true;
 
     static {
         sTimeUpdateHandler.postDelayed(new Runnable() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/StartupTracer.java
Patch:
@@ -150,7 +150,7 @@ private class AnalyseTask implements Runnable {
         public void run() {
             LinkedList<MethodItem> stack = new LinkedList();
             TraceDataUtils.structuredDataToStack(data, stack, false);
-            TraceDataUtils.trimStack(stack, Constants.TARGET_EVIL_METHOD_STACK / 4, new TraceDataUtils.IStructuredDataFilter() {
+            TraceDataUtils.trimStack(stack, Constants.TARGET_EVIL_METHOD_STACK, new TraceDataUtils.IStructuredDataFilter() {
                 @Override
                 public boolean isFilter(long during, int filterCount) {
                     return during < filterCount * Constants.TIME_UPDATE_CYCLE_MS;

File: samples/sample-android/app/src/main/java/sample/tencent/matrix/issue/IssuesMap.java
Patch:
@@ -40,7 +40,8 @@ public static List<Issue> get(@IssueFilter.FILTER String filter) {
     }
 
     public static int getCount() {
-        return issues.get(IssueFilter.getCurrentFilter()).size();
+        List list = issues.get(IssueFilter.getCurrentFilter());
+        return null == list ? 0 : list.size();
     }
 
     public static void clear() {

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java
Patch:
@@ -323,7 +323,7 @@ private void readSmaliLines(String[] lines) {
             if (!Util.isNullOrNil(line)) {
                 if (line.startsWith("const")) {
                     String[] columns = line.split(" ");
-                    if (columns.length >= 2) {
+                    if (columns.length >= 3) {
                         final String resId = parseResourceId(columns[2].trim());
                         if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {
                             resourceRefSet.add(resourceDefMap.get(resId));

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java
Patch:
@@ -323,7 +323,7 @@ private void readSmaliLines(String[] lines) {
             if (!Util.isNullOrNil(line)) {
                 if (line.startsWith("const")) {
                     String[] columns = line.split(" ");
-                    if (columns.length >= 2) {
+                    if (columns.length >= 3) {
                         final String resId = parseResourceId(columns[2].trim());
                         if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {
                             resourceRefSet.add(resourceDefMap.get(resId));

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java
Patch:
@@ -332,7 +332,7 @@ private void readSmaliLines(String[] lines) {
             if (!Util.isNullOrNil(line)) {
                 if (line.startsWith("const")) {
                     String[] columns = line.split(" ");
-                    if (columns.length >= 2) {
+                    if (columns.length >= 3) {
                         final String resId = parseResourceId(columns[2].trim());
                         if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {
                             resourceRefSet.add(resourceDefMap.get(resId));

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/mrs/plugin/IDynamicConfig.java
Patch:
@@ -43,6 +43,7 @@ enum ExptEnum {
         clicfg_matrix_trace_evil_method_enable,
 
         clicfg_matrix_trace_app_start_up_threshold,
+        clicfg_matrix_trace_warm_app_start_up_threshold,
         clicfg_matrix_trace_fps_frame_fresh_threshold,
         clicfg_matrix_trace_min_evil_method_run_cnt,
         clicfg_matrix_trace_min_evil_method_dur_time,

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/ApkChecker.java
Patch:
@@ -39,7 +39,7 @@ public final class ApkChecker {
         "Usages:\n\n"
             + JobConstants.PARAM_CONFIG + " CONFIG-FILE-PATH\n\n"
             + "or\n\n"
-            + "[" + JobConstants.PARAM_INPUT + " INPUT-DIR-PATH] [" + JobConstants.PARAM_APK + " APK-FILE-PATH] [" + JobConstants.PARAM_UNZIP + " APK-UNZIP-PATH] [" + JobConstants.PARAM_MAPPING_TXT + " MAPPING-FILE-PATH] [" + JobConstants.PARAM_RES_MAPPING_TXT + " RESGUARD-MAPPING-FILE-PATH] [" + JobConstants.PARAM_OUTPUT + " OUTPUT-PATH] [" + JobConstants.PARAM_FORMAT + " OUTPUT-FORMAT] [" + JobConstants.PARAM_FORMAT_JAR + " OUTPUT-FORMAT-JAR] [" + JobConstants.PARAM_FORMAT_CONFIG + " OUTPUT-FORMAT-CONFIG (json-array format)] [Options]\n\n"
+            + "[" + JobConstants.PARAM_INPUT + " INPUT-DIR-PATH] [" + JobConstants.PARAM_APK + " APK-FILE-PATH] [" + JobConstants.PARAM_UNZIP + " APK-UNZIP-PATH] [" + JobConstants.PARAM_MAPPING_TXT + " MAPPING-FILE-PATH] [" + JobConstants.PARAM_RES_MAPPING_TXT + " RESGUARD-MAPPING-FILE-PATH] [" + JobConstants.PARAM_OUTPUT + " OUTPUT-PATH] [" + JobConstants.PARAM_FORMAT + " OUTPUT-FORMAT] [" + JobConstants.PARAM_FORMAT_JAR + " OUTPUT-FORMAT-JAR] [" + JobConstants.PARAM_FORMAT_CONFIG + " OUTPUT-FORMAT-CONFIG (json-array format)] [" + JobConstants.PARAM_LOG_LEVEL + " LOG-LEVEL (v,d,i,w,e)] [Options]\n\n"
             + "Options:\n"
                 + JobConstants.OPTION_MANIFEST + "\n"
                 + "     Read package info from the AndroidManifest.xml.\n"

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/job/JobConstants.java
Patch:
@@ -41,6 +41,7 @@ public final class JobConstants {
     public static final String PARAM_MAPPING_TXT = "--mappingTxt";
     public static final String PARAM_RES_MAPPING_TXT = "--resMappingTxt";
     public static final String PARAM_IGNORE_ASSETS_LIST = "--ignoreAssets";
+    public static final String PARAM_LOG_LEVEL = "--log";
 
     public static final String OPTION_MANIFEST = "-manifest";
     public static final String OPTION_FILE_SIZE = "-fileSize";

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountClassTask.java
Patch:
@@ -74,7 +74,7 @@ public void init() throws TaskInitException {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
 
-        Log.d(TAG, "input path:%s", inputPath);
+        Log.i(TAG, "input path:%s", inputPath);
 
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
@@ -136,7 +136,7 @@ public TaskResult call() throws TaskExecuteException {
                 }
                 JsonObject jsonObject = new JsonObject();
                 jsonObject.addProperty("dex-file", dexFileNameList.get(i));
-                //Log.d(TAG, "dex %s, classes %s", dexFileNameList.get(i), classNameSet.toString());
+                Log.d(TAG, "dex %s, classes %s", dexFileNameList.get(i), classNameSet.toString());
 
                 Map<String, Set<String>> packageClass = new HashMap<>();
                 if (JobConstants.GROUP_PACKAGE.equals(group)) {

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ManifestAnalyzeTask.java
Patch:
@@ -58,7 +58,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath, ApkConstants.MANIFEST_FILE_NAME);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---Manifest file '" + inputPath + File.separator + ApkConstants.MANIFEST_FILE_NAME + "' is not exist!");
@@ -82,7 +82,7 @@ public TaskResult call() throws TaskExecuteException {
             }
             long startTime = System.currentTimeMillis();
             JsonObject jsonObject = manifestParser.parse();
-//            Log.d(TAG, jsonObject.toString());
+            Log.d(TAG, jsonObject.toString());
             ((TaskJsonResult) taskResult).add("manifest", jsonObject);
             taskResult.setStartTime(startTime);
             taskResult.setEndTime(System.currentTimeMillis());

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MethodCountTask.java
Patch:
@@ -84,7 +84,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "input path:%s", inputPath);
+        Log.i(TAG, "input path:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MultiLibCheckTask.java
Patch:
@@ -52,7 +52,7 @@ public void init() throws TaskInitException {
         super.init();
         String inputPath = config.getUnzipPath();
         if (!Util.isNullOrNil(inputPath)) {
-            Log.d(TAG, "inputPath:%s", inputPath);
+            Log.i(TAG, "inputPath:%s", inputPath);
             libDir = new File(inputPath, "lib");
         } else {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ResProguardCheckTask.java
Patch:
@@ -56,7 +56,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");
@@ -78,7 +78,7 @@ public TaskResult call() throws TaskExecuteException {
             }
             long startTime = System.currentTimeMillis();
             if (resDir.exists() && resDir.isDirectory()) {
-                Log.d(TAG, "find resource directory " + resDir.getAbsolutePath());
+                Log.i(TAG, "find resource directory " + resDir.getAbsolutePath());
                 ((TaskJsonResult) taskResult).add("hasResProguard", true);
             } else {
                 resDir = new File(inputFile, ApkConstants.RESOURCE_DIR_NAME);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ShowFileSizeTask.java
Patch:
@@ -69,7 +69,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");
@@ -125,10 +125,10 @@ public TaskResult call() throws TaskExecuteException {
                         if (filterSuffix.isEmpty() || filterSuffix.contains(suffix)) {
                             entryList.add(Pair.of(entry.getKey(), size.getFirst()));
                         } else {
-//                            Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
+                            Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
                         }
                     } else {
-//                        Log.d(TAG, "file:%s, size:%d B, downlimit:%d KB", entry.getKey(), size.getFirst(), downLimit);
+                        Log.d(TAG, "file:%s, size:%d B, downlimit:%d KB", entry.getKey(), size.getFirst(), downLimit);
                     }
                 }
             }

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UncompressedFileTask.java
Patch:
@@ -28,6 +28,7 @@
 import com.tencent.matrix.apk.model.result.TaskResult;
 import com.tencent.matrix.apk.model.result.TaskResultFactory;
 import com.tencent.matrix.javalib.util.FileUtil;
+import com.tencent.matrix.javalib.util.Log;
 import com.tencent.matrix.javalib.util.Util;
 
 import java.io.File;
@@ -116,7 +117,7 @@ public TaskResult call() throws TaskExecuteException {
                             compressSizeMap.put(suffix, compressSizeMap.get(suffix) + size.getSecond());
                         }
                     } else {
-//                        Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
+                        Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
                     }
                 }
             }

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/hproflib/HprofReader.java
Patch:
@@ -46,6 +46,9 @@ public void accept(HprofVisitor hv) throws IOException {
     private void acceptHeader(HprofVisitor hv) throws IOException {
         final String text = IOUtil.readNullTerminatedString(mStreamIn);
         final int idSize = IOUtil.readBEInt(mStreamIn);
+        if (idSize <= 0 || idSize >= (Integer.MAX_VALUE >> 1)) {
+            throw new IOException("bad idSize: " + idSize);
+        }
         final long timestamp = IOUtil.readBELong(mStreamIn);
         mIdSize = idSize;
         hv.visitHeader(text, idSize, timestamp);

File: matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/SQLiteLintIssue.java
Patch:
@@ -111,7 +111,7 @@ public boolean equals(Object o) {
         }
 
         SQLiteLintIssue d = (SQLiteLintIssue) o;
-        return d.id.equals(((SQLiteLintIssue) o).id);
+        return d.id.equals(id);
     }
 
     @Override

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -127,15 +127,15 @@ public long getStartUpThresholdMs() {
     }
 
     public long getWarmStartUpThresholdMs() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_app_start_up_threshold.name(), Constants.DEFAULT_STARTUP_THRESHOLD_MS_WARM);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_warm_app_start_up_threshold.name(), Constants.DEFAULT_STARTUP_THRESHOLD_MS_WARM);
     }
 
     public String getSplashActivityName() {
         return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_splash_activity_name.name(), mDefaultSplashActivity);
     }
 
     public float getFrameRefreshRate() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_app_start_up_threshold.name(), Constants.DEFAULT_DEVICE_REFRESH_RATE);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_fps_frame_fresh_threshold.name(), Constants.DEFAULT_DEVICE_REFRESH_RATE);
     }
 
     public boolean isHasSplashActivityName() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/MethodBeat.java
Patch:
@@ -24,7 +24,7 @@
 import android.support.v4.app.Fragment;
 
 import com.tencent.matrix.trace.constants.Constants;
-import com.tencent.matrix.trace.hacker.Hacker;
+import com.tencent.matrix.trace.hacker.StartUpHacker;
 import com.tencent.matrix.trace.listeners.IMethodBeat;
 import com.tencent.matrix.trace.listeners.IMethodBeatListener;
 import com.tencent.matrix.util.MatrixHandlerThread;
@@ -92,7 +92,7 @@ public boolean handleMessage(Message msg) {
     });
 
     static {
-        Hacker.hackSysHandlerCallback();
+        StartUpHacker.hackSysHandlerCallback();
         sCurrentDiffTime = sLastDiffTime = System.nanoTime() / Constants.TIME_MILLIS_TO_NANO;
         sReleaseBufferHandler.sendEmptyMessageDelayed(RELEASE_BUFFER_MSG_ID, Constants.DEFAULT_RELEASE_BUFFER_DELAY);
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/BaseTracer.java
Patch:
@@ -27,7 +27,7 @@
 import com.tencent.matrix.trace.core.ApplicationLifeObserver;
 import com.tencent.matrix.trace.core.FrameBeat;
 import com.tencent.matrix.trace.core.MethodBeat;
-import com.tencent.matrix.trace.hacker.Hacker;
+import com.tencent.matrix.trace.hacker.StartUpHacker;
 import com.tencent.matrix.trace.listeners.IFrameBeatListener;
 import com.tencent.matrix.trace.listeners.IMethodBeatListener;
 import com.tencent.matrix.util.MatrixLog;
@@ -76,7 +76,7 @@ protected boolean isBackground() {
     }
 
     protected boolean isEnterAnimationComplete() {
-        return Hacker.isEnterAnimationComplete;
+        return StartUpHacker.isEnterAnimationComplete;
     }
 
     protected String getScene() {

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java
Patch:
@@ -322,9 +322,10 @@ private void readSmaliLines(String[] lines) {
             line = line.trim();
             if (!Util.isNullOrNil(line)) {
                 if (line.startsWith("const")) {
-                    String[] columns = line.split(",");
+                    String[] columns = line.split(" ");
                     if (columns.length >= 2) {
-                        final String resId = parseResourceId(columns[1].trim());
+                        final String resId = parseResourceId(columns[2].trim());
+                      
                         if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {
                             resourceRefSet.add(resourceDefMap.get(resId));
                         }

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java
Patch:
@@ -331,9 +331,9 @@ private void readSmaliLines(String[] lines) {
             line = line.trim();
             if (!Util.isNullOrNil(line)) {
                 if (line.startsWith("const")) {
-                    String[] columns = line.split(",");
+                    String[] columns = line.split(" ");
                     if (columns.length >= 2) {
-                        final String resId = parseResourceId(columns[1].trim());
+                        final String resId = parseResourceId(columns[2].trim());
                         if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {
                             resourceRefSet.add(resourceDefMap.get(resId));
                         }

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java
Patch:
@@ -332,15 +332,15 @@ private void readSmaliLines(String[] lines) {
             if (!Util.isNullOrNil(line)) {
                 if (line.startsWith("const")) {
                     String[] columns = line.split(",");
-                    if (columns.length == 2) {
+                    if (columns.length >= 2) {
                         final String resId = parseResourceId(columns[1].trim());
                         if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {
                             resourceRefSet.add(resourceDefMap.get(resId));
                         }
                     }
                 } else if (line.startsWith("sget")) {
                     String[] columns = line.split(" ");
-                    if (columns.length == 3) {
+                    if (columns.length >= 3) {
                         final String resourceRef = parseResourceNameFromProguard(columns[2]);
                         if (!Util.isNullOrNil(resourceRef)) {
                             Log.d(TAG, "find resource reference %s", resourceRef);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java
Patch:
@@ -323,15 +323,15 @@ private void readSmaliLines(String[] lines) {
             if (!Util.isNullOrNil(line)) {
                 if (line.startsWith("const")) {
                     String[] columns = line.split(",");
-                    if (columns.length == 2) {
+                    if (columns.length >= 2) {
                         final String resId = parseResourceId(columns[1].trim());
                         if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {
                             resourceRefSet.add(resourceDefMap.get(resId));
                         }
                     }
                 } else if (line.startsWith("sget")) {
                     String[] columns = line.split(" ");
-                    if (columns.length == 3) {
+                    if (columns.length >= 3) {
                         final String resourceRef = parseResourceNameFromProguard(columns[2]);
                         if (!Util.isNullOrNil(resourceRef)) {
                             Log.d(TAG, "find resource reference %s", resourceRef);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedAssetsTask.java
Patch:
@@ -143,7 +143,7 @@ private void readSmaliLines(String[] lines) {
                     assetFileName = assetFileName.substring(1, assetFileName.length() - 1);
                     if (!Util.isNullOrNil(assetFileName)) {
                         for (String path : assetsPathSet) {
-                            if (path.endsWith(assetFileName)) {
+                            if (assetFileName.endsWith(path)) {
                                 assetRefSet.add(path);
                             }
                         }

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/hproflib/HprofReader.java
Patch:
@@ -46,6 +46,9 @@ public void accept(HprofVisitor hv) throws IOException {
     private void acceptHeader(HprofVisitor hv) throws IOException {
         final String text = IOUtil.readNullTerminatedString(mStreamIn);
         final int idSize = IOUtil.readBEInt(mStreamIn);
+        if (idSize <= 0 || idSize >= (Integer.MAX_VALUE >> 1)) {
+            throw new IOException("bad idSize: " + idSize);
+        }
         final long timestamp = IOUtil.readBELong(mStreamIn);
         mIdSize = idSize;
         hv.visitHeader(text, idSize, timestamp);

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/MethodBeat.java
Patch:
@@ -24,7 +24,7 @@
 import android.support.v4.app.Fragment;
 
 import com.tencent.matrix.trace.constants.Constants;
-import com.tencent.matrix.trace.hacker.Hacker;
+import com.tencent.matrix.trace.hacker.StartUpHacker;
 import com.tencent.matrix.trace.listeners.IMethodBeat;
 import com.tencent.matrix.trace.listeners.IMethodBeatListener;
 import com.tencent.matrix.util.MatrixHandlerThread;
@@ -92,7 +92,7 @@ public boolean handleMessage(Message msg) {
     });
 
     static {
-        Hacker.hackSysHandlerCallback();
+        StartUpHacker.hackSysHandlerCallback();
         sCurrentDiffTime = sLastDiffTime = System.nanoTime() / Constants.TIME_MILLIS_TO_NANO;
         sReleaseBufferHandler.sendEmptyMessageDelayed(RELEASE_BUFFER_MSG_ID, Constants.DEFAULT_RELEASE_BUFFER_DELAY);
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/BaseTracer.java
Patch:
@@ -27,7 +27,7 @@
 import com.tencent.matrix.trace.core.ApplicationLifeObserver;
 import com.tencent.matrix.trace.core.FrameBeat;
 import com.tencent.matrix.trace.core.MethodBeat;
-import com.tencent.matrix.trace.hacker.Hacker;
+import com.tencent.matrix.trace.hacker.StartUpHacker;
 import com.tencent.matrix.trace.listeners.IFrameBeatListener;
 import com.tencent.matrix.trace.listeners.IMethodBeatListener;
 import com.tencent.matrix.util.MatrixLog;
@@ -76,7 +76,7 @@ protected boolean isBackground() {
     }
 
     protected boolean isEnterAnimationComplete() {
-        return Hacker.isEnterAnimationComplete;
+        return StartUpHacker.isEnterAnimationComplete;
     }
 
     protected String getScene() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/MethodBeat.java
Patch:
@@ -24,7 +24,7 @@
 import android.support.v4.app.Fragment;
 
 import com.tencent.matrix.trace.constants.Constants;
-import com.tencent.matrix.trace.hacker.Hacker;
+import com.tencent.matrix.trace.hacker.StartUpHacker;
 import com.tencent.matrix.trace.listeners.IMethodBeat;
 import com.tencent.matrix.trace.listeners.IMethodBeatListener;
 import com.tencent.matrix.util.MatrixHandlerThread;
@@ -92,7 +92,7 @@ public boolean handleMessage(Message msg) {
     });
 
     static {
-        Hacker.hackSysHandlerCallback();
+        StartUpHacker.hackSysHandlerCallback();
         sCurrentDiffTime = sLastDiffTime = System.nanoTime() / Constants.TIME_MILLIS_TO_NANO;
         sReleaseBufferHandler.sendEmptyMessageDelayed(RELEASE_BUFFER_MSG_ID, Constants.DEFAULT_RELEASE_BUFFER_DELAY);
     }

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/BaseTracer.java
Patch:
@@ -27,7 +27,7 @@
 import com.tencent.matrix.trace.core.ApplicationLifeObserver;
 import com.tencent.matrix.trace.core.FrameBeat;
 import com.tencent.matrix.trace.core.MethodBeat;
-import com.tencent.matrix.trace.hacker.Hacker;
+import com.tencent.matrix.trace.hacker.StartUpHacker;
 import com.tencent.matrix.trace.listeners.IFrameBeatListener;
 import com.tencent.matrix.trace.listeners.IMethodBeatListener;
 import com.tencent.matrix.util.MatrixLog;
@@ -76,7 +76,7 @@ protected boolean isBackground() {
     }
 
     protected boolean isEnterAnimationComplete() {
-        return Hacker.isEnterAnimationComplete;
+        return StartUpHacker.isEnterAnimationComplete;
     }
 
     protected String getScene() {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/mrs/plugin/IDynamicConfig.java
Patch:
@@ -43,6 +43,7 @@ enum ExptEnum {
         clicfg_matrix_trace_evil_method_enable,
 
         clicfg_matrix_trace_app_start_up_threshold,
+        clicfg_matrix_trace_warm_app_start_up_threshold,
         clicfg_matrix_trace_fps_frame_fresh_threshold,
         clicfg_matrix_trace_min_evil_method_run_cnt,
         clicfg_matrix_trace_min_evil_method_dur_time,

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -31,7 +31,6 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;

File: matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/SQLiteLintIssue.java
Patch:
@@ -111,7 +111,7 @@ public boolean equals(Object o) {
         }
 
         SQLiteLintIssue d = (SQLiteLintIssue) o;
-        return d.id.equals(((SQLiteLintIssue) o).id);
+        return d.id.equals(id);
     }
 
     @Override

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -127,15 +127,15 @@ public long getStartUpThresholdMs() {
     }
 
     public long getWarmStartUpThresholdMs() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_app_start_up_threshold.name(), Constants.DEFAULT_STARTUP_THRESHOLD_MS_WARM);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_warm_app_start_up_threshold.name(), Constants.DEFAULT_STARTUP_THRESHOLD_MS_WARM);
     }
 
     public String getSplashActivityName() {
         return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_splash_activity_name.name(), mDefaultSplashActivity);
     }
 
     public float getFrameRefreshRate() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_app_start_up_threshold.name(), Constants.DEFAULT_DEVICE_REFRESH_RATE);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_fps_frame_fresh_threshold.name(), Constants.DEFAULT_DEVICE_REFRESH_RATE);
     }
 
     public boolean isHasSplashActivityName() {

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -31,7 +31,6 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedAssetsTask.java
Patch:
@@ -143,7 +143,7 @@ private void readSmaliLines(String[] lines) {
                     assetFileName = assetFileName.substring(1, assetFileName.length() - 1);
                     if (!Util.isNullOrNil(assetFileName)) {
                         for (String path : assetsPathSet) {
-                            if (path.endsWith(assetFileName)) {
+                            if (assetFileName.endsWith(path)) {
                                 assetRefSet.add(path);
                             }
                         }

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/hproflib/HprofReader.java
Patch:
@@ -46,6 +46,9 @@ public void accept(HprofVisitor hv) throws IOException {
     private void acceptHeader(HprofVisitor hv) throws IOException {
         final String text = IOUtil.readNullTerminatedString(mStreamIn);
         final int idSize = IOUtil.readBEInt(mStreamIn);
+        if (idSize <= 0 || idSize >= (Integer.MAX_VALUE >> 1)) {
+            throw new IOException("bad idSize: " + idSize);
+        }
         final long timestamp = IOUtil.readBELong(mStreamIn);
         mIdSize = idSize;
         hv.visitHeader(text, idSize, timestamp);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedAssetsTask.java
Patch:
@@ -143,7 +143,7 @@ private void readSmaliLines(String[] lines) {
                     assetFileName = assetFileName.substring(1, assetFileName.length() - 1);
                     if (!Util.isNullOrNil(assetFileName)) {
                         for (String path : assetsPathSet) {
-                            if (path.endsWith(assetFileName)) {
+                            if (assetFileName.endsWith(path)) {
                                 assetRefSet.add(path);
                             }
                         }

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedAssetsTask.java
Patch:
@@ -153,7 +153,7 @@ private void readSmaliLines(String[] lines) {
                     assetFileName = assetFileName.substring(1, assetFileName.length() - 1);
                     if (!Util.isNullOrNil(assetFileName)) {
                         for (String path : assetsPathSet) {
-                            if (path.endsWith(assetFileName)) {
+                            if (assetFileName.endsWith(path)) {
                                 assetRefSet.add(path);
                             }
                         }

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/mrs/plugin/IDynamicConfig.java
Patch:
@@ -43,6 +43,7 @@ enum ExptEnum {
         clicfg_matrix_trace_evil_method_enable,
 
         clicfg_matrix_trace_app_start_up_threshold,
+        clicfg_matrix_trace_warm_app_start_up_threshold,
         clicfg_matrix_trace_fps_frame_fresh_threshold,
         clicfg_matrix_trace_min_evil_method_run_cnt,
         clicfg_matrix_trace_min_evil_method_dur_time,

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/ApkChecker.java
Patch:
@@ -39,7 +39,7 @@ public final class ApkChecker {
         "Usages:\n\n"
             + JobConstants.PARAM_CONFIG + " CONFIG-FILE-PATH\n\n"
             + "or\n\n"
-            + "[" + JobConstants.PARAM_INPUT + " INPUT-DIR-PATH] [" + JobConstants.PARAM_APK + " APK-FILE-PATH] [" + JobConstants.PARAM_UNZIP + " APK-UNZIP-PATH] [" + JobConstants.PARAM_MAPPING_TXT + " MAPPING-FILE-PATH] [" + JobConstants.PARAM_RES_MAPPING_TXT + " RESGUARD-MAPPING-FILE-PATH] [" + JobConstants.PARAM_OUTPUT + " OUTPUT-PATH] [" + JobConstants.PARAM_FORMAT + " OUTPUT-FORMAT] [" + JobConstants.PARAM_FORMAT_JAR + " OUTPUT-FORMAT-JAR] [" + JobConstants.PARAM_FORMAT_CONFIG + " OUTPUT-FORMAT-CONFIG (json-array format)] [Options]\n\n"
+            + "[" + JobConstants.PARAM_INPUT + " INPUT-DIR-PATH] [" + JobConstants.PARAM_APK + " APK-FILE-PATH] [" + JobConstants.PARAM_UNZIP + " APK-UNZIP-PATH] [" + JobConstants.PARAM_MAPPING_TXT + " MAPPING-FILE-PATH] [" + JobConstants.PARAM_RES_MAPPING_TXT + " RESGUARD-MAPPING-FILE-PATH] [" + JobConstants.PARAM_OUTPUT + " OUTPUT-PATH] [" + JobConstants.PARAM_FORMAT + " OUTPUT-FORMAT] [" + JobConstants.PARAM_FORMAT_JAR + " OUTPUT-FORMAT-JAR] [" + JobConstants.PARAM_FORMAT_CONFIG + " OUTPUT-FORMAT-CONFIG (json-array format)] [" + JobConstants.PARAM_LOG_LEVEL + " LOG-LEVEL (v,d,i,w,e)] [Options]\n\n"
             + "Options:\n"
                 + JobConstants.OPTION_MANIFEST + "\n"
                 + "     Read package info from the AndroidManifest.xml.\n"

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/job/JobConstants.java
Patch:
@@ -41,6 +41,7 @@ public final class JobConstants {
     public static final String PARAM_MAPPING_TXT = "--mappingTxt";
     public static final String PARAM_RES_MAPPING_TXT = "--resMappingTxt";
     public static final String PARAM_IGNORE_ASSETS_LIST = "--ignoreAssets";
+    public static final String PARAM_LOG_LEVEL = "--log";
 
     public static final String OPTION_MANIFEST = "-manifest";
     public static final String OPTION_FILE_SIZE = "-fileSize";

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountClassTask.java
Patch:
@@ -74,7 +74,7 @@ public void init() throws TaskInitException {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
 
-        Log.d(TAG, "input path:%s", inputPath);
+        Log.i(TAG, "input path:%s", inputPath);
 
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
@@ -136,7 +136,7 @@ public TaskResult call() throws TaskExecuteException {
                 }
                 JsonObject jsonObject = new JsonObject();
                 jsonObject.addProperty("dex-file", dexFileNameList.get(i));
-                //Log.d(TAG, "dex %s, classes %s", dexFileNameList.get(i), classNameSet.toString());
+                Log.d(TAG, "dex %s, classes %s", dexFileNameList.get(i), classNameSet.toString());
 
                 Map<String, Set<String>> packageClass = new HashMap<>();
                 if (JobConstants.GROUP_PACKAGE.equals(group)) {

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/FindNonAlphaPngTask.java
Patch:
@@ -97,7 +97,7 @@ private void findNonAlphaPng(File file) throws IOException {
                 }
             } else if (file.isFile() && file.getName().endsWith(ApkConstants.PNG_FILE_SUFFIX) && !file.getName().endsWith(ApkConstants.NINE_PNG)) {
                 BufferedImage bufferedImage = ImageIO.read(file);
-                if (!bufferedImage.getColorModel().hasAlpha()) {
+                if (bufferedImage != null && bufferedImage.getColorModel() != null && !bufferedImage.getColorModel().hasAlpha()) {
                     String filename = file.getAbsolutePath().substring(inputFile.getAbsolutePath().length() + 1);
                     if (entryNameMap.containsKey(filename)) {
                         filename = entryNameMap.get(filename);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ManifestAnalyzeTask.java
Patch:
@@ -58,7 +58,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath, ApkConstants.MANIFEST_FILE_NAME);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---Manifest file '" + inputPath + File.separator + ApkConstants.MANIFEST_FILE_NAME + "' is not exist!");
@@ -82,7 +82,7 @@ public TaskResult call() throws TaskExecuteException {
             }
             long startTime = System.currentTimeMillis();
             JsonObject jsonObject = manifestParser.parse();
-//            Log.d(TAG, jsonObject.toString());
+            Log.d(TAG, jsonObject.toString());
             ((TaskJsonResult) taskResult).add("manifest", jsonObject);
             taskResult.setStartTime(startTime);
             taskResult.setEndTime(System.currentTimeMillis());

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MethodCountTask.java
Patch:
@@ -84,7 +84,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "input path:%s", inputPath);
+        Log.i(TAG, "input path:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MultiLibCheckTask.java
Patch:
@@ -52,7 +52,7 @@ public void init() throws TaskInitException {
         super.init();
         String inputPath = config.getUnzipPath();
         if (!Util.isNullOrNil(inputPath)) {
-            Log.d(TAG, "inputPath:%s", inputPath);
+            Log.i(TAG, "inputPath:%s", inputPath);
             libDir = new File(inputPath, "lib");
         } else {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ResProguardCheckTask.java
Patch:
@@ -56,7 +56,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");
@@ -78,7 +78,7 @@ public TaskResult call() throws TaskExecuteException {
             }
             long startTime = System.currentTimeMillis();
             if (resDir.exists() && resDir.isDirectory()) {
-                Log.d(TAG, "find resource directory " + resDir.getAbsolutePath());
+                Log.i(TAG, "find resource directory " + resDir.getAbsolutePath());
                 ((TaskJsonResult) taskResult).add("hasResProguard", true);
             } else {
                 resDir = new File(inputFile, ApkConstants.RESOURCE_DIR_NAME);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ShowFileSizeTask.java
Patch:
@@ -69,7 +69,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");
@@ -125,10 +125,10 @@ public TaskResult call() throws TaskExecuteException {
                         if (filterSuffix.isEmpty() || filterSuffix.contains(suffix)) {
                             entryList.add(Pair.of(entry.getKey(), size.getFirst()));
                         } else {
-//                            Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
+                            Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
                         }
                     } else {
-//                        Log.d(TAG, "file:%s, size:%d B, downlimit:%d KB", entry.getKey(), size.getFirst(), downLimit);
+                        Log.d(TAG, "file:%s, size:%d B, downlimit:%d KB", entry.getKey(), size.getFirst(), downLimit);
                     }
                 }
             }

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UncompressedFileTask.java
Patch:
@@ -28,6 +28,7 @@
 import com.tencent.matrix.apk.model.result.TaskResult;
 import com.tencent.matrix.apk.model.result.TaskResultFactory;
 import com.tencent.matrix.javalib.util.FileUtil;
+import com.tencent.matrix.javalib.util.Log;
 import com.tencent.matrix.javalib.util.Util;
 
 import java.io.File;
@@ -116,7 +117,7 @@ public TaskResult call() throws TaskExecuteException {
                             compressSizeMap.put(suffix, compressSizeMap.get(suffix) + size.getSecond());
                         }
                     } else {
-//                        Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
+                        Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
                     }
                 }
             }

File: matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/SQLiteLintIssue.java
Patch:
@@ -111,7 +111,7 @@ public boolean equals(Object o) {
         }
 
         SQLiteLintIssue d = (SQLiteLintIssue) o;
-        return d.id.equals(((SQLiteLintIssue) o).id);
+        return d.id.equals(id);
     }
 
     @Override

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -127,15 +127,15 @@ public long getStartUpThresholdMs() {
     }
 
     public long getWarmStartUpThresholdMs() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_app_start_up_threshold.name(), Constants.DEFAULT_STARTUP_THRESHOLD_MS_WARM);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_warm_app_start_up_threshold.name(), Constants.DEFAULT_STARTUP_THRESHOLD_MS_WARM);
     }
 
     public String getSplashActivityName() {
         return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_splash_activity_name.name(), mDefaultSplashActivity);
     }
 
     public float getFrameRefreshRate() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_app_start_up_threshold.name(), Constants.DEFAULT_DEVICE_REFRESH_RATE);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_fps_frame_fresh_threshold.name(), Constants.DEFAULT_DEVICE_REFRESH_RATE);
     }
 
     public boolean isHasSplashActivityName() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/HackCallback.java
Patch:
@@ -20,6 +20,8 @@
 import android.os.Message;
 
 import com.tencent.matrix.trace.core.MethodBeat;
+import com.tencent.matrix.util.MatrixLog;
+
 
 /**
  * Created by caichongyang on 2017/5/26.
@@ -42,7 +44,7 @@ public HackCallback(Handler.Callback callback) {
 
     @Override
     public boolean handleMessage(Message msg) {
-//        MatrixLog.i(TAG, "[handleMessage] msg.what:%s begin:%s", msg.what, System.currentTimeMillis());
+        MatrixLog.i(TAG, "[handleMessage] msg.what:%s begin:%s", msg.what, System.currentTimeMillis());
         if (msg.what == LAUNCH_ACTIVITY) {
             Hacker.isEnterAnimationComplete = false;
         } else if (msg.what == ENTER_ANIMATION_COMPLETE) {

File: matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/mrs/plugin/IDynamicConfig.java
Patch:
@@ -43,6 +43,7 @@ enum ExptEnum {
         clicfg_matrix_trace_evil_method_enable,
 
         clicfg_matrix_trace_app_start_up_threshold,
+        clicfg_matrix_trace_warm_app_start_up_threshold,
         clicfg_matrix_trace_fps_frame_fresh_threshold,
         clicfg_matrix_trace_min_evil_method_run_cnt,
         clicfg_matrix_trace_min_evil_method_dur_time,

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/config/TraceConfig.java
Patch:
@@ -127,15 +127,15 @@ public long getStartUpThresholdMs() {
     }
 
     public long getWarmStartUpThresholdMs() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_app_start_up_threshold.name(), Constants.DEFAULT_STARTUP_THRESHOLD_MS_WARM);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_warm_app_start_up_threshold.name(), Constants.DEFAULT_STARTUP_THRESHOLD_MS_WARM);
     }
 
     public String getSplashActivityName() {
         return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_splash_activity_name.name(), mDefaultSplashActivity);
     }
 
     public float getFrameRefreshRate() {
-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_app_start_up_threshold.name(), Constants.DEFAULT_DEVICE_REFRESH_RATE);
+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_trace_fps_frame_fresh_threshold.name(), Constants.DEFAULT_DEVICE_REFRESH_RATE);
     }
 
     public boolean isHasSplashActivityName() {

File: matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/HackCallback.java
Patch:
@@ -20,6 +20,8 @@
 import android.os.Message;
 
 import com.tencent.matrix.trace.core.MethodBeat;
+import com.tencent.matrix.util.MatrixLog;
+
 
 /**
  * Created by caichongyang on 2017/5/26.
@@ -42,7 +44,7 @@ public HackCallback(Handler.Callback callback) {
 
     @Override
     public boolean handleMessage(Message msg) {
-//        MatrixLog.i(TAG, "[handleMessage] msg.what:%s begin:%s", msg.what, System.currentTimeMillis());
+        MatrixLog.i(TAG, "[handleMessage] msg.what:%s begin:%s", msg.what, System.currentTimeMillis());
         if (msg.what == LAUNCH_ACTIVITY) {
             Hacker.isEnterAnimationComplete = false;
         } else if (msg.what == ENTER_ANIMATION_COMPLETE) {

File: matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/hproflib/HprofReader.java
Patch:
@@ -46,6 +46,9 @@ public void accept(HprofVisitor hv) throws IOException {
     private void acceptHeader(HprofVisitor hv) throws IOException {
         final String text = IOUtil.readNullTerminatedString(mStreamIn);
         final int idSize = IOUtil.readBEInt(mStreamIn);
+        if (idSize <= 0 || idSize >= (Integer.MAX_VALUE >> 1)) {
+            throw new IOException("bad idSize: " + idSize);
+        }
         final long timestamp = IOUtil.readBELong(mStreamIn);
         mIdSize = idSize;
         hv.visitHeader(text, idSize, timestamp);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/ApkChecker.java
Patch:
@@ -39,7 +39,7 @@ public final class ApkChecker {
         "Usages:\n\n"
             + JobConstants.PARAM_CONFIG + " CONFIG-FILE-PATH\n\n"
             + "or\n\n"
-            + "[" + JobConstants.PARAM_INPUT + " INPUT-DIR-PATH] [" + JobConstants.PARAM_APK + " APK-FILE-PATH] [" + JobConstants.PARAM_UNZIP + " APK-UNZIP-PATH] [" + JobConstants.PARAM_MAPPING_TXT + " MAPPING-FILE-PATH] [" + JobConstants.PARAM_RES_MAPPING_TXT + " RESGUARD-MAPPING-FILE-PATH] [" + JobConstants.PARAM_OUTPUT + " OUTPUT-PATH] [" + JobConstants.PARAM_FORMAT + " OUTPUT-FORMAT] [" + JobConstants.PARAM_FORMAT_JAR + " OUTPUT-FORMAT-JAR] [" + JobConstants.PARAM_FORMAT_CONFIG + " OUTPUT-FORMAT-CONFIG (json-array format)] [Options]\n\n"
+            + "[" + JobConstants.PARAM_INPUT + " INPUT-DIR-PATH] [" + JobConstants.PARAM_APK + " APK-FILE-PATH] [" + JobConstants.PARAM_UNZIP + " APK-UNZIP-PATH] [" + JobConstants.PARAM_MAPPING_TXT + " MAPPING-FILE-PATH] [" + JobConstants.PARAM_RES_MAPPING_TXT + " RESGUARD-MAPPING-FILE-PATH] [" + JobConstants.PARAM_OUTPUT + " OUTPUT-PATH] [" + JobConstants.PARAM_FORMAT + " OUTPUT-FORMAT] [" + JobConstants.PARAM_FORMAT_JAR + " OUTPUT-FORMAT-JAR] [" + JobConstants.PARAM_FORMAT_CONFIG + " OUTPUT-FORMAT-CONFIG (json-array format)] [" + JobConstants.PARAM_LOG_LEVEL + " LOG-LEVEL (v,d,i,w,e)] [Options]\n\n"
             + "Options:\n"
                 + JobConstants.OPTION_MANIFEST + "\n"
                 + "     Read package info from the AndroidManifest.xml.\n"

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/job/JobConstants.java
Patch:
@@ -41,6 +41,7 @@ public final class JobConstants {
     public static final String PARAM_MAPPING_TXT = "--mappingTxt";
     public static final String PARAM_RES_MAPPING_TXT = "--resMappingTxt";
     public static final String PARAM_IGNORE_ASSETS_LIST = "--ignoreAssets";
+    public static final String PARAM_LOG_LEVEL = "--log";
 
     public static final String OPTION_MANIFEST = "-manifest";
     public static final String OPTION_FILE_SIZE = "-fileSize";

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountClassTask.java
Patch:
@@ -74,7 +74,7 @@ public void init() throws TaskInitException {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
 
-        Log.d(TAG, "input path:%s", inputPath);
+        Log.i(TAG, "input path:%s", inputPath);
 
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
@@ -136,7 +136,7 @@ public TaskResult call() throws TaskExecuteException {
                 }
                 JsonObject jsonObject = new JsonObject();
                 jsonObject.addProperty("dex-file", dexFileNameList.get(i));
-                //Log.d(TAG, "dex %s, classes %s", dexFileNameList.get(i), classNameSet.toString());
+                Log.d(TAG, "dex %s, classes %s", dexFileNameList.get(i), classNameSet.toString());
 
                 Map<String, Set<String>> packageClass = new HashMap<>();
                 if (JobConstants.GROUP_PACKAGE.equals(group)) {

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ManifestAnalyzeTask.java
Patch:
@@ -58,7 +58,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath, ApkConstants.MANIFEST_FILE_NAME);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---Manifest file '" + inputPath + File.separator + ApkConstants.MANIFEST_FILE_NAME + "' is not exist!");
@@ -82,7 +82,7 @@ public TaskResult call() throws TaskExecuteException {
             }
             long startTime = System.currentTimeMillis();
             JsonObject jsonObject = manifestParser.parse();
-//            Log.d(TAG, jsonObject.toString());
+            Log.d(TAG, jsonObject.toString());
             ((TaskJsonResult) taskResult).add("manifest", jsonObject);
             taskResult.setStartTime(startTime);
             taskResult.setEndTime(System.currentTimeMillis());

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MethodCountTask.java
Patch:
@@ -84,7 +84,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "input path:%s", inputPath);
+        Log.i(TAG, "input path:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MultiLibCheckTask.java
Patch:
@@ -52,7 +52,7 @@ public void init() throws TaskInitException {
         super.init();
         String inputPath = config.getUnzipPath();
         if (!Util.isNullOrNil(inputPath)) {
-            Log.d(TAG, "inputPath:%s", inputPath);
+            Log.i(TAG, "inputPath:%s", inputPath);
             libDir = new File(inputPath, "lib");
         } else {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ResProguardCheckTask.java
Patch:
@@ -56,7 +56,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");
@@ -78,7 +78,7 @@ public TaskResult call() throws TaskExecuteException {
             }
             long startTime = System.currentTimeMillis();
             if (resDir.exists() && resDir.isDirectory()) {
-                Log.d(TAG, "find resource directory " + resDir.getAbsolutePath());
+                Log.i(TAG, "find resource directory " + resDir.getAbsolutePath());
                 ((TaskJsonResult) taskResult).add("hasResProguard", true);
             } else {
                 resDir = new File(inputFile, ApkConstants.RESOURCE_DIR_NAME);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/ShowFileSizeTask.java
Patch:
@@ -69,7 +69,7 @@ public void init() throws TaskInitException {
         if (Util.isNullOrNil(inputPath)) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH can not be null!");
         }
-        Log.d(TAG, "inputPath:%s", inputPath);
+        Log.i(TAG, "inputPath:%s", inputPath);
         inputFile = new File(inputPath);
         if (!inputFile.exists()) {
             throw new TaskInitException(TAG + "---APK-UNZIP-PATH '" + inputPath + "' is not exist!");
@@ -125,10 +125,10 @@ public TaskResult call() throws TaskExecuteException {
                         if (filterSuffix.isEmpty() || filterSuffix.contains(suffix)) {
                             entryList.add(Pair.of(entry.getKey(), size.getFirst()));
                         } else {
-//                            Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
+                            Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
                         }
                     } else {
-//                        Log.d(TAG, "file:%s, size:%d B, downlimit:%d KB", entry.getKey(), size.getFirst(), downLimit);
+                        Log.d(TAG, "file:%s, size:%d B, downlimit:%d KB", entry.getKey(), size.getFirst(), downLimit);
                     }
                 }
             }

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UncompressedFileTask.java
Patch:
@@ -28,6 +28,7 @@
 import com.tencent.matrix.apk.model.result.TaskResult;
 import com.tencent.matrix.apk.model.result.TaskResultFactory;
 import com.tencent.matrix.javalib.util.FileUtil;
+import com.tencent.matrix.javalib.util.Log;
 import com.tencent.matrix.javalib.util.Util;
 
 import java.io.File;
@@ -116,7 +117,7 @@ public TaskResult call() throws TaskExecuteException {
                             compressSizeMap.put(suffix, compressSizeMap.get(suffix) + size.getSecond());
                         }
                     } else {
-//                        Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
+                        Log.d(TAG, "file: %s, filter by suffix.", entry.getKey());
                     }
                 }
             }

File: matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java
Patch:
@@ -31,7 +31,6 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;

File: matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/SQLiteLintIssue.java
Patch:
@@ -111,7 +111,7 @@ public boolean equals(Object o) {
         }
 
         SQLiteLintIssue d = (SQLiteLintIssue) o;
-        return d.id.equals(((SQLiteLintIssue) o).id);
+        return d.id.equals(id);
     }
 
     @Override

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnStrippedSoCheckTask.java
Patch:
@@ -96,16 +96,17 @@ private boolean isSoStripped(File libFile) throws IOException, InterruptedExcept
         Process process = processBuilder.start();
         BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
         String line = reader.readLine();
+        boolean result = false;
         if (!Util.isNullOrNil(line)) {
             //Log.d(TAG, "%s", line);
             String[] columns = line.split(":");
             if (columns.length == 3 && columns[2].trim().equalsIgnoreCase("no symbols")) {
-                return true;
+                result = true;
             }
         }
         reader.close();
         process.waitFor();
-        return false;
+        return result;
     }
 
     @Override

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/FindNonAlphaPngTask.java
Patch:
@@ -97,7 +97,7 @@ private void findNonAlphaPng(File file) throws IOException {
                 }
             } else if (file.isFile() && file.getName().endsWith(ApkConstants.PNG_FILE_SUFFIX) && !file.getName().endsWith(ApkConstants.NINE_PNG)) {
                 BufferedImage bufferedImage = ImageIO.read(file);
-                if (!bufferedImage.getColorModel().hasAlpha()) {
+                if (bufferedImage != null && bufferedImage.getColorModel() != null && !bufferedImage.getColorModel().hasAlpha()) {
                     String filename = file.getAbsolutePath().substring(inputFile.getAbsolutePath().length() + 1);
                     if (entryNameMap.containsKey(filename)) {
                         filename = entryNameMap.get(filename);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountClassTask.java
Patch:
@@ -121,6 +121,7 @@ public TaskResult call() throws TaskExecuteException {
                 RandomAccessFile dexFile = dexFileList.get(i);
                 DexData dexData = new DexData(dexFile);
                 dexData.load();
+                dexFile.close();
                 ClassRef[] defClassRefs = dexData.getInternalReferences();
                 Set<String> classNameSet = new HashSet<>();
                 for (ClassRef classRef : defClassRefs) {

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountRTask.java
Patch:
@@ -114,6 +114,7 @@ public TaskResult call() throws TaskExecuteException {
             for (RandomAccessFile dexFile : dexFileList) {
                 DexData dexData = new DexData(dexFile);
                 dexData.load();
+                dexFile.close();
                 ClassRef[] defClassRefs = dexData.getInternalReferences();
                 for (ClassRef classRef : defClassRefs) {
                     String className = ApkUtil.getNormalClassName(classRef.getName());

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MethodCountTask.java
Patch:
@@ -204,6 +204,7 @@ public TaskResult call() throws TaskExecuteException {
             for (int i = 0; i < dexFileList.size(); i++) {
                 RandomAccessFile dexFile = dexFileList.get(i);
                 countDex(dexFile);
+                dexFile.close();
                 int totalInternalMethods = sumOfValue(classInternalMethod);
                 int totalExternalMethods = sumOfValue(classExternalMethod);
                 JsonObject jsonObject = new JsonObject();

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/FindNonAlphaPngTask.java
Patch:
@@ -97,7 +97,7 @@ private void findNonAlphaPng(File file) throws IOException {
                 }
             } else if (file.isFile() && file.getName().endsWith(ApkConstants.PNG_FILE_SUFFIX) && !file.getName().endsWith(ApkConstants.NINE_PNG)) {
                 BufferedImage bufferedImage = ImageIO.read(file);
-                if (!bufferedImage.getColorModel().hasAlpha()) {
+                if (bufferedImage != null && bufferedImage.getColorModel() != null && !bufferedImage.getColorModel().hasAlpha()) {
                     String filename = file.getAbsolutePath().substring(inputFile.getAbsolutePath().length() + 1);
                     if (entryNameMap.containsKey(filename)) {
                         filename = entryNameMap.get(filename);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnStrippedSoCheckTask.java
Patch:
@@ -96,16 +96,17 @@ private boolean isSoStripped(File libFile) throws IOException, InterruptedExcept
         Process process = processBuilder.start();
         BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
         String line = reader.readLine();
+        boolean result = false;
         if (!Util.isNullOrNil(line)) {
             //Log.d(TAG, "%s", line);
             String[] columns = line.split(":");
             if (columns.length == 3 && columns[2].trim().equalsIgnoreCase("no symbols")) {
-                return true;
+                result = true;
             }
         }
         reader.close();
         process.waitFor();
-        return false;
+        return result;
     }
 
     @Override

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnStrippedSoCheckTask.java
Patch:
@@ -96,16 +96,17 @@ private boolean isSoStripped(File libFile) throws IOException, InterruptedExcept
         Process process = processBuilder.start();
         BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
         String line = reader.readLine();
+        boolean result = false;
         if (!Util.isNullOrNil(line)) {
             //Log.d(TAG, "%s", line);
             String[] columns = line.split(":");
             if (columns.length == 3 && columns[2].trim().equalsIgnoreCase("no symbols")) {
-                return true;
+                result = true;
             }
         }
         reader.close();
         process.waitFor();
-        return false;
+        return result;
     }
 
     @Override

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/FindNonAlphaPngTask.java
Patch:
@@ -97,7 +97,7 @@ private void findNonAlphaPng(File file) throws IOException {
                 }
             } else if (file.isFile() && file.getName().endsWith(ApkConstants.PNG_FILE_SUFFIX) && !file.getName().endsWith(ApkConstants.NINE_PNG)) {
                 BufferedImage bufferedImage = ImageIO.read(file);
-                if (!bufferedImage.getColorModel().hasAlpha()) {
+                if (bufferedImage != null && bufferedImage.getColorModel() != null && !bufferedImage.getColorModel().hasAlpha()) {
                     String filename = file.getAbsolutePath().substring(inputFile.getAbsolutePath().length() + 1);
                     if (entryNameMap.containsKey(filename)) {
                         filename = entryNameMap.get(filename);

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountClassTask.java
Patch:
@@ -121,6 +121,7 @@ public TaskResult call() throws TaskExecuteException {
                 RandomAccessFile dexFile = dexFileList.get(i);
                 DexData dexData = new DexData(dexFile);
                 dexData.load();
+                dexFile.close();
                 ClassRef[] defClassRefs = dexData.getInternalReferences();
                 Set<String> classNameSet = new HashSet<>();
                 for (ClassRef classRef : defClassRefs) {

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountRTask.java
Patch:
@@ -114,6 +114,7 @@ public TaskResult call() throws TaskExecuteException {
             for (RandomAccessFile dexFile : dexFileList) {
                 DexData dexData = new DexData(dexFile);
                 dexData.load();
+                dexFile.close();
                 ClassRef[] defClassRefs = dexData.getInternalReferences();
                 for (ClassRef classRef : defClassRefs) {
                     String className = ApkUtil.getNormalClassName(classRef.getName());

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MethodCountTask.java
Patch:
@@ -204,6 +204,7 @@ public TaskResult call() throws TaskExecuteException {
             for (int i = 0; i < dexFileList.size(); i++) {
                 RandomAccessFile dexFile = dexFileList.get(i);
                 countDex(dexFile);
+                dexFile.close();
                 int totalInternalMethods = sumOfValue(classInternalMethod);
                 int totalExternalMethods = sumOfValue(classExternalMethod);
                 JsonObject jsonObject = new JsonObject();

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountClassTask.java
Patch:
@@ -121,6 +121,7 @@ public TaskResult call() throws TaskExecuteException {
                 RandomAccessFile dexFile = dexFileList.get(i);
                 DexData dexData = new DexData(dexFile);
                 dexData.load();
+                dexFile.close();
                 ClassRef[] defClassRefs = dexData.getInternalReferences();
                 Set<String> classNameSet = new HashSet<>();
                 for (ClassRef classRef : defClassRefs) {

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/CountRTask.java
Patch:
@@ -114,6 +114,7 @@ public TaskResult call() throws TaskExecuteException {
             for (RandomAccessFile dexFile : dexFileList) {
                 DexData dexData = new DexData(dexFile);
                 dexData.load();
+                dexFile.close();
                 ClassRef[] defClassRefs = dexData.getInternalReferences();
                 for (ClassRef classRef : defClassRefs) {
                     String className = ApkUtil.getNormalClassName(classRef.getName());

File: matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/MethodCountTask.java
Patch:
@@ -204,6 +204,7 @@ public TaskResult call() throws TaskExecuteException {
             for (int i = 0; i < dexFileList.size(); i++) {
                 RandomAccessFile dexFile = dexFileList.get(i);
                 countDex(dexFile);
+                dexFile.close();
                 int totalInternalMethods = sumOfValue(classInternalMethod);
                 int totalExternalMethods = sumOfValue(classExternalMethod);
                 JsonObject jsonObject = new JsonObject();

