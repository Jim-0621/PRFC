File: xds/src/main/java/io/grpc/xds/client/BootstrapperImpl.java
Patch:
@@ -56,7 +56,7 @@ public abstract class BootstrapperImpl extends Bootstrapper {
   private static final String SERVER_FEATURE_TRUSTED_XDS_SERVER = "trusted_xds_server";
 
   @VisibleForTesting
-  static boolean enableXdsFallback = GrpcUtil.getFlag(GRPC_EXPERIMENTAL_XDS_FALLBACK, false);
+  static boolean enableXdsFallback = GrpcUtil.getFlag(GRPC_EXPERIMENTAL_XDS_FALLBACK, true);
 
   protected final XdsLogger logger;
 

File: alts/src/main/java/io/grpc/alts/internal/AsyncSemaphore.java
Patch:
@@ -16,12 +16,12 @@
 
 package io.grpc.alts.internal;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPromise;
 import java.util.LinkedList;
 import java.util.Queue;
-import javax.annotation.concurrent.GuardedBy;
 
 /** Provides a semaphore primitive, without blocking waiting on permits. */
 final class AsyncSemaphore {

File: android/src/main/java/io/grpc/android/AndroidChannelBuilder.java
Patch:
@@ -28,6 +28,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import com.google.errorprone.annotations.InlineMe;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.CallOptions;
 import io.grpc.ClientCall;
 import io.grpc.ConnectivityState;
@@ -41,7 +42,6 @@
 import io.grpc.internal.GrpcUtil;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Builds a {@link ManagedChannel} that, when provided with a {@link Context}, will automatically

File: api/src/main/java/io/grpc/ConfiguratorRegistry.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.grpc;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * A registry for {@link Configurator} instances.

File: api/src/main/java/io/grpc/ManagedChannelRegistry.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import java.net.SocketAddress;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -30,7 +31,6 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: api/src/main/java/io/grpc/MetricInstrumentRegistry.java
Patch:
@@ -21,12 +21,12 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Strings;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * A registry for globally registered metric instruments.

File: api/src/main/java/io/grpc/NameResolverRegistry.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableMap;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -31,7 +32,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: api/src/main/java/io/grpc/ServerRegistry.java
Patch:
@@ -18,14 +18,14 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: binder/src/androidTest/java/io/grpc/binder/HostServices.java
Patch:
@@ -29,6 +29,7 @@
 import androidx.lifecycle.LifecycleService;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Supplier;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Server;
 import java.io.IOException;
 import java.util.HashMap;
@@ -38,7 +39,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * A test helper class for creating android services to host gRPC servers.

File: binder/src/androidTest/java/io/grpc/binder/internal/BinderClientTransportTest.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import com.google.protobuf.Empty;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
@@ -64,7 +65,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: binder/src/main/java/io/grpc/binder/internal/ActiveTransportTracker.java
Patch:
@@ -2,13 +2,13 @@
 
 import static com.google.common.base.Preconditions.checkState;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.Metadata;
 import io.grpc.internal.ServerListener;
 import io.grpc.internal.ServerStream;
 import io.grpc.internal.ServerTransport;
 import io.grpc.internal.ServerTransportListener;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Tracks which {@link BinderTransport.BinderServerTransport} are currently active and allows

File: binder/src/main/java/io/grpc/binder/internal/BinderServer.java
Patch:
@@ -25,6 +25,7 @@
 import android.os.Parcel;
 import android.os.RemoteException;
 import com.google.common.collect.ImmutableList;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.Grpc;
 import io.grpc.InternalChannelz.SocketStats;
@@ -48,7 +49,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: binder/src/main/java/io/grpc/binder/internal/BinderTransport.java
Patch:
@@ -36,6 +36,7 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.errorprone.annotations.CheckReturnValue;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
@@ -80,7 +81,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: binder/src/main/java/io/grpc/binder/internal/FlowController.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.grpc.binder.internal;
 
-import javax.annotation.concurrent.GuardedBy;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 
 /** Keeps track of the number of bytes on the wire in a single direction. */
 final class FlowController {

File: binder/src/main/java/io/grpc/binder/internal/Inbound.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkState;
 
 import android.os.Parcel;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.Metadata;
 import io.grpc.Status;
@@ -34,7 +35,6 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Handles incoming binder transactions for a single stream, turning those transactions into calls

File: binder/src/main/java/io/grpc/binder/internal/Outbound.java
Patch:
@@ -22,6 +22,7 @@
 import static java.lang.Math.max;
 
 import android.os.Parcel;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Deadline;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
@@ -34,7 +35,6 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Sends the set of outbound transactions for a single BinderStream (rpc).

File: binder/src/main/java/io/grpc/binder/internal/PingTracker.java
Patch:
@@ -17,12 +17,12 @@
 package io.grpc.binder.internal;
 
 import com.google.common.base.Ticker;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Status;
 import io.grpc.StatusException;
 import io.grpc.internal.ClientTransport.PingCallback;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Tracks an ongoing ping request for a client-side binder transport. We only handle a single active

File: binder/src/main/java/io/grpc/binder/internal/ServiceBinding.java
Patch:
@@ -28,13 +28,13 @@
 import androidx.annotation.AnyThread;
 import androidx.annotation.MainThread;
 import com.google.common.annotations.VisibleForTesting;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Status;
 import io.grpc.binder.BinderChannelCredentials;
 import java.util.concurrent.Executor;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: census/src/main/java/io/grpc/census/CensusStatsModule.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Stopwatch;
 import com.google.common.base.Supplier;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
@@ -62,7 +63,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Provides factories for {@link StreamTracer} that records stats to Census.

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkState;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Codec;
 import io.grpc.Compressor;
 import io.grpc.Decompressor;
@@ -29,7 +30,6 @@
 import java.io.InputStream;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * The stream and stream state as used by the application. Must only be called from the sending

File: core/src/main/java/io/grpc/internal/CallCredentialsApplyingTransportFactory.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.base.Preconditions.checkNotNull;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallCredentials;
 import io.grpc.CallCredentials.RequestInfo;
@@ -38,7 +39,6 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.atomic.AtomicInteger;
-import javax.annotation.concurrent.GuardedBy;
 
 final class CallCredentialsApplyingTransportFactory implements ClientTransportFactory {
   private final ClientTransportFactory delegate;

File: core/src/main/java/io/grpc/internal/ChannelTracer.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.ChannelLogger;
 import io.grpc.InternalChannelz.ChannelStats;
 import io.grpc.InternalChannelz.ChannelTrace;
@@ -31,7 +32,6 @@
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Tracks a collections of channel tracing events for a channel/subchannel.

File: core/src/main/java/io/grpc/internal/DelayedClientCall.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.MoreObjects;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.ClientCall;
 import io.grpc.Context;
@@ -38,7 +39,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * A call that queues requests before a real call is ready to be delegated to.

File: core/src/main/java/io/grpc/internal/DelayedClientTransport.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
 import io.grpc.Context;
@@ -39,7 +40,6 @@
 import java.util.concurrent.Executor;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * A client transport that queues requests before a real transport is available. When {@link

File: core/src/main/java/io/grpc/internal/DelayedStream.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.errorprone.annotations.CheckReturnValue;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.Compressor;
 import io.grpc.Deadline;
@@ -31,7 +32,6 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * A stream that queues requests before the transport is available, and delegates to a real stream

File: core/src/main/java/io/grpc/internal/Http2Ping.java
Patch:
@@ -17,14 +17,14 @@
 package io.grpc.internal;
 
 import com.google.common.base.Stopwatch;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.internal.ClientTransport.PingCallback;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Represents an outstanding PING operation on an HTTP/2 channel. This can be used by HTTP/2-based

File: core/src/main/java/io/grpc/internal/KeepAliveManager.java
Patch:
@@ -22,11 +22,11 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Stopwatch;
 import com.google.common.util.concurrent.MoreExecutors;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Status;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Manages keepalive pings.

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.common.base.Supplier;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallCredentials;
 import io.grpc.CallOptions;
@@ -117,7 +118,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /** A communication channel for making outgoing RPCs. */

File: core/src/main/java/io/grpc/internal/MetadataApplierImpl.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.CallCredentials.MetadataApplier;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
@@ -28,7 +29,6 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 final class MetadataApplierImpl extends MetadataApplier {
   private final ClientTransport transport;

File: core/src/main/java/io/grpc/internal/MigratingThreadDeframer.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Decompressor;
 import io.perfmark.Link;
 import io.perfmark.PerfMark;
@@ -26,7 +27,6 @@
 import java.io.InputStream;
 import java.util.ArrayDeque;
 import java.util.Queue;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * A deframer that moves decoding between the transport and app threads based on which is more

File: core/src/main/java/io/grpc/internal/RetriableStream.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Objects;
 import com.google.errorprone.annotations.CheckReturnValue;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.ClientStreamTracer;
 import io.grpc.Compressor;
@@ -49,7 +50,6 @@
 import java.util.concurrent.atomic.AtomicLong;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /** A logical {@link ClientStream} that is retriable. */
 abstract class RetriableStream<ReqT> implements ClientStream {

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -31,6 +31,7 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.BinaryLog;
 import io.grpc.CompressorRegistry;
@@ -75,7 +76,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Default implementation of {@link io.grpc.Server}, for creation by transports.

File: cronet/src/main/java/io/grpc/cronet/CronetClientStream.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import com.google.common.io.BaseEncoding;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.InternalMetadata;
@@ -50,7 +51,6 @@
 import java.util.Map;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import org.chromium.net.BidirectionalStream;
 import org.chromium.net.CronetException;
 import org.chromium.net.UrlResponseInfo;

File: cronet/src/main/java/io/grpc/cronet/CronetClientTransport.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
@@ -42,7 +43,6 @@
 import java.util.Set;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * A cronet-based {@link ConnectionClientTransport} implementation.

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbClientLoadRecorder.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import com.google.protobuf.util.Timestamps;
 import io.grpc.ClientStreamTracer;
 import io.grpc.Metadata;
@@ -29,7 +30,6 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLongFieldUpdater;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: inprocess/src/main/java/io/grpc/inprocess/AnonymousInProcessSocketAddress.java
Patch:
@@ -18,11 +18,11 @@
 
 import static com.google.common.base.Preconditions.checkState;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.ExperimentalApi;
 import java.io.IOException;
 import java.net.SocketAddress;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Custom SocketAddress class for {@link InProcessTransport}, for 

File: inprocess/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
 import com.google.errorprone.annotations.CheckReturnValue;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
@@ -76,7 +77,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 @ThreadSafe

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Queues;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import com.google.protobuf.ByteString;
 import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;
 import io.grpc.Metadata;
@@ -54,7 +55,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Implementation of the business logic for the TestService. Uses an executor to schedule chunks

File: okhttp/src/main/java/io/grpc/okhttp/AsyncSink.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.internal.SerializingExecutor;
 import io.grpc.okhttp.ExceptionHandlingFrameWriter.TransportExceptionHandler;
 import io.grpc.okhttp.internal.framed.ErrorCode;
@@ -30,7 +31,6 @@
 import java.io.IOException;
 import java.net.Socket;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import okio.Buffer;
 import okio.Sink;
 import okio.Timeout;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -21,6 +21,7 @@
 import static io.grpc.internal.ClientStreamListener.RpcProgress.PROCESSED;
 
 import com.google.common.io.BaseEncoding;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.Metadata;
@@ -37,7 +38,6 @@
 import io.perfmark.Tag;
 import io.perfmark.TaskCloseable;
 import java.util.List;
-import javax.annotation.concurrent.GuardedBy;
 import okio.Buffer;
 
 /**

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.common.base.Supplier;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
@@ -93,7 +94,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.net.SocketFactory;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSession;
@@ -1460,4 +1460,4 @@ public void alternateService(int streamId, String origin, ByteString protocol, S
       // TODO(madongfly): Deal with alternateService propagation
     }
   }
-}
\ No newline at end of file
+}

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpServerStream.java
Patch:
@@ -17,6 +17,7 @@
 package io.grpc.okhttp;
 
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.Metadata;
 import io.grpc.Status;
@@ -30,7 +31,6 @@
 import io.perfmark.Tag;
 import io.perfmark.TaskCloseable;
 import java.util.List;
-import javax.annotation.concurrent.GuardedBy;
 import okio.Buffer;
 
 /**

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpServerTransport.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Attributes;
 import io.grpc.InternalChannelz;
 import io.grpc.InternalLogId;
@@ -62,7 +63,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import okio.Buffer;
 import okio.BufferedSource;
 import okio.ByteString;

File: opentelemetry/src/main/java/io/grpc/opentelemetry/OpenTelemetryMetricsModule.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.ClientCall;
@@ -54,7 +55,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Provides factories for {@link StreamTracer} that records metrics to OpenTelemetry.

File: rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.common.util.concurrent.SettableFuture;
 import com.google.errorprone.annotations.CheckReturnValue;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.ChannelLogger;
 import io.grpc.ChannelLogger.ChannelLogLevel;
 import io.grpc.ConnectivityState;
@@ -75,7 +76,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: services/src/main/java/io/grpc/protobuf/services/HealthServiceImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.util.concurrent.MoreExecutors;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.Context;
 import io.grpc.Context.CancellationListener;
 import io.grpc.Status;
@@ -34,7 +35,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 final class HealthServiceImpl extends HealthGrpc.HealthImplBase {
 

File: services/src/main/java/io/grpc/protobuf/services/ProtoReflectionServiceV1.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import com.google.protobuf.Descriptors.Descriptor;
 import com.google.protobuf.Descriptors.FieldDescriptor;
 import com.google.protobuf.Descriptors.FileDescriptor;
@@ -52,7 +53,6 @@
 import java.util.Set;
 import java.util.WeakHashMap;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Provides a reflection service for Protobuf services (including the reflection service itself).

File: xds/src/main/java/io/grpc/xds/FilterChainSelectorManager.java
Patch:
@@ -18,11 +18,11 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.xds.FilterChainMatchingProtocolNegotiators.FilterChainMatchingHandler.FilterChainSelector;
 import java.util.Comparator;
 import java.util.TreeSet;
 import java.util.concurrent.atomic.AtomicLong;
-import javax.annotation.concurrent.GuardedBy;
 
 /**
  * Maintains the current xDS selector and any resources using that selector. When the selector

File: xds/src/main/java/io/grpc/xds/SharedXdsClientPoolProvider.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.MetricRecorder;
 import io.grpc.internal.ExponentialBackoffPolicy;
 import io.grpc.internal.GrpcUtil;
@@ -40,7 +41,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: xds/src/main/java/io/grpc/xds/XdsCredentialsRegistry.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableMap;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import io.grpc.InternalServiceProviders;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -31,7 +32,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: api/src/main/java/io/grpc/CallOptions.java
Patch:
@@ -21,14 +21,14 @@
 
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.CheckReturnValue;
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.Immutable;
 

File: api/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -20,9 +20,9 @@
 
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.CheckReturnValue;
 import java.io.InputStream;
 import java.util.concurrent.atomic.AtomicReferenceArray;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.Immutable;
 

File: api/src/main/java/io/grpc/Status.java
Patch:
@@ -23,14 +23,14 @@
 
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Metadata.TrustedAsciiMarshaller;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.TreeMap;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.Immutable;
 

File: api/src/testFixtures/java/io/grpc/testing/DeadlineSubject.java
Patch:
@@ -24,9 +24,9 @@
 import com.google.common.truth.ComparableSubject;
 import com.google.common.truth.FailureMetadata;
 import com.google.common.truth.Subject;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Deadline;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 
 /** Propositions for {@link Deadline} subjects. */

File: binder/src/main/java/io/grpc/binder/AsyncSecurityPolicy.java
Patch:
@@ -17,11 +17,11 @@
 package io.grpc.binder;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.ExperimentalApi;
 import io.grpc.Status;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
-import javax.annotation.CheckReturnValue;
 
 /**
  * Decides whether a given Android UID is authorized to access some resource.

File: binder/src/main/java/io/grpc/binder/SecurityPolicy.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.grpc.binder;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Status;
-import javax.annotation.CheckReturnValue;
 
 /**
  * Decides whether a given Android UID is authorized to access some resource.

File: binder/src/main/java/io/grpc/binder/ServerSecurityPolicy.java
Patch:
@@ -19,10 +19,10 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Status;
 import java.util.HashMap;
 import java.util.Map;
-import javax.annotation.CheckReturnValue;
 
 /**
  * A security policy for a gRPC server.

File: binder/src/main/java/io/grpc/binder/UntrustedSecurityPolicies.java
Patch:
@@ -16,9 +16,9 @@
 
 package io.grpc.binder;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.ExperimentalApi;
 import io.grpc.Status;
-import javax.annotation.CheckReturnValue;
 
 /** Static factory methods for creating untrusted security policies. */
 @CheckReturnValue

File: binder/src/main/java/io/grpc/binder/internal/BinderTransport.java
Patch:
@@ -35,6 +35,7 @@
 import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
@@ -78,7 +79,6 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;

File: binder/src/main/java/io/grpc/binder/internal/BinderTransportSecurity.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.MoreExecutors;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Attributes;
 import io.grpc.Internal;
 import io.grpc.Metadata;
@@ -35,7 +36,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 
 /**

File: core/src/main/java/io/grpc/internal/ClientTransportFactory.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Attributes;
 import io.grpc.CallCredentials;
 import io.grpc.ChannelCredentials;
@@ -27,7 +28,6 @@
 import java.net.SocketAddress;
 import java.util.Collection;
 import java.util.concurrent.ScheduledExecutorService;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 
 /** Pre-configured factory for creating {@link ConnectionClientTransport} instances. */

File: core/src/main/java/io/grpc/internal/DelayedStream.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkState;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Attributes;
 import io.grpc.Compressor;
 import io.grpc.Deadline;
@@ -30,7 +31,6 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.concurrent.GuardedBy;
 
 /**

File: core/src/main/java/io/grpc/internal/KeepAliveEnforcer.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.CheckReturnValue;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckReturnValue;
 
 /** Monitors the client's PING usage to make sure the rate is permitted. */
 public final class KeepAliveEnforcer {

File: core/src/main/java/io/grpc/internal/ManagedClientTransport.java
Patch:
@@ -16,9 +16,9 @@
 
 package io.grpc.internal;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Attributes;
 import io.grpc.Status;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.ThreadSafe;
 

File: core/src/main/java/io/grpc/internal/RetriableStream.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Objects;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Attributes;
 import io.grpc.ClientStreamTracer;
 import io.grpc.Compressor;
@@ -47,7 +48,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import javax.annotation.CheckForNull;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.GuardedBy;
 

File: core/src/main/java/io/grpc/internal/TransportFrameUtil.java
Patch:
@@ -19,13 +19,13 @@
 import static java.nio.charset.StandardCharsets.US_ASCII;
 
 import com.google.common.io.BaseEncoding;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.InternalMetadata;
 import io.grpc.Metadata;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.logging.Logger;
-import javax.annotation.CheckReturnValue;
 
 /**
  * Utility functions for transport layer framing.

File: inprocess/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.io.ByteStreams;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
@@ -74,7 +75,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiationEvent.java
Patch:
@@ -20,10 +20,10 @@
 
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Attributes;
 import io.grpc.Internal;
 import io.grpc.InternalChannelz.Security;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 
 /**

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.InternalChannelz;
 import io.grpc.InternalMetadata;
 import io.grpc.Metadata;
@@ -68,7 +69,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.net.ssl.SSLException;
 

File: netty/src/main/java/io/grpc/netty/package-info.java
Patch:
@@ -18,5 +18,5 @@
  * The main transport implementation based on <a target="_blank" href="http://netty.io">Netty</a>,
  * for both the client and the server.
  */
-@javax.annotation.CheckReturnValue
+@com.google.errorprone.annotations.CheckReturnValue
 package io.grpc.netty;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.CallCredentials;
 import io.grpc.ChannelCredentials;
 import io.grpc.ChannelLogger;
@@ -72,7 +73,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.net.SocketFactory;
 import javax.net.ssl.HostnameVerifier;

File: okhttp/src/main/java/io/grpc/okhttp/Utils.java
Patch:
@@ -17,6 +17,7 @@
 package io.grpc.okhttp;
 
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.InternalChannelz;
 import io.grpc.InternalMetadata;
 import io.grpc.Metadata;
@@ -29,7 +30,6 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckReturnValue;
 
 /**
  * Common utility methods for OkHttp transport.

File: protobuf/src/main/java/io/grpc/protobuf/ProtoMethodDescriptorSupplier.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.grpc.protobuf;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import com.google.protobuf.Descriptors.MethodDescriptor;
-import javax.annotation.CheckReturnValue;
 
 /**
  * Provides access to the underlying proto service method descriptor.

File: rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java
Patch:
@@ -28,6 +28,7 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.common.util.concurrent.SettableFuture;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.ChannelLogger;
 import io.grpc.ChannelLogger.ChannelLogLevel;
 import io.grpc.ConnectivityState;
@@ -73,7 +74,6 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;

File: rls/src/main/java/io/grpc/rls/LinkedHashLruCache.java
Patch:
@@ -22,14 +22,14 @@
 
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Ticker;
+import com.google.errorprone.annotations.CheckReturnValue;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 
 /**

File: rls/src/main/java/io/grpc/rls/LruCache.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.grpc.rls;
 
-import javax.annotation.CheckReturnValue;
+import com.google.errorprone.annotations.CheckReturnValue;
 import javax.annotation.Nullable;
 
 /** An LruCache is a cache with least recently used eviction. */

File: rls/src/main/java/io/grpc/rls/RlsRequestFactory.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableMap;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.Metadata;
 import io.grpc.rls.RlsProtoData.ExtraKeys;
 import io.grpc.rls.RlsProtoData.GrpcKeyBuilder;
@@ -30,7 +31,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.annotation.CheckReturnValue;
 
 /**
  * A RlsRequestFactory creates {@link RouteLookupRequest} using key builder map from {@link

File: servlet/src/main/java/io/grpc/servlet/AsyncServletOutputStreamWriter.java
Patch:
@@ -22,6 +22,7 @@
 import static java.util.logging.Level.FINEST;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.InternalLogId;
 import io.grpc.servlet.ServletServerStream.ServletTransportState;
 import java.io.IOException;
@@ -34,7 +35,6 @@
 import java.util.function.BooleanSupplier;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.servlet.AsyncContext;
 import javax.servlet.ServletOutputStream;

File: stub/src/main/java/io/grpc/stub/AbstractAsyncStub.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.grpc.stub;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.stub.ClientCalls.StubType;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: stub/src/main/java/io/grpc/stub/AbstractBlockingStub.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.grpc.stub;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.stub.ClientCalls.StubType;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: stub/src/main/java/io/grpc/stub/AbstractFutureStub.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.grpc.stub;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.stub.ClientCalls.StubType;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: stub/src/main/java/io/grpc/stub/AbstractStub.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static io.grpc.InternalTimeUtils.convert;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.CallCredentials;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
@@ -30,7 +31,6 @@
 import java.time.Duration;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.ThreadSafe;
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;

File: xds/src/main/java/io/grpc/xds/internal/security/ReferenceCountingMap.java
Patch:
@@ -20,9 +20,9 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 
+import com.google.errorprone.annotations.CheckReturnValue;
 import java.util.HashMap;
 import java.util.Map;
-import javax.annotation.CheckReturnValue;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**

File: xds/src/test/java/io/grpc/xds/GrpcXdsClientImplTestBase.java
Patch:
@@ -2899,10 +2899,9 @@ public void edsCleanupNonceAfterUnsubscription() {
     verifySubscribedResourcesMetadataSizes(0, 0, 0, 0);
     call.verifyRequest(EDS, Arrays.asList(), VERSION_1, "0000", NODE);
 
-    // When re-subscribing, the version and nonce were properly forgotten, so the request is the
-    // same as the initial request
+    // When re-subscribing, the version was forgotten but not the nonce
     xdsClient.watchXdsResource(XdsEndpointResource.getInstance(), "A.1", edsResourceWatcher);
-    call.verifyRequest(EDS, "A.1", "", "", NODE, Mockito.timeout(2000).times(2));
+    call.verifyRequest(EDS, "A.1", "", "0000", NODE, Mockito.timeout(2000));
   }
 
   @Test

File: alts/src/generated/main/grpc/io/grpc/alts/internal/HandshakerServiceGrpc.java
Patch:
@@ -204,7 +204,7 @@ protected HandshakerServiceBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service HandshakerService.
+   * A stub to allow clients to do limited synchronous rpc calls to service HandshakerService.
    */
   public static final class HandshakerServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<HandshakerServiceBlockingStub> {

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -262,7 +262,7 @@ public io.grpc.testing.integration.Messages.LoadBalancerAccumulatedStatsResponse
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service LoadBalancerStatsService.
+   * A stub to allow clients to do limited synchronous rpc calls to service LoadBalancerStatsService.
    * <pre>
    * A service used to obtain stats for verifying LB behavior.
    * </pre>

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -252,7 +252,7 @@ public io.grpc.testing.integration.Metrics.GaugeResponse getGauge(io.grpc.testin
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service MetricsService.
+   * A stub to allow clients to do limited synchronous rpc calls to service MetricsService.
    */
   public static final class MetricsServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<MetricsServiceBlockingStub> {

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -244,7 +244,7 @@ public io.grpc.testing.integration.Messages.ReconnectInfo stop(io.grpc.testing.i
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service ReconnectService.
+   * A stub to allow clients to do limited synchronous rpc calls to service ReconnectService.
    * <pre>
    * A service used to control reconnect server.
    * </pre>

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -671,7 +671,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty unimplementedCall(io.grpc.t
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service TestService.
+   * A stub to allow clients to do limited synchronous rpc calls to service TestService.
    * <pre>
    * A simple service to test the various types of RPCs and experiment with
    * performance with various types of payload.

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -206,7 +206,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty unimplementedCall(io.grpc.t
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service UnimplementedService.
+   * A stub to allow clients to do limited synchronous rpc calls to service UnimplementedService.
    * <pre>
    * A simple service NOT implemented at servers so clients can test for
    * that case.

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -201,7 +201,7 @@ public io.grpc.testing.integration.Messages.ClientConfigureResponse configure(io
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service XdsUpdateClientConfigureService.
+   * A stub to allow clients to do limited synchronous rpc calls to service XdsUpdateClientConfigureService.
    * <pre>
    * A service to dynamically update the configuration of an xDS test client.
    * </pre>

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -244,7 +244,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty setNotServing(io.grpc.testi
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service XdsUpdateHealthService.
+   * A stub to allow clients to do limited synchronous rpc calls to service XdsUpdateHealthService.
    * <pre>
    * A service to remotely control health status of an xDS test server.
    * </pre>

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -262,7 +262,7 @@ public io.grpc.testing.integration.Messages.LoadBalancerAccumulatedStatsResponse
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service LoadBalancerStatsService.
+   * A stub to allow clients to do limited synchronous rpc calls to service LoadBalancerStatsService.
    * <pre>
    * A service used to obtain stats for verifying LB behavior.
    * </pre>

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -252,7 +252,7 @@ public io.grpc.testing.integration.Metrics.GaugeResponse getGauge(io.grpc.testin
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service MetricsService.
+   * A stub to allow clients to do limited synchronous rpc calls to service MetricsService.
    */
   public static final class MetricsServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<MetricsServiceBlockingStub> {

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -244,7 +244,7 @@ public io.grpc.testing.integration.Messages.ReconnectInfo stop(io.grpc.testing.i
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service ReconnectService.
+   * A stub to allow clients to do limited synchronous rpc calls to service ReconnectService.
    * <pre>
    * A service used to control reconnect server.
    * </pre>

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -671,7 +671,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty unimplementedCall(io.grpc.t
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service TestService.
+   * A stub to allow clients to do limited synchronous rpc calls to service TestService.
    * <pre>
    * A simple service to test the various types of RPCs and experiment with
    * performance with various types of payload.

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -206,7 +206,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty unimplementedCall(io.grpc.t
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service UnimplementedService.
+   * A stub to allow clients to do limited synchronous rpc calls to service UnimplementedService.
    * <pre>
    * A simple service NOT implemented at servers so clients can test for
    * that case.

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -201,7 +201,7 @@ public io.grpc.testing.integration.Messages.ClientConfigureResponse configure(io
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service XdsUpdateClientConfigureService.
+   * A stub to allow clients to do limited synchronous rpc calls to service XdsUpdateClientConfigureService.
    * <pre>
    * A service to dynamically update the configuration of an xDS test client.
    * </pre>

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -244,7 +244,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty setNotServing(io.grpc.testi
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service XdsUpdateHealthService.
+   * A stub to allow clients to do limited synchronous rpc calls to service XdsUpdateHealthService.
    * <pre>
    * A service to remotely control health status of an xDS test server.
    * </pre>

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/BenchmarkServiceGrpc.java
Patch:
@@ -461,7 +461,7 @@ public io.grpc.benchmarks.proto.Messages.SimpleResponse unaryCall(io.grpc.benchm
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service BenchmarkService.
+   * A stub to allow clients to do limited synchronous rpc calls to service BenchmarkService.
    */
   public static final class BenchmarkServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<BenchmarkServiceBlockingStub> {

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/ReportQpsScenarioServiceGrpc.java
Patch:
@@ -187,7 +187,7 @@ public io.grpc.benchmarks.proto.Control.Void reportScenario(io.grpc.benchmarks.p
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service ReportQpsScenarioService.
+   * A stub to allow clients to do limited synchronous rpc calls to service ReportQpsScenarioService.
    */
   public static final class ReportQpsScenarioServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<ReportQpsScenarioServiceBlockingStub> {

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/WorkerServiceGrpc.java
Patch:
@@ -407,7 +407,7 @@ public io.grpc.benchmarks.proto.Control.Void quitWorker(io.grpc.benchmarks.proto
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service WorkerService.
+   * A stub to allow clients to do limited synchronous rpc calls to service WorkerService.
    */
   public static final class WorkerServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<WorkerServiceBlockingStub> {

File: grpclb/src/generated/main/grpc/io/grpc/lb/v1/LoadBalancerGrpc.java
Patch:
@@ -189,7 +189,7 @@ protected LoadBalancerBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service LoadBalancer.
+   * A stub to allow clients to do limited synchronous rpc calls to service LoadBalancer.
    */
   public static final class LoadBalancerBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<LoadBalancerBlockingStub> {

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -264,7 +264,7 @@ public io.grpc.testing.integration.Messages.LoadBalancerAccumulatedStatsResponse
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service LoadBalancerStatsService.
+   * A stub to allow clients to do limited synchronous rpc calls to service LoadBalancerStatsService.
    * <pre>
    * A service used to obtain stats for verifying LB behavior.
    * </pre>

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -254,7 +254,7 @@ public io.grpc.testing.integration.Metrics.GaugeResponse getGauge(io.grpc.testin
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service MetricsService.
+   * A stub to allow clients to do limited synchronous rpc calls to service MetricsService.
    */
   public static final class MetricsServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<MetricsServiceBlockingStub> {

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -246,7 +246,7 @@ public io.grpc.testing.integration.Messages.ReconnectInfo stop(io.grpc.testing.i
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service ReconnectService.
+   * A stub to allow clients to do limited synchronous rpc calls to service ReconnectService.
    * <pre>
    * A service used to control reconnect server.
    * </pre>

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -679,7 +679,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty unimplementedCall(io.grpc.t
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service TestService.
+   * A stub to allow clients to do limited synchronous rpc calls to service TestService.
    * <pre>
    * A simple service to test the various types of RPCs and experiment with
    * performance with various types of payload.

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -207,7 +207,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty unimplementedCall(io.grpc.t
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service UnimplementedService.
+   * A stub to allow clients to do limited synchronous rpc calls to service UnimplementedService.
    * <pre>
    * A simple service NOT implemented at servers so clients can test for
    * that case.

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -202,7 +202,7 @@ public io.grpc.testing.integration.Messages.ClientConfigureResponse configure(io
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service XdsUpdateClientConfigureService.
+   * A stub to allow clients to do limited synchronous rpc calls to service XdsUpdateClientConfigureService.
    * <pre>
    * A service to dynamically update the configuration of an xDS test client.
    * </pre>

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -246,7 +246,7 @@ public io.grpc.testing.integration.EmptyProtos.Empty setNotServing(io.grpc.testi
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service XdsUpdateHealthService.
+   * A stub to allow clients to do limited synchronous rpc calls to service XdsUpdateHealthService.
    * <pre>
    * A service to remotely control health status of an xDS test server.
    * </pre>

File: istio-interop-testing/src/generated/main/grpc/io/istio/test/EchoTestServiceGrpc.java
Patch:
@@ -231,7 +231,7 @@ public io.istio.test.Echo.ForwardEchoResponse forwardEcho(io.istio.test.Echo.For
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service EchoTestService.
+   * A stub to allow clients to do limited synchronous rpc calls to service EchoTestService.
    */
   public static final class EchoTestServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<EchoTestServiceBlockingStub> {

File: rls/src/generated/main/grpc/io/grpc/lookup/v1/RouteLookupServiceGrpc.java
Patch:
@@ -187,7 +187,7 @@ public io.grpc.lookup.v1.RouteLookupResponse routeLookup(io.grpc.lookup.v1.Route
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service RouteLookupService.
+   * A stub to allow clients to do limited synchronous rpc calls to service RouteLookupService.
    */
   public static final class RouteLookupServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<RouteLookupServiceBlockingStub> {

File: s2a/src/generated/main/grpc/io/grpc/s2a/internal/handshaker/S2AServiceGrpc.java
Patch:
@@ -192,7 +192,7 @@ protected S2AServiceBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service S2AService.
+   * A stub to allow clients to do limited synchronous rpc calls to service S2AService.
    */
   public static final class S2AServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<S2AServiceBlockingStub> {

File: services/src/generated/main/grpc/io/grpc/channelz/v1/ChannelzGrpc.java
Patch:
@@ -582,7 +582,7 @@ public io.grpc.channelz.v1.GetSocketResponse getSocket(io.grpc.channelz.v1.GetSo
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service Channelz.
+   * A stub to allow clients to do limited synchronous rpc calls to service Channelz.
    * <pre>
    * Channelz is a service exposed by gRPC servers that provides detailed debug
    * information.

File: services/src/generated/main/grpc/io/grpc/health/v1/HealthGrpc.java
Patch:
@@ -290,7 +290,7 @@ public io.grpc.health.v1.HealthCheckResponse check(io.grpc.health.v1.HealthCheck
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service Health.
+   * A stub to allow clients to do limited synchronous rpc calls to service Health.
    */
   public static final class HealthBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<HealthBlockingStub> {

File: services/src/generated/main/grpc/io/grpc/reflection/v1/ServerReflectionGrpc.java
Patch:
@@ -192,7 +192,7 @@ protected ServerReflectionBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service ServerReflection.
+   * A stub to allow clients to do limited synchronous rpc calls to service ServerReflection.
    */
   public static final class ServerReflectionBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<ServerReflectionBlockingStub> {

File: services/src/generated/main/grpc/io/grpc/reflection/v1alpha/ServerReflectionGrpc.java
Patch:
@@ -192,7 +192,7 @@ protected ServerReflectionBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service ServerReflection.
+   * A stub to allow clients to do limited synchronous rpc calls to service ServerReflection.
    */
   public static final class ServerReflectionBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<ServerReflectionBlockingStub> {

File: services/src/generated/test/grpc/io/grpc/reflection/testing/AnotherDynamicServiceGrpc.java
Patch:
@@ -202,7 +202,7 @@ public io.grpc.reflection.testing.DynamicReply method(io.grpc.reflection.testing
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service AnotherDynamicService.
+   * A stub to allow clients to do limited synchronous rpc calls to service AnotherDynamicService.
    * <pre>
    * AnotherDynamicService
    * </pre>

File: services/src/generated/test/grpc/io/grpc/reflection/testing/AnotherReflectableServiceGrpc.java
Patch:
@@ -178,7 +178,7 @@ public io.grpc.reflection.testing.Reply method(io.grpc.reflection.testing.Reques
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service AnotherReflectableService.
+   * A stub to allow clients to do limited synchronous rpc calls to service AnotherReflectableService.
    */
   public static final class AnotherReflectableServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<AnotherReflectableServiceBlockingStub> {

File: services/src/generated/test/grpc/io/grpc/reflection/testing/DynamicServiceGrpc.java
Patch:
@@ -202,7 +202,7 @@ public io.grpc.reflection.testing.DynamicReply method(io.grpc.reflection.testing
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service DynamicService.
+   * A stub to allow clients to do limited synchronous rpc calls to service DynamicService.
    * <pre>
    * A DynamicService
    * </pre>

File: services/src/generated/test/grpc/io/grpc/reflection/testing/ReflectableServiceGrpc.java
Patch:
@@ -178,7 +178,7 @@ public io.grpc.reflection.testing.Reply method(io.grpc.reflection.testing.Reques
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service ReflectableService.
+   * A stub to allow clients to do limited synchronous rpc calls to service ReflectableService.
    */
   public static final class ReflectableServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<ReflectableServiceBlockingStub> {

File: testing-proto/src/generated/main/grpc/io/grpc/testing/protobuf/SimpleServiceGrpc.java
Patch:
@@ -394,7 +394,7 @@ public io.grpc.testing.protobuf.SimpleResponse unaryRpc(io.grpc.testing.protobuf
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service SimpleService.
+   * A stub to allow clients to do limited synchronous rpc calls to service SimpleService.
    * <pre>
    * A simple service for test.
    * </pre>

File: xds/src/generated/thirdparty/grpc/com/github/xds/service/orca/v3/OpenRcaServiceGrpc.java
Patch:
@@ -230,7 +230,7 @@ protected OpenRcaServiceBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service OpenRcaService.
+   * A stub to allow clients to do limited synchronous rpc calls to service OpenRcaService.
    * <pre>
    * Out-of-band (OOB) load reporting service for the additional load reporting
    * agent that does not sit in the request path. Reports are periodically sampled

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/discovery/v3/AggregatedDiscoveryServiceGrpc.java
Patch:
@@ -284,7 +284,7 @@ protected AggregatedDiscoveryServiceBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service AggregatedDiscoveryService.
+   * A stub to allow clients to do limited synchronous rpc calls to service AggregatedDiscoveryService.
    * <pre>
    * See https://github.com/envoyproxy/envoy-api#apis for a description of the role of
    * ADS and how it is intended to be used by a management server. ADS requests

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/load_stats/v3/LoadReportingServiceGrpc.java
Patch:
@@ -267,7 +267,7 @@ protected LoadReportingServiceBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service LoadReportingService.
+   * A stub to allow clients to do limited synchronous rpc calls to service LoadReportingService.
    */
   public static final class LoadReportingServiceBlockingStub
       extends io.grpc.stub.AbstractBlockingStub<LoadReportingServiceBlockingStub> {

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/rate_limit_quota/v3/RateLimitQuotaServiceGrpc.java
Patch:
@@ -207,7 +207,7 @@ protected RateLimitQuotaServiceBlockingV2Stub build(
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service RateLimitQuotaService.
+   * A stub to allow clients to do limited synchronous rpc calls to service RateLimitQuotaService.
    * <pre>
    * Defines the Rate Limit Quota Service (RLQS).
    * </pre>

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/status/v3/ClientStatusDiscoveryServiceGrpc.java
Patch:
@@ -258,7 +258,7 @@ public io.envoyproxy.envoy.service.status.v3.ClientStatusResponse fetchClientSta
   }
 
   /**
-   * A stub to allow clients to do llimited synchronous rpc calls to service ClientStatusDiscoveryService.
+   * A stub to allow clients to do limited synchronous rpc calls to service ClientStatusDiscoveryService.
    * <pre>
    * CSDS is Client Status Discovery Service. It can be used to get the status of
    * an xDS-compliant client from the management server's point of view. It can

File: xds/src/main/java/io/grpc/xds/client/ControlPlaneClient.java
Patch:
@@ -446,6 +446,7 @@ private void handleRpcStreamClosed(Status status) {
         // Reset the backoff sequence if had received a response, or backoff sequence
         // has never been initialized.
         retryBackoffPolicy = backoffPolicyProvider.get();
+        stopwatch.reset();
       }
 
       // FakeClock in tests isn't thread-safe. Schedule the retry timer before notifying callbacks

File: xds/src/test/java/io/grpc/xds/GrpcXdsClientImplTestBase.java
Patch:
@@ -3524,6 +3524,7 @@ public void streamClosedAndRetryWithBackoff() {
     call.verifyRequest(EDS, EDS_RESOURCE, "", "", NODE);
 
     // Management server closes the RPC stream with an error.
+    fakeClock.forwardNanos(1000L); // Make sure retry isn't based on stopwatch 0
     call.sendError(Status.UNKNOWN.asException());
     verify(ldsResourceWatcher, Mockito.timeout(1000).times(1))
         .onError(errorCaptor.capture());

File: api/src/main/java/io/grpc/TimeUtils.java
Patch:
@@ -17,10 +17,12 @@
 package io.grpc;
 
 import java.time.Duration;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 final class TimeUtils {
   private TimeUtils() {}
 
+  @IgnoreJRERequirement
   static long convertToNanos(Duration duration) {
     try {
       return duration.toNanos();

File: api/src/test/java/io/grpc/CallOptionsTest.java
Patch:
@@ -34,6 +34,7 @@
 import io.grpc.internal.SerializingExecutor;
 import java.time.Duration;
 import java.util.concurrent.Executor;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -152,6 +153,7 @@ public void withDeadlineAfter() {
   }
 
   @Test
+  @IgnoreJRERequirement
   public void withDeadlineAfterDuration() {
     Deadline actual = CallOptions.DEFAULT.withDeadlineAfter(Duration.ofMinutes(1L)).getDeadline();
     Deadline expected = Deadline.after(1, MINUTES);

File: api/src/test/java/io/grpc/TimeUtilsTest.java
Patch:
@@ -19,12 +19,14 @@
 import static org.junit.Assert.assertEquals;
 
 import java.time.Duration;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 /** Unit tests for {@link TimeUtils}. */
 @RunWith(JUnit4.class)
+@IgnoreJRERequirement
 public class TimeUtilsTest {
 
   @Test
@@ -56,4 +58,4 @@ public void testConvertTooLargeNegativeDuration() {
 
     assertEquals(Long.MIN_VALUE, TimeUtils.convertToNanos(duration));
   }
-}
\ No newline at end of file
+}

File: core/src/test/java/io/grpc/internal/InstantTimeProviderTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.time.Instant;
 import java.util.concurrent.TimeUnit;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -28,6 +29,7 @@
  * Unit tests for {@link InstantTimeProvider}.
  */
 @RunWith(JUnit4.class)
+@IgnoreJRERequirement
 public class InstantTimeProviderTest {
   @Test
   public void testInstantCurrentTimeNanos() throws Exception {

File: interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java
Patch:
@@ -78,6 +78,7 @@
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.ThreadSafe;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /** Client for xDS interop tests. */
 public final class XdsTestClient {
@@ -261,6 +262,7 @@ private static RpcType parseRpc(String rpc) {
     }
   }
 
+  @IgnoreJRERequirement // OpenTelemetry uses Java 8+ APIs
   private void run() {
     if (enableCsmObservability) {
       csmObservability = CsmObservability.newBuilder()

File: interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java
Patch:
@@ -57,6 +57,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /** Interop test server that implements the xDS testing service. */
 public final class XdsTestServer {
@@ -193,6 +194,7 @@ void parseArgs(String[] args) {
   }
 
   @SuppressWarnings("AddressSelection")
+  @IgnoreJRERequirement // OpenTelemetry uses Java 8+ APIs
   void start() throws Exception {
     if (enableCsmObservability) {
       csmObservability = CsmObservability.newBuilder()

File: netty/src/main/java/io/grpc/netty/InternalProtocolNegotiators.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.grpc.netty;
 
+import com.google.common.base.Optional;
 import io.grpc.ChannelLogger;
 import io.grpc.internal.ObjectPool;
 import io.grpc.netty.ProtocolNegotiators.ClientTlsHandler;
@@ -24,7 +25,6 @@
 import io.netty.channel.ChannelHandler;
 import io.netty.handler.ssl.SslContext;
 import io.netty.util.AsciiString;
-import java.util.Optional;
 import java.util.concurrent.Executor;
 
 /**
@@ -72,7 +72,7 @@ public void close() {
    * may happen immediately, even before the TLS Handshake is complete.
    */
   public static InternalProtocolNegotiator.ProtocolNegotiator tls(SslContext sslContext) {
-    return tls(sslContext, null, Optional.empty());
+    return tls(sslContext, null, Optional.absent());
   }
 
   /**
@@ -170,7 +170,7 @@ public static ChannelHandler clientTlsHandler(
       ChannelHandler next, SslContext sslContext, String authority,
       ChannelLogger negotiationLogger) {
     return new ClientTlsHandler(next, sslContext, authority, null, negotiationLogger,
-        Optional.empty());
+        Optional.absent());
   }
 
   public static class ProtocolNegotiationHandler

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import static io.grpc.internal.GrpcUtil.KEEPALIVE_TIME_NANOS_DISABLED;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Optional;
 import com.google.common.base.Ticker;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.CheckReturnValue;
@@ -63,7 +64,6 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Optional;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
@@ -652,7 +652,7 @@ static ProtocolNegotiator createProtocolNegotiatorByType(
       case PLAINTEXT_UPGRADE:
         return ProtocolNegotiators.plaintextUpgrade();
       case TLS:
-        return ProtocolNegotiators.tls(sslContext, executorPool, Optional.empty());
+        return ProtocolNegotiators.tls(sslContext, executorPool, Optional.absent());
       default:
         throw new IllegalArgumentException("Unsupported negotiationType: " + negotiationType);
     }

File: netty/src/test/java/io/grpc/netty/NettyAdaptiveCumulatorTest.java
Patch:
@@ -40,7 +40,6 @@
 import io.netty.buffer.UnpooledByteBufAllocator;
 import java.util.Collection;
 import java.util.List;
-import java.util.stream.Collectors;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -55,7 +54,7 @@
 public class NettyAdaptiveCumulatorTest {
 
   private static Collection<Object[]> cartesianProductParams(List<?>... lists) {
-    return Lists.cartesianProduct(lists).stream().map(List::toArray).collect(Collectors.toList());
+    return Lists.transform(Lists.cartesianProduct(lists), List::toArray);
   }
 
   @RunWith(JUnit4.class)

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -39,6 +39,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
+import com.google.common.base.Optional;
 import com.google.common.base.Strings;
 import com.google.common.base.Ticker;
 import com.google.common.io.ByteStreams;
@@ -105,7 +106,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Optional;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
@@ -803,7 +803,7 @@ public void tlsNegotiationServerExecutorShouldSucceed() throws Exception {
         .keyManager(clientCert, clientKey)
         .build();
     ProtocolNegotiator negotiator = ProtocolNegotiators.tls(clientContext, clientExecutorPool,
-        Optional.empty());
+        Optional.absent());
     // after starting the client, the Executor in the client pool should be used
     assertEquals(true, clientExecutorPool.isInUse());
     final NettyClientTransport transport = newTransport(negotiator);

File: s2a/src/main/java/io/grpc/s2a/internal/handshaker/S2AProtocolNegotiatorFactory.java
Patch:
@@ -253,7 +253,7 @@ public void onSuccess(SslContext sslContext) {
                   InternalProtocolNegotiators.tls(
                           sslContext,
                           SharedResourcePool.forResource(GrpcUtil.SHARED_CHANNEL_EXECUTOR),
-                          Optional.of(new Runnable() {
+                          com.google.common.base.Optional.of(new Runnable() {
                             @Override
                             public void run() {
                               s2aStub.close();
@@ -278,4 +278,4 @@ public void onFailure(Throwable t) {
   }
 
   private S2AProtocolNegotiatorFactory() {}
-}
\ No newline at end of file
+}

File: stub/src/main/java/io/grpc/stub/AbstractStub.java
Patch:
@@ -33,6 +33,7 @@
 import javax.annotation.CheckReturnValue;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.ThreadSafe;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /**
  * Common base type for stub implementations. Stub configuration is immutable; changing the
@@ -152,6 +153,7 @@ public final S withDeadlineAfter(long duration, TimeUnit unit) {
   }
 
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/11657")
+  @IgnoreJRERequirement
   public final S withDeadlineAfter(Duration duration) {
     return withDeadlineAfter(convert(duration), TimeUnit.NANOSECONDS);
   }

File: stub/src/test/java/io/grpc/stub/AbstractStubTest.java
Patch:
@@ -28,6 +28,7 @@
 import io.grpc.stub.AbstractStub.StubFactory;
 import io.grpc.stub.AbstractStubTest.NoopStub;
 import java.time.Duration;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -54,6 +55,7 @@ public NoopStub newStub(Channel channel, CallOptions callOptions) {
   }
 
   @Test
+  @IgnoreJRERequirement
   public void testDuration() {
     NoopStub stub = NoopStub.newStub(new StubFactory<NoopStub>() {
       @Override

File: util/src/test/java/io/grpc/util/AdvancedTlsX509TrustManagerTest.java
Patch:
@@ -44,13 +44,15 @@
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
 import javax.net.ssl.SSLSocket;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 /** Unit tests for {@link AdvancedTlsX509TrustManager}. */
 @RunWith(JUnit4.class)
+@IgnoreJRERequirement
 public class AdvancedTlsX509TrustManagerTest {
 
   private static final String CA_PEM_FILE = "ca.pem";

File: xds/src/main/java/io/grpc/xds/XdsClusterResource.java
Patch:
@@ -215,7 +215,7 @@ private static StructOrError<CdsUpdate.Builder> parseNonAggregateCluster(
           continue;
         }
         if (threshold.hasMaxRequests()) {
-          maxConcurrentRequests = (long) threshold.getMaxRequests().getValue();
+          maxConcurrentRequests = Integer.toUnsignedLong(threshold.getMaxRequests().getValue());
         }
       }
     }

File: xds/src/main/java/io/grpc/xds/XdsClusterResource.java
Patch:
@@ -67,6 +67,8 @@ class XdsClusterResource extends XdsResourceType<CdsUpdate> {
   static final String AGGREGATE_CLUSTER_TYPE_NAME = "envoy.clusters.aggregate";
   static final String ADS_TYPE_URL_CDS =
       "type.googleapis.com/envoy.config.cluster.v3.Cluster";
+  private static final String TYPE_URL_CLUSTER_CONFIG =
+      "type.googleapis.com/envoy.extensions.clusters.aggregate.v3.ClusterConfig";
   private static final String TYPE_URL_UPSTREAM_TLS_CONTEXT =
       "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext";
   private static final String TYPE_URL_UPSTREAM_TLS_CONTEXT_V2 =

File: xds/src/main/java/io/grpc/xds/XdsRouteConfigureResource.java
Patch:
@@ -78,6 +78,8 @@ class XdsRouteConfigureResource extends XdsResourceType<RdsUpdate> {
       "type.googleapis.com/envoy.config.route.v3.RouteConfiguration";
   private static final String TYPE_URL_FILTER_CONFIG =
       "type.googleapis.com/envoy.config.route.v3.FilterConfig";
+  @VisibleForTesting
+  static final String HASH_POLICY_FILTER_STATE_KEY = "io.grpc.channel_id";
   // TODO(zdapeng): need to discuss how to handle unsupported values.
   private static final Set<Status.Code> SUPPORTED_RETRYABLE_CODES =
       Collections.unmodifiableSet(EnumSet.of(

File: xds/src/test/java/io/grpc/xds/GrpcXdsClientImplDataTest.java
Patch:
@@ -140,7 +140,6 @@
 import io.grpc.xds.client.XdsClient;
 import io.grpc.xds.client.XdsResourceType;
 import io.grpc.xds.client.XdsResourceType.ResourceInvalidException;
-import io.grpc.xds.client.XdsResourceType.StructOrError;
 import io.grpc.xds.internal.Matchers;
 import io.grpc.xds.internal.Matchers.FractionMatcher;
 import io.grpc.xds.internal.Matchers.HeaderMatcher;
@@ -939,7 +938,7 @@ public void parseRouteAction_withHashPolicies() {
                 io.envoyproxy.envoy.config.route.v3.RouteAction.HashPolicy.newBuilder()
                     .setFilterState(
                         FilterState.newBuilder()
-                            .setKey(XdsResourceType.HASH_POLICY_FILTER_STATE_KEY)))
+                            .setKey(XdsRouteConfigureResource.HASH_POLICY_FILTER_STATE_KEY)))
             .addHashPolicy(
                 io.envoyproxy.envoy.config.route.v3.RouteAction.HashPolicy.newBuilder()
                     .setQueryParameter(

File: xds/src/main/java/io/grpc/xds/client/BootstrapperImpl.java
Patch:
@@ -248,7 +248,9 @@ private List<ServerInfo> parseServerInfos(List<?> rawServerConfigs, XdsLogger lo
       Object implSpecificConfig = getImplSpecificConfig(serverConfig, serverUri);
 
       boolean ignoreResourceDeletion = false;
-      List<String> serverFeatures = JsonUtil.getListOfStrings(serverConfig, "server_features");
+      // "For forward compatibility reasons, the client will ignore any entry in the list that it
+      // does not understand, regardless of type."
+      List<?> serverFeatures = JsonUtil.getList(serverConfig, "server_features");
       if (serverFeatures != null) {
         logger.log(XdsLogLevel.INFO, "Server features: {0}", serverFeatures);
         ignoreResourceDeletion = serverFeatures.contains(SERVER_FEATURE_IGNORE_RESOURCE_DELETION);

File: xds/src/test/java/io/grpc/xds/XdsClientFallbackTest.java
Patch:
@@ -428,7 +428,7 @@ public void fallbackFromBadUrlToGoodOne() {
 
   @Test
   public void testGoodUrlFollowedByBadUrl() {
-    // Setup xdsClient to fail on stream creation
+    // xdsClient should succeed in stream creation as it doesn't need to use the bad url
     String garbageUri = "some. garbage";
     String validUri = "localhost:" + mainXdsServer.getServer().getPort();
 
@@ -437,7 +437,6 @@ public void testGoodUrlFollowedByBadUrl() {
         new ExponentialBackoffPolicy.Provider(), MessagePrinter.INSTANCE, xdsClientMetricReporter);
 
     client.watchXdsResource(XdsListenerResource.getInstance(), MAIN_SERVER, ldsWatcher);
-    fakeClock.forwardTime(20, TimeUnit.SECONDS);
     verify(ldsWatcher, timeout(5000)).onChanged(
         XdsListenerResource.LdsUpdate.forApiListener(
             MAIN_HTTP_CONNECTION_MANAGER));

File: api/src/testFixtures/java/io/grpc/testing/DeadlineSubject.java
Patch:
@@ -67,7 +67,7 @@ public void of(Deadline expected) {
         if (Math.abs(actualNanos - expectedNanos) > deltaNanos) {
           failWithoutActual(
               fact("expected", expectedNanos / NANOSECONDS_IN_A_SECOND),
-              fact("but was", expectedNanos  / NANOSECONDS_IN_A_SECOND),
+              fact("but was", actualNanos  / NANOSECONDS_IN_A_SECOND),
               fact("outside tolerance in seconds",  deltaNanos  / NANOSECONDS_IN_A_SECOND));
         }
       }

File: core/src/test/java/io/grpc/internal/InstantTimeProviderTest.java
Patch:
@@ -44,7 +44,7 @@ public void testInstantCurrentTimeNanos() throws Exception {
           + instantNow.getNano();
 
     // Validate the time returned is close to the expected value within a tolerance
-    // (i,e 10 millisecond tolerance in nanoseconds).
-    assertThat(actualTimeNanos).isWithin(10_000_000L).of(expectedTimeNanos);
+    // (i,e 1000 millisecond (1 second) tolerance in nanoseconds).
+    assertThat(actualTimeNanos).isWithin(1000_000_000L).of(expectedTimeNanos);
   }
 }

File: binder/src/test/java/io/grpc/binder/internal/BinderServerTransportTest.java
Patch:
@@ -23,7 +23,6 @@
 import static org.mockito.ArgumentMatchers.isNull;
 import static org.mockito.Mockito.when;
 import static org.robolectric.Shadows.shadowOf;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import android.os.IBinder;
 import android.os.Looper;
@@ -44,14 +43,12 @@
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.LooperMode;
 
 /**
  * Low-level server-side transport tests for binder channel. Like BinderChannelSmokeTest, this
  * convers edge cases not exercised by AbstractTransportTest, but it deals with the
  * binderTransport.BinderServerTransport directly.
  */
-@LooperMode(PAUSED)
 @RunWith(RobolectricTestRunner.class)
 public final class BinderServerTransportTest {
 

File: binder/src/test/java/io/grpc/binder/internal/ServiceBindingTest.java
Patch:
@@ -21,7 +21,6 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 import static org.robolectric.Shadows.shadowOf;
-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;
 
 import android.app.Application;
 import android.app.admin.DevicePolicyManager;
@@ -48,11 +47,9 @@
 import org.mockito.junit.MockitoRule;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
-import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.ShadowDevicePolicyManager;
 
-@LooperMode(PAUSED)
 @RunWith(RobolectricTestRunner.class)
 public final class ServiceBindingTest {
 

File: binder/src/main/java/io/grpc/binder/internal/BinderTransport.java
Patch:
@@ -299,7 +299,7 @@ protected boolean setOutgoingBinder(OneWayBinderProxy binder) {
 
   @Override
   public synchronized void binderDied() {
-    shutdownInternal(Status.UNAVAILABLE.withDescription("binderDied"), true);
+    shutdownInternal(Status.UNAVAILABLE.withDescription("Peer process crashed, exited or was killed (binderDied)"), true);
   }
 
   @GuardedBy("this")

File: api/src/main/java/io/grpc/StatusRuntimeException.java
Patch:
@@ -30,7 +30,7 @@ public class StatusRuntimeException extends RuntimeException {
   private final Metadata trailers;
 
   /**
-   * Constructs the exception with both a status. See also {@link Status#asRuntimeException()}.
+   * Constructs the exception with a status. See also {@link Status#asRuntimeException()}.
    *
    * @since 1.0.0
    */

File: api/src/main/java/io/grpc/CallCredentials.java
Patch:
@@ -43,7 +43,7 @@ public abstract class CallCredentials {
    * <p>It is called for each individual RPC, within the {@link Context} of the call, before the
    * stream is about to be created on a transport. Implementations should not block in this
    * method. If metadata is not immediately available, e.g., needs to be fetched from network, the
-   * implementation may give the {@code applier} to an asynchronous task which will eventually call
+   * implementation may give the {@code appExecutor} an asynchronous task which will eventually call
    * the {@code applier}. The RPC proceeds only after the {@code applier} is called.
    *
    * @param requestInfo request-related information

File: core/src/test/java/io/grpc/internal/RetriableStreamTest.java
Patch:
@@ -2592,9 +2592,7 @@ public void run() {
               .closed(Status.fromCode(NON_FATAL_STATUS_CODE_1), REFUSED, new Metadata());
         } finally {
           transport2Lock.unlock();
-          if (transport1Lock.tryLock()) {
-            transport1Lock.unlock();
-          }
+          transport1Lock.unlock();
         }
       }
     }, "Thread-transport2");

File: s2a/src/test/java/io/grpc/s2a/internal/handshaker/SslContextFactoryTest.java
Patch:
@@ -142,7 +142,7 @@ public void createForClient_getsBadTlsVersionsFromServer_throwsError() throws Ex
 
     assertThat(expected)
         .hasMessageThat()
-        .contains("Set of TLS versions received from S2A server is empty.");
+        .contains("Set of TLS versions received from S2A server is empty or not supported.");
   }
 
   @Test

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -63,6 +63,7 @@
 import io.grpc.NameResolver.ResolutionResult;
 import io.grpc.NameResolverProvider;
 import io.grpc.Status;
+import io.grpc.StatusOr;
 import io.grpc.StringMarshaller;
 import io.grpc.internal.FakeClock.ScheduledTask;
 import io.grpc.internal.ManagedChannelImplBuilder.UnsupportedClientTransportFactoryBuilder;
@@ -615,7 +616,7 @@ private void deliverResolutionResult() {
     // the NameResolver.
     ResolutionResult resolutionResult =
         ResolutionResult.newBuilder()
-            .setAddresses(servers)
+            .setAddressesOrError(StatusOr.fromValue(servers))
             .setAttributes(Attributes.EMPTY)
             .build();
     nameResolverListenerCaptor.getValue().onResult(resolutionResult);

File: netty/src/main/java/io/grpc/netty/UdsNameResolverProvider.java
Patch:
@@ -34,7 +34,7 @@ public final class UdsNameResolverProvider extends NameResolverProvider {
   @Override
   public UdsNameResolver newNameResolver(URI targetUri, NameResolver.Args args) {
     if (SCHEME.equals(targetUri.getScheme())) {
-      return new UdsNameResolver(targetUri.getAuthority(), getTargetPathFromUri(targetUri));
+      return new UdsNameResolver(targetUri.getAuthority(), getTargetPathFromUri(targetUri), args);
     } else {
       return null;
     }

File: xds/src/test/java/io/grpc/xds/ClusterResolverLoadBalancerTest.java
Patch:
@@ -52,6 +52,7 @@
 import io.grpc.NameResolverRegistry;
 import io.grpc.Status;
 import io.grpc.Status.Code;
+import io.grpc.StatusOr;
 import io.grpc.SynchronizationContext;
 import io.grpc.internal.BackoffPolicy;
 import io.grpc.internal.FakeClock;
@@ -1306,7 +1307,8 @@ public void shutdown() {
     }
 
     private void deliverEndpointAddresses(List<EquivalentAddressGroup> addresses) {
-      listener.onResult(ResolutionResult.newBuilder().setAddresses(addresses).build());
+      listener.onResult(ResolutionResult.newBuilder()
+          .setAddressesOrError(StatusOr.fromValue(addresses)).build());
     }
 
     private void deliverError(Status error) {

File: xds/src/test/java/io/grpc/xds/XdsSecurityClientServerTest.java
Patch:
@@ -43,6 +43,7 @@
 import io.grpc.Server;
 import io.grpc.ServerCredentials;
 import io.grpc.Status;
+import io.grpc.StatusOr;
 import io.grpc.StatusRuntimeException;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.GrpcCleanupRule;
@@ -520,7 +521,8 @@ public void refresh() {
       }
 
       void resolved() {
-        ResolutionResult.Builder builder = ResolutionResult.newBuilder().setAddresses(servers);
+        ResolutionResult.Builder builder = ResolutionResult.newBuilder()
+            .setAddressesOrError(StatusOr.fromValue(servers));
         listener.onResult(builder.build());
       }
 

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1483,7 +1483,7 @@ void onStateChange(InternalSubchannel is, ConnectivityStateInfo newState) {
       }
 
       final InternalSubchannel internalSubchannel = new InternalSubchannel(
-          addressGroup,
+          CreateSubchannelArgs.newBuilder().setAddresses(addressGroup).build(),
           authority, userAgent, backoffPolicyProvider, oobTransportFactory,
           oobTransportFactory.getScheduledExecutorService(), stopwatchSupplier, syncContext,
           // All callback methods are run from syncContext
@@ -1915,7 +1915,7 @@ void onNotInUse(InternalSubchannel is) {
       }
 
       final InternalSubchannel internalSubchannel = new InternalSubchannel(
-          args.getAddresses(),
+          args,
           authority(),
           userAgent,
           backoffPolicyProvider,

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/Platform.java
Patch:
@@ -283,7 +283,7 @@ private static boolean isAtLeastAndroid41() {
 
   /**
    * Select the first recognized security provider according to the preference order returned by
-   * {@link Security#getProviders}. If a recognized provider is not found then warn but continue.
+   * {@link Security#getProviders}.
    */
   private static Provider getAndroidSecurityProvider() {
     Provider[] providers = Security.getProviders();
@@ -295,7 +295,6 @@ private static Provider getAndroidSecurityProvider() {
         }
       }
     }
-    logger.log(Level.WARNING, "Unable to find Conscrypt");
     return null;
   }
 

File: s2a/src/main/java/io/grpc/s2a/handshaker/tokenmanager/AccessTokenManager.java
Patch:
@@ -27,7 +27,6 @@ public final class AccessTokenManager {
   private final TokenFetcher tokenFetcher;
 
   /** Creates an {@code AccessTokenManager} based on the environment where the application runs. */
-  @SuppressWarnings("RethrowReflectiveOperationExceptionAsLinkageError")
   public static Optional<AccessTokenManager> create() {
     Optional<?> tokenFetcher;
     try {
@@ -38,7 +37,7 @@ public static Optional<AccessTokenManager> create() {
     } catch (ClassNotFoundException e) {
       tokenFetcher = Optional.empty();
     } catch (ReflectiveOperationException e) {
-      throw new AssertionError(e);
+      throw new LinkageError(e.getMessage(), e);
     }
     return tokenFetcher.isPresent()
         ? Optional.of(new AccessTokenManager((TokenFetcher) tokenFetcher.get()))

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -815,10 +815,12 @@ private void cleanUpRoutes(String error) {
       // the config selector handles the error message itself. Once the LB API allows providing
       // failure information for addresses yet still providing a service config, the config seector
       // could be avoided.
+      String errorWithNodeId =
+          error + ", xDS node ID: " + xdsClient.getBootstrapInfo().node().getId();
       listener.onResult(ResolutionResult.newBuilder()
           .setAttributes(Attributes.newBuilder()
             .set(InternalConfigSelector.KEY,
-              new FailingConfigSelector(Status.UNAVAILABLE.withDescription(error)))
+              new FailingConfigSelector(Status.UNAVAILABLE.withDescription(errorWithNodeId)))
             .build())
           .setServiceConfig(emptyServiceConfig)
           .build());

File: core/src/main/java/io/grpc/internal/ReadableBuffers.java
Patch:
@@ -415,6 +415,7 @@ public ByteBuffer getByteBuffer() {
     public InputStream detach() {
       ReadableBuffer detachedBuffer = buffer;
       buffer = buffer.readBytes(0);
+      detachedBuffer.touch();
       return new BufferInputStream(detachedBuffer);
     }
 

File: xds/src/main/java/io/grpc/xds/client/LoadStatsManager2.java
Patch:
@@ -91,7 +91,7 @@ private synchronized void releaseClusterDropCounter(
       String cluster, @Nullable String edsServiceName) {
     checkState(allDropStats.containsKey(cluster)
             && allDropStats.get(cluster).containsKey(edsServiceName),
-        "stats for cluster %s, edsServiceName %s not exits", cluster, edsServiceName);
+        "stats for cluster %s, edsServiceName %s do not exist", cluster, edsServiceName);
     ReferenceCounted<ClusterDropStats> ref = allDropStats.get(cluster).get(edsServiceName);
     ref.release();
   }

File: rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java
Patch:
@@ -329,7 +329,7 @@ final CachedRouteLookupResponse get(final RouteLookupRequest request) {
       final CacheEntry cacheEntry;
       cacheEntry = linkedHashLruCache.read(request);
       if (cacheEntry == null) {
-        logger.log(ChannelLogLevel.DEBUG, "No cache entry found, making a new lrs request");
+        logger.log(ChannelLogLevel.DEBUG, "No cache entry found, making a new RLS request");
         PendingCacheEntry pendingEntry = pendingCallCache.get(request);
         if (pendingEntry != null) {
           return CachedRouteLookupResponse.pendingResponse(pendingEntry);
@@ -988,7 +988,7 @@ public PickResult pickSubchannel(PickSubchannelArgs args) {
           new Object[]{serviceName, methodName, args.getHeaders(), response});
 
       if (response.getHeaderData() != null && !response.getHeaderData().isEmpty()) {
-        logger.log(ChannelLogLevel.DEBUG, "Updating LRS metadata from the LRS response headers");
+        logger.log(ChannelLogLevel.DEBUG, "Updating RLS metadata from the RLS response headers");
         Metadata headers = args.getHeaders();
         headers.discardAll(RLS_DATA_KEY);
         headers.put(RLS_DATA_KEY, response.getHeaderData());
@@ -997,7 +997,7 @@ public PickResult pickSubchannel(PickSubchannelArgs args) {
       logger.log(ChannelLogLevel.DEBUG, "defaultTarget = {0}", defaultTarget);
       boolean hasFallback = defaultTarget != null && !defaultTarget.isEmpty();
       if (response.hasData()) {
-        logger.log(ChannelLogLevel.DEBUG, "LRS response has data, proceed with selecting a picker");
+        logger.log(ChannelLogLevel.DEBUG, "RLS response has data, proceed with selecting a picker");
         ChildPolicyWrapper childPolicyWrapper = response.getChildPolicyWrapper();
         SubchannelPicker picker =
             (childPolicyWrapper != null) ? childPolicyWrapper.getPicker() : null;

File: util/src/main/java/io/grpc/util/RoundRobinLoadBalancer.java
Patch:
@@ -97,8 +97,8 @@ private SubchannelPicker createReadyPicker(Collection<ChildLbState> children) {
 
   @Override
   protected ChildLbState createChildLbState(Object key, Object policyConfig,
-      SubchannelPicker initialPicker, ResolvedAddresses resolvedAddresses) {
-    return new ChildLbState(key, pickFirstLbProvider, policyConfig, initialPicker) {
+      ResolvedAddresses resolvedAddresses) {
+    return new ChildLbState(key, pickFirstLbProvider, policyConfig) {
       @Override
       protected ChildLbStateHelper createChildHelper() {
         return new ChildLbStateHelper() {

File: xds/src/main/java/io/grpc/xds/ClusterManagerLoadBalancer.java
Patch:
@@ -85,7 +85,7 @@ protected Map<Object, ChildLbState> createChildLbMap(ResolvedAddresses resolvedA
         ChildLbState child = getChildLbState(entry.getKey());
         if (child == null) {
           child = new ClusterManagerLbState(entry.getKey(),
-              entry.getValue().getProvider(), entry.getValue().getConfig(), getInitialPicker());
+              entry.getValue().getProvider(), entry.getValue().getConfig());
         }
         newChildPolicies.put(entry.getKey(), child);
       }
@@ -202,8 +202,8 @@ private class ClusterManagerLbState extends ChildLbState {
     ScheduledHandle deletionTimer;
 
     public ClusterManagerLbState(Object key, LoadBalancerProvider policyProvider,
-        Object childConfig, SubchannelPicker initialPicker) {
-      super(key, policyProvider, childConfig, initialPicker);
+        Object childConfig) {
+      super(key, policyProvider, childConfig);
     }
 
     @Override

File: xds/src/main/java/io/grpc/xds/RingHashLoadBalancer.java
Patch:
@@ -228,8 +228,8 @@ protected void updateOverallBalancingState() {
 
   @Override
   protected ChildLbState createChildLbState(Object key, Object policyConfig,
-      SubchannelPicker initialPicker, ResolvedAddresses resolvedAddresses) {
-    return new ChildLbState(key, lazyLbFactory, null, EMPTY_PICKER);
+      ResolvedAddresses resolvedAddresses) {
+    return new ChildLbState(key, lazyLbFactory, null);
   }
 
   private Status validateAddrList(List<EquivalentAddressGroup> addrList) {

File: xds/src/main/java/io/grpc/xds/WeightedRoundRobinLoadBalancer.java
Patch:
@@ -29,7 +29,6 @@
 import io.grpc.Deadline.Ticker;
 import io.grpc.DoubleHistogramMetricInstrument;
 import io.grpc.EquivalentAddressGroup;
-import io.grpc.ExperimentalApi;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
 import io.grpc.LongCounterMetricInstrument;
@@ -87,7 +86,6 @@
  *  </pre>
  *  See related documentation: https://cloud.google.com/service-mesh/legacy/load-balancing-apis/proxyless-configure-advanced-traffic-management#custom-lb-config
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/9885")
 final class WeightedRoundRobinLoadBalancer extends MultiChildLoadBalancer {
 
   private static final LongCounterMetricInstrument RR_FALLBACK_COUNTER;

File: xds/src/main/java/io/grpc/xds/WeightedRoundRobinLoadBalancerProvider.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import io.grpc.Deadline;
-import io.grpc.ExperimentalApi;
 import io.grpc.Internal;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancer.Helper;
@@ -32,7 +31,6 @@
 /**
  * Provides a {@link WeightedRoundRobinLoadBalancer}.
  * */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/9885")
 @Internal
 public final class WeightedRoundRobinLoadBalancerProvider extends LoadBalancerProvider {
 

File: util/src/test/java/io/grpc/util/OutlierDetectionLoadBalancerTest.java
Patch:
@@ -569,7 +569,7 @@ public void successRateOneOutlier_configChange() {
     loadBalancer.acceptResolvedAddresses(buildResolvedAddress(config, servers));
 
     // The PickFirstLeafLB has an extra level of indirection because of health
-    int expectedStateChanges = PickFirstLoadBalancerProvider.isEnabledNewPickFirst() ? 16 : 12;
+    int expectedStateChanges = PickFirstLoadBalancerProvider.isEnabledNewPickFirst() ? 8 : 12;
     generateLoad(ImmutableMap.of(subchannel2, Status.DEADLINE_EXCEEDED), expectedStateChanges);
 
     // Move forward in time to a point where the detection timer has fired.
@@ -604,7 +604,7 @@ public void successRateOneOutlier_unejected() {
     assertEjectedSubchannels(ImmutableSet.of(ImmutableSet.copyOf(servers.get(0).getAddresses())));
 
     // Now we produce more load, but the subchannel has started working and is no longer an outlier.
-    int expectedStateChanges = PickFirstLoadBalancerProvider.isEnabledNewPickFirst() ? 16 : 12;
+    int expectedStateChanges = PickFirstLoadBalancerProvider.isEnabledNewPickFirst() ? 8 : 12;
     generateLoad(ImmutableMap.of(), expectedStateChanges);
 
     // Move forward in time to a point where the detection timer has fired.

File: xds/src/test/java/io/grpc/xds/WeightedRoundRobinLoadBalancerTest.java
Patch:
@@ -536,8 +536,8 @@ public void emptyConfig() {
     verify(helper, times(3)).createSubchannel(
             any(CreateSubchannelArgs.class));
     verify(helper).updateBalancingState(eq(CONNECTING), pickerCaptor.capture());
-    assertThat(pickerCaptor.getValue().getClass().getName())
-        .isEqualTo("io.grpc.util.RoundRobinLoadBalancer$EmptyPicker");
+    assertThat(pickerCaptor.getValue().pickSubchannel(mockArgs))
+        .isEqualTo(PickResult.withNoResult());
     int expectedCount = isEnabledHappyEyeballs() ? servers.size() + 1 : 1;
     assertThat(fakeClock.forwardTime(11, TimeUnit.SECONDS)).isEqualTo( expectedCount);
   }

File: xds/src/main/java/io/grpc/xds/client/XdsClientImpl.java
Patch:
@@ -281,7 +281,7 @@ public <T extends ResourceUpdate> void cancelXdsResourceWatch(XdsResourceType<T>
       @SuppressWarnings("unchecked")
       public void run() {
         ResourceSubscriber<T> subscriber =
-            (ResourceSubscriber<T>) resourceSubscribers.get(type).get(resourceName);;
+            (ResourceSubscriber<T>) resourceSubscribers.get(type).get(resourceName);
         subscriber.removeWatcher(watcher);
         if (!subscriber.isWatched()) {
           subscriber.cancelResourceWatch();

File: xds/src/test/java/io/grpc/xds/GrpcXdsClientImplV3Test.java
Patch:
@@ -118,6 +118,7 @@
 import org.mockito.ArgumentMatcher;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
+import org.mockito.verification.VerificationMode;
 
 /**
  * Tests for {@link XdsClientImpl} with protocol version v3.
@@ -205,8 +206,8 @@ private DiscoveryRpcCallV3(StreamObserver<DiscoveryRequest> requestObserver,
     @Override
     protected void verifyRequest(
         XdsResourceType<?> type, List<String> resources, String versionInfo, String nonce,
-        EnvoyProtoData.Node node) {
-      verify(requestObserver, Mockito.timeout(2000)).onNext(argThat(new DiscoveryRequestMatcher(
+        EnvoyProtoData.Node node, VerificationMode verificationMode) {
+      verify(requestObserver, verificationMode).onNext(argThat(new DiscoveryRequestMatcher(
           node.toEnvoyProtoNode(), versionInfo, resources, type.typeUrl(), nonce, null, null)));
     }
 

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -330,7 +330,9 @@ public void run() {
             resolutionResultBuilder.setAttributes(result.attributes);
           }
         }
-        savedListener.onResult(resolutionResultBuilder.build());
+        syncContext.execute(() -> {
+          savedListener.onResult2(resolutionResultBuilder.build());
+        });
       } catch (IOException e) {
         savedListener.onError(
             Status.UNAVAILABLE.withDescription("Unable to resolve host " + host).withCause(e));

File: interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java
Patch:
@@ -44,6 +44,7 @@
 import io.grpc.Status;
 import io.grpc.gcp.csm.observability.CsmObservability;
 import io.grpc.protobuf.services.ProtoReflectionService;
+import io.grpc.protobuf.services.ProtoReflectionServiceV1;
 import io.grpc.services.AdminInterface;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.integration.Messages.ClientConfigureRequest;
@@ -277,6 +278,7 @@ private void run() {
             .addService(new XdsStatsImpl())
             .addService(new ConfigureUpdateServiceImpl())
             .addService(ProtoReflectionService.newInstance())
+            .addService(ProtoReflectionServiceV1.newInstance())
             .addServices(AdminInterface.getStandardServices())
             .build();
     try {

File: interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java
Patch:
@@ -37,6 +37,7 @@
 import io.grpc.netty.NettyServerBuilder;
 import io.grpc.protobuf.services.HealthStatusManager;
 import io.grpc.protobuf.services.ProtoReflectionService;
+import io.grpc.protobuf.services.ProtoReflectionServiceV1;
 import io.grpc.services.AdminInterface;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.integration.Messages.Payload;
@@ -220,6 +221,7 @@ void start() throws Exception {
               .addService(new XdsUpdateHealthServiceImpl(health))
               .addService(health.getHealthService())
               .addService(ProtoReflectionService.newInstance())
+              .addService(ProtoReflectionServiceV1.newInstance())
               .addServices(AdminInterface.getStandardServices())
               .build();
       maintenanceServer.start();
@@ -268,6 +270,7 @@ void start() throws Exception {
               .addService(new XdsUpdateHealthServiceImpl(health))
               .addService(health.getHealthService())
               .addService(ProtoReflectionService.newInstance())
+              .addService(ProtoReflectionServiceV1.newInstance())
               .addServices(AdminInterface.getStandardServices())
               .build();
       server.start();

File: alts/src/test/java/io/grpc/alts/internal/FakeTsiHandshaker.java
Patch:
@@ -68,6 +68,7 @@ enum State {
     SERVER_FINISHED;
 
     // Returns the next State. In order to advance to sendState=N, receiveState must be N-1.
+    @SuppressWarnings("EnumOrdinal")
     public State next() {
       if (ordinal() + 1 < values().length) {
         return values()[ordinal() + 1];

File: api/src/main/java/io/grpc/InternalMethodDescriptor.java
Patch:
@@ -30,10 +30,12 @@ public InternalMethodDescriptor(InternalKnownTransport transport) {
     this.transport = checkNotNull(transport, "transport");
   }
 
+  @SuppressWarnings("EnumOrdinal")
   public Object geRawMethodName(MethodDescriptor<?, ?> descriptor) {
     return descriptor.getRawMethodName(transport.ordinal());
   }
 
+  @SuppressWarnings("EnumOrdinal")
   public void setRawMethodName(MethodDescriptor<?, ?> descriptor, Object o) {
     descriptor.setRawMethodName(transport.ordinal(), o);
   }

File: util/src/test/java/io/grpc/util/UtilServerInterceptorsTest.java
Patch:
@@ -43,7 +43,7 @@
 @RunWith(JUnit4.class)
 public class UtilServerInterceptorsTest {
   private static class VoidCallListener extends ServerCall.Listener<Void> {
-    public void onCall(ServerCall<Void, Void> call, Metadata headers) { }
+    public void onCall(ServerCall<Void, Void> unused, Metadata unused2) { }
   }
 
   private MethodDescriptor<Void, Void> flowMethod = TestMethodDescriptors.voidMethod();

File: authz/src/test/java/io/grpc/authz/AuthorizationPolicyTranslatorTest.java
Patch:
@@ -45,9 +45,8 @@ public void invalidPolicy() throws Exception {
       AuthorizationPolicyTranslator.translate(policy);
       fail("exception expected");
     } catch (IOException ioe) {
-      assertThat(ioe).hasMessageThat().isEqualTo(
-          "Use JsonReader.setLenient(true) to accept malformed JSON"
-          + " at line 1 column 18 path $.name");
+      assertThat(ioe).hasMessageThat().contains("malformed JSON");
+      assertThat(ioe).hasMessageThat().contains("at line 1 column 18 path $.name");
     }
   }
 

File: authz/src/test/java/io/grpc/authz/AuthorizationServerInterceptorTest.java
Patch:
@@ -35,9 +35,8 @@ public void invalidPolicyFailsStaticAuthzInterceptorCreation() throws Exception
       AuthorizationServerInterceptor.create(policy);
       fail("exception expected");
     } catch (IOException ioe) {
-      assertThat(ioe).hasMessageThat().isEqualTo(
-          "Use JsonReader.setLenient(true) to accept malformed JSON"
-          + " at line 1 column 18 path $.name");
+      assertThat(ioe).hasMessageThat().contains("malformed JSON");
+      assertThat(ioe).hasMessageThat().contains("at line 1 column 18 path $.name");
     }
   }
 

File: binder/src/main/java/io/grpc/binder/internal/BinderClientTransportFactory.java
Patch:
@@ -127,7 +127,7 @@ public static final class Builder implements ClientTransportFactoryBuilder {
     BindServiceFlags bindServiceFlags = BindServiceFlags.DEFAULTS;
     InboundParcelablePolicy inboundParcelablePolicy = InboundParcelablePolicy.DEFAULT;
     OneWayBinderProxy.Decorator binderDecorator = OneWayBinderProxy.IDENTITY_DECORATOR;
-    long readyTimeoutMillis = -1; // TODO(jdcormie) Set an non-infinite default in a separate PR.
+    long readyTimeoutMillis = 60_000;
 
     @Override
     public BinderClientTransportFactory buildClientTransportFactory() {
@@ -210,7 +210,7 @@ public Builder setBinderDecorator(OneWayBinderProxy.Decorator binderDecorator) {
      * <a href="https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md">fail-fast</a> work
      * as expected despite certain edge cases that could otherwise stall the transport indefinitely.
      *
-     * <p>Optional. Use a negative value to wait indefinitely.
+     * <p>Optional but enabled by default. Use a negative value to wait indefinitely.
      */
     public Builder setReadyTimeoutMillis(long readyTimeoutMillis) {
       this.readyTimeoutMillis = readyTimeoutMillis;

File: core/src/main/java/io/grpc/internal/PickFirstLoadBalancerProvider.java
Patch:
@@ -33,15 +33,15 @@
  * down the address list and sticks to the first that works.
  */
 public final class PickFirstLoadBalancerProvider extends LoadBalancerProvider {
-  public static final String GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS =
-      "GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS";
+  public static final String GRPC_PF_USE_HAPPY_EYEBALLS = "GRPC_PF_USE_HAPPY_EYEBALLS";
   private static final String SHUFFLE_ADDRESS_LIST_KEY = "shuffleAddressList";
 
   static boolean enableNewPickFirst =
       GrpcUtil.getFlag("GRPC_EXPERIMENTAL_ENABLE_NEW_PICK_FIRST", false);
 
   public static boolean isEnabledHappyEyeballs() {
-    return GrpcUtil.getFlag(GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS, false);
+
+    return GrpcUtil.getFlag(GRPC_PF_USE_HAPPY_EYEBALLS, false);
   }
 
   @VisibleForTesting

File: api/src/main/java/io/grpc/CallOptions.java
Patch:
@@ -512,6 +512,7 @@ private static Builder toBuilder(CallOptions other) {
     builder.waitForReady = other.waitForReady;
     builder.maxInboundMessageSize = other.maxInboundMessageSize;
     builder.maxOutboundMessageSize = other.maxOutboundMessageSize;
+    builder.onReadyThreshold = other.onReadyThreshold;
     return builder;
   }
 
@@ -527,6 +528,7 @@ public String toString() {
         .add("waitForReady", isWaitForReady())
         .add("maxInboundMessageSize", maxInboundMessageSize)
         .add("maxOutboundMessageSize", maxOutboundMessageSize)
+        .add("onReadyThreshold", onReadyThreshold)
         .add("streamTracerFactories", streamTracerFactories)
         .toString();
   }

File: binder/src/main/java/io/grpc/binder/AndroidComponentAddress.java
Patch:
@@ -72,8 +72,8 @@ public static AndroidComponentAddress forLocalComponent(Context context, Class<?
   }
 
   /**
-   * Creates an address referencing a {@link android.app.Service} in another
-   * application and using the default binding {@link Intent}.
+   * Creates an address referencing a {@link android.app.Service} in another application and using
+   * the default binding {@link Intent}.
    *
    * @param applicationPackage The package name of the application containing the server.
    * @param serviceClassName The full class name of the Android Service to bind to.

File: binder/src/main/java/io/grpc/binder/BinderChannelCredentials.java
Patch:
@@ -59,9 +59,9 @@ public ChannelCredentials withoutBearerTokens() {
     return this;
   }
 
-  /** 
+  /**
    * Returns the admin component to be specified with DevicePolicyManager
-   * bindDeviceAdminServiceAsUser API. 
+   * bindDeviceAdminServiceAsUser API.
    */
   @Nullable
   public ComponentName getDevicePolicyAdminComponentName() {

File: binder/src/main/java/io/grpc/binder/ParcelableUtils.java
Patch:
@@ -50,8 +50,6 @@ public static <P extends Parcelable> Metadata.Key<P> metadataKey(
    */
   public static <P extends Parcelable> Metadata.Key<P> metadataKeyForImmutableType(
       String name, Parcelable.Creator<P> creator) {
-    return Metadata.Key.of(
-        name, new MetadataHelper.ParcelableMetadataMarshaller<P>(creator, true));
+    return Metadata.Key.of(name, new MetadataHelper.ParcelableMetadataMarshaller<P>(creator, true));
   }
 }
-

File: binder/src/main/java/io/grpc/binder/PeerUid.java
Patch:
@@ -75,4 +75,4 @@ public int hashCode() {
   public String toString() {
     return "PeerUid{" + uid + '}';
   }
-}
\ No newline at end of file
+}

File: binder/src/main/java/io/grpc/binder/PeerUids.java
Patch:
@@ -100,4 +100,4 @@ public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(
   }
 
   private PeerUids() {}
-}
\ No newline at end of file
+}

File: binder/src/main/java/io/grpc/binder/ServerSecurityPolicy.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * A security policy for a gRPC server.
  *
- * Contains a default policy, and optional policies for each server.
+ * <p>Contains a default policy, and optional policies for each server.
  */
 public final class ServerSecurityPolicy {
 
@@ -61,8 +61,8 @@ public Status checkAuthorizationForService(int uid, String serviceName) {
   /**
    * Returns whether the given Android UID is authorized to access a particular service.
    *
-   * <p>This method never throws an exception. If the execution of the security policy check
-   * fails, a failed future with such exception is returned.
+   * <p>This method never throws an exception. If the execution of the security policy check fails,
+   * a failed future with such exception is returned.
    *
    * @param uid The Android UID to authenticate.
    * @param serviceName The name of the gRPC service being called.

File: binder/src/main/java/io/grpc/binder/internal/Inbound.java
Patch:
@@ -344,8 +344,7 @@ final synchronized void handleTransaction(Parcel parcel) {
       }
       int index = parcel.readInt();
       boolean hasPrefix = TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_PREFIX);
-      boolean hasMessageData =
-          TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_MESSAGE_DATA);
+      boolean hasMessageData = TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_MESSAGE_DATA);
       boolean hasSuffix = TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_SUFFIX);
       if (hasPrefix) {
         handlePrefix(flags, parcel);

File: binder/src/main/java/io/grpc/binder/internal/LeakSafeOneWayBinder.java
Patch:
@@ -71,9 +71,7 @@ public void detach() {
     setHandler(null);
   }
 
-  /**
-   * Replaces the current {@link TransactionHandler} with `handler`.
-   */
+  /** Replaces the current {@link TransactionHandler} with `handler`. */
   public void setHandler(@Nullable TransactionHandler handler) {
     this.handler = handler;
   }

File: binder/src/main/java/io/grpc/binder/internal/PingTracker.java
Patch:
@@ -106,8 +106,7 @@ private synchronized void fail(Status status) {
     private synchronized void success() {
       if (!done) {
         done = true;
-        executor.execute(
-            () -> callback.onSuccess(ticker.read() - startTimeNanos));
+        executor.execute(() -> callback.onSuccess(ticker.read() - startTimeNanos));
       }
     }
   }

File: binder/src/main/java/io/grpc/binder/internal/TransactionUtils.java
Patch:
@@ -25,10 +25,13 @@
 final class TransactionUtils {
   /** Set when the transaction contains rpc prefix data. */
   static final int FLAG_PREFIX = 0x1;
+
   /** Set when the transaction contains some message data. */
   static final int FLAG_MESSAGE_DATA = 0x2;
+
   /** Set when the transaction contains rpc suffix data. */
   static final int FLAG_SUFFIX = 0x4;
+
   /** Set when the transaction is an out-of-band close event. */
   static final int FLAG_OUT_OF_BAND_CLOSE = 0x8;
 

File: binder/src/test/java/io/grpc/binder/BinderChannelCredentialsTest.java
Patch:
@@ -18,7 +18,7 @@ public void defaultBinderChannelCredentials() {
     BinderChannelCredentials channelCredentials = BinderChannelCredentials.forDefault();
     assertThat(channelCredentials.getDevicePolicyAdminComponentName()).isNull();
   }
-  
+
   @Test
   public void binderChannelCredentialsForDevicePolicyAdmin() {
     String deviceAdminClassName = "DevicePolicyAdmin";

File: binder/src/test/java/io/grpc/binder/PeerUidTest.java
Patch:
@@ -31,4 +31,4 @@ public void shouldImplementEqualsAndHashCode() {
         .addEqualityGroup(new PeerUid(456))
         .testEquals();
   }
-}
\ No newline at end of file
+}

File: binder/src/test/java/io/grpc/binder/PeerUidTestHelperTest.java
Patch:
@@ -32,8 +32,7 @@
 @RunWith(JUnit4.class)
 public final class PeerUidTestHelperTest {
 
-  @Rule
-  public final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();
+  @Rule public final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();
 
   private static final int FAKE_UID = 12345;
 

File: binder/src/test/java/io/grpc/binder/PeerUidsTest.java
Patch:
@@ -133,4 +133,4 @@ public String parse(InputStream stream) {
       }
     }
   }
-}
\ No newline at end of file
+}

File: binder/src/test/java/io/grpc/binder/internal/BinderServerTransportTest.java
Patch:
@@ -32,7 +32,6 @@
 import io.grpc.Attributes;
 import io.grpc.Metadata;
 import io.grpc.Status;
-import io.grpc.binder.internal.MainThreadScheduledExecutorService;
 import io.grpc.internal.FixedObjectPool;
 import io.grpc.internal.ServerStream;
 import io.grpc.internal.ServerTransportListener;

File: binder/src/main/java/io/grpc/binder/internal/BinderTransport.java
Patch:
@@ -327,7 +327,9 @@ final void shutdownInternal(Status shutdownStatus, boolean forceTerminate) {
                 inbound.closeAbnormal(shutdownStatus);
               }
             }
-            notifyTerminated();
+            synchronized (this) {
+              notifyTerminated();
+            } 
             releaseExecutors();
           });
     }

File: util/src/main/java/io/grpc/util/AdvancedTlsX509KeyManager.java
Patch:
@@ -189,9 +189,9 @@ public void run() {
           this.currentCertTime = newResult.certTime;
         }
       } catch (IOException | GeneralSecurityException e) {
-        log.log(Level.SEVERE, e, () -> String.format("Failed refreshing private key and certificate"
+        log.log(Level.SEVERE, String.format("Failed refreshing private key and certificate"
                 + " chain from files. Using previous ones (keyFile lastModified = %s, certFile "
-                + "lastModified = %s)", keyFile.lastModified(), certFile.lastModified()));
+                + "lastModified = %s)", keyFile.lastModified(), certFile.lastModified()), e);
       }
     }
   }

File: binder/src/main/java/io/grpc/binder/BinderServerBuilder.java
Patch:
@@ -166,7 +166,7 @@ public Server build() {
     ObjectPool<? extends Executor> executorPool = serverImplBuilder.getExecutorPool();
     Executor executor = executorPool.getObject();
     BinderTransportSecurity.installAuthInterceptor(this, executor);
-    internalBuilder.setShutdownListener(() -> executorPool.returnObject(executor));
+    internalBuilder.setTerminationListener(() -> executorPool.returnObject(executor));
     return super.build();
   }
 }

File: gcp-csm-observability/src/main/java/io/grpc/gcp/csm/observability/CsmObservability.java
Patch:
@@ -36,7 +36,7 @@
  * When no SDK is explicitly added no telemetry data will be collected. See
  * {@code io.opentelemetry.sdk.OpenTelemetrySdk} for information on how to construct the SDK.
  */
-@ExperimentalApi("TODO")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/11249")
 public final class CsmObservability implements Closeable {
   private final GrpcOpenTelemetry delegate;
   private final MetadataExchanger exchanger;
@@ -90,7 +90,7 @@ public void close() {}
   /**
    * Builder for configuring {@link CsmObservability}.
    */
-  @ExperimentalApi("TODO")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/11249")
   public static final class Builder {
     private final GrpcOpenTelemetry.Builder delegate = GrpcOpenTelemetry.newBuilder();
     private final MetadataExchanger exchanger;

File: core/src/main/java/io/grpc/internal/PickFirstLeafLoadBalancer.java
Patch:
@@ -59,8 +59,6 @@ final class PickFirstLeafLoadBalancer extends LoadBalancer {
   private static final Logger log = Logger.getLogger(PickFirstLeafLoadBalancer.class.getName());
   @VisibleForTesting
   static final int CONNECTION_DELAY_INTERVAL_MS = 250;
-  public static final String GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS =
-      "GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS";
   private final Helper helper;
   private final Map<SocketAddress, SubchannelData> subchannels = new HashMap<>();
   private Index addressIndex;
@@ -71,7 +69,7 @@ final class PickFirstLeafLoadBalancer extends LoadBalancer {
   private ConnectivityState rawConnectivityState = IDLE;
   private ConnectivityState concludedState = IDLE;
   private final boolean enableHappyEyeballs =
-      GrpcUtil.getFlag(GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS, true);
+      PickFirstLoadBalancerProvider.isEnabledHappyEyeballs();
 
   PickFirstLeafLoadBalancer(Helper helper) {
     this.helper = checkNotNull(helper, "helper");

File: xds/src/main/java/io/grpc/xds/XdsEndpointResource.java
Patch:
@@ -101,7 +101,7 @@ protected EdsUpdate doParse(Args args, Message unpackedMessage) throws ResourceI
   }
 
   private static boolean isEnabledXdsDualStack() {
-    return GrpcUtil.getFlag(GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS, true);
+    return GrpcUtil.getFlag(GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS, false);
   }
 
   private static EdsUpdate processClusterLoadAssignment(ClusterLoadAssignment assignment)

File: xds/src/test/java/io/grpc/xds/WeightedRoundRobinLoadBalancerTest.java
Patch:
@@ -64,7 +64,7 @@
 import io.grpc.inprocess.InProcessChannelBuilder;
 import io.grpc.inprocess.InProcessServerBuilder;
 import io.grpc.internal.FakeClock;
-import io.grpc.internal.GrpcUtil;
+import io.grpc.internal.PickFirstLoadBalancerProvider;
 import io.grpc.internal.TestUtils;
 import io.grpc.internal.testing.StreamRecorder;
 import io.grpc.services.InternalCallMetricRecorder;
@@ -595,7 +595,7 @@ weightedChild2.new OrcaReportListener(weightedConfig.errorUtilizationPenalty).on
   }
 
   private boolean isEnabledHappyEyeballs() {
-    return GrpcUtil.getFlag("GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS", true);
+    return PickFirstLoadBalancerProvider.isEnabledHappyEyeballs();
   }
 
   @Test

File: alts/src/main/java/io/grpc/alts/AltsChannelBuilder.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * ALTS version of {@code ManagedChannelBuilder}. This class sets up a secure and authenticated
- * commmunication between two cloud VMs using ALTS.
+ * communication between two cloud VMs using ALTS.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4151")
 public final class AltsChannelBuilder extends ForwardingChannelBuilder2<AltsChannelBuilder> {

File: alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.logging.Logger;
 
 /**
- * Provides secure and authenticated commmunication between two cloud VMs using ALTS.
+ * Provides secure and authenticated communication between two cloud VMs using ALTS.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4151")
 public final class AltsChannelCredentials {

File: alts/src/test/java/io/grpc/alts/internal/FakeTsiHandshaker.java
Patch:
@@ -147,7 +147,7 @@ public void getBytesToSendToPeer(ByteBuffer bytes) throws GeneralSecurityExcepti
       return;
     }
 
-    // Prepare the next message, if neeeded.
+    // Prepare the next message, if needed.
     if (sendBuffer == null) {
       if (sendState.next() != receiveState) {
         // We're still waiting for bytes from the peer, so bail.

File: api/src/main/java/io/grpc/ServerInterceptors.java
Patch:
@@ -197,7 +197,7 @@ public static <T> ServerServiceDefinition useMarshalledMessages(
    * to allow for interceptors to handle messages as multiple different ReqT/RespT types within
    * the chain if the added cost of serialization is not a concern.
    *
-   * @param serviceDef         the sevice definition to add request and response marshallers to.
+   * @param serviceDef         the service definition to add request and response marshallers to.
    * @param requestMarshaller  request marshaller
    * @param responseMarshaller response marshaller
    * @param <ReqT>             the request payload type

File: api/src/main/java/io/grpc/SynchronizationContext.java
Patch:
@@ -163,7 +163,7 @@ public String toString() {
   }
 
   /**
-   * Schedules a task to be added and run via {@link #execute} after an inital delay and then
+   * Schedules a task to be added and run via {@link #execute} after an initial delay and then
    * repeated after the delay until cancelled.
    *
    * @param task the task being scheduled

File: api/src/test/java/io/grpc/MethodDescriptorTest.java
Patch:
@@ -67,7 +67,7 @@ public void idempotent() {
 
     assertFalse(descriptor.isIdempotent());
 
-    // Create a new desriptor by setting idempotent to true
+    // Create a new descriptor by setting idempotent to true
     MethodDescriptor<String, String> newDescriptor =
         descriptor.toBuilder().setIdempotent(true).build();
     assertTrue(newDescriptor.isIdempotent());
@@ -86,7 +86,7 @@ public void safe() {
         .build();
     assertFalse(descriptor.isSafe());
 
-    // Create a new desriptor by setting safe to true
+    // Create a new descriptor by setting safe to true
     MethodDescriptor<String, String> newDescriptor = descriptor.toBuilder().setSafe(true).build();
     assertTrue(newDescriptor.isSafe());
     // All other fields should staty the same

File: binder/src/androidTest/java/io/grpc/binder/internal/BinderTransportTest.java
Patch:
@@ -136,7 +136,7 @@ public void serverAlreadyListening() throws Exception {
     // refers to an Android Service class declared in an applications manifest.
     //
     // However, unlike a regular network server, which is responsible for listening on its port, a
-    // BinderServier is not responsible for the creation of its host Service. The opposite is
+    // BinderServer is not responsible for the creation of its host Service. The opposite is
     // the case, with the host Android Service (itself created by the Android platform in
     // response to a connection) building the gRPC server.
     //

File: binder/src/main/java/io/grpc/binder/SecurityPolicies.java
Patch:
@@ -321,7 +321,7 @@ private static boolean checkPackageSignature(
         packageInfo = packageManager.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
         if (packageInfo.signatures == null || packageInfo.signatures.length != 1) {
           // Reject multiply-signed apks because of b/13678484
-          // (See PackageManagerGetSignatures supression above).
+          // (See PackageManagerGetSignatures suppression above).
           return false;
         }
 

File: core/src/main/java/io/grpc/internal/ClientTransport.java
Patch:
@@ -61,7 +61,7 @@ ClientStream newStream(
    * Pings a remote endpoint. When an acknowledgement is received, the given callback will be
    * invoked using the given executor.
    *
-   * <p>Pings are not necessarily sent to the same endpont, thus a successful ping only means at
+   * <p>Pings are not necessarily sent to the same endpoint, thus a successful ping only means at
    * least one endpoint responded, but doesn't imply the availability of other endpoints (if there
    * is any).
    *

File: core/src/main/java/io/grpc/internal/DelayedClientTransport.java
Patch:
@@ -90,7 +90,7 @@ final class DelayedClientTransport implements ManagedClientTransport {
   /**
    * Creates a new delayed transport.
    *
-   * @param defaultAppExecutor pending streams will create real streams and run bufferred operations
+   * @param defaultAppExecutor pending streams will create real streams and run buffered operations
    *        in an application executor, which will be this executor, unless there is on provided in
    *        {@link CallOptions}.
    * @param syncContext all listener callbacks of the delayed transport will be run from this

File: core/src/main/java/io/grpc/internal/DelayedStream.java
Patch:
@@ -46,7 +46,7 @@ class DelayedStream implements ClientStream {
   private volatile boolean passThrough;
   /**
    * Non-{@code null} iff start has been called. Used to assert methods are called in appropriate
-   * order, but also used if an error occurrs before {@code realStream} is set.
+   * order, but also used if an error occurs before {@code realStream} is set.
    */
   private ClientStreamListener listener;
   /** Must hold {@code this} lock when setting. */

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -196,7 +196,7 @@ public void uncaughtException(Thread t, Throwable e) {
   private final CompressorRegistry compressorRegistry;
 
   private final Supplier<Stopwatch> stopwatchSupplier;
-  /** The timout before entering idle mode. */
+  /** The timeout before entering idle mode. */
   private final long idleTimeoutMillis;
 
   private final ConnectivityStateManager channelStateManager = new ConnectivityStateManager();

File: core/src/main/java/io/grpc/internal/SerializingExecutor.java
Patch:
@@ -113,7 +113,7 @@ private void schedule(@Nullable Runnable removable) {
             // ConcurrentLinkedQueue claims that null elements are not allowed, but seems to not
             // throw if the item to remove is null.  If removable is present in the queue twice,
             // the wrong one may be removed.  It doesn't seem possible for this case to exist today.
-            // This is important to run in case of RejectedExectuionException, so that future calls
+            // This is important to run in case of RejectedExecutionException, so that future calls
             // to execute don't succeed and accidentally run a previous runnable.
             runQueue.remove(removable);
           }

File: core/src/test/java/io/grpc/internal/DnsNameResolverTest.java
Patch:
@@ -930,7 +930,7 @@ public void maybeChooseServiceConfig_clientLanguageCaseInsensitive() {
   }
 
   @Test
-  public void maybeChooseServiceConfig_clientLanguageMatchesEmtpy() {
+  public void maybeChooseServiceConfig_clientLanguageMatchesEmpty() {
     Map<String, Object> choice = new LinkedHashMap<>();
     List<String> langs = new ArrayList<>();
     choice.put("clientLanguage", langs);
@@ -1099,7 +1099,7 @@ public void maybeChooseServiceConfig_clientLanguageCaseSensitive() {
   }
 
   @Test
-  public void maybeChooseServiceConfig_hostnameMatchesEmtpy() {
+  public void maybeChooseServiceConfig_hostnameMatchesEmpty() {
     Map<String, Object> choice = new LinkedHashMap<>();
     List<String> hosts = new ArrayList<>();
     choice.put("clientHostname", hosts);
@@ -1191,7 +1191,7 @@ public void shouldUseJndi_falseIfDisabledForLocalhost() {
   }
 
   @Test
-  public void shouldUseJndi_trueIfLocalhostOverriden() {
+  public void shouldUseJndi_trueIfLocalhostOverridden() {
     boolean enableJndi = true;
     boolean enableJndiLocalhost = true;
     String host = "localhost";

File: core/src/test/java/io/grpc/internal/InternalSubchannelTest.java
Patch:
@@ -964,7 +964,7 @@ public void shutdownBeforeTransportCreated() throws Exception {
     // This should not lead to the creation of a new transport.
     reconnectTask.command.run();
 
-    // Futher call to obtainActiveTransport() is no-op.
+    // Further call to obtainActiveTransport() is no-op.
     assertNull(internalSubchannel.obtainActiveTransport());
     assertEquals(SHUTDOWN, internalSubchannel.getState());
     assertNoCallbackInvoke();

File: core/src/test/java/io/grpc/internal/ServerImplTest.java
Patch:
@@ -932,7 +932,7 @@ public void shutdown() {
         } catch (Exception ex) {
           throw new AssertionError(ex);
         }
-        // If deadlock is possible with this setup, this sychronization completes the loop because
+        // If deadlock is possible with this setup, this synchronization completes the loop because
         // the serverShutdown needs a lock that Server is holding while calling this method.
         synchronized (lock) {
         }
@@ -972,7 +972,7 @@ public void shutdown() {
         } catch (Exception ex) {
           throw new AssertionError(ex);
         }
-        // If deadlock is possible with this setup, this sychronization completes the loop
+        // If deadlock is possible with this setup, this synchronization completes the loop
         // because the transportTerminated needs a lock that Server is holding while calling this
         // method.
         synchronized (lock) {
@@ -1298,7 +1298,7 @@ public void handlerRegistryPriorities() throws Exception {
     assertEquals(1, executor.runDueTasks());
     verify(callHandler).startCall(ArgumentMatchers.<ServerCall<String, Integer>>any(),
         ArgumentMatchers.<Metadata>any());
-    // This call will be handled by the fallbackRegistry because it's not registred in the internal
+    // This call will be handled by the fallbackRegistry because it's not registered in the internal
     // registry.
     transportListener.streamCreated(stream, "Service1/Method2", requestHeaders);
     assertEquals(1, executor.runDueTasks());

File: core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java
Patch:
@@ -98,7 +98,7 @@ public void close(ResourceInstance instance) {
     assertEquals(SharedResourceHolder.DESTROY_DELAY_SECONDS,
         scheduledDestroyTask.getDelay(TimeUnit.SECONDS));
 
-    // Simluate that the destroyer executes the foo destroying task
+    // Simulate that the destroyer executes the foo destroying task
     scheduledDestroyTask.runTask();
     assertTrue(sharedFoo.closed);
 

File: examples/example-hostname/src/test/java/io/grpc/examples/hostname/HostnameGreeterTest.java
Patch:
@@ -62,7 +62,7 @@ public void sayHello_dynamicHostname() throws Exception {
         InProcessServerBuilder.forName("hostname")
           .directExecutor().addService(new HostnameGreeter(null)).build().start());
 
-    // Just verifing the service doesn't crash
+    // Just verifying the service doesn't crash
     HelloReply reply =
         blockingStub.sayHello(HelloRequest.newBuilder().setName("anonymous").build());
     assertTrue(reply.getMessage(), reply.getMessage().startsWith("Hello anonymous, from "));

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbConfig.java
Patch:
@@ -55,7 +55,7 @@ long getFallbackTimeoutMs() {
   }
 
   /**
-   * If specified, it overrides the name of the sevice name to be sent to the balancer. if not, the
+   * If specified, it overrides the name of the service name to be sent to the balancer. if not, the
    * target to be sent to the balancer will continue to be obtained from the target URI passed
    * to the gRPC client channel.
    */

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -526,7 +526,7 @@ private void runTest(TestCases testCase) throws Exception {
 
   /* Parses input string as a semi-colon-separated list of colon-separated key/value pairs.
    * Allow any character but semicolons in values.
-   * If the string is emtpy, return null.
+   * If the string is empty, return null.
    * Otherwise, return a client interceptor which inserts the provided metadata.
    */
   @Nullable

File: rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java
Patch:
@@ -206,7 +206,7 @@ private CachingRlsLbClient(Builder builder) {
   }
 
   /**
-   * Convert the status to UNAVAILBLE and enhance the error message.
+   * Convert the status to UNAVAILABLE and enhance the error message.
    * @param status status as provided by server
    * @param serverName Used for error description
    * @return Transformed status

File: services/src/test/java/io/grpc/protobuf/services/HealthCheckingLoadBalancerFactoryTest.java
Patch:
@@ -273,7 +273,7 @@ public void typicalWorkflow() {
     verifyNoMoreInteractions(origLb);
     Subchannel[] wrappedSubchannels = new Subchannel[NUM_SUBCHANNELS];
 
-    // Simulate that the orignal LB creates Subchannels
+    // Simulate that the original LB creates Subchannels
     for (int i = 0; i < NUM_SUBCHANNELS; i++) {
       // Subchannel attributes set by origLb are correctly plumbed in
       String subchannelAttrValue = "eag attr " + i;

File: stub/src/test/java/io/grpc/stub/ClientCallsTest.java
Patch:
@@ -399,7 +399,7 @@ public void cancel(String message, Throwable cause) {
       future.get();
       fail("Should fail");
     } catch (CancellationException e) {
-      // Exepcted
+      // Expected
     }
   }
 

File: xds/src/main/java/io/grpc/xds/FilterChainMatchingProtocolNegotiators.java
Patch:
@@ -329,7 +329,7 @@ private static int getMatchingPrefixLength(
       // use prefix_ranges (CIDR) and get the most specific matches
       private static Collection<FilterChain> filterOnIpAddress(
               Collection<FilterChain> filterChains, InetAddress address, boolean forDestination) {
-        // curent list of top ones
+        // current list of top ones
         ArrayList<FilterChain> topOnes = new ArrayList<>(filterChains.size());
         int topMatchingPrefixLen = -1;
         for (FilterChain filterChain : filterChains) {

File: opentelemetry/src/main/java/io/grpc/opentelemetry/OpenTelemetryMetricsModule.java
Patch:
@@ -194,7 +194,7 @@ void recordFinishedAttempt() {
           io.opentelemetry.api.common.Attributes.of(METHOD_KEY, fullMethodName,
               STATUS_KEY, statusCode.toString());
 
-      if (module.resource.clientAttemptCountCounter() != null ) {
+      if (module.resource.clientAttemptDurationCounter() != null ) {
         module.resource.clientAttemptDurationCounter()
             .record(attemptNanos * SECONDS_PER_NANO, attribute);
       }

File: api/src/main/java/io/grpc/Configurator.java
Patch:
@@ -19,8 +19,7 @@
 /**
  * Provides hooks for modifying gRPC channels and servers during their construction.
  */
-@Internal
-public interface Configurator {
+interface Configurator {
   /**
    * Allows implementations to modify the channel builder.
    *

File: gcp-observability/src/test/java/io/grpc/gcp/observability/LoggingTest.java
Patch:
@@ -71,7 +71,7 @@ public class LoggingTest {
       new StaticTestingClassLoader(getClass().getClassLoader(), Pattern.compile("io\\.grpc\\..*"));
 
   /**
-   * Cloud logging test using GlobalInterceptors.
+   * Cloud logging test using global interceptors.
    *
    * <p> Ignoring test, because it calls external Cloud Logging APIs.
    * To test cloud logging setup locally,

File: api/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -1243,7 +1243,7 @@ public NameResolverRegistry getNameResolverRegistry() {
      */
     @ExperimentalApi("https://github.com/grpc/grpc-java/issues/11110")
     public MetricRecorder getMetricRecorder() {
-      throw new UnsupportedOperationException();
+      return new MetricRecorder() {};
     }
   }
 

File: netty/src/main/java/io/grpc/netty/NettyServerStream.java
Patch:
@@ -130,7 +130,7 @@ public void writeTrailers(Metadata trailers, boolean headersSent, Status status)
     @Override
     public void cancel(Status status) {
       try (TaskCloseable ignore = PerfMark.traceTask("NettyServerStream$Sink.cancel")) {
-        writeQueue.enqueue(new CancelServerStreamCommand(transportState(), status), true);
+        writeQueue.enqueue(CancelServerStreamCommand.withReset(transportState(), status), true);
       }
     }
   }
@@ -189,7 +189,7 @@ public void deframeFailed(Throwable cause) {
       log.log(Level.WARNING, "Exception processing message", cause);
       Status status = Status.fromThrowable(cause);
       transportReportStatus(status);
-      handler.getWriteQueue().enqueue(new CancelServerStreamCommand(this, status), true);
+      handler.getWriteQueue().enqueue(CancelServerStreamCommand.withReason(this, status), true);
     }
 
     private void onWriteFrameData(ChannelFuture future, int numMessages, int numBytes) {
@@ -222,7 +222,7 @@ private void handleWriteFutureFailures(ChannelFuture future) {
      */
     protected void http2ProcessingFailed(Status status) {
       transportReportStatus(status);
-      handler.getWriteQueue().enqueue(new CancelServerStreamCommand(this, status), true);
+      handler.getWriteQueue().enqueue(CancelServerStreamCommand.withReset(this, status), true);
     }
 
     void inboundDataReceived(ByteBuf frame, boolean endOfStream) {

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -748,6 +748,7 @@ private void sendGrpcFrame(
       int streamId = cmd.stream().id();
       Http2Stream stream = connection().stream(streamId);
       if (stream == null) {
+        cmd.release();
         streamGone(streamId, promise);
         return;
       }

File: core/src/main/java/io/grpc/internal/AbstractServerStream.java
Patch:
@@ -293,6 +293,7 @@ public void inboundDataReceived(ReadableBuffer frame, boolean endOfStream) {
      */
     public final void transportReportStatus(final Status status) {
       Preconditions.checkArgument(!status.isOk(), "status must not be OK");
+      onStreamDeallocated();
       if (deframerClosed) {
         deframerClosedTask = null;
         closeListener(status);
@@ -315,6 +316,7 @@ public void run() {
      * #transportReportStatus}.
      */
     public void complete() {
+      onStreamDeallocated();
       if (deframerClosed) {
         deframerClosedTask = null;
         closeListener(Status.OK);
@@ -350,7 +352,6 @@ private void closeListener(Status newStatus) {
           getTransportTracer().reportStreamClosed(closedStatus.isOk());
         }
         listenerClosed = true;
-        onStreamDeallocated();
         listener().closed(newStatus);
       }
     }

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -502,8 +502,7 @@ private void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
             state,
             attributes,
             authority,
-            statsTraceCtx,
-            transportTracer);
+            statsTraceCtx);
         transportListener.streamCreated(stream, method, metadata);
         state.onStreamAllocated();
         http2Stream.setProperty(streamKey, state);

File: rls/src/test/java/io/grpc/rls/CachingRlsLbClientTest.java
Patch:
@@ -301,7 +301,7 @@ public void get_throttledAndRecover() throws Exception {
     fakeClock.forwardTime(10, TimeUnit.MILLISECONDS);
     // initially backed off entry is backed off again
     verify(evictionListener)
-        .onEviction(eq(routeLookupRequest), any(CacheEntry.class), eq(EvictionType.REPLACED));
+        .onEviction(eq(routeLookupRequest), any(CacheEntry.class), eq(EvictionType.EXPLICIT));
 
     resp = getInSyncContext(routeLookupRequest);
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -953,8 +953,8 @@ void finishStream(
         }
         if (!startPendingStreams()) {
           stopIfNecessary();
-          maybeClearInUse(stream);
         }
+        maybeClearInUse(stream);
       }
     }
   }

File: authz/src/main/java/io/grpc/authz/AuthorizationPolicyTranslator.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 /**
@@ -77,7 +78,7 @@ private static Permission parseHeader(Map<String, ?> header) throws IllegalArgum
     }
     if (key.charAt(0) == ':'
         || key.startsWith("grpc-")
-        || UNSUPPORTED_HEADERS.contains(key.toLowerCase())) {
+        || UNSUPPORTED_HEADERS.contains(key.toLowerCase(Locale.ROOT))) {
       throw new IllegalArgumentException(String.format("Unsupported \"key\" %s", key));
     }
     List<String> valuesList = JsonUtil.getListOfStrings(header, "values");

File: interop-testing/src/main/java/io/grpc/testing/integration/Http2TestCases.java
Patch:
@@ -17,6 +17,7 @@
 package io.grpc.testing.integration;
 
 import com.google.common.base.Preconditions;
+import java.util.Locale;
 
 /**
  * Enum of HTTP/2 interop test cases.
@@ -49,7 +50,7 @@ public String description() {
   public static Http2TestCases fromString(String s) {
     Preconditions.checkNotNull(s, "s");
     try {
-      return Http2TestCases.valueOf(s.toUpperCase());
+      return Http2TestCases.valueOf(s.toUpperCase(Locale.ROOT));
     } catch (IllegalArgumentException ex) {
       throw new IllegalArgumentException("Invalid test case: " + s);
     }

File: interop-testing/src/main/java/io/grpc/testing/integration/StressTestClient.java
Patch:
@@ -434,7 +434,7 @@ private static String serverAddressesToString(List<InetSocketAddress> addresses)
   private static String validTestCasesHelpText() {
     StringBuilder builder = new StringBuilder();
     for (TestCases testCase : TestCases.values()) {
-      String strTestcase = testCase.name().toLowerCase();
+      String strTestcase = testCase.toString();
       builder.append("\n      ")
           .append(strTestcase)
           .append(": ")

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -697,7 +697,7 @@ protected int operationTimeoutMillis() {
   private static String validTestCasesHelpText() {
     StringBuilder builder = new StringBuilder();
     for (TestCases testCase : TestCases.values()) {
-      String strTestcase = testCase.name().toLowerCase();
+      String strTestcase = testCase.toString();
       builder.append("\n      ")
           .append(strTestcase)
           .append(": ")

File: xds/src/main/java/io/grpc/xds/XdsClusterResource.java
Patch:
@@ -257,7 +257,7 @@ private static StructOrError<CdsUpdate.Builder> parseNonAggregateCluster(
         edsServiceName = edsClusterConfig.getServiceName();
       }
       // edsServiceName is required if the CDS resource has an xdstp name.
-      if ((edsServiceName == null) && clusterName.toLowerCase().startsWith("xdstp:")) {
+      if ((edsServiceName == null) && clusterName.toLowerCase(Locale.ROOT).startsWith("xdstp:")) {
         return StructOrError.fromError(
             "EDS service_name must be set when Cluster resource has an xdstp name");
       }

File: xds/src/main/java/io/grpc/xds/internal/Matchers.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.re2j.Pattern;
 import java.math.BigInteger;
 import java.net.InetAddress;
+import java.util.Locale;
 import javax.annotation.Nullable;
 
 /**
@@ -273,11 +274,11 @@ public boolean matches(String args) {
             : exact().equals(args);
       } else if (prefix() != null) {
         return ignoreCase()
-            ? args.toLowerCase().startsWith(prefix().toLowerCase())
+            ? args.toLowerCase(Locale.ROOT).startsWith(prefix().toLowerCase(Locale.ROOT))
             : args.startsWith(prefix());
       } else if (suffix() != null) {
         return ignoreCase()
-            ? args.toLowerCase().endsWith(suffix().toLowerCase())
+            ? args.toLowerCase(Locale.ROOT).endsWith(suffix().toLowerCase(Locale.ROOT))
             : args.endsWith(suffix());
       } else if (contains() != null) {
         return args.contains(contains());

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 import static io.grpc.ClientStreamTracer.NAME_RESOLUTION_DELAYED;
+import static io.grpc.ConnectivityState.CONNECTING;
 import static io.grpc.ConnectivityState.IDLE;
 import static io.grpc.ConnectivityState.SHUTDOWN;
 import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;
@@ -423,6 +424,7 @@ void exitIdleMode() {
     // may throw. We don't want to confuse our state, even if we will enter panic mode.
     this.lbHelper = lbHelper;
 
+    channelStateManager.gotoState(CONNECTING);
     NameResolverListener listener = new NameResolverListener(lbHelper, nameResolver);
     nameResolver.start(listener);
     nameResolverStarted = true;

File: core/src/test/java/io/grpc/internal/ServiceConfigErrorHandlingTest.java
Patch:
@@ -277,7 +277,7 @@ public void emptyAddresses_validConfig_2ndResolution_lbNeedsAddress() throws Exc
     assertThat(resolvedAddresses.getLoadBalancingPolicyConfig()).isEqualTo("12");
     verify(mockLoadBalancer, never()).handleNameResolutionError(any(Status.class));
 
-    assertThat(channel.getState(true)).isEqualTo(ConnectivityState.IDLE);
+    assertThat(channel.getState(true)).isEqualTo(ConnectivityState.CONNECTING);
 
     reset(mockLoadBalancer);
     nameResolverFactory.servers.clear();
@@ -480,7 +480,7 @@ public void invalidConfig_2ndResolution() throws Exception {
     assertThat(newResolvedAddress.getLoadBalancingPolicyConfig()).isEqualTo("1st raw config");
     assertThat(channel.getConfigSelector()).isSameInstanceAs(configSelector);
     verify(mockLoadBalancer, never()).handleNameResolutionError(any(Status.class));
-    assertThat(channel.getState(false)).isEqualTo(ConnectivityState.IDLE);
+    assertThat(channel.getState(false)).isEqualTo(ConnectivityState.CONNECTING);
   }
 
   @Test

File: util/src/main/java/io/grpc/util/OutlierDetectionLoadBalancer.java
Patch:
@@ -377,8 +377,9 @@ void clearEndpointTracker() {
 
     void eject() {
       ejected = true;
-      subchannelStateListener.onSubchannelState(
-          ConnectivityStateInfo.forTransientFailure(Status.UNAVAILABLE));
+      subchannelStateListener.onSubchannelState(ConnectivityStateInfo.forTransientFailure(
+          Status.UNAVAILABLE.withDescription(
+              "The subchannel has been ejected by outlier detection")));
       logger.log(ChannelLogLevel.INFO, "Subchannel ejected: {0}", this);
     }
 

File: core/src/test/java/io/grpc/internal/RetriableStreamTest.java
Patch:
@@ -705,6 +705,7 @@ public void retry_unretriableClosed_cancel() {
     // cancel
     retriableStream.cancel(Status.CANCELLED);
     inOrder.verify(retriableStreamRecorder, never()).postCommit();
+    verify(masterListener, times(1)).closed(any(), any(), any());
   }
 
   @Test
@@ -733,6 +734,7 @@ public void retry_cancelWhileBackoff() {
 
     verifyNoMoreInteractions(mockStream1);
     verifyNoMoreInteractions(mockStream2);
+    verify(masterListener, times(1)).closed(any(), any(), any());
   }
 
   @Test

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1190,7 +1190,7 @@ public void deadlineExceeded() throws Exception {
       assertTrue(desc,
           // There is a race between client and server-side deadline expiration.
           // If client expires first, it'd generate this message
-          Pattern.matches("deadline exceeded after .*s. \\[.*\\]", desc)
+          Pattern.matches("CallOptions deadline exceeded after .*s. \\[.*\\]", desc)
           // If server expires first, it'd reset the stream and client would generate a different
           // message
           || desc.startsWith("ClientCall was cancelled at or after deadline."));

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2Test.java
Patch:
@@ -18,6 +18,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertTrue;
 
 import io.grpc.ChannelCredentials;
 import io.grpc.ManagedChannelBuilder;
@@ -38,7 +39,6 @@
 import io.grpc.stub.MetadataUtils;
 import io.grpc.testing.TlsTesting;
 import java.io.IOException;
-import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.util.Arrays;
 import org.junit.Test;
@@ -139,15 +139,15 @@ protected ManagedChannelBuilder<?> createChannelBuilder() {
   @Test
   public void remoteAddr() {
     InetSocketAddress isa = (InetSocketAddress) obtainRemoteClientAddr();
-    assertEquals(InetAddress.getLoopbackAddress(), isa.getAddress());
+    assertTrue(isa.getAddress().isLoopbackAddress());
     // It should not be the same as the server
     assertNotEquals(((InetSocketAddress) getListenAddress()).getPort(), isa.getPort());
   }
 
   @Test
   public void localAddr() throws Exception {
     InetSocketAddress isa = (InetSocketAddress) obtainLocalServerAddr();
-    assertEquals(InetAddress.getLoopbackAddress(), isa.getAddress());
+    assertTrue(isa.getAddress().isLoopbackAddress());
     assertEquals(((InetSocketAddress) getListenAddress()).getPort(), isa.getPort());
   }
 

File: util/src/test/java/io/grpc/util/MultiChildLoadBalancerTest.java
Patch:
@@ -32,7 +32,6 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import com.google.common.collect.Lists;
 import io.grpc.Attributes;
@@ -128,7 +127,7 @@ public void pickAfterResolved() {
         (TestLb.TestSubchannelPicker) pickerCaptor.getValue();
     assertThat(subchannelPicker.getReadySubchannels()).containsExactly(readySubchannel);
 
-    verifyNoMoreInteractions(mockHelper);
+    AbstractTestHelper.verifyNoMoreMeaningfulInteractions(mockHelper);
   }
 
   @Test
@@ -192,7 +191,7 @@ public void pickAfterResolvedUpdatedHosts() {
     verify(mockHelper, times(3)).createSubchannel(any(LoadBalancer.CreateSubchannelArgs.class));
     inOrder.verify(mockHelper, times(2)).updateBalancingState(eq(READY), pickerCaptor.capture());
 
-    verifyNoMoreInteractions(mockHelper);
+    AbstractTestHelper.verifyNoMoreMeaningfulInteractions(mockHelper);
   }
 
   @Test

File: xds/src/main/java/io/grpc/xds/XdsEndpointResource.java
Patch:
@@ -101,7 +101,7 @@ protected EdsUpdate doParse(Args args, Message unpackedMessage) throws ResourceI
   }
 
   private static boolean isEnabledXdsDualStack() {
-    return GrpcUtil.getFlag(GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS, false);
+    return GrpcUtil.getFlag(GRPC_EXPERIMENTAL_XDS_DUALSTACK_ENDPOINTS, true);
   }
 
   private static EdsUpdate processClusterLoadAssignment(ClusterLoadAssignment assignment)

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1190,7 +1190,7 @@ public void deadlineExceeded() throws Exception {
       assertTrue(desc,
           // There is a race between client and server-side deadline expiration.
           // If client expires first, it'd generate this message
-          Pattern.matches("deadline exceeded after .*s. \\[.*\\]", desc)
+          Pattern.matches("CallOptions deadline exceeded after .*s. \\[.*\\]", desc)
           // If server expires first, it'd reset the stream and client would generate a different
           // message
           || desc.startsWith("ClientCall was cancelled at or after deadline."));

File: core/src/main/java/io/grpc/internal/PickFirstLoadBalancerProvider.java
Patch:
@@ -36,7 +36,7 @@ public final class PickFirstLoadBalancerProvider extends LoadBalancerProvider {
   private static final String SHUFFLE_ADDRESS_LIST_KEY = "shuffleAddressList";
 
   static boolean enableNewPickFirst =
-      GrpcUtil.getFlag("GRPC_EXPERIMENTAL_ENABLE_NEW_PICK_FIRST", false);
+      GrpcUtil.getFlag("GRPC_EXPERIMENTAL_ENABLE_NEW_PICK_FIRST", true);
 
   @Override
   public boolean isAvailable() {

File: api/src/main/java/io/grpc/Attributes.java
Patch:
@@ -236,13 +236,12 @@ public <T> Builder set(Key<T> key, T value) {
     }
 
     /**
-     * Removes the key and associated value from the attribtues.
+     * Removes the key and associated value from the attributes.
      *
      * @since 1.22.0
      * @param key The key to remove
      * @return this
      */
-    @ExperimentalApi("https://github.com/grpc/grpc-java/issues/5777")
     public <T> Builder discard(Key<T> key) {
       if (base.data.containsKey(key)) {
         IdentityHashMap<Key<?>, Object> newBaseData = new IdentityHashMap<>(base.data);

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -954,6 +954,9 @@ public static boolean getFlag(String envVarName, boolean enableByDefault) {
     if (envVar == null) {
       envVar = System.getProperty(envVarName);
     }
+    if (envVar != null) {
+      envVar = envVar.trim();
+    }
     if (enableByDefault) {
       return Strings.isNullOrEmpty(envVar) || Boolean.parseBoolean(envVar);
     } else {

File: api/src/main/java/io/grpc/ServerInterceptor.java
Patch:
@@ -19,7 +19,7 @@
 import javax.annotation.concurrent.ThreadSafe;
 
 /**
- * Interface for intercepting incoming calls before that are dispatched by
+ * Interface for intercepting incoming calls before they are dispatched by
  * {@link ServerCallHandler}.
  *
  * <p>Implementers use this mechanism to add cross-cutting behavior to server-side calls. Common

File: xds/src/test/java/io/grpc/xds/GrpcXdsClientImplTestBase.java
Patch:
@@ -304,8 +304,8 @@ public void setUp() throws IOException {
     when(backoffPolicy2.nextBackoffNanos()).thenReturn(20L, 200L);
 
     // Start the server and the client.
-    originalEnableLeastRequest = XdsResourceType.enableLeastRequest;
-    XdsResourceType.enableLeastRequest = true;
+    originalEnableLeastRequest = XdsClusterResource.enableLeastRequest;
+    XdsClusterResource.enableLeastRequest = true;
     xdsServer = cleanupRule.register(InProcessServerBuilder
         .forName(serverName)
         .addService(adsService)
@@ -376,7 +376,7 @@ public XdsTransport create(ServerInfo serverInfo) {
 
   @After
   public void tearDown() {
-    XdsResourceType.enableLeastRequest = originalEnableLeastRequest;
+    XdsClusterResource.enableLeastRequest = originalEnableLeastRequest;
     xdsClient.shutdown();
     channel.shutdown();  // channel not owned by XdsClient
     assertThat(adsEnded.get()).isTrue();

File: xds/src/main/java/io/grpc/xds/XdsClusterResource.java
Patch:
@@ -141,7 +141,7 @@ static CdsUpdate processCluster(Cluster cluster,
     CdsUpdate.Builder updateBuilder = structOrError.getStruct();
 
     ImmutableMap<String, ?> lbPolicyConfig = LoadBalancerConfigFactory.newConfig(cluster,
-        enableLeastRequest, enableWrr, enablePickFirst);
+        enableLeastRequest);
 
     // Validate the LB config by trying to parse it with the corresponding LB provider.
     LbConfig lbConfig = ServiceConfigUtil.unwrapLoadBalancingConfig(lbPolicyConfig);

File: binder/src/androidTest/java/io/grpc/binder/internal/BinderTransportTest.java
Patch:
@@ -73,7 +73,7 @@ protected InternalServer newServer(List<ServerStreamTracer.Factory> streamTracer
         streamTracerFactories,
         BinderInternal.createPolicyChecker(SecurityPolicies.serverInternalOnly()),
         InboundParcelablePolicy.DEFAULT,
-        /* shutdownListener=*/ () -> {});
+        /* transportSecurityShutdownListener=*/ () -> {});
 
     HostServices.configureService(addr,
         HostServices.serviceParamsBuilder()

File: binder/src/main/java/io/grpc/binder/BinderChannelCredentials.java
Patch:
@@ -16,8 +16,6 @@
 
 package io.grpc.binder;
 
-import static com.google.common.base.Preconditions.checkNotNull;
-
 import android.content.ComponentName;
 import androidx.annotation.RequiresApi;
 import io.grpc.ChannelCredentials;

File: binder/src/main/java/io/grpc/binder/SecurityPolicies.java
Patch:
@@ -189,7 +189,7 @@ public Status checkAuthorization(int uid) {
    * Creates {@link SecurityPolicy} which checks if the app is a device owner app. See
    * {@link DevicePolicyManager}.
    */
-  @androidx.annotation.RequiresApi(18)
+  @RequiresApi(18)
   public static io.grpc.binder.SecurityPolicy isDeviceOwner(Context applicationContext) {
     DevicePolicyManager devicePolicyManager =
         (DevicePolicyManager) applicationContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
@@ -203,7 +203,7 @@ public static io.grpc.binder.SecurityPolicy isDeviceOwner(Context applicationCon
    * Creates {@link SecurityPolicy} which checks if the app is a profile owner app. See
    * {@link DevicePolicyManager}.
    */
-  @androidx.annotation.RequiresApi(21)
+  @RequiresApi(21)
   public static SecurityPolicy isProfileOwner(Context applicationContext) {
     DevicePolicyManager devicePolicyManager =
         (DevicePolicyManager) applicationContext.getSystemService(Context.DEVICE_POLICY_SERVICE);

File: binder/src/main/java/io/grpc/binder/internal/BinderServer.java
Patch:
@@ -29,12 +29,9 @@
 import io.grpc.ServerStreamTracer;
 import io.grpc.binder.AndroidComponentAddress;
 import io.grpc.binder.InboundParcelablePolicy;
-import io.grpc.binder.ServerSecurityPolicy;
-import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.InternalServer;
 import io.grpc.internal.ObjectPool;
 import io.grpc.internal.ServerListener;
-import io.grpc.internal.SharedResourceHolder;
 import java.io.IOException;
 import java.net.SocketAddress;
 import java.util.List;

File: examples/src/main/java/io/grpc/examples/errorhandling/ErrorHandlingClient.java
Patch:
@@ -45,7 +45,7 @@
 import javax.annotation.Nullable;
 
 /**
- * Shows how to extract error information from a server response.
+ * Shows how to extract error information from a failed RPC.
  */
 public class ErrorHandlingClient {
   public static void main(String [] args) throws Exception {
@@ -60,6 +60,8 @@ void run() throws Exception {
         .addService(new GreeterGrpc.GreeterImplBase() {
       @Override
       public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {
+        // The server will always fail, and we'll see this failure on client-side. The exception is
+        // not sent to the client, only the status code (i.e., INTERNAL) and description.
         responseObserver.onError(Status.INTERNAL
             .withDescription("Eggplant Xerxes Crybaby Overbite Narwhal").asRuntimeException());
       }

File: core/src/main/java/io/grpc/internal/ProxyDetectorImpl.java
Patch:
@@ -135,7 +135,6 @@ public PasswordAuthentication requestPasswordAuthentication(
             Level.WARNING,
             "failed to create URL for Authenticator: {0} {1}", new Object[] {protocol, host});
       }
-      // TODO(spencerfang): consider using java.security.AccessController here
       return Authenticator.requestPasswordAuthentication(
           host, addr, port, protocol, prompt, scheme, url, Authenticator.RequestorType.PROXY);
     }
@@ -144,7 +143,6 @@ public PasswordAuthentication requestPasswordAuthentication(
       new Supplier<ProxySelector>() {
         @Override
         public ProxySelector get() {
-          // TODO(spencerfang): consider using java.security.AccessController here
           return ProxySelector.getDefault();
         }
       };

File: xds/src/test/java/io/grpc/xds/SharedCallCounterMapTest.java
Patch:
@@ -54,6 +54,7 @@ public void autoCleanUp() {
     final CounterReference ref = counters.get(CLUSTER).get(EDS_SERVICE_NAME);
     counter = null;
     GcFinalization.awaitDone(new FinalizationPredicate() {
+      @SuppressWarnings("deprecation") // Use refersTo(null) once we require Java 17+
       @Override
       public boolean isDone() {
         return ref.isEnqueued();
@@ -71,6 +72,7 @@ public void gcAndRecreate() {
     assertThat(counter.get()).isEqualTo(0);
     counter = null;
     GcFinalization.awaitDone(new FinalizationPredicate() {
+      @SuppressWarnings("deprecation") // Use refersTo(null) once we require Java 17+
       @Override
       public boolean isDone() {
         return ref.isEnqueued();

File: binder/src/androidTest/java/io/grpc/binder/internal/BinderTransportTest.java
Patch:
@@ -108,6 +108,7 @@ protected ManagedClientTransport newClientTransport(InternalServer server) {
         offloadExecutorPool,
         SecurityPolicies.internalOnly(),
         InboundParcelablePolicy.DEFAULT,
+        OneWayBinderProxy.IDENTITY_DECORATOR,
         eagAttrs());
   }
 

File: binder/src/main/java/io/grpc/binder/BinderChannelBuilder.java
Patch:
@@ -30,6 +30,7 @@
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.binder.internal.BinderTransport;
+import io.grpc.binder.internal.OneWayBinderProxy;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.FixedObjectPool;
@@ -384,6 +385,7 @@ public ConnectionClientTransport newClientTransport(
           offloadExecutorPool,
           securityPolicy,
           inboundParcelablePolicy,
+          OneWayBinderProxy.IDENTITY_DECORATOR,
           options.getEagAttributes());
     }
 

File: binder/src/main/java/io/grpc/binder/internal/BinderServer.java
Patch:
@@ -162,7 +162,9 @@ public synchronized boolean handleTransaction(int code, Parcel parcel) {
           // Create a new transport and let our listener know about it.
           BinderTransport.BinderServerTransport transport =
               new BinderTransport.BinderServerTransport(
-                  executorServicePool, attrsBuilder.build(), streamTracerFactories, callbackBinder);
+                  executorServicePool, attrsBuilder.build(), streamTracerFactories,
+                  OneWayBinderProxy.IDENTITY_DECORATOR,
+                  callbackBinder);
           transport.setServerTransportListener(listener.transportCreated(transport));
           return true;
         }

File: binder/src/test/java/io/grpc/binder/internal/BinderServerTransportTest.java
Patch:
@@ -71,6 +71,7 @@ public void setUp() throws Exception {
             new FixedObjectPool<>(executorService),
             Attributes.EMPTY,
             ImmutableList.of(),
+            OneWayBinderProxy.IDENTITY_DECORATOR,
             mockBinder);
   }
 

File: xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancerProvider.java
Patch:
@@ -27,9 +27,9 @@
 import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.Status;
 import io.grpc.internal.ServiceConfigUtil.PolicySelection;
-import io.grpc.xds.Bootstrapper.ServerInfo;
 import io.grpc.xds.Endpoints.DropOverload;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper.ServerInfo;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: xds/src/main/java/io/grpc/xds/ClusterManagerLoadBalancer.java
Patch:
@@ -30,7 +30,8 @@
 import io.grpc.internal.ServiceConfigUtil.PolicySelection;
 import io.grpc.util.MultiChildLoadBalancer;
 import io.grpc.xds.ClusterManagerLoadBalancerProvider.ClusterManagerConfig;
-import io.grpc.xds.XdsLogger.XdsLogLevel;
+import io.grpc.xds.client.XdsLogger;
+import io.grpc.xds.client.XdsLogger.XdsLogLevel;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;

File: xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancerProvider.java
Patch:
@@ -26,9 +26,9 @@
 import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.Status;
 import io.grpc.internal.ServiceConfigUtil.PolicySelection;
-import io.grpc.xds.Bootstrapper.ServerInfo;
 import io.grpc.xds.EnvoyServerProtoData.OutlierDetection;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper.ServerInfo;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;

File: xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.protobuf.util.Durations;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
 import io.grpc.Internal;
+import io.grpc.xds.client.EnvoyProtoData;
 import io.grpc.xds.internal.security.SslContextProviderSupplier;
 import java.net.InetAddress;
 import java.net.UnknownHostException;

File: xds/src/main/java/io/grpc/xds/InternalSharedXdsClientPoolProvider.java
Patch:
@@ -18,6 +18,8 @@
 
 import io.grpc.Internal;
 import io.grpc.internal.ObjectPool;
+import io.grpc.xds.client.XdsClient;
+import io.grpc.xds.client.XdsInitializationException;
 import java.util.Map;
 
 /**

File: xds/src/main/java/io/grpc/xds/InternalXdsAttributes.java
Patch:
@@ -23,6 +23,8 @@
 import io.grpc.NameResolver;
 import io.grpc.internal.ObjectPool;
 import io.grpc.xds.XdsNameResolverProvider.CallCounterProvider;
+import io.grpc.xds.client.Locality;
+import io.grpc.xds.client.XdsClient;
 import io.grpc.xds.internal.security.SslContextProviderSupplier;
 
 /**

File: xds/src/main/java/io/grpc/xds/LoadBalancerConfigFactory.java
Patch:
@@ -39,8 +39,9 @@
 import io.grpc.LoadBalancerRegistry;
 import io.grpc.internal.JsonParser;
 import io.grpc.xds.LoadBalancerConfigFactory.LoadBalancingPolicyConverter.MaxRecursionReachedException;
-import io.grpc.xds.XdsLogger.XdsLogLevel;
-import io.grpc.xds.XdsResourceType.ResourceInvalidException;
+import io.grpc.xds.client.XdsLogger;
+import io.grpc.xds.client.XdsLogger.XdsLogLevel;
+import io.grpc.xds.client.XdsResourceType.ResourceInvalidException;
 import java.io.IOException;
 import java.util.Map;
 

File: xds/src/main/java/io/grpc/xds/PriorityLoadBalancer.java
Patch:
@@ -34,7 +34,8 @@
 import io.grpc.util.GracefulSwitchLoadBalancer;
 import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;
 import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig.PriorityChildConfig;
-import io.grpc.xds.XdsLogger.XdsLogLevel;
+import io.grpc.xds.client.XdsLogger;
+import io.grpc.xds.client.XdsLogger.XdsLogLevel;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;

File: xds/src/main/java/io/grpc/xds/RingHashLoadBalancer.java
Patch:
@@ -39,7 +39,8 @@
 import io.grpc.Status;
 import io.grpc.SynchronizationContext;
 import io.grpc.util.MultiChildLoadBalancer;
-import io.grpc.xds.XdsLogger.XdsLogLevel;
+import io.grpc.xds.client.XdsLogger;
+import io.grpc.xds.client.XdsLogger.XdsLogLevel;
 import java.net.SocketAddress;
 import java.util.ArrayList;
 import java.util.Collections;

File: xds/src/main/java/io/grpc/xds/RouteLookupServiceClusterSpecifierPlugin.java
Patch:
@@ -66,7 +66,7 @@ public ConfigOrError<RlsPluginConfig> parsePlugin(Message rawProtoMessage) {
       } catch (InvalidProtocolBufferException e) {
         return ConfigOrError.fromError("Invalid proto: " + e);
       }
-      String jsonString = MessagePrinter.print(configProto);
+      String jsonString = MessagePrinter.INSTANCE.print(configProto);
       try {
         Map<String, ?> jsonMap = (Map<String, ?>) JsonParser.parse(jsonString);
         Map<String, ?> config = JsonUtil.getObject(jsonMap, "routeLookupConfig");

File: xds/src/main/java/io/grpc/xds/WeightedTargetLoadBalancer.java
Patch:
@@ -32,7 +32,8 @@
 import io.grpc.xds.WeightedRandomPicker.WeightedChildPicker;
 import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;
 import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;
-import io.grpc.xds.XdsLogger.XdsLogLevel;
+import io.grpc.xds.client.XdsLogger;
+import io.grpc.xds.client.XdsLogger.XdsLogLevel;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: xds/src/main/java/io/grpc/xds/WrrLocalityLoadBalancer.java
Patch:
@@ -31,7 +31,9 @@
 import io.grpc.util.GracefulSwitchLoadBalancer;
 import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;
 import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;
-import io.grpc.xds.XdsLogger.XdsLogLevel;
+import io.grpc.xds.client.Locality;
+import io.grpc.xds.client.XdsLogger;
+import io.grpc.xds.client.XdsLogger.XdsLogLevel;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;

File: xds/src/main/java/io/grpc/xds/XdsServerBuilder.java
Patch:
@@ -36,7 +36,6 @@
 import io.grpc.netty.InternalProtocolNegotiator;
 import io.grpc.netty.NettyServerBuilder;
 import io.grpc.xds.FilterChainMatchingProtocolNegotiators.FilterChainMatchingNegotiatorServerFactory;
-import io.grpc.xds.XdsNameResolverProvider.XdsClientPoolFactory;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;

File: xds/src/main/java/io/grpc/xds/XdsServerWrapper.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
-import static io.grpc.xds.Bootstrapper.XDSTP_SCHEME;
+import static io.grpc.xds.client.Bootstrapper.XDSTP_SCHEME;
 
 import com.google.auto.value.AutoValue;
 import com.google.common.annotations.VisibleForTesting;
@@ -50,11 +50,11 @@
 import io.grpc.xds.FilterChainMatchingProtocolNegotiators.FilterChainMatchingHandler.FilterChainSelector;
 import io.grpc.xds.ThreadSafeRandom.ThreadSafeRandomImpl;
 import io.grpc.xds.VirtualHost.Route;
-import io.grpc.xds.XdsClient.ResourceWatcher;
 import io.grpc.xds.XdsListenerResource.LdsUpdate;
-import io.grpc.xds.XdsNameResolverProvider.XdsClientPoolFactory;
 import io.grpc.xds.XdsRouteConfigureResource.RdsUpdate;
 import io.grpc.xds.XdsServerBuilder.XdsServingStatusListener;
+import io.grpc.xds.client.XdsClient;
+import io.grpc.xds.client.XdsClient.ResourceWatcher;
 import io.grpc.xds.internal.security.SslContextProviderSupplier;
 import java.io.IOException;
 import java.net.SocketAddress;

File: xds/src/main/java/io/grpc/xds/client/ReferenceCounted.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds;
+package io.grpc.xds.client;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;

File: xds/src/main/java/io/grpc/xds/client/XdsTransportFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds;
+package io.grpc.xds.client;
 
 import io.grpc.ExperimentalApi;
 import io.grpc.MethodDescriptor;

File: xds/src/main/java/io/grpc/xds/internal/security/ClientSslContextProviderFactory.java
Patch:
@@ -18,8 +18,8 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-import io.grpc.xds.Bootstrapper.BootstrapInfo;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper.BootstrapInfo;
 import io.grpc.xds.internal.security.ReferenceCountingMap.ValueFactory;
 import io.grpc.xds.internal.security.certprovider.CertProviderClientSslContextProviderFactory;
 

File: xds/src/main/java/io/grpc/xds/internal/security/ServerSslContextProviderFactory.java
Patch:
@@ -18,8 +18,8 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-import io.grpc.xds.Bootstrapper.BootstrapInfo;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper.BootstrapInfo;
 import io.grpc.xds.internal.security.ReferenceCountingMap.ValueFactory;
 import io.grpc.xds.internal.security.certprovider.CertProviderServerSslContextProviderFactory;
 

File: xds/src/main/java/io/grpc/xds/internal/security/TlsContextManagerImpl.java
Patch:
@@ -20,10 +20,10 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
-import io.grpc.xds.Bootstrapper.BootstrapInfo;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
 import io.grpc.xds.TlsContextManager;
+import io.grpc.xds.client.Bootstrapper.BootstrapInfo;
 import io.grpc.xds.internal.security.ReferenceCountingMap.ValueFactory;
 
 /**

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertProviderClientSslContextProvider.java
Patch:
@@ -22,8 +22,8 @@
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
 import io.grpc.netty.GrpcSslContexts;
-import io.grpc.xds.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.internal.security.trust.XdsTrustManagerFactory;
 import io.netty.handler.ssl.SslContextBuilder;
 import java.security.cert.CertStoreException;

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertProviderClientSslContextProviderFactory.java
Patch:
@@ -23,8 +23,8 @@
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
 import io.grpc.Internal;
-import io.grpc.xds.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.internal.security.SslContextProvider;
 import java.util.Map;
 import javax.annotation.Nullable;

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertProviderServerSslContextProvider.java
Patch:
@@ -22,8 +22,8 @@
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
 import io.grpc.netty.GrpcSslContexts;
-import io.grpc.xds.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.internal.security.trust.XdsTrustManagerFactory;
 import io.netty.handler.ssl.SslContextBuilder;
 import java.io.IOException;

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertProviderServerSslContextProviderFactory.java
Patch:
@@ -23,8 +23,8 @@
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
 import io.grpc.Internal;
-import io.grpc.xds.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.internal.security.SslContextProvider;
 import java.util.Map;
 import javax.annotation.Nullable;

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertProviderSslContextProvider.java
Patch:
@@ -20,8 +20,8 @@
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance;
-import io.grpc.xds.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;
+import io.grpc.xds.client.Bootstrapper.CertificateProviderInfo;
 import io.grpc.xds.internal.security.CommonTlsContextUtil;
 import io.grpc.xds.internal.security.DynamicSslContextProvider;
 import java.security.PrivateKey;

File: xds/src/test/java/io/grpc/xds/CommonBootstrapperTestUtils.java
Patch:
@@ -19,7 +19,9 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import io.grpc.internal.JsonParser;
-import io.grpc.xds.Bootstrapper.ServerInfo;
+import io.grpc.xds.client.Bootstrapper;
+import io.grpc.xds.client.Bootstrapper.ServerInfo;
+import io.grpc.xds.client.EnvoyProtoData;
 import io.grpc.xds.internal.security.CommonTlsContextTestsUtil;
 import java.io.IOException;
 import java.util.HashMap;

File: xds/src/test/java/io/grpc/xds/GrpcXdsTransportFactoryTest.java
Patch:
@@ -30,6 +30,8 @@
 import io.grpc.Server;
 import io.grpc.Status;
 import io.grpc.stub.StreamObserver;
+import io.grpc.xds.client.Bootstrapper;
+import io.grpc.xds.client.XdsTransportFactory;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;

File: xds/src/test/java/io/grpc/xds/LoadBalancerConfigFactoryTest.java
Patch:
@@ -52,7 +52,7 @@
 import io.grpc.internal.JsonUtil;
 import io.grpc.internal.ServiceConfigUtil;
 import io.grpc.internal.ServiceConfigUtil.LbConfig;
-import io.grpc.xds.XdsResourceType.ResourceInvalidException;
+import io.grpc.xds.client.XdsResourceType.ResourceInvalidException;
 import java.util.List;
 import org.junit.After;
 import org.junit.Test;

File: xds/src/test/java/io/grpc/xds/WrrLocalityLoadBalancerTest.java
Patch:
@@ -42,6 +42,7 @@
 import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;
 import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;
 import io.grpc.xds.WrrLocalityLoadBalancer.WrrLocalityConfig;
+import io.grpc.xds.client.Locality;
 import java.net.SocketAddress;
 import java.util.Collections;
 import java.util.List;

File: xds/src/test/java/io/grpc/xds/XdsSecurityClientServerTest.java
Patch:
@@ -60,6 +60,7 @@
 import io.grpc.xds.XdsListenerResource.LdsUpdate;
 import io.grpc.xds.XdsServerTestHelper.FakeXdsClient;
 import io.grpc.xds.XdsServerTestHelper.FakeXdsClientPoolFactory;
+import io.grpc.xds.client.Bootstrapper;
 import io.grpc.xds.internal.Matchers.HeaderMatcher;
 import io.grpc.xds.internal.security.CommonTlsContextTestsUtil;
 import io.grpc.xds.internal.security.SslContextProviderSupplier;

File: xds/src/test/java/io/grpc/xds/client/EnvoyProtoDataTest.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.grpc.xds;
+package io.grpc.xds.client;
 
 import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.collect.ImmutableMap;
 import com.google.protobuf.Struct;
 import com.google.protobuf.Value;
-import io.grpc.xds.EnvoyProtoData.Address;
-import io.grpc.xds.EnvoyProtoData.Node;
+import io.grpc.xds.client.EnvoyProtoData.Address;
+import io.grpc.xds.client.EnvoyProtoData.Node;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;

File: xds/src/test/java/io/grpc/xds/internal/security/ClientSslContextProviderFactoryTest.java
Patch:
@@ -28,10 +28,10 @@
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate;
 import io.envoyproxy.envoy.type.matcher.v3.StringMatcher;
-import io.grpc.xds.Bootstrapper;
 import io.grpc.xds.CommonBootstrapperTestUtils;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
-import io.grpc.xds.XdsInitializationException;
+import io.grpc.xds.client.Bootstrapper;
+import io.grpc.xds.client.XdsInitializationException;
 import io.grpc.xds.internal.security.certprovider.CertProviderClientSslContextProviderFactory;
 import io.grpc.xds.internal.security.certprovider.CertificateProvider;
 import io.grpc.xds.internal.security.certprovider.CertificateProviderProvider;

File: xds/src/test/java/io/grpc/xds/internal/security/SecurityProtocolNegotiatorsTest.java
Patch:
@@ -45,12 +45,12 @@
 import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;
 import io.grpc.netty.InternalProtocolNegotiators;
 import io.grpc.netty.ProtocolNegotiationEvent;
-import io.grpc.xds.Bootstrapper;
 import io.grpc.xds.CommonBootstrapperTestUtils;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
 import io.grpc.xds.InternalXdsAttributes;
 import io.grpc.xds.TlsContextManager;
+import io.grpc.xds.client.Bootstrapper;
 import io.grpc.xds.internal.security.SecurityProtocolNegotiators.ClientSecurityHandler;
 import io.grpc.xds.internal.security.SecurityProtocolNegotiators.ClientSecurityProtocolNegotiator;
 import io.grpc.xds.internal.security.certprovider.CommonCertProviderTestUtils;

File: xds/src/test/java/io/grpc/xds/internal/security/ServerSslContextProviderFactoryTest.java
Patch:
@@ -24,11 +24,11 @@
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
 import io.envoyproxy.envoy.type.matcher.v3.StringMatcher;
-import io.grpc.xds.Bootstrapper;
 import io.grpc.xds.CommonBootstrapperTestUtils;
 import io.grpc.xds.EnvoyServerProtoData;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
-import io.grpc.xds.XdsInitializationException;
+import io.grpc.xds.client.Bootstrapper;
+import io.grpc.xds.client.XdsInitializationException;
 import io.grpc.xds.internal.security.certprovider.CertProviderServerSslContextProviderFactory;
 import io.grpc.xds.internal.security.certprovider.CertificateProvider;
 import io.grpc.xds.internal.security.certprovider.CertificateProviderRegistry;

File: xds/src/test/java/io/grpc/xds/internal/security/TlsContextManagerTest.java
Patch:
@@ -30,10 +30,10 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import io.grpc.xds.Bootstrapper;
 import io.grpc.xds.CommonBootstrapperTestUtils;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
+import io.grpc.xds.client.Bootstrapper;
 import io.grpc.xds.internal.security.ReferenceCountingMap.ValueFactory;
 import org.junit.Rule;
 import org.junit.Test;

File: xds/src/test/java/io/grpc/xds/internal/security/certprovider/CertProviderClientSslContextProviderTest.java
Patch:
@@ -33,9 +33,9 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import io.envoyproxy.envoy.config.core.v3.DataSource;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
-import io.grpc.xds.Bootstrapper;
 import io.grpc.xds.CommonBootstrapperTestUtils;
 import io.grpc.xds.EnvoyServerProtoData;
+import io.grpc.xds.client.Bootstrapper;
 import io.grpc.xds.internal.security.CommonTlsContextTestsUtil;
 import io.grpc.xds.internal.security.CommonTlsContextTestsUtil.TestCallback;
 import java.util.Queue;

File: xds/src/test/java/io/grpc/xds/internal/security/certprovider/CertProviderServerSslContextProviderTest.java
Patch:
@@ -32,9 +32,9 @@
 import io.envoyproxy.envoy.config.core.v3.DataSource;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.envoyproxy.envoy.type.matcher.v3.StringMatcher;
-import io.grpc.xds.Bootstrapper;
 import io.grpc.xds.CommonBootstrapperTestUtils;
 import io.grpc.xds.EnvoyServerProtoData;
+import io.grpc.xds.client.Bootstrapper;
 import io.grpc.xds.internal.security.CommonTlsContextTestsUtil;
 import io.grpc.xds.internal.security.CommonTlsContextTestsUtil.TestCallback;
 import io.grpc.xds.internal.security.certprovider.CertProviderClientSslContextProviderTest.QueuedExecutor;

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -696,7 +696,7 @@ private void stop() {
     // called in syncContext
     private void updateRoutes(List<VirtualHost> virtualHosts, long httpMaxStreamDurationNano,
         @Nullable List<NamedFilterConfig> filterConfigs) {
-      String authority = overrideAuthority != null ? overrideAuthority : ldsResourceName;
+      String authority = overrideAuthority != null ? overrideAuthority : encodedServiceAuthority;
       VirtualHost virtualHost = RoutingUtils.findVirtualHostForHostName(virtualHosts, authority);
       if (virtualHost == null) {
         String error = "Failed to find virtual host matching hostname: " + authority;

File: xds/src/main/java/io/grpc/xds/ControlPlaneClient.java
Patch:
@@ -392,7 +392,9 @@ private void handleRpcStreamClosed(Status error) {
         // has never been initialized.
         retryBackoffPolicy = backoffPolicyProvider.get();
       }
-      // Need this here to avoid tsan race condition in XdsClientImplTestBase.sendToNonexistentHost
+      // FakeClock in tests isn't thread-safe. Schedule the retry timer before notifying callbacks
+      // to avoid TSAN races, since tests may wait until callbacks are called but then would run
+      // concurrently with the stopwatch and schedule.
       long elapsed = stopwatch.elapsed(TimeUnit.NANOSECONDS);
       long delayNanos = Math.max(0, retryBackoffPolicy.nextBackoffNanos() - elapsed);
       rpcRetryTimer = syncContext.schedule(

File: xds/src/main/java/io/grpc/xds/ControlPlaneClient.java
Patch:
@@ -199,6 +199,7 @@ boolean isInBackoff() {
     return rpcRetryTimer != null && rpcRetryTimer.isPending();
   }
 
+  // Must be synchronized.
   boolean isReady() {
     return adsStream != null && adsStream.call != null && adsStream.call.isReady();
   }
@@ -207,6 +208,7 @@ boolean isReady() {
    * Starts a timer for each requested resource that hasn't been responded to and
    * has been waiting for the channel to get ready.
    */
+  // Must be synchronized.
   void readyHandler() {
     if (!isReady()) {
       return;
@@ -325,7 +327,7 @@ final void sendDiscoveryRequest(XdsResourceType<?> type, Collection<String> reso
 
     @Override
     public void onReady() {
-      readyHandler();
+      syncContext.execute(ControlPlaneClient.this::readyHandler);
     }
 
     @Override

File: api/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -158,7 +158,7 @@ public interface Marshaller<T> {
   }
 
   /**
-   * A marshaller that supports retrieving it's type parameter {@code T} at runtime.
+   * A marshaller that supports retrieving its type parameter {@code T} at runtime.
    *
    * @since 1.1.0
    */

File: auth/src/main/java/io/grpc/auth/GoogleAuthLibraryCallCredentials.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.auth.Credentials;
 import com.google.auth.RequestMetadataCallback;
+import com.google.auth.Retryable;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.io.BaseEncoding;
 import io.grpc.InternalMayRequireSpecificExecutor;
@@ -28,7 +29,6 @@
 import io.grpc.SecurityLevel;
 import io.grpc.Status;
 import io.grpc.StatusException;
-import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.net.URI;
@@ -143,8 +143,8 @@ public void onSuccess(Map<String, List<String>> metadata) {
 
       @Override
       public void onFailure(Throwable e) {
-        if (e instanceof IOException) {
-          // Since it's an I/O failure, let the call be retried with UNAVAILABLE.
+        if (e instanceof Retryable && ((Retryable) e).isRetryable()) {
+          // Let the call be retried with UNAVAILABLE.
           applier.fail(Status.UNAVAILABLE
               .withDescription("Credentials failed to obtain metadata")
               .withCause(e));

File: binder/src/main/java/io/grpc/binder/internal/BinderTransport.java
Patch:
@@ -412,7 +412,7 @@ final void sendOutOfBandClose(int callId, Status status) {
       TransactionUtils.fillInFlags(parcel.get(), flags | TransactionUtils.FLAG_OUT_OF_BAND_CLOSE);
       sendTransaction(callId, parcel);
     } catch (StatusException e) {
-      logger.log(Level.WARNING, "Failed sending oob close transaction", e);
+      logger.log(Level.FINER, "Failed sending oob close transaction", e);
     }
   }
 

File: xds/src/main/java/io/grpc/xds/XdsListenerResource.java
Patch:
@@ -130,7 +130,8 @@ private LdsUpdate processServerSideListener(Listener proto, Args args)
     if (args.bootstrapInfo != null && args.bootstrapInfo.certProviders() != null) {
       certProviderInstances = args.bootstrapInfo.certProviders().keySet();
     }
-    return LdsUpdate.forTcpListener(parseServerSideListener(proto, args.tlsContextManager,
+    return LdsUpdate.forTcpListener(parseServerSideListener(proto,
+        (TlsContextManager) args.securityConfig,
         filterRegistry, certProviderInstances));
   }
 

File: core/src/main/java/io/grpc/internal/AbstractClientStream.java
Patch:
@@ -455,10 +455,10 @@ private void closeListener(
       if (!listenerClosed) {
         listenerClosed = true;
         statsTraceCtx.streamClosed(status);
-        listener().closed(status, rpcProgress, trailers);
         if (getTransportTracer() != null) {
           getTransportTracer().reportStreamClosed(status.isOk());
         }
+        listener().closed(status, rpcProgress, trailers);
       }
     }
   }

File: xds/src/main/java/io/grpc/xds/WeightedRoundRobinLoadBalancer.java
Patch:
@@ -378,6 +378,9 @@ public PickResult pickSubchannel(PickSubchannelArgs args) {
       WeightedChildLbState wChild = (WeightedChildLbState) childLbState;
       PickResult pickResult = childLbState.getCurrentPicker().pickSubchannel(args);
       Subchannel subchannel = pickResult.getSubchannel();
+      if (subchannel == null) {
+        return pickResult;
+      }
       if (!enableOobLoadReport) {
         return PickResult.withSubchannel(subchannel,
             OrcaPerRequestUtil.getInstance().newOrcaClientStreamTracerFactory(

File: xds/src/main/java/io/grpc/xds/XdsClusterResource.java
Patch:
@@ -56,6 +56,8 @@ class XdsClusterResource extends XdsResourceType<CdsUpdate> {
       "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext";
   private static final String TYPE_URL_UPSTREAM_TLS_CONTEXT_V2 =
       "type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext";
+  private final LoadBalancerRegistry loadBalancerRegistry
+      = LoadBalancerRegistry.getDefaultRegistry();
 
   private static final XdsClusterResource instance = new XdsClusterResource();
 
@@ -103,7 +105,7 @@ protected CdsUpdate doParse(Args args, Message unpackedMessage) throws ResourceI
       certProviderInstances = args.bootstrapInfo.certProviders().keySet();
     }
     return processCluster((Cluster) unpackedMessage, certProviderInstances,
-        args.serverInfo, args.loadBalancerRegistry);
+        args.serverInfo, loadBalancerRegistry);
   }
 
   @VisibleForTesting

File: xds/src/main/java/io/grpc/xds/XdsRouteConfigureResource.java
Patch:
@@ -118,8 +118,7 @@ protected RdsUpdate doParse(XdsResourceType.Args args, Message unpackedMessage)
     if (!(unpackedMessage instanceof RouteConfiguration)) {
       throw new ResourceInvalidException("Invalid message type: " + unpackedMessage.getClass());
     }
-    return processRouteConfiguration((RouteConfiguration) unpackedMessage,
-        args.filterRegistry);
+    return processRouteConfiguration((RouteConfiguration) unpackedMessage, filterRegistry);
   }
 
   private static RdsUpdate processRouteConfiguration(

File: xds/src/main/java/io/grpc/xds/LoadBalancerConfigFactory.java
Patch:
@@ -39,8 +39,8 @@
 import io.grpc.LoadBalancerRegistry;
 import io.grpc.internal.JsonParser;
 import io.grpc.xds.LoadBalancerConfigFactory.LoadBalancingPolicyConverter.MaxRecursionReachedException;
-import io.grpc.xds.XdsClientImpl.ResourceInvalidException;
 import io.grpc.xds.XdsLogger.XdsLogLevel;
+import io.grpc.xds.XdsResourceType.ResourceInvalidException;
 import java.io.IOException;
 import java.util.Map;
 

File: xds/src/main/java/io/grpc/xds/XdsClient.java
Patch:
@@ -47,7 +47,7 @@
  * protocols (e.g., LDS, RDS, VHDS, CDS and EDS) over a single channel. Watch-based interfaces
  * are provided for each set of data needed by gRPC.
  */
-abstract class XdsClient {
+public abstract class XdsClient {
 
   static boolean isResourceNameValid(String resourceName, String typeUrl) {
     checkNotNull(resourceName, "resourceName");
@@ -110,8 +110,7 @@ static String percentEncodePath(String input) {
     return Joiner.on('/').join(encodedSegs);
   }
 
-  interface ResourceUpdate {
-  }
+  public interface ResourceUpdate {}
 
   /**
    * Watcher interface for a single requested xDS resource.

File: xds/src/test/java/io/grpc/xds/LoadBalancerConfigFactoryTest.java
Patch:
@@ -52,7 +52,7 @@
 import io.grpc.internal.JsonUtil;
 import io.grpc.internal.ServiceConfigUtil;
 import io.grpc.internal.ServiceConfigUtil.LbConfig;
-import io.grpc.xds.XdsClientImpl.ResourceInvalidException;
+import io.grpc.xds.XdsResourceType.ResourceInvalidException;
 import java.util.List;
 import org.junit.After;
 import org.junit.Test;

File: xds/src/test/java/io/grpc/xds/XdsClientImplDataTest.java
Patch:
@@ -134,8 +134,8 @@
 import io.grpc.xds.VirtualHost.Route.RouteMatch;
 import io.grpc.xds.VirtualHost.Route.RouteMatch.PathMatcher;
 import io.grpc.xds.WeightedRoundRobinLoadBalancer.WeightedRoundRobinLoadBalancerConfig;
-import io.grpc.xds.XdsClientImpl.ResourceInvalidException;
 import io.grpc.xds.XdsClusterResource.CdsUpdate;
+import io.grpc.xds.XdsResourceType.ResourceInvalidException;
 import io.grpc.xds.XdsResourceType.StructOrError;
 import io.grpc.xds.internal.Matchers;
 import io.grpc.xds.internal.Matchers.FractionMatcher;

File: xds/src/test/java/io/grpc/xds/XdsClientImplTestBase.java
Patch:
@@ -91,12 +91,12 @@
 import io.grpc.xds.XdsClient.ResourceMetadata.UpdateFailureState;
 import io.grpc.xds.XdsClient.ResourceUpdate;
 import io.grpc.xds.XdsClient.ResourceWatcher;
-import io.grpc.xds.XdsClientImpl.ResourceInvalidException;
 import io.grpc.xds.XdsClientImpl.XdsChannelFactory;
 import io.grpc.xds.XdsClusterResource.CdsUpdate;
 import io.grpc.xds.XdsClusterResource.CdsUpdate.ClusterType;
 import io.grpc.xds.XdsEndpointResource.EdsUpdate;
 import io.grpc.xds.XdsListenerResource.LdsUpdate;
+import io.grpc.xds.XdsResourceType.ResourceInvalidException;
 import io.grpc.xds.XdsRouteConfigureResource.RdsUpdate;
 import io.grpc.xds.internal.security.CommonTlsContextTestsUtil;
 import java.io.IOException;
@@ -2242,7 +2242,7 @@ public void cdsResponseErrorHandling_badUpstreamTlsContext() {
     // The response NACKed with errors indicating indices of the failed resources.
     String errorMsg =  "CDS response Cluster 'cluster.googleapis.com' validation error: "
             + "Cluster cluster.googleapis.com: malformed UpstreamTlsContext: "
-            + "io.grpc.xds.XdsClientImpl$ResourceInvalidException: "
+            + "io.grpc.xds.XdsResourceType$ResourceInvalidException: "
             + "ca_certificate_provider_instance is required in upstream-tls-context";
     call.verifyRequestNack(CDS, CDS_RESOURCE, "", "0000", NODE, ImmutableList.of(errorMsg));
     verify(cdsResourceWatcher).onError(errorCaptor.capture());
@@ -2349,7 +2349,7 @@ public void cdsResponseWithInvalidOutlierDetectionNacks() {
 
     String errorMsg = "CDS response Cluster 'cluster.googleapis.com' validation error: "
         + "Cluster cluster.googleapis.com: malformed outlier_detection: "
-        + "io.grpc.xds.XdsClientImpl$ResourceInvalidException: outlier_detection "
+        + "io.grpc.xds.XdsResourceType$ResourceInvalidException: outlier_detection "
         + "max_ejection_percent is > 100";
     call.verifyRequestNack(CDS, CDS_RESOURCE, "", "0000", NODE, ImmutableList.of(errorMsg));
     verify(cdsResourceWatcher).onError(errorCaptor.capture());

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -131,7 +131,7 @@ protected void handleNotInUse() {
 
   private WriteQueue clientWriteQueue;
   private Http2Ping ping;
-  private volatile Attributes attributes;
+  private Attributes attributes;
   private InternalChannelz.Security securityInfo;
   private Status abruptGoAwayStatus;
   private Status channelInactiveReason;
@@ -917,7 +917,8 @@ private class FrameListener extends Http2FrameAdapter {
     public void onSettingsRead(ChannelHandlerContext ctx, Http2Settings settings) {
       if (firstSettings) {
         firstSettings = false;
-        attributes = lifecycleManager.notifyReady(attributes);
+        attributes = lifecycleManager.filterAttributes(attributes);
+        lifecycleManager.notifyReady();
       }
     }
 

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -131,7 +131,7 @@ protected void handleNotInUse() {
 
   private WriteQueue clientWriteQueue;
   private Http2Ping ping;
-  private Attributes attributes;
+  private volatile Attributes attributes;
   private InternalChannelz.Security securityInfo;
   private Status abruptGoAwayStatus;
   private Status channelInactiveReason;

File: api/src/test/java/io/grpc/ContextTest.java
Patch:
@@ -706,7 +706,7 @@ public void relativeDeadlineTriggersAndPropagates() throws Exception {
 
   @Test
   public void innerDeadlineCompletesBeforeOuter() throws Exception {
-    Context base = Context.current().withDeadline(Deadline.after(2, TimeUnit.SECONDS), scheduler);
+    Context base = Context.current().withDeadline(Deadline.after(3, TimeUnit.SECONDS), scheduler);
     Context child = base.withDeadline(Deadline.after(1, TimeUnit.SECONDS), scheduler);
     child.addListener(cancellationListener, MoreExecutors.directExecutor());
     assertFalse(base.isCancelled());
@@ -719,7 +719,7 @@ public void innerDeadlineCompletesBeforeOuter() throws Exception {
 
     deadlineLatch = new CountDownLatch(1);
     base.addListener(cancellationListener, MoreExecutors.directExecutor());
-    assertTrue(deadlineLatch.await(2, TimeUnit.SECONDS));
+    assertTrue(deadlineLatch.await(4, TimeUnit.SECONDS));
     assertTrue(base.isCancelled());
     assertTrue(base.cancellationCause() instanceof TimeoutException);
     assertNotSame(base.cancellationCause(), child.cancellationCause());

File: core/src/main/java/io/grpc/internal/ManagedClientTransport.java
Patch:
@@ -110,6 +110,8 @@ interface Listener {
      * Called just before {@link #transportReady} to allow direct modification of transport
      * Attributes.
      */
-    Attributes filterTransport(Attributes attributes);
+    default Attributes filterTransport(Attributes attributes) {
+      return attributes;
+    }
   }
 }

File: xds/src/test/java/io/grpc/xds/XdsClientImplTestBase.java
Patch:
@@ -3010,10 +3010,10 @@ public void flowControlAbsent() throws Exception {
         + "Cluster cluster.googleapis.com2: unspecified cluster discovery type";
     call.verifyRequestNack(CDS, Arrays.asList(CDS_RESOURCE, anotherCdsResource), VERSION_1, "0001",
         NODE, Arrays.asList(errorMsg));
-    verify(anotherWatcher).onResourceDoesNotExist(eq(anotherCdsResource));
     barrier.await();
     latch.await(10, TimeUnit.SECONDS);
     verify(cdsResourceWatcher, times(2)).onChanged(any());
+    verify(anotherWatcher).onResourceDoesNotExist(eq(anotherCdsResource));
     verify(anotherWatcher).onError(any());
   }
 

File: xds/src/test/java/io/grpc/xds/ClusterResolverLoadBalancerTest.java
Patch:
@@ -88,6 +88,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
 import org.junit.After;
@@ -1181,11 +1182,11 @@ public String toString() {
   private static final class FakeXdsClient extends XdsClient {
     private final Map<String, ResourceWatcher<EdsUpdate>> watchers = new HashMap<>();
 
-
     @Override
     @SuppressWarnings("unchecked")
     <T extends ResourceUpdate> void watchXdsResource(XdsResourceType<T> type, String resourceName,
-                          ResourceWatcher<T> watcher) {
+                                                     ResourceWatcher<T> watcher,
+                                                     Executor syncContext) {
       assertThat(type.typeName()).isEqualTo("EDS");
       assertThat(watchers).doesNotContainKey(resourceName);
       watchers.put(resourceName, (ResourceWatcher<EdsUpdate>) watcher);

File: xds/src/test/java/io/grpc/xds/XdsServerTestHelper.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 
 /**
@@ -182,7 +183,8 @@ public BootstrapInfo getBootstrapInfo() {
     @SuppressWarnings("unchecked")
     <T extends ResourceUpdate> void watchXdsResource(XdsResourceType<T> resourceType,
                                                      String resourceName,
-                                                     ResourceWatcher<T> watcher) {
+                                                     ResourceWatcher<T> watcher,
+                                                     Executor syncContext) {
       switch (resourceType.typeName()) {
         case "LDS":
           assertThat(ldsWatcher).isNull();

File: xds/src/test/java/io/grpc/xds/ClusterResolverLoadBalancerTest.java
Patch:
@@ -88,7 +88,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
-import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
 import org.junit.After;
@@ -1182,11 +1181,11 @@ public String toString() {
   private static final class FakeXdsClient extends XdsClient {
     private final Map<String, ResourceWatcher<EdsUpdate>> watchers = new HashMap<>();
 
+
     @Override
     @SuppressWarnings("unchecked")
     <T extends ResourceUpdate> void watchXdsResource(XdsResourceType<T> type, String resourceName,
-                                                     ResourceWatcher<T> watcher,
-                                                     Executor syncContext) {
+                          ResourceWatcher<T> watcher) {
       assertThat(type.typeName()).isEqualTo("EDS");
       assertThat(watchers).doesNotContainKey(resourceName);
       watchers.put(resourceName, (ResourceWatcher<EdsUpdate>) watcher);

File: xds/src/test/java/io/grpc/xds/XdsServerTestHelper.java
Patch:
@@ -39,7 +39,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 
 /**
@@ -183,8 +182,7 @@ public BootstrapInfo getBootstrapInfo() {
     @SuppressWarnings("unchecked")
     <T extends ResourceUpdate> void watchXdsResource(XdsResourceType<T> resourceType,
                                                      String resourceName,
-                                                     ResourceWatcher<T> watcher,
-                                                     Executor syncContext) {
+                                                     ResourceWatcher<T> watcher) {
       switch (resourceType.typeName()) {
         case "LDS":
           assertThat(ldsWatcher).isNull();

File: api/src/test/java/io/grpc/ContextsTest.java
Patch:
@@ -28,7 +28,6 @@
 import static org.junit.Assert.fail;
 
 import com.google.common.util.concurrent.testing.TestingExecutors;
-import io.grpc.internal.NoopServerCall;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;

File: api/src/test/java/io/grpc/ServerInterceptorsTest.java
Patch:
@@ -31,7 +31,6 @@
 import io.grpc.MethodDescriptor.Marshaller;
 import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.ServerCall.Listener;
-import io.grpc.internal.NoopServerCall;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.util.ArrayList;

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -59,6 +59,7 @@
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.MethodType;
+import io.grpc.NoopClientCall;
 import io.grpc.Status;
 import io.grpc.internal.ClientCallImpl.ClientStreamProvider;
 import io.grpc.internal.ManagedChannelServiceConfig.MethodInfo;

File: core/src/test/java/io/grpc/internal/ConfigSelectingClientCallTest.java
Patch:
@@ -31,6 +31,7 @@
 import io.grpc.LoadBalancer.PickSubchannelArgs;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
+import io.grpc.NoopClientCall;
 import io.grpc.Status;
 import io.grpc.internal.ManagedChannelImpl.ConfigSelectingClientCall;
 import io.grpc.internal.ManagedChannelServiceConfig.MethodInfo;

File: core/src/test/java/io/grpc/internal/ForwardingManagedChannelTest.java
Patch:
@@ -28,6 +28,7 @@
 import io.grpc.ForwardingTestUtil;
 import io.grpc.ManagedChannel;
 import io.grpc.MethodDescriptor;
+import io.grpc.NoopClientCall;
 import io.grpc.testing.TestMethodDescriptors;
 import java.lang.reflect.Method;
 import java.util.Collections;

File: gcp-observability/src/test/java/io/grpc/gcp/observability/interceptors/InternalLoggingChannelInterceptorTest.java
Patch:
@@ -47,9 +47,9 @@
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.MethodType;
+import io.grpc.NoopClientCall;
 import io.grpc.Status;
 import io.grpc.gcp.observability.interceptors.ConfigFilterHelper.FilterParams;
-import io.grpc.internal.NoopClientCall;
 import io.grpc.observabilitylog.v1.GrpcLogRecord;
 import io.grpc.observabilitylog.v1.GrpcLogRecord.EventLogger;
 import io.grpc.observabilitylog.v1.GrpcLogRecord.EventType;

File: gcp-observability/src/test/java/io/grpc/gcp/observability/interceptors/InternalLoggingServerInterceptorTest.java
Patch:
@@ -39,10 +39,10 @@
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.MethodType;
+import io.grpc.NoopServerCall;
 import io.grpc.ServerCall;
 import io.grpc.Status;
 import io.grpc.gcp.observability.interceptors.ConfigFilterHelper.FilterParams;
-import io.grpc.internal.NoopServerCall;
 import io.grpc.observabilitylog.v1.GrpcLogRecord.EventLogger;
 import io.grpc.observabilitylog.v1.GrpcLogRecord.EventType;
 import io.opencensus.trace.SpanContext;

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -30,7 +30,7 @@
 import io.grpc.ClientCall;
 import io.grpc.Deadline;
 import io.grpc.MethodDescriptor;
-import io.grpc.internal.NoopClientCall;
+import io.grpc.NoopClientCall;
 import io.grpc.testing.integration.Messages.SimpleRequest;
 import io.grpc.testing.integration.Messages.SimpleResponse;
 import io.grpc.testing.integration.TestServiceGrpc;

File: services/src/test/java/io/grpc/protobuf/services/BinaryLogProviderTest.java
Patch:
@@ -35,12 +35,12 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.Marshaller;
 import io.grpc.MethodDescriptor.MethodType;
+import io.grpc.NoopClientCall;
+import io.grpc.NoopServerCall;
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
 import io.grpc.ServerMethodDefinition;
-import io.grpc.internal.NoopClientCall;
-import io.grpc.internal.NoopServerCall;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;

File: services/src/test/java/io/grpc/protobuf/services/BinlogHelperTest.java
Patch:
@@ -54,6 +54,8 @@
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.MethodType;
+import io.grpc.NoopClientCall;
+import io.grpc.NoopServerCall;
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.Status;
@@ -67,8 +69,6 @@
 import io.grpc.binarylog.v1.MetadataEntry;
 import io.grpc.binarylog.v1.ServerHeader;
 import io.grpc.binarylog.v1.Trailer;
-import io.grpc.internal.NoopClientCall;
-import io.grpc.internal.NoopServerCall;
 import io.grpc.protobuf.StatusProto;
 import io.grpc.protobuf.services.BinlogHelper.FactoryImpl;
 import io.grpc.protobuf.services.BinlogHelper.MaybeTruncated;

File: stub/src/test/java/io/grpc/stub/ClientCallsTest.java
Patch:
@@ -39,14 +39,14 @@
 import io.grpc.ManagedChannel;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
+import io.grpc.NoopClientCall;
 import io.grpc.Server;
 import io.grpc.ServerServiceDefinition;
 import io.grpc.ServiceDescriptor;
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.inprocess.InProcessChannelBuilder;
 import io.grpc.inprocess.InProcessServerBuilder;
-import io.grpc.internal.NoopClientCall;
 import io.grpc.stub.ClientCalls.StubType;
 import io.grpc.stub.ServerCalls.NoopStreamObserver;
 import io.grpc.stub.ServerCalls.ServerStreamingMethod;

File: util/src/test/java/io/grpc/util/UtilServerInterceptorsTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
+import io.grpc.NoopServerCall;
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptors;
@@ -29,7 +30,6 @@
 import io.grpc.ServiceDescriptor;
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
-import io.grpc.internal.NoopServerCall;
 import io.grpc.testing.TestMethodDescriptors;
 import java.util.Arrays;
 import org.junit.Test;

File: xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java
Patch:
@@ -57,15 +57,15 @@
 import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.NameResolver.ResolutionResult;
 import io.grpc.NameResolver.ServiceConfigParser;
+import io.grpc.NoopClientCall;
+import io.grpc.NoopClientCall.NoopClientCallListener;
 import io.grpc.Status;
 import io.grpc.Status.Code;
 import io.grpc.SynchronizationContext;
 import io.grpc.internal.AutoConfiguredLoadBalancerFactory;
 import io.grpc.internal.FakeClock;
 import io.grpc.internal.JsonParser;
 import io.grpc.internal.JsonUtil;
-import io.grpc.internal.NoopClientCall;
-import io.grpc.internal.NoopClientCall.NoopClientCallListener;
 import io.grpc.internal.ObjectPool;
 import io.grpc.internal.PickSubchannelArgsImpl;
 import io.grpc.internal.ScParser;

File: core/src/main/java/io/grpc/internal/ManagedChannelOrphanWrapper.java
Patch:
@@ -157,10 +157,9 @@ static int cleanQueue(ReferenceQueue<ManagedChannelOrphanWrapper> refqueue) {
           Level level = Level.SEVERE;
           if (logger.isLoggable(level)) {
             String fmt =
-                "*~*~*~ Previous channel {0} was not shutdown properly!!! ~*~*~*"
+                "*~*~*~ Previous channel {0} was garbage collected without being shut down! ~*~*~*"
                     + System.getProperty("line.separator")
-                    + "    Make sure to call shutdown()/shutdownNow() and wait "
-                    + "until awaitTermination() returns true.";
+                    + "    Make sure to call shutdown()/shutdownNow()";
             LogRecord lr = new LogRecord(level, fmt);
             lr.setLoggerName(logger.getName());
             lr.setParameters(new Object[] {ref.channelStr});

File: gcp-observability/src/test/java/io/grpc/gcp/observability/interceptors/InternalLoggingChannelInterceptorTest.java
Patch:
@@ -58,7 +58,6 @@
 import io.opencensus.trace.TraceId;
 import io.opencensus.trace.TraceOptions;
 import io.opencensus.trace.Tracestate;
-import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.nio.charset.Charset;
@@ -104,7 +103,8 @@ public class InternalLoggingChannelInterceptorTest {
   private AtomicReference<Object> actualRequest;
   private SettableFuture<Void> halfCloseCalled;
   private SettableFuture<Void> cancelCalled;
-  private SocketAddress peer;
+  @SuppressWarnings("AddressSelection") // It will only be one address
+  private SocketAddress peer = new InetSocketAddress("127.0.0.1", 1234);
   private LogHelper mockLogHelper;
   private ConfigFilterHelper mockFilterHelper;
   private FilterParams filterParams;
@@ -119,7 +119,6 @@ public void setup() throws Exception {
     actualRequest = new AtomicReference<>();
     halfCloseCalled = SettableFuture.create();
     cancelCalled = SettableFuture.create();
-    peer = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 1234);
     filterParams = FilterParams.create(true, 0, 0);
   }
 

File: gcp-observability/src/test/java/io/grpc/gcp/observability/interceptors/InternalLoggingServerInterceptorTest.java
Patch:
@@ -46,7 +46,6 @@
 import io.grpc.observabilitylog.v1.GrpcLogRecord.EventLogger;
 import io.grpc.observabilitylog.v1.GrpcLogRecord.EventType;
 import io.opencensus.trace.SpanContext;
-import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.nio.charset.Charset;
@@ -87,7 +86,8 @@ public class InternalLoggingServerInterceptorTest {
   private AtomicReference<Metadata> actualTrailers;
   private LogHelper mockLogHelper;
   private ConfigFilterHelper mockFilterHelper;
-  private SocketAddress peer;
+  @SuppressWarnings("AddressSelection") // It will only be one address
+  private SocketAddress peer = new InetSocketAddress("127.0.0.1", 1234);
 
   @Before
   @SuppressWarnings("unchecked")
@@ -101,7 +101,6 @@ public void setup() throws Exception {
     actualResponse = new AtomicReference<>();
     actualStatus = new AtomicReference<>();
     actualTrailers = new AtomicReference<>();
-    peer = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 1234);
   }
 
   @Test

File: gcp-observability/src/test/java/io/grpc/gcp/observability/interceptors/LogHelperTest.java
Patch:
@@ -66,6 +66,7 @@
 /**
  * Tests for {@link LogHelper}.
  */
+@SuppressWarnings("AddressSelection") // It will only be one address
 @RunWith(JUnit4.class)
 public class LogHelperTest {
   public static final Marshaller<byte[]> BYTEARRAY_MARSHALLER = new ByteArrayMarshaller();

File: netty/src/test/java/io/grpc/netty/NettyAdaptiveCumulatorTest.java
Patch:
@@ -369,6 +369,7 @@ public void mergeWithCompositeTail_tailExpandable_fastWrite() {
     @Test
     public void mergeWithCompositeTail_tailExpandable_reallocateInMemory() {
       int tailFastCapacity = tail.writerIndex() + tail.maxFastWritableBytes();
+      @SuppressWarnings("InlineMeInliner") // Requires Java 11
       String inSuffixOverFastBytes = Strings.repeat("a", tailFastCapacity + 1);
       int newTailSize =  tail.readableBytes() + inSuffixOverFastBytes.length();
       composite.addFlattenedComponents(true, tail);
@@ -431,6 +432,7 @@ private void assertTailExpanded(String expectedTailReadableData, int expectedNew
     @Test
     public void mergeWithCompositeTail_tailNotExpandable_maxCapacityReached() {
       // Fill in tail to the maxCapacity.
+      @SuppressWarnings("InlineMeInliner") // Requires Java 11
       String tailSuffixFullCapacity = Strings.repeat("a", tail.maxWritableBytes());
       tail.writeCharSequence(tailSuffixFullCapacity, US_ASCII);
       composite.addFlattenedComponents(true, tail);

File: netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java
Patch:
@@ -139,6 +139,7 @@ public void failInvalidAuthority() {
     thrown.expect(IllegalArgumentException.class);
     thrown.expectMessage("Invalid host or port");
 
+    @SuppressWarnings("AddressSelection") // We actually expect zero addresses!
     Object unused =
         NettyChannelBuilder.forAddress(new InetSocketAddress("invalid_authority", 1234));
   }

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -546,6 +546,7 @@ public void maxHeaderListSizeShouldBeEnforcedOnClient() throws Exception {
 
   @Test
   public void huffmanCodingShouldNotBePerformed() throws Exception {
+    @SuppressWarnings("InlineMeInliner") // Requires Java 11
     String longStringOfA = Strings.repeat("a", 128);
 
     negotiator = ProtocolNegotiators.serverPlaintext();

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -293,6 +293,7 @@ private OkHttpClientTransport(
   /**
    * Create a transport connected to a fake peer for test.
    */
+  @SuppressWarnings("AddressSelection") // An IP address always returns one address
   @VisibleForTesting
   OkHttpClientTransport(
       OkHttpChannelBuilder.OkHttpTransportFactory transportFactory,

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/Credentials.java
Patch:
@@ -27,6 +27,8 @@ private Credentials() {
   }
 
   /** Returns an auth credential for the Basic scheme. */
+  @SuppressWarnings("StringCharset") // Changing old code doesn't fix any bugs and using
+                                     // Charsets/StandardCharsets adds bloat
   public static String basic(String userName, String password) {
     try {
       String usernameAndPassword = userName + ":" + password;

File: services/src/test/java/io/grpc/protobuf/services/BinlogHelperTest.java
Patch:
@@ -92,6 +92,7 @@
 import org.mockito.ArgumentMatchers;
 
 /** Tests for {@link BinlogHelper}. */
+@SuppressWarnings("AddressSelection") // It will only be one address
 @RunWith(JUnit4.class)
 public final class BinlogHelperTest {
   private static final Charset US_ASCII = Charset.forName("US-ASCII");

File: util/src/main/java/io/grpc/util/MultiChildLoadBalancer.java
Patch:
@@ -73,7 +73,7 @@ protected abstract SubchannelPicker getSubchannelPicker(
       Map<Object, SubchannelPicker> childPickers);
 
   protected SubchannelPicker getInitialPicker() {
-    return EMPTY_PICKER;
+    return new FixedResultPicker(PickResult.withNoResult());
   }
 
   protected SubchannelPicker getErrorPicker(Status error)  {

File: xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java
Patch:
@@ -172,7 +172,7 @@ public void shutdown() {
   private final class ClusterImplLbHelper extends ForwardingLoadBalancerHelper {
     private final AtomicLong inFlights;
     private ConnectivityState currentState = ConnectivityState.IDLE;
-    private SubchannelPicker currentPicker = LoadBalancer.EMPTY_PICKER;
+    private SubchannelPicker currentPicker = new FixedResultPicker(PickResult.withNoResult());
     private List<DropOverload> dropPolicies = Collections.emptyList();
     private long maxConcurrentRequests = DEFAULT_PER_CLUSTER_MAX_CONCURRENT_REQUESTS;
     @Nullable

File: xds/src/main/java/io/grpc/xds/PriorityLoadBalancer.java
Patch:
@@ -148,7 +148,7 @@ private void tryNextPriority() {
         ChildLbState child =
             new ChildLbState(priority, priorityConfigs.get(priority).ignoreReresolution);
         children.put(priority, child);
-        updateOverallState(priority, CONNECTING, LoadBalancer.EMPTY_PICKER);
+        updateOverallState(priority, CONNECTING, new FixedResultPicker(PickResult.withNoResult()));
         // Calling the child's updateResolvedAddresses() can result in tryNextPriority() being
         // called recursively. We need to be sure to be done with processing here before it is
         // called.
@@ -209,7 +209,7 @@ private final class ChildLbState {
     @Nullable ScheduledHandle deletionTimer;
     @Nullable String policy;
     ConnectivityState connectivityState = CONNECTING;
-    SubchannelPicker picker = LoadBalancer.EMPTY_PICKER;
+    SubchannelPicker picker = new FixedResultPicker(PickResult.withNoResult());
 
     ChildLbState(final String priority, boolean ignoreReresolution) {
       this.priority = priority;

File: xds/src/main/java/io/grpc/xds/WeightedTargetLoadBalancer.java
Patch:
@@ -158,7 +158,7 @@ private void updateOverallBalancingState() {
       if (overallState == TRANSIENT_FAILURE) {
         picker = new WeightedRandomPicker(errorPickers);
       } else {
-        picker = LoadBalancer.EMPTY_PICKER;
+        picker = new FixedResultPicker(PickResult.withNoResult());
       }
     } else {
       picker = new WeightedRandomPicker(childPickers);
@@ -190,7 +190,7 @@ private static ConnectivityState aggregateState(
   private final class ChildHelper extends ForwardingLoadBalancerHelper {
     String name;
     ConnectivityState currentState = CONNECTING;
-    SubchannelPicker currentPicker = LoadBalancer.EMPTY_PICKER;
+    SubchannelPicker currentPicker = new FixedResultPicker(PickResult.withNoResult());
 
     private ChildHelper(String name) {
       this.name = name;

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -220,7 +220,7 @@ public byte[] parseAsciiString(byte[] serialized) {
 
   public static final Splitter ACCEPT_ENCODING_SPLITTER = Splitter.on(',').trimResults();
 
-  private static final String IMPLEMENTATION_VERSION = "1.60.0-SNAPSHOT"; // CURRENT_GRPC_VERSION
+  public static final String IMPLEMENTATION_VERSION = "1.60.0-SNAPSHOT"; // CURRENT_GRPC_VERSION
 
   /**
    * The default timeout in nanos for a keepalive ping request.

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -810,7 +810,8 @@ void setListener(ServerStreamListener listener) {
      */
     private void internalClose(Throwable t) {
       // TODO(ejona86): this is not thread-safe :)
-      stream.close(Status.UNKNOWN.withCause(t), new Metadata());
+      String description = "Application error processing RPC";
+      stream.close(Status.UNKNOWN.withDescription(description).withCause(t), new Metadata());
     }
 
     @Override

File: alts/src/main/java/io/grpc/alts/HandshakerServiceChannel.java
Patch:
@@ -27,6 +27,7 @@
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.nio.NioSocketChannel;
 import io.netty.util.concurrent.DefaultThreadFactory;
+import java.net.InetSocketAddress;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -57,7 +58,7 @@ public Channel create() {
       EventLoopGroup eventGroup =
           new NioEventLoopGroup(1, new DefaultThreadFactory("handshaker pool", true));
       ManagedChannel channel = NettyChannelBuilder.forTarget(target)
-          .channelType(NioSocketChannel.class)
+          .channelType(NioSocketChannel.class, InetSocketAddress.class)
           .directExecutor()
           .eventLoopGroup(eventGroup)
           .usePlaintext()

File: api/src/main/java/io/grpc/ManagedChannelRegistry.java
Patch:
@@ -161,13 +161,13 @@ ManagedChannelBuilder<?> newChannelBuilder(NameResolverRegistry nameResolverRegi
     NameResolverProvider nameResolverProvider = null;
     try {
       URI uri = new URI(target);
-      nameResolverProvider = nameResolverRegistry.providers().get(uri.getScheme());
+      nameResolverProvider = nameResolverRegistry.getProviderForScheme(uri.getScheme());
     } catch (URISyntaxException ignore) {
       // bad URI found, just ignore and continue
     }
     if (nameResolverProvider == null) {
-      nameResolverProvider = nameResolverRegistry.providers().get(
-          nameResolverRegistry.asFactory().getDefaultScheme());
+      nameResolverProvider = nameResolverRegistry.getProviderForScheme(
+          nameResolverRegistry.getDefaultScheme());
     }
     Collection<Class<? extends SocketAddress>> nameResolverSocketAddressTypes
         = (nameResolverProvider != null)

File: api/src/main/java/io/grpc/NameResolverProvider.java
Patch:
@@ -75,7 +75,7 @@ protected String getScheme() {
    *
    * @return the {@link SocketAddress} types this provider's name-resolver is capable of producing.
    */
-  protected Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
+  public Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
     return Collections.singleton(InetSocketAddress.class);
   }
 }

File: api/src/test/java/io/grpc/NameResolverRegistryTest.java
Patch:
@@ -203,12 +203,14 @@ public void newNameResolver_noProvider() {
   public void baseProviders() {
     Map<String, NameResolverProvider> providers =
             NameResolverRegistry.getDefaultRegistry().providers();
-    assertThat(providers).hasSize(1);
+    assertThat(providers).hasSize(2);
     // 2 name resolvers from grpclb and core, higher priority one is returned.
     assertThat(providers.get("dns").getClass().getName())
         .isEqualTo("io.grpc.grpclb.SecretGrpclbNameResolverProvider$Provider");
     assertThat(NameResolverRegistry.getDefaultRegistry().asFactory().getDefaultScheme())
         .isEqualTo("dns");
+    assertThat(providers.get("inprocess").getClass().getName())
+        .isEqualTo("io.grpc.inprocess.InProcessNameResolverProvider");
   }
 
   @Test

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -110,7 +110,7 @@ public void setUp() throws Exception {
             .channelType(LocalServerChannel.class);
         channelBuilder = NettyChannelBuilder.forAddress(address)
             .eventLoopGroup(group)
-            .channelType(LocalChannel.class)
+            .channelType(LocalChannel.class, LocalAddress.class)
             .negotiationType(NegotiationType.PLAINTEXT);
         groupToShutdown = group;
         break;
@@ -134,7 +134,7 @@ public void setUp() throws Exception {
               .asSubclass(Channel.class);
         channelBuilder = NettyChannelBuilder.forAddress(address)
             .eventLoopGroup(group)
-            .channelType(channelClass)
+            .channelType(channelClass, InetSocketAddress.class)
             .negotiationType(NegotiationType.PLAINTEXT);
         groupToShutdown = group;
         break;

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java
Patch:
@@ -207,7 +207,7 @@ public void setup(ExecutorType clientExecutor,
       serverBuilder = NettyServerBuilder.forAddress(address, serverCreds);
       serverBuilder.channelType(LocalServerChannel.class);
       channelBuilder = NettyChannelBuilder.forAddress(address);
-      channelBuilder.channelType(LocalChannel.class);
+      channelBuilder.channelType(LocalChannel.class, LocalAddress.class);
     } else {
       ServerSocket sock = new ServerSocket();
       // Pick a port using an ephemeral socket.
@@ -216,7 +216,8 @@ public void setup(ExecutorType clientExecutor,
       sock.close();
       serverBuilder = NettyServerBuilder.forAddress(address, serverCreds)
           .channelType(NioServerSocketChannel.class);
-      channelBuilder = NettyChannelBuilder.forAddress(address).channelType(NioSocketChannel.class);
+      channelBuilder = NettyChannelBuilder.forAddress(address).channelType(NioSocketChannel.class,
+          InetSocketAddress.class);
     }
 
     if (serverExecutor == ExecutorType.DIRECT) {

File: benchmarks/src/main/java/io/grpc/benchmarks/Utils.java
Patch:
@@ -130,21 +130,21 @@ private static NettyChannelBuilder configureNetty(
       case NETTY_NIO:
         builder
             .eventLoopGroup(new NioEventLoopGroup(0, tf))
-            .channelType(NioSocketChannel.class);
+            .channelType(NioSocketChannel.class, InetSocketAddress.class);
         break;
 
       case NETTY_EPOLL:
         // These classes only work on Linux.
         builder
             .eventLoopGroup(new EpollEventLoopGroup(0, tf))
-            .channelType(EpollSocketChannel.class);
+            .channelType(EpollSocketChannel.class, InetSocketAddress.class);
         break;
 
       case NETTY_UNIX_DOMAIN_SOCKET:
         // These classes only work on Linux.
         builder
             .eventLoopGroup(new EpollEventLoopGroup(0, tf))
-            .channelType(EpollDomainSocketChannel.class);
+            .channelType(EpollDomainSocketChannel.class, DomainSocketAddress.class);
         break;
 
       default:

File: core/src/main/java/io/grpc/internal/DnsNameResolverProvider.java
Patch:
@@ -84,7 +84,7 @@ public int priority() {
   }
 
   @Override
-  protected Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
+  public Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
     return Collections.singleton(InetSocketAddress.class);
   }
 }

File: core/src/test/java/io/grpc/internal/ServiceConfigErrorHandlingTest.java
Patch:
@@ -48,6 +48,7 @@
 import io.grpc.Status;
 import io.grpc.internal.ManagedChannelImplBuilder.FixedPortProvider;
 import io.grpc.internal.ManagedChannelImplBuilder.UnsupportedClientTransportFactoryBuilder;
+import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.net.URI;
 import java.util.ArrayList;
@@ -158,6 +159,8 @@ public ConfigOrError parseLoadBalancingPolicyConfig(
   private void createChannel(ClientInterceptor... interceptors) {
     checkState(channel == null);
 
+    when(mockTransportFactory.getSupportedSocketAddressTypes()).thenReturn(Collections.singleton(
+        InetSocketAddress.class));
     channel =
         new ManagedChannelImpl(
             channelBuilder,

File: googleapis/src/main/java/io/grpc/googleapis/GoogleCloudToProdNameResolverProvider.java
Patch:
@@ -74,7 +74,7 @@ protected int priority() {
   }
 
   @Override
-  protected Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
+  public Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
     return Collections.singleton(InetSocketAddress.class);
   }
 

File: grpclb/src/main/java/io/grpc/grpclb/SecretGrpclbNameResolverProvider.java
Patch:
@@ -94,7 +94,7 @@ public int priority() {
     }
 
     @Override
-    protected Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
+    public Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
       return Collections.singleton(InetSocketAddress.class);
     }
   }

File: inprocess/src/test/java/io/grpc/inprocess/InProcessTransportTest.java
Patch:
@@ -174,7 +174,7 @@ public Listener<Void> startCall(ServerCall<Void, Void> call, Metadata headers) {
       fail("Call should fail.");
     } catch (ExecutionException ex) {
       StatusRuntimeException s = (StatusRuntimeException)ex.getCause();
-      assertEquals(s.getStatus().getCode(), Code.UNIMPLEMENTED);
+      assertEquals(Code.UNIMPLEMENTED, s.getStatus().getCode());
     }
   }
 }

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java
Patch:
@@ -57,7 +57,7 @@ protected NettyChannelBuilder createChannelBuilder() {
     NettyChannelBuilder builder = NettyChannelBuilder
         .forAddress(new LocalAddress("in-process-1"))
         .negotiationType(NegotiationType.PLAINTEXT)
-        .channelType(LocalChannel.class)
+        .channelType(LocalChannel.class, LocalAddress.class)
         .eventLoopGroup(eventLoopGroup)
         .flowControlWindow(AbstractInteropTest.TEST_FLOW_CONTROL_WINDOW)
         .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE);

File: interop-testing/src/test/java/io/grpc/testing/integration/RetryTest.java
Patch:
@@ -191,7 +191,7 @@ private void createNewChannel() {
     rawServiceConfig.put("methodConfig", Arrays.<Object>asList(methodConfig));
     channel = cleanupRule.register(
         NettyChannelBuilder.forAddress(localAddress)
-            .channelType(LocalChannel.class)
+            .channelType(LocalChannel.class, LocalAddress.class)
             .eventLoopGroup(group)
             .usePlaintext()
             .enableRetry()

File: netty/src/main/java/io/grpc/netty/InternalNettyChannelBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import io.grpc.internal.SharedResourcePool;
 import io.grpc.internal.TransportTracer;
 import io.netty.channel.socket.nio.NioSocketChannel;
+import java.net.InetSocketAddress;
 
 /**
  * Internal {@link NettyChannelBuilder} accessor.  This is intended for usage internal to the gRPC
@@ -100,7 +101,7 @@ public static void setStatsRecordRetryMetrics(NettyChannelBuilder builder, boole
    * io.netty.channel.EventLoopGroup}.
    */
   public static void useNioTransport(NettyChannelBuilder builder) {
-    builder.channelType(NioSocketChannel.class);
+    builder.channelType(NioSocketChannel.class, InetSocketAddress.class);
     builder
         .eventLoopGroupPool(SharedResourcePool.forResource(Utils.NIO_WORKER_EVENT_LOOP_GROUP));
   }

File: netty/src/main/java/io/grpc/netty/NettyChannelProvider.java
Patch:
@@ -19,10 +19,8 @@
 import io.grpc.ChannelCredentials;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelProvider;
-import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.Collection;
-import java.util.Collections;
 
 /** Provider for {@link NettyChannelBuilder} instances. */
 @Internal
@@ -59,6 +57,6 @@ public NewChannelBuilderResult newChannelBuilder(String target, ChannelCredentia
 
   @Override
   protected Collection<Class<? extends SocketAddress>> getSupportedSocketAddressTypes() {
-    return Collections.singleton(InetSocketAddress.class);
+    return NettyChannelBuilder.getSupportedSocketAddressTypes();
   }
 }

File: netty/src/main/java/io/grpc/netty/UdsNameResolverProvider.java
Patch:
@@ -65,7 +65,7 @@ protected int priority() {
   }
 
   @Override
-  protected Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
+  public Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
     return Collections.singleton(DomainSocketAddress.class);
   }
 }

File: netty/src/main/java/io/grpc/netty/UdsNettyChannelProvider.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.grpc.netty;
 
+import com.google.common.base.Preconditions;
 import io.grpc.ChannelCredentials;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelProvider;
@@ -51,11 +52,12 @@ public NettyChannelBuilder builderForTarget(String target) {
 
   @Override
   public NewChannelBuilderResult newChannelBuilder(String target, ChannelCredentials creds) {
+    Preconditions.checkState(isAvailable());
     NewChannelBuilderResult result = new NettyChannelProvider().newChannelBuilder(target, creds);
     if (result.getChannelBuilder() != null) {
       ((NettyChannelBuilder) result.getChannelBuilder())
           .eventLoopGroupPool(SharedResourcePool.forResource(Utils.DEFAULT_WORKER_EVENT_LOOP_GROUP))
-          .channelType(Utils.EPOLL_DOMAIN_CLIENT_CHANNEL_TYPE);
+          .channelType(Utils.EPOLL_DOMAIN_CLIENT_CHANNEL_TYPE, DomainSocketAddress.class);
     }
     return result;
   }

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelProvider.java
Patch:
@@ -20,10 +20,8 @@
 import io.grpc.Internal;
 import io.grpc.InternalServiceProviders;
 import io.grpc.ManagedChannelProvider;
-import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.Collection;
-import java.util.Collections;
 
 /**
  * Provider for {@link OkHttpChannelBuilder} instances.
@@ -64,6 +62,6 @@ public NewChannelBuilderResult newChannelBuilder(String target, ChannelCredentia
 
   @Override
   protected Collection<Class<? extends SocketAddress>> getSupportedSocketAddressTypes() {
-    return Collections.singleton(InetSocketAddress.class);
+    return OkHttpChannelBuilder.getSupportedSocketAddressTypes();
   }
 }

File: xds/src/main/java/io/grpc/xds/XdsNameResolverProvider.java
Patch:
@@ -105,7 +105,7 @@ protected int priority() {
   }
 
   @Override
-  protected Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
+  public Collection<Class<? extends SocketAddress>> getProducedSocketAddressTypes() {
     return Collections.singleton(InetSocketAddress.class);
   }
 

File: alts/src/test/java/io/grpc/alts/internal/AltsHandshakerStubTest.java
Patch:
@@ -68,6 +68,7 @@ private void sendAndExpectError() throws InterruptedException {
       fail("Exception expected");
     } catch (IOException ex) {
       assertThat(ex).hasMessageThat().contains("Received a terminating error");
+      assertThat(ex.getCause()).hasMessageThat().contains("Root cause message");
     }
   }
 
@@ -152,7 +153,7 @@ public void onNext(final HandshakerReq req) {
           reader.onNext(resp.setOutFrames(req.getNext().getInBytes()).build());
           break;
         case ERROR:
-          reader.onError(new RuntimeException());
+          reader.onError(new RuntimeException("Root cause message"));
           break;
         case COMPLETE:
           reader.onCompleted();

File: interop-testing/src/main/java/io/grpc/testing/integration/StressTestClient.java
Patch:
@@ -92,7 +92,7 @@ public void run() {
       client.runStressTest();
       client.startMetricsLogging();
       client.blockUntilStressTestComplete();
-      log.log(Level.INFO, "Total calls made: {0}", client.getTotalCallCount());
+      log.log(Level.INFO, "Total calls made: " + client.getTotalCallCount());
     } catch (Exception e) {
       log.log(Level.WARNING, "The stress test client encountered an error!", e);
     } finally {

File: interop-testing/src/main/java/io/grpc/testing/integration/StressTestClient.java
Patch:
@@ -472,10 +472,10 @@ public void run() {
       Thread.currentThread().setName(gaugeName);
 
       Tester tester = new Tester();
-      tester.setUp();
       // The client stream tracers that AbstractInteropTest installs by default would fill up the
       // heap in no time in a long running stress test with many requests.
       tester.setEnableClientStreamTracers(false);
+      tester.setUp();
 
       WeightedTestCaseSelector testCaseSelector = new WeightedTestCaseSelector(testCaseWeightPairs);
       Long endTime = durationSec == null ? null : System.nanoTime() + SECONDS.toNanos(durationSecs);

File: xds/src/test/java/io/grpc/xds/orca/OrcaOobUtilTest.java
Patch:
@@ -153,7 +153,7 @@ private static OrcaLoadReportRequest buildOrcaRequestFromConfig(
   }
 
   private static void assertLog(List<String> logs, String expectedLog) {
-    assertThat(logs).containsExactly(expectedLog);
+    assertThat(logs).contains(expectedLog);
     logs.clear();
   }
 

File: binder/src/androidTest/java/io/grpc/binder/internal/BinderTransportTest.java
Patch:
@@ -25,6 +25,7 @@
 import io.grpc.binder.AndroidComponentAddress;
 import io.grpc.binder.BindServiceFlags;
 import io.grpc.binder.BinderChannelCredentials;
+import io.grpc.binder.BinderInternal;
 import io.grpc.binder.HostServices;
 import io.grpc.binder.InboundParcelablePolicy;
 import io.grpc.binder.SecurityPolicies;
@@ -69,7 +70,7 @@ protected InternalServer newServer(List<ServerStreamTracer.Factory> streamTracer
     BinderServer binderServer = new BinderServer(addr,
         executorServicePool,
         streamTracerFactories,
-        SecurityPolicies.serverInternalOnly(),
+        BinderInternal.createPolicyChecker(SecurityPolicies.serverInternalOnly()),
         InboundParcelablePolicy.DEFAULT);
 
     HostServices.configureService(addr,

File: binder/src/main/java/io/grpc/binder/BinderServerBuilder.java
Patch:
@@ -23,11 +23,11 @@
 import android.os.IBinder;
 import com.google.errorprone.annotations.DoNotCall;
 import io.grpc.ExperimentalApi;
+import io.grpc.ForwardingServerBuilder;
 import io.grpc.Server;
 import io.grpc.ServerBuilder;
 import io.grpc.binder.internal.BinderServer;
 import io.grpc.binder.internal.BinderTransportSecurity;
-import io.grpc.ForwardingServerBuilder;
 import io.grpc.internal.FixedObjectPool;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.ServerImplBuilder;
@@ -84,7 +84,7 @@ private BinderServerBuilder(
           listenAddress,
           schedulerPool,
           streamTracerFactories,
-          securityPolicy,
+          BinderInternal.createPolicyChecker(securityPolicy),
           inboundParcelablePolicy);
       BinderInternal.setIBinder(binderReceiver, server.getHostBinder());
       return server;

File: interop-testing/src/test/java/io/grpc/testing/integration/StressTestClientTest.java
Patch:
@@ -80,6 +80,7 @@ public void allCommandlineSwitchesAreSupported() {
         "--server_host_override=foo.test.google.fr",
         "--use_tls=true",
         "--use_test_ca=true",
+        "--custom_credentials_type=google_default_credentials",
         "--metrics_log_rate_secs=60"
     });
 
@@ -100,6 +101,7 @@ public void allCommandlineSwitchesAreSupported() {
     assertEquals(10, client.channelsPerServer());
     assertEquals(5, client.stubsPerChannel());
     assertEquals(9090, client.metricsPort());
+    assertEquals("google_default_credentials", client.customCredentialsType());
     assertEquals(60, client.metricsLogRateSecs());
   }
 

File: cronet/src/main/java/io/grpc/cronet/CronetChannelBuilder.java
Patch:
@@ -28,9 +28,9 @@
 import io.grpc.ChannelCredentials;
 import io.grpc.ChannelLogger;
 import io.grpc.ExperimentalApi;
+import io.grpc.ForwardingChannelBuilder2;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelBuilder;
-import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.GrpcUtil;
@@ -52,8 +52,7 @@
 
 /** Convenience class for building channels with the cronet transport. */
 @ExperimentalApi("There is no plan to make this API stable, given transport API instability")
-public final class CronetChannelBuilder
-    extends AbstractManagedChannelImplBuilder<CronetChannelBuilder> {
+public final class CronetChannelBuilder extends ForwardingChannelBuilder2<CronetChannelBuilder> {
 
   private static final String LOG_TAG = "CronetChannelBuilder";
 

File: inprocess/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -23,9 +23,9 @@
 import io.grpc.ChannelCredentials;
 import io.grpc.ChannelLogger;
 import io.grpc.ExperimentalApi;
+import io.grpc.ForwardingChannelBuilder2;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelBuilder;
-import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.GrpcUtil;
@@ -47,7 +47,8 @@
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1783")
 public final class InProcessChannelBuilder extends
-    AbstractManagedChannelImplBuilder<InProcessChannelBuilder> {
+    ForwardingChannelBuilder2<InProcessChannelBuilder> {
+
   /**
    * Create a channel builder that will connect to the server with the given name.
    *

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -33,10 +33,10 @@
 import io.grpc.ChannelLogger;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.ExperimentalApi;
+import io.grpc.ForwardingChannelBuilder2;
 import io.grpc.HttpConnectProxiedSocketAddress;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelBuilder;
-import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AtomicBackoff;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
@@ -72,8 +72,7 @@
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
 @CheckReturnValue
-public final class NettyChannelBuilder extends
-    AbstractManagedChannelImplBuilder<NettyChannelBuilder> {
+public final class NettyChannelBuilder extends ForwardingChannelBuilder2<NettyChannelBuilder> {
 
   // 1MiB.
   public static final int DEFAULT_FLOW_CONTROL_WINDOW = 1024 * 1024;
@@ -102,6 +101,7 @@ public final class NettyChannelBuilder extends
   private boolean autoFlowControl = DEFAULT_AUTO_FLOW_CONTROL;
   private int flowControlWindow = DEFAULT_FLOW_CONTROL_WINDOW;
   private int maxHeaderListSize = GrpcUtil.DEFAULT_MAX_HEADER_LIST_SIZE;
+  private int maxInboundMessageSize = GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;
   private long keepAliveTimeNanos = KEEPALIVE_TIME_NANOS_DISABLED;
   private long keepAliveTimeoutNanos = DEFAULT_KEEPALIVE_TIMEOUT_NANOS;
   private boolean keepAliveWithoutCalls;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -29,11 +29,11 @@
 import io.grpc.CompositeCallCredentials;
 import io.grpc.CompositeChannelCredentials;
 import io.grpc.ExperimentalApi;
+import io.grpc.ForwardingChannelBuilder2;
 import io.grpc.InsecureChannelCredentials;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.TlsChannelCredentials;
-import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AtomicBackoff;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
@@ -83,8 +83,7 @@
 
 /** Convenience class for building channels with the OkHttp transport. */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1785")
-public final class OkHttpChannelBuilder extends
-    AbstractManagedChannelImplBuilder<OkHttpChannelBuilder> {
+public final class OkHttpChannelBuilder extends ForwardingChannelBuilder2<OkHttpChannelBuilder> {
   private static final Logger log = Logger.getLogger(OkHttpChannelBuilder.class.getName());
   public static final int DEFAULT_FLOW_CONTROL_WINDOW = 65535;
 
@@ -188,6 +187,7 @@ public static OkHttpChannelBuilder forTarget(String target, ChannelCredentials c
   private long keepAliveTimeoutNanos = DEFAULT_KEEPALIVE_TIMEOUT_NANOS;
   private int flowControlWindow = DEFAULT_FLOW_CONTROL_WINDOW;
   private boolean keepAliveWithoutCalls;
+  private int maxInboundMessageSize = GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;
   private int maxInboundMetadataSize = Integer.MAX_VALUE;
 
   /**

File: inprocess/src/main/java/io/grpc/inprocess/InProcessServerBuilder.java
Patch:
@@ -22,10 +22,10 @@
 import com.google.errorprone.annotations.DoNotCall;
 import io.grpc.Deadline;
 import io.grpc.ExperimentalApi;
+import io.grpc.ForwardingServerBuilder;
 import io.grpc.Internal;
 import io.grpc.ServerBuilder;
 import io.grpc.ServerStreamTracer;
-import io.grpc.internal.AbstractServerImplBuilder;
 import io.grpc.internal.FixedObjectPool;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.InternalServer;
@@ -73,8 +73,7 @@
  * </pre>
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1783")
-public final class InProcessServerBuilder extends
-    AbstractServerImplBuilder<InProcessServerBuilder> {
+public final class InProcessServerBuilder extends ForwardingServerBuilder<InProcessServerBuilder> {
   /**
    * Create a server builder that will bind with the given name.
    *

File: netty/src/main/java/io/grpc/netty/NettyServerBuilder.java
Patch:
@@ -30,11 +30,11 @@
 import com.google.errorprone.annotations.InlineMe;
 import io.grpc.Attributes;
 import io.grpc.ExperimentalApi;
+import io.grpc.ForwardingServerBuilder;
 import io.grpc.Internal;
 import io.grpc.ServerBuilder;
 import io.grpc.ServerCredentials;
 import io.grpc.ServerStreamTracer;
-import io.grpc.internal.AbstractServerImplBuilder;
 import io.grpc.internal.FixedObjectPool;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.InternalServer;
@@ -67,7 +67,7 @@
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
 @CheckReturnValue
-public final class NettyServerBuilder extends AbstractServerImplBuilder<NettyServerBuilder> {
+public final class NettyServerBuilder extends ForwardingServerBuilder<NettyServerBuilder> {
 
   // 1MiB
   public static final int DEFAULT_FLOW_CONTROL_WINDOW = 1024 * 1024;

File: util/src/main/java/io/grpc/util/MultiChildLoadBalancer.java
Patch:
@@ -83,7 +83,7 @@ protected SubchannelPicker getInitialPicker() {
   }
 
   protected SubchannelPicker getErrorPicker(Status error)  {
-    return new ErrorPicker(error);
+    return new FixedResultPicker(PickResult.withError(error));
   }
 
   @VisibleForTesting

File: xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java
Patch:
@@ -143,7 +143,8 @@ public void handleNameResolutionError(Status error) {
     if (childSwitchLb != null) {
       childSwitchLb.handleNameResolutionError(error);
     } else {
-      helper.updateBalancingState(ConnectivityState.TRANSIENT_FAILURE, new ErrorPicker(error));
+      helper.updateBalancingState(
+          ConnectivityState.TRANSIENT_FAILURE, new FixedResultPicker(PickResult.withError(error)));
     }
   }
 

File: xds/src/main/java/io/grpc/xds/RingHashLoadBalancer.java
Patch:
@@ -270,7 +270,8 @@ private static List<RingEntry> buildRing(
   @Override
   public void handleNameResolutionError(Status error) {
     if (currentState != READY) {
-      helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));
+      helper.updateBalancingState(
+          TRANSIENT_FAILURE, new FixedResultPicker(PickResult.withError(error)));
     }
   }
 

File: xds/src/main/java/io/grpc/xds/WeightedTargetLoadBalancer.java
Patch:
@@ -114,7 +114,8 @@ public boolean acceptResolvedAddressesInternal(ResolvedAddresses resolvedAddress
   public void handleNameResolutionError(Status error) {
     logger.log(XdsLogLevel.WARNING, "Received name resolution error: {0}", error);
     if (childBalancers.isEmpty()) {
-      helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));
+      helper.updateBalancingState(
+          TRANSIENT_FAILURE, new FixedResultPicker(PickResult.withError(error)));
     }
     for (LoadBalancer childBalancer : childBalancers.values()) {
       childBalancer.handleNameResolutionError(error);

File: xds/src/test/java/io/grpc/xds/ClusterManagerLoadBalancerTest.java
Patch:
@@ -365,7 +365,8 @@ public boolean acceptResolvedAddresses(ResolvedAddresses resolvedAddresses) {
       config = resolvedAddresses.getLoadBalancingPolicyConfig();
 
       if (failing) {
-        helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(Status.INTERNAL));
+        helper.updateBalancingState(
+            TRANSIENT_FAILURE, new FixedResultPicker(PickResult.withError(Status.INTERNAL)));
       }
       return true;
     }

File: binder/src/main/java/io/grpc/binder/internal/BinderTransport.java
Patch:
@@ -784,9 +784,7 @@ private static InternalLogId buildLogId(
         Context sourceContext, AndroidComponentAddress targetAddress) {
       return InternalLogId.allocate(
           BinderClientTransport.class,
-          sourceContext.getClass().getSimpleName()
-              + "->"
-              + targetAddress.getComponent().toShortString());
+          sourceContext.getClass().getSimpleName() + "->" + targetAddress);
     }
 
     private static Attributes buildClientAttributes(

File: api/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -117,7 +117,9 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
   public abstract T executor(Executor executor);
 
   /**
-   * Provides a custom executor that will be used for operations that block or are expensive.
+   * Provides a custom executor that will be used for operations that block or are expensive, to
+   * avoid blocking asynchronous code paths. For example, DNS queries and OAuth token fetching over
+   * HTTP could use this executor.
    *
    * <p>It's an optional parameter. If the user has not provided an executor when the channel is
    * built, the builder will use a static cached thread pool.

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -47,7 +47,6 @@
 import io.grpc.ServerCall;
 import io.grpc.Status;
 import io.grpc.internal.ServerCallImpl.ServerStreamListenerImpl;
-import io.grpc.internal.SingleMessageProducer;
 import io.perfmark.PerfMark;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
@@ -220,7 +219,7 @@ public void sendMessage_closesOnFailure() {
 
     call.sendMessage(1234L);
 
-    verify(stream).close(isA(Status.class), isA(Metadata.class));
+    verify(stream).cancel(isA(Status.class));
   }
 
   @Test

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -2130,7 +2130,7 @@ public void performSoakTest(
     assertTrue(tooManyFailuresErrorMessage, totalFailures <= maxFailures);
   }
 
-  protected static void assertSuccess(StreamRecorder<?> recorder) {
+  private static void assertSuccess(StreamRecorder<?> recorder) {
     if (recorder.getError() != null) {
       throw new AssertionError(recorder.getError());
     }

File: util/src/main/java/io/grpc/util/MultiChildLoadBalancer.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import io.grpc.ConnectivityState;
+import io.grpc.Internal;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
 import io.grpc.Status;
@@ -40,10 +41,9 @@
 
 /**
  * A base load balancing policy for those policies which has multiple children such as
- * ClusterManager or the petiole policies.
- *
- * @since 1.58
+ * ClusterManager or the petiole policies.  For internal use only.
  */
+@Internal
 public abstract class MultiChildLoadBalancer extends LoadBalancer {
 
   @VisibleForTesting

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpServerBuilder.java
Patch:
@@ -18,7 +18,6 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.DoNotCall;
@@ -89,7 +88,7 @@ public final class OkHttpServerBuilder extends ForwardingServerBuilder<OkHttpSer
   @DoNotCall("Always throws. Use forPort(int, ServerCredentials) instead")
   @Deprecated
   public static OkHttpServerBuilder forPort(int port) {
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException("Use forPort(int, ServerCredentials) instead");
   }
 
   /**
@@ -131,7 +130,6 @@ public static OkHttpServerBuilder forPort(SocketAddress address, ServerCredentia
   long maxConnectionAgeInNanos = MAX_CONNECTION_AGE_NANOS_DISABLED;
   long maxConnectionAgeGraceInNanos = MAX_CONNECTION_AGE_GRACE_NANOS_INFINITE;
 
-  @VisibleForTesting
   OkHttpServerBuilder(
       SocketAddress address, HandshakerSocketFactory handshakerSocketFactory) {
     this.listenAddress = Preconditions.checkNotNull(address, "address");

File: xds/src/main/java/io/grpc/xds/BootstrapperImpl.java
Patch:
@@ -169,7 +169,7 @@ BootstrapInfo bootstrap(Map<String, ?> rawData) throws XdsInitializationExceptio
         if (rawLocality.containsKey("sub_zone")) {
           subZone = JsonUtil.getString(rawLocality, "sub_zone");
         }
-        logger.log(XdsLogLevel.INFO, "Locality region: {0}, zone: {0}, subZone: {0}",
+        logger.log(XdsLogLevel.INFO, "Locality region: {0}, zone: {1}, subZone: {2}",
             region, zone, subZone);
         Locality locality = Locality.create(region, zone, subZone);
         nodeBuilder.setLocality(locality);

File: api/src/context/java/io/grpc/Context.java
Patch:
@@ -808,7 +808,7 @@ public boolean isCurrent() {
      * <p>Calling {@code cancel(null)} is the same as calling {@link #close}.
      *
      * @return {@code true} if this context cancelled the context and notified listeners,
-     *    {@code false} if the context was already cancelled.
+     *         {@code false} if the context was already cancelled.
      */
     @CanIgnoreReturnValue
     public boolean cancel(Throwable cause) {

File: api/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -571,10 +571,10 @@ public T proxyDetector(ProxyDetector proxyDetector) {
    *   return o;
    * }}</pre>
    *
+   * @return this
    * @throws IllegalArgumentException When the given serviceConfig is invalid or the current version
    *         of grpc library can not parse it gracefully. The state of the builder is unchanged if
    *         an exception is thrown.
-   * @return this
    * @since 1.20.0
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/5189")

File: api/src/test/java/io/grpc/ForwardingServerCallTest.java
Patch:
@@ -48,7 +48,7 @@ public void setUp() {
           protected ServerCall<Integer, Integer> delegate() {
             return serverCall;
           }
-    };
+        };
   }
 
   @Test

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java
Patch:
@@ -78,6 +78,7 @@ public enum MessageSize {
     SMALL(10), MEDIUM(1024), LARGE(65536), JUMBO(1048576);
 
     private final int bytes;
+
     MessageSize(int bytes) {
       this.bytes = bytes;
     }
@@ -94,6 +95,7 @@ public enum FlowWindowSize {
     SMALL(16383), MEDIUM(65535), LARGE(1048575), JUMBO(8388607);
 
     private final int bytes;
+
     FlowWindowSize(int bytes) {
       this.bytes = bytes;
     }

File: core/src/main/java/io/grpc/internal/DelayedClientCall.java
Patch:
@@ -140,7 +140,7 @@ private ScheduledFuture<?> scheduleDeadlineIfNeeded(
     buf.append(String.format(Locale.US, ".%09d", nanos));
     buf.append("s. ");
 
-    /** Cancels the call if deadline exceeded prior to the real call being set. */
+    /* Cancels the call if deadline exceeded prior to the real call being set. */
     class DeadlineExceededRunnable implements Runnable {
       @Override
       public void run() {

File: core/src/main/java/io/grpc/internal/MessageDeframer.java
Patch:
@@ -112,7 +112,7 @@ private enum State {
    *
    * @param listener listener for deframer events.
    * @param decompressor the compression used if a compressed frame is encountered, with
-   *  {@code NONE} meaning unsupported
+   *                     {@code NONE} meaning unsupported
    * @param maxMessageSize the maximum allowed size for received messages.
    */
   public MessageDeframer(

File: core/src/test/java/io/grpc/internal/ProxyDetectorImplTest.java
Patch:
@@ -201,7 +201,7 @@ public void authRequired() throws Exception {
             anyString(),
             anyString(),
             AdditionalMatchers.or(anyString(), ArgumentMatchers.<String>any())))
-      .thenReturn(auth);
+        .thenReturn(auth);
     when(proxySelector.select(any(URI.class))).thenReturn(ImmutableList.of(proxy));
 
     ProxiedSocketAddress detected = proxyDetector.proxyFor(destination);

File: inprocess/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -117,7 +117,7 @@ public void uncaughtException(Thread t, Throwable e) {
           }
           throw new RuntimeException(e);
         }
-  };
+      };
 
 
   @GuardedBy("this")

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1249,7 +1249,7 @@ public void deadlineInPast() throws Exception {
     } catch (StatusRuntimeException ex) {
       assertEquals(Status.Code.DEADLINE_EXCEEDED, ex.getStatus().getCode());
       assertThat(ex.getStatus().getDescription())
-        .startsWith("ClientCall started after CallOptions deadline was exceeded");
+          .startsWith("ClientCall started after CallOptions deadline was exceeded");
     }
 
     // CensusStreamTracerModule record final status in the interceptor, thus is guaranteed to be
@@ -1282,7 +1282,7 @@ public void deadlineInPast() throws Exception {
     } catch (StatusRuntimeException ex) {
       assertEquals(Status.Code.DEADLINE_EXCEEDED, ex.getStatus().getCode());
       assertThat(ex.getStatus().getDescription())
-        .startsWith("ClientCall started after CallOptions deadline was exceeded");
+          .startsWith("ClientCall started after CallOptions deadline was exceeded");
     }
     if (metricsExpected()) {
       MetricsRecord clientStartRecord = clientStatsRecorder.pollRecord(5, TimeUnit.SECONDS);

File: netty/src/main/java/io/grpc/netty/NettyServer.java
Patch:
@@ -272,9 +272,7 @@ public void initChannel(Channel ch) {
           transportListener = listener.transportCreated(transport);
         }
 
-        /**
-         * Releases the event loop if the channel is "done", possibly due to the channel closing.
-         */
+        /* Releases the event loop if the channel is "done", possibly due to the channel closing. */
         final class LoopReleaser implements ChannelFutureListener {
           private boolean done;
 

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -185,8 +185,8 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
               return null;
             }
           })
-      .when(streamListener)
-      .messagesAvailable(ArgumentMatchers.<StreamListener.MessageProducer>any());
+        .when(streamListener)
+        .messagesAvailable(ArgumentMatchers.<StreamListener.MessageProducer>any());
 
     lifecycleManager = new ClientTransportLifecycleManager(listener);
     // This mocks the keepalive manager only for there's in which we verify it. For other tests

File: netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java
Patch:
@@ -124,8 +124,8 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
               return null;
             }
           })
-      .when(listener)
-      .messagesAvailable(ArgumentMatchers.<StreamListener.MessageProducer>any());
+        .when(listener)
+        .messagesAvailable(ArgumentMatchers.<StreamListener.MessageProducer>any());
   }
 
   @Override

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -179,8 +179,8 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
               return null;
             }
           })
-      .when(streamListener)
-      .messagesAvailable(any(StreamListener.MessageProducer.class));
+        .when(streamListener)
+        .messagesAvailable(any(StreamListener.MessageProducer.class));
   }
 
   @Override

File: netty/src/test/java/io/grpc/netty/NettyServerStreamTest.java
Patch:
@@ -93,8 +93,8 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
               return null;
             }
           })
-      .when(serverListener)
-      .messagesAvailable(ArgumentMatchers.<StreamListener.MessageProducer>any());
+        .when(serverListener)
+        .messagesAvailable(ArgumentMatchers.<StreamListener.MessageProducer>any());
   }
 
   @Test

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertificateProviderRegistry.java
Patch:
@@ -59,7 +59,7 @@ public synchronized void register(CertificateProviderProvider certificateProvide
    * Deregisters a provider.  No-op if the provider is not in the registry.
    *
    * @param certificateProviderProvider the provider that was added to the registry via
-   * {@link #register}.
+   *                                    {@link #register}.
    */
   public synchronized void deregister(CertificateProviderProvider certificateProviderProvider) {
     checkNotNull(certificateProviderProvider, "certificateProviderProvider");

File: xds/src/main/java/io/grpc/xds/internal/security/trust/CertificateUtils.java
Patch:
@@ -49,9 +49,9 @@ public final class CertificateUtils {
 
   private static CertificateFactory factory;
   private static final Pattern KEY_PATTERN = Pattern.compile(
-          "-+BEGIN\\s+.*PRIVATE\\s+KEY[^-]*-+(?:\\s|\\r|\\n)+" + // Header
-                  "([a-z0-9+/=\\r\\n]+)" +                             // Base64 text
-                  "-+END\\s+.*PRIVATE\\s+KEY[^-]*-+",                  // Footer
+          "-+BEGIN\\s+.*PRIVATE\\s+KEY[^-]*-+(?:\\s|\\r|\\n)+"  // Header
+                  + "([a-z0-9+/=\\r\\n]+)"                             // Base64 text
+                  + "-+END\\s+.*PRIVATE\\s+KEY[^-]*-+",                  // Footer
           Pattern.CASE_INSENSITIVE);
 
   private static synchronized void initInstance() throws CertificateException {

File: xds/src/test/java/io/grpc/xds/ClusterResolverLoadBalancerTest.java
Patch:
@@ -153,13 +153,13 @@ public void uncaughtException(Thread t, Throwable e) {
   private final NameResolverRegistry nsRegistry = new NameResolverRegistry();
   private final PolicySelection roundRobin = new PolicySelection(
       new FakeLoadBalancerProvider("wrr_locality_experimental"), new WrrLocalityConfig(
-      new PolicySelection(new FakeLoadBalancerProvider("round_robin"), null)));
+          new PolicySelection(new FakeLoadBalancerProvider("round_robin"), null)));
   private final PolicySelection ringHash = new PolicySelection(
       new FakeLoadBalancerProvider("ring_hash_experimental"), new RingHashConfig(10L, 100L));
   private final PolicySelection leastRequest = new PolicySelection(
       new FakeLoadBalancerProvider("wrr_locality_experimental"), new WrrLocalityConfig(
-      new PolicySelection(new FakeLoadBalancerProvider("least_request_experimental"),
-          new LeastRequestConfig(3))));
+          new PolicySelection(new FakeLoadBalancerProvider("least_request_experimental"),
+              new LeastRequestConfig(3))));
   private final List<FakeLoadBalancer> childBalancers = new ArrayList<>();
   private final List<FakeNameResolver> resolvers = new ArrayList<>();
   private final FakeXdsClient xdsClient = new FakeXdsClient();

File: xds/src/test/java/io/grpc/xds/internal/security/SecurityProtocolNegotiatorsTest.java
Patch:
@@ -233,7 +233,7 @@ public SocketAddress remoteAddress() {
     ProtocolNegotiationEvent event = InternalProtocolNegotiationEvent.getDefault();
     Attributes attr = InternalProtocolNegotiationEvent.getAttributes(event)
             .toBuilder().set(ATTR_SERVER_SSL_CONTEXT_PROVIDER_SUPPLIER,
-            new SslContextProviderSupplier(downstreamTlsContext, tlsContextManager)).build();
+              new SslContextProviderSupplier(downstreamTlsContext, tlsContextManager)).build();
     pipeline.fireUserEventTriggered(InternalProtocolNegotiationEvent.withAttributes(event, attr));
     channelHandlerCtx = pipeline.context(handlerPickerHandler);
     assertThat(channelHandlerCtx).isNull();

File: xds/src/test/java/io/grpc/xds/orca/OrcaMetricReportingServerInterceptorTest.java
Patch:
@@ -137,8 +137,8 @@ public void unaryRpc(
   @Test
   public void shareCallMetricRecorderInContext() throws IOException {
     final CallMetricRecorder callMetricRecorder = new CallMetricRecorder();
-    ServerStreamTracer.Factory callMetricRecorderSharingStreamTracerFactory =
-        new ServerStreamTracer.Factory() {
+    ServerStreamTracer.Factory callMetricRecorderSharingStreamTracerFactory;
+    callMetricRecorderSharingStreamTracerFactory = new ServerStreamTracer.Factory() {
       @Override
       public ServerStreamTracer newServerStreamTracer(String fullMethodName, Metadata headers) {
         return new ServerStreamTracer() {

File: rls/src/main/java/io/grpc/rls/RlsProtoConverters.java
Patch:
@@ -153,7 +153,7 @@ protected RouteLookupConfig doForward(Map<String, ?> json) {
         maxAge = MAX_AGE_NANOS;
       }
       if (staleAge == null) {
-        staleAge = maxAge >= MINUTES.toNanos(2) ? maxAge - MINUTES.toNanos(1) : maxAge;
+        staleAge = MAX_AGE_NANOS;
       }
       maxAge = Math.min(maxAge, MAX_AGE_NANOS);
       staleAge = Math.min(staleAge, maxAge);

File: rls/src/test/java/io/grpc/rls/RlsProtoConvertersTest.java
Patch:
@@ -354,7 +354,7 @@ public void convert_jsonRlsConfig_defaultValues() throws IOException {
             .lookupService("service1")
             .lookupServiceTimeoutInNanos(TimeUnit.SECONDS.toNanos(10))
             .maxAgeInNanos(TimeUnit.MINUTES.toNanos(5))
-            .staleAgeInNanos(TimeUnit.MINUTES.toNanos(4))
+            .staleAgeInNanos(TimeUnit.MINUTES.toNanos(5))
             .cacheSizeBytes(5 * 1024 * 1024)
             .defaultTarget("us_east_1.cloudbigtable.googleapis.com")
             .build();

File: core/src/testFixtures/java/io/grpc/internal/AbstractTransportTest.java
Patch:
@@ -2106,6 +2106,9 @@ private static void assertStatusEquals(Status expected, Status actual) {
    * be present, and the cause should be stripped away.
    */
   private static void checkClientStatus(Status expectedStatus, Status clientStreamStatus) {
+    if (!clientStreamStatus.isOk() && clientStreamStatus.getCode() != expectedStatus.getCode()) {
+      System.out.println("Full Status:  " + clientStreamStatus);
+    }
     assertEquals(expectedStatus.getCode(), clientStreamStatus.getCode());
     assertEquals(expectedStatus.getDescription(), clientStreamStatus.getDescription());
     assertNull(clientStreamStatus.getCause());

File: xds/src/test/java/io/grpc/xds/WeightedRoundRobinLoadBalancerTest.java
Patch:
@@ -943,7 +943,7 @@ public void testStaticStrideSchedulerNonIntegers1() {
     Map<Integer, Integer> pickCount = new HashMap<>();
     for (int i = 0; i < 1000; i++) {
       int result = sss.pick();
-      pickCount.put(result, pickCount.getOrDefault(result, 0) + 1);
+      pickCount.merge(result, 1, (o, v) -> o + v);
     }
     for (int i = 0; i < 3; i++) {
       assertThat(Math.abs(pickCount.getOrDefault(i, 0) / 1000.0 - weights[i] / totalWeight))

File: rls/src/main/java/io/grpc/rls/RlsProtoConverters.java
Patch:
@@ -153,7 +153,7 @@ protected RouteLookupConfig doForward(Map<String, ?> json) {
         maxAge = MAX_AGE_NANOS;
       }
       if (staleAge == null) {
-        staleAge = MAX_AGE_NANOS;
+        staleAge = maxAge >= MINUTES.toNanos(2) ? maxAge - MINUTES.toNanos(1) : maxAge;
       }
       maxAge = Math.min(maxAge, MAX_AGE_NANOS);
       staleAge = Math.min(staleAge, maxAge);

File: rls/src/test/java/io/grpc/rls/RlsProtoConvertersTest.java
Patch:
@@ -354,7 +354,7 @@ public void convert_jsonRlsConfig_defaultValues() throws IOException {
             .lookupService("service1")
             .lookupServiceTimeoutInNanos(TimeUnit.SECONDS.toNanos(10))
             .maxAgeInNanos(TimeUnit.MINUTES.toNanos(5))
-            .staleAgeInNanos(TimeUnit.MINUTES.toNanos(5))
+            .staleAgeInNanos(TimeUnit.MINUTES.toNanos(4))
             .cacheSizeBytes(5 * 1024 * 1024)
             .defaultTarget("us_east_1.cloudbigtable.googleapis.com")
             .build();

File: core/src/test/java/io/grpc/internal/ManagedChannelImplBuilderTest.java
Patch:
@@ -368,7 +368,7 @@ public void overrideAuthority_null() {
 
   @Test(expected = IllegalArgumentException.class)
   public void overrideAuthority_invalid() {
-    builder.overrideAuthority("not_allowed");
+    builder.overrideAuthority("user@not_allowed");
   }
 
   @Test

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class LoadBalancerStatsServiceGrpc {
 
   private LoadBalancerStatsServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.LoadBalancerStatsService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.LoadBalancerStatsService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.LoadBalancerStatsRequest,

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class MetricsServiceGrpc {
 
   private MetricsServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.MetricsService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.MetricsService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Metrics.EmptyMessage,

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class ReconnectServiceGrpc {
 
   private ReconnectServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.ReconnectService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.ReconnectService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.ReconnectParams,

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -16,7 +16,7 @@ public final class TestServiceGrpc {
 
   private TestServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.TestService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.TestService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -16,7 +16,7 @@ public final class UnimplementedServiceGrpc {
 
   private UnimplementedServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.UnimplementedService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.UnimplementedService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class XdsUpdateClientConfigureServiceGrpc {
 
   private XdsUpdateClientConfigureServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.XdsUpdateClientConfigureService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.XdsUpdateClientConfigureService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.ClientConfigureRequest,

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class XdsUpdateHealthServiceGrpc {
 
   private XdsUpdateHealthServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.XdsUpdateHealthService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.XdsUpdateHealthService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class LoadBalancerStatsServiceGrpc {
 
   private LoadBalancerStatsServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.LoadBalancerStatsService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.LoadBalancerStatsService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.LoadBalancerStatsRequest,

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class MetricsServiceGrpc {
 
   private MetricsServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.MetricsService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.MetricsService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Metrics.EmptyMessage,

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class ReconnectServiceGrpc {
 
   private ReconnectServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.ReconnectService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.ReconnectService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.ReconnectParams,

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -16,7 +16,7 @@ public final class TestServiceGrpc {
 
   private TestServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.TestService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.TestService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -16,7 +16,7 @@ public final class UnimplementedServiceGrpc {
 
   private UnimplementedServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.UnimplementedService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.UnimplementedService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class XdsUpdateClientConfigureServiceGrpc {
 
   private XdsUpdateClientConfigureServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.XdsUpdateClientConfigureService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.XdsUpdateClientConfigureService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.ClientConfigureRequest,

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class XdsUpdateHealthServiceGrpc {
 
   private XdsUpdateHealthServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.XdsUpdateHealthService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.XdsUpdateHealthService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,

File: alts/src/generated/main/grpc/io/grpc/alts/internal/HandshakerServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class HandshakerServiceGrpc {
 
   private HandshakerServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.gcp.HandshakerService";
+  public static final java.lang.String SERVICE_NAME = "grpc.gcp.HandshakerService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.alts.internal.HandshakerReq,
@@ -261,9 +261,9 @@ private static final class HandshakerServiceFileDescriptorSupplier
   private static final class HandshakerServiceMethodDescriptorSupplier
       extends HandshakerServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    HandshakerServiceMethodDescriptorSupplier(String methodName) {
+    HandshakerServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/BenchmarkServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class BenchmarkServiceGrpc {
 
   private BenchmarkServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.BenchmarkService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.BenchmarkService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.benchmarks.proto.Messages.SimpleRequest,
@@ -552,9 +552,9 @@ private static final class BenchmarkServiceFileDescriptorSupplier
   private static final class BenchmarkServiceMethodDescriptorSupplier
       extends BenchmarkServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    BenchmarkServiceMethodDescriptorSupplier(String methodName) {
+    BenchmarkServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/ReportQpsScenarioServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class ReportQpsScenarioServiceGrpc {
 
   private ReportQpsScenarioServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.ReportQpsScenarioService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.ReportQpsScenarioService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.benchmarks.proto.Control.ScenarioResult,
@@ -273,9 +273,9 @@ private static final class ReportQpsScenarioServiceFileDescriptorSupplier
   private static final class ReportQpsScenarioServiceMethodDescriptorSupplier
       extends ReportQpsScenarioServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ReportQpsScenarioServiceMethodDescriptorSupplier(String methodName) {
+    ReportQpsScenarioServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/WorkerServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class WorkerServiceGrpc {
 
   private WorkerServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.WorkerService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.WorkerService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.benchmarks.proto.Control.ServerArgs,
@@ -504,9 +504,9 @@ private static final class WorkerServiceFileDescriptorSupplier
   private static final class WorkerServiceMethodDescriptorSupplier
       extends WorkerServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    WorkerServiceMethodDescriptorSupplier(String methodName) {
+    WorkerServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: grpclb/src/generated/main/grpc/io/grpc/lb/v1/LoadBalancerGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class LoadBalancerGrpc {
 
   private LoadBalancerGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.lb.v1.LoadBalancer";
+  public static final java.lang.String SERVICE_NAME = "grpc.lb.v1.LoadBalancer";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.lb.v1.LoadBalanceRequest,
@@ -251,9 +251,9 @@ private static final class LoadBalancerFileDescriptorSupplier
   private static final class LoadBalancerMethodDescriptorSupplier
       extends LoadBalancerBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    LoadBalancerMethodDescriptorSupplier(String methodName) {
+    LoadBalancerMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class LoadBalancerStatsServiceGrpc {
 
   private LoadBalancerStatsServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.LoadBalancerStatsService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.LoadBalancerStatsService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.LoadBalancerStatsRequest,
@@ -376,9 +376,9 @@ private static final class LoadBalancerStatsServiceFileDescriptorSupplier
   private static final class LoadBalancerStatsServiceMethodDescriptorSupplier
       extends LoadBalancerStatsServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    LoadBalancerStatsServiceMethodDescriptorSupplier(String methodName) {
+    LoadBalancerStatsServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class MetricsServiceGrpc {
 
   private MetricsServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.MetricsService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.MetricsService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Metrics.EmptyMessage,
@@ -351,9 +351,9 @@ private static final class MetricsServiceFileDescriptorSupplier
   private static final class MetricsServiceMethodDescriptorSupplier
       extends MetricsServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    MetricsServiceMethodDescriptorSupplier(String methodName) {
+    MetricsServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class ReconnectServiceGrpc {
 
   private ReconnectServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.ReconnectService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.ReconnectService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.ReconnectParams,
@@ -352,9 +352,9 @@ private static final class ReconnectServiceFileDescriptorSupplier
   private static final class ReconnectServiceMethodDescriptorSupplier
       extends ReconnectServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ReconnectServiceMethodDescriptorSupplier(String methodName) {
+    ReconnectServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -16,7 +16,7 @@ public final class TestServiceGrpc {
 
   private TestServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.TestService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.TestService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,
@@ -843,9 +843,9 @@ private static final class TestServiceFileDescriptorSupplier
   private static final class TestServiceMethodDescriptorSupplier
       extends TestServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    TestServiceMethodDescriptorSupplier(String methodName) {
+    TestServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -16,7 +16,7 @@ public final class UnimplementedServiceGrpc {
 
   private UnimplementedServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.UnimplementedService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.UnimplementedService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,
@@ -297,9 +297,9 @@ private static final class UnimplementedServiceFileDescriptorSupplier
   private static final class UnimplementedServiceMethodDescriptorSupplier
       extends UnimplementedServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    UnimplementedServiceMethodDescriptorSupplier(String methodName) {
+    UnimplementedServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class XdsUpdateClientConfigureServiceGrpc {
 
   private XdsUpdateClientConfigureServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.XdsUpdateClientConfigureService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.XdsUpdateClientConfigureService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.Messages.ClientConfigureRequest,
@@ -291,9 +291,9 @@ private static final class XdsUpdateClientConfigureServiceFileDescriptorSupplier
   private static final class XdsUpdateClientConfigureServiceMethodDescriptorSupplier
       extends XdsUpdateClientConfigureServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    XdsUpdateClientConfigureServiceMethodDescriptorSupplier(String methodName) {
+    XdsUpdateClientConfigureServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class XdsUpdateHealthServiceGrpc {
 
   private XdsUpdateHealthServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.XdsUpdateHealthService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.XdsUpdateHealthService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,
@@ -352,9 +352,9 @@ private static final class XdsUpdateHealthServiceFileDescriptorSupplier
   private static final class XdsUpdateHealthServiceMethodDescriptorSupplier
       extends XdsUpdateHealthServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    XdsUpdateHealthServiceMethodDescriptorSupplier(String methodName) {
+    XdsUpdateHealthServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: istio-interop-testing/src/generated/main/grpc/io/istio/test/EchoTestServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class EchoTestServiceGrpc {
 
   private EchoTestServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "proto.EchoTestService";
+  public static final java.lang.String SERVICE_NAME = "proto.EchoTestService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.istio.test.Echo.EchoRequest,
@@ -334,9 +334,9 @@ private static final class EchoTestServiceFileDescriptorSupplier
   private static final class EchoTestServiceMethodDescriptorSupplier
       extends EchoTestServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    EchoTestServiceMethodDescriptorSupplier(String methodName) {
+    EchoTestServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: rls/src/generated/main/grpc/io/grpc/lookup/v1/RouteLookupServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class RouteLookupServiceGrpc {
 
   private RouteLookupServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.lookup.v1.RouteLookupService";
+  public static final java.lang.String SERVICE_NAME = "grpc.lookup.v1.RouteLookupService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.lookup.v1.RouteLookupRequest,
@@ -273,9 +273,9 @@ private static final class RouteLookupServiceFileDescriptorSupplier
   private static final class RouteLookupServiceMethodDescriptorSupplier
       extends RouteLookupServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    RouteLookupServiceMethodDescriptorSupplier(String methodName) {
+    RouteLookupServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: services/src/generated/main/grpc/io/grpc/channelz/v1/ChannelzGrpc.java
Patch:
@@ -16,7 +16,7 @@ public final class ChannelzGrpc {
 
   private ChannelzGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.channelz.v1.Channelz";
+  public static final java.lang.String SERVICE_NAME = "grpc.channelz.v1.Channelz";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.channelz.v1.GetTopChannelsRequest,
@@ -811,9 +811,9 @@ private static final class ChannelzFileDescriptorSupplier
   private static final class ChannelzMethodDescriptorSupplier
       extends ChannelzBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ChannelzMethodDescriptorSupplier(String methodName) {
+    ChannelzMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: services/src/generated/main/grpc/io/grpc/health/v1/HealthGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class HealthGrpc {
 
   private HealthGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.health.v1.Health";
+  public static final java.lang.String SERVICE_NAME = "grpc.health.v1.Health";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.health.v1.HealthCheckRequest,
@@ -388,9 +388,9 @@ private static final class HealthFileDescriptorSupplier
   private static final class HealthMethodDescriptorSupplier
       extends HealthBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    HealthMethodDescriptorSupplier(String methodName) {
+    HealthMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: services/src/generated/main/grpc/io/grpc/reflection/v1alpha/ServerReflectionGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class ServerReflectionGrpc {
 
   private ServerReflectionGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.reflection.v1alpha.ServerReflection";
+  public static final java.lang.String SERVICE_NAME = "grpc.reflection.v1alpha.ServerReflection";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.reflection.v1alpha.ServerReflectionRequest,
@@ -253,9 +253,9 @@ private static final class ServerReflectionFileDescriptorSupplier
   private static final class ServerReflectionMethodDescriptorSupplier
       extends ServerReflectionBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ServerReflectionMethodDescriptorSupplier(String methodName) {
+    ServerReflectionMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: services/src/generated/test/grpc/io/grpc/reflection/testing/AnotherDynamicServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class AnotherDynamicServiceGrpc {
 
   private AnotherDynamicServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.reflection.testing.AnotherDynamicService";
+  public static final java.lang.String SERVICE_NAME = "grpc.reflection.testing.AnotherDynamicService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.reflection.testing.DynamicRequest,
@@ -291,9 +291,9 @@ private static final class AnotherDynamicServiceFileDescriptorSupplier
   private static final class AnotherDynamicServiceMethodDescriptorSupplier
       extends AnotherDynamicServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    AnotherDynamicServiceMethodDescriptorSupplier(String methodName) {
+    AnotherDynamicServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: services/src/generated/test/grpc/io/grpc/reflection/testing/AnotherReflectableServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class AnotherReflectableServiceGrpc {
 
   private AnotherReflectableServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.reflection.testing.AnotherReflectableService";
+  public static final java.lang.String SERVICE_NAME = "grpc.reflection.testing.AnotherReflectableService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.reflection.testing.Request,
@@ -261,9 +261,9 @@ private static final class AnotherReflectableServiceFileDescriptorSupplier
   private static final class AnotherReflectableServiceMethodDescriptorSupplier
       extends AnotherReflectableServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    AnotherReflectableServiceMethodDescriptorSupplier(String methodName) {
+    AnotherReflectableServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: services/src/generated/test/grpc/io/grpc/reflection/testing/DynamicServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class DynamicServiceGrpc {
 
   private DynamicServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.reflection.testing.DynamicService";
+  public static final java.lang.String SERVICE_NAME = "grpc.reflection.testing.DynamicService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.reflection.testing.DynamicRequest,
@@ -291,9 +291,9 @@ private static final class DynamicServiceFileDescriptorSupplier
   private static final class DynamicServiceMethodDescriptorSupplier
       extends DynamicServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    DynamicServiceMethodDescriptorSupplier(String methodName) {
+    DynamicServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: services/src/generated/test/grpc/io/grpc/reflection/testing/ReflectableServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class ReflectableServiceGrpc {
 
   private ReflectableServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.reflection.testing.ReflectableService";
+  public static final java.lang.String SERVICE_NAME = "grpc.reflection.testing.ReflectableService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.reflection.testing.Request,
@@ -261,9 +261,9 @@ private static final class ReflectableServiceFileDescriptorSupplier
   private static final class ReflectableServiceMethodDescriptorSupplier
       extends ReflectableServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ReflectableServiceMethodDescriptorSupplier(String methodName) {
+    ReflectableServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: testing-proto/src/generated/main/grpc/io/grpc/testing/protobuf/SimpleServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class SimpleServiceGrpc {
 
   private SimpleServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.testing.SimpleService";
+  public static final java.lang.String SERVICE_NAME = "grpc.testing.SimpleService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.grpc.testing.protobuf.SimpleRequest,
@@ -492,9 +492,9 @@ private static final class SimpleServiceFileDescriptorSupplier
   private static final class SimpleServiceMethodDescriptorSupplier
       extends SimpleServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    SimpleServiceMethodDescriptorSupplier(String methodName) {
+    SimpleServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/com/github/xds/service/orca/v3/OpenRcaServiceGrpc.java
Patch:
@@ -22,7 +22,7 @@ public final class OpenRcaServiceGrpc {
 
   private OpenRcaServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "xds.service.orca.v3.OpenRcaService";
+  public static final java.lang.String SERVICE_NAME = "xds.service.orca.v3.OpenRcaService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<com.github.xds.service.orca.v3.OrcaLoadReportRequest,
@@ -314,9 +314,9 @@ private static final class OpenRcaServiceFileDescriptorSupplier
   private static final class OpenRcaServiceMethodDescriptorSupplier
       extends OpenRcaServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    OpenRcaServiceMethodDescriptorSupplier(String methodName) {
+    OpenRcaServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/api/v2/ClusterDiscoveryServiceGrpc.java
Patch:
@@ -15,7 +15,7 @@ public final class ClusterDiscoveryServiceGrpc {
 
   private ClusterDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.api.v2.ClusterDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.api.v2.ClusterDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.api.v2.DiscoveryRequest,
@@ -393,9 +393,9 @@ private static final class ClusterDiscoveryServiceFileDescriptorSupplier
   private static final class ClusterDiscoveryServiceMethodDescriptorSupplier
       extends ClusterDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ClusterDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    ClusterDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/api/v2/EndpointDiscoveryServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class EndpointDiscoveryServiceGrpc {
 
   private EndpointDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.api.v2.EndpointDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.api.v2.EndpointDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.api.v2.DiscoveryRequest,
@@ -383,9 +383,9 @@ private static final class EndpointDiscoveryServiceFileDescriptorSupplier
   private static final class EndpointDiscoveryServiceMethodDescriptorSupplier
       extends EndpointDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    EndpointDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    EndpointDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/api/v2/ListenerDiscoveryServiceGrpc.java
Patch:
@@ -18,7 +18,7 @@ public final class ListenerDiscoveryServiceGrpc {
 
   private ListenerDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.api.v2.ListenerDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.api.v2.ListenerDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.api.v2.DeltaDiscoveryRequest,
@@ -411,9 +411,9 @@ private static final class ListenerDiscoveryServiceFileDescriptorSupplier
   private static final class ListenerDiscoveryServiceMethodDescriptorSupplier
       extends ListenerDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ListenerDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    ListenerDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/api/v2/RouteDiscoveryServiceGrpc.java
Patch:
@@ -19,7 +19,7 @@ public final class RouteDiscoveryServiceGrpc {
 
   private RouteDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.api.v2.RouteDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.api.v2.RouteDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.api.v2.DiscoveryRequest,
@@ -417,9 +417,9 @@ private static final class RouteDiscoveryServiceFileDescriptorSupplier
   private static final class RouteDiscoveryServiceMethodDescriptorSupplier
       extends RouteDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    RouteDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    RouteDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/api/v2/ScopedRoutesDiscoveryServiceGrpc.java
Patch:
@@ -21,7 +21,7 @@ public final class ScopedRoutesDiscoveryServiceGrpc {
 
   private ScopedRoutesDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.api.v2.ScopedRoutesDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.api.v2.ScopedRoutesDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.api.v2.DiscoveryRequest,
@@ -429,9 +429,9 @@ private static final class ScopedRoutesDiscoveryServiceFileDescriptorSupplier
   private static final class ScopedRoutesDiscoveryServiceMethodDescriptorSupplier
       extends ScopedRoutesDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ScopedRoutesDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    ScopedRoutesDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/api/v2/VirtualHostDiscoveryServiceGrpc.java
Patch:
@@ -24,7 +24,7 @@ public final class VirtualHostDiscoveryServiceGrpc {
 
   private VirtualHostDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.api.v2.VirtualHostDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.api.v2.VirtualHostDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.api.v2.DeltaDiscoveryRequest,
@@ -317,9 +317,9 @@ private static final class VirtualHostDiscoveryServiceFileDescriptorSupplier
   private static final class VirtualHostDiscoveryServiceMethodDescriptorSupplier
       extends VirtualHostDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    VirtualHostDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    VirtualHostDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/discovery/v2/AggregatedDiscoveryServiceGrpc.java
Patch:
@@ -20,7 +20,7 @@ public final class AggregatedDiscoveryServiceGrpc {
 
   private AggregatedDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.service.discovery.v2.AggregatedDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.service.discovery.v2.AggregatedDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.api.v2.DiscoveryRequest,
@@ -356,9 +356,9 @@ private static final class AggregatedDiscoveryServiceFileDescriptorSupplier
   private static final class AggregatedDiscoveryServiceMethodDescriptorSupplier
       extends AggregatedDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    AggregatedDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    AggregatedDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/discovery/v2/SecretDiscoveryServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class SecretDiscoveryServiceGrpc {
 
   private SecretDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.service.discovery.v2.SecretDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.service.discovery.v2.SecretDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.api.v2.DeltaDiscoveryRequest,
@@ -375,9 +375,9 @@ private static final class SecretDiscoveryServiceFileDescriptorSupplier
   private static final class SecretDiscoveryServiceMethodDescriptorSupplier
       extends SecretDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    SecretDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    SecretDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/discovery/v3/AggregatedDiscoveryServiceGrpc.java
Patch:
@@ -20,7 +20,7 @@ public final class AggregatedDiscoveryServiceGrpc {
 
   private AggregatedDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.service.discovery.v3.AggregatedDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.service.discovery.v3.AggregatedDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest,
@@ -356,9 +356,9 @@ private static final class AggregatedDiscoveryServiceFileDescriptorSupplier
   private static final class AggregatedDiscoveryServiceMethodDescriptorSupplier
       extends AggregatedDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    AggregatedDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    AggregatedDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/load_stats/v2/LoadReportingServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class LoadReportingServiceGrpc {
 
   private LoadReportingServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.service.load_stats.v2.LoadReportingService";
+  public static final java.lang.String SERVICE_NAME = "envoy.service.load_stats.v2.LoadReportingService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.service.load_stats.v2.LoadStatsRequest,
@@ -303,9 +303,9 @@ private static final class LoadReportingServiceFileDescriptorSupplier
   private static final class LoadReportingServiceMethodDescriptorSupplier
       extends LoadReportingServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    LoadReportingServiceMethodDescriptorSupplier(String methodName) {
+    LoadReportingServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/load_stats/v3/LoadReportingServiceGrpc.java
Patch:
@@ -12,7 +12,7 @@ public final class LoadReportingServiceGrpc {
 
   private LoadReportingServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.service.load_stats.v3.LoadReportingService";
+  public static final java.lang.String SERVICE_NAME = "envoy.service.load_stats.v3.LoadReportingService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.service.load_stats.v3.LoadStatsRequest,
@@ -303,9 +303,9 @@ private static final class LoadReportingServiceFileDescriptorSupplier
   private static final class LoadReportingServiceMethodDescriptorSupplier
       extends LoadReportingServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    LoadReportingServiceMethodDescriptorSupplier(String methodName) {
+    LoadReportingServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: xds/src/generated/thirdparty/grpc/io/envoyproxy/envoy/service/status/v3/ClientStatusDiscoveryServiceGrpc.java
Patch:
@@ -17,7 +17,7 @@ public final class ClientStatusDiscoveryServiceGrpc {
 
   private ClientStatusDiscoveryServiceGrpc() {}
 
-  public static final String SERVICE_NAME = "envoy.service.status.v3.ClientStatusDiscoveryService";
+  public static final java.lang.String SERVICE_NAME = "envoy.service.status.v3.ClientStatusDiscoveryService";
 
   // Static method descriptors that strictly reflect the proto.
   private static volatile io.grpc.MethodDescriptor<io.envoyproxy.envoy.service.status.v3.ClientStatusRequest,
@@ -348,9 +348,9 @@ private static final class ClientStatusDiscoveryServiceFileDescriptorSupplier
   private static final class ClientStatusDiscoveryServiceMethodDescriptorSupplier
       extends ClientStatusDiscoveryServiceBaseDescriptorSupplier
       implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
-    private final String methodName;
+    private final java.lang.String methodName;
 
-    ClientStatusDiscoveryServiceMethodDescriptorSupplier(String methodName) {
+    ClientStatusDiscoveryServiceMethodDescriptorSupplier(java.lang.String methodName) {
       this.methodName = methodName;
     }
 

File: core/src/test/java/io/grpc/internal/RetriableStreamTest.java
Patch:
@@ -2518,7 +2518,7 @@ public void hedging_pushback_positive() {
         Status.fromCode(NON_FATAL_STATUS_CODE_1), PROCESSED, headers);
 
     fakeClock.forwardTime(HEDGING_DELAY_IN_SECONDS, TimeUnit.SECONDS);
-    inOrder.verifyNoMoreInteractions();
+    inOrder.verify(retriableStreamRecorder).newSubstream(anyInt());
 
     fakeClock.forwardTime(1, TimeUnit.SECONDS);
     assertEquals(1, fakeClock.numPendingTasks());

File: xds/src/main/java/io/grpc/xds/XdsResourceType.java
Patch:
@@ -47,7 +47,7 @@ abstract class XdsResourceType<T extends ResourceUpdate> {
   @VisibleForTesting
   static final String HASH_POLICY_FILTER_STATE_KEY = "io.grpc.channel_id";
   @VisibleForTesting
-  static boolean enableRouteLookup = getFlag("GRPC_EXPERIMENTAL_XDS_RLS_LB", false);
+  static boolean enableRouteLookup = getFlag("GRPC_EXPERIMENTAL_XDS_RLS_LB", true);
   @VisibleForTesting
   static boolean enableLeastRequest =
       !Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_ENABLE_LEAST_REQUEST"))

File: xds/src/test/java/io/grpc/xds/XdsClientImplDataTest.java
Patch:
@@ -172,7 +172,6 @@ public class XdsClientImplDataTest {
   @Before
   public void setUp() {
     originalEnableRouteLookup = XdsResourceType.enableRouteLookup;
-    assertThat(originalEnableRouteLookup).isFalse();
     originalEnableLeastRequest = XdsResourceType.enableLeastRequest;
     assertThat(originalEnableLeastRequest).isFalse();
     originalEnableWrr = XdsResourceType.enableWrr;

File: core/src/test/java/io/grpc/inprocess/InProcessClientTransportFactoryTest.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.grpc.inprocess;
 
+import io.grpc.internal.AbstractClientTransportFactoryTest;
 import io.grpc.internal.ClientTransportFactory;
-import io.grpc.internal.testing.AbstractClientTransportFactoryTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -61,7 +61,7 @@
 import io.grpc.Status;
 import io.grpc.internal.ClientCallImpl.ClientStreamProvider;
 import io.grpc.internal.ManagedChannelServiceConfig.MethodInfo;
-import io.grpc.internal.testing.SingleMessageProducer;
+import io.grpc.internal.SingleMessageProducer;
 import io.grpc.testing.TestMethodDescriptors;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: core/src/test/java/io/grpc/internal/DelayedStreamTest.java
Patch:
@@ -42,7 +42,7 @@
 import io.grpc.Metadata;
 import io.grpc.Status;
 import io.grpc.internal.ClientStreamListener.RpcProgress;
-import io.grpc.internal.testing.SingleMessageProducer;
+import io.grpc.internal.SingleMessageProducer;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.util.concurrent.TimeUnit;

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -47,7 +47,7 @@
 import io.grpc.ServerCall;
 import io.grpc.Status;
 import io.grpc.internal.ServerCallImpl.ServerStreamListenerImpl;
-import io.grpc.internal.testing.SingleMessageProducer;
+import io.grpc.internal.SingleMessageProducer;
 import io.perfmark.PerfMark;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;

File: core/src/test/java/io/grpc/internal/ServerImplTest.java
Patch:
@@ -78,7 +78,7 @@
 import io.grpc.StringMarshaller;
 import io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener;
 import io.grpc.internal.ServerImplBuilder.ClientTransportServersBuilder;
-import io.grpc.internal.testing.SingleMessageProducer;
+import io.grpc.internal.SingleMessageProducer;
 import io.grpc.internal.testing.TestServerStreamTracer;
 import io.grpc.util.MutableHandlerRegistry;
 import io.perfmark.PerfMark;

File: core/src/testFixtures/java/io/grpc/internal/AbstractClientTransportFactoryTest.java
Patch:
@@ -14,10 +14,9 @@
  * limitations under the License.
  */
 
-package io.grpc.internal.testing;
+package io.grpc.internal;
 
 import io.grpc.ChannelLogger;
-import io.grpc.internal.ClientTransportFactory;
 import java.net.InetSocketAddress;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: core/src/testFixtures/java/io/grpc/internal/SingleMessageProducer.java
Patch:
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package io.grpc.internal.testing;
+package io.grpc.internal;
 
-import io.grpc.internal.StreamListener;
 import java.io.InputStream;
 import javax.annotation.Nullable;
 

File: netty/src/test/java/io/grpc/netty/NettyClientTransportFactoryTest.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.grpc.netty;
 
+import io.grpc.internal.AbstractClientTransportFactoryTest;
 import io.grpc.internal.ClientTransportFactory;
-import io.grpc.internal.testing.AbstractClientTransportFactoryTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportFactoryTest.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.grpc.okhttp;
 
+import io.grpc.internal.AbstractClientTransportFactoryTest;
 import io.grpc.internal.ClientTransportFactory;
-import io.grpc.internal.testing.AbstractClientTransportFactoryTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 

File: xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancerProvider.java
Patch:
@@ -25,6 +25,7 @@
 import io.grpc.LoadBalancerProvider;
 import io.grpc.LoadBalancerRegistry;
 import io.grpc.NameResolver.ConfigOrError;
+import io.grpc.Status;
 import io.grpc.internal.ServiceConfigUtil.PolicySelection;
 import io.grpc.xds.Bootstrapper.ServerInfo;
 import io.grpc.xds.Endpoints.DropOverload;
@@ -60,7 +61,8 @@ public String getPolicyName() {
 
   @Override
   public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawLoadBalancingPolicyConfig) {
-    throw new UnsupportedOperationException("not supported as top-level LB policy");
+    return ConfigOrError.fromError(
+        Status.INTERNAL.withDescription(getPolicyName() + " cannot be used from service config"));
   }
 
   @Override

File: xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancerProvider.java
Patch:
@@ -24,6 +24,7 @@
 import io.grpc.LoadBalancer.Helper;
 import io.grpc.LoadBalancerProvider;
 import io.grpc.NameResolver.ConfigOrError;
+import io.grpc.Status;
 import io.grpc.internal.ServiceConfigUtil.PolicySelection;
 import io.grpc.xds.Bootstrapper.ServerInfo;
 import io.grpc.xds.EnvoyServerProtoData.OutlierDetection;
@@ -58,7 +59,8 @@ public String getPolicyName() {
 
   @Override
   public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawLoadBalancingPolicyConfig) {
-    throw new UnsupportedOperationException("not supported as top-level LB policy");
+    return ConfigOrError.fromError(
+        Status.INTERNAL.withDescription(getPolicyName() + " cannot be used from service config"));
   }
 
   @Override

File: xds/src/main/java/io/grpc/xds/PriorityLoadBalancerProvider.java
Patch:
@@ -25,6 +25,7 @@
 import io.grpc.LoadBalancer.Helper;
 import io.grpc.LoadBalancerProvider;
 import io.grpc.NameResolver.ConfigOrError;
+import io.grpc.Status;
 import io.grpc.internal.ServiceConfigUtil.PolicySelection;
 import java.util.Collections;
 import java.util.HashSet;
@@ -57,7 +58,8 @@ public LoadBalancer newLoadBalancer(Helper helper) {
 
   @Override
   public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawConfig) {
-    throw new UnsupportedOperationException();
+    return ConfigOrError.fromError(
+        Status.INTERNAL.withDescription(getPolicyName() + " cannot be used from service config"));
   }
 
   static final class PriorityLbConfig {

File: xds/src/main/java/io/grpc/xds/WeightedRoundRobinLoadBalancer.java
Patch:
@@ -232,13 +232,13 @@ protected Subchannel delegate() {
   }
 
   @VisibleForTesting
-  final class WeightedRoundRobinPicker extends ReadyPicker {
+  final class WeightedRoundRobinPicker extends RoundRobinPicker {
     private final List<Subchannel> list;
     private final boolean enableOobLoadReport;
     private volatile EdfScheduler scheduler;
 
     WeightedRoundRobinPicker(List<Subchannel> list, boolean enableOobLoadReport) {
-      super(checkNotNull(list, "list"), random.nextInt(list.size()));
+      checkNotNull(list, "list");
       Preconditions.checkArgument(!list.isEmpty(), "empty list");
       this.list = list;
       this.enableOobLoadReport = enableOobLoadReport;

File: api/src/main/java/io/grpc/Status.java
Patch:
@@ -307,7 +307,7 @@ private static List<Status> buildStatusList() {
    * Return a {@link Status} given a canonical error {@link Code} value.
    */
   public static Status fromCodeValue(int codeValue) {
-    if (codeValue < 0 || codeValue > STATUS_LIST.size()) {
+    if (codeValue < 0 || codeValue >= STATUS_LIST.size()) {
       return UNKNOWN.withDescription("Unknown code " + codeValue);
     } else {
       return STATUS_LIST.get(codeValue);

File: api/src/test/java/io/grpc/StatusTest.java
Patch:
@@ -43,6 +43,7 @@ public void verifyExceptionMessage() {
   @Test
   public void impossibleCodeValue() {
     assertEquals(Code.UNKNOWN, Status.fromCodeValue(-1).getCode());
+    assertEquals(Code.UNKNOWN, Status.fromCodeValue(17).getCode());
   }
 
   @Test

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpServerTransport.java
Patch:
@@ -458,7 +458,7 @@ private static String asciiString(ByteString value) {
     // utf8() string is cached in ByteString, so we prefer it when the contents are ASCII. This
     // provides benefit if the header was reused via HPACK.
     for (int i = 0; i < value.size(); i++) {
-      if (value.getByte(i) >= 0x80) {
+      if (value.getByte(i) < 0) {
         return value.string(GrpcUtil.US_ASCII);
       }
     }

File: xds/src/main/java/io/grpc/xds/RoutingUtils.java
Patch:
@@ -165,7 +165,8 @@ private static boolean matchPath(PathMatcher pathMatcher, String fullMethodName)
     } else if (pathMatcher.prefix() != null) {
       return pathMatcher.caseSensitive()
           ? fullMethodName.startsWith(pathMatcher.prefix())
-          : fullMethodName.toLowerCase().startsWith(pathMatcher.prefix().toLowerCase());
+          : fullMethodName.toLowerCase(Locale.US).startsWith(
+              pathMatcher.prefix().toLowerCase(Locale.US));
     }
     return pathMatcher.regEx().matches(fullMethodName);
   }

File: xds/src/test/java/io/grpc/xds/orca/OrcaServiceImplTest.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -115,7 +116,6 @@ public void testReportingLifeCycle() {
   }
 
   @Test
-  @SuppressWarnings("unchecked")
   public void testReportingLifeCycle_serverShutdown() {
     ClientCall<OrcaLoadReportRequest, OrcaLoadReport> call = channel.newCall(
         OpenRcaServiceGrpc.getStreamCoreMetricsMethod(), CallOptions.DEFAULT);
@@ -128,7 +128,7 @@ public void testReportingLifeCycle_serverShutdown() {
     OrcaLoadReport expect = OrcaLoadReport.newBuilder().putUtilization("buffer", 0.2).build();
     assertThat(((OrcaServiceImpl)orcaServiceImpl).clientCount.get()).isEqualTo(1);
     verify(listener).onMessage(eq(expect));
-    reset(listener);
+    verify(listener, never()).onClose(any(), any());
     oobServer.shutdownNow();
     assertThat(fakeClock.forwardTime(1, TimeUnit.SECONDS)).isEqualTo(0);
     assertThat(((OrcaServiceImpl)orcaServiceImpl).clientCount.get()).isEqualTo(0);

File: binder/src/androidTest/java/io/grpc/binder/BinderChannelSmokeTest.java
Patch:
@@ -234,6 +234,7 @@ public void testConnectViaTargetUri() throws Exception {
   }
 
   @Test
+  @SuppressWarnings("GrpcUseClientCallBasedBlockingMethods") //TODO(zivy): fix error prone
   public void testUncaughtServerException() throws Exception {
     // Use a poison parcelable to cause an unexpected Exception in the server's onTransact().
     PoisonParcelable bad = new PoisonParcelable();
@@ -254,6 +255,7 @@ public void testUncaughtServerException() throws Exception {
   }
 
   @Test
+  @SuppressWarnings("GrpcUseClientCallBasedBlockingMethods") //TODO(zivy): fix error prone
   public void testUncaughtClientException() throws Exception {
     // Use a poison parcelable to cause an unexpected Exception in the client's onTransact().
     parcelableForResponseHeaders = new PoisonParcelable();

File: googleapis/src/main/java/io/grpc/googleapis/GoogleCloudToProdNameResolver.java
Patch:
@@ -66,8 +66,8 @@ final class GoogleCloudToProdNameResolver extends NameResolver {
           || System.getProperty("io.grpc.xds.bootstrapConfig") != null;
   @VisibleForTesting
   static boolean enableFederation =
-      !Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_XDS_FEDERATION"))
-          && Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_XDS_FEDERATION"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_XDS_FEDERATION"))
+          || Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_XDS_FEDERATION"));
 
   private static final String serverUriOverride =
       System.getenv("GRPC_TEST_ONLY_GOOGLE_C2P_RESOLVER_TRAFFIC_DIRECTOR_URI");

File: googleapis/src/test/java/io/grpc/googleapis/GoogleCloudToProdNameResolverTest.java
Patch:
@@ -159,6 +159,7 @@ public void notOnGcpDelegateToDns() {
   public void hasProvidedBootstrapDelegateToDns() {
     GoogleCloudToProdNameResolver.isOnGcp = true;
     GoogleCloudToProdNameResolver.xdsBootstrapProvided = true;
+    GoogleCloudToProdNameResolver.enableFederation = false;
     createResolver();
     resolver.start(mockListener);
     assertThat(delegatedResolver.keySet()).containsExactly("dns");

File: xds/src/main/java/io/grpc/xds/BootstrapperImpl.java
Patch:
@@ -57,8 +57,8 @@ class BootstrapperImpl extends Bootstrapper {
 
   // Feature-gating environment variables.
   static boolean enableFederation =
-      !Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_XDS_FEDERATION"))
-          && Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_XDS_FEDERATION"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_XDS_FEDERATION"))
+          || Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_XDS_FEDERATION"));
 
   // Client features.
   @VisibleForTesting

File: alts/src/test/java/io/grpc/alts/internal/TsiTest.java
Patch:
@@ -36,7 +36,7 @@
 
 /** Utility class that provides tests for implementations of {@link TsiHandshaker}. */
 public final class TsiTest {
-  private static final String DECRYPTION_FAILURE_RE = "Tag mismatch!|BAD_DECRYPT";
+  private static final String DECRYPTION_FAILURE_RE = "Tag mismatch|BAD_DECRYPT";
 
   private TsiTest() {}
 

File: api/src/main/java/io/grpc/Detachable.java
Patch:
@@ -32,7 +32,6 @@
  * with {@link HasByteBuffer}, a custom {@link io.grpc.MethodDescriptor.Marshaller} can take
  * over the ownership of buffers containing inbound data and perform delayed deserialization.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7387")
 public interface Detachable {
 
   /**

File: api/src/main/java/io/grpc/HasByteBuffer.java
Patch:
@@ -28,7 +28,6 @@
  * interface from an {@link java.io.InputStream} to {@link ByteBuffer}s, without copying the
  * content to a byte array and read from it.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7387")
 public interface HasByteBuffer {
 
   /**

File: core/src/test/java/io/grpc/internal/RetriableStreamTest.java
Patch:
@@ -1971,7 +1971,7 @@ public void normalRetry_thenNoTransparentRetry_andNoMoreRetry() {
   }
 
   @Test
-  public void noRetry_transparentRetry_earlyCommit() {
+  public void noRetry_transparentRetry_noEarlyCommit() {
     ClientStream mockStream1 = mock(ClientStream.class);
     ClientStream mockStream2 = mock(ClientStream.class);
     InOrder inOrder = inOrder(retriableStreamRecorder, mockStream1, mockStream2);
@@ -1999,7 +1999,7 @@ method, new Metadata(), channelBufferUsed, PER_RPC_BUFFER_LIMIT, CHANNEL_BUFFER_
     inOrder.verify(retriableStreamRecorder).newSubstream(0);
     ArgumentCaptor<ClientStreamListener> sublistenerCaptor2 =
         ArgumentCaptor.forClass(ClientStreamListener.class);
-    inOrder.verify(retriableStreamRecorder).postCommit();
+    verify(retriableStreamRecorder, never()).postCommit();
     inOrder.verify(mockStream2).start(sublistenerCaptor2.capture());
     inOrder.verify(mockStream2).isReady();
     inOrder.verifyNoMoreInteractions();

File: benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadWorkerTest.java
Patch:
@@ -42,7 +42,7 @@
 public class LoadWorkerTest {
 
 
-  private static final int TIMEOUT = 10;
+  private static final int TIMEOUT = 20;
   private static final Control.ClientArgs MARK = Control.ClientArgs.newBuilder()
       .setMark(Control.Mark.newBuilder().setReset(true).build())
       .build();

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -2175,7 +2175,7 @@ protected SocketAddress obtainLocalClientAddr() {
   /** Helper for asserting TLS info in SSLSession {@link io.grpc.ServerCall#getAttributes()}. */
   protected void assertX500SubjectDn(String tlsInfo) {
     TestServiceGrpc.TestServiceBlockingStub stub =
-        blockingStub.withDeadlineAfter(5, TimeUnit.SECONDS);
+        blockingStub.withDeadlineAfter(10, TimeUnit.SECONDS);
 
     stub.unaryCall(SimpleRequest.getDefaultInstance());
 

File: gcp-observability/src/main/java/io/grpc/gcp/observability/GcpObservability.java
Patch:
@@ -90,12 +90,10 @@ public final class GcpObservability implements AutoCloseable {
    */
   public static synchronized GcpObservability grpcInit() throws IOException {
     if (instance == null) {
-      GlobalLocationTags globalLocationTags = new GlobalLocationTags();
       ObservabilityConfigImpl observabilityConfig = ObservabilityConfigImpl.getInstance();
       TraceLoggingHelper traceLoggingHelper = new TraceLoggingHelper(
           observabilityConfig.getProjectId());
-      Sink sink = new GcpLogSink(observabilityConfig.getProjectId(),
-          globalLocationTags.getLocationTags(), observabilityConfig,
+      Sink sink = new GcpLogSink(observabilityConfig.getProjectId(), observabilityConfig,
           SERVICES_TO_EXCLUDE, traceLoggingHelper);
       LogHelper helper = new LogHelper(sink);
       ConfigFilterHelper configFilterHelper = ConfigFilterHelper.getInstance(observabilityConfig);

File: xds/src/test/java/io/grpc/xds/WeightedRoundRobinLoadBalancerTest.java
Patch:
@@ -638,7 +638,8 @@ public void edfScheduler() {
       pickCount.put(result, pickCount.getOrDefault(result, 0) + 1);
     }
     for (int i = 0; i < capacity; i++) {
-      assertThat(Math.abs(pickCount.get(i) / 1000.0 - weights[i] / totalWeight) ).isAtMost(0.01);
+      assertThat(Math.abs(pickCount.getOrDefault(i, 0) / 1000.0 - weights[i] / totalWeight) )
+          .isAtMost(0.01);
     }
   }
 

File: gcp-observability/src/test/java/io/grpc/gcp/observability/interceptors/InternalLoggingServerInterceptorTest.java
Patch:
@@ -354,7 +354,7 @@ public String getAuthority() {
             eq(SpanContext.INVALID));
     verifyNoMoreInteractions(mockLogHelper);
     Duration timeout = timeoutCaptor.getValue();
-    assertThat(TimeUnit.SECONDS.toNanos(1) - Durations.toNanos(timeout))
+    assertThat(Math.abs(TimeUnit.SECONDS.toNanos(1) - Durations.toNanos(timeout)))
         .isAtMost(TimeUnit.MILLISECONDS.toNanos(250));
   }
 

File: servlet/src/main/java/io/grpc/servlet/AsyncServletOutputStreamWriter.java
Patch:
@@ -194,7 +194,9 @@ private void assureReadyAndDrainedTurnsFalse() {
     // being set to false by runOrBuffer() concurrently.
     while (writeState.get().readyAndDrained) {
       parkingThread = Thread.currentThread();
-      LockSupport.parkNanos(Duration.ofMinutes(1).toNanos()); // should return immediately
+      // Try to sleep for an extremely long time to avoid writeState being changed at exactly
+      // the time when sleep time expires (in extreme scenario, such as #9917).
+      LockSupport.parkNanos(Duration.ofHours(1).toNanos()); // should return immediately
     }
     parkingThread = null;
   }

File: interop-testing/src/main/java/io/grpc/testing/integration/CustomBackendMetricsLoadBalancerProvider.java
Patch:
@@ -136,7 +136,9 @@ public PickResult pickSubchannel(PickSubchannelArgs args) {
                   public void onLoadReport(MetricReport callMetricReport) {
                     AtomicReference<TestOrcaReport> reportRef =
                         args.getCallOptions().getOption(ORCA_RPC_REPORT_KEY);
-                    reportRef.set(fromCallMetricReport(callMetricReport));
+                    if (reportRef != null) {
+                      reportRef.set(fromCallMetricReport(callMetricReport));
+                    }
                   }
                 }));
       }

File: android-interop-testing/src/androidTest/java/io/grpc/android/integrationtest/UdsChannelInteropTest.java
Patch:
@@ -21,8 +21,8 @@
 
 import android.net.LocalSocketAddress.Namespace;
 import androidx.test.InstrumentationRegistry;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
 import androidx.test.rule.ActivityTestRule;
-import androidx.test.runner.AndroidJUnit4;
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.Server;
 import io.grpc.android.UdsChannelBuilder;

File: api/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -119,7 +119,6 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
    * @throws UnsupportedOperationException if unsupported
    * @since 1.25.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/6279")
   public T offloadExecutor(Executor executor) {
     throw new UnsupportedOperationException();
   }

File: api/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -366,7 +366,6 @@ public ChannelLogger getChannelLogger() {
      * @since 1.25.0
      */
     @Nullable
-    @ExperimentalApi("https://github.com/grpc/grpc-java/issues/6279")
     public Executor getOffloadExecutor() {
       return executor;
     }
@@ -510,7 +509,6 @@ public Builder setChannelLogger(ChannelLogger channelLogger) {
        *
        * @since 1.25.0
        */
-      @ExperimentalApi("https://github.com/grpc/grpc-java/issues/6279")
       public Builder setOffloadExecutor(Executor executor) {
         this.executor = executor;
         return this;

File: alts/src/test/java/io/grpc/alts/internal/AesGcmHkdfAeadCrypterTest.java
Patch:
@@ -117,7 +117,7 @@ public void testVectorEncrypt() throws GeneralSecurityException {
           ByteBuffer.wrap(testVector.plaintext),
           ByteBuffer.wrap(testVector.aad),
           testVector.nonce);
-      String msg = "Failure for test vector " + i;
+      String msg = "Failure for test vector " + i + " " + testVector.comment;
       assertWithMessage(msg)
           .that(ciphertextBuffer.remaining())
           .isEqualTo(bufferSize - testVector.ciphertext.length);
@@ -142,7 +142,7 @@ public void testVectorDecrypt() throws GeneralSecurityException {
           ByteBuffer.wrap(testVector.ciphertext),
           ByteBuffer.wrap(testVector.aad),
           testVector.nonce);
-      String msg = "Failure for test vector " + i;
+      String msg = "Failure for test vector " + i + " " + testVector.comment;
       assertWithMessage(msg)
           .that(plaintextBuffer.remaining())
           .isEqualTo(bufferSize - testVector.plaintext.length);

File: api/src/main/java/io/grpc/Attributes.java
Patch:
@@ -115,6 +115,7 @@ public Builder toBuilder() {
    * @param <T> type of the value in the key-value pair
    */
   @Immutable
+  @SuppressWarnings("UnusedTypeParameter")
   public static final class Key<T> {
     private final String debugString;
 

File: api/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -772,7 +772,7 @@ public static final class Builder {
       Builder() {
       }
 
-      private <T> Builder copyCustomOptions(Object[][] options) {
+      private Builder copyCustomOptions(Object[][] options) {
         customOptions = new Object[options.length][2];
         System.arraycopy(options, 0, customOptions, 0, options.length);
         return this;

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -214,6 +214,7 @@ public SimpleResponse unaryCallsByteThroughput() {
     return stub.unaryCall(BYTE_THROUGHPUT_REQUEST);
   }
 
+  @SuppressWarnings("StaticAssignmentOfThrowable")
   private static final Throwable OK_THROWABLE = new RuntimeException("OK");
 
   @State(Scope.Thread)

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadClient.java
Patch:
@@ -245,9 +245,9 @@ Stats.ClientStats getStats() {
       latenciesBuilder.addBucket(0);
       base = base * resolution;
     }
-    latenciesBuilder.setMaxSeen(intervalHistogram.getMaxValue());
-    latenciesBuilder.setMinSeen(intervalHistogram.getMinNonZeroValue());
-    latenciesBuilder.setCount(intervalHistogram.getTotalCount());
+    latenciesBuilder.setMaxSeen((double) intervalHistogram.getMaxValue());
+    latenciesBuilder.setMinSeen((double) intervalHistogram.getMinNonZeroValue());
+    latenciesBuilder.setCount((double) intervalHistogram.getTotalCount());
     latenciesBuilder.setSum(intervalHistogram.getMean()
         * intervalHistogram.getTotalCount());
     // TODO: No support for sum of squares

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java
Patch:
@@ -202,7 +202,7 @@ public void onCompleted() {
 
     private void waitForRpcsToComplete(int duration) {
       long now = System.nanoTime();
-      long end = now + duration * 1000 * 1000 * 1000;
+      long end = now + duration * 1000L * 1000L * 1000L;
       while (histogram.getTotalCount() < numRpcs && end - now > 0) {
         now = System.nanoTime();
       }

File: core/src/main/java/io/grpc/internal/JndiResourceResolverFactory.java
Patch:
@@ -43,6 +43,7 @@
 final class JndiResourceResolverFactory implements DnsNameResolver.ResourceResolverFactory {
 
   @Nullable
+  @SuppressWarnings("StaticAssignmentOfThrowable")
   private static final Throwable JNDI_UNAVAILABILITY_CAUSE = initJndi();
 
   // @UsedReflectively
@@ -194,8 +195,7 @@ static String unquote(String txtRecord) {
 
   @VisibleForTesting
   @IgnoreJRERequirement
-  // Hashtable is required. https://github.com/google/error-prone/issues/1766
-  @SuppressWarnings("JdkObsolete")
+  @SuppressWarnings({"JdkObsolete", "BanJNDI"})
   // javax.naming.* is only loaded reflectively and is never loaded for Android
   // The lint issue id is supposed to be "InvalidPackage" but it doesn't work, don't know why.
   // Use "all" as the lint issue id to suppress all types of lint error.

File: core/src/main/java/io/grpc/internal/ManagedChannelOrphanWrapper.java
Patch:
@@ -80,6 +80,8 @@ static final class ManagedChannelReference extends WeakReference<ManagedChannelO
 
     private static final boolean ENABLE_ALLOCATION_TRACKING =
         Boolean.parseBoolean(System.getProperty(ALLOCATION_SITE_PROPERTY_NAME, "true"));
+
+    @SuppressWarnings("StaticAssignmentOfThrowable")
     private static final RuntimeException missingCallSite = missingCallSite();
 
     private final ReferenceQueue<ManagedChannelOrphanWrapper> refqueue;

File: core/src/main/java/io/grpc/internal/StatsTraceContext.java
Patch:
@@ -119,10 +119,11 @@ public void clientInboundTrailers(Metadata trailers) {
   }
 
   /**
-   * See {@link ServerStreamTracer#filterContext}.  For server-side only.
+   * See {@link ServerStreamTracer#filterContext}. For server-side only.
    *
    * <p>Called from {@link io.grpc.internal.ServerImpl}.
    */
+  @SuppressWarnings("UnusedTypeParameter")
   public <ReqT, RespT> Context serverFilterContext(Context context) {
     Context ctx = checkNotNull(context, "context");
     for (StreamTracer tracer : tracers) {

File: interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java
Patch:
@@ -338,7 +338,7 @@ public void sendHeaders(Metadata responseHeaders) {
           try {
             int timeout = Integer.parseInt(
                 callBehavior.substring(CALL_BEHAVIOR_SLEEP_VALUE.length()));
-            Thread.sleep(timeout * 1000);
+            Thread.sleep(timeout * 1000L);
           } catch (NumberFormatException e) {
             newCall.close(
                 Status.INVALID_ARGUMENT.withDescription(

File: interop-testing/src/test/java/io/grpc/testing/integration/ProxyTest.java
Patch:
@@ -93,7 +93,7 @@ public void smallLatency() throws Exception {
     }
     Collections.sort(rtts);
     long rtt = rtts.get(0);
-    assertEquals(latency, rtt, .5 * latency);
+    assertEquals(latency, (double) rtt, .5 * latency);
   }
 
   @Test
@@ -126,7 +126,7 @@ public void bigLatency() throws Exception {
     }
     Collections.sort(rtts);
     long rtt = rtts.get(0);
-    assertEquals(latency, rtt, .5 * latency);
+    assertEquals(latency, (double) rtt, .5 * latency);
   }
 
   @Test

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -877,7 +877,7 @@ private void cancelPing(Throwable t) {
   /** If {@code statusCode} is non-null, it will be used instead of the http2 error code mapping. */
   private Status statusFromH2Error(
       Status.Code statusCode, String context, long errorCode, byte[] debugData) {
-    Status status = GrpcUtil.Http2Error.statusForCode((int) errorCode);
+    Status status = GrpcUtil.Http2Error.statusForCode(errorCode);
     if (statusCode == null) {
       statusCode = status.getCode();
     }

File: netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java
Patch:
@@ -555,6 +555,7 @@ private Http2Headers grpcResponseTrailers(Status status) {
   }
 
   private class TransportStateImpl extends NettyClientStream.TransportState {
+    @SuppressWarnings("DirectInvocationOnMock")
     public TransportStateImpl(NettyClientHandler handler, int maxMessageSize) {
       super(
           handler,

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -431,7 +431,7 @@ public void shouldAdvertiseMaxConcurrentStreams() throws Exception {
     verifyWrite().writeSettings(
         any(ChannelHandlerContext.class), captor.capture(), any(ChannelPromise.class));
 
-    assertEquals(maxConcurrentStreams, captor.getValue().maxConcurrentStreams().intValue());
+    assertEquals(maxConcurrentStreams, captor.getValue().maxConcurrentStreams().longValue());
   }
 
   @Test
@@ -443,7 +443,7 @@ public void shouldAdvertiseMaxHeaderListSize() throws Exception {
     verifyWrite().writeSettings(
         any(ChannelHandlerContext.class), captor.capture(), any(ChannelPromise.class));
 
-    assertEquals(maxHeaderListSize, captor.getValue().maxHeaderListSize().intValue());
+    assertEquals(maxHeaderListSize, captor.getValue().maxHeaderListSize().longValue());
   }
 
   @Test

File: netty/src/test/java/io/grpc/netty/NettyServerStreamTest.java
Patch:
@@ -281,6 +281,7 @@ public void cancelStreamShouldSucceed() {
   }
 
   @Override
+  @SuppressWarnings("DirectInvocationOnMock")
   protected NettyServerStream createStream() {
     when(handler.getWriteQueue()).thenReturn(writeQueue);
     StatsTraceContext statsTraceCtx = StatsTraceContext.NOOP;

File: okhttp/src/test/java/io/grpc/okhttp/OptionalMethodTest.java
Patch:
@@ -50,6 +50,7 @@ public String testMethod(String arg) {
   }
 
   private static class PrivateClass {
+    @SuppressWarnings("UnusedMethod")
     public String testMethod(String arg) {
       return arg;
     }

File: rls/src/main/java/io/grpc/rls/LinkedHashLruCache.java
Patch:
@@ -371,7 +371,7 @@ private final class SizeHandlingEvictionListener implements EvictionListener<K,
 
     @Override
     public void onEviction(K key, SizedValue value, EvictionType cause) {
-      estimatedSizeBytes.addAndGet(-1 * value.size);
+      estimatedSizeBytes.addAndGet(-1L * value.size);
       if (delegate != null) {
         delegate.onEviction(key, value.value, cause);
       }

File: xds/third_party/zero-allocation-hashing/test/java/io/grpc/xds/XxHash64Test.java
Patch:
@@ -136,7 +136,7 @@ private static void testNegativePrimitives(XxHash64 f, int len) {
         long eightByteExpected = f.hashBytes(bytes);
         assertEquals("byte hash", oneByteExpected, f.hashByte((byte) -1));
         assertEquals("short hash", twoByteExpected, f.hashShort((short) -1));
-        assertEquals("char hash", twoByteExpected, f.hashChar((char) -1));
+        assertEquals("char hash", twoByteExpected, f.hashChar(Character.MAX_VALUE));
         assertEquals("int hash", fourByteExpected, f.hashInt(-1));
         assertEquals("long hash", eightByteExpected, f.hashLong(-1L));
       }

File: api/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -139,7 +139,6 @@ public final T addServices(List<ServerServiceDefinition> services) {
    * @return this
    * @since 1.5.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/3117")
   public T intercept(ServerInterceptor interceptor) {
     throw new UnsupportedOperationException();
   }

File: alts/src/test/java/io/grpc/alts/HandshakerServiceChannelTest.java
Patch:
@@ -46,7 +46,7 @@ public void unaryRpc(SimpleRequest request, StreamObserver<SimpleResponse> so) {
             so.onCompleted();
           }
         })
-        .build());
+          .build());
   private Resource<Channel> resource;
 
   @Before

File: core/src/main/java/io/grpc/util/OutlierDetectionLoadBalancer.java
Patch:
@@ -880,7 +880,7 @@ private OutlierDetectionLoadBalancerConfig(Long intervalNanos,
     public static class Builder {
       Long intervalNanos = 10_000_000_000L; // 10s
       Long baseEjectionTimeNanos = 30_000_000_000L; // 30s
-      Long maxEjectionTimeNanos = 30_000_000_000L; // 30s
+      Long maxEjectionTimeNanos = 300_000_000_000L; // 300s
       Integer maxEjectionPercent = 10;
       SuccessRateEjection successRateEjection;
       FailurePercentageEjection failurePercentageEjection;

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -414,7 +414,7 @@ private void scheduleNextChunk() {
 
         // Schedule the next response chunk if there is one.
         Chunk nextChunk = chunks.peek();
-        if (nextChunk != null) {
+        if (nextChunk != null && !executor.isShutdown()) {
           scheduled = true;
           // TODO(ejona): cancel future if RPC is cancelled
           Future<?> unused = executor.schedule(new LogExceptionRunnable(dispatchTask),

File: rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java
Patch:
@@ -218,13 +218,13 @@ public void onNext(io.grpc.lookup.v1.RouteLookupResponse value) {
               public void onError(Throwable t) {
                 logger.log(ChannelLogLevel.DEBUG, "Error looking up route:", t);
                 response.setException(t);
-                throttler.registerBackendResponse(false);
+                throttler.registerBackendResponse(true);
                 helper.propagateRlsError();
               }
 
               @Override
               public void onCompleted() {
-                throttler.registerBackendResponse(true);
+                throttler.registerBackendResponse(false);
               }
             });
     return response;

File: api/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -265,7 +265,7 @@ public String getServiceName() {
   /**
    * A convenience method for {@code extractBareMethodName(getFullMethodName())}.
    *
-   * @since 1.32.0
+   * @since 1.33.0
    */
   @Nullable
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/5635")
@@ -413,7 +413,7 @@ public static String extractFullServiceName(String fullMethodName) {
    * Extract the method name out of a fully qualified method name. May return {@code null}
    * if the input is malformed, but you cannot rely on it for the validity of the input.
    *
-   * @since 1.32.0
+   * @since 1.33.0
    */
   @Nullable
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/5635")

File: core/src/main/java/io/grpc/internal/RetriableStream.java
Patch:
@@ -1099,6 +1099,7 @@ public void messagesAvailable(final MessageProducer producer) {
       checkState(
           savedState.winningSubstream != null, "Headers should be received prior to messages.");
       if (savedState.winningSubstream != substream) {
+        GrpcUtil.closeQuietly(producer);
         return;
       }
       listenerSerializeExecutor.execute(

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import static io.grpc.internal.GrpcUtil.KEEPALIVE_TIME_NANOS_DISABLED;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Ticker;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.CheckReturnValue;
 import com.google.errorprone.annotations.InlineMe;
@@ -738,7 +739,7 @@ public void run() {
           maxMessageSize, maxHeaderListSize, keepAliveTimeNanosState.get(), keepAliveTimeoutNanos,
           keepAliveWithoutCalls, options.getAuthority(), options.getUserAgent(),
           tooManyPingsRunnable, transportTracerFactory.create(), options.getEagAttributes(),
-          localSocketPicker, channelLogger, useGetForSafeMethods);
+          localSocketPicker, channelLogger, useGetForSafeMethods, Ticker.systemTicker());
       return transport;
     }
 

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -461,6 +461,7 @@ private void runTest(TestCases testCase) throws Exception {
 
       case RPC_SOAK: {
         tester.performSoakTest(
+            serverHost,
             false /* resetChannelPerIteration */,
             soakIterations,
             soakMaxFailures,
@@ -472,6 +473,7 @@ private void runTest(TestCases testCase) throws Exception {
 
       case CHANNEL_SOAK: {
         tester.performSoakTest(
+            serverHost,
             true /* resetChannelPerIteration */,
             soakIterations,
             soakMaxFailures,

File: xds/src/main/java/io/grpc/xds/XdsClientImpl.java
Patch:
@@ -332,12 +332,13 @@ public void run() {
         if (!subscriber.isWatched()) {
           subscriber.cancelResourceWatch();
           resourceSubscribers.get(type).remove(resourceName);
-          subscribedResourceTypeUrls.remove(type.typeUrl());
           if (subscriber.xdsChannel != null) {
             subscriber.xdsChannel.adjustResourceSubscription(type);
           }
           if (resourceSubscribers.get(type).isEmpty()) {
             resourceSubscribers.remove(type);
+            subscribedResourceTypeUrls.remove(type.typeUrl());
+
           }
         }
       }

File: alts/src/main/java/io/grpc/alts/AltsContextUtil.java
Patch:
@@ -26,7 +26,7 @@
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7864")
 public final class AltsContextUtil {
 
-  private AltsContextUtil(){}
+  private AltsContextUtil() {}
 
   /**
    * Creates a {@link AltsContext} from ALTS context information in the {@link ServerCall}.

File: alts/src/main/java/io/grpc/alts/internal/AltsTsiHandshaker.java
Patch:
@@ -169,7 +169,7 @@ public void getBytesToSendToPeer(ByteBuffer bytes) throws GeneralSecurityExcepti
   }
 
   /**
-   * Returns true if and only if the handshake is still in progress
+   * Returns true if and only if the handshake is still in progress.
    *
    * @return true, if the handshake is still in progress, false otherwise.
    */

File: alts/src/main/java/io/grpc/alts/internal/NettyTsiHandshaker.java
Patch:
@@ -99,7 +99,7 @@ boolean processBytesFromPeer(ByteBuf data) throws GeneralSecurityException {
   }
 
   /**
-   * Returns true if and only if the handshake is still in progress
+   * Returns true if and only if the handshake is still in progress.
    *
    * @return true, if the handshake is still in progress, false otherwise.
    */

File: alts/src/main/java/io/grpc/alts/internal/TsiHandshaker.java
Patch:
@@ -68,7 +68,7 @@ public interface TsiHandshaker {
   boolean processBytesFromPeer(ByteBuffer bytes) throws GeneralSecurityException;
 
   /**
-   * Returns true if and only if the handshake is still in progress
+   * Returns true if and only if the handshake is still in progress.
    *
    * @return true, if the handshake is still in progress, false otherwise.
    */

File: api/src/main/java/io/grpc/Metadata.java
Patch:
@@ -834,7 +834,7 @@ public String toString() {
     abstract T parseBytes(byte[] serialized);
 
     /**
-     * @return whether this key will be serialized to bytes lazily.
+     * Returns whether this key will be serialized to bytes lazily.
      */
     boolean serializesToStreams() {
       return false;

File: api/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -205,6 +205,8 @@ void onAddresses(
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1770")
   public abstract static class Listener2 implements Listener {
     /**
+     * Handles updates on resolved addresses and attributes.
+     *
      * @deprecated This will be removed in 1.22.0
      */
     @Override

File: api/src/main/java/io/grpc/Status.java
Patch:
@@ -599,6 +599,8 @@ private static boolean isEscapingChar(byte b) {
     }
 
     /**
+     * Percent encode bytes to make them ASCII.
+     *
      * @param valueBytes the UTF-8 bytes
      * @param ri The reader index, pointed at the first byte that needs escaping.
      */

File: authz/src/test/java/io/grpc/authz/AuthorizationEnd2EndTest.java
Patch:
@@ -35,7 +35,6 @@
 import io.grpc.testing.protobuf.SimpleRequest;
 import io.grpc.testing.protobuf.SimpleResponse;
 import io.grpc.testing.protobuf.SimpleServiceGrpc;
-
 import java.io.File;
 import org.junit.After;
 import org.junit.Test;

File: benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadWorkerTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.junit.runners.JUnit4;
 
 /**
- * Basic tests for {@link io.grpc.benchmarks.driver.LoadWorker}
+ * Basic tests for {@link io.grpc.benchmarks.driver.LoadWorker}.
  */
 @RunWith(JUnit4.class)
 public class LoadWorkerTest {

File: census/src/main/java/io/grpc/census/InternalCensusTracingAccessor.java
Patch:
@@ -40,8 +40,9 @@ public static ClientInterceptor getClientInterceptor() {
   }
 
   /**
-   * @param addMessageEvents add message events to Spans
+   * Returns the client interceptor that facilitates Census-based stats reporting.
    *
+   * @param addMessageEvents add message events to Spans
    * @return a {@link ClientInterceptor} with default tracing implementation.
    */
   public static ClientInterceptor getClientInterceptor(

File: context/src/main/java/io/grpc/Context.java
Patch:
@@ -1000,6 +1000,8 @@ public String toString() {
    */
   public abstract static class Storage {
     /**
+     * Unused.
+     *
      * @deprecated This is an old API that is no longer used.
      */
     @Deprecated
@@ -1029,7 +1031,7 @@ public Context doAttach(Context toAttach) {
     }
 
     /**
-     * Implements {@link io.grpc.Context#detach}
+     * Implements {@link io.grpc.Context#detach}.
      *
      * @param toDetach the context to be detached. Should be, or be equivalent to, the current
      *        context of the current scope

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -411,6 +411,7 @@ final int getPort() {
   }
 
   /**
+   * Parse TXT service config records as JSON.
    *
    * @throws IOException if one of the txt records contains improperly formatted JSON.
    */

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -650,7 +650,7 @@ public static String getHost(InetSocketAddress addr) {
   /**
    * Marshals a nanoseconds representation of the timeout to and from a string representation,
    * consisting of an ASCII decimal representation of a number with at most 8 digits, followed by a
-   * unit:
+   * unit. Available units:
    * n = nanoseconds
    * u = microseconds
    * m = milliseconds

File: core/src/main/java/io/grpc/internal/LogExceptionRunnable.java
Patch:
@@ -19,7 +19,6 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.base.Throwables;
-
 import java.util.logging.Level;
 import java.util.logging.Logger;
 

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -2287,7 +2287,7 @@ public <T> T invokeAny(Collection<? extends Callable<T>> tasks)
 
     @Override
     public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
-      throws InterruptedException, ExecutionException, TimeoutException {
+        throws InterruptedException, ExecutionException, TimeoutException {
       return delegate.invokeAny(tasks, timeout, unit);
     }
 

File: core/src/main/java/io/grpc/internal/ManagedChannelImplBuilder.java
Patch:
@@ -281,8 +281,8 @@ static String makeTargetStringForDirectAddress(SocketAddress address) {
   public ManagedChannelImplBuilder(SocketAddress directServerAddress, String authority,
       ClientTransportFactoryBuilder clientTransportFactoryBuilder,
       @Nullable ChannelBuilderDefaultPortProvider channelBuilderDefaultPortProvider) {
-      this(directServerAddress, authority, null, null, clientTransportFactoryBuilder,
-          channelBuilderDefaultPortProvider);
+    this(directServerAddress, authority, null, null, clientTransportFactoryBuilder,
+        channelBuilderDefaultPortProvider);
   }
 
   /**

File: core/src/main/java/io/grpc/internal/ProxyDetectorImpl.java
Patch:
@@ -150,6 +150,8 @@ public ProxySelector get() {
       };
 
   /**
+   * Experimental environment variable name for enabling proxy support.
+   *
    * @deprecated Use the standard Java proxy configuration instead with flags such as:
    *     -Dhttps.proxyHost=HOST -Dhttps.proxyPort=PORT
    */

File: core/src/main/java/io/grpc/internal/ServiceConfigState.java
Patch:
@@ -35,6 +35,8 @@ final class ServiceConfigState {
   private boolean updated;
 
   /**
+   * Construct new instance.
+   *
    * @param defaultServiceConfig The initial service config, or {@code null} if absent.
    * @param lookUpServiceConfig {@code true} if service config updates might occur.
    */

File: core/src/main/java/io/grpc/util/ForwardingLoadBalancerHelper.java
Patch:
@@ -22,10 +22,10 @@
 import io.grpc.ConnectivityState;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.ExperimentalApi;
+import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancer.CreateSubchannelArgs;
 import io.grpc.LoadBalancer.Subchannel;
 import io.grpc.LoadBalancer.SubchannelPicker;
-import io.grpc.LoadBalancer;
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.NameResolver;

File: core/src/main/java/io/grpc/util/MutableHandlerRegistry.java
Patch:
@@ -65,7 +65,7 @@ public ServerServiceDefinition addService(BindableService bindableService) {
   }
 
   /**
-   * Removes a registered service
+   * Removes a registered service.
    *
    * @return true if the service was found to be removed.
    */

File: core/src/test/java/io/grpc/internal/MessageDeframerTest.java
Patch:
@@ -495,6 +495,8 @@ public void sizeEnforcingInputStream_markReset() throws IOException {
   }
 
   /**
+   * Verify stats were published through the tracer.
+   *
    * @param transportStats the transport level stats counters
    * @param clock the fakeClock to verify timestamp
    * @param sizes in the format {wire0, uncompressed0, wire1, uncompressed1, ...}

File: core/src/test/java/io/grpc/internal/MessageFramerTest.java
Patch:
@@ -373,6 +373,8 @@ private static void writeKnownLength(MessageFramer framer, byte[] bytes) {
   }
 
   /**
+   * Verify stats were published through the tracer.
+   *
    * @param sizes in the format {wire0, uncompressed0, wire1, uncompressed1, ...}
    */
   private void checkStats(long... sizes) {

File: gcp-observability/src/main/java/io/grpc/gcp/observability/interceptors/InternalLoggingServerInterceptor.java
Patch:
@@ -28,7 +28,6 @@
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
 import io.grpc.Status;
-
 import io.grpc.gcp.observability.interceptors.ConfigFilterHelper.FilterParams;
 import io.grpc.observabilitylog.v1.GrpcLogRecord.EventLogger;
 import io.grpc.observabilitylog.v1.GrpcLogRecord.EventType;

File: gcp-observability/src/test/java/io/grpc/gcp/observability/ObservabilityConfigImplTest.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
-
 import java.util.Set;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;

File: netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java
Patch:
@@ -39,7 +39,6 @@
 import io.grpc.testing.protobuf.SimpleServiceGrpc;
 import io.grpc.testing.protobuf.SimpleServiceGrpc.SimpleServiceBlockingStub;
 import io.grpc.testing.protobuf.SimpleServiceGrpc.SimpleServiceImplBase;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;

File: netty/src/test/java/io/grpc/netty/AdvancedTlsTest.java
Patch:
@@ -40,7 +40,6 @@
 import io.grpc.util.AdvancedTlsX509TrustManager.SslSocketAndEnginePeerVerifier;
 import io.grpc.util.AdvancedTlsX509TrustManager.Verification;
 import io.grpc.util.CertificateUtils;
-
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -914,7 +914,7 @@ private void startGoAway(int lastKnownStreamId, ErrorCode errorCode, Status stat
   }
 
   /**
-   * Called when a stream is closed, we do things like:
+   * Called when a stream is closed. We do things like:
    * <ul>
    * <li>Removing the stream from the map.
    * <li>Optionally reporting the status.

File: services/src/main/java/io/grpc/protobuf/services/HealthServiceImpl.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.util.concurrent.MoreExecutors;
-import io.grpc.Context.CancellationListener;
 import io.grpc.Context;
+import io.grpc.Context.CancellationListener;
 import io.grpc.Status;
 import io.grpc.StatusException;
 import io.grpc.health.v1.HealthCheckRequest;

File: services/src/main/java/io/grpc/services/BinaryLogs.java
Patch:
@@ -22,6 +22,8 @@
 import java.io.IOException;
 
 /**
+ * Utility class to create BinaryLog instances.
+ *
  * @deprecated Use {@link io.grpc.protobuf.services.BinaryLogs} instead.
  */
 @Deprecated

File: services/src/test/java/io/grpc/protobuf/services/HealthStatusManagerTest.java
Patch:
@@ -20,8 +20,8 @@
 import static org.junit.Assert.fail;
 
 import io.grpc.BindableService;
-import io.grpc.Context.CancellableContext;
 import io.grpc.Context;
+import io.grpc.Context.CancellableContext;
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.health.v1.HealthCheckRequest;

File: stub/src/main/java/io/grpc/stub/AbstractAsyncStub.java
Patch:
@@ -35,7 +35,7 @@
 public abstract class AbstractAsyncStub<S extends AbstractAsyncStub<S>> extends AbstractStub<S> {
 
   protected AbstractAsyncStub(Channel channel, CallOptions callOptions) {
-      super(channel, callOptions);
+    super(channel, callOptions);
   }
 
   /**

File: stub/src/main/java/io/grpc/stub/annotations/RpcMethod.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * {@link RpcMethod} contains a limited subset of information about the RPC to assist
  * <a href="https://docs.oracle.com/javase/6/docs/api/javax/annotation/processing/Processor.html">
- * Java Annotation Processors.</a>
+ * Java Annotation Processors</a>.
  *
  * <p>
  *   This annotation is used by the gRPC stub compiler to annotate {@link MethodDescriptor}

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/FileWatcherCertificateProvider.java
Patch:
@@ -22,7 +22,6 @@
 import io.grpc.Status;
 import io.grpc.internal.TimeProvider;
 import io.grpc.xds.internal.security.trust.CertificateUtils;
-
 import java.io.ByteArrayInputStream;
 import java.nio.file.Files;
 import java.nio.file.Path;

File: xds/src/test/java/io/grpc/xds/FilterChainMatchingProtocolNegotiatorsTest.java
Patch:
@@ -64,7 +64,6 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicReference;
-
 import org.junit.After;
 import org.junit.Rule;
 import org.junit.Test;

File: xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java
Patch:
@@ -71,7 +71,6 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: xds/src/test/java/io/grpc/xds/internal/rbac/engine/GrpcAuthorizationEngineTest.java
Patch:
@@ -49,7 +49,6 @@
 import io.grpc.xds.internal.rbac.engine.GrpcAuthorizationEngine.PathMatcher;
 import io.grpc.xds.internal.rbac.engine.GrpcAuthorizationEngine.PolicyMatcher;
 import io.grpc.xds.internal.rbac.engine.GrpcAuthorizationEngine.SourceIpMatcher;
-
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.security.Principal;

File: xds/src/test/java/io/grpc/xds/XdsClientImplTestBase.java
Patch:
@@ -3535,8 +3535,10 @@ public void sendingToStoppedServer() throws Exception {
               .start());
       fakeClock.forwardTime(5, TimeUnit.SECONDS);
       DiscoveryRpcCall call = resourceDiscoveryCalls.poll(3, TimeUnit.SECONDS);
-      Thread.sleep(1); // For some reason the V2 test fails the verifyRequest without this
 
+      // NOTE:  There is a ScheduledExecutorService that may get involved due to the reconnect
+      // so you cannot rely on the logic being single threaded.  The timeout() in verifyRequest
+      // is therefore necessary to avoid flakiness.
       // Send a response and do verifications
       verify(ldsResourceWatcher, never()).onResourceDoesNotExist(LDS_RESOURCE);
       call.sendResponse(LDS, mf.buildWrappedResource(testListenerVhosts), VERSION_1, "0001");

File: xds/src/test/java/io/grpc/xds/XdsClientImplV2Test.java
Patch:
@@ -105,6 +105,7 @@
 import org.junit.runners.Parameterized.Parameters;
 import org.mockito.ArgumentMatcher;
 import org.mockito.InOrder;
+import org.mockito.Mockito;
 
 /**
  * Tests for {@link XdsClientImpl} with protocol version v2.
@@ -198,15 +199,15 @@ private DiscoveryRpcCallV2(StreamObserver<DiscoveryRequest> requestObserver,
     protected void verifyRequest(
         XdsResourceType<?> type, List<String> resources, String versionInfo, String nonce,
         EnvoyProtoData.Node node) {
-      verify(requestObserver).onNext(argThat(new DiscoveryRequestMatcher(
+      verify(requestObserver, Mockito.timeout(2000)).onNext(argThat(new DiscoveryRequestMatcher(
           node.toEnvoyProtoNodeV2(), versionInfo, resources, type.typeUrlV2(), nonce, null, null)));
     }
 
     @Override
     protected void verifyRequestNack(
         XdsResourceType<?> type, List<String> resources, String versionInfo, String nonce,
         EnvoyProtoData.Node node, List<String> errorMessages) {
-      verify(requestObserver).onNext(argThat(new DiscoveryRequestMatcher(
+      verify(requestObserver, Mockito.timeout(2000)).onNext(argThat(new DiscoveryRequestMatcher(
           node.toEnvoyProtoNodeV2(), versionInfo, resources, type.typeUrlV2(), nonce,
           Code.INVALID_ARGUMENT_VALUE, errorMessages)));
     }

File: xds/src/test/java/io/grpc/xds/XdsClientImplV3Test.java
Patch:
@@ -113,6 +113,7 @@
 import org.junit.runners.Parameterized.Parameters;
 import org.mockito.ArgumentMatcher;
 import org.mockito.InOrder;
+import org.mockito.Mockito;
 
 /**
  * Tests for {@link XdsClientImpl} with protocol version v3.
@@ -206,15 +207,15 @@ private DiscoveryRpcCallV3(StreamObserver<DiscoveryRequest> requestObserver,
     protected void verifyRequest(
         XdsResourceType<?> type, List<String> resources, String versionInfo, String nonce,
         EnvoyProtoData.Node node) {
-      verify(requestObserver).onNext(argThat(new DiscoveryRequestMatcher(
+      verify(requestObserver, Mockito.timeout(2000)).onNext(argThat(new DiscoveryRequestMatcher(
           node.toEnvoyProtoNode(), versionInfo, resources, type.typeUrl(), nonce, null, null)));
     }
 
     @Override
     protected void verifyRequestNack(
         XdsResourceType<?> type, List<String> resources, String versionInfo, String nonce,
         EnvoyProtoData.Node node, List<String> errorMessages) {
-      verify(requestObserver).onNext(argThat(new DiscoveryRequestMatcher(
+      verify(requestObserver, Mockito.timeout(2000)).onNext(argThat(new DiscoveryRequestMatcher(
           node.toEnvoyProtoNode(), versionInfo, resources, type.typeUrl(), nonce,
           Code.INVALID_ARGUMENT_VALUE, errorMessages)));
     }

File: xds/src/test/java/io/grpc/xds/XdsClientImplTestBase.java
Patch:
@@ -3516,7 +3516,7 @@ public void sendingToStoppedServer() throws Exception {
       // Establish the adsStream object
       xdsClient.watchXdsResource(XdsClusterResource.getInstance(), CDS_RESOURCE,
           cdsResourceWatcher);
-      resourceDiscoveryCalls.take(); // clear this entry
+      DiscoveryRpcCall unused = resourceDiscoveryCalls.take(); // clear this entry
 
       // Shutdown server and initiate a request
       xdsServer.shutdownNow();

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -786,7 +786,7 @@ public void deadlineExceededBeforeCallStarted() {
     verify(callListener, timeout(1000)).onClose(statusCaptor.capture(), any(Metadata.class));
     assertEquals(Status.Code.DEADLINE_EXCEEDED, statusCaptor.getValue().getCode());
     assertThat(statusCaptor.getValue().getDescription())
-        .startsWith("ClientCall started after deadline exceeded");
+        .startsWith("ClientCall started after CallOptions deadline was exceeded");
     verifyNoInteractions(clientStreamProvider);
   }
 

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1241,7 +1241,7 @@ public void deadlineInPast() throws Exception {
     } catch (StatusRuntimeException ex) {
       assertEquals(Status.Code.DEADLINE_EXCEEDED, ex.getStatus().getCode());
       assertThat(ex.getStatus().getDescription())
-        .startsWith("ClientCall started after deadline exceeded");
+        .startsWith("ClientCall started after CallOptions deadline was exceeded");
     }
 
     // CensusStreamTracerModule record final status in the interceptor, thus is guaranteed to be
@@ -1274,7 +1274,7 @@ public void deadlineInPast() throws Exception {
     } catch (StatusRuntimeException ex) {
       assertEquals(Status.Code.DEADLINE_EXCEEDED, ex.getStatus().getCode());
       assertThat(ex.getStatus().getDescription())
-        .startsWith("ClientCall started after deadline exceeded");
+        .startsWith("ClientCall started after CallOptions deadline was exceeded");
     }
     if (metricsExpected()) {
       MetricsRecord clientStartRecord = clientStatsRecorder.pollRecord(5, TimeUnit.SECONDS);

File: xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java
Patch:
@@ -1736,7 +1736,7 @@ public long nanoTime() {
     assertThat(testCall).isNull();
     verifyRpcDelayedThenAborted(observer, 4000L, Status.DEADLINE_EXCEEDED.withDescription(
         "Deadline exceeded after up to 5000 ns of fault-injected delay:"
-            + " Deadline exceeded after 0.000004000s. "));
+            + " Deadline CallOptions will be exceeded in 0.000004000s. "));
   }
 
   @Test

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1942,13 +1942,14 @@ private final class SubchannelImpl extends AbstractSubchannel {
     ScheduledHandle delayedShutdownTask;
 
     SubchannelImpl(CreateSubchannelArgs args, LbHelperImpl helper) {
+      checkNotNull(args, "args");
       addressGroups = args.getAddresses();
       if (authorityOverride != null) {
         List<EquivalentAddressGroup> eagsWithoutOverrideAttr =
             stripOverrideAuthorityAttributes(args.getAddresses());
         args = args.toBuilder().setAddresses(eagsWithoutOverrideAttr).build();
       }
-      this.args = checkNotNull(args, "args");
+      this.args = args;
       this.helper = checkNotNull(helper, "helper");
       subchannelLogId = InternalLogId.allocate("Subchannel", /*details=*/ authority());
       subchannelTracer = new ChannelTracer(

File: xds/src/main/java/io/grpc/xds/XdsClientImpl.java
Patch:
@@ -708,7 +708,6 @@ private void notifyWatcher(ResourceWatcher<T> watcher, T update) {
     }
   }
 
-  @VisibleForTesting
   static final class ResourceInvalidException extends Exception {
     private static final long serialVersionUID = 0L;
 

File: xds/src/main/java/io/grpc/xds/XdsRouteConfigureResource.java
Patch:
@@ -17,7 +17,6 @@
 package io.grpc.xds;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static io.grpc.xds.XdsRouteConfigureResource.RdsUpdate;
 
 import com.github.udpa.udpa.type.v1.TypedStruct;
 import com.google.common.annotations.VisibleForTesting;
@@ -50,6 +49,7 @@
 import io.grpc.xds.VirtualHost.Route.RouteMatch.PathMatcher;
 import io.grpc.xds.XdsClient.ResourceUpdate;
 import io.grpc.xds.XdsClientImpl.ResourceInvalidException;
+import io.grpc.xds.XdsRouteConfigureResource.RdsUpdate;
 import io.grpc.xds.internal.Matchers;
 import io.grpc.xds.internal.Matchers.FractionMatcher;
 import io.grpc.xds.internal.Matchers.HeaderMatcher;

File: rls/src/main/java/io/grpc/rls/RlsLoadBalancer.java
Patch:
@@ -49,7 +49,7 @@ final class RlsLoadBalancer extends LoadBalancer {
   }
 
   @Override
-  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
+  public boolean acceptResolvedAddresses(ResolvedAddresses resolvedAddresses) {
     logger.log(ChannelLogLevel.DEBUG, "Received resolution result: {0}", resolvedAddresses);
     LbPolicyConfiguration lbPolicyConfiguration =
         (LbPolicyConfiguration) resolvedAddresses.getLoadBalancingPolicyConfig();
@@ -78,6 +78,7 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
       //  not required.
       this.lbPolicyConfiguration = lbPolicyConfiguration;
     }
+    return true;
   }
 
   @Override

File: rls/src/test/java/io/grpc/rls/RlsLoadBalancerTest.java
Patch:
@@ -445,7 +445,7 @@ private void deliverResolvedAddresses() throws Exception {
     ConfigOrError parsedConfigOrError =
         provider.parseLoadBalancingPolicyConfig(getServiceConfig());
     assertThat(parsedConfigOrError.getConfig()).isNotNull();
-    rlsLb.handleResolvedAddresses(ResolvedAddresses.newBuilder()
+    rlsLb.acceptResolvedAddresses(ResolvedAddresses.newBuilder()
         .setAddresses(ImmutableList.of(new EquivalentAddressGroup(mock(SocketAddress.class))))
         .setLoadBalancingPolicyConfig(parsedConfigOrError.getConfig())
         .build());

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -262,7 +262,7 @@ void handleAddresses(
       List<EquivalentAddressGroup> newBackendServers) {
     logger.log(
         ChannelLogLevel.DEBUG,
-        "[grpclb-<{0}>] Resolved addresses: lb addresses {0}, backends: {1}",
+        "[grpclb-<{0}>] Resolved addresses: lb addresses {1}, backends: {2}",
         serviceName,
         newLbAddressGroups,
         newBackendServers);

File: xds/src/main/java/io/grpc/xds/XdsClient.java
Patch:
@@ -371,6 +371,6 @@ interface ResourceStore {
     Collection<String> getSubscribedResources(ServerInfo serverInfo,
                                               XdsResourceType<? extends ResourceUpdate> type);
 
-    Collection<XdsResourceType<? extends ResourceUpdate>> getXdsResourceTypes();
+    Map<String, XdsResourceType<?>> getSubscribedResourceTypesWithTypeUrl();
   }
 }

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -47,7 +47,6 @@
 import io.grpc.SynchronizationContext;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.ObjectPool;
-import io.grpc.xds.AbstractXdsClient.ResourceType;
 import io.grpc.xds.Bootstrapper.AuthorityInfo;
 import io.grpc.xds.Bootstrapper.BootstrapInfo;
 import io.grpc.xds.ClusterSpecifierPlugin.PluginConfig;
@@ -202,8 +201,9 @@ public void start(Listener2 listener) {
       replacement = XdsClient.percentEncodePath(replacement);
     }
     String ldsResourceName = expandPercentS(listenerNameTemplate, replacement);
-    if (!XdsClient.isResourceNameValid(ldsResourceName, ResourceType.LDS.typeUrl())
-        && !XdsClient.isResourceNameValid(ldsResourceName, ResourceType.LDS.typeUrlV2())) {
+    if (!XdsClient.isResourceNameValid(ldsResourceName, XdsListenerResource.getInstance().typeUrl())
+        && !XdsClient.isResourceNameValid(ldsResourceName,
+        XdsListenerResource.getInstance().typeUrlV2())) {
       listener.onError(Status.INVALID_ARGUMENT.withDescription(
           "invalid listener resource URI for service authority: " + serviceAuthority));
       return;

File: xds/src/main/java/io/grpc/xds/XdsResourceType.java
Patch:
@@ -17,7 +17,6 @@
 package io.grpc.xds;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static io.grpc.xds.AbstractXdsClient.ResourceType;
 import static io.grpc.xds.Bootstrapper.ServerInfo;
 import static io.grpc.xds.XdsClient.ResourceUpdate;
 import static io.grpc.xds.XdsClient.canonifyResourceName;
@@ -80,15 +79,15 @@ abstract class XdsResourceType<T extends ResourceUpdate> {
 
   abstract Class<? extends com.google.protobuf.Message> unpackedClassName();
 
-  abstract ResourceType typeName();
+  abstract String typeName();
 
   abstract String typeUrl();
 
   abstract String typeUrlV2();
 
   // Non-null for  State of the World resources.
   @Nullable
-  abstract ResourceType dependentResource();
+  abstract XdsResourceType<?> dependentResource();
 
   static class Args {
     final ServerInfo serverInfo;

File: xds/src/test/java/io/grpc/xds/CdsLoadBalancer2Test.java
Patch:
@@ -17,7 +17,6 @@
 package io.grpc.xds;
 
 import static com.google.common.truth.Truth.assertThat;
-import static io.grpc.xds.AbstractXdsClient.ResourceType.CDS;
 import static io.grpc.xds.XdsLbPolicies.CLUSTER_RESOLVER_POLICY_NAME;
 import static org.junit.Assert.fail;
 import static org.mockito.ArgumentMatchers.any;
@@ -657,7 +656,7 @@ private final class FakeXdsClient extends XdsClient {
     @SuppressWarnings("unchecked")
     <T extends ResourceUpdate> void watchXdsResource(XdsResourceType<T> type, String resourceName,
                           ResourceWatcher<T> watcher) {
-      assertThat(type.typeName()).isEqualTo(CDS);
+      assertThat(type.typeName()).isEqualTo("CDS");
       assertThat(watchers).doesNotContainKey(resourceName);
       watchers.put(resourceName, (ResourceWatcher<CdsUpdate>)watcher);
     }
@@ -667,7 +666,7 @@ <T extends ResourceUpdate> void watchXdsResource(XdsResourceType<T> type, String
     <T extends ResourceUpdate> void cancelXdsResourceWatch(XdsResourceType<T> type,
                                                            String resourceName,
                                                            ResourceWatcher<T> watcher) {
-      assertThat(type.typeName()).isEqualTo(CDS);
+      assertThat(type.typeName()).isEqualTo("CDS");
       assertThat(watchers).containsKey(resourceName);
       watchers.remove(resourceName);
     }

File: xds/src/test/java/io/grpc/xds/ClusterResolverLoadBalancerTest.java
Patch:
@@ -17,7 +17,6 @@
 package io.grpc.xds;
 
 import static com.google.common.truth.Truth.assertThat;
-import static io.grpc.xds.AbstractXdsClient.ResourceType.EDS;
 import static io.grpc.xds.XdsLbPolicies.CLUSTER_IMPL_POLICY_NAME;
 import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;
 import static io.grpc.xds.XdsLbPolicies.WEIGHTED_TARGET_POLICY_NAME;
@@ -1176,7 +1175,7 @@ private static final class FakeXdsClient extends XdsClient {
     @SuppressWarnings("unchecked")
     <T extends ResourceUpdate> void watchXdsResource(XdsResourceType<T> type, String resourceName,
                           ResourceWatcher<T> watcher) {
-      assertThat(type.typeName()).isEqualTo(EDS);
+      assertThat(type.typeName()).isEqualTo("EDS");
       assertThat(watchers).doesNotContainKey(resourceName);
       watchers.put(resourceName, (ResourceWatcher<EdsUpdate>) watcher);
     }
@@ -1186,7 +1185,7 @@ <T extends ResourceUpdate> void watchXdsResource(XdsResourceType<T> type, String
     <T extends ResourceUpdate> void cancelXdsResourceWatch(XdsResourceType<T> type,
                                                            String resourceName,
                                                            ResourceWatcher<T> watcher) {
-      assertThat(type.typeName()).isEqualTo(EDS);
+      assertThat(type.typeName()).isEqualTo("EDS");
       assertThat(watchers).containsKey(resourceName);
       watchers.remove(resourceName);
     }

File: xds/src/main/java/io/grpc/xds/internal/security/DynamicSslContextProvider.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.collect.ImmutableList;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
+import io.grpc.Internal;
 import io.grpc.Status;
 import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;
 import io.netty.handler.ssl.ApplicationProtocolConfig;
@@ -34,6 +35,7 @@
 import javax.annotation.Nullable;
 
 /** Base class for dynamic {@link SslContextProvider}s. */
+@Internal
 public abstract class DynamicSslContextProvider extends SslContextProvider {
 
   protected final List<Callback> pendingCallbacks = new ArrayList<>();

File: xds/src/main/java/io/grpc/xds/internal/security/SslContextProvider.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;
+import io.grpc.Internal;
 import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
@@ -39,6 +40,7 @@
  * stream that is receiving the requested secret(s) or it could represent file-system based
  * secret(s) that are dynamic.
  */
+@Internal
 public abstract class SslContextProvider implements Closeable {
 
   protected final BaseTlsContext tlsContext;

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertProviderSslContextProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import io.envoyproxy.envoy.config.core.v3.Node;
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertificateProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertificateProviderProvider.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import io.grpc.Internal;
-import io.grpc.xds.internal.certprovider.CertificateProvider.Watcher;
+import io.grpc.xds.internal.security.certprovider.CertificateProvider.Watcher;
 
 /**
  * Provider of {@link CertificateProvider}s. Implemented by the implementer of the plugin. We may

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertificateProviderRegistry.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/CertificateProviderStore.java
Patch:
@@ -14,12 +14,11 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import com.google.common.annotations.VisibleForTesting;
-import io.grpc.xds.internal.certprovider.CertificateProvider.Watcher;
 import io.grpc.xds.internal.security.ReferenceCountingMap;
-
+import io.grpc.xds.internal.security.certprovider.CertificateProvider.Watcher;
 import java.io.Closeable;
 import java.util.Objects;
 import java.util.logging.Level;

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/FileWatcherCertificateProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 

File: xds/src/main/java/io/grpc/xds/internal/security/certprovider/FileWatcherCertificateProviderProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;

File: xds/src/test/java/io/grpc/xds/internal/security/SecurityProtocolNegotiatorsTest.java
Patch:
@@ -51,9 +51,9 @@
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
 import io.grpc.xds.InternalXdsAttributes;
 import io.grpc.xds.TlsContextManager;
-import io.grpc.xds.internal.certprovider.CommonCertProviderTestUtils;
 import io.grpc.xds.internal.security.SecurityProtocolNegotiators.ClientSdsHandler;
 import io.grpc.xds.internal.security.SecurityProtocolNegotiators.ClientSdsProtocolNegotiator;
+import io.grpc.xds.internal.security.certprovider.CommonCertProviderTestUtils;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPipeline;

File: xds/src/test/java/io/grpc/xds/internal/security/certprovider/CertificateProviderStoreTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;

File: xds/src/test/java/io/grpc/xds/internal/security/certprovider/CommonCertProviderTestUtils.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import com.google.common.io.CharStreams;
 import io.grpc.internal.FakeClock;
 import io.grpc.internal.TimeProvider;
 import io.grpc.internal.testing.TestUtils;
-import io.grpc.xds.internal.certprovider.FileWatcherCertificateProviderProvider.ScheduledExecutorServiceFactory;
+import io.grpc.xds.internal.security.certprovider.FileWatcherCertificateProviderProvider.ScheduledExecutorServiceFactory;
 import io.grpc.xds.internal.security.trust.CertificateUtils;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: xds/src/test/java/io/grpc/xds/internal/security/certprovider/FileWatcherCertificateProviderProviderTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;

File: xds/src/test/java/io/grpc/xds/internal/security/certprovider/FileWatcherCertificateProviderTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 import static com.google.common.truth.Truth.assertThat;
 import static io.grpc.xds.internal.security.CommonTlsContextTestsUtil.CA_PEM_FILE;
@@ -34,8 +34,8 @@
 
 import io.grpc.Status;
 import io.grpc.internal.TimeProvider;
-import io.grpc.xds.internal.certprovider.CertificateProvider.DistributorWatcher;
 import io.grpc.xds.internal.security.CommonTlsContextTestsUtil;
+import io.grpc.xds.internal.security.certprovider.CertificateProvider.DistributorWatcher;
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;

File: xds/src/test/java/io/grpc/xds/internal/security/certprovider/TestCertificateProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.xds.internal.certprovider;
+package io.grpc.xds.internal.security.certprovider;
 
 public class TestCertificateProvider extends CertificateProvider {
   Object config;

File: xds/src/test/java/io/grpc/xds/ClientXdsClientV2Test.java
Patch:
@@ -463,7 +463,7 @@ protected Message buildAggregateCluster(String clusterName, String lbPolicy,
       ClusterConfig clusterConfig = ClusterConfig.newBuilder().addAllClusters(clusters).build();
       CustomClusterType type =
           CustomClusterType.newBuilder()
-              .setName(ClientXdsClient.AGGREGATE_CLUSTER_TYPE_NAME)
+              .setName(XdsResourceType.AGGREGATE_CLUSTER_TYPE_NAME)
               .setTypedConfig(Any.pack(clusterConfig))
               .build();
       Cluster.Builder builder = Cluster.newBuilder().setName(clusterName).setClusterType(type);

File: xds/src/test/java/io/grpc/xds/ClientXdsClientV3Test.java
Patch:
@@ -519,7 +519,7 @@ protected Message buildAggregateCluster(String clusterName, String lbPolicy,
       ClusterConfig clusterConfig = ClusterConfig.newBuilder().addAllClusters(clusters).build();
       CustomClusterType type =
           CustomClusterType.newBuilder()
-              .setName(ClientXdsClient.AGGREGATE_CLUSTER_TYPE_NAME)
+              .setName(XdsResourceType.AGGREGATE_CLUSTER_TYPE_NAME)
               .setTypedConfig(Any.pack(clusterConfig))
               .build();
       Cluster.Builder builder = Cluster.newBuilder().setName(clusterName).setClusterType(type);

File: xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java
Patch:
@@ -44,7 +44,7 @@
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
 import io.grpc.xds.FilterChainMatchingProtocolNegotiators.FilterChainMatchingHandler;
 import io.grpc.xds.FilterChainMatchingProtocolNegotiators.FilterChainMatchingHandler.FilterChainSelector;
-import io.grpc.xds.XdsClient.LdsUpdate;
+import io.grpc.xds.XdsListenerResource.LdsUpdate;
 import io.grpc.xds.XdsServerBuilder.XdsServingStatusListener;
 import io.grpc.xds.XdsServerTestHelper.FakeXdsClient;
 import io.grpc.xds.XdsServerTestHelper.FakeXdsClientPoolFactory;

File: xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java
Patch:
@@ -57,7 +57,7 @@
 import io.grpc.xds.VirtualHost.Route;
 import io.grpc.xds.VirtualHost.Route.RouteMatch;
 import io.grpc.xds.VirtualHost.Route.RouteMatch.PathMatcher;
-import io.grpc.xds.XdsClient.LdsUpdate;
+import io.grpc.xds.XdsListenerResource.LdsUpdate;
 import io.grpc.xds.XdsServerTestHelper.FakeXdsClient;
 import io.grpc.xds.XdsServerTestHelper.FakeXdsClientPoolFactory;
 import io.grpc.xds.internal.Matchers.HeaderMatcher;

File: okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java
Patch:
@@ -25,6 +25,8 @@
 import com.google.common.base.Preconditions;
 import io.grpc.okhttp.internal.framed.FrameWriter;
 import java.io.IOException;
+import java.util.Arrays;
+import java.util.Collections;
 import javax.annotation.Nullable;
 import okio.Buffer;
 
@@ -152,6 +154,7 @@ public StreamState createState(Stream stream, int streamId) {
    */
   public void writeStreams() {
     StreamState[] states = transport.getActiveStreams();
+    Collections.shuffle(Arrays.asList(states));
     int connectionWindow = connectionState.window();
     for (int numStreams = states.length; numStreams > 0 && connectionWindow > 0;) {
       int nextNumStreams = 0;

File: core/src/main/java/io/grpc/internal/MetadataApplierImpl.java
Patch:
@@ -82,7 +82,8 @@ public void apply(Metadata headers) {
   public void fail(Status status) {
     checkArgument(!status.isOk(), "Cannot fail with OK status");
     checkState(!finalized, "apply() or fail() already called");
-    finalizeWith(new FailingClientStream(status, tracers));
+    finalizeWith(
+        new FailingClientStream(GrpcUtil.replaceInappropriateControlPlaneStatus(status), tracers));
   }
 
   private void finalizeWith(ClientStream stream) {

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1199,7 +1199,8 @@ public void start(Listener<RespT> observer, Metadata headers) {
       InternalConfigSelector.Result result = configSelector.selectConfig(args);
       Status status = result.getStatus();
       if (!status.isOk()) {
-        executeCloseObserverInContext(observer, status);
+        executeCloseObserverInContext(observer,
+            GrpcUtil.replaceInappropriateControlPlaneStatus(status));
         delegate = (ClientCall<ReqT, RespT>) NOOP_CALL;
         return;
       }

File: binder/src/test/java/io/grpc/binder/SecurityPoliciesTest.java
Patch:
@@ -460,7 +460,7 @@ public void testIsProfileOwnerOnOrgOwned_failsForProfileOwnerOnNonOrgOwned() thr
 
     policy = SecurityPolicies.isProfileOwnerOnOrganizationOwnedDevice(appContext);
 
-    assertThat(policy.checkAuthorization(OTHER_UID).getCode()).isEqualTo(Status.OK.getCode());
+    assertThat(policy.checkAuthorization(OTHER_UID).getCode()).isEqualTo(Status.PERMISSION_DENIED.getCode());
   }
 
   @Test

File: core/src/main/java/io/grpc/internal/DelayedClientCall.java
Patch:
@@ -152,9 +152,9 @@ public final Runnable setCall(ClientCall<ReqT, RespT> call) {
       }
       setRealCall(checkNotNull(call, "call"));
     }
-    return new Runnable() {
+    return new ContextRunnable(context) {
       @Override
-      public void run() {
+      public void runInContext() {
         drainPendingCalls();
       }
     };

File: istio-interop-testing/src/test/java/io/grpc/testing/istio/EchoTestServerTest.java
Patch:
@@ -206,7 +206,7 @@ public void forwardEchoTest() throws IOException, InterruptedException {
         ForwardEchoRequest.newBuilder()
             .setCount(COUNT_OF_REQUESTS_TO_FORWARD)
             .setQps(100)
-            .setTimeoutMicros(2000_000L) // 2000 millis
+            .setTimeoutMicros(5000_000L) // 5000 millis
             .setUrl("grpc://localhost:" + port2)
             .addHeaders(
                 Header.newBuilder().setKey("test-key1").setValue("test-value1").build())

File: core/src/main/java/io/grpc/internal/MaxConnectionIdleManager.java
Patch:
@@ -20,13 +20,12 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
-
 import javax.annotation.CheckForNull;
 
 /**
  * Monitors connection idle time; shutdowns the connection if the max connection idle is reached.
  */
-public class MaxConnectionIdleManager {
+public final class MaxConnectionIdleManager {
   private static final Ticker systemTicker = new Ticker() {
     @Override
     public long nanoTime() {
@@ -61,7 +60,6 @@ public MaxConnectionIdleManager(long maxConnectionIdleInNanos, Ticker ticker) {
    * @param closeJob Closes the connection by sending GO_AWAY with status code NO_ERROR and ASCII
    *     debug data max_idle and then doing the graceful connection termination.
    */
-  @VisibleForTesting
   public void start(final Runnable closeJob, final ScheduledExecutorService scheduler) {
     this.scheduler = scheduler;
     nextIdleMonitorTime = ticker.nanoTime() + maxConnectionIdleInNanos;

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -169,7 +169,7 @@ final class ClientXdsClient extends XdsClient implements XdsResponseHandler, Res
           || Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_XDS_CUSTOM_LB_CONFIG"));
   @VisibleForTesting
   static boolean enableOutlierDetection =
-      !Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION"))
+      Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION"))
           || Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION"));
   private static final String TYPE_URL_HTTP_CONNECTION_MANAGER_V2 =
       "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2"

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -169,8 +169,8 @@ final class ClientXdsClient extends XdsClient implements XdsResponseHandler, Res
           || Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_XDS_CUSTOM_LB_CONFIG"));
   @VisibleForTesting
   static boolean enableOutlierDetection =
-      !Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_XDS_OUTLIER_DETECTION"))
-          || Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_XDS_OUTLIER_DETECTION"));
+      !Strings.isNullOrEmpty(System.getenv("GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION"))
+          || Boolean.parseBoolean(System.getenv("GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION"));
   private static final String TYPE_URL_HTTP_CONNECTION_MANAGER_V2 =
       "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2"
           + ".HttpConnectionManager";

File: interop-testing/src/main/java/io/grpc/testing/integration/RpcBehaviorLoadBalancerProvider.java
Patch:
@@ -38,7 +38,7 @@
  * looks for an "rpc_behavior" field in its configuration and includes the value in the
  * "rpc-behavior" metadata entry that is sent to the server. This will cause the test server to
  * behave in a predefined way. Endpoint picking logic is delegated to the
- * {@link RoundRobinLoadBalancer}.
+ * io.grpc.util.RoundRobinLoadBalancer.
  *
  * <p>Initial use case is to prove that a custom load balancer can be configured by the control
  * plane via xDS. An interop test will configure this LB and then verify it has been correctly

File: rls/src/main/java/io/grpc/rls/AdaptiveThrottler.java
Patch:
@@ -44,7 +44,7 @@ final class AdaptiveThrottler implements Throttler {
 
   private static final int DEFAULT_HISTORY_SECONDS = 30;
   private static final int DEFAULT_REQUEST_PADDING = 8;
-  private static final float DEFAULT_RATIO_FOR_ACCEPT = 1.2f;
+  private static final float DEFAULT_RATIO_FOR_ACCEPT = 2.0f;
 
   /**
    * The duration of history of calls used by Adaptive Throttler.

File: rls/src/main/java/io/grpc/rls/RlsRequestFactory.java
Patch:
@@ -52,8 +52,8 @@ private static Map<String, GrpcKeyBuilder> createKeyBuilderTable(
     Map<String, GrpcKeyBuilder> table = new HashMap<>();
     for (GrpcKeyBuilder grpcKeyBuilder : config.grpcKeybuilders()) {
       for (Name name : grpcKeyBuilder.names()) {
-        boolean hasMethod = name.method() == null || name.method().isEmpty();
-        String method = hasMethod ? "*" : name.method();
+        boolean noMethod = name.method() == null || name.method().isEmpty();
+        String method = noMethod ? "*" : name.method();
         String path = "/" + name.service() + "/" + method;
         table.put(path, grpcKeyBuilder);
       }

File: alts/src/main/java/io/grpc/alts/AltsContext.java
Patch:
@@ -20,7 +20,6 @@
 import io.grpc.alts.internal.AltsInternalContext;
 import io.grpc.alts.internal.HandshakerResult;
 import io.grpc.alts.internal.Identity;
-import io.grpc.alts.internal.SecurityLevel;
 
 /** {@code AltsContext} contains security-related information on the ALTS channel. */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7864")

File: alts/src/main/java/io/grpc/alts/internal/TsiHandshaker.java
Patch:
@@ -86,7 +86,7 @@ public interface TsiHandshaker {
    *
    * @return the extracted peer.
    */
-  public Object extractPeerObject() throws GeneralSecurityException;
+  Object extractPeerObject() throws GeneralSecurityException;
 
   /**
    * Creates a frame protector from a completed handshake. No other methods may be called after the

File: api/src/main/java/io/grpc/InternalMetadata.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.common.io.BaseEncoding;
 import io.grpc.Metadata.AsciiMarshaller;
 import io.grpc.Metadata.BinaryStreamMarshaller;
+import java.io.InputStream;
 import java.nio.charset.Charset;
 
 /**
@@ -100,7 +101,7 @@ public static Object[] serializePartial(Metadata md) {
   /**
    * Creates a holder for a pre-parsed value read by the transport.
    *
-   * @param marshaller The {@link Metadata#BinaryStreamMarshaller} associated with this value.
+   * @param marshaller The {@link Metadata.BinaryStreamMarshaller} associated with this value.
    * @param value The value to store.
    * @return an object holding the pre-parsed value for this key.
    */

File: api/src/main/java/io/grpc/Metadata.java
Patch:
@@ -211,8 +211,8 @@ private int len() {
     return size * 2;
   }
 
+  /** checks when {@link #namesAndValues} is null or has no elements. */
   private boolean isEmpty() {
-    /** checks when {@link #namesAndValues} is null or has no elements */
     return size == 0;
   }
 

File: census/src/main/java/io/grpc/census/CensusStatsModule.java
Patch:
@@ -188,7 +188,7 @@ private static final class ClientTracer extends ClientStreamTracer {
     @Nullable
     private static final AtomicLongFieldUpdater<ClientTracer> inboundUncompressedSizeUpdater;
 
-    /**
+    /*
      * When using Atomic*FieldUpdater, some Samsung Android 5.0.x devices encounter a bug in their
      * JDK reflection API that triggers a NoSuchFieldException. When this occurs, we fallback to
      * (potentially racy) direct updates of the volatile variables.
@@ -268,7 +268,7 @@ public void streamCreated(Attributes transportAttrs, Metadata headers) {
     }
 
     @Override
-    @SuppressWarnings("NonAtomicVolatileUpdate")
+    @SuppressWarnings({"NonAtomicVolatileUpdate", "NonAtomicOperationOnVolatileField"})
     public void outboundWireSize(long bytes) {
       if (outboundWireSizeUpdater != null) {
         outboundWireSizeUpdater.getAndAdd(this, bytes);
@@ -562,7 +562,7 @@ private static final class ServerTracer extends ServerStreamTracer {
     @Nullable
     private static final AtomicLongFieldUpdater<ServerTracer> inboundUncompressedSizeUpdater;
 
-    /**
+    /*
      * When using Atomic*FieldUpdater, some Samsung Android 5.0.x devices encounter a bug in their
      * JDK reflection API that triggers a NoSuchFieldException. When this occurs, we fallback to
      * (potentially racy) direct updates of the volatile variables.

File: census/src/main/java/io/grpc/census/CensusTracingModule.java
Patch:
@@ -65,7 +65,7 @@ final class CensusTracingModule {
 
   @Nullable private static final AtomicIntegerFieldUpdater<ServerTracer> streamClosedUpdater;
 
-  /**
+  /*
    * When using Atomic*FieldUpdater, some Samsung Android 5.0.x devices encounter a bug in their JDK
    * reflection API that triggers a NoSuchFieldException. When this occurs, we fallback to
    * (potentially racy) direct updates of the volatile variables.

File: core/src/main/java/io/grpc/internal/BackoffPolicy.java
Patch:
@@ -20,7 +20,7 @@
  * Determines how long to wait before doing some action (typically a retry, or a reconnect).
  */
 public interface BackoffPolicy {
-  public interface Provider {
+  interface Provider {
     BackoffPolicy get();
   }
 

File: core/src/main/java/io/grpc/internal/DelayedClientCall.java
Patch:
@@ -121,6 +121,7 @@ private ScheduledFuture<?> scheduleDeadlineIfNeeded(
     buf.append(seconds);
     buf.append(String.format(Locale.US, ".%09d", nanos));
     buf.append("s. ");
+
     /** Cancels the call if deadline exceeded prior to the real call being set. */
     class DeadlineExceededRunnable implements Runnable {
       @Override

File: core/src/main/java/io/grpc/internal/InternalServer.java
Patch:
@@ -50,7 +50,7 @@ public interface InternalServer {
   void shutdown();
 
   /**
-   * Returns the first listening socket address.  May change after {@link start(ServerListener)} is
+   * Returns the first listening socket address.  May change after {@link #start(ServerListener)} is
    * called.
    */
   SocketAddress getListenSocketAddress();
@@ -61,7 +61,7 @@ public interface InternalServer {
   @Nullable InternalInstrumented<SocketStats> getListenSocketStats();
 
   /**
-   * Returns a list of listening socket addresses.  May change after {@link start(ServerListener)}
+   * Returns a list of listening socket addresses.  May change after {@link #start(ServerListener)}
    * is called.
    */
   List<? extends SocketAddress> getListenSocketAddresses();

File: core/src/main/java/io/grpc/internal/PickFirstLoadBalancerProvider.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
+import io.grpc.NameResolver;
 import io.grpc.NameResolver.ConfigOrError;
 import java.util.Map;
 

File: core/src/main/java/io/grpc/internal/StreamListener.java
Patch:
@@ -59,6 +59,6 @@ interface MessageProducer {
      * messages until the producer returns null, at which point the producer may be discarded.
      */
     @Nullable
-    public InputStream next();
+    InputStream next();
   }
 }

File: core/src/main/java/io/grpc/util/AdvancedTlsX509KeyManager.java
Patch:
@@ -246,7 +246,8 @@ private UpdateResult readAndUpdate(File keyFile, File certFile, long oldKeyTime,
    * Mainly used to avoid throwing IO Exceptions in java.io.Closeable.
    */
   public interface Closeable extends java.io.Closeable {
-    @Override public void close();
+    @Override
+    void close();
   }
 }
 

File: core/src/main/java/io/grpc/util/AdvancedTlsX509TrustManager.java
Patch:
@@ -295,7 +295,8 @@ private long readAndUpdate(File trustCertFile, long oldTime)
 
   // Mainly used to avoid throwing IO Exceptions in java.io.Closeable.
   public interface Closeable extends java.io.Closeable {
-    @Override public void close();
+    @Override
+    void close();
   }
 
   public static Builder newBuilder() {

File: core/src/test/java/io/grpc/internal/ServiceConfigErrorHandlingTest.java
Patch:
@@ -236,7 +236,7 @@ public void cleanUp() {
   public void emptyAddresses_validConfig_firstResolution_lbNeedsAddress() throws Exception {
     FakeNameResolverFactory nameResolverFactory =
         new FakeNameResolverFactory.Builder(expectedUri)
-            .setServers(Collections.<EquivalentAddressGroup>emptyList())
+            .setServers(Collections.emptyList())
             .build();
     channelBuilder.nameResolverFactory(nameResolverFactory);
 
@@ -299,7 +299,7 @@ public void emptyAddresses_validConfig_2ndResolution_lbNeedsAddress() throws Exc
   public void emptyAddresses_validConfig_lbDoesNotNeedAddress() throws Exception {
     FakeNameResolverFactory nameResolverFactory =
         new FakeNameResolverFactory.Builder(expectedUri)
-            .setServers(Collections.<EquivalentAddressGroup>emptyList())
+            .setServers(Collections.emptyList())
             .build();
     channelBuilder.nameResolverFactory(nameResolverFactory);
     when(mockLoadBalancer.canHandleEmptyAddressListFromNameResolution()).thenReturn(true);
@@ -316,7 +316,7 @@ public void emptyAddresses_validConfig_lbDoesNotNeedAddress() throws Exception {
 
     ResolvedAddresses resolvedAddresses = resultCaptor.getValue();
     assertThat(resolvedAddresses.getAddresses()).isEmpty();
-    assertThat(resolvedAddresses.getLoadBalancingPolicyConfig()).isEqualTo("val");;
+    assertThat(resolvedAddresses.getLoadBalancingPolicyConfig()).isEqualTo("val");
 
     verify(mockLoadBalancer, never()).handleNameResolutionError(any(Status.class));
     assertThat(channel.getState(false)).isNotEqualTo(ConnectivityState.TRANSIENT_FAILURE);

File: gcp-observability/src/test/java/io/grpc/gcp/observability/GcpObservabilityTest.java
Patch:
@@ -223,7 +223,7 @@ public void run() {
       InternalLoggingChannelInterceptor.Factory channelInterceptorFactory =
           mock(InternalLoggingChannelInterceptor.Factory.class);
       InternalLoggingServerInterceptor.Factory serverInterceptorFactory =
-          mock(InternalLoggingServerInterceptor.Factory.class);;
+          mock(InternalLoggingServerInterceptor.Factory.class);
 
       try (GcpObservability unused =
           GcpObservability.grpcInit(

File: netty/src/main/java/io/grpc/netty/AbstractNettyHandler.java
Patch:
@@ -238,7 +238,7 @@ void setDataSizeAndSincePing(int dataSize) {
 
   /** Controls whether PINGs like those for BDP are permitted to be sent at the current time. */
   public interface PingLimiter {
-    public boolean isPingAllowed();
+    boolean isPingAllowed();
   }
 
   private static final class AllowPingLimiter implements PingLimiter {

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -251,7 +251,7 @@ public Runnable start(Listener transportListener) {
 
     ChannelHandler bufferingHandler = new WriteBufferingAndExceptionHandler(negotiationHandler);
 
-    /**
+    /*
      * We don't use a ChannelInitializer in the client bootstrap because its "initChannel" method
      * is executed in the event loop and we need this handler to be in the pipeline immediately so
      * that it may begin buffering writes.

File: netty/src/main/java/io/grpc/netty/WriteBufferingAndExceptionHandler.java
Patch:
@@ -184,7 +184,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) {
    */
   @Override
   public void flush(ChannelHandlerContext ctx) {
-    /**
+    /*
      * Swallowing any flushes is not only an optimization but also required
      * for the SslHandler to work correctly. If the SslHandler receives multiple
      * flushes while the handshake is still ongoing, then the handshake "randomly"

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -822,7 +822,7 @@ private void updateRoutes(List<VirtualHost> virtualHosts, long httpMaxStreamDura
           existingClusters == null ? clusters : Sets.difference(clusters, existingClusters);
       Set<String> deletedClusters =
           existingClusters == null
-              ? Collections.<String>emptySet() : Sets.difference(existingClusters, clusters);
+              ? Collections.emptySet() : Sets.difference(existingClusters, clusters);
       existingClusters = clusters;
       for (String cluster : addedClusters) {
         if (clusterRefs.containsKey(cluster)) {
@@ -982,7 +982,7 @@ private static class RoutingConfig {
     final Map<String, FilterConfig> virtualHostOverrideConfig;
 
     private static RoutingConfig empty = new RoutingConfig(
-        0L, Collections.<Route>emptyList(), null, Collections.<String, FilterConfig>emptyMap());
+        0, Collections.emptyList(), null, Collections.emptyMap());
 
     private RoutingConfig(
         long fallbackTimeoutNano, List<Route> routes, @Nullable List<NamedFilterConfig> filterChain,

File: xds/src/main/java/io/grpc/xds/internal/sds/Closeable.java
Patch:
@@ -19,5 +19,5 @@
 public interface Closeable extends java.io.Closeable {
 
   @Override
-  public void close();
+  void close();
 }

File: core/src/main/java/io/grpc/util/ForwardingLoadBalancerHelper.java
Patch:
@@ -95,6 +95,7 @@ public void refreshNameResolution() {
   }
 
   @Override
+  @Deprecated
   public void ignoreRefreshNameResolutionCheck() {
     delegate().ignoreRefreshNameResolutionCheck();
   }

File: xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java
Patch:
@@ -285,10 +285,8 @@ private void handleEndpointResolutionError() {
     private final class RefreshableHelper extends ForwardingLoadBalancerHelper {
       private final Helper delegate;
 
-      @SuppressWarnings("deprecation")
       private RefreshableHelper(Helper delegate) {
         this.delegate = checkNotNull(delegate, "delegate");
-        delegate.ignoreRefreshNameResolutionCheck();
       }
 
       @Override

File: xds/src/test/java/io/grpc/xds/ClusterResolverLoadBalancerTest.java
Patch:
@@ -679,7 +679,6 @@ public void onlyLogicalDnsCluster_handleRefreshNameResolution() {
     EquivalentAddressGroup endpoint2 = makeAddress("endpoint-addr-2");
     resolver.deliverEndpointAddresses(Arrays.asList(endpoint1, endpoint2));
     assertThat(resolver.refreshCount).isEqualTo(0);
-    verify(helper).ignoreRefreshNameResolutionCheck();
     FakeLoadBalancer childBalancer = Iterables.getOnlyElement(childBalancers);
     childBalancer.helper.refreshNameResolution();
     assertThat(resolver.refreshCount).isEqualTo(1);
@@ -745,7 +744,6 @@ public void onlyLogicalDnsCluster_refreshNameResolutionRaceWithResolutionError()
     FakeLoadBalancer childBalancer = Iterables.getOnlyElement(childBalancers);
     assertAddressesEqual(Collections.singletonList(endpoint), childBalancer.addresses);
     assertThat(resolver.refreshCount).isEqualTo(0);
-    verify(helper).ignoreRefreshNameResolutionCheck();
 
     childBalancer.helper.refreshNameResolution();
     assertThat(resolver.refreshCount).isEqualTo(1);

File: examples/example-orca/src/main/java/io/grpc/examples/orca/CustomBackendMetricsLoadBalancerProvider.java
Patch:
@@ -20,11 +20,11 @@
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
 import io.grpc.LoadBalancerRegistry;
+import io.grpc.services.MetricReport;
 import io.grpc.util.ForwardingLoadBalancer;
 import io.grpc.util.ForwardingLoadBalancerHelper;
 import io.grpc.xds.orca.OrcaOobUtil;
 import io.grpc.xds.orca.OrcaPerRequestUtil;
-import io.grpc.xds.shaded.com.github.xds.data.orca.v3.OrcaLoadReport;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -87,7 +87,7 @@ public LoadBalancer.Subchannel createSubchannel(LoadBalancer.CreateSubchannelArg
         // otherwise it is treated as server minimum report interval.
         OrcaOobUtil.setListener(subchannel, new OrcaOobUtil.OrcaOobReportListener() {
               @Override
-              public void onLoadReport(OrcaLoadReport orcaLoadReport) {
+              public void onLoadReport(MetricReport orcaLoadReport) {
                 System.out.println("Example load balancer received OOB metrics report:\n"
                     + orcaLoadReport);
               }
@@ -129,7 +129,7 @@ public LoadBalancer.PickResult pickSubchannel(LoadBalancer.PickSubchannelArgs ar
             OrcaPerRequestUtil.getInstance().newOrcaClientStreamTracerFactory(
                 new OrcaPerRequestUtil.OrcaPerRequestReportListener() {
                   @Override
-                  public void onLoadReport(OrcaLoadReport orcaLoadReport) {
+                  public void onLoadReport(MetricReport orcaLoadReport) {
                     System.out.println("Example load balancer received per-rpc metrics report:\n"
                         + orcaLoadReport);
                   }

File: xds/src/main/java/io/grpc/xds/ClusterManagerLoadBalancer.java
Patch:
@@ -264,14 +264,14 @@ public void updateBalancingState(final ConnectivityState newState,
           final SubchannelPicker newPicker) {
         // If we are already in the process of resolving addresses, the overall balancing state
         // will be updated at the end of it, and we don't need to trigger that update here.
-        if (resolvingAddresses || !childLbStates.containsKey(name)) {
+        if (!childLbStates.containsKey(name)) {
           return;
         }
         // Subchannel picker and state are saved, but will only be propagated to the channel
         // when the child instance exits deactivated state.
         currentState = newState;
         currentPicker = newPicker;
-        if (!deactivated) {
+        if (!deactivated && !resolvingAddresses) {
           updateOverallBalancingState();
         }
       }

File: core/src/main/java/io/grpc/internal/AbstractClientStream.java
Patch:
@@ -331,8 +331,7 @@ protected void inboundHeadersReceived(Metadata headers) {
           if (compressedStream) {
             deframeFailed(
                 Status.INTERNAL
-                    .withDescription(
-                        String.format("Full stream and gRPC message encoding cannot both be set"))
+                    .withDescription("Full stream and gRPC message encoding cannot both be set")
                     .asRuntimeException());
             return;
           }

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -358,12 +358,13 @@ private static void logIfContextNarrowedTimeout(
 
     long effectiveTimeout = max(0, effectiveDeadline.timeRemaining(TimeUnit.NANOSECONDS));
     StringBuilder builder = new StringBuilder(String.format(
+        Locale.US,
         "Call timeout set to '%d' ns, due to context deadline.", effectiveTimeout));
     if (callDeadline == null) {
       builder.append(" Explicit call timeout was not set.");
     } else {
       long callTimeout = callDeadline.timeRemaining(TimeUnit.NANOSECONDS);
-      builder.append(String.format(" Explicit call timeout was '%d' ns.", callTimeout));
+      builder.append(String.format(Locale.US, " Explicit call timeout was '%d' ns.", callTimeout));
     }
 
     log.fine(builder.toString());

File: core/src/main/java/io/grpc/internal/DelayedClientCall.java
Patch:
@@ -98,12 +98,14 @@ private ScheduledFuture<?> scheduleDeadlineIfNeeded(
         StringBuilder builder =
             new StringBuilder(
                 String.format(
+                    Locale.US,
                     "Call timeout set to '%d' ns, due to context deadline.", remainingNanos));
         if (deadline == null) {
           builder.append(" Explicit call timeout was not set.");
         } else {
           long callTimeout = deadline.timeRemaining(TimeUnit.NANOSECONDS);
-          builder.append(String.format(" Explicit call timeout was '%d' ns.", callTimeout));
+          builder.append(String.format(
+              Locale.US, " Explicit call timeout was '%d' ns.", callTimeout));
         }
         logger.fine(builder.toString());
       }

File: core/src/main/java/io/grpc/internal/ProxyDetectorImpl.java
Patch:
@@ -133,7 +133,7 @@ public PasswordAuthentication requestPasswordAuthentication(
         // let url be null
         log.log(
             Level.WARNING,
-            String.format("failed to create URL for Authenticator: %s %s", protocol, host));
+            "failed to create URL for Authenticator: {0} {1}", new Object[] {protocol, host});
       }
       // TODO(spencerfang): consider using java.security.AccessController here
       return Authenticator.requestPasswordAuthentication(

File: core/src/test/java/io/grpc/internal/MessageDeframerTest.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 import java.util.zip.GZIPOutputStream;
 import org.junit.Before;
@@ -507,7 +508,7 @@ private static void checkStats(
     for (int i = 0; i < count; i++) {
       assertEquals("inboundMessage(" + i + ")", tracer.nextInboundEvent());
       assertEquals(
-          String.format("inboundMessageRead(%d, %d, -1)", i, sizes[i * 2]),
+          String.format(Locale.US, "inboundMessageRead(%d, %d, -1)", i, sizes[i * 2]),
           tracer.nextInboundEvent());
       expectedWireSize += sizes[i * 2];
       expectedUncompressedSize += sizes[i * 2 + 1];

File: core/src/test/java/io/grpc/internal/MessageFramerTest.java
Patch:
@@ -34,6 +34,7 @@
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.Arrays;
+import java.util.Locale;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -382,7 +383,8 @@ private void checkStats(long... sizes) {
     for (int i = 0; i < count; i++) {
       assertEquals("outboundMessage(" + i + ")", tracer.nextOutboundEvent());
       assertEquals(
-          String.format("outboundMessageSent(%d, %d, %d)", i, sizes[i * 2], sizes[i * 2 + 1]),
+          String.format(
+              Locale.US, "outboundMessageSent(%d, %d, %d)", i, sizes[i * 2], sizes[i * 2 + 1]),
           tracer.nextOutboundEvent());
       expectedWireSize += sizes[i * 2];
       expectedUncompressedSize += sizes[i * 2 + 1];

File: gae-interop-testing/gae-jdk8/src/main/java/io/grpc/testing/integration/NettyClientInteropServlet.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
+import java.util.Locale;
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.logging.Handler;
@@ -102,13 +103,15 @@ private void doGetHelper(HttpServletResponse resp) throws IOException {
       resp.setStatus(200);
       writer.println(
           String.format(
+              Locale.US,
               "PASS! Tests ran %d, tests ignored %d",
               result.getRunCount(),
               result.getIgnoreCount()));
     } else {
       resp.setStatus(500);
       writer.println(
           String.format(
+              Locale.US,
               "FAILED! Tests ran %d, tests failed %d, tests ignored %d",
               result.getRunCount(),
               result.getFailureCount(),

File: interop-testing/src/main/java/io/grpc/testing/integration/StressTestClient.java
Patch:
@@ -54,6 +54,7 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Level;
@@ -231,8 +232,8 @@ void runStressTest() throws Exception {
         ManagedChannel channel = createChannel(address);
         channels.add(channel);
         for (int j = 0; j < stubsPerChannel; j++) {
-          String gaugeName =
-              String.format("/stress_test/server_%d/channel_%d/stub_%d/qps", serverIdx, i, j);
+          String gaugeName = String.format(
+              Locale.US, "/stress_test/server_%d/channel_%d/stub_%d/qps", serverIdx, i, j);
           Worker worker =
               new Worker(channel, testCaseWeightPairs, durationSecs, gaugeName);
 

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/Headers.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 
 /**
  * The header fields of a single HTTP message. Values are uninterpreted strings;
@@ -132,6 +133,7 @@ private void checkNameAndValue(String name, String value) {
         char c = name.charAt(i);
         if (c <= '\u001f' || c >= '\u007f') {
           throw new IllegalArgumentException(String.format(
+              Locale.US,
               "Unexpected char %#04x at %d in header name: %s", (int) c, i, name));
         }
       }
@@ -140,6 +142,7 @@ private void checkNameAndValue(String name, String value) {
         char c = value.charAt(i);
         if (c <= '\u001f' || c >= '\u007f') {
           throw new IllegalArgumentException(String.format(
+              Locale.US,
               "Unexpected char %#04x at %d in header value: %s", (int) c, i, value));
         }
       }

File: testing/src/main/java/io/grpc/internal/testing/TestStreamTracer.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.grpc.Status;
 import io.grpc.StreamTracer;
+import java.util.Locale;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
@@ -180,6 +181,7 @@ public void outboundMessageSent(
         int seqNo, long optionalWireSize, long optionalUncompressedSize) {
       outboundEvents.add(
           String.format(
+              Locale.US,
               "outboundMessageSent(%d, %d, %d)",
               seqNo, optionalWireSize, optionalUncompressedSize));
     }
@@ -189,6 +191,7 @@ public void inboundMessageRead(
         int seqNo, long optionalWireSize, long optionalUncompressedSize) {
       inboundEvents.add(
           String.format(
+              Locale.US,
               "inboundMessageRead(%d, %d, %d)", seqNo, optionalWireSize, optionalUncompressedSize));
     }
 

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -1795,8 +1795,8 @@ private static StructOrError<CdsUpdate.Builder> parseNonAggregateCluster(
             "Cluster " + clusterName
                 + ": LOGICAL DNS clusters socket_address must have port_value");
       }
-      String dnsHostName =
-          String.format("%s:%d", socketAddress.getAddress(), socketAddress.getPortValue());
+      String dnsHostName = String.format(
+          Locale.US, "%s:%d", socketAddress.getAddress(), socketAddress.getPortValue());
       return StructOrError.fromStruct(CdsUpdate.forLogicalDns(
           clusterName, dnsHostName, lrsServerInfo, maxConcurrentRequests, upstreamTlsContext));
     }

File: xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java
Patch:
@@ -60,6 +60,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -470,7 +471,7 @@ private List<String> generatePriorityNames(String name,
             }
           }
           if ("".equals(foundName)) {
-            foundName = String.format("%s[child%d]", name, priorityNameGenId++);
+            foundName = String.format(Locale.US, "%s[child%d]", name, priorityNameGenId++);
           }
           for (Locality locality : todo.get(priority)) {
             newNames.put(locality, foundName);

File: xds/src/main/java/io/grpc/xds/FaultFilter.java
Patch:
@@ -48,6 +48,7 @@
 import io.grpc.xds.FaultConfig.FaultDelay;
 import io.grpc.xds.Filter.ClientInterceptorBuilder;
 import io.grpc.xds.ThreadSafeRandom.ThreadSafeRandomImpl;
+import java.util.Locale;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
@@ -255,6 +256,7 @@ public void onClose(Status status, Metadata trailers) {
                         //   only sent out after the delay. There could be a race between local and
                         //   remote, but it is rather rare.)
                         String description = String.format(
+                            Locale.US,
                             "Deadline exceeded after up to %d ns of fault-injected delay",
                             finalDelayNanos);
                         if (status.getDescription() != null) {

File: xds/src/test/java/io/grpc/xds/RingHashLoadBalancerProviderTest.java
Patch:
@@ -31,6 +31,7 @@
 import io.grpc.xds.RingHashLoadBalancer.RingHashConfig;
 import java.io.IOException;
 import java.lang.Thread.UncaughtExceptionHandler;
+import java.util.Locale;
 import java.util.Map;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -117,7 +118,8 @@ public void parseLoadBalancingConfig_invalid_minGreaterThanMax() throws IOExcept
   @Test
   public void parseLoadBalancingConfig_invalid_ringTooLarge() throws IOException {
     long ringSize = RingHashLoadBalancerProvider.MAX_RING_SIZE + 1;
-    String lbConfig = String.format("{\"minRingSize\" : 10, \"maxRingSize\" : %d}", ringSize);
+    String lbConfig =
+        String.format(Locale.US, "{\"minRingSize\" : 10, \"maxRingSize\" : %d}", ringSize);
     ConfigOrError configOrError =
         provider.parseLoadBalancingPolicyConfig(parseJsonObject(lbConfig));
     assertThat(configOrError.getError()).isNotNull();

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -2054,12 +2054,12 @@ public void performSoakTest(
             .withInterceptors(recordClientCallInterceptor(clientCallCapture));
       }
       SoakIterationResult result = performOneSoakIteration(soakStub);
-      String peer = clientCallCapture
-          .get().getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR).toString();
+      SocketAddress peer = clientCallCapture
+          .get().getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR);
       System.err.print(
           String.format(
               "soak iteration: %d elapsed_ms: %d peer: %s",
-              i, result.getLatencyMs(), peer));
+              i, result.getLatencyMs(), peer != null ? peer.toString() : "null"));
       if (!result.getStatus().equals(Status.OK)) {
         totalFailures++;
         System.err.println(String.format(" failed: %s", result.getStatus()));

File: services/src/main/java/io/grpc/services/CallMetricRecorder.java
Patch:
@@ -53,7 +53,8 @@ public static final class CallMetricReport {
     private Map<String, Double> utilizationMetrics;
 
     /**
-     * Create a report for all backend metrics.
+     * A gRPC object of orca load report. LB policies listening at per-rpc or oob orca load reports
+     * will be notified of the metrics data in this data format.
      */
     CallMetricReport(double cpuUtilization, double memoryUtilization,
                             Map<String, Double> requestCostMetrics,

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpServerTransport.java
Patch:
@@ -45,6 +45,7 @@
 import java.io.IOException;
 import java.net.Socket;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.TreeMap;
 import java.util.concurrent.Executor;
@@ -552,6 +553,7 @@ public void headers(boolean outFinished,
       if (metadataSize > config.maxInboundMetadataSize) {
         respondWithHttpError(streamId, inFinished, 431, Status.Code.RESOURCE_EXHAUSTED,
             String.format(
+                Locale.US,
                 "Request metadata larger than %d: %d",
                 config.maxInboundMetadataSize,
                 metadataSize));

File: core/src/main/java/io/grpc/internal/AbstractServerStream.java
Patch:
@@ -224,8 +224,8 @@ public final void onStreamAllocated() {
     @Override
     public void deframerClosed(boolean hasPartialMessage) {
       deframerClosed = true;
-      if (endOfStream) {
-        if (!immediateCloseRequested && hasPartialMessage) {
+      if (endOfStream && !immediateCloseRequested) {
+        if (hasPartialMessage) {
           // We've received the entire stream and have data available but we don't have
           // enough to read the next frame ... this is bad.
           deframeFailed(

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancerProvider.java
Patch:
@@ -124,7 +124,7 @@ ConfigOrError parseLoadBalancingConfigPolicyInternal(
     }
     return ConfigOrError.fromError(
         Status
-            .INVALID_ARGUMENT
+            .UNAVAILABLE
             .withDescription(
                 "None of " + policiesTried + " specified child policies are available."));
   }

File: interop-testing/src/main/java/io/grpc/testing/integration/RpcBehaviorLoadBalancerProvider.java
Patch:
@@ -54,7 +54,7 @@ public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawLoadBalanc
     String rpcBehavior = JsonUtil.getString(rawLoadBalancingPolicyConfig, "rpcBehavior");
     if (rpcBehavior == null) {
       return ConfigOrError.fromError(
-          Status.INVALID_ARGUMENT.withDescription("no 'rpcBehavior' defined"));
+          Status.UNAVAILABLE.withDescription("no 'rpcBehavior' defined"));
     }
     return ConfigOrError.fromConfig(new RpcBehaviorConfig(rpcBehavior));
   }

File: rls/src/main/java/io/grpc/rls/RlsLoadBalancerProvider.java
Patch:
@@ -73,7 +73,7 @@ public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawLoadBalanc
           new LbPolicyConfiguration(routeLookupConfig, routeLookupChannelServiceConfig, lbPolicy));
     } catch (Exception e) {
       return ConfigOrError.fromError(
-          Status.INVALID_ARGUMENT
+          Status.UNAVAILABLE
               .withDescription("can't parse config: " + e.getMessage())
               .withCause(e));
     }

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancer2.java
Patch:
@@ -192,7 +192,7 @@ private void handleClusterDiscovered() {
           root.result.lbPolicyConfig());
       LoadBalancerProvider lbProvider = lbRegistry.getProvider(unwrappedLbConfig.getPolicyName());
       if (lbProvider == null) {
-        throw NameResolver.ConfigOrError.fromError(Status.INVALID_ARGUMENT.withDescription(
+        throw NameResolver.ConfigOrError.fromError(Status.UNAVAILABLE.withDescription(
                 "No provider available for LB: " + unwrappedLbConfig.getPolicyName())).getError()
             .asRuntimeException();
       }

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancerProvider.java
Patch:
@@ -75,7 +75,7 @@ static ConfigOrError parseLoadBalancingConfigPolicy(Map<String, ?> rawLoadBalanc
       return ConfigOrError.fromConfig(new CdsConfig(cluster));
     } catch (RuntimeException e) {
       return ConfigOrError.fromError(
-          Status.fromThrowable(e).withDescription(
+          Status.UNAVAILABLE.withCause(e).withDescription(
               "Failed to parse CDS LB config: " + rawLoadBalancingPolicyConfig));
     }
   }

File: xds/src/main/java/io/grpc/xds/ClusterManagerLoadBalancerProvider.java
Patch:
@@ -110,7 +110,7 @@ public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawConfig) {
       }
     } catch (RuntimeException e) {
       return ConfigOrError.fromError(
-          Status.fromThrowable(e).withDescription(
+          Status.INTERNAL.withCause(e).withDescription(
               "Failed to parse cluster_manager LB config: " + rawConfig));
     }
     return ConfigOrError.fromConfig(new ClusterManagerConfig(parsedChildPolicies));

File: xds/src/main/java/io/grpc/xds/LeastRequestLoadBalancerProvider.java
Patch:
@@ -67,13 +67,13 @@ public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawConfig) {
         choiceCount = DEFAULT_CHOICE_COUNT;
       }
       if (choiceCount < MIN_CHOICE_COUNT) {
-        return ConfigOrError.fromError(Status.INVALID_ARGUMENT.withDescription(
-            "Invalid 'choiceCount'"));
+        return ConfigOrError.fromError(Status.UNAVAILABLE.withDescription(
+            "Invalid 'choiceCount' in least_request_experimental config"));
       }
       return ConfigOrError.fromConfig(new LeastRequestConfig(choiceCount));
     } catch (RuntimeException e) {
       return ConfigOrError.fromError(
-          Status.fromThrowable(e).withDescription(
+          Status.UNAVAILABLE.withCause(e).withDescription(
               "Failed to parse least_request_experimental LB config: " + rawConfig));
     }
   }

File: xds/src/main/java/io/grpc/xds/RingHashLoadBalancerProvider.java
Patch:
@@ -81,7 +81,7 @@ public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawLoadBalanc
     }
     if (minRingSize <= 0 || maxRingSize <= 0 || minRingSize > maxRingSize
         || maxRingSize > MAX_RING_SIZE) {
-      return ConfigOrError.fromError(Status.INVALID_ARGUMENT.withDescription(
+      return ConfigOrError.fromError(Status.UNAVAILABLE.withDescription(
           "Invalid 'mingRingSize'/'maxRingSize'"));
     }
     return ConfigOrError.fromConfig(new RingHashConfig(minRingSize, maxRingSize));

File: xds/src/main/java/io/grpc/xds/WeightedTargetLoadBalancerProvider.java
Patch:
@@ -117,7 +117,7 @@ public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawConfig) {
       return ConfigOrError.fromConfig(new WeightedTargetConfig(parsedChildConfigs));
     } catch (RuntimeException e) {
       return ConfigOrError.fromError(
-          Status.fromThrowable(e).withDescription(
+          Status.INTERNAL.withCause(e).withDescription(
               "Failed to parse weighted_target LB config: " + rawConfig));
     }
   }

File: xds/src/main/java/io/grpc/xds/WrrLocalityLoadBalancerProvider.java
Patch:
@@ -78,7 +78,7 @@ public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawConfig) {
       PolicySelection policySelection = (PolicySelection) selectedConfig.getConfig();
       return ConfigOrError.fromConfig(new WrrLocalityConfig(policySelection));
     } catch (RuntimeException e) {
-      return ConfigOrError.fromError(Status.fromThrowable(e)
+      return ConfigOrError.fromError(Status.INTERNAL.withCause(e)
           .withDescription("Failed to parse wrr_locality LB config: " + rawConfig));
     }
   }

File: xds/src/test/java/io/grpc/xds/MetadataLoadBalancerProvider.java
Patch:
@@ -45,13 +45,13 @@ public NameResolver.ConfigOrError parseLoadBalancingPolicyConfig(
     String metadataKey = JsonUtil.getString(rawLoadBalancingPolicyConfig, "metadataKey");
     if (metadataKey == null) {
       return NameResolver.ConfigOrError.fromError(
-          Status.INVALID_ARGUMENT.withDescription("no 'metadataKey' defined"));
+          Status.UNAVAILABLE.withDescription("no 'metadataKey' defined"));
     }
 
     String metadataValue = JsonUtil.getString(rawLoadBalancingPolicyConfig, "metadataValue");
     if (metadataValue == null) {
       return NameResolver.ConfigOrError.fromError(
-          Status.INVALID_ARGUMENT.withDescription("no 'metadataValue' defined"));
+          Status.UNAVAILABLE.withDescription("no 'metadataValue' defined"));
     }
 
     return NameResolver.ConfigOrError.fromConfig(

File: okhttp/src/main/java/io/grpc/okhttp/AsyncSink.java
Patch:
@@ -208,7 +208,7 @@ public void close() {
       @Override
       public void run() {
         try {
-          if (buffer.size() > 0) {
+          if (sink != null && buffer.size() > 0) {
             sink.write(buffer, buffer.size());
           }
         } catch (IOException e) {

File: examples/src/test/java/io/grpc/examples/helloworld/HelloWorldClientTest.java
Patch:
@@ -40,8 +40,6 @@
  * Not intended to provide a high code coverage or to test every major usecase.
  *
  * directExecutor() makes it easier to have deterministic tests.
- * However, if your implementation uses another thread and uses streaming it is better to use
- * the default executor, to avoid hitting bug #3084.
  *
  * <p>For more unit test examples see {@link io.grpc.examples.routeguide.RouteGuideClientTest} and
  * {@link io.grpc.examples.routeguide.RouteGuideServerTest}.

File: examples/src/test/java/io/grpc/examples/helloworld/HelloWorldServerTest.java
Patch:
@@ -33,8 +33,6 @@
  * Not intended to provide a high code coverage or to test every major usecase.
  *
  * directExecutor() makes it easier to have deterministic tests.
- * However, if your implementation uses another thread and uses streaming it is better to use
- * the default executor, to avoid hitting bug #3084.
  *
  * <p>For more unit test examples see {@link io.grpc.examples.routeguide.RouteGuideClientTest} and
  * {@link io.grpc.examples.routeguide.RouteGuideServerTest}.

File: examples/src/test/java/io/grpc/examples/routeguide/RouteGuideClientTest.java
Patch:
@@ -53,8 +53,6 @@
  * Not intended to provide a high code coverage or to test every major usecase.
  *
  * directExecutor() makes it easier to have deterministic tests.
- * However, if your implementation uses another thread and uses streaming it is better to use
- * the default executor, to avoid hitting bug #3084.
  *
  * <p>For basic unit test examples see {@link io.grpc.examples.helloworld.HelloWorldClientTest} and
  * {@link io.grpc.examples.helloworld.HelloWorldServerTest}.

File: examples/src/test/java/io/grpc/examples/routeguide/RouteGuideServerTest.java
Patch:
@@ -50,8 +50,6 @@
  * Not intended to provide a high code coverage or to test every major usecase.
  *
  * directExecutor() makes it easier to have deterministic tests.
- * However, if your implementation uses another thread and uses streaming it is better to use
- * the default executor, to avoid hitting bug #3084.
  *
  * <p>For basic unit test examples see {@link io.grpc.examples.helloworld.HelloWorldClientTest} and
  * {@link io.grpc.examples.helloworld.HelloWorldServerTest}.

File: stub/src/main/java/io/grpc/stub/ClientResponseObserver.java
Patch:
@@ -22,7 +22,7 @@
  */
 public interface ClientResponseObserver<ReqT, RespT> extends StreamObserver<RespT> {
   /**
-   * Called by the runtime priot to the start of a call to provide a reference to the
+   * Called by the runtime prior to the start of a call to provide a reference to the
    * {@link ClientCallStreamObserver} for the outbound stream. This can be used to listen to
    * onReady events, disable auto inbound flow and perform other advanced functions.
    *

File: xds/src/main/java/io/grpc/xds/XdsServerWrapper.java
Patch:
@@ -329,6 +329,8 @@ private void startDelegateServer() {
       if (!initialStarted) {
         initialStarted = true;
         initialStartFuture.set(e);
+      } else {
+        listener.onNotServing(e);
       }
       restartTimer = syncContext.schedule(
         new RestartTask(), RETRY_DELAY_NANOS, TimeUnit.NANOSECONDS, timeService);

File: api/src/test/java/io/grpc/GlobalInterceptorsTest.java
Patch:
@@ -24,7 +24,10 @@
 import java.util.List;
 import java.util.regex.Pattern;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
+@RunWith(JUnit4.class)
 public class GlobalInterceptorsTest {
 
   private final StaticTestingClassLoader classLoader =

File: xds/src/main/java/io/grpc/xds/RingHashLoadBalancer.java
Patch:
@@ -175,6 +175,7 @@ private static List<RingEntry> buildRing(
       // TODO(chengyuanzhang): is using the list of socket address correct?
       StringBuilder sb = new StringBuilder(addrKey.getAddresses().toString());
       sb.append('_');
+      int lengthWithoutCounter = sb.length();
       targetHashes += scale * normalizedWeight;
       long i = 0L;
       while (currentHashes < targetHashes) {
@@ -183,7 +184,7 @@ private static List<RingEntry> buildRing(
         ring.add(new RingEntry(hash, addrKey));
         i++;
         currentHashes++;
-        sb.setLength(sb.length() - 1);
+        sb.setLength(lengthWithoutCounter);
       }
     }
     Collections.sort(ring);

File: api/src/main/java/io/grpc/Attributes.java
Patch:
@@ -110,7 +110,8 @@ public Builder toBuilder() {
   }
 
   /**
-   * Key for an key-value pair.
+   * Key for an key-value pair. Uses reference equality.
+   *
    * @param <T> type of the value in the key-value pair
    */
   @Immutable

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1750,7 +1750,7 @@ public void testOrcaPerRpc() throws Exception {
         .putUtilization("util", 0.30499)
         .build();
     blockingStub.withOption(ORCA_RPC_REPORT_KEY, reportHolder).unaryCall(
-        SimpleRequest.newBuilder().setOrcaPerRpcReport(answer).build());
+        SimpleRequest.newBuilder().setOrcaPerQueryReport(answer).build());
     assertThat(reportHolder.get()).isEqualTo(answer);
   }
 

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -123,7 +123,7 @@ public void unaryCall(SimpleRequest req, StreamObserver<SimpleResponse> response
       return;
     }
 
-    echoCallMetricsFromPayload(req.getOrcaPerRpcReport());
+    echoCallMetricsFromPayload(req.getOrcaPerQueryReport());
     echoMetricsFromPayload(req.getOrcaOobReport());
     responseObserver.onNext(responseBuilder.build());
     responseObserver.onCompleted();

File: alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java
Patch:
@@ -58,10 +58,11 @@ public final class AltsProtocolNegotiator {
   private static final AsyncSemaphore handshakeSemaphore = new AsyncSemaphore(32);
 
   @Grpc.TransportAttr
-  public static final Attributes.Key<TsiPeer> TSI_PEER_KEY = Attributes.Key.create("TSI_PEER");
+  public static final Attributes.Key<TsiPeer> TSI_PEER_KEY =
+      Attributes.Key.create("internal:TSI_PEER");
   @Grpc.TransportAttr
   public static final Attributes.Key<Object> AUTH_CONTEXT_KEY =
-      Attributes.Key.create("AUTH_CONTEXT_KEY");
+      Attributes.Key.create("internal:AUTH_CONTEXT_KEY");
 
   private static final AsciiString SCHEME = AsciiString.of("https");
 

File: api/src/main/java/io/grpc/EquivalentAddressGroup.java
Patch:
@@ -44,7 +44,7 @@ public final class EquivalentAddressGroup {
   @Attr
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/6138")
   public static final Attributes.Key<String> ATTR_AUTHORITY_OVERRIDE =
-      Attributes.Key.create("io.grpc.EquivalentAddressGroup.authorityOverride");
+      Attributes.Key.create("io.grpc.EquivalentAddressGroup.ATTR_AUTHORITY_OVERRIDE");
   private final List<SocketAddress> addrs;
   private final Attributes attrs;
 

File: api/src/main/java/io/grpc/Grpc.java
Patch:
@@ -38,23 +38,23 @@ private Grpc() {
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1710")
   @TransportAttr
   public static final Attributes.Key<SocketAddress> TRANSPORT_ATTR_REMOTE_ADDR =
-      Attributes.Key.create("remote-addr");
+      Attributes.Key.create("io.grpc.Grpc.TRANSPORT_ATTR_REMOTE_ADDR");
 
   /**
    * Attribute key for the local address of a transport.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1710")
   @TransportAttr
   public static final Attributes.Key<SocketAddress> TRANSPORT_ATTR_LOCAL_ADDR =
-      Attributes.Key.create("local-addr");
+      Attributes.Key.create("io.grpc.Grpc.TRANSPORT_ATTR_LOCAL_ADDR");
 
   /**
    * Attribute key for SSL session of a transport.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1710")
   @TransportAttr
   public static final Attributes.Key<SSLSession> TRANSPORT_ATTR_SSL_SESSION =
-      Attributes.Key.create("ssl-session");
+      Attributes.Key.create("io.grpc.Grpc.TRANSPORT_ATTR_SSL_SESSION");
 
   /**
    * Annotation for transport attributes. It follows the annotation semantics defined

File: api/src/main/java/io/grpc/InternalConfigSelector.java
Patch:
@@ -32,7 +32,7 @@
 public abstract class InternalConfigSelector {
   @NameResolver.ResolutionResultAttr
   public static final Attributes.Key<io.grpc.InternalConfigSelector> KEY
-      = Attributes.Key.create("io.grpc.config-selector");
+      = Attributes.Key.create("internal:io.grpc.config-selector");
 
   // Use PickSubchannelArgs for SelectConfigArgs for now. May change over time.
   /** Selects the config for an PRC. */

File: api/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -114,7 +114,7 @@ public abstract class LoadBalancer {
   @Internal
   @NameResolver.ResolutionResultAttr
   public static final Attributes.Key<Map<String, ?>> ATTR_HEALTH_CHECKING_CONFIG =
-      Attributes.Key.create("health-checking-config");
+      Attributes.Key.create("internal:health-checking-config");
   private int recursionCount;
 
   /**

File: binder/src/main/java/io/grpc/binder/internal/BinderTransportSecurity.java
Patch:
@@ -40,7 +40,7 @@
 public final class BinderTransportSecurity {
 
   private static final Attributes.Key<TransportAuthorizationState> TRANSPORT_AUTHORIZATION_STATE =
-      Attributes.Key.create("transport-authorization-state");
+      Attributes.Key.create("internal:transport-authorization-state");
 
   private BinderTransportSecurity() {}
 

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbConstants.java
Patch:
@@ -46,23 +46,23 @@ public final class GrpclbConstants {
    * Attribute key for gRPC LB server addresses.
    */
   public static final Attributes.Key<List<EquivalentAddressGroup>> ATTR_LB_ADDRS =
-      Attributes.Key.create("io.grpc.grpclb.lbAddrs");
+      Attributes.Key.create("io.grpc.grpclb.GrpclbConstants.ATTR_LB_ADDRS");
 
   /**
    * The naming authority of a gRPC LB server address.  It is an address-group-level attribute,
    * present when the address group is a LoadBalancer.
    */
   @EquivalentAddressGroup.Attr
   public static final Attributes.Key<String> ATTR_LB_ADDR_AUTHORITY =
-      Attributes.Key.create("io.grpc.grpclb.lbAddrAuthority");
+      Attributes.Key.create("io.grpc.grpclb.GrpclbConstants.ATTR_LB_ADDR_AUTHORITY");
 
   /**
    * Whether this EquivalentAddressGroup was provided by a GRPCLB server. It would be rare for this
    * value to be {@code false}; generally it would be better to not have the key present at all.
    */
   @EquivalentAddressGroup.Attr
   public static final Attributes.Key<Boolean> ATTR_LB_PROVIDED_BACKEND =
-      Attributes.Key.create("io.grpc.grpclb.lbProvidedBackend");
+      Attributes.Key.create("io.grpc.grpclb.GrpclbConstants.ATTR_LB_PROVIDED_BACKEND");
 
   private GrpclbConstants() { }
 }

File: xds/src/test/java/io/grpc/xds/FakeControlPlaneXdsIntegrationTest.java
Patch:
@@ -158,7 +158,6 @@ public class FakeControlPlaneXdsIntegrationTest {
    */
   @Before
   public void setUp() throws Exception {
-    ClientXdsClient.enableCustomLbConfig = true;
     startControlPlane();
     nameResolverProvider = XdsNameResolverProvider.createForTest(SCHEME,
         defaultBootstrapOverride());

File: interop-testing/src/test/java/io/grpc/testing/integration/RpcBehaviorLoadBalancerProviderTest.java
Patch:
@@ -80,7 +80,8 @@ public void parseInvalidConfig() {
 
   @Test
   public void handleResolvedAddressesDelegated() {
-    RpcBehaviorLoadBalancer lb = new RpcBehaviorLoadBalancer(mockHelper, mockDelegateLb);
+    RpcBehaviorLoadBalancer lb = new RpcBehaviorLoadBalancer(new RpcBehaviorHelper(mockHelper),
+        mockDelegateLb);
     ResolvedAddresses resolvedAddresses = buildResolvedAddresses(buildConfig());
     lb.handleResolvedAddresses(resolvedAddresses);
     verify(mockDelegateLb).handleResolvedAddresses(resolvedAddresses);

File: interop-testing/src/main/java/io/grpc/testing/integration/ReconnectTestClient.java
Patch:
@@ -25,6 +25,7 @@
 import io.grpc.okhttp.OkHttpChannelBuilder;
 import io.grpc.testing.integration.EmptyProtos.Empty;
 import io.grpc.testing.integration.Messages.ReconnectInfo;
+import io.grpc.testing.integration.Messages.ReconnectParams;
 
 /**
  * Verifies the client is reconnecting the server with correct backoffs
@@ -79,12 +80,12 @@ private void runTest() throws Exception {
             .negotiationType(NegotiationType.TLS).build();
       }
       retryStub = ReconnectServiceGrpc.newBlockingStub(retryChannel);
-      controlStub.start(Empty.getDefaultInstance());
+      controlStub.start(ReconnectParams.getDefaultInstance());
 
       long startTimeStamp = System.currentTimeMillis();
       while ((System.currentTimeMillis() - startTimeStamp) < TEST_TIME_MS) {
         try {
-          retryStub.start(Empty.getDefaultInstance());
+          retryStub.start(ReconnectParams.getDefaultInstance());
         } catch (StatusRuntimeException expected) {
           // Make CheckStyle happy.
         }

File: xds/src/test/java/io/grpc/xds/LoadBalancerConfigFactoryTest.java
Patch:
@@ -59,7 +59,7 @@ public class LoadBalancerConfigFactoryTest {
 
   private static final Policy ROUND_ROBIN_POLICY = Policy.newBuilder().setTypedExtensionConfig(
       TypedExtensionConfig.newBuilder().setTypedConfig(
-          Any.pack(RoundRobin.newBuilder().build()))).build();
+          Any.pack(RoundRobin.getDefaultInstance()))).build();
 
   private static final long RING_HASH_MIN_RING_SIZE = 1;
   private static final long RING_HASH_MAX_RING_SIZE = 2;

File: benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadWorkerTest.java
Patch:
@@ -181,7 +181,7 @@ private void assertWorkOccurred(StreamObserver<Control.ClientArgs> clientObserve
       throws InterruptedException {
 
     Stats.ClientStats stat = null;
-    for (int i = 0; i < 3; i++) {
+    for (int i = 0; i < 30; i++) {
       // Poll until we get some stats
       Thread.sleep(300);
       clientObserver.onNext(MARK);
@@ -197,7 +197,7 @@ private void assertWorkOccurred(StreamObserver<Control.ClientArgs> clientObserve
     assertThat(stat.hasLatencies()).isTrue();
     assertThat(stat.getLatencies().getCount()).isLessThan(stat.getLatencies().getSum());
     double mean = stat.getLatencies().getSum() / stat.getLatencies().getCount();
-    System.out.println("Mean " + mean + " us");
+    System.out.println("Mean " + mean + " ns");
     assertThat(stat.getLatencies().getMinSeen()).isLessThan(mean);
     assertThat(stat.getLatencies().getMaxSeen()).isGreaterThan(mean);
   }

File: xds/src/main/java/io/grpc/xds/orca/OrcaPerRequestUtil.java
Patch:
@@ -69,7 +69,7 @@ public static OrcaPerRequestUtil getInstance() {
   }
 
   /**
-   * Creates a new {@link ClientStreamTracer.Factory} with provided {@link
+   * Creates a new {@link io.grpc.ClientStreamTracer.Factory} with provided {@link
    * OrcaPerRequestReportListener} installed to receive callback when a per-request ORCA report is
    * received.
    *
@@ -95,7 +95,7 @@ public abstract ClientStreamTracer.Factory newOrcaClientStreamTracerFactory(
       OrcaPerRequestReportListener listener);
 
   /**
-   * Creates a new {@link ClientStreamTracer.Factory} with provided {@link
+   * Creates a new {@link io.grpc.ClientStreamTracer.Factory} with provided {@link
    * OrcaPerRequestReportListener} installed to receive callback when a per-request ORCA report is
    * received.
    *

File: binder/src/main/java/io/grpc/binder/SecurityPolicies.java
Patch:
@@ -28,9 +28,7 @@
 import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.ExperimentalApi;
 import io.grpc.Status;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
 
 /** Static factory methods for creating standard security policies. */
 @CheckReturnValue

File: binder/src/main/java/io/grpc/binder/SecurityPolicies.java
Patch:
@@ -25,12 +25,12 @@
 import android.os.Process;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import com.google.errorprone.annotations.CheckReturnValue;
 import io.grpc.ExperimentalApi;
 import io.grpc.Status;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
-import javax.annotation.CheckReturnValue;
 
 /** Static factory methods for creating standard security policies. */
 @CheckReturnValue

File: auth/src/main/java/io/grpc/auth/GoogleAuthLibraryCallCredentials.java
Patch:
@@ -20,14 +20,14 @@
 
 import com.google.auth.Credentials;
 import com.google.auth.RequestMetadataCallback;
+import com.google.auth.Retryable;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.io.BaseEncoding;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.SecurityLevel;
 import io.grpc.Status;
 import io.grpc.StatusException;
-import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.net.URI;
@@ -133,8 +133,8 @@ public void onSuccess(Map<String, List<String>> metadata) {
 
       @Override
       public void onFailure(Throwable e) {
-        if (e instanceof IOException) {
-          // Since it's an I/O failure, let the call be retried with UNAVAILABLE.
+        if (e instanceof Retryable && ((Retryable) e).isRetryable()) {
+          // Let the call be retried with UNAVAILABLE.
           applier.fail(Status.UNAVAILABLE
               .withDescription("Credentials failed to obtain metadata")
               .withCause(e));

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -100,7 +100,6 @@
 import io.opencensus.trace.Span;
 import io.opencensus.trace.SpanContext;
 import io.opencensus.trace.Tracing;
-import io.opencensus.trace.unsafe.ContextUtils;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -1547,6 +1546,7 @@ public void customMetadata() throws Exception {
         Collections.singleton(streamingRequest), Collections.singleton(goldenStreamingResponse));
   }
 
+  @SuppressWarnings("deprecation")
   @Test(timeout = 10000)
   public void censusContextsPropagated() {
     Assume.assumeTrue("Skip the test because server is not in the same process.", server != null);
@@ -1561,7 +1561,7 @@ public void censusContextsPropagated() {
                 .emptyBuilder()
                 .putLocal(StatsTestUtils.EXTRA_TAG, TagValue.create("extra value"))
                 .build());
-    ctx = ContextUtils.withValue(ctx, clientParentSpan);
+    ctx = io.opencensus.trace.unsafe.ContextUtils.withValue(ctx, clientParentSpan);
     Context origCtx = ctx.attach();
     try {
       blockingStub.unaryCall(SimpleRequest.getDefaultInstance());
@@ -1581,7 +1581,7 @@ public void censusContextsPropagated() {
       }
       assertTrue("tag not found", tagFound);
 
-      Span span = ContextUtils.getValue(serverCtx);
+      Span span = io.opencensus.trace.unsafe.ContextUtils.getValue(serverCtx);
       assertNotNull(span);
       SpanContext spanContext = span.getContext();
       assertEquals(clientParentSpan.getContext().getTraceId(), spanContext.getTraceId());

File: xds/src/test/java/io/grpc/xds/internal/certprovider/CertProviderServerSslContextProviderTest.java
Patch:
@@ -177,6 +177,7 @@ public void testProviderForServer_mtls_newXds() throws Exception {
             new CertificateProvider.DistributorWatcher[1];
     TestCertificateProvider.createAndRegisterProviderProvider(
             certificateProviderRegistry, watcherCaptor, "testca", 0);
+    @SuppressWarnings("deprecation")
     CertificateValidationContext staticCertValidationContext =
         CertificateValidationContext.newBuilder().addAllMatchSubjectAltNames(Arrays
             .asList(StringMatcher.newBuilder().setExact("foo.com").build(),

File: xds/src/test/java/io/grpc/xds/internal/sds/ClientSslContextProviderFactoryTest.java
Patch:
@@ -152,6 +152,7 @@ public void createCertProviderClientSslContextProvider_withStaticContext()
     final CertificateProvider.DistributorWatcher[] watcherCaptor =
             new CertificateProvider.DistributorWatcher[1];
     createAndRegisterProviderProvider(certificateProviderRegistry, watcherCaptor, "testca", 0);
+    @SuppressWarnings("deprecation")
     CertificateValidationContext staticCertValidationContext =
         CertificateValidationContext.newBuilder()
             .addAllMatchSubjectAltNames(
@@ -216,6 +217,7 @@ public void createNewCertProviderClientSslContextProvider_withSans() {
     createAndRegisterProviderProvider(
         certificateProviderRegistry, watcherCaptor, "file_watcher", 1);
 
+    @SuppressWarnings("deprecation")
     CertificateValidationContext staticCertValidationContext =
         CertificateValidationContext.newBuilder()
             .addAllMatchSubjectAltNames(
@@ -248,6 +250,7 @@ public void createNewCertProviderClientSslContextProvider_onlyRootCert() {
     final CertificateProvider.DistributorWatcher[] watcherCaptor =
         new CertificateProvider.DistributorWatcher[1];
     createAndRegisterProviderProvider(certificateProviderRegistry, watcherCaptor, "testca", 0);
+    @SuppressWarnings("deprecation")
     CertificateValidationContext staticCertValidationContext =
         CertificateValidationContext.newBuilder()
             .addAllMatchSubjectAltNames(

File: xds/src/test/java/io/grpc/xds/internal/sds/ServerSslContextProviderFactoryTest.java
Patch:
@@ -149,6 +149,7 @@ public void createCertProviderServerSslContextProvider_withStaticContext()
     final CertificateProvider.DistributorWatcher[] watcherCaptor =
             new CertificateProvider.DistributorWatcher[1];
     createAndRegisterProviderProvider(certificateProviderRegistry, watcherCaptor, "testca", 0);
+    @SuppressWarnings("deprecation")
     CertificateValidationContext staticCertValidationContext =
             CertificateValidationContext.newBuilder()
                     .addAllMatchSubjectAltNames(
@@ -215,6 +216,7 @@ public void createNewCertProviderServerSslContextProvider_withSans()
     createAndRegisterProviderProvider(certificateProviderRegistry, watcherCaptor, "testca", 0);
     createAndRegisterProviderProvider(
         certificateProviderRegistry, watcherCaptor, "file_watcher", 1);
+    @SuppressWarnings("deprecation")
     CertificateValidationContext staticCertValidationContext =
         CertificateValidationContext.newBuilder()
             .addAllMatchSubjectAltNames(

File: xds/src/test/java/io/grpc/xds/internal/sds/trust/SdsTrustManagerFactoryTest.java
Patch:
@@ -256,7 +256,9 @@ private static final CertificateValidationContext buildStaticValidationContext(
           String... verifySans) {
     CertificateValidationContext.Builder builder = CertificateValidationContext.newBuilder();
     for (String san : verifySans) {
-      builder.addMatchSubjectAltNames(StringMatcher.newBuilder().setExact(san));
+      @SuppressWarnings("deprecation")
+      CertificateValidationContext.Builder unused =
+          builder.addMatchSubjectAltNames(StringMatcher.newBuilder().setExact(san));
     }
     return builder.build();
   }

File: core/src/test/java/io/grpc/internal/FakeClock.java
Patch:
@@ -357,7 +357,7 @@ public int numPendingTasks(TaskFilter filter) {
 
   public long currentTimeMillis() {
     // Normally millis and nanos are of different epochs. Add an offset to simulate that.
-    return TimeUnit.NANOSECONDS.toMillis(currentTimeNanos + 123456789L);
+    return TimeUnit.NANOSECONDS.toMillis(currentTimeNanos + 1234567890123456789L);
   }
 
   /**

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/proxy/HttpUrl.java
Patch:
@@ -433,7 +433,8 @@ static int decodeHexDigit(char c) {
   }
 
   static void canonicalize(Buffer out, String input, int pos, int limit,
-                           String encodeSet, boolean alreadyEncoded, boolean plusIsSpace, boolean asciiOnly) {
+                           String encodeSet, boolean alreadyEncoded, boolean plusIsSpace, boolean asciiOnly)
+      throws Exception {
     Buffer utf8Buffer = null; // Lazily allocated.
     int codePoint;
     for (int i = pos; i < limit; i += Character.charCount(codePoint)) {

File: context/src/test/java/io/grpc/PersistentHashArrayMappedTrieTest.java
Patch:
@@ -84,6 +84,7 @@ public void leaf_insert() {
     assertEquals(2, ret.size());
   }
 
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void collisionLeaf_assertKeysDifferent() {
     Key key1 = new Key(0);
@@ -94,6 +95,7 @@ public void collisionLeaf_assertKeysDifferent() {
     }
   }
 
+  @SuppressWarnings("CheckReturnValue")
   @Test
   public void collisionLeaf_assertHashesSame() {
     try {

File: xds/src/main/java/io/grpc/xds/OrcaOobService.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import io.grpc.BindableService;
+import io.grpc.ExperimentalApi;
 import java.util.Map;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
@@ -30,7 +31,7 @@
  * for periodic load reports. A user should use the public set-APIs to update the server machine's
  * utilization metrics data.
  */
-@io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/9006")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/9006")
 public final class OrcaOobService {
   /**
    * Empty or invalid (non-positive) minInterval config in will be treated to this default value.

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -1340,12 +1340,11 @@ static StructOrError<RouteAction> parseRouteAction(
           return StructOrError.fromStruct(RouteAction.forClusterSpecifierPlugin(
               namedPluginConfig, hashPolicies, timeoutNano, retryPolicy));
         } else {
-          return StructOrError.fromError("Support for ClusterSpecifierPlugin not enabled");
+          return null;
         }
       case CLUSTERSPECIFIER_NOT_SET:
       default:
-        return StructOrError.fromError(
-            "Unknown cluster specifier: " + proto.getClusterSpecifierCase());
+        return null;
     }
   }
 

File: rls/src/main/java/io/grpc/rls/ChildLbResolvedAddressFactory.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc.rls;
 
-import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import io.grpc.Attributes;
@@ -33,8 +32,7 @@ final class ChildLbResolvedAddressFactory implements ResolvedAddressFactory {
 
   ChildLbResolvedAddressFactory(
       List<EquivalentAddressGroup> addresses, Attributes attributes) {
-    checkArgument(addresses != null && !addresses.isEmpty(), "Address must be provided");
-    this.addresses = Collections.unmodifiableList(addresses);
+    this.addresses = Collections.unmodifiableList(checkNotNull(addresses, "addresses"));
     this.attributes = checkNotNull(attributes, "attributes");
   }
 

File: rls/src/main/java/io/grpc/rls/RlsProtoData.java
Patch:
@@ -75,7 +75,7 @@ abstract static class RouteLookupConfig {
      * keyed by name. If no GrpcKeyBuilder matches, an empty key_map will be sent to the lookup
      * service; it should likely reply with a global default route and raise an alert.
      */
-    abstract ImmutableList<GrpcKeyBuilder> grpcKeyBuilders();
+    abstract ImmutableList<GrpcKeyBuilder> grpcKeybuilders();
 
     /**
      * Returns the name of the lookup service as a gRPC URI. Typically, this will be a subdomain of
@@ -119,7 +119,7 @@ static Builder builder() {
     @AutoValue.Builder
     abstract static class Builder {
 
-      abstract Builder grpcKeyBuilders(ImmutableList<GrpcKeyBuilder> grpcKeyBuilders);
+      abstract Builder grpcKeybuilders(ImmutableList<GrpcKeyBuilder> grpcKeybuilders);
 
       abstract Builder lookupService(String lookupService);
 

File: rls/src/main/java/io/grpc/rls/RlsRequestFactory.java
Patch:
@@ -50,7 +50,7 @@ final class RlsRequestFactory {
   private static Map<String, GrpcKeyBuilder> createKeyBuilderTable(
       RouteLookupConfig config) {
     Map<String, GrpcKeyBuilder> table = new HashMap<>();
-    for (GrpcKeyBuilder grpcKeyBuilder : config.grpcKeyBuilders()) {
+    for (GrpcKeyBuilder grpcKeyBuilder : config.grpcKeybuilders()) {
       for (Name name : grpcKeyBuilder.names()) {
         boolean hasMethod = name.method() == null || name.method().isEmpty();
         String method = hasMethod ? "*" : name.method();

File: rls/src/test/java/io/grpc/rls/CachingRlsLbClientTest.java
Patch:
@@ -428,7 +428,7 @@ public void get_childPolicyWrapper_reusedForSameTarget() throws Exception {
 
   private static RouteLookupConfig getRouteLookupConfig() {
     return RouteLookupConfig.builder()
-        .grpcKeyBuilders(ImmutableList.of(
+        .grpcKeybuilders(ImmutableList.of(
             GrpcKeyBuilder.create(
                 ImmutableList.of(Name.create("service1", "create")),
                 ImmutableList.of(

File: rls/src/test/java/io/grpc/rls/RlsLoadBalancerTest.java
Patch:
@@ -392,7 +392,7 @@ private Map<String, Object> getServiceConfig() throws IOException {
 
   private String getRlsConfigJsonStr() {
     return "{\n"
-        + "  \"grpcKeyBuilders\": [\n"
+        + "  \"grpcKeybuilders\": [\n"
         + "    {\n"
         + "      \"names\": [\n"
         + "        {\n"

File: rls/src/test/java/io/grpc/rls/RlsRequestFactoryTest.java
Patch:
@@ -37,7 +37,7 @@ public class RlsRequestFactoryTest {
 
   private static final RouteLookupConfig RLS_CONFIG =
       RouteLookupConfig.builder()
-          .grpcKeyBuilders(ImmutableList.of(
+          .grpcKeybuilders(ImmutableList.of(
               GrpcKeyBuilder.create(
                   ImmutableList.of(Name.create("com.google.service1", "Create")),
                   ImmutableList.of(

File: stub/src/main/java/io/grpc/stub/StreamObserver.java
Patch:
@@ -26,8 +26,8 @@
  * {@code StreamObserver} and passes it to the GRPC library for receiving.
  *
  * <p>Implementations are not required to be thread-safe (but should be
- * <a href="http://www.ibm.com/developerworks/library/j-jtp09263/">thread-compatible</a>).
- * Separate {@code StreamObserver}s do
+ * <a href="https://web.archive.org/web/20210125044505/https://www.ibm.com/developerworks/java/library/j-jtp09263/index.html">
+ * thread-compatible</a>). Separate {@code StreamObserver}s do
  * not need to be synchronized together; incoming and outgoing directions are independent.
  * Since individual {@code StreamObserver}s are not thread-safe, if multiple threads will be
  * writing to a {@code StreamObserver} concurrently, the application must synchronize calls.

File: testing/src/main/java/io/grpc/testing/GrpcCleanupRule.java
Patch:
@@ -149,6 +149,7 @@ public Statement apply(final Statement base, Description description) {
     return new Statement() {
       @Override
       public void evaluate() throws Throwable {
+        firstException = null;
         try {
           base.evaluate();
         } catch (Throwable t) {
@@ -175,6 +176,7 @@ public void evaluate() throws Throwable {
    * Releases all the registered resources.
    */
   private void teardown() {
+    stopwatch.reset();
     stopwatch.start();
 
     if (firstException == null) {

File: xds/src/test/java/io/grpc/xds/ClientXdsClientDataTest.java
Patch:
@@ -2180,7 +2180,7 @@ public void parseFilterChain_noName() throws ResourceInvalidException {
     EnvoyServerProtoData.FilterChain parsedFilterChain2 = ClientXdsClient.parseFilterChain(
         filterChain2, new HashSet<String>(), null, filterRegistry, null,
         null, true /* does not matter */);
-    assertThat(parsedFilterChain1.getName()).isEqualTo(parsedFilterChain2.getName());
+    assertThat(parsedFilterChain1.name()).isEqualTo(parsedFilterChain2.name());
   }
 
   @Test

File: rls/src/main/java/io/grpc/rls/RlsLoadBalancer.java
Patch:
@@ -56,8 +56,8 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
     checkNotNull(lbPolicyConfiguration, "Missing rls lb config");
     if (!lbPolicyConfiguration.equals(this.lbPolicyConfiguration)) {
       boolean needToConnect = this.lbPolicyConfiguration == null
-          || !this.lbPolicyConfiguration.getRouteLookupConfig().getLookupService().equals(
-          lbPolicyConfiguration.getRouteLookupConfig().getLookupService());
+          || !this.lbPolicyConfiguration.getRouteLookupConfig().lookupService().equals(
+          lbPolicyConfiguration.getRouteLookupConfig().lookupService());
       if (needToConnect) {
         if (routeLookupClient != null) {
           routeLookupClient.close();

File: xds/src/main/java/io/grpc/xds/XdsServerWrapper.java
Patch:
@@ -24,7 +24,6 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import com.google.common.net.UrlEscapers;
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.Attributes;
 import io.grpc.InternalServerInterceptors;
@@ -196,7 +195,7 @@ private void internalStart() {
     }
     String replacement = listenerAddress;
     if (listenerTemplate.startsWith(XDSTP_SCHEME)) {
-      replacement = UrlEscapers.urlFragmentEscaper().escape(replacement);
+      replacement = XdsClient.percentEncodePath(replacement);
     }
     discoveryState = new DiscoveryState(listenerTemplate.replaceAll("%s", replacement));
   }

File: benchmarks/src/main/java/io/grpc/benchmarks/Transport.java
Patch:
@@ -16,8 +16,6 @@
 
 package io.grpc.benchmarks;
 
-import java.net.SocketAddress;
-
 /**
  * All of the supported transports.
  */
@@ -49,7 +47,7 @@ public enum Transport {
    *
    * @throws IllegalArgumentException if the given address is invalid for this transport.
    */
-  public void validateSocketAddress(SocketAddress address) {
+  public void validateSocketAddress(String address) {
     if (!socketAddressValidator.isValidSocketAddress(address)) {
       throw new IllegalArgumentException(
           "Invalid address " + address + " for transport " + this);

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadClient.java
Patch:
@@ -82,7 +82,7 @@ class LoadClient {
       channels[i] =
           Utils.newClientChannel(
               Epoll.isAvailable() ?  Transport.NETTY_EPOLL : Transport.NETTY_NIO,
-              Utils.parseSocketAddress(config.getServerTargets(i % config.getServerTargetsCount())),
+              config.getServerTargets(i % config.getServerTargetsCount()),
               config.hasSecurityParams(),
               config.hasSecurityParams() && config.getSecurityParams().getUseTestCa(),
               config.hasSecurityParams()

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/ServerConfiguration.java
Patch:
@@ -142,7 +142,7 @@ enum ServerParam implements AbstractConfigurationBuilder.Param {
         + "(unix:///path/to/file), depending on the transport selected.", null, true) {
       @Override
       protected void setServerValue(ServerConfiguration config, String value) {
-        SocketAddress address = Utils.parseSocketAddress(value);
+        SocketAddress address = Utils.parseServerSocketAddress(value);
         if (address instanceof InetSocketAddress) {
           InetSocketAddress addr = (InetSocketAddress) address;
           int port = addr.getPort() == 0 ? Utils.pickUnusedPort() : addr.getPort();

File: core/src/main/java/io/grpc/internal/SubchannelChannel.java
Patch:
@@ -43,7 +43,7 @@ final class SubchannelChannel extends Channel {
       Status.UNAVAILABLE.withDescription(
           "wait-for-ready RPC is not supported on Subchannel.asChannel()");
   private static final FailingClientTransport notReadyTransport =
-      new FailingClientTransport(NOT_READY_ERROR, RpcProgress.REFUSED);
+      new FailingClientTransport(NOT_READY_ERROR, RpcProgress.MISCARRIED);
   private final InternalSubchannel subchannel;
   private final Executor executor;
   private final ScheduledExecutorService deadlineCancellationExecutor;

File: core/src/main/java/io/grpc/internal/InternalSubchannel.java
Patch:
@@ -772,6 +772,9 @@ private String printShortStatus(Status status) {
     if (status.getDescription() != null) {
       buffer.append("(").append(status.getDescription()).append(")");
     }
+    if (status.getCause() != null) {
+      buffer.append("[").append(status.getCause()).append("]");
+    }
     return buffer.toString();
   }
 

File: rls/src/main/java/io/grpc/rls/RlsLoadBalancerProvider.java
Patch:
@@ -30,9 +30,9 @@
 import java.util.Map;
 
 /**
- * The provider for the "rls-experimental" balancing policy.  This class should not be directly
+ * The provider for the "rls_experimental" balancing policy.  This class should not be directly
  * referenced in code.  The policy should be accessed through {@link
- * io.grpc.LoadBalancerRegistry#getProvider} with the name "rls-experimental".
+ * io.grpc.LoadBalancerRegistry#getProvider} with the name "rls_experimental".
  */
 @Internal
 public final class RlsLoadBalancerProvider extends LoadBalancerProvider {
@@ -49,7 +49,7 @@ public int getPriority() {
 
   @Override
   public String getPolicyName() {
-    return "rls-experimental";
+    return "rls_experimental";
   }
 
   @Override

File: binder/src/main/java/io/grpc/binder/internal/Inbound.java
Patch:
@@ -345,8 +345,8 @@ final synchronized void handleTransaction(Parcel parcel) {
       int index = parcel.readInt();
       boolean hasPrefix = TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_PREFIX);
       boolean hasMessageData =
-          (TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_MESSAGE_DATA));
-      boolean hasSuffix = (TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_SUFFIX));
+          TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_MESSAGE_DATA);
+      boolean hasSuffix = TransactionUtils.hasFlag(flags, TransactionUtils.FLAG_SUFFIX);
       if (hasPrefix) {
         handlePrefix(flags, parcel);
         onDeliveryState(State.PREFIX_DELIVERED);

File: netty/src/test/java/io/grpc/netty/KeepAliveEnforcerTest.java
Patch:
@@ -32,12 +32,12 @@ public class KeepAliveEnforcerTest {
 
   @Test(expected = IllegalArgumentException.class)
   public void negativeTime() {
-    new KeepAliveEnforcer(true, -1, TimeUnit.NANOSECONDS);
+    KeepAliveEnforcer unused = new KeepAliveEnforcer(true, -1, TimeUnit.NANOSECONDS);
   }
 
   @Test(expected = NullPointerException.class)
   public void nullTimeUnit() {
-    new KeepAliveEnforcer(true, 1, null);
+    KeepAliveEnforcer unused = new KeepAliveEnforcer(true, 1, null);
   }
 
   @Test

File: rls/src/main/java/io/grpc/rls/LruCache.java
Patch:
@@ -49,10 +49,10 @@ interface LruCache<K, V> {
   V invalidate(K key);
 
   /**
-   * Invalidates cache entries for given keys. This operation will trigger {@link EvictionListener}
+   * Invalidates cache entries for all keys. This operation will trigger {@link EvictionListener}
    * with {@link EvictionType#EXPLICIT}.
    */
-  void invalidateAll(Iterable<K> keys);
+  void invalidateAll();
 
   /** Returns {@code true} if given key is cached. */
   @CheckReturnValue

File: rls/src/test/java/io/grpc/rls/LinkedHashLruCacheTest.java
Patch:
@@ -23,7 +23,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import com.google.common.collect.ImmutableList;
 import io.grpc.rls.DoNotUseDirectScheduledExecutorService.FakeTimeProvider;
 import io.grpc.rls.LruCache.EvictionListener;
 import io.grpc.rls.LruCache.EvictionType;
@@ -62,7 +61,8 @@ public void setUp() {
         10,
         TimeUnit.NANOSECONDS,
         fakeScheduledService,
-        timeProvider) {
+        timeProvider,
+        new Object()) {
       @Override
       protected boolean isExpired(Integer key, Entry value, long nowNanos) {
         return value.expireTime <= nowNanos;
@@ -210,7 +210,7 @@ public void invalidateAll() {
 
     assertThat(cache.estimatedSize()).isEqualTo(2);
 
-    cache.invalidateAll(ImmutableList.of(1, 2));
+    cache.invalidateAll();
 
     assertThat(cache.estimatedSize()).isEqualTo(0);
   }

File: alts/src/main/java/io/grpc/alts/internal/ChannelCrypterNetty.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.List;
 
 /**
- * A @{code ChannelCrypterNetty} performs stateful encryption and decryption of independent input
- * and output streams. Both decrypt and encrypt gather their input from a list of Netty @{link
+ * A {@code ChannelCrypterNetty} performs stateful encryption and decryption of independent input
+ * and output streams. Both decrypt and encrypt gather their input from a list of Netty {@link
  * ByteBuf} instances.
  *
  * <p>Note that we provide implementations of this interface that provide integrity only and

File: alts/src/test/java/io/grpc/alts/internal/TsiTest.java
Patch:
@@ -34,13 +34,13 @@
 import java.util.List;
 import javax.crypto.AEADBadTagException;
 
-/** Utility class that provides tests for implementations of @{link TsiHandshaker}. */
+/** Utility class that provides tests for implementations of {@link TsiHandshaker}. */
 public final class TsiTest {
   private static final String DECRYPTION_FAILURE_RE = "Tag mismatch!|BAD_DECRYPT";
 
   private TsiTest() {}
 
-  /** A @{code TsiHandshaker} pair for running tests. */
+  /** A {@code TsiHandshaker} pair for running tests. */
   public static class Handshakers {
     private final TsiHandshaker client;
     private final TsiHandshaker server;

File: context/src/main/java/io/grpc/Context.java
Patch:
@@ -1042,7 +1042,7 @@ public Context doAttach(Context toAttach) {
      * Implements {@link io.grpc.Context#current}.
      *
      * <p>Caution: {@link Context} interprets a return value of {@code null} to mean the same
-     * thing as {@code Context{@link #ROOT}}.
+     * thing as {@link Context#ROOT}.
      *
      * <p>See also {@link #doAttach(Context)}.
      *

File: core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java
Patch:
@@ -17,6 +17,7 @@
 package io.grpc.internal;
 
 import com.google.common.base.MoreObjects;
+import com.google.errorprone.annotations.DoNotCall;
 import io.grpc.BinaryLog;
 import io.grpc.BindableService;
 import io.grpc.CompressorRegistry;
@@ -53,6 +54,7 @@ protected AbstractServerImplBuilder() {}
   /**
    * This method serves to force sub classes to "hide" this static factory.
    */
+  @DoNotCall("Unsupported")
   public static ServerBuilder<?> forPort(int port) {
     throw new UnsupportedOperationException("Subclass failed to hide static factory");
   }

File: core/src/main/java/io/grpc/internal/JndiResourceResolverFactory.java
Patch:
@@ -140,7 +140,7 @@ public List<SrvRecord> resolveSrv(String host) throws Exception {
       Level level = Level.WARNING;
       for (String rawSrv : rawSrvRecords) {
         try {
-          String[] parts = whitespace.split(rawSrv);
+          String[] parts = whitespace.split(rawSrv, 5);
           Verify.verify(parts.length == 4, "Bad SRV Record: %s", rawSrv);
           // SRV requires the host name to be absolute
           if (!parts[3].endsWith(".")) {

File: interop-testing/src/test/java/io/grpc/testing/integration/TrafficControlProxy.java
Patch:
@@ -51,7 +51,7 @@ public final class TrafficControlProxy {
   private Socket serverSock;
   private Socket clientSock;
   private final ThreadPoolExecutor executor =
-      new ThreadPoolExecutor(5, 10, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),
+      new ThreadPoolExecutor(5, 5, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),
           new DefaultThreadFactory("proxy-pool", true));
 
   /**

File: netty/src/main/java/io/grpc/netty/GrpcHttp2ConnectionHandler.java
Patch:
@@ -58,6 +58,7 @@ protected GrpcHttp2ConnectionHandler(
    * @deprecated Use the two argument method instead.
    */
   @Deprecated
+  @SuppressWarnings("InlineMeSuggester") // the caller should consider providing securityInfo
   public void handleProtocolNegotiationCompleted(Attributes attrs) {
     handleProtocolNegotiationCompleted(attrs, /*securityInfo=*/ null);
   }

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
+import com.google.errorprone.annotations.InlineMe;
 import io.grpc.Attributes;
 import io.grpc.CallCredentials;
 import io.grpc.ChannelCredentials;
@@ -393,6 +394,7 @@ public NettyChannelBuilder flowControlWindow(int flowControlWindow) {
    * @deprecated Use {@link #maxInboundMetadataSize} instead
    */
   @Deprecated
+  @InlineMe(replacement = "this.maxInboundMetadataSize(maxHeaderListSize)")
   public NettyChannelBuilder maxHeaderListSize(int maxHeaderListSize) {
     return maxInboundMetadataSize(maxHeaderListSize);
   }

File: netty/src/main/java/io/grpc/netty/NettyServerBuilder.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
+import com.google.errorprone.annotations.InlineMe;
 import io.grpc.Attributes;
 import io.grpc.ExperimentalApi;
 import io.grpc.Internal;
@@ -437,6 +438,7 @@ public NettyServerBuilder flowControlWindow(int flowControlWindow) {
    *     future release.
    */
   @Deprecated
+  @InlineMe(replacement = "this.maxInboundMessageSize(maxMessageSize)")
   public NettyServerBuilder maxMessageSize(int maxMessageSize) {
     return maxInboundMessageSize(maxMessageSize);
   }
@@ -458,6 +460,7 @@ public NettyServerBuilder maxInboundMessageSize(int bytes) {
    * @deprecated Use {@link #maxInboundMetadataSize} instead
    */
   @Deprecated
+  @InlineMe(replacement = "this.maxInboundMetadataSize(maxHeaderListSize)")
   public NettyServerBuilder maxHeaderListSize(int maxHeaderListSize) {
     return maxInboundMetadataSize(maxHeaderListSize);
   }

File: services/src/main/java/io/grpc/protobuf/services/BinaryLogProviderImpl.java
Patch:
@@ -42,6 +42,7 @@ public BinaryLogProviderImpl() throws IOException {
    * Deprecated and will be removed in a future version of gRPC.
    */
   @Deprecated
+  @SuppressWarnings("InlineMeSuggester") // Only called internally; don't care
   public BinaryLogProviderImpl(BinaryLogSink sink) throws IOException {
     this(sink, System.getenv("GRPC_BINARY_LOG_CONFIG"));
   }

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -391,7 +391,6 @@ public void setOnReadyHandler(Runnable onReadyHandler) {
       this.onReadyHandler = onReadyHandler;
     }
 
-    @Deprecated
     @Override
     public void disableAutoInboundFlowControl() {
       disableAutoRequestWithInitial(1);

File: stub/src/main/java/io/grpc/stub/ServerCalls.java
Patch:
@@ -422,7 +422,6 @@ public void setOnCancelHandler(Runnable onCancelHandler) {
       this.onCancelHandler = onCancelHandler;
     }
 
-    @Deprecated
     @Override
     public void disableAutoInboundFlowControl() {
       disableAutoRequest();

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancer2.java
Patch:
@@ -187,7 +187,7 @@ private void handleClusterDiscovered() {
       LoadBalancerProvider lbProvider = null;
       Object lbConfig = null;
       if (root.result.lbPolicy() == LbPolicy.RING_HASH) {
-        lbProvider = lbRegistry.getProvider("ring_hash");
+        lbProvider = lbRegistry.getProvider("ring_hash_experimental");
         lbConfig = new RingHashConfig(root.result.minRingSize(), root.result.maxRingSize());
       }
       if (lbProvider == null) {

File: xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancerProvider.java
Patch:
@@ -68,7 +68,7 @@ public LoadBalancer newLoadBalancer(Helper helper) {
   static final class ClusterResolverConfig {
     // Ordered list of clusters to be resolved.
     final List<DiscoveryMechanism> discoveryMechanisms;
-    // Endpoint-level load balancing policy with config (round_robin or ring_hash).
+    // Endpoint-level load balancing policy with config (round_robin or ring_hash_experimental).
     final PolicySelection lbPolicy;
 
     ClusterResolverConfig(List<DiscoveryMechanism> discoveryMechanisms, PolicySelection lbPolicy) {

File: xds/src/main/java/io/grpc/xds/RingHashLoadBalancerProvider.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 
 /**
- * The provider for the "ring_hash" balancing policy.
+ * The provider for the "ring_hash_experimental" balancing policy.
  */
 @Internal
 public final class RingHashLoadBalancerProvider extends LoadBalancerProvider {
@@ -66,7 +66,7 @@ public int getPriority() {
 
   @Override
   public String getPolicyName() {
-    return "ring_hash";
+    return "ring_hash_experimental";
   }
 
   @Override

File: xds/src/main/java/io/grpc/xds/XdsClient.java
Patch:
@@ -113,10 +113,10 @@ abstract static class CdsUpdate implements ResourceUpdate {
     // Endpoint-level load balancing policy.
     abstract LbPolicy lbPolicy();
 
-    // Only valid if lbPolicy is "ring_hash".
+    // Only valid if lbPolicy is "ring_hash_experimental".
     abstract long minRingSize();
 
-    // Only valid if lbPolicy is "ring_hash".
+    // Only valid if lbPolicy is "ring_hash_experimental".
     abstract long maxRingSize();
 
     // Alternative resource name to be used in EDS requests.

File: xds/src/test/java/io/grpc/xds/CdsLoadBalancer2Test.java
Patch:
@@ -120,7 +120,7 @@ public void setUp() {
     when(helper.getSynchronizationContext()).thenReturn(syncContext);
     lbRegistry.register(new FakeLoadBalancerProvider(CLUSTER_RESOLVER_POLICY_NAME));
     lbRegistry.register(new FakeLoadBalancerProvider("round_robin"));
-    lbRegistry.register(new FakeLoadBalancerProvider("ring_hash"));
+    lbRegistry.register(new FakeLoadBalancerProvider("ring_hash_experimental"));
     loadBalancer = new CdsLoadBalancer2(helper, lbRegistry);
     loadBalancer.handleResolvedAddresses(
         ResolvedAddresses.newBuilder()
@@ -283,7 +283,7 @@ public void discoverAggregateCluster() {
     assertDiscoveryMechanism(childLbConfig.discoveryMechanisms.get(2), cluster4,
         DiscoveryMechanism.Type.EDS, null, null, LRS_SERVER_INFO, 300L, null);
     assertThat(childLbConfig.lbPolicy.getProvider().getPolicyName())
-        .isEqualTo("ring_hash");  // dominated by top-level cluster's config
+        .isEqualTo("ring_hash_experimental");  // dominated by top-level cluster's config
     assertThat(((RingHashConfig) childLbConfig.lbPolicy.getConfig()).minRingSize).isEqualTo(100L);
     assertThat(((RingHashConfig) childLbConfig.lbPolicy.getConfig()).maxRingSize).isEqualTo(1000L);
   }

File: xds/src/test/java/io/grpc/xds/ClientXdsClientTestBase.java
Patch:
@@ -1483,8 +1483,8 @@ public void cdsResourceFound_ringHashLbPolicy() {
     DiscoveryRpcCall call = startResourceWatcher(CDS, CDS_RESOURCE, cdsResourceWatcher);
     Message ringHashConfig = mf.buildRingHashLbConfig("xx_hash", 10L, 100L);
     Any clusterRingHash = Any.pack(
-        mf.buildEdsCluster(CDS_RESOURCE, null, "ring_hash", ringHashConfig, false, null,
-            "envoy.transport_sockets.tls", null
+        mf.buildEdsCluster(CDS_RESOURCE, null, "ring_hash_experimental", ringHashConfig, false,
+            null, "envoy.transport_sockets.tls", null
         ));
     call.sendResponse(ResourceType.CDS, clusterRingHash, VERSION_1, "0000");
 

File: xds/src/test/java/io/grpc/xds/ClientXdsClientV2Test.java
Patch:
@@ -438,7 +438,7 @@ protected Message buildAggregateCluster(String clusterName, String lbPolicy,
       Cluster.Builder builder = Cluster.newBuilder().setName(clusterName).setClusterType(type);
       if (lbPolicy.equals("round_robin")) {
         builder.setLbPolicy(LbPolicy.ROUND_ROBIN);
-      } else if (lbPolicy.equals("ring_hash")) {
+      } else if (lbPolicy.equals("ring_hash_experimental")) {
         builder.setLbPolicy(LbPolicy.RING_HASH);
         builder.setRingHashLbConfig((RingHashLbConfig) ringHashLbConfig);
       } else {
@@ -454,7 +454,7 @@ private Cluster.Builder initClusterBuilder(String clusterName, String lbPolicy,
       builder.setName(clusterName);
       if (lbPolicy.equals("round_robin")) {
         builder.setLbPolicy(LbPolicy.ROUND_ROBIN);
-      } else if (lbPolicy.equals("ring_hash")) {
+      } else if (lbPolicy.equals("ring_hash_experimental")) {
         builder.setLbPolicy(LbPolicy.RING_HASH);
         builder.setRingHashLbConfig((RingHashLbConfig) ringHashLbConfig);
       } else {

File: xds/src/test/java/io/grpc/xds/ClientXdsClientV3Test.java
Patch:
@@ -494,7 +494,7 @@ protected Message buildAggregateCluster(String clusterName, String lbPolicy,
       Cluster.Builder builder = Cluster.newBuilder().setName(clusterName).setClusterType(type);
       if (lbPolicy.equals("round_robin")) {
         builder.setLbPolicy(LbPolicy.ROUND_ROBIN);
-      } else if (lbPolicy.equals("ring_hash")) {
+      } else if (lbPolicy.equals("ring_hash_experimental")) {
         builder.setLbPolicy(LbPolicy.RING_HASH);
         builder.setRingHashLbConfig((RingHashLbConfig) ringHashLbConfig);
       } else {
@@ -511,7 +511,7 @@ private Cluster.Builder initClusterBuilder(String clusterName, String lbPolicy,
       builder.setName(clusterName);
       if (lbPolicy.equals("round_robin")) {
         builder.setLbPolicy(LbPolicy.ROUND_ROBIN);
-      } else if (lbPolicy.equals("ring_hash")) {
+      } else if (lbPolicy.equals("ring_hash_experimental")) {
         builder.setLbPolicy(LbPolicy.RING_HASH);
         builder.setRingHashLbConfig((RingHashLbConfig) ringHashLbConfig);
       } else {

File: xds/src/test/java/io/grpc/xds/ClusterResolverLoadBalancerTest.java
Patch:
@@ -135,7 +135,7 @@ public void uncaughtException(Thread t, Throwable e) {
   private final PolicySelection roundRobin =
       new PolicySelection(new FakeLoadBalancerProvider("round_robin"), null);
   private final PolicySelection ringHash = new PolicySelection(
-      new FakeLoadBalancerProvider("ring_hash"), new RingHashConfig(10L, 100L));
+      new FakeLoadBalancerProvider("ring_hash_experimental"), new RingHashConfig(10L, 100L));
   private final List<FakeLoadBalancer> childBalancers = new ArrayList<>();
   private final List<FakeNameResolver> resolvers = new ArrayList<>();
   private final FakeXdsClient xdsClient = new FakeXdsClient();
@@ -260,7 +260,7 @@ public void edsClustersWithRingHashEndpointLbPolicy() {
     ClusterImplConfig clusterImplConfig =
         (ClusterImplConfig) priorityChildConfig.policySelection.getConfig();
     assertClusterImplConfig(clusterImplConfig, CLUSTER1, EDS_SERVICE_NAME1, LRS_SERVER_INFO, 100L,
-        tlsContext, Collections.<DropOverload>emptyList(), "ring_hash");
+        tlsContext, Collections.<DropOverload>emptyList(), "ring_hash_experimental");
     RingHashConfig ringHashConfig =
         (RingHashConfig) clusterImplConfig.childPolicy.getConfig();
     assertThat(ringHashConfig.minRingSize).isEqualTo(10L);

File: android-interop-testing/src/main/java/io/grpc/android/integrationtest/TesterActivity.java
Patch:
@@ -19,7 +19,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
 import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
@@ -28,6 +27,7 @@
 import android.widget.CheckBox;
 import android.widget.EditText;
 import android.widget.TextView;
+import androidx.appcompat.app.AppCompatActivity;
 import com.google.android.gms.security.ProviderInstaller;
 import io.grpc.ManagedChannel;
 import java.io.InputStream;

File: android-interop-testing/src/main/java/io/grpc/android/integrationtest/TesterOkHttpChannelBuilder.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.grpc.android.integrationtest;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import io.grpc.ChannelCredentials;
 import io.grpc.Grpc;
 import io.grpc.InsecureChannelCredentials;

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -349,6 +349,9 @@ private class IdleModeTimer implements Runnable {
 
     @Override
     public void run() {
+      if (lbHelper == null) {
+        return;
+      }
       enterIdleMode();
     }
   }

File: xds/src/test/java/io/grpc/xds/GoogleCloudToProdNameResolverProviderTest.java
Patch:
@@ -73,7 +73,8 @@ NameResolverProvider.class, getClass().getClassLoader())) {
 
   @Test
   public void newNameResolver() {
-    assertThat(provider.newNameResolver(URI.create("google-c2p:///foo.googleapis.com"), args))
+    assertThat(provider
+        .newNameResolver(URI.create("google-c2p-experimental:///foo.googleapis.com"), args))
         .isInstanceOf(GoogleCloudToProdNameResolver.class);
   }
 }

File: xds/src/test/java/io/grpc/xds/GoogleCloudToProdNameResolverTest.java
Patch:
@@ -69,7 +69,7 @@ public class GoogleCloudToProdNameResolverTest {
   @Rule
   public final MockitoRule mocks = MockitoJUnit.rule();
 
-  private static final URI TARGET_URI = URI.create("google-c2p:///googleapis.com");
+  private static final URI TARGET_URI = URI.create("google-c2p-experimental:///googleapis.com");
   private static final String ZONE = "us-central1-a";
   private static final int DEFAULT_PORT = 887;
 

File: rls/src/test/java/io/grpc/rls/RlsProtoConvertersTest.java
Patch:
@@ -199,7 +199,7 @@ public void convert_jsonRlsConfig() throws IOException {
                     ExtraKeys.create("host-key", "service-key", "method-key"),
                     ImmutableMap.of("constKey1", "value1"))),
             /* lookupService= */ "service1",
-            /* lookupServiceTimeoutInMillis= */ TimeUnit.SECONDS.toNanos(2),
+            /* lookupServiceTimeoutInNanos= */ TimeUnit.SECONDS.toNanos(2),
             /* maxAgeInNanos= */ TimeUnit.SECONDS.toNanos(300),
             /* staleAgeInNanos= */ TimeUnit.SECONDS.toNanos(240),
             /* cacheSizeBytes= */ 1000,
@@ -351,7 +351,7 @@ public void convert_jsonRlsConfig_defaultValues() throws IOException {
                     ExtraKeys.DEFAULT,
                     ImmutableMap.<String, String>of())),
             /* lookupService= */ "service1",
-            /* lookupServiceTimeoutInMillis= */ TimeUnit.SECONDS.toNanos(10),
+            /* lookupServiceTimeoutInNanos= */ TimeUnit.SECONDS.toNanos(10),
             /* maxAgeInNanos= */ TimeUnit.MINUTES.toNanos(5),
             /* staleAgeInNanos= */ TimeUnit.MINUTES.toNanos(5),
             /* cacheSizeBytes= */ 5 * 1024 * 1024,
@@ -409,7 +409,7 @@ public void convert_jsonRlsConfig_staleAgeCappedByMaxAge() throws IOException {
                     ExtraKeys.DEFAULT,
                     ImmutableMap.<String, String>of())),
             /* lookupService= */ "service1",
-            /* lookupServiceTimeoutInMillis= */ TimeUnit.SECONDS.toNanos(2),
+            /* lookupServiceTimeoutInNanos= */ TimeUnit.SECONDS.toNanos(2),
             /* maxAgeInNanos= */ TimeUnit.SECONDS.toNanos(300),
             /* staleAgeInNanos= */ TimeUnit.SECONDS.toNanos(300),
             /* cacheSizeBytes= */ 1000,

File: rls/src/test/java/io/grpc/rls/RlsRequestFactoryTest.java
Patch:
@@ -65,9 +65,9 @@ public class RlsRequestFactoryTest {
                   ExtraKeys.create(null, null, null),
                   ImmutableMap.of("const-key-4", "const-value-4"))),
           /* lookupService= */ "bigtable-rls.googleapis.com",
-          /* lookupServiceTimeoutInMillis= */ TimeUnit.SECONDS.toMillis(2),
-          /* maxAgeInMillis= */ TimeUnit.SECONDS.toMillis(300),
-          /* staleAgeInMillis= */ TimeUnit.SECONDS.toMillis(240),
+          /* lookupServiceTimeoutInNanos= */ TimeUnit.SECONDS.toNanos(2),
+          /* maxAgeInNanos= */ TimeUnit.SECONDS.toNanos(300),
+          /* staleAgeInNanos= */ TimeUnit.SECONDS.toNanos(240),
           /* cacheSizeBytes= */ 1000,
           /* defaultTarget= */ "us_east_1.cloudbigtable.googleapis.com");
 

File: rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java
Patch:
@@ -128,9 +128,9 @@ private CachingRlsLbClient(Builder builder) {
     synchronizationContext = helper.getSynchronizationContext();
     lbPolicyConfig = checkNotNull(builder.lbPolicyConfig, "lbPolicyConfig");
     RouteLookupConfig rlsConfig = lbPolicyConfig.getRouteLookupConfig();
-    maxAgeNanos = TimeUnit.MILLISECONDS.toNanos(rlsConfig.getMaxAgeInMillis());
-    staleAgeNanos = TimeUnit.MILLISECONDS.toNanos(rlsConfig.getStaleAgeInMillis());
-    callTimeoutNanos = TimeUnit.MILLISECONDS.toNanos(rlsConfig.getLookupServiceTimeoutInMillis());
+    maxAgeNanos = rlsConfig.getMaxAgeInNanos();
+    staleAgeNanos = rlsConfig.getStaleAgeInNanos();
+    callTimeoutNanos = rlsConfig.getLookupServiceTimeoutInNanos();
     timeProvider = checkNotNull(builder.timeProvider, "timeProvider");
     throttler = checkNotNull(builder.throttler, "throttler");
     linkedHashLruCache =

File: alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java
Patch:
@@ -50,7 +50,7 @@ public static ChannelCredentials create() {
   /**
    * Returns a new instance of {@link Builder}.
    *
-   * @since 1.42.0
+   * @since 1.43.0
    */
   public static Builder newBuilder() {
     return new Builder();
@@ -59,7 +59,7 @@ public static Builder newBuilder() {
   /**
    * Builder for {@link GoogleDefaultChannelCredentials} instances.
    *
-   * @since 1.42.0
+   * @since 1.43.0
    */
   public static final class Builder {
     private CallCredentials callCredentials;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -413,6 +413,8 @@ public OkHttpChannelBuilder connectionSpec(
    *
    * @param tlsVersions List of tls versions.
    * @param cipherSuites List of cipher suites.
+   *
+   * @since  1.43.0
    */
   public OkHttpChannelBuilder tlsConnectionSpec(
           String[] tlsVersions, String[] cipherSuites) {

File: census/src/main/java/io/grpc/census/CensusStatsModule.java
Patch:
@@ -342,7 +342,6 @@ public void outboundMessage(int seqNo) {
 
     @Override
     public void streamClosed(Status status) {
-      attemptsState.attemptEnded();
       stopwatch.stop();
       roundtripNanos = stopwatch.elapsed(TimeUnit.NANOSECONDS);
       Deadline deadline = info.getCallOptions().getDeadline();
@@ -355,6 +354,7 @@ public void streamClosed(Status status) {
           statusCode = Code.DEADLINE_EXCEEDED;
         }
       }
+      attemptsState.attemptEnded();
       if (inboundReceivedOrClosed.compareAndSet(false, true)) {
         if (module.recordFinishedRpcs) {
           // Stream is closed early. So no need to record metrics for any inbound events after this
@@ -522,6 +522,8 @@ void recordFinishedCall() {
         tracer.statusCode = status.getCode();
         tracer.recordFinishedAttempt();
       } else if (inboundMetricTracer != null) {
+        // activeStreams has been decremented to 0 by attemptEnded(),
+        // so inboundMetricTracer.statusCode is guaranteed to be assigned already.
         inboundMetricTracer.recordFinishedAttempt();
       }
       if (!module.recordRetryMetrics) {

File: xds/src/main/java/io/grpc/xds/XdsServerWrapper.java
Patch:
@@ -224,6 +224,7 @@ public void run() {
           delegate.shutdownNow();
         }
         internalShutdown();
+        initialStartFuture.set(new IOException("server is forcefully shut down"));
       }
     });
     return this;

File: xds/src/main/java/io/grpc/xds/OrcaMetricReportingServerInterceptor.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.grpc.xds;
 
-import com.github.udpa.udpa.data.orca.v1.OrcaLoadReport;
+import com.github.xds.data.orca.v3.OrcaLoadReport;
 import com.google.common.annotations.VisibleForTesting;
 import io.grpc.Context;
 import io.grpc.Contexts;

File: xds/src/main/java/io/grpc/xds/OrcaOobUtil.java
Patch:
@@ -22,9 +22,9 @@
 import static io.grpc.ConnectivityState.READY;
 import static io.grpc.ConnectivityState.SHUTDOWN;
 
-import com.github.udpa.udpa.data.orca.v1.OrcaLoadReport;
-import com.github.udpa.udpa.service.orca.v1.OpenRcaServiceGrpc;
-import com.github.udpa.udpa.service.orca.v1.OrcaLoadReportRequest;
+import com.github.xds.data.orca.v3.OrcaLoadReport;
+import com.github.xds.service.orca.v3.OpenRcaServiceGrpc;
+import com.github.xds.service.orca.v3.OrcaLoadReportRequest;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;

File: xds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-import com.github.udpa.udpa.data.orca.v1.OrcaLoadReport;
+import com.github.xds.data.orca.v3.OrcaLoadReport;
 import com.google.common.annotations.VisibleForTesting;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;

File: xds/src/test/java/io/grpc/xds/OrcaMetricReportingServerInterceptorTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import com.github.udpa.udpa.data.orca.v1.OrcaLoadReport;
+import com.github.xds.data.orca.v3.OrcaLoadReport;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.ClientCall;

File: xds/src/test/java/io/grpc/xds/OrcaOobUtilTest.java
Patch:
@@ -34,9 +34,9 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
-import com.github.udpa.udpa.data.orca.v1.OrcaLoadReport;
-import com.github.udpa.udpa.service.orca.v1.OpenRcaServiceGrpc;
-import com.github.udpa.udpa.service.orca.v1.OrcaLoadReportRequest;
+import com.github.xds.data.orca.v3.OrcaLoadReport;
+import com.github.xds.service.orca.v3.OpenRcaServiceGrpc;
+import com.github.xds.service.orca.v3.OrcaLoadReportRequest;
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.protobuf.util.Durations;
 import io.grpc.Attributes;

File: xds/src/test/java/io/grpc/xds/OrcaPerRequestUtilTest.java
Patch:
@@ -27,7 +27,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
-import com.github.udpa.udpa.data.orca.v1.OrcaLoadReport;
+import com.github.xds.data.orca.v3.OrcaLoadReport;
 import io.grpc.ClientStreamTracer;
 import io.grpc.Metadata;
 import io.grpc.xds.OrcaPerRequestUtil.OrcaPerRequestReportListener;

File: xds/src/main/java/io/grpc/xds/BootstrapperImpl.java
Patch:
@@ -83,7 +83,7 @@ public BootstrapperImpl() {
    *   <li>A filesystem path defined by environment variable "GRPC_XDS_BOOTSTRAP"</li>
    *   <li>A filesystem path defined by Java System Property "io.grpc.xds.bootstrap"</li>
    *   <li>Environment variable value of "GRPC_XDS_BOOTSTRAP_CONFIG"</li>
-   *   <li>Java System Property value of "io.grpc.xds.bootstrap_value"</li>
+   *   <li>Java System Property value of "io.grpc.xds.bootstrapConfig"</li>
    * </ol>
    */
   @SuppressWarnings("unchecked")

File: xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java
Patch:
@@ -314,7 +314,7 @@ public String toString() {
    * Corresponds to Envoy proto message {@link io.envoyproxy.envoy.api.v2.listener.FilterChain}.
    */
   static final class FilterChain {
-    // Unique name for the FilterChain.
+    // possibly empty
     private final String name;
     // TODO(sanjaypujare): flatten structure by moving FilterChainMatch class members here.
     private final FilterChainMatch filterChainMatch;

File: xds/src/test/java/io/grpc/xds/ClientXdsClientDataTest.java
Patch:
@@ -1587,7 +1587,7 @@ public void parseFilterChain_unsupportedFilter() throws ResourceInvalidException
   }
 
   @Test
-  public void parseFilterChain_noName_generatedUuid() throws ResourceInvalidException {
+  public void parseFilterChain_noName() throws ResourceInvalidException {
     FilterChain filterChain1 =
         FilterChain.newBuilder()
             .setFilterChainMatch(FilterChainMatch.getDefaultInstance())
@@ -1615,7 +1615,7 @@ public void parseFilterChain_noName_generatedUuid() throws ResourceInvalidExcept
     EnvoyServerProtoData.FilterChain parsedFilterChain2 = ClientXdsClient.parseFilterChain(
         filterChain2, new HashSet<String>(), null, filterRegistry, null,
         null, true /* does not matter */);
-    assertThat(parsedFilterChain1.getName()).isNotEqualTo(parsedFilterChain2.getName());
+    assertThat(parsedFilterChain1.getName()).isEqualTo(parsedFilterChain2.getName());
   }
 
   @Test

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -287,8 +287,9 @@ void handleAddresses(
         cancelLbRpcRetryTimer();
         startLbRpc();
       }
-      // Start the fallback timer if it's never started
-      if (fallbackTimer == null) {
+      // Start the fallback timer if it's never started and we are not already using fallback
+      // backends.
+      if (fallbackTimer == null && !usingFallbackBackends) {
         fallbackTimer = syncContext.schedule(
             new FallbackModeTask(BALANCER_TIMEOUT_STATUS), FALLBACK_TIMEOUT_MS,
             TimeUnit.MILLISECONDS, timerService);

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -73,7 +73,6 @@
 import io.grpc.xds.EnvoyServerProtoData.FilterChainMatch;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
 import io.grpc.xds.Filter.ClientInterceptorBuilder;
-import io.grpc.xds.Filter.ConfigOrError;
 import io.grpc.xds.Filter.FilterConfig;
 import io.grpc.xds.Filter.NamedFilterConfig;
 import io.grpc.xds.Filter.ServerInterceptorBuilder;

File: xds/src/test/java/io/grpc/xds/RbacFilterTest.java
Patch:
@@ -52,7 +52,6 @@
 import io.grpc.ServerInterceptor;
 import io.grpc.Status;
 import io.grpc.testing.TestMethodDescriptors;
-import io.grpc.xds.Filter.ConfigOrError;
 import io.grpc.xds.Filter.FilterConfig;
 import io.grpc.xds.internal.rbac.engine.GrpcAuthorizationEngine;
 import io.grpc.xds.internal.rbac.engine.GrpcAuthorizationEngine.AlwaysTrueMatcher;

File: rls/src/main/java/io/grpc/rls/SubchannelStateManager.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.grpc.rls;
 
+import com.google.common.annotations.VisibleForTesting;
 import io.grpc.ConnectivityState;
 import javax.annotation.Nullable;
 
@@ -35,6 +36,7 @@ interface SubchannelStateManager {
    * {@code null}.
    */
   @Nullable
+  @VisibleForTesting
   ConnectivityState getState(String name);
 
   /** Returns representative subchannel status from all registered subchannels. */

File: rls/src/test/java/io/grpc/rls/ChildLoadBalancerHelperTest.java
Patch:
@@ -57,7 +57,7 @@ public void childLoadBalancerHelper_shouldReportsSubchannelState() {
         .isEqualTo(ConnectivityState.TRANSIENT_FAILURE);
 
     childLbHelper2.updateBalancingState(ConnectivityState.CONNECTING, picker2);
-    inOrder.verify(helper).updateBalancingState(ConnectivityState.CONNECTING, picker);
+    inOrder.verify(helper).updateBalancingState(ConnectivityState.TRANSIENT_FAILURE, picker);
     assertThat(subchannelStateManager.getState(target2)).isEqualTo(ConnectivityState.CONNECTING);
 
     childLbHelper1.updateBalancingState(ConnectivityState.READY, picker1);

File: core/src/main/java/io/grpc/internal/AbstractClientStream.java
Patch:
@@ -217,7 +217,7 @@ protected TransportTracer getTransportTracer() {
     return transportTracer;
   }
 
-  /** This should only called from the transport thread. */
+  /** This should only be called from the transport thread. */
   protected abstract static class TransportState extends AbstractStream.TransportState {
     /** Whether listener.closed() has been called. */
     private final StatsTraceContext statsTraceCtx;

File: core/src/main/java/io/grpc/internal/AbstractServerStream.java
Patch:
@@ -171,7 +171,7 @@ public StatsTraceContext statsTraceContext() {
   }
 
   /**
-   * This should only called from the transport thread (except for private interactions with
+   * This should only be called from the transport thread (except for private interactions with
    * {@code AbstractServerStream}).
    */
   protected abstract static class TransportState extends AbstractStream.TransportState {

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -105,7 +105,7 @@ protected final void onSendingBytes(int numBytes) {
   }
 
   /**
-   * Stream state as used by the transport. This should only called from the transport thread
+   * Stream state as used by the transport. This should only be called from the transport thread
    * (except for private interactions with {@code AbstractStream}).
    */
   public abstract static class TransportState

File: netty/src/main/java/io/grpc/netty/NettyClientStream.java
Patch:
@@ -219,7 +219,7 @@ public void cancel(Status status) {
     }
   }
 
-  /** This should only called from the transport thread. */
+  /** This should only be called from the transport thread. */
   public abstract static class TransportState extends Http2ClientStreamTransportState
       implements StreamIdHolder {
     private static final int NON_EXISTENT_ID = -1;

File: netty/src/main/java/io/grpc/netty/NettyServerStream.java
Patch:
@@ -164,7 +164,7 @@ public void cancel(Status status) {
     }
   }
 
-  /** This should only called from the transport thread. */
+  /** This should only be called from the transport thread. */
   public static class TransportState extends AbstractServerStream.TransportState
       implements StreamIdHolder {
     private final Http2Stream http2Stream;

File: xds/src/main/java/io/grpc/xds/internal/rbac/engine/GrpcAuthorizationEngine.java
Patch:
@@ -148,7 +148,7 @@ public abstract static class AuthenticatedMatcher implements Matcher {
 
     /**
      * Passing in null will match all authenticated user, i.e. SSL session is present.
-     * https://github.com/envoyproxy/envoy/blob/main/api/envoy/config/rbac/v3/rbac.proto#L240
+     * https://github.com/envoyproxy/envoy/blob/3975bf5dadb43421907bbc52df57c0e8539c9a06/api/envoy/config/rbac/v3/rbac.proto#L253
      * */
     public static AuthenticatedMatcher create(@Nullable Matchers.StringMatcher delegate) {
       return new AutoValue_GrpcAuthorizationEngine_AuthenticatedMatcher(delegate);

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -99,7 +99,6 @@ public final class NettyChannelBuilder extends
   private ObjectPool<? extends EventLoopGroup> eventLoopGroupPool = DEFAULT_EVENT_LOOP_GROUP_POOL;
   private boolean autoFlowControl = DEFAULT_AUTO_FLOW_CONTROL;
   private int flowControlWindow = DEFAULT_FLOW_CONTROL_WINDOW;
-  private int maxInboundMessageSize = GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;
   private int maxHeaderListSize = GrpcUtil.DEFAULT_MAX_HEADER_LIST_SIZE;
   private long keepAliveTimeNanos = KEEPALIVE_TIME_NANOS_DISABLED;
   private long keepAliveTimeoutNanos = DEFAULT_KEEPALIVE_TIMEOUT_NANOS;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -174,7 +174,6 @@ public static OkHttpChannelBuilder forTarget(String target, ChannelCredentials c
   private long keepAliveTimeoutNanos = DEFAULT_KEEPALIVE_TIMEOUT_NANOS;
   private int flowControlWindow = DEFAULT_FLOW_CONTROL_WINDOW;
   private boolean keepAliveWithoutCalls;
-  private int maxInboundMessageSize = GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;
   private int maxInboundMetadataSize = Integer.MAX_VALUE;
 
   /**

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -138,8 +138,8 @@ final class ClientXdsClient extends AbstractXdsClient {
           || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RETRY"));
   @VisibleForTesting
   static boolean enableRbac =
-      !Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_RBAC"))
-          && Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_RBAC"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_RBAC"))
+          || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_RBAC"));
 
   private static final String TYPE_URL_HTTP_CONNECTION_MANAGER_V2 =
       "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2"

File: xds/src/test/java/io/grpc/xds/ClientXdsClientDataTest.java
Patch:
@@ -138,8 +138,7 @@ public void setUp() {
     originalEnableRetry = ClientXdsClient.enableRetry;
     assertThat(originalEnableRetry).isTrue();
     originalEnableRbac = ClientXdsClient.enableRbac;
-    assertThat(originalEnableRbac).isFalse();
-    ClientXdsClient.enableRbac = true;
+    assertThat(originalEnableRbac).isTrue();
   }
 
   @After

File: xds/src/test/java/io/grpc/xds/ClientXdsClientTestBase.java
Patch:
@@ -260,8 +260,7 @@ public void setUp() throws IOException {
     originalEnableFaultInjection = ClientXdsClient.enableFaultInjection;
     ClientXdsClient.enableFaultInjection = true;
     originalEnableRbac = ClientXdsClient.enableRbac;
-    assertThat(originalEnableRbac).isFalse();
-    ClientXdsClient.enableRbac = true;
+    assertThat(originalEnableRbac).isTrue();
     final String serverName = InProcessServerBuilder.generateName();
     cleanupRule.register(
         InProcessServerBuilder

File: binder/src/main/java/io/grpc/binder/SecurityPolicy.java
Patch:
@@ -35,7 +35,7 @@
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/8022")
 public abstract class SecurityPolicy {
 
-  public SecurityPolicy() {}
+  protected SecurityPolicy() {}
 
   /**
    * Decides whether the given Android UID is authorized. (Validity is implementation dependent).

File: binder/src/main/java/io/grpc/binder/internal/BinderTransport.java
Patch:
@@ -87,7 +87,7 @@
  * need to call into this class to send a transaction (possibly waiting for the transport to become
  * ready).
  *
- * <p>The split between Outbound & Inbound helps reduce this risk, but not entirely remove it.
+ * <p>The split between Outbound &amp; Inbound helps reduce this risk, but not entirely remove it.
  *
  * <p>For this reason, while most state within this class is guarded by this instance, methods
  * exposed to individual stream instances need to use atomic or volatile types, since those calls

File: binder/src/main/java/io/grpc/binder/internal/MetadataHelper.java
Patch:
@@ -31,7 +31,7 @@
 import javax.annotation.Nullable;
 
 /**
- * Helper class for reading & writing metadata to parcels.
+ * Helper class for reading &amp; writing metadata to parcels.
  *
  * <p>Metadata is written to a parcel as a single int for the number of name/value pairs, followed
  * by the following pattern for each pair.

File: binder/src/main/java/io/grpc/binder/internal/Outbound.java
Patch:
@@ -219,6 +219,7 @@ final void send() throws StatusException {
   }
 
   @GuardedBy("this")
+  @SuppressWarnings("fallthrough")
   protected final void sendInternal() throws StatusException {
     Parcel parcel = Parcel.obtain();
     int flags = 0;

File: xds/src/test/java/io/grpc/xds/XdsServerTestHelper.java
Patch:
@@ -113,14 +113,15 @@ static final class FakeXdsClientPoolFactory
         implements XdsNameResolverProvider.XdsClientPoolFactory {
 
     private XdsClient xdsClient;
+    Map<String, ?> savedBootstrap;
 
     FakeXdsClientPoolFactory(XdsClient xdsClient) {
       this.xdsClient = xdsClient;
     }
 
     @Override
     public void setBootstrapOverride(Map<String, ?> bootstrap) {
-      throw new UnsupportedOperationException("Should not be called");
+      this.savedBootstrap = bootstrap;
     }
 
     @Override

File: xds/src/test/java/io/grpc/xds/RbacFilterTest.java
Patch:
@@ -256,7 +256,8 @@ public void testAuthorizationInterceptor() {
     verify(mockHandler, never()).startCall(eq(mockServerCall), any(Metadata.class));
     ArgumentCaptor<Status> captor = ArgumentCaptor.forClass(Status.class);
     verify(mockServerCall).close(captor.capture(), any(Metadata.class));
-    assertThat(captor.getValue().getCode()).isEqualTo(Status.UNAUTHENTICATED.getCode());
+    assertThat(captor.getValue().getCode()).isEqualTo(Status.PERMISSION_DENIED.getCode());
+    assertThat(captor.getValue().getDescription()).isEqualTo("Access Denied");
     verify(mockServerCall).getAttributes();
     verifyNoMoreInteractions(mockServerCall);
 

File: android/src/main/java/io/grpc/android/AndroidChannelBuilder.java
Patch:
@@ -150,7 +150,7 @@ public ManagedChannel build() {
 
   /**
    * Wraps an OkHttp channel and handles invoking the appropriate methods (e.g., {@link
-   * ManagedChannel#enterIdle) when the device network state changes.
+   * ManagedChannel#enterIdle}) when the device network state changes.
    */
   @VisibleForTesting
   static final class AndroidChannel extends ManagedChannel {

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -91,9 +91,6 @@ public final void setCompressor(Compressor compressor) {
 
   @Override
   public boolean isReady() {
-    if (framer().isClosed()) {
-      return false;
-    }
     return transportState().isReady();
   }
 

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -544,6 +544,9 @@ public void setMessageCompression(boolean enabled) {
 
   @Override
   public boolean isReady() {
+    if (halfCloseCalled) {
+      return false;
+    }
     return stream.isReady();
   }
 

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -194,6 +194,9 @@ public void setCompression(String compressorName) {
 
   @Override
   public boolean isReady() {
+    if (closeCalled) {
+      return false;
+    }
     return stream.isReady();
   }
 

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -334,6 +334,8 @@ public void isReady() {
     when(stream.isReady()).thenReturn(true);
 
     assertTrue(call.isReady());
+    call.close(Status.OK, new Metadata());
+    assertFalse(call.isReady());
   }
 
   @Test

File: stub/src/main/java/io/grpc/stub/ServerCallStreamObserver.java
Patch:
@@ -168,5 +168,7 @@ public void disableAutoRequest() {
    * @param onCloseHandler to execute when the call has been closed cleanly.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/8467")
-  public abstract void setOnCloseHandler(Runnable onCloseHandler);
+  public void setOnCloseHandler(Runnable onCloseHandler) {
+    throw new UnsupportedOperationException();
+  }
 }

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancer2.java
Patch:
@@ -179,7 +179,8 @@ private void handleClusterDiscovered() {
           childLb = null;
         }
         Status unavailable =
-            Status.UNAVAILABLE.withDescription("Cluster " + root.name + " unusable");
+            Status.UNAVAILABLE.withDescription("CDS error: found 0 leaf (logical DNS or EDS) "
+                + "clusters for root cluster " + root.name);
         helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(unavailable));
         return;
       }

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -566,7 +566,8 @@ private static void checkForUniqueness(Set<FilterChainMatch> uniqueSet,
       List<FilterChainMatch> crossProduct = getCrossProduct(filterChainMatch);
       for (FilterChainMatch cur : crossProduct) {
         if (!uniqueSet.add(cur)) {
-          throw new ResourceInvalidException("Found duplicate matcher: " + cur);
+          throw new ResourceInvalidException("FilterChainMatch must be unique. "
+              + "Found duplicate: " + cur);
         }
       }
     }

File: xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java
Patch:
@@ -124,7 +124,9 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
         if (config.lrsServerName.isEmpty()) {
           dropStats = xdsClient.addClusterDropStats(cluster, edsServiceName);
         } else {
-          logger.log(XdsLogLevel.WARNING, "Can only report load to the same management server");
+          logger.log(XdsLogLevel.WARNING, "Cluster {0} config error: can only report load "
+              + "to the same management server. Config lrsServerName {1} should be empty. ",
+              cluster, config.lrsServerName);
         }
       }
     }

File: xds/src/main/java/io/grpc/xds/ClusterManagerLoadBalancer.java
Patch:
@@ -149,7 +149,8 @@ public PickResult pickSubchannel(PickSubchannelArgs args) {
           if (delegate == null) {
             return
                 PickResult.withError(
-                    Status.UNAVAILABLE.withDescription("Unable to find cluster " + clusterName));
+                    Status.UNAVAILABLE.withDescription("CDS encountered error: unable to find "
+                        + "available subchannel for cluster " + clusterName));
           }
           return delegate.pickSubchannel(args);
         }

File: xds/src/main/java/io/grpc/xds/internal/rbac/engine/GrpcAuthorizationEngine.java
Patch:
@@ -78,8 +78,6 @@ public AuthDecision evaluate(Metadata metadata, ServerCall<?,?> serverCall) {
     if (Action.DENY.equals(authConfig.action()) == (firstMatch == null)) {
       decisionType = Action.ALLOW;
     }
-    log.log(Level.FINER, "RBAC decision: {0}, policy match: {1}.",
-            new Object[]{decisionType, firstMatch});
     return AuthDecision.create(decisionType, firstMatch);
   }
 

File: xds/src/test/java/io/grpc/xds/ClientXdsClientDataTest.java
Patch:
@@ -1407,7 +1407,7 @@ public void parseServerSideListener_nonUniqueFilterChainMatch() throws ResourceI
             .addAllFilterChains(Arrays.asList(filterChain1, filterChain2))
             .build();
     thrown.expect(ResourceInvalidException.class);
-    thrown.expectMessage("Found duplicate matcher:");
+    thrown.expectMessage("FilterChainMatch must be unique. Found duplicate:");
     ClientXdsClient.parseServerSideListener(
         listener, new HashSet<String>(), null, filterRegistry, null, true /* does not matter */);
   }
@@ -1456,7 +1456,7 @@ public void parseServerSideListener_nonUniqueFilterChainMatch_sameFilter()
             .addAllFilterChains(Arrays.asList(filterChain1, filterChain2))
             .build();
     thrown.expect(ResourceInvalidException.class);
-    thrown.expectMessage("Found duplicate matcher:");
+    thrown.expectMessage("FilterChainMatch must be unique. Found duplicate:");
     ClientXdsClient.parseServerSideListener(
         listener, new HashSet<String>(), null, filterRegistry, null, true /* does not matter */);
   }

File: xds/src/test/java/io/grpc/xds/ClusterManagerLoadBalancerTest.java
Patch:
@@ -138,7 +138,8 @@ public void handleResolvedAddressesUpdatesChannelPicker() {
     assertThat(pickSubchannel(picker, "childC")).isEqualTo(PickResult.withNoResult());
     Status status = pickSubchannel(picker, "childB").getStatus();
     assertThat(status.getCode()).isEqualTo(Code.UNAVAILABLE);
-    assertThat(status.getDescription()).isEqualTo("Unable to find cluster childB");
+    assertThat(status.getDescription()).isEqualTo(
+        "CDS encountered error: unable to find available subchannel for cluster childB");
     assertThat(fakeClock.numPendingTasks())
         .isEqualTo(1);  // (delayed) shutdown because "childB" is removed
     assertThat(childBalancer1.shutdown).isFalse();

File: alts/src/main/java/io/grpc/alts/internal/TsiHandshakerFactory.java
Patch:
@@ -16,11 +16,12 @@
 
 package io.grpc.alts.internal;
 
+import io.grpc.ChannelLogger;
 import javax.annotation.Nullable;
 
 /** Factory that manufactures instances of {@link TsiHandshaker}. */
 public interface TsiHandshakerFactory {
 
   /** Creates a new handshaker. */
-  TsiHandshaker newHandshaker(@Nullable String authority);
+  TsiHandshaker newHandshaker(@Nullable String authority, ChannelLogger logger);
 }

File: api/src/main/java/io/grpc/ChannelLogger.java
Patch:
@@ -36,8 +36,8 @@ public abstract class ChannelLogger {
    * | ChannelLogger Level | Channelz Severity | Java Logger Level |
    * +---------------------+-------------------+-------------------+
    * | DEBUG               | N/A               | FINEST            |
-   * | INFO                | CT_INFO           | FINEST            |
-   * | WARNING             | CT_WARNING        | FINER             |
+   * | INFO                | CT_INFO           | FINER             |
+   * | WARNING             | CT_WARNING        | FINE             |
    * | ERROR               | CT_ERROR          | FINE              |
    * +---------------------+-------------------+-------------------+
    * </pre>

File: core/src/main/java/io/grpc/internal/ChannelLoggerImpl.java
Patch:
@@ -97,8 +97,9 @@ private static Severity toTracerSeverity(ChannelLogLevel level) {
   private static Level toJavaLogLevel(ChannelLogLevel level) {
     switch (level) {
       case ERROR:
-        return Level.FINE;
       case WARNING:
+        return Level.FINE;
+      case INFO:
         return Level.FINER;
       default:
         return Level.FINEST;

File: api/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -108,6 +108,8 @@ public abstract class ClientCall<ReqT, RespT> {
    * an instance from multiple threads, but only one call simultaneously. A single thread may
    * interleave calls to multiple instances, so implementations using ThreadLocals must be careful
    * to avoid leaking inappropriate state (e.g., clearing the ThreadLocal before returning).
+   *
+   * @param <T> type of message received.
    */
   public abstract static class Listener<T> {
 

File: stub/src/main/java/io/grpc/stub/CallStreamObserver.java
Patch:
@@ -49,6 +49,8 @@
  *
  * <p>DO NOT MOCK: The API is too complex to reliably mock. Use InProcessChannelBuilder to create
  * "real" RPCs suitable for testing.
+ *
+ * @param <V> type of outbound message.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/8499")
 public abstract class CallStreamObserver<V> implements StreamObserver<V> {

File: stub/src/main/java/io/grpc/stub/ServerCalls.java
Patch:
@@ -447,7 +447,7 @@ public static void asyncUnimplementedUnaryCall(
    * @param methodDescriptor of method for which error will be thrown.
    * @param responseObserver on which error will be set.
    */
-  public static <T> StreamObserver<T> asyncUnimplementedStreamingCall(
+  public static <ReqT> StreamObserver<ReqT> asyncUnimplementedStreamingCall(
       MethodDescriptor<?, ?> methodDescriptor, StreamObserver<?> responseObserver) {
     // NB: For streaming call we want to do the same as for unary call. Fail-fast by setting error
     // on responseObserver and then return no-op observer.

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -138,8 +138,8 @@ final class ClientXdsClient extends AbstractXdsClient {
           || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RETRY"));
   @VisibleForTesting
   static boolean enableRbac =
-      Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_RBAC"))
-          || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_RBAC"));
+      !Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_RBAC"))
+          && Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_RBAC"));
 
   private static final String TYPE_URL_HTTP_CONNECTION_MANAGER_V2 =
       "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2"
@@ -222,7 +222,7 @@ protected void handleLdsResponse(String versionInfo, List<Any> resources, String
               listener, retainedRdsResources, enableFaultInjection && isResourceV3);
         } else {
           ldsUpdate = processServerSideListener(
-              listener, retainedRdsResources, enableRbac);
+              listener, retainedRdsResources, enableRbac && isResourceV3);
         }
       } catch (ResourceInvalidException e) {
         errors.add(

File: xds/src/test/java/io/grpc/xds/ClientXdsClientDataTest.java
Patch:
@@ -138,7 +138,8 @@ public void setUp() {
     originalEnableRetry = ClientXdsClient.enableRetry;
     assertThat(originalEnableRetry).isTrue();
     originalEnableRbac = ClientXdsClient.enableRbac;
-    assertThat(originalEnableRbac).isTrue();
+    assertThat(originalEnableRbac).isFalse();
+    ClientXdsClient.enableRbac = true;
   }
 
   @After

File: xds/src/test/java/io/grpc/xds/FilterChainMatchingProtocolNegotiatorsTest.java
Patch:
@@ -170,7 +170,9 @@ public void filterSelectorChange_drainsConnection() {
     channel.runPendingTasks();
     channelHandlerCtx = pipeline.context(next);
     assertThat(channelHandlerCtx).isNotNull();
-    assertThat(channel.readOutbound()).isNull();
+    // Force return value to Object, to avoid confusing javac of the type passed to assertThat()
+    Object msg = channel.readOutbound();
+    assertThat(msg).isNull();
 
     selectorManager.updateSelector(new FilterChainSelector(
             new HashMap<FilterChain, ServerRoutingConfig>(), null, noopConfig));

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -24,6 +24,7 @@
 import static io.grpc.Status.DEADLINE_EXCEEDED;
 import static io.grpc.internal.GrpcUtil.CONTENT_ACCEPT_ENCODING_KEY;
 import static io.grpc.internal.GrpcUtil.CONTENT_ENCODING_KEY;
+import static io.grpc.internal.GrpcUtil.CONTENT_LENGTH_KEY;
 import static io.grpc.internal.GrpcUtil.MESSAGE_ACCEPT_ENCODING_KEY;
 import static io.grpc.internal.GrpcUtil.MESSAGE_ENCODING_KEY;
 import static java.lang.Math.max;
@@ -163,6 +164,7 @@ static void prepareHeaders(
       DecompressorRegistry decompressorRegistry,
       Compressor compressor,
       boolean fullStreamDecompression) {
+    headers.discardAll(CONTENT_LENGTH_KEY);
     headers.discardAll(MESSAGE_ENCODING_KEY);
     if (compressor != Codec.Identity.NONE) {
       headers.put(MESSAGE_ENCODING_KEY, compressor.getMessageEncoding());

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -109,6 +109,9 @@ public final class GrpcUtil {
   public static final Metadata.Key<byte[]> CONTENT_ACCEPT_ENCODING_KEY =
       InternalMetadata.keyOf(GrpcUtil.CONTENT_ACCEPT_ENCODING, new AcceptEncodingMarshaller());
 
+  static final Metadata.Key<String> CONTENT_LENGTH_KEY =
+      Metadata.Key.of("content-length", Metadata.ASCII_STRING_MARSHALLER);
+
   private static final class AcceptEncodingMarshaller implements TrustedAsciiMarshaller<byte[]> {
     @Override
     public byte[] toAsciiString(byte[] value) {

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 import static io.grpc.internal.GrpcUtil.ACCEPT_ENCODING_SPLITTER;
+import static io.grpc.internal.GrpcUtil.CONTENT_LENGTH_KEY;
 import static io.grpc.internal.GrpcUtil.MESSAGE_ACCEPT_ENCODING_KEY;
 import static io.grpc.internal.GrpcUtil.MESSAGE_ENCODING_KEY;
 
@@ -107,6 +108,7 @@ private void sendHeadersInternal(Metadata headers) {
     checkState(!sendHeadersCalled, "sendHeaders has already been called");
     checkState(!closeCalled, "call is closed");
 
+    headers.discardAll(CONTENT_LENGTH_KEY);
     headers.discardAll(MESSAGE_ENCODING_KEY);
     if (compressor == null) {
       compressor = Codec.Identity.NONE;

File: stub/src/main/java/io/grpc/stub/CallStreamObserver.java
Patch:
@@ -50,7 +50,7 @@
  * <p>DO NOT MOCK: The API is too complex to reliably mock. Use InProcessChannelBuilder to create
  * "real" RPCs suitable for testing.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1788")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/8499")
 public abstract class CallStreamObserver<V> implements StreamObserver<V> {
 
   /**

File: census/src/main/java/io/grpc/census/CensusStatsModule.java
Patch:
@@ -498,7 +498,7 @@ void callEnded(Status status) {
       boolean shouldRecordFinishedCall = false;
       synchronized (lock) {
         if (callEnded) {
-          // FIXME(https://github.com/grpc/grpc-java/issues/7921): this shouldn't happen
+          // TODO(https://github.com/grpc/grpc-java/issues/7921): this shouldn't happen
           return;
         }
         callEnded = true;

File: xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java
Patch:
@@ -69,7 +69,8 @@ final class ClusterImplLoadBalancer extends LoadBalancer {
           || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_CIRCUIT_BREAKING"));
   @VisibleForTesting
   static boolean enableSecurity =
-      Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_SECURITY_SUPPORT"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_SECURITY_SUPPORT"))
+          || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_SECURITY_SUPPORT"));
   private static final Attributes.Key<ClusterLocalityStats> ATTR_CLUSTER_LOCALITY_STATS =
       Attributes.Key.create("io.grpc.xds.ClusterImplLoadBalancer.clusterLocalityStats");
 

File: core/src/main/java/io/grpc/internal/MessageFramer.java
Patch:
@@ -267,7 +267,7 @@ private static int writeToOutputStream(InputStream message, OutputStream outputS
       return ((Drainable) message).drainTo(outputStream);
     } else {
       // This makes an unnecessary copy of the bytes when bytebuf supports array(). However, we
-      // expect performance-critical code to support flushTo().
+      // expect performance-critical code to support drainTo().
       @SuppressWarnings("BetaApi") // ByteStreams is not Beta in v27
       long written = ByteStreams.copy(message, outputStream);
       checkArgument(written <= Integer.MAX_VALUE, "Message size overflow: %s", written);

File: xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java
Patch:
@@ -32,14 +32,15 @@
 import java.security.cert.CertStoreException;
 import java.security.cert.X509Certificate;
 import java.util.Map;
+import javax.annotation.Nullable;
 
 /** A client SslContext provider using CertificateProviderInstance to fetch secrets. */
 @Internal
 public final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {
 
   private CertProviderClientSslContextProvider(
       Node node,
-      Map<String, CertificateProviderInfo> certProviders,
+      @Nullable Map<String, CertificateProviderInfo> certProviders,
       CommonTlsContext.CertificateProviderInstance certInstance,
       CommonTlsContext.CertificateProviderInstance rootCertInstance,
       CertificateValidationContext staticCertValidationContext,
@@ -90,7 +91,7 @@ public static Factory getInstance() {
     public CertProviderClientSslContextProvider getProvider(
         UpstreamTlsContext upstreamTlsContext,
         Node node,
-        Map<String, CertificateProviderInfo> certProviders) {
+        @Nullable Map<String, CertificateProviderInfo> certProviders) {
       checkNotNull(upstreamTlsContext, "upstreamTlsContext");
       CommonTlsContext commonTlsContext = upstreamTlsContext.getCommonTlsContext();
       CommonTlsContext.CertificateProviderInstance rootCertInstance = null;

File: xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderServerSslContextProvider.java
Patch:
@@ -35,14 +35,15 @@
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
 import java.util.Map;
+import javax.annotation.Nullable;
 
 /** A server SslContext provider using CertificateProviderInstance to fetch secrets. */
 @Internal
 public final class CertProviderServerSslContextProvider extends CertProviderSslContextProvider {
 
   private CertProviderServerSslContextProvider(
           Node node,
-          Map<String, CertificateProviderInfo> certProviders,
+          @Nullable Map<String, CertificateProviderInfo> certProviders,
           CommonTlsContext.CertificateProviderInstance certInstance,
           CommonTlsContext.CertificateProviderInstance rootCertInstance,
           CertificateValidationContext staticCertValidationContext,
@@ -93,7 +94,7 @@ public static Factory getInstance() {
     public CertProviderServerSslContextProvider getProvider(
         DownstreamTlsContext downstreamTlsContext,
         Node node,
-        Map<String, CertificateProviderInfo> certProviders) {
+        @Nullable Map<String, CertificateProviderInfo> certProviders) {
       checkNotNull(downstreamTlsContext, "downstreamTlsContext");
       CommonTlsContext commonTlsContext = downstreamTlsContext.getCommonTlsContext();
       CommonTlsContext.CertificateProviderInstance rootCertInstance = null;

File: xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java
Patch:
@@ -146,7 +146,7 @@ public static DownstreamTlsContext buildTestDownstreamTlsContext(
     if (certName != null || validationContextCertName != null || useSans) {
       commonTlsContext = buildCommonTlsContextWithAdditionalValues(
           "cert-instance-name", certName,
-          "val-cert-instance-name", validationContextCertName,
+          "cert-instance-name", validationContextCertName,
           useSans ? Arrays.asList(
               StringMatcher.newBuilder()
                   .setExact("spiffe://grpc-sds-testing.svc.id.goog/ns/default/sa/bob")

File: xds/src/main/java/io/grpc/xds/GoogleCloudToProdNameResolver.java
Patch:
@@ -184,11 +184,11 @@ public void run() {
           ImmutableMap.of("TRAFFICDIRECTOR_DIRECTPATH_C2P_IPV6_CAPABLE", true));
     }
     ImmutableMap.Builder<String, Object> serverBuilder = ImmutableMap.builder();
-    String server_uri = "directpath-pa.googleapis.com";
+    String serverUri = "directpath-pa.googleapis.com";
     if (serverUriOverride != null && serverUriOverride.length() > 0) {
-      server_uri = serverUriOverride;
+      serverUri = serverUriOverride;
     }
-    serverBuilder.put("server_uri", server_uri);
+    serverBuilder.put("server_uri", serverUri);
     serverBuilder.put("channel_creds",
         ImmutableList.of(ImmutableMap.of("type", "google_default")));
     serverBuilder.put("server_features", ImmutableList.of("xds_v3"));

File: xds/src/main/java/io/grpc/xds/GoogleCloudToProdNameResolver.java
Patch:
@@ -184,7 +184,7 @@ public void run() {
           ImmutableMap.of("TRAFFICDIRECTOR_DIRECTPATH_C2P_IPV6_CAPABLE", true));
     }
     ImmutableMap.Builder<String, Object> serverBuilder = ImmutableMap.builder();
-    String server_uri = "directpath-trafficdirector.googleapis.com";
+    String server_uri = "directpath-pa.googleapis.com";
     if (serverUriOverride != null && serverUriOverride.length() > 0) {
       server_uri = serverUriOverride;
     }

File: xds/src/test/java/io/grpc/xds/GoogleCloudToProdNameResolverTest.java
Patch:
@@ -189,7 +189,7 @@ public void onGcpAndNoProvidedBootstrapDelegateToXds() {
     Map<String, ?> server = Iterables.getOnlyElement(
         (List<Map<String, ?>>) bootstrap.get("xds_servers"));
     assertThat(server).containsExactly(
-        "server_uri", "directpath-trafficdirector.googleapis.com",
+        "server_uri", "directpath-pa.googleapis.com",
         "channel_creds", ImmutableList.of(ImmutableMap.of("type", "google_default")),
         "server_features", ImmutableList.of("xds_v3"));
   }

File: netty/src/test/java/io/grpc/netty/AdvancedTlsTest.java
Patch:
@@ -59,7 +59,10 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
+@RunWith(JUnit4.class)
 public class AdvancedTlsTest {
   public static final String SERVER_0_KEY_FILE = "server0.key";
   public static final String SERVER_0_PEM_FILE = "server0.pem";

File: xds/src/main/java/io/grpc/xds/RingHashLoadBalancerProvider.java
Patch:
@@ -17,6 +17,7 @@
 package io.grpc.xds;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Strings;
 import io.grpc.Internal;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancer.Helper;
@@ -45,7 +46,8 @@ public final class RingHashLoadBalancerProvider extends LoadBalancerProvider {
   static final long MAX_RING_SIZE = 8 * 1024 * 1024L;
 
   private static final boolean enableRingHash =
-      Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RING_HASH"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RING_HASH"))
+          || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RING_HASH"));
 
   @Override
   public LoadBalancer newLoadBalancer(Helper helper) {

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancer2.java
Patch:
@@ -188,8 +188,10 @@ private void handleClusterDiscovered() {
       if (root.result.lbPolicy() == LbPolicy.RING_HASH) {
         lbProvider = lbRegistry.getProvider("ring_hash");
         lbConfig = new RingHashConfig(root.result.minRingSize(), root.result.maxRingSize());
-      } else {
+      }
+      if (lbProvider == null) {
         lbProvider = lbRegistry.getProvider("round_robin");
+        lbConfig = null;
       }
       ClusterResolverConfig config = new ClusterResolverConfig(
           Collections.unmodifiableList(instances), new PolicySelection(lbProvider, lbConfig));

File: interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java
Patch:
@@ -369,7 +369,7 @@ public void onCompleted() {
                 @Override
                 public void onError(Throwable t) {
                   if (printResponse) {
-                    logger.log(Level.WARNING, "Rpc failed: {0}", t);
+                    logger.log(Level.WARNING, "Rpc failed", t);
                   }
                   handleRpcError(requestId, config.rpcType, Status.fromThrowable(t),
                       savedWatchers);

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -134,8 +134,8 @@ final class ClientXdsClient extends AbstractXdsClient {
           || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_FAULT_INJECTION"));
   @VisibleForTesting
   static boolean enableRetry =
-      !Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RETRY"))
-          && Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RETRY"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RETRY"))
+          || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_RETRY"));
 
   private static final String TYPE_URL_HTTP_CONNECTION_MANAGER_V2 =
       "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2"

File: xds/src/test/java/io/grpc/xds/ClientXdsClientDataTest.java
Patch:
@@ -136,7 +136,7 @@ public class ClientXdsClientDataTest {
   @Before
   public void setUp() {
     originalEnableRetry = ClientXdsClient.enableRetry;
-    assertThat(originalEnableRetry).isFalse();
+    assertThat(originalEnableRetry).isTrue();
   }
 
   @After

File: api/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -467,7 +467,6 @@ public T perRpcBufferLimit(long bytes) {
    * @return this
    * @since 1.11.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/3982")
   public T disableRetry() {
     throw new UnsupportedOperationException();
   }
@@ -482,7 +481,6 @@ public T disableRetry() {
    * @return this
    * @since 1.11.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/3982")
   public T enableRetry() {
     throw new UnsupportedOperationException();
   }

File: core/src/main/java/io/grpc/internal/ManagedChannelImplBuilder.java
Patch:
@@ -142,7 +142,7 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
   int maxHedgedAttempts = 5;
   long retryBufferSize = DEFAULT_RETRY_BUFFER_SIZE_IN_BYTES;
   long perRpcBufferLimit = DEFAULT_PER_RPC_BUFFER_LIMIT_IN_BYTES;
-  boolean retryEnabled = false; // TODO(zdapeng): default to true
+  boolean retryEnabled = true;
 
   InternalChannelz channelz = InternalChannelz.instance();
   int maxTraceEvents;

File: rls/src/main/java/io/grpc/rls/RlsLoadBalancer.java
Patch:
@@ -82,7 +82,9 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
 
   @Override
   public void requestConnection() {
-    routeLookupClient.requestConnection();
+    if (routeLookupClient != null) {
+      routeLookupClient.requestConnection();
+    }
   }
 
   @Override

File: api/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -50,7 +50,9 @@
  * <p>Implementations <strong>don't need to be thread-safe</strong>.  All methods are guaranteed to
  * be called sequentially.  Additionally, all methods that have side-effects, i.e.,
  * {@link #start(Listener2)}, {@link #shutdown} and {@link #refresh} are called from the same
- * {@link SynchronizationContext} as returned by {@link Args#getSynchronizationContext}.
+ * {@link SynchronizationContext} as returned by {@link Args#getSynchronizationContext}. <strong>Do
+ * not block</strong> within the synchronization context; blocking I/O and time-consuming tasks
+ * should be offloaded to a separate thread, generally {@link Args#getOffloadExecutor}.
  *
  * @since 1.0.0
  */

File: xds/src/test/java/io/grpc/xds/XdsServerTestHelper.java
Patch:
@@ -47,7 +47,7 @@ public class XdsServerTestHelper {
   static final Bootstrapper.BootstrapInfo BOOTSTRAP_INFO =
       new Bootstrapper.BootstrapInfo(
           Arrays.asList(
-              new Bootstrapper.ServerInfo(SERVER_URI, InsecureChannelCredentials.create(), false)),
+              new Bootstrapper.ServerInfo(SERVER_URI, InsecureChannelCredentials.create(), true)),
           BOOTSTRAP_NODE,
           null,
           "grpc/server?udpa.resource.listening_address=%s");

File: api/src/main/java/io/grpc/ProxyDetector.java
Patch:
@@ -32,7 +32,7 @@
  * underlying transport need to work together.
  *
  * <p>The {@link NameResolver} should invoke the {@link ProxyDetector} retrieved from the {@link
- * NameResolver.Helper#getProxyDetector}, and pass the returned {@link ProxiedSocketAddress} to
+ * NameResolver.Args#getProxyDetector}, and pass the returned {@link ProxiedSocketAddress} to
  * {@link NameResolver.Listener#onAddresses}.  The DNS name resolver shipped with gRPC is already
  * doing so.
  *

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -764,7 +764,7 @@ private void respondWithHttpError(
 
     Http2Headers headers = new DefaultHttp2Headers(true, serialized.length / 2)
         .status("" + code)
-        .set(CONTENT_TYPE_HEADER, "text/plain; encoding=utf-8");
+        .set(CONTENT_TYPE_HEADER, "text/plain; charset=utf-8");
     for (int i = 0; i < serialized.length; i += 2) {
       headers.add(new AsciiString(serialized[i], false), new AsciiString(serialized[i + 1], false));
     }

File: alts/src/generated/main/grpc/io/grpc/alts/internal/HandshakerServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/gcp/handshaker.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class HandshakerServiceGrpc {
 
   private HandshakerServiceGrpc() {}

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class LoadBalancerStatsServiceGrpc {
 
   private LoadBalancerStatsServiceGrpc() {}

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/metrics.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class MetricsServiceGrpc {
 
   private MetricsServiceGrpc() {}

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ReconnectServiceGrpc {
 
   private ReconnectServiceGrpc() {}

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -11,6 +11,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class TestServiceGrpc {
 
   private TestServiceGrpc() {}

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -11,6 +11,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class UnimplementedServiceGrpc {
 
   private UnimplementedServiceGrpc() {}

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class XdsUpdateClientConfigureServiceGrpc {
 
   private XdsUpdateClientConfigureServiceGrpc() {}

File: android-interop-testing/src/generated/debug/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class XdsUpdateHealthServiceGrpc {
 
   private XdsUpdateHealthServiceGrpc() {}

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class LoadBalancerStatsServiceGrpc {
 
   private LoadBalancerStatsServiceGrpc() {}

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/metrics.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class MetricsServiceGrpc {
 
   private MetricsServiceGrpc() {}

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ReconnectServiceGrpc {
 
   private ReconnectServiceGrpc() {}

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -11,6 +11,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class TestServiceGrpc {
 
   private TestServiceGrpc() {}

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -11,6 +11,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class UnimplementedServiceGrpc {
 
   private UnimplementedServiceGrpc() {}

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class XdsUpdateClientConfigureServiceGrpc {
 
   private XdsUpdateClientConfigureServiceGrpc() {}

File: android-interop-testing/src/generated/release/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class XdsUpdateHealthServiceGrpc {
 
   private XdsUpdateHealthServiceGrpc() {}

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/BenchmarkServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/services.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class BenchmarkServiceGrpc {
 
   private BenchmarkServiceGrpc() {}

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/ReportQpsScenarioServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/services.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ReportQpsScenarioServiceGrpc {
 
   private ReportQpsScenarioServiceGrpc() {}

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/WorkerServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/services.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class WorkerServiceGrpc {
 
   private WorkerServiceGrpc() {}

File: grpclb/src/generated/main/grpc/io/grpc/lb/v1/LoadBalancerGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/lb/v1/load_balancer.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class LoadBalancerGrpc {
 
   private LoadBalancerGrpc() {}

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/LoadBalancerStatsServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class LoadBalancerStatsServiceGrpc {
 
   private LoadBalancerStatsServiceGrpc() {}

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/metrics.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class MetricsServiceGrpc {
 
   private MetricsServiceGrpc() {}

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ReconnectServiceGrpc {
 
   private ReconnectServiceGrpc() {}

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -11,6 +11,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class TestServiceGrpc {
 
   private TestServiceGrpc() {}

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -11,6 +11,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class UnimplementedServiceGrpc {
 
   private UnimplementedServiceGrpc() {}

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/XdsUpdateClientConfigureServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class XdsUpdateClientConfigureServiceGrpc {
 
   private XdsUpdateClientConfigureServiceGrpc() {}

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/XdsUpdateHealthServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/testing/test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class XdsUpdateHealthServiceGrpc {
 
   private XdsUpdateHealthServiceGrpc() {}

File: rls/src/generated/main/grpc/io/grpc/lookup/v1/RouteLookupServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/lookup/v1/rls.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class RouteLookupServiceGrpc {
 
   private RouteLookupServiceGrpc() {}

File: services/src/generated/main/grpc/io/grpc/channelz/v1/ChannelzGrpc.java
Patch:
@@ -11,6 +11,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/channelz/v1/channelz.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ChannelzGrpc {
 
   private ChannelzGrpc() {}

File: services/src/generated/main/grpc/io/grpc/health/v1/HealthGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/health/v1/health.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class HealthGrpc {
 
   private HealthGrpc() {}

File: services/src/generated/main/grpc/io/grpc/reflection/v1alpha/ServerReflectionGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: grpc/reflection/v1alpha/reflection.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ServerReflectionGrpc {
 
   private ServerReflectionGrpc() {}

File: services/src/generated/test/grpc/io/grpc/reflection/testing/AnotherDynamicServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: io/grpc/reflection/testing/dynamic_reflection_test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class AnotherDynamicServiceGrpc {
 
   private AnotherDynamicServiceGrpc() {}

File: services/src/generated/test/grpc/io/grpc/reflection/testing/AnotherReflectableServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: io/grpc/reflection/testing/reflection_test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class AnotherReflectableServiceGrpc {
 
   private AnotherReflectableServiceGrpc() {}

File: services/src/generated/test/grpc/io/grpc/reflection/testing/DynamicServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: io/grpc/reflection/testing/dynamic_reflection_test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class DynamicServiceGrpc {
 
   private DynamicServiceGrpc() {}

File: services/src/generated/test/grpc/io/grpc/reflection/testing/ReflectableServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: io/grpc/reflection/testing/reflection_test.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ReflectableServiceGrpc {
 
   private ReflectableServiceGrpc() {}

File: testing-proto/src/generated/main/grpc/io/grpc/testing/protobuf/SimpleServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: io/grpc/testing/protobuf/simpleservice.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class SimpleServiceGrpc {
 
   private SimpleServiceGrpc() {}

File: xds/src/generated/main/grpc/com/github/udpa/udpa/service/orca/v1/OpenRcaServiceGrpc.java
Patch:
@@ -17,6 +17,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: udpa/service/orca/v1/orca.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class OpenRcaServiceGrpc {
 
   private OpenRcaServiceGrpc() {}

File: xds/src/generated/main/grpc/com/google/security/meshca/v1/MeshCertificateServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: security/proto/providers/google/meshca.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class MeshCertificateServiceGrpc {
 
   private MeshCertificateServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/api/v2/ClusterDiscoveryServiceGrpc.java
Patch:
@@ -10,6 +10,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/api/v2/cds.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ClusterDiscoveryServiceGrpc {
 
   private ClusterDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/api/v2/EndpointDiscoveryServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/api/v2/eds.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class EndpointDiscoveryServiceGrpc {
 
   private EndpointDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/api/v2/ListenerDiscoveryServiceGrpc.java
Patch:
@@ -13,6 +13,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/api/v2/lds.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ListenerDiscoveryServiceGrpc {
 
   private ListenerDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/api/v2/RouteDiscoveryServiceGrpc.java
Patch:
@@ -14,6 +14,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/api/v2/rds.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class RouteDiscoveryServiceGrpc {
 
   private RouteDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/api/v2/ScopedRoutesDiscoveryServiceGrpc.java
Patch:
@@ -16,6 +16,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/api/v2/srds.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ScopedRoutesDiscoveryServiceGrpc {
 
   private ScopedRoutesDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/api/v2/VirtualHostDiscoveryServiceGrpc.java
Patch:
@@ -19,6 +19,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/api/v2/rds.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class VirtualHostDiscoveryServiceGrpc {
 
   private VirtualHostDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/service/discovery/v2/AggregatedDiscoveryServiceGrpc.java
Patch:
@@ -15,6 +15,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/service/discovery/v2/ads.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class AggregatedDiscoveryServiceGrpc {
 
   private AggregatedDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/service/discovery/v2/SecretDiscoveryServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/service/discovery/v2/sds.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class SecretDiscoveryServiceGrpc {
 
   private SecretDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/service/discovery/v3/AggregatedDiscoveryServiceGrpc.java
Patch:
@@ -15,6 +15,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/service/discovery/v3/ads.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class AggregatedDiscoveryServiceGrpc {
 
   private AggregatedDiscoveryServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/service/load_stats/v2/LoadReportingServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/service/load_stats/v2/lrs.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class LoadReportingServiceGrpc {
 
   private LoadReportingServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/service/load_stats/v3/LoadReportingServiceGrpc.java
Patch:
@@ -7,6 +7,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/service/load_stats/v3/lrs.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class LoadReportingServiceGrpc {
 
   private LoadReportingServiceGrpc() {}

File: xds/src/generated/main/grpc/io/envoyproxy/envoy/service/status/v3/ClientStatusDiscoveryServiceGrpc.java
Patch:
@@ -12,6 +12,7 @@
 @javax.annotation.Generated(
     value = "by gRPC proto compiler",
     comments = "Source: envoy/service/status/v3/csds.proto")
+@io.grpc.stub.annotations.GrpcGenerated
 public final class ClientStatusDiscoveryServiceGrpc {
 
   private ClientStatusDiscoveryServiceGrpc() {}

File: core/src/test/java/io/grpc/internal/ForwardingClientStreamListenerTest.java
Patch:
@@ -23,6 +23,7 @@
 import io.grpc.ForwardingTestUtil;
 import io.grpc.Metadata;
 import io.grpc.Status;
+import io.grpc.internal.ClientStreamListener.RpcProgress;
 import io.grpc.internal.StreamListener.MessageProducer;
 import java.lang.reflect.Method;
 import java.util.Collections;
@@ -61,8 +62,8 @@ public void headersReadTest() {
   public void closedTest() {
     Status status = Status.UNKNOWN;
     Metadata trailers = new Metadata();
-    forward.closed(status, trailers);
-    verify(mock).closed(same(status), same(trailers));
+    forward.closed(status, RpcProgress.PROCESSED, trailers);
+    verify(mock).closed(same(status), same(RpcProgress.PROCESSED), same(trailers));
   }
 
   @Test

File: core/src/test/java/io/grpc/internal/NoopClientStreamListener.java
Patch:
@@ -32,9 +32,6 @@ public void onReady() {}
   @Override
   public void headersRead(Metadata headers) {}
 
-  @Override
-  public void closed(Status status, Metadata trailers) {}
-
   @Override
   public void closed(Status status, RpcProgress rpcProgress, Metadata trailers) {}
 }

File: cronet/src/test/java/io/grpc/cronet/CronetClientTransportTest.java
Patch:
@@ -157,9 +157,6 @@ public void onReady() {}
     @Override
     public void headersRead(Metadata headers) {}
 
-    @Override
-    public void closed(Status status, Metadata trailers) {}
-
     @Override
     public void closed(Status status, RpcProgress rpcProgress, Metadata trailers) {
       this.status = status;

File: netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java
Patch:
@@ -50,6 +50,7 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
 import io.grpc.internal.ClientStreamListener;
+import io.grpc.internal.ClientStreamListener.RpcProgress;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.StatsTraceContext;
 import io.grpc.internal.StreamListener;
@@ -304,7 +305,8 @@ public void invalidInboundHeadersCancelStream() throws Exception {
     // Remove once b/16290036 is fixed.
     headers.status(new AsciiString("500"));
     stream().transportState().transportHeadersReceived(headers, false);
-    verify(listener, never()).closed(any(Status.class), any(Metadata.class));
+    verify(listener, never()).closed(
+        any(Status.class), any(RpcProgress.class), any(Metadata.class));
 
     // We are now waiting for 100 bytes of error context on the stream, cancel has not yet been
     // sent

File: binder/src/androidTest/java/io/grpc/binder/BinderChannelSmokeTest.java
Patch:
@@ -99,7 +99,7 @@ public void setUp() throws Exception {
     HostServices.configureService(serverAddress,
         HostServices.serviceParamsBuilder()
           .setServerFactory((service, receiver) ->
-              BinderServerBuilder.forService(service, receiver)
+              BinderServerBuilder.forAddress(serverAddress, receiver)
                 .addService(serviceDef)
                 .build())
           .build());

File: binder/src/androidTest/java/io/grpc/binder/BinderSecurityTest.java
Patch:
@@ -75,7 +75,7 @@ private void createChannel(ServerSecurityPolicy serverPolicy, SecurityPolicy cha
     AndroidComponentAddress addr = HostServices.allocateService(appContext);
     HostServices.configureService(addr,
         HostServices.serviceParamsBuilder()
-          .setServerFactory((service, receiver) -> buildServer(service, receiver, serverPolicy))
+          .setServerFactory((service, receiver) -> buildServer(addr, receiver, serverPolicy))
           .build());
 
     channel =
@@ -85,10 +85,10 @@ private void createChannel(ServerSecurityPolicy serverPolicy, SecurityPolicy cha
   }
 
   private Server buildServer(
-      Service service,
+      AndroidComponentAddress listenAddr,
       IBinderReceiver receiver,
       ServerSecurityPolicy serverPolicy) {
-    BinderServerBuilder serverBuilder = BinderServerBuilder.forService(service, receiver);
+    BinderServerBuilder serverBuilder = BinderServerBuilder.forAddress(listenAddr, receiver);
     serverBuilder.securityPolicy(serverPolicy);
 
     MethodDescriptor.Marshaller<Empty> marshaller =

File: binder/src/androidTest/java/io/grpc/binder/internal/BinderClientTransportTest.java
Patch:
@@ -125,7 +125,7 @@ public void setUp() throws Exception {
     HostServices.configureService(serverAddress,
         HostServices.serviceParamsBuilder()
           .setServerFactory((service, receiver) ->
-              BinderServerBuilder.forService(service, receiver)
+              BinderServerBuilder.forAddress(serverAddress, receiver)
                 .addService(serviceDef)
                 .build())
           .build());

File: binder/src/main/java/io/grpc/binder/ApiConstants.java
Patch:
@@ -25,7 +25,8 @@ public final class ApiConstants {
   private ApiConstants() {}
 
   /**
-   * Service Action: Identifies gRPC clients in a {@link android.app.Service#onBind(Intent)} call.
+   * The "action" part of the binding {@link Intent} that gRPC clients use by default to identify
+   * themselves in a {@link android.app.Service#onBind(Intent)} call.
    */
   public static final String ACTION_BIND = "grpc.io.action.BIND";
 }

File: binder/src/main/java/io/grpc/binder/internal/BinderTransport.java
Patch:
@@ -585,8 +585,7 @@ public BinderClientTransport(
           new ServiceBinding(
               mainThreadExecutor,
               sourceContext,
-              targetAddress.getComponent(),
-              ApiConstants.ACTION_BIND,
+              targetAddress.asBindIntent(),
               bindServiceFlags.toInteger(),
               this);
     }

File: xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java
Patch:
@@ -114,7 +114,7 @@ public void start() {
         new XdsClient.LdsResourceWatcher() {
           @Override
           public void onChanged(XdsClient.LdsUpdate update) {
-            releaseOldSuppliers(curListener.getAndSet(update.listener));
+            releaseOldSuppliers(curListener.getAndSet(update.listener()));
             reportSuccess();
           }
 

File: xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java
Patch:
@@ -31,6 +31,7 @@
 import io.grpc.StatusException;
 import io.grpc.inprocess.InProcessSocketAddress;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
+import io.grpc.xds.XdsClient.LdsUpdate;
 import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;
 import io.grpc.xds.internal.sds.SslContextProvider;
 import io.grpc.xds.internal.sds.SslContextProviderSupplier;
@@ -131,7 +132,7 @@ public void emptyFilterChain_expectNull() throws UnknownHostException {
             "10.1.2.3",
             Collections.<EnvoyServerProtoData.FilterChain>emptyList(),
             null);
-    XdsClient.LdsUpdate listenerUpdate = new XdsClient.LdsUpdate(listener);
+    LdsUpdate listenerUpdate = LdsUpdate.forTcpListener(listener);
     registeredWatcher.onChanged(listenerUpdate);
     DownstreamTlsContext tlsContext = getDownstreamTlsContext();
     assertThat(tlsContext).isNull();

File: interop-testing/src/test/java/io/grpc/testing/integration/StressTestClientTest.java
Patch:
@@ -45,7 +45,7 @@
 public class StressTestClientTest {
 
   @Rule
-  public final Timeout globalTimeout = Timeout.seconds(5);
+  public final Timeout globalTimeout = Timeout.seconds(10);
 
   @Test
   public void ipv6AddressesShouldBeSupported() {

File: xds/src/main/java/io/grpc/xds/internal/Matchers.java
Patch:
@@ -29,6 +29,8 @@
  * argument in the input matches a predefined matching pattern.
  */
 public final class Matchers {
+  // Prevent instantiation.
+  private Matchers() {}
 
   /** Matcher for HTTP request headers. */
   @AutoValue

File: xds/src/main/java/io/grpc/xds/internal/rbac/engine/GrpcAuthorizationEngine.java
Patch:
@@ -256,6 +256,7 @@ private String getPath() {
      * principal names we are interested in.
      * https://github.com/envoyproxy/envoy/blob/0fae6970ddaf93f024908ba304bbd2b34e997a51/envoy/ssl/connection.h#L70
      */
+    @Nullable
     private Collection<String> getPrincipalNames() {
       SSLSession sslSession = serverCall.getAttributes().get(Grpc.TRANSPORT_ATTR_SSL_SESSION);
       if (sslSession == null) {
@@ -391,7 +392,7 @@ public boolean matches(EvaluateArgs args) {
 
   /** Always true matcher.*/
   public static final class AlwaysTrueMatcher implements Matcher {
-    static AlwaysTrueMatcher INSTANCE = new AlwaysTrueMatcher();
+    static final AlwaysTrueMatcher INSTANCE = new AlwaysTrueMatcher();
 
     @Override
     public boolean matches(EvaluateArgs args) {

File: xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java
Patch:
@@ -254,7 +254,8 @@ private void handleEndpointResourceUpdate() {
     private void handleEndpointResolutionError() {
       boolean allInError = true;
       Status error = null;
-      for (ClusterState state :  clusterStates.values()) {
+      for (String cluster : clusters) {
+        ClusterState state = clusterStates.get(cluster);
         if (state.status.isOk()) {
           allInError = false;
         } else {

File: alts/src/test/java/io/grpc/alts/internal/GoogleDefaultProtocolNegotiatorTest.java
Patch:
@@ -181,8 +181,8 @@ public void altsHandler_xdsCluster() {
 
     @Test
     public void tlsHandler_googleCfe() {
-      Attributes attrs =
-          Attributes.newBuilder().set(XDS_CLUSTER_NAME_ATTR_KEY, "google_cfe").build();
+      Attributes attrs = Attributes.newBuilder().set(
+          XDS_CLUSTER_NAME_ATTR_KEY, "google_cfe_api.googleapis.com").build();
       subtest_tlsHandler(attrs);
     }
   }

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancer2.java
Patch:
@@ -161,8 +161,8 @@ private void handleClusterDiscovered() {
                   clusterState.result.upstreamTlsContext());
             } else {  // logical DNS
               instance = DiscoveryMechanism.forLogicalDns(
-                  clusterState.name, clusterState.result.lrsServerName(),
-                  clusterState.result.maxConcurrentRequests(),
+                  clusterState.name, clusterState.result.dnsHostName(),
+                  clusterState.result.lrsServerName(), clusterState.result.maxConcurrentRequests(),
                   clusterState.result.upstreamTlsContext());
             }
             instances.add(instance);

File: xds/src/main/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManager.java
Patch:
@@ -151,14 +151,13 @@ private static boolean verifyOneSanInList(List<?> entry, List<StringMatcher> ver
     if (altNameType == null) {
       throw new CertificateParsingException("Invalid SAN entry: null altNameType");
     }
-    String altNameFromCert = (String) entry.get(1);
     switch (altNameType) {
       case ALT_DNS_NAME:
       case ALT_URI_NAME:
       case ALT_IPA_NAME:
-        return verifyDnsNameInSanList(altNameFromCert, verifySanList);
+        return verifyDnsNameInSanList((String) entry.get(1), verifySanList);
       default:
-        throw new CertificateParsingException("Unsupported altNameType: " + altNameType);
+        return false;
     }
   }
 

File: xds/src/main/java/io/grpc/xds/RingHashLoadBalancer.java
Patch:
@@ -188,6 +188,7 @@ public void shutdown() {
     for (Subchannel subchannel : subchannels.values()) {
       shutdownSubchannel(subchannel);
     }
+    subchannels.clear();
   }
 
   private void updateBalancingState() {

File: alts/src/main/java/io/grpc/alts/ComputeEngineChannelCredentials.java
Patch:
@@ -21,7 +21,6 @@
 import io.grpc.CallCredentials;
 import io.grpc.ChannelCredentials;
 import io.grpc.CompositeChannelCredentials;
-import io.grpc.ExperimentalApi;
 import io.grpc.Status;
 import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;
 import io.grpc.auth.MoreCallCredentials;
@@ -37,7 +36,6 @@
  * class sets up a secure channel using ALTS if applicable and using TLS as fallback. It is a subset
  * of the functionality provided by {@link GoogleDefaultChannelCredentials}.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
 public final class ComputeEngineChannelCredentials {
   private ComputeEngineChannelCredentials() {}
 

File: alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java
Patch:
@@ -21,7 +21,6 @@
 import io.grpc.CallCredentials;
 import io.grpc.ChannelCredentials;
 import io.grpc.CompositeChannelCredentials;
-import io.grpc.ExperimentalApi;
 import io.grpc.Status;
 import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;
 import io.grpc.auth.MoreCallCredentials;
@@ -37,7 +36,6 @@
  * Credentials appropriate to contact Google services. This class sets up a secure channel using
  * ALTS if applicable and uses TLS as fallback.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
 public final class GoogleDefaultChannelCredentials {
   private GoogleDefaultChannelCredentials() {}
 
@@ -52,7 +50,6 @@ public static ChannelCredentials create() {
     try {
       callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());
     } catch (IOException e) {
-      // TODO(ejona): Should this just throw?
       callCredentials = new FailingCallCredentials(
           Status.UNAUTHENTICATED
               .withDescription("Failed to get Google default credentials")

File: api/src/main/java/io/grpc/ChannelCredentials.java
Patch:
@@ -34,7 +34,6 @@
  * would only be used after {@code instanceof} checks (which must consider
  * {@code ChoiceChannelCredentials}!).
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
 public abstract class ChannelCredentials {
   /**
    * Returns the ChannelCredentials stripped of its CallCredentials. In the future,

File: api/src/main/java/io/grpc/ChoiceChannelCredentials.java
Patch:
@@ -26,7 +26,6 @@
  * Provides a list of {@link ChannelCredentials}, where any one may be used. The credentials are in
  * preference order.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
 public final class ChoiceChannelCredentials extends ChannelCredentials {
   /**
    * Constructs with the provided {@code creds} as options, with preferred credentials first.

File: api/src/main/java/io/grpc/CompositeCallCredentials.java
Patch:
@@ -23,7 +23,7 @@
  * Uses multiple {@code CallCredentials} as if they were one. If the first credential fails, the
  * second will not be used. Both must succeed to allow the RPC.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1914")
 public final class CompositeCallCredentials extends CallCredentials {
   private final CallCredentials credentials1;
   private final CallCredentials credentials2;

File: api/src/main/java/io/grpc/CompositeChannelCredentials.java
Patch:
@@ -24,7 +24,6 @@
  * composite credential), then all of the {@code CallCredentials} should be used; one {@code
  * CallCredentials} does not override another.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
 public final class CompositeChannelCredentials extends ChannelCredentials {
   public static ChannelCredentials create(
       ChannelCredentials channelCreds, CallCredentials callCreds) {

File: api/src/main/java/io/grpc/Grpc.java
Patch:
@@ -96,7 +96,6 @@ private Grpc() {
    *   <li>{@code "[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443"}</li>
    * </ul>
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
   public static ManagedChannelBuilder<?> newChannelBuilder(
       String target, ChannelCredentials creds) {
     return ManagedChannelRegistry.getDefaultRegistry().newChannelBuilder(target, creds);
@@ -107,7 +106,6 @@ public static ManagedChannelBuilder<?> newChannelBuilder(
    * form an authority string and then passed to {@link #newChannelBuilder(String,
    * ChannelCredentials)}. IPv6 addresses are properly surrounded by square brackets ("[]").
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
   public static ManagedChannelBuilder<?> newChannelBuilderForAddress(
       String host, int port, ChannelCredentials creds) {
     return newChannelBuilder(authorityFromHostAndPort(host, port), creds);

File: api/src/main/java/io/grpc/InsecureChannelCredentials.java
Patch:
@@ -17,7 +17,6 @@
 package io.grpc;
 
 /** No client identity, authentication, or encryption is to be used. */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
 public final class InsecureChannelCredentials extends ChannelCredentials {
   public static ChannelCredentials create() {
     return new InsecureChannelCredentials();

File: api/src/main/java/io/grpc/ManagedChannelRegistry.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @since 1.32.0
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
+@Internal
 @ThreadSafe
 public final class ManagedChannelRegistry {
   private static final Logger logger = Logger.getLogger(ManagedChannelRegistry.class.getName());

File: api/src/main/java/io/grpc/TlsChannelCredentials.java
Patch:
@@ -36,7 +36,6 @@
  * incomprehensible()} method. Unless overridden by a {@code Feature}, server verification should
  * use customary default root certificates.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
 public final class TlsChannelCredentials extends ChannelCredentials {
   /** Use TLS with its defaults. */
   public static ChannelCredentials create() {
@@ -221,7 +220,6 @@ public static Builder newBuilder() {
   }
 
   /** Builder for {@link TlsChannelCredentials}. */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
   public static final class Builder {
     private boolean fakeFeature;
     private byte[] certificateChain;

File: xds/src/main/java/io/grpc/xds/XdsChannelCredentials.java
Patch:
@@ -24,7 +24,7 @@
 import io.grpc.netty.InternalProtocolNegotiator;
 import io.grpc.xds.internal.sds.SdsProtocolNegotiators;
 
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7479")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7514")
 public class XdsChannelCredentials {
   private XdsChannelCredentials() {} // prevent instantiation
 

File: alts/src/main/java/io/grpc/alts/AltsServerCredentials.java
Patch:
@@ -32,7 +32,7 @@
  * gRPC secure server builder used for ALTS. This class adds on the necessary ALTS support to create
  * a production server on Google Cloud Platform.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/4151")
 public final class AltsServerCredentials {
   private static final Logger logger = Logger.getLogger(AltsServerCredentials.class.getName());
 
@@ -46,7 +46,7 @@ public static Builder newBuilder() {
     return new Builder();
   }
 
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4151")
   public static final class Builder {
     private ObjectPool<Channel> handshakerChannelPool =
         SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL);

File: api/src/main/java/io/grpc/ChoiceServerCredentials.java
Patch:
@@ -25,7 +25,6 @@
  * Provides a list of {@link ServerCredentials}, where any one may be used. The credentials are in
  * preference order.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
 public final class ChoiceServerCredentials extends ServerCredentials {
   /**
    * Constructs with the provided {@code creds} as options, with preferred credentials first.

File: api/src/main/java/io/grpc/Grpc.java
Patch:
@@ -131,7 +131,6 @@ private static String authorityFromHostAndPort(String host, int port) {
    * @param port the port to listen on
    * @param creds the server identity
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
   public static ServerBuilder<?> newServerBuilderForPort(int port, ServerCredentials creds) {
     return ServerRegistry.getDefaultRegistry().newServerBuilderForPort(port, creds);
   }

File: api/src/main/java/io/grpc/InsecureServerCredentials.java
Patch:
@@ -17,7 +17,6 @@
 package io.grpc;
 
 /** No server identity or encryption is to be used. */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
 public final class InsecureServerCredentials extends ServerCredentials {
   public static ServerCredentials create() {
     return new InsecureServerCredentials();

File: api/src/main/java/io/grpc/ServerCredentials.java
Patch:
@@ -33,5 +33,4 @@
  * would only be used after {@code instanceof} checks (which must consider
  * {@code ChoiceServerCredentials}!).
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
 public abstract class ServerCredentials {}

File: api/src/main/java/io/grpc/ServerRegistry.java
Patch:
@@ -31,7 +31,7 @@
  * Registry of {@link ServerProvider}s. The {@link #getDefaultRegistry default instance} loads
  * providers at runtime through the Java service provider mechanism.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
+@Internal
 @ThreadSafe
 public final class ServerRegistry {
   private static final Logger logger = Logger.getLogger(ServerRegistry.class.getName());

File: api/src/main/java/io/grpc/TlsServerCredentials.java
Patch:
@@ -37,7 +37,6 @@
  * method. Unless overridden by a {@code Feature}, server identity is provided via {@link
  * #getCertificateChain}, {@link #getPrivateKey}, and {@link #getPrivateKeyPassword}.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
 public final class TlsServerCredentials extends ServerCredentials {
   /**
    * Creates an instance using provided certificate chain and private key. Generally they should be
@@ -239,7 +238,6 @@ public static Builder newBuilder() {
   }
 
   /** Builder for {@link TlsServerCredentials}. */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
   public static final class Builder {
     private boolean fakeFeature;
     private byte[] certificateChain;

File: xds/src/main/java/io/grpc/xds/XdsServerCredentials.java
Patch:
@@ -24,7 +24,7 @@
 import io.grpc.netty.InternalProtocolNegotiator;
 import io.grpc.xds.internal.sds.SdsProtocolNegotiators;
 
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7621")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/7514")
 public class XdsServerCredentials {
   private XdsServerCredentials() {} // prevent instantiation
 

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -378,7 +378,7 @@ public void receivedAbruptGoAwayShouldFailRacingQueuedStreamid() throws Exceptio
     assertEquals(Status.UNAVAILABLE.getCode(), captor.getValue().getCode());
     assertEquals(
         "Abrupt GOAWAY closed unsent stream. HTTP/2 error code: CANCEL, "
-          + "debug data: this is a test",
+          + "debug data: this is a test\nstream id: 3, GOAWAY Last-Stream-ID:0",
         captor.getValue().getDescription());
     assertTrue(future.isDone());
   }
@@ -411,6 +411,8 @@ public void receivedGoAway_shouldFailBufferedStreamsExceedingMaxConcurrentStream
     assertThat(Status.fromThrowable(future2.cause()).getCode()).isEqualTo(Status.Code.UNAVAILABLE);
     assertThat(future2.cause().getMessage()).contains(
         "Abrupt GOAWAY closed unsent stream. HTTP/2 error code: NO_ERROR");
+    assertThat(future2.cause().getMessage()).contains(
+        "At MAX_CONCURRENT_STREAMS limit");
   }
 
   @Test

File: core/src/test/java/io/grpc/internal/ConfigSelectingClientCallTest.java
Patch:
@@ -135,6 +135,9 @@ public Result selectConfig(PickSubchannelArgs args) {
     ArgumentCaptor<Status> statusCaptor = ArgumentCaptor.forClass(null);
     verify(callListener).onClose(statusCaptor.capture(), any(Metadata.class));
     assertThat(statusCaptor.getValue().getCode()).isEqualTo(Status.Code.FAILED_PRECONDITION);
+
+    // The call should not delegate to null and fail methods with NPE.
+    configSelectingClientCall.request(1);
   }
 
   private final class TestChannel extends Channel {

File: xds/src/test/java/io/grpc/xds/ClientXdsClientTestBase.java
Patch:
@@ -2127,7 +2127,6 @@ protected final Message buildListener(String name, Message routeConfiguration) {
       return buildListener(name, routeConfiguration, Collections.<Message>emptyList());
     }
 
-    @SuppressWarnings("unchecked")
     protected abstract Message buildListener(
         String name, Message routeConfiguration, List<? extends Message> httpFilters);
 

File: xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java
Patch:
@@ -73,7 +73,7 @@ public void listener_convertFromListenerProto() throws InvalidProtocolBufferExce
     EnvoyServerProtoData.FilterChainMatch inFilterChainMatch = inFilter.getFilterChainMatch();
     assertThat(inFilterChainMatch).isNotNull();
     assertThat(inFilterChainMatch.getDestinationPort()).isEqualTo(8000);
-    assertThat(inFilterChainMatch.getApplicationProtocols()).containsExactly("managed-mtls");
+    assertThat(inFilterChainMatch.getApplicationProtocols()).isEmpty();
     assertThat(inFilterChainMatch.getPrefixRanges())
         .containsExactly(new EnvoyServerProtoData.CidrRange("10.20.0.15", 32));
     assertThat(inFilterChainMatch.getSourcePrefixRanges())
@@ -114,7 +114,6 @@ private static FilterChain createInFilter() {
                             .setAddressPrefix("10.30.3.0")
                             .setPrefixLen(UInt32Value.of(24))
                             .build())
-                    .addApplicationProtocols("managed-mtls")
                     .setSourceType(FilterChainMatch.ConnectionSourceType.EXTERNAL)
                     .addSourcePorts(200)
                     .addSourcePorts(300)

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.common.base.CaseFormat;
 import com.google.common.base.Joiner;
 import com.google.common.base.Stopwatch;
+import com.google.common.base.Strings;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableList;
 import com.google.protobuf.Any;
@@ -101,7 +102,8 @@ final class ClientXdsClient extends AbstractXdsClient {
   static final String HASH_POLICY_FILTER_STATE_KEY = "io.grpc.channel_id";
   @VisibleForTesting
   static boolean enableFaultInjection =
-      Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_FAULT_INJECTION"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_FAULT_INJECTION"))
+          || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_FAULT_INJECTION"));
 
   private static final String TYPE_URL_HTTP_CONNECTION_MANAGER_V2 =
       "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2"

File: xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java
Patch:
@@ -20,6 +20,7 @@
 import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Strings;
 import io.grpc.Attributes;
 import io.grpc.ClientStreamTracer;
 import io.grpc.ClientStreamTracer.StreamInfo;
@@ -65,7 +66,8 @@ final class ClusterImplLoadBalancer extends LoadBalancer {
   static final long DEFAULT_PER_CLUSTER_MAX_CONCURRENT_REQUESTS = 1024L;
   @VisibleForTesting
   static boolean enableCircuitBreaking =
-      Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_CIRCUIT_BREAKING"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_CIRCUIT_BREAKING"))
+          || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_CIRCUIT_BREAKING"));
   @VisibleForTesting
   static boolean enableSecurity =
       Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_SECURITY_SUPPORT"));

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Joiner;
+import com.google.common.base.Strings;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Sets;
 import com.google.gson.Gson;
@@ -94,7 +95,8 @@ final class XdsNameResolver extends NameResolver {
       new NamedFilterConfig(null, LameFilter.LAME_CONFIG);
   @VisibleForTesting
   static boolean enableTimeout =
-      Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_TIMEOUT"));
+      Strings.isNullOrEmpty(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_TIMEOUT"))
+          || Boolean.parseBoolean(System.getenv("GRPC_XDS_EXPERIMENTAL_ENABLE_TIMEOUT"));
 
   private final InternalLogId logId;
   private final XdsLogger logger;

File: xds/src/main/java/io/grpc/xds/SharedXdsClientPoolProvider.java
Patch:
@@ -26,6 +26,7 @@
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.ObjectPool;
 import io.grpc.internal.SharedResourceHolder;
+import io.grpc.internal.TimeProvider;
 import io.grpc.xds.Bootstrapper.BootstrapInfo;
 import io.grpc.xds.Bootstrapper.ServerInfo;
 import io.grpc.xds.EnvoyProtoData.Node;
@@ -134,7 +135,8 @@ public XdsClient getObject() {
               .build();
           scheduler = SharedResourceHolder.get(GrpcUtil.TIMER_SERVICE);
           xdsClient = new ClientXdsClient(channel, useProtocolV3, node, scheduler,
-              new ExponentialBackoffPolicy.Provider(), GrpcUtil.STOPWATCH_SUPPLIER);
+              new ExponentialBackoffPolicy.Provider(), GrpcUtil.STOPWATCH_SUPPLIER,
+              TimeProvider.SYSTEM_TIME_PROVIDER);
         }
         refCount++;
         return xdsClient;

File: xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java
Patch:
@@ -29,6 +29,7 @@
 import io.grpc.internal.ExponentialBackoffPolicy;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.SharedResourceHolder;
+import io.grpc.internal.TimeProvider;
 import io.grpc.xds.EnvoyProtoData.Node;
 import io.grpc.xds.EnvoyServerProtoData.CidrRange;
 import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext;
@@ -124,7 +125,8 @@ public void createXdsClientAndStart() throws IOException {
             node,
             timeService,
             new ExponentialBackoffPolicy.Provider(),
-            GrpcUtil.STOPWATCH_SUPPLIER);
+            GrpcUtil.STOPWATCH_SUPPLIER,
+            TimeProvider.SYSTEM_TIME_PROVIDER);
     start(xdsClientImpl, grpcServerResourceId);
   }
 

File: alts/src/main/java/io/grpc/alts/ComputeEngineChannelCredentials.java
Patch:
@@ -69,7 +69,6 @@ private static InternalProtocolNegotiator.ClientFactory createClientFactory() {
     return new GoogleDefaultProtocolNegotiatorFactory(
         /* targetServiceAccounts= */ ImmutableList.<String>of(),
         SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL),
-        sslContext,
-        null);
+        sslContext);
   }
 }

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancer2.java
Patch:
@@ -129,6 +129,9 @@ private void start() {
 
     private void shutdown() {
       root.shutdown();
+      if (childLb != null) {
+        childLb.shutdown();
+      }
     }
 
     private void handleClusterDiscovered() {

File: xds/src/test/java/io/grpc/xds/CdsLoadBalancer2Test.java
Patch:
@@ -139,6 +139,7 @@ public void tearDown() {
     loadBalancer.shutdown();
     assertThat(xdsClient.watchers).isEmpty();
     assertThat(xdsClientRefs).isEqualTo(0);
+    assertThat(childBalancers).isEmpty();
   }
 
   @Test

File: xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java
Patch:
@@ -24,6 +24,7 @@
 import io.envoyproxy.envoy.config.core.v3.Address;
 import io.envoyproxy.envoy.config.core.v3.CidrRange;
 import io.envoyproxy.envoy.config.core.v3.SocketAddress;
+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;
 import io.envoyproxy.envoy.config.core.v3.TransportSocket;
 import io.envoyproxy.envoy.config.listener.v3.Filter;
 import io.envoyproxy.envoy.config.listener.v3.FilterChain;
@@ -58,6 +59,7 @@ public void listener_convertFromListenerProto() throws InvalidProtocolBufferExce
             .addFilterChains(createOutFilter())
             .addFilterChains(createInFilter())
             .setDefaultFilterChain(createDefaultFilterChain())
+            .setTrafficDirection(TrafficDirection.INBOUND)
             .build();
 
     Listener xdsListener = Listener.fromEnvoyProtoListener(listener);

File: xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java
Patch:
@@ -44,6 +44,7 @@
 import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;
 import io.envoyproxy.envoy.api.v2.core.CidrRange;
 import io.envoyproxy.envoy.api.v2.core.SocketAddress;
+import io.envoyproxy.envoy.api.v2.core.TrafficDirection;
 import io.envoyproxy.envoy.api.v2.core.TransportSocket;
 import io.envoyproxy.envoy.api.v2.listener.Filter;
 import io.envoyproxy.envoy.api.v2.listener.FilterChain;
@@ -775,6 +776,7 @@ static Listener buildListenerWithFilterChain(String name, int portValue, String
             .setName(name)
             .setAddress(listenerAddress)
             .addAllFilterChains(Arrays.asList(filterChains))
+            .setTrafficDirection(TrafficDirection.INBOUND)
             .build();
   }
 

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -244,6 +244,7 @@ void handleAddresses(
       // newLbAddressGroups, but we're considering that "okay". If we detected the RPC is to an
       // outdated backend, we could choose to re-create the RPC.
       if (lbStream == null) {
+        cancelLbRpcRetryTimer();
         startLbRpc();
       }
       // Start the fallback timer if it's never started
@@ -368,6 +369,7 @@ private void cancelFallbackTimer() {
   private void cancelLbRpcRetryTimer() {
     if (lbRpcRetryTimer != null) {
       lbRpcRetryTimer.cancel();
+      lbRpcRetryTimer = null;
     }
   }
 

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -823,8 +823,7 @@ private static StructOrError<CdsUpdate.Builder> parseAggregateCluster(Cluster cl
       clusterConfig = unpackedClusterConfig.unpack(
           io.envoyproxy.envoy.extensions.clusters.aggregate.v3.ClusterConfig.class);
     } catch (InvalidProtocolBufferException e) {
-      StructOrError.fromError("Cluster " + clusterName + ": malformed ClusterConfig: " + e);
-      return null;
+      return StructOrError.fromError("Cluster " + clusterName + ": malformed ClusterConfig: " + e);
     }
     return StructOrError.fromStruct(CdsUpdate.forAggregate(
         clusterName, clusterConfig.getClustersList()));

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -767,7 +767,6 @@ private void gracefulClose(ChannelHandlerContext ctx, GracefulCloseCommand msg,
 
   private void forcefulClose(final ChannelHandlerContext ctx, final ForcefulCloseCommand msg,
       ChannelPromise promise) throws Exception {
-    ctx.close();
     connection().forEachActiveStream(new Http2StreamVisitor() {
       @Override
       public boolean visit(Http2Stream stream) throws Http2Exception {
@@ -787,7 +786,7 @@ public boolean visit(Http2Stream stream) throws Http2Exception {
         }
       }
     });
-    promise.setSuccess();
+    close(ctx, promise);
   }
 
   /**

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1168,9 +1168,9 @@ static final class ConfigSelectingClientCall<ReqT, RespT>
       this.configSelector = configSelector;
       this.channel = channel;
       this.method = method;
-      this.callOptions = callOptions;
       this.callExecutor =
           callOptions.getExecutor() == null ? channelExecutor : callOptions.getExecutor();
+      this.callOptions = callOptions.withExecutor(callExecutor);
       this.context = Context.current();
     }
 

File: xds/src/main/java/io/grpc/xds/XdsNameResolverProvider.java
Patch:
@@ -53,7 +53,7 @@ public XdsNameResolver newNameResolver(URI targetUri, Args args) {
           targetUri);
       String name = targetPath.substring(1);
       return new XdsNameResolver(name, args.getServiceConfigParser(),
-          args.getSynchronizationContext());
+          args.getSynchronizationContext(), args.getScheduledExecutorService());
     }
     return null;
   }

File: interop-testing/src/main/java/io/grpc/testing/integration/AltsHandshakerTestService.java
Patch:
@@ -53,7 +53,7 @@ public StreamObserver<HandshakerReq> doHandshake(
       @Override
       public void onNext(HandshakerReq value) {
         log.log(Level.FINE, "request received: " + value);
-        synchronized (this) {
+        synchronized (AltsHandshakerTestService.this) {
           switch (expectState) {
             case CLIENT_INIT:
               checkState(CLIENT_START.equals(value.getReqOneofCase()));

File: rls/src/test/java/io/grpc/rls/CachingRlsLbClientTest.java
Patch:
@@ -583,7 +583,7 @@ public void updateBalancingState(
 
     @Override
     public String getAuthority() {
-      return "bigtable.googleapis.com";
+      return "bigtable.googleapis.com:443";
     }
 
     @Override

File: rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java
Patch:
@@ -137,7 +137,8 @@ private CachingRlsLbClient(Builder builder) {
             builder.evictionListener,
             scheduledExecutorService,
             timeProvider);
-    RlsRequestFactory requestFactory = new RlsRequestFactory(lbPolicyConfig.getRouteLookupConfig());
+    RlsRequestFactory requestFactory = new RlsRequestFactory(
+        lbPolicyConfig.getRouteLookupConfig(), helper.getAuthority());
     rlsPicker = new RlsPicker(requestFactory);
     // It is safe to use helper.getUnsafeChannelCredentials() because the client authenticates the
     // RLS server using the same authority as the backends, even though the RLS server’s addresses

File: rls/src/main/java/io/grpc/rls/RlsRequestFactory.java
Patch:
@@ -45,9 +45,9 @@ final class RlsRequestFactory {
    */
   private final Table<String, String, NameMatcher> keyBuilderTable;
 
-  RlsRequestFactory(RouteLookupConfig rlsConfig) {
+  RlsRequestFactory(RouteLookupConfig rlsConfig, String target) {
     checkNotNull(rlsConfig, "rlsConfig");
-    this.target = rlsConfig.getLookupService();
+    this.target = checkNotNull(target, "target");
     this.keyBuilderTable = createKeyBuilderTable(rlsConfig);
   }
 
@@ -109,7 +109,7 @@ private Map<String, String> createRequestHeaders(
   @Override
   public String toString() {
     return MoreObjects.toStringHelper(this)
-        .add("lookupService", target)
+        .add("target", target)
         .add("keyBuilderTable", keyBuilderTable)
         .toString();
   }

File: xds/src/main/java/io/grpc/xds/BootstrapperImpl.java
Patch:
@@ -27,7 +27,6 @@
 import io.grpc.internal.GrpcUtil.GrpcBuildVersion;
 import io.grpc.internal.JsonParser;
 import io.grpc.internal.JsonUtil;
-import io.grpc.xds.EnvoyProtoData.Locality;
 import io.grpc.xds.EnvoyProtoData.Node;
 import io.grpc.xds.XdsLogger.XdsLogLevel;
 import java.io.IOException;
@@ -214,7 +213,7 @@ private BootstrapInfo parseConfig(String rawData) throws XdsInitializationExcept
         if (rawLocality.containsKey("sub_zone")) {
           logger.log(XdsLogLevel.INFO, "Locality sub_zone: {0}", subZone);
         }
-        Locality locality = new Locality(region, zone, subZone);
+        Locality locality = Locality.create(region, zone, subZone);
         nodeBuilder.setLocality(locality);
       }
     }

File: xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancerProvider.java
Patch:
@@ -26,7 +26,7 @@
 import io.grpc.LoadBalancerRegistry;
 import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.internal.ServiceConfigUtil.PolicySelection;
-import io.grpc.xds.EnvoyProtoData.DropOverload;
+import io.grpc.xds.Endpoints.DropOverload;
 import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;
 import java.util.ArrayList;
 import java.util.Collections;

File: xds/src/main/java/io/grpc/xds/InternalXdsAttributes.java
Patch:
@@ -22,7 +22,6 @@
 import io.grpc.Internal;
 import io.grpc.NameResolver;
 import io.grpc.internal.ObjectPool;
-import io.grpc.xds.EnvoyProtoData.Locality;
 import io.grpc.xds.XdsNameResolverProvider.CallCounterProvider;
 import io.grpc.xds.internal.sds.SslContextProviderSupplier;
 

File: xds/src/test/java/io/grpc/xds/LoadReportClientTest.java
Patch:
@@ -50,7 +50,6 @@
 import io.grpc.internal.FakeClock;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.GrpcCleanupRule;
-import io.grpc.xds.EnvoyProtoData.Locality;
 import io.grpc.xds.LoadStatsManager2.ClusterDropStats;
 import io.grpc.xds.LoadStatsManager2.ClusterLocalityStats;
 import java.util.ArrayDeque;
@@ -85,8 +84,8 @@ public class LoadReportClientTest {
   private static final String CLUSTER2 = "cluster-bar.googleapis.com";
   private static final String EDS_SERVICE_NAME1 = "backend-service-foo.googleapis.com";
   private static final String EDS_SERVICE_NAME2 = "backend-service-bar.googleapis.com";
-  private static final Locality LOCALITY1 = new Locality("region1", "zone1", "subZone1");
-  private static final Locality LOCALITY2 = new Locality("region2", "zone2", "subZone2");
+  private static final Locality LOCALITY1 = Locality.create("region1", "zone1", "subZone1");
+  private static final Locality LOCALITY2 = Locality.create("region2", "zone2", "subZone2");
   private static final FakeClock.TaskFilter LOAD_REPORTING_TASK_FILTER =
       new FakeClock.TaskFilter() {
         @Override

File: xds/src/test/java/io/grpc/xds/EnvoyProtoDataTest.java
Patch:
@@ -402,7 +402,7 @@ public void convertRouteAction_weightedCluster() {
     assertThat(struct.getErrorDetail()).isNull();
     assertThat(struct.getStruct().getCluster()).isNull();
     assertThat(struct.getStruct().getWeightedCluster()).containsExactly(
-        new ClusterWeight("cluster-foo", 30), new ClusterWeight("cluster-bar", 70));
+        new ClusterWeight("cluster-foo", 30, null), new ClusterWeight("cluster-bar", 70, null));
   }
 
   @Test
@@ -547,7 +547,7 @@ public void convertClusterWeight() {
         io.envoyproxy.envoy.config.route.v3.WeightedCluster.ClusterWeight.newBuilder()
             .setName("cluster-foo")
             .setWeight(UInt32Value.newBuilder().setValue(30)).build();
-    ClusterWeight struct = ClusterWeight.fromEnvoyProtoClusterWeight(proto);
+    ClusterWeight struct = ClusterWeight.fromEnvoyProtoClusterWeight(proto).getStruct();
     assertThat(struct.getName()).isEqualTo("cluster-foo");
     assertThat(struct.getWeight()).isEqualTo(30);
   }

File: xds/src/main/java/io/grpc/xds/EnvoyProtoData.java
Patch:
@@ -1358,6 +1358,9 @@ io.envoyproxy.envoy.api.v2.endpoint.ClusterStats toEnvoyProtoClusterStatsV2() {
       io.envoyproxy.envoy.api.v2.endpoint.ClusterStats.Builder builder =
           io.envoyproxy.envoy.api.v2.endpoint.ClusterStats.newBuilder()
               .setClusterName(clusterName);
+      if (clusterServiceName != null) {
+        builder.setClusterServiceName(clusterServiceName);
+      }
       for (UpstreamLocalityStats upstreamLocalityStats : upstreamLocalityStatsList) {
         builder.addUpstreamLocalityStats(
             upstreamLocalityStats.toEnvoyProtoUpstreamLocalityStatsV2());

File: xds/src/test/java/io/grpc/xds/EnvoyProtoDataTest.java
Patch:
@@ -557,6 +557,7 @@ public void clusterStats_convertToEnvoyProto() {
     ClusterStats clusterStats =
         ClusterStats.newBuilder()
             .setClusterName("cluster1")
+            .setClusterServiceName("backend-service1")
             .setLoadReportIntervalNanos(1234)
             .setTotalDroppedRequests(123)
             .addUpstreamLocalityStats(UpstreamLocalityStats.newBuilder()
@@ -579,6 +580,7 @@ public void clusterStats_convertToEnvoyProto() {
     assertThat(clusterStatsProto).isEqualTo(
         io.envoyproxy.envoy.config.endpoint.v3.ClusterStats.newBuilder()
             .setClusterName("cluster1")
+            .setClusterServiceName("backend-service1")
             .setLoadReportInterval(Durations.fromNanos(1234))
             .setTotalDroppedRequests(123)
             .addUpstreamLocalityStats(
@@ -605,6 +607,7 @@ public void clusterStats_convertToEnvoyProto() {
     assertThat(clusterStatsProtoV2).isEqualTo(
         io.envoyproxy.envoy.api.v2.endpoint.ClusterStats.newBuilder()
             .setClusterName("cluster1")
+            .setClusterServiceName("backend-service1")
             .setLoadReportInterval(Durations.fromNanos(1234))
             .setTotalDroppedRequests(123)
             .addUpstreamLocalityStats(

File: xds/src/main/java/io/grpc/xds/InternalXdsAttributes.java
Patch:
@@ -44,15 +44,15 @@ public final class InternalXdsAttributes {
    */
   @NameResolver.ResolutionResultAttr
   static final Attributes.Key<ObjectPool<XdsClient>> XDS_CLIENT_POOL =
-      Attributes.Key.create("io.grpc.xds.XdsAttributes.xdsClientPool");
+      Attributes.Key.create("io.grpc.xds.InternalXdsAttributes.xdsClientPool");
 
   /**
    * Attribute key for obtaining the global provider that provides atomics for aggregating
    * outstanding RPCs sent to each cluster.
    */
   @NameResolver.ResolutionResultAttr
   static final Attributes.Key<CallCounterProvider> CALL_COUNTER_PROVIDER =
-      Attributes.Key.create("io.grpc.xds.XdsAttributes.callCounterProvider");
+      Attributes.Key.create("io.grpc.xds.InternalXdsAttributes.callCounterProvider");
 
   /**
    * Name of the cluster that provides this EquivalentAddressGroup.
@@ -65,7 +65,7 @@ public final class InternalXdsAttributes {
   // TODO (chengyuanzhang): temporary solution for migrating to LRS policy. Should access
   //   stats object via XdsClient interface.
   static final Attributes.Key<LoadStatsStore> ATTR_CLUSTER_SERVICE_LOAD_STATS_STORE =
-      Attributes.Key.create("io.grpc.xds.XdsAttributes.loadStatsStore");
+      Attributes.Key.create("io.grpc.xds.InternalXdsAttributes.loadStatsStore");
 
   private InternalXdsAttributes() {}
 }

File: xds/src/main/java/io/grpc/xds/XdsClient.java
Patch:
@@ -85,7 +85,7 @@ public boolean equals(Object o) {
         return false;
       }
       LdsUpdate that = (LdsUpdate) o;
-      return Objects.equals(httpMaxStreamDurationNano, that.httpMaxStreamDurationNano)
+      return httpMaxStreamDurationNano == that.httpMaxStreamDurationNano
           && Objects.equals(rdsName, that.rdsName)
           && Objects.equals(virtualHosts, that.virtualHosts);
     }

File: xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java
Patch:
@@ -243,7 +243,6 @@ private List<VirtualHost> buildUnmatchedVirtualHosts() {
             Collections.singletonList(route2)));
   }
 
-  @SuppressWarnings("unchecked")
   @Test
   public void resolved_noTimeout() {
     resolver.start(mockListener);

File: alts/src/main/java/io/grpc/alts/ComputeEngineChannelCredentials.java
Patch:
@@ -69,6 +69,7 @@ private static InternalProtocolNegotiator.ClientFactory createClientFactory() {
     return new GoogleDefaultProtocolNegotiatorFactory(
         /* targetServiceAccounts= */ ImmutableList.<String>of(),
         SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL),
-        sslContext);
+        sslContext,
+        null);
   }
 }

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -441,6 +441,8 @@ private CdsUpdate parseNonAggregateCluster(Cluster cluster, String nonce, String
       if (!edsClusterConfig.getServiceName().isEmpty()) {
         edsServiceName = edsClusterConfig.getServiceName();
         edsResources.add(edsServiceName);
+      } else {
+        edsResources.add(clusterName);
       }
       EdsClusterConfig config = new EdsClusterConfig(lbPolicy, edsServiceName,
           lrsServerName, maxConcurrentRequests, upstreamTlsContext);

File: netty/src/main/java/io/grpc/netty/GrpcSslContexts.java
Patch:
@@ -208,6 +208,9 @@ public static SslContextBuilder configure(SslContextBuilder builder, Provider jd
       }
     } else if (ConscryptLoader.isConscrypt(jdkProvider)) {
       apc = ALPN;
+      // TODO: Conscrypt triggers failures in the TrustManager.
+      // https://github.com/grpc/grpc-java/issues/7765
+      builder.protocols("TLSv1.2");
     } else {
       throw new IllegalArgumentException("Unknown provider; can't configure: " + jdkProvider);
     }

File: xds/src/main/java/io/grpc/xds/internal/sds/ClientSslContextProviderFactory.java
Patch:
@@ -54,7 +54,7 @@ public SslContextProvider create(UpstreamTlsContext upstreamTlsContext) {
     if (CommonTlsContextUtil.hasCertProviderInstance(
             upstreamTlsContext.getCommonTlsContext())) {
       try {
-        Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();
+        Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.bootstrap();
         return certProviderClientSslContextProviderFactory.getProvider(
                 upstreamTlsContext,
                 bootstrapInfo.getNode().toEnvoyProtoNode(),
@@ -70,7 +70,7 @@ public SslContextProvider create(UpstreamTlsContext upstreamTlsContext) {
       try {
         return SdsClientSslContextProvider.getProvider(
             upstreamTlsContext,
-            bootstrapper.readBootstrap().getNode().toEnvoyProtoNodeV2(),
+            bootstrapper.bootstrap().getNode().toEnvoyProtoNodeV2(),
             Executors.newSingleThreadExecutor(new ThreadFactoryBuilder()
                 .setNameFormat("client-sds-sslcontext-provider-%d")
                 .setDaemon(true)

File: xds/src/main/java/io/grpc/xds/internal/sds/ServerSslContextProviderFactory.java
Patch:
@@ -55,7 +55,7 @@ public SslContextProvider create(
     if (CommonTlsContextUtil.hasCertProviderInstance(
             downstreamTlsContext.getCommonTlsContext())) {
       try {
-        Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();
+        Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.bootstrap();
         return certProviderServerSslContextProviderFactory.getProvider(
                 downstreamTlsContext,
                 bootstrapInfo.getNode().toEnvoyProtoNode(),
@@ -71,7 +71,7 @@ public SslContextProvider create(
       try {
         return SdsServerSslContextProvider.getProvider(
             downstreamTlsContext,
-            bootstrapper.readBootstrap().getNode().toEnvoyProtoNodeV2(),
+            bootstrapper.bootstrap().getNode().toEnvoyProtoNodeV2(),
             Executors.newSingleThreadExecutor(new ThreadFactoryBuilder()
                 .setNameFormat("server-sds-sslcontext-provider-%d")
                 .setDaemon(true)

File: xds/src/test/java/io/grpc/xds/ClientXdsClientTestBase.java
Patch:
@@ -55,7 +55,6 @@
 import io.grpc.xds.XdsClient.RdsResourceWatcher;
 import io.grpc.xds.XdsClient.RdsUpdate;
 import io.grpc.xds.XdsClient.ResourceWatcher;
-import io.grpc.xds.XdsClient.XdsChannel;
 import java.io.IOException;
 import java.util.ArrayDeque;
 import java.util.Arrays;
@@ -187,7 +186,8 @@ public void setUp() throws IOException {
 
     xdsClient =
         new ClientXdsClient(
-            new XdsChannel(channel, useProtocolV3()),
+            channel,
+            useProtocolV3(),
             EnvoyProtoData.Node.newBuilder().build(),
             fakeClock.getScheduledExecutorService(),
             backoffPolicyProvider,
@@ -200,9 +200,9 @@ public void setUp() throws IOException {
   @After
   public void tearDown() {
     xdsClient.shutdown();
+    channel.shutdown();  // channel not owned by XdsClient
     assertThat(adsEnded.get()).isTrue();
     assertThat(lrsEnded.get()).isTrue();
-    assertThat(channel.isShutdown()).isTrue();
     assertThat(fakeClock.getPendingTasks()).isEmpty();
   }
 

File: xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java
Patch:
@@ -68,7 +68,6 @@
 import io.grpc.xds.EnvoyProtoData.Node;
 import io.grpc.xds.XdsClient.ListenerUpdate;
 import io.grpc.xds.XdsClient.ListenerWatcher;
-import io.grpc.xds.XdsClient.XdsChannel;
 import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;
 import java.io.IOException;
 import java.util.ArrayDeque;
@@ -185,7 +184,7 @@ public void cancelled(Context context) {
         cleanupRule.register(InProcessChannelBuilder.forName(serverName).directExecutor().build());
 
     xdsClient =
-        new ServerXdsClient(new XdsChannel(channel, /* useProtocolV3= */ true), NODE,
+        new ServerXdsClient(channel, true, NODE,
             fakeClock.getScheduledExecutorService(), backoffPolicyProvider,
             fakeClock.getStopwatchSupplier(), true, INSTANCE_IP, "test/value");
     // Only the connection to management server is established, no RPC request is sent until at
@@ -197,8 +196,8 @@ public void cancelled(Context context) {
   @After
   public void tearDown() {
     xdsClient.shutdown();
+    channel.shutdownNow();
     assertThat(callEnded.get()).isTrue();
-    assertThat(channel.isShutdown()).isTrue();
     assertThat(fakeClock.getPendingTasks()).isEmpty();
   }
 

File: xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java
Patch:
@@ -67,7 +67,6 @@
 import io.grpc.xds.EnvoyProtoData.Node;
 import io.grpc.xds.XdsClient.ListenerUpdate;
 import io.grpc.xds.XdsClient.ListenerWatcher;
-import io.grpc.xds.XdsClient.XdsChannel;
 import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;
 import java.io.IOException;
 import java.util.ArrayDeque;
@@ -188,7 +187,7 @@ public void cancelled(Context context) {
         cleanupRule.register(InProcessChannelBuilder.forName(serverName).directExecutor().build());
 
     xdsClient =
-        new ServerXdsClient(new XdsChannel(channel, /* useProtocolV3= */ false), NODE,
+        new ServerXdsClient(channel, /* useProtocolV3= */ false, NODE,
             fakeClock.getScheduledExecutorService(), backoffPolicyProvider,
             fakeClock.getStopwatchSupplier(), false, INSTANCE_IP, "grpc/server");
     // Only the connection to management server is established, no RPC request is sent until at
@@ -200,8 +199,8 @@ public void cancelled(Context context) {
   @After
   public void tearDown() {
     xdsClient.shutdown();
+    channel.shutdown();
     assertThat(callEnded.get()).isTrue();
-    assertThat(channel.isShutdown()).isTrue();
     assertThat(fakeClock.getPendingTasks()).isEmpty();
   }
 

File: xds/src/main/java/io/grpc/xds/ClientXdsClient.java
Patch:
@@ -563,7 +563,7 @@ void watchLdsResource(final String resourceName, final LdsResourceWatcher watche
       public void run() {
         ResourceSubscriber subscriber = ldsResourceSubscribers.get(resourceName);
         if (subscriber == null) {
-          getLogger().log(XdsLogLevel.INFO, "Subscribe CDS resource {0}", resourceName);
+          getLogger().log(XdsLogLevel.INFO, "Subscribe LDS resource {0}", resourceName);
           subscriber = new ResourceSubscriber(ResourceType.LDS, resourceName);
           ldsResourceSubscribers.put(resourceName, subscriber);
           adjustResourceSubscription(ResourceType.LDS);

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -1133,7 +1133,7 @@ public void run() {
     public void data(boolean inFinished, int streamId, BufferedSource in, int length)
         throws IOException {
       logger.logData(OkHttpFrameLogger.Direction.INBOUND,
-          streamId, in.buffer(), length, inFinished);
+          streamId, in.getBuffer(), length, inFinished);
       OkHttpClientStream stream = getStream(streamId);
       if (stream == null) {
         if (mayHaveCreatedStream(streamId)) {
@@ -1150,7 +1150,7 @@ public void data(boolean inFinished, int streamId, BufferedSource in, int length
         in.require(length);
 
         Buffer buf = new Buffer();
-        buf.write(in.buffer(), length);
+        buf.write(in.getBuffer(), length);
         PerfMark.event("OkHttpClientTransport$ClientFrameHandler.data",
             stream.transportState().tag());
         synchronized (lock) {

File: rls/src/main/java/io/grpc/rls/LbPolicyConfiguration.java
Patch:
@@ -270,7 +270,6 @@ void refreshState() {
     public String toString() {
       return MoreObjects.toStringHelper(this)
           .add("target", target)
-          .add("helper", helper)
           .add("picker", picker)
           .add("state", state)
           .toString();

File: examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java
Patch:
@@ -61,7 +61,7 @@ public void greet(String name) {
 
   /**
    * Greet server. If provided, the first element of {@code args} is the name to use in the
-   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.
+   * greeting. The second argument is the target server. A {@code --xds-creds} flag is also accepted.
    */
   public static void main(String[] args) throws Exception {
     String user = "xds world";

File: examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldServer.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * An xDS-managed Server for the {@code Greeter} service.
  */
-public class HelloWorldServerXds {
+public class XdsHelloWorldServer {
   public static void main(String[] args) throws IOException, InterruptedException {
     int port = 50051;
     String hostname = null;

File: xds/src/main/java/io/grpc/xds/AbstractXdsClient.java
Patch:
@@ -709,7 +709,7 @@ void sendDiscoveryRequest(ResourceType type, String versionInfo, Collection<Stri
       }
       DiscoveryRequest request = builder.build();
       requestWriter.onNext(request);
-      logger.log(XdsLogLevel.DEBUG, "Sent DiscoveryRequest\n{0}", respPrinter);
+      logger.log(XdsLogLevel.DEBUG, "Sent DiscoveryRequest\n{0}", request);
     }
 
     @Override

File: api/src/main/java/io/grpc/ForwardingChannelBuilder.java
Patch:
@@ -24,7 +24,7 @@
 import javax.annotation.Nullable;
 
 /**
- * A {@link ManagedChannelBuilder} that delegates all its builder method to another builder by
+ * A {@link ManagedChannelBuilder} that delegates all its builder methods to another builder by
  * default.
  *
  * @param <T> The type of the subclass extending this abstract class.

File: api/src/main/java/io/grpc/ForwardingClientCall.java
Patch:
@@ -17,7 +17,7 @@
 package io.grpc;
 
 /**
- * A {@link ClientCall} which forwards all of it's methods to another {@link ClientCall}.
+ * A {@link ClientCall} which forwards all of its methods to another {@link ClientCall}.
  */
 public abstract class ForwardingClientCall<ReqT, RespT>
     extends PartialForwardingClientCall<ReqT, RespT> {

File: api/src/main/java/io/grpc/ForwardingServerBuilder.java
Patch:
@@ -24,7 +24,7 @@
 import javax.annotation.Nullable;
 
 /**
- * A {@link ServerBuilder} that delegates all its builder method to another builder by default.
+ * A {@link ServerBuilder} that delegates all its builder methods to another builder by default.
  *
  * @param <T> The type of the subclass extending this abstract class.
  * @since 1.34.0

File: api/src/main/java/io/grpc/ForwardingServerCall.java
Patch:
@@ -17,7 +17,7 @@
 package io.grpc;
 
 /**
- * A {@link ServerCall} which forwards all of it's methods to another {@link ServerCall}.
+ * A {@link ServerCall} which forwards all of its methods to another {@link ServerCall}.
  */
 public abstract class ForwardingServerCall<ReqT, RespT>
     extends PartialForwardingServerCall<ReqT, RespT> {

File: api/src/main/java/io/grpc/ForwardingServerBuilder.java
Patch:
@@ -27,10 +27,10 @@
  * A {@link ServerBuilder} that delegates all its builder method to another builder by default.
  *
  * @param <T> The type of the subclass extending this abstract class.
- * @since 1.33.0
+ * @since 1.34.0
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7393")
-abstract class ForwardingServerBuilder<T extends ServerBuilder<T>> extends ServerBuilder<T> {
+public abstract class ForwardingServerBuilder<T extends ServerBuilder<T>> extends ServerBuilder<T> {
 
   /** The default constructor. */
   protected ForwardingServerBuilder() {}
@@ -160,7 +160,7 @@ public String toString() {
   /**
    * Returns the correctly typed version of the builder.
    */
-  protected final T thisT() {
+  private T thisT() {
     @SuppressWarnings("unchecked")
     T thisT = (T) this;
     return thisT;

File: netty/src/main/java/io/grpc/netty/NettyServer.java
Patch:
@@ -261,7 +261,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
     // See #6850
     future.awaitUninterruptibly();
     if (!future.isSuccess()) {
-      throw new IOException("Failed to bind", future.cause());
+      throw new IOException(String.format("Failed to bind to address %s", address), future.cause());
     }
     channel = future.channel();
     channel.eventLoop().execute(new Runnable() {

File: interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java
Patch:
@@ -430,6 +430,8 @@ public void configure(ClientConfigureRequest request,
         newMetadata.put(metadata.getType(), md);
       }
       rpcConfig = new RpcConfig(request.getTypesList(), newMetadata);
+      responseObserver.onNext(ClientConfigureResponse.getDefaultInstance());
+      responseObserver.onCompleted();
     }
   }
 

File: core/src/main/java/io/grpc/util/RoundRobinLoadBalancer.java
Patch:
@@ -130,9 +130,9 @@ public void onSubchannelState(ConnectivityStateInfo state) {
 
   @Override
   public void handleNameResolutionError(Status error) {
-    // ready pickers aren't affected by status changes
-    updateBalancingState(TRANSIENT_FAILURE,
-        currentPicker instanceof ReadyPicker ? currentPicker : new EmptyPicker(error));
+    if (currentState != READY)  {
+      updateBalancingState(TRANSIENT_FAILURE, new EmptyPicker(error));
+    }
   }
 
   private void processSubchannelState(Subchannel subchannel, ConnectivityStateInfo stateInfo) {

File: core/src/test/java/io/grpc/util/RoundRobinLoadBalancerTest.java
Patch:
@@ -381,13 +381,12 @@ public void nameResolutionErrorWithActiveChannels() throws Exception {
     loadBalancer.handleNameResolutionError(Status.NOT_FOUND.withDescription("nameResolutionError"));
 
     verify(mockHelper, times(3)).createSubchannel(any(CreateSubchannelArgs.class));
-    verify(mockHelper, times(3))
+    verify(mockHelper, times(2))
         .updateBalancingState(stateCaptor.capture(), pickerCaptor.capture());
 
     Iterator<ConnectivityState> stateIterator = stateCaptor.getAllValues().iterator();
     assertEquals(CONNECTING, stateIterator.next());
     assertEquals(READY, stateIterator.next());
-    assertEquals(TRANSIENT_FAILURE, stateIterator.next());
 
     LoadBalancer.PickResult pickResult = pickerCaptor.getValue().pickSubchannel(mockArgs);
     assertEquals(readySubchannel, pickResult.getSubchannel());

File: api/src/main/java/io/grpc/ForwardingServerBuilder.java
Patch:
@@ -30,8 +30,7 @@
  * @since 1.33.0
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/7393")
-public abstract class ForwardingServerBuilder<T extends ForwardingServerBuilder<T>>
-    extends ServerBuilder<T> {
+abstract class ForwardingServerBuilder<T extends ServerBuilder<T>> extends ServerBuilder<T> {
 
   /** The default constructor. */
   protected ForwardingServerBuilder() {}

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -21,9 +21,9 @@
 
 import io.grpc.ChannelLogger;
 import io.grpc.ExperimentalApi;
-import io.grpc.ForwardingChannelBuilder;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelBuilder;
+import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.GrpcUtil;
@@ -45,7 +45,7 @@
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1783")
 public final class InProcessChannelBuilder extends
-    ForwardingChannelBuilder<InProcessChannelBuilder> {
+    AbstractManagedChannelImplBuilder<InProcessChannelBuilder> {
   /**
    * Create a channel builder that will connect to the server with the given name.
    *

File: core/src/main/java/io/grpc/inprocess/InProcessServerBuilder.java
Patch:
@@ -21,10 +21,10 @@
 import com.google.common.base.Preconditions;
 import io.grpc.Deadline;
 import io.grpc.ExperimentalApi;
-import io.grpc.ForwardingServerBuilder;
 import io.grpc.Internal;
 import io.grpc.ServerBuilder;
 import io.grpc.ServerStreamTracer;
+import io.grpc.internal.AbstractServerImplBuilder;
 import io.grpc.internal.FixedObjectPool;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.InternalServer;
@@ -72,7 +72,8 @@
  * </pre>
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1783")
-public final class InProcessServerBuilder extends ForwardingServerBuilder<InProcessServerBuilder> {
+public final class InProcessServerBuilder extends
+    AbstractServerImplBuilder<InProcessServerBuilder> {
   /**
    * Create a server builder that will bind with the given name.
    *

File: cronet/src/main/java/io/grpc/cronet/CronetChannelBuilder.java
Patch:
@@ -26,9 +26,9 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import io.grpc.ChannelLogger;
 import io.grpc.ExperimentalApi;
-import io.grpc.ForwardingChannelBuilder;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelBuilder;
+import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.GrpcUtil;
@@ -50,7 +50,8 @@
 
 /** Convenience class for building channels with the cronet transport. */
 @ExperimentalApi("There is no plan to make this API stable, given transport API instability")
-public final class CronetChannelBuilder extends ForwardingChannelBuilder<CronetChannelBuilder> {
+public final class CronetChannelBuilder
+    extends AbstractManagedChannelImplBuilder<CronetChannelBuilder> {
 
   private static final String LOG_TAG = "CronetChannelBuilder";
 

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -30,10 +30,10 @@
 import io.grpc.ChannelLogger;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.ExperimentalApi;
-import io.grpc.ForwardingChannelBuilder;
 import io.grpc.HttpConnectProxiedSocketAddress;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelBuilder;
+import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AtomicBackoff;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
@@ -69,7 +69,8 @@
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
 @CanIgnoreReturnValue
-public final class NettyChannelBuilder extends ForwardingChannelBuilder<NettyChannelBuilder> {
+public final class NettyChannelBuilder extends
+    AbstractManagedChannelImplBuilder<NettyChannelBuilder> {
 
   // 1MiB.
   public static final int DEFAULT_FLOW_CONTROL_WINDOW = 1024 * 1024;

File: netty/src/main/java/io/grpc/netty/NettyServerBuilder.java
Patch:
@@ -27,10 +27,10 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import io.grpc.ExperimentalApi;
-import io.grpc.ForwardingServerBuilder;
 import io.grpc.Internal;
 import io.grpc.ServerBuilder;
 import io.grpc.ServerStreamTracer;
+import io.grpc.internal.AbstractServerImplBuilder;
 import io.grpc.internal.FixedObjectPool;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.InternalServer;
@@ -66,7 +66,7 @@
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
 @CanIgnoreReturnValue
-public final class NettyServerBuilder extends ForwardingServerBuilder<NettyServerBuilder> {
+public final class NettyServerBuilder extends AbstractServerImplBuilder<NettyServerBuilder> {
 
   // 1MiB
   public static final int DEFAULT_FLOW_CONTROL_WINDOW = 1024 * 1024;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -29,11 +29,11 @@
 import io.grpc.CompositeCallCredentials;
 import io.grpc.CompositeChannelCredentials;
 import io.grpc.ExperimentalApi;
-import io.grpc.ForwardingChannelBuilder;
 import io.grpc.InsecureChannelCredentials;
 import io.grpc.Internal;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.TlsChannelCredentials;
+import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AtomicBackoff;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.ConnectionClientTransport;
@@ -67,7 +67,8 @@
 
 /** Convenience class for building channels with the OkHttp transport. */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1785")
-public final class OkHttpChannelBuilder extends ForwardingChannelBuilder<OkHttpChannelBuilder> {
+public final class OkHttpChannelBuilder extends
+    AbstractManagedChannelImplBuilder<OkHttpChannelBuilder> {
 
   public static final int DEFAULT_FLOW_CONTROL_WINDOW = 65535;
   private final ManagedChannelImplBuilder managedChannelImplBuilder;

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -529,7 +529,7 @@ public void maxHeaderListSizeShouldBeEnforcedOnClient() throws Exception {
       Throwable rootCause = getRootCause(e);
       Status status = ((StatusException) rootCause).getStatus();
       assertEquals(Status.Code.INTERNAL, status.getCode());
-      assertEquals("HTTP/2 error code: PROTOCOL_ERROR\nReceived Rst Stream",
+      assertEquals("RST_STREAM closed stream. HTTP/2 error code: PROTOCOL_ERROR",
           status.getDescription());
     }
   }

File: context/src/main/java/io/grpc/Deadline.java
Patch:
@@ -17,6 +17,7 @@
 package io.grpc;
 
 import java.util.Arrays;
+import java.util.Locale;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
@@ -206,7 +207,7 @@ public String toString() {
     }
     buf.append(seconds);
     if (nanos > 0) {
-      buf.append(String.format(".%09d", nanos));
+      buf.append(String.format(Locale.US, ".%09d", nanos));
     }
     buf.append("s from now");
     if (ticker != SYSTEM_TICKER) {

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -54,6 +54,7 @@
 import io.perfmark.Tag;
 import java.io.InputStream;
 import java.nio.charset.Charset;
+import java.util.Locale;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
@@ -441,7 +442,7 @@ public void run() {
         buf.append('-');
       }
       buf.append(seconds);
-      buf.append(String.format(".%09d", nanos));
+      buf.append(String.format(Locale.US, ".%09d", nanos));
       buf.append("s. ");
       buf.append(insight);
       stream.cancel(DEADLINE_EXCEEDED.augmentDescription(buf.toString()));

File: core/src/main/java/io/grpc/internal/DelayedClientCall.java
Patch:
@@ -30,6 +30,7 @@
 import io.grpc.Status;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
@@ -117,7 +118,7 @@ private ScheduledFuture<?> scheduleDeadlineIfNeeded(
       buf.append("Deadline exceeded after ");
     }
     buf.append(seconds);
-    buf.append(String.format(".%09d", nanos));
+    buf.append(String.format(Locale.US, ".%09d", nanos));
     buf.append("s. ");
     /** Cancels the call if deadline exceeded prior to the real call being set. */
     class DeadlineExceededRunnable implements Runnable {

File: xds/src/main/java/io/grpc/xds/AbstractXdsClient.java
Patch:
@@ -64,7 +64,8 @@ abstract class AbstractXdsClient extends XdsClient {
       "type.googleapis.com/envoy.api.v2.RouteConfiguration";
   private static final String ADS_TYPE_URL_RDS =
       "type.googleapis.com/envoy.config.route.v3.RouteConfiguration";
-  private static final String ADS_TYPE_URL_CDS_V2 = "type.googleapis.com/envoy.api.v2.Cluster";
+  @VisibleForTesting
+  static final String ADS_TYPE_URL_CDS_V2 = "type.googleapis.com/envoy.api.v2.Cluster";
   private static final String ADS_TYPE_URL_CDS =
       "type.googleapis.com/envoy.config.cluster.v3.Cluster";
   private static final String ADS_TYPE_URL_EDS_V2 =

File: xds/src/main/java/io/grpc/xds/EnvoyProtoData.java
Patch:
@@ -61,6 +61,7 @@
  */
 // TODO(chengyuanzhang): put data types into smaller categories.
 final class EnvoyProtoData {
+  static final String TRANSPORT_SOCKET_NAME_TLS = "envoy.transport_sockets.tls";
 
   // Prevent instantiation.
   private EnvoyProtoData() {

File: xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.grpc.xds;
 
+import static io.grpc.xds.EnvoyProtoData.TRANSPORT_SOCKET_NAME_TLS;
+
 import com.google.common.annotations.VisibleForTesting;
 import com.google.protobuf.Any;
 import com.google.protobuf.InvalidProtocolBufferException;
@@ -295,7 +297,7 @@ private static DownstreamTlsContext getTlsContextFromFilterChain(
         io.envoyproxy.envoy.config.listener.v3.FilterChain filterChain)
         throws InvalidProtocolBufferException {
       if (filterChain.hasTransportSocket()
-          && "tls".equals(filterChain.getTransportSocket().getName())) {
+          && TRANSPORT_SOCKET_NAME_TLS.equals(filterChain.getTransportSocket().getName())) {
         Any any = filterChain.getTransportSocket().getTypedConfig();
         return DownstreamTlsContext.fromEnvoyProtoDownstreamTlsContext(
             io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext.parseFrom(

File: xds/src/main/java/io/grpc/xds/XdsClientImpl2.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
+import static io.grpc.xds.EnvoyProtoData.TRANSPORT_SOCKET_NAME_TLS;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Stopwatch;
@@ -783,7 +784,8 @@ private void handleCdsResponse(DiscoveryResponseData cdsResponse) {
   @Nullable
   private static EnvoyServerProtoData.UpstreamTlsContext getTlsContextFromCluster(Cluster cluster)
       throws InvalidProtocolBufferException {
-    if (cluster.hasTransportSocket() && "tls".equals(cluster.getTransportSocket().getName())) {
+    if (cluster.hasTransportSocket()
+        && TRANSPORT_SOCKET_NAME_TLS.equals(cluster.getTransportSocket().getName())) {
       Any any = cluster.getTransportSocket().getTypedConfig();
       return EnvoyServerProtoData.UpstreamTlsContext.fromEnvoyProtoUpstreamTlsContext(
           any.unpack(UpstreamTlsContext.class));

File: xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java
Patch:
@@ -118,7 +118,7 @@ private static FilterChain createInFilter() {
                         .build())
                     .addApplicationProtocols("managed-mtls")
                     .build())
-            .setTransportSocket(TransportSocket.newBuilder().setName("tls")
+            .setTransportSocket(TransportSocket.newBuilder().setName("envoy.transport_sockets.tls")
                 .setTypedConfig(
                     Any.pack(CommonTlsContextTestsUtil.buildTestDownstreamTlsContext(
                         "google-sds-config-default", "ROOTCA")))

File: xds/src/test/java/io/grpc/xds/XdsClientTestHelper.java
Patch:
@@ -235,7 +235,9 @@ static Cluster buildSecureCluster(
     }
     if (upstreamTlsContext != null) {
       clusterBuilder.setTransportSocket(
-          TransportSocket.newBuilder().setName("tls").setTypedConfig(Any.pack(upstreamTlsContext)));
+          TransportSocket.newBuilder()
+              .setName("envoy.transport_sockets.tls")
+              .setTypedConfig(Any.pack(upstreamTlsContext)));
     }
     return clusterBuilder.build();
   }

File: rls/src/main/java/io/grpc/rls/RlsProtoData.java
Patch:
@@ -195,6 +195,7 @@ static final class RouteLookupConfig {
 
     private final ImmutableList<String> validTargets;
 
+    @Nullable
     private final String defaultTarget;
 
     RouteLookupConfig(
@@ -205,6 +206,7 @@ static final class RouteLookupConfig {
         @Nullable Long staleAgeInMillis,
         long cacheSizeBytes,
         List<String> validTargets,
+        @Nullable
         String defaultTarget) {
       checkState(
           !checkNotNull(grpcKeyBuilders, "grpcKeyBuilders").isEmpty(),
@@ -233,7 +235,7 @@ static final class RouteLookupConfig {
       checkArgument(cacheSizeBytes > 0, "cacheSize must be positive");
       this.cacheSizeBytes = cacheSizeBytes;
       this.validTargets = ImmutableList.copyOf(checkNotNull(validTargets, "validTargets"));
-      this.defaultTarget = checkNotNull(defaultTarget, "defaultTarget");
+      this.defaultTarget = defaultTarget;
     }
 
     /**

File: alts/src/test/java/io/grpc/alts/internal/GoogleDefaultProtocolNegotiatorTest.java
Patch:
@@ -69,7 +69,7 @@ public void setUp() throws Exception {
         ImmutableList.<String>of(),
         handshakerChannelPool,
         sslContext)
-        .buildProtocolNegotiator();
+        .newNegotiator();
   }
 
   @After

File: netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-/** Unit tests for {@link Shading}. */
+/** Unit tests for shaded gRPC Netty. */
 @RunWith(JUnit4.class)
 public final class ShadingTest {
   private ManagedChannel channel;

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -45,7 +45,6 @@
 import io.grpc.internal.StatsTraceContext;
 import io.grpc.internal.TransportTracer;
 import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2ServerHeadersDecoder;
-import io.grpc.netty.ListeningEncoder.ListeningDefaultHttp2ConnectionEncoder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.channel.ChannelFuture;
@@ -55,6 +54,7 @@
 import io.netty.handler.codec.http2.DecoratingHttp2FrameWriter;
 import io.netty.handler.codec.http2.DefaultHttp2Connection;
 import io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder;
+import io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
 import io.netty.handler.codec.http2.DefaultHttp2FrameReader;
 import io.netty.handler.codec.http2.DefaultHttp2FrameWriter;
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
@@ -221,7 +221,7 @@ static NettyServerHandler newHandler(
         new DefaultHttp2LocalFlowController(connection, DEFAULT_WINDOW_UPDATE_RATIO, true));
     frameWriter = new WriteMonitoringFrameWriter(frameWriter, keepAliveEnforcer);
     Http2ConnectionEncoder encoder =
-        new ListeningDefaultHttp2ConnectionEncoder(connection, frameWriter);
+        new DefaultHttp2ConnectionEncoder(connection, frameWriter);
     encoder = new Http2ControlFrameLimitEncoder(encoder, 10000);
     Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(connection, encoder,
         frameReader);
@@ -263,7 +263,7 @@ private NettyServerHandler(
       long maxConnectionAgeGraceInNanos,
       final KeepAliveEnforcer keepAliveEnforcer,
       boolean autoFlowControl) {
-    super(channelUnused, decoder, encoder, settings, autoFlowControl);
+    super(channelUnused, decoder, encoder, settings, autoFlowControl, null);
 
     final MaxConnectionIdleManager maxConnectionIdleManager;
     if (maxConnectionIdleInNanos == MAX_CONNECTION_IDLE_NANOS_DISABLED) {

File: netty/src/test/java/io/grpc/netty/NettyHandlerTestBase.java
Patch:
@@ -316,7 +316,7 @@ protected final ByteBuf serializeSettings(Http2Settings settings) {
 
   protected final ByteBuf windowUpdate(int streamId, int delta) {
     ChannelHandlerContext ctx = newMockContext();
-    new DefaultHttp2FrameWriter().writeWindowUpdate(ctx, 0, delta, newPromise());
+    new DefaultHttp2FrameWriter().writeWindowUpdate(ctx, streamId, delta, newPromise());
     return captureWrite(ctx);
   }
 

File: xds/src/test/java/io/grpc/xds/EdsLoadBalancerTest.java
Patch:
@@ -80,7 +80,6 @@
 import io.grpc.xds.LocalityStore.LocalityStoreFactory;
 import io.grpc.xds.XdsClient.EndpointUpdate;
 import io.grpc.xds.XdsClient.XdsChannel;
-import io.grpc.xds.XdsClient.XdsChannelFactory;
 import java.net.InetSocketAddress;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -240,8 +239,7 @@ public StreamObserver<DiscoveryRequest> streamAggregatedResources(
       xdsClientPoolFromResolveAddresses = new FakeXdsClientPool(
           new XdsClientImpl(
               SERVICE_AUTHORITY,
-              serverList,
-              channelFactory,
+              new XdsChannel(channel, /* useProtocolV3= */ false),
               node,
               syncContext,
               fakeClock.getScheduledExecutorService(),

File: xds/src/main/java/io/grpc/xds/Bootstrapper.java
Patch:
@@ -84,7 +84,7 @@ public static Bootstrapper getInstance() {
   /** Parses a raw string into {@link BootstrapInfo}. */
   @VisibleForTesting
   @SuppressWarnings("unchecked")
-  public static BootstrapInfo parseConfig(String rawData) throws XdsInitializationException {
+  static BootstrapInfo parseConfig(String rawData) throws XdsInitializationException {
     XdsLogger logger = XdsLogger.withPrefix(LOG_PREFIX);
     logger.log(XdsLogLevel.INFO, "Reading bootstrap information");
     Map<String, ?> rawBootstrap;

File: xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java
Patch:
@@ -80,10 +80,12 @@ public class XdsSdsClientServerTest {
   @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();
   private int port;
   private FakeNameResolverFactory fakeNameResolverFactory;
+  private Bootstrapper mockBootstrapper;
 
   @Before
   public void setUp() throws IOException {
     port = XdsServerTestHelper.findFreePort();
+    mockBootstrapper = mock(Bootstrapper.class);
   }
 
   @After
@@ -367,7 +369,7 @@ private SimpleServiceGrpc.SimpleServiceBlockingStub getBlockingStub(
             ? Attributes.newBuilder()
                 .set(XdsAttributes.ATTR_SSL_CONTEXT_PROVIDER_SUPPLIER,
                     new SslContextProviderSupplier(
-                        upstreamTlsContext, TlsContextManagerImpl.getInstance()))
+                        upstreamTlsContext, new TlsContextManagerImpl(mockBootstrapper)))
                 .build()
             : Attributes.EMPTY;
     fakeNameResolverFactory.setServers(

File: api/src/test/java/io/grpc/ClientInterceptorsTest.java
Patch:
@@ -329,7 +329,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
     assertSame(listener, call.listener);
     assertSame(headers, call.headers);
     interceptedCall.sendMessage(null /*request*/);
-    assertThat(call.messages).containsExactly((Void) null /*request*/);
+    assertThat(call.messages).containsExactly((String) null);
     interceptedCall.halfClose();
     assertTrue(call.halfClosed);
     interceptedCall.request(1);

File: netty/src/test/java/io/grpc/netty/WriteBufferingAndExceptionHandlerTest.java
Patch:
@@ -345,7 +345,7 @@ public void run() {
     assertThat(chan.pipeline().context(handler)).isNull();
     assertThat(write.get().getClass()).isSameInstanceAs(Object.class);
     assertTrue(flush.get());
-    assertThat(chan.pipeline()).doesNotContain(handler);
+    assertThat(chan.pipeline().toMap().values()).doesNotContain(handler);
   }
 
   @Test

File: xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java
Patch:
@@ -207,7 +207,7 @@ public void startXdsClient_expectException() {
     verify(mockServerWatcher).onError(argCaptor.capture());
     Status captured = argCaptor.getValue();
     assertThat(captured.getCode()).isEqualTo(Status.Code.UNKNOWN);
-    assertThat(captured.getCause()).isInstanceOf(IOException.class);
+    assertThat(captured.getCause()).isInstanceOf(XdsInitializationException.class);
     assertThat(captured.getCause())
         .hasMessageThat()
         .contains("Environment variable GRPC_XDS_BOOTSTRAP not defined");

File: xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java
Patch:
@@ -126,8 +126,8 @@ public BootstrapInfo readBootstrap() {
   public void resolve_failToBootstrap() {
     Bootstrapper bootstrapper = new Bootstrapper() {
       @Override
-      public BootstrapInfo readBootstrap() throws IOException {
-        throw new IOException("Fail to read bootstrap file");
+      public BootstrapInfo readBootstrap() throws XdsInitializationException {
+        throw new XdsInitializationException("Fail to read bootstrap file");
       }
     };
     resolver = new XdsNameResolver(AUTHORITY, serviceConfigParser, syncContext, bootstrapper,

File: xds/src/test/java/io/grpc/xds/XdsServerBuilderTest.java
Patch:
@@ -242,7 +242,7 @@ public void xdsServerWithoutMockXdsClient_startError()
     verify(mockErrorNotifier).onError(argCaptor.capture());
     Status captured = argCaptor.getValue();
     assertThat(captured.getCode()).isEqualTo(Status.Code.UNKNOWN);
-    assertThat(captured.getCause()).isInstanceOf(IOException.class);
+    assertThat(captured.getCause()).isInstanceOf(XdsInitializationException.class);
     assertThat(captured.getCause())
             .hasMessageThat()
             .contains("Environment variable GRPC_XDS_BOOTSTRAP not defined");

File: xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java
Patch:
@@ -457,7 +457,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
 
         @Override
         public void start(Listener<RespT> responseListener, Metadata headers) {
-          headers.put(KEY_FOR_ZONE_INFO, zone);
+          headers.put(KEY_FOR_ZONE_INFO, "location=locations/" + zone);
           super.start(responseListener, headers);
         }
       };

File: xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java
Patch:
@@ -69,7 +69,7 @@ final class MeshCaCertificateProviderProvider implements CertificateProviderProv
   static final long RPC_TIMEOUT_SECONDS = 10L;
 
   private static final Pattern CLUSTER_URL_PATTERN = Pattern
-      .compile(".*/projects/(.*)/locations/(.*)/clusters/.*");
+      .compile(".*/projects/(.*)/(?:locations|zones)/(.*)/clusters/.*");
 
   private static final String TRUST_DOMAIN_SUFFIX = ".svc.id.goog";
   private static final String AUDIENCE_PREFIX = "identitynamespace:";

File: xds/src/test/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderTest.java
Patch:
@@ -534,7 +534,7 @@ private void verifyReceivedMetadataValues(int count) {
     assertThat(receivedZoneValues).hasSize(count);
     for (int i = 0; i < count; i++) {
       assertThat(receivedStsCreds.poll()).isEqualTo("Bearer " + TEST_STS_TOKEN + i);
-      assertThat(receivedZoneValues.poll()).isEqualTo("us-west2-a");
+      assertThat(receivedZoneValues.poll()).isEqualTo("location=locations/us-west2-a");
     }
   }
 

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.protobuf.ByteString;
 import io.grpc.ManagedChannel;
+import io.grpc.ManagedChannelBuilder;
 import io.grpc.Server;
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
@@ -30,7 +31,6 @@
 import io.grpc.benchmarks.qps.AsyncServer;
 import io.grpc.inprocess.InProcessChannelBuilder;
 import io.grpc.inprocess.InProcessServerBuilder;
-import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AbstractServerImplBuilder;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
@@ -81,7 +81,7 @@ public enum Transport {
   @Setup
   public void setUp() throws Exception {
     AbstractServerImplBuilder<?> serverBuilder;
-    AbstractManagedChannelImplBuilder<?> channelBuilder;
+    ManagedChannelBuilder<?> channelBuilder;
     switch (transport) {
       case INPROCESS:
       {

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -51,7 +51,7 @@
 import javax.annotation.Nullable;
 
 /**
- * The base class for channel builders.
+ * Abstract base class for channel builders.
  *
  * @param <T> The concrete type of this builder.
  */

File: core/src/test/java/io/grpc/internal/ServiceConfigErrorHandlingTest.java
Patch:
@@ -61,7 +61,6 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.mockito.ArgumentCaptor;
@@ -103,7 +102,6 @@ public boolean shouldAccept(Runnable command) {
 
   private final InternalChannelz channelz = new InternalChannelz();
 
-  @Rule public final ExpectedException thrown = ExpectedException.none();
   @Rule public final MockitoRule mocks = MockitoJUnit.rule();
 
   private ManagedChannelImpl channel;

File: examples/example-tls/src/main/java/io/grpc/examples/helloworldtls/HelloWorldServerTls.java
Patch:
@@ -25,7 +25,6 @@
 import io.grpc.stub.StreamObserver;
 import io.netty.handler.ssl.ClientAuth;
 import io.netty.handler.ssl.SslContextBuilder;
-import io.netty.handler.ssl.SslProvider;
 
 import java.io.File;
 import java.io.IOException;

File: netty/src/main/java/io/grpc/netty/InternalProtocolNegotiationEvent.java
Patch:
@@ -17,12 +17,14 @@
 package io.grpc.netty;
 
 import io.grpc.Attributes;
+import io.grpc.Internal;
 import io.grpc.InternalChannelz.Security;
 import javax.annotation.Nullable;
 
 /**
  * Internal accessor for {@link ProtocolNegotiationEvent}.
  */
+@Internal
 public final class InternalProtocolNegotiationEvent {
   private InternalProtocolNegotiationEvent() {}
 

File: xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java
Patch:
@@ -17,6 +17,7 @@
 package io.grpc.xds;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static java.util.concurrent.TimeUnit.NANOSECONDS;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Stopwatch;
@@ -33,7 +34,6 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.NotThreadSafe;
@@ -113,7 +113,7 @@ public ClusterStats generateLoadReport() {
       statsBuilder.addDroppedRequests(new DroppedRequests(entry.getKey(),drops));
     }
     statsBuilder.setTotalDroppedRequests(totalDrops);
-    statsBuilder.setLoadReportIntervalNanos(stopwatch.elapsed(TimeUnit.NANOSECONDS));
+    statsBuilder.setLoadReportIntervalNanos(stopwatch.elapsed(NANOSECONDS));
     stopwatch.reset().start();
     return statsBuilder.build();
   }

File: xds/src/main/java/io/grpc/xds/PriorityLoadBalancer.java
Patch:
@@ -260,7 +260,6 @@ public void run() {
                 policy = newPolicy;
                 lb.switchTo(lbProvider);
               }
-              // TODO(zdapeng): Implement address filtering.
               lb.handleResolvedAddresses(
                   addresses
                       .toBuilder()

File: xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderSslContextProvider.java
Patch:
@@ -83,7 +83,7 @@ protected CertProviderSslContextProvider(
     }
   }
 
-  private CertificateProviderInfo getCertProviderConfig(
+  private static CertificateProviderInfo getCertProviderConfig(
       Map<String, CertificateProviderInfo> certProviders, String pluginInstanceName) {
     return certProviders.get(pluginInstanceName);
   }

File: xds/src/main/java/io/grpc/xds/internal/rbac/engine/EvaluateArgs.java
Patch:
@@ -23,8 +23,8 @@
 
 /** The EvaluateArgs class holds evaluate arguments used in CEL-based Authorization Engine. */
 public class EvaluateArgs {
-  private Metadata headers;
-  private ServerCall<?, ?> call;
+  private final Metadata headers;
+  private final ServerCall<?, ?> call;
 
   /**
    * Creates a new EvaluateArgs using the input {@code headers} for resolving headers

File: xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java
Patch:
@@ -75,8 +75,8 @@ protected final void updateSslContext() {
                 alpnList);
         sslContextBuilder.applicationProtocolConfig(apn);
       }
-      List<Callback> pendingCallbacksCopy = null;
-      SslContext sslContextCopy = null;
+      List<Callback> pendingCallbacksCopy;
+      SslContext sslContextCopy;
       synchronized (pendingCallbacks) {
         sslContext = sslContextBuilder.build();
         sslContextCopy = sslContext;

File: xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTest.java
Patch:
@@ -109,7 +109,7 @@ public static Iterable<Object[]> data() {
             "exact IP over IPANY match, expect filter2"
           },
           {
-            PORT,// matches dest port but no address match
+            PORT, // matches dest port but no address match
             "168.20.20.2",
             "10.1.2.4",
             "192.168.10.1",

File: xds/src/test/java/io/grpc/xds/internal/certprovider/CertProviderServerSslContextProviderTest.java
Patch:
@@ -17,7 +17,6 @@
 package io.grpc.xds.internal.certprovider;
 
 import static com.google.common.truth.Truth.assertThat;
-import static io.grpc.xds.internal.certprovider.CertProviderClientSslContextProviderTest.QueuedExecutor;
 import static io.grpc.xds.internal.certprovider.CommonCertProviderTestUtils.getCertFromResourceName;
 import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CA_PEM_FILE;
 import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CLIENT_PEM_FILE;
@@ -34,6 +33,7 @@
 import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;
 import io.grpc.xds.Bootstrapper;
 import io.grpc.xds.EnvoyServerProtoData;
+import io.grpc.xds.internal.certprovider.CertProviderClientSslContextProviderTest.QueuedExecutor;
 import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;
 import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.TestCallback;
 import org.junit.Before;

File: xds/src/test/java/io/grpc/xds/internal/rbac/engine/AuthzEngineTest.java
Patch:
@@ -68,7 +68,6 @@ public class AuthzEngineTest {
   private AuthorizationEngine engine;  
   private RBAC rbacDeny;
   private RBAC rbacAllow;
-  private Expr expr;
   private Object result;
 
   @Before
@@ -130,7 +129,7 @@ public void failToCreateEngineIfRbacPairOfDenyDeny() {
   public void testCelInterface() throws InterpreterException {
     engine = new AuthorizationEngine(rbacAllow);
     when(interpretable.eval(any(Activation.class))).thenReturn(true);
-    expr = Expr.newBuilder().build();
+    Expr expr = Expr.getDefaultInstance();
     result = engine.matches(expr, activation);
     assertThat(messageProvider).isNotNull();
     assertThat(dispatcher).isNotNull();

File: xds/src/test/java/io/grpc/xds/internal/rbac/engine/EvaluateArgsTest.java
Patch:
@@ -106,7 +106,7 @@ public void testGenerateEnvoyAttributes() {
     verify(spyArgs, times(1)).getConnectionUriSanPeerCertificate();
     verify(spyArgs, times(1)).getSourcePrincipal();
   }
-  
+
   @Test
   public void testEvaluateArgsAccessorFunctions() {
     // Set up args and call.

File: api/src/test/java/io/grpc/ForwardingChannelBuilderTest.java
Patch:
@@ -88,7 +88,7 @@ public void allBuilderMethodsReturnThis() throws Exception {
   }
 
   @Test
-  public void buildReturnsDelegateBuildByDefualt() {
+  public void buildReturnsDelegateBuildByDefault() {
     ManagedChannel mockChannel = mock(ManagedChannel.class);
     doReturn(mockChannel).when(mockDelegate).build();
 

File: core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java
Patch:
@@ -267,12 +267,12 @@ static final class MethodInfo {
       Map<String, ?> retryPolicyMap =
           retryEnabled ? ServiceConfigUtil.getRetryPolicyFromMethodConfig(methodConfig) : null;
       retryPolicy = retryPolicyMap == null
-          ? RetryPolicy.DEFAULT : retryPolicy(retryPolicyMap, maxRetryAttemptsLimit);
+          ? null : retryPolicy(retryPolicyMap, maxRetryAttemptsLimit);
 
       Map<String, ?> hedgingPolicyMap =
           retryEnabled ? ServiceConfigUtil.getHedgingPolicyFromMethodConfig(methodConfig) : null;
       hedgingPolicy = hedgingPolicyMap == null
-          ? HedgingPolicy.DEFAULT : hedgingPolicy(hedgingPolicyMap, maxHedgedAttemptsLimit);
+          ? null : hedgingPolicy(hedgingPolicyMap, maxHedgedAttemptsLimit);
     }
 
     @Override

File: core/src/test/java/io/grpc/internal/ServiceConfigInterceptorTest.java
Patch:
@@ -123,9 +123,9 @@ public void handleUpdateNotCalledBeforeInterceptCall() {
     verify(channel).newCall(eq(methodDescriptor), callOptionsCap.capture());
     assertThat(callOptionsCap.getValue().isWaitForReady()).isFalse();
     assertThat(callOptionsCap.getValue().getOption(RETRY_POLICY_KEY).get())
-        .isEqualTo(RetryPolicy.DEFAULT);
+        .isNull();
     assertThat(callOptionsCap.getValue().getOption(HEDGING_POLICY_KEY).get())
-        .isEqualTo(HedgingPolicy.DEFAULT);
+        .isNull();
   }
 
   @Test

File: alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java
Patch:
@@ -23,6 +23,7 @@
 import io.grpc.Status;
 import io.grpc.alts.internal.HandshakerServiceGrpc.HandshakerServiceStub;
 import java.io.IOException;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.security.GeneralSecurityException;
 import java.util.logging.Level;
@@ -199,7 +200,7 @@ public ByteBuffer startServerHandshake(ByteBuffer inBytes) throws GeneralSecurit
       throw new GeneralSecurityException(e);
     }
     handleResponse(resp);
-    inBytes.position(inBytes.position() + resp.getBytesConsumed());
+    ((Buffer) inBytes).position(inBytes.position() + resp.getBytesConsumed());
     return resp.getOutFrames().asReadOnlyByteBuffer();
   }
 
@@ -227,7 +228,7 @@ public ByteBuffer next(ByteBuffer inBytes) throws GeneralSecurityException {
       throw new GeneralSecurityException(e);
     }
     handleResponse(resp);
-    inBytes.position(inBytes.position() + resp.getBytesConsumed());
+    ((Buffer) inBytes).position(inBytes.position() + resp.getBytesConsumed());
     return resp.getOutFrames().asReadOnlyByteBuffer();
   }
 

File: alts/src/main/java/io/grpc/alts/internal/AltsTsiHandshaker.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.base.Preconditions;
 import io.grpc.alts.internal.HandshakerServiceGrpc.HandshakerServiceStub;
 import io.netty.buffer.ByteBufAllocator;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.security.GeneralSecurityException;
 import java.util.ArrayList;
@@ -151,10 +152,10 @@ public void getBytesToSendToPeer(ByteBuffer bytes) throws GeneralSecurityExcepti
     ByteBuffer outputFrameAlias = outputFrame;
     if (outputFrame.remaining() > bytes.remaining()) {
       outputFrameAlias = outputFrame.duplicate();
-      outputFrameAlias.limit(outputFrameAlias.position() + bytes.remaining());
+      ((Buffer) outputFrameAlias).limit(outputFrameAlias.position() + bytes.remaining());
     }
     bytes.put(outputFrameAlias);
-    outputFrame.position(outputFrameAlias.position());
+    ((Buffer) outputFrame).position(outputFrameAlias.position());
   }
 
   /**

File: alts/src/test/java/io/grpc/alts/internal/AltsHandshakerClientTest.java
Patch:
@@ -29,6 +29,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.protobuf.ByteString;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.security.GeneralSecurityException;
 import org.junit.Before;
@@ -178,7 +179,7 @@ public void startServerHandshakeWithPrefixBuffer() throws Exception {
         .thenReturn(MockAltsHandshakerResp.getOkResponse(BYTES_CONSUMED));
 
     ByteBuffer inBytes = ByteBuffer.allocate(IN_BYTES_SIZE);
-    inBytes.position(PREFIX_POSITION);
+    ((Buffer) inBytes).position(PREFIX_POSITION);
     ByteBuffer outFrame = handshaker.startServerHandshake(inBytes);
 
     assertEquals(ByteString.copyFrom(outFrame), MockAltsHandshakerResp.getOutFrame());

File: alts/src/test/java/io/grpc/alts/internal/MockAltsHandshakerResp.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.protobuf.ByteString;
 import io.grpc.Status;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.security.SecureRandom;
@@ -62,7 +63,7 @@ static ByteString getOutFrame() {
     buffer.order(ByteOrder.LITTLE_ENDIAN);
     buffer.putInt(frameSize);
     buffer.put(TEST_OUT_FRAME.getBytes(UTF_8));
-    buffer.flip();
+    ((Buffer) buffer).flip();
     return ByteString.copyFrom(buffer);
   }
 

File: core/src/test/java/io/grpc/internal/ReadableBufferTestBase.java
Patch:
@@ -21,6 +21,7 @@
 import static org.junit.Assert.assertEquals;
 
 import java.io.ByteArrayOutputStream;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import org.junit.Test;
@@ -86,7 +87,7 @@ public void readToByteBufferShouldSucceed() {
     ReadableBuffer buffer = buffer();
     ByteBuffer byteBuffer = ByteBuffer.allocate(msg.length());
     buffer.readBytes(byteBuffer);
-    byteBuffer.flip();
+    ((Buffer) byteBuffer).flip();
     byte[] array = new byte[msg.length()];
     byteBuffer.get(array);
     assertArrayEquals(msg.getBytes(UTF_8), array);
@@ -98,7 +99,7 @@ public void partialReadToByteBufferShouldSucceed() {
     ReadableBuffer buffer = buffer();
     ByteBuffer byteBuffer = ByteBuffer.allocate(2);
     buffer.readBytes(byteBuffer);
-    byteBuffer.flip();
+    ((Buffer) byteBuffer).flip();
     byte[] array = new byte[2];
     byteBuffer.get(array);
     assertArrayEquals(new byte[]{'h', 'e'}, array);

File: cronet/src/main/java/io/grpc/cronet/CronetClientStream.java
Patch:
@@ -42,6 +42,7 @@
 import io.grpc.internal.WritableBuffer;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -218,7 +219,7 @@ public void writeFrame(
         ByteBuffer byteBuffer;
         if (buffer != null) {
           byteBuffer = ((CronetWritableBuffer) buffer).buffer();
-          byteBuffer.flip();
+          ((Buffer) byteBuffer).flip();
         } else {
           byteBuffer = EMPTY_BUFFER;
         }
@@ -471,7 +472,7 @@ public void onResponseHeadersReceived(BidirectionalStream stream, UrlResponseInf
     @Override
     public void onReadCompleted(BidirectionalStream stream, UrlResponseInfo info,
         ByteBuffer buffer, boolean endOfStream) {
-      buffer.flip();
+      ((Buffer) buffer).flip();
       if (Log.isLoggable(LOG_TAG, Log.VERBOSE)) {
         Log.v(LOG_TAG, "onReadCompleted. Size=" + buffer.remaining());
       }

File: cronet/src/test/java/io/grpc/cronet/CronetClientStreamTest.java
Patch:
@@ -43,6 +43,7 @@
 import io.grpc.internal.WritableBuffer;
 import io.grpc.testing.TestMethodDescriptors;
 import java.io.ByteArrayInputStream;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -176,7 +177,7 @@ public void write() {
     // 5 writes are called.
     verify(cronetStream, times(5)).write(isA(ByteBuffer.class), eq(false));
     ByteBuffer fakeBuffer = ByteBuffer.allocateDirect(8);
-    fakeBuffer.position(8);
+    ((Buffer) fakeBuffer).position(8);
     verify(cronetStream, times(2)).flush();
 
     // 5 onWriteCompleted callbacks for previous writes.
@@ -294,7 +295,7 @@ public void streamSucceeded() {
     ArgumentCaptor<ByteBuffer> bufferCaptor = ArgumentCaptor.forClass(ByteBuffer.class);
     verify(cronetStream, times(1)).write(bufferCaptor.capture(), isA(Boolean.class));
     ByteBuffer buffer = bufferCaptor.getValue();
-    buffer.position(request.length());
+    ((Buffer) buffer).position(request.length());
     verify(cronetStream, times(1)).flush();
 
     // Receive response header

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -918,6 +918,9 @@ private RealChannel(String authority) {
     @Override
     public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(
         MethodDescriptor<ReqT, RespT> method, CallOptions callOptions) {
+      if (true) { // FIXME(zdapeng): there is a bug for using PendingCall. Temporarily disable it.
+        return newClientCall(method, callOptions);
+      }
       if (configSelector.get() != INITIAL_PENDING_SELECTOR) {
         return newClientCall(method, callOptions);
       }

File: core/src/main/java/io/grpc/internal/OobChannel.java
Patch:
@@ -202,7 +202,7 @@ public <RequestT, ResponseT> ClientCall<RequestT, ResponseT> newCall(
       MethodDescriptor<RequestT, ResponseT> methodDescriptor, CallOptions callOptions) {
     return new ClientCallImpl<>(methodDescriptor,
         callOptions.getExecutor() == null ? executor : callOptions.getExecutor(),
-        callOptions, transportProvider, deadlineCancellationExecutor, channelCallsTracer);
+        callOptions, transportProvider, deadlineCancellationExecutor, channelCallsTracer, null);
   }
 
   @Override

File: xds/src/main/java/io/grpc/xds/LoadStatsManager.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.common.base.Preconditions.checkState;
 
 import com.google.common.annotations.VisibleForTesting;
-import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;
+import io.grpc.xds.EnvoyProtoData.ClusterStats;
 import io.grpc.xds.EnvoyProtoData.Locality;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -90,7 +90,6 @@ void removeLoadStats(String cluster, @Nullable String clusterService) {
    * the interval between calls of this method or {@link #getAllLoadReports}. A cluster may send
    * loads to more than one cluster_service, they are included in separate stats reports.
    */
-  // TODO(chengyuanzhang): do not use proto type directly.
   List<ClusterStats> getClusterLoadReports(String cluster) {
     List<ClusterStats> res = new ArrayList<>();
     Map<String, ReferenceCounted<LoadStatsStore>> clusterLoadStatsStores =
@@ -109,7 +108,6 @@ List<ClusterStats> getClusterLoadReports(String cluster) {
    * interval between calls of this method or {@link #getClusterLoadReports}. Each report
    * includes stats for one cluster:cluster_service.
    */
-  // TODO(chengyuanzhang): do not use proto type directly.
   List<ClusterStats> getAllLoadReports() {
     List<ClusterStats> res = new ArrayList<>();
     for (Map<String, ReferenceCounted<LoadStatsStore>> clusterLoadStatsStores

File: xds/src/test/java/io/grpc/xds/LocalityStoreTest.java
Patch:
@@ -42,7 +42,6 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Iterables;
-import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;
 import io.grpc.ChannelLogger;
 import io.grpc.ClientStreamTracer;
 import io.grpc.ConnectivityState;
@@ -65,6 +64,7 @@
 import io.grpc.internal.FakeClock.TaskFilter;
 import io.grpc.xds.ClientLoadCounter.LoadRecordingStreamTracerFactory;
 import io.grpc.xds.ClientLoadCounter.MetricsRecordingListener;
+import io.grpc.xds.EnvoyProtoData.ClusterStats;
 import io.grpc.xds.EnvoyProtoData.DropOverload;
 import io.grpc.xds.EnvoyProtoData.LbEndpoint;
 import io.grpc.xds.EnvoyProtoData.Locality;

File: xds/src/test/java/io/grpc/xds/LrsLoadBalancerTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;
 import io.grpc.Attributes;
 import io.grpc.ClientStreamTracer;
 import io.grpc.ConnectivityState;
@@ -39,6 +38,7 @@
 import io.grpc.internal.ServiceConfigUtil.PolicySelection;
 import io.grpc.xds.ClientLoadCounter.LoadRecordingStreamTracerFactory;
 import io.grpc.xds.ClientLoadCounter.LoadRecordingSubchannelPicker;
+import io.grpc.xds.EnvoyProtoData.ClusterStats;
 import io.grpc.xds.EnvoyProtoData.Locality;
 import io.grpc.xds.LoadStatsManager.LoadStatsStore;
 import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;

File: rls/src/test/java/io/grpc/rls/CachingRlsLbClientTest.java
Patch:
@@ -356,7 +356,7 @@ private static RouteLookupConfig getRouteLookupConfig() {
         /* lookupServiceTimeoutInMillis= */ TimeUnit.SECONDS.toMillis(2),
         /* maxAgeInMillis= */ TimeUnit.SECONDS.toMillis(300),
         /* staleAgeInMillis= */ TimeUnit.SECONDS.toMillis(240),
-        /* cacheSize= */ 1000,
+        /* cacheSizeBytes= */ 1000,
         /* validTargets= */ ImmutableList.of("a valid target"),
         /* defaultTarget= */ "us_east_1.cloudbigtable.googleapis.com");
   }

File: rls/src/test/java/io/grpc/rls/RlsProtoConvertersTest.java
Patch:
@@ -195,7 +195,7 @@ public void convert_jsonRlsConfig() throws IOException {
             /* lookupServiceTimeoutInMillis= */ TimeUnit.SECONDS.toMillis(2),
             /* maxAgeInMillis= */ TimeUnit.SECONDS.toMillis(300),
             /* staleAgeInMillis= */ TimeUnit.SECONDS.toMillis(240),
-            /* cacheSize= */ 1000,
+            /* cacheSizeBytes= */ 1000,
             /* validTargets= */ ImmutableList.of("a valid target"),
             /* defaultTarget= */ "us_east_1.cloudbigtable.googleapis.com");
 

File: rls/src/test/java/io/grpc/rls/RlsRequestFactoryTest.java
Patch:
@@ -62,7 +62,7 @@ public class RlsRequestFactoryTest {
           /* lookupServiceTimeoutInMillis= */ TimeUnit.SECONDS.toMillis(2),
           /* maxAgeInMillis= */ TimeUnit.SECONDS.toMillis(300),
           /* staleAgeInMillis= */ TimeUnit.SECONDS.toMillis(240),
-          /* cacheSize= */ 1000,
+          /* cacheSizeBytes= */ 1000,
           /* validTargets= */ ImmutableList.of("a valid target"),
           /* defaultTarget= */ "us_east_1.cloudbigtable.googleapis.com");
 

File: api/src/test/java/io/grpc/ServerInterceptorsTest.java
Patch:
@@ -284,7 +284,6 @@ public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(
 
   @Test
   public void argumentsPassed() {
-    @SuppressWarnings("unchecked")
     final ServerCall<String, Integer> call2 = new NoopServerCall<>();
     @SuppressWarnings("unchecked")
     final ServerCall.Listener<String> listener2 = mock(ServerCall.Listener.class);

File: census/src/test/java/io/grpc/census/CensusModulesTest.java
Patch:
@@ -199,7 +199,6 @@ public String parse(InputStream stream) {
   private CensusTracingModule censusTracing;
 
   @Before
-  @SuppressWarnings("unchecked")
   public void setUp() throws Exception {
     when(spyClientSpanBuilder.startSpan()).thenReturn(spyClientSpan);
     when(tracer.spanBuilderWithExplicitParent(anyString(), ArgumentMatchers.<Span>any()))

File: context/src/main/java/io/grpc/Context.java
Patch:
@@ -969,7 +969,6 @@ public static final class Key<T> {
     /**
      * Get the value from the {@link #current()} context for this key.
      */
-    @SuppressWarnings("unchecked")
     public T get() {
       return get(Context.current());
     }

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -140,7 +140,6 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.mockito.ArgumentCaptor;
@@ -210,7 +209,6 @@ public boolean shouldAccept(Runnable command) {
 
   private final InternalChannelz channelz = new InternalChannelz();
 
-  @Rule public final ExpectedException thrown = ExpectedException.none();
   @Rule public final MockitoRule mocks = MockitoJUnit.rule();
 
   private ManagedChannelImpl channel;

File: alts/src/main/java/io/grpc/alts/AltsServerBuilder.java
Patch:
@@ -30,7 +30,7 @@
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
 import io.grpc.ServerServiceDefinition;
-import io.grpc.ServerStreamTracer.Factory;
+import io.grpc.ServerStreamTracer;
 import io.grpc.ServerTransportFilter;
 import io.grpc.Status;
 import io.grpc.alts.internal.AltsProtocolNegotiator;
@@ -102,7 +102,7 @@ public AltsServerBuilder directExecutor() {
 
   /** {@inheritDoc} */
   @Override
-  public AltsServerBuilder addStreamTracerFactory(Factory factory) {
+  public AltsServerBuilder addStreamTracerFactory(ServerStreamTracer.Factory factory) {
     delegate.addStreamTracerFactory(factory);
     return this;
   }

File: alts/src/main/java/io/grpc/alts/internal/TsiPeer.java
Patch:
@@ -54,7 +54,7 @@ public abstract static class Property<T> {
     private final String name;
     private final T value;
 
-    public Property(@Nonnull String name, @Nonnull T value) {
+    protected Property(@Nonnull String name, @Nonnull T value) {
       this.name = name;
       this.value = value;
     }

File: api/src/main/java/io/grpc/DecompressorRegistry.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.ThreadSafe;
@@ -116,7 +115,7 @@ byte[] getRawAdvertisedMessageEncodings() {
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public Set<String> getAdvertisedMessageEncodings() {
     Set<String> advertisedDecompressors = new HashSet<>(decompressors.size());
-    for (Entry<String, DecompressorInfo> entry : decompressors.entrySet()) {
+    for (Map.Entry<String, DecompressorInfo> entry : decompressors.entrySet()) {
       if (entry.getValue().advertised) {
         advertisedDecompressors.add(entry.getKey());
       }

File: api/src/main/java/io/grpc/InternalMetadata.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.common.io.BaseEncoding;
 import io.grpc.Metadata.AsciiMarshaller;
 import io.grpc.Metadata.BinaryStreamMarshaller;
-import io.grpc.Metadata.Key;
 import java.nio.charset.Charset;
 
 /**
@@ -53,13 +52,13 @@ public interface TrustedAsciiMarshaller<T> extends Metadata.TrustedAsciiMarshall
       = Metadata.BASE64_ENCODING_OMIT_PADDING;
 
   @Internal
-  public static <T> Key<T> keyOf(String name, TrustedAsciiMarshaller<T> marshaller) {
+  public static <T> Metadata.Key<T> keyOf(String name, TrustedAsciiMarshaller<T> marshaller) {
     boolean isPseudo = name != null && !name.isEmpty() && name.charAt(0) == ':';
     return Metadata.Key.of(name, isPseudo, marshaller);
   }
 
   @Internal
-  public static <T> Key<T> keyOf(String name, AsciiMarshaller<T> marshaller) {
+  public static <T> Metadata.Key<T> keyOf(String name, AsciiMarshaller<T> marshaller) {
     boolean isPseudo = name != null && !name.isEmpty() && name.charAt(0) == ':';
     return Metadata.Key.of(name, isPseudo, marshaller);
   }

File: api/src/main/java/io/grpc/InternalWithLogId.java
Patch:
@@ -28,7 +28,7 @@ public interface InternalWithLogId {
    * numeric ID that is unique among the instances.
    *
    * <p>The subclasses of this interface usually want to include the log ID in their {@link
-   * #toString} results.
+   * Object#toString} results.
    */
   InternalLogId getLogId();
 }

File: api/src/main/java/io/grpc/Metadata.java
Patch:
@@ -753,14 +753,14 @@ private Key(String name, boolean pseudo, Object marshaller) {
     }
 
     /**
-     * @return The original name used to create this key.
+     * Returns the original name used to create this key.
      */
     public final String originalName() {
       return originalName;
     }
 
     /**
-     * @return The normalized name for this key.
+     * Returns the normalized name for this key.
      */
     public final String name() {
       return name;
@@ -870,7 +870,7 @@ T parseBytes(byte[] serialized) {
     }
   }
 
-  /** A binary key for values which should be serialized lazily to {@Link InputStream}s. */
+  /** A binary key for values which should be serialized lazily to {@link InputStream}s. */
   private static class LazyStreamBinaryKey<T> extends Key<T> {
 
     private final BinaryStreamMarshaller<T> marshaller;

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java
Patch:
@@ -137,6 +137,7 @@ public enum ChannelType {
    * sudo ip addr add dev lo 127.127.127.127/32 label lo:benchmark
    * </pre>
    */
+  @SuppressWarnings("JdkObsolete") // No choice but to use Enumeration
   private static InetAddress buildBenchmarkAddr() {
     InetAddress tmp = null;
     try {
@@ -180,7 +181,7 @@ private static InetAddress buildBenchmarkAddr() {
   private MethodDescriptor<ByteBuf, ByteBuf> flowControlledStreaming;
   protected ManagedChannel[] channels;
 
-  public AbstractBenchmark() {
+  protected AbstractBenchmark() {
   }
 
   /**

File: context/src/jmh/java/io/grpc/AttachDetachBenchmark.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc;
 
-import io.grpc.Context.Key;
 import java.util.concurrent.TimeUnit;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
@@ -30,7 +29,7 @@
 @State(Scope.Benchmark)
 public class AttachDetachBenchmark {
 
-  private final Key<Integer> key = Context.keyWithDefault("key", 9999);
+  private final Context.Key<Integer> key = Context.keyWithDefault("key", 9999);
   private final Context cu = Context.current().withValue(key, 8888);
 
   /**

File: context/src/main/java/io/grpc/Context.java
Patch:
@@ -943,6 +943,8 @@ public void close() {
    */
   public interface CancellationListener {
     /**
+     * Notifies that a context was cancelled.
+     *
      * @param context the newly cancelled context.
      */
     void cancelled(Context context);

File: core/src/main/java/io/grpc/internal/AbstractClientStream.java
Patch:
@@ -75,7 +75,7 @@ protected interface Sink {
      * @param endOfStream {@code true} if this is the last frame; {@code flush} is guaranteed to be
      *     {@code true} if this is {@code true}
      * @param flush {@code true} if more data may not be arriving soon
-     * @Param numMessages the number of messages this series of frames represents, must be >= 0.
+     * @param numMessages the number of messages this series of frames represents, must be >= 0.
      */
     void writeFrame(
         @Nullable WritableBuffer frame, boolean endOfStream, boolean flush, int numMessages);

File: core/src/main/java/io/grpc/internal/AtomicLongCounter.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
- * An implementation of {@link LongCounter} that is just an {@Link AtomicLong}.
+ * An implementation of {@link LongCounter} that is just an {@link AtomicLong}.
  */
 final class AtomicLongCounter implements LongCounter {
   private final AtomicLong counter = new AtomicLong();

File: core/src/main/java/io/grpc/internal/BackoffPolicy.java
Patch:
@@ -25,7 +25,7 @@ public interface Provider {
   }
 
   /**
-   * @return The number of nanoseconds to wait.
+   * Returns the number of nanoseconds to wait.
    */
   long nextBackoffNanos();
 }

File: core/src/main/java/io/grpc/internal/ContextRunnable.java
Patch:
@@ -26,7 +26,7 @@ abstract class ContextRunnable implements Runnable {
 
   private final Context context;
 
-  public ContextRunnable(Context context) {
+  protected ContextRunnable(Context context) {
     this.context = context;
   }
 

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -46,7 +46,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.Executor;
@@ -488,7 +487,7 @@ private static long getNetworkAddressCacheTtlNanos(boolean isAndroid) {
   @VisibleForTesting
   static Map<String, ?> maybeChooseServiceConfig(
       Map<String, ?> choice, Random random, String hostname) {
-    for (Entry<String, ?> entry : choice.entrySet()) {
+    for (Map.Entry<String, ?> entry : choice.entrySet()) {
       Verify.verify(SERVICE_CONFIG_CHOICE_KEYS.contains(entry.getKey()), "Bad key: %s", entry);
     }
 

File: core/src/main/java/io/grpc/internal/ForwardingReadableBuffer.java
Patch:
@@ -37,7 +37,7 @@ public abstract class ForwardingReadableBuffer implements ReadableBuffer {
    *
    * @param buf the underlying buffer
    */
-  public ForwardingReadableBuffer(ReadableBuffer buf) {
+  protected ForwardingReadableBuffer(ReadableBuffer buf) {
     this.buf = Preconditions.checkNotNull(buf, "buf");
   }
 

File: core/src/main/java/io/grpc/internal/JndiResourceResolverFactory.java
Patch:
@@ -194,6 +194,8 @@ static String unquote(String txtRecord) {
 
   @VisibleForTesting
   @IgnoreJRERequirement
+  // Hashtable is required. https://github.com/google/error-prone/issues/1766
+  @SuppressWarnings("JdkObsolete")
   // javax.naming.* is only loaded reflectively and is never loaded for Android
   // The lint issue id is supposed to be "InvalidPackage" but it doesn't work, don't know why.
   // Use "all" as the lint issue id to suppress all types of lint error.
@@ -205,7 +207,6 @@ public List<String> getAllRecords(String recordType, String name) throws NamingE
       String[] rrType = new String[]{recordType};
       List<String> records = new ArrayList<>();
 
-      @SuppressWarnings("JdkObsolete")
       Hashtable<String, String> env = new Hashtable<>();
       env.put("com.sun.jndi.ldap.connect.timeout", "5000");
       env.put("com.sun.jndi.ldap.read.timeout", "5000");

File: core/src/main/java/io/grpc/internal/RetriableStream.java
Patch:
@@ -469,8 +469,8 @@ private void delayOrExecute(BufferEntry bufferEntry) {
   }
 
   /**
-   * Do not use it directly. Use {@link #sendMessage(ReqT)} instead because we don't use InputStream
-   * for buffering.
+   * Do not use it directly. Use {@link #sendMessage(Object)} instead because we don't use
+   * InputStream for buffering.
    */
   @Override
   public final void writeMessage(InputStream message) {

File: core/src/main/java/io/grpc/internal/ServiceConfigState.java
Patch:
@@ -37,7 +37,6 @@ final class ServiceConfigState {
   /**
    * @param defaultServiceConfig The initial service config, or {@code null} if absent.
    * @param lookUpServiceConfig {@code true} if service config updates might occur.
-   * @param syncCtx The synchronization context that this is accessed from.
    */
   ServiceConfigState(
       @Nullable ManagedChannelServiceConfig defaultServiceConfig,

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -42,7 +42,6 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.Attributes;
-import io.grpc.Attributes.Key;
 import io.grpc.CallOptions;
 import io.grpc.ClientCall;
 import io.grpc.ClientStreamTracer;
@@ -1007,8 +1006,8 @@ public void getAttributes() {
     ClientCallImpl<Void, Void> call = new ClientCallImpl<>(
         method, MoreExecutors.directExecutor(), baseCallOptions, clientStreamProvider,
         deadlineCancellationExecutor, channelCallTracer);
-    Attributes attrs =
-        Attributes.newBuilder().set(Key.<String>create("fake key"), "fake value").build();
+    Attributes attrs = Attributes.newBuilder().set(
+        Attributes.Key.<String>create("fake key"), "fake value").build();
     when(stream.getAttributes()).thenReturn(attrs);
 
     assertNotEquals(attrs, call.getAttributes());

File: core/src/test/java/io/grpc/internal/DelayedStreamTest.java
Patch:
@@ -33,7 +33,6 @@
 import static org.mockito.Mockito.when;
 
 import io.grpc.Attributes;
-import io.grpc.Attributes.Key;
 import io.grpc.Codec;
 import io.grpc.DecompressorRegistry;
 import io.grpc.Metadata;
@@ -184,7 +183,7 @@ public void setStream_isReady() {
   @Test
   public void setStream_getAttributes() {
     Attributes attributes =
-        Attributes.newBuilder().set(Key.<String>create("fakeKey"), "fakeValue").build();
+        Attributes.newBuilder().set(Attributes.Key.<String>create("fakeKey"), "fakeValue").build();
     when(realStream.getAttributes()).thenReturn(attributes);
 
     stream.start(listener);

File: core/src/test/java/io/grpc/internal/TestUtils.java
Patch:
@@ -47,7 +47,7 @@ public final class TestUtils {
   public abstract static class StandardLoadBalancerProvider extends LoadBalancerProvider {
     private final String policyName;
 
-    public StandardLoadBalancerProvider(String policyName) {
+    protected StandardLoadBalancerProvider(String policyName) {
       this.policyName = policyName;
     }
 

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbClientLoadRecorder.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.concurrent.atomic.AtomicLongFieldUpdater;
 import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
@@ -115,7 +114,7 @@ ClientStats generateLoadReport() {
         callsDroppedPerToken = new HashMap<>(localCallsDroppedPerToken.size());
       }
     }
-    for (Entry<String, LongHolder> entry : localCallsDroppedPerToken.entrySet()) {
+    for (Map.Entry<String, LongHolder> entry : localCallsDroppedPerToken.entrySet()) {
       statsBuilder.addCallsFinishedWithDrop(
           ClientStatsPerToken.newBuilder()
               .setLoadBalanceToken(entry.getKey())

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -71,7 +71,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -424,7 +423,7 @@ private void useRoundRobinLists(
           newBackendList.add(entry);
         }
         // Close Subchannels whose addresses have been delisted
-        for (Entry<List<EquivalentAddressGroup>, Subchannel> entry : subchannels.entrySet()) {
+        for (Map.Entry<List<EquivalentAddressGroup>, Subchannel> entry : subchannels.entrySet()) {
           List<EquivalentAddressGroup> eagList = entry.getKey();
           if (!newSubchannelMap.containsKey(eagList)) {
             returnSubchannelToPool(entry.getValue());

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -193,7 +193,7 @@ public Context filterContext(Context context) {
   /**
    * Constructor for tests.
    */
-  public AbstractInteropTest() {
+  protected AbstractInteropTest() {
     TestRule timeout = Timeout.seconds(60);
     try {
       timeout = new DisableOnDebug(timeout);

File: interop-testing/src/main/java/io/grpc/testing/integration/GrpclbLongLivedAffinityTestClient.java
Patch:
@@ -72,8 +72,8 @@ public void run() {
   private long rpcIntermissionSeconds = 1;
   private long totalTestSeconds = 60;
 
-  protected ManagedChannel channel;
-  protected TestServiceGrpc.TestServiceBlockingStub blockingStub;
+  ManagedChannel channel;
+  TestServiceGrpc.TestServiceBlockingStub blockingStub;
 
   private void parseArgs(String[] args) {
     boolean usage = false;

File: interop-testing/src/main/java/io/grpc/testing/integration/Http2Client.java
Patch:
@@ -85,9 +85,9 @@ public void run() {
   private Tester tester = new Tester();
   private ListeningExecutorService threadpool;
 
-  protected ManagedChannel channel;
-  protected TestServiceGrpc.TestServiceBlockingStub blockingStub;
-  protected TestServiceGrpc.TestServiceStub asyncStub;
+  ManagedChannel channel;
+  TestServiceGrpc.TestServiceBlockingStub blockingStub;
+  TestServiceGrpc.TestServiceStub asyncStub;
 
   private void parseArgs(String[] args) {
     boolean usage = false;

File: netty/src/main/java/io/grpc/netty/AbstractHttp2Headers.java
Patch:
@@ -20,7 +20,7 @@
 import io.netty.handler.codec.http2.Http2Headers;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map.Entry;
+import java.util.Map;
 import java.util.Set;
 
 abstract class AbstractHttp2Headers implements Http2Headers {
@@ -496,7 +496,7 @@ public Http2Headers clear() {
   }
 
   @Override
-  public Iterator<Entry<CharSequence, CharSequence>> iterator() {
+  public Iterator<Map.Entry<CharSequence, CharSequence>> iterator() {
     throw new UnsupportedOperationException();
   }
 

File: netty/src/main/java/io/grpc/netty/GrpcHttp2ConnectionHandler.java
Patch:
@@ -35,7 +35,7 @@ public abstract class GrpcHttp2ConnectionHandler extends Http2ConnectionHandler
   @Nullable
   protected final ChannelPromise channelUnused;
 
-  public GrpcHttp2ConnectionHandler(
+  protected GrpcHttp2ConnectionHandler(
       ChannelPromise channelUnused,
       Http2ConnectionDecoder decoder,
       Http2ConnectionEncoder encoder,

File: netty/src/main/java/io/grpc/netty/NettyClientStream.java
Patch:
@@ -231,7 +231,7 @@ public abstract static class TransportState extends Http2ClientStreamTransportSt
     private Http2Stream http2Stream;
     private Tag tag;
 
-    public TransportState(
+    protected TransportState(
         NettyClientHandler handler,
         EventLoop eventLoop,
         int maxMessageSize,

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiator.java
Patch:
@@ -40,7 +40,7 @@ interface ProtocolNegotiator {
   /**
    * Releases resources held by this negotiator. Called when the Channel transitions to terminated
    * or when InternalServer is shutdown (depending on client or server). That means handlers
-   * returned by {@link #newHandler()} can outlive their parent negotiator on server-side, but not
+   * returned by {@link #newHandler} can outlive their parent negotiator on server-side, but not
    * on client-side.
    */
   void close();

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -56,7 +56,6 @@
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.UnresolvedAddressException;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
@@ -455,7 +454,7 @@ static InternalChannelz.SocketOptions getSocketOptions(Channel channel) {
       b.setSocketOptionTimeoutMillis(timeoutMillis);
     }
 
-    for (Entry<ChannelOption<?>, Object> opt : config.getOptions().entrySet()) {
+    for (Map.Entry<ChannelOption<?>, Object> opt : config.getOptions().entrySet()) {
       ChannelOption<?> key = opt.getKey();
       // Constants are pooled, so there should only be one instance of each constant
       if (key.equals(SO_LINGER) || key.equals(SO_TIMEOUT)) {
@@ -470,7 +469,7 @@ static InternalChannelz.SocketOptions getSocketOptions(Channel channel) {
         = NettySocketSupport.getNativeSocketOptions(channel);
     if (nativeOptions != null) {
       b.setTcpInfo(nativeOptions.tcpInfo); // may be null
-      for (Entry<String, String> entry : nativeOptions.otherInfo.entrySet()) {
+      for (Map.Entry<String, String> entry : nativeOptions.otherInfo.entrySet()) {
         b.addOption(entry.getKey(), entry.getValue());
       }
     }

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -62,6 +62,7 @@
 import io.grpc.internal.ClientTransport.PingCallback;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.KeepAliveManager;
+import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.StatsTraceContext;
 import io.grpc.internal.StreamListener;
 import io.grpc.internal.TransportTracer;
@@ -129,7 +130,7 @@ public class NettyClientHandlerTest extends NettyHandlerTestBase<NettyClientHand
   @Rule
   public TestName testNameRule = new TestName();
   @Mock
-  private NettyClientTransport.Listener listener;
+  private ManagedClientTransport.Listener listener;
   @Mock
   private ClientStreamListener streamListener;
 

File: netty/src/test/java/io/grpc/netty/NettyServerBuilderTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.truth.Truth;
-import io.grpc.ServerStreamTracer.Factory;
+import io.grpc.ServerStreamTracer;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.local.LocalServerChannel;
 import io.netty.handler.ssl.SslContext;
@@ -47,7 +47,8 @@ public class NettyServerBuilderTest {
   @Test
   public void createMultipleServers() {
     builder.addListenAddress(new InetSocketAddress(8081));
-    List<NettyServer> servers = builder.buildTransportServers(ImmutableList.<Factory>of());
+    List<NettyServer> servers =
+        builder.buildTransportServers(ImmutableList.<ServerStreamTracer.Factory>of());
 
     Truth.assertThat(servers).hasSize(2);
   }

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -75,6 +75,7 @@
 import java.net.Socket;
 import java.net.URI;
 import java.util.Collections;
+import java.util.Deque;
 import java.util.EnumMap;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -188,7 +189,7 @@ private static Map<ErrorCode, Status> buildErrorCodeToStatusMap() {
   private int maxConcurrentStreams = 0;
   @SuppressWarnings("JdkObsolete") // Usage is bursty; want low memory usage when empty
   @GuardedBy("lock")
-  private final LinkedList<OkHttpClientStream> pendingStreams = new LinkedList<>();
+  private final Deque<OkHttpClientStream> pendingStreams = new LinkedList<>();
   private final ConnectionSpec connectionSpec;
   private FrameWriter testFrameWriter;
   private ScheduledExecutorService scheduler;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpTlsUpgrader.java
Patch:
@@ -85,7 +85,7 @@ public static SSLSocket upgrade(SSLSocketFactory sslSocketFactory,
    * @see <a href="https://www.ietf.org/rfc/rfc2732.txt">RFC2732</a>
    * @see <a href="https://tools.ietf.org/html/rfc5280#section-4.2.1.6">RFC5280</a>
    *
-   * @return {@param host} in a form consistent with X509 certificates
+   * @return {@code host} in a form consistent with X509 certificates
    */
   @VisibleForTesting
   static String canonicalizeHost(String host) {

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/Util.java
Patch:
@@ -74,6 +74,7 @@ public static void closeQuietly(Closeable closeable) {
       } catch (RuntimeException rethrown) {
         throw rethrown;
       } catch (Exception ignored) {
+        // The method is defined to ignore checked exceptions
       }
     }
   }
@@ -91,6 +92,7 @@ public static void closeQuietly(Socket socket) {
       } catch (RuntimeException rethrown) {
         throw rethrown;
       } catch (Exception ignored) {
+        // The method is defined to ignore checked exceptions
       }
     }
   }
@@ -106,6 +108,7 @@ public static void closeQuietly(ServerSocket serverSocket) {
       } catch (RuntimeException rethrown) {
         throw rethrown;
       } catch (Exception ignored) {
+        // The method is defined to ignore checked exceptions
       }
     }
   }

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/framed/FrameReader.java
Patch:
@@ -111,7 +111,7 @@ void headers(boolean outFinished, boolean inFinished, int streamId, int associat
      * @param promisedStreamId server-initiated stream ID.  Must be an even
      * number.
      * @param requestHeaders minimally includes {@code :method}, {@code :scheme},
-     * {@code :authority}, and (@code :path}.
+     * {@code :authority}, and {@code :path}.
      */
     void pushPromise(int streamId, int promisedStreamId, List<io.grpc.okhttp.internal.framed.Header> requestHeaders)
         throws IOException;

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/framed/FrameWriter.java
Patch:
@@ -45,7 +45,7 @@ public interface FrameWriter extends Closeable {
    * @param promisedStreamId server-initiated stream ID.  Must be an even
    * number.
    * @param requestHeaders minimally includes {@code :method}, {@code :scheme},
-   * {@code :authority}, and (@code :path}.
+   * {@code :authority}, and {@code :path}.
    */
   void pushPromise(int streamId, int promisedStreamId, List<Header> requestHeaders)
       throws IOException;

File: rls/src/test/java/io/grpc/rls/CachingRlsLbClientTest.java
Patch:
@@ -42,7 +42,7 @@
 import io.grpc.LoadBalancerProvider;
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
-import io.grpc.NameResolver.Factory;
+import io.grpc.NameResolver;
 import io.grpc.Status;
 import io.grpc.SynchronizationContext;
 import io.grpc.inprocess.InProcessChannelBuilder;
@@ -521,7 +521,7 @@ public void updateBalancingState(
 
     @Override
     @Deprecated
-    public Factory getNameResolverFactory() {
+    public NameResolver.Factory getNameResolverFactory() {
       throw new UnsupportedOperationException();
     }
 

File: rls/src/test/java/io/grpc/rls/RlsLoadBalancerTest.java
Patch:
@@ -52,7 +52,7 @@
 import io.grpc.MethodDescriptor.Marshaller;
 import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.NameResolver.ConfigOrError;
-import io.grpc.NameResolver.Factory;
+import io.grpc.NameResolver;
 import io.grpc.Status;
 import io.grpc.SynchronizationContext;
 import io.grpc.inprocess.InProcessChannelBuilder;
@@ -509,7 +509,7 @@ public void updateBalancingState(
 
     @Override
     @Deprecated
-    public Factory getNameResolverFactory() {
+    public NameResolver.Factory getNameResolverFactory() {
       throw new UnsupportedOperationException();
     }
 

File: services/src/main/java/io/grpc/services/ChannelzProtoUtil.java
Patch:
@@ -72,7 +72,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Map.Entry;
+import java.util.Map;
 import java.util.concurrent.ExecutionException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -332,7 +332,7 @@ static List<SocketOption> toSocketOptionsList(InternalChannelz.SocketOptions opt
     if (options.tcpInfo != null) {
       ret.add(toSocketOptionTcpInfo(options.tcpInfo));
     }
-    for (Entry<String, String> entry : options.others.entrySet()) {
+    for (Map.Entry<String, String> entry : options.others.entrySet()) {
       ret.add(toSocketOptionAdditional(entry.getKey(), entry.getValue()));
     }
     return ret;

File: services/src/test/java/io/grpc/services/ChannelzProtoUtilTest.java
Patch:
@@ -85,7 +85,7 @@
 import java.security.cert.Certificate;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.Map.Entry;
+import java.util.Map;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -932,7 +932,7 @@ private static SocketOptions.Builder toBuilder(SocketOptions options) {
     SocketOptions.Builder builder = new SocketOptions.Builder()
         .setSocketOptionTimeoutMillis(options.soTimeoutMillis)
         .setSocketOptionLingerSeconds(options.lingerSeconds);
-    for (Entry<String, String> entry : options.others.entrySet()) {
+    for (Map.Entry<String, String> entry : options.others.entrySet()) {
       builder.addOption(entry.getKey(), entry.getValue());
     }
     return builder;

File: xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java
Patch:
@@ -39,6 +39,8 @@
  * client's perspective by maintaining a set of locality counters for each locality it is tracking
  * loads for.
  */
+// https://github.com/google/error-prone/issues/1767
+@SuppressWarnings("ModifyCollectionInEnhancedForLoop")
 @NotThreadSafe
 final class LoadStatsStoreImpl implements LoadStatsStore {
   private final String clusterName;

File: xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java
Patch:
@@ -30,7 +30,7 @@
 final class MeshCaCertificateProvider extends CertificateProvider {
   private static final Logger logger = Logger.getLogger(MeshCaCertificateProvider.class.getName());
 
-  protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,
+  MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,
       String meshCaUrl, String zone, long validitySeconds,
       int keySize, String alg, String signatureAlg, MeshCaChannelFactory meshCaChannelFactory,
       BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,

File: xds/src/main/java/io/grpc/xds/internal/sds/ReferenceCountingMap.java
Patch:
@@ -59,7 +59,7 @@ public V get(K key) {
   /**
    * Releases an instance of the given value.
    *
-   * <p>The instance must have been obtained from {@link #get(K)}. Otherwise will throw
+   * <p>The instance must have been obtained from {@link #get(Object)}. Otherwise will throw
    * IllegalArgumentException.
    *
    * <p>Caller must not release a reference more than once. It's advised that you clear the

File: xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java
Patch:
@@ -67,6 +67,7 @@ private StsCredentials(
     this.transportFactory = transportFactory;
   }
 
+  @SuppressWarnings("JdkObsolete") // We can't use java.time
   @Override
   public AccessToken refreshAccessToken() throws IOException {
     AccessToken tok = getSourceAccessTokenFromFileLocation();

File: xds/src/test/java/io/grpc/xds/ClientLoadCounterTest.java
Patch:
@@ -25,7 +25,6 @@
 
 import com.github.udpa.udpa.data.orca.v1.OrcaLoadReport;
 import io.grpc.ClientStreamTracer;
-import io.grpc.ClientStreamTracer.Factory;
 import io.grpc.ClientStreamTracer.StreamInfo;
 import io.grpc.LoadBalancer.PickResult;
 import io.grpc.LoadBalancer.PickSubchannelArgs;
@@ -224,7 +223,8 @@ protected SubchannelPicker delegate() {
       }
 
       @Override
-      protected Factory wrapTracerFactory(Factory originFactory) {
+      protected ClientStreamTracer.Factory wrapTracerFactory(
+          ClientStreamTracer.Factory originFactory) {
         // NO-OP
         return originFactory;
       }

File: xds/src/test/java/io/grpc/xds/ClusterManagerLoadBalancerProviderTest.java
Patch:
@@ -30,8 +30,11 @@
 import java.util.Collections;
 import java.util.Map;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /** Tests for {@link ClusterManagerLoadBalancerProvider}. */
+@RunWith(JUnit4.class)
 public class ClusterManagerLoadBalancerProviderTest {
 
   @Test

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1114,7 +1114,7 @@ public void deadlineExceeded() throws Exception {
     // warm up the channel and JVM
     blockingStub.emptyCall(Empty.getDefaultInstance());
     TestServiceGrpc.TestServiceBlockingStub stub =
-        blockingStub.withDeadlineAfter(100, TimeUnit.MILLISECONDS);
+        blockingStub.withDeadlineAfter(1, TimeUnit.SECONDS);
     StreamingOutputCallRequest request = StreamingOutputCallRequest.newBuilder()
         .addResponseParameters(ResponseParameters.newBuilder()
             .setIntervalUs((int) TimeUnit.SECONDS.toMicros(20)))

File: xds/src/main/java/io/grpc/xds/internal/certprovider/CertificateProviderStore.java
Patch:
@@ -20,6 +20,7 @@
 import io.grpc.xds.internal.certprovider.CertificateProvider.Watcher;
 import io.grpc.xds.internal.sds.ReferenceCountingMap;
 
+import java.io.Closeable;
 import java.util.Objects;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -41,7 +42,7 @@ public final class CertificateProviderStore {
 
   /** Opaque Handle returned by {@link #createOrGetProvider}. */
   @VisibleForTesting
-  final class Handle implements java.io.Closeable {
+  final class Handle implements Closeable {
     private final CertProviderKey key;
     private final Watcher watcher;
     @VisibleForTesting

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -157,7 +157,8 @@ protected TransportState(
           maxMessageSize,
           statsTraceCtx,
           transportTracer);
-      deframer = new MigratingThreadDeframer(this, this, rawDeframer);
+      // TODO(#7168): use MigratingThreadDeframer when enabling retry doesn't break.
+      deframer = rawDeframer;
     }
 
     final void optimizeForDirectExecutor() {

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -157,8 +157,7 @@ protected TransportState(
           maxMessageSize,
           statsTraceCtx,
           transportTracer);
-      // TODO(#7168): use MigratingThreadDeframer when enabling retry doesn't break.
-      deframer = rawDeframer;
+      deframer = new MigratingThreadDeframer(this, this, rawDeframer);
     }
 
     final void optimizeForDirectExecutor() {

File: xds/src/main/java/io/grpc/xds/EnvoyProtoData.java
Patch:
@@ -418,6 +418,7 @@ static DropOverload fromEnvoyProtoDropOverload(
           break;
         case MILLION:
           break;
+        case UNRECOGNIZED:
         default:
           throw new IllegalArgumentException("Unknown denominator type of " + percent);
       }
@@ -444,6 +445,7 @@ static DropOverload fromEnvoyProtoDropOverloadV2(
           break;
         case MILLION:
           break;
+        case UNRECOGNIZED:
         default:
           throw new IllegalArgumentException("Unknown denominator type of " + percent);
       }

File: xds/src/main/java/io/grpc/xds/internal/certprovider/CertificateProvider.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.grpc.xds.internal.certprovider;
 
+import io.grpc.Status;
 import java.io.Closeable;
 import java.security.PrivateKey;
 import java.security.cert.X509Certificate;
@@ -38,7 +39,7 @@ public interface Watcher {
 
     void updateTrustedRoots(List<X509Certificate> trustedRoots);
 
-    void onError(io.grpc.Status errorStatus);
+    void onError(Status errorStatus);
   }
 
   /**

File: xds/src/main/java/io/grpc/xds/internal/certprovider/CertificateProviderProvider.java
Patch:
@@ -35,5 +35,5 @@ interface CertificateProviderProvider {
    * @param notifyCertUpdates See {@link CertificateProvider#CertificateProvider(Watcher, boolean)}
    */
   CertificateProvider createCertificateProvider(
-      Object config, Watcher watcher, boolean notifyCertUpdates) throws IllegalArgumentException;
+      Object config, Watcher watcher, boolean notifyCertUpdates);
 }

File: rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java
Patch:
@@ -87,7 +87,7 @@ final class CachingRlsLbClient {
       "io.grpc.rls.CachingRlsLbClient.enable_oobchannel_directpath";
   @VisibleForTesting
   static boolean enableOobChannelDirectPath =
-      Boolean.parseBoolean(System.getProperty(RLS_ENABLE_OOB_CHANNEL_DIRECTPATH_PROPERTY, "true"));
+      Boolean.parseBoolean(System.getProperty(RLS_ENABLE_OOB_CHANNEL_DIRECTPATH_PROPERTY, "false"));
 
   // All cache status changes (pending, backoff, success) must be under this lock
   private final Object lock = new Object();

File: examples/src/main/java/io/grpc/examples/retrying/RetryingHelloWorldClient.java
Patch:
@@ -70,7 +70,7 @@ public RetryingHelloWorldClient(String host, int port, boolean enableRetries) {
         .usePlaintext();
     if (enableRetries) {
       Map<String, ?> serviceConfig = getRetryingServiceConfig();
-      logger.info("Client started with retrying configuration: " + serviceConfig.toString());
+      logger.info("Client started with retrying configuration: " + serviceConfig);
       channelBuilder.defaultServiceConfig(serviceConfig).enableRetry();
     }
     channel = channelBuilder.build();

File: xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java
Patch:
@@ -41,7 +41,7 @@ private EnvoyServerProtoData() {
   public abstract static class BaseTlsContext {
     @Nullable protected final CommonTlsContext commonTlsContext;
 
-    public BaseTlsContext(@Nullable CommonTlsContext commonTlsContext) {
+    protected BaseTlsContext(@Nullable CommonTlsContext commonTlsContext) {
       this.commonTlsContext = commonTlsContext;
     }
 
@@ -54,7 +54,7 @@ public boolean equals(Object o) {
       if (this == o) {
         return true;
       }
-      if (o == null || !(o instanceof BaseTlsContext)) {
+      if (!(o instanceof BaseTlsContext)) {
         return false;
       }
       BaseTlsContext that = (BaseTlsContext) o;
@@ -63,7 +63,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-      return Objects.hash(commonTlsContext);
+      return Objects.hashCode(commonTlsContext);
     }
   }
 

File: xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancerProvider.java
Patch:
@@ -269,7 +269,8 @@ static final class XdsRoutingConfig {
     final List<Route> routes;
     final Map<String, PolicySelection> actions;
 
-    private XdsRoutingConfig(List<Route> routes, Map<String, PolicySelection> actions) {
+    @VisibleForTesting
+    XdsRoutingConfig(List<Route> routes, Map<String, PolicySelection> actions) {
       this.routes = ImmutableList.copyOf(routes);
       this.actions = ImmutableMap.copyOf(actions);
     }

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -42,6 +42,7 @@
 import io.grpc.internal.ClientStreamListener.RpcProgress;
 import io.grpc.internal.SharedResourceHolder.Resource;
 import io.grpc.internal.StreamListener.MessageProducer;
+import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.InvocationTargetException;
@@ -746,10 +747,10 @@ static void closeQuietly(MessageProducer producer) {
   }
 
   /**
-   * Closes an InputStream, ignoring IOExceptions.
+   * Closes a Closeable, ignoring IOExceptions.
    * This method exists because Guava's {@code Closeables.closeQuietly()} is beta.
    */
-  public static void closeQuietly(@Nullable InputStream message) {
+  public static void closeQuietly(@Nullable Closeable message) {
     if (message == null) {
       return;
     }

File: core/src/main/java/io/grpc/internal/NoopClientStream.java
Patch:
@@ -66,6 +66,9 @@ public void setMessageCompression(boolean enable) {
     // noop
   }
 
+  @Override
+  public void optimizeForDirectExecutor() {}
+
   @Override
   public void setCompressor(Compressor compressor) {}
 

File: core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java
Patch:
@@ -163,7 +163,7 @@ public void closed(Status status) {
 
     // Queue a partial message in the deframer
     stream.transportState().inboundDataReceived(ReadableBuffers.wrap(new byte[] {1}), true);
-    stream.transportState().requestMessagesFromDeframer(1);
+    stream.request(1);
 
     Status status = closedFuture.get(TIMEOUT_MS, TimeUnit.MILLISECONDS);
     assertEquals(Status.INTERNAL.getCode(), status.getCode());

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -318,7 +318,7 @@ public void inboundShouldForwardToStream() throws Exception {
     assertEquals("value",
         captor.getValue().get(Metadata.Key.of("magic", Metadata.ASCII_STRING_MARSHALLER)));
 
-    streamTransportState.requestMessagesFromDeframer(1);
+    streamTransportState.requestMessagesFromDeframerForTesting(1);
 
     // Create a data frame and then trigger the handler to read it.
     ByteBuf frame = grpcDataFrame(3, false, contentAsArray());

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -224,7 +224,7 @@ public void onError(Status error) {
       logger.log(
           XdsLogLevel.WARNING,
           "Received error from xDS client {0}: {1}", xdsClient, error.getDescription());
-      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));
+      listener.onError(error);
     }
   }
 

File: xds/src/test/java/io/grpc/xds/CdsLoadBalancerTest.java
Patch:
@@ -335,7 +335,6 @@ public void handleCdsConfigs() {
   }
 
   @Test
-  @SuppressWarnings({"unchecked"})
   public void handleCdsConfigs_withUpstreamTlsContext()  {
     assertThat(xdsClient).isNull();
     ResolvedAddresses resolvedAddresses1 =

File: xds/src/test/java/io/grpc/xds/PriorityLoadBalancerProviderTest.java
Patch:
@@ -36,6 +36,7 @@
 public class PriorityLoadBalancerProviderTest {
   @Rule public final ExpectedException thrown = ExpectedException.none();
 
+  @SuppressWarnings("ExpectedExceptionChecker")
   @Test
   public void priorityLbConfig_emptyPriorities() {
     Map<String, PolicySelection> childConfigs =
@@ -46,6 +47,7 @@ public void priorityLbConfig_emptyPriorities() {
     new PriorityLbConfig(childConfigs, priorities);
   }
 
+  @SuppressWarnings("ExpectedExceptionChecker")
   @Test
   public void priorityLbConfig_missingChildConfig() {
     Map<String, PolicySelection> childConfigs =

File: xds/src/test/java/io/grpc/xds/internal/sds/TlsContextManagerTest.java
Patch:
@@ -140,7 +140,6 @@ public void createServerSslContextProvider_releaseInstance() {
 
     TlsContextManagerImpl tlsContextManagerImpl =
         new TlsContextManagerImpl(mockClientFactory, mockServerFactory);
-    @SuppressWarnings("unchecked")
     SslContextProvider mockProvider = mock(SslContextProvider.class);
     when(mockServerFactory.createSslContextProvider(downstreamTlsContext)).thenReturn(mockProvider);
     SslContextProvider serverSecretProvider =
@@ -160,7 +159,6 @@ public void createClientSslContextProvider_releaseInstance() {
 
     TlsContextManagerImpl tlsContextManagerImpl =
         new TlsContextManagerImpl(mockClientFactory, mockServerFactory);
-    @SuppressWarnings("unchecked")
     SslContextProvider mockProvider = mock(SslContextProvider.class);
     when(mockClientFactory.createSslContextProvider(upstreamTlsContext)).thenReturn(mockProvider);
     SslContextProvider clientSecretProvider =

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -452,7 +452,7 @@ public void request(int numMessages) {
       checkArgument(numMessages >= 0, "Number requested must be non-negative");
       stream.request(numMessages);
     } finally {
-      PerfMark.stopTask("ClientCall.cancel", tag);
+      PerfMark.stopTask("ClientCall.request", tag);
     }
   }
 

File: netty/src/main/java/io/grpc/netty/NettyServerTransport.java
Patch:
@@ -38,6 +38,7 @@
 import io.netty.util.concurrent.GenericFutureListener;
 import java.io.IOException;
 import java.net.SocketAddress;
+import java.net.SocketException;
 import java.util.List;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.logging.Level;
@@ -186,6 +187,7 @@ Channel channel() {
   @VisibleForTesting
   static Level getLogLevel(Throwable t) {
     if (t.getClass().equals(IOException.class)
+        || t.getClass().equals(SocketException.class)
         || QUIET_EXCEPTIONS.contains(t.getClass().getSimpleName())) {
       return Level.FINE;
     }

File: xds/src/test/java/io/grpc/xds/XdsClientImplTest.java
Patch:
@@ -688,10 +688,10 @@ public void resolveVirtualHostWithPathMatchingInRdsResponse() {
                             .setRoute(RouteAction.newBuilder().setWeightedClusters(
                                 WeightedCluster.newBuilder()
                                     .addClusters(WeightedCluster.ClusterWeight.newBuilder()
-                                        .setWeight(UInt32Value.newBuilder().setValue(30))
+                                        .setWeight(UInt32Value.of(30))
                                         .setName("cl21.googleapis.com"))
                                     .addClusters(WeightedCluster.ClusterWeight.newBuilder()
-                                        .setWeight(UInt32Value.newBuilder().setValue(70))
+                                        .setWeight(UInt32Value.of(70))
                                         .setName("cl22.googleapis.com"))))
                             .setMatch(RouteMatch.newBuilder().setPath("/service2/method2")))
                         .addRoutes(Route.newBuilder()

File: xds/src/test/java/io/grpc/xds/XdsClientTestHelper.java
Patch:
@@ -213,7 +213,7 @@ static io.envoyproxy.envoy.api.v2.endpoint.LocalityLbEndpoints buildLocalityLbEn
                     .setZone(zone)
                     .setSubZone(subZone))
             .addAllLbEndpoints(lbEndpoints)
-            .setLoadBalancingWeight(UInt32Value.newBuilder().setValue(loadBalancingWeight))
+            .setLoadBalancingWeight(UInt32Value.of(loadBalancingWeight))
             .setPriority(priority)
             .build();
   }
@@ -226,8 +226,8 @@ static io.envoyproxy.envoy.api.v2.endpoint.LbEndpoint buildLbEndpoint(String add
                 io.envoyproxy.envoy.api.v2.endpoint.Endpoint.newBuilder().setAddress(
                     Address.newBuilder().setSocketAddress(
                         SocketAddress.newBuilder().setAddress(address).setPortValue(port))))
-            .setHealthStatus(healthStatus).setLoadBalancingWeight(
-            UInt32Value.newBuilder().setValue(loadbalancingWeight))
+            .setHealthStatus(healthStatus)
+            .setLoadBalancingWeight(UInt32Value.of(loadbalancingWeight))
             .build();
   }
 

File: xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java
Patch:
@@ -744,7 +744,7 @@ private static RouteAction buildWeightedClusterRoute(Map<String, Integer> cluste
       builder.addClusters(
           ClusterWeight.newBuilder()
             .setName(entry.getKey())
-            .setWeight(UInt32Value.newBuilder().setValue(entry.getValue())));
+            .setWeight(UInt32Value.of(entry.getValue())));
     }
     return RouteAction.newBuilder()
         .setWeightedClusters(builder)

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -193,7 +193,7 @@ static final class InProcessClientTransportFactory implements ClientTransportFac
     private final boolean useSharedTimer;
     private final int maxInboundMetadataSize;
     private boolean closed;
-    private boolean includeCauseWithStatus;
+    private final boolean includeCauseWithStatus;
 
     private InProcessClientTransportFactory(
         String name,

File: core/src/test/java/io/grpc/internal/AbstractTransportTest.java
Patch:
@@ -2067,7 +2067,7 @@ private static void assertStatusEquals(Status expected, Status actual) {
    * Verifies that the client status is as expected. By default, the code and description should
    * be present, and the cause should be stripped away.
    */
-  private void checkClientStatus(Status expectedStatus, Status clientStreamStatus) {
+  private static void checkClientStatus(Status expectedStatus, Status clientStreamStatus) {
     assertEquals(expectedStatus.getCode(), clientStreamStatus.getCode());
     assertEquals(expectedStatus.getDescription(), clientStreamStatus.getDescription());
     assertNull(clientStreamStatus.getCause());

File: interop-testing/src/main/java/io/grpc/testing/integration/GrpclbFallbackTestClient.java
Patch:
@@ -172,7 +172,7 @@ private void tearDown() {
     }
   }
 
-  private void runShellCmd(String cmd) throws Exception {
+  private static void runShellCmd(String cmd) throws Exception {
     logger.info("Run shell command: " + cmd);
     ProcessBuilder pb = new ProcessBuilder("bash", "-c", cmd);
     pb.redirectErrorStream(true);

File: rls/src/main/java/io/grpc/rls/RlsProtoConverters.java
Patch:
@@ -189,4 +189,6 @@ static GrpcKeyBuilder convert(Map<String, ?> keyBuilder) {
       return new GrpcKeyBuilder(names, nameMatchers);
     }
   }
+
+  private RlsProtoConverters() {}
 }

File: stub/src/main/java/io/grpc/stub/CallStreamObserver.java
Patch:
@@ -135,7 +135,9 @@ public abstract class CallStreamObserver<V> implements StreamObserver<V> {
    *
    * <p>This API is still a work in-progress and will likely change in the future.
    */
-  public abstract void disableAutoRequestWithInitial(int request);
+  public void disableAutoRequestWithInitial(int request) {
+    throw new UnsupportedOperationException();
+  }
 
   /**
    * Requests the peer to produce {@code count} more messages to be delivered to the 'inbound'

File: examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlClient.java
Patch:
@@ -54,7 +54,7 @@ public void beforeStart(final ClientCallStreamObserver<HelloRequest> requestStre
             this.requestStream = requestStream;
             // Set up manual flow control for the response stream. It feels backwards to configure the response
             // stream's flow control using the request stream's observer, but this is the way it is.
-            requestStream.disableAutoInboundFlowControl();
+            requestStream.disableAutoRequestWithInitial(1);
 
             // Set up a back-pressure-aware producer for the request stream. The onReadyHandler will be invoked
             // when the consuming side has enough buffer space to receive more messages.

File: examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java
Patch:
@@ -39,7 +39,7 @@ public StreamObserver<HelloRequest> sayHelloStreaming(final StreamObserver<Hello
         // stream's flow control using the response stream's observer, but this is the way it is.
         final ServerCallStreamObserver<HelloReply> serverCallStreamObserver =
             (ServerCallStreamObserver<HelloReply>) responseObserver;
-        serverCallStreamObserver.disableAutoInboundFlowControl();
+        serverCallStreamObserver.disableAutoRequestWithInitial(0);
 
         // Set up a back-pressure-aware consumer for the request stream. The onReadyHandler will be invoked
         // when the consuming side has enough buffer space to receive more messages.

File: services/src/main/java/io/grpc/protobuf/services/ProtoReflectionService.java
Patch:
@@ -133,8 +133,7 @@ public StreamObserver<ServerReflectionRequest> serverReflectionInfo(
     ProtoReflectionStreamObserver requestObserver =
         new ProtoReflectionStreamObserver(getRefreshedIndex(), serverCallStreamObserver);
     serverCallStreamObserver.setOnReadyHandler(requestObserver);
-    serverCallStreamObserver.disableAutoInboundFlowControl();
-    serverCallStreamObserver.request(1);
+    serverCallStreamObserver.disableAutoRequestWithInitial(1);
     return requestObserver;
   }
 

File: stub/src/main/java/io/grpc/stub/ClientResponseObserver.java
Patch:
@@ -30,8 +30,8 @@ public interface ClientResponseObserver<ReqT, RespT> extends StreamObserver<Resp
    * onReady events, disable auto inbound flow and perform other advanced functions.
    *
    * <p>Only the methods {@link ClientCallStreamObserver#setOnReadyHandler(Runnable)} and
-   * {@link ClientCallStreamObserver#disableAutoInboundFlowControl()} may be called within this
-   * callback
+   * {@link ClientCallStreamObserver#disableAutoRequestWithInitial(int)} may be called within
+   * this callback
    *
    * <pre>
    *   // Copy an iterator to the request stream under flow-control

File: rls/src/test/java/io/grpc/rls/internal/RlsLoadBalancerTest.java
Patch:
@@ -79,6 +79,7 @@
 import javax.annotation.Nonnull;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -166,6 +167,7 @@ public void tearDown() throws Exception {
   }
 
   @Test
+  @Ignore
   public void lb_working() throws Exception {
     final InOrder inOrder = inOrder(helper);
 

File: xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java
Patch:
@@ -290,7 +290,8 @@ public void resolve_ResourceNotFound() {
     verify(mockListener).onResult(resolutionResultCaptor.capture());
     ResolutionResult result = resolutionResultCaptor.getValue();
     assertThat(result.getAddresses()).isEmpty();
-    assertThat(result.getServiceConfig()).isNull();
+    assertThat(result.getServiceConfig().getConfig()).isNull();
+    assertThat(result.getServiceConfig().getError().getCode()).isEqualTo(Code.UNAVAILABLE);
   }
 
   @Test

File: core/src/test/java/io/grpc/internal/ServiceConfigStateTest.java
Patch:
@@ -39,12 +39,14 @@
 public class ServiceConfigStateTest {
 
   private final ManagedChannelServiceConfig serviceConfig1 = new ManagedChannelServiceConfig(
+      null,
       Collections.<String, MethodInfo>emptyMap(),
       Collections.<String, MethodInfo>emptyMap(),
       null,
       null,
       null);
   private final ManagedChannelServiceConfig serviceConfig2 = new ManagedChannelServiceConfig(
+      null,
       Collections.<String, MethodInfo>emptyMap(),
       Collections.<String, MethodInfo>emptyMap(),
       null,
@@ -428,6 +430,7 @@ public void lookup_default_onPresent_onAbsent() {
   public void lookup_default_onPresent_onPresent() {
     ServiceConfigState scs = new ServiceConfigState(serviceConfig1, true);
     ManagedChannelServiceConfig serviceConfig3 = new ManagedChannelServiceConfig(
+        null,
         Collections.<String, MethodInfo>emptyMap(),
         Collections.<String, MethodInfo>emptyMap(),
         null,

File: netty/src/main/java/io/grpc/netty/NettyServer.java
Patch:
@@ -19,7 +19,6 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static io.grpc.netty.NettyServerBuilder.MAX_CONNECTION_AGE_NANOS_DISABLED;
 import static io.netty.channel.ChannelOption.ALLOCATOR;
-import static io.netty.channel.ChannelOption.SO_BACKLOG;
 import static io.netty.channel.ChannelOption.SO_KEEPALIVE;
 
 import com.google.common.base.MoreObjects;
@@ -167,7 +166,6 @@ public void start(ServerListener serverListener) throws IOException {
     b.group(bossGroup, workerGroup);
     b.channelFactory(channelFactory);
     // For non-socket based channel, the option will be ignored.
-    b.option(SO_BACKLOG, 128);
     b.childOption(SO_KEEPALIVE, true);
 
     if (channelOptions != null) {

File: xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java
Patch:
@@ -159,6 +159,7 @@ void panic(final Throwable t) {
               panicMode = true;
             }
           });
+    // TODO(sanjaypujare): move this to start() after creating an XdsServer wrapper
     InternalProtocolNegotiator.ProtocolNegotiator serverProtocolNegotiator =
         SdsProtocolNegotiators.serverProtocolNegotiator(port, syncContext);
     return buildServer(serverProtocolNegotiator);

File: xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java
Patch:
@@ -288,7 +288,8 @@ public void clientSdsProtocolNegotiatorNewHandler_fireProtocolNegotiationEvent()
   public void serverSdsProtocolNegotiator_nullSyncContext_expectPlaintext() {
     InternalProtocolNegotiator.ProtocolNegotiator protocolNegotiator =
         SdsProtocolNegotiators.serverProtocolNegotiator(/* port= */ 7000, /* syncContext= */ null);
-    assertThat(protocolNegotiator.scheme().toString()).isEqualTo("http");
+    assertThat(protocolNegotiator.getClass().getSimpleName())
+        .isEqualTo("ServerPlaintextNegotiator");
   }
 
   private static final class FakeGrpcHttp2ConnectionHandler extends GrpcHttp2ConnectionHandler {

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -114,7 +114,6 @@ final class ManagedChannelImpl extends ManagedChannel implements
 
   static final long IDLE_TIMEOUT_MILLIS_DISABLE = -1;
 
-  @VisibleForTesting
   static final long SUBCHANNEL_SHUTDOWN_DELAY_SECONDS = 5;
 
   @VisibleForTesting

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -196,7 +196,7 @@ public void onSubchannelState(
   }
 
   void handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo newState) {
-    if (newState.getState() == SHUTDOWN || !subchannels.values().contains(subchannel)) {
+    if (newState.getState() == SHUTDOWN || !subchannels.containsValue(subchannel)) {
       return;
     }
     if (config.getMode() == Mode.ROUND_ROBIN && newState.getState() == IDLE) {

File: xds/src/test/java/io/grpc/xds/XdsClientImplTest.java
Patch:
@@ -100,7 +100,6 @@
 import io.grpc.xds.XdsClientImpl.MessagePrinter;
 import java.io.IOException;
 import java.util.ArrayDeque;
-import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Queue;
@@ -2002,7 +2001,7 @@ public void edsResponseWithMatchingResource() {
                         buildLbEndpoint("192.168.0.1", 8080, HealthStatus.HEALTHY, 2)),
                     1, 0),
                 buildLocalityLbEndpoints("region3", "zone3", "subzone3",
-                    Collections.<io.envoyproxy.envoy.api.v2.endpoint.LbEndpoint>emptyList(),
+                    ImmutableList.<io.envoyproxy.envoy.api.v2.endpoint.LbEndpoint>of(),
                     2, 1), /* locality with 0 endpoint */
                 buildLocalityLbEndpoints("region4", "zone4", "subzone4",
                     ImmutableList.of(
@@ -2047,7 +2046,7 @@ public void edsResponseWithMatchingResource() {
                     new LbEndpoint("192.168.0.1", 8080,
                         2, true)), 1, 0),
             new Locality("region3", "zone3", "subzone3"),
-            new LocalityLbEndpoints(Collections.<LbEndpoint>emptyList(), 2, 1));
+            new LocalityLbEndpoints(ImmutableList.<LbEndpoint>of(), 2, 1));
   }
 
   @Test

File: api/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -209,8 +209,8 @@ public T useTransportSecurity() {
 
   /**
    * Provides a custom {@link NameResolver.Factory} for the channel. If this method is not called,
-   * the builder will try the providers listed by {@link NameResolverProvider#providers()} for the
-   * given target.
+   * the builder will try the providers registered in the default {@link NameResolverRegistry} for
+   * the given target.
    *
    * <p>This method should rarely be used, as name resolvers should provide a {@code
    * NameResolverProvider} and users rely on service loading to find implementations in the class

File: xds/src/main/java/io/grpc/xds/LocalityStore.java
Patch:
@@ -622,8 +622,7 @@ public void run() {
               && !localityLbInfo.childBalancer.canHandleEmptyAddressListFromNameResolution()) {
             localityLbInfo.childBalancer.handleNameResolutionError(
                 Status.UNAVAILABLE.withDescription(
-                    "No healthy address available from EDS update '" + localityLbEndpoints
-                        + "' for locality '" + locality + "'"));
+                    "Locality " + locality + " has no healthy endpoint"));
           } else {
             localityLbInfo.childBalancer
                 .handleResolvedAddresses(ResolvedAddresses.newBuilder()

File: android-interop-testing/src/main/java/io/grpc/android/integrationtest/InteropTask.java
Patch:
@@ -53,6 +53,7 @@ protected void onPreExecute() {
     tester.setUp();
   }
 
+  @SuppressWarnings("Finally")
   @Override
   protected String doInBackground(Void... ignored) {
     try {

File: xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java
Patch:
@@ -67,7 +67,7 @@ public final class XdsClientWrapperForServerSds {
   private EnvoyServerProtoData.Listener curListener;
   // TODO(sanjaypujare): implement shutting down XdsServer which will need xdsClient reference
   @SuppressWarnings("unused")
-  @Nullable private XdsClient xdsClient;
+  @Nullable private final XdsClient xdsClient;
   private final int port;
   private final ScheduledExecutorService timeService;
 
@@ -158,7 +158,7 @@ public DownstreamTlsContext getDownstreamTlsContext(Channel channel) {
   }
 
   private static final class FilterChainComparator implements Comparator<FilterChain> {
-    private InetSocketAddress localAddress;
+    private final InetSocketAddress localAddress;
 
     private enum Match {
       NO_MATCH,

File: xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTest.java
Patch:
@@ -137,7 +137,7 @@ public static Iterable<Object[]> data() {
   @Mock private Channel channel;
 
   private XdsClientWrapperForServerSds xdsClientWrapperForServerSds;
-  private DownstreamTlsContext[] tlsContexts = new DownstreamTlsContext[3];
+  private final DownstreamTlsContext[] tlsContexts = new DownstreamTlsContext[3];
 
   @Before
   public void setUp() throws IOException {

File: xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java
Patch:
@@ -22,7 +22,6 @@
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.mockito.internal.verification.VerificationModeFactory.times;
 
 import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;
 import io.grpc.inprocess.InProcessSocketAddress;
@@ -61,7 +60,7 @@ public void setUp() throws IOException {
 
   @Test
   public void verifyListenerWatcherRegistered() {
-    verify(xdsClient, times(1)).watchListenerData(eq(PORT), any(XdsClient.ListenerWatcher.class));
+    verify(xdsClient).watchListenerData(eq(PORT), any(XdsClient.ListenerWatcher.class));
   }
 
   @Test

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -486,6 +486,7 @@ private void streamCreatedInternal(
         String encoding = headers.get(MESSAGE_ENCODING_KEY);
         Decompressor decompressor = decompressorRegistry.lookupDecompressor(encoding);
         if (decompressor == null) {
+          stream.setListener(NOOP_LISTENER);
           stream.close(
               Status.UNIMPLEMENTED.withDescription(
                   String.format("Can't find decompressor for %s", encoding)),

File: core/src/test/java/io/grpc/internal/ServerImplTest.java
Patch:
@@ -487,6 +487,7 @@ public void decompressorNotFound() throws Exception {
 
     transportListener.streamCreated(stream, "Waiter/nonexist", requestHeaders);
 
+    verify(stream).setListener(isA(ServerStreamListener.class));
     verify(stream).streamId();
     verify(stream).close(statusCaptor.capture(), any(Metadata.class));
     Status status = statusCaptor.getValue();

File: android/src/main/java/io/grpc/android/AndroidChannelBuilder.java
Patch:
@@ -205,6 +205,7 @@ public void run() {
             };
       } else {
         final NetworkReceiver networkReceiver = new NetworkReceiver();
+        @SuppressWarnings("deprecation")
         IntentFilter networkIntentFilter =
             new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
         context.registerReceiver(networkReceiver, networkIntentFilter);

File: android/src/test/java/io/grpc/android/AndroidChannelBuilderTest.java
Patch:
@@ -51,6 +51,7 @@
 @LooperMode(LEGACY)
 @RunWith(RobolectricTestRunner.class)
 @Config(shadows = {AndroidChannelBuilderTest.ShadowDefaultNetworkListenerConnectivityManager.class})
+@SuppressWarnings("deprecation")
 public final class AndroidChannelBuilderTest {
   private final NetworkInfo WIFI_CONNECTED =
       ShadowNetworkInfo.newInstance(

File: xds/src/main/java/io/grpc/xds/WeightedTargetLoadBalancer.java
Patch:
@@ -157,7 +157,7 @@ private void updateOverallBalancingState() {
   }
 
   @Nullable
-  private ConnectivityState aggregateState(
+  private static ConnectivityState aggregateState(
       @Nullable ConnectivityState overallState, ConnectivityState childState) {
     if (overallState == null) {
       return childState;

File: xds/src/main/java/io/grpc/xds/WeightedTargetLoadBalancerProvider.java
Patch:
@@ -185,7 +185,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-      return Objects.hash(targets);
+      return Objects.hashCode(targets);
     }
 
     @Override

File: xds/src/test/java/io/grpc/xds/WeightedTargetLoadBalancerProviderTest.java
Patch:
@@ -118,7 +118,7 @@ public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawConfig) {
         + "      ]"
         + "    }"
         + "  }"
-        + "}").replace("'", "\"");
+        + "}").replace('\'', '"');
 
     @SuppressWarnings("unchecked")
     Map<String, ?> rawLbConfigMap = (Map<String, ?>) JsonParser.parse(weightedTargetConfigJson);

File: xds/src/test/java/io/grpc/xds/XdsClientImplTestForListener.java
Patch:
@@ -226,7 +226,7 @@ public void tearDown() {
     assertThat(fakeClock.getPendingTasks()).isEmpty();
   }
 
-  private Node getNodeToVerify() {
+  private static Node getNodeToVerify() {
     Struct newMetadata = NODE.getMetadata().toBuilder()
         .putFields("listener_inbound_port",
             Value.newBuilder().setStringValue("" + PORT).build())

File: rls/src/test/java/io/grpc/rls/internal/RlsProtoConvertersTest.java
Patch:
@@ -173,7 +173,7 @@ public void convert_jsonRlsConfig() throws IOException {
         + "  \"validTargets\": [\"a valid target\"],"
         + "  \"cacheSizeBytes\": 1000,\n"
         + "  \"defaultTarget\": \"us_east_1.cloudbigtable.googleapis.com\",\n"
-        + "  \"requestProcessingStrategy\": \"ASYNC_LOOKUP_DEFAULT_TARGET_ON_MISS\"\n"
+        + "  \"requestProcessingStrategy\": \"SYNC_LOOKUP_CLIENT_SEES_ERROR\"\n"
         + "}";
 
     RouteLookupConfig expectedConfig =
@@ -200,7 +200,7 @@ public void convert_jsonRlsConfig() throws IOException {
             /* cacheSize= */ 1000,
             /* validTargets= */ ImmutableList.of("a valid target"),
             /* defaultTarget= */ "us_east_1.cloudbigtable.googleapis.com",
-            RequestProcessingStrategy.ASYNC_LOOKUP_DEFAULT_TARGET_ON_MISS);
+            RequestProcessingStrategy.SYNC_LOOKUP_CLIENT_SEES_ERROR);
 
     RouteLookupConfigConverter converter = new RouteLookupConfigConverter();
     @SuppressWarnings("unchecked")

File: services/src/main/java/io/grpc/services/HealthCheckingLoadBalancerFactory.java
Patch:
@@ -181,11 +181,11 @@ protected LoadBalancer delegate() {
 
     @Override
     public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
-      Map<String, ?> serviceConfig =
+      Map<String, ?> healthCheckingConfig =
           resolvedAddresses
               .getAttributes()
               .get(LoadBalancer.ATTR_HEALTH_CHECKING_CONFIG);
-      String serviceName = ServiceConfigUtil.getHealthCheckedServiceName(serviceConfig);
+      String serviceName = ServiceConfigUtil.getHealthCheckedServiceName(healthCheckingConfig);
       helper.setHealthCheckedService(serviceName);
       super.handleResolvedAddresses(resolvedAddresses);
     }

File: core/src/main/java/io/grpc/util/GracefulSwitchLoadBalancer.java
Patch:
@@ -34,7 +34,7 @@
  * other than READY, the new policy will be swapped into place immediately.  Otherwise, the channel
  * will keep using the old policy until the new policy reports READY or the old policy exits READY.
  *
- * <p>The balancer must {@link #switchTo(Factory) switch to} a policy prior to {@link
+ * <p>The balancer must {@link #switchTo(LoadBalancer.Factory) switch to} a policy prior to {@link
  * LoadBalancer#handleResolvedAddresses(ResolvedAddresses) handling resolved addresses} for the
  * first time.
  */

File: api/src/main/java/io/grpc/InternalKnownTransport.java
Patch:
@@ -24,6 +24,7 @@
 @Internal
 public enum InternalKnownTransport {
   NETTY,
+  NETTY_SHADED,
   ;
 }
 

File: api/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -51,8 +51,7 @@ public final class MethodDescriptor<ReqT, RespT> {
 
   // Must be set to InternalKnownTransport.values().length
   // Not referenced to break the dependency.
-  private final AtomicReferenceArray<Object> rawMethodNames = new AtomicReferenceArray<>(1);
-
+  private final AtomicReferenceArray<Object> rawMethodNames = new AtomicReferenceArray<>(2);
 
   /**
    * Gets the cached "raw" method name for this Method Descriptor.  The raw name is transport

File: netty/src/main/java/io/grpc/netty/NettyClientStream.java
Patch:
@@ -54,7 +54,9 @@
  */
 class NettyClientStream extends AbstractClientStream {
   private static final InternalMethodDescriptor methodDescriptorAccessor =
-      new InternalMethodDescriptor(InternalKnownTransport.NETTY);
+      new InternalMethodDescriptor(
+          NettyClientTransport.class.getName().contains("grpc.netty.shaded")
+              ? InternalKnownTransport.NETTY_SHADED : InternalKnownTransport.NETTY);
 
   private final Sink sink = new Sink();
   private final TransportState state;

File: okhttp/src/main/java/io/grpc/okhttp/Utils.java
Patch:
@@ -42,6 +42,7 @@ class Utils {
    * is sent to expand the window.
    */
   static final float DEFAULT_WINDOW_UPDATE_RATIO = 0.5f;
+  static final int DEFAULT_WINDOW_SIZE = 65535;
   static final int CONNECTION_STREAM_ID = 0;
 
   public static Metadata convertHeaders(List<Header> http2Headers) {

File: api/src/main/java/io/grpc/ClientStreamTracer.java
Patch:
@@ -62,7 +62,8 @@ public abstract static class Factory {
      *        method.  It should not be saved because it is not safe for read or write after the
      *        method returns.
      *
-     * @deprecated use {@link #newClientStreamTracer(StreamInfo, Metadata)} instead
+     * @deprecated use {@link
+     * #newClientStreamTracer(io.grpc.ClientStreamTracer.StreamInfo, io.grpc.Metadata)} instead.
      */
     @Deprecated
     public ClientStreamTracer newClientStreamTracer(CallOptions callOptions, Metadata headers) {

File: api/src/main/java/io/grpc/LoadBalancerProvider.java
Patch:
@@ -70,7 +70,8 @@ public abstract class LoadBalancerProvider extends LoadBalancer.Factory {
    *     policy choice.
    * @return a tuple of the fully parsed and validated balancer configuration, else the Status.
    * @since 1.20.0
-   * @see https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md
+   * @see <a href="https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md">
+   *   A24-lb-policy-config.md</a>
    */
   public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawLoadBalancingPolicyConfig) {
     return UNKNOWN_CONFIG;

File: xds/src/test/java/io/grpc/xds/LoadReportClientTest.java
Patch:
@@ -44,6 +44,7 @@
 import io.envoyproxy.envoy.service.load_stats.v2.LoadStatsResponse;
 import io.grpc.Context;
 import io.grpc.Context.CancellationListener;
+import io.grpc.InternalLogId;
 import io.grpc.ManagedChannel;
 import io.grpc.Status;
 import io.grpc.SynchronizationContext;
@@ -118,6 +119,7 @@ public void uncaughtException(Thread t, Throwable e) {
           throw new AssertionError(e);
         }
       });
+  private final InternalLogId logId = InternalLogId.allocate("lrs-client-test", null);
   private final FakeClock fakeClock = new FakeClock();
   private final ArrayDeque<StreamObserver<LoadStatsRequest>> lrsRequestObservers =
       new ArrayDeque<>();
@@ -179,6 +181,7 @@ public void cancelled(Context context) {
         .thenReturn(TimeUnit.SECONDS.toNanos(1L), TimeUnit.SECONDS.toNanos(10L));
     lrsClient =
         new LoadReportClient(
+            logId,
             TARGET_NAME,
             channel,
             NODE,

File: xds/src/test/java/io/grpc/xds/LocalityStoreTest.java
Patch:
@@ -47,6 +47,7 @@
 import io.grpc.ClientStreamTracer;
 import io.grpc.ConnectivityState;
 import io.grpc.EquivalentAddressGroup;
+import io.grpc.InternalLogId;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancer.Helper;
 import io.grpc.LoadBalancer.PickResult;
@@ -134,6 +135,7 @@ public void uncaughtException(Thread t, Throwable e) {
         }
       });
 
+  private final InternalLogId logId = InternalLogId.allocate("locality-store-test", null);
   private final LoadBalancerRegistry lbRegistry = new LoadBalancerRegistry();
   private final Map<String, LoadBalancer> loadBalancers = new HashMap<>();
   private final Map<String, Helper> childHelpers = new HashMap<>();
@@ -251,7 +253,7 @@ public OrcaReportingHelperWrapper answer(InvocationOnMock invocation) {
         });
     lbRegistry.register(lbProvider);
     localityStore =
-        new LocalityStoreImpl(helper, pickerFactory, lbRegistry, random, loadStatsStore,
+        new LocalityStoreImpl(logId, helper, pickerFactory, lbRegistry, random, loadStatsStore,
             orcaPerRequestUtil, orcaOobUtil);
   }
 

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -123,6 +123,7 @@ public void start(final Listener2 listener) {
       XdsClient createXdsClient() {
         return
             new XdsClientImpl(
+                authority,
                 serverList,
                 channelFactory,
                 node,

File: xds/src/test/java/io/grpc/xds/XdsLoadBalancerProviderTest.java
Patch:
@@ -155,6 +155,7 @@ public void selectFallBackPolicy_roundRobinIsDefault() throws Exception {
   @Test
   public void parseLoadBalancingConfigPolicy() throws Exception {
     String rawLbConfig = "{"
+        + "\"cluster\" : \"foo.googleapis.com\","
         + "\"childPolicy\" : [{\"lbPolicy3\" : {\"key\" : \"val\"}}, {\"supported_1\" : {}}],"
         + "\"fallbackPolicy\" : [{\"unsupported\" : {}}, {\"round_robin\" : {\"key\" : \"val\"}},"
         + "{\"supported_2\" : {\"key\" : \"val\"}}],"
@@ -169,6 +170,7 @@ public void parseLoadBalancingConfigPolicy() throws Exception {
     assertThat(configOrError.getConfig()).isInstanceOf(XdsConfig.class);
     assertThat(configOrError.getConfig()).isEqualTo(
         new XdsConfig(
+            "foo.googleapis.com",
             ServiceConfigUtil.unwrapLoadBalancingConfig(
                 checkObject(JsonParser.parse("{\"supported_1\" : {}}"))),
             ServiceConfigUtil.unwrapLoadBalancingConfig(

File: xds/src/test/java/io/grpc/xds/internal/sds/SdsSslContextProviderTest.java
Patch:
@@ -80,7 +80,7 @@ private SdsSslContextProvider<?> getSdsSslContextProvider(
 
     return server
         ? SdsSslContextProvider.getProviderForServer(
-            SecretVolumeSslContextProviderTest.buildDownstreamTlsContext(commonTlsContext),
+            CommonTlsContextTestsUtil.buildDownstreamTlsContext(commonTlsContext),
             node,
             MoreExecutors.directExecutor(),
             MoreExecutors.directExecutor())

File: xds/src/test/java/io/grpc/xds/internal/sds/ServerSslContextProviderFactoryTest.java
Patch:
@@ -53,7 +53,7 @@ public void createSslContextProvider_sdsConfigForTlsCert_expectException() {
         CommonTlsContextTestsUtil.buildCommonTlsContextFromSdsConfigForTlsCertificate(
             "name", "unix:/tmp/sds/path", CA_PEM_FILE);
     DownstreamTlsContext downstreamTlsContext =
-        SecretVolumeSslContextProviderTest.buildDownstreamTlsContext(commonTlsContext);
+        CommonTlsContextTestsUtil.buildDownstreamTlsContext(commonTlsContext);
 
     try {
       SslContextProvider<DownstreamTlsContext> unused =
@@ -72,7 +72,7 @@ public void createSslContextProvider_sdsConfigForCertValidationContext_expectExc
         CommonTlsContextTestsUtil.buildCommonTlsContextFromSdsConfigForValidationContext(
             "name", "unix:/tmp/sds/path", SERVER_KEY_FILE, SERVER_PEM_FILE);
     DownstreamTlsContext downstreamTlsContext =
-        SecretVolumeSslContextProviderTest.buildDownstreamTlsContext(commonTlsContext);
+        CommonTlsContextTestsUtil.buildDownstreamTlsContext(commonTlsContext);
 
     try {
       SslContextProvider<DownstreamTlsContext> unused =

File: examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlClient.java
Patch:
@@ -66,7 +66,7 @@ public void beforeStart(final ClientCallStreamObserver<HelloRequest> requestStre
             // Note: the onReadyHandler's invocation is serialized on the same thread pool as the incoming
             // StreamObserver's onNext(), onError(), and onComplete() handlers. Blocking the onReadyHandler will prevent
             // additional messages from being processed by the incoming StreamObserver. The onReadyHandler must return
-            // in a timely manor or else message processing throughput will suffer.
+            // in a timely manner or else message processing throughput will suffer.
             requestStream.setOnReadyHandler(new Runnable() {
               // An iterator is used so we can pause and resume iteration of the request data.
               Iterator<String> iterator = names().iterator();

File: examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java
Patch:
@@ -46,8 +46,8 @@ public StreamObserver<HelloRequest> sayHelloStreaming(final StreamObserver<Hello
         //
         // Note: the onReadyHandler's invocation is serialized on the same thread pool as the incoming StreamObserver's
         // onNext(), onError(), and onComplete() handlers. Blocking the onReadyHandler will prevent additional messages
-        // from being processed by the incoming StreamObserver. The onReadyHandler must return in a timely manor or else
-        // message processing throughput will suffer.
+        // from being processed by the incoming StreamObserver. The onReadyHandler must return in a timely manner or
+        // else message processing throughput will suffer.
         class OnReadyHandler implements Runnable {
           // Guard against spurious onReady() calls caused by a race between onNext() and onReady(). If the transport
           // toggles isReady() from false to true while onNext() is executing, but before onNext() checks isReady(),

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -178,8 +178,9 @@ public void onError(Status error) {
         //  a temporary solution. More design discussion needs to be done.
         if (error.getCode().equals(Code.NOT_FOUND)) {
           listener.onResult(ResolutionResult.newBuilder().build());
+          return;
         }
-        listener.onError(error);
+        listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));
       }
     });
   }

File: netty/src/main/java/io/grpc/netty/GrpcSslContexts.java
Patch:
@@ -56,7 +56,7 @@ private GrpcSslContexts() {}
   /*
    * List of ALPN/NPN protocols in order of preference.
    */
-  static final List<String> NEXT_PROTOCOL_VERSIONS =
+  private static final List<String> NEXT_PROTOCOL_VERSIONS =
       Collections.unmodifiableList(Arrays.asList(HTTP2_VERSION));
 
   /*

File: grpclb/src/main/java/io/grpc/grpclb/InternalGrpclbConstantsAccessor.java
Patch:
@@ -26,16 +26,16 @@
  * team. If you *really* think you need to use this, contact the gRPC team first.
  */
 @Internal
-public class InternalGrpclbConstantsAccessor {
+public final class InternalGrpclbConstantsAccessor {
 
   // Prevent instantiation.
   private InternalGrpclbConstantsAccessor() {
   }
 
-  public static Attributes.Key<List<EquivalentAddressGroup>> ATTR_LB_ADDRS =
+  public static final Attributes.Key<List<EquivalentAddressGroup>> ATTR_LB_ADDRS =
       GrpclbConstants.ATTR_LB_ADDRS;
 
   @EquivalentAddressGroup.Attr
-  public static Attributes.Key<String> ATTR_LB_ADDR_AUTHORITY =
+  public static final Attributes.Key<String> ATTR_LB_ADDR_AUTHORITY =
       GrpclbConstants.ATTR_LB_ADDR_AUTHORITY;
 }

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java
Patch:
@@ -208,7 +208,6 @@ GrpclbState getGrpclbState() {
    * Gets a list from an object for the given key.  Copy of
    * {@link io.grpc.internal.ServiceConfigUtil#getList}.
    */
-  @SuppressWarnings("unchecked")
   @Nullable
   private static List<?> getList(Map<String, ?> obj, String key) {
     assert key != null;

File: xds/src/main/java/io/grpc/xds/XdsClientImpl.java
Patch:
@@ -680,7 +680,7 @@ static String findClusterNameInRouteConfig(RouteConfiguration config, String hos
       List<Route> routes = targetVirtualHost.getRoutesList();
       if (!routes.isEmpty()) {
         Route route = routes.get(routes.size() - 1);
-        if (route.getMatch().getPrefix().equals("")) {
+        if (route.getMatch().getPrefix().isEmpty()) {
           if (route.hasRoute()) {
             return route.getRoute().getCluster();
           }

File: alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java
Patch:
@@ -223,6 +223,7 @@ public AsciiString scheme() {
       return SCHEME;
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     public ChannelHandler newHandler(GrpcHttp2ConnectionHandler grpcHandler) {
       ChannelHandler gnh = InternalProtocolNegotiators.grpcNegotiationHandler(grpcHandler);

File: core/src/main/java/io/grpc/internal/JndiResourceResolverFactory.java
Patch:
@@ -129,6 +129,7 @@ public List<String> resolveTxt(String serviceConfigHostname) throws NamingExcept
       return Collections.unmodifiableList(serviceConfigTxtRecords);
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     public List<EquivalentAddressGroup> resolveSrv(
         AddressResolver addressResolver, String grpclbHostname) throws Exception {

File: core/src/test/java/io/grpc/internal/JndiResourceResolverTest.java
Patch:
@@ -24,7 +24,6 @@
 import io.grpc.Attributes;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.internal.DnsNameResolver.AddressResolver;
-import io.grpc.internal.GrpcAttributes;
 import io.grpc.internal.JndiResourceResolverFactory.JndiRecordFetcher;
 import io.grpc.internal.JndiResourceResolverFactory.JndiResourceResolver;
 import io.grpc.internal.JndiResourceResolverFactory.RecordFetcher;
@@ -81,6 +80,7 @@ public void txtRecordLookup() throws Exception {
     assertThat(resolver.resolveTxt("service.example.com")).isEqualTo(golden);
   }
 
+  @SuppressWarnings("deprecation")
   @Test
   public void srvRecordLookup() throws Exception {
     AddressResolver addressResolver = mock(AddressResolver.class);

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -794,7 +794,7 @@ private LbAddressGroup flattenLbAddressGroups(List<LbAddressGroup> groupList) {
     // actually used in the normal case. https://github.com/grpc/grpc-java/issues/4618 should allow
     // this to be more obvious.
     Attributes attrs = Attributes.newBuilder()
-        .set(GrpcAttributes.ATTR_LB_ADDR_AUTHORITY, authority)
+        .set(GrpclbConstants.ATTR_LB_ADDR_AUTHORITY, authority)
         .build();
     return new LbAddressGroup(flattenEquivalentAddressGroup(eags, attrs), authority);
   }

File: xds/src/main/java/io/grpc/xds/FallbackLb.java
Patch:
@@ -61,6 +61,7 @@ protected LoadBalancer delegate() {
     return fallbackPolicyLb;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
     Attributes attributes = resolvedAddresses.getAttributes();
@@ -113,6 +114,8 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
     List<EquivalentAddressGroup> servers = resolvedAddresses.getAddresses();
     // Some addresses in the list may be grpclb-v1 balancer addresses, so if the fallback policy
     // does not support grpclb-v1 balancer addresses, then we need to exclude them from the list.
+    // TODO(chengyuanzhang): delete the following logic after changing internal resolver
+    //  to not include grpclb server addresses.
     if (!newFallbackPolicyName.equals("grpclb") && !newFallbackPolicyName.equals(XDS_POLICY_NAME)) {
       ImmutableList.Builder<EquivalentAddressGroup> backends = ImmutableList.builder();
       for (EquivalentAddressGroup eag : resolvedAddresses.getAddresses()) {

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancerProvider.java
Patch:
@@ -104,7 +104,6 @@ ConfigOrError parseLoadBalancingConfigPolicyInternal(
    * Gets a list from an object for the given key.  Copy of
    * {@link io.grpc.internal.ServiceConfigUtil#getList}.
    */
-  @SuppressWarnings("unchecked")
   @Nullable
   private static List<?> getList(Map<String, ?> obj, String key) {
     assert key != null;

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -276,7 +276,7 @@ protected void protocolNegotiationEventTriggered(ChannelHandlerContext ctx) {
       } else {
         nettyProxyHandler = new HttpProxyHandler(address, userName, password);
       }
-      ctx.pipeline().addBefore(ctx.name(), /* newName= */ null, nettyProxyHandler);
+      ctx.pipeline().addBefore(ctx.name(), /* name= */ null, nettyProxyHandler);
     }
 
     @Override

File: xds/src/main/java/io/grpc/xds/XdsClientImpl.java
Patch:
@@ -699,7 +699,7 @@ private void handleCdsResponse(DiscoveryResponse cdsResponse) {
       // Management server is required to always send newly requested resources, even if they
       // may have been sent previously (proactively). Thus, client does not need to cache
       // unrequested resources.
-      if (!clusterWatchers.keySet().contains(clusterName)) {
+      if (!clusterWatchers.containsKey(clusterName)) {
         continue;
       }
       ClusterUpdate.Builder updateBuilder = ClusterUpdate.newBuilder();
@@ -1378,7 +1378,7 @@ static boolean matchHostName(String hostName, String pattern) {
    * containing {@link com.google.protobuf.Any} fields.
    */
   @VisibleForTesting
-  static class MessagePrinter {
+  static final class MessagePrinter {
     private final JsonFormat.Printer printer;
 
     @VisibleForTesting

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;
-import static io.grpc.xds.XdsLoadBalancerProvider.XDS_POLICY_NAME;
+import static io.grpc.xds.EdsLoadBalancerProvider.EDS_POLICY_NAME;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableMap;
@@ -308,7 +308,7 @@ public void onClusterChanged(ClusterUpdate newUpdate) {
           /* lrsServerName = */ newUpdate.getLrsServerName());
       updateSslContextProvider(newUpdate.getUpstreamTlsContext());
       if (edsBalancer == null) {
-        edsBalancer = lbRegistry.getProvider(XDS_POLICY_NAME).newLoadBalancer(helper);
+        edsBalancer = lbRegistry.getProvider(EDS_POLICY_NAME).newLoadBalancer(helper);
       }
       edsBalancer.handleResolvedAddresses(
           resolvedAddresses.toBuilder().setLoadBalancingPolicyConfig(edsConfig).build());

File: xds/src/main/java/io/grpc/xds/LookasideLb.java
Patch:
@@ -410,7 +410,6 @@ public void onEndpointChanged(EndpointUpdate endpointUpdate) {
     @Override
     public void onError(Status error) {
       channelLogger.log(ChannelLogLevel.ERROR, "EDS load balancer received an error: {0}",  error);
-      lookasideLbHelper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));
       endpointUpdateCallback.onError();
     }
   }

File: xds/src/test/java/io/grpc/xds/LookasideLbTest.java
Patch:
@@ -666,12 +666,9 @@ LocalityStore newLocalityStore(Helper helper, LoadBalancerRegistry lbRegistry,
   public void verifyErrorPropagation() {
     deliverResolvedAddresses(new XdsConfig(null, null, "edsServiceName1", null));
 
-    verify(helper, never()).updateBalancingState(
-        eq(TRANSIENT_FAILURE), any(SubchannelPicker.class));
     verify(edsUpdateCallback, never()).onError();
     // Forwarding 20 seconds so that the xds client will deem EDS resource not available.
     fakeClock.forwardTime(20, TimeUnit.SECONDS);
-    verify(helper).updateBalancingState(eq(TRANSIENT_FAILURE), any(SubchannelPicker.class));
     verify(edsUpdateCallback).onError();
   }
 

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancerProvider.java
Patch:
@@ -70,7 +70,8 @@ public ConfigOrError parseLoadBalancingPolicyConfig(
       return parseLoadBalancingConfigPolicyInternal(rawLoadBalancingConfigPolicy);
     } catch (RuntimeException e) {
       return ConfigOrError.fromError(
-          Status.INTERNAL.withDescription("can't parse config: " + e.getMessage()).withCause(e));
+          Status.fromThrowable(e).withDescription(
+              "Failed to parse GRPCLB config: " + rawLoadBalancingConfigPolicy));
     }
   }
 

File: xds/src/main/java/io/grpc/xds/CdsLoadBalancerProvider.java
Patch:
@@ -76,7 +76,8 @@ static ConfigOrError parseLoadBalancingConfigPolicy(Map<String, ?> rawLoadBalanc
       return ConfigOrError.fromConfig(new CdsConfig(cluster));
     } catch (RuntimeException e) {
       return ConfigOrError.fromError(
-          Status.UNKNOWN.withDescription("Failed to parse config " + e.getMessage()).withCause(e));
+          Status.fromThrowable(e).withDescription(
+              "Failed to parse CDS LB config: " + rawLoadBalancingPolicyConfig));
     }
   }
 

File: xds/src/main/java/io/grpc/xds/XdsLoadBalancerProvider.java
Patch:
@@ -86,7 +86,8 @@ static ConfigOrError parseLoadBalancingConfigPolicy(
           new XdsConfig(childPolicy, fallbackPolicy, edsServiceName, lrsServerName));
     } catch (RuntimeException e) {
       return ConfigOrError.fromError(
-          Status.UNKNOWN.withDescription("Failed to parse config " + e.getMessage()).withCause(e));
+          Status.fromThrowable(e).withDescription(
+              "Failed to parse XDS LB config: " + rawLoadBalancingPolicyConfig));
     }
   }
 

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -338,7 +338,8 @@ ConfigOrError parseLoadBalancerPolicy(Map<String, ?> serviceConfig, ChannelLogge
               return parsedLbPolicyConfig;
             }
             return ConfigOrError.fromConfig(
-                new PolicySelection(provider, serviceConfig, parsedLbPolicyConfig.getConfig()));
+                new PolicySelection(
+                    provider, lbConfig.getRawConfigValue(), parsedLbPolicyConfig.getConfig()));
           }
         }
         return ConfigOrError.fromError(

File: core/src/test/java/io/grpc/internal/AutoConfiguredLoadBalancerFactoryTest.java
Patch:
@@ -275,7 +275,7 @@ public void handleResolvedAddressGroups_propagateLbConfigToDelegate() throws Exc
     verify(testLbBalancer).handleResolvedAddresses(resultCaptor.capture());
     assertThat(resultCaptor.getValue().getAddresses()).containsExactlyElementsIn(servers).inOrder();
     assertThat(resultCaptor.getValue().getAttributes().get(ATTR_LOAD_BALANCING_CONFIG))
-        .isEqualTo(rawServiceConfig);
+        .containsExactly("setting1", "high");
     verify(testLbBalancer, atLeast(0)).canHandleEmptyAddressListFromNameResolution();
     ArgumentCaptor<Map<String, ?>> lbConfigCaptor = ArgumentCaptor.forClass(Map.class);
     verify(testLbBalancerProvider).parseLoadBalancingPolicyConfig(lbConfigCaptor.capture());
@@ -298,7 +298,7 @@ public void handleResolvedAddressGroups_propagateLbConfigToDelegate() throws Exc
     assertThat(handleResult.getCode()).isEqualTo(Status.Code.OK);
     assertThat(resultCaptor.getValue().getAddresses()).containsExactlyElementsIn(servers).inOrder();
     assertThat(resultCaptor.getValue().getAttributes().get(ATTR_LOAD_BALANCING_CONFIG))
-        .isEqualTo(rawServiceConfig);
+        .containsExactly("setting1", "low");
     verify(testLbBalancerProvider, times(2))
         .parseLoadBalancingPolicyConfig(lbConfigCaptor.capture());
     assertThat(lbConfigCaptor.getValue()).containsExactly("setting1", "low");
@@ -388,7 +388,7 @@ public void handleResolvedAddressGroups_delegateAcceptsEmptyAddressList()
     assertThat(resultCaptor.getValue().getLoadBalancingPolicyConfig())
         .isEqualTo(nextParsedConfigOrError2.get().getConfig());
     assertThat(resultCaptor.getValue().getAttributes().get(ATTR_LOAD_BALANCING_CONFIG))
-        .isEqualTo(rawServiceConfig);
+        .containsExactly("setting1", "high");
   }
 
   @Test

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest2.java
Patch:
@@ -1006,7 +1006,7 @@ public void nameResolverReturnsEmptySubLists_optionallyAllowed() throws Exceptio
             new PolicySelection(
                 mockLoadBalancerProvider,
                 parseConfig(rawLbConfig),
-                ConfigOrError.fromConfig(new Object())));
+                new Object()));
     nameResolverFactory.nextConfigOrError.set(ConfigOrError.fromConfig(parsedServiceConfig));
     nameResolverFactory.nextRawServiceConfig.set(rawServiceConfig);
     channelBuilder.nameResolverFactory(nameResolverFactory);
@@ -3486,7 +3486,7 @@ protected ClientTransportFactory buildTransportFactory() {
     Object fakeLbConfig = new Object();
     PolicySelection lbConfigs =
         new PolicySelection(
-            mockLoadBalancerProvider, rawServiceConfig, ConfigOrError.fromConfig(fakeLbConfig));
+            mockLoadBalancerProvider, rawServiceConfig, fakeLbConfig);
     mockLoadBalancerProvider.parseLoadBalancingPolicyConfig(rawServiceConfig);
     ManagedChannelServiceConfig2 managedChannelServiceConfig =
         createManagedChannelServiceConfig(rawServiceConfig, lbConfigs);

File: xds/src/main/java/io/grpc/xds/LookasideLb.java
Patch:
@@ -502,6 +502,7 @@ public void onEndpointChanged(EndpointUpdate endpointUpdate) {
     @Override
     public void onError(Status error) {
       channelLogger.log(ChannelLogLevel.ERROR, "EDS load balancer received an error: {0}",  error);
+      lookasideLbHelper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));
       endpointUpdateCallback.onError();
     }
   }

File: xds/src/test/java/io/grpc/xds/LookasideLbTest.java
Patch:
@@ -787,8 +787,11 @@ public void handleLocalityAssignmentUpdates() {
   public void verifyRpcErrorPropagation() {
     lookasideLb.handleResolvedAddresses(defaultResolvedAddress);
 
+    verify(helper, never()).updateBalancingState(
+        eq(TRANSIENT_FAILURE), any(SubchannelPicker.class));
     verify(edsUpdateCallback, never()).onError();
     serverResponseWriter.onError(new RuntimeException());
+    verify(helper).updateBalancingState(eq(TRANSIENT_FAILURE), any(SubchannelPicker.class));
     verify(edsUpdateCallback).onError();
   }
 

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -268,7 +268,7 @@ public void onGoAwayReceived(int lastStreamId, long errorCode, ByteBuf debugData
         if (errorCode == Http2Error.ENHANCE_YOUR_CALM.code()) {
           String data = new String(debugDataBytes, UTF_8);
           logger.log(
-              Level.WARNING, "Received GOAWAY with ENHANCE_YOUR_CALM. Debug data: {1}", data);
+              Level.WARNING, "Received GOAWAY with ENHANCE_YOUR_CALM. Debug data: {0}", data);
           if ("too_many_pings".equals(data)) {
             tooManyPingsRunnable.run();
           }

File: census/src/main/java/io/grpc/census/CensusTracingModule.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.internal;
+package io.grpc.census;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 

File: census/src/main/java/io/grpc/census/internal/DeprecatedCensusConstants.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.internal;
+package io.grpc.census.internal;
 
 import com.google.common.annotations.VisibleForTesting;
 import io.opencensus.contrib.grpc.metrics.RpcMeasureConstants;

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -450,9 +450,9 @@ protected ManagedChannel createChannel() {
         }
         builder = okBuilder;
       }
-      io.grpc.internal.TestingAccessor.setStatsImplementation(
-          builder, createClientCensusStatsModule());
-      return builder.build();
+      // Disable the default census stats interceptor, use testing interceptor instead.
+      io.grpc.internal.TestingAccessor.setStatsEnabled(builder, false);
+      return builder.intercept(createCensusStatsClientInterceptor()).build();
     }
 
     @Override

File: interop-testing/src/test/java/io/grpc/testing/integration/AutoWindowSizingOnTest.java
Patch:
@@ -46,8 +46,8 @@ protected ManagedChannel createChannel() {
     NettyChannelBuilder builder = NettyChannelBuilder.forAddress(getListenAddress())
         .negotiationType(NegotiationType.PLAINTEXT)
         .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE);
-    io.grpc.internal.TestingAccessor.setStatsImplementation(
-        builder, createClientCensusStatsModule());
-    return builder.build();
+    // Disable the default census stats interceptor, use testing interceptor instead.
+    io.grpc.internal.TestingAccessor.setStatsEnabled(builder, false);
+    return builder.intercept(createCensusStatsClientInterceptor()).build();
   }
 }

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java
Patch:
@@ -57,9 +57,9 @@ protected ManagedChannel createChannel() {
         .eventLoopGroup(eventLoopGroup)
         .flowControlWindow(65 * 1024)
         .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE);
-    io.grpc.internal.TestingAccessor.setStatsImplementation(
-        builder, createClientCensusStatsModule());
-    return builder.build();
+    // Disable the default census stats interceptor, use testing interceptor instead.
+    io.grpc.internal.TestingAccessor.setStatsEnabled(builder, false);
+    return builder.intercept(createCensusStatsClientInterceptor()).build();
   }
 
   @Override

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java
Patch:
@@ -71,9 +71,9 @@ protected ManagedChannel createChannel() {
               .trustManager(TestUtils.loadX509Cert("ca.pem"))
               .ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE)
               .build());
-      io.grpc.internal.TestingAccessor.setStatsImplementation(
-          builder, createClientCensusStatsModule());
-      return builder.build();
+      // Disable the default census stats interceptor, use testing interceptor instead.
+      io.grpc.internal.TestingAccessor.setStatsEnabled(builder, false);
+      return builder.intercept(createCensusStatsClientInterceptor()).build();
     } catch (Exception ex) {
       throw new RuntimeException(ex);
     }

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -100,15 +100,15 @@ private OkHttpChannelBuilder createChannelBuilder() {
             .build())
         .overrideAuthority(GrpcUtil.authorityFromHostAndPort(
             TestUtils.TEST_SERVER_HOST, port));
-    io.grpc.internal.TestingAccessor.setStatsImplementation(
-        builder, createClientCensusStatsModule());
     try {
       builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(Platform.get().getProvider(),
           TestUtils.loadCert("ca.pem")));
     } catch (Exception e) {
       throw new RuntimeException(e);
     }
-    return builder;
+    // Disable the default census stats interceptor, use testing interceptor instead.
+    io.grpc.internal.TestingAccessor.setStatsEnabled(builder, false);
+    return builder.intercept(createCensusStatsClientInterceptor());
   }
 
   @Test

File: interop-testing/src/test/java/io/grpc/testing/integration/InProcessTest.java
Patch:
@@ -38,9 +38,9 @@ protected AbstractServerImplBuilder<?> getServerBuilder() {
   @Override
   protected ManagedChannel createChannel() {
     InProcessChannelBuilder builder = InProcessChannelBuilder.forName(SERVER_NAME);
-    io.grpc.internal.TestingAccessor.setStatsImplementation(
-        builder, createClientCensusStatsModule());
-    return builder.build();
+    // Disable the default census stats interceptor, use testing interceptor instead.
+    io.grpc.internal.TestingAccessor.setStatsEnabled(builder, false);
+    return builder.intercept(createCensusStatsClientInterceptor()).build();
   }
 
   @Override

File: interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java
Patch:
@@ -165,9 +165,9 @@ public void onHeaders(Metadata headers) {
           }
         })
         .usePlaintext();
-    io.grpc.internal.TestingAccessor.setStatsImplementation(
-        builder, createClientCensusStatsModule());
-    return builder.build();
+    // Disable the default census stats interceptor, use testing interceptor instead.
+    io.grpc.internal.TestingAccessor.setStatsEnabled(builder, false);
+    return builder.intercept(createCensusStatsClientInterceptor()).build();
   }
 
   /**

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -3417,7 +3417,7 @@ public void start(Listener2 listener) {
       public void shutdown() {}
     }
 
-    final class FakeNameResolverFactory extends NameResolver.Factory {
+    final class FakeNameResolverFactory2 extends NameResolver.Factory {
       FakeNameResolver resolver;
 
       @Nullable
@@ -3432,7 +3432,7 @@ public String getDefaultScheme() {
       }
     }
 
-    FakeNameResolverFactory factory = new FakeNameResolverFactory();
+    FakeNameResolverFactory2 factory = new FakeNameResolverFactory2();
     final class CustomBuilder extends AbstractManagedChannelImplBuilder<CustomBuilder> {
 
       CustomBuilder() {

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest2.java
Patch:
@@ -3437,7 +3437,7 @@ public void start(Listener2 listener) {
       public void shutdown() {}
     }
 
-    final class FakeNameResolverFactory extends NameResolver.Factory {
+    final class FakeNameResolverFactory2 extends NameResolver.Factory {
       FakeNameResolver resolver;
 
       @Nullable
@@ -3452,7 +3452,7 @@ public String getDefaultScheme() {
       }
     }
 
-    FakeNameResolverFactory factory = new FakeNameResolverFactory();
+    FakeNameResolverFactory2 factory = new FakeNameResolverFactory2();
     final class CustomBuilder extends AbstractManagedChannelImplBuilder<CustomBuilder> {
 
       CustomBuilder() {

File: cronet/src/test/java/io/grpc/cronet/CronetClientStreamTest.java
Patch:
@@ -94,6 +94,7 @@ void setStream(CronetClientStream stream) {
     }
 
     @Override
+    @SuppressWarnings("GuardedBy")
     public void run() {
       assertTrue(stream != null);
       stream.transportState().start(factory);

File: interop-testing/src/main/java/io/grpc/testing/integration/Util.java
Patch:
@@ -37,6 +37,7 @@ public class Util {
       = Metadata.Key.of("x-grpc-test-echo-trailing-bin", Metadata.BINARY_BYTE_MARSHALLER);
 
   /** Assert that two messages are equal, producing a useful message if not. */
+  @SuppressWarnings("LiteProtoToString")
   public static void assertEquals(MessageLite expected, MessageLite actual) {
     if (expected == null || actual == null) {
       Assert.assertEquals(expected, actual);

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -2127,7 +2127,7 @@ void assertClosed() {
     // The wait is safe; nextFrame is called in a loop and can have spurious wakeups
     @SuppressWarnings("WaitNotInLoop")
     @Override
-    public boolean nextFrame(Handler handler) throws IOException {
+    public boolean nextFrame(FrameReader.Handler handler) throws IOException {
       Result result;
       try {
         result = nextResults.take();

File: services/src/main/java/io/grpc/services/BinlogHelper.java
Patch:
@@ -46,7 +46,6 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.Marshaller;
 import io.grpc.ServerCall;
-import io.grpc.ServerCall.Listener;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
 import io.grpc.Status;
@@ -408,7 +407,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
 
         return new SimpleForwardingClientCall<ReqT, RespT>(next.newCall(method, callOptions)) {
           @Override
-          public void start(final Listener<RespT> responseListener, Metadata headers) {
+          public void start(final ClientCall.Listener<RespT> responseListener, Metadata headers) {
             final Duration timeout = deadline == null ? null
                 : Durations.fromNanos(deadline.timeRemaining(TimeUnit.NANOSECONDS));
             writer.logClientHeader(
@@ -500,7 +499,7 @@ public void cancel(String message, Throwable cause) {
   public ServerInterceptor getServerInterceptor(final long callId) {
     return new ServerInterceptor() {
       @Override
-      public <ReqT, RespT> Listener<ReqT> interceptCall(
+      public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(
           final ServerCall<ReqT, RespT> call,
           Metadata headers,
           ServerCallHandler<ReqT, RespT> next) {

File: cronet/src/main/java/io/grpc/cronet/CronetClientTransport.java
Patch:
@@ -149,9 +149,12 @@ public void run() {
     return new StartCallback().clientStream;
   }
 
+  @SuppressWarnings("GuardedBy")
   @GuardedBy("lock")
   private void startStream(CronetClientStream stream) {
     streams.add(stream);
+    // TODO(b/145386688): This access should be guarded by 'stream.transportState().lock'; instead
+    // found: 'this.lock'
     stream.transportState().start(streamFactory);
   }
 

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -45,6 +45,7 @@
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
 
+@SuppressWarnings("deprecation") // migrate to AutoConfiguredLoadBalancerFactory2 is required
 public final class AutoConfiguredLoadBalancerFactory {
   private static final Logger logger =
       Logger.getLogger(AutoConfiguredLoadBalancerFactory.class.getName());

File: core/src/main/java/io/grpc/internal/GrpcAttributes.java
Patch:
@@ -29,7 +29,10 @@
 public final class GrpcAttributes {
   /**
    * Attribute key for service config.
+   *
+   * <p>Deprecated: all users should migrate to parsed config {@link ManagedChannelServiceConfig}.
    */
+  @Deprecated
   @NameResolver.ResolutionResultAttr
   public static final Attributes.Key<Map<String, ?>> NAME_RESOLVER_SERVICE_CONFIG =
       Attributes.Key.create("service-config");

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1302,7 +1302,7 @@ private final class NameResolverListener extends NameResolver.Listener2 {
     public void onResult(final ResolutionResult resolutionResult) {
       final class NamesResolved implements Runnable {
 
-        @SuppressWarnings("ReferenceEquality")
+        @SuppressWarnings({"ReferenceEquality", "deprecation"})
         @Override
         public void run() {
           List<EquivalentAddressGroup> servers = resolutionResult.getAddresses();

File: core/src/main/java/io/grpc/util/RoundRobinLoadBalancer.java
Patch:
@@ -85,6 +85,7 @@ final class RoundRobinLoadBalancer extends LoadBalancer {
   }
 
   @Override
+  @SuppressWarnings("deprecation")
   public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
     List<EquivalentAddressGroup> servers = resolvedAddresses.getAddresses();
     Attributes attributes = resolvedAddresses.getAttributes();

File: core/src/test/java/io/grpc/internal/AutoConfiguredLoadBalancerFactoryTest.java
Patch:
@@ -78,7 +78,9 @@
 /**
  * Unit tests for {@link AutoConfiguredLoadBalancerFactory}.
  */
+@Deprecated // to be migrate to AutoConfiguredLoadBalancerFactoryTest2
 @RunWith(JUnit4.class)
+@SuppressWarnings("deprecation")
 public class AutoConfiguredLoadBalancerFactoryTest {
   private static final LoadBalancerRegistry defaultRegistry =
       LoadBalancerRegistry.getDefaultRegistry();

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -87,6 +87,7 @@
 /**
  * Unit tests for {@link ManagedChannelImpl}'s idle mode.
  */
+@Deprecated  // migrate to ManagedChannelImplIdlenessTest2
 @RunWith(JUnit4.class)
 public class ManagedChannelImplIdlenessTest {
   @Rule

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -152,6 +152,7 @@
 import org.mockito.stubbing.Answer;
 
 /** Unit tests for {@link ManagedChannelImpl}. */
+@Deprecated // to be migrated to ManagedChannelImplTest2
 @RunWith(JUnit4.class)
 public class ManagedChannelImplTest {
   private static final int DEFAULT_PORT = 447;

File: core/src/test/java/io/grpc/internal/ServiceConfigInterceptorTest.java
Patch:
@@ -47,6 +47,7 @@
 /**
  * Unit tests for {@link ServiceConfigInterceptor}.
  */
+@Deprecated  // migrate to ServiceConfigInterceptor(Test)?2
 @RunWith(JUnit4.class)
 public class ServiceConfigInterceptorTest {
 

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java
Patch:
@@ -89,6 +89,7 @@ public void handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo n
   }
 
   @Override
+  @SuppressWarnings("deprecation")  // TODO(creamsoup) migrate to use parsed service config
   public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
     List<EquivalentAddressGroup> updatedServers = resolvedAddresses.getAddresses();
     Attributes attributes = resolvedAddresses.getAttributes();

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -1822,6 +1822,7 @@ public void shutdownWithoutSubchannel_pickFirst() throws Exception {
     subtestShutdownWithoutSubchannel("pick_first");
   }
 
+  @SuppressWarnings("deprecation")  // TODO(creamsoup) use parsed object
   private void subtestShutdownWithoutSubchannel(String childPolicy) throws Exception {
     String lbConfig = "{\"childPolicy\" : [ {\"" + childPolicy + "\" : {}} ]}";
     List<EquivalentAddressGroup> grpclbResolutionList = createResolvedServerAddresses(true);

File: services/src/test/java/io/grpc/services/HealthCheckingLoadBalancerFactoryTest.java
Patch:
@@ -1094,6 +1094,7 @@ public LoadBalancer newLoadBalancer(Helper helper) {
     assertThat(healthImpls[0].calls).hasSize(1);
   }
 
+  @SuppressWarnings("deprecation")  // TODO(creamsoup) migrate to parsed object
   private Attributes attrsWithHealthCheckService(@Nullable String serviceName) {
     HashMap<String, Object> serviceConfig = new HashMap<>();
     HashMap<String, Object> hcConfig = new HashMap<>();

File: xds/src/test/java/io/grpc/xds/CdsLoadBalancerTest.java
Patch:
@@ -75,6 +75,8 @@
  * Tests for {@link CdsLoadBalancer}.
  */
 @RunWith(JUnit4.class)
+// TODO(creamsoup) use parsed service config
+@SuppressWarnings("deprecation")
 public class CdsLoadBalancerTest {
 
   private final RefCountedXdsClientObjectPool xdsClientPool = new RefCountedXdsClientObjectPool(

File: xds/src/test/java/io/grpc/xds/FallbackLbTest.java
Patch:
@@ -53,6 +53,8 @@
  * Tests for {@link FallbackLb}.
  */
 @RunWith(JUnit4.class)
+// TODO(creamsoup) use parsed service config
+@SuppressWarnings("deprecation")
 public class FallbackLbTest {
 
   private final LoadBalancerProvider fallbackProvider1 = new LoadBalancerProvider() {

File: xds/src/test/java/io/grpc/xds/LookasideLbTest.java
Patch:
@@ -109,6 +109,8 @@
  * Tests for {@link LookasideLb}.
  */
 @RunWith(JUnit4.class)
+// TODO(creamsoup) use parsed service config
+@SuppressWarnings("deprecation")
 public class LookasideLbTest {
 
   private static final String SERVICE_AUTHORITY = "test authority";

File: xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java
Patch:
@@ -73,6 +73,8 @@
 
 /** Unit tests for {@link XdsNameResolver}. */
 @RunWith(JUnit4.class)
+// TODO(creamsoup) use parsed service config
+@SuppressWarnings("deprecation")
 public class XdsNameResolverTest {
   private static final String HOST_NAME = "foo.googleapis.com";
   private static final int PORT = 443;

File: xds/src/main/java/io/grpc/xds/XdsClientImpl.java
Patch:
@@ -152,6 +152,7 @@ final class XdsClientImpl extends XdsClient {
 
   @Override
   void shutdown() {
+    logger.log(Level.INFO, "Shutting down XdsClient");
     channel.shutdown();
     if (adsStream != null) {
       adsStream.close(Status.CANCELLED.withDescription("shutdown").asException());
@@ -884,11 +885,11 @@ public void run() {
     }
 
     private void handleStreamClosed(Status error) {
-      logger.log(Level.INFO, error.getDescription(), error.getCause());
       checkArgument(!error.isOk(), "unexpected OK status");
       if (closed) {
         return;
       }
+      logger.log(Level.FINE, error.getDescription(), error.getCause());
       closed = true;
       cleanUp();
       if (responseReceived || retryBackoffPolicy == null) {

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -92,7 +92,7 @@ private static final class ByteBufAllocatorHolder {
 
     static {
       if (Boolean.parseBoolean(
-              System.getProperty("io.grpc.netty.useCustomAllocator", "false"))) {
+              System.getProperty("io.grpc.netty.useCustomAllocator", "true"))) {
         int maxOrder;
         if (System.getProperty("io.netty.allocator.maxOrder") == null) {
           // See the implementation of PooledByteBufAllocator.  DEFAULT_MAX_ORDER in there is

File: xds/src/main/java/io/grpc/xds/XdsClientImpl.java
Patch:
@@ -832,6 +832,9 @@ public void onNext(final DiscoveryResponse response) {
       syncContext.execute(new Runnable() {
         @Override
         public void run() {
+          if (closed) {
+            return;
+          }
           responseReceived = true;
           String typeUrl = response.getTypeUrl();
           // Nonce in each response is echoed back in the following ACK/NACK request. It is

File: stub/src/main/java/io/grpc/stub/AbstractAsyncStub.java
Patch:
@@ -28,7 +28,7 @@
  * <p>DO NOT MOCK: Customizing options doesn't work properly in mocks. Use InProcessChannelBuilder
  * to create a real channel suitable for testing. It is also possible to mock Channel instead.
  *
- * @since 1.25.0
+ * @since 1.26.0
  */
 @ThreadSafe
 @CheckReturnValue
@@ -41,7 +41,7 @@ protected AbstractAsyncStub(Channel channel, CallOptions callOptions) {
   /**
    * Returns a new async stub with the given channel for the provided method configurations.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    * @param factory the factory to create an async stub
    * @param channel the channel that this stub will use to do communications
    */
@@ -53,7 +53,7 @@ public static <T extends AbstractStub<T>> T newStub(
   /**
    * Returns a new async stub with the given channel for the provided method configurations.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    * @param factory the factory to create an async stub
    * @param channel the channel that this stub will use to do communications
    * @param callOptions the runtime call options to be applied to every call on this stub

File: stub/src/main/java/io/grpc/stub/AbstractBlockingStub.java
Patch:
@@ -28,7 +28,7 @@
  * <p>DO NOT MOCK: Customizing options doesn't work properly in mocks. Use InProcessChannelBuilder
  * to create a real channel suitable for testing. It is also possible to mock Channel instead.
  *
- * @since 1.25.0
+ * @since 1.26.0
  */
 @ThreadSafe
 @CheckReturnValue
@@ -42,7 +42,7 @@ protected AbstractBlockingStub(Channel channel, CallOptions callOptions) {
   /**
    * Returns a new blocking stub with the given channel for the provided method configurations.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    * @param factory the factory to create a blocking stub
    * @param channel the channel that this stub will use to do communications
    */
@@ -54,7 +54,7 @@ public static <T extends AbstractStub<T>> T newStub(
   /**
    * Returns a new blocking stub with the given channel for the provided method configurations.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    * @param factory the factory to create a blocking stub
    * @param channel the channel that this stub will use to do communications
    * @param callOptions the runtime call options to be applied to every call on this stub

File: stub/src/main/java/io/grpc/stub/AbstractFutureStub.java
Patch:
@@ -28,7 +28,7 @@
  * <p>DO NOT MOCK: Customizing options doesn't work properly in mocks. Use InProcessChannelBuilder
  * to create a real channel suitable for testing. It is also possible to mock Channel instead.
  *
- * @since 1.25.0
+ * @since 1.26.0
  */
 @ThreadSafe
 @CheckReturnValue
@@ -41,7 +41,7 @@ protected AbstractFutureStub(Channel channel, CallOptions callOptions) {
   /**
    * Returns a new future stub with the given channel for the provided method configurations.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    * @param factory the factory to create a future stub
    * @param channel the channel that this stub will use to do communications
    */
@@ -53,7 +53,7 @@ public static <T extends AbstractStub<T>> T newStub(
   /**
    * Returns a new future stub with the given channel for the provided method configurations.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    * @param factory the factory to create a future stub
    * @param channel the channel that this stub will use to do communications
    * @param callOptions the runtime call options to be applied to every call on this stub

File: stub/src/main/java/io/grpc/stub/AbstractStub.java
Patch:
@@ -104,7 +104,7 @@ public final CallOptions getCallOptions() {
   /**
    * Returns a new stub with the given channel for the provided method configurations.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    * @param factory the factory to create a stub
    * @param channel the channel that this stub will use to do communications
    */
@@ -116,7 +116,7 @@ public static <T extends AbstractStub<T>> T newStub(
   /**
    * Returns a new stub with the given channel for the provided method configurations.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    * @param factory the factory to create a stub
    * @param channel the channel that this stub will use to do communications
    * @param callOptions the runtime call options to be applied to every call on this stub
@@ -253,7 +253,7 @@ public final S withMaxOutboundMessageSize(int maxSize) {
   /**
    * A factory class for stub.
    *
-   * @since 1.25.0
+   * @since 1.26.0
    */
   public interface StubFactory<T extends AbstractStub<T>> {
     T newStub(Channel channel, CallOptions callOptions);

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -91,7 +91,7 @@ class Utils {
         @Override
         public ByteBufAllocator create() {
           if (Boolean.parseBoolean(
-                  System.getProperty("io.grpc.netty.useCustomAllocator", "true"))) {
+                  System.getProperty("io.grpc.netty.useCustomAllocator", "false"))) {
             int maxOrder;
             if (System.getProperty("io.netty.allocator.maxOrder") == null) {
               // See the implementation of PooledByteBufAllocator.  DEFAULT_MAX_ORDER in there is

File: xds/src/main/java/io/grpc/xds/XdsClient.java
Patch:
@@ -480,7 +480,7 @@ public synchronized XdsClient returnObject(Object object) {
    * Factory for creating channels to xDS severs.
    */
   abstract static class XdsChannelFactory {
-    private static XdsChannelFactory DEFAULT_INSTANCE = new XdsChannelFactory() {
+    private static final XdsChannelFactory DEFAULT_INSTANCE = new XdsChannelFactory() {
 
       /**
        * Creates a channel to the first server in the given list.

File: xds/src/test/java/io/grpc/xds/XdsLoadBalancer2Test.java
Patch:
@@ -40,7 +40,7 @@
 import io.grpc.Status;
 import io.grpc.SynchronizationContext;
 import io.grpc.internal.FakeClock;
-import io.grpc.xds.LookasideLb.EdsUpdateCallback;
+import io.grpc.xds.LookasideLb.EndpointUpdateCallback;
 import io.grpc.xds.XdsLoadBalancer2.LookasideLbFactory;
 import java.util.ArrayList;
 import java.util.List;
@@ -75,7 +75,7 @@ public void uncaughtException(Thread t, Throwable e) {
   @Mock
   private Helper helper;
   private LoadBalancer xdsLoadBalancer;
-  private EdsUpdateCallback edsUpdateCallback;
+  private EndpointUpdateCallback edsUpdateCallback;
 
   private Helper lookasideLbHelper;
   private final List<LoadBalancer> lookasideLbs = new ArrayList<>();
@@ -90,7 +90,7 @@ public void setUp() {
     LookasideLbFactory lookasideLbFactory = new LookasideLbFactory() {
       @Override
       public LoadBalancer newLoadBalancer(
-          Helper helper, EdsUpdateCallback edsUpdateCallback) {
+          Helper helper, EndpointUpdateCallback edsUpdateCallback) {
         // just return a mock and record the input and output
         lookasideLbHelper = helper;
         XdsLoadBalancer2Test.this.edsUpdateCallback = edsUpdateCallback;

File: alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java
Patch:
@@ -297,7 +297,7 @@ synchronized Channel get() {
     /** Returns the cached channel to the channel pool. */
     synchronized void close() {
       if (channel != null) {
-        channelPool.returnObject(channel);
+        channel = channelPool.returnObject(channel);
       }
     }
   }

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -91,7 +91,7 @@ class Utils {
         @Override
         public ByteBufAllocator create() {
           if (Boolean.parseBoolean(
-                  System.getProperty("io.grpc.netty.useCustomAllocator", "false"))) {
+                  System.getProperty("io.grpc.netty.useCustomAllocator", "true"))) {
             int maxOrder;
             if (System.getProperty("io.netty.allocator.maxOrder") == null) {
               // See the implementation of PooledByteBufAllocator.  DEFAULT_MAX_ORDER in there is

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -131,7 +131,7 @@ public final class ServerImpl extends io.grpc.Server implements InternalInstrume
    * Construct a server.
    *
    * @param builder builder with configuration for server
-   * @param transportServer transport server that will create new incoming transports
+   * @param transportServers transport servers that will create new incoming transports
    * @param rootContext context that callbacks for new RPCs should be derived from
    */
   ServerImpl(

File: xds/src/test/java/io/grpc/xds/LookasideLbTest.java
Patch:
@@ -34,6 +34,7 @@
 import io.grpc.LoadBalancer.SubchannelPicker;
 import io.grpc.LoadBalancerRegistry;
 import io.grpc.internal.JsonParser;
+import io.grpc.xds.Bootstrapper.ChannelCreds;
 import io.grpc.xds.LookasideChannelLb.LookasideChannelCallback;
 import io.grpc.xds.LookasideLb.LookasideChannelLbFactory;
 import java.util.ArrayList;
@@ -57,7 +58,7 @@ public class LookasideLbTest {
         @Override
         public LoadBalancer newLoadBalancer(
             Helper helper, LookasideChannelCallback lookasideChannelCallback, String balancerName,
-            Node node) {
+            Node node, List<ChannelCreds> channelCredsList) {
           // just return a mock and record helper and balancer.
           helpers.add(helper);
           LoadBalancer balancer = mock(LoadBalancer.class);

File: xds/src/main/java/io/grpc/xds/Bootstrapper.java
Patch:
@@ -81,7 +81,7 @@ BootstrapInfo readBootstrap() throws Exception {
         }
       }
       if (failToBootstrapException != null) {
-        throw new RuntimeException(failToBootstrapException);
+        throw new IOException(failToBootstrapException);
       }
       return bootstrapInfo;
     }

File: alts/src/main/java/io/grpc/alts/ComputeEngineChannelBuilder.java
Patch:
@@ -39,7 +39,7 @@
  * using ALTS if applicable and using TLS as fallback.
  */
 public final class ComputeEngineChannelBuilder
-    extends ForwardingChannelBuilder<GoogleDefaultChannelBuilder> {
+    extends ForwardingChannelBuilder<ComputeEngineChannelBuilder> {
 
   private final NettyChannelBuilder delegate;
 

File: core/src/main/java/io/grpc/internal/PickFirstLoadBalancer.java
Patch:
@@ -25,15 +25,14 @@
 import io.grpc.ConnectivityStateInfo;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.LoadBalancer;
-import io.grpc.LoadBalancer.SubchannelStateListener;
 import io.grpc.Status;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
  * A {@link LoadBalancer} that provides no load-balancing over the addresses from the {@link
- * NameResolver}.  The channel's default behavior is used, which is walking down the address list
- * and sticking to the first that works.
+ * io.grpc.NameResolver}.  The channel's default behavior is used, which is walking down the address
+ * list and sticking to the first that works.
  */
 final class PickFirstLoadBalancer extends LoadBalancer {
   private final Helper helper;

File: api/src/main/java/io/grpc/CallCredentials.java
Patch:
@@ -82,7 +82,7 @@ public abstract static class MetadataApplier {
   }
 
   /**
-   * The request-related information passed to {@code CallCredentials2.applyRequestMetadata()}.
+   * The request-related information passed to {@code CallCredentials.applyRequestMetadata()}.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1914")
   public abstract static class RequestInfo {

File: stub/src/main/java/io/grpc/stub/AbstractStub.java
Patch:
@@ -63,7 +63,7 @@ protected AbstractStub(Channel channel) {
   }
 
   /**
-   * Constructor for use by subclasses, with the default {@code CallOptions}.
+   * Constructor for use by subclasses.
    *
    * @since 1.0.0
    * @param channel the channel that this stub will use to do communications

File: api/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -490,7 +490,6 @@ public Builder<ReqT, RespT> setRequestMarshaller(Marshaller<ReqT> requestMarshal
      * @param responseMarshaller the marshaller to use.
      * @since 1.1.0
      */
-    @SuppressWarnings("unchecked")
     public Builder<ReqT, RespT> setResponseMarshaller(Marshaller<RespT> responseMarshaller) {
       this.responseMarshaller = responseMarshaller;
       return this;

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -451,7 +451,6 @@ static ResolutionResults resolveAll(
    *
    * @throws IOException if one of the txt records contains improperly formatted JSON.
    */
-  @SuppressWarnings("unchecked")
   @VisibleForTesting
   static List<Map<String, ?>> parseTxtResults(List<String> txtRecords) throws IOException {
     List<Map<String, ?>> possibleServiceConfigChoices = new ArrayList<>();

File: core/src/main/java/io/grpc/internal/ServiceConfigUtil.java
Patch:
@@ -355,7 +355,6 @@ static Integer getMaxResponseMessageBytesFromMethodConfig(Map<String, ?> methodC
   /**
    * Extracts load balancing configs from a service config.
    */
-  @SuppressWarnings("unchecked")
   @VisibleForTesting
   public static List<Map<String, ?>> getLoadBalancingConfigsFromServiceConfig(
       Map<String, ?> serviceConfig) {
@@ -400,7 +399,6 @@ static Integer getMaxResponseMessageBytesFromMethodConfig(Map<String, ?> methodC
    * (map) with exactly one entry, where the key is the policy name and the value is a config object
    * for that policy.
    */
-  @SuppressWarnings("unchecked")
   public static LbConfig unwrapLoadBalancingConfig(Map<String, ?> lbConfig) {
     if (lbConfig.size() != 1) {
       throw new RuntimeException(
@@ -414,7 +412,6 @@ public static LbConfig unwrapLoadBalancingConfig(Map<String, ?> lbConfig) {
   /**
    * Given a JSON list of LoadBalancingConfigs, and convert it into a list of LbConfig.
    */
-  @SuppressWarnings("unchecked")
   public static List<LbConfig> unwrapLoadBalancingConfigList(List<Map<String, ?>> list) {
     ArrayList<LbConfig> result = new ArrayList<>();
     for (Map<String, ?> rawChildPolicy : list) {

File: core/src/test/java/io/grpc/internal/DnsNameResolverTest.java
Patch:
@@ -182,7 +182,8 @@ private DnsNameResolver newResolver(
   private DnsNameResolver newResolver(
       String name, Stopwatch stopwatch, boolean isAndroid, NameResolver.Args args) {
     DnsNameResolver dnsResolver =
-        new DnsNameResolver(null, name, args, fakeExecutorResource, stopwatch, isAndroid);
+        new DnsNameResolver(
+            null, name, args, fakeExecutorResource, stopwatch, isAndroid, /* enableSrv= */ false);
     // By default, using the mocked ResourceResolver to avoid I/O
     dnsResolver.setResourceResolver(new JndiResourceResolver(recordFetcher));
     return dnsResolver;

File: xds/src/main/java/io/grpc/xds/sds/trust/SdsTrustManagerFactory.java
Patch:
@@ -74,7 +74,7 @@ private void createSdsX509TrustManager(
       for (X509Certificate cert : certs) {
         // note: alias lookup uses toLowerCase(Locale.ENGLISH)
         // so our alias needs to be all lower-case and unique
-        ks.setCertificateEntry("alias" + Integer.toString(i), cert);
+        ks.setCertificateEntry("alias" + i, cert);
         i++;
       }
       tmf.init(ks);

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -273,7 +273,7 @@ PolicySelection decideLoadBalancerProvider(
             // We don't log the warning every time we have an update.
             roundRobinDueToGrpclbDepMissing = true;
             String errorMsg = "Found balancer addresses but grpclb runtime is missing."
-                + " Will use round_robin. Please include grpc-grpclb in your runtime depedencies.";
+                + " Will use round_robin. Please include grpc-grpclb in your runtime dependencies.";
             helper.getChannelLogger().log(ChannelLogLevel.ERROR, errorMsg);
             logger.warning(errorMsg);
           }

File: okhttp/src/test/java/io/grpc/okhttp/HeadersTest.java
Patch:
@@ -53,6 +53,7 @@ public void createRequestHeaders_sanitizes() {
         path,
         authority,
         userAgent,
+        false,
         false);
 
     // 7 reserved headers, 1 user header

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -22,8 +22,8 @@
 import static io.grpc.internal.ClientStreamListener.RpcProgress.REFUSED;
 import static io.grpc.internal.GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;
 import static io.grpc.okhttp.Headers.CONTENT_TYPE_HEADER;
+import static io.grpc.okhttp.Headers.HTTP_SCHEME_HEADER;
 import static io.grpc.okhttp.Headers.METHOD_HEADER;
-import static io.grpc.okhttp.Headers.SCHEME_HEADER;
 import static io.grpc.okhttp.Headers.TE_HEADER;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -650,7 +650,7 @@ public void addDefaultUserAgent() throws Exception {
     stream.start(listener);
     Header userAgentHeader = new Header(GrpcUtil.USER_AGENT_KEY.name(),
             GrpcUtil.getGrpcUserAgent("okhttp", null));
-    List<Header> expectedHeaders = Arrays.asList(SCHEME_HEADER, METHOD_HEADER,
+    List<Header> expectedHeaders = Arrays.asList(HTTP_SCHEME_HEADER, METHOD_HEADER,
             new Header(Header.TARGET_AUTHORITY, "notarealauthority:80"),
             new Header(Header.TARGET_PATH, "/" + method.getFullMethodName()),
             userAgentHeader, CONTENT_TYPE_HEADER, TE_HEADER);
@@ -667,7 +667,7 @@ public void overrideDefaultUserAgent() throws Exception {
     OkHttpClientStream stream =
         clientTransport.newStream(method, new Metadata(), CallOptions.DEFAULT);
     stream.start(listener);
-    List<Header> expectedHeaders = Arrays.asList(SCHEME_HEADER, METHOD_HEADER,
+    List<Header> expectedHeaders = Arrays.asList(HTTP_SCHEME_HEADER, METHOD_HEADER,
         new Header(Header.TARGET_AUTHORITY, "notarealauthority:80"),
         new Header(Header.TARGET_PATH, "/" + method.getFullMethodName()),
         new Header(GrpcUtil.USER_AGENT_KEY.name(),

File: xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java
Patch:
@@ -48,7 +48,7 @@
 
 /** Unit tests for {@link XdsNameResolver}. */
 @RunWith(JUnit4.class)
-public class XdsNamResolverTest {
+public class XdsNameResolverTest {
   private static final Node FAKE_BOOTSTRAP_NODE =
       Node.newBuilder().setBuildVersion("fakeVer").build();
 

File: xds/src/main/java/io/grpc/xds/XdsNameResolver.java
Patch:
@@ -83,7 +83,7 @@ final class XdsNameResolver extends NameResolver {
       serviceConfig = "{"
           + "\"loadBalancingConfig\": ["
           + "{\"xds_experimental\" : {"
-          + "\"balancer_name\" : \"" + serverUri + "\","
+          + "\"balancerName\" : \"" + serverUri + "\","
           + "\"childPolicy\" : [{\"round_robin\" : {}}]"
           + "}}"
           + "]}";

File: xds/src/test/java/io/grpc/xds/XdsNamResolverTest.java
Patch:
@@ -173,7 +173,7 @@ private static void assertBootstrapServiceConfig(ResolutionResult actualResult)
     Map<String, ?> rawConfigValues = (Map<String, ?>) xdsLbConfig.get("xds_experimental");
     assertThat(rawConfigValues)
         .containsExactly(
-            "balancer_name",
+            "balancerName",
             "fake_server_uri",
             "childPolicy",
             Collections.singletonList(

File: android-interop-testing/app/src/androidTest/java/io/grpc/android/integrationtest/InteropInstrumentationTest.java
Patch:
@@ -26,10 +26,8 @@
 import com.google.android.gms.common.GooglePlayServicesRepairableException;
 import com.google.android.gms.security.ProviderInstaller;
 import com.google.common.util.concurrent.SettableFuture;
-import io.grpc.ClientInterceptor;
 import io.grpc.android.integrationtest.InteropTask.Listener;
 import java.io.InputStream;
-import java.util.ArrayList;
 import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Rule;
@@ -127,7 +125,6 @@ public void onComplete(String result) {
     new InteropTask(
             listener,
             TesterOkHttpChannelBuilder.build(host, port, serverHostOverride, useTls, testCa),
-            new ArrayList<ClientInterceptor>(),
             testCase)
         .execute();
     String result = resultFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -79,7 +79,6 @@ public enum Transport {
   private EventLoopGroup groupToShutdown;
 
   @Setup
-  @SuppressWarnings("LiteralClassName") // Epoll is not available on windows
   public void setUp() throws Exception {
     AbstractServerImplBuilder<?> serverBuilder;
     AbstractManagedChannelImplBuilder<?> channelBuilder;

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncServer.java
Patch:
@@ -89,7 +89,6 @@ public void run() {
     server.awaitTermination();
   }
 
-  @SuppressWarnings("LiteralClassName") // Epoll is not available on windows
   static Server newServer(ServerConfiguration config) throws IOException {
     final EventLoopGroup boss;
     final EventLoopGroup worker;

File: core/src/main/java/io/grpc/internal/JndiResourceResolverFactory.java
Patch:
@@ -62,7 +62,6 @@ public JndiResourceResolverFactory() {}
    * may not actually be used to perform the query.  This is believed to be "okay."
    */
   @Nullable
-  @SuppressWarnings("LiteralClassName")
   private static Throwable initJndi() {
     try {
       Class.forName("javax.naming.directory.InitialDirContext");

File: cronet/src/test/java/io/grpc/cronet/CronetClientTransportTest.java
Patch:
@@ -78,7 +78,9 @@ public void setUp() {
             executor,
             5000,
             false,
-            TransportTracer.getDefaultFactory().create());
+            TransportTracer.getDefaultFactory().create(),
+            false,
+            false);
     Runnable callback = transport.start(clientTransportListener);
     assertTrue(callback != null);
     callback.run();

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -371,6 +371,8 @@ public void emptyUnary() throws Exception {
 
   /** Sends a cacheable unary rpc using GET. Requires that the server is behind a caching proxy. */
   public void cacheableUnary() {
+    // THIS TEST IS BROKEN. Enabling safe just on the MethodDescriptor does nothing by itself. This
+    // test would need to enable GET on the channel.
     // Set safe to true.
     MethodDescriptor<SimpleRequest, SimpleResponse> safeCacheableUnaryCallMethod =
         TestServiceGrpc.getCacheableUnaryCallMethod().toBuilder().setSafe(true).build();
@@ -405,6 +407,7 @@ public void cacheableUnary() {
 
     assertEquals(response1, response2);
     assertNotEquals(response1, response3);
+    // THIS TEST IS BROKEN. See comment at start of method.
   }
 
   @Test

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -193,7 +193,7 @@ public void setSoLingerChannelOption() throws IOException {
         newNegotiator(), DEFAULT_WINDOW_SIZE, DEFAULT_MAX_MESSAGE_SIZE,
         GrpcUtil.DEFAULT_MAX_HEADER_LIST_SIZE, KEEPALIVE_TIME_NANOS_DISABLED, 1L, false, authority,
         null /* user agent */, tooManyPingsRunnable, new TransportTracer(), Attributes.EMPTY,
-        new SocketPicker(), new FakeChannelLogger());
+        new SocketPicker(), new FakeChannelLogger(), false);
     transports.add(transport);
     callMeMaybe(transport.start(clientTransportListener));
 
@@ -439,7 +439,7 @@ public void failingToConstructChannelShouldFailGracefully() throws Exception {
         newNegotiator(), DEFAULT_WINDOW_SIZE, DEFAULT_MAX_MESSAGE_SIZE,
         GrpcUtil.DEFAULT_MAX_HEADER_LIST_SIZE, KEEPALIVE_TIME_NANOS_DISABLED, 1, false, authority,
         null, tooManyPingsRunnable, new TransportTracer(), Attributes.EMPTY, new SocketPicker(),
-        new FakeChannelLogger());
+        new FakeChannelLogger(), false);
     transports.add(transport);
 
     // Should not throw
@@ -709,7 +709,7 @@ private NettyClientTransport newTransport(ProtocolNegotiator negotiator, int max
         negotiator, DEFAULT_WINDOW_SIZE, maxMsgSize, maxHeaderListSize,
         keepAliveTimeNano, keepAliveTimeoutNano,
         false, authority, userAgent, tooManyPingsRunnable,
-        new TransportTracer(), eagAttributes, new SocketPicker(), new FakeChannelLogger());
+        new TransportTracer(), eagAttributes, new SocketPicker(), new FakeChannelLogger(), false);
     transports.add(transport);
     return transport;
   }

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -74,14 +74,15 @@ class OkHttpClientStream extends AbstractClientStream {
       String userAgent,
       StatsTraceContext statsTraceCtx,
       TransportTracer transportTracer,
-      CallOptions callOptions) {
+      CallOptions callOptions,
+      boolean useGetForSafeMethods) {
     super(
         new OkHttpWritableBufferAllocator(),
         statsTraceCtx,
         transportTracer,
         headers,
         callOptions,
-        method.isSafe());
+        useGetForSafeMethods && method.isSafe());
     this.statsTraceCtx = checkNotNull(statsTraceCtx, "statsTraceCtx");
     this.method = method;
     this.authority = authority;

File: xds/src/main/java/io/grpc/xds/XdsAttributes.java
Patch:
@@ -21,7 +21,7 @@
 import io.grpc.Grpc;
 
 /**
- * Special attributes that are only useful to gRPC in the XDS context
+ * Special attributes that are only useful to gRPC in the XDS context.
  */
 final class XdsAttributes {
   /**

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -719,7 +719,7 @@ private void startServer() throws IOException {
   private void startServer(int maxStreamsPerConnection, int maxHeaderListSize) throws IOException {
     server = new NettyServer(
         TestUtils.testServerAddress(new InetSocketAddress(0)),
-        NioServerSocketChannel.class,
+        new ReflectiveChannelFactory<>(NioServerSocketChannel.class),
         new HashMap<ChannelOption<?>, Object>(),
         new FixedObjectPool<>(group), new FixedObjectPool<>(group), negotiator,
         Collections.<ServerStreamTracer.Factory>emptyList(),

File: xds/src/main/java/io/grpc/xds/LocalityStore.java
Patch:
@@ -192,6 +192,7 @@ public void reset() {
       for (XdsLocality locality : edsResponsLocalityInfo.keySet()) {
         loadStatsStore.removeLocality(locality);
       }
+      edsResponsLocalityInfo = ImmutableMap.of();
     }
 
     // This is triggered by EDS response.

File: alts/src/test/java/io/grpc/alts/internal/AltsProtocolNegotiatorTest.java
Patch:
@@ -384,7 +384,7 @@ private void doHandshake() throws Exception {
 
   private CapturingGrpcHttp2ConnectionHandler capturingGrpcHandler() {
     // Netty Boilerplate.  We don't really need any of this, but there is a tight coupling
-    // between a Http2ConnectionHandler and its dependencies.
+    // between an Http2ConnectionHandler and its dependencies.
     Http2Connection connection = new DefaultHttp2Connection(true);
     Http2FrameWriter frameWriter = new DefaultHttp2FrameWriter();
     Http2FrameReader frameReader = new DefaultHttp2FrameReader(false);

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -1099,7 +1099,7 @@ public void run() {
     }
 
     /**
-     * Handle a HTTP2 DATA frame.
+     * Handle an HTTP2 DATA frame.
      */
     @Override
     public void data(boolean inFinished, int streamId, BufferedSource in, int length)

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpTlsUpgrader.java
Patch:
@@ -46,7 +46,7 @@ final class OkHttpTlsUpgrader {
       Collections.unmodifiableList(Arrays.asList(Protocol.GRPC_EXP, Protocol.HTTP_2));
 
   /**
-   * Upgrades given Socket to be a SSLSocket.
+   * Upgrades given Socket to be an SSLSocket.
    *
    * @throws IOException if an IO error was encountered during the upgrade handshake.
    * @throws RuntimeException if the upgrade negotiation failed.

File: auth/src/main/java/io/grpc/auth/GoogleAuthLibraryCallCredentials.java
Patch:
@@ -296,8 +296,8 @@ public JwtHelper(Class<?> rawServiceAccountClass, ClassLoader loader)
         methodPairs.add(new MethodPair(getter, setter));
       }
       {
-        Method getter = serviceAccountClass.getMethod("getPrivateKey");
-        Method setter = builderClass.getMethod("setPrivateKey", getter.getReturnType());
+        Method getter = serviceAccountClass.getMethod("getPrivateKeyId");
+        Method setter = builderClass.getMethod("setPrivateKeyId", getter.getReturnType());
         methodPairs.add(new MethodPair(getter, setter));
       }
     }

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -67,7 +67,7 @@ public enum Transport {
     INPROCESS, NETTY, NETTY_LOCAL, NETTY_EPOLL, OKHTTP
   }
 
-  @Param({"INPROCESS", "NETTY", "NETTY_LOCAL", "OKHTTP"})
+  @Param({"INPROCESS", "NETTY", "OKHTTP"})
   public Transport transport;
   @Param({"true", "false"})
   public boolean direct;
@@ -313,6 +313,8 @@ public void tearDown() throws InterruptedException {
     }
   }
 
+  // NOTE: Causes OOM with NETTY_LOCAL. Probably a flow control problem in NETTY_LOCAL, but we
+  // aren't too concerned.
   @Benchmark
   @BenchmarkMode(Mode.Throughput)
   @Threads(10)

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadWorker.java
Patch:
@@ -27,6 +27,7 @@
 import io.grpc.netty.NettyServerBuilder;
 import io.grpc.stub.StreamObserver;
 import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -50,6 +51,7 @@ public class LoadWorker {
             .build());
     this.driverServer = NettyServerBuilder.forPort(driverPort)
         .directExecutor()
+        .channelType(NioServerSocketChannel.class)
         .workerEventLoopGroup(singleThreadGroup)
         .bossEventLoopGroup(singleThreadGroup)
         .addService(new WorkerServiceImpl())

File: core/src/test/java/io/grpc/util/GracefulSwitchLoadBalancerTest.java
Patch:
@@ -72,8 +72,7 @@ public class GracefulSwitchLoadBalancerTest {
 
   @Before
   public void setUp() {
-    for (int i = 0; i < lbPolicies.length; i++) {
-      String lbPolicy = lbPolicies[i];
+    for (String lbPolicy : lbPolicies) {
       LoadBalancerProvider lbProvider = new FakeLoadBalancerProvider(lbPolicy);
       lbProviders.put(lbPolicy, lbProvider);
       lbRegistry.register(lbProvider);

File: alts/src/main/java/io/grpc/alts/HandshakerServiceChannel.java
Patch:
@@ -25,6 +25,7 @@
 import io.grpc.netty.NettyChannelBuilder;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioSocketChannel;
 import io.netty.util.concurrent.DefaultThreadFactory;
 import java.util.concurrent.TimeUnit;
 
@@ -56,6 +57,7 @@ public Channel create() {
       EventLoopGroup eventGroup =
           new NioEventLoopGroup(1, new DefaultThreadFactory("handshaker pool", true));
       ManagedChannel channel = NettyChannelBuilder.forTarget(target)
+          .channelType(NioSocketChannel.class)
           .directExecutor()
           .eventLoopGroup(eventGroup)
           .usePlaintext()

File: xds/src/main/java/io/grpc/xds/LocalityStore.java
Patch:
@@ -217,7 +217,8 @@ public void updateLocalityStore(Map<XdsLocality, LocalityInfo> localityInfoMap)
           LocalityLbInfo oldLocalityLbInfo = localityMap.get(newLocality);
           childHelper = oldLocalityLbInfo.childHelper;
           localityLbInfo =
-              new LocalityLbInfo(oldLocalityLbInfo.localityWeight,
+              new LocalityLbInfo(
+                  localityInfoMap.get(newLocality).localityWeight,
                   oldLocalityLbInfo.childBalancer,
                   childHelper);
         } else {

File: core/src/test/java/io/grpc/internal/InternalSubchannelTest.java
Patch:
@@ -839,6 +839,7 @@ public void shutdownWhenReady() throws Exception {
     internalSubchannel.shutdown(SHUTDOWN_REASON);
     verify(transportInfo.transport).shutdown(same(SHUTDOWN_REASON));
     assertExactCallbackInvokes("onStateChange:SHUTDOWN");
+    transportInfo.listener.transportShutdown(SHUTDOWN_REASON);
 
     transportInfo.listener.transportTerminated();
     assertExactCallbackInvokes("onTerminated");
@@ -1144,7 +1145,9 @@ public void channelzMembership() throws Exception {
     internalSubchannel.obtainActiveTransport();
 
     MockClientTransportInfo t0 = transports.poll();
+    t0.listener.transportReady();
     assertTrue(channelz.containsClientSocket(t0.transport.getLogId()));
+    t0.listener.transportShutdown(Status.RESOURCE_EXHAUSTED);
     t0.listener.transportTerminated();
     assertFalse(channelz.containsClientSocket(t0.transport.getLogId()));
   }

File: core/src/main/java/io/grpc/internal/ServiceConfigUtil.java
Patch:
@@ -199,7 +199,7 @@ private static Set<Status.Code> getStatusCodesFromList(List<?> statuses) {
         }
       } else {
         throw new VerifyException(
-            "Can not convert status code " + status + " to Status.Code, because it's type is "
+            "Can not convert status code " + status + " to Status.Code, because its type is "
                 + status.getClass());
       }
       codes.add(code);

File: xds/src/test/java/io/grpc/xds/LocalityStoreTest.java
Patch:
@@ -372,7 +372,7 @@ public void updateOobMetricsReportIntervalBeforeChildLbCreated() {
     // Simulate receiving update for backend metrics reporting interval.
     localityStore.updateOobMetricsReportInterval(1952);
 
-    assertThat(loadBalancers).hasSize(0);
+    assertThat(loadBalancers).isEmpty();
 
     // Simulate receiving two localities.
     LocalityInfo localityInfo1 =

File: core/src/main/java/io/grpc/internal/InsightBuilder.java
Patch:
@@ -25,7 +25,7 @@
  * information.
  */
 public final class InsightBuilder {
-  private final ArrayList<String> buffer = new ArrayList<String>();
+  private final ArrayList<String> buffer = new ArrayList<>();
 
   /**
    * Appends a piece of information which is a plain string.  The given object is immediately

File: xds/src/test/java/io/grpc/xds/LocalityStoreTest.java
Patch:
@@ -182,7 +182,7 @@ public LoadBalancer newLoadBalancer(Helper helper) {
   @Mock
   private OrcaPerRequestUtil orcaPerRequestUtil;
   private final FakeLoadStatsStore fakeLoadStatsStore = new FakeLoadStatsStore();
-  private StatsStore statsStore = mock(StatsStore.class, delegatesTo(fakeLoadStatsStore));
+  private final StatsStore statsStore = mock(StatsStore.class, delegatesTo(fakeLoadStatsStore));
 
   private LocalityStore localityStore;
 

File: core/src/main/java/io/grpc/internal/InternalSubchannel.java
Patch:
@@ -480,7 +480,6 @@ public void run() {
     return channelStatsFuture;
   }
 
-  @VisibleForTesting
   ConnectivityState getState() {
     return state.getState();
   }

File: alts/src/test/java/io/grpc/alts/internal/AltsProtocolNegotiatorTest.java
Patch:
@@ -36,7 +36,6 @@
 import io.grpc.internal.GrpcAttributes;
 import io.grpc.internal.ObjectPool;
 import io.grpc.netty.GrpcHttp2ConnectionHandler;
-import io.grpc.netty.InternalProtocolNegotiationEvent;
 import io.grpc.netty.NettyChannelBuilder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
@@ -150,7 +149,6 @@ public Object extractPeerObject() throws GeneralSecurityException {
         new AltsProtocolNegotiator.ServerAltsProtocolNegotiator(handshakerFactory, lazyFakeChannel)
             .newHandler(grpcHandler);
     channel = new EmbeddedChannel(uncaughtExceptionHandler, handler);
-    channel.pipeline().fireUserEventTriggered(InternalProtocolNegotiationEvent.getDefault());
   }
 
   @After

File: alts/src/test/java/io/grpc/alts/internal/AltsProtocolNegotiatorTest.java
Patch:
@@ -36,6 +36,7 @@
 import io.grpc.internal.GrpcAttributes;
 import io.grpc.internal.ObjectPool;
 import io.grpc.netty.GrpcHttp2ConnectionHandler;
+import io.grpc.netty.InternalProtocolNegotiationEvent;
 import io.grpc.netty.NettyChannelBuilder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
@@ -149,6 +150,7 @@ public Object extractPeerObject() throws GeneralSecurityException {
         new AltsProtocolNegotiator.ServerAltsProtocolNegotiator(handshakerFactory, lazyFakeChannel)
             .newHandler(grpcHandler);
     channel = new EmbeddedChannel(uncaughtExceptionHandler, handler);
+    channel.pipeline().fireUserEventTriggered(InternalProtocolNegotiationEvent.getDefault());
   }
 
   @After

File: alts/src/test/java/io/grpc/alts/internal/GoogleDefaultProtocolNegotiatorTest.java
Patch:
@@ -29,6 +29,7 @@
 import io.grpc.internal.ObjectPool;
 import io.grpc.netty.GrpcHttp2ConnectionHandler;
 import io.grpc.netty.GrpcSslContexts;
+import io.grpc.netty.InternalProtocolNegotiationEvent;
 import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
@@ -96,6 +97,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
     // Add the negotiator handler last, but to the front.  Putting this in ctor above would make it
     // throw early.
     chan.pipeline().addFirst(h);
+    chan.pipeline().fireUserEventTriggered(InternalProtocolNegotiationEvent.getDefault());
 
     // Check that the message complained about the ALTS code, rather than SSL.  ALTS throws on
     // being added, so it's hard to catch it at the right time to make this assertion.
@@ -111,6 +113,7 @@ public void tlsHandler() {
 
     ChannelHandler h = googleProtocolNegotiator.newHandler(mockHandler);
     EmbeddedChannel chan = new EmbeddedChannel(h);
+    chan.pipeline().fireUserEventTriggered(InternalProtocolNegotiationEvent.getDefault());
 
     assertThat(chan.pipeline().first().getClass().getSimpleName()).isEqualTo("SslHandler");
   }

File: netty/src/main/java/io/grpc/netty/WriteBufferingAndExceptionHandler.java
Patch:
@@ -56,6 +56,8 @@ final class WriteBufferingAndExceptionHandler extends ChannelDuplexHandler {
   public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
     ctx.pipeline().addBefore(ctx.name(), null, next);
     super.handlerAdded(ctx);
+    // kick off protocol negotiation.
+    ctx.pipeline().fireUserEventTriggered(ProtocolNegotiationEvent.DEFAULT);
   }
 
   @Override

File: netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java
Patch:
@@ -169,6 +169,7 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
       @Override
       public void channelActive(ChannelHandlerContext ctx) throws Exception {
         ctx.pipeline().addLast(handler);
+        ctx.pipeline().fireUserEventTriggered(ProtocolNegotiationEvent.DEFAULT);
         // do not propagate channelActive().
       }
     };
@@ -226,6 +227,7 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
     assertEquals(1, latch.getCount());
 
     chan.connect(addr).sync();
+    chan.pipeline().fireUserEventTriggered(ProtocolNegotiationEvent.DEFAULT);
     assertTrue(latch.await(TIMEOUT_SECONDS, TimeUnit.SECONDS));
     assertNull(chan.pipeline().context(WaitUntilActiveHandler.class));
   }
@@ -571,6 +573,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
         .connect(addr)
         .sync()
         .channel();
+    c.pipeline().fireUserEventTriggered(ProtocolNegotiationEvent.DEFAULT);
     SocketAddress localAddr = c.localAddress();
     ProtocolNegotiationEvent expectedEvent = ProtocolNegotiationEvent.DEFAULT
         .withAttributes(

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -248,7 +248,7 @@ public void runInContext() {
     boolean deadlineExceeded = effectiveDeadline != null && effectiveDeadline.isExpired();
     if (!deadlineExceeded) {
       logIfContextNarrowedTimeout(
-          effectiveDeadline, callOptions.getDeadline(), context.getDeadline());
+          effectiveDeadline, context.getDeadline(), callOptions.getDeadline());
       if (retryEnabled) {
         stream = clientTransportProvider.newRetriableStream(method, callOptions, headers, context);
       } else {

File: xds/src/main/java/io/grpc/xds/XdsLoadBalancerProvider.java
Patch:
@@ -25,6 +25,7 @@
 import io.grpc.LoadBalancerRegistry;
 import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.Status;
+import io.grpc.internal.ExponentialBackoffPolicy;
 import io.grpc.internal.ServiceConfigUtil;
 import io.grpc.internal.ServiceConfigUtil.LbConfig;
 import io.grpc.xds.XdsLoadBalancer.XdsConfig;
@@ -62,7 +63,8 @@ public String getPolicyName() {
 
   @Override
   public LoadBalancer newLoadBalancer(Helper helper) {
-    return new XdsLoadBalancer(helper, LoadBalancerRegistry.getDefaultRegistry());
+    return new XdsLoadBalancer(helper, LoadBalancerRegistry.getDefaultRegistry(),
+        new ExponentialBackoffPolicy.Provider());
   }
 
   @Override

File: netty/src/main/java/io/grpc/netty/NettyServerTransport.java
Patch:
@@ -184,7 +184,7 @@ Channel channel() {
   static Level getLogLevel(Throwable t) {
     if (t instanceof IOException && t.getMessage() != null) {
       for (String msg : QUIET_ERRORS) {
-        if (t.getMessage().equals(msg)) {
+        if (t.getMessage().contains(msg)) {
           return Level.FINE;
         }
       }

File: xds/src/test/java/io/grpc/xds/XdsLoadReportClientImplTest.java
Patch:
@@ -374,6 +374,7 @@ public void reportRecordedLoadData() {
         .addDroppedRequests(DroppedRequests.newBuilder()
             .setCategory("throttle")
             .setDroppedCount(numThrottleDrops))
+        .setTotalDroppedRequests(numLbDrops + numThrottleDrops)
         .build();
     ClusterStats expectedStats2 = ClusterStats.newBuilder()
         .setClusterName(SERVICE_AUTHORITY)
@@ -387,6 +388,7 @@ public void reportRecordedLoadData() {
         .addDroppedRequests(DroppedRequests.newBuilder()
             .setCategory("throttle")
             .setDroppedCount(0))
+        .setTotalDroppedRequests(0)
         .build();
     when(statsStore.generateLoadReport())
         .thenReturn(expectedStats1, expectedStats2);

File: xds/src/test/java/io/grpc/xds/XdsLoadStatsStoreTest.java
Patch:
@@ -135,6 +135,7 @@ private static ClusterStats buildClusterStats(
   private static void assertClusterStatsEqual(ClusterStats expected, ClusterStats actual) {
     assertThat(actual.getClusterName()).isEqualTo(expected.getClusterName());
     assertThat(actual.getLoadReportInterval()).isEqualTo(expected.getLoadReportInterval());
+    assertThat(actual.getTotalDroppedRequests()).isEqualTo(expected.getTotalDroppedRequests());
     assertThat(actual.getDroppedRequestsCount()).isEqualTo(expected.getDroppedRequestsCount());
     assertThat(new HashSet<>(actual.getDroppedRequestsList()))
         .isEqualTo(new HashSet<>(expected.getDroppedRequestsList()));

File: alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java
Patch:
@@ -136,7 +136,7 @@ public byte[] getKey() {
       throw new IllegalStateException("Could not get enough key data from the handshake.");
     }
     byte[] key = new byte[KEY_LENGTH];
-    result.getKeyData().copyTo(key, 0);
+    result.getKeyData().substring(0, KEY_LENGTH).copyTo(key, 0);
     return key;
   }
 

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -127,6 +127,8 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.DisableOnDebug;
+import org.junit.rules.TestRule;
 import org.junit.rules.Timeout;
 
 /**
@@ -137,7 +139,7 @@
 public abstract class AbstractInteropTest {
   private static Logger logger = Logger.getLogger(AbstractInteropTest.class.getName());
 
-  @Rule public final Timeout globalTimeout = Timeout.seconds(30);
+  @Rule public final TestRule globalTimeout = new DisableOnDebug(Timeout.seconds(30));
 
   /** Must be at least {@link #unaryPayloadLength()}, plus some to account for encoding overhead. */
   public static final int MAX_MESSAGE_SIZE = 16 * 1024 * 1024;

File: alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java
Patch:
@@ -136,7 +136,7 @@ public byte[] getKey() {
       throw new IllegalStateException("Could not get enough key data from the handshake.");
     }
     byte[] key = new byte[KEY_LENGTH];
-    result.getKeyData().copyTo(key, 0, 0, KEY_LENGTH);
+    result.getKeyData().copyTo(key, 0);
     return key;
   }
 

File: context/src/test/java/io/grpc/ContextTest.java
Patch:
@@ -967,7 +967,7 @@ public void close() throws SecurityException {
         assertNull(logRef.get());
         ctx = ctx.fork();
       }
-      ctx = ctx.fork();
+      ctx.fork();
       assertNotNull(logRef.get());
       assertNotNull(logRef.get().getThrown());
       assertEquals(Level.SEVERE, logRef.get().getLevel());

File: core/src/main/java/io/grpc/internal/InternalSubchannel.java
Patch:
@@ -55,7 +55,6 @@
 import java.util.List;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
-import java.util.logging.Logger;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.ThreadSafe;
 
@@ -64,7 +63,6 @@
  */
 @ThreadSafe
 final class InternalSubchannel implements InternalInstrumented<ChannelStats>, TransportProvider {
-  private static final Logger log = Logger.getLogger(InternalSubchannel.class.getName());
 
   private final InternalLogId logId;
   private final String authority;

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -254,6 +254,7 @@ public void uncaughtException(Thread t, Throwable e) {
   // Must be mutated and read from constructor or syncContext
   // See service config error handling spec for reference.
   // TODO(notcarl): check this value when error in service config resolution
+  @SuppressWarnings("UnusedVariable")
   private boolean waitingForServiceConfig = true;
   private final boolean lookUpServiceConfig;
 

File: core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java
Patch:
@@ -45,6 +45,7 @@ final class ManagedChannelServiceConfig {
   private final Map<String, MethodInfo> serviceMap;
   // TODO(notcarl/zdapeng): use retryThrottling here
   @Nullable
+  @SuppressWarnings("unused")
   private final Throttle retryThrottling;
   @Nullable
   private final Object loadBalancingConfig;

File: gae-interop-testing/gae-jdk8/src/main/java/io/grpc/testing/integration/NettyClientInteropServlet.java
Patch:
@@ -80,7 +80,7 @@ public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOExc
     LogEntryRecorder handler = new LogEntryRecorder();
     Logger.getLogger("").addHandler(handler);
     try {
-      doGetHelper(req, resp);
+      doGetHelper(resp);
     } finally {
       Logger.getLogger("").removeHandler(handler);
     }
@@ -89,7 +89,7 @@ public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOExc
         .append(handler.getLogOutput());
   }
 
-  private void doGetHelper(HttpServletRequest req, HttpServletResponse resp) throws IOException {
+  private void doGetHelper(HttpServletResponse resp) throws IOException {
     resp.setContentType("text/plain");
     PrintWriter writer = resp.getWriter();
     writer.println("Test invoked at: ");

File: netty/src/main/java/io/grpc/netty/JettyTlsUtil.java
Patch:
@@ -72,6 +72,7 @@ static synchronized boolean isJettyAlpnConfigured() {
   static synchronized Throwable getJettyAlpnUnavailabilityCause() {
     // This case should be unlikely
     if (jettyAlpnUnavailabilityCause == null) {
+      @SuppressWarnings("UnusedVariable")
       boolean discard = isJettyAlpnConfigured();
     }
     return jettyAlpnUnavailabilityCause;
@@ -93,6 +94,7 @@ static synchronized boolean isJettyNpnConfigured() {
   static synchronized Throwable getJettyNpnUnavailabilityCause() {
     // This case should be unlikely
     if (jettyNpnUnavailabilityCause == null) {
+      @SuppressWarnings("UnusedVariable")
       boolean discard = isJettyNpnConfigured();
     }
     return jettyNpnUnavailabilityCause;

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/CipherSuite.java
Patch:
@@ -366,6 +366,7 @@ public enum CipherSuite {
    * @param sinceJavaVersion the first major Java release supporting this cipher suite.
    * @param sinceAndroidVersion the first Android SDK version supporting this cipher suite.
    */
+  @SuppressWarnings("UnusedVariable")
   private CipherSuite(
       String javaName, int value, int rfc, int sinceJavaVersion, int sinceAndroidVersion) {
     this.javaName = javaName;

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/OkHostnameVerifier.java
Patch:
@@ -120,6 +120,7 @@ private boolean verifyHostName(String hostName, X509Certificate certificate) {
     return false;
   }
 
+  @SuppressWarnings("MixedMutabilityReturnType")
   public static List<String> allSubjectAltNames(X509Certificate certificate) {
     List<String> altIpaNames = getSubjectAltNames(certificate, ALT_IPA_NAME);
     List<String> altDnsNames = getSubjectAltNames(certificate, ALT_DNS_NAME);
@@ -129,6 +130,7 @@ public static List<String> allSubjectAltNames(X509Certificate certificate) {
     return result;
   }
 
+  @SuppressWarnings("MixedMutabilityReturnType")
   private static List<String> getSubjectAltNames(X509Certificate certificate, int type) {
     List<String> result = new ArrayList<>();
     try {

File: api/src/main/java/io/grpc/Attributes.java
Patch:
@@ -252,7 +252,7 @@ public <T> Builder discard(Key<T> key) {
       return this;
     }
 
-    public <T> Builder setAll(Attributes other) {
+    public Builder setAll(Attributes other) {
       data(other.data.size()).putAll(other.data);
       return this;
     }

File: api/src/main/java/io/grpc/NameResolverRegistry.java
Patch:
@@ -86,8 +86,8 @@ private synchronized void refreshProviders() {
     // sort() must be stable, as we prefer first-registered providers
     Collections.sort(providers, Collections.reverseOrder(new Comparator<NameResolverProvider>() {
       @Override
-      public int compare(NameResolverProvider p1, NameResolverProvider p2) {
-        return p1.priority() - p2.priority();
+      public int compare(NameResolverProvider o1, NameResolverProvider o2) {
+        return o1.priority() - o2.priority();
       }
     }));
     effectiveProviders = Collections.unmodifiableList(providers);

File: protobuf-lite/src/main/java/io/grpc/protobuf/lite/ProtoLiteUtils.java
Patch:
@@ -97,8 +97,8 @@ public static <T extends MessageLite> Metadata.BinaryMarshaller<T> metadataMarsh
   /** Copies the data from input stream to output stream. */
   static long copy(InputStream from, OutputStream to) throws IOException {
     // Copied from guava com.google.common.io.ByteStreams because its API is unstable (beta)
-    checkNotNull(from);
-    checkNotNull(to);
+    checkNotNull(from, "inputStream cannot be null!");
+    checkNotNull(to, "outputStream cannot be null!");
     byte[] buf = new byte[BUF_SIZE];
     long total = 0;
     while (true) {
@@ -162,7 +162,7 @@ public T parse(InputStream stream) {
             @SuppressWarnings("unchecked")
             T message = (T) ((ProtoInputStream) stream).message();
             return message;
-          } catch (IllegalStateException ex) {
+          } catch (IllegalStateException ignored) {
             // Stream must have been read from, which is a strange state. Since the point of this
             // optimization is to be transparent, instead of throwing an error we'll continue,
             // even though it seems likely there's a bug.

File: api/src/test/java/io/grpc/NameResolverTest.java
Patch:
@@ -17,15 +17,14 @@
 package io.grpc;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.same;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.NameResolver.ServiceConfigParser;
-import io.grpc.SynchronizationContext;
 import java.lang.Thread.UncaughtExceptionHandler;
 import java.net.URI;
 import java.util.Collections;

File: cronet/src/test/java/io/grpc/cronet/CronetClientTransportTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: grpclb/src/test/java/io/grpc/grpclb/CachedSubchannelPoolTest.java
Patch:
@@ -19,8 +19,8 @@
 import static com.google.common.truth.Truth.assertThat;
 import static io.grpc.grpclb.CachedSubchannelPool.SHUTDOWN_TIMEOUT_MS;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.atMost;
 import static org.mockito.Mockito.doAnswer;

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -38,8 +38,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mock;
-import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
 
 /**
@@ -62,7 +62,8 @@ public class StubConfigTest {
     ClientCall<SimpleRequest, SimpleResponse> call =
         new NoopClientCall<>();
     when(channel.newCall(
-        Mockito.<MethodDescriptor<SimpleRequest, SimpleResponse>>any(), any(CallOptions.class)))
+            ArgumentMatchers.<MethodDescriptor<SimpleRequest, SimpleResponse>>any(),
+            any(CallOptions.class)))
         .thenReturn(call);
   }
 

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpProtocolNegotiatorTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import org.mockito.Mockito;
+import org.mockito.ArgumentMatchers;
 
 /**
  * Tests for {@link OkHttpProtocolNegotiator}.
@@ -135,7 +135,7 @@ public void negotiate_noSelectedProtocol() throws Exception {
 
   @Test
   public void negotiate_success() throws Exception {
-    when(platform.getSelectedProtocol(Mockito.<SSLSocket>any())).thenReturn("h2");
+    when(platform.getSelectedProtocol(ArgumentMatchers.<SSLSocket>any())).thenReturn("h2");
     OkHttpProtocolNegotiator negotiator = new OkHttpProtocolNegotiator(platform);
 
     String actual = negotiator.negotiate(sock, "hostname", ImmutableList.of(Protocol.HTTP_2));
@@ -153,7 +153,7 @@ public void negotiate_preferGrpcExp() throws Exception {
     // The main usefulness of the test is for future changes to
     // OkHttpProtocolNegotiator, where we can catch any change that would affect
     // grpc-exp preference.
-    when(platform.getSelectedProtocol(Mockito.<SSLSocket>any())).thenReturn("grpc-exp");
+    when(platform.getSelectedProtocol(ArgumentMatchers.<SSLSocket>any())).thenReturn("grpc-exp");
     OkHttpProtocolNegotiator negotiator = new OkHttpProtocolNegotiator(platform);
 
     String actual =

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1450,7 +1450,7 @@ public void censusContextsPropagated() {
             Context.ROOT,
             tagger
                 .emptyBuilder()
-                .putPropagating(StatsTestUtils.EXTRA_TAG, TagValue.create("extra value"))
+                .putLocal(StatsTestUtils.EXTRA_TAG, TagValue.create("extra value"))
                 .build());
     ctx = ContextUtils.withValue(ctx, clientParentSpan);
     Context origCtx = ctx.attach();

File: testing/src/main/java/io/grpc/internal/testing/StatsTestUtils.java
Patch:
@@ -204,7 +204,7 @@ public TagContext fromByteArray(byte[] bytes) throws TagContextDeserializationEx
       String serializedString = new String(bytes, UTF_8);
       if (serializedString.startsWith(EXTRA_TAG_HEADER_VALUE_PREFIX)) {
         return tagger.emptyBuilder()
-            .putPropagating(EXTRA_TAG,
+            .putLocal(EXTRA_TAG,
                 TagValue.create(serializedString.substring(EXTRA_TAG_HEADER_VALUE_PREFIX.length())))
             .build();
       } else {

File: alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java
Patch:
@@ -85,7 +85,6 @@ public ProtocolNegotiator buildProtocolNegotiator() {
     }
   }
 
-  @VisibleForTesting
   private static final class ClientAltsProtocolNegotiator implements ProtocolNegotiator {
     private final TsiHandshakerFactory handshakerFactory;
     private final LazyChannel lazyHandshakerChannel;

File: api/src/test/java/io/grpc/LoadBalancerTest.java
Patch:
@@ -124,7 +124,6 @@ public void pickResult_equals() {
 
   @Deprecated
   @Test
-  @SuppressWarnings("deprecation")
   public void helper_createSubchannel_old_delegates() {
     class OverrideCreateSubchannel extends NoopHelper {
       boolean ran;

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1053,7 +1053,6 @@ private class LbHelperImpl extends LoadBalancer.Helper {
 
     @Deprecated
     @Override
-    @SuppressWarnings("deprecation")
     public AbstractSubchannel createSubchannel(
         List<EquivalentAddressGroup> addressGroups, Attributes attrs) {
       logWarningIfNotInSyncContext("createSubchannel()");

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -341,7 +341,6 @@ public void cleanUp() {
 
   @Deprecated
   @Test
-  @SuppressWarnings("deprecation")
   public void createSubchannel_old_outsideSynchronizationContextShouldLogWarning() {
     createChannel();
     final AtomicReference<LogRecord> logRef = new AtomicReference<>();

File: xds/src/main/java/io/grpc/xds/XdsComms.java
Patch:
@@ -364,7 +364,7 @@ private static int rateInMillion(FractionalPercent fractionalPercent) {
       case MILLION:
         break;
       default:
-        throw new IllegalArgumentException("unknow denominator type of " + fractionalPercent);
+        throw new IllegalArgumentException("unknown denominator type of " + fractionalPercent);
     }
 
     if (numerator > 1000_000) {

File: xds/src/main/java/io/grpc/xds/XdsLoadBalancer.java
Patch:
@@ -191,7 +191,7 @@ public void handleNameResolutionError(Status error) {
   }
 
   /**
-   * This is only for the subchannel that is created by the the child/fallback balancer using the
+   * This is only for the subchannel that is created by the child/fallback balancer using the
    * old API {@link LoadBalancer.Helper#createSubchannel(EquivalentAddressGroup, Attributes)} or
    * {@link LoadBalancer.Helper#createSubchannel(List, Attributes)}. Otherwise, it either won't be
    * called or won't have any effect.

File: xds/src/main/java/io/grpc/xds/XdsLbState.java
Patch:
@@ -109,9 +109,7 @@ final void handleResolvedAddressGroups(
   }
 
   final void handleNameResolutionError(Status error) {
-    if (!localityStore.hasNonDropBackends()) {
-      // TODO: maybe update picker with transient failure
-    }
+    // NO-OP?
   }
 
   final void handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo newState) {

File: xds/src/test/java/io/grpc/xds/InterLocalityPickerTest.java
Patch:
@@ -24,7 +24,6 @@
 import io.grpc.LoadBalancer.Subchannel;
 import io.grpc.LoadBalancer.SubchannelPicker;
 import io.grpc.Status;
-import io.grpc.xds.InterLocalityPicker.ThreadSafeRandom;
 import io.grpc.xds.InterLocalityPicker.WeightedChildPicker;
 import java.util.ArrayList;
 import java.util.Arrays;

File: api/src/test/java/io/grpc/LoadBalancerTest.java
Patch:
@@ -24,7 +24,6 @@
 import io.grpc.LoadBalancer.PickResult;
 import io.grpc.LoadBalancer.ResolvedAddresses;
 import io.grpc.LoadBalancer.Subchannel;
-import io.grpc.LoadBalancer.SubchannelStateListener;
 import java.net.SocketAddress;
 import java.util.Arrays;
 import java.util.List;
@@ -38,8 +37,6 @@
 public class LoadBalancerTest {
   private final Subchannel subchannel = mock(Subchannel.class);
   private final Subchannel subchannel2 = mock(Subchannel.class);
-  private final SubchannelStateListener subchannelStateListener =
-      mock(SubchannelStateListener.class);
   private final ClientStreamTracer.Factory tracerFactory = mock(ClientStreamTracer.Factory.class);
   private final Status status = Status.UNAVAILABLE.withDescription("for test");
   private final Status status2 = Status.UNAVAILABLE.withDescription("for test 2");
@@ -127,6 +124,7 @@ public void pickResult_equals() {
 
   @Deprecated
   @Test
+  @SuppressWarnings("deprecation")
   public void helper_createSubchannel_old_delegates() {
     class OverrideCreateSubchannel extends NoopHelper {
       boolean ran;

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1053,6 +1053,7 @@ private class LbHelperImpl extends LoadBalancer.Helper {
 
     @Deprecated
     @Override
+    @SuppressWarnings("deprecation")
     public AbstractSubchannel createSubchannel(
         List<EquivalentAddressGroup> addressGroups, Attributes attrs) {
       logWarningIfNotInSyncContext("createSubchannel()");

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -340,6 +340,7 @@ public void cleanUp() {
 
   @Deprecated
   @Test
+  @SuppressWarnings("deprecation")
   public void createSubchannel_old_outsideSynchronizationContextShouldLogWarning() {
     createChannel();
     final AtomicReference<LogRecord> logRef = new AtomicReference<>();
@@ -373,6 +374,7 @@ public void close() throws SecurityException {
 
   @Deprecated
   @Test
+  @SuppressWarnings("deprecation")
   public void createSubchannel_old_propagateSubchannelStatesToOldApi() {
     createChannel();
     final AtomicReference<Subchannel> subchannelCapture = new AtomicReference<>();

File: alts/src/test/java/io/grpc/alts/ComputeEngineChannelBuilderTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import io.grpc.alts.internal.GoogleDefaultProtocolNegotiator;
 import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -33,6 +32,7 @@ public void buildsNettyChannel() throws Exception {
     builder.build();
 
     ProtocolNegotiator protocolNegotiator = builder.getProtocolNegotiatorForTest();
-    assertThat(protocolNegotiator).isInstanceOf(GoogleDefaultProtocolNegotiator.class);
+    assertThat(protocolNegotiator.getClass().getSimpleName())
+        .isEqualTo("GoogleDefaultProtocolNegotiator");
   }
 }

File: alts/src/test/java/io/grpc/alts/GoogleDefaultChannelBuilderTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import io.grpc.alts.internal.GoogleDefaultProtocolNegotiator;
 import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -33,6 +32,7 @@ public void buildsNettyChannel() throws Exception {
     builder.build();
 
     ProtocolNegotiator protocolNegotiator = builder.getProtocolNegotiatorForTest();
-    assertThat(protocolNegotiator).isInstanceOf(GoogleDefaultProtocolNegotiator.class);
+    assertThat(protocolNegotiator.getClass().getSimpleName())
+        .isEqualTo("GoogleDefaultProtocolNegotiator");
   }
 }

File: xds/src/main/java/io/grpc/xds/XdsLoadBalancerProvider.java
Patch:
@@ -39,7 +39,6 @@
  */
 @Internal
 public final class XdsLoadBalancerProvider extends LoadBalancerProvider {
-  private final LoadBalancerRegistry registry = LoadBalancerRegistry.getDefaultRegistry();
 
   private static final LbConfig DEFAULT_FALLBACK_POLICY =
       new LbConfig("round_robin", ImmutableMap.<String, Void>of());
@@ -61,13 +60,14 @@ public String getPolicyName() {
 
   @Override
   public LoadBalancer newLoadBalancer(Helper helper) {
-    return new XdsLoadBalancer(helper, registry);
+    return new XdsLoadBalancer(helper, LoadBalancerRegistry.getDefaultRegistry());
   }
 
   @Override
   public ConfigOrError parseLoadBalancingPolicyConfig(
       Map<String, ?> rawLoadBalancingPolicyConfig) {
-    return parseLoadBalancingConfigPolicy(rawLoadBalancingPolicyConfig, registry);
+    return parseLoadBalancingConfigPolicy(
+        rawLoadBalancingPolicyConfig, LoadBalancerRegistry.getDefaultRegistry());
   }
 
   static ConfigOrError parseLoadBalancingConfigPolicy(

File: api/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -281,9 +281,7 @@ public T enableFullStreamDecompression() {
    *
    * <p>In idle mode the channel shuts down all connections, the NameResolver and the
    * LoadBalancer. A new RPC would take the channel out of idle mode. A channel starts in idle mode.
-   *
-   * <p>By default the channel will never go to idle mode after it leaves the initial idle
-   * mode.
+   * Defaults to 30 minutes.
    *
    * <p>This is an advisory option. Do not rely on any specific behavior related to this option.
    *

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -512,6 +512,8 @@ public void handleProtocolNegotiationCompleted(
       Attributes attrs, InternalChannelz.Security securityInfo) {
     negotiationAttributes = attrs;
     this.securityInfo = securityInfo;
+    super.handleProtocolNegotiationCompleted(attrs, securityInfo);
+    NettyClientHandler.writeBufferingAndRemove(ctx().channel());
   }
 
   InternalChannelz.Security getSecurityInfo() {

File: examples/example-tls/src/main/java/io/grpc/examples/helloworldtls/HelloWorldClientTls.java
Patch:
@@ -22,7 +22,6 @@
 import io.grpc.examples.helloworld.HelloReply;
 import io.grpc.examples.helloworld.HelloRequest;
 import io.grpc.netty.GrpcSslContexts;
-import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.ssl.SslContextBuilder;
@@ -63,7 +62,6 @@ public HelloWorldClientTls(String host,
                                SslContext sslContext) throws SSLException {
 
         this(NettyChannelBuilder.forAddress(host, port)
-                .negotiationType(NegotiationType.TLS)
                 .sslContext(sslContext)
                 .build());
     }

File: xds/src/main/java/io/grpc/xds/LocalityStore.java
Patch:
@@ -73,9 +73,9 @@ final class LocalityStoreImpl implements LocalityStore {
 
     private final Helper helper;
     private final PickerFactory pickerFactory;
+    private final LoadBalancerProvider loadBalancerProvider;
 
     private Map<Locality, LocalityLbInfo> localityMap = new HashMap<>();
-    private LoadBalancerProvider loadBalancerProvider;
     private ConnectivityState overallState;
 
     LocalityStoreImpl(Helper helper, LoadBalancerRegistry lbRegistry) {

File: xds/src/test/java/io/grpc/xds/XdsLoadStatsStoreTest.java
Patch:
@@ -129,7 +129,7 @@ private static void assertClusterStatsEqual(ClusterStats expected, ClusterStats
 
   private static void assertUpstreamLocalityStatsListsEqual(List<UpstreamLocalityStats> expected,
       List<UpstreamLocalityStats> actual) {
-    assertThat(actual.size()).isEqualTo(expected.size());
+    assertThat(actual).hasSize(expected.size());
     Map<Locality, UpstreamLocalityStats> expectedLocalityStats = new HashMap<>();
     for (UpstreamLocalityStats stats : expected) {
       expectedLocalityStats.put(stats.getLocality(), stats);

File: api/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -927,7 +927,6 @@ public NameResolverRegistry getNameResolverRegistry() {
    *
    * @since 1.2.0
    */
-  @ThreadSafe
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1771")
   public abstract static class Subchannel {
     /**
@@ -945,8 +944,7 @@ public abstract static class Subchannel {
     /**
      * Asks the Subchannel to create a connection (aka transport), if there isn't an active one.
      *
-     * <p>It should be called from the Synchronization Context.  Currently will log a warning if
-     * violated.  It will become an exception eventually.  See <a
+     * <p>It should be called from the Synchronization Context.  See <a
      * href="https://github.com/grpc/grpc-java/issues/5015">#5015</a> for the background.
      *
      * @since 1.2.0

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1522,7 +1522,6 @@ public void run() {
 
     @Override
     public void requestConnection() {
-      logWarningIfNotInSyncContext("Subchannel.requestConnection()");
       subchannel.obtainActiveTransport();
     }
 

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -71,7 +71,7 @@ public void start() throws IOException {
     Runtime.getRuntime().addShutdownHook(new Thread() {
       @Override
       public void run() {
-        // Use stderr here since the logger may has been reset by its JVM shutdown hook.
+        // Use stderr here since the logger may have been reset by its JVM shutdown hook.
         System.err.println("*** shutting down gRPC server since JVM is shutting down");
         RouteGuideServer.this.stop();
         System.err.println("*** server shut down");

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -225,7 +225,7 @@ public Runnable start(Listener transportListener) {
     if (keepAliveTimeNanos != KEEPALIVE_TIME_NANOS_DISABLED) {
       ChannelOption<Integer> tcpUserTimeout = Utils.maybeGetTcpUserTimeoutOption();
       if (tcpUserTimeout != null) {
-        b.option(tcpUserTimeout, (int) TimeUnit.NANOSECONDS.toMillis(keepAliveTimeNanos));
+        b.option(tcpUserTimeout, (int) TimeUnit.NANOSECONDS.toMillis(keepAliveTimeoutNanos));
       }
     }
     for (Map.Entry<ChannelOption<?>, ?> entry : channelOptions.entrySet()) {

File: api/src/main/java/io/grpc/NameResolverRegistry.java
Patch:
@@ -81,7 +81,7 @@ public synchronized void deregister(NameResolverProvider provider) {
   }
 
   private synchronized void refreshProviders() {
-    List<NameResolverProvider> providers = new ArrayList<NameResolverProvider>(allProviders);
+    List<NameResolverProvider> providers = new ArrayList<>(allProviders);
     // Sort descending based on priority.
     // sort() must be stable, as we prefer first-registered providers
     Collections.sort(providers, Collections.reverseOrder(new Comparator<NameResolverProvider>() {

File: api/src/test/java/io/grpc/NameResolverRegistryTest.java
Patch:
@@ -48,7 +48,7 @@ public void register_unavilableProviderThrows() {
       reg.register(new BaseProvider(false, 5));
       fail("Should throw");
     } catch (IllegalArgumentException e) {
-      assertThat(e.getMessage()).contains("isAvailable() returned false");
+      assertThat(e).hasMessageThat().contains("isAvailable() returned false");
     }
     assertThat(reg.providers()).isEmpty();
   }

File: core/src/test/java/io/grpc/internal/DnsNameResolverTest.java
Patch:
@@ -1072,7 +1072,7 @@ private List<InetAddress> createAddressList(int n) throws UnknownHostException {
 
   private static void assertAnswerMatches(
       List<InetAddress> addrs, int port, ResolutionResult resolutionResult) {
-    assertEquals(addrs.size(), resolutionResult.getAddresses().size());
+    assertThat(resolutionResult.getAddresses()).hasSize(addrs.size());
     for (int i = 0; i < addrs.size(); i++) {
       EquivalentAddressGroup addrGroup = resolutionResult.getAddresses().get(i);
       InetSocketAddress socketAddr =

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -31,7 +31,7 @@
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.NameResolver;
-import io.grpc.NameResolverProvider;
+import io.grpc.NameResolverRegistry;
 import io.grpc.ProxyDetector;
 import io.opencensus.trace.Tracing;
 import java.net.SocketAddress;
@@ -85,7 +85,7 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
       SharedResourcePool.forResource(GrpcUtil.SHARED_CHANNEL_EXECUTOR);
 
   private static final NameResolver.Factory DEFAULT_NAME_RESOLVER_FACTORY =
-      NameResolverProvider.asFactory();
+      NameResolverRegistry.getDefaultRegistry().asFactory();
 
   private static final DecompressorRegistry DEFAULT_DECOMPRESSOR_REGISTRY =
       DecompressorRegistry.getDefaultInstance();

File: api/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -138,7 +138,6 @@ public final boolean serverSendsOneMessage() {
    * @param <T> type of serializable message
    * @since 1.0.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1777")
   public interface Marshaller<T> {
     /**
      * Given a message, produce an {@link InputStream} for it so that it can be written to the wire.

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -53,6 +53,7 @@
 import io.grpc.internal.ClientStreamListener;
 import io.grpc.internal.ClientTransport;
 import io.grpc.internal.FakeClock;
+import io.grpc.internal.FixedObjectPool;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.ServerListener;
@@ -660,7 +661,7 @@ private void startServer(int maxStreamsPerConnection, int maxHeaderListSize) thr
         TestUtils.testServerAddress(new InetSocketAddress(0)),
         NioServerSocketChannel.class,
         new HashMap<ChannelOption<?>, Object>(),
-        group, group, negotiator,
+        new FixedObjectPool<>(group), new FixedObjectPool<>(group), negotiator,
         Collections.<ServerStreamTracer.Factory>emptyList(),
         TransportTracer.getDefaultFactory(),
         maxStreamsPerConnection,

File: core/src/test/java/io/grpc/LoadBalancerTest.java
Patch:
@@ -153,7 +153,7 @@ public void helper_createSubchannelList_oldApi_throws() {
       new NoopHelper().createSubchannel(Arrays.asList(eag), attrs);
       fail("Should throw");
     } catch (UnsupportedOperationException e) {
-      // exepcted
+      // expected
     }
   }
 

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -77,9 +77,6 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {}
     @Override
     public void handleNameResolutionError(Status error) {}
 
-    @Override
-    public void handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo stateInfo) {}
-
     @Override
     public void shutdown() {}
   }
@@ -165,6 +162,7 @@ public void handleNameResolutionError(Status error) {
       getDelegate().handleNameResolutionError(error);
     }
 
+    @Deprecated
     @Override
     public void handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo stateInfo) {
       getDelegate().handleSubchannelState(subchannel, stateInfo);

File: core/src/main/java/io/grpc/util/ForwardingLoadBalancer.java
Patch:
@@ -51,6 +51,7 @@ public void handleNameResolutionError(Status error) {
     delegate().handleNameResolutionError(error);
   }
 
+  @Deprecated
   @Override
   public void handleSubchannelState(
       Subchannel subchannel, ConnectivityStateInfo stateInfo) {

File: core/src/main/java/io/grpc/LoadBalancerProvider.java
Patch:
@@ -17,7 +17,7 @@
 package io.grpc;
 
 import com.google.common.base.MoreObjects;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import java.util.Map;
 
 /**

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -31,7 +31,7 @@
 import io.grpc.LoadBalancer.SubchannelPicker;
 import io.grpc.LoadBalancerProvider;
 import io.grpc.LoadBalancerRegistry;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.Status;
 import io.grpc.internal.ServiceConfigUtil.LbConfig;
 import java.util.ArrayList;

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -28,7 +28,7 @@
 import io.grpc.Attributes;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.NameResolver;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.ProxiedSocketAddress;
 import io.grpc.ProxyDetector;
 import io.grpc.Status;

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -61,6 +61,7 @@
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.NameResolver;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.NameResolver.ResolutionResult;
 import io.grpc.ProxyDetector;
 import io.grpc.Status;

File: core/src/main/java/io/grpc/internal/PickFirstLoadBalancerProvider.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import java.util.Map;
 
 /**

File: core/src/main/java/io/grpc/util/SecretRoundRobinLoadBalancerProvider.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import java.util.Map;
 
 /**

File: core/src/test/java/io/grpc/internal/DnsNameResolverTest.java
Patch:
@@ -39,7 +39,7 @@
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.HttpConnectProxiedSocketAddress;
 import io.grpc.NameResolver;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.NameResolver.ResolutionResult;
 import io.grpc.ProxyDetector;
 import io.grpc.Status;

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -91,7 +91,7 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.NameResolver;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.NameResolver.ResolutionResult;
 import io.grpc.ProxiedSocketAddress;
 import io.grpc.ProxyDetector;

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancerProvider.java
Patch:
@@ -20,7 +20,7 @@
 import io.grpc.Internal;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.Status;
 import io.grpc.grpclb.GrpclbState.Mode;
 import io.grpc.internal.ExponentialBackoffPolicy;

File: services/src/main/java/io/grpc/services/internal/HealthCheckingRoundRobinLoadBalancerProvider.java
Patch:
@@ -22,7 +22,7 @@
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancer.Helper;
 import io.grpc.LoadBalancerProvider;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.services.HealthCheckingLoadBalancerUtil;
 import java.util.Map;
 

File: xds/src/main/java/io/grpc/xds/XdsLoadBalancer.java
Patch:
@@ -30,7 +30,7 @@
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerRegistry;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.Status;
 import io.grpc.SynchronizationContext.ScheduledHandle;
 import io.grpc.internal.ServiceConfigUtil.LbConfig;

File: xds/src/main/java/io/grpc/xds/XdsLoadBalancerProvider.java
Patch:
@@ -23,7 +23,7 @@
 import io.grpc.LoadBalancer.Helper;
 import io.grpc.LoadBalancerProvider;
 import io.grpc.LoadBalancerRegistry;
-import io.grpc.NameResolver.Helper.ConfigOrError;
+import io.grpc.NameResolver.ConfigOrError;
 import io.grpc.Status;
 import io.grpc.internal.ServiceConfigUtil;
 import io.grpc.internal.ServiceConfigUtil.LbConfig;

File: core/src/main/java/io/grpc/LoadBalancerProvider.java
Patch:
@@ -63,8 +63,7 @@ public abstract class LoadBalancerProvider extends LoadBalancer.Factory {
    * @since 1.20.0
    * @see https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md
    */
-  public ConfigOrError<?> parseLoadBalancingPolicyConfig(
-      Map<String, ?> rawLoadBalancingPolicyConfig) {
+  public ConfigOrError parseLoadBalancingPolicyConfig(Map<String, ?> rawLoadBalancingPolicyConfig) {
     return ConfigOrError.UNKNOWN_CONFIG;
   }
 

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -301,7 +301,7 @@ private LoadBalancerProvider getProviderOrThrow(String policy, String choiceReas
    * @return null if no selection could be made.
    */
   @Nullable
-  ConfigOrError<PolicySelection> selectLoadBalancerPolicy(Map<String, ?> serviceConfig) {
+  ConfigOrError selectLoadBalancerPolicy(Map<String, ?> serviceConfig) {
     try {
       List<LbConfig> loadBalancerConfigs = null;
       if (serviceConfig != null) {

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -1772,12 +1772,11 @@ public SynchronizationContext getSynchronizationContext() {
 
     @Override
     @SuppressWarnings("unchecked")
-    public ConfigOrError<ManagedChannelServiceConfig> parseServiceConfig(
-        Map<String, ?> rawServiceConfig) {
+    public ConfigOrError parseServiceConfig(Map<String, ?> rawServiceConfig) {
       try {
         Object loadBalancingPolicySelection;
         if (autoLoadBalancerFactory != null) {
-          ConfigOrError<?> choiceFromLoadBalancer =
+          ConfigOrError choiceFromLoadBalancer =
               autoLoadBalancerFactory.selectLoadBalancerPolicy(rawServiceConfig);
           if (choiceFromLoadBalancer == null) {
             loadBalancingPolicySelection = null;

File: core/src/main/java/io/grpc/internal/PickFirstLoadBalancerProvider.java
Patch:
@@ -51,7 +51,7 @@ public LoadBalancer newLoadBalancer(LoadBalancer.Helper helper) {
   }
 
   @Override
-  public ConfigOrError<?> parseLoadBalancingPolicyConfig(
+  public ConfigOrError parseLoadBalancingPolicyConfig(
       Map<String, ?> rawLoadBalancingPolicyConfig) {
     return ConfigOrError.fromConfig(NO_CONFIG);
   }

File: core/src/main/java/io/grpc/util/SecretRoundRobinLoadBalancerProvider.java
Patch:
@@ -56,7 +56,7 @@ public LoadBalancer newLoadBalancer(LoadBalancer.Helper helper) {
     }
 
     @Override
-    public ConfigOrError<?> parseLoadBalancingPolicyConfig(
+    public ConfigOrError parseLoadBalancingPolicyConfig(
         Map<String, ?> rawLoadBalancingPolicyConfig) {
       return ConfigOrError.fromConfig(NO_CONFIG);
     }

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancerProvider.java
Patch:
@@ -64,7 +64,7 @@ helper, new CachedSubchannelPool(), TimeProvider.SYSTEM_TIME_PROVIDER,
   }
 
   @Override
-  public ConfigOrError<?> parseLoadBalancingPolicyConfig(
+  public ConfigOrError parseLoadBalancingPolicyConfig(
       Map<String, ?> rawLoadBalancingConfigPolicy) {
     try {
       return parseLoadBalancingConfigPolicyInternal(rawLoadBalancingConfigPolicy);
@@ -74,7 +74,7 @@ public ConfigOrError<?> parseLoadBalancingPolicyConfig(
     }
   }
 
-  ConfigOrError<Mode> parseLoadBalancingConfigPolicyInternal(
+  ConfigOrError parseLoadBalancingConfigPolicyInternal(
       Map<String, ?> rawLoadBalancingPolicyConfig) {
     if (rawLoadBalancingPolicyConfig == null) {
       return ConfigOrError.fromConfig(DEFAULT_MODE);

File: services/src/main/java/io/grpc/services/internal/HealthCheckingRoundRobinLoadBalancerProvider.java
Patch:
@@ -59,7 +59,7 @@ public LoadBalancer newLoadBalancer(Helper helper) {
   }
 
   @Override
-  public ConfigOrError<?> parseLoadBalancingPolicyConfig(
+  public ConfigOrError parseLoadBalancingPolicyConfig(
       Map<String, ?> rawLoadBalancingPolicyConfig) {
     return rrProvider.parseLoadBalancingPolicyConfig(rawLoadBalancingPolicyConfig);
   }

File: xds/src/main/java/io/grpc/xds/XdsLoadBalancer.java
Patch:
@@ -89,12 +89,12 @@ public void handleResolvedAddressGroups(
     Map<String, ?> newRawLbConfig = checkNotNull(
         attributes.get(ATTR_LOAD_BALANCING_CONFIG), "ATTR_LOAD_BALANCING_CONFIG not available");
 
-    ConfigOrError<XdsConfig> cfg =
+    ConfigOrError cfg =
         XdsLoadBalancerProvider.parseLoadBalancingConfigPolicy(newRawLbConfig, lbRegistry);
     if (cfg.getError() != null) {
       throw cfg.getError().asRuntimeException();
     }
-    XdsConfig xdsConfig = cfg.getConfig();
+    XdsConfig xdsConfig = (XdsConfig) cfg.getConfig();
     fallbackPolicy = xdsConfig.fallbackPolicy;
     fallbackManager.updateFallbackServers(servers, attributes, fallbackPolicy);
     fallbackManager.maybeStartFallbackTimer();

File: xds/src/main/java/io/grpc/xds/XdsLoadBalancerProvider.java
Patch:
@@ -66,12 +66,12 @@ public LoadBalancer newLoadBalancer(Helper helper) {
   }
 
   @Override
-  public ConfigOrError<?> parseLoadBalancingPolicyConfig(
+  public ConfigOrError parseLoadBalancingPolicyConfig(
       Map<String, ?> rawLoadBalancingPolicyConfig) {
     return parseLoadBalancingConfigPolicy(rawLoadBalancingPolicyConfig, registry);
   }
 
-  static ConfigOrError<XdsConfig> parseLoadBalancingConfigPolicy(
+  static ConfigOrError parseLoadBalancingConfigPolicy(
       Map<String, ?> rawLoadBalancingPolicyConfig, LoadBalancerRegistry registry) {
     try {
       LbConfig newLbConfig =

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -693,6 +693,7 @@ static ResourceResolverFactory getResourceResolverFactory(ClassLoader loader) {
           Level.FINE,
           "JndiResourceResolverFactory not available, skipping.",
           rrf.unavailabilityCause());
+      return null;
     }
     return rrf;
   }

File: core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java
Patch:
@@ -43,6 +43,7 @@ final class ManagedChannelServiceConfig {
 
   private final Map<String, MethodInfo> serviceMethodMap;
   private final Map<String, MethodInfo> serviceMap;
+  // TODO(notcarl/zdapeng): use retryThrottling here
   @Nullable
   private final Throttle retryThrottling;
   @Nullable

File: core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java
Patch:
@@ -106,7 +106,7 @@ public void close(ResourceInstance instance) {
     ResourceInstance foo3 = holder.getInternal(SHARED_FOO);
     assertNotSame(sharedFoo, foo3);
 
-    bar1 = holder.releaseInternal(SHARED_BAR, bar1);
+    holder.releaseInternal(SHARED_BAR, bar1);
 
     // bar refcount has reached 0, a destroying task is scheduled
     assertEquals(1, scheduledDestroyTasks.size());
@@ -122,7 +122,7 @@ public void close(ResourceInstance instance) {
   @Test public void cancelDestroyTask() {
     ResourceInstance foo1 = holder.getInternal(SHARED_FOO);
     ResourceInstance sharedFoo = foo1;
-    foo1 = holder.releaseInternal(SHARED_FOO, foo1);
+    holder.releaseInternal(SHARED_FOO, foo1);
     // A destroying task for foo is scheduled
     MockScheduledFuture<?> scheduledDestroyTask = scheduledDestroyTasks.poll();
     assertFalse(scheduledDestroyTask.cancelled);
@@ -137,7 +137,7 @@ public void close(ResourceInstance instance) {
     assertSame(sharedFoo, foo2);
 
     // Release it and the destroying task is scheduled again
-    foo2 = holder.releaseInternal(SHARED_FOO, foo2);
+    holder.releaseInternal(SHARED_FOO, foo2);
     scheduledDestroyTask = scheduledDestroyTasks.poll();
     assertFalse(scheduledDestroyTask.cancelled);
     scheduledDestroyTask.runTask();

File: examples/src/test/java/io/grpc/examples/routeguide/RouteGuideServerTest.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.HashSet;
+import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import org.junit.After;
@@ -133,7 +133,7 @@ public void listFeatures() throws Exception {
     features.add(f2);
     features.add(f3);
     features.add(f4);
-    final Collection<Feature> result = new HashSet<Feature>();
+    final List<Feature> result = new ArrayList<Feature>();
     final CountDownLatch latch = new CountDownLatch(1);
     StreamObserver<Feature> responseObserver =
         new StreamObserver<Feature>() {
@@ -159,7 +159,7 @@ public void onCompleted() {
     assertTrue(latch.await(1, TimeUnit.SECONDS));
 
     // verify
-    assertEquals(new HashSet<>(Arrays.asList(f2, f3)), result);
+    assertEquals(Arrays.asList(f2, f3), result);
   }
 
   @Test

File: auth/src/test/java/io/grpc/auth/ClientAuthInterceptorTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.isA;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.isA;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: auth/src/test/java/io/grpc/auth/GoogleAuthLibraryCallCredentialsTest.java
Patch:
@@ -21,8 +21,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: context/src/test/java/io/grpc/DeadlineTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: core/src/test/java/io/grpc/ClientInterceptorsTest.java
Patch:
@@ -24,9 +24,9 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.AdditionalAnswers.delegatesTo;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.isA;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.isA;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: core/src/test/java/io/grpc/ServerInterceptorsTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.AdditionalAnswers.delegatesTo;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: core/src/test/java/io/grpc/internal/CallCredentials2ApplyingTest.java
Patch:
@@ -19,8 +19,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: core/src/test/java/io/grpc/internal/CallCredentialsApplyingTest.java
Patch:
@@ -19,8 +19,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java
Patch:
@@ -21,8 +21,8 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: core/src/test/java/io/grpc/internal/DelayedStreamTest.java
Patch:
@@ -20,9 +20,9 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: core/src/test/java/io/grpc/internal/FailingClientStreamTest.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.grpc.internal;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: core/src/test/java/io/grpc/internal/FailingClientTransportTest.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.grpc.internal;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: core/src/test/java/io/grpc/internal/ForwardingClientStreamListenerTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.grpc.internal;
 
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: core/src/test/java/io/grpc/internal/ForwardingClientStreamTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -64,7 +64,7 @@ public void requestTest() {
 
   @Test
   public void writeMessageTest() {
-    InputStream is = mock(InputStream.class); 
+    InputStream is = mock(InputStream.class);
     forward.writeMessage(is);
     verify(mock).writeMessage(same(is));
   }

File: core/src/test/java/io/grpc/internal/ForwardingManagedChannelTest.java
Patch:
@@ -17,8 +17,8 @@
 package io.grpc.internal;
 
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: core/src/test/java/io/grpc/internal/GrpcUtilTest.java
Patch:
@@ -22,8 +22,8 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: core/src/test/java/io/grpc/internal/HedgingPolicyTest.java
Patch:
@@ -20,7 +20,7 @@
 import static io.grpc.internal.ServiceConfigInterceptor.HEDGING_POLICY_KEY;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: core/src/test/java/io/grpc/internal/KeepAliveManagerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -23,9 +23,9 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.AdditionalAnswers.delegatesTo;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;

File: core/src/test/java/io/grpc/internal/MessageDeframerTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeTrue;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doAnswer;
@@ -62,7 +62,7 @@
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 import org.mockito.ArgumentCaptor;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -321,7 +321,7 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
             }
           })
           .when(listener)
-          .messagesAvailable(Matchers.<StreamListener.MessageProducer>any());
+          .messagesAvailable(ArgumentMatchers.<StreamListener.MessageProducer>any());
       deframer.deframe(buffer(new byte[]{0, 0, 0, 0, 1, 3}));
       deframer.closeWhenComplete();
       verifyNoMoreInteractions(listener);

File: core/src/test/java/io/grpc/internal/MessageFramerTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: core/src/test/java/io/grpc/internal/OverrideAuthorityNameResolverTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static junit.framework.TestCase.assertNotNull;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: core/src/test/java/io/grpc/internal/RetriableStreamTest.java
Patch:
@@ -27,9 +27,9 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.AdditionalAnswers.delegatesTo;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: core/src/test/java/io/grpc/internal/RetryPolicyTest.java
Patch:
@@ -21,7 +21,7 @@
 import static java.lang.Double.parseDouble;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -21,9 +21,9 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.isA;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.isA;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;

File: core/src/test/java/io/grpc/internal/ServiceConfigInterceptorTest.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static io.grpc.internal.ServiceConfigInterceptor.HEDGING_POLICY_KEY;
 import static io.grpc.internal.ServiceConfigInterceptor.RETRY_POLICY_KEY;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 
 import io.grpc.CallOptions;

File: core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java
Patch:
@@ -23,8 +23,8 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: core/src/test/java/io/grpc/internal/TestUtils.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.grpc.internal;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: cronet/src/test/java/io/grpc/cronet/CronetClientStreamTest.java
Patch:
@@ -19,9 +19,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;

File: examples/src/test/java/io/grpc/examples/header/HeaderClientInterceptorTest.java
Patch:
@@ -44,7 +44,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.mockito.ArgumentCaptor;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 
 /**
  * Unit tests for {@link HeaderClientInterceptor}.
@@ -95,9 +95,9 @@ public void clientHeaderDeliveredToServer() throws Exception {
     }
 
     verify(mockServerInterceptor).interceptCall(
-        Matchers.<ServerCall<HelloRequest, HelloReply>>any(),
+        ArgumentMatchers.<ServerCall<HelloRequest, HelloReply>>any(),
         metadataCaptor.capture(),
-        Matchers.<ServerCallHandler<HelloRequest, HelloReply>>any());
+        ArgumentMatchers.<ServerCallHandler<HelloRequest, HelloReply>>any());
     assertEquals(
         "customRequestValue",
         metadataCaptor.getValue().get(HeaderClientInterceptor.CUSTOM_HEADER_KEY));

File: examples/src/test/java/io/grpc/examples/helloworld/HelloWorldClientTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.mockito.ArgumentCaptor;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 
 /**
  * Unit tests for {@link HelloWorldClient}.
@@ -83,7 +83,7 @@ public void greet_messageDeliveredToServer() {
     client.greet("test name");
 
     verify(serviceImpl)
-        .sayHello(requestCaptor.capture(), Matchers.<StreamObserver<HelloReply>>any());
+        .sayHello(requestCaptor.capture(), ArgumentMatchers.<StreamObserver<HelloReply>>any());
     assertEquals("test name", requestCaptor.getValue().getName());
   }
 }

File: examples/src/test/java/io/grpc/examples/routeguide/RouteGuideClientTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: examples/src/test/java/io/grpc/examples/routeguide/RouteGuideServerTest.java
Patch:
@@ -19,7 +19,7 @@
 import static junit.framework.TestCase.fail;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.timeout;

File: grpclb/src/test/java/io/grpc/grpclb/CachedSubchannelPoolTest.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static io.grpc.grpclb.CachedSubchannelPool.SHUTDOWN_TIMEOUT_MS;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.atMost;

File: grpclb/src/test/java/io/grpc/grpclb/TokenAttachingTracerFactoryTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.AdditionalAnswers.delegatesTo;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -20,8 +20,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.same;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: netty/src/test/java/io/grpc/netty/MaxConnectionIdleManagerTest.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.grpc.netty;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;

File: netty/src/test/java/io/grpc/netty/NettyHandlerTestBase.java
Patch:
@@ -20,8 +20,8 @@
 import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_WINDOW_SIZE;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.AdditionalAnswers.delegatesTo;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;

File: netty/src/test/java/io/grpc/netty/NettyStreamTestBase.java
Patch:
@@ -22,8 +22,8 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: netty/src/test/java/io/grpc/netty/WriteQueueTest.java
Patch:
@@ -17,9 +17,9 @@
 package io.grpc.netty;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: okhttp/src/test/java/io/grpc/okhttp/AsyncSinkTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.CALLS_REAL_METHODS;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientStreamTest.java
Patch:
@@ -20,8 +20,8 @@
 import static io.grpc.internal.ClientStreamListener.RpcProgress.PROCESSED;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: testing/src/test/java/io/grpc/testing/GrpcCleanupRuleTest.java
Patch:
@@ -20,8 +20,8 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.AdditionalAnswers.delegatesTo;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;

File: core/src/main/java/io/grpc/internal/JsonParser.java
Patch:
@@ -40,7 +40,7 @@ public final class JsonParser {
   private JsonParser() {}
 
   /**
-   * Parses a json string, returning either a {@code Map<String, ?>}, {@code List<Object>},
+   * Parses a json string, returning either a {@code Map<String, ?>}, {@code List<?>},
    * {@code String}, {@code Double}, {@code Boolean}, or {@code null}.
    */
   @SuppressWarnings("unchecked")

File: core/src/main/java/io/grpc/internal/ServiceConfigUtil.java
Patch:
@@ -530,7 +530,7 @@ static Boolean getBoolean(Map<String, ?> obj, String key) {
   }
 
   @SuppressWarnings("unchecked")
-  private static List<Map<String, ?>> checkObjectList(List<?> rawList) {
+  static List<Map<String, ?>> checkObjectList(List<?> rawList) {
     for (int i = 0; i < rawList.size(); i++) {
       if (!(rawList.get(i) instanceof Map)) {
         throw new ClassCastException(

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -1391,7 +1391,6 @@ public void grpclbFallback_breakLbStreamBeforeFallbackTimerExpires() {
 
   @Test
   public void grpclbFallback_noBalancerAddress() {
-    long loadReportIntervalMillis = 1983;
     InOrder inOrder = inOrder(helper, subchannelPool);
 
     // Create a resolution list with just backend addresses

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -1725,7 +1725,6 @@ public void grpclbWorking_pickFirstMode() throws Exception {
     deliverResolvedAddresses(grpclbResolutionList, grpclbResolutionAttrs);
 
     assertEquals(1, fakeOobChannels.size());
-    ManagedChannel oobChannel = fakeOobChannels.poll();
     verify(mockLbService).balanceLoad(lbResponseObserverCaptor.capture());
     StreamObserver<LoadBalanceResponse> lbResponseObserver = lbResponseObserverCaptor.getValue();
     assertEquals(1, lbRequestObservers.size());
@@ -1853,7 +1852,6 @@ public void pickFirstMode_fallback() throws Exception {
 
     // Attempted to connect to balancer
     assertEquals(1, fakeOobChannels.size());
-    ManagedChannel oobChannel = fakeOobChannels.poll();
     verify(mockLbService).balanceLoad(lbResponseObserverCaptor.capture());
     StreamObserver<LoadBalanceResponse> lbResponseObserver = lbResponseObserverCaptor.getValue();
     assertEquals(1, lbRequestObservers.size());
@@ -1978,7 +1976,6 @@ public void switchMode() throws Exception {
 
     // A new LB stream is created
     assertEquals(1, fakeOobChannels.size());
-    oobChannel = fakeOobChannels.poll();
     verify(mockLbService, times(2)).balanceLoad(lbResponseObserverCaptor.capture());
     lbResponseObserver = lbResponseObserverCaptor.getValue();
     assertEquals(1, lbRequestObservers.size());

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java
Patch:
@@ -71,7 +71,7 @@ class GrpclbLoadBalancer extends LoadBalancer {
     this.time = checkNotNull(time, "time provider");
     this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, "backoffPolicyProvider");
     this.subchannelPool = checkNotNull(subchannelPool, "subchannelPool");
-    this.subchannelPool.init(helper);
+    this.subchannelPool.init(helper, this);
     recreateStates();
     checkNotNull(grpclbState, "grpclbState");
   }

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -240,11 +240,9 @@ public void close() {
    * Buffers all writes until the HTTP CONNECT tunnel is established.
    */
   static final class BufferUntilProxyTunnelledHandler extends AbstractBufferingHandler {
-    private final ChannelHandler originalHandler;
 
     public BufferUntilProxyTunnelledHandler(ProxyHandler proxyHandler, ChannelHandler handler) {
       super(proxyHandler, handler);
-      this.originalHandler = handler;
     }
 
     @Override
@@ -370,7 +368,7 @@ static HostPort parseAuthority(String authority) {
     } else {
       /*
        * Implementation note: We pick -1 as the port here rather than deriving it from the
-       * original socket address.  The SSL engine doens't use this port number when contacting the
+       * original socket address.  The SSL engine doesn't use this port number when contacting the
        * remote server, but rather it is used for other things like SSL Session caching.  When an
        * invalid authority is provided (like "bad_cert"), picking the original port and passing it
        * in would mean that the port might used under the assumption that it was correct.   By

File: xds/src/main/java/io/grpc/xds/XdsLbState.java
Patch:
@@ -26,10 +26,10 @@
 import io.grpc.LoadBalancer.Subchannel;
 import io.grpc.ManagedChannel;
 import io.grpc.Status;
+import io.grpc.internal.ServiceConfigUtil.LbConfig;
 import io.grpc.xds.XdsComms.AdsStreamCallback;
 import java.net.SocketAddress;
 import java.util.List;
-import java.util.Map;
 import java.util.concurrent.atomic.AtomicReference;
 import javax.annotation.Nullable;
 
@@ -54,7 +54,7 @@ class XdsLbState {
   final String balancerName;
 
   @Nullable
-  final Map<String, Object> childPolicy;
+  final LbConfig childPolicy;
 
   private final SubchannelStore subchannelStore;
   private final Helper helper;
@@ -66,7 +66,7 @@ class XdsLbState {
 
   XdsLbState(
       String balancerName,
-      @Nullable Map<String, Object> childPolicy,
+      @Nullable LbConfig childPolicy,
       @Nullable XdsComms xdsComms,
       Helper helper,
       SubchannelStore subchannelStore,

File: core/src/test/java/io/grpc/inprocess/InProcessTransportTest.java
Patch:
@@ -18,10 +18,10 @@
 
 import com.google.common.collect.ImmutableList;
 import io.grpc.ServerStreamTracer;
+import io.grpc.internal.AbstractTransportTest;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.InternalServer;
 import io.grpc.internal.ManagedClientTransport;
-import io.grpc.internal.testing.AbstractTransportTest;
 import java.util.List;
 import org.junit.Ignore;
 import org.junit.Test;

File: netty/src/test/java/io/grpc/netty/NettyTransportTest.java
Patch:
@@ -17,11 +17,11 @@
 package io.grpc.netty;
 
 import io.grpc.ServerStreamTracer;
+import io.grpc.internal.AbstractTransportTest;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.FakeClock;
 import io.grpc.internal.InternalServer;
 import io.grpc.internal.ManagedClientTransport;
-import io.grpc.internal.testing.AbstractTransportTest;
 import java.net.InetSocketAddress;
 import java.util.List;
 import java.util.concurrent.TimeUnit;

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpTransportTest.java
Patch:
@@ -17,13 +17,13 @@
 package io.grpc.okhttp;
 
 import io.grpc.ServerStreamTracer;
+import io.grpc.internal.AbstractTransportTest;
 import io.grpc.internal.AccessProtectedHack;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.FakeClock;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.InternalServer;
 import io.grpc.internal.ManagedClientTransport;
-import io.grpc.internal.testing.AbstractTransportTest;
 import io.grpc.netty.NettyServerBuilder;
 import java.net.InetSocketAddress;
 import java.util.List;

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -296,7 +296,7 @@ HostPort parseAuthority(String authority) {
       } else {
         /*
          * Implementation note: We pick -1 as the port here rather than deriving it from the
-         * original socket address.  The SSL engine doens't use this port number when contacting the
+         * original socket address.  The SSL engine doesn't use this port number when contacting the
          * remote server, but rather it is used for other things like SSL Session caching.  When an
          * invalid authority is provided (like "bad_cert"), picking the original port and passing it
          * in would mean that the port might used under the assumption that it was correct.   By

File: alts/src/test/java/io/grpc/alts/AltsChannelBuilderTest.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import io.grpc.alts.internal.AltsProtocolNegotiator;
-import io.grpc.netty.ProtocolNegotiator;
+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;

File: alts/src/test/java/io/grpc/alts/GoogleDefaultChannelBuilderTest.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import io.grpc.alts.internal.GoogleDefaultProtocolNegotiator;
-import io.grpc.netty.ProtocolNegotiator;
+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;

File: core/src/main/java/io/grpc/NameResolverProvider.java
Patch:
@@ -44,6 +44,7 @@ public abstract class NameResolverProvider extends NameResolver.Factory {
    * @since 1.0.0
    */
   @SuppressWarnings("unused") // Avoids outside callers accidentally depending on the super class.
+  @Deprecated
   public static final Attributes.Key<Integer> PARAMS_DEFAULT_PORT =
       NameResolver.Factory.PARAMS_DEFAULT_PORT;
 
@@ -106,10 +107,10 @@ private static final class NameResolverFactory extends NameResolver.Factory {
 
     @Override
     @Nullable
-    public NameResolver newNameResolver(URI targetUri, Attributes params) {
+    public NameResolver newNameResolver(URI targetUri, NameResolver.Helper helper) {
       checkForProviders();
       for (NameResolverProvider provider : providers) {
-        NameResolver resolver = provider.newNameResolver(targetUri, params);
+        NameResolver resolver = provider.newNameResolver(targetUri, helper);
         if (resolver != null) {
           return resolver;
         }

File: core/src/main/java/io/grpc/internal/OverrideAuthorityNameResolverFactory.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc.internal;
 
-import io.grpc.Attributes;
 import io.grpc.NameResolver;
 import java.net.URI;
 import javax.annotation.Nullable;
@@ -43,8 +42,8 @@ final class OverrideAuthorityNameResolverFactory extends NameResolver.Factory {
 
   @Nullable
   @Override
-  public NameResolver newNameResolver(URI targetUri, Attributes params) {
-    final NameResolver resolver = delegate.newNameResolver(targetUri, params);
+  public NameResolver newNameResolver(URI targetUri, NameResolver.Helper helper) {
+    final NameResolver resolver = delegate.newNameResolver(targetUri, helper);
     // Do not wrap null values. We do not want to impede error signaling.
     if (resolver == null) {
       return null;

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -142,7 +142,7 @@ public void setUp() {
     LoadBalancerRegistry.getDefaultRegistry().register(mockLoadBalancerProvider);
     when(mockNameResolver.getServiceAuthority()).thenReturn(AUTHORITY);
     when(mockNameResolverFactory
-        .newNameResolver(any(URI.class), any(Attributes.class)))
+        .newNameResolver(any(URI.class), any(NameResolver.Helper.class)))
         .thenReturn(mockNameResolver);
     when(mockTransportFactory.getScheduledExecutorService())
         .thenReturn(timer.getScheduledExecutorService());
@@ -181,7 +181,7 @@ builder, mockTransportFactory, new FakeBackoffPolicyProvider(),
       }
       servers.add(new EquivalentAddressGroup(addrs));
     }
-    verify(mockNameResolverFactory).newNameResolver(any(URI.class), any(Attributes.class));
+    verify(mockNameResolverFactory).newNameResolver(any(URI.class), any(NameResolver.Helper.class));
     // Verify the initial idleness
     verify(mockLoadBalancerProvider, never()).newLoadBalancer(any(Helper.class));
     verify(mockTransportFactory, never()).newClientTransport(

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpChannelBuilderTest.java
Patch:
@@ -23,7 +23,6 @@
 import static org.junit.Assert.assertSame;
 
 import com.squareup.okhttp.ConnectionSpec;
-import io.grpc.NameResolver;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.FakeClock;
 import io.grpc.internal.GrpcUtil;
@@ -120,8 +119,7 @@ public void usePlaintext_newClientTransportAllowed() {
   @Test
   public void usePlaintextDefaultPort() {
     OkHttpChannelBuilder builder = OkHttpChannelBuilder.forAddress("host", 1234).usePlaintext();
-    assertEquals(GrpcUtil.DEFAULT_PORT_PLAINTEXT,
-        builder.getNameResolverParams().get(NameResolver.Factory.PARAMS_DEFAULT_PORT).intValue());
+    assertEquals(GrpcUtil.DEFAULT_PORT_PLAINTEXT, builder.getDefaultPort());
   }
 
   @Test

File: core/src/main/java/io/grpc/internal/ClientTransportFactory.java
Patch:
@@ -68,8 +68,8 @@ ConnectionClientTransport newClientTransport(
   public static final class ClientTransportOptions {
     private String authority = "unknown-authority";
     private Attributes eagAttributes = Attributes.EMPTY;
-    private @Nullable String userAgent;
-    private @Nullable HttpConnectProxiedSocketAddress connectProxiedSocketAddr;
+    @Nullable private String userAgent;
+    @Nullable private HttpConnectProxiedSocketAddress connectProxiedSocketAddr;
 
     public String getAuthority() {
       return authority;

File: core/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -526,7 +526,8 @@ public T maxTraceEvents(int maxTraceEvents) {
 
   /**
    * Sets the proxy detector to be used in addresses name resolution. If <code>null</code> is passed
-   * the default proxy detector will be used.
+   * the default proxy detector will be used.  For how proxies work in gRPC, please refer to the
+   * documentation on {@link ProxyDetector}.
    *
    * @return this
    * @since 1.19.0

File: core/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -100,7 +100,8 @@ public abstract static class Factory {
         Attributes.Key.create("params-default-port");
 
     /**
-     * Proxy detector used in name resolution.
+     * If the NameResolver wants to support proxy, it should inquire this {@link ProxyDetector}.
+     * See documentation on {@link ProxyDetector} about how proxies work in gRPC.
      */
     @ExperimentalApi("https://github.com/grpc/grpc-java/issues/5113")
     public static final Attributes.Key<ProxyDetector> PARAMS_PROXY_DETECTOR =

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -37,8 +37,8 @@
 import io.grpc.LoadBalancer.Subchannel;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
+import io.grpc.ProxiedSocketAddress;
 import io.grpc.ProxyDetector;
-import io.grpc.ProxyParameters;
 import io.grpc.Status;
 import io.grpc.internal.ClientStreamListener.RpcProgress;
 import io.grpc.internal.SharedResourceHolder.Resource;
@@ -245,7 +245,7 @@ public byte[] parseAsciiString(byte[] serialized) {
   public static final ProxyDetector NOOP_PROXY_DETECTOR = new ProxyDetector() {
     @Nullable
     @Override
-    public ProxyParameters proxyFor(SocketAddress targetServerAddress) {
+    public ProxiedSocketAddress proxyFor(SocketAddress targetServerAddress) {
       return null;
     }
   };

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -547,7 +547,7 @@ public void run() {
           connectionSpec,
           maxMessageSize,
           flowControlWindow,
-          options.getProxyParameters(),
+          options.getHttpConnectProxiedSocketAddress(),
           tooManyPingsRunnable,
           maxInboundMetadataSize,
           transportTracerFactory.create());

File: core/src/main/java/io/grpc/Server.java
Patch:
@@ -61,7 +61,7 @@ public int getPort() {
    * @throws IllegalStateException if the server has not yet been started.
    * @since 1.19.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/FIXME")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/5332")
   public List<? extends SocketAddress> getListenSockets() {
     throw new UnsupportedOperationException();
   }

File: alts/src/main/java/io/grpc/alts/internal/AltsHandshakerStub.java
Patch:
@@ -29,7 +29,7 @@ class AltsHandshakerStub {
   private final StreamObserver<HandshakerResp> reader = new Reader();
   private final StreamObserver<HandshakerReq> writer;
   private final ArrayBlockingQueue<Optional<HandshakerResp>> responseQueue =
-      new ArrayBlockingQueue<Optional<HandshakerResp>>(1);
+      new ArrayBlockingQueue<>(1);
   private final AtomicReference<String> exceptionMessage = new AtomicReference<>();
 
   AltsHandshakerStub(HandshakerServiceStub serviceStub) {

File: alts/src/main/java/io/grpc/alts/internal/AltsTsiHandshaker.java
Patch:
@@ -99,7 +99,7 @@ public boolean processBytesFromPeer(ByteBuffer bytes) throws GeneralSecurityExce
   @Override
   public TsiPeer extractPeer() throws GeneralSecurityException {
     Preconditions.checkState(!isInProgress(), "Handshake is not complete.");
-    List<TsiPeer.Property<?>> peerProperties = new ArrayList<TsiPeer.Property<?>>();
+    List<TsiPeer.Property<?>> peerProperties = new ArrayList<>();
     peerProperties.add(
         new TsiPeer.StringProperty(
             TSI_SERVICE_ACCOUNT_PEER_PROPERTY,

File: auth/src/test/java/io/grpc/auth/GoogleAuthLibraryCallCredentialsTest.java
Patch:
@@ -221,7 +221,7 @@ public void credentialsReturnNullMetadata() throws Exception {
     ListMultimap<String, String> values = LinkedListMultimap.create();
     values.put("Authorization", "token1");
     when(credentials.getRequestMetadata(eq(expectedUri)))
-        .thenReturn(null, Multimaps.<String, String>asMap(values), null);
+        .thenReturn(null, Multimaps.asMap(values), null);
 
     GoogleAuthLibraryCallCredentials callCredentials =
         new GoogleAuthLibraryCallCredentials(credentials);

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java
Patch:
@@ -432,7 +432,7 @@ protected CountDownLatch startStreamingCalls(int callsPerChannel, final AtomicLo
         final ClientCall<ByteBuf, ByteBuf> streamingCall =
             channel.newCall(pingPongMethod, CALL_OPTIONS);
         final AtomicReference<StreamObserver<ByteBuf>> requestObserverRef =
-            new AtomicReference<StreamObserver<ByteBuf>>();
+            new AtomicReference<>();
         final AtomicBoolean ignoreMessages = new AtomicBoolean();
         StreamObserver<ByteBuf> requestObserver = ClientCalls.asyncBidiStreamingCall(
             streamingCall,
@@ -486,7 +486,7 @@ protected CountDownLatch startFlowControlledStreamingCalls(int callsPerChannel,
         final ClientCall<ByteBuf, ByteBuf> streamingCall =
             channel.newCall(flowControlledStreaming, CALL_OPTIONS);
         final AtomicReference<StreamObserver<ByteBuf>> requestObserverRef =
-            new AtomicReference<StreamObserver<ByteBuf>>();
+            new AtomicReference<>();
         final AtomicBoolean ignoreMessages = new AtomicBoolean();
         StreamObserver<ByteBuf> requestObserver = ClientCalls.asyncBidiStreamingCall(
             streamingCall,

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadClient.java
Patch:
@@ -379,7 +379,7 @@ public void run() {
       while (!shutdown) {
         maxOutstanding.acquireUninterruptibly();
         final AtomicReference<StreamObserver<Messages.SimpleRequest>> requestObserver =
-            new AtomicReference<StreamObserver<Messages.SimpleRequest>>();
+            new AtomicReference<>();
         requestObserver.set(stub.streamingCall(
             new StreamObserver<Messages.SimpleResponse>() {
               long now = System.nanoTime();

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AbstractConfigurationBuilder.java
Patch:
@@ -109,7 +109,7 @@ protected interface Param {
   public final T build(String[] args) {
     T config = newConfiguration();
     Map<String, Param> paramMap = getParamMap();
-    Set<String> appliedParams = new TreeSet<String>(CASE_INSENSITIVE_ORDER);
+    Set<String> appliedParams = new TreeSet<>(CASE_INSENSITIVE_ORDER);
 
     for (String arg : args) {
       if (!arg.startsWith("--")) {
@@ -197,7 +197,7 @@ public final void printUsage() {
   protected abstract T build0(T config);
 
   private Map<String, Param> getParamMap() {
-    Map<String, Param> map = new TreeMap<String, Param>(CASE_INSENSITIVE_ORDER);
+    Map<String, Param> map = new TreeMap<>(CASE_INSENSITIVE_ORDER);
     for (Param param : getParams()) {
       map.put(param.getName(), param);
     }

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncClient.java
Patch:
@@ -122,7 +122,7 @@ private List<Histogram> doBenchmark(SimpleRequest req,
                                       long endTime) throws Exception {
     // Initiate the concurrent calls
     List<Future<Histogram>> futures =
-        new ArrayList<Future<Histogram>>(config.outstandingRpcsPerChannel);
+        new ArrayList<>(config.outstandingRpcsPerChannel);
     for (int i = 0; i < config.channels; i++) {
       for (int j = 0; j < config.outstandingRpcsPerChannel; j++) {
         Channel channel = channels.get(i);

File: benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadWorkerTest.java
Patch:
@@ -59,7 +59,7 @@ public void setup() throws Exception {
     worker.start();
     channel = NettyChannelBuilder.forAddress("localhost", port).usePlaintext().build();
     workerServiceStub = WorkerServiceGrpc.newStub(channel);
-    marksQueue = new LinkedBlockingQueue<Stats.ClientStats>();
+    marksQueue = new LinkedBlockingQueue<>();
   }
 
   @Test

File: context/src/jmh/java/io/grpc/ReadBenchmark.java
Patch:
@@ -33,7 +33,7 @@ public class ReadBenchmark {
 
   @State(Scope.Benchmark)
   public static class ContextState {
-    List<Context.Key<Object>> keys = new ArrayList<Context.Key<Object>>();
+    List<Context.Key<Object>> keys = new ArrayList<>();
     List<Context> contexts = new ArrayList<>();
 
     @Setup

File: context/src/main/java/io/grpc/ThreadLocalContextStorage.java
Patch:
@@ -29,7 +29,7 @@ final class ThreadLocalContextStorage extends Context.Storage {
    * Currently bound context.
    */
   // VisibleForTesting
-  static final ThreadLocal<Context> localContext = new ThreadLocal<Context>();
+  static final ThreadLocal<Context> localContext = new ThreadLocal<>();
 
   @Override
   public Context doAttach(Context toAttach) {

File: core/src/jmh/java/io/grpc/CallOptionsBenchmark.java
Patch:
@@ -49,7 +49,7 @@ public class CallOptionsBenchmark {
    */
   @Setup
   public void setUp() throws Exception {
-    customOptions = new ArrayList<CallOptions.Key<String>>(customOptionsCount);
+    customOptions = new ArrayList<>(customOptionsCount);
     for (int i = 0; i < customOptionsCount; i++) {
       customOptions.add(CallOptions.Key.createWithDefault("name " + i, "defaultvalue"));
     }
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
       allOpts = allOpts.withOption(customOptions.get(i), "value");
     }
 
-    shuffledCustomOptions = new ArrayList<CallOptions.Key<String>>(customOptions);
+    shuffledCustomOptions = new ArrayList<>(customOptions);
     // Make the shuffling deterministic
     Collections.shuffle(shuffledCustomOptions, new Random(1));
   }

File: core/src/jmh/java/io/grpc/internal/StatsTraceContextBenchmark.java
Patch:
@@ -40,7 +40,7 @@ public class StatsTraceContextBenchmark {
 
   private final Metadata emptyMetadata = new Metadata();
   private final List<ServerStreamTracer.Factory> serverStreamTracerFactories =
-      Collections.<ServerStreamTracer.Factory>emptyList();
+      Collections.emptyList();
 
   /**
    * Javadoc comment.

File: core/src/main/java/io/grpc/Attributes.java
Patch:
@@ -135,7 +135,7 @@ public String toString() {
      */
     @Deprecated
     public static <T> Key<T> of(String debugString) {
-      return new Key<T>(debugString);
+      return new Key<>(debugString);
     }
 
     /**
@@ -146,7 +146,7 @@ public static <T> Key<T> of(String debugString) {
      * @return Key object
      */
     public static <T> Key<T> create(String debugString) {
-      return new Key<T>(debugString);
+      return new Key<>(debugString);
     }
   }
 
@@ -222,7 +222,7 @@ private Builder(Attributes base) {
 
     private Map<Key<?>, Object> data(int size) {
       if (newdata == null) {
-        newdata = new IdentityHashMap<Key<?>, Object>(size);
+        newdata = new IdentityHashMap<>(size);
       }
       return newdata;
     }

File: core/src/main/java/io/grpc/CompressorRegistry.java
Patch:
@@ -53,7 +53,7 @@ public static CompressorRegistry newEmptyInstance() {
 
   @VisibleForTesting
   CompressorRegistry(Compressor ...cs) {
-    compressors = new ConcurrentHashMap<String, Compressor>();
+    compressors = new ConcurrentHashMap<>();
     for (Compressor c : cs) {
       compressors.put(c.getMessageEncoding(), c);
     }

File: core/src/main/java/io/grpc/Contexts.java
Patch:
@@ -48,7 +48,7 @@ public static <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(
         ServerCallHandler<ReqT, RespT> next) {
     Context previous = context.attach();
     try {
-      return new ContextualizedServerCallListener<ReqT>(
+      return new ContextualizedServerCallListener<>(
           next.startCall(call, headers),
           context);
     } finally {

File: core/src/main/java/io/grpc/DecompressorRegistry.java
Patch:
@@ -74,7 +74,7 @@ private DecompressorRegistry(Decompressor d, boolean advertised, DecompressorReg
       newSize++;
     }
     Map<String, DecompressorInfo> newDecompressors =
-        new LinkedHashMap<String, DecompressorInfo>(newSize);
+        new LinkedHashMap<>(newSize);
     for (DecompressorInfo di : parent.decompressors.values()) {
       String previousEncoding = di.decompressor.getMessageEncoding();
       if (!previousEncoding.equals(encoding)) {
@@ -90,7 +90,7 @@ private DecompressorRegistry(Decompressor d, boolean advertised, DecompressorReg
   }
 
   private DecompressorRegistry() {
-    decompressors = new LinkedHashMap<String, DecompressorInfo>(0);
+    decompressors = new LinkedHashMap<>(0);
     advertisedDecompressors = new byte[0];
   }
 
@@ -115,7 +115,7 @@ byte[] getRawAdvertisedMessageEncodings() {
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public Set<String> getAdvertisedMessageEncodings() {
-    Set<String> advertisedDecompressors = new HashSet<String>(decompressors.size());
+    Set<String> advertisedDecompressors = new HashSet<>(decompressors.size());
     for (Entry<String, DecompressorInfo> entry : decompressors.entrySet()) {
       if (entry.getValue().advertised) {
         advertisedDecompressors.add(entry.getKey());

File: core/src/main/java/io/grpc/ManagedChannelProvider.java
Patch:
@@ -102,7 +102,7 @@ public ProviderNotFoundException(String msg) {
   private static final class HardcodedClasses implements Iterable<Class<?>> {
     @Override
     public Iterator<Class<?>> iterator() {
-      List<Class<?>> list = new ArrayList<Class<?>>();
+      List<Class<?>> list = new ArrayList<>();
       try {
         list.add(Class.forName("io.grpc.okhttp.OkHttpChannelProvider"));
       } catch (ClassNotFoundException ex) {

File: core/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -50,7 +50,7 @@ public final class MethodDescriptor<ReqT, RespT> {
 
   // Must be set to InternalKnownTransport.values().length
   // Not referenced to break the dependency.
-  private final AtomicReferenceArray<Object> rawMethodNames = new AtomicReferenceArray<Object>(1);
+  private final AtomicReferenceArray<Object> rawMethodNames = new AtomicReferenceArray<>(1);
 
 
   /**
@@ -211,7 +211,7 @@ public static <RequestT, ResponseT> MethodDescriptor<RequestT, ResponseT> create
       MethodType type, String fullMethodName,
       Marshaller<RequestT> requestMarshaller,
       Marshaller<ResponseT> responseMarshaller) {
-    return new MethodDescriptor<RequestT, ResponseT>(
+    return new MethodDescriptor<>(
         type, fullMethodName, requestMarshaller, responseMarshaller, null, false, false, false);
   }
 
@@ -564,7 +564,7 @@ public Builder<ReqT, RespT> setSampledToLocalTracing(boolean value) {
      */
     @CheckReturnValue
     public MethodDescriptor<ReqT, RespT> build() {
-      return new MethodDescriptor<ReqT, RespT>(
+      return new MethodDescriptor<>(
           type,
           fullMethodName,
           requestMarshaller,

File: core/src/main/java/io/grpc/ServerInterceptors.java
Patch:
@@ -175,9 +175,9 @@ public static <T> ServerServiceDefinition useMarshalledMessages(
       final ServerServiceDefinition serviceDef,
       final MethodDescriptor.Marshaller<T> marshaller) {
     List<ServerMethodDefinition<?, ?>> wrappedMethods =
-        new ArrayList<ServerMethodDefinition<?, ?>>();
+        new ArrayList<>();
     List<MethodDescriptor<?, ?>> wrappedDescriptors =
-        new ArrayList<MethodDescriptor<?, ?>>();
+        new ArrayList<>();
     // Wrap the descriptors
     for (final ServerMethodDefinition<?, ?> definition : serviceDef.getMethods()) {
       final MethodDescriptor<?, ?> originalMethodDescriptor = definition.getMethodDescriptor();
@@ -210,7 +210,7 @@ private static <ReqT, RespT> void wrapAndAddMethod(
   static final class InterceptCallHandler<ReqT, RespT> implements ServerCallHandler<ReqT, RespT> {
     public static <ReqT, RespT> InterceptCallHandler<ReqT, RespT> create(
         ServerInterceptor interceptor, ServerCallHandler<ReqT, RespT> callHandler) {
-      return new InterceptCallHandler<ReqT, RespT>(interceptor, callHandler);
+      return new InterceptCallHandler<>(interceptor, callHandler);
     }
 
     private final ServerInterceptor interceptor;

File: core/src/main/java/io/grpc/ServerMethodDefinition.java
Patch:
@@ -41,7 +41,7 @@ private ServerMethodDefinition(MethodDescriptor<ReqT, RespT> method,
   public static <ReqT, RespT> ServerMethodDefinition<ReqT, RespT> create(
       MethodDescriptor<ReqT, RespT> method,
       ServerCallHandler<ReqT, RespT> handler) {
-    return new ServerMethodDefinition<ReqT, RespT>(method, handler);
+    return new ServerMethodDefinition<>(method, handler);
   }
 
   /** The {@code MethodDescriptor} for this method. */
@@ -62,6 +62,6 @@ public ServerCallHandler<ReqT, RespT> getServerCallHandler() {
    */
   public ServerMethodDefinition<ReqT, RespT> withServerCallHandler(
       ServerCallHandler<ReqT, RespT> handler) {
-    return new ServerMethodDefinition<ReqT, RespT>(method, handler);
+    return new ServerMethodDefinition<>(method, handler);
   }
 }

File: core/src/main/java/io/grpc/ServerStreamTracer.java
Patch:
@@ -94,7 +94,7 @@ private static final class ReadOnlyServerCall<ReqT, RespT>
 
     private static <ReqT, RespT> ReadOnlyServerCall<ReqT, RespT> create(
         ServerCallInfo<ReqT, RespT> callInfo) {
-      return new ReadOnlyServerCall<ReqT, RespT>(callInfo);
+      return new ReadOnlyServerCall<>(callInfo);
     }
 
     private ReadOnlyServerCall(ServerCallInfo<ReqT, RespT> callInfo) {

File: core/src/main/java/io/grpc/ServiceDescriptor.java
Patch:
@@ -67,7 +67,7 @@ public ServiceDescriptor(String name, Collection<MethodDescriptor<?, ?>> methods
   private ServiceDescriptor(Builder b) {
     this.name = b.name;
     validateMethodNames(name, b.methods);
-    this.methods = Collections.unmodifiableList(new ArrayList<MethodDescriptor<?, ?>>(b.methods));
+    this.methods = Collections.unmodifiableList(new ArrayList<>(b.methods));
     this.schemaDescriptor = b.schemaDescriptor;
   }
 
@@ -107,7 +107,7 @@ public Object getSchemaDescriptor() {
   }
 
   static void validateMethodNames(String serviceName, Collection<MethodDescriptor<?, ?>> methods) {
-    Set<String> allNames = new HashSet<String>(methods.size());
+    Set<String> allNames = new HashSet<>(methods.size());
     for (MethodDescriptor<?, ?> method : methods) {
       checkNotNull(method, "method");
       String methodServiceName =
@@ -139,7 +139,7 @@ private Builder(String name) {
     }
 
     private String name;
-    private List<MethodDescriptor<?, ?>> methods = new ArrayList<MethodDescriptor<?, ?>>();
+    private List<MethodDescriptor<?, ?>> methods = new ArrayList<>();
     private Object schemaDescriptor;
 
     /**

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -234,7 +234,7 @@ private byte[] valueAscii() {
   private static final List<Status> STATUS_LIST = buildStatusList();
 
   private static List<Status> buildStatusList() {
-    TreeMap<Integer, Status> canonicalizer = new TreeMap<Integer, Status>();
+    TreeMap<Integer, Status> canonicalizer = new TreeMap<>();
     for (Code code : Code.values()) {
       Status replaced = canonicalizer.put(code.value(), new Status(code));
       if (replaced != null) {

File: core/src/main/java/io/grpc/SynchronizationContext.java
Patch:
@@ -56,7 +56,7 @@ public final class SynchronizationContext implements Executor {
   private final UncaughtExceptionHandler uncaughtExceptionHandler;
 
   @GuardedBy("lock")
-  private final Queue<Runnable> queue = new ArrayDeque<Runnable>();
+  private final Queue<Runnable> queue = new ArrayDeque<>();
   @GuardedBy("lock")
   private Thread drainingThread;
 

File: core/src/main/java/io/grpc/inprocess/InProcessServer.java
Patch:
@@ -37,7 +37,7 @@
 @ThreadSafe
 final class InProcessServer implements InternalServer {
   private static final ConcurrentMap<String, InProcessServer> registry
-      = new ConcurrentHashMap<String, InProcessServer>();
+      = new ConcurrentHashMap<>();
 
   static InProcessServer findServer(String name) {
     return registry.get(name);

File: core/src/main/java/io/grpc/inprocess/InProcessServerBuilder.java
Patch:
@@ -120,7 +120,7 @@ private InProcessServerBuilder(String name) {
    */
   public InProcessServerBuilder scheduledExecutorService(
       ScheduledExecutorService scheduledExecutorService) {
-    schedulerPool = new FixedObjectPool<ScheduledExecutorService>(
+    schedulerPool = new FixedObjectPool<>(
         checkNotNull(scheduledExecutorService, "scheduledExecutorService"));
     return this;
   }

File: core/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -91,7 +91,7 @@ final class InProcessTransport implements ServerTransport, ConnectionClientTrans
   @GuardedBy("this")
   private Status shutdownStatus;
   @GuardedBy("this")
-  private Set<InProcessStream> streams = new HashSet<InProcessStream>();
+  private Set<InProcessStream> streams = new HashSet<>();
   @GuardedBy("this")
   private List<ServerStreamTracer.Factory> serverStreamTracerFactories;
   private final Attributes attributes = Attributes.newBuilder()
@@ -368,7 +368,7 @@ private class InProcessServerStream implements ServerStream {
       private int clientRequested;
       @GuardedBy("this")
       private ArrayDeque<StreamListener.MessageProducer> clientReceiveQueue =
-          new ArrayDeque<StreamListener.MessageProducer>();
+          new ArrayDeque<>();
       @GuardedBy("this")
       private Status clientNotifyStatus;
       @GuardedBy("this")
@@ -614,7 +614,7 @@ private class InProcessClientStream implements ClientStream {
       private int serverRequested;
       @GuardedBy("this")
       private ArrayDeque<StreamListener.MessageProducer> serverReceiveQueue =
-          new ArrayDeque<StreamListener.MessageProducer>();
+          new ArrayDeque<>();
       @GuardedBy("this")
       private boolean serverNotifyHalfClose;
       // Only is intended to prevent double-close when server closes.

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -209,7 +209,7 @@ public final T directExecutor() {
   @Override
   public final T executor(Executor executor) {
     if (executor != null) {
-      this.executorPool = new FixedObjectPool<Executor>(executor);
+      this.executorPool = new FixedObjectPool<>(executor);
     } else {
       this.executorPool = DEFAULT_EXECUTOR_POOL;
     }

File: core/src/main/java/io/grpc/internal/ApplicationThreadDeframer.java
Patch:
@@ -41,7 +41,7 @@ interface TransportExecutor {
   private final TransportExecutor transportExecutor;
 
   /** Queue for messages returned by the deframer when deframing in the application thread. */
-  private final Queue<InputStream> messageReadQueue = new ArrayDeque<InputStream>();
+  private final Queue<InputStream> messageReadQueue = new ArrayDeque<>();
 
   ApplicationThreadDeframer(
       MessageDeframer.Listener listener,

File: core/src/main/java/io/grpc/internal/CompositeReadableBuffer.java
Patch:
@@ -33,7 +33,7 @@
 public class CompositeReadableBuffer extends AbstractReadableBuffer {
 
   private int readableBytes;
-  private final Queue<ReadableBuffer> buffers = new ArrayDeque<ReadableBuffer>();
+  private final Queue<ReadableBuffer> buffers = new ArrayDeque<>();
 
   /**
    * Adds a new {@link ReadableBuffer} at the end of the buffer list. After a buffer is added, it is

File: core/src/main/java/io/grpc/internal/DelayedClientTransport.java
Patch:
@@ -65,7 +65,7 @@ final class DelayedClientTransport implements ManagedClientTransport {
 
   @Nonnull
   @GuardedBy("lock")
-  private Collection<PendingStream> pendingStreams = new LinkedHashSet<PendingStream>();
+  private Collection<PendingStream> pendingStreams = new LinkedHashSet<>();
 
   /**
    * When {@code shutdownStatus != null && !hasPendingStreams()}, then the transport is considered
@@ -240,7 +240,7 @@ public final void shutdownNow(Status status) {
       savedReportTransportTerminated = reportTransportTerminated;
       reportTransportTerminated = null;
       if (!pendingStreams.isEmpty()) {
-        pendingStreams = Collections.<PendingStream>emptyList();
+        pendingStreams = Collections.emptyList();
       }
     }
     if (savedReportTransportTerminated != null) {
@@ -322,7 +322,7 @@ public void run() {
       // Because delayed transport is long-lived, we take this opportunity to down-size the
       // hashmap.
       if (pendingStreams.isEmpty()) {
-        pendingStreams = new LinkedHashSet<PendingStream>();
+        pendingStreams = new LinkedHashSet<>();
       }
       if (!hasPendingStreams()) {
         // There may be a brief gap between delayed transport clearing in-use state, and first real

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -417,7 +417,7 @@ static ResolutionResults resolveAll(
   @SuppressWarnings("unchecked")
   @VisibleForTesting
   static List<Map<String, Object>> parseTxtResults(List<String> txtRecords) {
-    List<Map<String, Object>> serviceConfigs = new ArrayList<Map<String, Object>>();
+    List<Map<String, Object>> serviceConfigs = new ArrayList<>();
     for (String txtRecord : txtRecords) {
       if (txtRecord.startsWith(SERVICE_CONFIG_PREFIX)) {
         List<Map<String, Object>> choices;

File: core/src/main/java/io/grpc/internal/Http2Ping.java
Patch:
@@ -51,7 +51,7 @@ public class Http2Ping {
    * The registered callbacks and the executor used to invoke them.
    */
   @GuardedBy("this") private Map<PingCallback, Executor> callbacks
-      = new LinkedHashMap<PingCallback, Executor>();
+      = new LinkedHashMap<>();
 
   /**
    * False until the operation completes, either successfully (other side sent acknowledgement) or

File: core/src/main/java/io/grpc/internal/InUseStateAggregator.java
Patch:
@@ -25,7 +25,7 @@
 @NotThreadSafe
 public abstract class InUseStateAggregator<T> {
 
-  private final HashSet<T> inUseObjects = new HashSet<T>();
+  private final HashSet<T> inUseObjects = new HashSet<>();
 
   /**
    * Update the in-use state of an object. Initially no object is in use.

File: core/src/main/java/io/grpc/internal/InternalHandlerRegistry.java
Patch:
@@ -57,7 +57,7 @@ static final class Builder {
 
     // Store per-service first, to make sure services are added/replaced atomically.
     private final HashMap<String, ServerServiceDefinition> services =
-        new LinkedHashMap<String, ServerServiceDefinition>();
+        new LinkedHashMap<>();
 
     Builder addService(ServerServiceDefinition service) {
       services.put(service.getServiceDescriptor().getName(), service);
@@ -66,7 +66,7 @@ Builder addService(ServerServiceDefinition service) {
 
     InternalHandlerRegistry build() {
       Map<String, ServerMethodDefinition<?, ?>> map =
-          new HashMap<String, ServerMethodDefinition<?, ?>>();
+          new HashMap<>();
       for (ServerServiceDefinition service : services.values()) {
         for (ServerMethodDefinition<?, ?> method : service.getMethods()) {
           map.put(method.getMethodDescriptor().getFullMethodName(), method);

File: core/src/main/java/io/grpc/internal/JndiResourceResolverFactory.java
Patch:
@@ -251,7 +251,7 @@ public List<String> getAllRecords(String recordType, String name) throws NamingE
       List<String> records = new ArrayList<>();
 
       @SuppressWarnings("JdkObsolete")
-      Hashtable<String, String> env = new Hashtable<String, String>();
+      Hashtable<String, String> env = new Hashtable<>();
       env.put("com.sun.jndi.ldap.connect.timeout", "5000");
       env.put("com.sun.jndi.ldap.read.timeout", "5000");
       DirContext dirContext = new InitialDirContext(env);

File: core/src/main/java/io/grpc/internal/JsonParser.java
Patch:
@@ -79,7 +79,7 @@ private static Object parseRecursive(JsonReader jr) throws IOException {
 
   private static Map<String, Object> parseJsonObject(JsonReader jr) throws IOException {
     jr.beginObject();
-    Map<String, Object> obj = new LinkedHashMap<String, Object>();
+    Map<String, Object> obj = new LinkedHashMap<>();
     while (jr.hasNext()) {
       String name = jr.nextName();
       Object value = parseRecursive(jr);

File: core/src/main/java/io/grpc/internal/ManagedChannelOrphanWrapper.java
Patch:
@@ -30,10 +30,10 @@
 
 final class ManagedChannelOrphanWrapper extends ForwardingManagedChannel {
   private static final ReferenceQueue<ManagedChannelOrphanWrapper> refqueue =
-      new ReferenceQueue<ManagedChannelOrphanWrapper>();
+      new ReferenceQueue<>();
   // Retain the References so they don't get GC'd
   private static final ConcurrentMap<ManagedChannelReference, ManagedChannelReference> refs =
-      new ConcurrentHashMap<ManagedChannelReference, ManagedChannelReference>();
+      new ConcurrentHashMap<>();
   private static final Logger logger =
       Logger.getLogger(ManagedChannelOrphanWrapper.class.getName());
 
@@ -89,7 +89,7 @@ static final class ManagedChannelReference extends WeakReference<ManagedChannelO
         ReferenceQueue<ManagedChannelOrphanWrapper> refqueue,
         ConcurrentMap<ManagedChannelReference, ManagedChannelReference> refs) {
       super(orphanable, refqueue);
-      allocationSite = new SoftReference<RuntimeException>(
+      allocationSite = new SoftReference<>(
           ENABLE_ALLOCATION_TRACKING
               ? new RuntimeException("ManagedChannel allocation site")
               : missingCallSite);

File: core/src/main/java/io/grpc/internal/OobChannel.java
Patch:
@@ -191,7 +191,7 @@ void updateAddresses(EquivalentAddressGroup eag) {
   @Override
   public <RequestT, ResponseT> ClientCall<RequestT, ResponseT> newCall(
       MethodDescriptor<RequestT, ResponseT> methodDescriptor, CallOptions callOptions) {
-    return new ClientCallImpl<RequestT, ResponseT>(methodDescriptor,
+    return new ClientCallImpl<>(methodDescriptor,
         callOptions.getExecutor() == null ? executor : callOptions.getExecutor(),
         callOptions, transportProvider, deadlineCancellationExecutor, channelCallsTracer,
         false /* retryEnabled */);

File: core/src/main/java/io/grpc/internal/SerializeReentrantCallsDirectExecutor.java
Patch:
@@ -74,7 +74,7 @@ private void completeQueuedTasks() {
 
   private void enqueue(Runnable r) {
     if (taskQueue == null) {
-      taskQueue = new ArrayDeque<Runnable>(4);
+      taskQueue = new ArrayDeque<>(4);
     }
     taskQueue.add(r);
   }

File: core/src/main/java/io/grpc/internal/SerializingExecutor.java
Patch:
@@ -62,7 +62,7 @@ private static AtomicHelper getAtomicHelper() {
   private final Executor executor;
 
   /** A list of Runnables to be run in order. */
-  private final Queue<Runnable> runQueue = new ConcurrentLinkedQueue<Runnable>();
+  private final Queue<Runnable> runQueue = new ConcurrentLinkedQueue<>();
 
   private volatile int runState = STOPPED;
 

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -190,7 +190,7 @@ public boolean isCancelled() {
   }
 
   ServerStreamListener newServerStreamListener(ServerCall.Listener<ReqT> listener) {
-    return new ServerStreamListenerImpl<ReqT>(this, listener, context);
+    return new ServerStreamListenerImpl<>(this, listener, context);
   }
 
   @Override

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -554,7 +554,7 @@ private <ReqT, RespT> ServerStreamListener startCall(ServerStream stream, String
         Context.CancellableContext context, StatsTraceContext statsTraceCtx) {
       // TODO(ejona86): should we update fullMethodName to have the canonical path of the method?
       statsTraceCtx.serverCallStarted(
-          new ServerCallInfoImpl<ReqT, RespT>(
+          new ServerCallInfoImpl<>(
               methodDef.getMethodDescriptor(), // notify with original method descriptor
               stream.getAttributes(),
               stream.getAuthority()));
@@ -574,7 +574,7 @@ private <WReqT, WRespT> ServerStreamListener startWrappedCall(
         ServerStream stream,
         Metadata headers,
         Context.CancellableContext context) {
-      ServerCallImpl<WReqT, WRespT> call = new ServerCallImpl<WReqT, WRespT>(
+      ServerCallImpl<WReqT, WRespT> call = new ServerCallImpl<>(
           stream,
           methodDef.getMethodDescriptor(),
           headers,

File: core/src/main/java/io/grpc/internal/SharedResourceHolder.java
Patch:
@@ -53,7 +53,7 @@ public ScheduledExecutorService createScheduledExecutor() {
       });
 
   private final IdentityHashMap<Resource<?>, Instance> instances =
-      new IdentityHashMap<Resource<?>, Instance>();
+      new IdentityHashMap<>();
 
   private final ScheduledExecutorFactory destroyerFactory;
 

File: core/src/main/java/io/grpc/internal/SharedResourcePool.java
Patch:
@@ -27,7 +27,7 @@ private SharedResourcePool(SharedResourceHolder.Resource<T> resource) {
   }
 
   public static <T> SharedResourcePool<T> forResource(SharedResourceHolder.Resource<T> resource) {
-    return new SharedResourcePool<T>(resource);
+    return new SharedResourcePool<>(resource);
   }
 
   @Override

File: core/src/main/java/io/grpc/internal/SubchannelChannel.java
Patch:
@@ -106,7 +106,7 @@ public void halfClose() {}
         public void sendMessage(RequestT message) {}
       };
     }
-    return new ClientCallImpl<RequestT, ResponseT>(methodDescriptor,
+    return new ClientCallImpl<>(methodDescriptor,
         effectiveExecutor,
         callOptions.withOption(GrpcUtil.CALL_OPTIONS_RPC_OWNED_BY_BALANCER, Boolean.TRUE),
         transportProvider, deadlineCancellationExecutor, callsTracer, false /* retryEnabled */);

File: core/src/main/java/io/grpc/util/MutableHandlerRegistry.java
Patch:
@@ -40,7 +40,7 @@
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/933")
 public final class MutableHandlerRegistry extends HandlerRegistry {
   private final ConcurrentMap<String, ServerServiceDefinition> services
-      = new ConcurrentHashMap<String, ServerServiceDefinition>();
+      = new ConcurrentHashMap<>();
 
   /**
    * Registers a service.

File: core/src/main/java/io/grpc/util/TransmitStatusRuntimeExceptionInterceptor.java
Patch:
@@ -56,7 +56,7 @@ public static ServerInterceptor instance() {
   @Override
   public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(
       ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {
-    final ServerCall<ReqT, RespT> serverCall = new SerializingServerCall<ReqT, RespT>(call);
+    final ServerCall<ReqT, RespT> serverCall = new SerializingServerCall<>(call);
     ServerCall.Listener<ReqT> listener = next.startCall(serverCall, headers);
     return new ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT>(listener) {
       @Override

File: core/src/test/java/io/grpc/ContextsTest.java
Patch:
@@ -48,7 +48,7 @@ public class ContextsTest {
   /** For use in comparing context by reference. */
   private Context uniqueContext = Context.ROOT.withValue(contextKey, new Object());
   @SuppressWarnings("unchecked")
-  private ServerCall<Object, Object> call = new NoopServerCall<Object, Object>();
+  private ServerCall<Object, Object> call = new NoopServerCall<>();
   private Metadata headers = new Metadata();
 
   @Test

File: core/src/test/java/io/grpc/DecompressorRegistryTest.java
Patch:
@@ -49,7 +49,7 @@ public void lookupDecompressor_checkDefaultMessageEncodingsExist() {
 
   @Test
   public void getKnownMessageEncodings_checkDefaultMessageEncodingsExist() {
-    Set<String> knownEncodings = new HashSet<String>();
+    Set<String> knownEncodings = new HashSet<>();
     knownEncodings.add("identity");
     knownEncodings.add("gzip");
 

File: core/src/test/java/io/grpc/MetadataTest.java
Patch:
@@ -140,7 +140,7 @@ public void testWriteParsed() {
     Metadata metadata = new Metadata();
     metadata.put(KEY, lance);
     assertEquals(lance, metadata.get(KEY));
-    Iterator<Fish> fishes = metadata.<Fish>getAll(KEY).iterator();
+    Iterator<Fish> fishes = metadata.getAll(KEY).iterator();
     assertTrue(fishes.hasNext());
     assertEquals(fishes.next(), lance);
     assertFalse(fishes.hasNext());
@@ -192,7 +192,7 @@ public void headerMergeShouldCopyValues() {
 
     h1.merge(h2);
 
-    Iterator<Fish> fishes = h1.<Fish>getAll(KEY).iterator();
+    Iterator<Fish> fishes = h1.getAll(KEY).iterator();
     assertTrue(fishes.hasNext());
     assertEquals(fishes.next(), lance);
     assertFalse(fishes.hasNext());

File: core/src/test/java/io/grpc/NameResolverProviderTest.java
Patch:
@@ -41,7 +41,7 @@ public class NameResolverProviderTest {
 
   @Test
   public void getDefaultScheme_noProvider() {
-    List<NameResolverProvider> providers = Collections.<NameResolverProvider>emptyList();
+    List<NameResolverProvider> providers = Collections.emptyList();
     NameResolver.Factory factory = NameResolverProvider.asFactory(providers);
     try {
       factory.getDefaultScheme();
@@ -67,7 +67,7 @@ public NameResolver newNameResolver(URI passedUri, Attributes passedAttributes)
 
   @Test
   public void newNameResolver_noProvider() {
-    List<NameResolverProvider> providers = Collections.<NameResolverProvider>emptyList();
+    List<NameResolverProvider> providers = Collections.emptyList();
     NameResolver.Factory factory = NameResolverProvider.asFactory(providers);
     try {
       factory.newNameResolver(uri, attributes);

File: core/src/test/java/io/grpc/ServiceProvidersTestUtil.java
Patch:
@@ -41,7 +41,7 @@ static void testHardcodedClasses(
       String callableClassName,
       ClassLoader cl,
       Set<String> hardcodedClassNames) throws Exception {
-    final Set<String> notLoaded = new HashSet<String>(hardcodedClassNames);
+    final Set<String> notLoaded = new HashSet<>(hardcodedClassNames);
     cl = new ClassLoader(cl) {
       @Override
       public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {

File: core/src/test/java/io/grpc/SynchronizationContextTest.java
Patch:
@@ -99,8 +99,8 @@ public void multiThread() throws Exception {
     final CountDownLatch task1Running = new CountDownLatch(1);
     final CountDownLatch task1Proceed = new CountDownLatch(1);
     final CountDownLatch sideThreadDone = new CountDownLatch(1);
-    final AtomicReference<Thread> task1Thread = new AtomicReference<Thread>();
-    final AtomicReference<Thread> task2Thread = new AtomicReference<Thread>();
+    final AtomicReference<Thread> task1Thread = new AtomicReference<>();
+    final AtomicReference<Thread> task2Thread = new AtomicReference<>();
 
     doAnswer(new Answer<Void>() {
         @Override

File: core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java
Patch:
@@ -85,7 +85,7 @@ public void setUp() {
    */
   @Test
   public void frameShouldBeIgnoredAfterDeframerClosed() {
-    final Queue<InputStream> streamListenerMessageQueue = new LinkedList<InputStream>();
+    final Queue<InputStream> streamListenerMessageQueue = new LinkedList<>();
     stream.transportState().setListener(new ServerStreamListenerBase() {
       @Override
       public void messagesAvailable(MessageProducer producer) {

File: core/src/test/java/io/grpc/internal/ApplicationThreadDeframerTest.java
Patch:
@@ -117,7 +117,7 @@ public void deframeFailedInvokesTransportExecutor() {
   public void messagesAvailableDrainsToMessageReadQueue_returnedByInitializingMessageProducer()
       throws Exception {
     byte[][] messageBytes = {{1, 2, 3}, {4}, {5, 6}};
-    Queue<InputStream> messages = new LinkedList<InputStream>();
+    Queue<InputStream> messages = new LinkedList<>();
     for (int i = 0; i < messageBytes.length; i++) {
       messages.add(new ByteArrayInputStream(messageBytes[i]));
     }

File: core/src/test/java/io/grpc/internal/ChannelLoggerImplTest.java
Patch:
@@ -43,7 +43,7 @@ public class ChannelLoggerImplTest {
   private final FakeClock clock = new FakeClock();
   private final InternalLogId logId = InternalLogId.allocate("test", /*details=*/ null);
   private final String logPrefix = "[" + logId + "] ";
-  private final ArrayList<String> logs = new ArrayList<String>();
+  private final ArrayList<String> logs = new ArrayList<>();
   private final Handler handler = new Handler() {
       @Override
       public void publish(LogRecord record) {

File: core/src/test/java/io/grpc/internal/ChannelTracerTest.java
Patch:
@@ -40,7 +40,7 @@
 @RunWith(JUnit4.class)
 public class ChannelTracerTest {
   private static final Logger logger = Logger.getLogger(ChannelLogger.class.getName());
-  private final ArrayList<LogRecord> logs = new ArrayList<LogRecord>();
+  private final ArrayList<LogRecord> logs = new ArrayList<>();
   private final Handler handler = new Handler() {
       @Override
       public void publish(LogRecord record) {

File: core/src/test/java/io/grpc/internal/ConnectivityStateManagerTest.java
Patch:
@@ -43,7 +43,7 @@ public class ConnectivityStateManagerTest {
 
   private final FakeClock executor = new FakeClock();
   private final ConnectivityStateManager state = new ConnectivityStateManager();
-  private final LinkedList<ConnectivityState> sink = new LinkedList<ConnectivityState>();
+  private final LinkedList<ConnectivityState> sink = new LinkedList<>();
 
   @Test
   public void noCallback() {
@@ -147,7 +147,7 @@ public void run() {
 
   @Test
   public void multipleCallbacks() {
-    final LinkedList<String> callbackRuns = new LinkedList<String>();
+    final LinkedList<String> callbackRuns = new LinkedList<>();
     state.notifyWhenStateChanged(new Runnable() {
         @Override
         public void run() {

File: core/src/test/java/io/grpc/internal/FakeClock.java
Patch:
@@ -268,7 +268,7 @@ private void checkDueTasks() {
    */
   public Collection<ScheduledTask> getDueTasks() {
     checkDueTasks();
-    return new ArrayList<ScheduledTask>(dueTasks);
+    return new ArrayList<>(dueTasks);
   }
 
   /**

File: core/src/test/java/io/grpc/internal/ForwardingManagedChannelTest.java
Patch:
@@ -86,7 +86,7 @@ public void awaitTermination() throws Exception {
 
   @Test
   public void newCall() {
-    NoopClientCall<Void, Void> clientCall = new NoopClientCall<Void, Void>();
+    NoopClientCall<Void, Void> clientCall = new NoopClientCall<>();
     CallOptions callOptions = CallOptions.DEFAULT.withoutWaitForReady();
     MethodDescriptor<Void, Void> method = TestMethodDescriptors.voidMethod();
     when(mock.newCall(same(method), same(callOptions))).thenReturn(clientCall);

File: core/src/test/java/io/grpc/internal/InternalSubchannelTest.java
Patch:
@@ -102,7 +102,7 @@ public void uncaughtException(Thread t, Throwable e) {
   @Mock private BackoffPolicy.Provider mockBackoffPolicyProvider;
   @Mock private ClientTransportFactory mockTransportFactory;
 
-  private final LinkedList<String> callbackInvokes = new LinkedList<String>();
+  private final LinkedList<String> callbackInvokes = new LinkedList<>();
   private final InternalSubchannel.Callback mockInternalSubchannelCallback =
       new InternalSubchannel.Callback() {
         @Override

File: core/src/test/java/io/grpc/internal/JsonParserTest.java
Patch:
@@ -117,7 +117,7 @@ public void objectNoName() throws IOException {
 
   @Test
   public void objectStringName() throws IOException {
-    LinkedHashMap<String, Object> expected = new LinkedHashMap<String, Object>();
+    LinkedHashMap<String, Object> expected = new LinkedHashMap<>();
     expected.put("hi", Double.valueOf("2"));
 
     assertEquals(expected, JsonParser.parse("{\"hi\": 2}"));

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -484,7 +484,7 @@ public String toString() {
   // We need this because createSubchannel() should be called from the SynchronizationContext
   private static Subchannel createSubchannelSafely(
       final Helper helper, final EquivalentAddressGroup addressGroup, final Attributes attrs) {
-    final AtomicReference<Subchannel> resultCapture = new AtomicReference<Subchannel>();
+    final AtomicReference<Subchannel> resultCapture = new AtomicReference<>();
     helper.getSynchronizationContext().execute(
         new Runnable() {
           @Override

File: core/src/test/java/io/grpc/internal/RetriableStreamTest.java
Patch:
@@ -632,7 +632,7 @@ public void operationsWhileDraining() {
     ArgumentCaptor<ClientStreamListener> sublistenerCaptor1 =
         ArgumentCaptor.forClass(ClientStreamListener.class);
     final AtomicReference<ClientStreamListener> sublistenerCaptor2 =
-        new AtomicReference<ClientStreamListener>();
+        new AtomicReference<>();
     final Status cancelStatus = Status.CANCELLED.withDescription("c");
     ClientStream mockStream1 =
         mock(
@@ -762,7 +762,7 @@ public void isReady_whenDrained() {
   @Test
   public void isReady_whileDraining() {
     final AtomicReference<ClientStreamListener> sublistenerCaptor1 =
-        new AtomicReference<ClientStreamListener>();
+        new AtomicReference<>();
     final List<Boolean> readiness = new ArrayList<>();
     ClientStream mockStream1 =
         mock(

File: core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java
Patch:
@@ -46,7 +46,7 @@
 public class SharedResourceHolderTest {
 
   private final LinkedList<MockScheduledFuture<?>> scheduledDestroyTasks =
-      new LinkedList<MockScheduledFuture<?>>();
+      new LinkedList<>();
 
   private SharedResourceHolder holder;
 
@@ -186,7 +186,7 @@ public MockScheduledFuture<Void> answer(InvocationOnMock invocation) {
               Runnable command = (Runnable) args[0];
               long delay = (Long) args[1];
               TimeUnit unit = (TimeUnit) args[2];
-              MockScheduledFuture<Void> future = new MockScheduledFuture<Void>(
+              MockScheduledFuture<Void> future = new MockScheduledFuture<>(
                   command, delay, unit);
               scheduledDestroyTasks.add(future);
               return future;

File: core/src/test/java/io/grpc/internal/TestUtils.java
Patch:
@@ -69,7 +69,7 @@ static BlockingQueue<MockClientTransportInfo> captureTransports(
   static BlockingQueue<MockClientTransportInfo> captureTransports(
       ClientTransportFactory mockTransportFactory, @Nullable final Runnable startRunnable) {
     final BlockingQueue<MockClientTransportInfo> captor =
-        new LinkedBlockingQueue<MockClientTransportInfo>();
+        new LinkedBlockingQueue<>();
 
     doAnswer(new Answer<ConnectionClientTransport>() {
       @Override

File: core/src/test/java/io/grpc/util/ForwardingLoadBalancerHelperTest.java
Patch:
@@ -56,7 +56,7 @@ public Object get(Method method, int argPos, Class<?> clazz) {
             if (clazz.equals(EquivalentAddressGroup.class)) {
               return new EquivalentAddressGroup(Arrays.asList(mockAddr));
             } else if (clazz.equals(List.class)) {
-              return Collections.<Object>emptyList();
+              return Collections.emptyList();
             }
             return null;
           }

File: core/src/test/java/io/grpc/util/UtilServerInterceptorsTest.java
Patch:
@@ -76,7 +76,7 @@ public void statusRuntimeExceptionTransmitter() {
     final Status expectedStatus = Status.UNAVAILABLE;
     final Metadata expectedMetadata = new Metadata();
     FakeServerCall<Void, Void> call =
-        new FakeServerCall<Void, Void>(expectedStatus, expectedMetadata);
+        new FakeServerCall<>(expectedStatus, expectedMetadata);
     final StatusRuntimeException exception =
         new StatusRuntimeException(expectedStatus, expectedMetadata);
     listener = new VoidCallListener() {
@@ -126,7 +126,7 @@ public void statusRuntimeExceptionTransmitterIgnoresClosedCalls() {
     final Metadata expectedMetadata = new Metadata();
 
     FakeServerCall<Void, Void> call =
-        new FakeServerCall<Void, Void>(expectedStatus, expectedMetadata);
+        new FakeServerCall<>(expectedStatus, expectedMetadata);
     final StatusRuntimeException exception =
         new StatusRuntimeException(expectedStatus, expectedMetadata);
 

File: examples/src/test/java/io/grpc/examples/routeguide/RouteGuideServerTest.java
Patch:
@@ -159,7 +159,7 @@ public void onCompleted() {
     assertTrue(latch.await(1, TimeUnit.SECONDS));
 
     // verify
-    assertEquals(new HashSet<Feature>(Arrays.asList(f2, f3)), result);
+    assertEquals(new HashSet<>(Arrays.asList(f2, f3)), result);
   }
 
   @Test

File: grpclb/src/main/java/io/grpc/grpclb/CachedSubchannelPool.java
Patch:
@@ -34,7 +34,7 @@
  */
 final class CachedSubchannelPool implements SubchannelPool {
   private final HashMap<EquivalentAddressGroup, CacheEntry> cache =
-      new HashMap<EquivalentAddressGroup, CacheEntry>();
+      new HashMap<>();
 
   private Helper helper;
 

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbClientLoadRecorder.java
Patch:
@@ -64,7 +64,7 @@ private static final class LongHolder {
 
   // Specific finish types
   @GuardedBy("this")
-  private Map<String, LongHolder> callsDroppedPerToken = new HashMap<String, LongHolder>(1);
+  private Map<String, LongHolder> callsDroppedPerToken = new HashMap<>(1);
   @SuppressWarnings("unused")
   private volatile long callsFailedToSend;
   @SuppressWarnings("unused")
@@ -112,7 +112,7 @@ ClientStats generateLoadReport() {
     synchronized (this) {
       if (!callsDroppedPerToken.isEmpty()) {
         localCallsDroppedPerToken = callsDroppedPerToken;
-        callsDroppedPerToken = new HashMap<String, LongHolder>(localCallsDroppedPerToken.size());
+        callsDroppedPerToken = new HashMap<>(localCallsDroppedPerToken.size());
       }
     }
     for (Entry<String, LongHolder> entry : localCallsDroppedPerToken.entrySet()) {

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -335,7 +335,7 @@ private void useRoundRobinLists(
     logger.log(
         ChannelLogLevel.INFO, "Using RR list={0}, drop={1}", newBackendAddrList, newDropList);
     HashMap<EquivalentAddressGroup, Subchannel> newSubchannelMap =
-        new HashMap<EquivalentAddressGroup, Subchannel>();
+        new HashMap<>();
     List<BackendEntry> newBackendList = new ArrayList<>();
 
     for (BackendAddressGroup backendAddr : newBackendAddrList) {
@@ -346,7 +346,7 @@ private void useRoundRobinLists(
         if (subchannel == null) {
           Attributes subchannelAttrs = Attributes.newBuilder()
               .set(STATE_INFO,
-                  new AtomicReference<ConnectivityStateInfo>(
+                  new AtomicReference<>(
                       ConnectivityStateInfo.forNonError(IDLE)))
               .build();
           subchannel = subchannelPool.takeOrCreateSubchannel(eag, subchannelAttrs);

File: interop-testing/src/main/java/io/grpc/testing/integration/StressTestClient.java
Patch:
@@ -109,15 +109,15 @@ public void run() {
 
   private Server metricsServer;
   private final Map<String, Metrics.GaugeResponse> gauges =
-      new ConcurrentHashMap<String, Metrics.GaugeResponse>();
+      new ConcurrentHashMap<>();
 
   private volatile boolean shutdown;
 
   /**
    * List of futures that {@link #blockUntilStressTestComplete()} waits for.
    */
   private final List<ListenableFuture<?>> workerFutures =
-      new ArrayList<ListenableFuture<?>>();
+      new ArrayList<>();
   private final List<ManagedChannel> channels = new ArrayList<>();
   private ListeningExecutorService threadpool;
 
@@ -325,7 +325,7 @@ private static List<TestCaseWeightPair> parseTestCases(String testCasesStr) {
   }
 
   private static List<List<String>> parseCommaSeparatedTuples(String str) {
-    List<List<String>> tuples = new ArrayList<List<String>>();
+    List<List<String>> tuples = new ArrayList<>();
     for (String tupleStr : Splitter.on(',').split(str)) {
       int splitIdx = tupleStr.lastIndexOf(':');
       if (splitIdx == -1) {

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -372,7 +372,7 @@ private void assertNotFailed() {
    * Breaks down the request and creates a queue of response chunks for the given request.
    */
   public Queue<Chunk> toChunkQueue(StreamingOutputCallRequest request) {
-    Queue<Chunk> chunkQueue = new ArrayDeque<Chunk>();
+    Queue<Chunk> chunkQueue = new ArrayDeque<>();
     int offset = 0;
     for (ResponseParameters params : request.getResponseParametersList()) {
       chunkQueue.add(new Chunk(params.getIntervalUs(), offset, params.getSize()));

File: interop-testing/src/test/java/io/grpc/ChannelAndServerBuilderTest.java
Patch:
@@ -55,9 +55,9 @@ public static Collection<Object[]> params() throws Exception {
         ClassPath.from(loader).getTopLevelClassesRecursive("io.grpc");
     // Java 9 doesn't expose the URLClassLoader, which breaks searching through the classpath
     if (classInfos.isEmpty()) {
-      return new ArrayList<Object[]>();
+      return new ArrayList<>();
     }
-    List<Object[]> classes = new ArrayList<Object[]>();
+    List<Object[]> classes = new ArrayList<>();
     for (ClassInfo classInfo : classInfos) {
       Class<?> clazz = Class.forName(classInfo.getName(), false /*initialize*/, loader);
       if (ServerBuilder.class.isAssignableFrom(clazz) && clazz != ServerBuilder.class) {

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -60,7 +60,7 @@ public class StubConfigTest {
   @Before public void setUp() {
     MockitoAnnotations.initMocks(this);
     ClientCall<SimpleRequest, SimpleResponse> call =
-        new NoopClientCall<SimpleRequest, SimpleResponse>();
+        new NoopClientCall<>();
     when(channel.newCall(
         Mockito.<MethodDescriptor<SimpleRequest, SimpleResponse>>any(), any(CallOptions.class)))
         .thenReturn(call);

File: interop-testing/src/test/java/io/grpc/testing/integration/CompressionTest.java
Patch:
@@ -147,7 +147,7 @@ public void tearDown() {
   @Parameters
   public static Collection<Object[]> params() {
     boolean[] bools = new boolean[]{false, true};
-    List<Object[]> combos = new ArrayList<Object[]>(64);
+    List<Object[]> combos = new ArrayList<>(64);
     for (boolean enableClientMessageCompression : bools) {
       for (boolean clientAcceptEncoding : bools) {
         for (boolean clientEncoding : bools) {
@@ -280,7 +280,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
       }
       ClientCall<ReqT, RespT> call = next.newCall(method, callOptions);
 
-      return new ClientCompressor<ReqT, RespT>(call);
+      return new ClientCompressor<>(call);
     }
   }
 
@@ -291,7 +291,7 @@ protected ClientCompressor(ClientCall<ReqT, RespT> delegate) {
 
     @Override
     public void start(io.grpc.ClientCall.Listener<RespT> responseListener, Metadata headers) {
-      super.start(new ClientHeadersCapture<RespT>(responseListener), headers);
+      super.start(new ClientHeadersCapture<>(responseListener), headers);
       setMessageCompression(enableClientMessageCompression);
     }
   }

File: interop-testing/src/test/java/io/grpc/testing/integration/TestCasesTest.java
Patch:
@@ -76,7 +76,7 @@ public void testCaseNamesShouldMapToEnums() {
 
     assertEquals(testCases.length + additionalTestCases.length, TestCases.values().length);
 
-    Set<TestCases> testCaseSet = new HashSet<TestCases>(testCases.length);
+    Set<TestCases> testCaseSet = new HashSet<>(testCases.length);
     for (String testCase : testCases) {
       testCaseSet.add(TestCases.fromString(testCase));
     }

File: interop-testing/src/test/java/io/grpc/testing/integration/TrafficControlProxy.java
Patch:
@@ -186,7 +186,7 @@ private class MessageQueue {
     DataInputStream inStream;
     DataOutputStream outStream;
     int bytesQueued;
-    BlockingQueue<Message> queue = new DelayQueue<Message>();
+    BlockingQueue<Message> queue = new DelayQueue<>();
 
     MessageQueue(DataInputStream inputStream, DataOutputStream outputStream) {
       inStream = inputStream;

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -66,7 +66,7 @@ public final class NettyChannelBuilder
   private static final long AS_LARGE_AS_INFINITE = TimeUnit.DAYS.toNanos(1000L);
 
   private final Map<ChannelOption<?>, Object> channelOptions =
-      new HashMap<ChannelOption<?>, Object>();
+      new HashMap<>();
 
   private NegotiationType negotiationType = NegotiationType.TLS;
   private OverrideAuthorityChecker authorityChecker;

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -445,7 +445,7 @@ static void logSslEngineDetails(Level level, ChannelHandlerContext ctx, String m
   public abstract static class AbstractBufferingHandler extends ChannelDuplexHandler {
 
     private ChannelHandler[] handlers;
-    private Queue<ChannelWrite> bufferedWrites = new ArrayDeque<ChannelWrite>();
+    private Queue<ChannelWrite> bufferedWrites = new ArrayDeque<>();
     private boolean writing;
     private boolean flushRequested;
     private Throwable failCause;

File: netty/src/main/java/io/grpc/netty/WriteQueue.java
Patch:
@@ -51,7 +51,7 @@ public void run() {
 
   public WriteQueue(Channel channel) {
     this.channel = Preconditions.checkNotNull(channel, "channel");
-    queue = new ConcurrentLinkedQueue<QueuedCommand>();
+    queue = new ConcurrentLinkedQueue<>();
   }
 
   /**

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -129,7 +129,7 @@ public class NettyClientHandlerTest extends NettyHandlerTestBase<NettyClientHand
   @Mock
   private ClientStreamListener streamListener;
 
-  private final Queue<InputStream> streamListenerMessageQueue = new LinkedList<InputStream>();
+  private final Queue<InputStream> streamListenerMessageQueue = new LinkedList<>();
 
   @Override
   protected void manualSetUp() throws Exception {

File: netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java
Patch:
@@ -92,7 +92,7 @@ public class NettyClientStreamTest extends NettyStreamTestBase<NettyClientStream
 
   @SuppressWarnings("unchecked")
   private MethodDescriptor.Marshaller<Void> marshaller = mock(MethodDescriptor.Marshaller.class);
-  private final Queue<InputStream> listenerMessageQueue = new LinkedList<InputStream>();
+  private final Queue<InputStream> listenerMessageQueue = new LinkedList<>();
 
   // Must be initialized before @Before, because it is used by createStream()
   private MethodDescriptor<?, ?> methodDescriptor = MethodDescriptor.<Void, Void>newBuilder()

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -173,7 +173,7 @@ public void addDefaultUserAgent() throws Exception {
   @Test
   public void setSoLingerChannelOption() throws IOException {
     startServer();
-    Map<ChannelOption<?>, Object> channelOptions = new HashMap<ChannelOption<?>, Object>();
+    Map<ChannelOption<?>, Object> channelOptions = new HashMap<>();
     // set SO_LINGER option
     int soLinger = 123;
     channelOptions.put(ChannelOption.SO_LINGER, soLinger);

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -130,7 +130,7 @@ public class NettyServerHandlerTest extends NettyHandlerTestBase<NettyServerHand
   private NettyServerStream stream;
   private KeepAliveManager spyKeepAliveManager;
 
-  final Queue<InputStream> streamListenerMessageQueue = new LinkedList<InputStream>();
+  final Queue<InputStream> streamListenerMessageQueue = new LinkedList<>();
 
   private int maxConcurrentStreams = Integer.MAX_VALUE;
   private int maxHeaderListSize = Integer.MAX_VALUE;

File: netty/src/test/java/io/grpc/netty/NettyServerStreamTest.java
Patch:
@@ -69,7 +69,7 @@ public class NettyServerStreamTest extends NettyStreamTestBase<NettyServerStream
   private NettyServerHandler handler;
 
   private Metadata trailers = new Metadata();
-  private final Queue<InputStream> listenerMessageQueue = new LinkedList<InputStream>();
+  private final Queue<InputStream> listenerMessageQueue = new LinkedList<>();
 
   @Before
   @Override

File: netty/src/test/java/io/grpc/netty/NettyServerTest.java
Patch:
@@ -122,7 +122,7 @@ public void childChannelOptions() throws Exception {
     final int originalLowWaterMark = 2097169;
     final int originalHighWaterMark = 2097211;
 
-    Map<ChannelOption<?>, Object> channelOptions = new HashMap<ChannelOption<?>, Object>();
+    Map<ChannelOption<?>, Object> channelOptions = new HashMap<>();
 
     channelOptions.put(ChannelOption.WRITE_BUFFER_WATER_MARK,
         new WriteBufferWaterMark(originalLowWaterMark, originalHighWaterMark));

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientStreamTest.java
Patch:
@@ -109,7 +109,7 @@ public void getType() {
 
   @Test
   public void cancel_notStarted() {
-    final AtomicReference<Status> statusRef = new AtomicReference<Status>();
+    final AtomicReference<Status> statusRef = new AtomicReference<>();
     stream.start(new BaseClientStreamListener() {
       @Override
       public void closed(

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -1925,7 +1925,7 @@ enum Result {
       THROW_ERROR
     }
 
-    final LinkedBlockingQueue<Result> nextResults = new LinkedBlockingQueue<Result>();
+    final LinkedBlockingQueue<Result> nextResults = new LinkedBlockingQueue<>();
 
     @Override
     public void close() throws IOException {

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/Util.java
Patch:
@@ -222,7 +222,7 @@ public static <T> List<T> immutableList(T[] elements) {
 
   /** Returns an immutable copy of {@code map}. */
   public static <K, V> Map<K, V> immutableMap(Map<K, V> map) {
-    return Collections.unmodifiableMap(new LinkedHashMap<K, V>(map));
+    return Collections.unmodifiableMap(new LinkedHashMap<>(map));
   }
 
   public static ThreadFactory threadFactory(final String name, final boolean daemon) {

File: okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/framed/Hpack.java
Patch:
@@ -118,7 +118,7 @@ private Hpack() {
   // http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#section-3.1
   static final class Reader {
 
-    private final List<io.grpc.okhttp.internal.framed.Header> headerList = new ArrayList<io.grpc.okhttp.internal.framed.Header>();
+    private final List<io.grpc.okhttp.internal.framed.Header> headerList = new ArrayList<>();
     private final BufferedSource source;
 
     private int headerTableSizeSetting;
@@ -222,7 +222,7 @@ void readHeaders() throws IOException {
     }
 
     public List<io.grpc.okhttp.internal.framed.Header> getAndResetHeaderList() {
-      List<io.grpc.okhttp.internal.framed.Header> result = new ArrayList<io.grpc.okhttp.internal.framed.Header>(headerList);
+      List<io.grpc.okhttp.internal.framed.Header> result = new ArrayList<>(headerList);
       headerList.clear();
       return result;
     }
@@ -362,7 +362,7 @@ ByteString readByteString() throws IOException {
 
   private static Map<ByteString, Integer> nameToFirstIndex() {
     Map<ByteString, Integer> result =
-        new LinkedHashMap<ByteString, Integer>(STATIC_HEADER_TABLE.length);
+        new LinkedHashMap<>(STATIC_HEADER_TABLE.length);
     for (int i = 0; i < STATIC_HEADER_TABLE.length; i++) {
       if (!result.containsKey(STATIC_HEADER_TABLE[i].name)) {
         result.put(STATIC_HEADER_TABLE[i].name, i);

File: protobuf-nano/src/main/java/io/grpc/protobuf/nano/NanoUtils.java
Patch:
@@ -40,7 +40,7 @@ private NanoUtils() {}
    * @since 1.0.0
    */
   public static <T extends MessageNano> Marshaller<T> marshaller(MessageNanoFactory<T> factory) {
-    return new MessageMarshaller<T>(factory);
+    return new MessageMarshaller<>(factory);
   }
 
   private static final class MessageMarshaller<T extends MessageNano> implements Marshaller<T> {

File: services/src/main/java/io/grpc/services/HealthCheckingLoadBalancerFactory.java
Patch:
@@ -101,7 +101,7 @@ private final class HelperImpl extends ForwardingLoadBalancerHelper {
     @Nullable String healthCheckedService;
     private boolean balancerShutdown;
 
-    final HashSet<HealthCheckState> hcStates = new HashSet<HealthCheckState>();
+    final HashSet<HealthCheckState> hcStates = new HashSet<>();
 
     HelperImpl(Helper delegate) {
       this.delegate = checkNotNull(delegate, "delegate");

File: services/src/test/java/io/grpc/services/HealthStatusManagerTest.java
Patch:
@@ -294,7 +294,7 @@ public void watchRemovedWhenClientCloses() throws Exception {
   }
 
   private static class RespObserver implements StreamObserver<HealthCheckResponse> {
-    final ArrayDeque<Object> responses = new ArrayDeque<Object>();
+    final ArrayDeque<Object> responses = new ArrayDeque<>();
 
     @Override
     public void onNext(HealthCheckResponse value) {

File: stub/src/main/java/io/grpc/stub/MetadataUtils.java
Patch:
@@ -71,7 +71,7 @@ private static final class HeaderAttachingClientInterceptor implements ClientInt
     @Override
     public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
         MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {
-      return new HeaderAttachingClientCall<ReqT, RespT>(next.newCall(method, callOptions));
+      return new HeaderAttachingClientCall<>(next.newCall(method, callOptions));
     }
 
     private final class HeaderAttachingClientCall<ReqT, RespT>
@@ -135,7 +135,7 @@ private static final class MetadataCapturingClientInterceptor implements ClientI
     @Override
     public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
         MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {
-      return new MetadataCapturingClientCall<ReqT, RespT>(next.newCall(method, callOptions));
+      return new MetadataCapturingClientCall<>(next.newCall(method, callOptions));
     }
 
     private final class MetadataCapturingClientCall<ReqT, RespT>

File: testing-proto/src/test/java/io/grpc/testing/protobuf/SimpleServiceTest.java
Patch:
@@ -111,7 +111,7 @@ public synchronized boolean process(
           continue;
         }
 
-        Map<String, RpcMethod> methodToAnnotation = new HashMap<String, RpcMethod>();
+        Map<String, RpcMethod> methodToAnnotation = new HashMap<>();
         for (Element enclosedElement : rootElement.getEnclosedElements()) {
           RpcMethod annotation = enclosedElement.getAnnotation(RpcMethod.class);
           if (annotation != null) {

File: testing/src/main/java/io/grpc/internal/testing/StatsTestUtils.java
Patch:
@@ -151,7 +151,7 @@ public MetricsRecord pollRecord(long timeout, TimeUnit unit) throws InterruptedE
      */
     // This needs to be synchronized with getCurrentRecordSink() which may run concurrently.
     public synchronized void rolloverRecords() {
-      records = new LinkedBlockingQueue<MetricsRecord>();
+      records = new LinkedBlockingQueue<>();
     }
 
     private synchronized BlockingQueue<MetricsRecord> getCurrentRecordSink() {

File: testing/src/main/java/io/grpc/internal/testing/StreamRecorder.java
Patch:
@@ -36,7 +36,7 @@ public class StreamRecorder<T> implements StreamObserver<T> {
    * Creates a new recorder.
    */
   public static <T> StreamRecorder<T> create() {
-    return new StreamRecorder<T>();
+    return new StreamRecorder<>();
   }
 
   private final CountDownLatch latch;

File: testing/src/main/java/io/grpc/internal/testing/TestClientStreamTracer.java
Patch:
@@ -31,10 +31,10 @@ public class TestClientStreamTracer extends ClientStreamTracer implements TestSt
   private final TestBaseStreamTracer delegate = new TestBaseStreamTracer();
   protected final CountDownLatch outboundHeadersLatch = new CountDownLatch(1);
   protected final AtomicReference<Throwable> outboundHeadersCalled =
-      new AtomicReference<Throwable>();
+      new AtomicReference<>();
   protected final AtomicReference<Throwable> inboundHeadersCalled =
-      new AtomicReference<Throwable>();
-  protected final AtomicReference<Metadata> inboundTrailers = new AtomicReference<Metadata>();
+      new AtomicReference<>();
+  protected final AtomicReference<Metadata> inboundTrailers = new AtomicReference<>();
 
   @Override
   public void await() throws InterruptedException {

File: testing/src/main/java/io/grpc/internal/testing/TestServerStreamTracer.java
Patch:
@@ -27,7 +27,7 @@
 public class TestServerStreamTracer extends ServerStreamTracer implements TestStreamTracer {
   private final TestBaseStreamTracer delegate = new TestBaseStreamTracer();
   protected final AtomicReference<ServerCallInfo<?, ?>> serverCallInfo =
-      new AtomicReference<ServerCallInfo<?, ?>>();
+      new AtomicReference<>();
 
   @Override
   public void await() throws InterruptedException {

File: testing/src/main/java/io/grpc/testing/StreamRecorder.java
Patch:
@@ -41,7 +41,7 @@ public class StreamRecorder<T> implements StreamObserver<T> {
    * Creates a new recorder.
    */
   public static <T> StreamRecorder<T> create() {
-    return new StreamRecorder<T>();
+    return new StreamRecorder<>();
   }
 
   private final CountDownLatch latch;

File: testing/src/test/java/io/grpc/testing/GrpcServerRuleTest.java
Patch:
@@ -182,7 +182,7 @@ public void evaluate() throws Throwable {
   private static class TestServiceImpl extends SimpleServiceGrpc.SimpleServiceImplBase {
 
     private final Collection<SimpleRequest> unaryCallRequests =
-        new ConcurrentLinkedQueue<SimpleRequest>();
+        new ConcurrentLinkedQueue<>();
 
     private volatile Thread lastServerStreamingRpcThread;
 

File: core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java
Patch:
@@ -20,6 +20,8 @@
 import static org.junit.Assert.assertNull;
 import static org.mockito.AdditionalAnswers.delegatesTo;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.same;
 import static org.mockito.Mockito.mock;
@@ -270,8 +272,7 @@ public void writeMessage_ignoreIfFramerClosed() {
 
     stream.writeMessage(new ByteArrayInputStream(new byte[]{}));
 
-    verify(sink, never())
-        .writeFrame(any(WritableBuffer.class), any(Boolean.class), any(Integer.class));
+    verify(sink, never()).writeFrame(any(WritableBuffer.class), anyBoolean(), anyInt());
   }
 
   @Test

File: netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java
Patch:
@@ -30,6 +30,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.same;
@@ -437,8 +438,7 @@ public void removeUserAgentFromApplicationHeaders() {
     Mockito.reset(writeQueue);
     ChannelPromise completedPromise = new DefaultChannelPromise(channel)
         .setSuccess();
-    when(writeQueue.enqueue(any(QueuedCommand.class), any(boolean.class)))
-        .thenReturn(completedPromise);
+    when(writeQueue.enqueue(any(QueuedCommand.class), anyBoolean())).thenReturn(completedPromise);
 
     stream = new NettyClientStream(
         new TransportStateImpl(handler, DEFAULT_MAX_MESSAGE_SIZE),

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -202,7 +202,7 @@ public void runInContext() {
       return;
     }
     final String compressorName = callOptions.getCompressor();
-    Compressor compressor = null;
+    Compressor compressor;
     if (compressorName != null) {
       compressor = compressorRegistry.lookupCompressor(compressorName);
       if (compressor == null) {

File: interop-testing/src/main/java/io/grpc/testing/integration/TestCases.java
Patch:
@@ -42,6 +42,8 @@ public enum TestCases {
   JWT_TOKEN_CREDS("JWT-based auth"),
   OAUTH2_AUTH_TOKEN("raw oauth2 access token auth"),
   PER_RPC_CREDS("per rpc raw oauth2 access token auth"),
+  GOOGLE_DEFAULT_CREDENTIALS(
+      "google default credentials, i.e. GoogleManagedChannel based auth"),
   CUSTOM_METADATA("unary and full duplex calls with metadata"),
   STATUS_CODE_AND_MESSAGE("request error code and message"),
   SPECIAL_STATUS_MESSAGE("special characters in status message"),

File: interop-testing/src/test/java/io/grpc/testing/integration/TestCasesTest.java
Patch:
@@ -56,6 +56,7 @@ public void testCaseNamesShouldMapToEnums() {
       "jwt_token_creds",
       "oauth2_auth_token",
       "per_rpc_creds",
+      "google_default_credentials",
       "custom_metadata",
       "status_code_and_message",
       "special_status_message",

File: context/src/test/java/io/grpc/ThreadLocalContextStorageTest.java
Patch:
@@ -25,7 +25,7 @@
 @RunWith(JUnit4.class)
 public final class ThreadLocalContextStorageTest {
   private static final Context.Key<Object> KEY = Context.key("test-key");
-  private ThreadLocalContextStorage storage = new ThreadLocalContextStorage();
+  private final ThreadLocalContextStorage storage = new ThreadLocalContextStorage();
 
   @Test
   public void detach_threadLocalClearedOnRoot() {

File: core/src/test/java/io/grpc/inprocess/InProcessTransportTest.java
Patch:
@@ -16,12 +16,12 @@
 
 package io.grpc.inprocess;
 
+import com.google.common.collect.ImmutableList;
 import io.grpc.ServerStreamTracer;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.InternalServer;
 import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.testing.AbstractTransportTest;
-import java.util.Collections;
 import java.util.List;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -41,7 +41,7 @@ protected List<? extends InternalServer> newServer(
     InProcessServerBuilder builder = InProcessServerBuilder
         .forName(TRANSPORT_NAME)
         .maxInboundMetadataSize(GrpcUtil.DEFAULT_MAX_HEADER_LIST_SIZE);
-    return Collections.singletonList(new InProcessServer(builder, streamTracerFactories));
+    return ImmutableList.of(new InProcessServer(builder, streamTracerFactories));
   }
 
   @Override

File: netty/src/test/java/io/grpc/netty/NettyServerBuilderTest.java
Patch:
@@ -19,10 +19,10 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.truth.Truth;
 import io.grpc.ServerStreamTracer.Factory;
 import io.netty.handler.ssl.SslContext;
-import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import org.junit.Rule;
@@ -31,7 +31,6 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-
 /**
  * Unit tests for {@link NettyServerBuilder}.
  */
@@ -45,7 +44,7 @@ public class NettyServerBuilderTest {
   @Test
   public void createMultipleServers() {
     builder.addPort(8081);
-    List<NettyServer> servers = builder.buildTransportServers(Collections.<Factory>emptyList());
+    List<NettyServer> servers = builder.buildTransportServers(ImmutableList.<Factory>of());
 
     Truth.assertThat(servers).hasSize(2);
   }

File: examples/src/main/java/io/grpc/examples/advanced/HelloJsonClient.java
Patch:
@@ -27,7 +27,6 @@
 import io.grpc.examples.helloworld.GreeterGrpc;
 import io.grpc.examples.helloworld.HelloReply;
 import io.grpc.examples.helloworld.HelloRequest;
-import io.grpc.examples.helloworld.HelloWorldClient;
 import io.grpc.stub.AbstractStub;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
@@ -43,7 +42,7 @@
  * https://groups.google.com/forum/#!forum/grpc-io
  */
 public final class HelloJsonClient {
-  private static final Logger logger = Logger.getLogger(HelloWorldClient.class.getName());
+  private static final Logger logger = Logger.getLogger(HelloJsonClient.class.getName());
 
   private final ManagedChannel channel;
   private final HelloJsonStub blockingStub;

File: examples/src/main/java/io/grpc/examples/advanced/HelloJsonServer.java
Patch:
@@ -25,7 +25,6 @@
 import io.grpc.examples.helloworld.GreeterGrpc;
 import io.grpc.examples.helloworld.HelloReply;
 import io.grpc.examples.helloworld.HelloRequest;
-import io.grpc.examples.helloworld.HelloWorldServer;
 import io.grpc.stub.ServerCalls.UnaryMethod;
 import io.grpc.stub.StreamObserver;
 import java.io.IOException;
@@ -43,7 +42,7 @@
  * https://groups.google.com/forum/#!forum/grpc-io
  */
 public class HelloJsonServer {
-  private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());
+  private static final Logger logger = Logger.getLogger(HelloJsonServer.class.getName());
 
   private Server server;
 

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -72,7 +72,7 @@ final class DnsNameResolver extends NameResolver {
   private static final String SERVICE_CONFIG_CHOICE_SERVICE_CONFIG_KEY = "serviceConfig";
 
   // From https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md
-  static final String SERVICE_CONFIG_PREFIX = "_grpc_config=";
+  static final String SERVICE_CONFIG_PREFIX = "grpc_config=";
   private static final Set<String> SERVICE_CONFIG_CHOICE_KEYS =
       Collections.unmodifiableSet(
           new HashSet<>(

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -41,7 +41,6 @@
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
 
-@VisibleForTesting
 public final class AutoConfiguredLoadBalancerFactory extends LoadBalancer.Factory {
   private static final Logger logger =
       Logger.getLogger(AutoConfiguredLoadBalancerFactory.class.getName());

File: core/src/test/java/io/grpc/internal/ProxyDetectorImplTest.java
Patch:
@@ -46,8 +46,6 @@
 
 @RunWith(JUnit4.class)
 public class ProxyDetectorImplTest {
-  private static final String NO_USER = null;
-  private static final String NO_PW = null;
   @Mock private ProxySelector proxySelector;
   @Mock private ProxyDetectorImpl.AuthenticationProvider authenticator;
   private InetSocketAddress destination = InetSocketAddress.createUnresolved("10.10.10.10", 5678);

File: netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.mockito.Mockito.mock;
 
 import io.grpc.ManagedChannel;
-import io.grpc.ProxyParameters;
 import io.grpc.netty.InternalNettyChannelBuilder.OverrideAuthorityChecker;
 import io.grpc.netty.ProtocolNegotiators.TlsNegotiator;
 import io.netty.handler.ssl.SslContext;
@@ -40,8 +39,7 @@ public class NettyChannelBuilderTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();
   private final SslContext noSslContext = null;
-  private final ProxyParameters noProxy = null;
-
+  
   private void shutdown(ManagedChannel mc) throws Exception {
     mc.shutdownNow();
     assertTrue(mc.awaitTermination(1, TimeUnit.SECONDS));

File: services/src/main/java/io/grpc/services/HealthStatusManager.java
Patch:
@@ -26,6 +26,9 @@
  * created in the constructor of {@code HealthStatusManager}, and it can be retrieved by the
  * {@link #getHealthService()} method.
  * The health status manager can update the health statuses of the server.
+ *
+ * <p>The default, empty-string, service name, {@link #SERVICE_NAME_ALL_SERVICES}, is initialized to
+ * {@link ServingStatus#SERVING}.
  */
 @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/4696")
 public final class HealthStatusManager {

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -77,7 +77,6 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
   /**
    * An idle timeout smaller than this would be capped to it.
    */
-  @VisibleForTesting
   static final long IDLE_MODE_MIN_TIMEOUT_MILLIS = TimeUnit.SECONDS.toMillis(1);
 
   private static final ObjectPool<? extends Executor> DEFAULT_EXECUTOR_POOL =

File: core/src/main/java/io/grpc/internal/ProxySocketAddress.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc.internal;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import java.net.SocketAddress;
 
@@ -29,7 +28,6 @@ final class ProxySocketAddress extends SocketAddress {
   private final SocketAddress address;
   private final ProxyParameters proxyParameters;
 
-  @VisibleForTesting
   ProxySocketAddress(SocketAddress address, ProxyParameters proxyParameters) {
     this.address = Preconditions.checkNotNull(address);
     this.proxyParameters = Preconditions.checkNotNull(proxyParameters);

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -601,9 +601,7 @@ protected final void fail(ChannelHandlerContext ctx, Throwable cause) {
         bufferedWrites = null;
       }
 
-      // In case something goes wrong ensure that the channel gets closed as the
-      // NettyClientTransport relies on the channel's close future to get completed.
-      ctx.close();
+      ctx.fireExceptionCaught(cause);
     }
 
     @SuppressWarnings("FutureReturnValueIgnored")

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -90,7 +90,7 @@ final class DnsNameResolver extends NameResolver {
   private static final String JNDI_LOCALHOST_PROPERTY =
       System.getProperty("io.grpc.internal.DnsNameResolverProvider.enable_jndi_localhost", "false");
   private static final String JNDI_SRV_PROPERTY =
-      System.getProperty("io.grpc.internal.DnsNameResolverProvider.enable_grpclb", "true");
+      System.getProperty("io.grpc.internal.DnsNameResolverProvider.enable_grpclb", "false");
   private static final String JNDI_TXT_PROPERTY =
       System.getProperty("io.grpc.internal.DnsNameResolverProvider.enable_service_config", "false");
 

File: examples/src/test/java/io/grpc/examples/authentication/AuthClientTest.java
Patch:
@@ -101,8 +101,6 @@ public void sayHello(
   @Test
   public void defaultTokenDeliveredToServer() {
     ArgumentCaptor<Metadata> metadataCaptor = ArgumentCaptor.forClass(Metadata.class);
-    ArgumentCaptor<HelloRequest> requestCaptor = ArgumentCaptor.forClass(HelloRequest.class);
-
     String retVal = client.greet("default token test");
 
     verify(mockServerInterceptor).interceptCall(
@@ -121,7 +119,6 @@ public void defaultTokenDeliveredToServer() {
   @Test
   public void nonDefaultTokenDeliveredToServer() {
     ArgumentCaptor<Metadata> metadataCaptor = ArgumentCaptor.forClass(Metadata.class);
-    ArgumentCaptor<HelloRequest> requestCaptor = ArgumentCaptor.forClass(HelloRequest.class);
 
     client.setTokenValue("non-default-token");
     String retVal = client.greet("non default token test");

File: netty/src/main/java/io/grpc/netty/NettyServerTransport.java
Patch:
@@ -47,7 +47,6 @@
  * The Netty-based server transport.
  */
 class NettyServerTransport implements ServerTransport {
-  private static final Logger log = Logger.getLogger(NettyServerTransport.class.getName());
   // connectionLog is for connection related messages only
   private static final Logger connectionLog = Logger.getLogger(
       String.format("%s.connections", NettyServerTransport.class.getName()));

File: alts/src/test/java/io/grpc/alts/HandshakerServiceChannelTest.java
Patch:
@@ -37,7 +37,7 @@
 public final class HandshakerServiceChannelTest {
   @Rule
   public final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();
-  private Server server = grpcCleanup.register(
+  private final Server server = grpcCleanup.register(
       ServerBuilder.forPort(0)
         .addService(new SimpleServiceGrpc.SimpleServiceImplBase() {
           @Override

File: alts/src/test/java/io/grpc/alts/internal/TsiFrameHandlerTest.java
Patch:
@@ -87,7 +87,8 @@ public void writeAndFlush_shouldBeIgnoredAfterClose() throws InterruptedExceptio
     try {
       channel.checkException();
     } catch (Exception e) {
-      throw new AssertionError("Any attempt after close should be ignored without out exception");
+      throw new AssertionError(
+          "Any attempt after close should be ignored without out exception", e);
     }
   }
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -182,7 +182,7 @@ private static Map<ErrorCode, Status> buildErrorCodeToStatusMap() {
   private int maxConcurrentStreams = 0;
   @SuppressWarnings("JdkObsolete") // Usage is bursty; want low memory usage when empty
   @GuardedBy("lock")
-  private LinkedList<OkHttpClientStream> pendingStreams = new LinkedList<>();
+  private final LinkedList<OkHttpClientStream> pendingStreams = new LinkedList<>();
   private final ConnectionSpec connectionSpec;
   private FrameWriter testFrameWriter;
   private ScheduledExecutorService scheduler;

File: okhttp/src/test/java/io/grpc/okhttp/ExceptionHandlingFrameWriterTest.java
Patch:
@@ -35,10 +35,10 @@
 @RunWith(JUnit4.class)
 public class ExceptionHandlingFrameWriterTest {
 
-  private FrameWriter mockedFrameWriter = mock(FrameWriter.class);
-  private TransportExceptionHandler transportExceptionHandler =
+  private final FrameWriter mockedFrameWriter = mock(FrameWriter.class);
+  private final TransportExceptionHandler transportExceptionHandler =
       mock(TransportExceptionHandler.class);
-  private ExceptionHandlingFrameWriter exceptionHandlingFrameWriter =
+  private final ExceptionHandlingFrameWriter exceptionHandlingFrameWriter =
       new ExceptionHandlingFrameWriter(transportExceptionHandler, mockedFrameWriter);
 
   @Test

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -2117,7 +2117,7 @@ private static TransportStats getTransportStats(InternalInstrumented<SocketStats
   private static class MockFrameWriter implements FrameWriter {
 
     private Socket socket;
-    private Queue<Buffer> capturedBuffer;
+    private final Queue<Buffer> capturedBuffer;
 
     public MockFrameWriter(Socket socket, Queue<Buffer> capturedBuffer) {
       // Sets a socket to close. Some tests assumes that FrameWriter will close underlying sink

File: protobuf-lite/src/main/java/io/grpc/protobuf/lite/ProtoInputStream.java
Patch:
@@ -61,7 +61,7 @@ public int drainTo(OutputStream target) throws IOException {
   }
 
   @Override
-  public int read() throws IOException {
+  public int read() {
     if (message != null) {
       partial = new ByteArrayInputStream(message.toByteArray());
       message = null;

File: alts/src/test/java/io/grpc/alts/internal/TsiFrameHandlerTest.java
Patch:
@@ -71,7 +71,7 @@ public void writeAndFlush_handshakeSucceed() throws InterruptedException {
 
     channel.writeAndFlush(msg);
 
-    assertThat(channel.readOutbound()).isEqualTo(msg);
+    assertThat((Object) channel.readOutbound()).isEqualTo(msg);
     channel.close().sync();
     channel.checkException();
   }
@@ -115,7 +115,7 @@ public void close_shouldFlushRemainingMessage() throws InterruptedException {
     channel.close().sync();
 
     assertWithMessage("pending write should be flushed on close")
-        .that(channel.readOutbound()).isEqualTo(msg);
+        .that((Object) channel.readOutbound()).isEqualTo(msg);
     channel.checkException();
   }
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -62,7 +62,7 @@ class OkHttpClientStream extends AbstractClientStream {
   OkHttpClientStream(
       MethodDescriptor<?, ?> method,
       Metadata headers,
-      AsyncFrameWriter frameWriter,
+      ExceptionHandlingFrameWriter frameWriter,
       OkHttpClientTransport transport,
       OutboundFlowController outboundFlow,
       Object lock,
@@ -203,7 +203,7 @@ class TransportState extends Http2ClientStreamTransportState {
     @GuardedBy("lock")
     private int processedWindow;
     @GuardedBy("lock")
-    private final AsyncFrameWriter frameWriter;
+    private final ExceptionHandlingFrameWriter frameWriter;
     @GuardedBy("lock")
     private final OutboundFlowController outboundFlow;
     @GuardedBy("lock")
@@ -216,7 +216,7 @@ public TransportState(
         int maxMessageSize,
         StatsTraceContext statsTraceCtx,
         Object lock,
-        AsyncFrameWriter frameWriter,
+        ExceptionHandlingFrameWriter frameWriter,
         OutboundFlowController outboundFlow,
         OkHttpClientTransport transport,
         int initialWindowSize) {

File: core/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -120,7 +120,7 @@ public T addTransportFilter(ServerTransportFilter filter) {
 
   /**
    * Adds a {@link ServerStreamTracer.Factory} to measure server-side traffic.  The order of
-   * factories being added is the order they will be executed.
+   * factories being added is the order they will be executed.  Tracers should not
    *
    * @return this
    * @since 1.3.0

File: core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java
Patch:
@@ -230,7 +230,7 @@ public final Server build() {
 
   @VisibleForTesting
   final List<? extends ServerStreamTracer.Factory> getTracerFactories() {
-    ArrayList<ServerStreamTracer.Factory> tracerFactories = new ArrayList<>(streamTracerFactories);
+    ArrayList<ServerStreamTracer.Factory> tracerFactories = new ArrayList<>();
     if (statsEnabled) {
       CensusStatsModule censusStats = censusStatsOverride;
       if (censusStats == null) {
@@ -246,6 +246,7 @@ final List<? extends ServerStreamTracer.Factory> getTracerFactories() {
               Tracing.getPropagationComponent().getBinaryFormat());
       tracerFactories.add(censusTracing.getServerTracerFactory());
     }
+    tracerFactories.addAll(streamTracerFactories);
     tracerFactories.trimToSize();
     return Collections.unmodifiableList(tracerFactories);
   }

File: alts/src/main/java/io/grpc/alts/GoogleDefaultChannelBuilder.java
Patch:
@@ -24,7 +24,6 @@
 import io.grpc.ClientCall;
 import io.grpc.ClientInterceptor;
 import io.grpc.ForwardingChannelBuilder;
-import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
@@ -104,7 +103,7 @@ public TsiHandshaker newHandshaker(String authority) {
               // Used the shared grpc channel to connecting to the ALTS handshaker service.
               // TODO: Release the channel if it is not used.
               // https://github.com/grpc/grpc-java/issues/4755.
-              ManagedChannel channel =
+              Channel channel =
                   SharedResourceHolder.get(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL);
               AltsClientOptions handshakerOptions =
                   new AltsClientOptions.Builder()

File: interop-testing/src/test/java/io/grpc/testing/integration/ProxyTest.java
Patch:
@@ -61,6 +61,7 @@ public void shutdownTest() throws IOException {
   }
 
   @Test
+  @org.junit.Ignore // flaky. latency commonly too high
   public void smallLatency() throws Exception {
     server = new Server();
     int serverPort = server.init();

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -128,7 +128,7 @@ interface ClientTransportProvider {
      */
     ClientTransport get(PickSubchannelArgs args);
 
-    <ReqT> RetriableStream<ReqT> newRetriableStream(
+    <ReqT> ClientStream newRetriableStream(
         MethodDescriptor<ReqT, ?> method,
         CallOptions callOptions,
         Metadata headers,
@@ -416,7 +416,7 @@ public void sendMessage(ReqT message) {
     try {
       if (stream instanceof RetriableStream) {
         @SuppressWarnings("unchecked")
-        RetriableStream<ReqT> retriableStream = ((RetriableStream<ReqT>) stream);
+        RetriableStream<ReqT> retriableStream = (RetriableStream<ReqT>) stream;
         retriableStream.sendMessage(message);
       } else {
         stream.writeMessage(method.streamRequest(message));

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -470,7 +470,7 @@ public void run() {
     }
 
     @Override
-    public <ReqT> RetriableStream<ReqT> newRetriableStream(
+    public <ReqT> ClientStream newRetriableStream(
         final MethodDescriptor<ReqT, ?> method,
         final CallOptions callOptions,
         final Metadata headers,

File: core/src/main/java/io/grpc/internal/OobChannel.java
Patch:
@@ -92,7 +92,7 @@ public ClientTransport get(PickSubchannelArgs args) {
     }
 
     @Override
-    public <ReqT> RetriableStream<ReqT> newRetriableStream(MethodDescriptor<ReqT, ?> method,
+    public <ReqT> ClientStream newRetriableStream(MethodDescriptor<ReqT, ?> method,
         CallOptions callOptions, Metadata headers, Context context) {
       throw new UnsupportedOperationException("OobChannel should not create retriable streams");
     }

File: core/src/main/java/io/grpc/internal/SubchannelChannel.java
Patch:
@@ -60,7 +60,7 @@ public ClientTransport get(PickSubchannelArgs args) {
       }
 
       @Override
-      public <ReqT> RetriableStream<ReqT> newRetriableStream(MethodDescriptor<ReqT, ?> method,
+      public <ReqT> ClientStream newRetriableStream(MethodDescriptor<ReqT, ?> method,
           CallOptions callOptions, Metadata headers, Context context) {
         throw new UnsupportedOperationException("OobChannel should not create retriable streams");
       }

File: core/src/main/java/io/grpc/internal/ServiceConfigInterceptor.java
Patch:
@@ -45,7 +45,7 @@
 import javax.annotation.Nonnull;
 
 /**
- * Modifies RPCs in in conformance with a Service Config.
+ * Modifies RPCs in conformance with a Service Config.
  */
 final class ServiceConfigInterceptor implements ClientInterceptor {
 

File: core/src/main/java/io/grpc/CallOptions.java
Patch:
@@ -326,7 +326,7 @@ public <T> CallOptions withOption(Key<T> key, T value) {
       newOptions.customOptions[customOptions.length] = new Object[] {key, value};
     } else {
       // Replace an existing option
-      newOptions.customOptions[existingIdx][1] = value;
+      newOptions.customOptions[existingIdx] = new Object[] {key, value};
     }
 
     return newOptions;

File: core/src/test/java/io/grpc/internal/AbstractManagedChannelImplBuilderTest.java
Patch:
@@ -151,7 +151,7 @@ public void loadBalancerFactory_notAllowedWithDirectAddress() {
 
   @Test
   public void defaultLoadBalancingPolicy_default() {
-    assertEquals(builder.defaultLbPolicy, "pick_first");
+    assertEquals("pick_first", builder.defaultLbPolicy);
   }
 
   @Test

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -542,7 +542,7 @@ ClientStream newSubstream(ClientStreamTracer.Factory tracerFactory, Metadata new
         "Channel for '" + target + "'");
     channelLogger = new ChannelLoggerImpl(channelTracer, timeProvider);
     if (builder.loadBalancerFactory == null) {
-      this.loadBalancerFactory = new AutoConfiguredLoadBalancerFactory();
+      this.loadBalancerFactory = new AutoConfiguredLoadBalancerFactory(builder.defaultLbPolicy);
     } else {
       this.loadBalancerFactory = builder.loadBalancerFactory;
     }

File: stub/src/main/java/io/grpc/stub/ServerCallStreamObserver.java
Patch:
@@ -47,7 +47,7 @@ public abstract class ServerCallStreamObserver<V> extends CallStreamObserver<V>
    * to {@code true} as other callbacks may still be executing in the 'inbound' observer.
    *
    * <p>Setting the onCancelHandler will suppress the on-cancel exception thrown by
-   * {@link #onNext()}.
+   * {@link #onNext}.
    *
    * @param onCancelHandler to call when client has cancelled the call.
    */

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AbstractConfigurationBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
@@ -204,7 +205,7 @@ private Map<String, Param> getParamMap() {
   }
 
   private static String commandLineFlag(Param param) {
-    String name = param.getName().toLowerCase();
+    String name = param.getName().toLowerCase(Locale.ROOT);
     String type = (!param.getType().isEmpty() ? '=' + param.getType() : "");
     return "--" + name + type;
   }

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -189,7 +189,7 @@ PolicySelection decideLoadBalancerProvider(
         throws PolicyException {
       // Check for balancer addresses
       boolean haveBalancerAddress = false;
-      List<EquivalentAddressGroup> backendAddrs = new ArrayList<EquivalentAddressGroup>();
+      List<EquivalentAddressGroup> backendAddrs = new ArrayList<>();
       for (EquivalentAddressGroup s : servers) {
         if (s.getAttributes().get(GrpcAttributes.ATTR_LB_ADDR_AUTHORITY) != null) {
           haveBalancerAddress = true;

File: core/src/main/java/io/grpc/internal/ServiceConfigUtil.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
@@ -320,7 +321,7 @@ public static List<Map<String, Object>> getLoadBalancingConfigsFromServiceConfig
       "loadBalancingPolicy": "ROUND_ROBIN"  // The deprecated policy key
     }
     */
-    List<Map<String, Object>> lbConfigs = new ArrayList<Map<String, Object>>();
+    List<Map<String, Object>> lbConfigs = new ArrayList<>();
     if (serviceConfig.containsKey(SERVICE_CONFIG_LOAD_BALANCING_CONFIG_KEY)) {
       List<Object> configs = getList(serviceConfig, SERVICE_CONFIG_LOAD_BALANCING_CONFIG_KEY);
       for (Object config : configs) {
@@ -332,7 +333,7 @@ public static List<Map<String, Object>> getLoadBalancingConfigsFromServiceConfig
       if (serviceConfig.containsKey(SERVICE_CONFIG_LOAD_BALANCING_POLICY_KEY)) {
         String policy = getString(serviceConfig, SERVICE_CONFIG_LOAD_BALANCING_POLICY_KEY);
         // Convert the policy to a config, so that the caller can handle them in the same way.
-        policy = policy.toLowerCase();
+        policy = policy.toLowerCase(Locale.ROOT);
         Map<String, Object> fakeConfig =
             Collections.singletonMap(policy, (Object) Collections.emptyMap());
         lbConfigs.add(fakeConfig);

File: interop-testing/src/main/java/io/grpc/testing/integration/Http2Client.java
Patch:
@@ -37,6 +37,7 @@
 import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
@@ -368,7 +369,7 @@ private ManagedChannel createChannel() {
   private static String validTestCasesHelpText() {
     StringBuilder builder = new StringBuilder();
     for (Http2TestCases testCase : Http2TestCases.values()) {
-      String strTestcase = testCase.name().toLowerCase();
+      String strTestcase = testCase.name().toLowerCase(Locale.ROOT);
       builder.append("\n      ")
           .append(strTestcase)
           .append(": ")

File: core/src/main/java/io/grpc/util/RoundRobinLoadBalancerFactory.java
Patch:
@@ -27,7 +27,7 @@
  * A {@link LoadBalancer} that provides round-robin load balancing mechanism over the
  * addresses.
  *
- * @deprecated use {@link io.grpc.LoadBalancerRegistry#getProvider} with "round-robin" policy.  This
+ * @deprecated use {@link io.grpc.LoadBalancerRegistry#getProvider} with "round_robin" policy.  This
  *             class will be deleted soon.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1771")

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -175,7 +175,8 @@ public String toString() {
       new FakeClock.TaskFilter() {
         @Override
         public boolean shouldAccept(Runnable command) {
-          return command instanceof ManagedChannelImpl.NameResolverRefresh;
+          return command.toString().contains(
+              ManagedChannelImpl.NameResolverRefresh.class.getName());
         }
       };
 

File: services/src/main/java/io/grpc/services/HealthCheckingLoadBalancerFactory.java
Patch:
@@ -86,7 +86,7 @@ public LoadBalancer newLoadBalancer(Helper helper) {
     HelperImpl wrappedHelper = new HelperImpl(helper);
     LoadBalancer delegateBalancer = delegateFactory.newLoadBalancer(wrappedHelper);
     wrappedHelper.init(delegateBalancer);
-    return new LoadBalancerImpl(wrappedHelper, delegateBalancer);
+    return new HealthCheckingLoadBalancer(wrappedHelper, delegateBalancer);
   }
 
   private final class HelperImpl extends ForwardingLoadBalancerHelper {
@@ -144,13 +144,13 @@ public String toString() {
     }
   }
 
-  private static final class LoadBalancerImpl extends ForwardingLoadBalancer {
+  private static final class HealthCheckingLoadBalancer extends ForwardingLoadBalancer {
     final LoadBalancer delegate;
     final HelperImpl helper;
     final SynchronizationContext syncContext;
     final ScheduledExecutorService timerService;
 
-    LoadBalancerImpl(HelperImpl helper, LoadBalancer delegate) {
+    HealthCheckingLoadBalancer(HelperImpl helper, LoadBalancer delegate) {
       this.helper = checkNotNull(helper, "helper");
       this.syncContext = checkNotNull(helper.getSynchronizationContext(), "syncContext");
       this.timerService = checkNotNull(helper.getScheduledExecutorService(), "timerService");

File: core/src/main/java/io/grpc/util/RoundRobinLoadBalancer.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.internal;
+package io.grpc.util;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static io.grpc.ConnectivityState.CONNECTING;

File: core/src/test/java/io/grpc/util/RoundRobinLoadBalancerFactoryTest.java
Patch:
@@ -35,7 +35,7 @@ public void getInstance() {
     Helper helper = mock(Helper.class);
     assertThat(
         RoundRobinLoadBalancerFactory.getInstance().newLoadBalancer(helper).getClass().getName())
-        .isEqualTo("io.grpc.internal.RoundRobinLoadBalancer");
+        .isEqualTo("io.grpc.util.RoundRobinLoadBalancer");
     verifyZeroInteractions(helper);
   }
 }

File: netty/src/main/java/io/grpc/netty/NettyServerTransport.java
Patch:
@@ -53,7 +53,8 @@ class NettyServerTransport implements ServerTransport {
   // Some exceptions are not very useful and add too much noise to the log
   private static final ImmutableList<String> QUIET_ERRORS = ImmutableList.of(
       "Connection reset by peer",
-      "An existing connection was forcibly closed by the remote host");
+      "An existing connection was forcibly closed by the remote host",
+      "An established connection was aborted by the software in your host machine");
 
   private final InternalLogId logId = InternalLogId.allocate(getClass().getName());
   private final Channel channel;

File: stub/src/main/java/io/grpc/stub/MetadataUtils.java
Patch:
@@ -65,7 +65,7 @@ private static final class HeaderAttachingClientInterceptor implements ClientInt
 
     // Non private to avoid synthetic class
     HeaderAttachingClientInterceptor(Metadata extraHeaders) {
-      this.extraHeaders = checkNotNull(extraHeaders, extraHeaders);
+      this.extraHeaders = checkNotNull(extraHeaders, "extraHeaders");
     }
 
     @Override

File: core/src/main/java/io/grpc/internal/InternalSubchannel.java
Patch:
@@ -78,7 +78,6 @@ final class InternalSubchannel implements InternalInstrumented<ChannelStats> {
   private final CallTracer callsTracer;
   private final ChannelTracer channelTracer;
   private final ChannelLogger channelLogger;
-  private final TimeProvider timeProvider;
 
   // File-specific convention: methods without GuardedBy("lock") MUST NOT be called under the lock.
   private final Object lock = new Object();
@@ -184,7 +183,6 @@ protected void handleNotInUse() {
     this.channelz = channelz;
     this.callsTracer = callsTracer;
     this.channelTracer = Preconditions.checkNotNull(channelTracer, "channelTracer");
-    this.timeProvider = Preconditions.checkNotNull(timeProvider, "timeProvider");
     this.logId = Preconditions.checkNotNull(logId, "logId");
     this.channelLogger = new ChannelLoggerImpl(channelTracer, timeProvider);
   }

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -109,8 +109,6 @@
 /** Unit tests for {@link GrpclbLoadBalancer}. */
 @RunWith(JUnit4.class)
 public class GrpclbLoadBalancerTest {
-  private static final Attributes.Key<String> RESOLUTION_ATTR =
-      Attributes.Key.create("resolution-attr");
   private static final String SERVICE_AUTHORITY = "api.google.com";
 
   // The tasks are wrapped by SynchronizationContext, so we can't compare the types

File: services/src/test/java/io/grpc/services/HealthCheckingLoadBalancerFactoryTest.java
Patch:
@@ -72,13 +72,13 @@
 import io.grpc.stub.StreamObserver;
 import java.net.SocketAddress;
 import java.text.MessageFormat;
+import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.Deque;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.List;
+import java.util.Queue;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
@@ -1068,7 +1068,7 @@ public void describeTo(org.hamcrest.Description desc) {
 
   private static class HealthImpl extends HealthGrpc.HealthImplBase {
     boolean checkCalled;
-    final Deque<ServerSideCall> calls = new LinkedList<ServerSideCall>();
+    final Queue<ServerSideCall> calls = new ArrayDeque<ServerSideCall>();
 
     @Override
     public void check(HealthCheckRequest request,

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -1011,9 +1011,9 @@ public void run() {
       } catch (Throwable t) {
         // TODO(madongfly): Send the exception message to the server.
         startGoAway(
-            0, 
-            ErrorCode.PROTOCOL_ERROR, 
-            Status.UNAVAILABLE.withDescription("error in frame handler").withCause(t));
+            0,
+            ErrorCode.PROTOCOL_ERROR,
+            Status.INTERNAL.withDescription("error in frame handler").withCause(t));
       } finally {
         try {
           frameReader.close();

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -301,9 +301,9 @@ public void nextFrameThrowIoException() throws Exception {
     listener2.waitUntilStreamClosed();
 
     assertEquals(0, activeStreamCount());
-    assertEquals(Status.UNAVAILABLE.getCode(), listener1.status.getCode());
+    assertEquals(Status.INTERNAL.getCode(), listener1.status.getCode());
     assertEquals(NETWORK_ISSUE_MESSAGE, listener1.status.getCause().getMessage());
-    assertEquals(Status.UNAVAILABLE.getCode(), listener2.status.getCode());
+    assertEquals(Status.INTERNAL.getCode(), listener2.status.getCode());
     assertEquals(NETWORK_ISSUE_MESSAGE, listener2.status.getCause().getMessage());
     verify(transportListener, timeout(TIME_OUT_MS)).transportShutdown(isA(Status.class));
     verify(transportListener, timeout(TIME_OUT_MS)).transportTerminated();
@@ -329,7 +329,7 @@ public void nextFrameThrowsError() throws Exception {
     listener.waitUntilStreamClosed();
 
     assertEquals(0, activeStreamCount());
-    assertEquals(Status.UNAVAILABLE.getCode(), listener.status.getCode());
+    assertEquals(Status.INTERNAL.getCode(), listener.status.getCode());
     assertEquals(ERROR_MESSAGE, listener.status.getCause().getMessage());
     verify(transportListener, timeout(TIME_OUT_MS)).transportShutdown(isA(Status.class));
     verify(transportListener, timeout(TIME_OUT_MS)).transportTerminated();

File: core/src/main/java/io/grpc/EquivalentAddressGroup.java
Patch:
@@ -94,7 +94,7 @@ public Attributes getAttributes() {
   @Override
   public String toString() {
     // TODO(zpencer): Summarize return value if addr is very large
-    return "[addrs=" + addrs + ", attrs=" + attrs + "]";
+    return "[" + addrs + "/" + attrs + "]";
   }
 
   @Override

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerFactoryTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
+import io.grpc.ChannelLogger;
 import io.grpc.LoadBalancer.Helper;
 import io.grpc.SynchronizationContext;
 import io.grpc.internal.FakeClock;
@@ -48,13 +49,15 @@ public void getInstance() {
     when(helper.getSynchronizationContext()).thenReturn(syncContext);
     when(helper.getScheduledExecutorService()).thenReturn(clock.getScheduledExecutorService());
     when(helper.getAuthority()).thenReturn("fakeauthority");
+    when(helper.getChannelLogger()).thenReturn(mock(ChannelLogger.class));
 
     assertThat(GrpclbLoadBalancerFactory.getInstance().newLoadBalancer(helper))
         .isInstanceOf(io.grpc.grpclb.GrpclbLoadBalancer.class);
 
     verify(helper).getSynchronizationContext();
     verify(helper).getScheduledExecutorService();
     verify(helper).getAuthority();
+    verify(helper).getChannelLogger();
     verifyNoMoreInteractions(helper);
   }
 }

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -978,10 +978,9 @@ public void pendingStreamSucceed() throws Exception {
     assertEquals(0, clientTransport.getPendingStreamSize());
     ArgumentCaptor<Buffer> captor = ArgumentCaptor.forClass(Buffer.class);
     verify(frameWriter, timeout(TIME_OUT_MS))
-        .data(eq(false), eq(5), captor.capture(), eq(5 + HEADER_LENGTH));
+        .data(eq(true), eq(5), captor.capture(), eq(5 + HEADER_LENGTH));
     Buffer sentFrame = captor.getValue();
     assertEquals(createMessageFrame(sentMessage), sentFrame);
-    verify(frameWriter, timeout(TIME_OUT_MS)).data(eq(true), eq(5), any(Buffer.class), eq(0));
     stream2.cancel(Status.CANCELLED);
     shutdownAndVerify();
   }

File: core/src/test/java/io/grpc/internal/RoundRobinLoadBalancerTest.java
Patch:
@@ -624,6 +624,7 @@ public void stickiness_goToTransientFailure_backToReady_pick() {
     picker = pickerCaptor.getValue();
 
     // second pick with a different stickiness value
+    @SuppressWarnings("unused")
     Subchannel sc2 = picker.pickSubchannel(mockArgs).getSubchannel();
 
     // go back to ready

File: core/src/test/java/io/grpc/util/ForwardingLoadBalancerTest.java
Patch:
@@ -21,7 +21,6 @@
 import io.grpc.ForwardingTestUtil;
 import io.grpc.LoadBalancer;
 import java.lang.reflect.Method;
-import java.net.SocketAddress;
 import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -41,7 +40,6 @@ protected LoadBalancer delegate() {
 
   @Test
   public void allMethodsForwarded() throws Exception {
-    final SocketAddress mockAddr = mock(SocketAddress.class);
     ForwardingTestUtil.testMethodsForwarded(
         LoadBalancer.class,
         mockDelegate,

File: services/src/test/java/io/grpc/services/HealthCheckingLoadBalancerFactoryTest.java
Patch:
@@ -71,6 +71,7 @@
 import java.net.SocketAddress;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Deque;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -959,9 +960,8 @@ public void describeTo(org.hamcrest.Description desc) {
   }
 
   private static class HealthImpl extends HealthGrpc.HealthImplBase {
-    boolean isImplemented = true;
     boolean checkCalled;
-    final LinkedList<ServerSideCall> calls = new LinkedList<ServerSideCall>();
+    final Deque<ServerSideCall> calls = new LinkedList<ServerSideCall>();
 
     @Override
     public void check(HealthCheckRequest request,

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -227,7 +227,7 @@ private byte[] valueAscii() {
   }
 
   private static final String TEST_EQUALS_FAILURE_PROPERTY = "io.grpc.Status.failOnEqualsForTest";
-  private static final boolean failOnEqualsForTest =
+  private static final boolean FAIL_ON_EQUALS_FOR_TEST =
       Boolean.parseBoolean(System.getProperty(TEST_EQUALS_FAILURE_PROPERTY, "false"));
   
   // Create the canonical list of Status instances indexed by their code values.
@@ -657,7 +657,7 @@ private static String parseAsciiStringSlow(byte[] value) {
    */
   @Override
   public boolean equals(Object obj) {
-    assert !failOnEqualsForTest
+    assert !FAIL_ON_EQUALS_FOR_TEST
         : "Status.equals called; disable this by setting " + TEST_EQUALS_FAILURE_PROPERTY;
     return super.equals(obj);
   }

File: core/src/test/java/io/grpc/LoadBalancerRegistryTest.java
Patch:
@@ -24,8 +24,11 @@
 import java.util.Arrays;
 import java.util.List;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /** Unit tests for {@link LoadBalancerRegistry}. */
+@RunWith(JUnit4.class)
 public class LoadBalancerRegistryTest {
   @Test
   public void getClassesViaHardcoded_classesPresent() throws Exception {

File: core/src/test/java/io/grpc/LoadBalancerTest.java
Patch:
@@ -19,10 +19,8 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
 
-import io.grpc.ClientStreamTracer;
 import io.grpc.LoadBalancer.PickResult;
 import io.grpc.LoadBalancer.Subchannel;
-import io.grpc.Status;
 import java.net.SocketAddress;
 import java.util.Arrays;
 import java.util.List;

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -83,7 +83,6 @@ public class ManagedChannelImplIdlenessTest {
   private final FakeClock oobExecutor = new FakeClock();
   private static final String AUTHORITY = "fakeauthority";
   private static final String USER_AGENT = "fakeagent";
-  private static final ProxyParameters NO_PROXY = null;
   private static final long IDLE_TIMEOUT_SECONDS = 30;
   private ManagedChannelImpl channel;
 

File: gae-interop-testing/gae-jdk8/src/main/java/io/grpc/testing/integration/LongLivedChannel.java
Patch:
@@ -57,7 +57,6 @@ public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOExc
     int responseSize = 5678;
     SimpleRequest request = SimpleRequest.newBuilder()
         .setResponseSize(responseSize)
-        .setResponseType(Messages.PayloadType.COMPRESSABLE)
         .setPayload(Payload.newBuilder()
             .setBody(ByteString.copyFrom(new byte[requestSize])))
         .build();

File: interop-testing/src/test/java/io/grpc/testing/integration/ConcurrencyTest.java
Patch:
@@ -26,7 +26,6 @@
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.netty.NettyServerBuilder;
 import io.grpc.stub.StreamObserver;
-import io.grpc.testing.integration.Messages.PayloadType;
 import io.grpc.testing.integration.Messages.ResponseParameters;
 import io.grpc.testing.integration.Messages.StreamingOutputCallRequest;
 import io.grpc.testing.integration.Messages.StreamingOutputCallResponse;
@@ -110,8 +109,7 @@ public ClientWorker(CyclicBarrier startBarrier, CountDownLatch responsesDoneSign
     public void run() {
       try {
         // Prepare the request.
-        StreamingOutputCallRequest.Builder requestBuilder = StreamingOutputCallRequest.newBuilder()
-            .setResponseType(PayloadType.RANDOM);
+        StreamingOutputCallRequest.Builder requestBuilder = StreamingOutputCallRequest.newBuilder();
         for (int i = 0; i < NUM_RESPONSES_PER_REQUEST; i++) {
           requestBuilder.addResponseParameters(ResponseParameters.newBuilder()
               .setSize(1000)

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -115,8 +115,7 @@ public void receivedDataForFinishedStream() throws Exception {
         Messages.ResponseParameters.newBuilder()
         .setSize(1);
     Messages.StreamingOutputCallRequest.Builder requestBuilder =
-        Messages.StreamingOutputCallRequest.newBuilder()
-            .setResponseType(Messages.PayloadType.COMPRESSABLE);
+        Messages.StreamingOutputCallRequest.newBuilder();
     for (int i = 0; i < 1000; i++) {
       requestBuilder.addResponseParameters(responseParameters);
     }

File: auth/src/test/java/io/grpc/auth/GoogleAuthLibraryCallCredentialsTest.java
Patch:
@@ -39,8 +39,8 @@
 import com.google.common.collect.ListMultimap;
 import com.google.common.collect.Multimaps;
 import io.grpc.Attributes;
-import io.grpc.CallCredentials.MetadataApplier;
 import io.grpc.CallCredentials2;
+import io.grpc.CallCredentials2.MetadataApplier;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.SecurityLevel;

File: core/src/main/java/io/grpc/internal/MetadataApplierImpl.java
Patch:
@@ -20,7 +20,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 
-import io.grpc.CallCredentials.MetadataApplier;
+import io.grpc.CallCredentials2.MetadataApplier;
 import io.grpc.CallOptions;
 import io.grpc.Context;
 import io.grpc.Metadata;

File: core/src/test/java/io/grpc/internal/CallCredentials2ApplyingTest.java
Patch:
@@ -29,9 +29,9 @@
 import static org.mockito.Mockito.when;
 
 import io.grpc.Attributes;
-import io.grpc.CallCredentials.MetadataApplier;
 import io.grpc.CallCredentials.RequestInfo;
 import io.grpc.CallCredentials2;
+import io.grpc.CallCredentials2.MetadataApplier;
 import io.grpc.CallOptions;
 import io.grpc.IntegerMarshaller;
 import io.grpc.Metadata;

File: core/src/main/java/io/grpc/SynchronizationContext.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
-import java.util.logging.Logger;
 import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
@@ -52,8 +51,6 @@
 @ThreadSafe
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4984")
 public final class SynchronizationContext implements Executor {
-  private static final Logger log = Logger.getLogger(SynchronizationContext.class.getName());
-
   private final Object lock = new Object();
   private final UncaughtExceptionHandler uncaughtExceptionHandler;
 

File: core/src/test/java/io/grpc/SynchronizationContextTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.grpc.internal;
+package io.grpc;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertSame;
@@ -24,8 +24,8 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
-import io.grpc.SynchronizationContext;
 import io.grpc.SynchronizationContext.ScheduledHandle;
+import io.grpc.internal.FakeClock;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.LinkedBlockingQueue;

File: core/src/test/java/io/grpc/internal/FakeClock.java
Patch:
@@ -81,7 +81,6 @@ public long currentTimeNanos() {
   public class ScheduledTask extends AbstractFuture<Void> implements ScheduledFuture<Void> {
     public final Runnable command;
     public final long dueTimeNanos;
-    private boolean hasRun;
 
     ScheduledTask(long dueTimeNanos, Runnable command) {
       this.dueTimeNanos = dueTimeNanos;
@@ -244,7 +243,6 @@ public int runDueTasks() {
       }
       ScheduledTask task;
       while ((task = dueTasks.poll()) != null) {
-        task.hasRun = true;
         task.command.run();
         task.complete();
         count++;

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -217,9 +217,6 @@ private void maybeUseFallbackBackends() {
     if (usingFallbackBackends) {
       return;
     }
-    if (fallbackTimer != null && fallbackTimer.isPending()) {
-      return;
-    }
     int numReadySubchannels = 0;
     for (Subchannel subchannel : subchannels.values()) {
       if (subchannel.getAttributes().get(STATE_INFO).get().getState() == READY) {

File: services/src/main/java/io/grpc/services/BinlogHelper.java
Patch:
@@ -104,8 +104,6 @@ static final class SinkWriterImpl extends SinkWriter {
     private final int maxHeaderBytes;
     private final int maxMessageBytes;
 
-    private static final long NANOS_PER_SECOND = TimeUnit.SECONDS.toNanos(1);
-
     SinkWriterImpl(
         BinaryLogSink sink,
         TimeProvider timeProvider,

File: alts/src/test/java/io/grpc/alts/internal/FakeTsiHandshaker.java
Patch:
@@ -172,6 +172,7 @@ public boolean processBytesFromPeer(ByteBuffer bytes) throws GeneralSecurityExce
       ByteBuffer messageBytes = frameParser.getRawFrame();
       int offset = AltsFraming.getFramingOverhead();
       int length = messageBytes.limit() - offset;
+      @SuppressWarnings("ByteBufferBackingArray") // ByteBuffer is created using allocate()
       String message = new String(messageBytes.array(), offset, length, UTF_8);
       logger.log(Level.FINE, "Read message: {0}", message);
 

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -667,8 +667,9 @@ byte[] asciiName() {
     /**
      * Returns true if the two objects are both Keys, and their names match (case insensitive).
      */
+    @SuppressWarnings("EqualsGetClass")
     @Override
-    public boolean equals(Object o) {
+    public final boolean equals(Object o) {
       if (this == o) {
         return true;
       }
@@ -680,7 +681,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public int hashCode() {
+    public final int hashCode() {
       return name.hashCode();
     }
 

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -261,7 +261,7 @@ public ProxyParameters proxyFor(SocketAddress targetServerAddress) {
    * in-use state of a transport.
    */
   public static boolean shouldBeCountedForInUse(CallOptions callOptions) {
-    return !(Boolean.TRUE.equals(callOptions.getOption(CALL_OPTIONS_RPC_OWNED_BY_BALANCER)));
+    return !Boolean.TRUE.equals(callOptions.getOption(CALL_OPTIONS_RPC_OWNED_BY_BALANCER));
   }
 
   /**

File: core/src/test/java/io/grpc/ServiceDescriptorTest.java
Patch:
@@ -60,7 +60,7 @@ public void failsOnNullMethod() {
     thrown.expect(NullPointerException.class);
     thrown.expectMessage("method");
 
-    new ServiceDescriptor("name", (Collections.<MethodDescriptor<?, ?>>singletonList(null)));
+    new ServiceDescriptor("name", Collections.<MethodDescriptor<?, ?>>singletonList(null));
   }
 
   @Test

File: core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java
Patch:
@@ -479,6 +479,7 @@ public void reprocess_newStreamRacesWithReprocess() throws Exception {
 
     doAnswer(new Answer<PickResult>() {
         @Override
+        @SuppressWarnings("CatchAndPrintStackTrace")
         public PickResult answer(InvocationOnMock invocation) throws Throwable {
           if (nextPickShouldWait.compareAndSet(true, false)) {
             try {

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -35,7 +35,6 @@
 import io.grpc.Context;
 import io.grpc.DecompressorRegistry;
 import io.grpc.InternalChannelz.ServerStats;
-import io.grpc.InternalChannelz.ServerStats.Builder;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.Marshaller;
@@ -106,7 +105,7 @@ public void callTracer_failure() {
 
   private void callTracer0(Status status) {
     CallTracer tracer = CallTracer.getDefaultFactory().create();
-    Builder beforeBuilder = new Builder();
+    ServerStats.Builder beforeBuilder = new ServerStats.Builder();
     tracer.updateBuilder(beforeBuilder);
     ServerStats before = beforeBuilder.build();
     assertEquals(0, before.callsStarted);
@@ -122,7 +121,7 @@ private void callTracer0(Status status) {
     // end: required boilerplate
 
     call.close(status, new Metadata());
-    Builder afterBuilder = new Builder();
+    ServerStats.Builder afterBuilder = new ServerStats.Builder();
     tracer.updateBuilder(afterBuilder);
     ServerStats after = afterBuilder.build();
     assertEquals(1, after.callsStarted);

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -163,7 +163,7 @@ public String toString() {
   }
 
   void handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo newState) {
-    if (newState.getState() == SHUTDOWN || !(subchannels.values().contains(subchannel))) {
+    if (newState.getState() == SHUTDOWN || !subchannels.values().contains(subchannel)) {
       return;
     }
     if (newState.getState() == IDLE) {

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -55,6 +55,7 @@ public static void main(String[] args) throws Exception {
 
     Runtime.getRuntime().addShutdownHook(new Thread() {
       @Override
+      @SuppressWarnings("CatchAndPrintStackTrace")
       public void run() {
         System.out.println("Shutting down");
         try {

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -245,6 +245,7 @@ private class ResponseDispatcher {
     private Throwable failure;
     private Runnable dispatchTask = new Runnable() {
       @Override
+      @SuppressWarnings("CatchAndPrintStackTrace")
       public void run() {
         try {
 

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceServer.java
Patch:
@@ -48,6 +48,7 @@ public static void main(String[] args) throws Exception {
         .addShutdownHook(
             new Thread() {
               @Override
+              @SuppressWarnings("CatchAndPrintStackTrace")
               public void run() {
                 try {
                   System.out.println("Shutting down");

File: interop-testing/src/test/java/io/grpc/testing/integration/NettyFlowControlTest.java
Patch:
@@ -131,7 +131,7 @@ public void verySmallWindowMakesProgress() throws InterruptedException, IOExcept
   private void doTest(int bandwidth, int latency) throws InterruptedException {
 
     int streamSize = 1 * 1024 * 1024;
-    long expectedWindow = (latency * (bandwidth / TimeUnit.SECONDS.toMillis(1)));
+    long expectedWindow = latency * (bandwidth / TimeUnit.SECONDS.toMillis(1));
 
     TestServiceGrpc.TestServiceStub stub = TestServiceGrpc.newStub(channel);
     StreamingOutputCallRequest.Builder builder = StreamingOutputCallRequest.newBuilder()
@@ -147,7 +147,7 @@ private void doTest(int bandwidth, int latency) throws InterruptedException {
     int lastWindow = observer.waitFor();
 
     // deal with cases that either don't cause a window update or hit max window
-    expectedWindow = Math.min(MAX_WINDOW, (Math.max(expectedWindow, REGULAR_WINDOW)));
+    expectedWindow = Math.min(MAX_WINDOW, Math.max(expectedWindow, REGULAR_WINDOW));
 
     // Range looks large, but this allows for only one extra/missed window update
     // (one extra update causes a 2x difference and one missed update causes a .5x difference)

File: netty/src/main/java/io/grpc/netty/CancelServerStreamCommand.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Command sent from a Netty server stream to the handler to cancel the stream.
  */
-class CancelServerStreamCommand extends WriteQueue.AbstractQueuedCommand {
+final class CancelServerStreamCommand extends WriteQueue.AbstractQueuedCommand {
   private final NettyServerStream.TransportState stream;
   private final Status reason;
 

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -365,7 +365,7 @@ public TransportTracer.FlowControlWindows read() {
 
   private void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers headers)
       throws Http2Exception {
-    if (!teWarningLogged && !TE_TRAILERS.equals(headers.get(TE_HEADER))) {
+    if (!teWarningLogged && !TE_TRAILERS.contentEquals(headers.get(TE_HEADER))) {
       logger.warning(String.format("Expected header TE: %s, but %s is received. This means "
               + "some intermediate proxy may not support trailers",
           TE_TRAILERS, headers.get(TE_HEADER)));
@@ -405,7 +405,7 @@ private void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
         return;
       }
 
-      if (!HTTP_METHOD.equals(headers.method())) {
+      if (!HTTP_METHOD.contentEquals(headers.method())) {
         respondWithHttpError(ctx, streamId, 405, Status.Code.INTERNAL,
             String.format("Method '%s' is not supported", headers.method()));
         return;

File: netty/src/main/java/io/grpc/netty/SendGrpcFrameCommand.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Command sent from the transport to the Netty channel to send a GRPC frame to the remote endpoint.
  */
-class SendGrpcFrameCommand extends DefaultByteBufHolder implements WriteQueue.QueuedCommand {
+final class SendGrpcFrameCommand extends DefaultByteBufHolder implements WriteQueue.QueuedCommand {
   private final StreamIdHolder stream;
   private final boolean endStream;
 

File: netty/src/main/java/io/grpc/netty/SendResponseHeadersCommand.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Command sent from the transport to the Netty channel to send response headers to the client.
  */
-class SendResponseHeadersCommand extends WriteQueue.AbstractQueuedCommand {
+final class SendResponseHeadersCommand extends WriteQueue.AbstractQueuedCommand {
   private final StreamIdHolder stream;
   private final Http2Headers headers;
   private final Status status;

File: netty/src/test/java/io/grpc/netty/GrpcHttp2HeadersUtilsTest.java
Patch:
@@ -42,6 +42,7 @@
  * Tests for {@link GrpcHttp2HeadersUtils}.
  */
 @RunWith(JUnit4.class)
+@SuppressWarnings({ "BadImport", "UndefinedEquals" }) // AsciiString.of and AsciiString.equals
 public class GrpcHttp2HeadersUtilsTest {
 
   private static final SensitivityDetector NEVER_SENSITIVE = new SensitivityDetector() {

File: netty/src/test/java/io/grpc/netty/GrpcHttp2InboundHeadersTest.java
Patch:
@@ -36,6 +36,7 @@
  * Tests for {@link GrpcHttp2RequestHeaders} and {@link GrpcHttp2ResponseHeaders}.
  */
 @RunWith(JUnit4.class)
+@SuppressWarnings({ "BadImport", "UndefinedEquals" }) // AsciiString.of and AsciiString.equals
 public class GrpcHttp2InboundHeadersTest {
 
   @Test

File: netty/src/test/java/io/grpc/netty/UtilsTest.java
Patch:
@@ -107,6 +107,7 @@ public void convertClientHeaders_sanitizes() {
   }
 
   @Test
+  @SuppressWarnings("UndefinedEquals") // AsciiString.equals
   public void convertServerHeaders_sanitizes() {
     Metadata metaData = new Metadata();
 

File: services/src/main/java/io/grpc/services/BinlogHelper.java
Patch:
@@ -57,7 +57,6 @@
 import io.grpc.binarylog.v1.GrpcLogEntry;
 import io.grpc.binarylog.v1.GrpcLogEntry.EventType;
 import io.grpc.binarylog.v1.Message;
-import io.grpc.binarylog.v1.Message.Builder;
 import java.net.Inet4Address;
 import java.net.Inet6Address;
 import java.net.InetAddress;
@@ -255,7 +254,7 @@ <T> void logRpcMessage(
       if (marshaller != BYTEARRAY_MARSHALLER) {
         throw new IllegalStateException("Expected the BinaryLog's ByteArrayMarshaller");
       }
-      MaybeTruncated<Builder> pair = createMessageProto((byte[]) message, maxMessageBytes);
+      MaybeTruncated<Message.Builder> pair = createMessageProto((byte[]) message, maxMessageBytes);
       GrpcLogEntry.Builder entryBuilder = newTimestampedBuilder()
           .setSequenceIdWithinCall(seq)
           .setType(eventType)

File: services/src/main/java/io/grpc/services/ChannelzProtoUtil.java
Patch:
@@ -58,7 +58,6 @@
 import io.grpc.channelz.v1.ServerData;
 import io.grpc.channelz.v1.ServerRef;
 import io.grpc.channelz.v1.Socket;
-import io.grpc.channelz.v1.Socket.Builder;
 import io.grpc.channelz.v1.SocketData;
 import io.grpc.channelz.v1.SocketOption;
 import io.grpc.channelz.v1.SocketOptionLinger;
@@ -174,7 +173,7 @@ static Security toSecurity(InternalChannelz.Security security) {
 
   static Socket toSocket(InternalInstrumented<SocketStats> obj) {
     SocketStats socketStats = getFuture(obj.getStats());
-    Builder builder = Socket.newBuilder()
+    Socket.Builder builder = Socket.newBuilder()
         .setRef(toSocketRef(obj))
         .setLocal(toAddress(socketStats.local));
     if (socketStats.security != null) {

File: services/src/test/java/io/grpc/protobuf/services/ProtoReflectionServiceTest.java
Patch:
@@ -66,9 +66,9 @@ public class ProtoReflectionServiceTest {
   private MutableHandlerRegistry handlerRegistry = new MutableHandlerRegistry();
   private BindableService reflectionService;
   private ServerServiceDefinition dynamicService =
-      (new DynamicServiceGrpc.DynamicServiceImplBase() {}).bindService();
+      new DynamicServiceGrpc.DynamicServiceImplBase() {}.bindService();
   private ServerServiceDefinition anotherDynamicService =
-      (new AnotherDynamicServiceGrpc.AnotherDynamicServiceImplBase() {}).bindService();
+      new AnotherDynamicServiceGrpc.AnotherDynamicServiceImplBase() {}.bindService();
   private Server server;
   private ManagedChannel channel;
   private ServerReflectionGrpc.ServerReflectionStub stub;

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -160,6 +160,7 @@ public InProcessChannelBuilder scheduledExecutorService(
    * @throws IllegalArgumentException if bytes is non-positive
    * @since 1.17.0
    */
+  @Override
   public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {
     checkArgument(bytes > 0, "maxInboundMetadataSize must be > 0");
     this.maxInboundMetadataSize = bytes;

File: core/src/main/java/io/grpc/inprocess/InProcessServerBuilder.java
Patch:
@@ -137,6 +137,7 @@ public InProcessServerBuilder scheduledExecutorService(
    * @throws IllegalArgumentException if bytes is non-positive
    * @since 1.17.0
    */
+  @Override
   public InProcessServerBuilder maxInboundMetadataSize(int bytes) {
     Preconditions.checkArgument(bytes > 0, "maxInboundMetadataSize must be > 0");
     this.maxInboundMetadataSize = bytes;

File: core/src/test/java/io/grpc/ForwardingTestUtil.java
Patch:
@@ -53,7 +53,7 @@ public static <T> void testMethodsForwarded(
         delegateClass, mockDelegate, forwarder, skippedMethods,
         new ArgumentProvider() {
           @Override
-          public Object get(Class<?> clazz) {
+          public Object get(Method method, int argPos, Class<?> clazz) {
             return null;
           }
         });
@@ -89,7 +89,7 @@ public static <T> void testMethodsForwarded(
       Class<?>[] argTypes = method.getParameterTypes();
       Object[] args = new Object[argTypes.length];
       for (int i = 0; i < argTypes.length; i++) {
-        if ((args[i] = argProvider.get(argTypes[i])) == null) {
+        if ((args[i] = argProvider.get(method, i, argTypes[i])) == null) {
           args[i] = Defaults.defaultValue(argTypes[i]);
         }
       }
@@ -129,6 +129,6 @@ public interface ArgumentProvider {
      * @return a value to be passed as an argument.  If {@code null}, {@link Default#defaultValue}
      *         will be used.
      */
-    @Nullable Object get(Class<?> clazz);
+    @Nullable Object get(Method method, int argPos, Class<?> clazz);
   }
 }

File: core/src/test/java/io/grpc/util/ForwardingLoadBalancerHelperTest.java
Patch:
@@ -52,7 +52,7 @@ public void allMethodsForwarded() throws Exception {
         Collections.<Method>emptyList(),
         new ForwardingTestUtil.ArgumentProvider() {
           @Override
-          public Object get(Class<?> clazz) {
+          public Object get(Method method, int argPos, Class<?> clazz) {
             if (clazz.equals(EquivalentAddressGroup.class)) {
               return new EquivalentAddressGroup(Arrays.asList(mockAddr));
             } else if (clazz.equals(List.class)) {

File: netty/src/test/java/io/grpc/netty/NettyServerBuilderTest.java
Patch:
@@ -78,11 +78,11 @@ public void failIfMaxConcurrentCallsPerConnectionNegative() {
   }
 
   @Test
-  public void failIfMaxHeaderListSizeNegative() {
+  public void failIfMaxInboundMetadataSizeNonPositive() {
     thrown.expect(IllegalArgumentException.class);
-    thrown.expectMessage("maxHeaderListSize must be > 0");
+    thrown.expectMessage("maxInboundMetadataSize must be > 0");
 
-    builder.maxHeaderListSize(0);
+    builder.maxInboundMetadataSize(0);
   }
 
   @Test

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -419,6 +419,7 @@ public final OkHttpChannelBuilder scheduledExecutorService(
    * @throws IllegalArgumentException if bytes is non-positive
    * @since 1.17.0
    */
+  @Override
   public OkHttpChannelBuilder maxInboundMetadataSize(int bytes) {
     Preconditions.checkArgument(bytes > 0, "maxInboundMetadataSize must be > 0");
     this.maxInboundMetadataSize = bytes;

File: core/src/main/java/io/grpc/internal/DnsNameResolverProvider.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Stopwatch;
 import io.grpc.Attributes;
+import io.grpc.InternalServiceProviders;
 import io.grpc.NameResolverProvider;
 import java.net.URI;
 
@@ -54,7 +55,8 @@ public DnsNameResolver newNameResolver(URI targetUri, Attributes params) {
           params,
           GrpcUtil.SHARED_CHANNEL_EXECUTOR,
           GrpcUtil.getDefaultProxyDetector(),
-          Stopwatch.createUnstarted());
+          Stopwatch.createUnstarted(),
+          InternalServiceProviders.isAndroid(getClass().getClassLoader()));
     } else {
       return null;
     }

File: netty/src/test/java/io/grpc/netty/ProtocolNegotiatorsTest.java
Patch:
@@ -96,6 +96,7 @@ public void setUp() throws Exception {
     sslContext = GrpcSslContexts.forServer(serverCert, key)
         .ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE).build();
     engine = SSLContext.getDefault().createSSLEngine();
+    engine.setUseClientMode(true);
   }
 
   @Test

File: core/src/test/java/io/grpc/PickFirstLoadBalancerTest.java
Patch:
@@ -84,7 +84,7 @@ public void setUp() {
       socketAddresses.add(addr);
     }
 
-    when(mockSubchannel.getAddresses()).thenThrow(new UnsupportedOperationException());
+    when(mockSubchannel.getAllAddresses()).thenThrow(new UnsupportedOperationException());
     when(mockHelper.createSubchannel(
         anyListOf(EquivalentAddressGroup.class), any(Attributes.class)))
         .thenReturn(mockSubchannel);

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -222,7 +222,7 @@ public Subchannel answer(InvocationOnMock invocation) throws Throwable {
           Subchannel subchannel = mock(Subchannel.class);
           EquivalentAddressGroup eag = (EquivalentAddressGroup) invocation.getArguments()[0];
           Attributes attrs = (Attributes) invocation.getArguments()[1];
-          when(subchannel.getAddresses()).thenReturn(eag);
+          when(subchannel.getAllAddresses()).thenReturn(Arrays.asList(eag));
           when(subchannel.getAttributes()).thenReturn(attrs);
           mockSubchannels.add(subchannel);
           subchannelTracker.add(subchannel);
@@ -262,6 +262,7 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
   }
 
   @After
+  @SuppressWarnings("unchecked")
   public void tearDown() {
     try {
       if (balancer != null) {
@@ -285,7 +286,7 @@ public void run() {
         verify(subchannel, never()).shutdown();
       }
       verify(helper, never())
-          .createSubchannel(any(EquivalentAddressGroup.class), any(Attributes.class));
+          .createSubchannel(any(List.class), any(Attributes.class));
       // No timer should linger after shutdown
       assertThat(fakeClock.getPendingTasks()).isEmpty();
     } finally {

File: services/src/main/java/io/grpc/services/BinlogHelper.java
Patch:
@@ -486,6 +486,7 @@ public void halfClose() {
                 seq.getAndIncrement(),
                 GrpcLogEntry.Logger.LOGGER_CLIENT,
                 callId);
+            super.halfClose();
           }
 
           @Override
@@ -590,6 +591,7 @@ public void onCancel() {
                 seq.getAndIncrement(),
                 GrpcLogEntry.Logger.LOGGER_SERVER,
                 callId);
+            super.onCancel();
           }
         };
       }

File: services/src/main/java/io/grpc/services/ChannelzService.java
Patch:
@@ -61,7 +61,7 @@ public static ChannelzService newInstance(int maxPageSize) {
     this.maxPageSize = maxPageSize;
   }
 
-  /** Returns top level channel aka {@link io.grpc.internal.ManagedChannelImpl}. */
+  /** Returns top level channel aka {@link io.grpc.ManagedChannel}. */
   @Override
   public void getTopChannels(
       GetTopChannelsRequest request, StreamObserver<GetTopChannelsResponse> responseObserver) {
@@ -72,7 +72,7 @@ public void getTopChannels(
     responseObserver.onCompleted();
   }
 
-  /** Returns a top level channel aka {@link io.grpc.internal.ManagedChannelImpl}. */
+  /** Returns a top level channel aka {@link io.grpc.ManagedChannel}. */
   @Override
   public void getChannel(
       GetChannelRequest request, StreamObserver<GetChannelResponse> responseObserver) {

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java
Patch:
@@ -93,7 +93,7 @@ public String negotiate(
 
       String negotiatedProtocol = getSelectedProtocol(sslSocket);
       if (negotiatedProtocol == null) {
-        throw new RuntimeException("protocol negotiation failed");
+        throw new RuntimeException("TLS ALPN negotiation failed with protocols: " + protocols);
       }
       return negotiatedProtocol;
     } finally {
@@ -185,6 +185,7 @@ public String getSelectedProtocol(SSLSocket socket) {
             return new String(alpnResult, Util.UTF_8);
           }
         } catch (Exception e) {
+          logger.log(Level.FINE, "Failed calling getAlpnSelectedProtocol()", e);
           // In some implementations, querying selected protocol before the handshake will fail with
           // exception.
         }
@@ -198,6 +199,7 @@ public String getSelectedProtocol(SSLSocket socket) {
             return new String(npnResult, Util.UTF_8);
           }
         } catch (Exception e) {
+          logger.log(Level.FINE, "Failed calling getNpnSelectedProtocol()", e);
           // In some implementations, querying selected protocol before the handshake will fail with
           // exception.
         }

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpTlsUpgrader.java
Patch:
@@ -43,7 +43,7 @@ final class OkHttpTlsUpgrader {
    */
   @VisibleForTesting
   static final List<Protocol> TLS_PROTOCOLS =
-      Collections.unmodifiableList(Arrays.<Protocol>asList(Protocol.GRPC_EXP, Protocol.HTTP_2));
+      Collections.unmodifiableList(Arrays.asList(Protocol.GRPC_EXP, Protocol.HTTP_2));
 
   /**
    * Upgrades given Socket to be a SSLSocket.

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpProtocolNegotiatorTest.java
Patch:
@@ -128,7 +128,7 @@ public void negotiate_noSelectedProtocol() throws Exception {
     OkHttpProtocolNegotiator negotiator = new OkHttpProtocolNegotiator(platform);
 
     thrown.expect(RuntimeException.class);
-    thrown.expectMessage("protocol negotiation failed");
+    thrown.expectMessage("TLS ALPN negotiation failed");
 
     negotiator.negotiate(sock, "hostname", ImmutableList.of(Protocol.HTTP_2));
   }

File: android-interop-testing/app/src/androidTest/java/io/grpc/android/integrationtest/InteropInstrumentationTest.java
Patch:
@@ -127,7 +127,7 @@ public void onComplete(String result) {
     new InteropTask(
             listener,
             TesterOkHttpChannelBuilder.build(host, port, serverHostOverride, useTls, testCa),
-            new ArrayList<>(),
+            new ArrayList<ClientInterceptor>(),
             testCase)
         .execute();
     String result = resultFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -23,14 +23,14 @@
 import io.grpc.ConnectivityState;
 import io.grpc.ConnectivityStateInfo;
 import io.grpc.EquivalentAddressGroup;
+import io.grpc.InternalChannelz.ChannelTrace;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancer.Helper;
 import io.grpc.LoadBalancer.PickResult;
 import io.grpc.LoadBalancer.PickSubchannelArgs;
 import io.grpc.LoadBalancer.SubchannelPicker;
 import io.grpc.PickFirstBalancerFactory;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.ChannelTrace;
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Locale;

File: core/src/test/java/io/grpc/internal/AutoConfiguredLoadBalancerFactoryTest.java
Patch:
@@ -26,6 +26,7 @@
 import io.grpc.ConnectivityState;
 import io.grpc.ConnectivityStateInfo;
 import io.grpc.EquivalentAddressGroup;
+import io.grpc.InternalChannelz;
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancer.Helper;
 import io.grpc.LoadBalancer.Subchannel;
@@ -271,7 +272,8 @@ public long currentTimeNanos() {
       }
     };
 
-    Channelz.ChannelStats.Builder statsBuilder = new Channelz.ChannelStats.Builder();
+    InternalChannelz.ChannelStats.Builder statsBuilder
+        = new InternalChannelz.ChannelStats.Builder();
     channelTracer.updateBuilder(statsBuilder);
     List<EquivalentAddressGroup> servers =
         Collections.singletonList(

File: services/src/test/java/io/grpc/services/BinlogHelperTest.java
Patch:
@@ -878,7 +878,7 @@ public String authority() {
         any(Boolean.class),
         any(CallId.class));
     Duration timeout = callOptTimeoutCaptor.getValue();
-    assertThat(TimeUnit.SECONDS.toNanos(1) - timeout.getNanos())
+    assertThat(TimeUnit.SECONDS.toNanos(1) - Durations.toNanos(timeout))
         .isAtMost(TimeUnit.MILLISECONDS.toNanos(250));
   }
 
@@ -932,7 +932,7 @@ public String authority() {
         any(Boolean.class),
         any(CallId.class));
     Duration timeout = callOptTimeoutCaptor.getValue();
-    assertThat(TimeUnit.SECONDS.toNanos(1) - timeout.getNanos())
+    assertThat(TimeUnit.SECONDS.toNanos(1) - Durations.toNanos(timeout))
         .isAtMost(TimeUnit.MILLISECONDS.toNanos(250));
   }
 
@@ -1005,7 +1005,7 @@ public String authority() {
           same(CALL_ID));
       verifyNoMoreInteractions(mockSinkWriter);
       Duration timeout = timeoutCaptor.getValue();
-      assertThat(TimeUnit.SECONDS.toNanos(1) - timeout.getNanos())
+      assertThat(TimeUnit.SECONDS.toNanos(1) - Durations.toNanos(timeout))
           .isAtMost(TimeUnit.MILLISECONDS.toNanos(250));
       assertSame(clientInitial, actualClientInitial.get());
     }

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1798,7 +1798,7 @@ protected int operationTimeoutMillis() {
 
   /**
    * Some tests run on memory constrained environments.  Rather than OOM, just give up.  64 is
-   * choosen as a maximum amount of memory a large test would need.
+   * chosen as a maximum amount of memory a large test would need.
    */
   private static void assumeEnoughMemory() {
     Runtime r = Runtime.getRuntime();

File: alts/src/main/java/io/grpc/alts/HandshakerServiceChannel.java
Patch:
@@ -52,6 +52,7 @@ public ManagedChannel create() {
         }
 
         @Override
+        @SuppressWarnings("FutureReturnValueIgnored") // netty ChannelFuture
         public void close(ManagedChannel instance) {
           instance.shutdownNow();
           if (eventGroup != null) {

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -56,14 +56,12 @@
 import java.nio.channels.ClosedChannelException;
 import java.util.Map;
 import java.util.concurrent.Executor;
-import java.util.logging.Logger;
 import javax.annotation.Nullable;
 
 /**
  * A Netty-based {@link ConnectionClientTransport} implementation.
  */
 class NettyClientTransport implements ConnectionClientTransport {
-  private static final Logger log = Logger.getLogger(NettyServerTransport.class.getName());
   private final InternalLogId logId = InternalLogId.allocate(getClass().getName());
   private final Map<ChannelOption<?>, ?> channelOptions;
   private final SocketAddress address;

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -868,7 +868,6 @@ void start(final ChannelHandlerContext ctx) {
           ByteBufUtil.writeAscii(ctx.alloc(), goAwayMessage),
           ctx.newPromise());
 
-      long gracefulShutdownPingTimeout = GRACEFUL_SHUTDOWN_PING_TIMEOUT_NANOS;
       pingFuture = ctx.executor().schedule(
           new Runnable() {
             @Override

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -344,6 +344,8 @@ GrpclbClientLoadRecorder getLoadRecorder() {
   private void useRoundRobinLists(
       List<DropEntry> newDropList, List<BackendAddressGroup> newBackendAddrList,
       @Nullable GrpclbClientLoadRecorder loadRecorder) {
+    logger.log(Level.FINE, "[{0}] Using round-robin list: {1}, droplist={2}",
+         new Object[] {logId, newBackendAddrList, newDropList});
     HashMap<EquivalentAddressGroup, Subchannel> newSubchannelMap =
         new HashMap<EquivalentAddressGroup, Subchannel>();
     List<BackendEntry> newBackendList = new ArrayList<BackendEntry>();
@@ -540,7 +542,7 @@ private void handleResponse(LoadBalanceResponse response) {
       if (closed) {
         return;
       }
-      logger.log(Level.FINE, "[{0}] Got an LB response: {1}", new Object[] {logId, response});
+      logger.log(Level.FINER, "[{0}] Got an LB response: {1}", new Object[] {logId, response});
 
       LoadBalanceResponseTypeCase typeCase = response.getLoadBalanceResponseTypeCase();
       if (!initialResponseReceived) {

File: alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java
Patch:
@@ -22,12 +22,12 @@
 import io.grpc.Attributes;
 import io.grpc.CallCredentials;
 import io.grpc.Grpc;
+import io.grpc.InternalChannelz.OtherSecurity;
+import io.grpc.InternalChannelz.Security;
 import io.grpc.SecurityLevel;
 import io.grpc.Status;
 import io.grpc.alts.internal.RpcProtocolVersionsUtil.RpcVersionsCheckResult;
 import io.grpc.alts.internal.TsiHandshakeHandler.TsiHandshakeCompletionEvent;
-import io.grpc.internal.Channelz.OtherSecurity;
-import io.grpc.internal.Channelz.Security;
 import io.grpc.netty.GrpcHttp2ConnectionHandler;
 import io.grpc.netty.ProtocolNegotiator;
 import io.grpc.netty.ProtocolNegotiators.AbstractBufferingHandler;

File: alts/src/test/java/io/grpc/alts/internal/AltsProtocolNegotiatorTest.java
Patch:
@@ -26,11 +26,11 @@
 import io.grpc.Attributes;
 import io.grpc.CallCredentials;
 import io.grpc.Grpc;
+import io.grpc.InternalChannelz;
 import io.grpc.SecurityLevel;
 import io.grpc.alts.internal.Handshaker.HandshakerResult;
 import io.grpc.alts.internal.TsiFrameProtector.Consumer;
 import io.grpc.alts.internal.TsiPeer.Property;
-import io.grpc.internal.Channelz;
 import io.grpc.netty.GrpcHttp2ConnectionHandler;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
@@ -405,7 +405,7 @@ private CapturingGrpcHttp2ConnectionHandler(
 
     @Override
     public void handleProtocolNegotiationCompleted(
-        Attributes attrs, Channelz.Security securityInfo) {
+        Attributes attrs, InternalChannelz.Security securityInfo) {
       // If we are added to the pipeline, we need to remove ourselves.  The HTTP2 handler
       channel.pipeline().remove(this);
       this.attrs = attrs;

File: core/src/main/java/io/grpc/inprocess/InProcessServer.java
Patch:
@@ -19,9 +19,9 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.base.MoreObjects;
+import io.grpc.Instrumented;
+import io.grpc.InternalChannelz.SocketStats;
 import io.grpc.ServerStreamTracer;
-import io.grpc.internal.Channelz.SocketStats;
-import io.grpc.internal.Instrumented;
 import io.grpc.internal.InternalServer;
 import io.grpc.internal.ObjectPool;
 import io.grpc.internal.ServerListener;

File: core/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -31,17 +31,17 @@
 import io.grpc.Decompressor;
 import io.grpc.DecompressorRegistry;
 import io.grpc.Grpc;
+import io.grpc.InternalChannelz.SocketStats;
+import io.grpc.LogId;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.SecurityLevel;
 import io.grpc.ServerStreamTracer;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
 import io.grpc.internal.ClientStream;
 import io.grpc.internal.ClientStreamListener;
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.GrpcUtil;
-import io.grpc.internal.LogId;
 import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.NoopClientStream;
 import io.grpc.internal.ObjectPool;

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -27,6 +27,7 @@
 import io.grpc.CompressorRegistry;
 import io.grpc.DecompressorRegistry;
 import io.grpc.EquivalentAddressGroup;
+import io.grpc.InternalChannelz;
 import io.grpc.LoadBalancer;
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
@@ -134,7 +135,7 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
   // TODO(zdapeng): delete me
   boolean temporarilyDisableRetry;
 
-  Channelz channelz = Channelz.instance();
+  InternalChannelz channelz = InternalChannelz.instance();
   int maxTraceEvents;
 
   protected TransportTracer.Factory transportTracerFactory = TransportTracer.getDefaultFactory();

File: core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java
Patch:
@@ -28,6 +28,7 @@
 import io.grpc.DecompressorRegistry;
 import io.grpc.HandlerRegistry;
 import io.grpc.Internal;
+import io.grpc.InternalChannelz;
 import io.grpc.InternalNotifyOnServerBuild;
 import io.grpc.Server;
 import io.grpc.ServerBuilder;
@@ -113,7 +114,7 @@ public List<ServerServiceDefinition> getServices() {
   protected BinaryLog binlog;
   protected TransportTracer.Factory transportTracerFactory = TransportTracer.getDefaultFactory();
 
-  protected Channelz channelz = Channelz.instance();
+  protected InternalChannelz channelz = InternalChannelz.instance();
   protected CallTracer.Factory callTracerFactory = CallTracer.getDefaultFactory();
 
   @Override

File: core/src/main/java/io/grpc/internal/AbstractSubchannel.java
Patch:
@@ -17,8 +17,9 @@
 package io.grpc.internal;
 
 import com.google.common.annotations.VisibleForTesting;
+import io.grpc.Instrumented;
+import io.grpc.InternalChannelz.ChannelStats;
 import io.grpc.LoadBalancer;
-import io.grpc.internal.Channelz.ChannelStats;
 import javax.annotation.Nullable;
 
 /**

File: core/src/main/java/io/grpc/internal/CallTracer.java
Patch:
@@ -18,8 +18,8 @@
 
 import static io.grpc.internal.TimeProvider.SYSTEM_TIME_PROVIDER;
 
-import io.grpc.internal.Channelz.ChannelStats;
-import io.grpc.internal.Channelz.ServerStats;
+import io.grpc.InternalChannelz.ChannelStats;
+import io.grpc.InternalChannelz.ServerStats;
 
 /**
  * A collection of call stats for channelz.

File: core/src/main/java/io/grpc/internal/ChannelTracer.java
Patch:
@@ -19,9 +19,9 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 
-import io.grpc.internal.Channelz.ChannelStats;
-import io.grpc.internal.Channelz.ChannelTrace;
-import io.grpc.internal.Channelz.ChannelTrace.Event;
+import io.grpc.InternalChannelz.ChannelStats;
+import io.grpc.InternalChannelz.ChannelTrace;
+import io.grpc.InternalChannelz.ChannelTrace.Event;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Collection;

File: core/src/main/java/io/grpc/internal/ClientTransport.java
Patch:
@@ -17,9 +17,10 @@
 package io.grpc.internal;
 
 import io.grpc.CallOptions;
+import io.grpc.Instrumented;
+import io.grpc.InternalChannelz.SocketStats;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
-import io.grpc.internal.Channelz.SocketStats;
 import java.util.concurrent.Executor;
 import javax.annotation.concurrent.ThreadSafe;
 

File: core/src/main/java/io/grpc/internal/DelayedClientTransport.java
Patch:
@@ -21,13 +21,14 @@
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.CallOptions;
 import io.grpc.Context;
+import io.grpc.InternalChannelz.SocketStats;
 import io.grpc.LoadBalancer.PickResult;
 import io.grpc.LoadBalancer.PickSubchannelArgs;
 import io.grpc.LoadBalancer.SubchannelPicker;
+import io.grpc.LogId;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;

File: core/src/main/java/io/grpc/internal/FailingClientTransport.java
Patch:
@@ -21,10 +21,11 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.CallOptions;
+import io.grpc.InternalChannelz.SocketStats;
+import io.grpc.LogId;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
 import io.grpc.internal.ClientStreamListener.RpcProgress;
 import java.util.concurrent.Executor;
 

File: core/src/main/java/io/grpc/internal/ForwardingConnectionClientTransport.java
Patch:
@@ -20,10 +20,11 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
+import io.grpc.InternalChannelz.SocketStats;
+import io.grpc.LogId;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
 import java.util.concurrent.Executor;
 
 abstract class ForwardingConnectionClientTransport implements ConnectionClientTransport {

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -29,14 +29,15 @@
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
+import io.grpc.InternalChannelz.SocketStats;
 import io.grpc.InternalMetadata;
 import io.grpc.InternalMetadata.TrustedAsciiMarshaller;
 import io.grpc.LoadBalancer.PickResult;
 import io.grpc.LoadBalancer.Subchannel;
+import io.grpc.LogId;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
 import io.grpc.internal.ClientStreamListener.RpcProgress;
 import io.grpc.internal.SharedResourceHolder.Resource;
 import io.grpc.internal.StreamListener.MessageProducer;

File: core/src/main/java/io/grpc/internal/InternalServer.java
Patch:
@@ -16,7 +16,8 @@
 
 package io.grpc.internal;
 
-import io.grpc.internal.Channelz.SocketStats;
+import io.grpc.Instrumented;
+import io.grpc.InternalChannelz.SocketStats;
 import java.io.IOException;
 import java.util.List;
 import javax.annotation.concurrent.ThreadSafe;

File: core/src/main/java/io/grpc/internal/ServerTransport.java
Patch:
@@ -16,8 +16,9 @@
 
 package io.grpc.internal;
 
+import io.grpc.Instrumented;
+import io.grpc.InternalChannelz.SocketStats;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
 import java.util.concurrent.ScheduledExecutorService;
 
 /** An inbound connection. */

File: core/src/main/java/io/grpc/internal/TransportTracer.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
-import io.grpc.internal.Channelz.TransportStats;
+import io.grpc.InternalChannelz.TransportStats;
 
 /**
  * A class for gathering statistics about a transport. This is an experimental feature.

File: core/src/test/java/io/grpc/internal/ChannelTracerTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import io.grpc.internal.Channelz.ChannelStats;
-import io.grpc.internal.Channelz.ChannelTrace.Event;
-import io.grpc.internal.Channelz.ChannelTrace.Event.Severity;
+import io.grpc.InternalChannelz.ChannelStats;
+import io.grpc.InternalChannelz.ChannelTrace.Event;
+import io.grpc.InternalChannelz.ChannelTrace.Event.Severity;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;

File: core/src/test/java/io/grpc/internal/InternalSubchannelTest.java
Patch:
@@ -41,7 +41,9 @@
 import io.grpc.Attributes;
 import io.grpc.ConnectivityStateInfo;
 import io.grpc.EquivalentAddressGroup;
+import io.grpc.InternalChannelz;
 import io.grpc.Status;
+import io.grpc.WithLogId;
 import io.grpc.internal.InternalSubchannel.CallTracingTransport;
 import io.grpc.internal.InternalSubchannel.Index;
 import io.grpc.internal.TestUtils.MockClientTransportInfo;
@@ -79,7 +81,7 @@ public class InternalSubchannelTest {
   private final FakeClock fakeExecutor = new FakeClock();
   private final ChannelExecutor channelExecutor = new ChannelExecutor();
 
-  private final Channelz channelz = new Channelz();
+  private final InternalChannelz channelz = new InternalChannelz();
 
   @Mock private BackoffPolicy mockBackoffPolicy1;
   @Mock private BackoffPolicy mockBackoffPolicy2;

File: core/src/test/java/io/grpc/internal/MessageDeframerTest.java
Patch:
@@ -35,9 +35,9 @@
 import com.google.common.io.ByteStreams;
 import com.google.common.primitives.Bytes;
 import io.grpc.Codec;
+import io.grpc.InternalChannelz.TransportStats;
 import io.grpc.StatusRuntimeException;
 import io.grpc.StreamTracer;
-import io.grpc.internal.Channelz.TransportStats;
 import io.grpc.internal.MessageDeframer.Listener;
 import io.grpc.internal.MessageDeframer.SizeEnforcingInputStream;
 import io.grpc.internal.testing.TestStreamTracer.TestBaseStreamTracer;

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -34,14 +34,14 @@
 import io.grpc.CompressorRegistry;
 import io.grpc.Context;
 import io.grpc.DecompressorRegistry;
+import io.grpc.InternalChannelz.ServerStats;
+import io.grpc.InternalChannelz.ServerStats.Builder;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.Marshaller;
 import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.ServerCall;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.ServerStats;
-import io.grpc.internal.Channelz.ServerStats.Builder;
 import io.grpc.internal.ServerCallImpl.ServerStreamListenerImpl;
 import io.grpc.internal.testing.SingleMessageProducer;
 import java.io.ByteArrayInputStream;

File: core/src/test/java/io/grpc/internal/TestUtils.java
Patch:
@@ -22,6 +22,7 @@
 import static org.mockito.Mockito.when;
 
 import io.grpc.CallOptions;
+import io.grpc.LogId;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import java.net.SocketAddress;

File: cronet/src/main/java/io/grpc/cronet/CronetClientTransport.java
Patch:
@@ -22,16 +22,16 @@
 import io.grpc.Attributes;
 import io.grpc.CallCredentials;
 import io.grpc.CallOptions;
+import io.grpc.InternalChannelz.SocketStats;
+import io.grpc.LogId;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.SecurityLevel;
 import io.grpc.Status;
 import io.grpc.Status.Code;
 import io.grpc.cronet.CronetChannelBuilder.StreamBuilderFactory;
-import io.grpc.internal.Channelz.SocketStats;
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.GrpcUtil;
-import io.grpc.internal.LogId;
 import io.grpc.internal.StatsTraceContext;
 import io.grpc.internal.TransportTracer;
 import java.net.InetSocketAddress;

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java
Patch:
@@ -23,13 +23,13 @@
 import io.grpc.ConnectivityStateInfo;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.LoadBalancer;
+import io.grpc.LogId;
 import io.grpc.Status;
+import io.grpc.WithLogId;
 import io.grpc.internal.BackoffPolicy;
 import io.grpc.internal.GrpcAttributes;
-import io.grpc.internal.LogId;
 import io.grpc.internal.ObjectPool;
 import io.grpc.internal.TimeProvider;
-import io.grpc.internal.WithLogId;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -38,12 +38,12 @@
 import io.grpc.LoadBalancer.PickSubchannelArgs;
 import io.grpc.LoadBalancer.Subchannel;
 import io.grpc.LoadBalancer.SubchannelPicker;
+import io.grpc.LogId;
 import io.grpc.ManagedChannel;
 import io.grpc.Metadata;
 import io.grpc.Status;
 import io.grpc.internal.BackoffPolicy;
 import io.grpc.internal.GrpcAttributes;
-import io.grpc.internal.LogId;
 import io.grpc.internal.TimeProvider;
 import io.grpc.lb.v1.ClientStats;
 import io.grpc.lb.v1.InitialLoadBalanceRequest;

File: netty/src/main/java/io/grpc/netty/InternalNettySocketSupport.java
Patch:
@@ -17,7 +17,7 @@
 package io.grpc.netty;
 
 import io.grpc.Internal;
-import io.grpc.internal.Channelz.TcpInfo;
+import io.grpc.InternalChannelz.TcpInfo;
 import java.util.Map;
 
 /**

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -26,18 +26,18 @@
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
+import io.grpc.InternalChannelz.SocketStats;
+import io.grpc.LogId;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
 import io.grpc.internal.ClientStream;
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.FailingClientStream;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.Http2Ping;
 import io.grpc.internal.KeepAliveManager;
 import io.grpc.internal.KeepAliveManager.ClientKeepAlivePinger;
-import io.grpc.internal.LogId;
 import io.grpc.internal.StatsTraceContext;
 import io.grpc.internal.TransportTracer;
 import io.netty.bootstrap.Bootstrap;

File: netty/src/main/java/io/grpc/netty/NettyServerTransport.java
Patch:
@@ -22,10 +22,10 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import io.grpc.InternalChannelz.SocketStats;
+import io.grpc.LogId;
 import io.grpc.ServerStreamTracer;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
-import io.grpc.internal.LogId;
 import io.grpc.internal.ServerTransport;
 import io.grpc.internal.ServerTransportListener;
 import io.grpc.internal.TransportTracer;

File: netty/src/main/java/io/grpc/netty/NettySocketSupport.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
-import io.grpc.internal.Channelz.TcpInfo;
+import io.grpc.InternalChannelz.TcpInfo;
 import io.netty.channel.Channel;
 import java.util.Map;
 import javax.annotation.Nullable;

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -25,9 +25,9 @@
 import io.grpc.CallCredentials;
 import io.grpc.Grpc;
 import io.grpc.Internal;
+import io.grpc.InternalChannelz;
 import io.grpc.SecurityLevel;
 import io.grpc.Status;
-import io.grpc.internal.Channelz;
 import io.grpc.internal.GrpcUtil;
 import io.netty.channel.ChannelDuplexHandler;
 import io.netty.channel.ChannelFuture;
@@ -158,7 +158,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                     .set(Grpc.TRANSPORT_ATTR_SSL_SESSION, session)
                     .set(Grpc.TRANSPORT_ATTR_REMOTE_ADDR, ctx.channel().remoteAddress())
                     .build(),
-                new Channelz.Security(new Channelz.Tls(session)));
+                new InternalChannelz.Security(new InternalChannelz.Tls(session)));
             // Replace this handler with the GRPC handler.
             ctx.pipeline().replace(this, null, grpcHandler);
           } else {
@@ -649,7 +649,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                     .set(Grpc.TRANSPORT_ATTR_REMOTE_ADDR, ctx.channel().remoteAddress())
                     .set(CallCredentials.ATTR_SECURITY_LEVEL, SecurityLevel.PRIVACY_AND_INTEGRITY)
                     .build(),
-                new Channelz.Security(new Channelz.Tls(session)));
+                new InternalChannelz.Security(new InternalChannelz.Tls(session)));
             writeBufferedAndRemove(ctx);
           } else {
             Exception ex = new Exception(

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -25,10 +25,10 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import io.grpc.InternalChannelz;
 import io.grpc.InternalMetadata;
 import io.grpc.Metadata;
 import io.grpc.Status;
-import io.grpc.internal.Channelz;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.SharedResourceHolder.Resource;
 import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2InboundHeaders;
@@ -209,9 +209,9 @@ public String toString() {
     }
   }
 
-  static Channelz.SocketOptions getSocketOptions(Channel channel) {
+  static InternalChannelz.SocketOptions getSocketOptions(Channel channel) {
     ChannelConfig config = channel.config();
-    Channelz.SocketOptions.Builder b = new Channelz.SocketOptions.Builder();
+    InternalChannelz.SocketOptions.Builder b = new InternalChannelz.SocketOptions.Builder();
 
     // The API allows returning null but not sure if it can happen in practice.
     // Let's be paranoid and do null checking just in case.

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -40,14 +40,14 @@
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
 import io.grpc.Grpc;
+import io.grpc.InternalChannelz;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.Marshaller;
 import io.grpc.ServerStreamTracer;
 import io.grpc.Status;
 import io.grpc.Status.Code;
 import io.grpc.StatusException;
-import io.grpc.internal.Channelz;
 import io.grpc.internal.ClientStream;
 import io.grpc.internal.ClientStreamListener;
 import io.grpc.internal.ClientTransport;
@@ -107,7 +107,7 @@ public class NettyClientTransportTest {
   private final List<NettyClientTransport> transports = new ArrayList<NettyClientTransport>();
   private final NioEventLoopGroup group = new NioEventLoopGroup(1);
   private final EchoServerListener serverListener = new EchoServerListener();
-  private final Channelz channelz = new Channelz();
+  private final InternalChannelz channelz = new InternalChannelz();
   private Runnable tooManyPingsRunnable = new Runnable() {
     // Throwing is useless in this method, because Netty doesn't propagate the exception
     @Override public void run() {}

File: netty/src/test/java/io/grpc/netty/NettyHandlerTestBase.java
Patch:
@@ -29,7 +29,7 @@
 import static org.mockito.Mockito.when;
 
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
-import io.grpc.internal.Channelz.TransportStats;
+import io.grpc.InternalChannelz.TransportStats;
 import io.grpc.internal.FakeClock;
 import io.grpc.internal.MessageFramer;
 import io.grpc.internal.StatsTraceContext;

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -55,6 +55,9 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.CallOptions;
+import io.grpc.Instrumented;
+import io.grpc.InternalChannelz.SocketStats;
+import io.grpc.InternalChannelz.TransportStats;
 import io.grpc.InternalStatus;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
@@ -63,12 +66,9 @@
 import io.grpc.Status.Code;
 import io.grpc.StatusException;
 import io.grpc.internal.AbstractStream;
-import io.grpc.internal.Channelz.SocketStats;
-import io.grpc.internal.Channelz.TransportStats;
 import io.grpc.internal.ClientStreamListener;
 import io.grpc.internal.ClientTransport;
 import io.grpc.internal.GrpcUtil;
-import io.grpc.internal.Instrumented;
 import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.ProxyParameters;
 import io.grpc.internal.TransportTracer;

File: okhttp/src/test/java/io/grpc/okhttp/UtilsTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import io.grpc.internal.Channelz.SocketOptions;
+import io.grpc.InternalChannelz.SocketOptions;
 import io.grpc.okhttp.internal.CipherSuite;
 import io.grpc.okhttp.internal.ConnectionSpec;
 import io.grpc.okhttp.internal.TlsVersion;

File: services/src/test/java/io/grpc/services/ChannelzServiceTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
+import io.grpc.InternalChannelz;
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
 import io.grpc.channelz.v1.GetChannelRequest;
@@ -32,7 +33,6 @@
 import io.grpc.channelz.v1.GetSubchannelResponse;
 import io.grpc.channelz.v1.GetTopChannelsRequest;
 import io.grpc.channelz.v1.GetTopChannelsResponse;
-import io.grpc.internal.Channelz;
 import io.grpc.services.ChannelzTestHelper.TestChannel;
 import io.grpc.services.ChannelzTestHelper.TestServer;
 import io.grpc.services.ChannelzTestHelper.TestSocket;
@@ -48,7 +48,7 @@ public class ChannelzServiceTest {
   // small value to force pagination
   private static final int MAX_PAGE_SIZE = 1;
 
-  private final Channelz channelz = new Channelz();
+  private final InternalChannelz channelz = new InternalChannelz();
   private ChannelzService service = new ChannelzService(channelz, MAX_PAGE_SIZE);
 
   @Test

File: testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java
Patch:
@@ -48,17 +48,17 @@
 import io.grpc.CallOptions;
 import io.grpc.ClientStreamTracer;
 import io.grpc.Grpc;
+import io.grpc.Instrumented;
+import io.grpc.InternalChannelz.SocketStats;
+import io.grpc.InternalChannelz.TransportStats;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.ServerStreamTracer;
 import io.grpc.Status;
-import io.grpc.internal.Channelz.SocketStats;
-import io.grpc.internal.Channelz.TransportStats;
 import io.grpc.internal.ClientStream;
 import io.grpc.internal.ClientStreamListener;
 import io.grpc.internal.ClientTransport;
 import io.grpc.internal.ConnectionClientTransport;
-import io.grpc.internal.Instrumented;
 import io.grpc.internal.InternalServer;
 import io.grpc.internal.IoUtils;
 import io.grpc.internal.ManagedClientTransport;

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java
Patch:
@@ -203,7 +203,7 @@ public void onCompleted() {
     private void waitForRpcsToComplete(int duration) {
       long now = System.nanoTime();
       long end = now + duration * 1000 * 1000 * 1000;
-      while (histogram.getTotalCount() < numRpcs && now < end) {
+      while (histogram.getTotalCount() < numRpcs && end - now > 0) {
         now = System.nanoTime();
       }
     }

File: alts/src/main/java/io/grpc/alts/HandshakerServiceChannel.java
Patch:
@@ -28,7 +28,7 @@
  * the handshaker service is local and is over plaintext. Each application will have at most one
  * connection to the handshaker service.
  *
- * <p>TODO: Release the channel if it is not used.
+ * <p>TODO: Release the channel if it is not used. https://github.com/grpc/grpc-java/issues/4755.
  */
 final class HandshakerServiceChannel {
   // Default handshaker service address.

File: services/src/generated/main/java/io/grpc/binarylog/v1alpha/MessageOrBuilder.java
Patch:
@@ -1,7 +1,7 @@
 // Generated by the protocol buffer compiler.  DO NOT EDIT!
-// source: io/grpc/binarylog.proto
+// source: grpc/binlog/v1alpha/binarylog.proto
 
-package io.grpc.binarylog;
+package io.grpc.binarylog.v1alpha;
 
 public interface MessageOrBuilder extends
     // @@protoc_insertion_point(interface_extends:grpc.binarylog.v1alpha.Message)

File: services/src/generated/main/java/io/grpc/binarylog/v1alpha/MetadataEntryOrBuilder.java
Patch:
@@ -1,7 +1,7 @@
 // Generated by the protocol buffer compiler.  DO NOT EDIT!
-// source: io/grpc/binarylog.proto
+// source: grpc/binlog/v1alpha/binarylog.proto
 
-package io.grpc.binarylog;
+package io.grpc.binarylog.v1alpha;
 
 public interface MetadataEntryOrBuilder extends
     // @@protoc_insertion_point(interface_extends:grpc.binarylog.v1alpha.MetadataEntry)

File: services/src/generated/main/java/io/grpc/binarylog/v1alpha/PeerOrBuilder.java
Patch:
@@ -1,7 +1,7 @@
 // Generated by the protocol buffer compiler.  DO NOT EDIT!
-// source: io/grpc/binarylog.proto
+// source: grpc/binlog/v1alpha/binarylog.proto
 
-package io.grpc.binarylog;
+package io.grpc.binarylog.v1alpha;
 
 public interface PeerOrBuilder extends
     // @@protoc_insertion_point(interface_extends:grpc.binarylog.v1alpha.Peer)
@@ -14,7 +14,7 @@ public interface PeerOrBuilder extends
   /**
    * <code>.grpc.binarylog.v1alpha.Peer.PeerType peer_type = 1;</code>
    */
-  io.grpc.binarylog.Peer.PeerType getPeerType();
+  io.grpc.binarylog.v1alpha.Peer.PeerType getPeerType();
 
   /**
    * <pre>

File: services/src/generated/main/java/io/grpc/binarylog/v1alpha/Uint128OrBuilder.java
Patch:
@@ -1,7 +1,7 @@
 // Generated by the protocol buffer compiler.  DO NOT EDIT!
-// source: io/grpc/binarylog.proto
+// source: grpc/binlog/v1alpha/binarylog.proto
 
-package io.grpc.binarylog;
+package io.grpc.binarylog.v1alpha;
 
 public interface Uint128OrBuilder extends
     // @@protoc_insertion_point(interface_extends:grpc.binarylog.v1alpha.Uint128)

File: services/src/test/java/io/grpc/services/TempFileSinkTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import static org.junit.Assert.assertEquals;
 
-import io.grpc.binarylog.GrpcLogEntry;
-import io.grpc.binarylog.Uint128;
+import io.grpc.binarylog.v1alpha.GrpcLogEntry;
+import io.grpc.binarylog.v1alpha.Uint128;
 import java.io.DataInputStream;
 import java.io.FileInputStream;
 import java.io.IOException;

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -161,7 +161,7 @@ void parseArgs(String[] args) {
           + validTestCasesHelpText()
           + "\n  --use_tls=true|false        Whether to use TLS. Default " + c.useTls
           + "\n  --use_alts=true|false       Whether to use ALTS. Enable ALTS will disable TLS."
-          + "\n                              Default " + c.useTls
+          + "\n                              Default " + c.useAlts
           + "\n  --use_test_ca=true|false    Whether to trust our fake CA. Requires --use_tls=true "
           + "\n                              to have effect. Default " + c.useTestCa
           + "\n  --use_okhttp=true|false     Whether to use OkHttp instead of Netty. Default "

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -132,10 +132,11 @@ final class DnsNameResolver extends NameResolver {
     this.executorResource = executorResource;
     // Must prepend a "//" to the name when constructing a URI, otherwise it will be treated as an
     // opaque URI, thus the authority and host of the resulted URI would be null.
-    URI nameUri = URI.create("//" + name);
+    URI nameUri = URI.create("//" + checkNotNull(name, "name"));
+    Preconditions.checkArgument(nameUri.getHost() != null, "Invalid DNS name: %s", name);
     authority = Preconditions.checkNotNull(nameUri.getAuthority(),
         "nameUri (%s) doesn't have an authority", nameUri);
-    host = Preconditions.checkNotNull(nameUri.getHost(), "host");
+    host = nameUri.getHost();
     if (nameUri.getPort() == -1) {
       Integer defaultPort = params.get(NameResolver.Factory.PARAMS_DEFAULT_PORT);
       if (defaultPort != null) {

File: android/src/main/java/io/grpc/android/AndroidChannelBuilder.java
Patch:
@@ -69,7 +69,7 @@ private static final Class<?> findOkHttp() {
     }
   }
 
-  private final ManagedChannelBuilder delegateBuilder;
+  private final ManagedChannelBuilder<?> delegateBuilder;
 
   @Nullable private Context context;
 
@@ -81,7 +81,7 @@ public static AndroidChannelBuilder forAddress(String name, int port) {
     return forTarget(GrpcUtil.authorityFromHostAndPort(name, port));
   }
 
-  public static AndroidChannelBuilder fromBuilder(ManagedChannelBuilder builder) {
+  public static AndroidChannelBuilder fromBuilder(ManagedChannelBuilder<?> builder) {
     return new AndroidChannelBuilder(builder);
   }
 
@@ -100,7 +100,7 @@ private AndroidChannelBuilder(String target) {
     }
   }
 
-  private AndroidChannelBuilder(ManagedChannelBuilder delegateBuilder) {
+  private AndroidChannelBuilder(ManagedChannelBuilder<?> delegateBuilder) {
     this.delegateBuilder = Preconditions.checkNotNull(delegateBuilder, "delegateBuilder");
   }
 

File: core/src/test/java/io/grpc/util/RoundRobinLoadBalancerTest.java
Patch:
@@ -540,6 +540,7 @@ public void stickiness_goToTransientFailure_pick_backToReady() {
     headerWithStickinessValue.put(stickinessKey, "my-sticky-value");
     doReturn(headerWithStickinessValue).when(mockArgs).getHeaders();
 
+    @SuppressWarnings("unused")
     List<Subchannel> allSubchannels = picker.getList();
 
     // first pick
@@ -590,6 +591,7 @@ public void stickiness_goToTransientFailure_backToReady_pick() {
     headerWithStickinessValue1.put(stickinessKey, "my-sticky-value");
     doReturn(headerWithStickinessValue1).when(mockArgs).getHeaders();
 
+    @SuppressWarnings("unused")
     List<Subchannel> allSubchannels = picker.getList();
 
     // first pick
@@ -607,6 +609,7 @@ public void stickiness_goToTransientFailure_backToReady_pick() {
     picker = pickerCaptor.getValue();
 
     // second pick with a different stickiness value
+    @SuppressWarnings("unused")
     Subchannel sc2 = picker.pickSubchannel(mockArgs).getSubchannel();
 
     // go back to ready

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -1399,6 +1399,7 @@ public void grpclbBalancerStreamRetry() throws Exception {
     deliverResolvedAddresses(grpclbResolutionList, grpclbResolutionAttrs);
 
     assertEquals(1, fakeOobChannels.size());
+    @SuppressWarnings("unused")
     ManagedChannel oobChannel = fakeOobChannels.poll();
 
     // First balancer RPC

File: netty/src/test/java/io/grpc/netty/NettyHandlerTestBase.java
Patch:
@@ -245,7 +245,6 @@ protected final void channelRead(Object obj) throws Exception {
 
   protected ByteBuf grpcDataFrame(int streamId, boolean endStream, byte[] content) {
     final ByteBuf compressionFrame = Unpooled.buffer(content.length);
-    TransportTracer noTransportTracer = null;
     MessageFramer framer = new MessageFramer(
         new MessageFramer.Sink() {
           @Override

File: grpclb/src/generated/main/java/io/grpc/lb/v1/ClientStatsPerTokenOrBuilder.java
Patch:
@@ -1,7 +1,7 @@
 // Generated by the protocol buffer compiler.  DO NOT EDIT!
 // source: grpc/lb/v1/load_balancer.proto
 
-package io.grpc.grpclb;
+package io.grpc.lb.v1;
 
 public interface ClientStatsPerTokenOrBuilder extends
     // @@protoc_insertion_point(interface_extends:grpc.lb.v1.ClientStatsPerToken)

File: grpclb/src/generated/main/java/io/grpc/lb/v1/InitialLoadBalanceRequestOrBuilder.java
Patch:
@@ -1,7 +1,7 @@
 // Generated by the protocol buffer compiler.  DO NOT EDIT!
 // source: grpc/lb/v1/load_balancer.proto
 
-package io.grpc.grpclb;
+package io.grpc.lb.v1;
 
 public interface InitialLoadBalanceRequestOrBuilder extends
     // @@protoc_insertion_point(interface_extends:grpc.lb.v1.InitialLoadBalanceRequest)

File: grpclb/src/generated/main/java/io/grpc/lb/v1/InitialLoadBalanceResponseOrBuilder.java
Patch:
@@ -1,7 +1,7 @@
 // Generated by the protocol buffer compiler.  DO NOT EDIT!
 // source: grpc/lb/v1/load_balancer.proto
 
-package io.grpc.grpclb;
+package io.grpc.lb.v1;
 
 public interface InitialLoadBalanceResponseOrBuilder extends
     // @@protoc_insertion_point(interface_extends:grpc.lb.v1.InitialLoadBalanceResponse)

File: grpclb/src/generated/main/java/io/grpc/lb/v1/ServerOrBuilder.java
Patch:
@@ -1,7 +1,7 @@
 // Generated by the protocol buffer compiler.  DO NOT EDIT!
 // source: grpc/lb/v1/load_balancer.proto
 
-package io.grpc.grpclb;
+package io.grpc.lb.v1;
 
 public interface ServerOrBuilder extends
     // @@protoc_insertion_point(interface_extends:grpc.lb.v1.Server)

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbClientLoadRecorder.java
Patch:
@@ -24,6 +24,8 @@
 import io.grpc.Metadata;
 import io.grpc.Status;
 import io.grpc.internal.TimeProvider;
+import io.grpc.lb.v1.ClientStats;
+import io.grpc.lb.v1.ClientStatsPerToken;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;

File: core/src/main/java/io/grpc/ExperimentalApi.java
Patch:
@@ -53,5 +53,5 @@
   /**
    * Context information such as links to discussion thread, tracking issue etc.
    */
-  String value() default "";
+  String value();
 }

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -366,7 +366,7 @@ public <T> Iterable<T> removeAll(Key<T> key) {
    * Remove all values for the given key without returning them. This is a minor performance
    * optimization if you do not need the previous values.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4691")
   public <T> void discardAll(Key<T> key) {
     if (isEmpty()) {
       return;

File: core/src/main/java/io/grpc/SecurityLevel.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * The level of security guarantee in communications.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/4692")
 public enum SecurityLevel {
   /**
    * No security guarantee.

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -408,7 +408,7 @@ public static Status fromThrowable(Throwable t) {
    *
    * @return the trailers or {@code null} if not found.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4683")
   public static Metadata trailersFromThrowable(Throwable t) {
     Throwable cause = checkNotNull(t, "t");
     while (cause != null) {

File: protobuf/src/main/java/io/grpc/protobuf/StatusProto.java
Patch:
@@ -28,7 +28,7 @@
 import javax.annotation.Nullable;
 
 /** Utility methods for working with {@link com.google.rpc.Status}. */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/4695")
 public final class StatusProto {
   private StatusProto() {}
 

File: services/src/main/java/io/grpc/services/HealthStatusManager.java
Patch:
@@ -27,7 +27,7 @@
  * {@link #getHealthService()} method.
  * The health status manager can update the health statuses of the server.
  */
-@io.grpc.ExperimentalApi
+@io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/4696")
 public final class HealthStatusManager {
 
   private final HealthServiceImpl healthService;

File: stub/src/main/java/io/grpc/stub/ClientResponseObserver.java
Patch:
@@ -22,7 +22,7 @@
  * Specialization of {@link StreamObserver} implemented by clients in order to interact with the
  * advanced features of a call such as flow-control.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/4693")
 public interface ClientResponseObserver<ReqT, RespT> extends StreamObserver<RespT> {
   /**
    * Called by the runtime priot to the start of a call to provide a reference to the

File: stub/src/main/java/io/grpc/stub/StreamObservers.java
Patch:
@@ -24,7 +24,7 @@
  * Utility functions for working with {@link StreamObserver} and it's common subclasses like
  * {@link CallStreamObserver}.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/4694")
 public final class StreamObservers {
   /**
    * Copy the values of an {@link Iterator} to the target {@link CallStreamObserver} while properly

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc;
 
-import com.google.errorprone.annotations.DoNotMock;
 import javax.annotation.Nullable;
 
 /**
@@ -95,10 +94,11 @@
  *   call.request(1);
  * </pre>
  *
+ * <p>DO NOT MOCK: Use InProcessServerBuilder and make a test server instead.
+ *
  * @param <ReqT> type of message sent one or more times to the server.
  * @param <RespT> type of message received one or more times from the server.
  */
-@DoNotMock("Use InProcessServerBuilder and make a test server instead")
 public abstract class ClientCall<ReqT, RespT> {
   /**
    * Callbacks for receiving metadata, response messages and completion status from the server.

File: core/src/main/java/io/grpc/ServerCall.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc;
 
-import com.google.errorprone.annotations.DoNotMock;
 import javax.annotation.Nullable;
 
 /**
@@ -33,10 +32,11 @@
  *
  * <p>Methods are guaranteed to be non-blocking. Implementations are not required to be thread-safe.
  *
+ * <p>DO NOT MOCK: Use InProcessTransport and make a fake server instead.
+ *
  * @param <ReqT> parsed type of request message.
  * @param <RespT> parsed type of response message.
  */
-@DoNotMock("Use InProcessTransport and make a fake server instead")
 public abstract class ServerCall<ReqT, RespT> {
 
   /**

File: core/src/main/java/io/grpc/StreamTracer.java
Patch:
@@ -16,15 +16,15 @@
 
 package io.grpc;
 
-import com.google.errorprone.annotations.DoNotMock;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**
  * Listens to events on a stream to collect metrics.
+ *
+ * <p>DO NOT MOCK: Use TestStreamTracer. Mocks are not thread-safe
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/2861")
 @ThreadSafe
-@DoNotMock
 public abstract class StreamTracer {
   /**
    * Stream is closed.  This will be called exactly once.

File: stub/src/main/java/io/grpc/stub/AbstractStub.java
Patch:
@@ -18,7 +18,6 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-import com.google.errorprone.annotations.DoNotMock;
 import io.grpc.CallCredentials;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
@@ -41,11 +40,13 @@
  * <p>Configuration is stored in {@link CallOptions} and is passed to the {@link Channel} when
  * performing an RPC.
  *
+ * <p>DO NOT MOCK: Customizing options doesn't work properly in mocks. Use InProcessChannelBuilder
+ * to create a real channel suitable for testing. It is also possible to mock Channel instead.
+ *
  * @since 1.0.0
  * @param <S> the concrete type of this stub.
  */
 @ThreadSafe
-@DoNotMock
 @CheckReturnValue
 public abstract class AbstractStub<S extends AbstractStub<S>> {
   private final Channel channel;

File: stub/src/main/java/io/grpc/stub/CallStreamObserver.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc.stub;
 
-import com.google.errorprone.annotations.DoNotMock;
 import io.grpc.ExperimentalApi;
 
 /**
@@ -37,9 +36,11 @@
  *
  * <p>Like {@code StreamObserver}, implementations are not required to be thread-safe; if multiple
  * threads will be writing to an instance concurrently, the application must synchronize its calls.
+ *
+ * <p>DO NOT MOCK: The API is too complex to reliably mock. Use InProcessChannelBuilder to create
+ * "real" RPCs suitable for testing.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1788")
-@DoNotMock
 public abstract class CallStreamObserver<V> implements StreamObserver<V> {
 
   /**

File: stub/src/main/java/io/grpc/stub/ClientCallStreamObserver.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc.stub;
 
-import com.google.errorprone.annotations.DoNotMock;
 import io.grpc.ExperimentalApi;
 
 import javax.annotation.Nullable;
@@ -27,9 +26,11 @@
  *
  * <p>Like {@code StreamObserver}, implementations are not required to be thread-safe; if multiple
  * threads will be writing to an instance concurrently, the application must synchronize its calls.
+ *
+ * <p>DO NOT MOCK: The API is too complex to reliably mock. Use InProcessChannelBuilder to create
+ * "real" RPCs suitable for testing and make a fake for the server-side.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1788")
-@DoNotMock
 public abstract class ClientCallStreamObserver<V> extends CallStreamObserver<V> {
   /**
    * Prevent any further processing for this {@code ClientCallStreamObserver}. No further messages

File: stub/src/main/java/io/grpc/stub/ServerCallStreamObserver.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc.stub;
 
-import com.google.errorprone.annotations.DoNotMock;
 import io.grpc.ExperimentalApi;
 
 /**
@@ -25,9 +24,11 @@
  *
  * <p>Like {@code StreamObserver}, implementations are not required to be thread-safe; if multiple
  * threads will be writing to an instance concurrently, the application must synchronize its calls.
+ *
+ * <p>DO NOT MOCK: The API is too complex to reliably mock. Use InProcessChannelBuilder to create
+ * "real" RPCs suitable for testing and interact with the server using a normal client stub.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1788")
-@DoNotMock
 public abstract class ServerCallStreamObserver<V> extends CallStreamObserver<V> {
 
   /**

File: alts/src/generated/main/grpc/io/grpc/alts/internal/HandshakerServiceGrpc.java
Patch:
@@ -33,8 +33,8 @@ private HandshakerServiceGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.gcp.HandshakerService",
       methodName = "DoHandshake",
-      inputType = io.grpc.alts.internal.Handshaker.HandshakerReq.class,
-      outputType = io.grpc.alts.internal.Handshaker.HandshakerResp.class,
+      requestType = io.grpc.alts.internal.Handshaker.HandshakerReq.class,
+      responseType = io.grpc.alts.internal.Handshaker.HandshakerResp.class,
       methodType = io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
   public static io.grpc.MethodDescriptor<io.grpc.alts.internal.Handshaker.HandshakerReq,
       io.grpc.alts.internal.Handshaker.HandshakerResp> getDoHandshakeMethod() {

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/ReportQpsScenarioServiceGrpc.java
Patch:
@@ -33,8 +33,8 @@ private ReportQpsScenarioServiceGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.testing.ReportQpsScenarioService",
       methodName = "ReportScenario",
-      inputType = io.grpc.benchmarks.proto.Control.ScenarioResult.class,
-      outputType = io.grpc.benchmarks.proto.Control.Void.class,
+      requestType = io.grpc.benchmarks.proto.Control.ScenarioResult.class,
+      responseType = io.grpc.benchmarks.proto.Control.Void.class,
       methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
   public static io.grpc.MethodDescriptor<io.grpc.benchmarks.proto.Control.ScenarioResult,
       io.grpc.benchmarks.proto.Control.Void> getReportScenarioMethod() {

File: grpclb/src/generated/main/grpc/io/grpc/grpclb/LoadBalancerGrpc.java
Patch:
@@ -33,8 +33,8 @@ private LoadBalancerGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.lb.v1.LoadBalancer",
       methodName = "BalanceLoad",
-      inputType = io.grpc.grpclb.LoadBalanceRequest.class,
-      outputType = io.grpc.grpclb.LoadBalanceResponse.class,
+      requestType = io.grpc.grpclb.LoadBalanceRequest.class,
+      responseType = io.grpc.grpclb.LoadBalanceResponse.class,
       methodType = io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
   public static io.grpc.MethodDescriptor<io.grpc.grpclb.LoadBalanceRequest,
       io.grpc.grpclb.LoadBalanceResponse> getBalanceLoadMethod() {

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -37,8 +37,8 @@ private UnimplementedServiceGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.testing.UnimplementedService",
       methodName = "UnimplementedCall",
-      inputType = io.grpc.testing.integration.EmptyProtos.Empty.class,
-      outputType = io.grpc.testing.integration.EmptyProtos.Empty.class,
+      requestType = io.grpc.testing.integration.EmptyProtos.Empty.class,
+      responseType = io.grpc.testing.integration.EmptyProtos.Empty.class,
       methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
   public static io.grpc.MethodDescriptor<io.grpc.testing.integration.EmptyProtos.Empty,
       io.grpc.testing.integration.EmptyProtos.Empty> getUnimplementedCallMethod() {

File: services/src/generated/main/grpc/io/grpc/health/v1/HealthGrpc.java
Patch:
@@ -33,8 +33,8 @@ private HealthGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.health.v1.Health",
       methodName = "Check",
-      inputType = io.grpc.health.v1.HealthCheckRequest.class,
-      outputType = io.grpc.health.v1.HealthCheckResponse.class,
+      requestType = io.grpc.health.v1.HealthCheckRequest.class,
+      responseType = io.grpc.health.v1.HealthCheckResponse.class,
       methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
   public static io.grpc.MethodDescriptor<io.grpc.health.v1.HealthCheckRequest,
       io.grpc.health.v1.HealthCheckResponse> getCheckMethod() {

File: services/src/generated/main/grpc/io/grpc/reflection/v1alpha/ServerReflectionGrpc.java
Patch:
@@ -33,8 +33,8 @@ private ServerReflectionGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.reflection.v1alpha.ServerReflection",
       methodName = "ServerReflectionInfo",
-      inputType = io.grpc.reflection.v1alpha.ServerReflectionRequest.class,
-      outputType = io.grpc.reflection.v1alpha.ServerReflectionResponse.class,
+      requestType = io.grpc.reflection.v1alpha.ServerReflectionRequest.class,
+      responseType = io.grpc.reflection.v1alpha.ServerReflectionResponse.class,
       methodType = io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
   public static io.grpc.MethodDescriptor<io.grpc.reflection.v1alpha.ServerReflectionRequest,
       io.grpc.reflection.v1alpha.ServerReflectionResponse> getServerReflectionInfoMethod() {

File: services/src/generated/test/grpc/io/grpc/reflection/testing/AnotherDynamicServiceGrpc.java
Patch:
@@ -36,8 +36,8 @@ private AnotherDynamicServiceGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.reflection.testing.AnotherDynamicService",
       methodName = "Method",
-      inputType = io.grpc.reflection.testing.DynamicRequest.class,
-      outputType = io.grpc.reflection.testing.DynamicReply.class,
+      requestType = io.grpc.reflection.testing.DynamicRequest.class,
+      responseType = io.grpc.reflection.testing.DynamicReply.class,
       methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
   public static io.grpc.MethodDescriptor<io.grpc.reflection.testing.DynamicRequest,
       io.grpc.reflection.testing.DynamicReply> getMethodMethod() {

File: services/src/generated/test/grpc/io/grpc/reflection/testing/DynamicServiceGrpc.java
Patch:
@@ -36,8 +36,8 @@ private DynamicServiceGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.reflection.testing.DynamicService",
       methodName = "Method",
-      inputType = io.grpc.reflection.testing.DynamicRequest.class,
-      outputType = io.grpc.reflection.testing.DynamicReply.class,
+      requestType = io.grpc.reflection.testing.DynamicRequest.class,
+      responseType = io.grpc.reflection.testing.DynamicReply.class,
       methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
   public static io.grpc.MethodDescriptor<io.grpc.reflection.testing.DynamicRequest,
       io.grpc.reflection.testing.DynamicReply> getMethodMethod() {

File: services/src/generated/test/grpc/io/grpc/reflection/testing/ReflectableServiceGrpc.java
Patch:
@@ -33,8 +33,8 @@ private ReflectableServiceGrpc() {}
   @io.grpc.stub.annotations.RpcMethod(
       fullServiceName = "grpc.reflection.testing.ReflectableService",
       methodName = "Method",
-      inputType = io.grpc.reflection.testing.Request.class,
-      outputType = io.grpc.reflection.testing.Reply.class,
+      requestType = io.grpc.reflection.testing.Request.class,
+      responseType = io.grpc.reflection.testing.Reply.class,
       methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
   public static io.grpc.MethodDescriptor<io.grpc.reflection.testing.Request,
       io.grpc.reflection.testing.Reply> getMethodMethod() {

File: netty/src/main/java/io/grpc/netty/GrpcSslContexts.java
Patch:
@@ -219,6 +219,8 @@ public static SslContextBuilder configure(SslContextBuilder builder, Provider jd
         apc = ALPN;
       } else if (JettyTlsUtil.isJettyNpnConfigured()) {
         apc = NPN;
+      } else if (JettyTlsUtil.isJava9AlpnAvailable()) {
+        apc = ALPN;
       } else {
         throw new IllegalArgumentException(
             SUN_PROVIDER_NAME + " selected, but Jetty NPN/ALPN unavailable");

File: core/src/test/java/io/grpc/PickFirstLoadBalancerTest.java
Patch:
@@ -132,7 +132,6 @@ public void pickAfterResolvedAndUnchanged() throws Exception {
   @Test
   public void pickAfterResolvedAndChanged() throws Exception {
     SocketAddress socketAddr = new FakeSocketAddress("newserver");
-    List<SocketAddress> newSocketAddresses = Lists.newArrayList(socketAddr);
     List<EquivalentAddressGroup> newServers =
         Lists.newArrayList(new EquivalentAddressGroup(socketAddr));
 

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -634,6 +634,7 @@ public boolean visit(Http2Stream stream) throws Http2Exception {
         return true;
       }
     });
+    promise.setSuccess();
   }
 
   /**

File: core/src/test/java/io/grpc/internal/CensusModulesTest.java
Patch:
@@ -70,7 +70,6 @@
 import io.opencensus.contrib.grpc.metrics.RpcMeasureConstants;
 import io.opencensus.tags.TagContext;
 import io.opencensus.tags.TagValue;
-import io.opencensus.tags.Tags;
 import io.opencensus.trace.EndSpanOptions;
 import io.opencensus.trace.MessageEvent;
 import io.opencensus.trace.MessageEvent.Type;
@@ -261,7 +260,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
         ctx.detach(origCtx);
       }
     } else {
-      assertEquals(Tags.getTagger().empty(), TAG_CONTEXT_KEY.get());
+      assertEquals(TAG_CONTEXT_KEY.get(Context.ROOT), TAG_CONTEXT_KEY.get());
       assertNull(ContextUtils.CONTEXT_SPAN_KEY.get());
       call = interceptedChannel.newCall(method, CALL_OPTIONS);
     }

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -37,7 +37,7 @@
 final class AutoConfiguredLoadBalancerFactory extends LoadBalancer.Factory {
 
   @VisibleForTesting
-  static final String ROUND_ROUND_LOAD_BALANCER_FACTORY_NAME =
+  static final String ROUND_ROBIN_LOAD_BALANCER_FACTORY_NAME =
       "io.grpc.util.RoundRobinLoadBalancerFactory";
   @VisibleForTesting
   static final String GRPCLB_LOAD_BALANCER_FACTORY_NAME =
@@ -165,7 +165,7 @@ static LoadBalancer.Factory decideLoadBalancerFactory(
       if (serviceConfigChoiceBalancingPolicy != null) {
         if (serviceConfigChoiceBalancingPolicy.toUpperCase(Locale.ROOT).equals("ROUND_ROBIN")) {
           try {
-            Class<?> lbFactoryClass = Class.forName(ROUND_ROUND_LOAD_BALANCER_FACTORY_NAME);
+            Class<?> lbFactoryClass = Class.forName(ROUND_ROBIN_LOAD_BALANCER_FACTORY_NAME);
             Method getInstance = lbFactoryClass.getMethod("getInstance");
             return (LoadBalancer.Factory) getInstance.invoke(null);
           } catch (RuntimeException e) {

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldClient.java
Patch:
@@ -41,7 +41,7 @@ public HelloWorldClient(String host, int port) {
         .build());
   }
 
-  /** Construct client for accessing RouteGuide server using the existing channel. */
+  /** Construct client for accessing HelloWorld server using the existing channel. */
   HelloWorldClient(ManagedChannel channel) {
     this.channel = channel;
     blockingStub = GreeterGrpc.newBlockingStub(channel);

File: protobuf-lite/src/main/java/io/grpc/protobuf/lite/ProtoInputStream.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * An {@link InputStream} backed by a protobuf.
  */
-class ProtoInputStream extends InputStream implements Drainable, KnownLength {
+final class ProtoInputStream extends InputStream implements Drainable, KnownLength {
 
   // ProtoInputStream is first initialized with a *message*. *partial* is initially null.
   // Once there has been a read operation on this stream, *message* is serialized to *partial* and
@@ -39,7 +39,7 @@ class ProtoInputStream extends InputStream implements Drainable, KnownLength {
   private final Parser<?> parser;
   @Nullable private ByteArrayInputStream partial;
 
-  public ProtoInputStream(MessageLite message, Parser<?> parser) {
+  ProtoInputStream(MessageLite message, Parser<?> parser) {
     this.message = message;
     this.parser = parser;
   }
@@ -103,7 +103,7 @@ public int read(byte[] b, int off, int len) throws IOException {
   }
 
   @Override
-  public int available() throws IOException {
+  public int available() {
     if (message != null) {
       return message.getSerializedSize();
     } else if (partial != null) {

File: protobuf-nano/src/main/java/io/grpc/protobuf/nano/MessageNanoFactory.java
Patch:
@@ -22,6 +22,8 @@
  * Produce new message instances. Used by a marshaller to deserialize incoming messages.
  *
  * <p>Should be implemented by generated code.
+ *
+ * @since 1.0.0
  */
 public interface MessageNanoFactory<T extends MessageNano> {
   T newInstance();

File: protobuf-nano/src/main/java/io/grpc/protobuf/nano/NanoProtoInputStream.java
Patch:
@@ -27,15 +27,15 @@
 /**
  * An {@link InputStream} backed by a nano proto.
  */
-class NanoProtoInputStream extends InputStream implements KnownLength {
+final class NanoProtoInputStream extends InputStream implements KnownLength {
 
   // NanoProtoInputStream is first initialized with a *message*. *partial* is initially null.
   // Once there has been a read operation on this stream, *message* is serialized to *partial* and
   // set to null.
   @Nullable private MessageNano message;
   @Nullable private ByteArrayInputStream partial;
 
-  public NanoProtoInputStream(MessageNano message) {
+  NanoProtoInputStream(MessageNano message) {
     this.message = message;
   }
 
@@ -84,7 +84,7 @@ public int read(byte[] b, int off, int len) throws IOException {
   }
 
   @Override
-  public int available() throws IOException {
+  public int available() {
     if (message != null) {
       return message.getSerializedSize();
     } else if (partial != null) {

File: protobuf/src/main/java/io/grpc/protobuf/ProtoFileDescriptorSupplier.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * Provides access to the underlying proto file descriptor.
+ *
+ * @since 1.1.0
  */
 public interface ProtoFileDescriptorSupplier {
   /**

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1868,7 +1868,7 @@ private void assertServerStatsTrace(String method, Status.Code code,
       assertNotNull(serverEndRecord);
       checkStartTags(serverStartRecord, method);
       checkEndTags(serverEndRecord, method, code);
-      if (server != null && requests != null && responses != null) {
+      if (requests != null && responses != null) {
         checkCensus(serverEndRecord, true, requests, responses);
       }
     }

File: services/src/test/java/io/grpc/services/BinlogHelperTest.java
Patch:
@@ -549,7 +549,7 @@ public void toFlag() throws Exception {
   public void logSendInitialMetadata_server() throws Exception {
     sinkWriterImpl.logSendInitialMetadata(
         /*seq=*/ 1,
-        /*methodNmae=*/ null,
+        /*methodName=*/ null,
         /*timeout=*/ null,
         nonEmptyMetadata,
         IS_SERVER,
@@ -649,7 +649,7 @@ public void logRecvInitialMetadata_client() throws Exception {
     InetSocketAddress socketAddress = new InetSocketAddress(address, port);
     sinkWriterImpl.logRecvInitialMetadata(
         /*seq=*/ 1,
-        /*methodNmae=*/ null,
+        /*methodName=*/ null,
         /*timeout=*/ null,
         nonEmptyMetadata,
         IS_CLIENT,

File: core/src/main/java/io/grpc/ForwardingChannelBuilder.java
Patch:
@@ -99,7 +99,7 @@ public T overrideAuthority(String authority) {
   @Override
   @Deprecated
   public T usePlaintext(boolean skipNegotiation) {
-    ManagedChannelBuilder<?> o = delegate().usePlaintext(skipNegotiation);
+    delegate().usePlaintext(skipNegotiation);
     return thisT();
   }
 

File: core/src/main/java/io/grpc/internal/Channelz.java
Patch:
@@ -544,7 +544,7 @@ public boolean equals(Object o) {
           Event that = (Event) o;
           return Objects.equal(description, that.description)
               && Objects.equal(severity, that.severity)
-              && Objects.equal(timestampNanos, that.timestampNanos)
+              && timestampNanos == that.timestampNanos
               && Objects.equal(channelRef, that.channelRef)
               && Objects.equal(subchannelRef, that.subchannelRef);
         }

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -132,8 +132,7 @@ public void setUp() throws Exception {
         int port = pickUnusedPort();
         InetSocketAddress address = new InetSocketAddress("localhost", port);
         serverBuilder = NettyServerBuilder.forAddress(address);
-        channelBuilder = OkHttpChannelBuilder.forAddress("localhost", port)
-            .negotiationType(io.grpc.okhttp.NegotiationType.PLAINTEXT);
+        channelBuilder = OkHttpChannelBuilder.forAddress("localhost", port).usePlaintext();
         break;
       }
       default:

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpChannelBuilderTest.java
Patch:
@@ -77,9 +77,7 @@ protected String checkAuthority(String authority) {
       }
     };
 
-    builder.overrideAuthority("[invalidauthority")
-        .negotiationType(NegotiationType.PLAINTEXT)
-        .buildTransportFactory();
+    builder.overrideAuthority("[invalidauthority").usePlaintext().buildTransportFactory();
   }
 
   @Test

File: core/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -226,7 +226,7 @@ public T maxInboundMessageSize(int bytes) {
   }
 
   /**
-   * Sets the BinaryLog object that this server should log to. The channel does not take
+   * Sets the BinaryLog object that this server should log to. The server does not take
    * ownership of the object, and users are responsible for calling {@link BinaryLog#close()}.
    *
    * @param binaryLog the object to provide logging.

File: core/src/main/java/io/grpc/InternalClientInterceptors.java
Patch:
@@ -23,10 +23,10 @@
  */
 @Internal
 public final class InternalClientInterceptors {
-  public static <WReqT, WRespT> ClientInterceptor wrapClientInterceptor(
+  public static <ReqT, RespT> ClientInterceptor wrapClientInterceptor(
       final ClientInterceptor interceptor,
-      final Marshaller<WReqT> reqMarshaller,
-      final Marshaller<WRespT> respMarshaller) {
+      final Marshaller<ReqT> reqMarshaller,
+      final Marshaller<RespT> respMarshaller) {
     return ClientInterceptors.wrapClientInterceptor(interceptor, reqMarshaller, respMarshaller);
   }
 }

File: services/src/test/java/io/grpc/services/BinaryLogProviderTest.java
Patch:
@@ -406,7 +406,7 @@ public T parse(InputStream stream) {
 
 
   private static class StringMarshaller implements MethodDescriptor.Marshaller<String> {
-    public static StringMarshaller INSTANCE = new StringMarshaller();
+    public static final StringMarshaller INSTANCE = new StringMarshaller();
 
     @Override
     public InputStream stream(String value) {

File: core/src/main/java/io/grpc/internal/CensusTracingModule.java
Patch:
@@ -20,8 +20,8 @@
 import static io.opencensus.trace.unsafe.ContextUtils.CONTEXT_SPAN_KEY;
 
 import com.google.common.annotations.VisibleForTesting;
+import io.grpc.BinaryLog;
 import io.grpc.BinaryLog.CallId;
-import io.grpc.BinaryLogProvider;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.ClientCall;
@@ -386,7 +386,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
               method,
               callOptions.withStreamTracerFactory(tracerFactory)
                   .withOption(
-                      BinaryLogProvider.CLIENT_CALL_ID_CALLOPTION_KEY,
+                      BinaryLog.CLIENT_CALL_ID_CALLOPTION_KEY,
                       new CallId(
                           0,
                           ByteBuffer.wrap(

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -31,7 +31,6 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.Attributes;
-import io.grpc.BinaryLogProvider;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.ClientCall;
@@ -140,7 +139,7 @@ void handleUncaughtThrowable(Throwable t) {
 
   /**
    * We delegate to this channel, so that we can have interceptors as necessary. If there aren't
-   * any interceptors and the {@link BinaryLogProvider} is {@code null} then this will just be a
+   * any interceptors and the {@link io.grpc.BinaryLog} is {@code null} then this will just be a
    * {@link RealChannel}.
    */
   private final Channel interceptorChannel;

File: core/src/test/java/io/grpc/internal/CensusModulesTest.java
Patch:
@@ -44,8 +44,8 @@
 
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.Attributes;
+import io.grpc.BinaryLog;
 import io.grpc.BinaryLog.CallId;
-import io.grpc.BinaryLogProvider;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.ClientCall;
@@ -1000,7 +1000,7 @@ public String authority() {
     new CensusTracingModule(tracer, mock(BinaryFormat.class))
         .getClientInterceptor()
         .interceptCall(TestMethodDescriptors.voidMethod(), CallOptions.DEFAULT, c);
-    CallId callId = options.get().getOption(BinaryLogProvider.CLIENT_CALL_ID_CALLOPTION_KEY);
+    CallId callId = options.get().getOption(BinaryLog.CLIENT_CALL_ID_CALLOPTION_KEY);
     assertThat(callId.hi).isEqualTo(0);
     assertThat(callId.lo)
         .isEqualTo(ByteBuffer.wrap(mockableSpan.getContext().getSpanId().getBytes()).getLong());

File: services/src/main/java/io/grpc/services/BinaryLogProviderImpl.java
Patch:
@@ -17,7 +17,6 @@
 package io.grpc.services;
 
 import com.google.common.base.Preconditions;
-import io.grpc.BinaryLogProvider;
 import io.grpc.CallOptions;
 import io.grpc.ClientInterceptor;
 import io.grpc.ServerInterceptor;

File: services/src/main/java/io/grpc/services/BinlogHelper.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.grpc.services;
 
-import static io.grpc.BinaryLogProvider.BYTEARRAY_MARSHALLER;
+import static io.grpc.services.BinaryLogProvider.BYTEARRAY_MARSHALLER;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;

File: services/src/main/java/io/grpc/services/CensusBinaryLogProvider.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.grpc.services;
 
-import io.grpc.BinaryLogProvider;
 import io.grpc.CallOptions;
 import io.opencensus.trace.Span;
 import io.opencensus.trace.Tracing;

File: services/src/test/java/io/grpc/services/BinlogHelperTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.grpc.services;
 
-import static io.grpc.BinaryLogProvider.BYTEARRAY_MARSHALLER;
+import static io.grpc.services.BinaryLogProvider.BYTEARRAY_MARSHALLER;
 import static io.grpc.services.BinlogHelper.DUMMY_SOCKET;
 import static io.grpc.services.BinlogHelper.getPeerSocket;
 import static org.junit.Assert.assertEquals;
@@ -31,7 +31,6 @@
 import com.google.protobuf.ByteString;
 import io.grpc.Attributes;
 import io.grpc.BinaryLog.CallId;
-import io.grpc.BinaryLogProvider;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import io.grpc.ClientCall;

File: services/src/test/java/io/grpc/services/CensusBinaryLogProviderTest.java
Patch:
@@ -20,7 +20,6 @@
 import static io.opencensus.trace.unsafe.ContextUtils.CONTEXT_SPAN_KEY;
 
 import io.grpc.BinaryLog.CallId;
-import io.grpc.BinaryLogProvider;
 import io.grpc.CallOptions;
 import io.grpc.Context;
 import io.grpc.internal.testing.StatsTestUtils.MockableSpan;

File: core/src/test/java/io/grpc/AttributesTest.java
Patch:
@@ -89,5 +89,6 @@ class EqualObject {
     Attributes attr2 = Attributes.newBuilder().set(key, v2).build();
 
     assertEquals(attr1, attr2);
+    assertEquals(attr1.hashCode(), attr2.hashCode());
   }
 }

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -277,9 +277,9 @@ public void bytesRead(int processedBytes) {
 
     @Override
     @GuardedBy("lock")
-    public void deframerClosed(boolean hasPartialMessageIgnored) {
+    public void deframerClosed(boolean hasPartialMessage) {
       onEndOfStream();
-      super.deframerClosed(hasPartialMessageIgnored);
+      super.deframerClosed(hasPartialMessage);
     }
 
     @Override

File: core/src/main/java/io/grpc/ServerInterceptor.java
Patch:
@@ -42,6 +42,8 @@ public interface ServerInterceptor {
    * call} on another thread.
    *
    * @param call object to receive response messages
+   * @param headers which can contain extra call metadata from {@link ClientCall#start},
+   *                e.g. authentication credentials.
    * @param next next processor in the interceptor chain
    * @return listener for processing incoming messages for {@code call}, never {@code null}.
    */

File: services/src/main/java/io/grpc/services/BinaryLogs.java
Patch:
@@ -19,14 +19,15 @@
 import io.grpc.BinaryLog;
 import io.grpc.ExperimentalApi;
 import io.grpc.InternalBinaryLogs;
+import java.io.IOException;
 
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4017")
 public final class BinaryLogs {
-  public static BinaryLog createBinaryLog() {
+  public static BinaryLog createBinaryLog() throws IOException {
     return InternalBinaryLogs.createBinaryLog(new BinaryLogProviderImpl());
   }
 
-  public static BinaryLog createCensusBinaryLog() {
+  public static BinaryLog createCensusBinaryLog() throws IOException {
     return InternalBinaryLogs.createBinaryLog(new CensusBinaryLogProvider());
   }
 

File: core/src/main/java/io/grpc/BinaryLogProvider.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
-import java.util.logging.Logger;
 import javax.annotation.Nullable;
 
 // TODO(zpencer): rename class to AbstractBinaryLog
@@ -38,8 +37,6 @@ public abstract class BinaryLogProvider implements Closeable {
   @VisibleForTesting
   public static final Marshaller<byte[]> BYTEARRAY_MARSHALLER = new ByteArrayMarshaller();
 
-  private static final Logger logger = Logger.getLogger(BinaryLogProvider.class.getName());
-
   private final ClientInterceptor binaryLogShim = new BinaryLogShim();
 
   /**

File: core/src/test/java/io/grpc/internal/CensusModulesTest.java
Patch:
@@ -473,7 +473,6 @@ public void clientBasicTracingDefaultSpan() {
   public void clientTracingSampledToLocalSpanStore() {
     CensusTracingModule.ClientCallTracer callTracer =
         censusTracing.newClientCallTracer(null, sampledMethod);
-    Metadata headers = new Metadata();
     callTracer.callEnded(Status.OK);
 
     verify(spyClientSpan).end(

File: netty/src/main/java/io/grpc/netty/GrpcHttp2ConnectionHandler.java
Patch:
@@ -46,7 +46,7 @@ public GrpcHttp2ConnectionHandler(
 
   /**
    * Same as {@link #handleProtocolNegotiationCompleted(Attributes, Channelz.Security)}
-   * but with no {@link Channelz.Security}.
+   * but with no {@link io.grpc.internal.Channelz.Security}.
    *
    * @deprecated Use the two argument method instead.
    */

File: core/src/jmh/java/io/grpc/CallOptionsBenchmark.java
Patch:
@@ -51,7 +51,7 @@ public class CallOptionsBenchmark {
   public void setUp() throws Exception {
     customOptions = new ArrayList<CallOptions.Key<String>>(customOptionsCount);
     for (int i = 0; i < customOptionsCount; i++) {
-      customOptions.add(CallOptions.Key.of("name " + i, "defaultvalue"));
+      customOptions.add(CallOptions.Key.createWithDefault("name " + i, "defaultvalue"));
     }
 
     allOpts = CallOptions.DEFAULT;

File: core/src/main/java/io/grpc/BinaryLogProvider.java
Patch:
@@ -34,7 +34,7 @@
 @Internal
 public abstract class BinaryLogProvider implements Closeable {
   public static final CallOptions.Key<CallId> CLIENT_CALL_ID_CALLOPTION_KEY
-      = CallOptions.Key.of("binarylog-calloptions-key", null);
+      = CallOptions.Key.create("binarylog-calloptions-key");
   @VisibleForTesting
   public static final Marshaller<byte[]> BYTEARRAY_MARSHALLER = new ByteArrayMarshaller();
 

File: core/src/main/java/io/grpc/internal/ServiceConfigInterceptor.java
Patch:
@@ -237,7 +237,7 @@ private static RetryPolicy retryPolicy(Map<String, Object> retryPolicy, int maxA
   }
 
   static final CallOptions.Key<RetryPolicy.Provider> RETRY_POLICY_KEY =
-      CallOptions.Key.of("internal-retry-policy", null);
+      CallOptions.Key.create("internal-retry-policy");
 
   @Override
   public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(

File: core/src/test/java/io/grpc/CallOptionsTest.java
Patch:
@@ -43,8 +43,8 @@ public class CallOptionsTest {
   private Deadline.Ticker ticker = new FakeTicker();
   private Deadline sampleDeadline = Deadline.after(1, NANOSECONDS, ticker);
   private CallCredentials sampleCreds = mock(CallCredentials.class);
-  private CallOptions.Key<String> option1 = CallOptions.Key.of("option1", "default");
-  private CallOptions.Key<String> option2 = CallOptions.Key.of("option2", "default");
+  private CallOptions.Key<String> option1 = CallOptions.Key.createWithDefault("option1", "default");
+  private CallOptions.Key<String> option2 = CallOptions.Key.createWithDefault("option2", "default");
   private ClientStreamTracer.Factory tracerFactory1 = new FakeTracerFactory("tracerFactory1");
   private ClientStreamTracer.Factory tracerFactory2 = new FakeTracerFactory("tracerFactory2");
   private CallOptions allSet = CallOptions.DEFAULT

File: core/src/test/java/io/grpc/ClientInterceptorsTest.java
Patch:
@@ -395,7 +395,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
 
   @Test
   public void customOptionAccessible() {
-    CallOptions.Key<String> customOption = CallOptions.Key.of("custom", null);
+    CallOptions.Key<String> customOption = CallOptions.Key.create("custom");
     CallOptions callOptions = CallOptions.DEFAULT.withOption(customOption, "value");
     ArgumentCaptor<CallOptions> passedOptions = ArgumentCaptor.forClass(CallOptions.class);
     ClientInterceptor interceptor =

File: core/src/test/java/io/grpc/internal/CensusModulesTest.java
Patch:
@@ -104,7 +104,7 @@
 @RunWith(JUnit4.class)
 public class CensusModulesTest {
   private static final CallOptions.Key<String> CUSTOM_OPTION =
-      CallOptions.Key.of("option1", "default");
+      CallOptions.Key.createWithDefault("option1", "default");
   private static final CallOptions CALL_OPTIONS =
       CallOptions.DEFAULT.withOption(CUSTOM_OPTION, "customvalue");
 

File: core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java
Patch:
@@ -78,7 +78,8 @@ public class DelayedClientTransportTest {
   @Captor private ArgumentCaptor<Status> statusCaptor;
   @Captor private ArgumentCaptor<ClientStreamListener> listenerCaptor;
 
-  private static final CallOptions.Key<Integer> SHARD_ID = CallOptions.Key.of("shard-id", -1);
+  private static final CallOptions.Key<Integer> SHARD_ID
+      = CallOptions.Key.createWithDefault("shard-id", -1);
   private static final Status SHUTDOWN_STATUS =
       Status.UNAVAILABLE.withDescription("shutdown called");
 

File: alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java
Patch:
@@ -39,9 +39,9 @@
  */
 public abstract class AltsProtocolNegotiator implements ProtocolNegotiator {
 
-  private static final Attributes.Key<TsiPeer> TSI_PEER_KEY = Attributes.Key.of("TSI_PEER");
+  private static final Attributes.Key<TsiPeer> TSI_PEER_KEY = Attributes.Key.create("TSI_PEER");
   private static final Attributes.Key<AltsAuthContext> ALTS_CONTEXT_KEY =
-      Attributes.Key.of("ALTS_CONTEXT_KEY");
+      Attributes.Key.create("ALTS_CONTEXT_KEY");
   private static final AsciiString scheme = AsciiString.of("https");
 
   public static Attributes.Key<TsiPeer> getTsiPeerAttributeKey() {

File: core/src/jmh/java/io/grpc/AttributesBenchmark.java
Patch:
@@ -46,8 +46,8 @@ public class AttributesBenchmark {
   public void setUp() {
     keys = new Attributes.Key[iterations];
     for (int i = 0; i < iterations; i++) {
-      keys[i] = Attributes.Key.of("any");
-      withValue = Attributes.newBuilder(withValue).set(keys[i], "yes").build();
+      keys[i] = Attributes.Key.create("any");
+      withValue = withValue.toBuilder().set(keys[i], "yes").build();
     }
   }
 
@@ -63,7 +63,7 @@ public void setUp() {
   public Attributes chain() {
     Attributes attr = base;
     for (int i = 0; i < iterations; i++) {
-      attr = Attributes.newBuilder(attr).set(keys[i], new Object()).build();
+      attr = attr.toBuilder().set(keys[i], new Object()).build();
     }
     return attr;
   }

File: core/src/main/java/io/grpc/CallCredentials.java
Patch:
@@ -43,7 +43,7 @@ public interface CallCredentials {
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1914")
   public static final Key<SecurityLevel> ATTR_SECURITY_LEVEL =
-      Key.of("io.grpc.CallCredentials.securityLevel");
+      Key.create("io.grpc.CallCredentials.securityLevel");
 
   /**
    * The authority string used to authenticate the server. Usually it's the server's host name. It
@@ -52,7 +52,7 @@ public interface CallCredentials {
    * io.grpc.CallOptions} with increasing precedence.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1914")
-  public static final Key<String> ATTR_AUTHORITY = Key.of("io.grpc.CallCredentials.authority");
+  public static final Key<String> ATTR_AUTHORITY = Key.create("io.grpc.CallCredentials.authority");
 
   /**
    * Pass the credential data to the given {@link MetadataApplier}, which will propagate it to

File: core/src/main/java/io/grpc/Grpc.java
Patch:
@@ -32,12 +32,12 @@ private Grpc() {
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1710")
   public static final Attributes.Key<SocketAddress> TRANSPORT_ATTR_REMOTE_ADDR =
-          Attributes.Key.of("remote-addr");
+          Attributes.Key.create("remote-addr");
 
   /**
    * Attribute key for SSL session of a transport.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1710")
   public static final Attributes.Key<SSLSession> TRANSPORT_ATTR_SSL_SESSION =
-          Attributes.Key.of("ssl-session");
+          Attributes.Key.create("ssl-session");
 }

File: core/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -94,7 +94,7 @@ public abstract static class Factory {
      * @since 1.0.0
      */
     public static final Attributes.Key<Integer> PARAMS_DEFAULT_PORT =
-        Attributes.Key.of("params-default-port");
+        Attributes.Key.create("params-default-port");
 
     /**
      * Creates a {@link NameResolver} for the given target URI, or {@code null} if the given URI

File: core/src/main/java/io/grpc/internal/GrpcAttributes.java
Patch:
@@ -27,14 +27,14 @@ public final class GrpcAttributes {
    * Attribute key for service config.
    */
   public static final Attributes.Key<Map<String, Object>> NAME_RESOLVER_SERVICE_CONFIG =
-      Attributes.Key.of("service-config");
+      Attributes.Key.create("service-config");
 
   /**
    * The naming authority of a gRPC LB server address.  It is an address-group-level attribute,
    * present when the address group is a LoadBalancer.
    */
   public static final Attributes.Key<String> ATTR_LB_ADDR_AUTHORITY =
-      Attributes.Key.of("io.grpc.grpclb.lbAddrAuthority");
+      Attributes.Key.create("io.grpc.grpclb.lbAddrAuthority");
 
 
   private GrpcAttributes() {}

File: core/src/main/java/io/grpc/internal/ProxyDetector.java
Patch:
@@ -28,7 +28,7 @@
  * {@link io.grpc.NameResolver}.
  */
 public interface ProxyDetector {
-  Attributes.Key<ProxyParameters> PROXY_PARAMS_KEY = Attributes.Key.of("proxy-params-key");
+  Attributes.Key<ProxyParameters> PROXY_PARAMS_KEY = Attributes.Key.create("proxy-params-key");
   /**
    * Given a target address, returns which proxy address should be used. If no proxy should be
    * used, then return value will be null. The address of the {@link ProxyParameters} is always

File: core/src/main/java/io/grpc/util/RoundRobinLoadBalancerFactory.java
Patch:
@@ -98,7 +98,7 @@ public LoadBalancer newLoadBalancer(LoadBalancer.Helper helper) {
   static final class RoundRobinLoadBalancer extends LoadBalancer {
     @VisibleForTesting
     static final Attributes.Key<Ref<ConnectivityStateInfo>> STATE_INFO =
-        Attributes.Key.of("state-info");
+        Attributes.Key.create("state-info");
 
     private static final Logger logger = Logger.getLogger(RoundRobinLoadBalancer.class.getName());
 

File: core/src/test/java/io/grpc/PickFirstLoadBalancerTest.java
Patch:
@@ -60,7 +60,7 @@ public class PickFirstLoadBalancerTest {
   private List<EquivalentAddressGroup> servers = Lists.newArrayList();
   private List<SocketAddress> socketAddresses = Lists.newArrayList();
 
-  private static final Attributes.Key<String> FOO = Attributes.Key.of("foo");
+  private static final Attributes.Key<String> FOO = Attributes.Key.create("foo");
   private Attributes affinity = Attributes.newBuilder().set(FOO, "bar").build();
 
   @Captor

File: core/src/test/java/io/grpc/internal/CallCredentialsApplyingTest.java
Patch:
@@ -77,7 +77,7 @@ public class CallCredentialsApplyingTest {
   private static final String AUTHORITY = "testauthority";
   private static final String USER_AGENT = "testuseragent";
   private static final ProxyParameters NO_PROXY = null;
-  private static final Attributes.Key<String> ATTR_KEY = Attributes.Key.of("somekey");
+  private static final Attributes.Key<String> ATTR_KEY = Attributes.Key.create("somekey");
   private static final String ATTR_VALUE = "somevalue";
   private static final MethodDescriptor<String, Integer> method =
       MethodDescriptor.<String, Integer>newBuilder()

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -931,7 +931,7 @@ public void getAttributes() {
         method, MoreExecutors.directExecutor(), baseCallOptions, provider,
         deadlineCancellationExecutor, channelCallTracer, false /* retryEnabled */);
     Attributes attrs =
-        Attributes.newBuilder().set(Key.<String>of("fake key"), "fake value").build();
+        Attributes.newBuilder().set(Key.<String>create("fake key"), "fake value").build();
     when(stream.getAttributes()).thenReturn(attrs);
 
     assertNotEquals(attrs, call.getAttributes());

File: core/src/test/java/io/grpc/internal/DelayedStreamTest.java
Patch:
@@ -182,7 +182,7 @@ public void setStream_isReady() {
   @Test
   public void setStream_getAttributes() {
     Attributes attributes =
-        Attributes.newBuilder().set(Key.<String>of("fakeKey"), "fakeValue").build();
+        Attributes.newBuilder().set(Key.<String>create("fakeKey"), "fakeValue").build();
     when(realStream.getAttributes()).thenReturn(attributes);
 
     stream.start(listener);

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -126,7 +126,7 @@ public class ManagedChannelImplTest {
           .setResponseMarshaller(new IntegerMarshaller())
           .build();
   private static final Attributes.Key<String> SUBCHANNEL_ATTR_KEY =
-      Attributes.Key.of("subchannel-attr-key");
+      Attributes.Key.create("subchannel-attr-key");
   private static final long RECONNECT_BACKOFF_INTERVAL_NANOS = 10;
   private static final String SERVICE_NAME = "fake.example.com";
   private static final String AUTHORITY = SERVICE_NAME;

File: core/src/test/java/io/grpc/util/RoundRobinLoadBalancerTest.java
Patch:
@@ -83,7 +83,7 @@ public class RoundRobinLoadBalancerTest {
   private RoundRobinLoadBalancer loadBalancer;
   private List<EquivalentAddressGroup> servers = Lists.newArrayList();
   private Map<EquivalentAddressGroup, Subchannel> subchannels = Maps.newLinkedHashMap();
-  private static final Attributes.Key<String> MAJOR_KEY = Attributes.Key.of("major-key");
+  private static final Attributes.Key<String> MAJOR_KEY = Attributes.Key.create("major-key");
   private Attributes affinity = Attributes.newBuilder().set(MAJOR_KEY, "I got the keys").build();
 
   @Captor

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbConstants.java
Patch:
@@ -38,7 +38,7 @@ public enum LbPolicy {
    * An attribute of a name resolution result, designating the LB policy.
    */
   public static final Attributes.Key<LbPolicy> ATTR_LB_POLICY =
-      Attributes.Key.of("io.grpc.grpclb.lbPolicy");
+      Attributes.Key.create("io.grpc.grpclb.lbPolicy");
 
   /**
    * The opaque token given by the remote balancer for each returned server address.  The client

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -100,7 +100,7 @@ public String toString() {
   private final ScheduledExecutorService timerService;
 
   private static final Attributes.Key<AtomicReference<ConnectivityStateInfo>> STATE_INFO =
-      Attributes.Key.of("io.grpc.grpclb.GrpclbLoadBalancer.stateInfo");
+      Attributes.Key.create("io.grpc.grpclb.GrpclbLoadBalancer.stateInfo");
 
   // Scheduled only once.  Never reset.
   @Nullable

File: grpclb/src/test/java/io/grpc/grpclb/CachedSubchannelPoolTest.java
Patch:
@@ -54,7 +54,7 @@ public class CachedSubchannelPoolTest {
       new EquivalentAddressGroup(new FakeSocketAddress("fake-address-1"), Attributes.EMPTY);
   private static final EquivalentAddressGroup EAG2 =
       new EquivalentAddressGroup(new FakeSocketAddress("fake-address-2"), Attributes.EMPTY);
-  private static final Attributes.Key<String> ATTR_KEY = Attributes.Key.of("test-attr");
+  private static final Attributes.Key<String> ATTR_KEY = Attributes.Key.create("test-attr");
   private static final Attributes ATTRS1 = Attributes.newBuilder().set(ATTR_KEY, "1").build();
   private static final Attributes ATTRS2 = Attributes.newBuilder().set(ATTR_KEY, "2").build();
   private static final FakeClock.TaskFilter SHUTDOWN_SCHEDULED_TASK_FILTER =

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -102,7 +102,7 @@
 @RunWith(JUnit4.class)
 public class GrpclbLoadBalancerTest {
   private static final Attributes.Key<String> RESOLUTION_ATTR =
-      Attributes.Key.of("resolution-attr");
+      Attributes.Key.create("resolution-attr");
   private static final String SERVICE_AUTHORITY = "api.google.com";
   private static final FakeClock.TaskFilter LOAD_REPORTING_TASK_FILTER =
       new FakeClock.TaskFilter() {

File: testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java
Patch:
@@ -95,7 +95,7 @@ public abstract class AbstractTransportTest {
   private static final int TIMEOUT_MS = 1000;
 
   private static final Attributes.Key<String> ADDITIONAL_TRANSPORT_ATTR_KEY =
-      Attributes.Key.of("additional-attr");
+      Attributes.Key.create("additional-attr");
 
   /**
    * Returns a new server that when started will be able to be connected to from the client. Each

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -81,7 +81,7 @@ final class ClientCallImpl<ReqT, RespT> extends ClientCall<ReqT, RespT> {
   private boolean halfCloseCalled;
   private final ClientTransportProvider clientTransportProvider;
   private final CancellationListener cancellationListener = new ContextCancellationListener();
-  private ScheduledExecutorService deadlineCancellationExecutor;
+  private final ScheduledExecutorService deadlineCancellationExecutor;
   private boolean fullStreamDecompression;
   private DecompressorRegistry decompressorRegistry = DecompressorRegistry.getDefaultInstance();
   private CompressorRegistry compressorRegistry = CompressorRegistry.getDefaultInstance();

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -493,6 +493,7 @@ protected boolean setException(Throwable throwable) {
       return super.setException(throwable);
     }
 
+    @SuppressWarnings("MissingOverride") // Add @Override once Java 6 support is dropped
     protected String pendingToString() {
       return MoreObjects.toStringHelper(this).add("clientCall", call).toString();
     }

File: services/src/test/java/io/grpc/services/ChannelzProtoUtilTest.java
Patch:
@@ -441,7 +441,7 @@ public void socketSecurityTls() throws Exception {
         ChannelzProtoUtil.toSocket(socket).getSecurity());
 
     socket.security = new Channelz.Security(
-        new Channelz.Tls("TLS_NULL_WITH_NULL_NULL", /*localcert=*/ null, remote));
+        new Channelz.Tls("TLS_NULL_WITH_NULL_NULL", /*localCert=*/ null, remote));
     assertEquals(
         Security.newBuilder().setTls(
             Tls.newBuilder()
@@ -451,7 +451,7 @@ public void socketSecurityTls() throws Exception {
         ChannelzProtoUtil.toSocket(socket).getSecurity());
 
     socket.security = new Channelz.Security(
-        new Channelz.Tls("TLS_NULL_WITH_NULL_NULL", local, /*remotecert=*/ null));
+        new Channelz.Tls("TLS_NULL_WITH_NULL_NULL", local, /*remoteCert=*/ null));
     assertEquals(
         Security.newBuilder().setTls(
             Tls.newBuilder()

File: core/src/main/java/io/grpc/ConnectivityState.java
Patch:
@@ -22,7 +22,7 @@
  * @see <a href="https://github.com/grpc/grpc/blob/master/doc/connectivity-semantics-and-api.md">
  * more information</a>
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/28")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/4359")
 public enum ConnectivityState {
   /**
    * The channel is trying to establish a connection and is waiting to make progress on one of the

File: core/src/main/java/io/grpc/ManagedChannel.java
Patch:
@@ -78,7 +78,7 @@ public abstract class ManagedChannel extends Channel {
    * @throws UnsupportedOperationException if not supported by implementation
    * @since 1.1.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/28")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4359")
   public ConnectivityState getState(boolean requestConnection) {
     throw new UnsupportedOperationException("Not implemented");
   }
@@ -101,7 +101,7 @@ public ConnectivityState getState(boolean requestConnection) {
    * @throws UnsupportedOperationException if not supported by implementation
    * @since 1.1.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/28")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/4359")
   public void notifyWhenStateChanged(ConnectivityState source, Runnable callback) {
     throw new UnsupportedOperationException("Not implemented");
   }

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -139,6 +139,7 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
 
   private int maxInboundMessageSize = GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;
 
+  @Nullable
   BinaryLogProvider binlogProvider = BinaryLogProvider.provider();
 
   /**

File: core/src/main/java/io/grpc/internal/ForwardingConnectionClientTransport.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.grpc.internal;
 
+import com.google.common.base.MoreObjects;
 import com.google.common.util.concurrent.ListenableFuture;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
@@ -64,7 +65,7 @@ public Attributes getAttributes() {
 
   @Override
   public String toString() {
-    return getClass().getSimpleName() + "[" + delegate().toString() + "]";
+    return MoreObjects.toStringHelper(this).add("delegate", delegate()).toString();
   }
 
   @Override

File: core/src/main/java/io/grpc/internal/Channelz.java
Patch:
@@ -468,9 +468,9 @@ public SocketStats(
         SocketOptions socketOptions,
         Security security) {
       this.data = data;
-      this.local = local;
+      this.local = Preconditions.checkNotNull(local, "local socket");
       this.remote = remote;
-      this.socketOptions = socketOptions;
+      this.socketOptions = Preconditions.checkNotNull(socketOptions);
       this.security = security;
     }
   }

File: services/src/test/java/io/grpc/services/ChannelzTestHelper.java
Patch:
@@ -89,7 +89,7 @@ public ListenableFuture<SocketStats> getStats() {
               /*data=*/ null,
               listenAddress,
               /*remote=*/ null,
-              new SocketOptions.Builder().build(),
+              new SocketOptions.Builder().addOption("listen_option", "listen_option_value").build(),
               /*security=*/ null));
       return ret;
     }

File: core/src/main/java/io/grpc/internal/ServiceConfigInterceptor.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.CheckForNull;
+import javax.annotation.Nonnull;
 
 /**
  * Modifies RPCs in in conformance with a Service Config.
@@ -69,7 +70,7 @@ final class ServiceConfigInterceptor implements ClientInterceptor {
     this.maxRetryAttemptsLimit = maxRetryAttemptsLimit;
   }
 
-  void handleUpdate(Map<String, Object> serviceConfig) {
+  void handleUpdate(@Nonnull Map<String, Object> serviceConfig) {
     Map<String, MethodInfo> newServiceMethodConfigs = new HashMap<String, MethodInfo>();
     Map<String, MethodInfo> newServiceConfigs = new HashMap<String, MethodInfo>();
 

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -361,7 +361,7 @@ static Map<String, Object> maybeChooseServiceConfig(
     }
 
     List<String> clientLanguages = getClientLanguagesFromChoice(choice);
-    if (clientLanguages != null && clientLanguages.size() != 0) {
+    if (clientLanguages != null && !clientLanguages.isEmpty()) {
       boolean javaPresent = false;
       for (String lang : clientLanguages) {
         if ("java".equalsIgnoreCase(lang)) {
@@ -382,7 +382,7 @@ static Map<String, Object> maybeChooseServiceConfig(
       }
     }
     List<String> clientHostnames = getHostnamesFromChoice(choice);
-    if (clientHostnames != null && clientHostnames.size() != 0) {
+    if (clientHostnames != null && !clientHostnames.isEmpty()) {
       boolean hostnamePresent = false;
       for (String clientHostname : clientHostnames) {
         if (clientHostname.equals(hostname)) {

File: netty/src/main/java/io/grpc/netty/NettyServer.java
Patch:
@@ -343,7 +343,7 @@ public ListenableFuture<SocketStats> getStats() {
         ret.set(new SocketStats(
             /*data=*/ null,
             ch.localAddress(),
-            /*remoteAddress=*/ null,
+            /*remote=*/ null,
             Utils.getSocketOptions(ch),
             /*security=*/ null));
         return ret;
@@ -356,7 +356,7 @@ public void run() {
                   ret.set(new SocketStats(
                       /*data=*/ null,
                       ch.localAddress(),
-                      /*remoteAddress=*/ null,
+                      /*remote=*/ null,
                       Utils.getSocketOptions(ch),
                       /*security=*/ null));
                 }

File: services/src/test/java/io/grpc/services/ChannelzTestHelper.java
Patch:
@@ -88,7 +88,7 @@ public ListenableFuture<SocketStats> getStats() {
           new SocketStats(
               /*data=*/ null,
               listenAddress,
-              /*remoteAddress=*/ null,
+              /*remote=*/ null,
               new SocketOptions.Builder().build(),
               /*security=*/ null));
       return ret;

File: protobuf/src/main/java/io/grpc/protobuf/StatusProto.java
Patch:
@@ -151,7 +151,7 @@ public static com.google.rpc.Status fromThrowable(Throwable t) {
    * {@code status}.
    *
    * @return the embedded google.rpc.Status or {@code null} if it is not present.
-   * @since 1.10.0
+   * @since 1.11.0
    */
   @Nullable
   public static com.google.rpc.Status fromStatusAndTrailers(Status status, Metadata trailers) {

File: interop-testing/src/generated/main/java/io/grpc/testing/integration/Test.java
Patch:
@@ -63,10 +63,10 @@ public com.google.protobuf.ExtensionRegistry assignDescriptors(
     com.google.protobuf.Descriptors.FileDescriptor
       .internalBuildGeneratedFileFrom(descriptorData,
         new com.google.protobuf.Descriptors.FileDescriptor[] {
-          com.google.protobuf.EmptyProtos.getDescriptor(),
+          io.grpc.testing.integration.EmptyProtos.getDescriptor(),
           io.grpc.testing.integration.Messages.getDescriptor(),
         }, assigner);
-    com.google.protobuf.EmptyProtos.getDescriptor();
+    io.grpc.testing.integration.EmptyProtos.getDescriptor();
     io.grpc.testing.integration.Messages.getDescriptor();
   }
 

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -44,7 +44,6 @@
 import com.google.common.util.concurrent.SettableFuture;
 import com.google.protobuf.BoolValue;
 import com.google.protobuf.ByteString;
-import com.google.protobuf.EmptyProtos.Empty;
 import com.google.protobuf.MessageLite;
 import io.grpc.CallOptions;
 import io.grpc.Channel;
@@ -85,6 +84,7 @@
 import io.grpc.stub.MetadataUtils;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.TestUtils;
+import io.grpc.testing.integration.EmptyProtos.Empty;
 import io.grpc.testing.integration.Messages.EchoStatus;
 import io.grpc.testing.integration.Messages.Payload;
 import io.grpc.testing.integration.Messages.PayloadType;

File: interop-testing/src/main/java/io/grpc/testing/integration/ReconnectTestClient.java
Patch:
@@ -18,12 +18,12 @@
 
 import static org.junit.Assert.assertTrue;
 
-import com.google.protobuf.EmptyProtos.Empty;
 import io.grpc.ManagedChannel;
 import io.grpc.StatusRuntimeException;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.okhttp.OkHttpChannelBuilder;
+import io.grpc.testing.integration.EmptyProtos.Empty;
 import io.grpc.testing.integration.Messages.ReconnectInfo;
 
 /**

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Queues;
 import com.google.protobuf.ByteString;
-import com.google.protobuf.EmptyProtos;
 import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;
 import io.grpc.Metadata;
 import io.grpc.ServerCall;

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.junit.Assert.assertTrue;
 
 import com.google.common.base.Throwables;
-import com.google.protobuf.EmptyProtos.Empty;
 import com.squareup.okhttp.ConnectionSpec;
 import io.grpc.ManagedChannel;
 import io.grpc.internal.AbstractServerImplBuilder;
@@ -33,6 +32,7 @@
 import io.grpc.okhttp.OkHttpChannelBuilder;
 import io.grpc.okhttp.internal.Platform;
 import io.grpc.stub.StreamObserver;
+import io.grpc.testing.integration.EmptyProtos.Empty;
 import io.netty.handler.ssl.OpenSsl;
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.ssl.SslContextBuilder;

File: okhttp/third_party/okhttp/java/io/grpc/okhttp/internal/framed/Hpack.java
Patch:
@@ -164,7 +164,6 @@ private void adjustDynamicTableByteCount() {
     }
 
     private void clearDynamicTable() {
-      headerList.clear();
       Arrays.fill(dynamicTable, null);
       nextHeaderIndex = dynamicTable.length - 1;
       headerCount = 0;

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.google.common.base.Throwables;
 import com.google.protobuf.EmptyProtos.Empty;
 import com.squareup.okhttp.ConnectionSpec;
-import com.squareup.okhttp.TlsVersion;
 import io.grpc.ManagedChannel;
 import io.grpc.internal.AbstractServerImplBuilder;
 import io.grpc.internal.GrpcUtil;
@@ -94,9 +93,8 @@ protected ManagedChannel createChannel() {
   private OkHttpChannelBuilder createChannelBuilder() {
     OkHttpChannelBuilder builder = OkHttpChannelBuilder.forAddress("localhost", getPort())
         .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE)
-        .connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC)
+        .connectionSpec(new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
             .cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0]))
-            .tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0]))
             .build())
         .overrideAuthority(GrpcUtil.authorityFromHostAndPort(
             TestUtils.TEST_SERVER_HOST, getPort()));

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -228,7 +228,7 @@ public void testToString() throws Exception {
         executor,
         sslSocketFactory,
         hostnameVerifier,
-        Utils.convertSpec(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC),
+        OkHttpChannelBuilder.INTERNAL_DEFAULT_CONNECTION_SPEC,
         DEFAULT_MAX_MESSAGE_SIZE,
         NO_PROXY,
         tooManyPingsRunnable,

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancerFactory.java
Patch:
@@ -50,7 +50,7 @@ public static GrpclbLoadBalancerFactory getInstance() {
   @Override
   public LoadBalancer newLoadBalancer(LoadBalancer.Helper helper) {
     return new GrpclbLoadBalancer(
-        helper, PickFirstBalancerFactory.getInstance(),
+        helper, new CachedSubchannelPool(), PickFirstBalancerFactory.getInstance(),
         RoundRobinLoadBalancerFactory.getInstance(),
         // TODO(zhangkun83): balancer sends load reporting RPCs from it, which also involves
         // channelExecutor thus may also run other tasks queued in the channelExecutor.  If such

File: core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java
Patch:
@@ -32,12 +32,9 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import java.util.logging.Logger;
 import javax.annotation.Nullable;
 
 final class AutoConfiguredLoadBalancerFactory extends LoadBalancer.Factory {
-  private static final Logger logger =
-      Logger.getLogger(AutoConfiguredLoadBalancerFactory.class.getName());
 
   @VisibleForTesting
   static final String ROUND_ROUND_LOAD_BALANCER_FACTORY_NAME =

File: core/src/main/java/io/grpc/internal/ServiceConfigUtil.java
Patch:
@@ -69,7 +69,7 @@ static String getLoadBalancingPolicy(Map<String, Object> serviceConfig) {
   /**
    * Gets retry policies from the service config.
    *
-   * @throw ClassCastException if the service config doesn't parse properly
+   * @throws ClassCastException if the service config doesn't parse properly
    */
   static RetryPolicies getRetryPolicies(
       @Nullable Map<String, Object> serviceConfig, int maxAttemptsLimit) {
@@ -221,7 +221,7 @@ static Map<String, Object> maybeChooseServiceConfig(
     }
     if (choice.containsKey("clientLanguage")) {
       List<Object> clientLanguages = getList(choice, "clientLanguage");
-      if (clientLanguages.size() != 0) {
+      if (!clientLanguages.isEmpty()) {
         boolean javaPresent = false;
         for (int i = 0; i < clientLanguages.size(); i++) {
           String lang = getString(clientLanguages, i).toLowerCase(Locale.ROOT);
@@ -244,7 +244,7 @@ static Map<String, Object> maybeChooseServiceConfig(
     }
     if (choice.containsKey("clientHostname")) {
       List<Object> clientHostnames = getList(choice, "clientHostname");
-      if (clientHostnames.size() != 0) {
+      if (!clientHostnames.isEmpty()) {
         boolean hostnamePresent = false;
         for (int i = 0; i < clientHostnames.size(); i++) {
           if (getString(clientHostnames, i).equals(hostname)) {

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadClient.java
Patch:
@@ -88,7 +88,6 @@ class LoadClient {
               config.hasSecurityParams()
                   ? config.getSecurityParams().getServerHostOverride()
                   : null,
-              true,
               Utils.DEFAULT_FLOW_CONTROL_WINDOW,
               false);
     }

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncClient.java
Patch:
@@ -32,7 +32,6 @@
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TESTCA;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TLS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TRANSPORT;
-import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.USE_DEFAULT_CIPHERS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.WARMUP_DURATION;
 
 import com.google.common.base.Preconditions;
@@ -308,7 +307,7 @@ private static void shutdown(List<ManagedChannel> channels) {
   public static void main(String... args) throws Exception {
     ClientConfiguration.Builder configBuilder = ClientConfiguration.newBuilder(
         ADDRESS, CHANNELS, OUTSTANDING_RPCS, CLIENT_PAYLOAD, SERVER_PAYLOAD,
-        TLS, TESTCA, USE_DEFAULT_CIPHERS, TRANSPORT, DURATION, WARMUP_DURATION, DIRECTEXECUTOR,
+        TLS, TESTCA, TRANSPORT, DURATION, WARMUP_DURATION, DIRECTEXECUTOR,
         SAVE_HISTOGRAM, STREAMING_RPCS, FLOW_CONTROL_WINDOW);
     ClientConfiguration config;
     try {

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java
Patch:
@@ -30,7 +30,6 @@
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TESTCA;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TLS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TRANSPORT;
-import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.USE_DEFAULT_CIPHERS;
 
 import io.grpc.Channel;
 import io.grpc.ManagedChannel;
@@ -66,7 +65,7 @@ public OpenLoopClient(ClientConfiguration config) {
   public static void main(String... args) throws Exception {
     ClientConfiguration.Builder configBuilder = ClientConfiguration.newBuilder(
         ADDRESS, TARGET_QPS, CLIENT_PAYLOAD, SERVER_PAYLOAD, TLS,
-        TESTCA, USE_DEFAULT_CIPHERS, TRANSPORT, DURATION, SAVE_HISTOGRAM, FLOW_CONTROL_WINDOW);
+        TESTCA, TRANSPORT, DURATION, SAVE_HISTOGRAM, FLOW_CONTROL_WINDOW);
     ClientConfiguration config;
     try {
       config = configBuilder.build(args);

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -341,7 +341,9 @@ ResolutionResults resolve(String host) throws Exception {
         ResolutionResults jdniResults = jndiResovler.resolve(host);
         txtRecords = jdniResults.txtRecords;
         balancerAddresses = jdniResults.balancerAddresses;
-      } catch (Exception e) {
+      } catch (Throwable e) {
+        // JndiResolver.resolve may throw Error that could cause rpc to hang.
+        // Catch and log Throwable and keep using jdkResolver's result to prevent it.
         logger.log(Level.SEVERE, "Failed to resolve TXT results", e);
       }
 

File: core/src/main/java/io/grpc/internal/InternalSubchannel.java
Patch:
@@ -220,7 +220,7 @@ private void startNewTransport() {
         new CallTracingTransport(
             transportFactory.newClientTransport(address, authority, userAgent, proxy),
             callsTracer);
-    channelz.addSocket(transport);
+    channelz.addClientSocket(transport);
     if (log.isLoggable(Level.FINE)) {
       log.log(Level.FINE, "[{0}] Created {1} for {2}",
           new Object[] {logId, transport.getLogId(), address});
@@ -574,7 +574,7 @@ public void transportTerminated() {
       } finally {
         channelExecutor.drain();
       }
-      channelz.removeSocket(transport);
+      channelz.removeClientSocket(transport);
       Preconditions.checkState(activeTransport != transport,
           "activeTransport still points to this transport. "
           + "Seems transportShutdown() was not called.");

File: core/src/test/java/io/grpc/internal/InternalSubchannelTest.java
Patch:
@@ -926,9 +926,9 @@ public void channelzMembership() throws Exception {
     internalSubchannel.obtainActiveTransport();
 
     MockClientTransportInfo t0 = transports.poll();
-    assertTrue(channelz.containsSocket(t0.transport.getLogId()));
+    assertTrue(channelz.containsClientSocket(t0.transport.getLogId()));
     t0.listener.transportTerminated();
-    assertFalse(channelz.containsSocket(t0.transport.getLogId()));
+    assertFalse(channelz.containsClientSocket(t0.transport.getLogId()));
   }
 
   private void createInternalSubchannel(SocketAddress ... addrs) {

File: services/src/test/java/io/grpc/services/ChannelzServiceTest.java
Patch:
@@ -132,15 +132,15 @@ public void getSocket() throws Exception {
     TestSocket socket = new TestSocket();
     assertSocketNotFound(socket.getLogId().getId());
 
-    channelz.addSocket(socket);
+    channelz.addClientSocket(socket);
     assertEquals(
         GetSocketResponse
             .newBuilder()
             .setSocket(ChannelzProtoUtil.toSocket(socket))
             .build(),
         getSocketHelper(socket.getLogId().getId()));
 
-    channelz.removeSocket(socket);
+    channelz.removeClientSocket(socket);
     assertSocketNotFound(socket.getLogId().getId());
   }
 

File: services/src/test/java/io/grpc/services/ChannelzTestHelper.java
Patch:
@@ -95,7 +95,7 @@ static final class TestChannel implements Instrumented<ChannelStats> {
 
     ChannelStats stats = new ChannelStats(
       /*target=*/ "sometarget",
-      /*connectivityState=*/ ConnectivityState.READY,
+      /*state=*/ ConnectivityState.READY,
       /*callsStarted=*/ 1,
       /*callsSucceeded=*/ 2,
       /*callsFailed=*/ 3,

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -241,7 +241,7 @@ public void setMessageCompression(boolean enabled) {
   /**
    * Returns additional properties of the call. May only be called after {@link Listener#onHeaders}
    * or {@link Listener#onClose}. If called prematurely, the implementation may throw {@code
-   * IllegalStateException} or return abitrary {@code Attributes}.
+   * IllegalStateException} or return arbitrary {@code Attributes}.
    *
    * <p>{@link Grpc} defines commonly used attributes, but they are not guaranteed to be present.
    *

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -814,6 +814,9 @@ public ConnectivityState getState(boolean requestConnection) {
             @Override
             public void run() {
               exitIdleMode();
+              if (subchannelPicker != null) {
+                subchannelPicker.requestConnection();
+              }
             }
           }).drain();
     }

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -655,7 +655,8 @@ void setListener(ServerStreamListener listener) {
      * Like {@link ServerCall#close(Status, Metadata)}, but thread-safe for internal use.
      */
     private void internalClose() {
-      stream.cancel(Status.INTERNAL);
+      // TODO(ejona86): this is not thread-safe :)
+      stream.close(Status.UNKNOWN, new Metadata());
     }
 
     @Override

File: interop-testing/src/test/java/io/grpc/testing/integration/MoreInProcessTest.java
Patch:
@@ -247,7 +247,7 @@ public void onCompleted() {
         .onNext(StreamingInputCallRequest.getDefaultInstance());
 
     assertTrue(finishLatch.await(900, TimeUnit.MILLISECONDS));
-    assertEquals(Status.CANCELLED.getCode(), Status.fromThrowable(throwableRef.get()).getCode());
+    assertEquals(Status.UNKNOWN, Status.fromThrowable(throwableRef.get()));
     assertNull(responseRef.get());
   }
 }

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -388,7 +388,7 @@ protected String checkAuthority(String authority) {
 
   @Override
   public ManagedChannel build() {
-    return new ManagedChannelOrphanWrapper(new ManagedChannelImpl(
+    return new ManagedChannelImpl(
         this,
         buildTransportFactory(),
         // TODO(carl-mastrangelo): Allow clients to pass this in
@@ -397,7 +397,7 @@ public ManagedChannel build() {
         GrpcUtil.STOPWATCH_SUPPLIER,
         getEffectiveInterceptors(),
         GrpcUtil.getProxyDetector(),
-        CallTracer.getDefaultFactory()));
+        CallTracer.getDefaultFactory());
   }
 
   // Temporarily disable retry when stats or tracing is enabled to avoid breakage, until we know

File: alts/src/test/java/io/grpc/alts/InternalNettyTsiHandshakerTest.java
Patch:
@@ -33,7 +33,6 @@
 import java.security.GeneralSecurityException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.function.Function;
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: core/src/main/java/io/grpc/internal/Channelz.java
Patch:
@@ -23,11 +23,9 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.logging.Logger;
 import javax.annotation.concurrent.Immutable;
 
 public final class Channelz {
-  private static final Logger log = Logger.getLogger(Channelz.class.getName());
   private static final Channelz INSTANCE = new Channelz();
 
   private final ConcurrentMap<Long, Instrumented<ServerStats>> servers =

File: core/src/test/java/io/grpc/internal/BinaryLogProviderTest.java
Patch:
@@ -140,7 +140,7 @@ public String authority() {
       }
     };
     Channel wChannel = binlogProvider.wrapChannel(channel);
-    ClientCall<String, Integer> ignoredClientCall = wChannel.newCall(method, CallOptions.DEFAULT);
+    ClientCall<String, Integer> unusedClientCall = wChannel.newCall(method, CallOptions.DEFAULT);
     validateWrappedMethod(methodRef.get());
   }
 
@@ -486,4 +486,4 @@ public T parse(InputStream stream) {
       return delegate().parse(stream);
     }
   }
-}
\ No newline at end of file
+}

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -235,7 +235,6 @@ private void sendMessage_serverSendsOne_closeOnSecondCall(
     serverCall.sendMessage(1L);
     verify(stream, times(1)).writeMessage(any(InputStream.class));
     ArgumentCaptor<Status> statusCaptor = ArgumentCaptor.forClass(Status.class);
-    ArgumentCaptor<Metadata> metadataCaptor = ArgumentCaptor.forClass(Metadata.class);
     verify(stream, times(1)).cancel(statusCaptor.capture());
     assertEquals(Status.Code.INTERNAL, statusCaptor.getValue().getCode());
     assertEquals(ServerCallImpl.TOO_MANY_RESPONSES, statusCaptor.getValue().getDescription());

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -97,6 +97,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 import javax.annotation.Nullable;
 import org.junit.After;
+import org.junit.Assume;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -1673,6 +1674,8 @@ public void panic_bufferedCallsWillFail() {
   }
 
   private void verifyPanicMode(Throwable cause) {
+    Assume.assumeTrue("Panic mode disabled to resolve issues with some tests. See #3293", false);
+
     @SuppressWarnings("unchecked")
     ClientCall.Listener<Integer> mockListener =
         (ClientCall.Listener<Integer>) mock(ClientCall.Listener.class);

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -37,6 +37,7 @@
 import io.grpc.ServerCall;
 import io.grpc.Status;
 import java.io.InputStream;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 final class ServerCallImpl<ReqT, RespT> extends ServerCall<ReqT, RespT> {
@@ -205,7 +206,8 @@ public MethodDescriptor<ReqT, RespT> getMethodDescriptor() {
    * on.
    */
   private void internalClose(Status internalError) {
-    stream.close(internalError, new Metadata());
+    log.log(Level.WARNING, "Cancelling the stream with status {0}", new Object[] {internalError});
+    stream.cancel(internalError);
   }
 
   /**

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -629,8 +629,7 @@ void setListener(ServerStreamListener listener) {
      * Like {@link ServerCall#close(Status, Metadata)}, but thread-safe for internal use.
      */
     private void internalClose() {
-      // TODO(ejona86): this is not thread-safe :)
-      stream.close(Status.UNKNOWN, new Metadata());
+      stream.cancel(Status.INTERNAL);
     }
 
     @Override

File: interop-testing/src/test/java/io/grpc/testing/integration/MoreInProcessTest.java
Patch:
@@ -247,7 +247,7 @@ public void onCompleted() {
         .onNext(StreamingInputCallRequest.getDefaultInstance());
 
     assertTrue(finishLatch.await(900, TimeUnit.MILLISECONDS));
-    assertEquals(Status.UNKNOWN, Status.fromThrowable(throwableRef.get()));
+    assertEquals(Status.CANCELLED.getCode(), Status.fromThrowable(throwableRef.get()).getCode());
     assertNull(responseRef.get());
   }
 }

File: services/src/test/java/io/grpc/services/BinaryLogTest.java
Patch:
@@ -26,7 +26,6 @@
 
 import com.google.common.primitives.Bytes;
 import com.google.protobuf.ByteString;
-import com.google.protobuf.UnsafeByteOperations;
 import io.grpc.Metadata;
 import io.grpc.binarylog.GrpcLogEntry;
 import io.grpc.binarylog.Message;
@@ -487,7 +486,7 @@ public void messageToProto_truncated() throws Exception {
     assertEquals(
         Message
             .newBuilder()
-            .setData(UnsafeByteOperations.unsafeWrap(truncatedMessage.getBytes(US_ASCII)))
+            .setData(ByteString.copyFrom(truncatedMessage.getBytes(US_ASCII)))
             .setFlags(0)
             .setLength(bytes.remaining())
             .build(),

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -143,8 +143,7 @@ protected TransportState(
           Codec.Identity.NONE,
           maxMessageSize,
           statsTraceCtx,
-          transportTracer,
-          getClass().getName());
+          transportTracer);
     }
 
     protected void setFullStreamDecompressor(GzipInflatingBuffer fullStreamDecompressor) {

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -355,7 +355,8 @@ private Status statusFromFailedFuture(ChannelFuture f) {
         || t instanceof Http2ChannelClosedException) {
       Status shutdownStatus = lifecycleManager.getShutdownStatus();
       if (shutdownStatus == null) {
-        return Status.UNKNOWN.withDescription("Channel closed but for unknown reason");
+        return Status.UNKNOWN.withDescription("Channel closed but for unknown reason")
+            .withCause(new ClosedChannelException().initCause(t));
       }
       return shutdownStatus;
     }

File: examples/android/clientcache/app/src/main/java/io/grpc/clientcacheexample/SafeMethodCachingInterceptor.java
Patch:
@@ -14,6 +14,7 @@
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
+import java.util.Locale;
 import java.util.Objects;
 import java.util.concurrent.TimeUnit;
 
@@ -199,7 +200,7 @@ public void onHeaders(Metadata headers) {
                       } else if (directive.equalsIgnoreCase("no-transform")) {
                         cacheResponse = false;
                         break;
-                      } else if (directive.toLowerCase().startsWith("max-age")) {
+                      } else if (directive.toLowerCase(Locale.US).startsWith("max-age")) {
                         String[] parts = directive.split("=");
                         if (parts.length == 2) {
                           try {

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AbstractConfigurationBuilder.java
Patch:
@@ -212,7 +212,7 @@ private static String commandLineFlag(Param param) {
   private static String wordWrap(String text, int startPos, int maxPos) {
     StringBuilder builder = new StringBuilder();
     int pos = startPos;
-    String[] parts = text.split("\\n");
+    String[] parts = text.split("\\n", -1);
     boolean isBulleted = parts.length > 1;
     for (String part : parts) {
       int lineStart = startPos;

File: core/src/main/java/io/grpc/internal/Http2ClientStreamTransportState.java
Patch:
@@ -226,7 +226,7 @@ private Status validateInitialMetadata(Metadata headers) {
   private static Charset extractCharset(Metadata headers) {
     String contentType = headers.get(GrpcUtil.CONTENT_TYPE_KEY);
     if (contentType != null) {
-      String[] split = contentType.split("charset=");
+      String[] split = contentType.split("charset=", 2);
       try {
         return Charset.forName(split[split.length - 1].trim());
       } catch (Exception t) {

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1725,7 +1725,8 @@ protected void assertX500SubjectDn(String tlsInfo) {
     try {
       certificates = Arrays.asList(sslSession.getPeerCertificates());
     } catch (SSLPeerUnverifiedException e) {
-      fail("No cert");
+      // Should never happen
+      throw new AssertionError(e);
     }
 
     X509Certificate x509cert = (X509Certificate) certificates.get(0);

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java
Patch:
@@ -137,7 +137,7 @@ static class LoadGenerationWorker implements Callable<Histogram> {
       stub = BenchmarkServiceGrpc.newStub(checkNotNull(channel, "channel"));
       this.request = checkNotNull(request, "request");
       this.targetQps = targetQps;
-      numRpcs = targetQps * duration;
+      numRpcs = (long) targetQps * duration;
       rnd = new Random();
     }
 

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -24,13 +24,13 @@
 import com.google.common.base.Preconditions;
 import com.google.common.io.BaseEncoding;
 import java.nio.ByteBuffer;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -347,7 +347,7 @@ public <T> Iterable<T> removeAll(Key<T> key) {
     List<T> ret = null;
     for (; readIdx < size; readIdx++) {
       if (bytesEqual(key.asciiName(), name(readIdx))) {
-        ret = ret != null ? ret : new LinkedList<T>();
+        ret = ret != null ? ret : new ArrayList<T>();
         ret.add(key.parseBytes(value(readIdx)));
         continue;
       }

File: core/src/main/java/io/grpc/internal/ApplicationThreadDeframer.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.grpc.Decompressor;
 import java.io.InputStream;
-import java.util.LinkedList;
+import java.util.ArrayDeque;
 import java.util.Queue;
 import javax.annotation.Nullable;
 
@@ -41,7 +41,7 @@ interface TransportExecutor {
   private final TransportExecutor transportExecutor;
 
   /** Queue for messages returned by the deframer when deframing in the application thread. */
-  private final Queue<InputStream> messageReadQueue = new LinkedList<InputStream>();
+  private final Queue<InputStream> messageReadQueue = new ArrayDeque<InputStream>();
 
   ApplicationThreadDeframer(
       MessageDeframer.Listener listener,

File: core/src/main/java/io/grpc/internal/ChannelExecutor.java
Patch:
@@ -19,7 +19,8 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.VisibleForTesting;
-import java.util.LinkedList;
+import java.util.ArrayDeque;
+import java.util.Queue;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.concurrent.GuardedBy;
@@ -39,7 +40,7 @@ final class ChannelExecutor {
   private final Object lock = new Object();
 
   @GuardedBy("lock")
-  private final LinkedList<Runnable> queue = new LinkedList<Runnable>();
+  private final Queue<Runnable> queue = new ArrayDeque<Runnable>();
   @GuardedBy("lock")
   private boolean draining;
 

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -39,9 +39,9 @@
 import io.grpc.testing.integration.Messages.StreamingOutputCallResponse;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.ArrayDeque;
 import java.util.Arrays;
 import java.util.HashSet;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Queue;
 import java.util.Random;
@@ -209,7 +209,7 @@ public void onError(Throwable cause) {
   @Override
   public StreamObserver<Messages.StreamingOutputCallRequest> halfDuplexCall(
       final StreamObserver<Messages.StreamingOutputCallResponse> responseObserver) {
-    final Queue<Chunk> chunks = new LinkedList<Chunk>();
+    final Queue<Chunk> chunks = new ArrayDeque<Chunk>();
     return new StreamObserver<StreamingOutputCallRequest>() {
       @Override
       public void onNext(StreamingOutputCallRequest request) {
@@ -371,7 +371,7 @@ private void assertNotFailed() {
    * Breaks down the request and creates a queue of response chunks for the given request.
    */
   public Queue<Chunk> toChunkQueue(StreamingOutputCallRequest request) {
-    Queue<Chunk> chunkQueue = new LinkedList<Chunk>();
+    Queue<Chunk> chunkQueue = new ArrayDeque<Chunk>();
     int offset = 0;
     boolean compressable = compressableResponse(request.getResponseType());
     for (ResponseParameters params : request.getResponseParametersList()) {

File: netty/src/test/java/io/grpc/netty/AbstractHttp2HeadersTest.java
Patch:
@@ -50,8 +50,8 @@ public void allMethodsAreUnsupported() {
       } catch (InvocationTargetException ex) {
         assertEquals("For method: " + method,
             UnsupportedOperationException.class, ex.getCause().getClass());
-      } catch (Throwable t) {
-        throw new RuntimeException("Failure with method: " + method, t);
+      } catch (Exception ex) {
+        throw new AssertionError("Failure with method: " + method, ex);
       }
     }
   }

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -165,6 +165,7 @@ private static Map<ErrorCode, Status> buildErrorCodeToStatusMap() {
   private Socket socket;
   @GuardedBy("lock")
   private int maxConcurrentStreams = 0;
+  @SuppressWarnings("JdkObsolete") // Usage is bursty; want low memory usage when empty
   @GuardedBy("lock")
   private LinkedList<OkHttpClientStream> pendingStreams = new LinkedList<OkHttpClientStream>();
   private final ConnectionSpec connectionSpec;

File: services/src/main/java/io/grpc/protobuf/services/ProtoReflectionService.java
Patch:
@@ -42,10 +42,10 @@
 import io.grpc.reflection.v1alpha.ServiceResponse;
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
+import java.util.ArrayDeque;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Queue;
@@ -300,7 +300,7 @@ private ServerReflectionResponse createServerReflectionResponse(
       FileDescriptorResponse.Builder fdRBuilder = FileDescriptorResponse.newBuilder();
 
       Set<String> seenFiles = new HashSet<String>();
-      Queue<FileDescriptor> frontier = new LinkedList<FileDescriptor>();
+      Queue<FileDescriptor> frontier = new ArrayDeque<FileDescriptor>();
       seenFiles.add(fd.getName());
       frontier.add(fd);
       while (!frontier.isEmpty()) {
@@ -408,7 +408,7 @@ private static final class FileDescriptorIndex {
         new HashMap<String, Map<Integer, FileDescriptor>>();
 
     FileDescriptorIndex(List<ServerServiceDefinition> services) {
-      Queue<FileDescriptor> fileDescriptorsToProcess = new LinkedList<FileDescriptor>();
+      Queue<FileDescriptor> fileDescriptorsToProcess = new ArrayDeque<FileDescriptor>();
       Set<String> seenFiles = new HashSet<String>();
       for (ServerServiceDefinition service : services) {
         io.grpc.ServiceDescriptor serviceDescriptor = service.getServiceDescriptor();

File: stub/src/test/java/io/grpc/stub/ClientCallsTest.java
Patch:
@@ -557,7 +557,7 @@ public void start(io.grpc.ClientCall.Listener<String> responseListener, Metadata
     try {
       iter.next();
       fail("Should fail");
-    } catch (Throwable e) {
+    } catch (Exception e) {
       Status status = Status.fromThrowable(e);
       assertEquals(Status.INTERNAL, status);
       Metadata metadata = Status.trailersFromThrowable(e);

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -68,11 +68,11 @@ final class DnsNameResolver extends NameResolver {
   // From https://github.com/grpc/proposal/blob/master/A5-grpclb-in-dns.md
   private static final String GRPCLB_NAME_PREFIX = "_grpclb._tcp.";
 
-  private static final String jndiProperty =
+  private static final String JNDI_PROPERTY =
       System.getProperty("io.grpc.internal.DnsNameResolverProvider.enable_jndi", "false");
 
   @VisibleForTesting
-  static boolean enableJndi = Boolean.parseBoolean(jndiProperty);
+  static boolean enableJndi = Boolean.parseBoolean(JNDI_PROPERTY);
 
   private DelegateResolver delegateResolver = pickDelegateResolver();
 

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/InteropTester.java
Patch:
@@ -46,8 +46,8 @@
 import io.grpc.android.integrationtest.nano.Messages.StreamingOutputCallResponse;
 import io.grpc.android.integrationtest.nano.TestServiceGrpc;
 import io.grpc.android.integrationtest.nano.UnimplementedServiceGrpc;
+import io.grpc.internal.testing.StreamRecorder;
 import io.grpc.stub.StreamObserver;
-import io.grpc.testing.StreamRecorder;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.Arrays;

File: cronet/src/main/java/io/grpc/cronet/CronetClientTransport.java
Patch:
@@ -17,6 +17,7 @@
 package io.grpc.cronet;
 
 import com.google.common.base.Preconditions;
+import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
 import io.grpc.Attributes;
 import io.grpc.CallOptions;
@@ -37,7 +38,6 @@
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.Executor;
-import java.util.concurrent.Future;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.GuardedBy;
 
@@ -95,7 +95,7 @@ class CronetClientTransport implements ConnectionClientTransport, InternalWithLo
   }
 
   @Override
-  public Future<InternalTransportStats> getTransportStats() {
+  public ListenableFuture<InternalTransportStats> getStats() {
     SettableFuture<InternalTransportStats> f = SettableFuture.create();
     f.set(null);
     return f;

File: cronet/src/main/java/io/grpc/cronet/CronetClientTransport.java
Patch:
@@ -31,7 +31,6 @@
 import io.grpc.internal.ConnectionClientTransport;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.StatsTraceContext;
-import io.grpc.internal.TransportTracer;
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
 import java.util.HashSet;

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -1395,7 +1395,7 @@ private void subtestGrpclbFallbackConnectionLost(
 
     // Attempted to connect to balancer
     assertEquals(1, fakeOobChannels.size());
-    ManagedChannel oobChannel = fakeOobChannels.poll();
+    fakeOobChannels.poll();
     inOrder.verify(mockLbService).balanceLoad(lbResponseObserverCaptor.capture());
     StreamObserver<LoadBalanceResponse> lbResponseObserver = lbResponseObserverCaptor.getValue();
     assertEquals(1, lbRequestObservers.size());

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1843,8 +1843,6 @@ private void assertServerStatsTrace(String method, Status.Code code,
       // Server is not in the same process.  We can't check server-side stats.
       return;
     }
-    AssertionError checkFailure = null;
-    boolean passed = false;
 
     if (metricsExpected()) {
       MetricsRecord serverStartRecord;

File: core/src/main/java/io/grpc/Drainable.java
Patch:
@@ -25,7 +25,7 @@
  *
  * <p>This can be used for optimizing for the case where the content of the input stream will be
  * written to an {@link OutputStream} eventually. Instead of copying the content to a byte array
- * through {@code read()}, then writing the the {@code OutputStream}, the implementation can write
+ * through {@code read()}, then writing the {@code OutputStream}, the implementation can write
  * the content directly to the {@code OutputStream}.
  */
 public interface Drainable {

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -544,7 +544,7 @@ public interface AsciiMarshaller<T> {
    * <li>special characters: {@code -_.}
    * </ul>
    *
-   * <p>This is a a strict subset of the HTTP field-name rules. Applications may not send or receive
+   * <p>This is a strict subset of the HTTP field-name rules. Applications may not send or receive
    * metadata with invalid key names. However, the gRPC library may preserve any metadata received
    * even if it does not conform to the above limitations. Additionally, if metadata contains non
    * conforming field names, they will still be sent. In this way, unknown metadata fields are

File: examples/src/main/java/io/grpc/examples/experimental/CompressingHelloWorldClient.java
Patch:
@@ -30,7 +30,7 @@
  * A simple client that requests a greeting from the
  *      {@link io.grpc.examples.helloworld.HelloWorldServer}.
  *
- * <p>This class should act a a drop in replacement for
+ * <p>This class should act a drop in replacement for
  *      {@link io.grpc.examples.helloworld.HelloWorldClient}.
  */
 public class CompressingHelloWorldClient {

File: okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java
Patch:
@@ -297,7 +297,7 @@ boolean hasFrame() {
     }
 
     /**
-     * Returns the the head of the pending queue, or {@code null} if empty.
+     * Returns the head of the pending queue, or {@code null} if empty.
      */
     private Frame peek() {
       return pendingWriteQueue.peek();

File: context/src/test/java/io/grpc/StaticTestingClassLoader.java
Patch:
@@ -17,7 +17,7 @@
 package io.grpc;
 
 import com.google.common.base.Preconditions;
-import io.grpc.internal.IoUtils;
+import com.google.common.io.ByteStreams;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.regex.Pattern;
@@ -45,7 +45,7 @@ protected Class<?> findClass(String name) throws ClassNotFoundException {
     }
     byte[] b;
     try {
-      b = IoUtils.toByteArray(is);
+      b = ByteStreams.toByteArray(is);
     } catch (IOException ex) {
       throw new ClassNotFoundException(name, ex);
     }

File: context/src/test/java/io/grpc/testing/DeadlineSubject.java
Patch:
@@ -23,7 +23,6 @@
 import com.google.common.truth.FailureStrategy;
 import com.google.common.truth.SubjectFactory;
 import io.grpc.Deadline;
-import io.grpc.ExperimentalApi;
 import java.math.BigInteger;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.CheckReturnValue;
@@ -32,7 +31,6 @@
 /**
  * Propositions for {@link Deadline} subjects.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/3613")
 public final class DeadlineSubject extends ComparableSubject<DeadlineSubject, Deadline> {
   private static final SubjectFactory<DeadlineSubject, Deadline> deadlineFactory =
       new DeadlineSubjectFactory();
@@ -79,7 +77,6 @@ public void of(Deadline expected) {
    * A partially specified proposition about an approximate relationship to a {@code deadline}
    * subject using a tolerance.
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/3613")
   public abstract static class TolerantDeadlineComparison {
 
     private TolerantDeadlineComparison() {}

File: core/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -135,12 +135,12 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
    * Overrides the authority used with TLS and HTTP virtual hosting. It does not change what host is
    * actually connected to. Is commonly in the form {@code host:port}.
    *
-   * <p>Should only used by tests.
+   * <p>This method is intended for testing, but may safely be used outside of tests as an
+   * alternative to DNS overrides.
    *
    * @return this
    * @since 1.0.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1767")
   public abstract T overrideAuthority(String authority);
 
   /**

File: core/src/main/java/io/grpc/HandlerRegistry.java
Patch:
@@ -25,7 +25,6 @@
  * Registry of services and their methods used by servers to dispatching incoming calls.
  */
 @ThreadSafe
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/933")
 public abstract class HandlerRegistry {
 
   /**

File: core/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -136,7 +136,6 @@ public T addStreamTracerFactory(ServerStreamTracer.Factory factory) {
    * @return this
    * @since 1.0.0
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/933")
   public abstract T fallbackHandlerRegistry(@Nullable HandlerRegistry fallbackRegistry);
 
   /**

File: core/src/main/java/io/grpc/ServiceDescriptor.java
Patch:
@@ -100,7 +100,7 @@ public String getName() {
    * @since 1.1.0
    */
   @Nullable
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/2666")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/2222")
   public Object getSchemaDescriptor() {
     return schemaDescriptor;
   }

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -774,7 +774,8 @@ private final class KeepAlivePinger implements KeepAliveManager.KeepAlivePinger
     @Override
     public void ping() {
       ChannelFuture pingFuture = encoder().writePing(
-          ctx, false /* isAck */, KEEPALIVE_PING_BUF, ctx.newPromise());
+          // slice KEEPALIVE_PING_BUF because tls handler may modify the reader index
+          ctx, false /* isAck */, KEEPALIVE_PING_BUF.slice(), ctx.newPromise());
       ctx.flush();
       if (transportTracer != null) {
         pingFuture.addListener(new ChannelFutureListener() {

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -174,7 +174,7 @@ public void onReady() {}
    * <p>If called multiple times, the number of messages able to delivered will be the sum of the
    * calls.
    *
-   * <p>This method is safe to call from multiple threads without external synchronizaton.
+   * <p>This method is safe to call from multiple threads without external synchronization.
    *
    * @param numMessages the requested number of messages to be delivered to the listener. Must be
    *                    non-negative.

File: stub/src/main/java/io/grpc/stub/ClientCallStreamObserver.java
Patch:
@@ -24,6 +24,9 @@
 /**
  * A refinement of {@link CallStreamObserver} that allows for lower-level interaction with
  * client calls.
+ *
+ * <p>Like {@code StreamObserver}, implementations are not required to be thread-safe; if multiple
+ * threads will be writing to an instance concurrently, the application must synchronize its calls.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1788")
 @DoNotMock

File: stub/src/main/java/io/grpc/stub/StreamObserver.java
Patch:
@@ -25,8 +25,8 @@
  * library to the application. For incoming messages, the application implements the
  * {@code StreamObserver} and passes it to the GRPC library for receiving.
  *
- * <p>Implementations are expected to be
- * <a href="http://www.ibm.com/developerworks/library/j-jtp09263/">thread-compatible</a>.
+ * <p>Implementations are not required to be thread-safe (but should be
+ * <a href="http://www.ibm.com/developerworks/library/j-jtp09263/">thread-compatible</a>).
  * Separate {@code StreamObserver}s do
  * not need to be synchronized together; incoming and outgoing directions are independent.
  * Since individual {@code StreamObserver}s are not thread-safe, if multiple threads will be

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -304,7 +304,7 @@ public Handler newHandler(GrpcHttp2ConnectionHandler handler) {
         @Override
         public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
           SSLEngine sslEngine = sslContext.newEngine(ctx.alloc(), host, port);
-          SSLParameters sslParams = new SSLParameters();
+          SSLParameters sslParams = sslEngine.getSSLParameters();
           sslParams.setEndpointIdentificationAlgorithm("HTTPS");
           sslEngine.setSSLParameters(sslParams);
           ctx.pipeline().replace(this, null, new SslHandler(sslEngine, false));

File: core/src/test/java/io/grpc/internal/CallCredentialsApplyingTest.java
Patch:
@@ -81,7 +81,7 @@ public class CallCredentialsApplyingTest {
   private static final MethodDescriptor<String, Integer> method =
       MethodDescriptor.<String, Integer>newBuilder()
           .setType(MethodDescriptor.MethodType.UNKNOWN)
-          .setFullMethodName("/service/method")
+          .setFullMethodName("service/method")
           .setRequestMarshaller(new StringMarshaller())
           .setResponseMarshaller(new IntegerMarshaller())
           .build();

File: core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java
Patch:
@@ -84,12 +84,12 @@ public class DelayedClientTransportTest {
   private final MethodDescriptor<String, Integer> method =
       MethodDescriptor.<String, Integer>newBuilder()
           .setType(MethodType.UNKNOWN)
-          .setFullMethodName("/service/method")
+          .setFullMethodName("service/method")
           .setRequestMarshaller(new StringMarshaller())
           .setResponseMarshaller(new IntegerMarshaller())
           .build();
   private final MethodDescriptor<String, Integer> method2 =
-      method.toBuilder().setFullMethodName("/service/method").build();
+      method.toBuilder().setFullMethodName("service/method").build();
   private final Metadata headers = new Metadata();
   private final Metadata headers2 = new Metadata();
 

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -87,7 +87,7 @@ public class ManagedChannelImplIdlenessTest {
   private final MethodDescriptor<String, Integer> method =
       MethodDescriptor.<String, Integer>newBuilder()
           .setType(MethodType.UNKNOWN)
-          .setFullMethodName("/service/method")
+          .setFullMethodName("service/method")
           .setRequestMarshaller(new StringMarshaller())
           .setResponseMarshaller(new IntegerMarshaller())
           .build();

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -118,7 +118,7 @@ public class ManagedChannelImplTest {
   private static final MethodDescriptor<String, Integer> method =
       MethodDescriptor.<String, Integer>newBuilder()
           .setType(MethodType.UNKNOWN)
-          .setFullMethodName("/service/method")
+          .setFullMethodName("service/method")
           .setRequestMarshaller(new StringMarshaller())
           .setResponseMarshaller(new IntegerMarshaller())
           .build();

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -67,15 +67,15 @@ public class ServerCallImplTest {
   private static final MethodDescriptor<Long, Long> UNARY_METHOD =
       MethodDescriptor.<Long, Long>newBuilder()
           .setType(MethodType.UNARY)
-          .setFullMethodName("/service/method")
+          .setFullMethodName("service/method")
           .setRequestMarshaller(new LongMarshaller())
           .setResponseMarshaller(new LongMarshaller())
           .build();
 
   private static final MethodDescriptor<Long, Long> CLIENT_STREAMING_METHOD =
       MethodDescriptor.<Long, Long>newBuilder()
           .setType(MethodType.UNARY)
-          .setFullMethodName("/service/method")
+          .setFullMethodName("service/method")
           .setRequestMarshaller(new LongMarshaller())
           .setResponseMarshaller(new LongMarshaller())
           .build();

File: netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java
Patch:
@@ -93,7 +93,7 @@ public class NettyClientStreamTest extends NettyStreamTestBase<NettyClientStream
   // Must be initialized before @Before, because it is used by createStream()
   private MethodDescriptor<?, ?> methodDescriptor = MethodDescriptor.<Void, Void>newBuilder()
       .setType(MethodDescriptor.MethodType.UNARY)
-      .setFullMethodName("/testService/test")
+      .setFullMethodName("testService/test")
       .setRequestMarshaller(marshaller)
       .setResponseMarshaller(marshaller)
       .build();
@@ -423,7 +423,7 @@ public void getRequestSentThroughHeader() {
     // Creating a GET method
     MethodDescriptor<?, ?> descriptor = MethodDescriptor.<Void, Void>newBuilder()
         .setType(MethodDescriptor.MethodType.UNARY)
-        .setFullMethodName("/testService/test")
+        .setFullMethodName("testService/test")
         .setRequestMarshaller(marshaller)
         .setResponseMarshaller(marshaller)
         .setIdempotent(true)
@@ -451,7 +451,7 @@ public void getRequestSentThroughHeader() {
     assertThat(headers)
         .containsEntry(
             AsciiString.of(":path"),
-            AsciiString.of("//testService/test?" + BaseEncoding.base64().encode(msg)));
+            AsciiString.of("/testService/test?" + BaseEncoding.base64().encode(msg)));
   }
 
   @Override

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -587,7 +587,7 @@ private static class Rpc {
     static final MethodDescriptor<String, String> METHOD =
         MethodDescriptor.<String, String>newBuilder()
             .setType(MethodDescriptor.MethodType.UNARY)
-            .setFullMethodName("/testService/test")
+            .setFullMethodName("testService/test")
             .setRequestMarshaller(StringMarshaller.INSTANCE)
             .setResponseMarshaller(StringMarshaller.INSTANCE)
             .build();

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientStreamTest.java
Patch:
@@ -71,7 +71,7 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     methodDescriptor = MethodDescriptor.<Void, Void>newBuilder()
         .setType(MethodDescriptor.MethodType.UNARY)
-        .setFullMethodName("/testService/test")
+        .setFullMethodName("testService/test")
         .setRequestMarshaller(marshaller)
         .setResponseMarshaller(marshaller)
         .build();
@@ -169,7 +169,7 @@ public void start_headerFieldOrder() {
   public void getUnaryRequest() {
     MethodDescriptor<?, ?> getMethod = MethodDescriptor.<Void, Void>newBuilder()
         .setType(MethodDescriptor.MethodType.UNARY)
-        .setFullMethodName("/service/method")
+        .setFullMethodName("service/method")
         .setIdempotent(true)
         .setSafe(true)
         .setRequestMarshaller(marshaller)

File: core/src/main/java/io/grpc/Contexts.java
Patch:
@@ -133,7 +133,7 @@ public static Status statusFromCancelled(Context context) {
 
     Throwable cancellationCause = context.cancellationCause();
     if (cancellationCause == null) {
-      return Status.CANCELLED;
+      return Status.CANCELLED.withDescription("io.grpc.Context was cancelled without error");
     }
     if (cancellationCause instanceof TimeoutException) {
       return Status.DEADLINE_EXCEEDED

File: netty/src/main/java/io/grpc/netty/GrpcSslContexts.java
Patch:
@@ -158,7 +158,8 @@ private static ApplicationProtocolConfig selectApplicationProtocolConfig(SslProv
         }
         // Use the ALPN cause since it is prefered.
         throw new IllegalArgumentException(
-            "Jetty ALPN/NPN has not been properly configured.",
+            "ALPN is not configured properly. See https://github.com/grpc/grpc-java/blob/master/SECURITY.md#troubleshooting"
+                + " for more information.",
             JettyTlsUtil.getJettyAlpnUnavailabilityCause());
       }
       case OPENSSL: {

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/SingleThreadBlockingQpsBenchmark.java
Patch:
@@ -65,8 +65,8 @@ public void teardown() throws Exception {
    * Issue a unary call and wait for the response.
    */
   @Benchmark
-  public void blockingUnary() throws Exception {
-    ClientCalls.blockingUnaryCall(
+  public Object blockingUnary() throws Exception {
+    return ClientCalls.blockingUnaryCall(
         channels[0].newCall(unaryMethod, CallOptions.DEFAULT), Unpooled.EMPTY_BUFFER);
   }
 

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadServer.java
Patch:
@@ -60,14 +60,14 @@ final class LoadServer {
    * Generic version of the unary method call.
    */
   static final MethodDescriptor<ByteBuf, ByteBuf> GENERIC_UNARY_METHOD =
-      BenchmarkServiceGrpc.METHOD_UNARY_CALL.toBuilder(marshaller, marshaller)
+      BenchmarkServiceGrpc.getUnaryCallMethod().toBuilder(marshaller, marshaller)
           .build();
 
   /**
    * Generic version of the streaming ping-pong method call.
    */
   static final MethodDescriptor<ByteBuf, ByteBuf> GENERIC_STREAMING_PING_PONG_METHOD =
-      BenchmarkServiceGrpc.METHOD_STREAMING_CALL.toBuilder(marshaller, marshaller)
+      BenchmarkServiceGrpc.getStreamingCallMethod().toBuilder(marshaller, marshaller)
           .build();
 
   private static final Logger log = Logger.getLogger(LoadServer.class.getName());

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -303,7 +303,7 @@ public void emptyUnary() throws Exception {
   public void cacheableUnary() {
     // Set safe to true.
     MethodDescriptor<SimpleRequest, SimpleResponse> safeCacheableUnaryCallMethod =
-        TestServiceGrpc.METHOD_CACHEABLE_UNARY_CALL.toBuilder().setSafe(true).build();
+        TestServiceGrpc.getCacheableUnaryCallMethod().toBuilder().setSafe(true).build();
     // Set fake user IP since some proxies (GFE) won't cache requests from localhost.
     Metadata.Key<String> userIpKey = Metadata.Key.of("x-user-ip", Metadata.ASCII_STRING_MARSHALLER);
     Metadata metadata = new Metadata();
@@ -837,7 +837,7 @@ public void serverStreamingShouldBeFlowControlled() throws Exception {
 
     final ArrayBlockingQueue<Object> queue = new ArrayBlockingQueue<Object>(10);
     ClientCall<StreamingOutputCallRequest, StreamingOutputCallResponse> call =
-        channel.newCall(TestServiceGrpc.METHOD_STREAMING_OUTPUT_CALL, CallOptions.DEFAULT);
+        channel.newCall(TestServiceGrpc.getStreamingOutputCallMethod(), CallOptions.DEFAULT);
     call.start(new ClientCall.Listener<StreamingOutputCallResponse>() {
       @Override
       public void onHeaders(Metadata headers) {}

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -86,11 +86,11 @@ public void testStubCallOptionsPopulatedToNewCall() {
     CallOptions options1 = stub.getCallOptions();
     SimpleRequest request = SimpleRequest.getDefaultInstance();
     stub.unaryCall(request, responseObserver);
-    verify(channel).newCall(same(TestServiceGrpc.METHOD_UNARY_CALL), same(options1));
+    verify(channel).newCall(same(TestServiceGrpc.getUnaryCallMethod()), same(options1));
     stub = stub.withDeadlineAfter(2, NANOSECONDS);
     CallOptions options2 = stub.getCallOptions();
     assertNotSame(options1, options2);
     stub.unaryCall(request, responseObserver);
-    verify(channel).newCall(same(TestServiceGrpc.METHOD_UNARY_CALL), same(options2));
+    verify(channel).newCall(same(TestServiceGrpc.getUnaryCallMethod()), same(options2));
   }
 }

File: core/src/main/java/io/grpc/ServerStreamTracer.java
Patch:
@@ -28,7 +28,7 @@ public abstract class ServerStreamTracer extends StreamTracer {
    * Called before the interceptors and the call handlers and make changes to the Context object
    * if needed.
    */
-  public <ReqT, RespT> Context filterContext(Context context) {
+  public Context filterContext(Context context) {
     return context;
   }
 

File: core/src/main/java/io/grpc/internal/CensusTracingModule.java
Patch:
@@ -309,7 +309,7 @@ public void streamClosed(io.grpc.Status status) {
     }
 
     @Override
-    public <ReqT, RespT> Context filterContext(Context context) {
+    public Context filterContext(Context context) {
       // Access directly the unsafe trace API to create the new Context. This is a safe usage
       // because gRPC always creates a new Context for each of the server calls and does not
       // inherit from the parent Context.

File: core/src/test/java/io/grpc/internal/ServerImplTest.java
Patch:
@@ -132,7 +132,7 @@ public static void beforeStartUp() {
   private List<ServerStreamTracer.Factory> streamTracerFactories;
   private final TestServerStreamTracer streamTracer = new TestServerStreamTracer() {
       @Override
-      public <ReqT, RespT> Context filterContext(Context context) {
+      public Context filterContext(Context context) {
         Context newCtx = super.filterContext(context);
         return newCtx.withValue(SERVER_TRACER_ADDED_KEY, "context added by tracer");
       }

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -169,7 +169,7 @@ private static final class InteropServerStreamTracer extends TestServerStreamTra
       private volatile Context contextCapture;
 
       @Override
-      public <ReqT, RespT> Context filterContext(Context context) {
+      public Context filterContext(Context context) {
         contextCapture = context;
         return super.filterContext(context);
       }

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -631,7 +631,7 @@ public void ping(PingCallback callback, Executor executor) {
         }
       };
     }
-    if (!result.getStatus().isOk() && !isWaitForReady) {
+    if (!result.getStatus().isOk() && (result.isDrop() || !isWaitForReady)) {
       return new FailingClientTransport(result.getStatus());
     }
     return null;

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java
Patch:
@@ -77,7 +77,7 @@ final class GrpclbState {
 
   @VisibleForTesting
   static final PickResult DROP_PICK_RESULT =
-      PickResult.withError(Status.UNAVAILABLE.withDescription("Dropped as requested by balancer"));
+      PickResult.withDrop(Status.UNAVAILABLE.withDescription("Dropped as requested by balancer"));
 
   @VisibleForTesting
   static final RoundRobinEntry BUFFER_ENTRY = new RoundRobinEntry() {

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -293,6 +293,7 @@ public void roundRobinPickerNoDrop() {
 
   @Test
   public void roundRobinPickerWithDrop() {
+    assertTrue(DROP_PICK_RESULT.isDrop());
     GrpclbClientLoadRecorder loadRecorder = new GrpclbClientLoadRecorder(timeProvider);
     Subchannel subchannel = mock(Subchannel.class);
     // 1 out of 2 requests are to be dropped

File: examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlClient.java
Patch:
@@ -18,9 +18,6 @@
 
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
-import io.grpc.examples.helloworld.HelloReply;
-import io.grpc.examples.helloworld.HelloRequest;
-import io.grpc.examples.helloworld.StreamingGreeterGrpc;
 import io.grpc.stub.ClientCallStreamObserver;
 import io.grpc.stub.ClientResponseObserver;
 

File: examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java
Patch:
@@ -19,9 +19,6 @@
 import io.grpc.Server;
 import io.grpc.ServerBuilder;
 import io.grpc.Status;
-import io.grpc.examples.helloworld.HelloReply;
-import io.grpc.examples.helloworld.HelloRequest;
-import io.grpc.examples.helloworld.StreamingGreeterGrpc;
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
 

File: context/src/test/java/io/grpc/ContextTest.java
Patch:
@@ -832,8 +832,7 @@ public String call() {
 
   @Test
   public void storageReturnsNullTest() throws Exception {
-    Class<?> contextClass = Class.forName("io.grpc.Context");
-    Field storage = contextClass.getDeclaredField("storage");
+    Field storage = Context.class.getDeclaredField("storage");
     assertTrue(Modifier.isFinal(storage.getModifiers()));
     // use reflection to forcibly change the storage object to a test object
     storage.setAccessible(true);

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -24,7 +24,6 @@
 import static io.grpc.internal.GrpcUtil.MESSAGE_ENCODING_KEY;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.Iterables;
 import com.google.common.util.concurrent.MoreExecutors;
 import io.grpc.Attributes;
 import io.grpc.Codec;
@@ -90,7 +89,7 @@ public void sendHeaders(Metadata headers) {
     } else {
       if (messageAcceptEncoding != null) {
         // TODO(carl-mastrangelo): remove the string allocation.
-        if (!Iterables.contains(
+        if (!GrpcUtil.iterableContains(
             ACCEPT_ENCODING_SPLITTER.split(new String(messageAcceptEncoding, GrpcUtil.US_ASCII)),
             compressor.getMessageEncoding())) {
           // resort to using no compression.

File: core/src/main/java/io/grpc/internal/AbstractClientStream.java
Patch:
@@ -359,7 +359,8 @@ public void writePayload(InputStream message) {
       } catch (java.io.IOException ex) {
         throw new RuntimeException(ex);
       }
-      statsTraceCtx.outboundMessage();
+      statsTraceCtx.outboundMessage(0);
+      statsTraceCtx.outboundMessageSent(0, payload.length, payload.length);
       statsTraceCtx.outboundUncompressedSize(payload.length);
       // NB(zhangkun83): this is not accurate, because the underlying transport will probably encode
       // it using e.g., base64.  However, we are not supposed to know such detail here.

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbClientLoadRecorder.java
Patch:
@@ -117,7 +117,7 @@ public void inboundHeaders() {
     }
 
     @Override
-    public void inboundMessage() {
+    public void inboundMessage(int seqNo) {
       anythingReceived.set(true);
     }
 

File: netty/src/main/java/io/grpc/netty/NettyClientStream.java
Patch:
@@ -29,7 +29,6 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
 import io.grpc.internal.AbstractClientStream;
-import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.Http2ClientStreamTransportState;
 import io.grpc.internal.StatsTraceContext;
 import io.grpc.internal.WritableBuffer;
@@ -121,7 +120,6 @@ public void writeHeaders(Metadata headers, byte[] requestPayload) {
       } else {
         httpMethod = Utils.HTTP_METHOD;
       }
-      headers.discardAll(GrpcUtil.USER_AGENT_KEY);
       Http2Headers http2Headers = Utils.convertClientHeaders(headers, scheme, defaultPath,
           authority, httpMethod, userAgent);
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -25,7 +25,6 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
 import io.grpc.internal.AbstractClientStream;
-import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.Http2ClientStreamTransportState;
 import io.grpc.internal.StatsTraceContext;
 import io.grpc.internal.WritableBuffer;
@@ -127,7 +126,6 @@ public void writeHeaders(Metadata metadata, byte[] payload) {
         useGet = true;
         defaultPath += "?" + BaseEncoding.base64().encode(payload);
       }
-      metadata.discardAll(GrpcUtil.USER_AGENT_KEY);
       synchronized (state.lock) {
         state.streamReady(metadata, defaultPath);
       }

File: netty/src/test/java/io/grpc/netty/NettyServerTest.java
Patch:
@@ -41,6 +41,7 @@ public void getPort() throws Exception {
         null, // no boss group
         null, // no event group
         new ProtocolNegotiators.PlaintextNegotiator(),
+        null, // no channel init
         Collections.<ServerStreamTracer.Factory>emptyList(),
         1, // ignore
         1, // ignore
@@ -76,6 +77,7 @@ public void getPort_notStarted() throws Exception {
         null, // no boss group
         null, // no event group
         new ProtocolNegotiators.PlaintextNegotiator(),
+        null, // no channel init
         Collections.<ServerStreamTracer.Factory>emptyList(),
         1, // ignore
         1, // ignore

File: context/src/jmh/java/io/grpc/AttachDetachBenchmark.java
Patch:
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package io.grpc.context;
+package io.grpc;
 
-import io.grpc.Context;
 import io.grpc.Context.Key;
 import java.util.concurrent.TimeUnit;
 import org.openjdk.jmh.annotations.Benchmark;

File: context/src/jmh/java/io/grpc/ReadBenchmark.java
Patch:
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package io.grpc.context;
+package io.grpc;
 
-import io.grpc.Context;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;

File: context/src/jmh/java/io/grpc/WriteBenchmark.java
Patch:
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package io.grpc.context;
+package io.grpc;
 
-import io.grpc.Context;
 import java.util.concurrent.TimeUnit;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;

File: core/src/jmh/java/io/grpc/CallOptionsBenchmark.java
Patch:
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package io.grpc.benchmarks;
+package io.grpc;
 
-import io.grpc.CallOptions;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: core/src/jmh/java/io/grpc/internal/SerializingExecutorBenchmark.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.Phaser;
 import java.util.concurrent.TimeUnit;
 import org.openjdk.jmh.annotations.Benchmark;
@@ -39,7 +40,7 @@
 @State(Scope.Thread)
 public class SerializingExecutorBenchmark {
 
-  private ExecutorService executorService;
+  private ExecutorService executorService = Executors.newSingleThreadExecutor();
   private Executor executor = new SerializingExecutor(executorService);
 
   private static class IncrRunnable implements Runnable {
@@ -94,4 +95,4 @@ public void manyRunnables() throws Exception {
       throw new AssertionError();
     }
   }
-}
\ No newline at end of file
+}

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -45,9 +45,9 @@ final class ServerCallImpl<ReqT, RespT> extends ServerCall<ReqT, RespT> {
   private static final Logger log = Logger.getLogger(ServerCallImpl.class.getName());
 
   @VisibleForTesting
-  static String TOO_MANY_RESPONSES = "Too many responses";
+  static final String TOO_MANY_RESPONSES = "Too many responses";
   @VisibleForTesting
-  static String MISSING_RESPONSE = "Completed without a response";
+  static final String MISSING_RESPONSE = "Completed without a response";
 
   private final ServerStream stream;
   private final MethodDescriptor<ReqT, RespT> method;

File: protobuf-lite/src/test/java/io/grpc/protobuf/lite/ProtoLiteUtilsTest.java
Patch:
@@ -180,7 +180,6 @@ public void testDrainTo_partial() throws Exception {
 
   @Test
   public void testDrainTo_none() throws Exception {
-    byte[] golden = ByteStreams.toByteArray(marshaller.stream(proto));
     InputStream is = marshaller.stream(proto);
     byte[] unused = ByteStreams.toByteArray(is);
     Drainable d = (Drainable) is;

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -482,12 +482,10 @@ public void close(ScheduledExecutorService instance) {
    * @return a {@link ThreadFactory}.
    */
   public static ThreadFactory getThreadFactory(String nameFormat, boolean daemon) {
-    ThreadFactory threadFactory = MoreExecutors.platformThreadFactory();
     if (IS_RESTRICTED_APPENGINE) {
-      return threadFactory;
+      return MoreExecutors.platformThreadFactory();
     } else {
       return new ThreadFactoryBuilder()
-          .setThreadFactory(threadFactory)
           .setDaemon(daemon)
           .setNameFormat(nameFormat)
           .build();

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -994,15 +994,15 @@ public void deadlineNotExceeded() {
                 .build()).next();
   }
 
-  @Test(timeout = 10000)
+  @Test(timeout = 25000)
   public void deadlineExceeded() throws Exception {
     // warm up the channel and JVM
     blockingStub.emptyCall(Empty.getDefaultInstance());
     TestServiceGrpc.TestServiceBlockingStub stub =
         blockingStub.withDeadlineAfter(10, TimeUnit.MILLISECONDS);
     StreamingOutputCallRequest request = StreamingOutputCallRequest.newBuilder()
         .addResponseParameters(ResponseParameters.newBuilder()
-            .setIntervalUs(20000))
+            .setIntervalUs((int) TimeUnit.SECONDS.toMicros(20)))
         .build();
     try {
       stub.streamingOutputCall(request).next();

File: core/src/main/java/io/grpc/internal/ForwardingConnectionClientTransport.java
Patch:
@@ -30,8 +30,8 @@ public Runnable start(Listener listener) {
   }
 
   @Override
-  public void shutdown() {
-    delegate().shutdown();
+  public void shutdown(Status status) {
+    delegate().shutdown(status);
   }
 
   @Override

File: core/src/main/java/io/grpc/internal/ManagedClientTransport.java
Patch:
@@ -56,7 +56,7 @@ public interface ManagedClientTransport extends ClientTransport, WithLogId {
    * {@link Listener#transportShutdown} callback called), or be transferred off this transport (in
    * which case they may succeed).  This method may only be called once.
    */
-  void shutdown();
+  void shutdown(Status reason);
 
   /**
    * Initiates a forceful shutdown in which preexisting and new calls are closed. Existing calls

File: core/src/main/java/io/grpc/internal/OobChannel.java
Patch:
@@ -109,7 +109,7 @@ void setSubchannel(final InternalSubchannel subchannel) {
     subchannelImpl = new AbstractSubchannel() {
         @Override
         public void shutdown() {
-          subchannel.shutdown();
+          subchannel.shutdown(Status.UNAVAILABLE.withDescription("OobChannel is shutdown"));
         }
 
         @Override
@@ -179,7 +179,7 @@ public boolean awaitTermination(long time, TimeUnit unit) throws InterruptedExce
   @Override
   public ManagedChannel shutdown() {
     shutdown = true;
-    delayedTransport.shutdown();
+    delayedTransport.shutdown(Status.UNAVAILABLE.withDescription("OobChannel.shutdown() called"));
     return this;
   }
 

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -540,8 +540,7 @@ private void gracefulClose(ChannelHandlerContext ctx, GracefulCloseCommand msg,
 
   private void forcefulClose(final ChannelHandlerContext ctx, final ForcefulCloseCommand msg,
       ChannelPromise promise) throws Exception {
-    lifecycleManager.notifyShutdown(
-        Status.UNAVAILABLE.withDescription("Channel requested transport to shut down"));
+    lifecycleManager.notifyShutdown(msg.getStatus());
     close(ctx, promise);
     connection().forEachActiveStream(new Http2StreamVisitor() {
       @Override

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -118,7 +118,7 @@ public void setup() {
   public void teardown() throws Exception {
     Context.ROOT.attach();
     for (NettyClientTransport transport : transports) {
-      transport.shutdown();
+      transport.shutdown(Status.UNAVAILABLE);
     }
 
     if (server != null) {

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -587,21 +587,21 @@ int getOverridenPort() {
   }
 
   @Override
-  public void shutdown() {
+  public void shutdown(Status reason) {
     synchronized (lock) {
       if (goAwayStatus != null) {
         return;
       }
 
-      goAwayStatus = Status.UNAVAILABLE.withDescription("Transport stopped");
+      goAwayStatus = reason;
       listener.transportShutdown(goAwayStatus);
       stopIfNecessary();
     }
   }
 
   @Override
   public void shutdownNow(Status reason) {
-    shutdown();
+    shutdown(reason);
     synchronized (lock) {
       Iterator<Map.Entry<Integer, OkHttpClientStream>> it = streams.entrySet().iterator();
       while (it.hasNext()) {

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -81,7 +81,6 @@
 import java.util.Queue;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestName;
@@ -440,7 +439,6 @@ public void channelShutdownShouldFailInFlightStreams() throws Exception {
   }
 
   @Test
-  @Ignore("Re-enable once https://github.com/grpc/grpc-java/issues/1175 is fixed")
   public void connectionWindowShouldBeOverridden() throws Exception {
     flowControlWindow = 1048576; // 1MiB
     setUp();

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -86,7 +86,6 @@
 import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.TimeUnit;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -360,7 +359,6 @@ public void shouldAdvertiseMaxHeaderListSize() throws Exception {
   }
 
   @Test
-  @Ignore("Re-enable once https://github.com/grpc/grpc-java/issues/1175 is fixed")
   public void connectionWindowShouldBeOverridden() throws Exception {
     flowControlWindow = 1048576; // 1MiB
     manualSetUp();

File: auth/src/main/java/io/grpc/auth/GoogleAuthLibraryCallCredentials.java
Patch:
@@ -178,7 +178,7 @@ private static Metadata toHeaders(@Nullable Map<String, List<String>> metadata)
   static JwtHelper createJwtHelperOrNull(ClassLoader loader) {
     Class<?> rawServiceAccountClass;
     try {
-      // Specify loader so it can be overriden in tests
+      // Specify loader so it can be overridden in tests
       rawServiceAccountClass
           = Class.forName("com.google.auth.oauth2.ServiceAccountCredentials", false, loader);
     } catch (ClassNotFoundException ex) {

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -126,7 +126,7 @@ public abstract class AbstractManagedChannelImplBuilder
    * larger than this limit is received it will not be processed and the RPC will fail with
    * RESOURCE_EXHAUSTED.
    */
-  // Can be overriden by subclasses.
+  // Can be overridden by subclasses.
   @Override
   public T maxInboundMessageSize(int max) {
     checkArgument(max >= 0, "negative max");

File: netty/src/main/java/io/grpc/netty/NettyClientStream.java
Patch:
@@ -237,7 +237,7 @@ public Http2Stream http2Stream() {
     }
 
     /**
-     * Intended to be overriden by NettyClientTransport, which has more information about failures.
+     * Intended to be overridden by NettyClientTransport, which has more information about failures.
      * May only be called from event loop.
      */
     protected abstract Status statusFromFailedFuture(ChannelFuture f);

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -554,7 +554,7 @@ public LogId getLogId() {
   }
 
   /**
-   * Gets the overriden authority hostname.  If the authority is overriden to be an invalid
+   * Gets the overridden authority hostname.  If the authority is overridden to be an invalid
    * authority, uri.getHost() will (rightly) return null, since the authority is no longer
    * an actual service.  This method overrides the behavior for practical reasons.  For example,
    * if an authority is in the form "invalid_authority" (note the "_"), rather than return null,

File: testing/src/main/java/io/grpc/internal/NoopClientCall.java
Patch:
@@ -22,14 +22,14 @@
 /**
  * {@link NoopClientCall} is a class that is designed for use in tests.  It is designed to be used
  * in places where a scriptable call is necessary.  By default, all methods are noops, and designed
- * to be overriden.
+ * to be overridden.
  */
 public class NoopClientCall<ReqT, RespT> extends ClientCall<ReqT, RespT> {
 
   /**
    * {@link NoopClientCall.NoopClientCallListener} is a class that is designed for use in tests.
    * It is designed to be used in places where a scriptable call listener is necessary.  By
-   * default, all methods are noops, and designed to be overriden.
+   * default, all methods are noops, and designed to be overridden.
    */
   public static class NoopClientCallListener<T> extends ClientCall.Listener<T> {
   }

File: testing/src/main/java/io/grpc/internal/NoopServerCall.java
Patch:
@@ -24,14 +24,14 @@
 /**
  * {@link NoopServerCall} is a class that is designed for use in tests.  It is designed to be used
  * in places where a scriptable call is necessary.  By default, all methods are noops, and designed
- * to be overriden.
+ * to be overridden.
  */
 public class NoopServerCall<ReqT, RespT> extends ServerCall<ReqT, RespT> {
 
   /**
    * {@link NoopServerCall.NoopServerCallListener} is a class that is designed for use in tests.
    * It is designed to be used in places where a scriptable call listener is necessary.  By
-   * default, all methods are noops, and designed to be overriden.
+   * default, all methods are noops, and designed to be overridden.
    */
   public static class NoopServerCallListener<T> extends ServerCall.Listener<T> {
   }

File: testing/src/main/java/io/grpc/testing/NoopClientCall.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * {@link NoopClientCall} is a class that is designed for use in tests.  It is designed to be used
  * in places where a scriptable call is necessary.  By default, all methods are noops, and designed
- * to be overriden.
+ * to be overridden.
  *
  * @deprecated moved to {@link io.grpc.internal.NoopClientCall} and for internal use only. Please
  *             use {@link GrpcServerRule} to test on InProcess channels instead
@@ -35,7 +35,7 @@ public class NoopClientCall<ReqT, RespT> extends ClientCall<ReqT, RespT> {
   /**
    * {@link NoopClientCall.NoopClientCallListener} is a class that is designed for use in tests.
    * It is designed to be used in places where a scriptable call listener is necessary.  By
-   * default, all methods are noops, and designed to be overriden.
+   * default, all methods are noops, and designed to be overridden.
    */
   @Deprecated
   public static class NoopClientCallListener<T> extends ClientCall.Listener<T> {

File: testing/src/main/java/io/grpc/testing/NoopServerCall.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * {@link NoopServerCall} is a class that is designed for use in tests.  It is designed to be used
  * in places where a scriptable call is necessary.  By default, all methods are noops, and designed
- * to be overriden.
+ * to be overridden.
  *
  * @deprecated moved to {@link io.grpc.internal.NoopServerCall} and for internal use only. Please
  *             use {@link GrpcServerRule} to test on InProcess channels instead
@@ -37,7 +37,7 @@ public class NoopServerCall<ReqT, RespT> extends ServerCall<ReqT, RespT> {
   /**
    * {@link NoopServerCall.NoopServerCallListener} is a class that is designed for use in tests.
    * It is designed to be used in places where a scriptable call listener is necessary.  By
-   * default, all methods are noops, and designed to be overriden.
+   * default, all methods are noops, and designed to be overridden.
    */
   @Deprecated
   public static class NoopServerCallListener<T> extends ServerCall.Listener<T> {

File: core/src/test/java/io/grpc/internal/InternalSubchannelTest.java
Patch:
@@ -51,8 +51,6 @@
 
 /**
  * Unit tests for {@link InternalSubchannel}.
- *
- * <p>It only tests the logic that is not covered by {@link ManagedChannelImplTransportManagerTest}.
  */
 @RunWith(JUnit4.class)
 public class InternalSubchannelTest {

File: netty/src/test/java/io/grpc/netty/NettyHandlerTestBase.java
Patch:
@@ -137,7 +137,7 @@ protected final Http2FrameWriter verifyWrite(VerificationMode verificationMode)
   }
 
   protected final void channelRead(Object obj) throws Exception {
-    handler().channelRead(ctx, obj);
+    channel.writeInbound(obj);
   }
 
   protected ByteBuf grpcDataFrame(int streamId, boolean endStream, byte[] content) {

File: core/src/main/java/io/grpc/StreamTracer.java
Patch:
@@ -16,13 +16,15 @@
 
 package io.grpc;
 
+import com.google.errorprone.annotations.DoNotMock;
 import javax.annotation.concurrent.ThreadSafe;
 
 /**
  * Listens to events on a stream to collect metrics.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/2861")
 @ThreadSafe
+@DoNotMock
 public abstract class StreamTracer {
   /**
    * Stream is closed.  This will be called exactly once.

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -64,6 +64,7 @@
 import io.grpc.internal.ServerStreamListener;
 import io.grpc.internal.ServerTransportListener;
 import io.grpc.internal.StatsTraceContext;
+import io.grpc.internal.testing.TestServerStreamTracer;
 import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2ServerHeadersDecoder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
@@ -106,7 +107,7 @@ public class NettyServerHandlerTest extends NettyHandlerTestBase<NettyServerHand
   private ServerStreamTracer.Factory streamTracerFactory;
 
   private final ServerTransportListener transportListener = spy(new ServerTransportListenerImpl());
-  private final ServerStreamTracer streamTracer = spy(new ServerStreamTracer() {});
+  private final TestServerStreamTracer streamTracer = new TestServerStreamTracer();
 
   private NettyServerStream stream;
   private KeepAliveManager spyKeepAliveManager;

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1376,6 +1376,7 @@ public void unimplementedService() {
   }
 
   /** Start a fullDuplexCall which the server will not respond, and verify the deadline expires. */
+  @SuppressWarnings("MissingFail")
   @Test(timeout = 10000)
   public void timeoutOnSleepingServer() throws Exception {
     TestServiceGrpc.TestServiceStub stub =

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -462,7 +462,9 @@ public ManagedChannelImpl shutdown() {
     channelExecutor.executeLater(new Runnable() {
       @Override
       public void run() {
-        channelStateManager.gotoState(SHUTDOWN);
+        if (!channelStateManager.isDisabled()) {
+          channelStateManager.gotoState(SHUTDOWN);
+        }
       }
     });
 

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AbstractConfigurationBuilder.java
Patch:
@@ -55,6 +55,7 @@ public boolean isRequired() {
       return false;
     }
 
+    @Override
     public String getDefaultValue() {
       return null;
     }

File: core/src/test/java/io/grpc/internal/DnsNameResolverProviderTest.java
Patch:
@@ -46,8 +46,7 @@ public void provided() {
 
   @Test
   public void providedHardCoded() {
-    for (NameResolverProvider current
-        : NameResolverProvider.getCandidatesViaHardCoded(getClass().getClassLoader())) {
+    for (NameResolverProvider current : NameResolverProvider.getCandidatesViaHardCoded()) {
       if (current instanceof DnsNameResolverProvider) {
         return;
       }

File: netty/src/test/java/io/grpc/netty/NettyChannelProviderTest.java
Patch:
@@ -44,8 +44,7 @@ public void provided() {
 
   @Test
   public void providedHardCoded() {
-    for (ManagedChannelProvider current
-        : ManagedChannelProvider.getCandidatesViaHardCoded(getClass().getClassLoader())) {
+    for (ManagedChannelProvider current : ManagedChannelProvider.getCandidatesViaHardCoded()) {
       if (current instanceof NettyChannelProvider) {
         return;
       }

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpChannelProviderTest.java
Patch:
@@ -43,8 +43,7 @@ public void provided() {
 
   @Test
   public void providedHardCoded() {
-    for (ManagedChannelProvider current
-        : ManagedChannelProvider.getCandidatesViaHardCoded(getClass().getClassLoader())) {
+    for (ManagedChannelProvider current : ManagedChannelProvider.getCandidatesViaHardCoded()) {
       if (current instanceof OkHttpChannelProvider) {
         return;
       }

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -57,7 +57,7 @@ final class DnsNameResolver extends NameResolver {
 
   private static final Logger logger = Logger.getLogger(DnsNameResolver.class.getName());
 
-  private static final boolean isJndiAvailable = jndiAvailable();
+  private static final boolean JNDI_AVAILABLE = jndiAvailable();
 
   @VisibleForTesting
   static boolean enableJndi = false;
@@ -224,7 +224,7 @@ final int getPort() {
 
   private DelegateResolver pickDelegateResolver() {
     JdkResolver jdkResolver = new JdkResolver();
-    if (isJndiAvailable && enableJndi) {
+    if (JNDI_AVAILABLE && enableJndi) {
       return new CompositeResolver(jdkResolver, new JndiResolver());
     }
     return jdkResolver;

File: core/src/test/java/io/grpc/IntegerMarshaller.java
Patch:
@@ -20,7 +20,7 @@
 
 /** Marshalls decimal-encoded integers. */
 public class IntegerMarshaller implements MethodDescriptor.Marshaller<Integer> {
-  public static IntegerMarshaller INSTANCE = new IntegerMarshaller();
+  public static final IntegerMarshaller INSTANCE = new IntegerMarshaller();
 
   @Override
   public InputStream stream(Integer value) {

File: examples/src/main/java/io/grpc/examples/header/CustomHeaderServer.java
Patch:
@@ -34,15 +34,15 @@ public class CustomHeaderServer {
   private static final Logger logger = Logger.getLogger(CustomHeaderServer.class.getName());
 
   /* The port on which the server should run */
-  private static final int port = 50051;
+  private static final int PORT = 50051;
   private Server server;
 
   private void start() throws IOException {
-    server = ServerBuilder.forPort(port)
+    server = ServerBuilder.forPort(PORT)
         .addService(ServerInterceptors.intercept(new GreeterImpl(), new HeaderServerInterceptor()))
         .build()
         .start();
-    logger.info("Server started, listening on " + port);
+    logger.info("Server started, listening on " + PORT);
     Runtime.getRuntime().addShutdownHook(new Thread() {
       @Override
       public void run() {

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideUtil.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.net.URL;
+import java.nio.charset.Charset;
 import java.util.List;
 
 /**
@@ -57,7 +58,7 @@ public static URL getDefaultFeaturesFile() {
   public static List<Feature> parseFeatures(URL file) throws IOException {
     InputStream input = file.openStream();
     try {
-      Reader reader = new InputStreamReader(input);
+      Reader reader = new InputStreamReader(input, Charset.forName("UTF-8"));
       try {
         FeatureDatabase.Builder database = FeatureDatabase.newBuilder();
         JsonFormat.parser().merge(reader, database);

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -97,7 +97,7 @@
  * @param <ReqT> type of message sent one or more times to the server.
  * @param <RespT> type of message received one or more times from the server.
  */
-@DoNotMock("Use InProcessTransport and make a fake server instead")
+@DoNotMock("Use InProcessServerBuilder and make a test server instead")
 public abstract class ClientCall<ReqT, RespT> {
   /**
    * Callbacks for receiving metadata, response messages and completion status from the server.

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -29,6 +29,8 @@
  * its name.
  *
  * <p>The channel is intended to be fully-featured, high performance, and useful in testing.
+ *
+ * <p>For usage examples, see {@link InProcessServerBuilder}.
  */
 @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1783")
 public final class InProcessChannelBuilder extends

File: stub/src/main/java/io/grpc/stub/package-info.java
Patch:
@@ -22,7 +22,7 @@
  *
  * <p>In the most common case of gRPC over Protocol Buffers, stub classes are automatically
  * generated from service definition .proto files by the Protobuf compiler. See <a
- * href="http://www.grpc.io/docs/generatedcode/java.html">gRPC java Generated Code Guide</a>.
+ * href="https://grpc.io/docs/generatedcode/java.html">gRPC java Generated Code Guide</a>.
  *
  * <p>The server side stub classes are abstract classes with RPC methods for the server application
  * to implement/override. These classes internally use {@link io.grpc.stub.ServerCalls} to interact

File: okhttp/third_party/okhttp/java/io/grpc/okhttp/internal/framed/Http2.java
Patch:
@@ -620,7 +620,7 @@ public ContinuationSource(BufferedSource source) {
 
       long read = source.read(sink, Math.min(byteCount, left));
       if (read == -1) return -1;
-      left -= read;
+      left -= (int) read;
       return read;
     }
 

File: core/src/main/java/io/grpc/ServerProvider.java
Patch:
@@ -30,7 +30,7 @@
 @Internal
 public abstract class ServerProvider {
   private static final ServerProvider provider =
-      load(Thread.currentThread().getContextClassLoader());
+      load(ServerProvider.class.getClassLoader());
 
   @VisibleForTesting
   static final ServerProvider load(ClassLoader cl) {

File: core/src/main/java/io/grpc/InternalNotifyOnServerBuild.java
Patch:
@@ -21,7 +21,7 @@
  * {@link ServerBuilder} is that this method will be called on all registered services implementing
  * the interface after build() has been called and before the {@link Server} instance is returned.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/2222")
+@Internal
 public interface InternalNotifyOnServerBuild {
   /** Notifies the service that the server has been built. */
   void notifyOnBuild(Server server);

File: core/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -22,6 +22,7 @@
 import io.grpc.CallOptions;
 import io.grpc.Compressor;
 import io.grpc.Decompressor;
+import io.grpc.DecompressorRegistry;
 import io.grpc.Grpc;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
@@ -569,7 +570,7 @@ public Attributes getAttributes() {
       public void setCompressor(Compressor compressor) {}
 
       @Override
-      public void setDecompressor(Decompressor decompressor) {}
+      public void setDecompressorRegistry(DecompressorRegistry decompressorRegistry) {}
 
       @Override
       public void setMaxInboundMessageSize(int maxSize) {}

File: core/src/main/java/io/grpc/internal/NoopClientStream.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.grpc.Attributes;
 import io.grpc.Compressor;
-import io.grpc.Decompressor;
+import io.grpc.DecompressorRegistry;
 import io.grpc.Status;
 import java.io.InputStream;
 
@@ -68,7 +68,7 @@ public void setMessageCompression(boolean enable) {
   public void setCompressor(Compressor compressor) {}
 
   @Override
-  public void setDecompressor(Decompressor decompressor) {}
+  public void setDecompressorRegistry(DecompressorRegistry decompressorRegistry) {}
 
   @Override
   public void setMaxInboundMessageSize(int maxSize) {}

File: netty/src/main/java/io/grpc/netty/NettyHandlerSettings.java
Patch:
@@ -36,7 +36,7 @@ static void setAutoWindow(AbstractNettyHandler handler) {
     if (!enabled) {
       return;
     }
-    synchronized (InternalHandlerSettings.class) {
+    synchronized (NettyHandlerSettings.class) {
       handler.setAutoTuneFlowControl(autoFlowControlOn);
       if (handler instanceof NettyClientHandler) {
         clientHandler = handler;

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadWorker.java
Patch:
@@ -17,13 +17,13 @@
 package io.grpc.benchmarks.driver;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import io.grpc.Server;
 import io.grpc.Status;
 import io.grpc.benchmarks.proto.Control;
 import io.grpc.benchmarks.proto.Control.ClientArgs;
 import io.grpc.benchmarks.proto.Control.ServerArgs;
 import io.grpc.benchmarks.proto.Control.ServerArgs.ArgtypeCase;
 import io.grpc.benchmarks.proto.WorkerServiceGrpc;
-import io.grpc.internal.ServerImpl;
 import io.grpc.netty.NettyServerBuilder;
 import io.grpc.stub.StreamObserver;
 import io.netty.channel.nio.NioEventLoopGroup;
@@ -39,7 +39,7 @@ public class LoadWorker {
   private static final Logger log = Logger.getLogger(LoadWorker.class.getName());
 
   private final int serverPort;
-  private final ServerImpl driverServer;
+  private final Server driverServer;
 
   LoadWorker(int driverPort, int serverPort) throws Exception {
     this.serverPort = serverPort;

File: core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java
Patch:
@@ -31,6 +31,7 @@
 import io.grpc.HandlerRegistry;
 import io.grpc.Internal;
 import io.grpc.InternalNotifyOnServerBuild;
+import io.grpc.Server;
 import io.grpc.ServerBuilder;
 import io.grpc.ServerMethodDefinition;
 import io.grpc.ServerServiceDefinition;
@@ -155,7 +156,7 @@ protected T statsContextFactory(StatsContextFactory statsFactory) {
   }
 
   @Override
-  public ServerImpl build() {
+  public Server build() {
     ArrayList<ServerStreamTracer.Factory> tracerFactories =
         new ArrayList<ServerStreamTracer.Factory>();
     StatsContextFactory statsFactory =

File: interop-testing/src/test/java/io/grpc/testing/integration/CascadingTest.java
Patch:
@@ -29,6 +29,7 @@
 import io.grpc.Deadline;
 import io.grpc.ManagedChannel;
 import io.grpc.Metadata;
+import io.grpc.Server;
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
@@ -37,7 +38,6 @@
 import io.grpc.StatusRuntimeException;
 import io.grpc.inprocess.InProcessChannelBuilder;
 import io.grpc.inprocess.InProcessServerBuilder;
-import io.grpc.internal.ServerImpl;
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.integration.Messages.SimpleRequest;
@@ -67,7 +67,7 @@ public class CascadingTest {
   @Mock
   TestServiceGrpc.TestServiceImplBase service;
   private ManagedChannel channel;
-  private ServerImpl server;
+  private Server server;
   private CountDownLatch observedCancellations;
   private CountDownLatch receivedCancellations;
   private TestServiceGrpc.TestServiceBlockingStub blockingStub;

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/InteropTester.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/TesterActivity.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/TesterInstrumentation.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/TesterOkHttpChannelBuilder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: auth/src/main/java/io/grpc/auth/ClientAuthInterceptor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: auth/src/main/java/io/grpc/auth/GoogleAuthLibraryCallCredentials.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: auth/src/main/java/io/grpc/auth/MoreCallCredentials.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: auth/src/main/java/io/grpc/auth/package-info.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: auth/src/test/java/io/grpc/auth/ClientAuthInterceptorTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: auth/src/test/java/io/grpc/auth/GoogleAuthLibraryCallCredentialsTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/DecompressorRegistryBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/StatusBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/CallOptionsBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/FlowControlledMessagesPerSecondBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/HandlerRegistryBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/SingleThreadBlockingQpsBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/StreamingPingPongsPerSecondBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/StreamingResponseBandwidthBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/UnaryCallQpsBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/UnaryCallResponseBandwidthBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/internal/SerializingExecutorBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/internal/StatsTraceContextBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/netty/InboundHeadersBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/netty/MethodDescriptorBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/jmh/java/io/grpc/netty/OutboundHeadersBenchmark.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/ByteBufInputStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/ByteBufOutputMarshaller.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/SocketAddressValidator.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/Transport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/Utils.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadWorker.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AbstractConfigurationBuilder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/ClientConfiguration.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/Configuration.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/ServerConfiguration.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadClientTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadWorkerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: context/src/main/java/io/grpc/Context.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: context/src/main/java/io/grpc/Deadline.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: context/src/main/java/io/grpc/ThreadLocalContextStorage.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: context/src/test/java/io/grpc/ContextTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: context/src/test/java/io/grpc/DeadlineTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Attributes.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/BindableService.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/CallCredentials.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/CallOptions.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Channel.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ClientInterceptor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ClientInterceptors.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ClientStreamTracer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Codec.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Compressor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/CompressorRegistry.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ConnectivityState.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ConnectivityStateInfo.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Contexts.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Decompressor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/DecompressorRegistry.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Drainable.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/EquivalentAddressGroup.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ExperimentalApi.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ForwardingClientCall.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ForwardingClientCallListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ForwardingServerCall.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ForwardingServerCallListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Grpc.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/HandlerRegistry.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Internal.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/InternalDecompressorRegistry.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/InternalKnownTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/InternalMetadata.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/InternalMethodDescriptor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/InternalNotifyOnServerBuild.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/KnownLength.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ManagedChannel.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ManagedChannelProvider.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/NameResolverProvider.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/PartialForwardingServerCall.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/PartialForwardingServerCallListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/PickFirstBalancerFactory.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ResolvedServerInfo.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ResolvedServerInfoGroup.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/SecurityLevel.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Server.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerCall.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerCallHandler.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerInterceptor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerInterceptors.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerMethodDefinition.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerProvider.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerServiceDefinition.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerStreamTracer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServerTransportFilter.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/ServiceDescriptor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/StatusException.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/StatusRuntimeException.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/StreamTracer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/inprocess/InProcessServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/inprocess/InProcessServerBuilder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/inprocess/InProcessSocketAddress.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/inprocess/package-info.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/AbstractClientStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/AbstractReadableBuffer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/AbstractServerStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/AtomicBackoff.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/BackoffPolicy.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/CallCredentialsApplyingTransportFactory.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/CensusStatsModule.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/CensusTracingModule.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ChannelExecutor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ClientStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ClientStreamListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ClientTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ClientTransportFactory.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/CompositeReadableBuffer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ConnectionClientTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ConnectivityStateManager.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ContextRunnable.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/DelayedClientTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/DelayedStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/DnsNameResolver.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/DnsNameResolverProvider.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ExponentialBackoffPolicy.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/FailingClientStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/FailingClientTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ForwardingConnectionClientTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ForwardingReadableBuffer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/Framer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/Http2ClientStreamTransportState.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/Http2Ping.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/InUseStateAggregator.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/InternalHandlerRegistry.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/InternalServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/InternalSubchannel.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/IoUtils.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/KeepAliveManager.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/LogExceptionRunnable.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/LogId.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ManagedClientTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/MessageDeframer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/MessageFramer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/MetadataApplierImpl.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/MoreThrowables.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/NoopClientStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ObjectPool.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/OobChannel.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/PickSubchannelArgsImpl.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ReadableBuffer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ReadableBuffers.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/SerializeReentrantCallsDirectExecutor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/SerializingExecutor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ServerListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ServerStream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ServerStreamListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ServerTransport.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/ServerTransportListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/SharedResourceHolder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/SharedResourcePool.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/StatsTraceContext.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/Stream.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/StreamListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/SubchannelImpl.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/TransportFrameUtil.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/WithLogId.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/WritableBuffer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/WritableBufferAllocator.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/package-info.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/package-info.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/util/MutableHandlerRegistry.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/util/RoundRobinLoadBalancerFactory.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/util/package-info.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/AttributesTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/CallOptionsTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ClientInterceptorsTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ConnectivityStateInfoTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ContextsTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/DecompressorRegistryTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ForwardingServerCallListenerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/IntegerMarshaller.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ManagedChannelProviderTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/MetadataTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/MethodDescriptorTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/NameResolverProviderTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/PickFirstLoadBalancerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ReplacingClassLoader.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ServerInterceptorsTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ServerProviderTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ServerServiceDefinitionTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/ServiceDescriptorTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/StatusTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/StringMarshaller.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/inprocess/InProcessClientTransportFactoryTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/inprocess/InProcessServerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/inprocess/InProcessTransportTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/AbstractClientStreamTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/AbstractManagedChannelImplBuilderTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/AbstractReadableBufferTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/AtomicBackoffTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ByteWritableBufferTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/CallCredentialsApplyingTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/CensusModulesTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ChannelExecutorTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/CompositeReadableBufferTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ConnectivityStateManagerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/DelayedStreamTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/DnsNameResolverProviderTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/DnsNameResolverTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ExponentialBackoffPolicyTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/FakeClock.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/FakeClockTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ForwardingReadableBufferTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/GrpcUtilTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/Http2ClientStreamTransportStateTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/InternalSubchannelTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/IoUtilsTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/KeepAliveManagerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ManagedChannelImplGetNameResolverTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/MessageDeframerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/MessageFramerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/NoopClientStreamListener.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ReadableBufferTestBase.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ReadableBuffersArrayTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ReadableBuffersByteBufferTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/SerializeReentrantCallsDirectExecutorTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/SerializingExecutorTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/ServerImplTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/TestUtils.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/TransportFrameUtilTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/WritableBufferAllocatorTestBase.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/internal/WritableBufferTestBase.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/util/MutableHandlerRegistryTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/test/java/io/grpc/util/RoundRobinLoadBalancerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/android/helloworld/app/src/main/java/io/grpc/helloworldexample/HelloworldActivity.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/android/routeguide/app/src/main/java/io/grpc/routeguideexample/RouteGuideActivity.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/android/routeguide/app/src/main/java/io/grpc/routeguideexample/RouteGuideUtil.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/advanced/HelloJsonClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/advanced/HelloJsonServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/errorhandling/DetailErrorSample.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/errorhandling/ErrorHandlingClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/experimental/CompressingHelloWorldClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/header/CustomHeaderClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/header/CustomHeaderServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/header/HeaderClientInterceptor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/header/HeaderServerInterceptor.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideUtil.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/test/java/io/grpc/examples/header/HeaderClientInterceptorTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/test/java/io/grpc/examples/header/HeaderServerInterceptorTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/test/java/io/grpc/examples/helloworld/HelloWorldClientTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/test/java/io/grpc/examples/helloworld/HelloWorldServerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/test/java/io/grpc/examples/routeguide/RouteGuideClientTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/src/test/java/io/grpc/examples/routeguide/RouteGuideServerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/thrift/src/main/java/io/grpc/examples/thrift/helloworld/HelloWorldClient.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: examples/thrift/src/main/java/io/grpc/examples/thrift/helloworld/HelloWorldServer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: grpclb/src/main/java/io/grpc/grpclb/DropType.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbClientLoadRecorder.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbConstants.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancerFactory.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: grpclb/src/main/java/io/grpc/grpclb/LbAddressGroup.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: grpclb/src/main/java/io/grpc/grpclb/TimeProvider.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: interop-testing/src/main/java/io/grpc/testing/integration/Http2Client.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: core/src/main/java/io/grpc/internal/AbstractServerStream.java
Patch:
@@ -42,7 +42,7 @@
  * implement {@link #transportState()} and {@link #abstractServerStreamSink()}. Must only be called
  * from the sending application thread.
  */
-public abstract class AbstractServerStream extends AbstractStream2
+public abstract class AbstractServerStream extends AbstractStream
     implements ServerStream, MessageFramer.Sink {
   /**
    * A sink for outbound operations, separated from the stream simply to avoid name
@@ -184,7 +184,7 @@ public StatsTraceContext statsTraceContext() {
   }
 
   /** This should only called from the transport thread. */
-  protected abstract static class TransportState extends AbstractStream2.TransportState {
+  protected abstract static class TransportState extends AbstractStream.TransportState {
     /** Whether listener.closed() has been called. */
     private boolean listenerClosed;
     private ServerStreamListener listener;

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -45,7 +45,7 @@
  * The stream and stream state as used by the application. Must only be called from the sending
  * application thread.
  */
-public abstract class AbstractStream2 implements Stream {
+public abstract class AbstractStream implements Stream {
   /** The framer to use for sending messages. */
   protected abstract Framer framer();
 
@@ -252,10 +252,10 @@ protected void onStreamAllocated() {
 
     /**
      * Notify that the stream does not exist in a usable state any longer. This causes {@link
-     * AbstractStream2#isReady()} to return {@code false} from this point forward.
+     * AbstractStream#isReady()} to return {@code false} from this point forward.
      *
      * <p>This does not generally need to be called explicitly by the transport, as it is handled
-     * implicitly by {@link AbstractClientStream2} and {@link AbstractServerStream}.
+     * implicitly by {@link AbstractClientStream} and {@link AbstractServerStream}.
      */
     protected final void onStreamDeallocated() {
       synchronized (onReadyLock) {

File: core/src/main/java/io/grpc/internal/Http2ClientStreamTransportState.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * Base implementation for client streams using HTTP2 as the transport.
  */
-public abstract class Http2ClientStreamTransportState extends AbstractClientStream2.TransportState {
+public abstract class Http2ClientStreamTransportState extends AbstractClientStream.TransportState {
 
   /**
    * Metadata marshaller for HTTP status lines.

File: netty/src/main/java/io/grpc/netty/NettyClientStream.java
Patch:
@@ -43,7 +43,7 @@
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
-import io.grpc.internal.AbstractClientStream2;
+import io.grpc.internal.AbstractClientStream;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.Http2ClientStreamTransportState;
 import io.grpc.internal.StatsTraceContext;
@@ -61,7 +61,7 @@
  * Client stream for a Netty transport. Must only be called from the sending application
  * thread.
  */
-class NettyClientStream extends AbstractClientStream2 {
+class NettyClientStream extends AbstractClientStream {
   private static final InternalMethodDescriptor methodDescriptorAccessor =
       new InternalMethodDescriptor(InternalKnownTransport.NETTY);
 
@@ -115,7 +115,7 @@ private static boolean useGet(MethodDescriptor<?, ?> method) {
     return method.isSafe();
   }
 
-  private class Sink implements AbstractClientStream2.Sink {
+  private class Sink implements AbstractClientStream.Sink {
     @Override
     public void writeHeaders(Metadata headers, byte[] requestPayload) {
       // Convert the headers into Netty HTTP/2 headers.

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -39,7 +39,7 @@
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
-import io.grpc.internal.AbstractClientStream2;
+import io.grpc.internal.AbstractClientStream;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.Http2ClientStreamTransportState;
 import io.grpc.internal.StatsTraceContext;
@@ -55,7 +55,7 @@
 /**
  * Client stream for the okhttp transport.
  */
-class OkHttpClientStream extends AbstractClientStream2 {
+class OkHttpClientStream extends AbstractClientStream {
 
   private static final int WINDOW_UPDATE_THRESHOLD = Utils.DEFAULT_WINDOW_SIZE / 2;
 
@@ -124,7 +124,7 @@ public Attributes getAttributes() {
     return Attributes.EMPTY;
   }
 
-  class Sink implements AbstractClientStream2.Sink {
+  class Sink implements AbstractClientStream.Sink {
     @Override
     public void writeHeaders(Metadata metadata, byte[] payload) {
       String defaultPath = "/" + method.getFullMethodName();

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -69,7 +69,7 @@
 import io.grpc.Status;
 import io.grpc.Status.Code;
 import io.grpc.StatusException;
-import io.grpc.internal.AbstractStream2;
+import io.grpc.internal.AbstractStream;
 import io.grpc.internal.ClientStreamListener;
 import io.grpc.internal.ClientTransport;
 import io.grpc.internal.GrpcUtil;
@@ -1129,7 +1129,7 @@ public void notifyOnReady() throws Exception {
     initTransport();
     // exactly one byte below the threshold
     int messageLength =
-        AbstractStream2.TransportState.DEFAULT_ONREADY_THRESHOLD - HEADER_LENGTH - 1;
+        AbstractStream.TransportState.DEFAULT_ONREADY_THRESHOLD - HEADER_LENGTH - 1;
     setInitialWindowSize(0);
     MockStreamListener listener = new MockStreamListener();
     OkHttpClientStream stream = clientTransport.newStream(method, new Metadata());

File: core/src/test/java/io/grpc/MetadataTest.java
Patch:
@@ -153,7 +153,7 @@ public void testWriteParsed() {
     assertFalse(fishes.hasNext());
     byte[][] serialized = metadata.serialize();
     assertEquals(2, serialized.length);
-    assertEquals(new String(serialized[0], US_ASCII), "test-bin");
+    assertEquals("test-bin", new String(serialized[0], US_ASCII));
     assertArrayEquals(LANCE_BYTES, serialized[1]);
     assertEquals(lance, metadata.get(KEY));
     assertEquals(serialized[0], metadata.serialize()[0]);

File: interop-testing/src/test/java/io/grpc/testing/integration/ProxyTest.java
Patch:
@@ -144,7 +144,7 @@ public void smallBandwidth()
     int serverPort = server.init();
     server.setMode("stream");
     executor.execute(server);
-    assertEquals(server.mode(), "stream");
+    assertEquals("stream", server.mode());
 
     int bandwidth = 64 * 1024;
     proxy = new TrafficControlProxy(serverPort, bandwidth, 200, TimeUnit.MILLISECONDS);
@@ -170,7 +170,7 @@ public void largeBandwidth()
     int serverPort = server.init();
     server.setMode("stream");
     executor.execute(server);
-    assertEquals(server.mode(), "stream");
+    assertEquals("stream", server.mode());
     int bandwidth = 10 * 1024 * 1024;
     proxy = new TrafficControlProxy(serverPort, bandwidth, 200, TimeUnit.MILLISECONDS);
     startProxy(proxy).get();

File: benchmarks/src/jmh/java/io/grpc/netty/InboundHeadersBenchmark.java
Patch:
@@ -35,8 +35,8 @@
 import static io.grpc.netty.Utils.TE_TRAILERS;
 import static io.netty.util.AsciiString.of;
 
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2RequestHeaders;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2ResponseHeaders;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2RequestHeaders;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2ResponseHeaders;
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
 import io.netty.handler.codec.http2.Http2Headers;
 import io.netty.util.AsciiString;

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -46,7 +46,7 @@
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.Http2Ping;
 import io.grpc.internal.KeepAliveManager;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2ClientHeadersDecoder;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2ClientHeadersDecoder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;
@@ -56,6 +56,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPromise;
 import io.netty.handler.codec.http2.DefaultHttp2Connection;
+import io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder;
 import io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
 import io.netty.handler.codec.http2.DefaultHttp2FrameReader;
 import io.netty.handler.codec.http2.DefaultHttp2FrameWriter;
@@ -149,8 +150,7 @@ static NettyClientHandler newHandler(Http2Connection connection, Http2FrameReade
     connection.local().flowController(
         new DefaultHttp2LocalFlowController(connection, DEFAULT_WINDOW_UPDATE_RATIO, true));
 
-    // TODO(ejona): swap back to DefaultHttp2Connection with Netty-4.1.9
-    Http2ConnectionDecoder decoder = new FixedHttp2ConnectionDecoder(connection, encoder,
+    Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(connection, encoder,
         frameReader);
 
     Http2Settings settings = new Http2Settings();

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -55,7 +55,7 @@
 import io.grpc.internal.LogExceptionRunnable;
 import io.grpc.internal.ServerTransportListener;
 import io.grpc.internal.StatsTraceContext;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2ServerHeadersDecoder;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2ServerHeadersDecoder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.channel.ChannelFuture;
@@ -64,6 +64,7 @@
 import io.netty.channel.ChannelPromise;
 import io.netty.handler.codec.http2.DecoratingHttp2FrameWriter;
 import io.netty.handler.codec.http2.DefaultHttp2Connection;
+import io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder;
 import io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
 import io.netty.handler.codec.http2.DefaultHttp2FrameReader;
 import io.netty.handler.codec.http2.DefaultHttp2FrameWriter;
@@ -188,8 +189,7 @@ static NettyServerHandler newHandler(
 
     frameWriter = new WriteMonitoringFrameWriter(frameWriter, keepAliveEnforcer);
     Http2ConnectionEncoder encoder = new DefaultHttp2ConnectionEncoder(connection, frameWriter);
-    // TODO(ejona): swap back to DefaultHttp2Connection with Netty-4.1.9
-    Http2ConnectionDecoder decoder = new FixedHttp2ConnectionDecoder(connection, encoder,
+    Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(connection, encoder,
         frameReader);
 
     Http2Settings settings = new Http2Settings();

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -44,7 +44,7 @@
 import io.grpc.Status;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.SharedResourceHolder.Resource;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2InboundHeaders;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2InboundHeaders;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.handler.codec.http2.Http2Exception;

File: netty/src/test/java/io/grpc/netty/GrpcHttp2InboundHeadersTest.java
Patch:
@@ -37,9 +37,9 @@
 import static org.junit.Assert.assertEquals;
 
 import com.google.common.io.BaseEncoding;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2InboundHeaders;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2RequestHeaders;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2ResponseHeaders;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2InboundHeaders;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2RequestHeaders;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2ResponseHeaders;
 import io.netty.handler.codec.http2.Http2Headers;
 import io.netty.util.AsciiString;
 import java.util.Random;

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -70,7 +70,7 @@
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.KeepAliveManager;
 import io.grpc.internal.StatsTraceContext;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2ClientHeadersDecoder;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2ClientHeadersDecoder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;

File: netty/src/test/java/io/grpc/netty/NettyHandlerTestBase.java
Patch:
@@ -62,6 +62,7 @@
 import io.netty.handler.codec.http2.Http2FrameReader;
 import io.netty.handler.codec.http2.Http2FrameWriter;
 import io.netty.handler.codec.http2.Http2Headers;
+import io.netty.handler.codec.http2.Http2HeadersDecoder;
 import io.netty.handler.codec.http2.Http2LocalFlowController;
 import io.netty.handler.codec.http2.Http2Settings;
 import io.netty.handler.codec.http2.Http2Stream;
@@ -101,7 +102,7 @@ protected void manualSetUp() throws Exception {}
   /**
    * Must be called by subclasses to initialize the handler and channel.
    */
-  protected final void initChannel(GrpcHttp2HeadersDecoder headersDecoder) throws Exception {
+  protected final void initChannel(Http2HeadersDecoder headersDecoder) throws Exception {
     content = Unpooled.copiedBuffer("hello world", UTF_8);
     frameWriter = spy(new DefaultHttp2FrameWriter());
     frameReader = new DefaultHttp2FrameReader(headersDecoder);

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -79,7 +79,7 @@
 import io.grpc.internal.ServerStreamListener;
 import io.grpc.internal.ServerTransportListener;
 import io.grpc.internal.StatsTraceContext;
-import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2ServerHeadersDecoder;
+import io.grpc.netty.GrpcHttp2HeadersUtils.GrpcHttp2ServerHeadersDecoder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;

File: protobuf-lite/src/main/java/io/grpc/protobuf/lite/ProtoLiteUtils.java
Patch:
@@ -70,7 +70,7 @@ public class ProtoLiteUtils {
    * {@link #setExtensionRegistry}, but not to modify the underlying object.
    *
    * <p>If you need custom parsing behavior for protos, you will need to make your own
-   * {@code MethodDescriptor.Marhsaller} for the time being.
+   * {@code MethodDescriptor.Marshaller} for the time being.
    *
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1787")

File: core/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -44,7 +44,7 @@ public abstract class ManagedChannelBuilder<T extends ManagedChannelBuilder<T>>
   /**
    * Creates a channel with the target's address and port number.
    *
-   * @see #forTarget()
+   * @see #forTarget(String)
    */
   public static ManagedChannelBuilder<?> forAddress(String name, int port) {
     return ManagedChannelProvider.provider().builderForAddress(name, port);

File: core/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -84,7 +84,7 @@ public abstract class NameResolver {
   public void refresh() {}
 
   /**
-   * Factory that creates {@link #NameResolver} instances.
+   * Factory that creates {@link NameResolver} instances.
    */
   public abstract static class Factory {
     /**

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -230,7 +230,7 @@ public int value() {
     }
 
     /**
-     * Returns a {@link #Status} object corresponding to this status code.
+     * Returns a {@link Status} object corresponding to this status code.
      */
     public Status toStatus() {
       return STATUS_LIST.get(value);

File: core/src/main/java/io/grpc/StatusException.java
Patch:
@@ -58,7 +58,7 @@ public StatusException(Status status, @Nullable Metadata trailers) {
   }
 
   /**
-   * Returns the status code as a {@link #Status} object.
+   * Returns the status code as a {@link Status} object.
    */
   public final Status getStatus() {
     return status;

File: core/src/main/java/io/grpc/StatusRuntimeException.java
Patch:
@@ -59,7 +59,7 @@ public StatusRuntimeException(Status status, @Nullable Metadata trailers) {
   }
 
   /**
-   * Returns the status code as a {@link #Status} object.
+   * Returns the status code as a {@link Status} object.
    */
   public final Status getStatus() {
     return status;

File: core/src/main/java/io/grpc/Attributes.java
Patch:
@@ -155,6 +155,9 @@ public int hashCode() {
     return data.hashCode();
   }
 
+  /**
+   * The helper class to build an Attributes instance.
+   */
   public static final class Builder {
     private Attributes product;
 

File: core/src/main/java/io/grpc/CallOptions.java
Patch:
@@ -269,6 +269,9 @@ public List<ClientStreamTracer.Factory> getStreamTracerFactories() {
     return streamTracerFactories;
   }
 
+  /**
+   * Key for a key-value pair. Uses reference equality.
+   */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1869")
   public static final class Key<T> {
     private final String name;

File: core/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -509,6 +509,9 @@ public abstract static class Subchannel {
     public abstract Attributes getAttributes();
   }
 
+  /**
+   * Factory to create {@link LoadBalancer} instance.
+   */
   @ThreadSafe
   public abstract static class Factory {
     /**

File: core/src/main/java/io/grpc/ManagedChannelProvider.java
Patch:
@@ -140,6 +140,9 @@ private static ClassLoader getCorrectClassLoader() {
     return Thread.currentThread().getContextClassLoader();
   }
 
+  /**
+   * Returns whether current platform is Android.
+   */
   protected static boolean isAndroid() {
     try {
       Class.forName("android.app.Application", /*initialize=*/ false, null);

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -516,7 +516,7 @@ public interface BinaryMarshaller<T> {
   }
 
   /**
-   * Marshaller for metadata values that are serialized into ASCII strings that contain only
+   * Marshaller for metadata values that are serialized into ASCII strings. The strings contain only
    * following characters:
    *
    * <ul>

File: core/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -83,6 +83,9 @@ public abstract class NameResolver {
    */
   public void refresh() {}
 
+  /**
+   * Factory that creates {@link #NameResolver} instances.
+   */
   public abstract static class Factory {
     /**
      * The port number used in case the target or the underlying naming system doesn't provide a

File: core/src/main/java/io/grpc/PickFirstBalancerFactory.java
Patch:
@@ -55,6 +55,9 @@ public final class PickFirstBalancerFactory extends LoadBalancer.Factory {
   private PickFirstBalancerFactory() {
   }
 
+  /**
+   * Gets an instance of this factory.
+   */
   public static PickFirstBalancerFactory getInstance() {
     return INSTANCE;
   }

File: core/src/main/java/io/grpc/ResolvedServerInfoGroup.java
Patch:
@@ -151,6 +151,7 @@ public String toString() {
   /**
    * Builder for a {@link ResolvedServerInfo}.
    */
+  @Deprecated
   public static final class Builder {
     private final List<ResolvedServerInfo> group = new ArrayList<ResolvedServerInfo>();
     private final Attributes attributes;

File: core/src/main/java/io/grpc/ServerServiceDefinition.java
Patch:
@@ -70,6 +70,9 @@ public ServiceDescriptor getServiceDescriptor() {
     return serviceDescriptor;
   }
 
+  /**
+   * Gets all the methods of service.
+   */
   public Collection<ServerMethodDefinition<?, ?>> getMethods() {
     return methods.values();
   }

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -229,6 +229,9 @@ public int value() {
       return value;
     }
 
+    /**
+     * Returns a {@link #Status} object corresponding to this status code.
+     */
     public Status toStatus() {
       return STATUS_LIST.get(value);
     }

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -80,11 +80,13 @@ public InProcessChannelBuilder usePlaintext(boolean skipNegotiation) {
   }
 
   @Override
+  @Internal
   protected ClientTransportFactory buildTransportFactory() {
     return new InProcessClientTransportFactory(name);
   }
 
   @Override
+  @Internal
   protected boolean recordsStats() {
     // TODO(zhangkun83): InProcessTransport by-passes framer and deframer, thus message sizses are
     // not counted.  Therefore, we disable stats for now.

File: core/src/main/java/io/grpc/util/RoundRobinLoadBalancerFactory.java
Patch:
@@ -75,6 +75,9 @@ public class RoundRobinLoadBalancerFactory extends LoadBalancer.Factory {
   private RoundRobinLoadBalancerFactory() {
   }
 
+  /**
+   * Gets the singleton instance of this factory.
+   */
   public static RoundRobinLoadBalancerFactory getInstance() {
     return INSTANCE;
   }

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -43,6 +43,7 @@
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import io.grpc.Attributes;
 import io.grpc.ExperimentalApi;
+import io.grpc.Internal;
 import io.grpc.NameResolver;
 import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AtomicBackoff;
@@ -331,6 +332,7 @@ public NettyChannelBuilder keepAliveWithoutCalls(boolean enable) {
 
   @Override
   @CheckReturnValue
+  @Internal
   protected ClientTransportFactory buildTransportFactory() {
     return new NettyTransportFactory(dynamicParamsFactory, channelType, channelOptions,
         negotiationType, sslContext, eventLoopGroup, flowControlWindow, maxInboundMessageSize(),
@@ -412,6 +414,7 @@ interface OverrideAuthorityChecker {
 
   @Override
   @CheckReturnValue
+  @Internal
   protected String checkAuthority(String authority) {
     if (authorityChecker != null) {
       return authorityChecker.checkAuthority(authority);

File: netty/third_party/netty/java/io/grpc/netty/FixedHttp2ConnectionDecoder.java
Patch:
@@ -49,7 +49,7 @@
  * {@link Http2LocalFlowController}
  */
 @UnstableApi
-public class FixedHttp2ConnectionDecoder implements Http2ConnectionDecoder {
+class FixedHttp2ConnectionDecoder implements Http2ConnectionDecoder {
     private static final InternalLogger logger = InternalLoggerFactory.getInstance(FixedHttp2ConnectionDecoder.class);
     private Http2FrameListener internalFrameListener = new PrefaceFrameListener();
     private final Http2Connection connection;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -289,6 +289,7 @@ public final OkHttpChannelBuilder usePlaintext(boolean skipNegotiation) {
   }
 
   @Override
+  @Internal
   protected final ClientTransportFactory buildTransportFactory() {
     boolean enableKeepAlive = keepAliveTimeNanos != KEEPALIVE_TIME_NANOS_DISABLED;
     return new OkHttpTransportFactory(transportExecutor,

File: protobuf/src/main/java/io/grpc/protobuf/ProtoFileDescriptorSupplier.java
Patch:
@@ -37,5 +37,8 @@
  * Provides access to the underlying proto file descriptor.
  */
 public interface ProtoFileDescriptorSupplier {
+  /**
+   * Returns file descriptor to the underlying proto file.
+   */
   FileDescriptor getFileDescriptor();
 }

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -42,6 +42,7 @@
 import com.google.instrumentation.trace.Tracing;
 import io.grpc.Attributes;
 import io.grpc.ClientInterceptor;
+import io.grpc.ClientStreamTracer;
 import io.grpc.CompressorRegistry;
 import io.grpc.DecompressorRegistry;
 import io.grpc.EquivalentAddressGroup;

File: core/src/main/java/io/grpc/internal/Http2ClientStreamTransportState.java
Patch:
@@ -57,7 +57,7 @@ public byte[] toAsciiString(Integer value) {
         /**
          * RFC 7231 says status codes are 3 digits long.
          *
-         * @see: <a href="https://tools.ietf.org/html/rfc7231#section-6">RFC 7231</a>
+         * @see <a href="https://tools.ietf.org/html/rfc7231#section-6">RFC 7231</a>
          */
         @Override
         public Integer parseAsciiString(byte[] serialized) {

File: core/src/main/java/io/grpc/internal/InternalSubchannel.java
Patch:
@@ -60,8 +60,6 @@
 
 /**
  * Transports for a single {@link SocketAddress}.
- *
- * <p>This is the next version of {@link TransportSet} in development.
  */
 @ThreadSafe
 final class InternalSubchannel implements WithLogId {

File: core/src/main/java/io/grpc/internal/MoreThrowables.java
Patch:
@@ -33,7 +33,7 @@
 
 import com.google.common.base.Preconditions;
 
-/** Utility functions when interacting with {@link Throwables}. */
+/** Utility functions when interacting with {@link Throwable}s. */
 // TODO(ejona): Delete this once we've upgraded to Guava 20 or later.
 final class MoreThrowables {
   /**

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -112,10 +112,10 @@ public final class ServerImpl extends io.grpc.Server implements WithLogId {
   /**
    * Construct a server.
    *
+   * @param executorPool provides an executor to call methods on behalf of remote clients
    * @param registry the primary method registry
    * @param fallbackRegistry the secondary method registry, used only if the primary registry
    *        doesn't have the method
-   * @param executor to call methods on behalf of remote clients
    */
   ServerImpl(ObjectPool<? extends Executor> executorPool,
       ObjectPool<ScheduledExecutorService> timeoutServicePool,

File: core/src/main/java/io/grpc/internal/WithLogId.java
Patch:
@@ -37,8 +37,7 @@
 public interface WithLogId {
   /**
    * Returns an ID that is primarily used in debug logs. It usually contains the class name and a
-   * numeric ID that is unique among the instances. {@link GrpcUtil#getLogId} is a canonical
-   * implementation.
+   * numeric ID that is unique among the instances.
    *
    * <p>The subclasses of this interface usually want to include the log ID in their {@link
    * #toString} results.

File: netty/src/main/java/io/grpc/netty/StreamIdHolder.java
Patch:
@@ -34,7 +34,7 @@
 /** Container for stream ids. */
 interface StreamIdHolder {
   /**
-   * Returns the id or {@link io.grpc.internal.AbstractStream#ABSENT_ID}.
+   * Returns the id.
    */
   int id();
 }

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -175,7 +175,7 @@ class TransportState extends Http2ClientStreamTransportState {
     @GuardedBy("lock")
     private List<Header> requestHeaders;
     /**
-     * Null iff {@link #requestHeaders} is null.  Non-null iff neither {@link #sendCancel} nor
+     * Null iff {@link #requestHeaders} is null.  Non-null iff neither {@link #cancel} nor
      * {@link #start(int)} have been called.
      */
     @GuardedBy("lock")

File: interop-testing/src/test/java/io/grpc/testing/integration/AutoWindowSizingOnTest.java
Patch:
@@ -32,7 +32,6 @@
 package io.grpc.testing.integration;
 
 import io.grpc.ManagedChannel;
-import io.grpc.internal.GrpcUtil;
 import io.grpc.netty.HandlerSettings;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
@@ -47,7 +46,6 @@ public class AutoWindowSizingOnTest extends AbstractInteropTest {
 
   @BeforeClass
   public static void turnOnAutoWindow() {
-    GrpcUtil.enableCensusStats = true;
     HandlerSettings.enable(true);
     HandlerSettings.autoWindowOn(true);
     startStaticServer(

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java
Patch:
@@ -32,7 +32,6 @@
 package io.grpc.testing.integration;
 
 import io.grpc.ManagedChannel;
-import io.grpc.internal.GrpcUtil;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.netty.NettyServerBuilder;
@@ -53,7 +52,6 @@ public class Http2NettyLocalChannelTest extends AbstractInteropTest {
   /** Start server. */
   @BeforeClass
   public static void startServer() {
-    GrpcUtil.enableCensusStats = true;
     startStaticServer(
         NettyServerBuilder
             .forAddress(new LocalAddress("in-process-1"))

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java
Patch:
@@ -32,7 +32,6 @@
 package io.grpc.testing.integration;
 
 import io.grpc.ManagedChannel;
-import io.grpc.internal.GrpcUtil;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.netty.NettyServerBuilder;
@@ -56,7 +55,6 @@ public class Http2NettyTest extends AbstractInteropTest {
   /** Starts the server with HTTPS. */
   @BeforeClass
   public static void startServer() {
-    GrpcUtil.enableCensusStats = true;
     try {
       startStaticServer(NettyServerBuilder.forPort(0)
           .flowControlWindow(65 * 1024)

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -70,7 +70,6 @@ public class Http2OkHttpTest extends AbstractInteropTest {
   /** Starts the server with HTTPS. */
   @BeforeClass
   public static void startServer() throws Exception {
-    GrpcUtil.enableCensusStats = true;
     try {
       SslProvider sslProvider = SslContext.defaultServerProvider();
       if (sslProvider == SslProvider.OPENSSL && !OpenSsl.isAlpnSupported()) {

File: interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java
Patch:
@@ -95,7 +95,6 @@ public void beforeTests() {
   /** Start server. */
   @BeforeClass
   public static void startServer() {
-    GrpcUtil.enableCensusStats = true;
     compressors.register(FZIPPER);
     compressors.register(Codec.Identity.NONE);
     startStaticServer(

File: interop-testing/src/test/java/io/grpc/testing/integration/AutoWindowSizingOnTest.java
Patch:
@@ -32,6 +32,7 @@
 package io.grpc.testing.integration;
 
 import io.grpc.ManagedChannel;
+import io.grpc.internal.GrpcUtil;
 import io.grpc.netty.HandlerSettings;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
@@ -46,6 +47,7 @@ public class AutoWindowSizingOnTest extends AbstractInteropTest {
 
   @BeforeClass
   public static void turnOnAutoWindow() {
+    GrpcUtil.enableCensusStats = true;
     HandlerSettings.enable(true);
     HandlerSettings.autoWindowOn(true);
     startStaticServer(

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java
Patch:
@@ -32,6 +32,7 @@
 package io.grpc.testing.integration;
 
 import io.grpc.ManagedChannel;
+import io.grpc.internal.GrpcUtil;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.netty.NettyServerBuilder;
@@ -52,6 +53,7 @@ public class Http2NettyLocalChannelTest extends AbstractInteropTest {
   /** Start server. */
   @BeforeClass
   public static void startServer() {
+    GrpcUtil.enableCensusStats = true;
     startStaticServer(
         NettyServerBuilder
             .forAddress(new LocalAddress("in-process-1"))

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java
Patch:
@@ -32,6 +32,7 @@
 package io.grpc.testing.integration;
 
 import io.grpc.ManagedChannel;
+import io.grpc.internal.GrpcUtil;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.netty.NettyServerBuilder;
@@ -55,6 +56,7 @@ public class Http2NettyTest extends AbstractInteropTest {
   /** Starts the server with HTTPS. */
   @BeforeClass
   public static void startServer() {
+    GrpcUtil.enableCensusStats = true;
     try {
       startStaticServer(NettyServerBuilder.forPort(0)
           .flowControlWindow(65 * 1024)

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -70,6 +70,7 @@ public class Http2OkHttpTest extends AbstractInteropTest {
   /** Starts the server with HTTPS. */
   @BeforeClass
   public static void startServer() throws Exception {
+    GrpcUtil.enableCensusStats = true;
     try {
       SslProvider sslProvider = SslContext.defaultServerProvider();
       if (sslProvider == SslProvider.OPENSSL && !OpenSsl.isAlpnSupported()) {

File: interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java
Patch:
@@ -95,6 +95,7 @@ public void beforeTests() {
   /** Start server. */
   @BeforeClass
   public static void startServer() {
+    GrpcUtil.enableCensusStats = true;
     compressors.register(FZIPPER);
     compressors.register(Codec.Identity.NONE);
     startStaticServer(

File: testing/src/main/java/io/grpc/internal/testing/StatsTestUtils.java
Patch:
@@ -136,7 +136,7 @@ public MetricsRecord pollRecord(long timeout, TimeUnit unit) throws InterruptedE
     }
 
     @Override
-    public StatsContext deserialize(InputStream buffer) {
+    public StatsContext deserialize(InputStream buffer) throws IOException {
       String serializedString;
       try {
         serializedString = new String(IoUtils.toByteArray(buffer), UTF_8);
@@ -149,7 +149,7 @@ public StatsContext deserialize(InputStream buffer) {
       } else if (serializedString.startsWith(NO_EXTRA_TAG_HEADER_VALUE_PREFIX)) {
         return getDefault();
       } else {
-        return null;
+        throw new IOException("Malformed value");
       }
     }
 

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -190,7 +190,7 @@ public void exceptionInOnMessageTakesPrecedenceOverServer() {
     streamListener.headersRead(new Metadata());
 
     RuntimeException failure = new RuntimeException("bad");
-    doThrow(failure).when(callListener).onMessage(any(Void.class));
+    doThrow(failure).when(callListener).onMessage(Matchers.<Void>any());
 
     /*
      * In unary calls, the server closes the call right after responding, so the onClose call is

File: testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java
Patch:
@@ -473,7 +473,7 @@ public void ping() throws Exception {
       // Transport doesn't support ping, so this neither passes nor fails.
       assumeTrue(false);
     }
-    verify(mockPingCallback, timeout(TIMEOUT_MS)).onSuccess(Matchers.anyInt());
+    verify(mockPingCallback, timeout(TIMEOUT_MS)).onSuccess(Matchers.anyLong());
     verify(mockClientTransportListener, never()).transportInUse(anyBoolean());
   }
 
@@ -494,7 +494,7 @@ public void ping_duringShutdown() throws Exception {
       // Transport doesn't support ping, so this neither passes nor fails.
       assumeTrue(false);
     }
-    verify(mockPingCallback, timeout(TIMEOUT_MS)).onSuccess(Matchers.anyInt());
+    verify(mockPingCallback, timeout(TIMEOUT_MS)).onSuccess(Matchers.anyLong());
     stream.cancel(Status.CANCELLED);
   }
 

File: core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java
Patch:
@@ -187,8 +187,7 @@ public ServerImpl build() {
         firstNonNull(fallbackRegistry, EMPTY_FALLBACK_REGISTRY), transportServer,
         Context.ROOT, firstNonNull(decompressorRegistry, DecompressorRegistry.getDefaultInstance()),
         firstNonNull(compressorRegistry, CompressorRegistry.getDefaultInstance()),
-        transportFilters,
-        GrpcUtil.STOPWATCH_SUPPLIER);
+        transportFilters);
     for (InternalNotifyOnServerBuild notifyTarget : notifyOnBuildList) {
       notifyTarget.notifyOnBuild(server);
     }

File: core/src/main/java/io/grpc/internal/CensusStreamTracerModule.java
Patch:
@@ -132,7 +132,7 @@ ClientCallTracer newClientCallTracer(StatsContext parentCtx, String fullMethodNa
    * Returns the server tracer factory.
    */
   ServerStreamTracer.Factory getServerTracerFactory() {
-    return new ServerTracerFactory();
+    return serverTracerFactory;
   }
 
   /**

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -659,7 +659,7 @@ public ManagedChannel createOobChannel(EquivalentAddressGroup addressGroup, Stri
           "scheduledExecutor is already cleared. Looks like you are calling this method after "
           + "you've already shut down");
       final OobChannel oobChannel = new OobChannel(
-          authority, oobExecutorPool, scheduledExecutorCopy, stopwatchSupplier, channelExecutor);
+          authority, oobExecutorPool, scheduledExecutorCopy, channelExecutor);
       final InternalSubchannel internalSubchannel = new InternalSubchannel(
           addressGroup, authority, userAgent, backoffPolicyProvider, transportFactory,
           scheduledExecutorCopy, stopwatchSupplier, channelExecutor,

File: core/src/main/java/io/grpc/internal/MessageFramer.java
Patch:
@@ -178,7 +178,7 @@ private int writeUncompressed(InputStream message, int messageLength) throws IOE
     return written;
   }
 
-  private int writeCompressed(InputStream message, int messageLength) throws IOException {
+  private int writeCompressed(InputStream message, int unusedMessageLength) throws IOException {
     BufferChainOutputStream bufferChain = new BufferChainOutputStream();
 
     OutputStream compressingStream = compressor.compress(bufferChain);

File: core/src/test/java/io/grpc/internal/CensusStreamTracerModuleTest.java
Patch:
@@ -266,7 +266,7 @@ public void tagPropagation() {
     ClientCallTracer callTracer = census.newClientCallTracer(clientCtx, methodName);
     Metadata headers = new Metadata();
     // This propagates clientCtx to headers
-    ClientStreamTracer clientTracer = callTracer.newClientStreamTracer(headers);
+    callTracer.newClientStreamTracer(headers);
 
     ServerStreamTracer serverTracer =
         census.getServerTracerFactory().newServerStreamTracer(methodName, headers);

File: core/src/test/java/io/grpc/internal/MessageFramerTest.java
Patch:
@@ -43,7 +43,6 @@
 
 import io.grpc.Codec;
 import io.grpc.StreamTracer;
-import io.grpc.internal.testing.StatsTestUtils.FakeStatsContextFactory;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.nio.ByteBuffer;
@@ -77,14 +76,12 @@ public class MessageFramerTest {
   private ArgumentCaptor<Long> uncompressedSizeCaptor;
   private BytesWritableBufferAllocator allocator =
       new BytesWritableBufferAllocator(1000, 1000);
-  private FakeStatsContextFactory statsCtxFactory;
   private StatsTraceContext statsTraceCtx;
 
   /** Set up for test. */
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
-    statsCtxFactory = new FakeStatsContextFactory();
     // MessageDeframerTest tests with a client-side StatsTraceContext, so here we test with a
     // server-side StatsTraceContext.
     statsTraceCtx = new StatsTraceContext(new StreamTracer[]{tracer});

File: core/src/test/java/io/grpc/internal/ServerImplTest.java
Patch:
@@ -1033,8 +1033,7 @@ private void createAndStartServer(List<ServerTransportFilter> filters) throws IO
   private void createServer(List<ServerTransportFilter> filters) {
     assertNull(server);
     server = new ServerImpl(executorPool, timerPool, registry, fallbackRegistry,
-        transportServer, SERVER_CONTEXT, decompressorRegistry, compressorRegistry, filters,
-        GrpcUtil.STOPWATCH_SUPPLIER);
+        transportServer, SERVER_CONTEXT, decompressorRegistry, compressorRegistry, filters);
   }
 
   private void verifyExecutorsAcquired() {

File: core/src/test/java/io/grpc/internal/CensusStreamTracerModuleTest.java
Patch:
@@ -234,8 +234,6 @@ public void clientBasicStats() {
         record.getMetricAsLongOrFail(RpcConstants.RPC_CLIENT_UNCOMPRESSED_RESPONSE_BYTES));
     assertEquals(30 + 100 + 16 + 24,
         record.getMetricAsLongOrFail(RpcConstants.RPC_CLIENT_ROUNDTRIP_LATENCY));
-    assertEquals(100 + 16 + 24,
-        record.getMetricAsLongOrFail(RpcConstants.RPC_CLIENT_SERVER_ELAPSED_TIME));
   }
 
   @Test

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -1616,7 +1616,6 @@ private static void checkCensusMetrics(MetricsRecord record, boolean server,
       assertEquals(uncompressedResponsesSize,
           record.getMetricAsLongOrFail(RpcConstants.RPC_CLIENT_UNCOMPRESSED_RESPONSE_BYTES));
       assertNotNull(record.getMetric(RpcConstants.RPC_CLIENT_ROUNDTRIP_LATENCY));
-      assertNotNull(record.getMetric(RpcConstants.RPC_CLIENT_SERVER_ELAPSED_TIME));
       // It's impossible to get the expected wire sizes because it may be compressed, so we just
       // check if they are recorded.
       assertNotNull(record.getMetric(RpcConstants.RPC_CLIENT_REQUEST_BYTES));

File: core/src/main/java/io/grpc/internal/AbstractClientStream.java
Patch:
@@ -51,6 +51,7 @@ public abstract class AbstractClientStream extends AbstractStream
 
   private static final Logger log = Logger.getLogger(AbstractClientStream.class.getName());
 
+  private final StatsTraceContext statsTraceCtx;
   private ClientStreamListener listener;
   private boolean listenerClosed;
 
@@ -64,6 +65,7 @@ public abstract class AbstractClientStream extends AbstractStream
   protected AbstractClientStream(WritableBufferAllocator bufferAllocator, int maxMessageSize,
       StatsTraceContext statsTraceCtx) {
     super(bufferAllocator, maxMessageSize, statsTraceCtx);
+    this.statsTraceCtx = checkNotNull(statsTraceCtx, "statsTraceCtx");
   }
 
   @Override
@@ -273,6 +275,7 @@ private void closeListener(Status newStatus, Metadata trailers) {
     if (!listenerClosed) {
       listenerClosed = true;
       closeDeframer();
+      statsTraceCtx.streamClosed(newStatus);
       listener.closed(newStatus, trailers);
     }
   }

File: core/src/main/java/io/grpc/internal/AbstractClientStream2.java
Patch:
@@ -184,6 +184,7 @@ public final boolean isReady() {
   /** This should only called from the transport thread. */
   protected abstract static class TransportState extends AbstractStream2.TransportState {
     /** Whether listener.closed() has been called. */
+    private final StatsTraceContext statsTraceCtx;
     private boolean listenerClosed;
     private ClientStreamListener listener;
 
@@ -198,6 +199,7 @@ protected abstract static class TransportState extends AbstractStream2.Transport
 
     protected TransportState(int maxMessageSize, StatsTraceContext statsTraceCtx) {
       super(maxMessageSize, statsTraceCtx);
+      this.statsTraceCtx = Preconditions.checkNotNull(statsTraceCtx, "statsTraceCtx");
     }
 
     @VisibleForTesting
@@ -328,6 +330,7 @@ private void closeListener(Status status, Metadata trailers) {
       if (!listenerClosed) {
         listenerClosed = true;
         closeDeframer();
+        statsTraceCtx.streamClosed(status);
         listener().closed(status, trailers);
       }
     }
@@ -371,7 +374,6 @@ public void close() {
       Preconditions.checkState(payload != null,
           "Lack of request message. GET request is only supported for unary requests");
       abstractClientStreamSink().writeHeaders(headers, payload);
-      statsTraceCtx.wireBytesSent(payload.length);
       payload = null;
       headers = null;
     }

File: core/src/main/java/io/grpc/internal/ClientTransport.java
Patch:
@@ -59,12 +59,10 @@ public interface ClientTransport {
    * @param method the descriptor of the remote method to be called for this stream.
    * @param headers to send at the beginning of the call
    * @param callOptions runtime options of the call
-   * @param statsTraceCtx carries stats and tracing information
    * @return the newly created stream.
    */
   // TODO(nmittler): Consider also throwing for stopping.
-  ClientStream newStream(MethodDescriptor<?, ?> method, Metadata headers, CallOptions callOptions,
-      StatsTraceContext statsTraceCtx);
+  ClientStream newStream(MethodDescriptor<?, ?> method, Metadata headers, CallOptions callOptions);
 
   // TODO(zdapeng): Remove two-argument version in favor of four-argument overload.
   ClientStream newStream(MethodDescriptor<?, ?> method, Metadata headers);

File: core/src/main/java/io/grpc/internal/FailingClientTransport.java
Patch:
@@ -53,14 +53,14 @@ class FailingClientTransport implements ClientTransport {
   }
 
   @Override
-  public ClientStream newStream(MethodDescriptor<?, ?> method, Metadata headers,
-      CallOptions callOptions, StatsTraceContext statsTraceCtx) {
+  public ClientStream newStream(
+      MethodDescriptor<?, ?> method, Metadata headers, CallOptions callOptions) {
     return new FailingClientStream(error);
   }
 
   @Override
   public ClientStream newStream(MethodDescriptor<?, ?> method, Metadata headers) {
-    return newStream(method, headers, CallOptions.DEFAULT, StatsTraceContext.NOOP);
+    return newStream(method, headers, CallOptions.DEFAULT);
   }
 
   @Override

File: core/src/main/java/io/grpc/internal/ForwardingConnectionClientTransport.java
Patch:
@@ -56,9 +56,8 @@ public void shutdownNow(Status status) {
 
   @Override
   public ClientStream newStream(
-      MethodDescriptor<?, ?> method, Metadata headers, CallOptions callOptions,
-      StatsTraceContext statsTraceCtx) {
-    return delegate().newStream(method, headers, callOptions, statsTraceCtx);
+      MethodDescriptor<?, ?> method, Metadata headers, CallOptions callOptions) {
+    return delegate().newStream(method, headers, callOptions);
   }
 
   @Override

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -138,8 +138,7 @@ public void setUp() {
         mockTransportFactory, DecompressorRegistry.getDefaultInstance(),
         CompressorRegistry.getDefaultInstance(), timerServicePool, executorPool, oobExecutorPool,
         timer.getStopwatchSupplier(), TimeUnit.SECONDS.toMillis(IDLE_TIMEOUT_SECONDS), USER_AGENT,
-        Collections.<ClientInterceptor>emptyList(),
-        NoopStatsContextFactory.INSTANCE);
+        Collections.<ClientInterceptor>emptyList());
     newTransports = TestUtils.captureTransports(mockTransportFactory);
 
     for (int i = 0; i < 2; i++) {

File: core/src/test/java/io/grpc/internal/TestUtils.java
Patch:
@@ -89,8 +89,8 @@ static BlockingQueue<MockClientTransportInfo> captureTransports(
       @Override
       public ConnectionClientTransport answer(InvocationOnMock invocation) throws Throwable {
         final ConnectionClientTransport mockTransport = mock(ConnectionClientTransport.class);
-        when(mockTransport.newStream(any(MethodDescriptor.class), any(Metadata.class),
-                any(CallOptions.class), any(StatsTraceContext.class)))
+        when(mockTransport.newStream(
+                any(MethodDescriptor.class), any(Metadata.class), any(CallOptions.class)))
             .thenReturn(mock(ClientStream.class));
         // Save the listener
         doAnswer(new Answer<Runnable>() {

File: interop-testing/src/test/java/io/grpc/testing/integration/InProcessTest.java
Patch:
@@ -58,8 +58,7 @@ public static void stopServer() {
 
   @Override
   protected ManagedChannel createChannel() {
-    return InProcessChannelBuilder.forName(SERVER_NAME)
-        .statsContextFactory(getClientStatsFactory()).build();
+    return InProcessChannelBuilder.forName(SERVER_NAME).build();
   }
 
   @Override

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -289,18 +289,18 @@ public void ping(final PingCallback callback, Executor executor) {
 
   @Override
   public OkHttpClientStream newStream(final MethodDescriptor<?, ?> method,
-      final Metadata headers, CallOptions callOptions, StatsTraceContext statsTraceCtx) {
+      final Metadata headers, CallOptions callOptions) {
     Preconditions.checkNotNull(method, "method");
     Preconditions.checkNotNull(headers, "headers");
-    Preconditions.checkNotNull(statsTraceCtx, "statsTraceCtx");
+    StatsTraceContext statsTraceCtx = StatsTraceContext.newClientContext(callOptions, headers);
     return new OkHttpClientStream(method, headers, frameWriter, OkHttpClientTransport.this,
         outboundFlow, lock, maxMessageSize, defaultAuthority, userAgent, statsTraceCtx);
   }
 
   @Override
   public OkHttpClientStream newStream(final MethodDescriptor<?, ?> method, final Metadata
       headers) {
-    return newStream(method, headers, CallOptions.DEFAULT, StatsTraceContext.NOOP);
+    return newStream(method, headers, CallOptions.DEFAULT);
   }
 
   @GuardedBy("lock")

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -481,7 +481,7 @@ private void startServer(int maxStreamsPerConnection, int maxHeaderListSize) thr
     server = new NettyServer(TestUtils.testServerAddress(0),
         NioServerSocketChannel.class, group, group, negotiator,
         maxStreamsPerConnection, DEFAULT_WINDOW_SIZE, DEFAULT_MAX_MESSAGE_SIZE, maxHeaderListSize,
-        DEFAULT_SERVER_KEEPALIVE_TIME_NANOS, DEFAULT_SERVER_KEEPALIVE_TIMEOUT_NANOS);
+        DEFAULT_SERVER_KEEPALIVE_TIME_NANOS, DEFAULT_SERVER_KEEPALIVE_TIMEOUT_NANOS, true, 0);
     server.start(serverListener);
     address = TestUtils.testServerAddress(server.getPort());
     authority = GrpcUtil.authorityFromHostAndPort(address.getHostString(), address.getPort());

File: core/src/main/java/io/grpc/internal/FailingClientStream.java
Patch:
@@ -39,7 +39,7 @@
  * An implementation of {@link ClientStream} that fails (by calling {@link
  * ClientStreamListener#closed}) when started, and silently does nothing for the other operations.
  */
-class FailingClientStream extends NoopClientStream {
+public final class FailingClientStream extends NoopClientStream {
   private boolean started;
   private final Status error;
 

File: core/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -118,8 +118,8 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
   /**
    * Provides a custom {@code User-Agent} for the application.
    *
-   * <p>It's an optional parameter. If provided, the given agent will be prepended by the
-   * grpc {@code User-Agent}.
+   * <p>It's an optional parameter. The library will provide a user agent independent of this
+   * option. If provided, the given agent will prepend the library's user agent information.
    */
   public abstract T userAgent(String userAgent);
 

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -249,7 +249,9 @@ public void runInContext() {
     context.addListener(this, directExecutor());
     if (effectiveDeadline != null
         // If the context has the effective deadline, we don't need to schedule an extra task.
-        && context.getDeadline() != effectiveDeadline) {
+        && context.getDeadline() != effectiveDeadline
+        // If the channel has been terminated, we don't need to schedule an extra task.
+        && deadlineCancellationExecutor != null) {
       deadlineCancellationFuture = startDeadlineTimer(effectiveDeadline);
     }
     if (cancelListenersShouldBeRemoved) {

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/HandlerRegistryBenchmark.java
Patch:
@@ -37,7 +37,6 @@
 import io.grpc.ServerCall.Listener;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerServiceDefinition;
-import io.grpc.ServiceDescriptor;
 import io.grpc.testing.TestMethodDescriptors;
 import io.grpc.util.MutableHandlerRegistry;
 import java.util.ArrayList;
@@ -83,8 +82,7 @@ public void setup() throws Exception {
     fullMethodNames = new ArrayList<String>(serviceCount * methodCountPerService);
     for (int serviceIndex = 0; serviceIndex < serviceCount; ++serviceIndex) {
       String serviceName = randomString();
-      ServerServiceDefinition.Builder serviceBuilder = ServerServiceDefinition.builder(
-          new ServiceDescriptor(serviceName));
+      ServerServiceDefinition.Builder serviceBuilder = ServerServiceDefinition.builder(serviceName);
       for (int methodIndex = 0; methodIndex < methodCountPerService; ++methodIndex) {
         String methodName = randomString();
 

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -86,6 +86,7 @@ public enum Transport {
   private volatile EventLoopGroup groupToShutdown;
 
   @Setup
+  @SuppressWarnings("LiteralClassName") // Epoll is not available on windows
   public void setUp() throws Exception {
     AbstractServerImplBuilder<?> serverBuilder;
     AbstractManagedChannelImplBuilder<?> channelBuilder;

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncServer.java
Patch:
@@ -99,6 +99,7 @@ public void run() {
     });
   }
 
+  @SuppressWarnings("LiteralClassName") // Epoll is not available on windows
   static Server newServer(ServerConfiguration config) throws IOException {
     SslContext sslContext = null;
     if (config.tls) {

File: netty/third_party/netty/java/io/grpc/netty/FixedHttp2ConnectionDecoder.java
Patch:
@@ -450,11 +450,11 @@ private int calculateMaxStreams(int maxConcurrentStreams) {
 
         @Override
         public void onSettingsRead(ChannelHandlerContext ctx, Http2Settings settings) throws Http2Exception {
-            encoder.remoteSettings(settings);
-
             // Acknowledge receipt of the settings.
             encoder.writeSettingsAck(ctx, ctx.newPromise());
 
+            encoder.remoteSettings(settings);
+
             listener.onSettingsRead(ctx, settings);
         }
 

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -56,7 +56,6 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPromise;
 import io.netty.handler.codec.http2.DefaultHttp2Connection;
-import io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder;
 import io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
 import io.netty.handler.codec.http2.DefaultHttp2FrameReader;
 import io.netty.handler.codec.http2.DefaultHttp2FrameWriter;
@@ -149,7 +148,8 @@ static NettyClientHandler newHandler(Http2Connection connection, Http2FrameReade
     connection.local().flowController(
         new DefaultHttp2LocalFlowController(connection, DEFAULT_WINDOW_UPDATE_RATIO, true));
 
-    Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(connection, encoder,
+    // TODO(ejona): swap back to DefaultHttp2Connection with Netty-4.1.9
+    Http2ConnectionDecoder decoder = new FixedHttp2ConnectionDecoder(connection, encoder,
         frameReader);
 
     Http2Settings settings = new Http2Settings();

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -54,7 +54,6 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPromise;
 import io.netty.handler.codec.http2.DefaultHttp2Connection;
-import io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder;
 import io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
 import io.netty.handler.codec.http2.DefaultHttp2FrameReader;
 import io.netty.handler.codec.http2.DefaultHttp2FrameWriter;
@@ -136,7 +135,8 @@ static NettyServerHandler newHandler(Http2FrameReader frameReader, Http2FrameWri
 
 
     Http2ConnectionEncoder encoder = new DefaultHttp2ConnectionEncoder(connection, frameWriter);
-    Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(connection, encoder,
+    // TODO(ejona): swap back to DefaultHttp2Connection with Netty-4.1.9
+    Http2ConnectionDecoder decoder = new FixedHttp2ConnectionDecoder(connection, encoder,
         frameReader);
 
     Http2Settings settings = new Http2Settings();

File: core/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -187,6 +187,7 @@ public PickResult pickSubchannel(Attributes affinity, Metadata headers) {
      * @param args the pick arguments
      */
     // TODO(lukaszx0) make it abstract once deprecated overload will be removed.
+    @SuppressWarnings("deprecation")
     public PickResult pickSubchannel(PickSubchannelArgs args) {
       return pickSubchannel(args.getCallOptions().getAffinity(), args.getHeaders());
     }

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -322,9 +322,11 @@ public void streamListener_unexpectedRuntimeException() {
         .when(callListener)
         .onMessage(any(Long.class));
 
+    InputStream inputStream = method.streamRequest(1234L);
+
     thrown.expect(RuntimeException.class);
     thrown.expectMessage("unexpected exception");
-    streamListener.messageRead(method.streamRequest(1234L));
+    streamListener.messageRead(inputStream);
   }
 
   private void checkStats(Status.Code statusCode) {

File: core/src/main/java/io/grpc/internal/KeepAliveManager.java
Patch:
@@ -175,6 +175,8 @@ public synchronized void onTransportActive() {
       state = State.PING_SCHEDULED;
       pingFuture = scheduler.schedule(sendPing, nextKeepaliveTime - ticker.read(),
           TimeUnit.NANOSECONDS);
+    } else if (state == State.IDLE_AND_PING_SENT) {
+      state = State.PING_SENT;
     }
   }
 

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -309,8 +309,7 @@ public void maxHeaderListSizeShouldBeEnforcedOnServer() throws Exception {
       fail("The stream should have been failed due to server received header exceeds header list"
           + " size limit!");
     } catch (Exception e) {
-      Throwable rootCause = getRootCause(e);
-      Status status = ((StatusException) rootCause).getStatus();
+      Status status = Status.fromThrowable(e);
       assertEquals(status.toString(), Status.Code.INTERNAL, status.getCode());
     }
   }

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -44,8 +44,6 @@
 
 /**
  * Abstract base class for {@link Stream} implementations.
- *
- * @param <IdT> type of the unique identifier of this stream.
  */
 public abstract class AbstractStream implements Stream {
   /**

File: core/src/main/java/io/grpc/internal/AbstractClientStream2.java
Patch:
@@ -76,8 +76,8 @@ protected interface Sink {
      * Tears down the stream, typically in the event of a timeout. This method may be called
      * multiple times and from any thread.
      *
-     * <p>This is a clone of {@link ClientStream#cancel()}; {@link AbstractClientStream2#cancel}
-     * delegates to this method.
+     * <p>This is a clone of {@link ClientStream#cancel(Status)};
+     * {@link AbstractClientStream2#cancel} delegates to this method.
      */
     void cancel(Status status);
   }

File: benchmarks/src/main/java/io/grpc/benchmarks/ByteBufInputStream.java
Patch:
@@ -41,6 +41,7 @@
 /**
  * A {@link Drainable} {@code InputStream} that reads an {@link ByteBuf}.
  */
+@SuppressWarnings("InputStreamSlowMultibyteRead") // doesn't matter if slow. It'll throw
 public class ByteBufInputStream extends InputStream
     implements Drainable, KnownLength {
 

File: benchmarks/src/main/java/io/grpc/benchmarks/SocketAddressValidator.java
Patch:
@@ -31,12 +31,14 @@
 
 package io.grpc.benchmarks;
 
+import com.google.errorprone.annotations.Immutable;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 
 /**
  * Verifies whether or not the given {@link SocketAddress} is valid.
  */
+@Immutable
 public interface SocketAddressValidator {
   /**
    * Verifier for {@link InetSocketAddress}es.

File: benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadClientTest.java
Patch:
@@ -77,9 +77,9 @@ public void testHistogramToStatsConversion() throws Exception {
 
     Stats.ClientStats stats = loadClient.getStats();
 
-    assertEquals(1.0, stats.getLatencies().getMinSeen());
-    assertEquals(1000.0, stats.getLatencies().getMaxSeen());
-    assertEquals(10.0, stats.getLatencies().getCount());
+    assertEquals(1.0, stats.getLatencies().getMinSeen(), 0.0);
+    assertEquals(1000.0, stats.getLatencies().getMaxSeen(), 0.0);
+    assertEquals(10.0, stats.getLatencies().getCount(), 0.0);
 
     double base = 0;
     double logBase = 1;

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -214,6 +214,7 @@ public enum Code {
     UNAUTHENTICATED(16);
 
     private final int value;
+    @SuppressWarnings("ImmutableEnumChecker") // we make sure the byte[] can't be modified
     private final byte[] valueAscii;
 
     private Code(int value) {

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -238,6 +238,9 @@ private static Http2Error[] buildHttp2CodeMap() {
     }
 
     private final int code;
+    // Status is not guaranteed to be deeply immutable. Don't care though, since that's only true
+    // when there are exceptions in the Status, which is not true here.
+    @SuppressWarnings("ImmutableEnumChecker")
     private final Status status;
 
     Http2Error(int code, Status status) {

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -220,6 +220,7 @@ public ServerStreamListenerImpl(
       this.statsTraceCtx = checkNotNull(statsTraceCtx, "statsTraceCtx");
     }
 
+    @SuppressWarnings("Finally") // The code avoids suppressing the exception thrown from try
     @Override
     public void messageRead(final InputStream message) {
       Throwable t = null;

File: core/src/test/java/io/grpc/ConnectivityStateInfoTest.java
Patch:
@@ -88,6 +88,7 @@ public void equality() {
     assertNotEquals(info4, info6);
 
     assertFalse(info1.equals(null));
-    assertFalse(info1.equals(this));
+    // Extra cast to avoid ErrorProne EqualsIncompatibleType failure
+    assertFalse(((Object) info1).equals(this));
   }
 }

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -449,6 +449,7 @@ private StreamingOutputCallResponse toResponse() {
   /**
    * Creates a buffer with data read from a file.
    */
+  @SuppressWarnings("Finally") // Not concerned about suppression; expected to be exceedingly rare
   private ByteString createBufferFromFile(String fileClassPath) {
     ByteString buffer = ByteString.EMPTY;
     InputStream inputStream = getClass().getResourceAsStream(fileClassPath);

File: interop-testing/src/test/java/io/grpc/testing/integration/ProxyTest.java
Patch:
@@ -202,7 +202,7 @@ public void run() {
   }
 
   // server with echo and streaming modes
-  private class Server implements Runnable {
+  private static class Server implements Runnable {
     private ServerSocket server;
     private Socket rcv;
     private boolean shutDown;

File: netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java
Patch:
@@ -84,7 +84,8 @@ public void failInvalidAuthority() {
     thrown.expect(IllegalArgumentException.class);
     thrown.expectMessage("Invalid host or port");
 
-    NettyChannelBuilder.forAddress(new InetSocketAddress("invalid_authority", 1234));
+    Object unused =
+        NettyChannelBuilder.forAddress(new InetSocketAddress("invalid_authority", 1234));
   }
 
   @Test

File: netty/src/test/java/io/grpc/netty/NettyStreamTestBase.java
Patch:
@@ -31,6 +31,7 @@
 
 package io.grpc.netty;
 
+import static com.google.common.base.Charsets.US_ASCII;
 import static io.grpc.netty.NettyTestUtil.messageFrame;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -199,7 +200,7 @@ public void shouldNotBeReadyForDataAfterWritingLargeMessage() throws IOException
   }
 
   protected byte[] smallMessage() {
-    return MESSAGE.getBytes();
+    return MESSAGE.getBytes(US_ASCII);
   }
 
   protected byte[] largeMessage() {

File: okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java
Patch:
@@ -217,7 +217,7 @@ private void writeStreams() {
   /**
    * Simple status that keeps track of the number of writes performed.
    */
-  private final class WriteStatus {
+  private static final class WriteStatus {
     int numWrites;
 
     void incrementNumWrites() {

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -1605,6 +1605,8 @@ void assertClosed() {
       }
     }
 
+    // The wait is safe; nextFrame is called in a loop and can have spurious wakeups
+    @SuppressWarnings("WaitNotInLoop")
     @Override
     public boolean nextFrame(Handler handler) throws IOException {
       Result result;
@@ -1692,6 +1694,7 @@ void waitUntilStreamClosed() throws InterruptedException {
       }
     }
 
+    @SuppressWarnings("Finally") // We don't care about suppressed exceptions in the test
     static String getContent(InputStream message) {
       BufferedReader br = new BufferedReader(new InputStreamReader(message, UTF_8));
       try {

File: okhttp/third_party/okhttp/java/io/grpc/okhttp/internal/DistinguishedNameParser.java
Patch:
@@ -137,6 +137,7 @@ private String quotedAV() {
   }
 
   // gets hex string attribute value: "#" hexstring
+  @SuppressWarnings("NarrowingCompoundAssignment")
   private String hexAV() {
     if (pos + 4 >= length) {
       // encoded byte array  must be not less then 4 c

File: okhttp/third_party/okhttp/java/io/grpc/okhttp/internal/Platform.java
Patch:
@@ -191,7 +191,8 @@ private static Platform findPlatform() {
   private static Provider getAppEngineProvider() {
     try {
       // Forcibly load conscrypt as it is unlikely to be an installed provider on AppEngine
-      return (Provider) Class.forName("org.conscrypt.OpenSSLProvider").newInstance();
+      return (Provider) Class.forName("org.conscrypt.OpenSSLProvider")
+          .getConstructor().newInstance();
     } catch (Throwable t) {
       throw new RuntimeException("Unable to load conscrypt security provider", t);
     }

File: okhttp/third_party/okhttp/java/io/grpc/okhttp/internal/framed/Huffman.java
Patch:
@@ -171,6 +171,7 @@ private void buildTree() {
     }
   }
 
+  @SuppressWarnings("NarrowingCompoundAssignment")
   private void addCode(int sym, int code, byte len) {
     Node terminal = new Node(sym, len);
 

File: testing/src/main/java/io/grpc/testing/DeadlineSubject.java
Patch:
@@ -92,7 +92,7 @@ public void of(Deadline expected) {
    * A partially specified proposition about an approximate relationship to a {@code deadline}
    * subject using a tolerance.
    */
-  public abstract class TolerantDeadlineComparison {
+  public abstract static class TolerantDeadlineComparison {
 
     private TolerantDeadlineComparison() {}
 

File: thrift/src/main/java/io/grpc/thrift/ThriftInputStream.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.thrift.TSerializer;
 
 /** InputStream for Thrift. */
+@SuppressWarnings("InputStreamSlowMultibyteRead") // TODO(ejona): would be good to fix
 final class ThriftInputStream extends InputStream implements Drainable, KnownLength {
 
   /**

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/TesterActivity.java
Patch:
@@ -31,8 +31,6 @@
 
 package io.grpc.android.integrationtest;
 
-import com.google.android.gms.security.ProviderInstaller;
-
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
@@ -44,7 +42,7 @@
 import android.widget.Button;
 import android.widget.EditText;
 import android.widget.TextView;
-
+import com.google.android.gms.security.ProviderInstaller;
 import java.util.LinkedList;
 import java.util.List;
 

File: core/src/test/java/io/grpc/internal/ManagedChannelImpl2Test.java
Patch:
@@ -225,7 +225,7 @@ public void allPendingTasksAreRun() throws Exception {
   }
 
   /**
-   * The counterpart of {@link ManagedChannelImpl2IdlenessTest#enterIdleModeAfterForceExit}.
+   * The counterpart of {@link ManagedChannelImplIdlenessTest#enterIdleModeAfterForceExit}.
    */
   @Test
   @SuppressWarnings("unchecked")

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -56,6 +56,7 @@
 import io.netty.channel.local.LocalChannel;
 import io.netty.channel.local.LocalServerChannel;
 import java.net.InetSocketAddress;
+import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
@@ -182,7 +183,7 @@ public void tearDown() throws Exception {
       throw new Exception("failed to shut down server");
     }
     if (groupToShutdown != null) {
-      groupToShutdown.shutdownGracefully(0, 1, TimeUnit.SECONDS);
+      Future<?> unused = groupToShutdown.shutdownGracefully(0, 1, TimeUnit.SECONDS);
       groupToShutdown.awaitTermination(1, TimeUnit.SECONDS);
       if (!groupToShutdown.isTerminated()) {
         throw new Exception("failed to shut down event loop group.");

File: context/src/test/java/io/grpc/DeadlineTest.java
Patch:
@@ -43,6 +43,7 @@
 
 import com.google.common.truth.Truth;
 import java.util.Arrays;
+import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -189,7 +190,7 @@ public void runOnEventualExpirationIsExecuted() throws Exception {
     Deadline base = Deadline.after(50, TimeUnit.MICROSECONDS, ticker);
     ScheduledExecutorService mockScheduler = mock(ScheduledExecutorService.class);
     final AtomicBoolean executed = new AtomicBoolean();
-    base.runOnExpiration(
+    Future<?> unused = base.runOnExpiration(
         new Runnable() {
           @Override
           public void run() {
@@ -208,7 +209,7 @@ public void runOnAlreadyExpiredIsExecutedOnExecutor() throws Exception {
     Deadline base = Deadline.after(0, TimeUnit.MICROSECONDS, ticker);
     ScheduledExecutorService mockScheduler = mock(ScheduledExecutorService.class);
     final AtomicBoolean executed = new AtomicBoolean();
-    base.runOnExpiration(
+    Future<?> unused = base.runOnExpiration(
         new Runnable() {
           @Override
           public void run() {

File: core/src/test/java/io/grpc/internal/FakeClock.java
Patch:
@@ -189,7 +189,8 @@ private class ScheduledExecutorImpl implements ScheduledExecutorService {
     }
 
     @Override public void execute(Runnable command) {
-      schedule(command, 0, TimeUnit.NANOSECONDS);
+      // Since it is being enqueued immediately, no point in tracing the future for cancellation.
+      Future<?> unused = schedule(command, 0, TimeUnit.NANOSECONDS);
     }
   }
 

File: core/src/test/java/io/grpc/internal/FakeClockTest.java
Patch:
@@ -95,7 +95,7 @@ public void testScheduledExecutorService_getDelay() {
   public void testScheduledExecutorService_result() {
     FakeClock fakeClock = new FakeClock();
     final boolean[] result = new boolean[]{false};
-    fakeClock.getScheduledExecutorService().schedule(
+    ScheduledFuture<?> unused = fakeClock.getScheduledExecutorService().schedule(
         new Runnable() {
           @Override
           public void run() {
@@ -137,6 +137,7 @@ public void testStopWatch() {
   }
 
   @Test
+  @SuppressWarnings("FutureReturnValueIgnored")
   public void testPendingAndDueTasks() {
     FakeClock fakeClock = new FakeClock();
     ScheduledExecutorService scheduledExecutorService = fakeClock.getScheduledExecutorService();

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -61,6 +61,7 @@
 import java.util.Queue;
 import java.util.Random;
 import java.util.Set;
+import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.concurrent.GuardedBy;
@@ -378,7 +379,8 @@ private void scheduleNextChunk() {
         Chunk nextChunk = chunks.peek();
         if (nextChunk != null) {
           scheduled = true;
-          executor.schedule(new LogExceptionRunnable(dispatchTask),
+          // TODO(ejona): cancel future if RPC is cancelled
+          Future<?> unused = executor.schedule(new LogExceptionRunnable(dispatchTask),
               nextChunk.delayMicroseconds, TimeUnit.MICROSECONDS);
           return;
         }

File: netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java
Patch:
@@ -62,7 +62,7 @@ public String checkAuthority(String authority) {
         return authority;
       }
     });
-    builder.overrideAuthority("[invalidauthority")
+    Object unused = builder.overrideAuthority("[invalidauthority")
         .negotiationType(NegotiationType.PLAINTEXT)
         .buildTransportFactory();
   }
@@ -74,7 +74,7 @@ public void failOverrideInvalidAuthority() {
 
     NettyChannelBuilder builder = new NettyChannelBuilder(new SocketAddress(){});
 
-    builder.overrideAuthority("[invalidauthority")
+    Object unused = builder.overrideAuthority("[invalidauthority")
         .negotiationType(NegotiationType.PLAINTEXT)
         .buildTransportFactory();
   }

File: interop-testing/src/main/java/io/grpc/testing/integration/Http2Client.java
Patch:
@@ -153,8 +153,8 @@ private void parseArgs(String[] args) {
 
   private void setUp() {
     channel = createChannel();
-    blockingStub = TestServiceGrpc.newBlockingStub(channel);
-    asyncStub = TestServiceGrpc.newStub(channel);
+    blockingStub = TestServiceGrpc.newBlockingStub(channel).withWaitForReady();
+    asyncStub = TestServiceGrpc.newStub(channel).withWaitForReady();
   }
 
   private void shutdown() {
@@ -272,6 +272,7 @@ private void rstDuringData() throws Exception {
 
     private void goAway() throws Exception {
       assertResponseEquals(blockingStub.unaryCall(simpleRequest), goldenResponse);
+      TimeUnit.SECONDS.sleep(1);
       assertResponseEquals(blockingStub.unaryCall(simpleRequest), goldenResponse);
     }
 

File: netty/src/main/java/io/grpc/netty/GrpcSslContexts.java
Patch:
@@ -33,6 +33,7 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 
+import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import io.grpc.ExperimentalApi;
 import io.netty.handler.codec.http2.Http2SecurityUtil;
 import io.netty.handler.ssl.ApplicationProtocolConfig;
@@ -133,6 +134,7 @@ public static SslContextBuilder forServer(
    * Set ciphers and APN appropriate for gRPC. Precisely what is set is permitted to change, so if
    * an application requires particular settings it should override the options set here.
    */
+  @CanIgnoreReturnValue
   public static SslContextBuilder configure(SslContextBuilder builder) {
     return configure(builder, defaultSslProvider());
   }
@@ -142,6 +144,7 @@ public static SslContextBuilder configure(SslContextBuilder builder) {
    * an application requires particular settings it should override the options set here.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
+  @CanIgnoreReturnValue
   public static SslContextBuilder configure(SslContextBuilder builder, SslProvider provider) {
     return builder.sslProvider(provider)
                   .ciphers(Http2SecurityUtil.CIPHERS, SupportedCipherSuiteFilter.INSTANCE)

File: netty/src/main/java/io/grpc/netty/WriteQueue.java
Patch:
@@ -33,6 +33,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelPromise;
@@ -87,6 +88,7 @@ void scheduleFlush() {
    * @param flush true if a flush of the write should be schedule, false if a later call to
    *              enqueue will schedule the flush.
    */
+  @CanIgnoreReturnValue
   ChannelFuture enqueue(QueuedCommand command, boolean flush) {
     return enqueue(command, channel.newPromise(), flush);
   }
@@ -99,6 +101,7 @@ ChannelFuture enqueue(QueuedCommand command, boolean flush) {
    * @param flush true if a flush of the write should be schedule, false if a later call to
    *              enqueue will schedule the flush.
    */
+  @CanIgnoreReturnValue
   ChannelFuture enqueue(QueuedCommand command, ChannelPromise promise, boolean flush) {
     // Detect erroneous code that tries to reuse command objects.
     Preconditions.checkArgument(command.promise() == null, "promise must not be set on command");

File: netty/src/main/java/io/grpc/netty/package-info.java
Patch:
@@ -33,4 +33,5 @@
  * The main transport implementation based on <a target="_blank" href="http://netty.io">Netty</a>,
  * for both the client and the server.
  */
+@javax.annotation.CheckReturnValue
 package io.grpc.netty;

File: netty/src/test/java/io/grpc/netty/NettyHandlerTestBase.java
Patch:
@@ -39,6 +39,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import io.grpc.internal.MessageFramer;
 import io.grpc.internal.StatsTraceContext;
 import io.grpc.internal.WritableBuffer;
@@ -221,6 +222,7 @@ protected final Http2Connection connection() {
     return handler().connection();
   }
 
+  @CanIgnoreReturnValue
   protected final ChannelFuture enqueue(WriteQueue.QueuedCommand command) {
     ChannelFuture future = writeQueue.enqueue(command, newPromise(), true);
     channel.runPendingTasks();

File: core/src/main/java/io/grpc/ResolvedServerInfoGroup.java
Patch:
@@ -145,6 +145,9 @@ public String toString() {
     return "[servers=" + resolvedServerInfoList + ", attrs=" + attributes + "]";
   }
 
+  /**
+   * Builder for a {@link ResolvedServerInfo}.
+   */
   public static final class Builder {
     private final List<ResolvedServerInfo> group = new ArrayList<ResolvedServerInfo>();
     private final Attributes attributes;

File: core/src/main/java/io/grpc/internal/ObjectPool.java
Patch:
@@ -33,6 +33,9 @@
 
 import javax.annotation.concurrent.ThreadSafe;
 
+/**
+ * An object pool.
+ */
 @ThreadSafe
 public interface ObjectPool<T> {
   /**

File: core/src/test/java/io/grpc/ServiceDescriptorTest.java
Patch:
@@ -64,7 +64,7 @@ public void failsOnNullMethods() {
     thrown.expect(NullPointerException.class);
     thrown.expectMessage("methods");
 
-    new ServiceDescriptor("name", (Collection<MethodDescriptor<?, ?>>)null);
+    new ServiceDescriptor("name", (Collection<MethodDescriptor<?, ?>>) null);
   }
 
   @Test

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/HandlerRegistryBenchmark.java
Patch:
@@ -91,8 +91,8 @@ public void setup() throws Exception {
         MethodDescriptor<Void, Void> methodDescriptor = MethodDescriptor.<Void, Void>newBuilder()
             .setType(MethodDescriptor.MethodType.UNKNOWN)
             .setFullMethodName(MethodDescriptor.generateFullMethodName(serviceName, methodName))
-            .setRequestMarshaller(TestMethodDescriptors.noopMarshaller())
-            .setResponseMarshaller(TestMethodDescriptors.noopMarshaller())
+            .setRequestMarshaller(TestMethodDescriptors.voidMarshaller())
+            .setResponseMarshaller(TestMethodDescriptors.voidMarshaller())
             .build();
         serviceBuilder.addMethod(methodDescriptor,
             new ServerCallHandler<Void, Void>() {

File: core/src/test/java/io/grpc/ClientInterceptorsTest.java
Patch:
@@ -73,7 +73,7 @@ public class ClientInterceptorsTest {
 
   private BaseClientCall call = new BaseClientCall();
 
-  private final MethodDescriptor<Void, Void> method = TestMethodDescriptors.noopMethod();
+  private final MethodDescriptor<Void, Void> method = TestMethodDescriptors.voidMethod();
 
   /**
    * Sets up mocks.

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -112,8 +112,8 @@ public class ClientCallImplTest {
   private final MethodDescriptor<Void, Void> method = MethodDescriptor.<Void, Void>newBuilder()
       .setType(MethodType.UNARY)
       .setFullMethodName("service/method")
-      .setRequestMarshaller(TestMethodDescriptors.noopMarshaller())
-      .setResponseMarshaller(TestMethodDescriptors.noopMarshaller())
+      .setRequestMarshaller(TestMethodDescriptors.voidMarshaller())
+      .setResponseMarshaller(TestMethodDescriptors.voidMarshaller())
       .build();
 
   private final FakeStatsContextFactory statsCtxFactory = new FakeStatsContextFactory();

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -131,7 +131,7 @@ public class OkHttpClientTransportTest {
   @Mock
   private FrameWriter frameWriter;
 
-  private MethodDescriptor<Void, Void> method = TestMethodDescriptors.noopMethod();
+  private MethodDescriptor<Void, Void> method = TestMethodDescriptors.voidMethod();
 
   @Mock
   private ManagedClientTransport.Listener transportListener;

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -194,8 +194,9 @@ public Runnable start(Listener transportListener) {
      * that it may begin buffering writes.
      */
     b.handler(negotiationHandler);
+    channel = b.register().channel();
     // Start the connection operation to the server.
-    channel = b.connect(address).addListener(new ChannelFutureListener() {
+    channel.connect(address).addListener(new ChannelFutureListener() {
       @Override
       public void operationComplete(ChannelFuture future) throws Exception {
         if (!future.isSuccess()) {
@@ -209,7 +210,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
           future.channel().pipeline().fireExceptionCaught(future.cause());
         }
       }
-    }).channel();
+    });
     // Start the write queue as soon as the channel is constructed
     handler.startWriteQueue(channel);
     // This write will have no effect, yet it will only complete once the negotiationHandler

File: core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java
Patch:
@@ -404,9 +404,7 @@ private void walkIntoIdleMode(Collection<MockClientTransportInfo> currentTranspo
   }
 
   private void forceExitIdleMode() {
-    channel.exitIdleMode();
-    // NameResolver is started in the scheduled executor
-    timer.runDueTasks();
+    channel.exitIdleModeAndGetLb();
   }
 
   private ClientTransport channelTmGetTransportUnwrapped(EquivalentAddressGroup addressGroup) {

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -167,9 +167,7 @@ private void createChannel(
         ManagedChannelImpl.IDLE_TIMEOUT_MILLIS_DISABLE,
         executor.getScheduledExecutorService(), userAgent, interceptors, statsCtxFactory);
     // Force-exit the initial idle-mode
-    channel.exitIdleMode();
-    // Will start NameResolver in the scheduled executor
-    assertEquals(1, timer.runDueTasks());
+    channel.exitIdleModeAndGetLb();
   }
 
   @Before

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTransportManagerTest.java
Patch:
@@ -147,7 +147,7 @@ public void setUp() {
     ArgumentCaptor<TransportManager<ClientTransport>> tmCaptor
         = ArgumentCaptor.forClass(null);
     // Force Channel to exit the initial idleness to get NameResolver and LoadBalancer created.
-    channel.exitIdleMode();
+    channel.exitIdleModeAndGetLb();
     verify(mockNameResolverFactory).newNameResolver(any(URI.class), any(Attributes.class));
     verify(mockLoadBalancerFactory).newLoadBalancer(anyString(), tmCaptor.capture());
     tm = tmCaptor.getValue();

File: core/src/main/java/io/grpc/ServerServiceDefinition.java
Patch:
@@ -59,8 +59,8 @@ public static Builder builder(ServiceDescriptor serviceDescriptor) {
   private ServerServiceDefinition(
       ServiceDescriptor serviceDescriptor, Map<String, ServerMethodDefinition<?, ?>> methods) {
     this.serviceDescriptor = checkNotNull(serviceDescriptor, "serviceDescriptor");
-    this.methods = Collections.unmodifiableMap(
-        new HashMap<String, ServerMethodDefinition<?, ?>>(methods));
+    this.methods =
+        Collections.unmodifiableMap(new HashMap<String, ServerMethodDefinition<?, ?>>(methods));
   }
 
   /**

File: core/src/main/java/io/grpc/internal/NoopClientStream.java
Patch:
@@ -42,7 +42,7 @@
  * An implementation of {@link ClientStream} that silently does nothing for the operations.
  */
 public class NoopClientStream implements ClientStream {
-  public static NoopClientStream INSTANCE = new NoopClientStream();
+  public static final NoopClientStream INSTANCE = new NoopClientStream();
 
   @Override
   public void setAuthority(String authority) {}

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -42,13 +42,13 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.timeout;
 
-import com.google.api.client.repackaged.com.google.common.base.Throwables;
 import com.google.auth.oauth2.AccessToken;
 import com.google.auth.oauth2.ComputeEngineCredentials;
 import com.google.auth.oauth2.GoogleCredentials;
 import com.google.auth.oauth2.OAuth2Credentials;
 import com.google.auth.oauth2.ServiceAccountCredentials;
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.net.HostAndPort;

File: netty/src/main/java/io/grpc/netty/GrpcSslContexts.java
Patch:
@@ -81,19 +81,19 @@ private GrpcSslContexts() {}
    * These configs use ACCEPT due to limited support in OpenSSL.  Actual protocol enforcement is
    * done in ProtocolNegotiators.
    */
-  private static ApplicationProtocolConfig ALPN = new ApplicationProtocolConfig(
+  private static final ApplicationProtocolConfig ALPN = new ApplicationProtocolConfig(
       Protocol.ALPN,
       SelectorFailureBehavior.NO_ADVERTISE,
       SelectedListenerFailureBehavior.ACCEPT,
       NEXT_PROTOCOL_VERSIONS);
 
-  private static ApplicationProtocolConfig NPN = new ApplicationProtocolConfig(
+  private static final ApplicationProtocolConfig NPN = new ApplicationProtocolConfig(
       Protocol.NPN,
       SelectorFailureBehavior.NO_ADVERTISE,
       SelectedListenerFailureBehavior.ACCEPT,
       NEXT_PROTOCOL_VERSIONS);
 
-  private static ApplicationProtocolConfig NPN_AND_ALPN = new ApplicationProtocolConfig(
+  private static final ApplicationProtocolConfig NPN_AND_ALPN = new ApplicationProtocolConfig(
       Protocol.NPN_AND_ALPN,
       SelectorFailureBehavior.NO_ADVERTISE,
       SelectedListenerFailureBehavior.ACCEPT,

File: testing/src/main/java/io/grpc/internal/testing/StatsTestUtils.java
Patch:
@@ -35,7 +35,6 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.collect.ImmutableMap;
-import com.google.common.io.ByteStreams;
 import com.google.instrumentation.stats.MeasurementDescriptor;
 import com.google.instrumentation.stats.MeasurementMap;
 import com.google.instrumentation.stats.MeasurementValue;
@@ -44,6 +43,8 @@
 import com.google.instrumentation.stats.TagKey;
 import com.google.instrumentation.stats.TagValue;
 
+import io.grpc.internal.IoUtils;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -138,7 +139,7 @@ public MetricsRecord pollRecord(long timeout, TimeUnit unit) throws InterruptedE
     public StatsContext deserialize(InputStream buffer) {
       String serializedString;
       try {
-        serializedString = new String(ByteStreams.toByteArray(buffer), UTF_8);
+        serializedString = new String(IoUtils.toByteArray(buffer), UTF_8);
       } catch (IOException e) {
         throw new RuntimeException(e);
       }

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -135,7 +135,7 @@ public void endOfStream() {
       StatsTraceContext statsTraceCtx) {
     framer = new MessageFramer(new FramerSink(), bufferAllocator, statsTraceCtx);
     deframer = new MessageDeframer(new DeframerListener(), Codec.Identity.NONE, maxMessageSize,
-        statsTraceCtx);
+        statsTraceCtx, getClass().getName());
   }
 
   protected final void setMaxInboundMessageSizeProtected(int maxSize) {

File: core/src/main/java/io/grpc/internal/AbstractStream2.java
Patch:
@@ -147,7 +147,8 @@ public abstract static class TransportState implements MessageDeframer.Listener
     private boolean deallocated;
 
     protected TransportState(int maxMessageSize, StatsTraceContext statsTraceCtx) {
-      deframer = new MessageDeframer(this, Codec.Identity.NONE, maxMessageSize, statsTraceCtx);
+      deframer = new MessageDeframer(
+          this, Codec.Identity.NONE, maxMessageSize, statsTraceCtx, getClass().getName());
     }
 
     @VisibleForTesting

File: auth/src/main/java/io/grpc/auth/ClientAuthInterceptor.java
Patch:
@@ -58,7 +58,7 @@
  * <p>Uses the new and simplified Google auth library:
  * https://github.com/google/google-auth-library-java
  *
- * @deprecated use {@link GoogleAuthLibraryCallCredentials} instead.
+ * @deprecated use {@link MoreCallCredentials#from(Credentials)} instead.
  */
 @Deprecated
 public final class ClientAuthInterceptor implements ClientInterceptor {

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -443,7 +443,7 @@ public void merge(Metadata other) {
     }
     int remaining = cap() - len();
     if (isEmpty() || remaining < other.len()) {
-      expand(len() + other.len() - remaining);
+      expand(len() + other.len());
     }
     System.arraycopy(other.namesAndValues, 0, namesAndValues, len(), other.len());
     size += other.size;

File: core/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -93,7 +93,9 @@ public static ServerBuilder<?> forPort(int port) {
    * be executed.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/2132")
-  public abstract T addTransportFilter(ServerTransportFilter filter);
+  public T addTransportFilter(ServerTransportFilter filter) {
+    throw new UnsupportedOperationException();
+  }
 
   /**
    * Sets a fallback handler registry that will be looked up in if a method is not found in the

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer2.java
Patch:
@@ -279,7 +279,7 @@ private void startLbComm() {
 
     LoadBalanceRequest initRequest = LoadBalanceRequest.newBuilder()
         .setInitialRequest(InitialLoadBalanceRequest.newBuilder()
-            .setName(helper.getAuthority()).build())
+            .setName(serviceName).build())
         .build();
     lbRequestWriter.onNext(initRequest);
   }

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancer2Test.java
Patch:
@@ -301,7 +301,6 @@ public void nameResolutionFailsThenRecoverToDelegate() {
 
     // Recover with a subsequent success
     List<ResolvedServerInfoGroup> resolvedServers = createResolvedServerInfoGroupList(false);
-    EquivalentAddressGroup eag = resolvedServers.get(0).toEquivalentAddressGroup();
 
     Attributes resolutionAttrs = Attributes.newBuilder().set(RESOLUTION_ATTR, "yeah").build();
     deliverResolvedAddresses(resolvedServers, resolutionAttrs);
@@ -406,6 +405,7 @@ public void grpclbThenNameResolutionFails() {
     inOrder.verify(helper).updatePicker(pickerCaptor.capture());
     ErrorPicker errorPicker = (ErrorPicker) pickerCaptor.getValue();
     assertSame(error, errorPicker.result.getStatus());
+    assertFalse(oobChannel.isShutdown());
 
     // Simulate receiving LB response
     List<InetSocketAddress> backends = Arrays.asList(
@@ -446,8 +446,6 @@ public void switchPolicy() {
     Attributes pickFirstResolutionAttrs = Attributes.newBuilder()
         .set(GrpclbConstants.ATTR_LB_POLICY, LbPolicy.PICK_FIRST).build();
     verify(pickFirstBalancerFactory, never()).newLoadBalancer(any(Helper.class));
-    verify(mockLbService).balanceLoad(lbResponseObserverCaptor.capture());
-    StreamObserver<LoadBalanceResponse> lbResponseObserver = lbResponseObserverCaptor.getValue();
     assertEquals(1, lbRequestObservers.size());
     StreamObserver<LoadBalanceRequest> lbRequestObserver = lbRequestObservers.poll();
 

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -454,8 +454,8 @@ private ByteString createBufferFromFile(String fileClassPath) {
     } finally {
       try {
         inputStream.close();
-      } catch (IOException e) {
-        throw new RuntimeException(e);
+      } catch (IOException ignorable) {
+        // ignore
       }
     }
     return buffer;

File: core/src/main/java/io/grpc/internal/ChannelExecutor.java
Patch:
@@ -31,6 +31,8 @@
 
 package io.grpc.internal;
 
+import static com.google.common.base.Preconditions.checkNotNull;
+
 import com.google.common.annotations.VisibleForTesting;
 
 import java.util.LinkedList;
@@ -97,7 +99,7 @@ void drain() {
    */
   ChannelExecutor executeLater(Runnable runnable) {
     synchronized (lock) {
-      queue.add(runnable);
+      queue.add(checkNotNull(runnable, "runnable is null"));
     }
     return this;
   }

File: core/src/test/java/io/grpc/PickFirstLoadBalancer2Test.java
Patch:
@@ -72,7 +72,7 @@ public class PickFirstLoadBalancer2Test {
   private List<ResolvedServerInfoGroup> servers = Lists.newArrayList();
   private List<SocketAddress> socketAddresses = Lists.newArrayList();
 
-  private static Attributes.Key<String> FOO = Attributes.Key.of("foo");
+  private static final Attributes.Key<String> FOO = Attributes.Key.of("foo");
   private Attributes affinity = Attributes.newBuilder().set(FOO, "bar").build();
 
   @Captor

File: core/src/test/java/io/grpc/util/RoundRobinLoadBalancer2Test.java
Patch:
@@ -88,15 +88,13 @@ public class RoundRobinLoadBalancer2Test {
   private RoundRobinLoadBalancer loadBalancer;
   private Map<ResolvedServerInfoGroup, EquivalentAddressGroup> servers = Maps.newHashMap();
   private Map<EquivalentAddressGroup, Subchannel> subchannels = Maps.newLinkedHashMap();
-  private static Attributes.Key<String> MAJOR_KEY = Attributes.Key.of("major-key");
+  private static final Attributes.Key<String> MAJOR_KEY = Attributes.Key.of("major-key");
   private Attributes affinity = Attributes.newBuilder().set(MAJOR_KEY, "I got the keys").build();
 
   @Captor
   private ArgumentCaptor<Picker> pickerCaptor;
   @Captor
   private ArgumentCaptor<EquivalentAddressGroup> eagCaptor;
-  @Captor
-  private ArgumentCaptor<Attributes> attrsCaptor;
   @Mock
   private Helper mockHelper;
   @Mock

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -754,7 +754,7 @@ public void run() {
         // nothing, otherwise, we finish all streams since it's a real IO issue.
         startGoAway(0, ErrorCode.INTERNAL_ERROR,
             Status.UNAVAILABLE.withDescription("End of stream or IOException"));
-      } catch (Exception t) {
+      } catch (Throwable t) {
         // TODO(madongfly): Send the exception message to the server.
         startGoAway(0, ErrorCode.PROTOCOL_ERROR, Status.UNAVAILABLE.withCause(t));
       } finally {

File: netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java
Patch:
@@ -35,7 +35,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 
-import io.grpc.internal.ClientTransportFactory;
 import io.grpc.netty.InternalNettyChannelBuilder.OverrideAuthorityChecker;
 import io.grpc.netty.ProtocolNegotiators.TlsNegotiator;
 import io.netty.handler.ssl.SslContext;
@@ -66,7 +65,7 @@ public String checkAuthority(String authority) {
         return authority;
       }
     });
-    ClientTransportFactory factory = builder.overrideAuthority("[invalidauthority")
+    builder.overrideAuthority("[invalidauthority")
         .negotiationType(NegotiationType.PLAINTEXT)
         .buildTransportFactory();
   }
@@ -78,7 +77,7 @@ public void failOverrideInvalidAuthority() {
 
     NettyChannelBuilder builder = new NettyChannelBuilder(new SocketAddress(){});
 
-    ClientTransportFactory factory = builder.overrideAuthority("[invalidauthority")
+    builder.overrideAuthority("[invalidauthority")
         .negotiationType(NegotiationType.PLAINTEXT)
         .buildTransportFactory();
   }

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -148,9 +148,9 @@ public final class GrpcUtil {
    */
   public static final int DEFAULT_MAX_HEADER_LIST_SIZE = 8192;
 
-  public static final Splitter ACCEPT_ENCODING_SPLITER = Splitter.on(',').trimResults();
+  public static final Splitter ACCEPT_ENCODING_SPLITTER = Splitter.on(',').trimResults();
 
-  private static final String IMPLEMENTATION_VERION = getImplementationVersion();
+  private static final String IMPLEMENTATION_VERSION = getImplementationVersion();
 
   /**
    * The default delay in nanos before we send a keepalive.
@@ -336,7 +336,7 @@ public static String getGrpcUserAgent(
     }
     builder.append("grpc-java-");
     builder.append(transportName);
-    builder.append(IMPLEMENTATION_VERION);
+    builder.append(IMPLEMENTATION_VERSION);
     return builder.toString();
   }
 

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -34,7 +34,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
-import static io.grpc.internal.GrpcUtil.ACCEPT_ENCODING_SPLITER;
+import static io.grpc.internal.GrpcUtil.ACCEPT_ENCODING_SPLITTER;
 import static io.grpc.internal.GrpcUtil.MESSAGE_ACCEPT_ENCODING_KEY;
 import static io.grpc.internal.GrpcUtil.MESSAGE_ENCODING_KEY;
 
@@ -112,7 +112,7 @@ public void sendHeaders(Metadata headers) {
     } else {
       if (messageAcceptEncoding != null) {
         List<String> acceptedEncodingsList =
-            ACCEPT_ENCODING_SPLITER.splitToList(messageAcceptEncoding);
+            ACCEPT_ENCODING_SPLITTER.splitToList(messageAcceptEncoding);
         if (!acceptedEncodingsList.contains(compressor.getMessageEncoding())) {
           // resort to using no compression.
           compressor = Codec.Identity.NONE;

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -32,7 +32,7 @@
 package io.grpc.internal;
 
 import static com.google.common.truth.Truth.assertThat;
-import static io.grpc.internal.GrpcUtil.ACCEPT_ENCODING_SPLITER;
+import static io.grpc.internal.GrpcUtil.ACCEPT_ENCODING_SPLITTER;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -423,7 +423,7 @@ public InputStream decompress(InputStream is) throws IOException {
     ClientCallImpl.prepareHeaders(m, customRegistry, Codec.Identity.NONE, statsTraceCtx);
 
     Iterable<String> acceptedEncodings =
-        ACCEPT_ENCODING_SPLITER.split(m.get(GrpcUtil.MESSAGE_ACCEPT_ENCODING_KEY));
+        ACCEPT_ENCODING_SPLITTER.split(m.get(GrpcUtil.MESSAGE_ACCEPT_ENCODING_KEY));
 
     // Order may be different, since decoder priorities have not yet been implemented.
     assertEquals(ImmutableSet.of("b", "a"), ImmutableSet.copyOf(acceptedEncodings));

File: core/src/main/java/io/grpc/ServerServiceDefinition.java
Patch:
@@ -121,7 +121,8 @@ public <ReqT, RespT> Builder addMethod(ServerMethodDefinition<ReqT, RespT> def)
       MethodDescriptor<ReqT, RespT> method = def.getMethodDescriptor();
       checkArgument(
           serviceName.equals(MethodDescriptor.extractFullServiceName(method.getFullMethodName())),
-          "Service name mismatch. Expected service name: '%s'. Actual method name: '%s'.",
+          "Method name should be prefixed with service name and separated with '/'. "
+                  + "Expected service name: '%s'. Actual fully qualifed method name: '%s'.",
           serviceName, method.getFullMethodName());
       String name = method.getFullMethodName();
       checkState(!methods.containsKey(name), "Method by same name already registered: %s", name);

File: core/src/main/java/io/grpc/internal/InUseStateAggregator2.java
Patch:
@@ -75,8 +75,6 @@ final boolean isInUse() {
 
   /**
    * Called when the aggregated in-use state has changed to false, which means no object is in use.
-   *
-   * <p>This method is called under the lock returned by {@link #getLock}.
    */
   abstract void handleNotInUse();
 }

File: core/src/main/java/io/grpc/internal/InternalSubchannel.java
Patch:
@@ -447,7 +447,6 @@ public void transportTerminated() {
         log.log(Level.FINE, "[{0}] {1} for {2} is terminated",
             new Object[] {getLogId(), transport.getLogId(), address});
       }
-      boolean terminated = false;
       handleTransportInUseState(transport, false);
       synchronized (lock) {
         transports.remove(transport);

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -305,7 +305,7 @@ private static int calcDistance(Point start, Point end) {
           + cos(phi1) * cos(phi2) * sin(deltaLambda / 2) * sin(deltaLambda / 2);
       double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 
-      return (int) r * c;
+      return (int) (r * c);
     }
   }
 }

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -290,7 +290,7 @@ private Feature checkFeature(Point location) {
      * @param end The end point
      * @return The distance between the points in meters
      */
-    private static double calcDistance(Point start, Point end) {
+    private static int calcDistance(Point start, Point end) {
       double lat1 = RouteGuideUtil.getLatitude(start);
       double lat2 = RouteGuideUtil.getLatitude(end);
       double lon1 = RouteGuideUtil.getLongitude(start);
@@ -305,7 +305,7 @@ private static double calcDistance(Point start, Point end) {
           + cos(phi1) * cos(phi2) * sin(deltaLambda / 2) * sin(deltaLambda / 2);
       double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 
-      return r * c;
+      return (int) r * c;
     }
   }
 }

File: examples/src/test/java/io/grpc/examples/helloworld/HelloWorldClientTest.java
Patch:
@@ -35,7 +35,6 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 
-import io.grpc.ManagedChannelBuilder;
 import io.grpc.Server;
 import io.grpc.inprocess.InProcessChannelBuilder;
 import io.grpc.inprocess.InProcessServerBuilder;
@@ -72,7 +71,7 @@ public void setUp() throws Exception {
     String uniqueServerName = "fake server for " + getClass();
     fakeServer = InProcessServerBuilder
         .forName(uniqueServerName).directExecutor().addService(serviceImpl).build().start();
-    ManagedChannelBuilder channelBuilder =
+    InProcessChannelBuilder channelBuilder =
         InProcessChannelBuilder.forName(uniqueServerName).directExecutor();
     client = new HelloWorldClient(channelBuilder);
   }

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadServer.java
Patch:
@@ -93,7 +93,7 @@ final class LoadServer {
           new ByteBufOutputMarshaller(),
           new ByteBufOutputMarshaller());
 
-  private static final Logger LOG = Logger.getLogger(LoadServer.class.getName());
+  private static final Logger log = Logger.getLogger(LoadServer.class.getName());
 
   private final Server server;
   private final BenchmarkServiceImpl benchmarkService;
@@ -105,7 +105,7 @@ final class LoadServer {
   private long lastMarkCpuTime;
 
   LoadServer(Control.ServerConfig config) throws Exception {
-    LOG.log(Level.INFO, "Server Config \n" + config.toString());
+    log.log(Level.INFO, "Server Config \n" + config.toString());
     port = config.getPort() ==  0 ? Utils.pickUnusedPort() : config.getPort();
     ServerBuilder<?> serverBuilder = ServerBuilder.forPort(port);
     int asyncThreads = config.getAsyncServerThreads() == 0

File: core/src/main/java/io/grpc/ManagedChannelProvider.java
Patch:
@@ -110,7 +110,7 @@ public static Iterable<ManagedChannelProvider> getCandidatesViaHardCoded(
   @VisibleForTesting
   static ManagedChannelProvider create(Class<?> rawClass) {
     try {
-      return rawClass.asSubclass(ManagedChannelProvider.class).newInstance();
+      return rawClass.asSubclass(ManagedChannelProvider.class).getConstructor().newInstance();
     } catch (Throwable t) {
       throw new ServiceConfigurationError(
           "Provider " + rawClass.getName() + " could not be instantiated: " + t, t);

File: core/src/main/java/io/grpc/NameResolverProvider.java
Patch:
@@ -113,7 +113,7 @@ public static Iterable<NameResolverProvider> getCandidatesViaHardCoded(ClassLoad
   @VisibleForTesting
   static NameResolverProvider create(Class<?> rawClass) {
     try {
-      return rawClass.asSubclass(NameResolverProvider.class).newInstance();
+      return rawClass.asSubclass(NameResolverProvider.class).getConstructor().newInstance();
     } catch (Throwable t) {
       throw new ServiceConfigurationError(
           "Provider " + rawClass.getName() + " could not be instantiated: " + t, t);

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -635,7 +635,7 @@ private static byte[] toAsciiStringSlow(byte[] valueBytes, int ri) {
     public String parseAsciiString(byte[] value) {
       for (int i = 0; i < value.length; i++) {
         byte b = value[i];
-        if (b < ' ' || b >= '~' || b == '%' && i + 2 < value.length) {
+        if (b < ' ' || b >= '~' || (b == '%' && i + 2 < value.length)) {
           return parseAsciiStringSlow(value);
         }
       }

File: core/src/main/java/io/grpc/internal/CompositeReadableBuffer.java
Patch:
@@ -215,7 +215,7 @@ private void advanceBufferIfNecessary() {
    * A simple read operation to perform on a single {@link ReadableBuffer}. All state management for
    * the buffers is done by {@link CompositeReadableBuffer#execute(ReadOperation, int)}.
    */
-  private abstract class ReadOperation {
+  private abstract static class ReadOperation {
     /**
      * Only used by {@link CompositeReadableBuffer#readUnsignedByte()}.
      */

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -368,7 +368,7 @@ public void streamCreated(
       final StatsTraceContext statsTraceCtx = Preconditions.checkNotNull(
           stream.statsTraceContext(), "statsTraceCtx not present from stream");
 
-      final Context.CancellableContext context = createContext(stream, headers, statsTraceCtx);
+      final Context.CancellableContext context = createContext(stream, headers);
       final Executor wrappedExecutor;
       // This is a performance optimization that avoids the synchronization and queuing overhead
       // that comes with SerializingExecutor.
@@ -421,7 +421,7 @@ public void runInContext() {
     }
 
     private Context.CancellableContext createContext(
-        final ServerStream stream, Metadata headers, StatsTraceContext statsTraceCtx) {
+        final ServerStream stream, Metadata headers) {
       Long timeoutNanos = headers.get(TIMEOUT_KEY);
 
       // TODO(zhangkun83): attach the CensusContext from StatsTraceContext to baseContext

File: core/src/test/java/io/grpc/ResolvedServerInfoTest.java
Patch:
@@ -32,8 +32,8 @@
 package io.grpc;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
@@ -79,8 +79,8 @@ public void accessors() {
         Attributes.newBuilder().set(FOO, "bar").build());
 
     // sanity checks that they're not same instances
-    assertFalse(server1.getAddress() == server2.getAddress());
-    assertFalse(server1.getAttributes() == server2.getAttributes());
+    assertNotSame(server1.getAddress(), server2.getAddress());
+    assertNotSame(server1.getAttributes(), server2.getAttributes());
 
     assertEquals(server1, server2);
     assertEquals(server1.hashCode(), server2.hashCode()); // hash code must be consistent

File: testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java
Patch:
@@ -1150,7 +1150,6 @@ public MockServerTransportListener takeListenerOrFail(long timeout, TimeUnit uni
   private static class MockServerTransportListener implements ServerTransportListener {
     public final ServerTransport transport;
     public final BlockingQueue<StreamCreation> streams = new LinkedBlockingQueue<StreamCreation>();
-    private final SettableFuture<?> ready = SettableFuture.create();
     private final SettableFuture<?> terminated = SettableFuture.create();
 
     public MockServerTransportListener(ServerTransport transport) {

File: examples/android/helloworld/app/src/main/java/io/grpc/helloworldexample/HelloworldActivity.java
Patch:
@@ -109,7 +109,7 @@ protected String doInBackground(Void... nothing) {
                 PrintWriter pw = new PrintWriter(sw);
                 e.printStackTrace(pw);
                 pw.flush();
-                return "Failed... : " + System.lineSeparator() + sw;
+                return String.format("Failed... : %n%s", sw);
             }
         }
 

File: core/src/main/java/io/grpc/internal/NoopCensusContextFactory.java
Patch:
@@ -40,7 +40,7 @@
 import java.nio.ByteBuffer;
 
 public final class NoopCensusContextFactory extends CensusContextFactory {
-  private static final ByteBuffer SERIALIZED_BYTES = ByteBuffer.allocate(0).asReadOnlyBuffer();
+  private static final byte[] SERIALIZED_BYTES = new byte[0];
   private static final CensusContext DEFAULT_CONTEXT = new NoopCensusContext();
   private static final CensusContext.Builder BUILDER = new NoopContextBuilder();
 
@@ -72,7 +72,7 @@ public CensusContext record(MetricMap metrics) {
 
     @Override
     public ByteBuffer serialize() {
-      return SERIALIZED_BYTES;
+      return ByteBuffer.wrap(SERIALIZED_BYTES).asReadOnlyBuffer();
     }
   }
 

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -362,8 +362,8 @@ public StatsTraceContext methodDetermined(String methodName, Metadata headers) {
     }
 
     @Override
-    public ServerStreamListener streamCreated(final ServerStream stream, final String methodName,
-        final Metadata headers) {
+    public void streamCreated(
+        final ServerStream stream, final String methodName, final Metadata headers) {
 
       final StatsTraceContext statsTraceCtx = Preconditions.checkNotNull(
           stream.statsTraceContext(), "statsTraceCtx not present from stream");
@@ -380,6 +380,7 @@ public ServerStreamListener streamCreated(final ServerStream stream, final Strin
 
       final JumpToApplicationThreadServerStreamListener jumpListener
           = new JumpToApplicationThreadServerStreamListener(wrappedExecutor, stream, context);
+      stream.setListener(jumpListener);
       // Run in wrappedExecutor so jumpListener.setListener() is called before any callbacks
       // are delivered, including any errors. Callbacks can still be triggered, but they will be
       // queued.
@@ -417,7 +418,6 @@ public void runInContext() {
             }
           }
         });
-      return jumpListener;
     }
 
     private Context.CancellableContext createContext(

File: core/src/main/java/io/grpc/internal/ServerTransportListener.java
Patch:
@@ -54,10 +54,8 @@ public interface ServerTransportListener {
    * @param stream the newly created stream.
    * @param method the fully qualified method name being called on the server.
    * @param headers containing metadata for the call.
-   * @return a listener for events on the new stream.
    */
-  ServerStreamListener streamCreated(ServerStream stream, String method,
-      Metadata headers);
+  void streamCreated(ServerStream stream, String method, Metadata headers);
 
   /**
    * The transport has finished all handshakes and is ready to process streams.

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -474,11 +474,10 @@ public StatsTraceContext methodDetermined(String method, Metadata headers) {
         }
 
         @Override
-        public ServerStreamListener streamCreated(
-            ServerStream stream, String method, Metadata headers) {
+        public void streamCreated(ServerStream stream, String method, Metadata headers) {
           EchoServerStreamListener listener = new EchoServerStreamListener(stream, method, headers);
+          stream.setListener(listener);
           streamListeners.add(listener);
-          return listener;
         }
 
         @Override

File: testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java
Patch:
@@ -1163,11 +1163,10 @@ public StatsTraceContext methodDetermined(String method, Metadata headers) {
     }
 
     @Override
-    public ServerStreamListener streamCreated(ServerStream stream, String method,
-        Metadata headers) {
+    public void streamCreated(ServerStream stream, String method, Metadata headers) {
       ServerStreamListener listener = mock(ServerStreamListener.class);
       streams.add(new StreamCreation(stream, method, headers, listener));
-      return listener;
+      stream.setListener(listener);
     }
 
     @Override

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadServer.java
Patch:
@@ -60,7 +60,7 @@
 import java.io.File;
 import java.lang.management.ManagementFactory;
 import java.util.List;
-import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory;
 import java.util.concurrent.ForkJoinWorkerThread;
@@ -165,7 +165,7 @@ final class LoadServer {
     }
   }
 
-  Executor getExecutor(int asyncThreads) {
+  ExecutorService getExecutor(int asyncThreads) {
     // TODO(carl-mastrangelo): This should not be necessary.  I don't know where this should be
     // put.  Move it somewhere else, or remove it if no longer necessary.
     // See: https://github.com/grpc/grpc-java/issues/2119

File: core/src/test/java/io/grpc/internal/Http2ClientStreamTransportStateTest.java
Patch:
@@ -276,6 +276,7 @@ public void transportTrailersReceived_missingStatusUsesHttpStatus() {
     verify(mockListener, never()).headersRead(any(Metadata.class));
     verify(mockListener).closed(statusCaptor.capture(), same(trailers));
     assertEquals(Code.UNAUTHENTICATED, statusCaptor.getValue().getCode());
+    assertTrue(statusCaptor.getValue().getDescription().contains("401"));
   }
 
   @Test

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -185,7 +185,7 @@ public static Status httpStatusToGrpcStatus(int httpStatusCode) {
     }
     if (httpStatusCode < 300) {
       // 2xx
-      return Status.OK;
+      return Status.UNKNOWN;
     }
     return Status.UNKNOWN;
   }

File: netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java
Patch:
@@ -288,7 +288,7 @@ public void invalidInboundContentTypeShouldCancelStream() {
     ArgumentCaptor<Metadata> metadataCaptor = ArgumentCaptor.forClass(Metadata.class);
     verify(listener).closed(captor.capture(), metadataCaptor.capture());
     Status status = captor.getValue();
-    assertEquals(Status.Code.INTERNAL, status.getCode());
+    assertEquals(Status.Code.UNKNOWN, status.getCode());
     assertTrue(status.getDescription().contains("content-type"));
     assertEquals("application/bad", metadataCaptor.getValue()
         .get(Metadata.Key.of("Content-Type", Metadata.ASCII_STRING_MARSHALLER)));

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -1413,7 +1413,8 @@ private List<Header> grpcResponseHeaders() {
   private List<Header> grpcResponseTrailers() {
     return ImmutableList.of(
         new Header(Status.CODE_KEY.name(), "0"),
-        // Adding Content-Type for testing responses with only a single HEADERS frame.
+        // Adding Content-Type and :status for testing responses with only a single HEADERS frame.
+        new Header(":status", "200"),
         CONTENT_TYPE_HEADER);
   }
 

File: interop-testing/src/test/java/io/grpc/testing/integration/NettyFlowControlTest.java
Patch:
@@ -209,7 +209,7 @@ private void startServer(int serverFlowControlWindow) {
   /**
    * Simple stream observer to measure elapsed time of the call.
    */
-  private class TestStreamObserver implements StreamObserver<StreamingOutputCallResponse> {
+  private static class TestStreamObserver implements StreamObserver<StreamingOutputCallResponse> {
 
     long startRequestNanos;
     long endRequestNanos;
@@ -238,7 +238,6 @@ public void onError(Throwable t) {
 
     @Override
     public void onCompleted() {
-      long endRequestNanos = System.nanoTime();
       latch.countDown();
     }
 

File: interop-testing/src/test/java/io/grpc/testing/integration/AutoWindowSizingOnTest.java
Patch:
@@ -47,6 +47,7 @@ public class AutoWindowSizingOnTest extends AbstractInteropTest {
 
   @BeforeClass
   public static void turnOnAutoWindow() {
+    HandlerSettings.enable(true);
     HandlerSettings.autoWindowOn(true);
     startStaticServer(
         NettyServerBuilder.forPort(0)

File: interop-testing/src/test/java/io/grpc/testing/integration/NettyFlowControlTest.java
Patch:
@@ -94,6 +94,7 @@ public class NettyFlowControlTest {
 
   @BeforeClass
   public static void setUp() {
+    HandlerSettings.enable(true);
     HandlerSettings.autoWindowOn(true);
   }
 

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -284,8 +284,8 @@ public void maxHeaderListSizeShouldBeEnforcedOnServer()  throws Exception {
           + " size limit!");
     } catch (Exception e) {
       Throwable rootCause = getRootCause(e);
-      assertTrue(rootCause.getMessage(),
-          rootCause.getMessage().contains("Header size exceeded max allowed size (1)"));
+      assertTrue(rootCause instanceof StatusException);
+      assertEquals(Status.INTERNAL.getCode(), ((StatusException) rootCause).getStatus().getCode());
     }
   }
 

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -245,12 +245,13 @@ public void messageRead(final InputStream message) {
         try {
           message.close();
         } catch (IOException e) {
+          throw new RuntimeException(e);
+        } finally {
           if (t != null) {
             // TODO(carl-mastrangelo): Maybe log e here.
             Throwables.propagateIfPossible(t);
             throw new RuntimeException(t);
           }
-          throw new RuntimeException(e);
         }
       }
     }

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -377,10 +377,10 @@ public static String authorityFromHostAndPort(String host, int port) {
    */
   public static final Resource<ExecutorService> SHARED_CHANNEL_EXECUTOR =
       new Resource<ExecutorService>() {
-        private static final String name = "grpc-default-executor";
+        private static final String NAME = "grpc-default-executor";
         @Override
         public ExecutorService create() {
-          return Executors.newCachedThreadPool(getThreadFactory(name + "-%d", true));
+          return Executors.newCachedThreadPool(getThreadFactory(NAME + "-%d", true));
         }
 
         @Override
@@ -390,7 +390,7 @@ public void close(ExecutorService instance) {
 
         @Override
         public String toString() {
-          return name;
+          return NAME;
         }
       };
 

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -683,7 +683,7 @@ public String getLogId() {
     return GrpcUtil.getLogId(this);
   }
 
-  private class NameResolverListenerImpl implements NameResolver.Listener {
+  private static class NameResolverListenerImpl implements NameResolver.Listener {
     final LoadBalancer<ClientTransport> balancer;
 
     NameResolverListenerImpl(LoadBalancer<ClientTransport> balancer) {

File: core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java
Patch:
@@ -61,7 +61,7 @@
  */
 @RunWith(JUnit4.class)
 public class AbstractServerStreamTest {
-  private static int MAX_MESSAGE_SIZE = 100;
+  private static final int MAX_MESSAGE_SIZE = 100;
 
   @Rule public final ExpectedException thrown = ExpectedException.none();
 

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -99,7 +99,6 @@ public class NettyClientTransportTest {
 
   private final List<NettyClientTransport> transports = new ArrayList<NettyClientTransport>();
   private final NioEventLoopGroup group = new NioEventLoopGroup(1);
-  private final StatsTraceContext statsTraceCtx = StatsTraceContext.NOOP;
 
   private InetSocketAddress address;
   private String authority;
@@ -347,7 +346,7 @@ private static class Rpc {
       stream = transport.newStream(METHOD, headers);
       stream.start(listener);
       stream.request(1);
-      stream.writeMessage(new ByteArrayInputStream(MESSAGE.getBytes()));
+      stream.writeMessage(new ByteArrayInputStream(MESSAGE.getBytes(UTF_8)));
       stream.flush();
     }
 

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -833,7 +833,6 @@ public void uriPattern() {
   @Test
   public void informationPropagatedToNewStreamAndCallCredentials() {
     createChannel(new FakeNameResolverFactory(true), NO_INTERCEPTOR);
-    Metadata headers = new Metadata();
     CallOptions callOptions = CallOptions.DEFAULT.withCallCredentials(creds);
     final Context.Key<String> testKey = Context.key("testing");
     Context ctx = Context.current().withValue(testKey, "testValue");

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -80,7 +80,6 @@
 import io.netty.handler.logging.LogLevel;
 
 import java.nio.channels.ClosedChannelException;
-import java.util.Random;
 import java.util.concurrent.Executor;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -108,7 +107,6 @@ class NettyClientHandler extends AbstractNettyHandler {
   private final Http2Connection.PropertyKey streamKey;
   private final ClientTransportLifecycleManager lifecycleManager;
   private final Ticker ticker;
-  private final Random random = new Random();
   private WriteQueue clientWriteQueue;
   private Http2Ping ping;
 

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -566,7 +566,7 @@ public void onFailure(Throwable cause) {
     }
   }
 
-  class TransportStateImpl extends NettyClientStream.TransportState {
+  private static class TransportStateImpl extends NettyClientStream.TransportState {
     public TransportStateImpl(NettyClientHandler handler, int maxMessageSize) {
       super(handler, maxMessageSize);
     }

File: netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java
Patch:
@@ -440,7 +440,7 @@ private Http2Headers grpcResponseTrailers(Status status) {
     return Utils.convertTrailers(trailers, true);
   }
 
-  class TransportStateImpl extends NettyClientStream.TransportState {
+  private static class TransportStateImpl extends NettyClientStream.TransportState {
     public TransportStateImpl(NettyClientHandler handler, int maxMessageSize) {
       super(handler, maxMessageSize);
     }

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -33,7 +33,6 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
-import static io.grpc.netty.Utils.CONTENT_TYPE_GRPC;
 import static io.grpc.netty.Utils.CONTENT_TYPE_HEADER;
 import static io.grpc.netty.Utils.HTTP_METHOD;
 import static io.grpc.netty.Utils.TE_HEADER;
@@ -420,7 +419,6 @@ private String determineMethod(int streamId, Http2Headers headers) throws Http2E
       throw Http2Exception.streamError(streamId, Http2Error.REFUSED_STREAM,
           "Method '%s' is not supported", headers.method());
     }
-    checkHeader(streamId, headers, CONTENT_TYPE_HEADER, CONTENT_TYPE_GRPC);
     // Remove the leading slash of the path and get the fully qualified method name
     CharSequence path = headers.path();
     if (path.charAt(0) != '/') {

File: netty/src/main/java/io/grpc/netty/GrpcHttp2ConnectionHandler.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * gRPC wrapper for {@link Http2ConnectionHandler}.
  */
-abstract class GrpcHttp2ConnectionHandler extends Http2ConnectionHandler {
+public abstract class GrpcHttp2ConnectionHandler extends Http2ConnectionHandler {
   public GrpcHttp2ConnectionHandler(Http2ConnectionDecoder decoder,
       Http2ConnectionEncoder encoder,
       Http2Settings initialSettings) {

File: core/src/test/java/io/grpc/internal/AbstractManagedChannelImplBuilderTest.java
Patch:
@@ -75,7 +75,8 @@ public Builder usePlaintext(boolean value) {
 
     Builder builder = new Builder();
 
-    assertEquals(ManagedChannelImpl.IDLE_TIMEOUT_MILLIS_DISABLE, builder.getIdleTimeoutMillis());
+    assertEquals(AbstractManagedChannelImplBuilder.IDLE_MODE_DEFAULT_TIMEOUT_MILLIS,
+        builder.getIdleTimeoutMillis());
 
     builder.idleTimeout(Long.MAX_VALUE, TimeUnit.DAYS);
     assertEquals(ManagedChannelImpl.IDLE_TIMEOUT_MILLIS_DISABLE, builder.getIdleTimeoutMillis());

File: core/src/test/java/io/grpc/internal/TransportFrameUtilTest.java
Patch:
@@ -41,6 +41,7 @@
 
 import com.google.common.io.BaseEncoding;
 
+import io.grpc.InternalMetadata;
 import io.grpc.Metadata;
 import io.grpc.Metadata.BinaryMarshaller;
 import io.grpc.Metadata.Key;
@@ -110,7 +111,7 @@ public void testToAndFromHttp2Headers() {
     headers.put(BINARY_STRING_WITHOUT_SUFFIX, NONCOMPLIANT_ASCII_STRING);
     byte[][] http2Headers = TransportFrameUtil.toHttp2Headers(headers);
     byte[][] rawSerialized = TransportFrameUtil.toRawSerializedHeaders(http2Headers);
-    Metadata recoveredHeaders = new Metadata(rawSerialized);
+    Metadata recoveredHeaders = InternalMetadata.newMetadata(rawSerialized);
     assertEquals(COMPLIANT_ASCII_STRING, recoveredHeaders.get(PLAIN_STRING));
     assertEquals(NONCOMPLIANT_ASCII_STRING, recoveredHeaders.get(BINARY_STRING));
     assertNull(recoveredHeaders.get(BINARY_STRING_WITHOUT_SUFFIX));

File: okhttp/src/main/java/io/grpc/okhttp/Utils.java
Patch:
@@ -33,6 +33,7 @@
 
 import com.google.common.base.Preconditions;
 
+import io.grpc.InternalMetadata;
 import io.grpc.Metadata;
 import io.grpc.internal.TransportFrameUtil;
 import io.grpc.okhttp.internal.CipherSuite;
@@ -49,11 +50,11 @@ class Utils {
   static final int CONNECTION_STREAM_ID = 0;
 
   public static Metadata convertHeaders(List<Header> http2Headers) {
-    return new Metadata(convertHeadersToArray(http2Headers));
+    return InternalMetadata.newMetadata(convertHeadersToArray(http2Headers));
   }
 
   public static Metadata convertTrailers(List<Header> http2Headers) {
-    return new Metadata(convertHeadersToArray(http2Headers));
+    return InternalMetadata.newMetadata(convertHeadersToArray(http2Headers));
   }
 
   private static byte[][] convertHeadersToArray(List<Header> http2Headers) {

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -149,7 +149,6 @@ public void start(ClientStreamListener listener) {
 
   @GuardedBy("lock")
   public void start(int id) {
-    checkNotNull(id, "id");
     checkState(this.id == ABSENT_ID, "the stream has been started with id %s", this.id);
     this.id = id;
 

File: core/src/main/java/io/grpc/internal/Http2Ping.java
Patch:
@@ -174,7 +174,7 @@ public void failed(Throwable failureCause) {
       this.callbacks = null;
     }
     for (Map.Entry<ClientTransport.PingCallback, Executor> entry : callbacks.entrySet()) {
-      doExecute(entry.getValue(), asRunnable(entry.getKey(), failureCause));
+      notifyFailed(entry.getKey(), entry.getValue(), failureCause);
     }
   }
 

File: benchmarks/src/jmh/java/io/grpc/netty/OutboundHeadersBenchmark.java
Patch:
@@ -56,7 +56,7 @@
  * Header encoding benchmark.
  */
 @State(Scope.Benchmark)
-public class HeadersBenchmark {
+public class OutboundHeadersBenchmark {
   @Param({"1", "5", "10", "20"})
   public int headerCount;
 

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -62,6 +62,8 @@
 import io.grpc.StatusException;
 import io.grpc.internal.ClientTransport;
 import io.grpc.internal.ClientTransport.PingCallback;
+import io.grpc.internal.GrpcUtil;
+import io.grpc.netty.GrpcHttp2HeadersDecoder.GrpcHttp2ClientHeadersDecoder;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;
@@ -115,7 +117,7 @@ public void setUp() throws Exception {
     MockitoAnnotations.initMocks(this);
     lifecycleManager = new ClientTransportLifecycleManager(listener);
 
-    initChannel();
+    initChannel(new GrpcHttp2ClientHeadersDecoder(GrpcUtil.DEFAULT_MAX_HEADER_LIST_SIZE));
 
     grpcHeaders = new DefaultHttp2Headers()
         .scheme(HTTPS)

File: netty/src/test/java/io/grpc/netty/NettyHandlerTestBase.java
Patch:
@@ -91,10 +91,10 @@ public abstract class NettyHandlerTestBase<T extends Http2ConnectionHandler> {
   /**
    * Must be called by subclasses to initialize the handler and channel.
    */
-  protected final void initChannel() throws Exception {
+  protected final void initChannel(GrpcHttp2HeadersDecoder headersDecoder) throws Exception {
     content = Unpooled.copiedBuffer("hello world", UTF_8);
     frameWriter = spy(new DefaultHttp2FrameWriter());
-    frameReader = new DefaultHttp2FrameReader();
+    frameReader = new DefaultHttp2FrameReader(headersDecoder);
 
     handler = newHandler();
 

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -101,7 +101,7 @@
  *           call.halfClose();
  *           return;
  *         }
- *         call.sendMessage(makeNextRequest());
+ *         call.sendMessage(nextRequest);
  *       }
  *     }
  *   }

File: core/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -166,9 +166,9 @@ public static <RequestT, ResponseT> MethodDescriptor<RequestT, ResponseT> create
 
   private MethodDescriptor(
       MethodType type, String fullMethodName,
-       Marshaller<ReqT> requestMarshaller,
-       Marshaller<RespT> responseMarshaller,
-       boolean idempotent) {
+      Marshaller<ReqT> requestMarshaller,
+      Marshaller<RespT> responseMarshaller,
+      boolean idempotent) {
     this.type = Preconditions.checkNotNull(type, "type");
     this.fullMethodName = Preconditions.checkNotNull(fullMethodName, "fullMethodName");
     this.requestMarshaller = Preconditions.checkNotNull(requestMarshaller, "requestMarshaller");

File: core/src/main/java/io/grpc/internal/Http2ClientStream.java
Patch:
@@ -137,7 +137,8 @@ protected void transportDataReceived(ReadableBuffer frame, boolean endOfStream)
       inboundDataReceived(frame);
       if (endOfStream) {
         // This is a protocol violation as we expect to receive trailers.
-        transportError = Status.INTERNAL.withDescription("Received EOS on DATA frame");
+        transportError =
+            Status.INTERNAL.withDescription("Received unexpected EOS on DATA frame from server.");
         transportErrorMetadata = new Metadata();
         inboundTransportError(transportError, transportErrorMetadata);
       }

File: auth/src/main/java/io/grpc/auth/ClientAuthInterceptor.java
Patch:
@@ -70,7 +70,7 @@ public final class ClientAuthInterceptor implements ClientInterceptor {
 
   public ClientAuthInterceptor(
       Credentials credentials, @SuppressWarnings("unused") Executor executor) {
-    this.credentials = Preconditions.checkNotNull(credentials);
+    this.credentials = Preconditions.checkNotNull(credentials, "credentials");
     // TODO(louiscryan): refresh token asynchronously with this executor.
   }
 

File: core/src/main/java/io/grpc/ClientInterceptors.java
Patch:
@@ -98,7 +98,7 @@ public static Channel intercept(Channel channel, ClientInterceptor... intercepto
    * @return a new channel instance with the interceptors applied.
    */
   public static Channel intercept(Channel channel, List<? extends ClientInterceptor> interceptors) {
-    Preconditions.checkNotNull(channel);
+    Preconditions.checkNotNull(channel, "channel");
     for (ClientInterceptor interceptor : interceptors) {
       channel = new InterceptorChannel(channel, interceptor);
     }

File: core/src/main/java/io/grpc/Deadline.java
Patch:
@@ -60,7 +60,7 @@ public static Deadline after(long duration, TimeUnit units) {
 
   @VisibleForTesting
   static Deadline after(long duration, TimeUnit units, Ticker ticker) {
-    Preconditions.checkNotNull(units);
+    Preconditions.checkNotNull(units, "units");
     return new Deadline(ticker, units.toNanos(duration), true);
   }
 

File: core/src/main/java/io/grpc/DecompressorRegistry.java
Patch:
@@ -160,7 +160,7 @@ private static final class DecompressorInfo {
     final boolean advertised;
 
     DecompressorInfo(Decompressor decompressor, boolean advertised) {
-      this.decompressor = checkNotNull(decompressor);
+      this.decompressor = checkNotNull(decompressor, "decompressor");
       this.advertised = advertised;
     }
   }

File: core/src/main/java/io/grpc/ServerInterceptors.java
Patch:
@@ -105,7 +105,7 @@ public static ServerServiceDefinition intercept(ServerServiceDefinition serviceD
 
   public static ServerServiceDefinition intercept(BindableService bindableService,
       ServerInterceptor... interceptors) {
-    Preconditions.checkNotNull(bindableService);
+    Preconditions.checkNotNull(bindableService, "bindableService");
     return intercept(bindableService.bindService(), Arrays.asList(interceptors));
   }
 
@@ -120,7 +120,7 @@ public static ServerServiceDefinition intercept(BindableService bindableService,
    */
   public static ServerServiceDefinition intercept(ServerServiceDefinition serviceDef,
                                                   List<? extends ServerInterceptor> interceptors) {
-    Preconditions.checkNotNull(serviceDef);
+    Preconditions.checkNotNull(serviceDef, "serviceDef");
     if (interceptors.isEmpty()) {
       return serviceDef;
     }
@@ -134,7 +134,7 @@ public static ServerServiceDefinition intercept(ServerServiceDefinition serviceD
 
   public static ServerServiceDefinition intercept(BindableService bindableService,
       List<? extends ServerInterceptor> interceptors) {
-    Preconditions.checkNotNull(bindableService);
+    Preconditions.checkNotNull(bindableService, "bindableService");
     return intercept(bindableService.bindService(), interceptors);
   }
 

File: core/src/main/java/io/grpc/ServerServiceDefinition.java
Patch:
@@ -59,7 +59,7 @@ public static Builder builder(ServiceDescriptor serviceDescriptor) {
 
   private ServerServiceDefinition(
       ServiceDescriptor serviceDescriptor, Map<String, ServerMethodDefinition<?, ?>> methods) {
-    this.serviceDescriptor = checkNotNull(serviceDescriptor);
+    this.serviceDescriptor = checkNotNull(serviceDescriptor, "serviceDescriptor");
     this.methods = ImmutableMap.copyOf(methods);
   }
 

File: core/src/main/java/io/grpc/ServiceDescriptor.java
Patch:
@@ -51,7 +51,7 @@ public ServiceDescriptor(String name, MethodDescriptor<?, ?>... methods) {
   }
 
   public ServiceDescriptor(String name, Collection<MethodDescriptor<?, ?>> methods) {
-    this.name = Preconditions.checkNotNull(name);
+    this.name = Preconditions.checkNotNull(name, "name");
     this.methods = Collections.unmodifiableList(new ArrayList<MethodDescriptor<?, ?>>(methods));
   }
 

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -406,7 +406,7 @@ public String parseAsciiString(String value) {
    * @return non-{@code null} status
    */
   public static Status fromThrowable(Throwable t) {
-    Throwable cause = checkNotNull(t);
+    Throwable cause = checkNotNull(t, "t");
     while (cause != null) {
       if (cause instanceof StatusException) {
         return ((StatusException) cause).getStatus();
@@ -426,7 +426,7 @@ public static Status fromThrowable(Throwable t) {
    */
   @ExperimentalApi
   public static Metadata trailersFromThrowable(Throwable t) {
-    Throwable cause = checkNotNull(t);
+    Throwable cause = checkNotNull(t, "t");
     while (cause != null) {
       if (cause instanceof StatusException) {
         return ((StatusException) cause).getTrailers();
@@ -455,7 +455,7 @@ private Status(Code code) {
   }
 
   private Status(Code code, @Nullable String description, @Nullable Throwable cause) {
-    this.code = checkNotNull(code);
+    this.code = checkNotNull(code, "code");
     this.description = description;
     this.cause = cause;
   }

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -64,7 +64,7 @@ public static InProcessChannelBuilder forName(String name) {
 
   private InProcessChannelBuilder(String name) {
     super(new InProcessSocketAddress(name), "localhost");
-    this.name = Preconditions.checkNotNull(name);
+    this.name = Preconditions.checkNotNull(name, "name");
   }
 
   /**

File: core/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -233,8 +233,8 @@ private class InProcessStream {
     private MethodDescriptor<?, ?> method;
 
     private InProcessStream(MethodDescriptor<?, ?> method, Metadata headers) {
-      this.method = checkNotNull(method);
-      this.headers = checkNotNull(headers);
+      this.method = checkNotNull(method, "method");
+      this.headers = checkNotNull(headers, "headers");
 
     }
 

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -112,7 +112,7 @@ public abstract class AbstractManagedChannelImplBuilder
   private long idleTimeoutMillis = ManagedChannelImpl.IDLE_TIMEOUT_MILLIS_DISABLE;
 
   protected AbstractManagedChannelImplBuilder(String target) {
-    this.target = Preconditions.checkNotNull(target);
+    this.target = Preconditions.checkNotNull(target, "target");
     this.directServerAddress = null;
   }
 

File: core/src/main/java/io/grpc/internal/AbstractServerStream.java
Patch:
@@ -177,7 +177,7 @@ protected TransportState(int maxMessageSize) {
      * thread.
      */
     public final void setListener(ServerStreamListener listener) {
-      this.listener = Preconditions.checkNotNull(listener);
+      this.listener = Preconditions.checkNotNull(listener, "listener");
 
       // Now that the stream has actually been initialized, call the listener's onReady callback if
       // appropriate.

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -166,7 +166,7 @@ public int getOnReadyThreshold() {
 
   @Override
   public void writeMessage(InputStream message) {
-    checkNotNull(message);
+    checkNotNull(message, "message");
     outboundPhase(Phase.MESSAGE);
     if (!framer.isClosed()) {
       framer.writePayload(message);

File: core/src/main/java/io/grpc/internal/AbstractStream2.java
Patch:
@@ -65,7 +65,7 @@ public final void setMessageCompression(boolean enable) {
 
   @Override
   public final void writeMessage(InputStream message) {
-    checkNotNull(message);
+    checkNotNull(message, "message");
     if (!framer().isClosed()) {
       framer().writePayload(message);
     }

File: core/src/main/java/io/grpc/internal/Http2ClientStream.java
Patch:
@@ -82,7 +82,7 @@ protected Http2ClientStream(WritableBufferAllocator bufferAllocator,
    * @param headers the received headers
    */
   protected void transportHeadersReceived(Metadata headers) {
-    Preconditions.checkNotNull(headers);
+    Preconditions.checkNotNull(headers, "headers");
     if (transportError != null) {
       // Already received a transport error so just augment it.
       transportError = transportError.augmentDescription(headers.toString());
@@ -150,7 +150,7 @@ protected void transportDataReceived(ReadableBuffer frame, boolean endOfStream)
    * @param trailers the received terminal trailer metadata
    */
   protected void transportTrailersReceived(Metadata trailers) {
-    Preconditions.checkNotNull(trailers);
+    Preconditions.checkNotNull(trailers, "trailers");
     if (transportError != null) {
       // Already received a transport error so just augment it.
       transportError = transportError.augmentDescription(trailers.toString());

File: core/src/main/java/io/grpc/internal/LogExceptionRunnable.java
Patch:
@@ -49,7 +49,7 @@ public final class LogExceptionRunnable implements Runnable {
   private final Runnable task;
 
   public LogExceptionRunnable(Runnable task) {
-    this.task = checkNotNull(task);
+    this.task = checkNotNull(task, "task");
   }
 
   @Override

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -123,7 +123,7 @@ public final class ServerImpl extends io.grpc.Server {
     this.transportServer = Preconditions.checkNotNull(transportServer, "transportServer");
     // Fork from the passed in context so that it does not propagate cancellation, it only
     // inherits values.
-    this.rootContext = Preconditions.checkNotNull(rootContext).fork();
+    this.rootContext = Preconditions.checkNotNull(rootContext, "rootContext").fork();
     this.decompressorRegistry = decompressorRegistry;
     this.compressorRegistry = compressorRegistry;
   }

File: interop-testing/src/main/java/io/grpc/testing/integration/TestCases.java
Patch:
@@ -71,7 +71,7 @@ public String description() {
    * matching is done case insensitive.
    */
   public static TestCases fromString(String s) {
-    Preconditions.checkNotNull(s);
+    Preconditions.checkNotNull(s, "s");
     return TestCases.valueOf(s.toUpperCase());
   }
 }

File: netty/src/main/java/io/grpc/netty/CancelClientStreamCommand.java
Patch:
@@ -44,7 +44,7 @@ class CancelClientStreamCommand extends WriteQueue.AbstractQueuedCommand {
 
   CancelClientStreamCommand(NettyClientStream stream, Status reason) {
     this.stream = Preconditions.checkNotNull(stream, "stream");
-    Preconditions.checkNotNull(reason);
+    Preconditions.checkNotNull(reason, "reason");
     Preconditions.checkArgument(!reason.isOk(), "Should not cancel with OK status");
     this.reason = reason;
   }

File: netty/src/main/java/io/grpc/netty/CancelServerStreamCommand.java
Patch:
@@ -45,8 +45,8 @@ class CancelServerStreamCommand extends WriteQueue.AbstractQueuedCommand {
   private final Status reason;
 
   CancelServerStreamCommand(NettyServerStream.TransportState stream, Status reason) {
-    this.stream = Preconditions.checkNotNull(stream);
-    this.reason = Preconditions.checkNotNull(reason);
+    this.stream = Preconditions.checkNotNull(stream, "stream");
+    this.reason = Preconditions.checkNotNull(reason, "reason");
   }
 
   NettyServerStream.TransportState stream() {

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -124,7 +124,7 @@ private static String getAuthorityFromAddress(SocketAddress address) {
    * Specify the channel type to use, by default we use {@link NioSocketChannel}.
    */
   public final NettyChannelBuilder channelType(Class<? extends Channel> channelType) {
-    this.channelType = Preconditions.checkNotNull(channelType);
+    this.channelType = Preconditions.checkNotNull(channelType, "channelType");
     return this;
   }
 

File: netty/src/main/java/io/grpc/netty/NettyServerBuilder.java
Patch:
@@ -104,7 +104,7 @@ private NettyServerBuilder(SocketAddress address) {
    * Specify the channel type to use, by default we use {@link NioServerSocketChannel}.
    */
   public NettyServerBuilder channelType(Class<? extends ServerChannel> channelType) {
-    this.channelType = Preconditions.checkNotNull(channelType);
+    this.channelType = Preconditions.checkNotNull(channelType, "channelType");
     return this;
   }
 

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -223,8 +223,8 @@ static final class TlsNegotiator implements ProtocolNegotiator {
     private final int port;
 
     TlsNegotiator(SslContext sslContext, String host, int port) {
-      this.sslContext = checkNotNull(sslContext);
-      this.host = checkNotNull(host);
+      this.sslContext = checkNotNull(sslContext, "sslContext");
+      this.host = checkNotNull(host, "host");
       this.port = port;
     }
 

File: netty/src/main/java/io/grpc/netty/SendResponseHeadersCommand.java
Patch:
@@ -44,8 +44,8 @@ class SendResponseHeadersCommand extends WriteQueue.AbstractQueuedCommand {
   private final boolean endOfStream;
 
   SendResponseHeadersCommand(StreamIdHolder stream, Http2Headers headers, boolean endOfStream) {
-    this.stream = Preconditions.checkNotNull(stream);
-    this.headers = Preconditions.checkNotNull(headers);
+    this.stream = Preconditions.checkNotNull(stream, "stream");
+    this.headers = Preconditions.checkNotNull(headers, "headers");
     this.endOfStream = endOfStream;
   }
 

File: okhttp/src/main/java/io/grpc/okhttp/AsyncFrameWriter.java
Patch:
@@ -70,8 +70,8 @@ public AsyncFrameWriter(OkHttpClientTransport transport, SerializingExecutor exe
   void becomeConnected(FrameWriter frameWriter, Socket socket) {
     Preconditions.checkState(this.frameWriter == null,
         "AsyncFrameWriter's setFrameWriter() should only be called once.");
-    this.frameWriter = Preconditions.checkNotNull(frameWriter);
-    this.socket = Preconditions.checkNotNull(socket);
+    this.frameWriter = Preconditions.checkNotNull(frameWriter, "frameWriter");
+    this.socket = Preconditions.checkNotNull(socket, "socket");
   }
 
   @Override

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -154,7 +154,7 @@ public final OkHttpChannelBuilder transportExecutor(@Nullable Executor transport
    * <p>Default: <code>TLS</code>
    */
   public final OkHttpChannelBuilder negotiationType(NegotiationType type) {
-    negotiationType = Preconditions.checkNotNull(type);
+    negotiationType = Preconditions.checkNotNull(type, "type");
     return this;
   }
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java
Patch:
@@ -61,7 +61,7 @@ class OkHttpProtocolNegotiator {
 
   @VisibleForTesting
   OkHttpProtocolNegotiator(Platform platform) {
-    this.platform = checkNotNull(platform);
+    this.platform = checkNotNull(platform, "platform");
   }
 
   public static OkHttpProtocolNegotiator get() {

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpTlsUpgrader.java
Patch:
@@ -65,9 +65,9 @@ final class OkHttpTlsUpgrader {
    */
   public static SSLSocket upgrade(SSLSocketFactory sslSocketFactory,
       Socket socket, String host, int port, ConnectionSpec spec) throws IOException {
-    Preconditions.checkNotNull(sslSocketFactory);
-    Preconditions.checkNotNull(socket);
-    Preconditions.checkNotNull(spec);
+    Preconditions.checkNotNull(sslSocketFactory, "sslSocketFactory");
+    Preconditions.checkNotNull(socket, "socket");
+    Preconditions.checkNotNull(spec, "spec");
     SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(
         socket, host, port, true /* auto close */);
     spec.apply(sslSocket, false);

File: stub/src/main/java/io/grpc/stub/AbstractStub.java
Patch:
@@ -73,8 +73,8 @@ protected AbstractStub(Channel channel) {
    * @param callOptions the runtime call options to be applied to every call on this stub
    */
   protected AbstractStub(Channel channel, CallOptions callOptions) {
-    this.channel = checkNotNull(channel);
-    this.callOptions = checkNotNull(callOptions);
+    this.channel = checkNotNull(channel, "channel");
+    this.callOptions = checkNotNull(callOptions, "callOptions");
   }
 
   /**
@@ -155,7 +155,7 @@ public final S withCompression(String compressorName) {
   public final S withChannel(Channel newChannel) {
     return build(newChannel, callOptions);
   }
-  
+
   /**
    * Sets a custom option to be passed to client interceptors on the channel
    * {@link io.grpc.ClientInterceptor} via the CallOptions parameter.

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -219,7 +219,7 @@ private static <V> V getUnchecked(Future<V> future) {
    * exception will be generated from an {@link Status#UNKNOWN} status.
    */
   private static StatusRuntimeException toStatusRuntimeException(Throwable t) {
-    Throwable cause = checkNotNull(t);
+    Throwable cause = checkNotNull(t, "t");
     while (cause != null) {
       // If we have an embedded status, use it and replace the cause
       if (cause instanceof StatusException) {

File: stub/src/main/java/io/grpc/stub/ServerCalls.java
Patch:
@@ -372,8 +372,8 @@ public void onComplete() {
    */
   public static void asyncUnimplementedUnaryCall(MethodDescriptor<?, ?> methodDescriptor,
       StreamObserver<?> responseObserver) {
-    checkNotNull(methodDescriptor);
-    checkNotNull(responseObserver);
+    checkNotNull(methodDescriptor, "methodDescriptor");
+    checkNotNull(responseObserver, "responseObserver");
     responseObserver.onError(Status.UNIMPLEMENTED
         .withDescription(String.format("Method %s is unimplemented",
             methodDescriptor.getFullMethodName()))

File: stub/src/main/java/io/grpc/stub/StreamObservers.java
Patch:
@@ -56,8 +56,8 @@ public class StreamObservers {
    */
   public static <V> void copyWithFlowControl(final Iterator<V> source,
       final CallStreamObserver<V> target) {
-    Preconditions.checkNotNull(source);
-    Preconditions.checkNotNull(target);
+    Preconditions.checkNotNull(source, "source");
+    Preconditions.checkNotNull(target, "target");
     target.setOnReadyHandler(new Runnable() {
       @Override
       public void run() {
@@ -84,7 +84,7 @@ public void run() {
    */
   public static <V> void copyWithFlowControl(final Iterable<V> source,
       CallStreamObserver<V> target) {
-    Preconditions.checkNotNull(source);
+    Preconditions.checkNotNull(source, "source");
     copyWithFlowControl(source.iterator(), target);
   }
 }

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -209,9 +209,7 @@ public void onReady() {}
    * @param message if not {@code null}, will appear as the description of the CANCELLED status
    * @param cause if not {@code null}, will appear as the cause of the CANCELLED status
    */
-  public void cancel(@Nullable String message, @Nullable Throwable cause) {
-    throw new UnsupportedOperationException(getClass() + " should implement this method");
-  }
+  public abstract void cancel(@Nullable String message, @Nullable Throwable cause);
 
   /**
    * Close the call for request message sending. Incoming response messages are unaffected.  This

File: core/src/test/java/io/grpc/DeadlineTest.java
Patch:
@@ -81,7 +81,7 @@ public void defaultTickerIsSystemTicker() {
     ticker.reset(System.nanoTime());
     Deadline reference = Deadline.after(0, TimeUnit.SECONDS, ticker);
     // Allow inaccuracy to account for system time advancing during test.
-    assertAbout(deadline()).that(d).isWithin(20, TimeUnit.MILLISECONDS).of(reference);
+    assertAbout(deadline()).that(d).isWithin(1, TimeUnit.SECONDS).of(reference);
   }
 
   @Test

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -39,6 +39,7 @@
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.okhttp.OkHttpChannelBuilder;
+import io.grpc.okhttp.internal.Platform;
 import io.grpc.testing.TestUtils;
 import io.netty.handler.ssl.SslContext;
 
@@ -324,7 +325,8 @@ protected ManagedChannel createChannel() {
         if (useTls) {
           try {
             SSLSocketFactory factory = useTestCa
-                ? TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem"))
+                ? TestUtils.newSslSocketFactoryForCa(Platform.get().getProvider(),
+                    TestUtils.loadCert("ca.pem"))
                 : (SSLSocketFactory) SSLSocketFactory.getDefault();
             builder.sslSocketFactory(factory);
           } catch (Exception e) {

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -61,7 +61,6 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import java.io.FileInputStream;
 import java.io.IOException;
 
 import javax.net.ssl.SSLPeerUnverifiedException;
@@ -112,7 +111,7 @@ protected ManagedChannel createChannel() {
             TestUtils.TEST_SERVER_HOST, getPort()));
     try {
       builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(Platform.get().getProvider(),
-              new FileInputStream(TestUtils.loadCert("ca.pem"))));
+              TestUtils.loadCert("ca.pem")));
     } catch (Exception e) {
       throw new RuntimeException(e);
     }
@@ -153,7 +152,7 @@ public void wrongHostNameFailHostnameVerification() throws Exception {
             "I.am.a.bad.hostname", getPort()));
     ManagedChannel channel = builder.sslSocketFactory(
         TestUtils.newSslSocketFactoryForCa(Platform.get().getProvider(),
-            new FileInputStream(TestUtils.loadCert("ca.pem")))).build();
+            TestUtils.loadCert("ca.pem"))).build();
     TestServiceGrpc.TestServiceBlockingStub blockingStub =
         TestServiceGrpc.newBlockingStub(channel);
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -271,8 +271,7 @@ SSLSocketFactory createSocketFactory() {
       case TLS:
         try {
           if (sslSocketFactory == null) {
-            SSLContext sslContext = SSLContext.getInstance("TLS", Platform.get().getProvider());
-            sslContext.init(null, null, null);
+            SSLContext sslContext = SSLContext.getInstance("Default", Platform.get().getProvider());
             sslSocketFactory = sslContext.getSocketFactory();
           }
           return sslSocketFactory;

File: core/src/main/java/io/grpc/BindableService.java
Patch:
@@ -35,11 +35,11 @@
  * Provides a way to bind instance of service implementation to server.
  *
  * <p>It is used by service's abstract class generated by compiler (eg.:
- * RouteGuideGrpc.AbstractRouteGuide for RouteGuide service) and lets implementation classes to be
+ * RouteGuideGrpc.RouteGuideImplBase for RouteGuide service) and lets implementation classes to be
  * bind to server.
  *
  * <pre><code>
- * class RouteGuideService extends RouteGuideGrpc.AbstractRouteGuide {
+ * class RouteGuideService extends RouteGuideGrpc.RouteGuideImplBase {
  *   // ...
  * }
  *

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -79,9 +79,10 @@
 public final class ServerImpl extends io.grpc.Server {
   private static final ServerStreamListener NOOP_LISTENER = new NoopListener();
 
-  /** Executor for application processing. */
+  /** Executor for application processing. Safe to read after {@link #start()}. */
   private Executor executor;
-  @GuardedBy("lock") private boolean usingSharedExecutor;
+  /** Safe to read after {@link #start()}. */
+  private boolean usingSharedExecutor;
   private final InternalHandlerRegistry registry;
   private final HandlerRegistry fallbackRegistry;
   @GuardedBy("lock") private boolean started;

File: core/src/main/java/io/grpc/ManagedChannelBuilder.java
Patch:
@@ -191,7 +191,7 @@ public static ManagedChannelBuilder<?> forTarget(String target) {
    *
    * <p>This is an advisory option. Do not rely on any specific behavior related to this option.
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/pull/1986")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/2022")
   public abstract T idleTimeout(long value, TimeUnit unit);
 
   /**

File: core/src/main/java/io/grpc/internal/CallCredentialsApplyingTransportFactory.java
Patch:
@@ -58,7 +58,7 @@ final class CallCredentialsApplyingTransportFactory implements ClientTransportFa
   @Override
   public ConnectionClientTransport newClientTransport(
       SocketAddress serverAddress, String authority, @Nullable String userAgent) {
-    return new Transport(
+    return new CallCredentialsApplyingTransport(
         delegate.newClientTransport(serverAddress, authority, userAgent), authority);
   }
 
@@ -67,11 +67,11 @@ public void close() {
     delegate.close();
   }
 
-  private class Transport extends ForwardingConnectionClientTransport {
+  private class CallCredentialsApplyingTransport extends ForwardingConnectionClientTransport {
     private final ConnectionClientTransport delegate;
     private final String authority;
 
-    Transport(ConnectionClientTransport delegate, String authority) {
+    CallCredentialsApplyingTransport(ConnectionClientTransport delegate, String authority) {
       this.delegate = checkNotNull(delegate, "delegate");
       this.authority = checkNotNull(authority, "authority");
     }

File: netty/src/main/java/io/grpc/netty/WriteQueue.java
Patch:
@@ -110,7 +110,7 @@ ChannelFuture enqueue(QueuedCommand command, boolean flush) {
    */
   ChannelFuture enqueue(QueuedCommand command, ChannelPromise promise, boolean flush) {
     // Detect erroneous code that tries to reuse command objects.
-    Preconditions.checkNotNull(command.promise() == null, "promise must not be set on command");
+    Preconditions.checkArgument(command.promise() == null, "promise must not be set on command");
 
     command.promise(promise);
     queue.add(command);

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -131,9 +131,9 @@ public final class GrpcUtil {
   public static final String MESSAGE_ACCEPT_ENCODING = "grpc-accept-encoding";
 
   /**
-   * The default maximum uncompressed size (in bytes) for inbound messages. Defaults to 100 MiB.
+   * The default maximum uncompressed size (in bytes) for inbound messages. Defaults to 4 MiB.
    */
-  public static final int DEFAULT_MAX_MESSAGE_SIZE = 100 * 1024 * 1024;
+  public static final int DEFAULT_MAX_MESSAGE_SIZE = 4 * 1024 * 1024;
 
   /**
    * The default maximum size (in bytes) for inbound header/trailer.

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java
Patch:
@@ -57,6 +57,7 @@ public static void startServer() {
         NettyServerBuilder
             .forAddress(new LocalAddress("in-process-1"))
             .flowControlWindow(65 * 1024)
+            .maxMessageSize(16 * 1024 * 1024)
             .channelType(LocalServerChannel.class));
   }
 
@@ -72,6 +73,8 @@ protected ManagedChannel createChannel() {
         .forAddress(new LocalAddress("in-process-1"))
         .negotiationType(NegotiationType.PLAINTEXT)
         .channelType(LocalChannel.class)
+        .flowControlWindow(65 * 1024)
+        .maxMessageSize(16 * 1024 * 1024)
         .build();
   }
 }

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java
Patch:
@@ -60,6 +60,7 @@ public static void startServer() {
     try {
       startStaticServer(NettyServerBuilder.forPort(0)
           .flowControlWindow(65 * 1024)
+          .maxMessageSize(16 * 1024 * 1024)
           .sslContext(GrpcSslContexts
               .forServer(TestUtils.loadCert("server1.pem"), TestUtils.loadCert("server1.key"))
               .clientAuth(ClientAuth.REQUIRE)
@@ -82,6 +83,8 @@ protected ManagedChannel createChannel() {
     try {
       return NettyChannelBuilder
           .forAddress(TestUtils.testServerAddress(getPort()))
+          .flowControlWindow(65 * 1024)
+          .maxMessageSize(16 * 1024 * 1024)
           .sslContext(GrpcSslContexts
               .forClient()
               .keyManager(TestUtils.loadCert("client.pem"), TestUtils.loadCert("client.key"))

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -85,6 +85,8 @@ public static void startServer() throws Exception {
       GrpcSslContexts.configure(contextBuilder, sslProvider);
       contextBuilder.ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE);
       startStaticServer(NettyServerBuilder.forPort(0)
+          .flowControlWindow(65 * 1024)
+          .maxMessageSize(16 * 1024 * 1024)
           .sslContext(contextBuilder.build()));
     } catch (IOException ex) {
       throw new RuntimeException(ex);
@@ -99,6 +101,7 @@ public static void stopServer() throws Exception {
   @Override
   protected ManagedChannel createChannel() {
     OkHttpChannelBuilder builder = OkHttpChannelBuilder.forAddress("127.0.0.1", getPort())
+        .maxMessageSize(16 * 1024 * 1024)
         .connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC)
             .cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0]))
             .tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0]))

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -191,7 +191,9 @@ public final NettyChannelBuilder flowControlWindow(int flowControlWindow) {
 
   /**
    * Sets the maximum message size allowed to be received on the channel. If not called,
-   * defaults to {@link GrpcUtil#DEFAULT_MAX_MESSAGE_SIZE}.
+   * defaults to 4 MiB. The default provides protection to clients who haven't considered the
+   * possibility of receiving large messages while trying to be large enough to not be hit in normal
+   * usage.
    */
   public final NettyChannelBuilder maxMessageSize(int maxMessageSize) {
     checkArgument(maxMessageSize >= 0, "maxMessageSize must be >= 0");

File: netty/src/main/java/io/grpc/netty/NettyServerBuilder.java
Patch:
@@ -203,7 +203,9 @@ public NettyServerBuilder flowControlWindow(int flowControlWindow) {
 
   /**
    * Sets the maximum message size allowed to be received on the server. If not called,
-   * defaults to 100 MiB.
+   * defaults to 4 MiB. The default provides protection to services who haven't considered the
+   * possibility of receiving large messages while trying to be large enough to not be hit in normal
+   * usage.
    */
   public NettyServerBuilder maxMessageSize(int maxMessageSize) {
     checkArgument(maxMessageSize >= 0, "maxMessageSize must be >= 0");

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -181,7 +181,9 @@ public final OkHttpChannelBuilder connectionSpec(ConnectionSpec connectionSpec)
 
   /**
    * Sets the maximum message size allowed to be received on the channel. If not called,
-   * defaults to {@link io.grpc.internal.GrpcUtil#DEFAULT_MAX_MESSAGE_SIZE}.
+   * defaults to 4 MiB. The default provides protection to clients who haven't considered the
+   * possibility of receiving large messages while trying to be large enough to not be hit in normal
+   * usage.
    */
   public final OkHttpChannelBuilder maxMessageSize(int maxMessageSize) {
     checkArgument(maxMessageSize >= 0, "maxMessageSize must be >= 0");

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -124,7 +124,7 @@ public void setUp() throws Exception {
 
         // Reflection used since they are only available on linux.
         Class<?> groupClass = Class.forName("io.netty.channel.epoll.EpollEventLoopGroup");
-        EventLoopGroup group = (EventLoopGroup) groupClass.newInstance();
+        EventLoopGroup group = (EventLoopGroup) groupClass.getConstructor().newInstance();
 
         @SuppressWarnings("unchecked")
         Class<? extends ServerChannel> serverChannelClass = (Class<? extends ServerChannel>)

File: benchmarks/src/main/java/io/grpc/benchmarks/Utils.java
Patch:
@@ -31,8 +31,6 @@
 
 package io.grpc.benchmarks;
 
-import static io.grpc.benchmarks.proto.Messages.SimpleResponse;
-
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.google.protobuf.ByteString;
 
@@ -41,6 +39,7 @@
 import io.grpc.benchmarks.proto.Messages;
 import io.grpc.benchmarks.proto.Messages.Payload;
 import io.grpc.benchmarks.proto.Messages.SimpleRequest;
+import io.grpc.benchmarks.proto.Messages.SimpleResponse;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NegotiationType;

File: examples/src/main/java/io/grpc/examples/advanced/HelloJsonServer.java
Patch:
@@ -106,7 +106,7 @@ public static void main(String[] args) throws IOException, InterruptedException
     server.blockUntilShutdown();
   }
 
-  private class GreeterImpl extends GreeterImplBase {
+  private static class GreeterImpl extends GreeterImplBase {
 
     @Override
     public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {

File: examples/src/main/java/io/grpc/examples/header/CustomHeaderServer.java
Patch:
@@ -94,7 +94,7 @@ public static void main(String[] args) throws IOException, InterruptedException
     server.blockUntilShutdown();
   }
 
-  private class GreeterImpl extends GreeterGrpc.GreeterImplBase {
+  private static class GreeterImpl extends GreeterGrpc.GreeterImplBase {
 
     @Override
     public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -106,8 +106,9 @@ private static byte[][] convertHeadersToArray(Http2Headers http2Headers) {
 
   private static byte[] bytes(CharSequence seq) {
     if (seq instanceof AsciiString) {
-      // Fast path - no copy.
-      return ((AsciiString) seq).array();
+      // Fast path - sometimes copy.
+      AsciiString str = (AsciiString) seq;
+      return str.isEntireArrayUsed() ? str.array() : str.toByteArray();
     }
     // Slow path - copy.
     return seq.toString().getBytes(UTF_8);

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -163,7 +163,7 @@ public void setUp() throws Exception {
     }
 
     server = serverBuilder
-        .addService(BenchmarkServiceGrpc.bindService(new AsyncServer.BenchmarkServiceImpl()))
+        .addService(new AsyncServer.BenchmarkServiceImpl())
         .build();
     server.start();
     channel = channelBuilder.build();

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadServer.java
Patch:
@@ -147,7 +147,7 @@ final class LoadServer {
               .addMethod(GENERIC_STREAMING_PING_PONG_METHOD, new GenericServiceCallHandler())
               .build());
     } else {
-      serverBuilder.addService(BenchmarkServiceGrpc.bindService(benchmarkService));
+      serverBuilder.addService(benchmarkService);
     }
     server = serverBuilder.build();
 
@@ -196,7 +196,7 @@ void shutdownNow() {
     server.shutdownNow();
   }
 
-  private class BenchmarkServiceImpl implements BenchmarkServiceGrpc.BenchmarkService {
+  private class BenchmarkServiceImpl extends BenchmarkServiceGrpc.BenchmarkServiceImplBase {
 
     @Override
     public void unaryCall(Messages.SimpleRequest request,

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadWorker.java
Patch:
@@ -69,7 +69,7 @@ public class LoadWorker {
         .directExecutor()
         .workerEventLoopGroup(singleThreadGroup)
         .bossEventLoopGroup(singleThreadGroup)
-        .addService(WorkerServiceGrpc.bindService(new WorkerServiceImpl()))
+        .addService(new WorkerServiceImpl())
         .build();
   }
 
@@ -134,7 +134,7 @@ public static void main(String[] args) throws Exception {
   /**
    * Implement the worker service contract which can launch clients and servers.
    */
-  private class WorkerServiceImpl implements WorkerServiceGrpc.WorkerService {
+  private class WorkerServiceImpl extends WorkerServiceGrpc.WorkerServiceImplBase {
 
     private LoadServer workerServer;
     private LoadClient workerClient;

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncServer.java
Patch:
@@ -167,7 +167,7 @@ static Server newServer(ServerConfiguration config) throws IOException {
         .bossEventLoopGroup(boss)
         .workerEventLoopGroup(worker)
         .channelType(channelType)
-        .addService(BenchmarkServiceGrpc.bindService(new BenchmarkServiceImpl()))
+        .addService(new BenchmarkServiceImpl())
         .sslContext(sslContext)
         .flowControlWindow(config.flowControlWindow);
     if (config.directExecutor) {
@@ -177,7 +177,7 @@ static Server newServer(ServerConfiguration config) throws IOException {
     return builder.build();
   }
 
-  public static class BenchmarkServiceImpl implements BenchmarkServiceGrpc.BenchmarkService {
+  public static class BenchmarkServiceImpl extends BenchmarkServiceGrpc.BenchmarkServiceImplBase {
 
     @Override
     public void unaryCall(SimpleRequest request, StreamObserver<SimpleResponse> responseObserver) {

File: core/src/test/java/io/grpc/ServerInterceptorsTest.java
Patch:
@@ -111,7 +111,8 @@ public void makeSureExpectedMocksUnused() {
 
   @Test(expected = NullPointerException.class)
   public void npeForNullServiceDefinition() {
-    ServerInterceptors.intercept(null, Arrays.<ServerInterceptor>asList());
+    ServerServiceDefinition serviceDef = null;
+    ServerInterceptors.intercept(serviceDef, Arrays.<ServerInterceptor>asList());
   }
 
   @Test(expected = NullPointerException.class)

File: examples/src/main/java/io/grpc/examples/advanced/HelloJsonServer.java
Patch:
@@ -37,7 +37,7 @@
 import io.grpc.ServerBuilder;
 import io.grpc.ServerServiceDefinition;
 import io.grpc.examples.helloworld.GreeterGrpc;
-import io.grpc.examples.helloworld.GreeterGrpc.Greeter;
+import io.grpc.examples.helloworld.GreeterGrpc.GreeterImplBase;
 import io.grpc.examples.helloworld.HelloReply;
 import io.grpc.examples.helloworld.HelloRequest;
 import io.grpc.examples.helloworld.HelloWorldServer;
@@ -106,7 +106,7 @@ public static void main(String[] args) throws IOException, InterruptedException
     server.blockUntilShutdown();
   }
 
-  private class GreeterImpl implements GreeterGrpc.Greeter {
+  private class GreeterImpl extends GreeterImplBase {
 
     @Override
     public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {
@@ -116,7 +116,7 @@ public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserv
     }
   }
 
-  private ServerServiceDefinition bindService(final Greeter serviceImpl) {
+  private ServerServiceDefinition bindService(final GreeterImplBase serviceImpl) {
     return io.grpc.ServerServiceDefinition
         .builder(GreeterGrpc.getServiceDescriptor())
         .addMethod(HelloJsonClient.HelloJsonStub.METHOD_SAY_HELLO,

File: examples/src/main/java/io/grpc/examples/header/CustomHeaderServer.java
Patch:
@@ -94,7 +94,7 @@ public static void main(String[] args) throws IOException, InterruptedException
     server.blockUntilShutdown();
   }
 
-  private class GreeterImpl extends GreeterGrpc.AbstractGreeter {
+  private class GreeterImpl extends GreeterGrpc.GreeterImplBase {
 
     @Override
     public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldServer.java
Patch:
@@ -89,7 +89,7 @@ public static void main(String[] args) throws IOException, InterruptedException
     server.blockUntilShutdown();
   }
 
-  private class GreeterImpl extends GreeterGrpc.AbstractGreeter {
+  private class GreeterImpl extends GreeterGrpc.GreeterImplBase {
 
     @Override
     public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -125,7 +125,7 @@ public static void main(String[] args) throws Exception {
    *
    * <p>See route_guide.proto for details of the methods.
    */
-  private static class RouteGuideService extends RouteGuideGrpc.AbstractRouteGuide {
+  private static class RouteGuideService extends RouteGuideGrpc.RouteGuideImplBase {
     private final Collection<Feature> features;
     private final ConcurrentMap<Point, List<RouteNote>> routeNotes =
         new ConcurrentHashMap<Point, List<RouteNote>>();

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -131,7 +131,7 @@ protected static void startStaticServer(
         .build();
 
     builder.addService(ServerInterceptors.intercept(
-        TestServiceGrpc.bindService(new TestServiceImpl(testServiceExecutor)),
+        new TestServiceImpl(testServiceExecutor),
         allInterceptors));
     try {
       server = builder.build().start();
@@ -152,7 +152,7 @@ static int getPort() {
 
   protected ManagedChannel channel;
   protected TestServiceGrpc.TestServiceBlockingStub blockingStub;
-  protected TestServiceGrpc.TestService asyncStub;
+  protected TestServiceGrpc.TestServiceStub asyncStub;
 
   /**
    * Must be called by the subclass setup method if overridden.
@@ -777,7 +777,7 @@ public void unimplementedMethod() {
   /** Start a fullDuplexCall which the server will not respond, and verify the deadline expires. */
   @Test(timeout = 10000)
   public void timeoutOnSleepingServer() {
-    TestServiceGrpc.TestService stub = TestServiceGrpc.newStub(channel)
+    TestServiceGrpc.TestServiceStub stub = TestServiceGrpc.newStub(channel)
         .withDeadlineAfter(1, TimeUnit.MILLISECONDS);
     @SuppressWarnings("unchecked")
     StreamObserver<StreamingOutputCallResponse> responseObserver = mock(StreamObserver.class);

File: interop-testing/src/main/java/io/grpc/testing/integration/StressTestClient.java
Patch:
@@ -196,7 +196,7 @@ void startMetricsService() throws IOException {
     Preconditions.checkState(!shutdown, "client was shutdown.");
 
     metricsServer = ServerBuilder.forPort(metricsPort)
-        .addService(MetricsServiceGrpc.bindService(new MetricsServiceImpl()))
+        .addService(new MetricsServiceImpl())
         .build()
         .start();
   }
@@ -517,7 +517,7 @@ TestCases nextTestCase() {
   /**
    * Service that exports the QPS metrics of the stress test.
    */
-  private class MetricsServiceImpl implements MetricsServiceGrpc.MetricsService {
+  private class MetricsServiceImpl extends MetricsServiceGrpc.MetricsServiceImplBase {
 
     @Override
     public void getAllGauges(Metrics.EmptyMessage request,

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -52,8 +52,8 @@
 import javax.net.ssl.SSLSocketFactory;
 
 /**
- * Application that starts a client for the {@link TestServiceGrpc.TestService} and runs through a
- * series of tests.
+ * Application that starts a client for the {@link TestServiceGrpc.TestServiceImplBase} and runs
+ * through a series of tests.
  */
 public class TestServiceClient {
 

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -60,7 +60,7 @@
  * Implementation of the business logic for the TestService. Uses an executor to schedule chunks
  * sent in response streams.
  */
-public class TestServiceImpl implements TestServiceGrpc.TestService {
+public class TestServiceImpl extends TestServiceGrpc.TestServiceImplBase {
   private static final String UNCOMPRESSABLE_FILE =
       "/io/grpc/testing/integration/testdata/uncompressable.bin";
   private final Random random = new Random();

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceServer.java
Patch:
@@ -144,7 +144,7 @@ void start() throws Exception {
     server = NettyServerBuilder.forPort(port)
         .sslContext(sslContext)
         .addService(ServerInterceptors.intercept(
-            TestServiceGrpc.bindService(new TestServiceImpl(executor)),
+            new TestServiceImpl(executor),
             TestUtils.echoRequestHeadersInterceptor(Util.METADATA_KEY)))
         .build().start();
   }

File: interop-testing/src/test/java/io/grpc/testing/integration/CompressionTest.java
Patch:
@@ -262,7 +262,7 @@ public void compression() throws Exception {
     }
   }
 
-  private static final class LocalServer extends TestServiceGrpc.AbstractTestService {
+  private static final class LocalServer extends TestServiceGrpc.TestServiceImplBase {
     @Override
     public void unaryCall(SimpleRequest request, StreamObserver<SimpleResponse> responseObserver) {
       responseObserver.onNext(SimpleResponse.newBuilder()

File: interop-testing/src/test/java/io/grpc/testing/integration/ConcurrencyTest.java
Patch:
@@ -214,7 +214,7 @@ private Server newServer() throws CertificateException, IOException {
 
     return NettyServerBuilder.forPort(0)
         .sslContext(sslContext)
-        .addService(TestServiceGrpc.bindService(new TestServiceImpl(serverExecutor)))
+        .addService(new TestServiceImpl(serverExecutor))
         .build()
         .start();
   }

File: services/src/main/java/io/grpc/services/HealthServiceImpl.java
Patch:
@@ -45,7 +45,7 @@
 import javax.annotation.Nullable;
 
 
-final class HealthServiceImpl extends HealthGrpc.AbstractHealth {
+final class HealthServiceImpl extends HealthGrpc.HealthImplBase {
 
   /* Due to the latency of rpc calls, synchronization of the map does not help with consistency.
    * However, need use ConcurrentHashMap to prevent the possible race condition of currently putting

File: services/src/main/java/io/grpc/services/HealthStatusManager.java
Patch:
@@ -57,7 +57,7 @@ public HealthStatusManager() {
   /**
    * Gets the health check service created in the constructor.
    */
-  public HealthGrpc.AbstractHealth getHealthService() {
+  public HealthGrpc.HealthImplBase getHealthService() {
     return healthService;
   }
 

File: services/src/test/java/io/grpc/services/HealthStatusManagerTest.java
Patch:
@@ -43,7 +43,7 @@
 import io.grpc.StatusException;
 import io.grpc.health.v1.HealthCheckRequest;
 import io.grpc.health.v1.HealthCheckResponse;
-import io.grpc.health.v1.HealthGrpc.Health;
+import io.grpc.health.v1.HealthGrpc;
 import io.grpc.stub.StreamObserver;
 
 import org.junit.Test;
@@ -57,7 +57,7 @@
 public class HealthStatusManagerTest {
 
   private final HealthStatusManager manager = new HealthStatusManager();
-  private final Health health = manager.getHealthService();
+  private final HealthGrpc.HealthImplBase health = manager.getHealthService();
   private final HealthCheckResponse.ServingStatus status
       = HealthCheckResponse.ServingStatus.UNKNOWN;
 

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -31,7 +31,7 @@
 
 package io.grpc.benchmarks;
 
-import static io.grpc.testing.TestUtils.pickUnusedPort;
+import static io.grpc.benchmarks.Utils.pickUnusedPort;
 
 import com.google.protobuf.ByteString;
 

File: benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadServer.java
Patch:
@@ -99,7 +99,7 @@ final class LoadServer {
 
   LoadServer(Control.ServerConfig config) throws Exception {
     LOG.log(Level.INFO, "Server Config \n" + config.toString());
-    port = config.getPort() ==  0 ? TestUtils.pickUnusedPort() : config.getPort();
+    port = config.getPort() ==  0 ? Utils.pickUnusedPort() : config.getPort();
     ServerBuilder<?> serverBuilder = ServerBuilder.forPort(port);
     int asyncThreads = config.getAsyncServerThreads() == 0
         ? Runtime.getRuntime().availableProcessors()

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/ServerConfiguration.java
Patch:
@@ -37,7 +37,6 @@
 import io.grpc.benchmarks.SocketAddressValidator;
 import io.grpc.benchmarks.Utils;
 import io.grpc.netty.NettyChannelBuilder;
-import io.grpc.testing.TestUtils;
 
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
@@ -163,7 +162,7 @@ protected void setServerValue(ServerConfiguration config, String value) {
         SocketAddress address = Utils.parseSocketAddress(value);
         if (address instanceof InetSocketAddress) {
           InetSocketAddress addr = (InetSocketAddress) address;
-          int port = addr.getPort() == 0 ? TestUtils.pickUnusedPort() : addr.getPort();
+          int port = addr.getPort() == 0 ? Utils.pickUnusedPort() : addr.getPort();
           // Re-create the address so that the server is available on all local addresses.
           address = new InetSocketAddress(port);
         }

File: benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadWorkerTest.java
Patch:
@@ -34,13 +34,13 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
+import io.grpc.benchmarks.Utils;
 import io.grpc.benchmarks.proto.Control;
 import io.grpc.benchmarks.proto.Stats;
 import io.grpc.benchmarks.proto.WorkerServiceGrpc;
 import io.grpc.internal.ManagedChannelImpl;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.stub.StreamObserver;
-import io.grpc.testing.TestUtils;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -71,7 +71,7 @@ public class LoadWorkerTest {
 
   @Before
   public void setup() throws Exception {
-    int port = TestUtils.pickUnusedPort();
+    int port = Utils.pickUnusedPort();
     worker = new LoadWorker(port, 0);
     worker.start();
     channel = NettyChannelBuilder.forAddress("localhost", port).usePlaintext(true).build();

File: interop-testing/src/test/java/io/grpc/testing/integration/ConcurrencyTest.java
Patch:
@@ -149,7 +149,6 @@ public void run() {
   private static final int NUM_CONCURRENT_REQUESTS = 100;
   private static final int NUM_RESPONSES_PER_REQUEST = 100;
 
-  private int port = TestUtils.pickUnusedPort();
   private Server server;
   private ManagedChannel clientChannel;
   private TestServiceGrpc.TestServiceStub clientStub;
@@ -213,7 +212,7 @@ private Server newServer() throws CertificateException, IOException {
                        .clientAuth(ClientAuth.REQUIRE)
                        .build();
 
-    return NettyServerBuilder.forPort(port)
+    return NettyServerBuilder.forPort(0)
         .sslContext(sslContext)
         .addService(TestServiceGrpc.bindService(new TestServiceImpl(serverExecutor)))
         .build()
@@ -233,7 +232,7 @@ private ManagedChannel newClientChannel() throws CertificateException, IOExcepti
                        .trustManager(clientTrustedCaCerts)
                        .build();
 
-    return NettyChannelBuilder.forAddress("localhost", port)
+    return NettyChannelBuilder.forAddress("localhost", server.getPort())
         .overrideAuthority(TestUtils.TEST_SERVER_HOST)
         .negotiationType(NegotiationType.TLS)
         .sslContext(sslContext)

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java
Patch:
@@ -53,13 +53,12 @@
  */
 @RunWith(JUnit4.class)
 public class Http2NettyTest extends AbstractInteropTest {
-  private static int serverPort = TestUtils.pickUnusedPort();
 
   /** Starts the server with HTTPS. */
   @BeforeClass
   public static void startServer() {
     try {
-      startStaticServer(NettyServerBuilder.forPort(serverPort)
+      startStaticServer(NettyServerBuilder.forPort(0)
           .flowControlWindow(65 * 1024)
           .sslContext(GrpcSslContexts
               .forServer(TestUtils.loadCert("server1.pem"), TestUtils.loadCert("server1.key"))
@@ -82,7 +81,7 @@ public static void stopServer() {
   protected ManagedChannel createChannel() {
     try {
       return NettyChannelBuilder
-          .forAddress(TestUtils.testServerAddress(serverPort))
+          .forAddress(TestUtils.testServerAddress(getPort()))
           .sslContext(GrpcSslContexts
               .forClient()
               .keyManager(TestUtils.loadCert("client.pem"), TestUtils.loadCert("client.key"))

File: netty/src/test/java/io/grpc/netty/NettyClientTransportFactoryTest.java
Patch:
@@ -33,15 +33,14 @@
 
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.testing.AbstractClientTransportFactoryTest;
-import io.grpc.testing.TestUtils;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 @RunWith(JUnit4.class)
 public class NettyClientTransportFactoryTest extends AbstractClientTransportFactoryTest {
   @Override protected ClientTransportFactory newClientTransportFactory() {
     return NettyChannelBuilder
-        .forAddress("localhost", TestUtils.pickUnusedPort())
+        .forAddress("localhost", 0)
         .buildTransportFactory();
   }
 }

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportFactoryTest.java
Patch:
@@ -33,15 +33,14 @@
 
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.testing.AbstractClientTransportFactoryTest;
-import io.grpc.testing.TestUtils;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 @RunWith(JUnit4.class)
 public class OkHttpClientTransportFactoryTest extends AbstractClientTransportFactoryTest {
   @Override
   protected ClientTransportFactory newClientTransportFactory() {
-    return OkHttpChannelBuilder.forAddress("localhost", TestUtils.pickUnusedPort())
+    return OkHttpChannelBuilder.forAddress("localhost", 0)
         .buildTransportFactory();
   }
 }

File: testing/src/main/java/io/grpc/internal/testing/AbstractClientTransportFactoryTest.java
Patch:
@@ -32,7 +32,6 @@
 package io.grpc.internal.testing;
 
 import io.grpc.internal.ClientTransportFactory;
-import io.grpc.testing.TestUtils;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -54,10 +53,9 @@ public void multipleCallsToCloseShouldNotThrow() {
 
   @Test(expected = IllegalStateException.class)
   public void newClientTransportAfterCloseShouldThrow() {
-    int port = TestUtils.pickUnusedPort();
     ClientTransportFactory transportFactory = newClientTransportFactory();
     transportFactory.close();
     transportFactory.newClientTransport(
-        new InetSocketAddress("localhost", port), "localhost:" + port, "agent");
+        new InetSocketAddress("localhost", 12345), "localhost:" + 12345, "agent");
   }
 }

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -32,7 +32,7 @@
 package io.grpc.netty;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static io.grpc.netty.GrpcSslContexts.HTTP2_VERSIONS;
+import static io.grpc.netty.GrpcSslContexts.HTTP2_VERSION;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
@@ -152,7 +152,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
       if (evt instanceof SslHandshakeCompletionEvent) {
         SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;
         if (handshakeEvent.isSuccess()) {
-          if (HTTP2_VERSIONS.contains(sslHandler(ctx.pipeline()).applicationProtocol())) {
+          if (HTTP2_VERSION.equals(sslHandler(ctx.pipeline()).applicationProtocol())) {
             // Successfully negotiated the protocol. Replace this handler with
             // the GRPC handler.
             ctx.pipeline().replace(this, null, grpcHandler);
@@ -500,7 +500,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
         SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;
         if (handshakeEvent.isSuccess()) {
           SslHandler handler = ctx.pipeline().get(SslHandler.class);
-          if (HTTP2_VERSIONS.contains(handler.applicationProtocol())) {
+          if (HTTP2_VERSION.equals(handler.applicationProtocol())) {
             // Successfully negotiated the protocol.
             logSslEngineDetails(Level.FINER, ctx, "TLS negotiation succeeded.", null);
             writeBufferedAndRemove(ctx);

File: core/src/main/java/io/grpc/Contexts.java
Patch:
@@ -140,7 +140,7 @@ public void onReady() {
    * Returns the {@link Status} of a cancelled context or {@code null} if the context
    * is not cancelled.
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1705")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1975")
   public static Status statusFromCancelled(Context context) {
     Preconditions.checkNotNull(context, "context must not be null");
     if (!context.isCancelled()) {

File: auth/src/main/java/io/grpc/auth/GoogleAuthLibraryCallCredentials.java
Patch:
@@ -70,7 +70,6 @@ public GoogleAuthLibraryCallCredentials(Credentials creds) {
   @Override
   public void applyRequestMetadata(MethodDescriptor<?, ?> method, Attributes attrs,
       Executor appExecutor, final MetadataApplier applier) {
-    Metadata cachedSaved;
     String authority = checkNotNull(attrs.get(ATTR_AUTHORITY), "authority");
     final URI uri;
     try {

File: core/src/main/java/io/grpc/internal/ServerImpl.java
Patch:
@@ -201,7 +201,7 @@ public ServerImpl shutdownNow() {
     }
     // Short-circuiting not strictly necessary, but prevents transports from needing to handle
     // multiple shutdownNow invocations, between here and the serverShutdown callback.
-    if (serverShutdownCallbackInvoked) {
+    if (savedServerShutdownCallbackInvoked) {
       // Have to call shutdownNow, because serverShutdown callback only called shutdown, not
       // shutdownNow
       for (ServerTransport transport : transportsCopy) {

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpChannelBuilderTest.java
Patch:
@@ -38,7 +38,6 @@
 import com.squareup.okhttp.ConnectionSpec;
 
 import io.grpc.NameResolver;
-import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.GrpcUtil;
 
 import org.junit.Rule;
@@ -66,7 +65,7 @@ protected String checkAuthority(String authority) {
       }
     };
 
-    ClientTransportFactory factory = builder.overrideAuthority("[invalidauthority")
+    builder.overrideAuthority("[invalidauthority")
         .negotiationType(NegotiationType.PLAINTEXT)
         .buildTransportFactory();
   }
@@ -77,7 +76,7 @@ public void failOverrideInvalidAuthority() {
     thrown.expectMessage("Invalid authority:");
     OkHttpChannelBuilder builder = new OkHttpChannelBuilder("good", 1234);
 
-    ClientTransportFactory factory = builder.overrideAuthority("[invalidauthority")
+    builder.overrideAuthority("[invalidauthority")
         .negotiationType(NegotiationType.PLAINTEXT)
         .buildTransportFactory();
   }

File: testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java
Patch:
@@ -335,7 +335,6 @@ public void shutdownNowKillsClientStream() throws Exception {
     verify(mockClientTransportListener, timeout(TIMEOUT_MS)).transportInUse(true);
     StreamCreation serverStreamCreation
         = serverTransportListener.takeStreamOrFail(TIMEOUT_MS, TimeUnit.MILLISECONDS);
-    ServerStream serverStream = serverStreamCreation.stream;
     ServerStreamListener mockServerStreamListener = serverStreamCreation.listener;
 
     Status status = Status.UNKNOWN.withDescription("test shutdownNow");
@@ -366,7 +365,6 @@ public void shutdownNowKillsServerStream() throws Exception {
     verify(mockClientTransportListener, timeout(TIMEOUT_MS)).transportInUse(true);
     StreamCreation serverStreamCreation
         = serverTransportListener.takeStreamOrFail(TIMEOUT_MS, TimeUnit.MILLISECONDS);
-    ServerStream serverStream = serverStreamCreation.stream;
     ServerStreamListener mockServerStreamListener = serverStreamCreation.listener;
 
     serverTransport.shutdownNow(Status.UNKNOWN.withDescription("test shutdownNow"));

File: core/src/main/java/io/grpc/ServerInterceptor.java
Patch:
@@ -46,7 +46,6 @@
  * </ul>
  */
 @ThreadSafe
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1711")
 public interface ServerInterceptor {
   /**
    * Intercept {@link ServerCall} dispatch by the {@code next} {@link ServerCallHandler}. General

File: core/src/main/java/io/grpc/BindableService.java
Patch:
@@ -46,7 +46,6 @@
  * Server server = ServerBuilder.forPort(1234).addService(new RouteGuideService()).build();
  * </code></pre></p>
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1701")
 public interface BindableService {
   /**
    * Creates {@link ServerServiceDefinition} object for current instance of service implementation.

File: core/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -83,7 +83,6 @@ public static ServerBuilder<?> forPort(int port) {
    *
    * @param bindableService BindableService object
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1701")
   public abstract T addService(BindableService bindableService);
 
   /**

File: core/src/main/java/io/grpc/ServerInterceptors.java
Patch:
@@ -98,7 +98,6 @@ public static ServerServiceDefinition intercept(ServerServiceDefinition serviceD
     return intercept(serviceDef, Arrays.asList(interceptors));
   }
 
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1701")
   public static ServerServiceDefinition intercept(BindableService bindableService,
       ServerInterceptor... interceptors) {
     return intercept(bindableService.bindService(), Arrays.asList(interceptors));

File: stub/src/test/java/io/grpc/stub/ClientCallsTest.java
Patch:
@@ -334,6 +334,7 @@ public void onCompleted() {
     assertEquals(Arrays.asList(0, 1, 1, 2, 2, 2), receivedMessages);
   }
 
+  @org.junit.Ignore
   @Test
   public void inprocessTransportOutboundFlowControl() throws Exception {
     final CountDownLatch latch = new CountDownLatch(1);

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -220,7 +220,8 @@ public boolean isReady() {
 
   /**
    * Enables per-message compression, if an encoding type has been negotiated.  If no message
-   * encoding has been negotiated, this is a no-op.
+   * encoding has been negotiated, this is a no-op. By default per-message compression is enabled,
+   * but may not have any effect if compression is not enabled on the call.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1703")
   public void setMessageCompression(boolean enabled) {

File: core/src/main/java/io/grpc/ServerCall.java
Patch:
@@ -195,7 +195,8 @@ public boolean isReady() {
 
   /**
    * Enables per-message compression, if an encoding type has been negotiated.  If no message
-   * encoding has been negotiated, this is a no-op.
+   * encoding has been negotiated, this is a no-op. By default per-message compression is enabled,
+   * but may not have any effect if compression is not enabled on the call.
    */
   @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public void setMessageCompression(boolean enabled) {

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -216,9 +216,6 @@ public void runInContext() {
     stream.setCompressor(compressor);
 
     stream.start(new ClientStreamListenerImpl(observer));
-    if (compressor != Codec.Identity.NONE) {
-      stream.setMessageCompression(true);
-    }
 
     // Delay any sources of cancellation after start(), because most of the transports are broken if
     // they receive cancel before start. Issue #1343 has more details

File: core/src/main/java/io/grpc/internal/MessageFramer.java
Patch:
@@ -81,7 +81,7 @@ public interface Sink {
   private final Sink sink;
   private WritableBuffer buffer;
   private Compressor compressor = Codec.Identity.NONE;
-  private boolean messageCompression;
+  private boolean messageCompression = true;
   private final OutputStreamAdapter outputStreamAdapter = new OutputStreamAdapter();
   private final byte[] headerScratch = new byte[HEADER_LENGTH];
   private final WritableBufferAllocator bufferAllocator;

File: core/src/main/java/io/grpc/internal/Stream.java
Patch:
@@ -97,7 +97,8 @@ public interface Stream {
 
   /**
    * Enables per-message compression, if an encoding type has been negotiated.  If no message
-   * encoding has been negotiated, this is a no-op.
+   * encoding has been negotiated, this is a no-op. By default per-message compression is enabled,
+   * but may not have any effect if compression is not enabled on the call.
    */
   void setMessageCompression(boolean enable);
 }

File: core/src/test/java/io/grpc/internal/MessageFramerTest.java
Patch:
@@ -238,9 +238,8 @@ public void largerFrameSizeUnknownLength() throws Exception {
   @Test
   public void compressed() throws Exception {
     allocator = new BytesWritableBufferAllocator(100, Integer.MAX_VALUE);
-    framer = new MessageFramer(sink, allocator)
-        .setCompressor(new Codec.Gzip())
-        .setMessageCompression(true);
+    // setMessageCompression should default to true
+    framer = new MessageFramer(sink, allocator).setCompressor(new Codec.Gzip());
     writeKnownLength(framer, new byte[1000]);
     framer.flush();
     // The GRPC header is written first as a separate frame.

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -99,11 +99,9 @@ public void unaryCall(SimpleRequest req, StreamObserver<SimpleResponse> response
           // fallthrough, just use gzip
         case GZIP:
           obs.setCompression("gzip");
-          obs.setMessageCompression(true);
           break;
         case NONE:
           obs.setCompression("identity");
-          obs.setMessageCompression(false);
           break;
         case UNRECOGNIZED:
           // fallthrough

File: interop-testing/src/test/java/io/grpc/testing/integration/CompressionTest.java
Patch:
@@ -279,6 +279,9 @@ private class ServerCompressorInterceptor implements ServerInterceptor {
     @Override
     public <ReqT, RespT> io.grpc.ServerCall.Listener<ReqT> interceptCall(
         ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {
+      if (serverEncoding) {
+        call.setCompression("fzip");
+      }
       call.setMessageCompression(enableServerMessageCompression);
       serverResponseHeaders = headers;
       return next.startCall(call, headers);

File: core/src/main/java/io/grpc/CallOptions.java
Patch:
@@ -359,6 +359,7 @@ private CallOptions(CallOptions other) {
     executor = other.executor;
     compressorName = other.compressorName;
     customOptions = other.customOptions;
+    waitForReady = other.waitForReady;
   }
 
   @Override
@@ -370,7 +371,7 @@ public String toString() {
     toStringHelper.add("affinity", affinity);
     toStringHelper.add("executor", executor != null ? executor.getClass() : null);
     toStringHelper.add("compressorName", compressorName);
-    toStringHelper.add("customOptions", Arrays.toString(customOptions));
+    toStringHelper.add("customOptions", Arrays.deepToString(customOptions));
     toStringHelper.add("waitForReady", isWaitForReady());
 
     return toStringHelper.toString();

File: core/src/main/java/io/grpc/internal/TransportSet.java
Patch:
@@ -259,7 +259,7 @@ public ClientTransport get() {
       }
     };
     reconnectTask = scheduledExecutor.schedule(
-        endOfCurrentBackoff, delayMillis, TimeUnit.MILLISECONDS);
+        new LogExceptionRunnable(endOfCurrentBackoff), delayMillis, TimeUnit.MILLISECONDS);
   }
 
   /**

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -36,6 +36,7 @@
 import com.google.protobuf.EmptyProtos;
 
 import io.grpc.Status;
+import io.grpc.internal.LogExceptionRunnable;
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.integration.Messages.PayloadType;
@@ -336,7 +337,8 @@ private void scheduleNextChunk() {
         Chunk nextChunk = chunks.peek();
         if (nextChunk != null) {
           scheduled = true;
-          executor.schedule(dispatchTask, nextChunk.delayMicroseconds, TimeUnit.MICROSECONDS);
+          executor.schedule(new LogExceptionRunnable(dispatchTask),
+              nextChunk.delayMicroseconds, TimeUnit.MICROSECONDS);
           return;
         }
       }

File: benchmarks/src/generated/main/grpc/io/grpc/benchmarks/proto/BenchmarkServiceGrpc.java
Patch:
@@ -27,7 +27,7 @@ private BenchmarkServiceGrpc() {}
   public static final String SERVICE_NAME = "grpc.testing.BenchmarkService";
 
   // Static method descriptors that strictly reflect the proto.
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<io.grpc.benchmarks.proto.Messages.SimpleRequest,
       io.grpc.benchmarks.proto.Messages.SimpleResponse> METHOD_UNARY_CALL =
       io.grpc.MethodDescriptor.create(
@@ -36,7 +36,7 @@ private BenchmarkServiceGrpc() {}
               "grpc.testing.BenchmarkService", "UnaryCall"),
           io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.benchmarks.proto.Messages.SimpleRequest.getDefaultInstance()),
           io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.benchmarks.proto.Messages.SimpleResponse.getDefaultInstance()));
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<io.grpc.benchmarks.proto.Messages.SimpleRequest,
       io.grpc.benchmarks.proto.Messages.SimpleResponse> METHOD_STREAMING_CALL =
       io.grpc.MethodDescriptor.create(
@@ -92,7 +92,7 @@ public io.grpc.stub.StreamObserver<io.grpc.benchmarks.proto.Messages.SimpleReque
         io.grpc.stub.StreamObserver<io.grpc.benchmarks.proto.Messages.SimpleResponse> responseObserver);
   }
 
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1469")
   public static abstract class AbstractBenchmarkService implements BenchmarkService, io.grpc.BindableService {
 
     @java.lang.Override

File: examples/src/generated/main/grpc/io/grpc/examples/helloworld/GreeterGrpc.java
Patch:
@@ -30,7 +30,7 @@ private GreeterGrpc() {}
   public static final String SERVICE_NAME = "helloworld.Greeter";
 
   // Static method descriptors that strictly reflect the proto.
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<io.grpc.examples.helloworld.HelloRequest,
       io.grpc.examples.helloworld.HelloReply> METHOD_SAY_HELLO =
       io.grpc.MethodDescriptor.create(
@@ -79,7 +79,7 @@ public void sayHello(io.grpc.examples.helloworld.HelloRequest request,
         io.grpc.stub.StreamObserver<io.grpc.examples.helloworld.HelloReply> responseObserver);
   }
 
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1469")
   public static abstract class AbstractGreeter implements Greeter, io.grpc.BindableService {
 
     @java.lang.Override

File: grpclb/src/generated/main/grpc/io/grpc/grpclb/LoadBalancerGrpc.java
Patch:
@@ -27,7 +27,7 @@ private LoadBalancerGrpc() {}
   public static final String SERVICE_NAME = "grpc.lb.v1.LoadBalancer";
 
   // Static method descriptors that strictly reflect the proto.
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<io.grpc.grpclb.LoadBalanceRequest,
       io.grpc.grpclb.LoadBalanceResponse> METHOD_BALANCE_LOAD =
       io.grpc.MethodDescriptor.create(
@@ -73,7 +73,7 @@ public io.grpc.stub.StreamObserver<io.grpc.grpclb.LoadBalanceRequest> balanceLoa
         io.grpc.stub.StreamObserver<io.grpc.grpclb.LoadBalanceResponse> responseObserver);
   }
 
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1469")
   public static abstract class AbstractLoadBalancer implements LoadBalancer, io.grpc.BindableService {
 
     @java.lang.Override

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/MetricsServiceGrpc.java
Patch:
@@ -27,7 +27,7 @@ private MetricsServiceGrpc() {}
   public static final String SERVICE_NAME = "grpc.testing.MetricsService";
 
   // Static method descriptors that strictly reflect the proto.
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<io.grpc.testing.integration.Metrics.EmptyMessage,
       io.grpc.testing.integration.Metrics.GaugeResponse> METHOD_GET_ALL_GAUGES =
       io.grpc.MethodDescriptor.create(
@@ -36,7 +36,7 @@ private MetricsServiceGrpc() {}
               "grpc.testing.MetricsService", "GetAllGauges"),
           io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Metrics.EmptyMessage.getDefaultInstance()),
           io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.testing.integration.Metrics.GaugeResponse.getDefaultInstance()));
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<io.grpc.testing.integration.Metrics.GaugeRequest,
       io.grpc.testing.integration.Metrics.GaugeResponse> METHOD_GET_GAUGE =
       io.grpc.MethodDescriptor.create(
@@ -91,7 +91,7 @@ public void getGauge(io.grpc.testing.integration.Metrics.GaugeRequest request,
         io.grpc.stub.StreamObserver<io.grpc.testing.integration.Metrics.GaugeResponse> responseObserver);
   }
 
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1469")
   public static abstract class AbstractMetricsService implements MetricsService, io.grpc.BindableService {
 
     @java.lang.Override

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -30,7 +30,7 @@ private ReconnectServiceGrpc() {}
   public static final String SERVICE_NAME = "grpc.testing.ReconnectService";
 
   // Static method descriptors that strictly reflect the proto.
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<com.google.protobuf.EmptyProtos.Empty,
       com.google.protobuf.EmptyProtos.Empty> METHOD_START =
       io.grpc.MethodDescriptor.create(
@@ -39,7 +39,7 @@ private ReconnectServiceGrpc() {}
               "grpc.testing.ReconnectService", "Start"),
           io.grpc.protobuf.ProtoUtils.marshaller(com.google.protobuf.EmptyProtos.Empty.getDefaultInstance()),
           io.grpc.protobuf.ProtoUtils.marshaller(com.google.protobuf.EmptyProtos.Empty.getDefaultInstance()));
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<com.google.protobuf.EmptyProtos.Empty,
       io.grpc.testing.integration.Messages.ReconnectInfo> METHOD_STOP =
       io.grpc.MethodDescriptor.create(
@@ -90,7 +90,7 @@ public void stop(com.google.protobuf.EmptyProtos.Empty request,
         io.grpc.stub.StreamObserver<io.grpc.testing.integration.Messages.ReconnectInfo> responseObserver);
   }
 
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1469")
   public static abstract class AbstractReconnectService implements ReconnectService, io.grpc.BindableService {
 
     @java.lang.Override

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -31,7 +31,7 @@ private UnimplementedServiceGrpc() {}
   public static final String SERVICE_NAME = "grpc.testing.UnimplementedService";
 
   // Static method descriptors that strictly reflect the proto.
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<com.google.protobuf.EmptyProtos.Empty,
       com.google.protobuf.EmptyProtos.Empty> METHOD_UNIMPLEMENTED_CALL =
       io.grpc.MethodDescriptor.create(
@@ -81,7 +81,7 @@ public void unimplementedCall(com.google.protobuf.EmptyProtos.Empty request,
         io.grpc.stub.StreamObserver<com.google.protobuf.EmptyProtos.Empty> responseObserver);
   }
 
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1469")
   public static abstract class AbstractUnimplementedService implements UnimplementedService, io.grpc.BindableService {
 
     @java.lang.Override

File: services/src/generated/main/grpc/io/grpc/health/v1/HealthGrpc.java
Patch:
@@ -27,7 +27,7 @@ private HealthGrpc() {}
   public static final String SERVICE_NAME = "grpc.health.v1.Health";
 
   // Static method descriptors that strictly reflect the proto.
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
   public static final io.grpc.MethodDescriptor<io.grpc.health.v1.HealthCheckRequest,
       io.grpc.health.v1.HealthCheckResponse> METHOD_CHECK =
       io.grpc.MethodDescriptor.create(
@@ -70,7 +70,7 @@ public void check(io.grpc.health.v1.HealthCheckRequest request,
         io.grpc.stub.StreamObserver<io.grpc.health.v1.HealthCheckResponse> responseObserver);
   }
 
-  @io.grpc.ExperimentalApi
+  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1469")
   public static abstract class AbstractHealth implements Health, io.grpc.BindableService {
 
     @java.lang.Override

File: core/src/main/java/io/grpc/ManagedChannel.java
Patch:
@@ -64,8 +64,6 @@ public abstract class ManagedChannel extends Channel {
    * Initiates a forceful shutdown in which preexisting and new calls are cancelled. Although
    * forceful, the shutdown process is still not instantaneous; {@link #isTerminated()} will likely
    * return {@code false} immediately after this method returns.
-   *
-   * <p>NOT YET IMPLEMENTED. This method currently behaves identically to shutdown().
    */
   public abstract ManagedChannel shutdownNow();
 

File: core/src/main/java/io/grpc/internal/DelayedClientTransport.java
Patch:
@@ -155,6 +155,7 @@ public void shutdown() {
    * Shuts down this transport and cancels all streams that it owns, hence immediately terminates
    * this transport.
    */
+  @Override
   public void shutdownNow(Status status) {
     shutdown();
     Collection<PendingStream> savedPendingStreams = null;

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -229,7 +229,7 @@ static NameResolver getNameResolver(String target, NameResolver.Factory nameReso
       // It doesn't look like a URI target. Maybe it's an authority string. Try with the default
       // scheme from the factory.
       try {
-        targetUri = new URI(nameResolverFactory.getDefaultScheme(), null, "/" + target, null);
+        targetUri = new URI(nameResolverFactory.getDefaultScheme(), "", "/" + target, null);
       } catch (URISyntaxException e) {
         // Should not be possible.
         throw new IllegalArgumentException(e);

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -697,7 +697,7 @@ void resolved() {
     }
   }
 
-  private class FailingNameResolverFactory extends NameResolver.Factory {
+  private static class FailingNameResolverFactory extends NameResolver.Factory {
     final Status error;
 
     FailingNameResolverFactory(Status error) {
@@ -725,7 +725,7 @@ public String getDefaultScheme() {
     }
   }
 
-  private class SpyingLoadBalancerFactory extends LoadBalancer.Factory {
+  private static class SpyingLoadBalancerFactory extends LoadBalancer.Factory {
     private final LoadBalancer.Factory delegate;
     private final List<LoadBalancer<?>> balancers = new ArrayList<LoadBalancer<?>>();
 

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -554,7 +554,7 @@ public void windowUpdateWithInboundFlowControl() throws Exception {
         idCaptor.capture(), eq(messageFrameLength));
     // Should only send window update for the connection.
     assertEquals(1, idCaptor.getAllValues().size());
-    assertEquals(new Integer(0), idCaptor.getValue());
+    assertEquals(0, (int)idCaptor.getValue());
 
     stream.request(1);
     // We return the bytes for the stream window as we read the message.
@@ -1551,7 +1551,7 @@ private static class MockSocket extends Socket {
     }
 
     @Override
-    public void close() {
+    public synchronized void close() {
       frameReader.nextFrameAtEndOfStream();
     }
   }
@@ -1590,7 +1590,7 @@ private void shutdownAndVerify() {
     frameReader.assertClosed();
   }
 
-  private class DelayConnectedCallback implements Runnable {
+  private static class DelayConnectedCallback implements Runnable {
     SettableFuture<Void> delayed = SettableFuture.create();
 
     @Override

File: services/src/main/java/io/grpc/services/HealthServiceImpl.java
Patch:
@@ -31,12 +31,11 @@
 
 package io.grpc.services;
 
-import static io.grpc.health.v1.HealthCheckResponse.ServingStatus;
-
 import io.grpc.Status;
 import io.grpc.StatusException;
 import io.grpc.health.v1.HealthCheckRequest;
 import io.grpc.health.v1.HealthCheckResponse;
+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;
 import io.grpc.health.v1.HealthGrpc;
 import io.grpc.stub.StreamObserver;
 

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -84,7 +84,8 @@ public final class ManagedChannelImpl extends ManagedChannel implements WithLogI
   // Matching this pattern means the target string is a URI target or at least intended to be one.
   // A URI target must be an absolute hierarchical URI.
   // From RFC 2396: scheme = alpha *( alpha | digit | "+" | "-" | "." )
-  private static final Pattern URI_PATTERN = Pattern.compile("[a-zA-Z][a-zA-Z0-9+-.]*:/.*");
+  @VisibleForTesting
+  static final Pattern URI_PATTERN = Pattern.compile("[a-zA-Z][a-zA-Z0-9+.-]*:/.*");
 
   private static final ClientTransport SHUTDOWN_TRANSPORT =
       new FailingClientTransport(Status.UNAVAILABLE.withDescription("Channel is shutdown"));

File: core/src/main/java/io/grpc/internal/ManagedClientTransport.java
Patch:
@@ -70,7 +70,7 @@ public interface ManagedClientTransport extends ClientTransport, WithLogId {
 
   /**
    * Receives notifications for the transport life-cycle events. Implementation does not need to be
-   * thread-safe, so notifications must be properly sychronized externally.
+   * thread-safe, so notifications must be properly synchronized externally.
    */
   interface Listener {
     /**

File: core/src/main/java/io/grpc/CallOptions.java
Patch:
@@ -101,7 +101,6 @@ public CallOptions withCompression(@Nullable String compressorName) {
    *
    * @param deadline the deadline or {@code null} for unsetting the deadline.
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1706")
   public CallOptions withDeadline(@Nullable Deadline deadline) {
     CallOptions newOptions = new CallOptions(this);
     newOptions.deadline = deadline;
@@ -152,7 +151,6 @@ public Long getDeadlineNanoTime() {
   /**
    * Returns the deadline or {@code null} if the deadline is not set.
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1706")
   @Nullable
   public Deadline getDeadline() {
     return deadline;

File: core/src/main/java/io/grpc/Deadline.java
Patch:
@@ -41,7 +41,6 @@
 /**
  * An absolute deadline in system time.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1706")
 public final class Deadline implements Comparable<Deadline> {
   private static final SystemTicker SYSTEM_TICKER = new SystemTicker();
   // nanoTime has a range of just under 300 years. Only allow up to 100 years in the past or future

File: stub/src/main/java/io/grpc/stub/AbstractStub.java
Patch:
@@ -106,7 +106,6 @@ public final CallOptions getCallOptions() {
    *
    * @param deadline the deadline or {@code null} for unsetting the deadline.
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1706")
   public final S withDeadline(@Nullable Deadline deadline) {
     return build(channel, callOptions.withDeadline(deadline));
   }

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -605,7 +605,7 @@ public void exchangeMetadataStreamingCall() throws Exception {
     Assert.assertEquals(contextValue, trailersCapture.get().get(METADATA_KEY));
   }
 
-  @Test(timeout = 100000000)
+  @Test(timeout = 10000)
   public void sendsTimeoutHeader() {
     long configuredTimeoutMinutes = 100;
     TestServiceGrpc.TestServiceBlockingStub stub = TestServiceGrpc.newBlockingStub(channel)

File: benchmarks/src/jmh/java/io/grpc/netty/HeadersBenchmark.java
Patch:
@@ -76,6 +76,7 @@ public String parseAsciiString(String serialized) {
   private AsciiString scheme = new AsciiString("https");
   private AsciiString defaultPath = new AsciiString("/Service.MethodMethodMethod");
   private AsciiString authority = new AsciiString("authority.googleapis.bogus");
+  private AsciiString userAgent = new AsciiString("grpc-java-netty");
 
   @Setup
   public void setUp() throws Exception {
@@ -89,7 +90,7 @@ public void setUp() throws Exception {
   @BenchmarkMode(Mode.SampleTime)
   @OutputTimeUnit(TimeUnit.NANOSECONDS)
   public Http2Headers convertHeaders() {
-    return Utils.convertClientHeaders(metadata, scheme, defaultPath, authority);
+    return Utils.convertClientHeaders(metadata, scheme, defaultPath, authority, userAgent);
   }
 }
 

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -73,8 +73,8 @@
 import io.netty.handler.codec.http2.Http2Connection;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.codec.http2.Http2Exception;
-import io.netty.handler.codec.http2.Http2FlowController;
 import io.netty.handler.codec.http2.Http2Headers;
+import io.netty.handler.codec.http2.Http2LocalFlowController;
 import io.netty.handler.codec.http2.Http2Settings;
 import io.netty.handler.codec.http2.Http2Stream;
 import io.netty.util.AsciiString;
@@ -363,7 +363,7 @@ public void connectionWindowShouldBeOverridden() throws Exception {
     setUp();
 
     Http2Stream connectionStream = connection().connectionStream();
-    Http2FlowController localFlowController = connection().local().flowController();
+    Http2LocalFlowController localFlowController = connection().local().flowController();
     int actualInitialWindowSize = localFlowController.initialWindowSize(connectionStream);
     int actualWindowSize = localFlowController.windowSize(connectionStream);
     assertEquals(flowControlWindow, actualWindowSize);

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -73,8 +73,8 @@
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
 import io.netty.handler.codec.http2.Http2CodecUtil;
 import io.netty.handler.codec.http2.Http2Error;
-import io.netty.handler.codec.http2.Http2FlowController;
 import io.netty.handler.codec.http2.Http2Headers;
+import io.netty.handler.codec.http2.Http2LocalFlowController;
 import io.netty.handler.codec.http2.Http2Settings;
 import io.netty.handler.codec.http2.Http2Stream;
 import io.netty.util.AsciiString;
@@ -266,7 +266,7 @@ public void connectionWindowShouldBeOverridden() throws Exception {
     setUp();
 
     Http2Stream connectionStream = connection().connectionStream();
-    Http2FlowController localFlowController = connection().local().flowController();
+    Http2LocalFlowController localFlowController = connection().local().flowController();
     int actualInitialWindowSize = localFlowController.initialWindowSize(connectionStream);
     int actualWindowSize = localFlowController.windowSize(connectionStream);
     assertEquals(flowControlWindow, actualWindowSize);

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -644,8 +644,8 @@ public void deadlineExceeded() {
                .setIntervalUs(20000))
                .build()).next();
       fail("Expected deadline to be exceeded");
-    } catch (Throwable t) {
-      assertEquals(Status.DEADLINE_EXCEEDED.getCode(), Status.fromThrowable(t).getCode());
+    } catch (StatusRuntimeException ex) {
+      assertEquals(Status.DEADLINE_EXCEEDED.getCode(), ex.getStatus().getCode());
     }
   }
 

File: okhttp/src/main/java/io/grpc/okhttp/AsyncFrameWriter.java
Patch:
@@ -238,10 +238,8 @@ public final void run() {
         doRun();
       } catch (RuntimeException e) {
         transport.onException(e);
-        throw e;
       } catch (Exception e) {
         transport.onException(e);
-        throw new RuntimeException(e);
       }
     }
 

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -313,7 +313,7 @@ public void onClose(Status status, Metadata trailers) {
       if (status.isOk()) {
         observer.onCompleted();
       } else {
-        observer.onError(status.asRuntimeException());
+        observer.onError(status.asRuntimeException(trailers));
       }
     }
   }
@@ -349,11 +349,11 @@ public void onClose(Status status, Metadata trailers) {
           // No value received so mark the future as an error
           responseFuture.setException(
               Status.INTERNAL.withDescription("No value received for unary call")
-                  .asRuntimeException());
+                  .asRuntimeException(trailers));
         }
         responseFuture.set(value);
       } else {
-        responseFuture.setException(status.asRuntimeException());
+        responseFuture.setException(status.asRuntimeException(trailers));
       }
     }
   }

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -340,7 +340,8 @@ private void createStream(CreateStreamCommand command, final ChannelPromise prom
       if (!connection().goAwaySent()) {
         logger.fine("Stream IDs have been exhausted for this connection. "
                 + "Initiating graceful shutdown of the connection.");
-        super.close(ctx(), ctx().newPromise());
+        lifecycleManager.notifyShutdown(e.getStatus());
+        close(ctx(), ctx().newPromise());
       }
       return;
     }

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -311,7 +311,7 @@ public void cancel(@Nullable String message, @Nullable Throwable cause) {
     cancelCalled = true;
     try {
       // Cancel is called in exception handling cases, so it may be the case that the
-      // stream was never successfully created.
+      // stream was never successfully created or start has never been called.
       if (stream != null) {
         Status status = Status.CANCELLED;
         if (message != null) {

File: core/src/main/java/io/grpc/internal/ClientStream.java
Patch:
@@ -43,8 +43,9 @@ public interface ClientStream extends Stream {
   /**
    * Abnormally terminates the stream. After calling this method, no further messages will be
    * sent or received, however it may still be possible to receive buffered messages for a brief
-   * period until {@link ClientStreamListener#closed} is called. This method is safe to be called
-   * at any time and multiple times and from any thread.
+   * period until {@link ClientStreamListener#closed} is called. This method may only be called
+   * after {@link #start}, but else is safe to be called at any time and multiple times and
+   * from any thread.
    *
    * @param reason must be non-OK
    */

File: core/src/main/java/io/grpc/internal/ServerCallImpl.java
Patch:
@@ -87,7 +87,7 @@ final class ServerCallImpl<ReqT, RespT> extends ServerCall<RespT> {
       String encoding = inboundHeaders.get(MESSAGE_ENCODING_KEY);
       Decompressor decompressor = decompressorRegistry.lookupDecompressor(encoding);
       if (decompressor == null) {
-        throw Status.INTERNAL
+        throw Status.UNIMPLEMENTED
             .withDescription(String.format("Can't find decompressor for %s", encoding))
             .asRuntimeException();
       }
@@ -233,7 +233,7 @@ public void messageRead(final InputStream message) {
         }
         // Special case for unary calls.
         if (messageReceived && call.method.getType() == MethodType.UNARY) {
-          call.stream.close(Status.INVALID_ARGUMENT.withDescription(
+          call.stream.close(Status.INTERNAL.withDescription(
                   "More than one request messages for unary call or server streaming call"),
               new Metadata());
           return;

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -276,7 +276,7 @@ public void streamListener_messageRead_unaryFailsOnMultiple() {
     verify(callListener).onMessage(1234L);
 
     verify(stream).close(statusCaptor.capture(), Mockito.isA(Metadata.class));
-    assertEquals(Status.Code.INVALID_ARGUMENT, statusCaptor.getValue().getCode());
+    assertEquals(Status.Code.INTERNAL, statusCaptor.getValue().getCode());
   }
 
   @Test

File: protobuf/src/main/java/io/grpc/protobuf/ProtoUtils.java
Patch:
@@ -89,7 +89,7 @@ public InputStream stream(T value) {
         try {
           return new ByteArrayInputStream(printer.print(value).getBytes(charset));
         } catch (InvalidProtocolBufferException e) {
-          throw Status.INVALID_ARGUMENT
+          throw Status.INTERNAL
               .withCause(e)
               .withDescription("Unable to print json proto")
               .asRuntimeException();

File: stub/src/main/java/io/grpc/stub/ServerCalls.java
Patch:
@@ -156,7 +156,7 @@ public void onHalfClose() {
                 onReady();
               }
             } else {
-              call.close(Status.INVALID_ARGUMENT.withDescription("Half-closed without a request"),
+              call.close(Status.INTERNAL.withDescription("Half-closed without a request"),
                   new Metadata());
             }
           }

File: stub/src/test/java/io/grpc/stub/ClientCallsTest.java
Patch:
@@ -84,13 +84,13 @@ public class ClientCallsTest {
     ArgumentCaptor<ClientCall.Listener<String>> listenerCaptor = ArgumentCaptor.forClass(null);
     verify(call).start(listenerCaptor.capture(), any(Metadata.class));
     ClientCall.Listener<String> listener = listenerCaptor.getValue();
-    listener.onClose(Status.INVALID_ARGUMENT, new Metadata());
+    listener.onClose(Status.INTERNAL, new Metadata());
     try {
       future.get();
       fail("Should fail");
     } catch (ExecutionException e) {
       Status status = Status.fromThrowable(e.getCause());
-      assertEquals(Status.INVALID_ARGUMENT, status);
+      assertEquals(Status.INTERNAL, status);
     }
   }
 

File: testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java
Patch:
@@ -556,7 +556,7 @@ public void earlyServerClose_serverFailure() throws Exception {
     ServerStreamListener mockServerStreamListener = serverStreamCreation.listener;
 
     Status status =
-        Status.INVALID_ARGUMENT.withDescription("I'm not listening").withCause(new Exception());
+        Status.INTERNAL.withDescription("I'm not listening").withCause(new Exception());
     serverStream.close(status, new Metadata());
     verify(mockServerStreamListener, timeout(TIMEOUT_MS)).closed(statusCaptor.capture());
     assertCodeEquals(Status.OK, statusCaptor.getValue());

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -107,11 +107,13 @@ public void testConfigureDeadlineNanoTime() {
     // Create a default stub
     TestServiceGrpc.TestServiceBlockingStub stub = TestServiceGrpc.newBlockingStub(channel);
     assertNull(stub.getCallOptions().getDeadlineNanoTime());
+    // Warm up JVM
+    stub.withDeadlineNanoTime(deadline);
     // Reconfigure it
     TestServiceGrpc.TestServiceBlockingStub reconfiguredStub = stub.withDeadlineNanoTime(deadline);
     // New altered config
     assertNotNull(reconfiguredStub.getCallOptions().getDeadlineNanoTime());
-    long maxDelta = MILLISECONDS.toNanos(30);
+    long maxDelta = MILLISECONDS.toNanos(10);
     long actualDelta = Math.abs(reconfiguredStub.getCallOptions().getDeadlineNanoTime() - deadline);
     assertTrue(maxDelta + " < " + actualDelta, maxDelta >= actualDelta);
     // Default config unchanged

File: core/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -113,7 +113,7 @@ public final boolean serverSendsOneMessage() {
    *
    * @param <T> type of serializable message
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1777")
   public interface Marshaller<T> {
     /**
      * Given a message, produce an {@link InputStream} for it so that it can be written to the wire.

File: core/src/main/java/io/grpc/PartialForwardingServerCall.java
Patch:
@@ -79,7 +79,7 @@ public void setCompression(String compressor) {
   }
 
   @Override
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1779")
   public Attributes attributes() {
     return delegate().attributes();
   }

File: core/src/main/java/io/grpc/Server.java
Patch:
@@ -58,7 +58,7 @@ public abstract class Server {
    *
    * @throws IllegalStateException if the server has not yet been started.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1780")
   public int getPort() {
     return -1;
   }

File: core/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -87,7 +87,7 @@ public static ServerBuilder<?> forPort(int port) {
    * @throws UnsupportedOperationException if this builder does not support dynamically adding
    *     services.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1701")
   public abstract T addService(BindableService bindableService);
 
   /**

File: core/src/main/java/io/grpc/ServerCall.java
Patch:
@@ -56,14 +56,14 @@ public abstract class ServerCall<RespT> {
    * {@link Attributes.Key} for the remote address of server call attributes
    * {@link ServerCall#attributes()}
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1710")
   public static final Attributes.Key<SocketAddress> REMOTE_ADDR_KEY =
           Attributes.Key.of("remote-addr");
   /**
    * {@link Attributes.Key} for the SSL session of server call attributes
    * {@link ServerCall#attributes()}
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1710")
   public static final Attributes.Key<SSLSession> SSL_SESSION_KEY =
           Attributes.Key.of("ssl-session");
 
@@ -221,7 +221,7 @@ public void setCompression(String compressor) {
    *
    * @return Attributes container
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1779")
   public Attributes attributes() {
     return Attributes.EMPTY;
   }

File: core/src/main/java/io/grpc/ServerInterceptor.java
Patch:
@@ -46,7 +46,7 @@
  * </ul>
  */
 @ThreadSafe
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1711")
 public interface ServerInterceptor {
   /**
    * Intercept {@link ServerCall} dispatch by the {@code next} {@link ServerCallHandler}. General

File: core/src/main/java/io/grpc/TransportManager.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * Manages transport life-cycles and provide ready-to-use transports.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1781")
 public abstract class TransportManager<T> {
   /**
    * Advises this {@code TransportManager} to retain transports only to these servers, for warming

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -47,7 +47,7 @@
  *
  * <p>The channel is intended to be fully-featured, high performance, and useful in testing.
  */
-@ExperimentalApi("There is no plan to make this API stable.")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1783")
 public class InProcessChannelBuilder extends
         AbstractManagedChannelImplBuilder<InProcessChannelBuilder> {
   /**

File: core/src/main/java/io/grpc/inprocess/InProcessServerBuilder.java
Patch:
@@ -45,7 +45,7 @@
  *
  * <p>The server is intended to be fully-featured, high performance, and useful in testing.
  */
-@ExperimentalApi("There is no plan to make this API stable.")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1783")
 public final class InProcessServerBuilder
         extends AbstractServerImplBuilder<InProcessServerBuilder> {
   /**

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancerFactory.java
Patch:
@@ -43,7 +43,7 @@
  * so before using it, make sure you have read all the {@code TODO} comments in {@link
  * GrpclbLoadBalancer}.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1782")
 public class GrpclbLoadBalancerFactory extends LoadBalancer.Factory {
 
   private static final GrpclbLoadBalancerFactory instance = new GrpclbLoadBalancerFactory();

File: netty/src/main/java/io/grpc/netty/GrpcSslContexts.java
Patch:
@@ -50,7 +50,7 @@
 /**
  * Utility for configuring SslContext for gRPC.
  */
-@ExperimentalApi("Only needed with experimental builders")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
 public class GrpcSslContexts {
   private GrpcSslContexts() {}
 
@@ -121,7 +121,7 @@ public static SslContextBuilder configure(SslContextBuilder builder) {
    * Set ciphers and APN appropriate for gRPC. Precisely what is set is permitted to change, so if
    * an application requires particular settings it should override the options set here.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
   public static SslContextBuilder configure(SslContextBuilder builder, SslProvider provider) {
     return builder.sslProvider(provider)
                   .ciphers(Http2SecurityUtil.CIPHERS, SupportedCipherSuiteFilter.INSTANCE)

File: netty/src/main/java/io/grpc/netty/NegotiationType.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * Identifies the negotiation used for starting up HTTP/2.
  */
-@ExperimentalApi("Only used by experimental builders")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
 public enum NegotiationType {
   /**
    * Uses TLS ALPN/NPN negotiation, assumes an SSL connection.

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -60,7 +60,7 @@
 /**
  * A builder to help simplify construction of channels using the Netty transport.
  */
-@ExperimentalApi("There is no plan to make this API stable, given transport API instability")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
 public class NettyChannelBuilder extends AbstractManagedChannelImplBuilder<NettyChannelBuilder> {
   public static final int DEFAULT_FLOW_CONTROL_WINDOW = 1048576; // 1MiB
 

File: netty/src/main/java/io/grpc/netty/NettyServerBuilder.java
Patch:
@@ -56,7 +56,7 @@
 /**
  * A builder to help simplify the construction of a Netty-based GRPC server.
  */
-@ExperimentalApi("There is no plan to make this API stable, given transport API instability")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1784")
 public final class NettyServerBuilder extends AbstractServerImplBuilder<NettyServerBuilder> {
   public static final int DEFAULT_FLOW_CONTROL_WINDOW = 1048576; // 1MiB
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -62,7 +62,7 @@
 import javax.net.ssl.SSLSocketFactory;
 
 /** Convenience class for building channels with the OkHttp transport. */
-@ExperimentalApi("There is no plan to make this API stable, given transport API instability")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1785")
 public class OkHttpChannelBuilder extends
         AbstractManagedChannelImplBuilder<OkHttpChannelBuilder> {
 

File: protobuf-lite/src/main/java/io/grpc/protobuf/lite/ProtoLiteUtils.java
Patch:
@@ -69,7 +69,7 @@ public class ProtoLiteUtils {
    * {@code MethodDescriptor.Marhsaller} for the time being.
    *
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1787")
   public static void setExtensionRegistry(ExtensionRegistryLite newRegistry) {
     globalRegistry = checkNotNull(newRegistry, "newRegistry");
   }

File: protobuf/src/main/java/io/grpc/protobuf/ProtoUtils.java
Patch:
@@ -76,7 +76,7 @@ public static <T extends Message> Marshaller<T> marshaller(final T defaultInstan
    *
    * <p>This is an unstable API and has not been optimized yet for performance.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1786")
   public static <T extends Message> Marshaller<T> jsonMarshaller(final T defaultInstance) {
     final Printer printer = JsonFormat.printer();
     // TODO(carl-mastrangelo): Add support for ExtensionRegistry (TypeRegistry?)

File: stub/src/main/java/io/grpc/stub/CallStreamObserver.java
Patch:
@@ -50,7 +50,7 @@
  * <p>Implementations of this class represent the 'outbound' message stream.
  *
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1788")
 public abstract class CallStreamObserver<V> implements StreamObserver<V> {
 
   /**

File: stub/src/main/java/io/grpc/stub/MetadataUtils.java
Patch:
@@ -58,7 +58,7 @@ private MetadataUtils() {}
    * @param extraHeaders the headers to be passed by each call on the returned stub.
    * @return an implementation of the stub with {@code extraHeaders} bound to each call.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1789")
   public static <T extends AbstractStub<T>> T attachHeaders(
       T stub,
       final Metadata extraHeaders) {
@@ -98,7 +98,7 @@ public void start(Listener<RespT> responseListener, Metadata headers) {
    * @return an implementation of the stub that allows to access the last received call's
    *         headers and trailers via {@code headersCapture} and {@code trailersCapture}.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1789")
   public static <T extends AbstractStub<T>> T captureMetadata(
       T stub,
       AtomicReference<Metadata> headersCapture,

File: stub/src/main/java/io/grpc/stub/ServerCallStreamObserver.java
Patch:
@@ -37,7 +37,7 @@
  * A refinement of {@link CallStreamObserver} to allows for interaction with call
  * cancellation events on the server side.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1788")
 public abstract class ServerCallStreamObserver<V> extends CallStreamObserver<V> {
 
   /**

File: stub/src/main/java/io/grpc/stub/ServerCalls.java
Patch:
@@ -44,7 +44,7 @@
  * Utility functions for adapting {@link ServerCallHandler}s to application service implementation,
  * meant to be used by the generated code.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1790")
 public class ServerCalls {
 
   private ServerCalls() {

File: testing/src/main/java/io/grpc/testing/StreamRecorder.java
Patch:
@@ -49,7 +49,7 @@
  * Utility implementation of {@link StreamObserver} used in testing. Records all the observed
  * values produced by the stream as well as any errors.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1791")
 public class StreamRecorder<T> implements StreamObserver<T> {
 
   /**

File: testing/src/main/java/io/grpc/testing/TestUtils.java
Patch:
@@ -72,7 +72,7 @@
 /**
  * Common utility functions useful for writing tests.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1791")
 public class TestUtils {
   public static final String TEST_SERVER_HOST = "foo.test.google.fr";
 

File: core/src/main/java/io/grpc/Attributes.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * An immutable type-safe container of attributes.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1764")
 @Immutable
 public final class Attributes {
 

File: core/src/main/java/io/grpc/BindableService.java
Patch:
@@ -46,7 +46,7 @@
  * Server server = ServerBuilder.forPort(1234).addService(new RouteGuideService()).build();
  * </code></pre></p>
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1701")
 public interface BindableService {
   /**
    * Creates {@link ServerServiceDefinition} object for current instance of service implementation.

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -221,7 +221,7 @@ public boolean isReady() {
    * Enables per-message compression, if an encoding type has been negotiated.  If no message
    * encoding has been negotiated, this is a no-op.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1703")
   public void setMessageCompression(boolean enabled) {
     // noop
   }

File: core/src/main/java/io/grpc/Codec.java
Patch:
@@ -41,7 +41,7 @@
  * Encloses classes related to the compression and decompression of messages.
  *
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/492")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
 public interface Codec extends Compressor, Decompressor {
   /**
    * A gzip compressor and decompressor.  In the future this will likely support other

File: core/src/main/java/io/grpc/Compressor.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Represents a message compressor.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/492")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
 public interface Compressor {
   /**
    * Returns the message encoding that this compressor uses.

File: core/src/main/java/io/grpc/CompressorRegistry.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * Encloses classes related to the compression and decompression of messages.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/492")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
 @ThreadSafe
 public final class CompressorRegistry {
   private static final CompressorRegistry DEFAULT_INSTANCE = new CompressorRegistry(

File: core/src/main/java/io/grpc/Context.java
Patch:
@@ -106,7 +106,7 @@
  * responsibility of the application to ensure that all contexts are properly cancelled.</li>
  * </ul>
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/262")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1705")
 public class Context {
 
   private static final Logger LOG = Logger.getLogger(Context.class.getName());

File: core/src/main/java/io/grpc/Contexts.java
Patch:
@@ -38,6 +38,7 @@
 /**
  * Utility methods for working with {@link Context}s in GRPC.
  */
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1705")
 public class Contexts {
 
   private Contexts() {
@@ -142,7 +143,7 @@ public void onReady() {
    * Returns the {@link Status} of a cancelled context or {@code null} if the context
    * is not cancelled.
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1737")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1705")
   public static Status statusFromCancelled(Context context) {
     Preconditions.checkNotNull(context, "context must not be null");
     if (!context.isCancelled()) {

File: core/src/main/java/io/grpc/Deadline.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * An absolute deadline in system time.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/262")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1706")
 public final class Deadline implements Comparable<Deadline> {
   private static final SystemTicker SYSTEM_TICKER = new SystemTicker();
   // nanoTime has a range of just under 300 years. Only allow up to 100 years in the past or future

File: core/src/main/java/io/grpc/Decompressor.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Represents a message decompressor.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/492")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
 public interface Decompressor {
   /**
    * Returns the message encoding that this compressor uses.

File: core/src/main/java/io/grpc/DecompressorRegistry.java
Patch:
@@ -49,7 +49,7 @@
 /**
  * Encloses classes related to the compression and decompression of messages.
  */
-@ExperimentalApi("https://github.com/grpc/grpc-java/issues/492")
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
 @ThreadSafe
 public final class DecompressorRegistry {
 
@@ -93,7 +93,7 @@ public Set<String> getKnownMessageEncodings() {
    * <p>The specification doesn't say anything about ordering, or preference, so the returned codes
    * can be arbitrary.
    */
-  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/492")
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public Set<String> getAdvertisedMessageEncodings() {
     Set<String> advertisedDecompressors = new HashSet<String>(decompressors.size());
     for (Entry<String, DecompressorInfo> entry : decompressors.entrySet()) {

File: core/src/main/java/io/grpc/DnsNameResolverFactory.java
Patch:
@@ -52,7 +52,7 @@
  *   <li>{@code "dns:///foo.googleapis.com"} (without port)</li>
  * </ul>
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1769")
 public final class DnsNameResolverFactory extends NameResolver.Factory {
 
   private static final String SCHEME = "dns";

File: core/src/main/java/io/grpc/EquivalentAddressGroup.java
Patch:
@@ -45,7 +45,7 @@
  * them is equally sufficient. They do have order. An address appears earlier on the list is likely
  * to be tried earlier.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1770")
 public final class EquivalentAddressGroup {
 
   private final List<SocketAddress> addrs;

File: core/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -46,7 +46,7 @@
  */
 // TODO(zhangkun83): since it's also used for non-loadbalancing cases like pick-first,
 // "RequestRouter" might be a better name.
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1771")
 @ThreadSafe
 public abstract class LoadBalancer<T> {
   /**
@@ -57,6 +57,7 @@ public abstract class LoadBalancer<T> {
    *
    * @param affinity for affinity-based routing
    */
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1766")
   public abstract T pickTransport(Attributes affinity);
 
   /**

File: core/src/main/java/io/grpc/ManagedChannelProvider.java
Patch:
@@ -130,7 +130,6 @@ protected static boolean isAndroid() {
   /**
    * Creates a new builder with the given target URI.
    */
-  @ExperimentalApi
   protected abstract ManagedChannelBuilder<?> builderForTarget(String target);
 
   public static final class ProviderNotFoundException extends RuntimeException {

File: core/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -46,7 +46,7 @@
  * <p>The addresses and attributes of a target may be changed over time, thus the caller registers a
  * {@link Listener} to receive continuous updates.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1770")
 @ThreadSafe
 public abstract class NameResolver {
   /**

File: core/src/main/java/io/grpc/NameResolverRegistry.java
Patch:
@@ -42,7 +42,7 @@
  * A registry that holds various {@link NameResolver.Factory}s and dispatches target URI to the
  * first one that can handle it.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1770")
 @ThreadSafe
 public final class NameResolverRegistry extends NameResolver.Factory {
   private static final NameResolverRegistry defaultRegistry =

File: core/src/main/java/io/grpc/PartialForwardingServerCall.java
Patch:
@@ -67,13 +67,13 @@ public boolean isCancelled() {
   }
 
   @Override
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1703")
   public void setMessageCompression(boolean enabled) {
     delegate().setMessageCompression(enabled);
   }
 
   @Override
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public void setCompression(String compressor) {
     delegate().setCompression(compressor);
   }

File: core/src/main/java/io/grpc/ResolvedServerInfo.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * The information about a server from a {@link NameResolver}.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1770")
 @Immutable
 public final class ResolvedServerInfo {
   private final SocketAddress address;

File: core/src/main/java/io/grpc/ServerBuilder.java
Patch:
@@ -103,15 +103,15 @@ public static ServerBuilder<?> forPort(int port) {
    * shouldn't be used unless you are using custom message encoding.   The default supported
    * decompressors are in {@code DecompressorRegistry.getDefaultInstance}.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public abstract T decompressorRegistry(DecompressorRegistry registry);
 
   /**
    * Set the compression registry for use in the channel.  This is an advanced API call and
    * shouldn't be used unless you are using custom message encoding.   The default supported
    * compressors are in {@code CompressorRegistry.getDefaultInstance}.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public abstract T compressorRegistry(CompressorRegistry registry);
 
   /**

File: core/src/main/java/io/grpc/ServerCall.java
Patch:
@@ -196,7 +196,7 @@ public boolean isReady() {
    * Enables per-message compression, if an encoding type has been negotiated.  If no message
    * encoding has been negotiated, this is a no-op.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public void setMessageCompression(boolean enabled) {
     // noop
   }
@@ -210,7 +210,7 @@ public void setMessageCompression(boolean enabled) {
    * @param compressor the name of the compressor to use.
    * @throws IllegalArgumentException if the compressor name can not be found.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public void setCompression(String compressor) {
     // noop
   }

File: core/src/main/java/io/grpc/ServerCallHandler.java
Patch:
@@ -37,7 +37,7 @@
  * Interface to initiate processing of incoming remote calls. Advanced applications and generated
  * code will implement this interface to allows {@link Server}s to invoke service methods.
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/933")
 @ThreadSafe
 public interface ServerCallHandler<RequestT, ResponseT> {
   /**

File: core/src/main/java/io/grpc/ServerMethodDefinition.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @see ServerServiceDefinition
  */
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1774")
 public final class ServerMethodDefinition<ReqT, RespT> {
   private final MethodDescriptor<ReqT, RespT> method;
   private final ServerCallHandler<ReqT, RespT> handler;

File: core/src/main/java/io/grpc/SimpleLoadBalancerFactory.java
Patch:
@@ -46,7 +46,7 @@
  * addresses from the {@link NameResolver}.
  */
 // TODO(zhangkun83): Only pick-first is implemented. We need to implement round-robin.
-@ExperimentalApi
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/1771")
 public final class SimpleLoadBalancerFactory extends LoadBalancer.Factory {
 
   private static final SimpleLoadBalancerFactory instance = new SimpleLoadBalancerFactory();

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -40,7 +40,6 @@
 import io.grpc.ClientInterceptor;
 import io.grpc.CompressorRegistry;
 import io.grpc.DecompressorRegistry;
-import io.grpc.ExperimentalApi;
 import io.grpc.LoadBalancer;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.NameResolver;
@@ -146,14 +145,12 @@ public final T loadBalancerFactory(LoadBalancer.Factory loadBalancerFactory) {
   }
 
   @Override
-  @ExperimentalApi
   public final T decompressorRegistry(DecompressorRegistry registry) {
     this.decompressorRegistry = registry;
     return thisT();
   }
 
   @Override
-  @ExperimentalApi
   public final T compressorRegistry(CompressorRegistry registry) {
     this.compressorRegistry = registry;
     return thisT();

File: core/src/main/java/io/grpc/internal/ContextRunnable.java
Patch:
@@ -32,13 +32,11 @@
 package io.grpc.internal;
 
 import io.grpc.Context;
-import io.grpc.ExperimentalApi;
 
 /**
  * Utility base implementation of {@link Runnable} that performs the same function as
  * {@link Context#wrap(Runnable)} without requiring the construction of an additional object.
  */
-@ExperimentalApi
 abstract class ContextRunnable implements Runnable {
 
   private final Context context;

File: stub/src/main/java/io/grpc/stub/AbstractStub.java
Patch:
@@ -106,7 +106,7 @@ public final CallOptions getCallOptions() {
    *
    * @param deadline the deadline or {@code null} for unsetting the deadline.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1706")
   public final S withDeadline(@Nullable Deadline deadline) {
     return build(channel, callOptions.withDeadline(deadline));
   }
@@ -144,7 +144,7 @@ public final S withDeadlineAfter(long duration, TimeUnit unit) {
    *
    * @param compressorName the name (e.g. "gzip") of the compressor to use.
    */
-  @ExperimentalApi
+  @ExperimentalApi("https://github.com/grpc/grpc-java/issues/1704")
   public final S withCompression(String compressorName) {
     return build(channel, callOptions.withCompression(compressorName));
   }

File: core/src/main/java/io/grpc/Context.java
Patch:
@@ -317,10 +317,10 @@ public <V1, V2, V3> Context withValues(Key<V1> k1, V1 v1, Key<V2> k2, V2 v2, Key
 
   /**
    * Create a new context which propagates the values of this context but does not cascade its
-   * cancellation and is its own independent root for cancellation.
+   * cancellation.
    */
-  public CancellableContext fork() {
-    return new Context(this).withCancellation();
+  public Context fork() {
+    return new Context(this);
   }
 
   boolean canBeCancelled() {

File: core/src/test/java/io/grpc/ContextTest.java
Patch:
@@ -128,7 +128,7 @@ public void run() {
 
   @Test
   public void rootCanBeAttached() {
-    Context.CancellableContext fork = Context.ROOT.fork();
+    Context fork = Context.ROOT.fork();
     fork.attach();
     Context.ROOT.attach();
     assertTrue(Context.ROOT.isCurrent());
@@ -426,11 +426,12 @@ public void nonCascadingCancellationDoesNotNotifyForked() {
     Context.CancellableContext base = Context.current().withCancellation();
     Context fork = base.fork();
     fork.addListener(cancellationListener, MoreExecutors.directExecutor());
+    assertEquals(0, base.listenerCount());
+    assertEquals(0, fork.listenerCount());
     assertTrue(base.cancel(new Throwable()));
     assertNull(listenerNotifedContext);
     assertFalse(fork.isCancelled());
     assertNull(fork.cancellationCause());
-    assertEquals(1, fork.listenerCount());
   }
 
   @Test

File: core/src/main/java/io/grpc/Status.java
Patch:
@@ -392,6 +392,8 @@ public String parseAsciiString(String value) {
 
   /**
    * Extract an error {@link Status} from the causal chain of a {@link Throwable}.
+   *
+   * @return non-{@code null} status
    */
   public static Status fromThrowable(Throwable t) {
     for (Throwable cause : Throwables.getCausalChain(t)) {

File: benchmarks/src/main/java/io/grpc/benchmarks/ByteBufOutputMarshaller.java
Patch:
@@ -40,7 +40,7 @@
 import java.io.InputStream;
 
 /**
- * Simple {@link MethodDescriptor#Marshaller} for Netty's {@link ByteBuf}.
+ * Simple {@link io.grpc.MethodDescriptor.Marshaller} for Netty's {@link ByteBuf}.
  */
 public class ByteBufOutputMarshaller implements MethodDescriptor.Marshaller<ByteBuf> {
 

File: benchmarks/src/main/java/io/grpc/benchmarks/Utils.java
Patch:
@@ -82,7 +82,8 @@ public final class Utils {
   // Value quantization will be no larger than 1/10^3 = 0.1%.
   public static final int HISTOGRAM_PRECISION = 3;
 
-  public static int DEFAULT_FLOW_CONTROL_WINDOW = NettyChannelBuilder.DEFAULT_FLOW_CONTROL_WINDOW;
+  public static final int DEFAULT_FLOW_CONTROL_WINDOW =
+      NettyChannelBuilder.DEFAULT_FLOW_CONTROL_WINDOW;
 
   private Utils() {
   }

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/ClientConfiguration.java
Patch:
@@ -94,11 +94,11 @@ public Messages.SimpleRequest newRequest() {
    * Constructs a builder for configuring a client application with supported parameters. If no
    * parameters are provided, all parameters are assumed to be supported.
    */
-  public static Builder newBuilder(ClientParam... supportedParams) {
+  static Builder newBuilder(ClientParam... supportedParams) {
     return new Builder(supportedParams);
   }
 
-  public static class Builder extends AbstractConfigurationBuilder<ClientConfiguration> {
+  static final class Builder extends AbstractConfigurationBuilder<ClientConfiguration> {
     private final Collection<Param> supportedParams;
 
     private Builder(ClientParam... supportedParams) {

File: interop-testing/src/main/java/io/grpc/testing/integration/StressTestClient.java
Patch:
@@ -211,15 +211,15 @@ void runStressTest() throws Exception {
     int numChannels = addresses.size() * channelsPerServer;
     int numThreads = numChannels * stubsPerChannel;
     threadpool = MoreExecutors.listeningDecorator(newFixedThreadPool(numThreads));
-    int server_idx = -1;
+    int serverIdx = -1;
     for (InetSocketAddress address : addresses) {
-      server_idx++;
+      serverIdx++;
       for (int i = 0; i < channelsPerServer; i++) {
         ManagedChannel channel = createChannel(address);
         channels.add(channel);
         for (int j = 0; j < stubsPerChannel; j++) {
           String gaugeName =
-              String.format("/stress_test/server_%d/channel_%d/stub_%d/qps", server_idx, i, j);
+              String.format("/stress_test/server_%d/channel_%d/stub_%d/qps", serverIdx, i, j);
           Worker worker =
               new Worker(channel, testCaseWeightPairs, durationSecs, gaugeName);
 

File: netty/src/main/java/io/grpc/netty/NettyServer.java
Patch:
@@ -104,7 +104,7 @@ public int getPort() {
     if (!(localAddr instanceof InetSocketAddress)) {
       return -1;
     }
-    return ((InetSocketAddress)localAddr).getPort();
+    return ((InetSocketAddress) localAddr).getPort();
   }
 
   @Override

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -62,6 +62,7 @@
 import io.grpc.Status;
 
 import java.io.InputStream;
+import java.util.concurrent.CancellationException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
@@ -312,7 +313,8 @@ public void cancel() {
       // Cancel is called in exception handling cases, so it may be the case that the
       // stream was never successfully created.
       if (stream != null) {
-        stream.cancel(Status.CANCELLED);
+        stream.cancel(Status.CANCELLED.withCause(
+            new CancellationException("Client requested cancellation")));
       }
     } finally {
       if (context != null) {

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -349,7 +349,8 @@ public void cancelAfterBegin() throws Exception {
     requestObserver.onError(new RuntimeException());
     responseObserver.awaitCompletion();
     assertEquals(Arrays.<StreamingInputCallResponse>asList(), responseObserver.getValues());
-    assertEquals(Status.CANCELLED, Status.fromThrowable(responseObserver.getError()));
+    assertEquals(Status.Code.CANCELLED,
+        Status.fromThrowable(responseObserver.getError()).getCode());
   }
 
   @Test(timeout = 10000)
@@ -377,7 +378,7 @@ public void cancelAfterFirstResponse() throws Exception {
     requestObserver.onError(new RuntimeException());
     ArgumentCaptor<Throwable> captor = ArgumentCaptor.forClass(Throwable.class);
     verify(responseObserver, timeout(OPERATION_TIMEOUT)).onError(captor.capture());
-    assertEquals(Status.CANCELLED, Status.fromThrowable(captor.getValue()));
+    assertEquals(Status.Code.CANCELLED, Status.fromThrowable(captor.getValue()).getCode());
     verifyNoMoreInteractions(responseObserver);
   }
 

File: core/src/main/java/io/grpc/DnsNameResolverFactory.java
Patch:
@@ -42,7 +42,7 @@
  *
  * <p>It resolves a target URI whose scheme is {@code "dns"}. The (optional) authority of the target
  * URI is reserved for the address of alternative DNS server (not implemented yet). The path of the
- * target URI, exluding the leading slash {@code '/'}, is treated as the host name and the optional
+ * target URI, excluding the leading slash {@code '/'}, is treated as the host name and the optional
  * port to be resolved by DNS. Example target URIs:
  *
  * <ul>

File: core/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -42,7 +42,7 @@
  * <p>Note to implementations: all methods are expected to return quickly. Any work that may block
  * should be done asynchronously.
  *
- * @param T the transport type to balance
+ * @param <T> the transport type to balance
  */
 // TODO(zhangkun83): since it's also used for non-loadbalancing cases like pick-first,
 // "RequestRouter" might be a better name.

File: core/src/main/java/io/grpc/ServerServiceDefinition.java
Patch:
@@ -71,7 +71,7 @@ public String getName() {
   }
 
   /**
-   * Look up a method by its fuly qualified name.
+   * Look up a method by its fully qualified name.
    *
    * @param name the fully qualified name without leading slash. E.g., "com.foo.Foo/Bar"
    */

File: core/src/main/java/io/grpc/EquivalentAddressGroup.java
Patch:
@@ -31,6 +31,8 @@
 
 package io.grpc;
 
+import com.google.common.base.Preconditions;
+
 import java.net.SocketAddress;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -49,6 +51,7 @@ public final class EquivalentAddressGroup {
   private final List<SocketAddress> addrs;
 
   public EquivalentAddressGroup(List<SocketAddress> addrs) {
+    Preconditions.checkArgument(!addrs.isEmpty(), "addrs is empty");
     this.addrs = Collections.unmodifiableList(new ArrayList<SocketAddress>(addrs));
   }
 

File: core/src/main/java/io/grpc/LoadBalancer.java
Patch:
@@ -68,6 +68,9 @@ public void shutdown() { }
    * Handles newly resolved addresses and service config from name resolution system.
    *
    * <p>Implementations should not modify the given {@code servers}.
+   *
+   * @param servers the resolved server addresses. Never empty.
+   * @param config extra configuration data from naming system.
    */
   public void handleResolvedAddresses(List<ResolvedServerInfo> servers, Attributes config) { }
 

File: core/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -119,6 +119,9 @@ public interface Listener {
      * Handles updates on resolved addresses and config.
      *
      * <p>Implementations will not modify the given {@code servers}.
+     *
+     * @param servers the resolved server addresses. An empty list will trigger {@link #onError}
+     * @param config extra configuration data from naming system
      */
     void onUpdate(List<ResolvedServerInfo> servers, Attributes config);
 

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -384,7 +384,7 @@ public ClientTransport getTransport(final EquivalentAddressGroup addressGroup) {
         ts = transports.get(addressGroup);
         if (ts == null) {
           ts = new TransportSet(addressGroup, authority(), loadBalancer, backoffPolicyProvider,
-              transportFactory, scheduledExecutor, new TransportSet.Callback() {
+              transportFactory, scheduledExecutor, executor, new TransportSet.Callback() {
                 @Override
                 public void onTerminated() {
                   synchronized (lock) {
@@ -440,7 +440,7 @@ private class InterimTransportImpl implements InterimTransport<ClientTransport>
     private boolean closed;
 
     InterimTransportImpl() {
-      delayedTransport = new DelayedClientTransport();
+      delayedTransport = new DelayedClientTransport(executor);
       delayedTransport.start(new ManagedClientTransport.Listener() {
           @Override public void transportShutdown(Status status) {}
 

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -643,7 +643,7 @@ public void deadlineExceeded() {
                .build()).next();
       fail("Expected deadline to be exceeded");
     } catch (Throwable t) {
-      assertEquals(Status.DEADLINE_EXCEEDED, Status.fromThrowable(t));
+      assertEquals(Status.DEADLINE_EXCEEDED.getCode(), Status.fromThrowable(t).getCode());
     }
   }
 
@@ -666,7 +666,8 @@ public void deadlineExceededServerStreaming() throws Exception {
         .withDeadlineAfter(30, TimeUnit.MILLISECONDS)
         .streamingOutputCall(request, recorder);
     recorder.awaitCompletion();
-    assertEquals(Status.DEADLINE_EXCEEDED, Status.fromThrowable(recorder.getError()));
+    assertEquals(Status.DEADLINE_EXCEEDED.getCode(),
+        Status.fromThrowable(recorder.getError()).getCode());
   }
 
   @Test(timeout = 10000)

File: interop-testing/src/test/java/io/grpc/testing/integration/CascadingTest.java
Patch:
@@ -121,7 +121,7 @@ public void testCascadingCancellationViaOuterContextExpiration() throws Exceptio
     } catch (StatusRuntimeException sre) {
       // Wait for the workers to finish
       Status status = Status.fromThrowable(sre);
-      assertEquals(Status.Code.CANCELLED, status.getCode());
+      assertEquals(Status.Code.DEADLINE_EXCEEDED, status.getCode());
 
       // Should have 3 calls before timeout propagates
       assertEquals(3, nodeCount.get());
@@ -229,7 +229,8 @@ public void run() {
                           blockingStub.unaryCall((Messages.SimpleRequest) message);
                         } catch (Exception e) {
                           Status status = Status.fromThrowable(e);
-                          if (status.getCode() == Status.Code.CANCELLED) {
+                          if (status.getCode() == Status.Code.CANCELLED
+                              || status.getCode() == Status.Code.DEADLINE_EXCEEDED) {
                             observedCancellations.countDown();
                           } else if (status.getCode() == Status.Code.ABORTED) {
                             // Propagate aborted back up

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -111,7 +111,7 @@ public void testConfigureDeadlineNanoTime() {
     TestServiceGrpc.TestServiceBlockingStub reconfiguredStub = stub.withDeadlineNanoTime(deadline);
     // New altered config
     assertNotNull(reconfiguredStub.getCallOptions().getDeadlineNanoTime());
-    long maxDelta = MILLISECONDS.toNanos(20);
+    long maxDelta = MILLISECONDS.toNanos(30);
     long actualDelta = Math.abs(reconfiguredStub.getCallOptions().getDeadlineNanoTime() - deadline);
     assertTrue(maxDelta + " < " + actualDelta, maxDelta >= actualDelta);
     // Default config unchanged

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -93,8 +93,6 @@
 class NettyServerHandler extends AbstractNettyHandler {
   private static Logger logger = Logger.getLogger(NettyServerHandler.class.getName());
 
-  private static final Status GOAWAY_STATUS = Status.UNAVAILABLE;
-
   private final Http2Connection.PropertyKey streamKey;
   private final ServerTransportListener transportListener;
   private final int maxMessageSize;
@@ -263,13 +261,15 @@ protected void onStreamError(ChannelHandlerContext ctx, Throwable cause,
   @Override
   public void channelInactive(ChannelHandlerContext ctx) throws Exception {
     try {
+      final Status status =
+          Status.UNAVAILABLE.withDescription("connection terminated for unknown reason");
       // Any streams that are still active must be closed
       connection().forEachActiveStream(new Http2StreamVisitor() {
         @Override
         public boolean visit(Http2Stream stream) throws Http2Exception {
           NettyServerStream serverStream = serverStream(stream);
           if (serverStream != null) {
-            serverStream.abortStream(GOAWAY_STATUS, false);
+            serverStream.abortStream(status, false);
           }
           return true;
         }

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -638,7 +638,8 @@ public void run() {
         // nothing, otherwise, we finish all streams since it's a real IO issue.
         // We don't call onException() here since we don't want to log the warning in case this is
         // triggered by socket closing.
-        startGoAway(0, Status.UNAVAILABLE);
+        startGoAway(0,
+            Status.UNAVAILABLE.withDescription("End of stream or IOException"));
       } catch (Exception t) {
         // TODO(madongfly): Send the exception message to the server.
         frameWriter.goAway(0, ErrorCode.PROTOCOL_ERROR, new byte[0]);

File: core/src/main/java/io/grpc/NameResolver.java
Patch:
@@ -75,8 +75,10 @@ public abstract class NameResolver {
    *
    * <p>This is only a hint. Implementation takes it as a signal but may not start resolution
    * immediately.
+   *
+   * <p>The default implementation is no-op.
    */
-  public abstract void refresh();
+  public void refresh() {}
 
   public abstract static class Factory {
     /**

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -266,9 +266,6 @@ public void start(final Listener listener) {
               Attributes.EMPTY);
         }
 
-        @Override
-        public void refresh() {}
-
         @Override
         public void shutdown() {}
       };

File: core/src/test/java/io/grpc/internal/ManagedChannelImplGetNameResolverTest.java
Patch:
@@ -174,8 +174,6 @@ private static class FakeNameResolver extends NameResolver {
 
     @Override public void start(final Listener listener) {}
 
-    @Override public void refresh() {}
-
     @Override public void shutdown() {}
   }
 }

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -385,7 +385,7 @@ public String toString() {
       };
 
   /**
-   * Shared executor for managing channel timers.
+   * Shared single-threaded executor for managing channel timers.
    */
   public static final Resource<ScheduledExecutorService> TIMER_SERVICE =
       new Resource<ScheduledExecutorService>() {

File: stub/src/test/java/io/grpc/stub/AbstractStubTest.java
Patch:
@@ -34,8 +34,11 @@
 import io.grpc.CallOptions;
 import io.grpc.Channel;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.mockito.Mock;
 
+@RunWith(JUnit4.class)
 public class AbstractStubTest {
 
   @Mock

File: core/src/main/java/io/grpc/ManagedChannel.java
Patch:
@@ -64,6 +64,8 @@ public abstract class ManagedChannel extends Channel {
    * Initiates a forceful shutdown in which preexisting and new calls are cancelled. Although
    * forceful, the shutdown process is still not instantaneous; {@link #isTerminated()} will likely
    * return {@code false} immediately after this method returns.
+   *
+   * <p>NOT YET IMPLEMENTED. This method currently behaves identically to shutdown().
    */
   public abstract ManagedChannel shutdownNow();
 

File: core/src/test/java/io/grpc/ClientInterceptorsTest.java
Patch:
@@ -31,6 +31,7 @@
 
 package io.grpc;
 
+import static java.util.concurrent.TimeUnit.NANOSECONDS;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotSame;
@@ -244,8 +245,8 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
 
   @Test
   public void callOptions() {
-    final CallOptions initialCallOptions = CallOptions.DEFAULT.withDeadlineNanoTime(100L);
-    final CallOptions newCallOptions = initialCallOptions.withDeadlineNanoTime(300L);
+    final CallOptions initialCallOptions = CallOptions.DEFAULT.withDeadlineAfter(100, NANOSECONDS);
+    final CallOptions newCallOptions = initialCallOptions.withDeadlineAfter(300, NANOSECONDS);
     assertNotSame(initialCallOptions, newCallOptions);
     ClientInterceptor interceptor = spy(new ClientInterceptor() {
       @Override

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -417,8 +417,8 @@ public void onClose(Status status, Metadata trailers) {
 
   @Test
   public void deadlineExceededBeforeCallStarted() {
-    CallOptions callOptions = CallOptions.DEFAULT.withDeadlineNanoTime(TimeUnit.SECONDS.toNanos(1));
-    fakeClock.forwardTime(1, TimeUnit.SECONDS);
+    CallOptions callOptions = CallOptions.DEFAULT.withDeadlineAfter(0, TimeUnit.SECONDS);
+    fakeClock.forwardTime(System.nanoTime(), TimeUnit.NANOSECONDS);
     ClientCallImpl<Void, Void> call = new ClientCallImpl<Void, Void>(
         DESCRIPTOR,
         new SerializingExecutor(Executors.newSingleThreadExecutor()),

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -96,6 +96,7 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
 /** Unit tests for {@link ManagedChannelImpl}. */
@@ -162,7 +163,7 @@ public void immediateDeadlineExceeded() {
     ManagedChannel channel = createChannel(
         new FakeNameResolverFactory(true), NO_INTERCEPTOR);
     ClientCall<String, Integer> call =
-        channel.newCall(method, CallOptions.DEFAULT.withDeadlineNanoTime(System.nanoTime()));
+        channel.newCall(method, CallOptions.DEFAULT.withDeadlineAfter(0, TimeUnit.NANOSECONDS));
     call.start(mockCallListener, new Metadata());
     verify(mockCallListener, timeout(1000)).onClose(
         same(Status.DEADLINE_EXCEEDED), any(Metadata.class));

File: core/src/test/java/io/grpc/DeadlineTest.java
Patch:
@@ -117,7 +117,7 @@ public void run() {
             latch.countDown();
           }
         }, Executors.newSingleThreadScheduledExecutor());
-    if (!latch.await(55, TimeUnit.MILLISECONDS)) {
+    if (!latch.await(70, TimeUnit.MILLISECONDS)) {
       fail("Deadline listener did not execute in time");
     }
   }

File: stub/src/main/java/io/grpc/stub/MetadataUtils.java
Patch:
@@ -95,7 +95,8 @@ public void start(Listener<RespT> responseListener, Metadata headers) {
    * @param stub to capture for
    * @param headersCapture to record the last received headers
    * @param trailersCapture to record the last received trailers
-   * @return an implementation of the stub with {@code extraHeaders} bound to each call.
+   * @return an implementation of the stub that allows to access the last received call's
+   *         headers and trailers via {@code headersCapture} and {@code trailersCapture}.
    */
   @ExperimentalApi
   public static <T extends AbstractStub<T>> T captureMetadata(

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -363,7 +363,7 @@ private void maybeTerminateChannel() {
         SharedResourceHolder.release(GrpcUtil.SHARED_CHANNEL_EXECUTOR, (ExecutorService) executor);
       }
       // Release the transport factory so that it can deallocate any resources.
-      transportFactory.release();
+      transportFactory.close();
     }
   }
 

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -249,7 +249,7 @@ public void twoCallsAndGracefulShutdown() {
     transportListener.transportTerminated();
     assertTrue(channel.isTerminated());
 
-    verify(mockTransportFactory).release();
+    verify(mockTransportFactory).close();
     verifyNoMoreInteractions(mockTransportFactory);
     verify(mockTransport, atLeast(0)).getLogId();
     verifyNoMoreInteractions(mockTransport);

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java
Patch:
@@ -99,7 +99,7 @@
 /**
  * Abstract base class for all GRPC transport tests.
  */
-public abstract class AbstractTransportTest {
+public abstract class AbstractInteropTest {
 
   public static final Metadata.Key<Messages.SimpleContext> METADATA_KEY =
       ProtoUtils.keyForProto(Messages.SimpleContext.getDefaultInstance());

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -258,7 +258,7 @@ private void runTest(String testCase) throws Exception {
     }
   }
 
-  private class Tester extends AbstractTransportTest {
+  private class Tester extends AbstractInteropTest {
     @Override
     protected ManagedChannel createChannel() {
       if (!useOkHttp) {

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java
Patch:
@@ -48,7 +48,7 @@
  * Run transport tests over the Netty in-process channel.
  */
 @RunWith(JUnit4.class)
-public class Http2NettyLocalChannelTest extends AbstractTransportTest {
+public class Http2NettyLocalChannelTest extends AbstractInteropTest {
 
   /** Start server. */
   @BeforeClass

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java
Patch:
@@ -50,7 +50,7 @@
  * Integration tests for GRPC over HTTP2 using the Netty framework.
  */
 @RunWith(JUnit4.class)
-public class Http2NettyTest extends AbstractTransportTest {
+public class Http2NettyTest extends AbstractInteropTest {
   private static int serverPort = TestUtils.pickUnusedPort();
 
   /** Starts the server with HTTPS. */

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -68,7 +68,7 @@
  * Integration tests for GRPC over Http2 using the OkHttp framework.
  */
 @RunWith(JUnit4.class)
-public class Http2OkHttpTest extends AbstractTransportTest {
+public class Http2OkHttpTest extends AbstractInteropTest {
   private static int serverPort = TestUtils.pickUnusedPort();
 
   /** Starts the server with HTTPS. */

File: interop-testing/src/test/java/io/grpc/testing/integration/InProcessTest.java
Patch:
@@ -42,7 +42,7 @@
 
 /** Unit tests for {@link InProcess}. */
 @RunWith(JUnit4.class)
-public class InProcessTest extends AbstractTransportTest {
+public class InProcessTest extends AbstractInteropTest {
   private static String serverName = "test";
 
   /** Starts the in-process server. */

File: interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java
Patch:
@@ -78,7 +78,7 @@
  * Tests that compression is turned on.
  */
 @RunWith(JUnit4.class)
-public class TransportCompressionTest extends AbstractTransportTest {
+public class TransportCompressionTest extends AbstractInteropTest {
 
   private static int serverPort = TestUtils.pickUnusedPort();
 

File: netty/src/main/java/io/grpc/netty/NettyClientStream.java
Patch:
@@ -112,6 +112,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
 
   /**
    * Intended to be overriden by NettyClientTransport, which has more information about failures.
+   * May only be called from event loop.
    */
   protected abstract Status statusFromFailedFuture(ChannelFuture f);
 

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -496,7 +496,7 @@ public long read() {
     };
 
     return NettyClientHandler.newHandler(connection, frameReader(), frameWriter(),
-        listener, flowControlWindow,ticker);
+        new ClientTransportLifecycleManager(listener), flowControlWindow, ticker);
   }
 
   @Override

File: core/src/test/java/io/grpc/internal/FakeClock.java
Patch:
@@ -102,6 +102,7 @@ private class ScheduledExecutorImpl implements ScheduledExecutorService {
     @Override public ScheduledFuture<?> schedule(Runnable cmd, long delay, TimeUnit unit) {
       ScheduledTask task = new ScheduledTask(currentTimeNanos + unit.toNanos(delay), cmd);
       tasks.add(task);
+      runDueTasks();
       return task;
     }
 

File: core/src/test/java/io/grpc/internal/TransportSetTest.java
Patch:
@@ -62,7 +62,7 @@
 
 import java.net.SocketAddress;
 import java.util.Arrays;
-import java.util.LinkedList;
+import java.util.concurrent.BlockingQueue;
 
 /**
  * Unit tests for {@link TransportSet}.
@@ -92,7 +92,7 @@ public class TransportSetTest {
 
   private TransportSet transportSet;
   private EquivalentAddressGroup addressGroup;
-  private LinkedList<MockClientTransportInfo> transports;
+  private BlockingQueue<MockClientTransportInfo> transports;
 
   @Before public void setUp() {
     MockitoAnnotations.initMocks(this);

File: core/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -158,7 +158,7 @@ public synchronized void shutdown() {
       return;
     }
     shutdownStatus = Status.UNAVAILABLE.withDescription("transport was requested to shut down");
-    notifyShutdown(Status.OK.withDescription(shutdownStatus.getDescription()));
+    notifyShutdown(shutdownStatus);
     if (streams.isEmpty()) {
       notifyTerminated();
     }

File: core/src/main/java/io/grpc/internal/DelayedClientTransport.java
Patch:
@@ -139,7 +139,7 @@ public void shutdown() {
       }
       shutdown = true;
       listener.transportShutdown(
-          Status.OK.withDescription("Channel requested transport to shut down"));
+          Status.UNAVAILABLE.withDescription("Channel requested transport to shut down"));
       if (pendingStreams == null || pendingStreams.isEmpty()) {
         pendingStreams = null;
         listener.transportTerminated();

File: core/src/main/java/io/grpc/internal/ManagedClientTransport.java
Patch:
@@ -78,7 +78,6 @@ interface Listener {
      * streams may continue, and the transport may still be able to process {@link #newStream} as
      * long as it doesn't own the new streams. Shutdown could have been caused by an error or normal
      * operation.  It is possible that this method is called without {@link #shutdown} being called.
-     * If the argument to this function is {@link Status#isOk}, it is safe to immediately reconnect.
      *
      * <p>This is called exactly once, and must be called prior to {@link #transportTerminated}.
      *

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -171,7 +171,7 @@ public void start(final Listener<RespT> observer, Metadata headers) {
       callExecutor.execute(new ContextRunnable(context) {
         @Override
         public void runInContext() {
-          observer.onClose(Status.CANCELLED.withCause(context.cause()), new Metadata());
+          observer.onClose(Status.CANCELLED.withCause(context.cancellationCause()), new Metadata());
         }
       });
       return;

File: core/src/test/java/io/grpc/internal/ServerCallImplTest.java
Patch:
@@ -219,7 +219,7 @@ public void streamListener_closedOk() {
     verify(callListener).onComplete();
     assertTrue(timeout.isCancelled());
     assertTrue(context.isCancelled());
-    assertNull(context.cause());
+    assertNull(context.cancellationCause());
   }
 
   @Test
@@ -232,7 +232,7 @@ public void streamListener_closedCancelled() {
     verify(callListener).onCancel();
     assertTrue(timeout.isCancelled());
     assertTrue(context.isCancelled());
-    assertNull(context.cause());
+    assertNull(context.cancellationCause());
   }
 
   @Test

File: core/src/main/java/io/grpc/internal/AbstractClientStream.java
Patch:
@@ -34,7 +34,6 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
-import static io.grpc.internal.GrpcUtil.CANCEL_REASONS;
 
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Preconditions;
@@ -292,7 +291,7 @@ public final void halfClose() {
    */
   @Override
   public final void cancel(Status reason) {
-    checkArgument(CANCEL_REASONS.contains(reason.getCode()), "Invalid cancellation reason");
+    checkArgument(!reason.isOk(), "Should not cancel with OK status");
     cancelled = true;
     sendCancel(reason);
     dispose();

File: core/src/main/java/io/grpc/internal/ClientStream.java
Patch:
@@ -46,9 +46,7 @@ public interface ClientStream extends Stream {
    * period until {@link ClientStreamListener#closed} is called. This method is safe to be called
    * at any time and multiple times and from any thread.
    *
-   * @param reason must have {@link io.grpc.Status.Code#CANCELLED},
-   *     {@link io.grpc.Status.Code#DEADLINE_EXCEEDED}, {@link io.grpc.Status.Code#INTERNAL},
-   *     or {@link io.grpc.Status.Code#UNKNOWN}
+   * @param reason must be non-OK
    */
   void cancel(Status reason);
 

File: core/src/test/java/io/grpc/internal/AbstractClientStreamTest.java
Patch:
@@ -83,13 +83,12 @@ public WritableBuffer allocate(int capacityHint) {
   };
 
   @Test
-  public void cancel_onlyExpectedCodesAccepted() {
+  public void cancel_doNotAcceptOk() {
     for (Code code : Code.values()) {
       ClientStreamListener listener = new BaseClientStreamListener();
       AbstractClientStream<Integer> stream = new BaseAbstractClientStream<Integer>(allocator);
       stream.start(listener);
-      if (code == Code.DEADLINE_EXCEEDED || code == Code.CANCELLED || code == Code.INTERNAL
-          || code == Code.UNKNOWN) {
+      if (code != Code.OK) {
         stream.cancel(Status.fromCodeValue(code.value()));
       } else {
         try {

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -109,7 +109,6 @@ public class ClientCallImplTest {
 
   @Mock private ClientStreamListener streamListener;
   @Mock private ClientTransport clientTransport;
-  @Mock private DelayedStream delayedStream;
   @Captor private ArgumentCaptor<Status> statusCaptor;
 
   @Mock

File: core/src/main/java/io/grpc/internal/DelayedClientTransport.java
Patch:
@@ -100,6 +100,7 @@ public ClientStream newStream(MethodDescriptor<?, ?> method, Metadata headers) {
     return stream;
   }
 
+  @Override
   public void ping(final PingCallback callback, Executor executor) {
     Supplier<ClientTransport> supplier = transportSupplier;
     if (supplier != null) {

File: core/src/main/java/io/grpc/internal/DelayedStream.java
Patch:
@@ -128,6 +128,9 @@ public void start(ClientStreamListener listener) {
   private void startStream() {
     checkState(realStream != null, "realStream");
     checkState(listener != null, "listener");
+    if (authority != null) {
+      realStream.setAuthority(authority);
+    }
     realStream.start(listener);
 
     if (decompressor != null) {

File: core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java
Patch:
@@ -368,7 +368,6 @@ public void nameResolvedAfterChannelShutdown() {
     call.start(mockCallListener, headers);
     channel.shutdown();
     assertTrue(channel.isShutdown());
-    assertTrue(channel.isTerminated());
     // Name resolved after the channel is shut down, which is possible if the name resolution takes
     // time and is not cancellable. The resolved address will still be passed to the LoadBalancer.
     nameResolverFactory.allResolved();

File: testing/src/main/java/io/grpc/testing/TestUtils.java
Patch:
@@ -248,7 +248,7 @@ public static SSLSocketFactory newSslSocketFactoryForCa(File certChainFile) thro
    * Creates an SSLSocketFactory which contains {@code certChainFile} as its only root certificate.
    */
   public static SSLSocketFactory newSslSocketFactoryForCa(InputStream certChain) throws Exception {
-    KeyStore ks = KeyStore.getInstance("JKS");
+    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
     ks.load(null, null);
     CertificateFactory cf = CertificateFactory.getInstance("X.509");
     X509Certificate cert = (X509Certificate) cf.generateCertificate(

File: core/src/main/java/io/grpc/internal/ReadableBuffers.java
Patch:
@@ -288,8 +288,8 @@ public void readBytes(OutputStream dest, int length) throws IOException {
     public ByteReadableBufferWrapper readBytes(int length) {
       checkReadable(length);
       ByteBuffer buffer = bytes.duplicate();
-      bytes.position(bytes.position() + length);
       buffer.limit(bytes.position() + length);
+      bytes.position(bytes.position() + length);
       return new ByteReadableBufferWrapper(buffer);
     }
 

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -173,7 +173,8 @@ public void cancelDeadlineExceededShouldSucceed() throws Exception {
 
   @Test
   public void cancelWhileBufferedShouldSucceed() throws Exception {
-    connection().local().maxActiveStreams(0);
+    // Force the stream to be buffered.
+    receiveMaxConcurrentStreams(0);
 
     ChannelFuture createFuture = createStream();
     assertFalse(createFuture.isDone());

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -132,14 +132,14 @@ public void start(Listener transportListener) {
       @Override
       public void operationComplete(ChannelFuture future) throws Exception {
         if (!future.isSuccess()) {
-          ChannelHandlerContext ctx = channel.pipeline().context(handler);
+          ChannelHandlerContext ctx = future.channel().pipeline().context(handler);
           if (ctx != null) {
             // NettyClientHandler doesn't propagate exceptions, but the negotiator will need the
             // exception to fail any writes. Note that this fires after handler, because it is as if
             // handler was propagating the notification.
             ctx.fireExceptionCaught(future.cause());
           }
-          channel.pipeline().fireExceptionCaught(future.cause());
+          future.channel().pipeline().fireExceptionCaught(future.cause());
         }
       }
     }).channel();

File: core/src/main/java/io/grpc/MethodDescriptor.java
Patch:
@@ -233,7 +233,7 @@ public static String generateFullMethodName(String fullServiceName, String metho
   @ExperimentalApi
   @Nullable
   public static String extractFullServiceName(String fullMethodName) {
-    int index = fullMethodName.lastIndexOf("/");
+    int index = fullMethodName.lastIndexOf('/');
     if (index == -1) {
       return null;
     }

File: core/src/main/java/io/grpc/internal/Http2ClientStream.java
Patch:
@@ -100,7 +100,7 @@ protected void transportHeadersReceived(Metadata headers) {
     if (transportError != null) {
       // Note we don't immediately report the transport error, instead we wait for more data on the
       // stream so we can accumulate more detail into the error before reporting it.
-      transportError = transportError.augmentDescription("\n" + headers.toString());
+      transportError = transportError.augmentDescription("\n" + headers);
       transportErrorMetadata = headers;
       errorCharset = extractCharset(headers);
     } else {

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -217,7 +217,7 @@ static NameResolver getNameResolver(String target, NameResolver.Factory nameReso
     }
     throw new IllegalArgumentException(String.format(
         "cannot find a NameResolver for %s%s",
-        target, uriSyntaxErrors.length() > 0 ? " (" + uriSyntaxErrors.toString() + ")" : ""));
+        target, uriSyntaxErrors.length() > 0 ? " (" + uriSyntaxErrors + ")" : ""));
   }
 
   /**

File: core/src/test/java/io/grpc/internal/ByteWritableBufferTest.java
Patch:
@@ -51,6 +51,6 @@ protected WritableBuffer buffer() {
 
   @Override
   protected byte[] writtenBytes() {
-    return Arrays.copyOfRange(buffer.data, 0, buffer.readableBytes());
+    return Arrays.copyOf(buffer.data, buffer.readableBytes());
   }
 }

File: core/src/test/java/io/grpc/internal/ReadableBufferTestBase.java
Patch:
@@ -124,7 +124,7 @@ public void partialReadToByteBufferShouldSucceed() {
   protected abstract ReadableBuffer buffer();
 
   private static String repeatUntilLength(String toRepeat, int length) {
-    StringBuffer buf = new StringBuffer();
+    StringBuilder buf = new StringBuilder();
     while (buf.length() < length) {
       buf.append(toRepeat);
     }

File: core/src/test/java/io/grpc/internal/ServerImplTest.java
Patch:
@@ -521,6 +521,7 @@ public void run() {
         try {
           barrier.await();
         } catch (InterruptedException ex) {
+          Thread.currentThread().interrupt();
           throw new RuntimeException(ex);
         } catch (BrokenBarrierException ex) {
           throw new RuntimeException(ex);

File: examples/src/main/java/io/grpc/examples/header/HeaderClientInterceptor.java
Patch:
@@ -69,7 +69,7 @@ public void onHeaders(Metadata headers) {
              * you can use {@link io.grpc.stub.MetadataUtils attachHeaders}
              * directly to send header
              */
-            logger.info("header received from server:" + headers.toString());
+            logger.info("header received from server:" + headers);
             super.onHeaders(headers);
           }
         }, headers);

File: examples/src/main/java/io/grpc/examples/header/HeaderServerInterceptor.java
Patch:
@@ -57,7 +57,7 @@ public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(
       ServerCall<RespT> call,
       final Metadata requestHeaders,
       ServerCallHandler<ReqT, RespT> next) {
-    logger.info("header received from client:" + requestHeaders.toString());
+    logger.info("header received from client:" + requestHeaders);
     return next.startCall(method, new SimpleForwardingServerCall<RespT>(call) {
       @Override
       public void sendHeaders(Metadata responseHeaders) {

File: grpclb/src/main/java/io/grpc/grpclb/RoundRobinServerList.java
Patch:
@@ -34,7 +34,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Iterables;
+import com.google.common.collect.Iterators;
 import com.google.common.util.concurrent.ListenableFuture;
 
 import io.grpc.EquivalentAddressGroup;
@@ -62,7 +62,7 @@ class RoundRobinServerList<T> {
   private RoundRobinServerList(TransportManager<T> tm, List<EquivalentAddressGroup> list) {
     this.tm = tm;
     this.list = list;
-    this.cyclingIter = Iterables.cycle(list).iterator();
+    this.cyclingIter = Iterators.cycle(list);
   }
 
   ListenableFuture<T> getTransportForNextServer() {

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -97,8 +97,7 @@ public void balancing() throws Exception {
         new ArrayList<SettableFuture<Transport>>(servers.size());
 
     for (ResolvedServerInfo server : servers) {
-      transports.add(
-          mock(Transport.class, withSettings().name("Transport for "  + server.toString())));
+      transports.add(mock(Transport.class, withSettings().name("Transport for "  + server)));
       SettableFuture<Transport> future = SettableFuture.create();
       transportFutures.add(future);
       when(mockTransportManager.getTransport(eq(new EquivalentAddressGroup(server.getAddress()))))

File: netty/src/main/java/io/grpc/netty/AbstractNettyHandler.java
Patch:
@@ -32,7 +32,6 @@
 package io.grpc.netty;
 
 import static io.netty.handler.codec.http2.Http2CodecUtil.getEmbeddedHttp2Exception;
-import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
 
 import io.netty.channel.ChannelHandlerContext;
@@ -49,7 +48,7 @@
  * shutdown the connection) as well as sending the initial connection window at startup.
  */
 abstract class AbstractNettyHandler extends Http2ConnectionHandler {
-  private static long GRACEFUL_SHUTDOWN_TIMEOUT = MILLISECONDS.convert(5, SECONDS);
+  private static long GRACEFUL_SHUTDOWN_TIMEOUT = SECONDS.toMillis(5);
   private int initialConnectionWindow;
   private ChannelHandlerContext ctx;
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java
Patch:
@@ -46,7 +46,7 @@
 
 import okio.Buffer;
 
-import java.util.LinkedList;
+import java.util.ArrayDeque;
 import java.util.List;
 import java.util.Queue;
 
@@ -83,7 +83,7 @@ class OkHttpClientStream extends Http2ClientStream {
    * {@link #start(Integer)} have been called.
    */
   @GuardedBy("lock")
-  private Queue<PendingData> pendingData = new LinkedList<PendingData>();
+  private Queue<PendingData> pendingData = new ArrayDeque<PendingData>();
   @GuardedBy("lock")
   private boolean cancelSent = false;
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -69,6 +69,7 @@
 import java.net.Socket;
 import java.net.URI;
 import java.util.Collections;
+import java.util.EnumMap;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -92,7 +93,7 @@ class OkHttpClientTransport implements ManagedClientTransport {
   private static final OkHttpClientStream[] EMPTY_STREAM_ARRAY = new OkHttpClientStream[0];
 
   static {
-    Map<ErrorCode, Status> errorToStatus = new HashMap<ErrorCode, Status>();
+    Map<ErrorCode, Status> errorToStatus = new EnumMap<ErrorCode, Status>(ErrorCode.class);
     errorToStatus.put(ErrorCode.NO_ERROR,
         Status.INTERNAL.withDescription("No error: A GRPC status of OK should have been sent"));
     errorToStatus.put(ErrorCode.PROTOCOL_ERROR,

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -435,7 +435,7 @@ public boolean hasNext() {
           // hangs here as the call will become closed.
           last = waitForNext();
         } catch (InterruptedException ie) {
-          Thread.interrupted();
+          Thread.currentThread().interrupt();
           throw Status.CANCELLED.withCause(ie).asRuntimeException();
         }
       }

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -135,7 +135,7 @@ public static <ReqT, RespT> RespT blockingUnaryCall(
           executor.waitAndDrain();
         } catch (InterruptedException e) {
           Thread.currentThread().interrupt();
-          throw new RuntimeException(e);
+          throw Status.CANCELLED.withCause(e).asRuntimeException();
         }
       }
       return getUnchecked(responseFuture);
@@ -436,7 +436,7 @@ public boolean hasNext() {
           last = waitForNext();
         } catch (InterruptedException ie) {
           Thread.interrupted();
-          throw new RuntimeException(ie);
+          throw Status.CANCELLED.withCause(ie).asRuntimeException();
         }
       }
       if (last instanceof Status) {

File: core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java
Patch:
@@ -36,8 +36,8 @@
 import io.grpc.ExperimentalApi;
 import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AbstractReferenceCounted;
-import io.grpc.internal.ClientTransport;
 import io.grpc.internal.ClientTransportFactory;
+import io.grpc.internal.ManagedClientTransport;
 
 import java.net.SocketAddress;
 
@@ -89,7 +89,7 @@ private InProcessClientTransportFactory(String name) {
     }
 
     @Override
-    public ClientTransport newClientTransport(SocketAddress addr, String authority) {
+    public ManagedClientTransport newClientTransport(SocketAddress addr, String authority) {
       return new InProcessTransport(name);
     }
 

File: core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java
Patch:
@@ -230,7 +230,8 @@ private static class AuthorityOverridingTransportFactory implements ClientTransp
     }
 
     @Override
-    public ClientTransport newClientTransport(SocketAddress serverAddress, String authority) {
+    public ManagedClientTransport newClientTransport(SocketAddress serverAddress,
+        String authority) {
       return factory.newClientTransport(
           serverAddress, authorityOverride != null ? authorityOverride : authority);
     }

File: core/src/main/java/io/grpc/internal/ClientTransportFactory.java
Patch:
@@ -33,13 +33,13 @@
 
 import java.net.SocketAddress;
 
-/** Pre-configured factory for creating {@link ClientTransport} instances. */
+/** Pre-configured factory for creating {@link ManagedClientTransport} instances. */
 public interface ClientTransportFactory extends ReferenceCounted {
   /**
    * Creates an unstarted transport for exclusive use.
    *
    * @param serverAddress the address that the transport is connected to
    * @param authority the HTTP/2 authority of the server
    */
-  ClientTransport newClientTransport(SocketAddress serverAddress, String authority);
+  ManagedClientTransport newClientTransport(SocketAddress serverAddress, String authority);
 }

File: core/src/main/java/io/grpc/internal/DelayedStream.java
Patch:
@@ -53,6 +53,8 @@
  * DelayedStream} may be internally altered by different threads, thus internal synchronization is
  * necessary.
  */
+// TODO(zhangkun83): merge it with DelayedClientTransport.PendingStream as it will be no longer
+// needed by ClientCallImpl as we move away from ListenableFuture<ClientTransport>
 class DelayedStream implements ClientStream {
 
   // set to non null once both listener and realStream are valid.  After this point it is safe

File: core/src/test/java/io/grpc/internal/DelayedStreamTest.java
Patch:
@@ -63,7 +63,6 @@ public class DelayedStreamTest {
   @Rule public final ExpectedException thrown = ExpectedException.none();
 
   @Mock private ClientStreamListener listener;
-  @Mock private ClientTransport transport;
   @Mock private ClientStream realStream;
   @Captor private ArgumentCaptor<Status> statusCaptor = ArgumentCaptor.forClass(Status.class);
   private DelayedStream stream = new DelayedStream();

File: netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java
Patch:
@@ -43,9 +43,9 @@
 import io.grpc.NameResolver;
 import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AbstractReferenceCounted;
-import io.grpc.internal.ClientTransport;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.GrpcUtil;
+import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.SharedResourceHolder;
 import io.netty.channel.Channel;
 import io.netty.channel.EventLoopGroup;
@@ -304,7 +304,8 @@ private NettyTransportFactory(Class<? extends Channel> channelType,
     }
 
     @Override
-    public ClientTransport newClientTransport(SocketAddress serverAddress, String authority) {
+    public ManagedClientTransport newClientTransport(
+        SocketAddress serverAddress, String authority) {
       ProtocolNegotiator negotiator = protocolNegotiator != null ? protocolNegotiator :
           createProtocolNegotiator(authority, negotiationType, sslContext);
       return new NettyClientTransport(serverAddress, channelType, group, negotiator,

File: netty/src/main/java/io/grpc/netty/NettyClientHandler.java
Patch:
@@ -42,10 +42,10 @@
 import io.grpc.Metadata;
 import io.grpc.Status;
 import io.grpc.StatusException;
-import io.grpc.internal.ClientTransport;
 import io.grpc.internal.ClientTransport.PingCallback;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.Http2Ping;
+import io.grpc.internal.ManagedClientTransport;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;
@@ -115,7 +115,7 @@ class NettyClientHandler extends AbstractNettyHandler {
   private Throwable goAwayStatusThrowable;
   private int nextStreamId;
 
-  static NettyClientHandler newHandler(ClientTransport.Listener listener,
+  static NettyClientHandler newHandler(ManagedClientTransport.Listener listener,
                                        int flowControlWindow, int maxHeaderListSize,
                                        Ticker ticker) {
     Preconditions.checkArgument(maxHeaderListSize > 0, "maxHeaderListSize must be positive");
@@ -131,7 +131,7 @@ static NettyClientHandler newHandler(ClientTransport.Listener listener,
   static NettyClientHandler newHandler(Http2Connection connection,
                                        Http2FrameReader frameReader,
                                        Http2FrameWriter frameWriter,
-                                       final ClientTransport.Listener listener,
+                                       final ManagedClientTransport.Listener listener,
                                        int flowControlWindow,
                                        Ticker ticker) {
     Preconditions.checkNotNull(connection, "connection");

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -40,7 +40,7 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
 import io.grpc.internal.ClientStream;
-import io.grpc.internal.ClientTransport;
+import io.grpc.internal.ManagedClientTransport;
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
@@ -56,9 +56,9 @@
 import javax.annotation.concurrent.GuardedBy;
 
 /**
- * A Netty-based {@link ClientTransport} implementation.
+ * A Netty-based {@link ManagedClientTransport} implementation.
  */
-class NettyClientTransport implements ClientTransport {
+class NettyClientTransport implements ManagedClientTransport {
   private final SocketAddress address;
   private final Class<? extends Channel> channelType;
   private final EventLoopGroup group;

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -50,8 +50,8 @@
 import io.grpc.StatusException;
 import io.grpc.internal.ClientStream;
 import io.grpc.internal.ClientStreamListener;
-import io.grpc.internal.ClientTransport;
 import io.grpc.internal.GrpcUtil;
+import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.ServerListener;
 import io.grpc.internal.ServerStream;
 import io.grpc.internal.ServerStreamListener;
@@ -92,7 +92,7 @@
 public class NettyClientTransportTest {
 
   @Mock
-  private ClientTransport.Listener clientTransportListener;
+  private ManagedClientTransport.Listener clientTransportListener;
 
   private final List<NettyClientTransport> transports = new ArrayList<NettyClientTransport>();
   private NioEventLoopGroup group;

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -46,9 +46,9 @@
 import io.grpc.NameResolver;
 import io.grpc.internal.AbstractManagedChannelImplBuilder;
 import io.grpc.internal.AbstractReferenceCounted;
-import io.grpc.internal.ClientTransport;
 import io.grpc.internal.ClientTransportFactory;
 import io.grpc.internal.GrpcUtil;
+import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.SharedResourceHolder;
 import io.grpc.internal.SharedResourceHolder.Resource;
 
@@ -255,7 +255,7 @@ private OkHttpTransportFactory(Executor executor,
     }
 
     @Override
-    public ClientTransport newClientTransport(SocketAddress addr, String authority) {
+    public ManagedClientTransport newClientTransport(SocketAddress addr, String authority) {
       InetSocketAddress inetSocketAddr = (InetSocketAddress) addr;
       return new OkHttpClientTransport(inetSocketAddr, authority, executor, socketFactory,
           Utils.convertSpec(connectionSpec), maxMessageSize);

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -44,9 +44,9 @@
 import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.Status;
 import io.grpc.Status.Code;
-import io.grpc.internal.ClientTransport;
 import io.grpc.internal.GrpcUtil;
 import io.grpc.internal.Http2Ping;
+import io.grpc.internal.ManagedClientTransport;
 import io.grpc.internal.SerializingExecutor;
 import io.grpc.okhttp.internal.ConnectionSpec;
 import io.grpc.okhttp.internal.framed.ErrorCode;
@@ -84,9 +84,9 @@
 import javax.net.ssl.SSLSocketFactory;
 
 /**
- * A okhttp-based {@link ClientTransport} implementation.
+ * A okhttp-based {@link ManagedClientTransport} implementation.
  */
-class OkHttpClientTransport implements ClientTransport {
+class OkHttpClientTransport implements ManagedClientTransport {
   private static final Map<ErrorCode, Status> ERROR_CODE_TO_STATUS;
   private static final Logger log = Logger.getLogger(OkHttpClientTransport.class.getName());
   private static final OkHttpClientStream[] EMPTY_STREAM_ARRAY = new OkHttpClientStream[0];

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -73,6 +73,7 @@
 import io.grpc.internal.ClientStreamListener;
 import io.grpc.internal.ClientTransport;
 import io.grpc.internal.GrpcUtil;
+import io.grpc.internal.ManagedClientTransport;
 import io.grpc.okhttp.OkHttpClientTransport.ClientFrameHandler;
 import io.grpc.okhttp.internal.ConnectionSpec;
 import io.grpc.okhttp.internal.framed.ErrorCode;
@@ -131,7 +132,7 @@ public class OkHttpClientTransportTest {
   @Mock
   MethodDescriptor<?, ?> method;
   @Mock
-  private ClientTransport.Listener transportListener;
+  private ManagedClientTransport.Listener transportListener;
   private OkHttpClientTransport clientTransport;
   private MockFrameReader frameReader;
   private ExecutorService executor;
@@ -1323,7 +1324,7 @@ public void unreachableServer() throws Exception {
         ConnectionSpec.CLEARTEXT,
         DEFAULT_MAX_MESSAGE_SIZE);
 
-    ClientTransport.Listener listener = mock(ClientTransport.Listener.class);
+    ManagedClientTransport.Listener listener = mock(ManagedClientTransport.Listener.class);
     clientTransport.start(listener);
     ArgumentCaptor<Status> captor = ArgumentCaptor.forClass(Status.class);
     verify(listener, timeout(TIME_OUT_MS)).transportShutdown(captor.capture());

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -60,6 +60,7 @@
 import io.netty.handler.ssl.SslHandler;
 import io.netty.handler.ssl.SslHandshakeCompletionEvent;
 import io.netty.util.AsciiString;
+import io.netty.util.ReferenceCountUtil;
 
 import java.net.URI;
 import java.util.ArrayDeque;
@@ -388,6 +389,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
        */
       if (failCause != null) {
         promise.setFailure(failCause);
+        ReferenceCountUtil.release(msg);
       } else if (bufferedWrites == null) {
         super.write(ctx, msg, promise);
       } else {
@@ -424,6 +426,7 @@ protected final void fail(ChannelHandlerContext ctx, Throwable cause) {
         while (!bufferedWrites.isEmpty()) {
           ChannelWrite write = bufferedWrites.poll();
           write.promise.setFailure(cause);
+          ReferenceCountUtil.release(write.msg);
         }
         bufferedWrites = null;
       }

File: interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java
Patch:
@@ -184,8 +184,8 @@ public void onHeaders(Metadata headers) {
   static final class Fzip implements Codec {
     static final Fzip INSTANCE = new Fzip();
 
-    boolean anyRead;
-    boolean anyWritten;
+    volatile boolean anyRead;
+    volatile boolean anyWritten;
 
     @Override
     public String getMessageEncoding() {

File: core/src/main/java/io/grpc/internal/Http2ClientStream.java
Patch:
@@ -137,7 +137,7 @@ protected void transportDataReceived(ReadableBuffer frame, boolean endOfStream)
       inboundDataReceived(frame);
       if (endOfStream) {
         // This is a protocol violation as we expect to receive trailers.
-        transportError = Status.INTERNAL.withDescription("Recevied EOS on DATA frame");
+        transportError = Status.INTERNAL.withDescription("Received EOS on DATA frame");
         transportErrorMetadata = new Metadata();
         inboundTransportError(transportError, transportErrorMetadata);
       }

File: protobuf/src/main/java/io/grpc/protobuf/ProtoInputStream.java
Patch:
@@ -70,9 +70,11 @@ public int drainTo(OutputStream target) throws IOException {
       written = message.getSerializedSize();
       message.writeTo(target);
       message = null;
-    } else {
+    } else if (partial != null) {
       written = (int) ByteStreams.copy(partial, target);
       partial = null;
+    } else {
+      written = 0;
     }
     return written;
   }

File: netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java
Patch:
@@ -102,6 +102,7 @@ public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
           }
 
           @Override
+          @Deprecated
           public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
             // Should never happen.
             ctx.fireExceptionCaught(cause);

File: core/src/main/java/io/grpc/CallOptions.java
Patch:
@@ -171,6 +171,7 @@ private CallOptions(CallOptions other) {
     deadlineNanoTime = other.deadlineNanoTime;
     authority = other.authority;
     requestKey = other.requestKey;
+    executor = other.executor;
   }
 
   @Override

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/InteropTester.java
Patch:
@@ -580,12 +580,13 @@ public void veryLargeResponse() throws Exception {
     request.responseSize = unaryPayloadLength();
     request.responseType = Messages.COMPRESSABLE;
 
+    SimpleResponse resp = blockingStub.unaryCall(request);
     final SimpleResponse goldenResponse = new SimpleResponse();
     goldenResponse.payload = new Payload();
     goldenResponse.payload.type = Messages.COMPRESSABLE;
     goldenResponse.payload.body = new byte[unaryPayloadLength()];
 
-    assertMessageSizeEquals(goldenResponse, blockingStub.unaryCall(request));
+    assertMessageSizeEquals(goldenResponse, resp);
   }
 
   public void deadlineNotExceeded() {

File: benchmarks/src/generated/main/grpc/io/grpc/testing/TestServiceGrpc.java
Patch:
@@ -126,7 +126,7 @@ protected TestServiceBlockingStub build(io.grpc.Channel channel,
     @java.lang.Override
     public io.grpc.testing.SimpleResponse unaryCall(io.grpc.testing.SimpleRequest request) {
       return blockingUnaryCall(
-          getChannel().newCall(METHOD_UNARY_CALL, getCallOptions()), request);
+          getChannel(), METHOD_UNARY_CALL, getCallOptions(), request);
     }
   }
 

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -129,6 +129,7 @@ public void setUp() throws Exception {
 
     if (direct) {
       serverBuilder.directExecutor();
+      // Because blocking stubs avoid the executor, this doesn't do much.
       channelBuilder.directExecutor();
     }
 

File: examples/src/generated/main/grpc/io/grpc/examples/helloworld/GreeterGrpc.java
Patch:
@@ -107,7 +107,7 @@ protected GreeterBlockingStub build(io.grpc.Channel channel,
     @java.lang.Override
     public io.grpc.examples.helloworld.HelloResponse sayHello(io.grpc.examples.helloworld.HelloRequest request) {
       return blockingUnaryCall(
-          getChannel().newCall(METHOD_SAY_HELLO, getCallOptions()), request);
+          getChannel(), METHOD_SAY_HELLO, getCallOptions(), request);
     }
   }
 

File: examples/src/generated/main/grpc/io/grpc/examples/routeguide/RouteGuideGrpc.java
Patch:
@@ -167,14 +167,14 @@ protected RouteGuideBlockingStub build(io.grpc.Channel channel,
     @java.lang.Override
     public io.grpc.examples.routeguide.Feature getFeature(io.grpc.examples.routeguide.Point request) {
       return blockingUnaryCall(
-          getChannel().newCall(METHOD_GET_FEATURE, getCallOptions()), request);
+          getChannel(), METHOD_GET_FEATURE, getCallOptions(), request);
     }
 
     @java.lang.Override
     public java.util.Iterator<io.grpc.examples.routeguide.Feature> listFeatures(
         io.grpc.examples.routeguide.Rectangle request) {
       return blockingServerStreamingCall(
-          getChannel().newCall(METHOD_LIST_FEATURES, getCallOptions()), request);
+          getChannel(), METHOD_LIST_FEATURES, getCallOptions(), request);
     }
   }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -131,13 +131,13 @@ protected ReconnectServiceBlockingStub build(io.grpc.Channel channel,
     @java.lang.Override
     public com.google.protobuf.EmptyProtos.Empty start(com.google.protobuf.EmptyProtos.Empty request) {
       return blockingUnaryCall(
-          getChannel().newCall(METHOD_START, getCallOptions()), request);
+          getChannel(), METHOD_START, getCallOptions(), request);
     }
 
     @java.lang.Override
     public io.grpc.testing.integration.Messages.ReconnectInfo stop(com.google.protobuf.EmptyProtos.Empty request) {
       return blockingUnaryCall(
-          getChannel().newCall(METHOD_STOP, getCallOptions()), request);
+          getChannel(), METHOD_STOP, getCallOptions(), request);
     }
   }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -210,20 +210,20 @@ protected TestServiceBlockingStub build(io.grpc.Channel channel,
     @java.lang.Override
     public com.google.protobuf.EmptyProtos.Empty emptyCall(com.google.protobuf.EmptyProtos.Empty request) {
       return blockingUnaryCall(
-          getChannel().newCall(METHOD_EMPTY_CALL, getCallOptions()), request);
+          getChannel(), METHOD_EMPTY_CALL, getCallOptions(), request);
     }
 
     @java.lang.Override
     public io.grpc.testing.integration.Messages.SimpleResponse unaryCall(io.grpc.testing.integration.Messages.SimpleRequest request) {
       return blockingUnaryCall(
-          getChannel().newCall(METHOD_UNARY_CALL, getCallOptions()), request);
+          getChannel(), METHOD_UNARY_CALL, getCallOptions(), request);
     }
 
     @java.lang.Override
     public java.util.Iterator<io.grpc.testing.integration.Messages.StreamingOutputCallResponse> streamingOutputCall(
         io.grpc.testing.integration.Messages.StreamingOutputCallRequest request) {
       return blockingServerStreamingCall(
-          getChannel().newCall(METHOD_STREAMING_OUTPUT_CALL, getCallOptions()), request);
+          getChannel(), METHOD_STREAMING_OUTPUT_CALL, getCallOptions(), request);
     }
   }
 

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -107,7 +107,7 @@ protected UnimplementedServiceBlockingStub build(io.grpc.Channel channel,
     @java.lang.Override
     public com.google.protobuf.EmptyProtos.Empty unimplementedCall(com.google.protobuf.EmptyProtos.Empty request) {
       return blockingUnaryCall(
-          getChannel().newCall(METHOD_UNIMPLEMENTED_CALL, getCallOptions()), request);
+          getChannel(), METHOD_UNIMPLEMENTED_CALL, getCallOptions(), request);
     }
   }
 

File: examples/src/main/java/io/grpc/examples/header/CustomHeaderServer.java
Patch:
@@ -39,6 +39,7 @@
 import io.grpc.examples.helloworld.HelloResponse;
 import io.grpc.stub.StreamObserver;
 
+import java.io.IOException;
 import java.util.logging.Logger;
 
 /**
@@ -52,7 +53,7 @@ public class CustomHeaderServer {
   private static final int port = 50051;
   private Server server;
 
-  private void start() throws Exception {
+  private void start() throws IOException {
     server = ServerBuilder.forPort(port)
         .addService(ServerInterceptors.intercept(
             GreeterGrpc.bindService(new GreeterImpl()), new HeaderServerInterceptor()))
@@ -88,7 +89,7 @@ private void blockUntilShutdown() throws InterruptedException {
   /**
    * Main launches the server from the command line.
    */
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException, InterruptedException {
     final CustomHeaderServer server = new CustomHeaderServer();
     server.start();
     server.blockUntilShutdown();

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldServer.java
Patch:
@@ -35,6 +35,7 @@
 import io.grpc.ServerBuilder;
 import io.grpc.stub.StreamObserver;
 
+import java.io.IOException;
 import java.util.logging.Logger;
 
 /**
@@ -47,7 +48,7 @@ public class HelloWorldServer {
   private int port = 50051;
   private Server server;
 
-  private void start() throws Exception {
+  private void start() throws IOException {
     server = ServerBuilder.forPort(port)
         .addService(GreeterGrpc.bindService(new GreeterImpl()))
         .build()
@@ -82,7 +83,7 @@ private void blockUntilShutdown() throws InterruptedException {
   /**
    * Main launches the server from the command line.
    */
-  public static void main(String[] args) throws Exception {
+  public static void main(String[] args) throws IOException, InterruptedException {
     final HelloWorldServer server = new HelloWorldServer();
     server.start();
     server.blockUntilShutdown();

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -208,7 +208,7 @@ public void onNext(Point point) {
 
         @Override
         public void onError(Throwable t) {
-          logger.log(Level.WARNING, "Encountered error in recordRoute", t);
+          logger.log(Level.WARNING, "recordRoute cancelled");
         }
 
         @Override
@@ -247,7 +247,7 @@ public void onNext(RouteNote note) {
 
         @Override
         public void onError(Throwable t) {
-          logger.log(Level.WARNING, "Encountered error in routeChat", t);
+          logger.log(Level.WARNING, "routeChat cancelled");
         }
 
         @Override

File: core/src/main/java/io/grpc/inprocess/InProcessTransport.java
Patch:
@@ -120,10 +120,11 @@ public void run() {
   public synchronized ClientStream newStream(
       final MethodDescriptor<?, ?> method, final Metadata headers) {
     if (shutdownStatus != null) {
+      final Status capturedStatus = shutdownStatus;
       return new NoopClientStream() {
         @Override
         public void start(ClientStreamListener listener) {
-          listener.closed(shutdownStatus, new Metadata());
+          listener.closed(capturedStatus, new Metadata());
         }
       };
     }

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java
Patch:
@@ -358,7 +358,6 @@ private void onStreamClosed(Status status) {
           if (lbResponseObserver != this) {
             return;
           }
-          logger.info("Received " + status + ", entering fallback mode");
           directTransport = transportFuture = Futures.immediateFuture(lbTransport);
           pendingPicksFulfillmentBatch = pendingPicks.createFulfillmentBatch();
         }

File: grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java
Patch:
@@ -358,6 +358,7 @@ private void onStreamClosed(Status status) {
           if (lbResponseObserver != this) {
             return;
           }
+          logger.info("Received " + status + ", entering fallback mode");
           directTransport = transportFuture = Futures.immediateFuture(lbTransport);
           pendingPicksFulfillmentBatch = pendingPicks.createFulfillmentBatch();
         }

File: grpclb/src/generated/main/grpc/io/grpc/grpclb/LoadBalancerGrpc.java
Patch:
@@ -18,7 +18,7 @@ public class LoadBalancerGrpc {
 
   private LoadBalancerGrpc() {}
 
-  public static final String SERVICE_NAME = "grpc.lb.v1.LoadBalancer";
+  public static final String SERVICE_NAME = "loadbalancer_gslb.client.grpc.LoadBalancer";
 
   // Static method descriptors that strictly reflect the proto.
   @io.grpc.ExperimentalApi
@@ -27,7 +27,7 @@ private LoadBalancerGrpc() {}
       io.grpc.MethodDescriptor.create(
           io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING,
           generateFullMethodName(
-              "grpc.lb.v1.LoadBalancer", "BalanceLoad"),
+              "loadbalancer_gslb.client.grpc.LoadBalancer", "BalanceLoad"),
           io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.grpclb.LoadBalanceRequest.getDefaultInstance()),
           io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.grpclb.LoadBalanceResponse.getDefaultInstance()));
 

File: grpclb/src/generated/main/java/io/grpc/grpclb/ClientStatsOrBuilder.java
Patch:
@@ -4,7 +4,7 @@
 package io.grpc.grpclb;
 
 public interface ClientStatsOrBuilder extends
-    // @@protoc_insertion_point(interface_extends:grpc.lb.v1.ClientStats)
+    // @@protoc_insertion_point(interface_extends:loadbalancer_gslb.client.grpc.ClientStats)
     com.google.protobuf.MessageOrBuilder {
 
   /**

File: grpclb/src/generated/main/java/io/grpc/grpclb/InitialLoadBalanceRequestOrBuilder.java
Patch:
@@ -4,7 +4,7 @@
 package io.grpc.grpclb;
 
 public interface InitialLoadBalanceRequestOrBuilder extends
-    // @@protoc_insertion_point(interface_extends:grpc.lb.v1.InitialLoadBalanceRequest)
+    // @@protoc_insertion_point(interface_extends:loadbalancer_gslb.client.grpc.InitialLoadBalanceRequest)
     com.google.protobuf.MessageOrBuilder {
 
   /**

File: grpclb/src/generated/main/java/io/grpc/grpclb/InitialLoadBalanceResponseOrBuilder.java
Patch:
@@ -4,7 +4,7 @@
 package io.grpc.grpclb;
 
 public interface InitialLoadBalanceResponseOrBuilder extends
-    // @@protoc_insertion_point(interface_extends:grpc.lb.v1.InitialLoadBalanceResponse)
+    // @@protoc_insertion_point(interface_extends:loadbalancer_gslb.client.grpc.InitialLoadBalanceResponse)
     com.google.protobuf.MessageOrBuilder {
 
   /**

File: grpclb/src/generated/main/java/io/grpc/grpclb/ServerOrBuilder.java
Patch:
@@ -4,7 +4,7 @@
 package io.grpc.grpclb;
 
 public interface ServerOrBuilder extends
-    // @@protoc_insertion_point(interface_extends:grpc.lb.v1.Server)
+    // @@protoc_insertion_point(interface_extends:loadbalancer_gslb.client.grpc.Server)
     com.google.protobuf.MessageOrBuilder {
 
   /**

File: grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java
Patch:
@@ -57,7 +57,6 @@
 import io.grpc.TransportManager;
 import io.grpc.internal.ClientTransport;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -89,7 +88,6 @@ public class GrpclbLoadBalancerTest {
   private SettableFuture<ClientTransport> lbTransportFuture;
 
   @Test
-  @Ignore("Flaky") //TODO(zhangkun83): fix flakiness
   public void balancing() throws Exception {
     List<ResolvedServerInfo> servers = createResolvedServerInfoList(4000, 4001);
 

File: core/src/main/java/io/grpc/internal/DelayedStream.java
Patch:
@@ -79,7 +79,7 @@ class DelayedStream implements ClientStream {
   private int pendingFlowControlRequests;
   @GuardedBy("this")
   private boolean pendingFlush;
-  @GuardedBy("lock")
+  @GuardedBy("this")
   private CompressorRegistry compressionRegistry;
 
   static final class PendingMessage {

File: core/src/main/java/io/grpc/internal/ClientCallImpl.java
Patch:
@@ -34,6 +34,7 @@
 import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.collect.Iterables.addAll;
 import static com.google.common.util.concurrent.MoreExecutors.directExecutor;
+import static io.grpc.internal.GrpcUtil.ACCEPT_ENCODING_JOINER;
 import static io.grpc.internal.GrpcUtil.ACCEPT_ENCODING_SPLITER;
 import static io.grpc.internal.GrpcUtil.AUTHORITY_KEY;
 import static io.grpc.internal.GrpcUtil.MESSAGE_ACCEPT_ENCODING_KEY;
@@ -181,7 +182,7 @@ static void prepareHeaders(Metadata headers, CallOptions callOptions, String use
     headers.removeAll(MESSAGE_ACCEPT_ENCODING_KEY);
     if (!decompressorRegistry.getAdvertisedMessageEncodings().isEmpty()) {
       String acceptEncoding =
-          Joiner.on(',').join(decompressorRegistry.getAdvertisedMessageEncodings());
+          ACCEPT_ENCODING_JOINER.join(decompressorRegistry.getAdvertisedMessageEncodings());
       headers.put(MESSAGE_ACCEPT_ENCODING_KEY, acceptEncoding);
     }
   }

File: core/src/main/java/io/grpc/internal/GrpcUtil.java
Patch:
@@ -36,6 +36,7 @@
 import static io.grpc.Status.Code.DEADLINE_EXCEEDED;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
@@ -159,6 +160,8 @@ public final class GrpcUtil {
 
   public static final Splitter ACCEPT_ENCODING_SPLITER = Splitter.on(',').trimResults();
 
+  public static final Joiner ACCEPT_ENCODING_JOINER = Joiner.on(',');
+
   /**
    * Maps HTTP error response status codes to transport codes.
    */

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -215,9 +215,10 @@ static NameResolver getNameResolver(String target, NameResolver.Factory nameReso
 
     // If we reached here, the targetUri couldn't be used.
     if (!URI_PATTERN.matcher(target).matches()) {
-      // It doesn't look like a URI target. Maybe it's a DNS name.
+      // It doesn't look like a URI target. Maybe it's an authority string. Try with the default
+      // scheme from the factory.
       try {
-        targetUri = new URI("dns", null, "/" + target, null);
+        targetUri = new URI(nameResolverFactory.getDefaultScheme(), null, "/" + target, null);
       } catch (URISyntaxException e) {
         // Should not be possible.
         throw new IllegalArgumentException(e);

File: netty/src/main/java/io/grpc/netty/GrpcSslContexts.java
Patch:
@@ -50,6 +50,7 @@
 /**
  * Utility for configuring SslContext for gRPC.
  */
+@ExperimentalApi("Only needed with experimental builders")
 public class GrpcSslContexts {
   private GrpcSslContexts() {}
 

File: netty/src/main/java/io/grpc/netty/NegotiationType.java
Patch:
@@ -31,9 +31,12 @@
 
 package io.grpc.netty;
 
+import io.grpc.ExperimentalApi;
+
 /**
  * Identifies the negotiation used for starting up HTTP/2.
  */
+@ExperimentalApi("Only used by experimental builders")
 public enum NegotiationType {
   /**
    * Uses TLS ALPN/NPN negotiation, assumes an SSL connection.

File: netty/src/main/java/io/grpc/netty/NettyServer.java
Patch:
@@ -59,7 +59,7 @@
 /**
  * Netty-based server implementation.
  */
-public class NettyServer implements Server {
+class NettyServer implements Server {
   private static final Logger log = Logger.getLogger(Server.class.getName());
 
   private final SocketAddress address;

File: netty/src/main/java/io/grpc/netty/NettyClientTransport.java
Patch:
@@ -127,7 +127,7 @@ public ClientStream newStream(MethodDescriptor<?, ?> method, Metadata headers,
       public void operationComplete(ChannelFuture future) throws Exception {
         if (!future.isSuccess()) {
           // Stream creation failed. Close the stream if not already closed.
-          stream.transportReportStatus(Status.fromThrowable(future.cause()), true,
+          stream.transportReportStatus(Utils.statusFromThrowable(future.cause()), true,
                   new Metadata());
         }
       }
@@ -184,7 +184,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
         if (!future.isSuccess()) {
           // Need to notify of this failure, because handler.connectionError() is not guaranteed to
           // have seen this cause.
-          notifyTerminated(Status.fromThrowable(future.cause()));
+          notifyTerminated(Utils.statusFromThrowable(future.cause()));
         }
       }
     });

File: netty/src/main/java/io/grpc/netty/NettyServerHandler.java
Patch:
@@ -249,8 +249,7 @@ protected void onStreamError(ChannelHandlerContext ctx, Throwable cause,
         connection().stream(Http2Exception.streamId(http2Ex)));
     if (serverStream != null) {
       // Abort the stream with a status to help the client with debugging.
-      serverStream.abortStream(cause instanceof Http2Exception
-          ? Status.INTERNAL.withCause(cause) : Status.fromThrowable(cause), true);
+      serverStream.abortStream(Utils.statusFromThrowable(cause), true);
     } else {
       // Delegate to the base class to send a RST_STREAM.
       super.onStreamError(ctx, cause, http2Ex);

File: netty/src/main/java/io/grpc/netty/AbstractNettyHandler.java
Patch:
@@ -61,8 +61,9 @@ abstract class AbstractNettyHandler extends Http2ConnectionHandler {
     // Set the timeout for graceful shutdown.
     gracefulShutdownTimeoutMillis(GRACEFUL_SHUTDOWN_TIMEOUT);
 
-    // TODO(nmittler): Use auto-refill once https://github.com/grpc/grpc-java/issues/1175 is fixed.
-    this.initialConnectionWindow = Integer.MAX_VALUE;
+    // Extract the connection window from the settings if it was set.
+    this.initialConnectionWindow = initialSettings.initialWindowSize() == null ? -1 :
+            initialSettings.initialWindowSize();
   }
 
   @Override

File: benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java
Patch:
@@ -33,7 +33,6 @@
 
 import static io.grpc.testing.TestUtils.pickUnusedPort;
 
-import com.google.common.util.concurrent.MoreExecutors;
 import com.google.protobuf.ByteString;
 
 import io.grpc.ManagedChannel;
@@ -129,8 +128,8 @@ public void setUp() throws Exception {
     }
 
     if (direct) {
-      serverBuilder.executor(MoreExecutors.directExecutor());
-      channelBuilder.executor(MoreExecutors.directExecutor());
+      serverBuilder.directExecutor();
+      channelBuilder.directExecutor();
     }
 
     server = serverBuilder

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -318,7 +318,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, Resp
         CallOptions callOptions) {
       return new ClientCallImpl<ReqT, RespT>(
           method,
-          new SerializingExecutor(executor),
+          executor,
           callOptions,
           transportProvider,
           scheduledExecutor)

File: core/src/test/java/io/grpc/internal/ClientCallImplTest.java
Patch:
@@ -75,8 +75,6 @@
 @RunWith(JUnit4.class)
 public class ClientCallImplTest {
 
-  private final SerializingExecutor executor =
-      new SerializingExecutor(MoreExecutors.directExecutor());
   private final ScheduledExecutorService deadlineCancellationExecutor =
       Executors.newScheduledThreadPool(0);
   private final DecompressorRegistry decompressorRegistry =
@@ -106,7 +104,7 @@ public ListenableFuture<ClientTransport> get(CallOptions callOptions) {
           any(ClientStreamListener.class))).thenReturn(stream);
     ClientCallImpl<Void, Void> call = new ClientCallImpl<Void, Void>(
         descriptor,
-        executor,
+        MoreExecutors.directExecutor(),
         CallOptions.DEFAULT,
         provider,
         deadlineCancellationExecutor)

File: netty/src/main/java/io/grpc/netty/Utils.java
Patch:
@@ -34,7 +34,6 @@
 import static io.grpc.internal.GrpcUtil.AUTHORITY_KEY;
 import static io.grpc.internal.GrpcUtil.CONTENT_TYPE_KEY;
 import static io.grpc.internal.GrpcUtil.USER_AGENT_KEY;
-import static io.netty.util.CharsetUtil.US_ASCII;
 import static io.netty.util.CharsetUtil.UTF_8;
 
 import com.google.common.base.Preconditions;

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -443,7 +443,8 @@ private static String validateName(String n) {
           continue;
         }
 
-        checkArgument(VALID_T_CHARS.get(tChar), "Invalid character '%c' in key name", tChar);
+        checkArgument(VALID_T_CHARS.get(tChar),
+            "Invalid character '%s' in key name '%s'", tChar, n);
       }
       return n;
     }

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -138,7 +138,7 @@ private static class RouteGuideService implements RouteGuideGrpc.RouteGuide {
 
     /**
      * Gets the {@link Feature} at the requested {@link Point}. If no feature at that location
-     * exists, an unnammed feature is returned at the provided location.
+     * exists, an unnamed feature is returned at the provided location.
      *
      * @param request the requested location for the feature.
      * @param responseObserver the observer that will receive the feature at the requested point.

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -138,7 +138,7 @@ private static class RouteGuideService implements RouteGuideGrpc.RouteGuide {
 
     /**
      * Gets the {@link Feature} at the requested {@link Point}. If no feature at that location
-     * exists, an unnammed feature is returned at the provided location.
+     * exists, an unnamed feature is returned at the provided location.
      *
      * @param request the requested location for the feature.
      * @param responseObserver the observer that will receive the feature at the requested point.

File: core/src/test/java/io/grpc/CallOptionsTest.java
Patch:
@@ -37,7 +37,6 @@
 import static org.junit.Assert.assertTrue;
 
 import com.google.common.base.Objects;
-import com.google.common.collect.Range;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -102,11 +101,10 @@ public void testWithDeadlineAfter() {
     long deadline = CallOptions.DEFAULT
         .withDeadlineAfter(1, TimeUnit.MINUTES).getDeadlineNanoTime();
     long expected = System.nanoTime() + 1L * 60 * 1000 * 1000 * 1000;
-    long delta = deadline - expected;
     // 10 milliseconds of leeway
     long epsilon = 1000 * 1000 * 10;
 
-    assertTrue(Range.closed(-epsilon, epsilon).contains(delta));
+    assertEquals(expected, deadline, epsilon);
   }
 
   @Test

File: netty/src/main/java/io/grpc/netty/AbstractNettyHandler.java
Patch:
@@ -56,9 +56,8 @@ abstract class AbstractNettyHandler extends Http2ConnectionHandler {
                        Http2Settings initialSettings) {
     super(decoder, encoder, initialSettings);
 
-    // If a stream window was specified, update the connection window to match it.
-    this.initialConnectionWindow = initialSettings.initialWindowSize() == null ? -1 :
-        initialSettings.initialWindowSize();
+    // TODO(nmittler): Use auto-refill once https://github.com/grpc/grpc-java/issues/1175 is fixed.
+    this.initialConnectionWindow = Integer.MAX_VALUE;
   }
 
   @Override

File: netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java
Patch:
@@ -79,6 +79,7 @@
 import io.netty.util.AsciiString;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -332,6 +333,7 @@ public void channelShutdownShouldFailInFlightStreams() throws Exception {
   }
 
   @Test
+  @Ignore("Re-enable once https://github.com/grpc/grpc-java/issues/1175 is fixed")
   public void connectionWindowShouldBeOverridden() throws Exception {
     flowControlWindow = 1048576; // 1MiB
     setUp();

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -83,6 +83,7 @@
 import io.netty.util.ByteString;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -252,6 +253,7 @@ public void shouldAdvertiseMaxConcurrentStreams() throws Exception {
   }
 
   @Test
+  @Ignore("Re-enable once https://github.com/grpc/grpc-java/issues/1175 is fixed")
   public void connectionWindowShouldBeOverridden() throws Exception {
     flowControlWindow = 1048576; // 1MiB
     setUp();

File: core/src/main/java/io/grpc/internal/ManagedChannelImpl.java
Patch:
@@ -340,7 +340,7 @@ public ListenableFuture<ClientTransport> getTransport(final SocketAddress addr)
       TransportSet ts;
       synchronized (lock) {
         if (shutdown) {
-          return null;
+          return NULL_VALUE_TRANSPORT_FUTURE;
         }
         ts = transports.get(addr);
         if (ts == null) {

File: core/src/main/java/io/grpc/Attributes.java
Patch:
@@ -99,8 +99,9 @@ private Builder() {
       this.product = new Attributes();
     }
 
-    public <T> void set(Key<T> key, T value) {
+    public <T> Builder set(Key<T> key, T value) {
       product.data.put(key.name, value);
+      return this;
     }
 
     /**

File: core/src/main/java/io/grpc/NameResolverRegistry.java
Patch:
@@ -74,9 +74,9 @@ public void register(NameResolver.Factory factory) {
    * <p>The factory that was registered later has higher priority.
    */
   @Override
-  public NameResolver newNameResolver(URI targetUri) {
+  public NameResolver newNameResolver(URI targetUri, Attributes params) {
     for (NameResolver.Factory factory : registry) {
-      NameResolver resolver = factory.newNameResolver(targetUri);
+      NameResolver resolver = factory.newNameResolver(targetUri, params);
       if (resolver != null) {
         return resolver;
       }

File: core/src/main/java/io/grpc/internal/ServerStream.java
Patch:
@@ -65,5 +65,5 @@ public interface ServerStream extends Stream {
    * Tears down the stream, typically in the event of a timeout. This method may be called multiple
    * times and from any thread.
    */
-  public void cancel(Status status);
+  void cancel(Status status);
 }

File: core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java
Patch:
@@ -329,6 +329,9 @@ protected void inboundDeliveryPaused() {}
 
     @Override
     protected void returnProcessedBytes(int processedBytes) {}
+
+    @Override
+    protected void sendStreamAbortToClient(Status status, Metadata trailers) {}
   }
 }
 

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/InteropTester.java
Patch:
@@ -60,6 +60,8 @@
 import io.grpc.android.integrationtest.nano.Messages.StreamingInputCallResponse;
 import io.grpc.android.integrationtest.nano.Messages.StreamingOutputCallRequest;
 import io.grpc.android.integrationtest.nano.Messages.StreamingOutputCallResponse;
+import io.grpc.android.integrationtest.nano.TestServiceGrpc;
+import io.grpc.android.integrationtest.nano.UnimplementedServiceGrpc;
 import io.grpc.okhttp.OkHttpChannelBuilder;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.StreamRecorder;

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -176,7 +176,7 @@ public final void flush() {
   }
 
   @Override
-  public final boolean isReady() {
+  public boolean isReady() {
     if (listener() != null && outboundPhase() != Phase.STATUS) {
       synchronized (onReadyLock) {
         return allocated && numSentBytesQueued < onReadyThreshold;

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -176,7 +176,7 @@ public final void flush() {
   }
 
   @Override
-  public final boolean isReady() {
+  public boolean isReady() {
     if (listener() != null && outboundPhase() != Phase.STATUS) {
       synchronized (onReadyLock) {
         return allocated && numSentBytesQueued < onReadyThreshold;

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java
Patch:
@@ -274,6 +274,7 @@ public ServerCall.Listener<ByteBuf> startCall(
                       MethodDescriptor<ByteBuf, ByteBuf> method,
                       final ServerCall<ByteBuf> call,
                       Metadata headers) {
+                    call.sendHeaders(new Metadata());
                     call.request(1);
                     return new ServerCall.Listener<ByteBuf>() {
                       @Override
@@ -306,6 +307,7 @@ public ServerCall.Listener<ByteBuf> startCall(
                       MethodDescriptor<ByteBuf, ByteBuf> method,
                       final ServerCall<ByteBuf> call,
                       Metadata headers) {
+                    call.sendHeaders(new Metadata());
                     call.request(1);
                     return new ServerCall.Listener<ByteBuf>() {
                       @Override
@@ -340,6 +342,7 @@ public ServerCall.Listener<ByteBuf> startCall(
                       MethodDescriptor<ByteBuf, ByteBuf> method,
                       final ServerCall<ByteBuf> call,
                       Metadata headers) {
+                    call.sendHeaders(new Metadata());
                     call.request(1);
                     return new ServerCall.Listener<ByteBuf>() {
                       @Override

File: stub/src/main/java/io/grpc/stub/ServerCalls.java
Patch:
@@ -202,10 +202,10 @@ public void onHalfClose() {
 
           @Override
           public void onCancel() {
+            responseObserver.cancelled = true;
             if (!halfClosed) {
               requestObserver.onError(Status.CANCELLED.asException());
             }
-            responseObserver.cancelled = true;
           }
         };
       }

File: core/src/main/java/io/grpc/internal/AbstractServerStream.java
Patch:
@@ -102,9 +102,8 @@ public final void writeHeaders(Metadata headers) {
 
   @Override
   public final void writeMessage(InputStream message) {
-    if (!headersSent) {
-      writeHeaders(new Metadata());
-      headersSent = true;
+    if (outboundPhase() != Phase.MESSAGE) {
+      throw new IllegalStateException("Messages are only permitted after headers and before close");
     }
     super.writeMessage(message);
   }

File: core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java
Patch:
@@ -170,6 +170,7 @@ protected void internalSendHeaders(Metadata captured) {
         capturedHeaders.set(captured);
       }
     };
+    stream.writeHeaders(new Metadata());
 
     stream.writeMessage(new ByteArrayInputStream(new byte[]{}));
 
@@ -204,6 +205,7 @@ protected void sendFrame(WritableBuffer frame, boolean endOfStream, boolean flus
         sendCalled.set(true);
       }
     };
+    stream.writeHeaders(new Metadata());
     stream.closeFramer();
 
     stream.writeMessage(new ByteArrayInputStream(new byte[]{}));
@@ -220,6 +222,7 @@ protected void sendFrame(WritableBuffer frame, boolean endOfStream, boolean flus
         sendCalled.set(true);
       }
     };
+    stream.writeHeaders(new Metadata());
 
     stream.writeMessage(new ByteArrayInputStream(new byte[]{}));
     // Force the message to be flushed

File: netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java
Patch:
@@ -339,6 +339,7 @@ private static final class EchoServerStreamListener implements ServerStreamListe
       this.stream = stream;
       this.method = method;
       this.headers = headers;
+      stream.writeHeaders(new Metadata());
       stream.request(1);
     }
 

File: core/src/main/java/io/grpc/ServerCallHandler.java
Patch:
@@ -37,6 +37,7 @@
  * Interface to initiate processing of incoming remote calls. Advanced applications and generated
  * code will implement this interface to allows {@link Server}s to invoke service methods.
  */
+@ExperimentalApi
 @ThreadSafe
 public interface ServerCallHandler<RequestT, ResponseT> {
   /**

File: stub/src/main/java/io/grpc/stub/ServerCalls.java
Patch:
@@ -31,6 +31,7 @@
 
 package io.grpc.stub;
 
+import io.grpc.ExperimentalApi;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
 import io.grpc.ServerCall;
@@ -41,6 +42,7 @@
  * Utility functions for adapting {@link ServerCallHandler}s to application service implementation,
  * meant to be used by the generated code.
  */
+@ExperimentalApi
 public class ServerCalls {
 
   private ServerCalls() {

File: okhttp/src/main/java/com/squareup/okhttp/OkHttpTlsUpgrader.java
Patch:
@@ -56,6 +56,9 @@ public final class OkHttpTlsUpgrader {
 
   /**
    * Upgrades given Socket to be a SSLSocket.
+   *
+   * @throws IOException if an IO error was encountered during the upgrade handshake.
+   * @throws RuntimeException if the upgrade negotiation failed.
    */
   public static SSLSocket upgrade(SSLSocketFactory sslSocketFactory,
       Socket socket, String host, int port, ConnectionSpec spec) throws IOException {

File: okhttp/src/main/java/com/squareup/okhttp/internal/OkHttpProtocolNegotiator.java
Patch:
@@ -75,6 +75,9 @@ private static OkHttpProtocolNegotiator createNegotiator() {
 
   /**
    * Start and wait until the negotiation is done, returns the negotiated protocol.
+   *
+   * @throws IOException if an IO error was encountered during the handshake.
+   * @throws RuntimeException if the negotiation completed, but no protocol was selected.
    */
   public String negotiate(
       SSLSocket sslSocket, String hostname, List<Protocol> protocols) throws IOException {

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -1087,7 +1087,7 @@ public void ping_failsIfTransportFails() throws Exception {
     clientTransport.ping(callback, MoreExecutors.directExecutor());
     assertEquals(0, callback.invocationCount);
 
-    clientTransport.onIoException(new IOException());
+    clientTransport.onException(new IOException());
     // ping failed on error
     assertEquals(1, callback.invocationCount);
     assertTrue(callback.failureCause instanceof StatusException);

File: examples/src/generated/main/grpc/io/grpc/examples/helloworld/GreeterGrpc.java
Patch:
@@ -26,8 +26,8 @@ public class GreeterGrpc {
           io.grpc.MethodDescriptor.MethodType.UNARY,
           generateFullMethodName(
               "helloworld.Greeter", "SayHello"),
-          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.examples.helloworld.HelloRequest.parser()),
-          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.examples.helloworld.HelloResponse.parser()));
+          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.examples.helloworld.HelloRequest.getDefaultInstance()),
+          io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.examples.helloworld.HelloResponse.getDefaultInstance()));
 
   public static GreeterStub newStub(io.grpc.Channel channel) {
     return new GreeterStub(channel);

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -26,8 +26,8 @@ public class UnimplementedServiceGrpc {
           io.grpc.MethodDescriptor.MethodType.UNARY,
           generateFullMethodName(
               "grpc.testing.UnimplementedService", "UnimplementedCall"),
-          io.grpc.protobuf.ProtoUtils.marshaller(com.google.protobuf.EmptyProtos.Empty.parser()),
-          io.grpc.protobuf.ProtoUtils.marshaller(com.google.protobuf.EmptyProtos.Empty.parser()));
+          io.grpc.protobuf.ProtoUtils.marshaller(com.google.protobuf.EmptyProtos.Empty.getDefaultInstance()),
+          io.grpc.protobuf.ProtoUtils.marshaller(com.google.protobuf.EmptyProtos.Empty.getDefaultInstance()));
 
   public static UnimplementedServiceStub newStub(io.grpc.Channel channel) {
     return new UnimplementedServiceStub(channel);

File: protobuf/src/test/java/io/grpc/protobuf/ProtoUtilsTest.java
Patch:
@@ -52,7 +52,7 @@
 /** Unit tests for {@link ProtoUtils}. */
 @RunWith(JUnit4.class)
 public class ProtoUtilsTest {
-  private Marshaller<Type> marshaller = ProtoUtils.marshaller(Type.parser());
+  private Marshaller<Type> marshaller = ProtoUtils.marshaller(Type.getDefaultInstance());
   private Type proto = Type.newBuilder().setName("name").build();
 
   @Test
@@ -69,7 +69,7 @@ public void testRoundtrip() throws Exception {
 
   @Test
   public void testMismatch() throws Exception {
-    Marshaller<Enum> enumMarshaller = ProtoUtils.marshaller(Enum.parser());
+    Marshaller<Enum> enumMarshaller = ProtoUtils.marshaller(Enum.getDefaultInstance());
     // Enum's name and Type's name are both strings with tag 1.
     Enum altProto = Enum.newBuilder().setName(proto.getName()).build();
     assertEquals(proto, marshaller.parse(enumMarshaller.stream(altProto)));

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/HandlerRegistryBenchmark.java
Patch:
@@ -50,7 +50,7 @@
 import java.util.Random;
 
 /**
- * Benchmark for {@link io.grpc.MutableHandlerRegistryImpl}.
+ * Benchmark for {@link MutableHandlerRegistryImpl}.
  */
 @State(Scope.Benchmark)
 @Fork(1)
@@ -94,7 +94,7 @@ public void setup() throws Exception {
   }
 
   /**
-   * Benchmark the {@link io.grpc.HandlerRegistry#lookupMethod(String)} throughput.
+   * Benchmark the {@link MutableHandlerRegistryImpl#lookupMethod(String)} throughput.
    */
   @Benchmark
   public void lookupMethod(Blackhole bh) {

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncServer.java
Patch:
@@ -34,7 +34,7 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.protobuf.ByteString;
 
-import io.grpc.ServerImpl;
+import io.grpc.Server;
 import io.grpc.Status;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NettyServerBuilder;
@@ -81,7 +81,7 @@ public void run(String[] args) throws Exception {
       return;
     }
 
-    final ServerImpl server = newServer(config);
+    final Server server = newServer(config);
     server.start();
 
     System.out.println("QPS Server started on " + config.address);
@@ -100,7 +100,7 @@ public void run() {
     });
   }
 
-  static ServerImpl newServer(ServerConfiguration config) throws IOException {
+  static Server newServer(ServerConfiguration config) throws IOException {
     SslContext sslContext = null;
     if (config.tls) {
       System.out.println("Using fake CA for TLS certificate.\n"

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java
Patch:
@@ -50,7 +50,7 @@
 import static io.grpc.benchmarks.qps.Utils.saveHistogram;
 
 import io.grpc.Channel;
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.Status;
 import io.grpc.stub.StreamObserver;
 import io.grpc.testing.SimpleRequest;
@@ -108,7 +108,7 @@ public void run() throws Exception {
     }
     config.channels = 1;
     config.directExecutor = true;
-    Channel ch = newClientChannel(config);
+    ManagedChannel ch = newClientChannel(config);
     SimpleRequest req = newRequest(config);
     LoadGenerationWorker worker =
         new LoadGenerationWorker(ch, req, config.targetQps, config.duration);
@@ -119,7 +119,7 @@ public void run() throws Exception {
     if (config.histogramFile != null) {
       saveHistogram(histogram, config.histogramFile);
     }
-    ((ChannelImpl) ch).shutdown();
+    ch.shutdown();
   }
 
   private void printStats(Histogram histogram, long elapsedTime) {

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/Utils.java
Patch:
@@ -34,7 +34,7 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.protobuf.ByteString;
 
-import io.grpc.Channel;
+import io.grpc.ManagedChannel;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
@@ -128,7 +128,7 @@ static SimpleRequest newRequest(ClientConfiguration config) {
         .build();
   }
 
-  static Channel newClientChannel(ClientConfiguration config) throws IOException {
+  static ManagedChannel newClientChannel(ClientConfiguration config) throws IOException {
     if (config.transport == ClientConfiguration.Transport.OK_HTTP) {
       InetSocketAddress addr = (InetSocketAddress) config.address;
       OkHttpChannelBuilder builder = OkHttpChannelBuilder

File: core/src/main/java/io/grpc/HandlerRegistry.java
Patch:
@@ -38,6 +38,7 @@
  * Registry of services and their methods used by servers to dispatching incoming calls.
  */
 @ThreadSafe
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/933")
 public abstract class HandlerRegistry {
 
   /**

File: core/src/main/java/io/grpc/MutableHandlerRegistry.java
Patch:
@@ -41,6 +41,7 @@
  * @see MutableHandlerRegistryImpl
  */
 @ThreadSafe
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/933")
 public abstract class MutableHandlerRegistry extends HandlerRegistry {
   /**
    * Returns {@code null}, or previous service if {@code service} replaced an existing service.
@@ -51,6 +52,5 @@ public abstract class MutableHandlerRegistry extends HandlerRegistry {
   /**
    * Returns {@code false} if {@code service} was not registered.
    */
-  @Nullable
   public abstract boolean removeService(ServerServiceDefinition service);
 }

File: core/src/main/java/io/grpc/MutableHandlerRegistryImpl.java
Patch:
@@ -44,6 +44,7 @@
  * blocking method lookup.
  */
 @ThreadSafe
+@ExperimentalApi("https://github.com/grpc/grpc-java/issues/933")
 public final class MutableHandlerRegistryImpl extends MutableHandlerRegistry {
   private final ConcurrentMap<String, ServerServiceDefinition> services
       = new ConcurrentHashMap<String, ServerServiceDefinition>();

File: core/src/main/java/io/grpc/ServerMethodDefinition.java
Patch:
@@ -32,8 +32,7 @@
 package io.grpc;
 
 /**
- * Definition of a method bound by a {@link io.grpc.HandlerRegistry} and exposed
- * by a {@link Server}.
+ * Definition of a method exposed by a {@link Server}.
  */
 public final class ServerMethodDefinition<RequestT, ResponseT> {
   private final MethodDescriptor<RequestT, ResponseT> method;

File: core/src/main/java/io/grpc/internal/BackoffPolicy.java
Patch:
@@ -29,7 +29,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package io.grpc;
+package io.grpc.internal;
 
 /**
  * Determines how long to wait before doing some action (typically a retry, or a reconnect).

File: core/src/main/java/io/grpc/internal/ExponentialBackoffPolicy.java
Patch:
@@ -29,7 +29,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package io.grpc;
+package io.grpc.internal;
 
 import static com.google.common.base.Preconditions.checkArgument;
 

File: core/src/test/java/io/grpc/IntegerMarshaller.java
Patch:
@@ -34,7 +34,7 @@
 import java.io.InputStream;
 
 /** Marshalls decimal-encoded integers. */
-class IntegerMarshaller implements MethodDescriptor.Marshaller<Integer> {
+public class IntegerMarshaller implements MethodDescriptor.Marshaller<Integer> {
   public static IntegerMarshaller INSTANCE = new IntegerMarshaller();
 
   @Override

File: core/src/test/java/io/grpc/StringMarshaller.java
Patch:
@@ -40,7 +40,7 @@
 import java.io.InputStream;
 
 /** Marshalls UTF-8 encoded strings. */
-class StringMarshaller implements MethodDescriptor.Marshaller<String> {
+public class StringMarshaller implements MethodDescriptor.Marshaller<String> {
   public static StringMarshaller INSTANCE = new StringMarshaller();
 
   @Override

File: core/src/test/java/io/grpc/internal/ExponentialBackoffPolicyTest.java
Patch:
@@ -29,7 +29,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package io.grpc;
+package io.grpc.internal;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;

File: examples/src/main/java/io/grpc/examples/header/CustomHeaderClient.java
Patch:
@@ -32,9 +32,9 @@
 package io.grpc.examples.header;
 
 import io.grpc.Channel;
-import io.grpc.ChannelImpl;
 import io.grpc.ClientInterceptor;
 import io.grpc.ClientInterceptors;
+import io.grpc.ManagedChannel;
 import io.grpc.examples.helloworld.GreeterGrpc;
 import io.grpc.examples.helloworld.HelloRequest;
 import io.grpc.examples.helloworld.HelloResponse;
@@ -52,7 +52,7 @@
 public class CustomHeaderClient {
   private static final Logger logger = Logger.getLogger(CustomHeaderClient.class.getName());
 
-  private final ChannelImpl originChannel;
+  private final ManagedChannel originChannel;
   private final GreeterGrpc.GreeterBlockingStub blockingStub;
 
   /**

File: examples/src/main/java/io/grpc/examples/header/CustomHeaderServer.java
Patch:
@@ -31,7 +31,7 @@
 
 package io.grpc.examples.header;
 
-import io.grpc.ServerImpl;
+import io.grpc.Server;
 import io.grpc.ServerInterceptors;
 import io.grpc.examples.helloworld.GreeterGrpc;
 import io.grpc.examples.helloworld.HelloRequest;
@@ -50,7 +50,7 @@ public class CustomHeaderServer {
 
   /* The port on which the server should run */
   private static final int port = 50051;
-  private ServerImpl server;
+  private Server server;
 
   private void start() throws Exception {
     server = NettyServerBuilder.forPort(port).addService(ServerInterceptors

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldClient.java
Patch:
@@ -31,7 +31,7 @@
 
 package io.grpc.examples.helloworld;
 
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
 
@@ -45,7 +45,7 @@
 public class HelloWorldClient {
   private static final Logger logger = Logger.getLogger(HelloWorldClient.class.getName());
 
-  private final ChannelImpl channel;
+  private final ManagedChannel channel;
   private final GreeterGrpc.GreeterBlockingStub blockingStub;
 
   /** Construct client connecting to HelloWorld server at {@code host:port}. */

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldServer.java
Patch:
@@ -31,7 +31,7 @@
 
 package io.grpc.examples.helloworld;
 
-import io.grpc.ServerImpl;
+import io.grpc.Server;
 import io.grpc.netty.NettyServerBuilder;
 import io.grpc.stub.StreamObserver;
 
@@ -45,7 +45,7 @@ public class HelloWorldServer {
 
   /* The port on which the server should run */
   private int port = 50051;
-  private ServerImpl server;
+  private Server server;
 
   private void start() throws Exception {
     server = NettyServerBuilder.forPort(port)

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideClient.java
Patch:
@@ -33,7 +33,7 @@
 
 import com.google.common.util.concurrent.SettableFuture;
 
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.examples.routeguide.RouteGuideGrpc.RouteGuideBlockingStub;
 import io.grpc.examples.routeguide.RouteGuideGrpc.RouteGuideStub;
 import io.grpc.netty.NegotiationType;
@@ -53,7 +53,7 @@
 public class RouteGuideClient {
   private static final Logger logger = Logger.getLogger(RouteGuideClient.class.getName());
 
-  private final ChannelImpl channel;
+  private final ManagedChannel channel;
   private final RouteGuideBlockingStub blockingStub;
   private final RouteGuideStub asyncStub;
 

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -40,7 +40,7 @@
 import static java.lang.Math.toRadians;
 import static java.util.concurrent.TimeUnit.NANOSECONDS;
 
-import io.grpc.ServerImpl;
+import io.grpc.Server;
 import io.grpc.netty.NettyServerBuilder;
 import io.grpc.stub.StreamObserver;
 
@@ -63,7 +63,7 @@ public class RouteGuideServer {
 
   private final int port;
   private final Collection<Feature> features;
-  private ServerImpl grpcServer;
+  private Server grpcServer;
 
   public RouteGuideServer(int port) {
     this(port, RouteGuideUtil.getDefaultFeaturesFile());

File: interop-testing/src/main/java/io/grpc/testing/integration/ReconnectTestClient.java
Patch:
@@ -35,7 +35,7 @@
 
 import com.google.protobuf.EmptyProtos.Empty;
 
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.StatusRuntimeException;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
@@ -53,8 +53,8 @@ public class ReconnectTestClient {
   private int serverControlPort = 8080;
   private int serverRetryPort = 8081;
   private boolean useOkhttp = false;
-  private ChannelImpl controlChannel;
-  private ChannelImpl retryChannel;
+  private ManagedChannel controlChannel;
+  private ManagedChannel retryChannel;
   private ReconnectServiceGrpc.ReconnectServiceBlockingStub controlStub;
   private ReconnectServiceGrpc.ReconnectServiceBlockingStub retryStub;
 

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -33,7 +33,7 @@
 
 import com.google.common.io.Files;
 
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
@@ -253,7 +253,7 @@ private void runTest(String testCase) throws Exception {
 
   private class Tester extends AbstractTransportTest {
     @Override
-    protected ChannelImpl createChannel() {
+    protected ManagedChannel createChannel() {
       if (!useOkHttp) {
         InetAddress address;
         try {

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceServer.java
Patch:
@@ -33,7 +33,7 @@
 
 import com.google.common.util.concurrent.MoreExecutors;
 
-import io.grpc.ServerImpl;
+import io.grpc.Server;
 import io.grpc.ServerInterceptors;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NettyServerBuilder;
@@ -80,7 +80,7 @@ public void run() {
   private boolean useTls = true;
 
   private ScheduledExecutorService executor;
-  private ServerImpl server;
+  private Server server;
 
   private void parseArgs(String[] args) {
     boolean usage = false;

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java
Patch:
@@ -31,7 +31,7 @@
 
 package io.grpc.testing.integration;
 
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.netty.NettyServerBuilder;
@@ -67,7 +67,7 @@ public static void stopServer() {
   }
 
   @Override
-  protected ChannelImpl createChannel() {
+  protected ManagedChannel createChannel() {
     return NettyChannelBuilder
         .forAddress(new LocalAddress("in-process-1"))
         .negotiationType(NegotiationType.PLAINTEXT)

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java
Patch:
@@ -31,7 +31,7 @@
 
 package io.grpc.testing.integration;
 
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.netty.NettyServerBuilder;
@@ -73,7 +73,7 @@ public static void stopServer() {
   }
 
   @Override
-  protected ChannelImpl createChannel() {
+  protected ManagedChannel createChannel() {
     try {
       return NettyChannelBuilder
           .forAddress(TestUtils.testServerAddress(serverPort))

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -34,7 +34,7 @@
 import com.squareup.okhttp.ConnectionSpec;
 import com.squareup.okhttp.TlsVersion;
 
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.netty.GrpcSslContexts;
 import io.grpc.netty.NettyServerBuilder;
 import io.grpc.okhttp.OkHttpChannelBuilder;
@@ -75,7 +75,7 @@ public static void stopServer() throws Exception {
   }
 
   @Override
-  protected ChannelImpl createChannel() {
+  protected ManagedChannel createChannel() {
     OkHttpChannelBuilder builder = OkHttpChannelBuilder.forAddress("127.0.0.1", serverPort)
         .connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC)
             .cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0]))

File: interop-testing/src/test/java/io/grpc/testing/integration/InProcessTest.java
Patch:
@@ -31,7 +31,7 @@
 
 package io.grpc.testing.integration;
 
-import io.grpc.ChannelImpl;
+import io.grpc.ManagedChannel;
 import io.grpc.inprocess.InProcessChannelBuilder;
 import io.grpc.inprocess.InProcessServerBuilder;
 
@@ -57,7 +57,7 @@ public static void stopServer() {
   }
 
   @Override
-  protected ChannelImpl createChannel() {
+  protected ManagedChannel createChannel() {
     return InProcessChannelBuilder.forName(serverName).build();
   }
 }

File: core/src/main/java/io/grpc/Metadata.java
Patch:
@@ -361,6 +361,7 @@ public interface BinaryMarshaller<T> {
    *   <li>Space: {@code 0x20}, but must not be at the beginning or at the end of the value.</li>
    *   <li>ASCII visible characters ({@code 0x21-0x7E}), but excluding comma ({@code ",", 0x2C}).
    * </ul>
+   *
    * <p>Note this has to be the subset of valid characters in {@code field-content} from RFC 7230
    * Section 3.2.
    */

File: benchmarks/src/generated/main/grpc/io/grpc/testing/TestServiceGrpc.java
Patch:
@@ -16,6 +16,8 @@
 @javax.annotation.Generated("by gRPC proto compiler")
 public class TestServiceGrpc {
 
+  public static final String SERVICE_NAME = "grpc.testing.TestService";
+
   // Static method descriptors that strictly reflect the proto.
   @io.grpc.ExperimentalApi
   public static final io.grpc.MethodDescriptor<io.grpc.testing.SimpleRequest,
@@ -153,7 +155,7 @@ public com.google.common.util.concurrent.ListenableFuture<io.grpc.testing.Simple
 
   public static io.grpc.ServerServiceDefinition bindService(
       final TestService serviceImpl) {
-    return io.grpc.ServerServiceDefinition.builder("grpc.testing.TestService")
+    return io.grpc.ServerServiceDefinition.builder(SERVICE_NAME)
       .addMethod(io.grpc.ServerMethodDefinition.create(
           METHOD_UNARY_CALL,
           asyncUnaryCall(

File: benchmarks/src/generated/main/grpc/io/grpc/testing/WorkerGrpc.java
Patch:
@@ -16,6 +16,8 @@
 @javax.annotation.Generated("by gRPC proto compiler")
 public class WorkerGrpc {
 
+  public static final String SERVICE_NAME = "grpc.testing.Worker";
+
   // Static method descriptors that strictly reflect the proto.
   @io.grpc.ExperimentalApi
   public static final io.grpc.MethodDescriptor<io.grpc.testing.ClientArgs,
@@ -135,7 +137,7 @@ protected WorkerFutureStub build(io.grpc.Channel channel,
 
   public static io.grpc.ServerServiceDefinition bindService(
       final Worker serviceImpl) {
-    return io.grpc.ServerServiceDefinition.builder("grpc.testing.Worker")
+    return io.grpc.ServerServiceDefinition.builder(SERVICE_NAME)
       .addMethod(io.grpc.ServerMethodDefinition.create(
           METHOD_RUN_TEST,
           asyncBidiStreamingCall(

File: examples/src/generated/main/grpc/io/grpc/examples/helloworld/GreeterGrpc.java
Patch:
@@ -16,6 +16,8 @@
 @javax.annotation.Generated("by gRPC proto compiler")
 public class GreeterGrpc {
 
+  public static final String SERVICE_NAME = "helloworld.Greeter";
+
   // Static method descriptors that strictly reflect the proto.
   @io.grpc.ExperimentalApi
   public static final io.grpc.MethodDescriptor<io.grpc.examples.helloworld.HelloRequest,
@@ -134,7 +136,7 @@ public com.google.common.util.concurrent.ListenableFuture<io.grpc.examples.hello
 
   public static io.grpc.ServerServiceDefinition bindService(
       final Greeter serviceImpl) {
-    return io.grpc.ServerServiceDefinition.builder("helloworld.Greeter")
+    return io.grpc.ServerServiceDefinition.builder(SERVICE_NAME)
       .addMethod(io.grpc.ServerMethodDefinition.create(
           METHOD_SAY_HELLO,
           asyncUnaryCall(

File: examples/src/generated/main/grpc/io/grpc/examples/routeguide/RouteGuideGrpc.java
Patch:
@@ -16,6 +16,8 @@
 @javax.annotation.Generated("by gRPC proto compiler")
 public class RouteGuideGrpc {
 
+  public static final String SERVICE_NAME = "routeguide.RouteGuide";
+
   // Static method descriptors that strictly reflect the proto.
   @io.grpc.ExperimentalApi
   public static final io.grpc.MethodDescriptor<io.grpc.examples.routeguide.Point,
@@ -201,7 +203,7 @@ public com.google.common.util.concurrent.ListenableFuture<io.grpc.examples.route
 
   public static io.grpc.ServerServiceDefinition bindService(
       final RouteGuide serviceImpl) {
-    return io.grpc.ServerServiceDefinition.builder("routeguide.RouteGuide")
+    return io.grpc.ServerServiceDefinition.builder(SERVICE_NAME)
       .addMethod(io.grpc.ServerMethodDefinition.create(
           METHOD_GET_FEATURE,
           asyncUnaryCall(

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java
Patch:
@@ -16,6 +16,8 @@
 @javax.annotation.Generated("by gRPC proto compiler")
 public class ReconnectServiceGrpc {
 
+  public static final String SERVICE_NAME = "grpc.testing.ReconnectService";
+
   // Static method descriptors that strictly reflect the proto.
   @io.grpc.ExperimentalApi
   public static final io.grpc.MethodDescriptor<com.google.protobuf.EmptyProtos.Empty,
@@ -171,7 +173,7 @@ public com.google.common.util.concurrent.ListenableFuture<io.grpc.testing.integr
 
   public static io.grpc.ServerServiceDefinition bindService(
       final ReconnectService serviceImpl) {
-    return io.grpc.ServerServiceDefinition.builder("grpc.testing.ReconnectService")
+    return io.grpc.ServerServiceDefinition.builder(SERVICE_NAME)
       .addMethod(io.grpc.ServerMethodDefinition.create(
           METHOD_START,
           asyncUnaryCall(

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/TestServiceGrpc.java
Patch:
@@ -16,6 +16,8 @@
 @javax.annotation.Generated("by gRPC proto compiler")
 public class TestServiceGrpc {
 
+  public static final String SERVICE_NAME = "grpc.testing.TestService";
+
   // Static method descriptors that strictly reflect the proto.
   @io.grpc.ExperimentalApi
   public static final io.grpc.MethodDescriptor<com.google.protobuf.EmptyProtos.Empty,
@@ -257,7 +259,7 @@ public com.google.common.util.concurrent.ListenableFuture<io.grpc.testing.integr
 
   public static io.grpc.ServerServiceDefinition bindService(
       final TestService serviceImpl) {
-    return io.grpc.ServerServiceDefinition.builder("grpc.testing.TestService")
+    return io.grpc.ServerServiceDefinition.builder(SERVICE_NAME)
       .addMethod(io.grpc.ServerMethodDefinition.create(
           METHOD_EMPTY_CALL,
           asyncUnaryCall(

File: interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java
Patch:
@@ -16,6 +16,8 @@
 @javax.annotation.Generated("by gRPC proto compiler")
 public class UnimplementedServiceGrpc {
 
+  public static final String SERVICE_NAME = "grpc.testing.UnimplementedService";
+
   // Static method descriptors that strictly reflect the proto.
   @io.grpc.ExperimentalApi
   public static final io.grpc.MethodDescriptor<com.google.protobuf.EmptyProtos.Empty,
@@ -134,7 +136,7 @@ public com.google.common.util.concurrent.ListenableFuture<com.google.protobuf.Em
 
   public static io.grpc.ServerServiceDefinition bindService(
       final UnimplementedService serviceImpl) {
-    return io.grpc.ServerServiceDefinition.builder("grpc.testing.UnimplementedService")
+    return io.grpc.ServerServiceDefinition.builder(SERVICE_NAME)
       .addMethod(io.grpc.ServerMethodDefinition.create(
           METHOD_UNIMPLEMENTED_CALL,
           asyncUnaryCall(

File: core/src/test/java/io/grpc/internal/AbstractClientStreamTest.java
Patch:
@@ -49,6 +49,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mock;
@@ -60,6 +62,7 @@
  * Test for {@link AbstractClientStream}.  This class tries to test functionality in
  * AbstractClientStream, but not in any super classes.
  */
+@RunWith(JUnit4.class)
 public class AbstractClientStreamTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/InteropTester.java
Patch:
@@ -236,7 +236,7 @@ public void clientStreaming() throws Exception {
     StreamObserver<Messages.StreamingInputCallRequest> requestObserver =
         asyncStub.streamingInputCall(responseObserver);
     for (Messages.StreamingInputCallRequest request : requests) {
-      requestObserver.onValue(request);
+      requestObserver.onNext(request);
     }
     requestObserver.onCompleted();
     assertEquals(goldenResponse, responseObserver.firstValue().get());
@@ -280,7 +280,7 @@ public void pingPong() throws Exception {
         new StreamObserver<Messages.StreamingOutputCallResponse>() {
 
           @Override
-          public void onValue(Messages.StreamingOutputCallResponse value) {
+          public void onNext(Messages.StreamingOutputCallResponse value) {
             responses.add(value);
           }
 
@@ -298,7 +298,7 @@ public void onCompleted() {
     StreamObserver<Messages.StreamingOutputCallRequest> requestObserver
         = asyncStub.fullDuplexCall(responseObserver);
     for (int i = 0; i < requests.length; i++) {
-      requestObserver.onValue(requests[i]);
+      requestObserver.onNext(requests[i]);
       Object response = responses.poll(5, TimeUnit.SECONDS);
       if (!(response instanceof Messages.StreamingOutputCallResponse)) {
         Assert.fail("Unexpected: " + response);

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -197,7 +197,7 @@ public void maxMessageSizeShouldBeEnforced() throws Exception {
     startTransport(3, null, true, 1);
 
     MockStreamListener listener = new MockStreamListener();
-    clientTransport.newStream(method, new Metadata.Headers(), listener).request(1);
+    clientTransport.newStream(method, new Metadata(), listener).request(1);
     assertContainStream(3);
     frameHandler().headers(false, false, 3, 0, grpcResponseHeaders(), HeadersMode.HTTP_20_HEADERS);
     assertNotNull(listener.headers);

File: core/src/main/java/io/grpc/internal/AbstractServerStream.java
Patch:
@@ -63,8 +63,9 @@ public abstract class AbstractServerStream<IdT> extends AbstractStream<IdT>
   /** Saved trailers from close() that need to be sent once the framer has sent all messages. */
   private Metadata stashedTrailers;
 
-  protected AbstractServerStream(WritableBufferAllocator bufferAllocator) {
-    super(bufferAllocator);
+  protected AbstractServerStream(WritableBufferAllocator bufferAllocator,
+                                 int maxMessageSize) {
+    super(bufferAllocator, maxMessageSize);
   }
 
   /**

File: core/src/main/java/io/grpc/internal/AbstractStream.java
Patch:
@@ -100,7 +100,7 @@ protected enum Phase {
 
   private final Object onReadyLock = new Object();
 
-  AbstractStream(WritableBufferAllocator bufferAllocator) {
+  AbstractStream(WritableBufferAllocator bufferAllocator, int maxMessageSize) {
     MessageDeframer.Listener inboundMessageHandler = new MessageDeframer.Listener() {
       @Override
       public void bytesRead(int numBytes) {
@@ -130,7 +130,7 @@ public void deliverFrame(WritableBuffer frame, boolean endOfStream, boolean flus
     };
 
     framer = new MessageFramer(outboundFrameHandler, bufferAllocator);
-    deframer = new MessageDeframer(inboundMessageHandler);
+    deframer = new MessageDeframer(inboundMessageHandler, MessageEncoding.NONE, maxMessageSize);
   }
 
   @Override

File: core/src/main/java/io/grpc/internal/Http2ClientStream.java
Patch:
@@ -71,8 +71,9 @@ public Integer parseAsciiString(String serialized) {
   private boolean contentTypeChecked;
 
   protected Http2ClientStream(WritableBufferAllocator bufferAllocator,
-                              ClientStreamListener listener) {
-    super(bufferAllocator, listener);
+                              ClientStreamListener listener,
+                              int maxMessageSize) {
+    super(bufferAllocator, listener, maxMessageSize);
   }
 
   /**

File: core/src/test/java/io/grpc/internal/AbstractClientStreamTest.java
Patch:
@@ -31,6 +31,7 @@
 
 package io.grpc.internal;
 
+import static io.grpc.internal.GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.isA;
@@ -242,7 +243,7 @@ public void inboundHeadersReceived_notifiesListenerOnBadEncoding() {
   private static class BaseAbstractClientStream<T> extends AbstractClientStream<T> {
     protected BaseAbstractClientStream(
         WritableBufferAllocator allocator, ClientStreamListener listener) {
-      super(allocator, listener);
+      super(allocator, listener, DEFAULT_MAX_MESSAGE_SIZE);
     }
 
     @Override

File: core/src/test/java/io/grpc/internal/AbstractStreamTest.java
Patch:
@@ -32,6 +32,7 @@
 
 package io.grpc.internal;
 
+import static io.grpc.internal.GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.verify;
 
@@ -102,7 +103,7 @@ public void validPhaseTransitions() {
    */
   private class AbstractStreamBase<IdT> extends AbstractStream<IdT> {
     private AbstractStreamBase(WritableBufferAllocator bufferAllocator) {
-      super(bufferAllocator);
+      super(bufferAllocator, DEFAULT_MAX_MESSAGE_SIZE);
     }
 
     @Override

File: netty/src/main/java/io/grpc/netty/NettyClientStream.java
Patch:
@@ -58,8 +58,9 @@ class NettyClientStream extends Http2ClientStream {
   private Integer id;
   private WriteQueue writeQueue;
 
-  NettyClientStream(ClientStreamListener listener, Channel channel, NettyClientHandler handler) {
-    super(new NettyWritableBufferAllocator(channel.alloc()), listener);
+  NettyClientStream(ClientStreamListener listener, Channel channel, NettyClientHandler handler,
+                    int maxMessageSize) {
+    super(new NettyWritableBufferAllocator(channel.alloc()), listener, maxMessageSize);
     this.writeQueue = handler.getWriteQueue();
     this.channel = checkNotNull(channel, "channel");
     this.handler = checkNotNull(handler, "handler");

File: netty/src/main/java/io/grpc/netty/NettyServerStream.java
Patch:
@@ -54,8 +54,9 @@ class NettyServerStream extends AbstractServerStream<Integer> {
   private final Http2Stream http2Stream;
   private final WriteQueue writeQueue;
 
-  NettyServerStream(Channel channel, Http2Stream http2Stream, NettyServerHandler handler) {
-    super(new NettyWritableBufferAllocator(channel.alloc()));
+  NettyServerStream(Channel channel, Http2Stream http2Stream, NettyServerHandler handler,
+                    int maxMessageSize) {
+    super(new NettyWritableBufferAllocator(channel.alloc()), maxMessageSize);
     this.writeQueue = handler.getWriteQueue();
     this.channel = checkNotNull(channel, "channel");
     this.http2Stream = checkNotNull(http2Stream, "http2Stream");

File: stub/src/main/java/io/grpc/stub/StreamObserver.java
Patch:
@@ -55,7 +55,7 @@ public interface StreamObserver<V>  {
    *
    * @param value the value passed to the stream
    */
-  public void onValue(V value);
+  void onValue(V value);
 
   /**
    * Receives a terminating error from the stream.
@@ -66,7 +66,7 @@ public interface StreamObserver<V>  {
    *
    * @param t the error occurred on the stream
    */
-  public void onError(Throwable t);
+  void onError(Throwable t);
 
   /**
    * Receives a notification of successful stream completion.
@@ -75,5 +75,5 @@ public interface StreamObserver<V>  {
    * exception is thrown by an implementation of {@code onCompleted} no further calls to any method
    * are allowed.
    */
-  public void onCompleted();
+  void onCompleted();
 }

File: stub/src/main/java/io/grpc/stub/StreamObserver.java
Patch:
@@ -55,7 +55,7 @@ public interface StreamObserver<V>  {
    *
    * @param value the value passed to the stream
    */
-  public void onValue(V value);
+  void onValue(V value);
 
   /**
    * Receives a terminating error from the stream.
@@ -66,7 +66,7 @@ public interface StreamObserver<V>  {
    *
    * @param t the error occurred on the stream
    */
-  public void onError(Throwable t);
+  void onError(Throwable t);
 
   /**
    * Receives a notification of successful stream completion.
@@ -75,5 +75,5 @@ public interface StreamObserver<V>  {
    * exception is thrown by an implementation of {@code onCompleted} no further calls to any method
    * are allowed.
    */
-  public void onCompleted();
+  void onCompleted();
 }

File: protobuf/src/test/java/io/grpc/protobuf/ProtoUtilsTest.java
Patch:
@@ -77,7 +77,8 @@ public void testMismatch() throws Exception {
 
   @Test
   public void marshallerShouldNotLimitProtoSize() throws Exception {
-    byte[] bigName = new byte[100 * 1024 * 1024];
+    // The default limit is 64MB. Using a larger proto to verify that the limit is not enforced.
+    byte[] bigName = new byte[70 * 1024 * 1024];
     new Random().nextBytes(bigName);
 
     proto = Type.newBuilder().setNameBytes(ByteString.copyFrom(bigName)).build();

File: core/src/main/java/io/grpc/ClientCall.java
Patch:
@@ -142,7 +142,6 @@ public void onReady() {}
    *
    * @param numMessages the requested number of messages to be delivered to the listener. Must be
    *                    non-negative.
-   * @throws IllegalStateException if call is already {@code halfClose()}d or {@link #cancel}ed
    */
   public abstract void request(int numMessages);
 

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java
Patch:
@@ -221,15 +221,15 @@ public void setup(ExecutorType clientExecutor,
 
     // Simple method that sends and receives NettyByteBuf
     unaryMethod = MethodDescriptor.create(MethodType.UNARY,
-        "benchmark", "unary",
+        "benchmark/unary",
         new ByteBufOutputMarshaller(),
         new ByteBufOutputMarshaller());
     pingPongMethod = MethodDescriptor.create(MethodType.BIDI_STREAMING,
-        "benchmark", "pingPong",
+        "benchmark/pingPong",
         new ByteBufOutputMarshaller(),
         new ByteBufOutputMarshaller());
     flowControlledStreaming = MethodDescriptor.create(MethodType.BIDI_STREAMING,
-        "benchmark", "flowControlledStreaming",
+        "benchmark/flowControlledStreaming",
         new ByteBufOutputMarshaller(),
         new ByteBufOutputMarshaller());
 

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/HandlerRegistryBenchmark.java
Patch:
@@ -84,7 +84,8 @@ public void setup() throws Exception {
       for (int methodIndex = 0; methodIndex < methodCountPerService; ++methodIndex) {
         String methodName = randomString();
         MethodDescriptor<?, ?> methodDescriptor = MethodDescriptor.create(
-            MethodDescriptor.MethodType.UNKNOWN, serviceName, methodName, null, null);
+            MethodDescriptor.MethodType.UNKNOWN,
+            MethodDescriptor.generateFullMethodName(serviceName, methodName), null, null);
         serviceBuilder.addMethod(ServerMethodDefinition.create(methodDescriptor, null));
         fullMethodNames.add(methodDescriptor.getFullMethodName());
       }

File: core/src/test/java/io/grpc/ServerImplTest.java
Patch:
@@ -180,7 +180,7 @@ public void basicExchangeSuccessful() throws Exception {
     registry.addService(ServerServiceDefinition.builder("Waiter")
         .addMethod(
             MethodDescriptor.create(
-                MethodType.UNKNOWN, "Waiter", "serve", STRING_MARSHALLER, INTEGER_MARSHALLER),
+                MethodType.UNKNOWN, "Waiter/serve", STRING_MARSHALLER, INTEGER_MARSHALLER),
             new ServerCallHandler<String, Integer>() {
               @Override
               public ServerCall.Listener<String> startCall(
@@ -247,7 +247,7 @@ public void exceptionInStartCallPropagatesToStream() throws Exception {
     final Status status = Status.ABORTED.withDescription("Oh, no!");
     registry.addService(ServerServiceDefinition.builder("Waiter")
         .addMethod(
-            MethodDescriptor.create(MethodType.UNKNOWN, "Waiter", "serve",
+            MethodDescriptor.create(MethodType.UNKNOWN, "Waiter/serve",
               STRING_MARSHALLER, INTEGER_MARSHALLER),
             new ServerCallHandler<String, Integer>() {
               @Override

File: examples/src/generated/main/grpc/io/grpc/examples/helloworld/GreeterGrpc.java
Patch:
@@ -7,6 +7,7 @@
 import static io.grpc.stub.ClientCalls.blockingUnaryCall;
 import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
 import static io.grpc.stub.ClientCalls.futureUnaryCall;
+import static io.grpc.MethodDescriptor.generateFullMethodName;
 import static io.grpc.stub.ServerCalls.asyncUnaryCall;
 import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
 import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
@@ -20,7 +21,8 @@ public class GreeterGrpc {
       io.grpc.examples.helloworld.HelloResponse> METHOD_SAY_HELLO =
       io.grpc.MethodDescriptor.create(
           io.grpc.MethodDescriptor.MethodType.UNARY,
-          "helloworld.Greeter", "SayHello",
+          generateFullMethodName(
+              "helloworld.Greeter", "SayHello"),
           io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.examples.helloworld.HelloRequest.parser()),
           io.grpc.protobuf.ProtoUtils.marshaller(io.grpc.examples.helloworld.HelloResponse.parser()));
 

File: netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java
Patch:
@@ -349,7 +349,7 @@ private void createStream() throws Exception {
         .method(HTTP_METHOD)
         .set(CONTENT_TYPE_HEADER, CONTENT_TYPE_GRPC)
         .set(TE_HEADER, TE_TRAILERS)
-        .path(new AsciiString("/foo.bar"));
+        .path(new AsciiString("/foo/bar"));
     ByteBuf headersFrame = headersFrame(STREAM_ID, headers);
     handler.channelRead(ctx, headersFrame);
 

File: core/src/main/java/io/grpc/MutableHandlerRegistry.java
Patch:
@@ -35,8 +35,10 @@
 import javax.annotation.concurrent.ThreadSafe;
 
 /**
- * Mutable implementation of {@link HandlerRegistry}. Used by server implementations
+ * Mutable base class of {@link HandlerRegistry}. Used by server implementations
  * that need to bind and unbind services that are exposed to remote clients.
+ *
+ * @see MutableHandlerRegistryImpl
  */
 @ThreadSafe
 public abstract class MutableHandlerRegistry extends HandlerRegistry {

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncClient.java
Patch:
@@ -44,6 +44,7 @@
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TESTCA;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TLS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TRANSPORT;
+import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.USE_DEFAULT_CIPHERS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.WARMUP_DURATION;
 import static io.grpc.benchmarks.qps.Utils.HISTOGRAM_MAX_VALUE;
 import static io.grpc.benchmarks.qps.Utils.HISTOGRAM_PRECISION;
@@ -325,7 +326,7 @@ private static void shutdown(List<Channel> channels) {
   public static void main(String... args) throws Exception {
     ClientConfiguration.Builder configBuilder = ClientConfiguration.newBuilder(
         ADDRESS, CHANNELS, OUTSTANDING_RPCS, CLIENT_PAYLOAD, SERVER_PAYLOAD,
-        TLS, TESTCA, TRANSPORT, DURATION, WARMUP_DURATION, DIRECTEXECUTOR,
+        TLS, TESTCA, USE_DEFAULT_CIPHERS, TRANSPORT, DURATION, WARMUP_DURATION, DIRECTEXECUTOR,
         SAVE_HISTOGRAM, STREAMING_RPCS, FLOW_CONTROL_WINDOW);
     ClientConfiguration config;
     try {

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java
Patch:
@@ -42,6 +42,7 @@
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TESTCA;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TLS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TRANSPORT;
+import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.USE_DEFAULT_CIPHERS;
 import static io.grpc.benchmarks.qps.Utils.HISTOGRAM_MAX_VALUE;
 import static io.grpc.benchmarks.qps.Utils.HISTOGRAM_PRECISION;
 import static io.grpc.benchmarks.qps.Utils.newClientChannel;
@@ -85,7 +86,7 @@ public OpenLoopClient(ClientConfiguration config) {
   public static void main(String... args) throws Exception {
     ClientConfiguration.Builder configBuilder = ClientConfiguration.newBuilder(
         ADDRESS, TARGET_QPS, CLIENT_PAYLOAD, SERVER_PAYLOAD, TLS,
-        TESTCA, TRANSPORT, DURATION, SAVE_HISTOGRAM, FLOW_CONTROL_WINDOW);
+        TESTCA, USE_DEFAULT_CIPHERS, TRANSPORT, DURATION, SAVE_HISTOGRAM, FLOW_CONTROL_WINDOW);
     ClientConfiguration config;
     try {
       config = configBuilder.build(args);

File: auth/src/test/java/io/grpc/auth/ClientAuthInterceptorTests.java
Patch:
@@ -137,7 +137,7 @@ public void testCredentialsThrows() throws IOException {
     Mockito.verify(listener).onClose(statusCaptor.capture(), isA(Metadata.Trailers.class));
     Assert.assertNull(headers.getAll(AUTHORIZATION));
     Mockito.verify(call, never()).start(listener, headers);
-    Assert.assertEquals(Status.Code.UNKNOWN, statusCaptor.getValue().getCode());
+    Assert.assertEquals(Status.Code.UNAUTHENTICATED, statusCaptor.getValue().getCode());
     Assert.assertNotNull(statusCaptor.getValue().getCause());
   }
 

File: core/src/main/java/io/grpc/internal/Http2ClientStream.java
Patch:
@@ -181,7 +181,7 @@ private Status statusFromTrailers(Metadata.Trailers trailers) {
     if (status == null) {
       status = statusFromHttpStatus(trailers);
       if (status == null || status.isOk()) {
-        status = Status.INTERNAL.withDescription("missing GRPC status in response");
+        status = Status.UNKNOWN.withDescription("missing GRPC status in response");
       } else {
         status = status.withDescription(
             "missing GRPC status, inferred error from HTTP status code");

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -437,7 +437,7 @@ int getPendingStreamSize() {
    */
   void onIoException(IOException failureCause) {
     log.log(Level.SEVERE, "Transport failed", failureCause);
-    onGoAway(0, Status.INTERNAL.withCause(failureCause));
+    onGoAway(0, Status.UNAVAILABLE.withCause(failureCause));
   }
 
   /**

File: okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -1058,15 +1058,15 @@ public void ping_failsIfTransportFails() throws Exception {
     // ping failed on error
     assertEquals(1, callback.invocationCount);
     assertTrue(callback.failureCause instanceof StatusException);
-    assertEquals(Status.Code.INTERNAL,
+    assertEquals(Status.Code.UNAVAILABLE,
         ((StatusException) callback.failureCause).getStatus().getCode());
 
     // now that handler is in terminal state, all future pings fail immediately
     callback = new PingCallbackImpl();
     clientTransport.ping(callback, MoreExecutors.directExecutor());
     assertEquals(1, callback.invocationCount);
     assertTrue(callback.failureCause instanceof StatusException);
-    assertEquals(Status.Code.INTERNAL,
+    assertEquals(Status.Code.UNAVAILABLE,
         ((StatusException) callback.failureCause).getStatus().getCode());
   }
 

File: okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java
Patch:
@@ -272,6 +272,9 @@ private void startStream(OkHttpClientStream stream) {
       frameWriter.flush();
     }
     if (nextStreamId >= Integer.MAX_VALUE - 2) {
+      // Make sure nextStreamId greater than all used id, so that mayHaveCreatedStream() performs
+      // correctly.
+      nextStreamId = Integer.MAX_VALUE;
       onGoAway(Integer.MAX_VALUE, Status.INTERNAL.withDescription("Stream ids exhausted"));
     } else {
       nextStreamId += 2;

File: okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java
Patch:
@@ -119,9 +119,6 @@ void windowUpdate(@Nullable OkHttpClientStream stream, int delta) {
    */
   void data(boolean outFinished, int streamId, Buffer source, boolean flush) {
     Preconditions.checkNotNull(source, "source");
-    if (streamId <= 0 || !transport.mayHaveCreatedStream(streamId)) {
-      throw new IllegalArgumentException("Invalid streamId: " + streamId);
-    }
 
     OkHttpClientStream stream = transport.getStream(streamId);
     if (stream == null) {

File: netty/src/test/java/io/grpc/transport/netty/NettyClientHandlerTest.java
Patch:
@@ -522,11 +522,11 @@ public void ping_failsOnConnectionError() throws Exception {
     sendPing(callback, MoreExecutors.directExecutor());
     assertEquals(0, callback.invocationCount);
 
-    Throwable connectionError = new Throwable();
-    handler.onConnectionError(ctx, connectionError, null);
+    Status failureStatus = Status.INTERNAL.withDescription("forced failure");
+    handler.onConnectionError(ctx, failureStatus.asRuntimeException(), null);
     // ping failed on connection error
     assertEquals(1, callback.invocationCount);
-    assertSame(connectionError, callback.failureCause);
+    assertSame(failureStatus, Status.fromThrowable(callback.failureCause));
   }
 
   private void sendPing(PingCallback callback, Executor executor) {

File: core/src/main/java/io/grpc/ChannelImpl.java
Patch:
@@ -308,7 +308,7 @@ public void transportTerminated() {
           activeTransport = null;
         }
         // TODO(notcarl): replace this with something more meaningful
-        transportShutdown(Status.UNKNOWN);
+        transportShutdown(Status.UNKNOWN.withDescription("transport shutdown for unknown reason"));
         transports.remove(transport);
         if (shutdown && transports.isEmpty()) {
           if (terminated) {

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractTransportTest.java
Patch:
@@ -599,7 +599,7 @@ public void deadlineNotExceeded() {
     // warm up the channel and JVM
     blockingStub.emptyCall(Empty.getDefaultInstance());
     TestServiceGrpc.newBlockingStub(channel)
-        .withDeadlineAfter(50, TimeUnit.MILLISECONDS)
+        .withDeadlineAfter(10, TimeUnit.SECONDS)
         .streamingOutputCall(StreamingOutputCallRequest.newBuilder()
             .addResponseParameters(ResponseParameters.newBuilder()
                 .setIntervalUs(0))

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -558,7 +558,9 @@ OkHttpClientStream getStream(int streamId) {
    */
   @VisibleForTesting
   static Status toGrpcStatus(ErrorCode code) {
-    return ERROR_CODE_TO_STATUS.get(code);
+    Status status = ERROR_CODE_TO_STATUS.get(code);
+    return status != null ? status : Status.UNKNOWN.withDescription(
+        "Unknown http2 error code: " + code.httpCode);
   }
 
   /**

File: core/src/main/java/io/grpc/transport/AbstractClientStream.java
Patch:
@@ -168,7 +168,7 @@ protected final void deframeFailed(Throwable cause) {
   protected void inboundTrailersReceived(Metadata.Trailers trailers, Status status) {
     Preconditions.checkNotNull(trailers, "trailers");
     if (inboundPhase() == Phase.STATUS) {
-      log.log(Level.INFO, "Received trailers on closed stream {0}\n {1}\n {3}",
+      log.log(Level.INFO, "Received trailers on closed stream {0}\n {1}\n {2}",
           new Object[]{id(), status, trailers});
     }
     // Stash the status & trailers so they can be delivered by the deframer calls
@@ -281,7 +281,7 @@ public final void halfClose() {
    * Cancel the stream. Called by the application layer, never called by the transport.
    */
   @Override
-  public void cancel(Status reason) {
+  public final void cancel(Status reason) {
     Preconditions.checkArgument(EnumSet.of(CANCELLED, DEADLINE_EXCEEDED).contains(reason.getCode()),
         "Invalid cancellation reason");
     outboundPhase(Phase.STATUS);

File: core/src/main/java/io/grpc/transport/AbstractClientStream.java
Patch:
@@ -156,8 +156,7 @@ protected void inboundDeliveryPaused() {
 
   @Override
   protected final void deframeFailed(Throwable cause) {
-    log.log(Level.WARNING, "Exception processing message", cause);
-    cancel(Status.CANCELLED);
+    cancel(Status.INTERNAL.withDescription("Exception deframing message").withCause(cause));
   }
 
   /**

File: core/src/main/java/io/grpc/ServerImpl.java
Patch:
@@ -131,8 +131,8 @@ public synchronized ServerImpl shutdown() {
     if (shutdown) {
       return this;
     }
-    transportServer.shutdown();
     shutdown = true;
+    transportServer.shutdown();
     timeoutService.shutdown();
     return this;
   }

File: core/src/main/java/io/grpc/ChannelImpl.java
Patch:
@@ -306,15 +306,15 @@ public void transportTerminated() {
     }
   }
 
-  private class CallImpl<ReqT, RespT> extends ClientCall<ReqT, RespT> {
+  private final class CallImpl<ReqT, RespT> extends ClientCall<ReqT, RespT> {
     private final MethodDescriptor<ReqT, RespT> method;
     private final SerializingExecutor callExecutor;
     private final boolean unaryRequest;
     private final CallOptions callOptions;
     private ClientStream stream;
     private volatile ScheduledFuture<?> deadlineCancellationFuture;
 
-    public CallImpl(MethodDescriptor<ReqT, RespT> method, SerializingExecutor executor,
+    private CallImpl(MethodDescriptor<ReqT, RespT> method, SerializingExecutor executor,
         CallOptions callOptions) {
       this.method = method;
       this.callExecutor = executor;
@@ -403,6 +403,7 @@ public void sendPayload(ReqT payload) {
         stream.writeMessage(payloadIs);
         failed = false;
       } finally {
+        // TODO(notcarl): Find out if payloadIs needs to be closed.
         if (failed) {
           cancel();
         }

File: core/src/main/java/io/grpc/transport/ClientTransport.java
Patch:
@@ -63,7 +63,7 @@ ClientStream newStream(MethodDescriptor<?, ?> method,
                          ClientStreamListener listener);
 
   /**
-   * Starts transport. Implementations must not call {@code listener} until after {@code start()}
+   * Starts transport. Implementations must not call {@code listener} until after {@link #start}
    * returns.
    *
    * @param listener non-{@code null} listener of transport events
@@ -81,7 +81,7 @@ ClientStream newStream(MethodDescriptor<?, ?> method,
 
   /**
    * Initiates an orderly shutdown of the transport. Existing streams continue, but new streams will
-   * fail (once {@link Listener#transportShutdown()} callback called).
+   * fail (once {@link Listener#transportShutdown} callback called).
    */
   void shutdown();
 

File: interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java
Patch:
@@ -250,6 +250,7 @@ protected ChannelImpl createChannel() {
           }
         }
         return NettyChannelBuilder.forAddress(new InetSocketAddress(address, serverPort))
+            .flowControlWindow(65 * 1024)
             .negotiationType(useTls ? NegotiationType.TLS : NegotiationType.PLAINTEXT)
             .sslContext(sslContext)
             .build();

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java
Patch:
@@ -56,6 +56,7 @@ public static void startServer() {
     startStaticServer(
         NettyServerBuilder
             .forAddress(new LocalAddress("in-process-1"))
+            .flowControlWindow(65 * 1024)
             .channelType(LocalServerChannel.class));
   }
 

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java
Patch:
@@ -57,6 +57,7 @@ public class Http2NettyTest extends AbstractTransportTest {
   public static void startServer() {
     try {
       startStaticServer(NettyServerBuilder.forPort(serverPort)
+          .flowControlWindow(65 * 1024)
           .sslContext(GrpcSslContexts
               .forServer(TestUtils.loadCert("server1.pem"), TestUtils.loadCert("server1.key"))
               .ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE)

File: core/src/main/java/io/grpc/ChannelImpl.java
Patch:
@@ -35,6 +35,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Throwables;
 
+import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.transport.ClientStream;
 import io.grpc.transport.ClientStreamListener;
 import io.grpc.transport.ClientTransport;

File: core/src/main/java/io/grpc/HandlerRegistry.java
Patch:
@@ -41,8 +41,7 @@
 public abstract class HandlerRegistry {
 
   /**
-   * Lookup a {@link Method} by its fully-qualified name. All names are expected to be absolute
-   * paths that start with '/'.
+   * Lookup a {@link Method} by its fully-qualified name.
    *
    * @param methodName to lookup {@link Method} for.
    * @return the resolved method or {@code null} if no method for that name exists.

File: core/src/test/java/io/grpc/ChannelImplTest.java
Patch:
@@ -69,7 +69,7 @@
 @RunWith(JUnit4.class)
 public class ChannelImplTest {
   private MethodDescriptor<String, Integer> method = MethodDescriptor.create(
-      MethodType.UNKNOWN, "/service/method",
+      MethodDescriptor.MethodType.UNKNOWN, "/service/method",
       new StringMarshaller(), new IntegerMarshaller());
   private ExecutorService executor = Executors.newSingleThreadExecutor();
 

File: interop-testing/src/main/java/io/grpc/testing/integration/AbstractTransportTest.java
Patch:
@@ -442,7 +442,7 @@ public void serverStreamingShouldBeFlowControlled() throws Exception {
 
     final ArrayBlockingQueue<Object> queue = new ArrayBlockingQueue<Object>(10);
     ClientCall<StreamingOutputCallRequest, StreamingOutputCallResponse> call =
-        channel.newCall(TestServiceGrpc.CONFIG.streamingOutputCall, CallOptions.DEFAULT);
+        channel.newCall(TestServiceGrpc.METHOD_STREAMING_OUTPUT_CALL, CallOptions.DEFAULT);
     call.start(new ClientCall.Listener<StreamingOutputCallResponse>() {
       @Override
       public void onHeaders(Metadata.Headers headers) {}

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -101,11 +101,11 @@ public void testStubCallOptionsPopulatedToNewCall() {
     CallOptions options1 = stub.getCallOptions();
     SimpleRequest request = SimpleRequest.getDefaultInstance();
     stub.unaryCall(request, responseObserver);
-    verify(channel).newCall(same(TestServiceGrpc.CONFIG.unaryCall), same(options1));
+    verify(channel).newCall(same(TestServiceGrpc.METHOD_UNARY_CALL), same(options1));
     stub = stub.configureNewStub().setDeadlineNanoTime(2L).build();
     CallOptions options2 = stub.getCallOptions();
     assertNotSame(options1, options2);
     stub.unaryCall(request, responseObserver);
-    verify(channel).newCall(same(TestServiceGrpc.CONFIG.unaryCall), same(options2));
+    verify(channel).newCall(same(TestServiceGrpc.METHOD_UNARY_CALL), same(options2));
   }
 }

File: netty/src/main/java/io/grpc/transport/netty/NettyClientTransport.java
Patch:
@@ -133,7 +133,7 @@ public ClientStream newStream(MethodDescriptor<?, ?> method, Metadata.Headers he
     final NettyClientStream stream = new NettyClientStream(listener, channel, handler);
 
     // Convert the headers into Netty HTTP/2 headers.
-    AsciiString defaultPath = new AsciiString("/" + method.getName());
+    AsciiString defaultPath = new AsciiString("/" + method.getFullMethodName());
     Http2Headers http2Headers = Utils.convertClientHeaders(headers, negotiationHandler.scheme(),
         defaultPath, authority);
 

File: netty/src/test/java/io/grpc/transport/netty/NettyClientTransportTest.java
Patch:
@@ -43,7 +43,6 @@
 import io.grpc.Marshaller;
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
-import io.grpc.MethodType;
 import io.grpc.Status;
 import io.grpc.StatusException;
 import io.grpc.testing.TestUtils;
@@ -244,7 +243,7 @@ private void startServer(int maxStreamsPerConnection) throws IOException {
   private static class Rpc {
     static final String MESSAGE = "hello";
     static final MethodDescriptor<String, String> METHOD = MethodDescriptor.create(
-            MethodType.UNARY, "/testService/test", StringMarshaller.INSTANCE,
+            MethodDescriptor.MethodType.UNARY, "/testService/test", StringMarshaller.INSTANCE,
             StringMarshaller.INSTANCE);
 
     final ClientStream stream;

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientStream.java
Patch:
@@ -38,7 +38,7 @@
 import com.squareup.okhttp.internal.spdy.Header;
 
 import io.grpc.Metadata;
-import io.grpc.MethodType;
+import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.Status;
 import io.grpc.transport.ClientStreamListener;
 import io.grpc.transport.Http2ClientStream;

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -52,7 +52,7 @@
 
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
-import io.grpc.MethodType;
+import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.Status;
 import io.grpc.Status.Code;
 import io.grpc.transport.ClientStreamListener;
@@ -248,7 +248,7 @@ public OkHttpClientStream newStream(MethodDescriptor<?, ?> method,
     OkHttpClientStream clientStream =
         OkHttpClientStream.newStream(listener, frameWriter, this, outboundFlow, method.getType());
 
-    String defaultPath = "/" + method.getName();
+    String defaultPath = "/" + method.getFullMethodName();
     List<Header> requestHeaders =
         Headers.createRequestHeaders(headers, defaultPath, defaultAuthority);
 

File: okhttp/src/test/java/io/grpc/transport/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -67,7 +67,7 @@
 
 import io.grpc.Metadata;
 import io.grpc.MethodDescriptor;
-import io.grpc.MethodType;
+import io.grpc.MethodDescriptor.MethodType;
 import io.grpc.Status;
 import io.grpc.StatusException;
 import io.grpc.transport.ClientStreamListener;
@@ -145,7 +145,7 @@ public long read() {
     clientTransport.start(transportListener);
     frameHandler = clientTransport.getHandler();
     streams = clientTransport.getStreams();
-    when(method.getName()).thenReturn("fakemethod");
+    when(method.getFullMethodName()).thenReturn("fakemethod");
     when(method.getType()).thenReturn(MethodType.UNARY);
     when(frameWriter.maxDataLength()).thenReturn(Integer.MAX_VALUE);
   }

File: core/src/main/java/io/grpc/transport/HttpUtil.java
Patch:
@@ -44,13 +44,13 @@
 public final class HttpUtil {
 
   /**
-   * {@link Metadata.Key} for the Content-Type request/response header.
+   * {@link io.grpc.Metadata.Key} for the Content-Type request/response header.
    */
   public static final Metadata.Key<String> CONTENT_TYPE_KEY =
           Metadata.Key.of("content-type", Metadata.ASCII_STRING_MARSHALLER);
 
   /**
-   * {@link Metadata.Key} for the Content-Type request/response header.
+   * {@link io.grpc.Metadata.Key} for the Content-Type request/response header.
    */
   public static final Metadata.Key<String> USER_AGENT_KEY =
           Metadata.Key.of("user-agent", Metadata.ASCII_STRING_MARSHALLER);

File: core/src/main/java/io/grpc/transport/Http2ClientStream.java
Patch:
@@ -206,7 +206,7 @@ private Status checkContentType(Metadata headers) {
       return null;
     }
     contentTypeChecked = true;
-    String contentType = headers.get(HttpUtil.CONTENT_TYPE);
+    String contentType = headers.get(HttpUtil.CONTENT_TYPE_KEY);
     if (TEMP_CHECK_CONTENT_TYPE && !HttpUtil.CONTENT_TYPE_GRPC.equalsIgnoreCase(contentType)) {
       // Malformed content-type so report an error
       return Status.INTERNAL.withDescription("invalid content-type " + contentType);
@@ -218,7 +218,7 @@ private Status checkContentType(Metadata headers) {
    * Inspect the raw metadata and figure out what charset is being used.
    */
   private static Charset extractCharset(Metadata headers) {
-    String contentType = headers.get(HttpUtil.CONTENT_TYPE);
+    String contentType = headers.get(HttpUtil.CONTENT_TYPE_KEY);
     if (contentType != null) {
       String[] split = contentType.split("charset=");
       try {

File: core/src/test/java/io/grpc/ChannelImplTest.java
Patch:
@@ -94,7 +94,7 @@ public class ChannelImplTest {
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
-    channel = new ChannelImpl(mockTransportFactory, executor);
+    channel = new ChannelImpl(mockTransportFactory, executor, null);
     when(mockTransportFactory.newClientTransport()).thenReturn(mockTransport);
   }
 

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncClient.java
Patch:
@@ -34,14 +34,13 @@
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.ADDRESS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.CHANNELS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.CLIENT_PAYLOAD;
-import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.CONNECTION_WINDOW;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.DIRECTEXECUTOR;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.DURATION;
+import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.FLOW_CONTROL_WINDOW;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.OUTSTANDING_RPCS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.SAVE_HISTOGRAM;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.SERVER_PAYLOAD;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.STREAMING_RPCS;
-import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.STREAM_WINDOW;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TESTCA;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TLS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TRANSPORT;
@@ -327,7 +326,7 @@ public static void main(String... args) throws Exception {
     ClientConfiguration.Builder configBuilder = ClientConfiguration.newBuilder(
         ADDRESS, CHANNELS, OUTSTANDING_RPCS, CLIENT_PAYLOAD, SERVER_PAYLOAD,
         TLS, TESTCA, TRANSPORT, DURATION, WARMUP_DURATION, DIRECTEXECUTOR,
-        SAVE_HISTOGRAM, STREAMING_RPCS, CONNECTION_WINDOW, STREAM_WINDOW);
+        SAVE_HISTOGRAM, STREAMING_RPCS, FLOW_CONTROL_WINDOW);
     ClientConfiguration config;
     try {
       config = configBuilder.build(args);

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncServer.java
Patch:
@@ -168,8 +168,7 @@ static ServerImpl newServer(ServerConfiguration config) throws IOException {
         .addService(TestServiceGrpc.bindService(new TestServiceImpl()))
         .sslContext(sslContext)
         .executor(config.directExecutor ? MoreExecutors.newDirectExecutorService() : null)
-        .connectionWindowSize(config.connectionWindow)
-        .streamWindowSize(config.streamWindow)
+        .flowControlWindow(config.flowControlWindow)
         .build();
   }
 

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java
Patch:
@@ -34,11 +34,10 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.ADDRESS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.CLIENT_PAYLOAD;
-import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.CONNECTION_WINDOW;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.DURATION;
+import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.FLOW_CONTROL_WINDOW;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.SAVE_HISTOGRAM;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.SERVER_PAYLOAD;
-import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.STREAM_WINDOW;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TARGET_QPS;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TESTCA;
 import static io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.TLS;
@@ -86,7 +85,7 @@ public OpenLoopClient(ClientConfiguration config) {
   public static void main(String... args) throws Exception {
     ClientConfiguration.Builder configBuilder = ClientConfiguration.newBuilder(
         ADDRESS, TARGET_QPS, CLIENT_PAYLOAD, SERVER_PAYLOAD, TLS,
-        TESTCA, TRANSPORT, DURATION, SAVE_HISTOGRAM, CONNECTION_WINDOW, STREAM_WINDOW);
+        TESTCA, TRANSPORT, DURATION, SAVE_HISTOGRAM, FLOW_CONTROL_WINDOW);
     ClientConfiguration config;
     try {
       config = configBuilder.build(args);

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/Utils.java
Patch:
@@ -176,8 +176,7 @@ static Channel newClientChannel(ClientConfiguration config) throws IOException {
         .negotiationType(negotiationType)
         .executor(config.directExecutor ? MoreExecutors.newDirectExecutorService() : null)
         .sslContext(context)
-        .connectionWindowSize(config.connectionWindow)
-        .streamWindowSize(config.streamWindow)
+        .flowControlWindow(config.flowControlWindow)
         .build();
   }
 

File: netty/src/test/java/io/grpc/transport/netty/NettyClientTransportTest.java
Patch:
@@ -182,7 +182,7 @@ private ProtocolNegotiator newNegotiator() throws IOException {
 
   private NettyClientTransport newTransport(ProtocolNegotiator negotiator) {
     NettyClientTransport transport = new NettyClientTransport(address, NioSocketChannel.class,
-            group, negotiator, DEFAULT_WINDOW_SIZE, DEFAULT_WINDOW_SIZE);
+            group, negotiator, DEFAULT_WINDOW_SIZE);
     transports.add(transport);
     return transport;
   }
@@ -198,7 +198,7 @@ private void startServer(int maxStreamsPerConnection) throws IOException {
         .ciphers(TestUtils.preferredTestCiphers(), SupportedCipherSuiteFilter.INSTANCE).build();
     server = new NettyServer(address, NioServerSocketChannel.class,
             group, group, serverContext, maxStreamsPerConnection,
-            DEFAULT_WINDOW_SIZE, DEFAULT_WINDOW_SIZE);
+            DEFAULT_WINDOW_SIZE);
     server.start(serverListener);
   }
 

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -36,8 +36,8 @@
 
 import com.squareup.okhttp.CipherSuite;
 import com.squareup.okhttp.ConnectionSpec;
-
 import com.squareup.okhttp.TlsVersion;
+
 import io.grpc.AbstractChannelBuilder;
 import io.grpc.SharedResourceHolder;
 import io.grpc.SharedResourceHolder.Resource;

File: core/src/main/java/io/grpc/Channel.java
Patch:
@@ -53,7 +53,7 @@ public abstract class Channel {
    *
    * @param methodDescriptor describes the name and parameter types of the operation to call.
    * @return a {@link ClientCall} bound to the specified method.
-   * @deprecated use {@link newCall(MethodDescriptor, CallOptions)}
+   * @deprecated use {@link #newCall(MethodDescriptor, CallOptions)}
    *
    */
   @Deprecated

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -55,7 +55,7 @@ public void testConfigureTimeout() {
     // Create a default stub
     TestServiceGrpc.TestServiceBlockingStub stub =
         TestServiceGrpc.newBlockingStub(new FakeChannel());
-    assertEquals(TimeUnit.DAYS.toMicros(10 * 365),
+    assertEquals(TimeUnit.DAYS.toMicros(364),
         stub.getServiceDescriptor().fullDuplexCall.getTimeout());
     // Reconfigure it
     stub = stub.configureNewStub()
@@ -65,7 +65,7 @@ public void testConfigureTimeout() {
     assertEquals(TimeUnit.SECONDS.toMicros(2),
         stub.getServiceDescriptor().fullDuplexCall.getTimeout());
     // Default config unchanged
-    assertEquals(TimeUnit.DAYS.toMicros(10 * 365),
+    assertEquals(TimeUnit.DAYS.toMicros(364),
         TestServiceGrpc.CONFIG.fullDuplexCall.getTimeout());
   }
 

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -69,7 +69,7 @@ public static <RequestT, ResponseT> MethodDescriptor<RequestT, ResponseT> create
     // TODO(zhangkun83): if timeout is not defined in proto file, use a default timeout here.
     // If timeout is defined in proto file, Method should carry the timeout.
     return MethodDescriptor.create(method.getType(), fullServiceName + "/" + method.getName(),
-        10 * 365, TimeUnit.DAYS, method.getRequestMarshaller(), method.getResponseMarshaller());
+        364, TimeUnit.DAYS, method.getRequestMarshaller(), method.getResponseMarshaller());
   }
 
   /**

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -370,8 +370,8 @@ public boolean hasNext() {
         Thread.interrupted();
         throw new RuntimeException(ie);
       }
-      if (last instanceof Throwable) {
-        throw Throwables.propagate((Throwable) last);
+      if (last instanceof Status) {
+        throw ((Status) last).asRuntimeException();
       }
       return last != this;
     }
@@ -415,7 +415,7 @@ public void onClose(Status status, Metadata.Trailers trailers) {
         if (status.isOk()) {
           buffer.add(BlockingResponseStream.this);
         } else {
-          buffer.add(status.asRuntimeException());
+          buffer.add(status);
         }
         done = true;
       }

File: interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java
Patch:
@@ -55,7 +55,7 @@ public void testConfigureTimeout() {
     // Create a default stub
     TestServiceGrpc.TestServiceBlockingStub stub =
         TestServiceGrpc.newBlockingStub(new FakeChannel());
-    assertEquals(TimeUnit.SECONDS.toMicros(1),
+    assertEquals(TimeUnit.DAYS.toMicros(10 * 365),
         stub.getServiceDescriptor().fullDuplexCall.getTimeout());
     // Reconfigure it
     stub = stub.configureNewStub()
@@ -65,7 +65,7 @@ public void testConfigureTimeout() {
     assertEquals(TimeUnit.SECONDS.toMicros(2),
         stub.getServiceDescriptor().fullDuplexCall.getTimeout());
     // Default config unchanged
-    assertEquals(TimeUnit.SECONDS.toMicros(1),
+    assertEquals(TimeUnit.DAYS.toMicros(10 * 365),
         TestServiceGrpc.CONFIG.fullDuplexCall.getTimeout());
   }
 

File: stub/src/main/java/io/grpc/stub/ClientCalls.java
Patch:
@@ -69,7 +69,7 @@ public static <RequestT, ResponseT> MethodDescriptor<RequestT, ResponseT> create
     // TODO(zhangkun83): if timeout is not defined in proto file, use a default timeout here.
     // If timeout is defined in proto file, Method should carry the timeout.
     return MethodDescriptor.create(method.getType(), fullServiceName + "/" + method.getName(),
-        1, TimeUnit.SECONDS, method.getRequestMarshaller(), method.getResponseMarshaller());
+        10 * 365, TimeUnit.DAYS, method.getRequestMarshaller(), method.getResponseMarshaller());
   }
 
   /**

File: android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/InteropTester.java
Patch:
@@ -327,7 +327,7 @@ private SSLSocketFactory getSslSocketFactory(@Nullable InputStream testCa) throw
     if (testCa == null) {
       return (SSLSocketFactory) SSLSocketFactory.getDefault();
     }
-    KeyStore ks = KeyStore.getInstance("AndroidKeyStore");
+    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
     ks.load(null);
     CertificateFactory cf = CertificateFactory.getInstance("X.509");
     X509Certificate cert = (X509Certificate) cf.generateCertificate(testCa);

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -337,7 +337,8 @@ public void start(Listener listener) {
       } catch (IOException e) {
         // TODO(jhump): should we instead notify the listener of shutdown+terminated?
         // (and probably do all of this work asynchronously instead of in calling thread)
-        throw new RuntimeException(e);
+        throw Status.UNAVAILABLE.withDescription("Failed connecting").withCause(e)
+            .asRuntimeException();
       }
       Variant variant = new Http2();
       frameReader = variant.newReader(source, true);

File: netty/src/test/java/io/grpc/transport/netty/NettyClientStreamTest.java
Patch:
@@ -238,7 +238,7 @@ public void invalidInboundHeadersCancelStream() throws Exception {
     verify(writeQueue).enqueue(any(CancelStreamCommand.class), eq(true));
     ArgumentCaptor<Status> captor = ArgumentCaptor.forClass(Status.class);
     verify(listener).closed(captor.capture(), any(Metadata.Trailers.class));
-    assertEquals(Status.INTERNAL.getCode(), captor.getValue().getCode());
+    assertEquals(Status.UNKNOWN.getCode(), captor.getValue().getCode());
     assertTrue(stream.isClosed());
 
   }

File: benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java
Patch:
@@ -48,7 +48,9 @@ public abstract class AbstractBenchmark {
    * Standard payload sizes.
    */
   public enum PayloadSize {
-    SMALL(10), MEDIUM(1024), LARGE(65536), JUMBO(16777216);
+    // Max out at 1MB to avoid creating payloads larger than Netty's buffer pool can handle
+    // by default
+    SMALL(10), MEDIUM(1024), LARGE(65536), JUMBO(1048576);
 
     private final int bytes;
     PayloadSize(int bytes) {

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -39,7 +39,6 @@
 import io.grpc.transport.netty.GrpcSslContexts;
 import io.grpc.transport.netty.NettyServerBuilder;
 import io.grpc.transport.okhttp.OkHttpChannelBuilder;
-import io.grpc.transport.okhttp.OkHttpClientTransport;
 import io.netty.handler.ssl.SupportedCipherSuiteFilter;
 
 import org.junit.AfterClass;
@@ -78,7 +77,7 @@ public static void stopServer() throws Exception {
   @Override
   protected ChannelImpl createChannel() {
     OkHttpChannelBuilder builder = OkHttpChannelBuilder.forAddress("127.0.0.1", serverPort)
-        .setConnectionSpec(new ConnectionSpec.Builder(OkHttpClientTransport.DEFAULT_CONNECTION_SPEC)
+        .connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC)
             .cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0]))
             .tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0]))
             .build())

File: interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java
Patch:
@@ -71,7 +71,7 @@ public static void stopServer() throws Exception {
   @Override
   protected ChannelImpl createChannel() {
     OkHttpChannelBuilder builder = OkHttpChannelBuilder.forAddress("127.0.0.1", serverPort)
-        .overrideHostForAuthority("foo.test.google.fr");
+        .overrideHostForAuthority(TestUtils.TEST_SERVER_HOST);
     try {
       builder.sslSocketFactory(TestUtils.getSslSocketFactoryForCertainCert(
               TestUtils.loadCert("ca.pem")));

File: netty/src/test/java/io/grpc/transport/netty/NettyClientStreamTest.java
Patch:
@@ -44,7 +44,6 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.same;
 import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
@@ -54,6 +53,7 @@
 import io.grpc.Metadata;
 import io.grpc.Status;
 import io.grpc.transport.ClientStreamListener;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelPromise;
@@ -328,7 +328,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         return null;
       }
     }).when(writeQueue).enqueue(any(), any(ChannelPromise.class), anyBoolean());
-    doNothing().when(writeQueue).enqueue(any(), anyBoolean());
+    when(writeQueue.enqueue(any(), anyBoolean())).thenReturn(future);
     NettyClientStream stream = new NettyClientStream(listener, channel, handler);
     assertTrue(stream.canSend());
     assertTrue(stream.canReceive());

File: netty/src/test/java/io/grpc/transport/netty/NettyServerStreamTest.java
Patch:
@@ -40,7 +40,6 @@
 import static org.mockito.Matchers.same;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
@@ -51,6 +50,7 @@
 import io.grpc.Metadata;
 import io.grpc.Status;
 import io.grpc.transport.ServerStreamListener;
+
 import io.netty.buffer.EmptyByteBuf;
 import io.netty.buffer.UnpooledByteBufAllocator;
 import io.netty.channel.ChannelPromise;
@@ -246,7 +246,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         return null;
       }
     }).when(writeQueue).enqueue(any(), any(ChannelPromise.class), anyBoolean());
-    doNothing().when(writeQueue).enqueue(any(), anyBoolean());
+    when(writeQueue.enqueue(any(), anyBoolean())).thenReturn(future);
     NettyServerStream stream = new NettyServerStream(channel, http2Stream, handler);
     stream.setListener(serverListener);
     assertTrue(stream.canReceive());

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -493,7 +493,9 @@ public void run() {
         while (frameReader.nextFrame(this)) {
         }
       } catch (IOException ioe) {
-        onIoException(ioe);
+        // We call onError instead of onIoException here, because OkHttp wraps many protocol errors
+        // as IOException, we should send GoAway for such errors.
+        onError(ErrorCode.PROTOCOL_ERROR, ioe.getMessage());
       } finally {
         try {
           frameReader.close();

File: okhttp/src/test/java/io/grpc/transport/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -162,9 +162,9 @@ public void nextFrameThrowIoException() throws Exception {
     listener2.waitUntilStreamClosed();
     assertEquals(0, streams.size());
     assertEquals(Status.INTERNAL.getCode(), listener1.status.getCode());
-    assertEquals(NETWORK_ISSUE_MESSAGE, listener2.status.getCause().getMessage());
-    assertEquals(Status.INTERNAL.getCode(), listener1.status.getCode());
-    assertEquals(NETWORK_ISSUE_MESSAGE, listener2.status.getCause().getMessage());
+    assertEquals("Protocol error\n" + NETWORK_ISSUE_MESSAGE, listener1.status.getDescription());
+    assertEquals(Status.INTERNAL.getCode(), listener2.status.getCode());
+    assertEquals("Protocol error\n" + NETWORK_ISSUE_MESSAGE, listener2.status.getDescription());
     verify(transportListener).transportShutdown();
     verify(transportListener, timeout(TIME_OUT_MS)).transportTerminated();
   }

File: core/src/main/java/io/grpc/Marshaller.java
Patch:
@@ -45,6 +45,8 @@ public interface Marshaller<T> {
 
   /**
    * Given a message, produce an {@link InputStream} for it so that it can be written to the wire.
+   * Where possible implementations should produce streams that are {@link io.grpc.KnownLength}
+   * to improve transport efficiency.
    *
    * @param value to serialize.
    * @return serialized value as stream of bytes.

File: core/src/main/java/io/grpc/ServerImpl.java
Patch:
@@ -421,7 +421,7 @@ public void sendHeaders(Metadata.Headers headers) {
     public void sendPayload(RespT payload) {
       try {
         InputStream message = methodDef.streamResponse(payload);
-        stream.writeMessage(message, message.available());
+        stream.writeMessage(message);
         stream.flush();
       } catch (Throwable t) {
         close(Status.fromThrowable(t), new Metadata.Trailers());

File: core/src/main/java/io/grpc/transport/AbstractServerStream.java
Patch:
@@ -96,12 +96,12 @@ public void writeHeaders(Metadata.Headers headers) {
   }
 
   @Override
-  public final void writeMessage(InputStream message, int length) {
+  public final void writeMessage(InputStream message) {
     if (!headersSent) {
       writeHeaders(new Metadata.Headers());
       headersSent = true;
     }
-    super.writeMessage(message, length);
+    super.writeMessage(message);
   }
 
   @Override

File: core/src/main/java/io/grpc/transport/AbstractStream.java
Patch:
@@ -171,12 +171,11 @@ public void setOnReadyThreshold(int onReadyThreshold) {
   }
 
   @Override
-  public void writeMessage(InputStream message, int length) {
+  public void writeMessage(InputStream message) {
     Preconditions.checkNotNull(message, "message");
-    Preconditions.checkArgument(length >= 0, "length must be >= 0");
     outboundPhase(Phase.MESSAGE);
     if (!framer.isClosed()) {
-      framer.writePayload(message, length);
+      framer.writePayload(message);
     }
   }
 

File: core/src/main/java/io/grpc/transport/ReadableBuffers.java
Patch:
@@ -35,6 +35,8 @@
 
 import com.google.common.base.Preconditions;
 
+import io.grpc.KnownLength;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -310,7 +312,7 @@ public int arrayOffset() {
   /**
    * An {@link InputStream} that is backed by a {@link ReadableBuffer}.
    */
-  private static class BufferInputStream extends InputStream {
+  private static class BufferInputStream extends InputStream implements KnownLength {
     final ReadableBuffer buffer;
 
     public BufferInputStream(ReadableBuffer buffer) {

File: core/src/test/java/io/grpc/ServerImplTest.java
Patch:
@@ -38,7 +38,6 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.notNull;
 import static org.mockito.Matchers.same;
 import static org.mockito.Mockito.timeout;
@@ -200,7 +199,7 @@ public ServerCall.Listener<String> startCall(String fullMethodName,
 
     call.sendPayload(314);
     ArgumentCaptor<InputStream> inputCaptor = ArgumentCaptor.forClass(InputStream.class);
-    verify(stream).writeMessage(inputCaptor.capture(), eq(3));
+    verify(stream).writeMessage(inputCaptor.capture());
     verify(stream).flush();
     assertEquals(314, INTEGER_MARSHALLER.parse(inputCaptor.getValue()).intValue());
 
@@ -209,7 +208,7 @@ public ServerCall.Listener<String> startCall(String fullMethodName,
     verify(callListener).onHalfClose();
 
     call.sendPayload(50);
-    verify(stream).writeMessage(inputCaptor.capture(), eq(2));
+    verify(stream, times(2)).writeMessage(inputCaptor.capture());
     verify(stream, times(2)).flush();
     assertEquals(50, INTEGER_MARSHALLER.parse(inputCaptor.getValue()).intValue());
 

File: netty/src/test/java/io/grpc/transport/netty/NettyServerHandlerTest.java
Patch:
@@ -362,7 +362,7 @@ public void deliverFrame(WritableBuffer frame, boolean endOfStream, boolean flus
         }
       }
     }, new NettyWritableBufferAllocator(ByteBufAllocator.DEFAULT));
-    framer.writePayload(new ByteArrayInputStream(CONTENT), CONTENT.length);
+    framer.writePayload(new ByteArrayInputStream(CONTENT));
     framer.flush();
     if (endStream) {
       framer.close();

File: netty/src/test/java/io/grpc/transport/netty/NettyServerStreamTest.java
Patch:
@@ -92,7 +92,7 @@ public void setUp() {
   @Test
   public void writeMessageShouldSendResponse() throws Exception {
     byte[] msg = smallMessage();
-    stream.writeMessage(new ByteArrayInputStream(msg), msg.length);
+    stream.writeMessage(new ByteArrayInputStream(msg));
     stream.flush();
     Http2Headers headers = new DefaultHttp2Headers()
         .status(Utils.STATUS_OK)

File: netty/src/test/java/io/grpc/transport/netty/NettyStreamTestBase.java
Patch:
@@ -163,7 +163,7 @@ public void notifiedOnReadyAfterWriteCompletes() throws IOException {
     assertTrue(stream.isReady());
     byte[] msg = largeMessage();
     // The future is set up to automatically complete, indicating that the write is done.
-    stream.writeMessage(new ByteArrayInputStream(msg), msg.length);
+    stream.writeMessage(new ByteArrayInputStream(msg));
     stream.flush();
     assertTrue(stream.isReady());
     verify(listener()).onReady();
@@ -176,7 +176,7 @@ public void shouldBeReadyForDataAfterWritingSmallMessage() throws IOException {
 
     assertTrue(stream.isReady());
     byte[] msg = smallMessage();
-    stream.writeMessage(new ByteArrayInputStream(msg), msg.length);
+    stream.writeMessage(new ByteArrayInputStream(msg));
     stream.flush();
     assertTrue(stream.isReady());
     verify(listener(), never()).onReady();
@@ -189,7 +189,7 @@ public void shouldNotBeReadyForDataAfterWritingLargeMessage() throws IOException
 
     assertTrue(stream.isReady());
     byte[] msg = largeMessage();
-    stream.writeMessage(new ByteArrayInputStream(msg), msg.length);
+    stream.writeMessage(new ByteArrayInputStream(msg));
     stream.flush();
     assertFalse(stream.isReady());
     verify(listener(), never()).onReady();

File: core/src/main/java/io/grpc/SerializingExecutor.java
Patch:
@@ -55,8 +55,10 @@ public final class SerializingExecutor implements Executor {
   private final Executor executor;
 
   /** A list of Runnables to be run in order. */
+  // Initial size set to 4 because it is a nice number and at least the size necessary for handling
+  // a unary response: onHeaders + onPayload + onClose
   @GuardedBy("internalLock")
-  private final Queue<Runnable> waitQueue = new ArrayDeque<Runnable>();
+  private final Queue<Runnable> waitQueue = new ArrayDeque<Runnable>(4);
 
   /**
    * We explicitly keep track of if the TaskRunner is currently scheduled to

File: netty/src/main/java/io/grpc/transport/netty/Utils.java
Patch:
@@ -55,6 +55,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.TimeUnit;
 
 /**
  * Common utility methods.
@@ -198,7 +199,7 @@ public void operationComplete(Future<Object> future) throws Exception {
 
     @Override
     public void close(EventLoopGroup instance) {
-      instance.shutdownGracefully();
+      instance.shutdownGracefully(0, 0, TimeUnit.SECONDS);
     }
 
     @Override

File: netty/src/main/java/io/grpc/transport/netty/BufferingHttp2ConnectionEncoder.java
Patch:
@@ -224,7 +224,7 @@ private void cancelGoAwayStreams(int lastStreamId, long errorCode, ByteBuf debug
    * Determines whether or not we're allowed to create a new stream right now.
    */
   private boolean canCreateStream() {
-    Http2Connection.Endpoint local = connection().local();
+    Http2Connection.Endpoint<?> local = connection().local();
     return (receivedSettings || local.numActiveStreams() < NUM_STREAMS_INITIALLY_ALLOWED)
             && local.canCreateStream();
   }

File: netty/src/main/java/io/grpc/transport/netty/NettyClientHandler.java
Patch:
@@ -38,6 +38,7 @@
 import io.grpc.Metadata;
 import io.grpc.Status;
 import io.grpc.transport.HttpUtil;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
@@ -46,7 +47,6 @@
 import io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder;
 import io.netty.handler.codec.http2.Http2Connection;
 import io.netty.handler.codec.http2.Http2ConnectionAdapter;
-import io.netty.handler.codec.http2.Http2ConnectionEncoder;
 import io.netty.handler.codec.http2.Http2ConnectionHandler;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.codec.http2.Http2Exception;
@@ -75,11 +75,11 @@ class NettyClientHandler extends Http2ConnectionHandler {
   private ChannelHandlerContext ctx;
   private int nextStreamId;
 
-  public NettyClientHandler(Http2ConnectionEncoder encoder, Http2Connection connection,
+  public NettyClientHandler(BufferingHttp2ConnectionEncoder encoder, Http2Connection connection,
                             Http2FrameReader frameReader,
                             int connectionWindowSize, int streamWindowSize) {
     super(new DefaultHttp2ConnectionDecoder(connection, encoder, frameReader,
-        new LazyFrameListener()), new BufferingHttp2ConnectionEncoder(encoder));
+        new LazyFrameListener()), encoder);
     Preconditions.checkArgument(connectionWindowSize > 0, "connectionWindowSize must be positive");
     this.connectionWindowSize = connectionWindowSize;
     try {

File: netty/src/main/java/io/grpc/transport/netty/NettyServerTransport.java
Patch:
@@ -129,7 +129,7 @@ private void notifyTerminated(Throwable t) {
    */
   private NettyServerHandler createHandler(ServerTransportListener transportListener) {
     Http2Connection connection = new DefaultHttp2Connection(true);
-    Http2FrameLogger frameLogger = new Http2FrameLogger(LogLevel.DEBUG);
+    Http2FrameLogger frameLogger = new Http2FrameLogger(LogLevel.DEBUG, getClass());
     Http2FrameReader frameReader =
         new Http2InboundFrameLogger(new DefaultHttp2FrameReader(), frameLogger);
     Http2FrameWriter frameWriter =

File: netty/src/test/java/io/grpc/transport/netty/NettyClientHandlerTest.java
Patch:
@@ -401,8 +401,8 @@ private static NettyClientHandler newHandler(int connectionWindowSize, int strea
     Http2Connection connection = new DefaultHttp2Connection(false);
     Http2FrameReader frameReader = new DefaultHttp2FrameReader();
     Http2FrameWriter frameWriter = new DefaultHttp2FrameWriter();
-    DefaultHttp2ConnectionEncoder encoder =
-        new DefaultHttp2ConnectionEncoder(connection, frameWriter);
+    BufferingHttp2ConnectionEncoder encoder = new BufferingHttp2ConnectionEncoder(
+            new DefaultHttp2ConnectionEncoder(connection, frameWriter));
     return new NettyClientHandler(encoder, connection, frameReader, connectionWindowSize,
         streamWindowSize);
   }

File: integration-testing/src/main/java/io/grpc/testing/integration/AbstractTransportTest.java
Patch:
@@ -572,7 +572,6 @@ protected int unaryPayloadLength() {
     return 10485760;
   }
 
-  @org.junit.Ignore
   @Test(timeout = 10000)
   public void gracefulShutdown() throws Exception {
     final List<StreamingOutputCallRequest> requests = Arrays.asList(

File: netty/src/main/java/io/grpc/transport/netty/NettyClientHandler.java
Patch:
@@ -294,7 +294,7 @@ private void sendGrpcFrame(ChannelHandlerContext ctx, SendGrpcFrameCommand cmd,
    */
   private void goingAway() {
     final Status goAwayStatus = goAwayStatus();
-    final int lastKnownStream = connection().local().lastKnownStream();
+    final int lastKnownStream = connection().local().lastStreamKnownByPeer();
     try {
       connection().forEachActiveStream(new Http2StreamVisitor() {
         @Override

File: core/src/main/java/io/grpc/transport/Http2ClientStream.java
Patch:
@@ -99,7 +99,7 @@ protected void transportHeadersReceived(Metadata.Headers headers) {
     if (transportError != null) {
       // Note we don't immediately report the transport error, instead we wait for more data on the
       // stream so we can accumulate more detail into the error before reporting it.
-      transportError = transportError.withDescription("\n" + headers.toString());
+      transportError = transportError.augmentDescription("\n" + headers.toString());
       errorCharset = extractCharset(headers);
     } else {
       stripTransportDetails(headers);

File: okhttp/src/test/java/io/grpc/transport/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -627,6 +627,8 @@ public void run() {
         newStreamReturn2.countDown();
       }
     }).start();
+    // Wait until stream2 is pending, to make sure stream2 is queued in front of stream3.
+    waitForStreamPending(1);
     new Thread(new Runnable() {
       @Override
       public void run() {

File: okhttp/src/test/java/io/grpc/transport/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -403,8 +403,8 @@ public void outboundFlowControlWithInitialWindowSizeChange() throws Exception {
     verify(frameWriter).data(eq(false), eq(3), any(Buffer.class), eq(10));
     frameHandler.windowUpdate(0, 10);
 
-    // Decrease initial window size to HEADER_LENGTH, since we've already sent out HEADER_LENGTH + 20 bytes
-    // data, the window size should be -20 now.
+    // Decrease initial window size to HEADER_LENGTH, since we've already sent
+    // out HEADER_LENGTH + 20 bytes data, the window size should be -20 now.
     setInitialWindowSize(HEADER_LENGTH);
     // Get 20 tokens back, still can't send any data.
     frameHandler.windowUpdate(3, 20);

File: core/src/main/java/io/grpc/transport/MessageFramer.java
Patch:
@@ -219,14 +219,14 @@ public boolean isClosed() {
    */
   public void close() {
     if (!isClosed()) {
+      closed = true;
       // With the current code we don't expect readableBytes > 0 to be possible here, added
       // defensively to prevent buffer leak issues if the framer code changes later.
       if (buffer != null && buffer.readableBytes() == 0) {
         buffer.release();
         buffer = null;
       }
       commitToSink(true, true);
-      closed = true;
     }
   }
 

File: core/src/main/java/io/grpc/transport/AbstractClientStream.java
Patch:
@@ -184,13 +184,15 @@ protected void remoteEndClosed() {
 
   @Override
   protected final void internalSendFrame(WritableBuffer frame, boolean endOfStream, boolean flush) {
+    Preconditions.checkArgument(frame != null || endOfStream, "null frame before EOS");
     sendFrame(frame, endOfStream, flush);
   }
 
   /**
    * Sends an outbound frame to the remote end point.
    *
-   * @param frame a buffer containing the chunk of data to be sent.
+   * @param frame a buffer containing the chunk of data to be sent or {@code null} if the framer is
+   *              closing and has no data to send.
    * @param endOfStream if {@code true} indicates that no more data will be sent on the stream by
    *        this endpoint.
    * @param flush {@code true} if more data may not be arriving soon

File: core/src/main/java/io/grpc/transport/AbstractServerStream.java
Patch:
@@ -142,7 +142,7 @@ protected final void deframeFailed(Throwable cause) {
 
   @Override
   protected final void internalSendFrame(WritableBuffer frame, boolean endOfStream, boolean flush) {
-    if (frame.readableBytes() > 0) {
+    if (frame != null) {
       sendFrame(frame, false, endOfStream ? false : flush);
     }
     if (endOfStream) {

File: core/src/main/java/io/grpc/transport/AbstractStream.java
Patch:
@@ -93,7 +93,7 @@ public void deliverFrame(WritableBuffer frame, boolean endOfStream, boolean flus
     };
 
     framer = new MessageFramer(outboundFrameHandler, bufferAllocator);
-    this.deframer = new MessageDeframer(inboundMessageHandler);
+    deframer = new MessageDeframer(inboundMessageHandler);
   }
 
   /**

File: netty/src/main/java/io/grpc/transport/netty/NettyWritableBufferAllocator.java
Patch:
@@ -31,6 +31,7 @@
 
 package io.grpc.transport.netty;
 
+import io.grpc.transport.WritableBuffer;
 import io.grpc.transport.WritableBufferAllocator;
 import io.netty.buffer.ByteBufAllocator;
 
@@ -60,7 +61,7 @@ class NettyWritableBufferAllocator implements WritableBufferAllocator {
   }
 
   @Override
-  public NettyWritableBuffer allocate(int capacityHint) {
+  public WritableBuffer allocate(int capacityHint) {
     capacityHint = Math.min(MAX_BUFFER, Math.max(MIN_BUFFER, capacityHint));
     return new NettyWritableBuffer(allocator.buffer(capacityHint, capacityHint));
   }

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpWritableBufferAllocator.java
Patch:
@@ -31,6 +31,7 @@
 
 package io.grpc.transport.okhttp;
 
+import io.grpc.transport.WritableBuffer;
 import io.grpc.transport.WritableBufferAllocator;
 import okio.Buffer;
 
@@ -58,7 +59,7 @@ class OkHttpWritableBufferAllocator implements WritableBufferAllocator {
    * mechanism for chunking a large GRPC message over many DATA frames.
    */
   @Override
-  public OkHttpWritableBuffer allocate(int capacityHint) {
+  public WritableBuffer allocate(int capacityHint) {
     capacityHint = Math.min(MAX_BUFFER, Math.max(MIN_BUFFER, capacityHint));
     return new OkHttpWritableBuffer(new Buffer(), capacityHint);
   }

File: netty/src/main/java/io/grpc/transport/netty/NettyClientHandler.java
Patch:
@@ -76,8 +76,7 @@ public NettyClientHandler(Http2ConnectionEncoder encoder, Http2Connection connec
     super(new DefaultHttp2ConnectionDecoder(connection, encoder, frameReader,
         new LazyFrameListener()), new BufferingHttp2ConnectionEncoder(encoder));
     Preconditions.checkArgument(connectionWindowSize > 0, "connectionWindowSize must be positive");
-    this.connectionWindowSize =
-        connectionWindowSize == streamWindowSize ? -1 : connectionWindowSize;
+    this.connectionWindowSize = connectionWindowSize;
     try {
       decoder().flowController().initialWindowSize(streamWindowSize);
     } catch (Http2Exception e) {

File: core/src/main/java/io/grpc/transport/AbstractStream.java
Patch:
@@ -92,7 +92,7 @@ public void deliverFrame(WritableBuffer frame, boolean endOfStream, boolean flus
       }
     };
 
-    framer = new MessageFramer(outboundFrameHandler, bufferAllocator, 4096);
+    framer = new MessageFramer(outboundFrameHandler, bufferAllocator);
     this.deframer = new MessageDeframer(inboundMessageHandler);
   }
 

File: netty/src/test/java/io/grpc/transport/netty/NettyClientHandlerTest.java
Patch:
@@ -357,6 +357,7 @@ public void connectionWindowShouldBeOverridden() throws Exception {
     int connectionWindow = 1048576; // 1MiB
     handler = newHandler(connectionWindow, DEFAULT_WINDOW_SIZE);
     handler.handlerAdded(ctx);
+    Http2Connection connection = handler.connection();
     assertEquals(connectionWindow, handler.connection().connectionStream().localFlowState()
         .windowSize());
   }

File: netty/src/test/java/io/grpc/transport/netty/NettyServerHandlerTest.java
Patch:
@@ -318,7 +318,7 @@ public void deliverFrame(WritableBuffer frame, boolean endOfStream, boolean flus
         ByteBuf bytebuf = ((NettyWritableBuffer)frame).bytebuf();
         compressionFrame.writeBytes(bytebuf);
       }
-    }, new NettyWritableBufferAllocator(ByteBufAllocator.DEFAULT), 1000);
+    }, new NettyWritableBufferAllocator(ByteBufAllocator.DEFAULT));
     framer.writePayload(new ByteArrayInputStream(CONTENT), CONTENT.length);
     framer.flush();
     if (endStream) {

File: okhttp/src/main/java/io/grpc/transport/okhttp/OutboundFlowController.java
Patch:
@@ -33,7 +33,6 @@
 
 import static io.grpc.transport.okhttp.Utils.CONNECTION_STREAM_ID;
 import static io.grpc.transport.okhttp.Utils.DEFAULT_WINDOW_SIZE;
-import static io.grpc.transport.okhttp.Utils.MAX_FRAME_SIZE;
 import static java.lang.Math.ceil;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
@@ -383,7 +382,7 @@ void write() {
         // the writer once to send the empty frame.
         do {
           int bytesToWrite = size();
-          int frameBytes = min(bytesToWrite, MAX_FRAME_SIZE);
+          int frameBytes = min(bytesToWrite, frameWriter.maxDataLength());
           if (frameBytes == bytesToWrite) {
             // All the bytes fit into a single HTTP/2 frame, just send it all.
             connectionState.incrementStreamWindow(-bytesToWrite);

File: okhttp/src/main/java/io/grpc/transport/okhttp/Utils.java
Patch:
@@ -44,7 +44,6 @@
 class Utils {
   static final int DEFAULT_WINDOW_SIZE = 65535;
   static final int CONNECTION_STREAM_ID = 0;
-  static final int MAX_FRAME_SIZE = 16384;
 
   public static Metadata.Headers convertHeaders(List<Header> http2Headers) {
     return new Metadata.Headers(convertHeadersToArray(http2Headers));

File: netty/src/test/java/io/grpc/transport/netty/NettyClientHandlerTest.java
Patch:
@@ -357,8 +357,8 @@ public void connectionWindowShouldBeOverridden() throws Exception {
     int connectionWindow = 1048576; // 1MiB
     handler = newHandler(connectionWindow, DEFAULT_WINDOW_SIZE);
     handler.handlerAdded(ctx);
-    assertEquals(connectionWindow,
-        handler.decoder().flowController().windowSize(handler.connection().connectionStream()));
+    assertEquals(connectionWindow, handler.connection().connectionStream().localFlowState()
+        .windowSize());
   }
 
   @Test

File: netty/src/main/java/io/grpc/transport/netty/NettyServer.java
Patch:
@@ -121,7 +121,7 @@ public void initChannel(Channel ch) throws Exception {
 
   @Override
   public void shutdown() {
-    if (channel == null || channel.isOpen()) {
+    if (channel == null || !channel.isOpen()) {
       return;
     }
     channel.close().addListener(new ChannelFutureListener() {

File: core/src/main/java/io/grpc/AbstractChannelBuilder.java
Patch:
@@ -127,7 +127,7 @@ protected static class ChannelEssentials {
      * Constructor.
      *
      * @param transportFactory the created channel uses this factory to create transports
-     * @param terminationRunnable will be called at the channel's life-cycle events
+     * @param terminationRunnable will be called at the channel termination
      */
     public ChannelEssentials(ClientTransportFactory transportFactory,
         @Nullable Runnable terminationRunnable) {

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java
Patch:
@@ -80,7 +80,7 @@ public RouteGuideServer(int port, URL featureFile) {
   }
 
   /** Start serving requests. */
-  public void start() {
+  public void start() throws IOException {
     grpcServer = NettyServerBuilder.forPort(port)
         .addService(RouteGuideGrpc.bindService(new RouteGuideService(features)))
         .build().start();

File: examples/src/main/java/io/grpc/examples/header/HeaderServerInterceptor.java
Patch:
@@ -31,11 +31,11 @@
 
 package io.grpc.examples.header;
 
+import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;
 import io.grpc.Metadata;
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
-import io.grpc.ServerInterceptors;
 import io.grpc.Status;
 
 import java.util.logging.Logger;
@@ -58,7 +58,7 @@ public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(
       final Metadata.Headers requestHeaders,
       ServerCallHandler<ReqT, RespT> next) {
     logger.info("header received from client:" + requestHeaders.toString());
-    return next.startCall(method, new ServerInterceptors.ForwardingServerCall<RespT>(call) {
+    return next.startCall(method, new SimpleForwardingServerCall<RespT>(call) {
       boolean sentHeaders = false;
 
       @Override

File: testing/src/main/java/io/grpc/testing/TestUtils.java
Patch:
@@ -31,11 +31,11 @@
 
 package io.grpc.testing;
 
+import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;
 import io.grpc.Metadata;
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
-import io.grpc.ServerInterceptors;
 import io.grpc.Status;
 
 import java.util.Arrays;
@@ -60,7 +60,7 @@ public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(String method,
            final Metadata.Headers requestHeaders,
            ServerCallHandler<ReqT, RespT> next) {
         ServerCall.Listener<ReqT> listener = next.startCall(method,
-            new ServerInterceptors.ForwardingServerCall<RespT>(call) {
+            new SimpleForwardingServerCall<RespT>(call) {
               boolean sentHeaders;
 
               @Override

File: netty/src/main/java/io/grpc/transport/netty/Http2Negotiator.java
Patch:
@@ -68,10 +68,12 @@
  * endpoint.
  */
 public class Http2Negotiator {
+  // TODO(madongfly): Remove "h2-15" and "h2-16" at a right time.
   private static final List<String> SUPPORTED_PROTOCOLS = Collections.unmodifiableList(
       Arrays.asList(
           Http2OrHttpChooser.SelectedProtocol.HTTP_2.protocolName(),
-          "h2-15"));
+          "h2-15",
+          "h2-16"));
 
   // Prefer ALPN to NPN so try it first.
   private static final String[] JETTY_TLS_NEGOTIATION_IMPL =

File: netty/src/test/java/io/grpc/transport/netty/BufferingHttp2ConnectionEncoderTest.java
Patch:
@@ -42,9 +42,9 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.mockito.internal.verification.VerificationModeFactory.times;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: netty/src/test/java/io/grpc/transport/netty/BufferingHttp2ConnectionEncoderTest.java
Patch:
@@ -36,7 +36,6 @@
 import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT;
 import static io.netty.handler.codec.http2.Http2Stream.State.HALF_CLOSED_LOCAL;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.internal.verification.VerificationModeFactory.times;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyLong;
@@ -45,6 +44,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.mockito.internal.verification.VerificationModeFactory.times;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: integration-testing/src/main/java/io/grpc/testing/integration/Util.java
Patch:
@@ -97,7 +97,7 @@ public static void assertEquals(MessageLite expected, MessageLite actual) {
       Assert.assertEquals(expected, actual);
     } else {
       if (!expected.equals(actual)) {
-        // This assertEquals should always fail.
+        // This assertEquals should always complete.
         Assert.assertEquals(expected.toString(), actual.toString());
         // But if it doesn't, then this should.
         Assert.assertEquals(expected, actual);

File: netty/src/test/java/io/grpc/transport/netty/NettyClientStreamTest.java
Patch:
@@ -196,7 +196,8 @@ public void invalidInboundHeadersCancelStream() throws Exception {
     stream().transportHeadersReceived(headers, false);
     verify(listener, never()).closed(any(Status.class), any(Metadata.Trailers.class));
 
-    // We are now waiting for 100 bytes of error context on the stream, cancel has not yet been sent
+    // We are now waiting for 100 bytes of error context on the stream, cancel has not yet been
+    // sent
     verify(channel, never()).writeAndFlush(any(CancelStreamCommand.class));
     stream().transportDataReceived(Unpooled.buffer(100).writeZero(100), false);
     verify(channel, never()).writeAndFlush(any(CancelStreamCommand.class));

File: netty/src/test/java/io/grpc/transport/netty/NettyHandlerTestBase.java
Patch:
@@ -145,6 +145,7 @@ protected final ByteBuf captureWrite(ChannelHandlerContext ctx) {
   protected final void mockContext() {
     Mockito.reset(ctx);
     Mockito.reset(promise);
+
     when(ctx.alloc()).thenReturn(UnpooledByteBufAllocator.DEFAULT);
     when(ctx.channel()).thenReturn(channel);
     when(ctx.write(any())).thenReturn(future);

File: netty/src/main/java/io/grpc/transport/netty/Http2Negotiator.java
Patch:
@@ -206,7 +206,7 @@ public static Negotiation plaintext(final ChannelHandler... handlers) {
     final ChannelInitializer<Channel> initializer = new ChannelInitializer<Channel>() {
       @Override
       public void initChannel(Channel ch) throws Exception {
-        ch.pipeline().addLast(handler);
+        ch.pipeline().addLast(handlers);
       }
     };
     return new Negotiation() {

File: netty/src/main/java/io/grpc/transport/netty/NettyClientTransport.java
Patch:
@@ -137,11 +137,11 @@ class NettyClientTransport implements ClientTransport {
     handler = newHandler(streamRemovalPolicy);
     switch (negotiationType) {
       case PLAINTEXT:
-        negotiation = Http2Negotiator.plaintext(handler);
+        negotiation = Http2Negotiator.plaintext(streamRemovalPolicy, handler);
         ssl = false;
         break;
       case PLAINTEXT_UPGRADE:
-        negotiation = Http2Negotiator.plaintextUpgrade(handler);
+        negotiation = Http2Negotiator.plaintextUpgrade(streamRemovalPolicy, handler);
         ssl = false;
         break;
       case TLS:

File: benchmarks/src/main/java/io/grpc/benchmarks/qps/QpsClient.java
Patch:
@@ -61,8 +61,8 @@
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
-import java.util.concurrent.TimeoutException;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
 import java.util.logging.Logger;
 
 /**

File: core/src/main/java/io/grpc/AbstractChannelBuilder.java
Patch:
@@ -37,8 +37,8 @@
 import io.grpc.SharedResourceHolder.Resource;
 import io.grpc.transport.ClientTransportFactory;
 
-import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 
 import javax.annotation.Nullable;
 

File: core/src/main/java/io/grpc/ChannelImpl.java
Patch:
@@ -39,8 +39,8 @@
 import io.grpc.transport.ClientTransport;
 import io.grpc.transport.ClientTransportFactory;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.concurrent.ExecutorService;

File: core/src/main/java/io/grpc/DeferredInputStream.java
Patch:
@@ -31,8 +31,8 @@
 
 package io.grpc;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 
 import javax.annotation.Nullable;

File: core/src/main/java/io/grpc/ServerImpl.java
Patch:
@@ -41,8 +41,8 @@
 import io.grpc.transport.ServerStreamListener;
 import io.grpc.transport.ServerTransportListener;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.concurrent.Executor;

File: core/src/main/java/io/grpc/transport/MessageDeframer.java
Patch:
@@ -36,8 +36,8 @@
 import io.grpc.Status;
 
 import java.io.Closeable;
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.zip.GZIPInputStream;
 
 import javax.annotation.concurrent.NotThreadSafe;

File: core/src/main/java/io/grpc/transport/MessageFramer.java
Patch:
@@ -40,8 +40,8 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
 import java.util.zip.GZIPOutputStream;

File: core/src/main/java/io/grpc/transport/ReadableBuffers.java
Patch:
@@ -35,8 +35,8 @@
 
 import com.google.common.base.Preconditions;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;

File: core/src/test/java/io/grpc/ServerImplTest.java
Patch:
@@ -64,13 +64,13 @@
 import org.mockito.MockitoAnnotations;
 
 import java.io.ByteArrayInputStream;
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.concurrent.BrokenBarrierException;
 import java.util.concurrent.CyclicBarrier;
 import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 

File: core/src/test/java/io/grpc/transport/MessageDeframerTest.java
Patch:
@@ -51,8 +51,8 @@
 import org.mockito.ArgumentCaptor;
 
 import java.io.ByteArrayOutputStream;
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.List;
 import java.util.zip.GZIPOutputStream;
 

File: examples/src/main/java/io/grpc/examples/routeguide/RouteGuideUtil.java
Patch:
@@ -31,8 +31,8 @@
 
 package io.grpc.examples.routeguide;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;

File: integration-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java
Patch:
@@ -45,8 +45,8 @@
 import io.grpc.testing.integration.Messages.StreamingOutputCallRequest;
 import io.grpc.testing.integration.Messages.StreamingOutputCallResponse;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.LinkedList;
 import java.util.Queue;
 import java.util.Random;

File: integration-testing/src/main/java/io/grpc/testing/integration/Util.java
Patch:
@@ -41,8 +41,8 @@
 import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileWriter;
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.ServerSocket;
 import java.util.List;
 

File: nano/src/main/java/io/grpc/nano/NanoUtils.java
Patch:
@@ -38,8 +38,8 @@
 import io.grpc.Marshaller;
 import io.grpc.Status;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 
 /**
  * Utility methods for using nano proto with grpc.

File: netty/src/main/java/io/grpc/transport/netty/Utils.java
Patch:
@@ -50,8 +50,8 @@
 
 import java.nio.ByteBuffer;
 import java.util.Map;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 
 /**

File: netty/src/test/java/io/grpc/transport/netty/NettyClientHandlerTest.java
Patch:
@@ -34,8 +34,8 @@
 import static com.google.common.base.Charsets.UTF_8;
 import static io.grpc.transport.netty.Utils.CONTENT_TYPE_GRPC;
 import static io.grpc.transport.netty.Utils.CONTENT_TYPE_HEADER;
-import static io.grpc.transport.netty.Utils.HTTP_METHOD;
 import static io.grpc.transport.netty.Utils.HTTPS;
+import static io.grpc.transport.netty.Utils.HTTP_METHOD;
 import static io.grpc.transport.netty.Utils.STATUS_OK;
 import static io.grpc.transport.netty.Utils.TE_HEADER;
 import static io.grpc.transport.netty.Utils.TE_TRAILERS;

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpChannelBuilder.java
Patch:
@@ -40,8 +40,8 @@
 import io.grpc.transport.ClientTransportFactory;
 
 import java.net.InetSocketAddress;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 
 import javax.net.ssl.SSLSocketFactory;
 

File: okhttp/src/test/java/io/grpc/transport/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -73,17 +73,17 @@
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.IOException;
 import java.net.Socket;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
 /**

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -208,6 +208,7 @@ public void start(Listener listener) {
           // We assume the sslSocketFactory will verify the server hostname.
           socket = sslSocketFactory.createSocket(socket, authorityHost, address.getPort(), true);
         }
+        socket.setTcpNoDelay(true);
         source = Okio.buffer(Okio.source(socket));
         sink = Okio.buffer(Okio.sink(socket));
       } catch (IOException e) {

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -364,7 +364,8 @@ public void run() {
       } finally {
         try {
           frameReader.close();
-        } catch (IOException ignored) {
+        } catch (IOException ex) {
+          log.log(Level.INFO, "Exception closing frame reader", ex);
         }
         listener.transportTerminated();
         // Restore the original thread name.

File: netty/src/main/java/io/grpc/transport/netty/Utils.java
Patch:
@@ -184,9 +184,9 @@ public EventLoopGroup create() {
           Runtime.getRuntime().availableProcessors() * 2 : nEventLoops;
       final ExecutorService executor = Executors.newFixedThreadPool(parallelism, threadFactory);
       NioEventLoopGroup nioEventLoopGroup = new NioEventLoopGroup(parallelism, executor);
-      nioEventLoopGroup.terminationFuture().addListener(new GenericFutureListener<Future<?>>() {
+      nioEventLoopGroup.terminationFuture().addListener(new GenericFutureListener<Future<Object>>() {
         @Override
-        public void operationComplete(Future<?> future) throws Exception {
+        public void operationComplete(Future<Object> future) throws Exception {
           executor.shutdown();
         }
       });

File: core/src/main/java/io/grpc/transport/AbstractReadableBuffer.java
Patch:
@@ -32,9 +32,9 @@
 package io.grpc.transport;
 
 /**
- * Abstract base class for {@link Buffer} implementations.
+ * Abstract base class for {@link ReadableBuffer} implementations.
  */
-public abstract class AbstractBuffer implements Buffer {
+public abstract class AbstractReadableBuffer implements ReadableBuffer {
 
   @Override
   public final int readUnsignedMedium() {

File: core/src/main/java/io/grpc/transport/ReadableBuffer.java
Patch:
@@ -44,7 +44,7 @@
  * done in {@link ByteBuffer}. It is not expected that callers will attempt to modify the backing
  * array.
  */
-public interface Buffer extends Closeable {
+public interface ReadableBuffer extends Closeable {
 
   /**
    * Gets the current number of readable bytes remaining in this buffer.
@@ -131,7 +131,7 @@ public interface Buffer extends Closeable {
    * @param length the number of bytes to contain in returned Buffer.
    * @throws IndexOutOfBoundsException if required bytes are not readable
    */
-  Buffer readBytes(int length);
+  ReadableBuffer readBytes(int length);
 
   /**
    * Indicates whether or not this buffer exposes a backing array.

File: core/src/test/java/io/grpc/transport/AbstractReadableBufferTest.java
Patch:
@@ -43,13 +43,13 @@
 import org.mockito.stubbing.OngoingStubbing;
 
 /**
- * Tests for {@link AbstractBuffer}.
+ * Tests for {@link AbstractReadableBuffer}.
  */
 @RunWith(JUnit4.class)
-public class AbstractBufferTest {
+public class AbstractReadableBufferTest {
 
   @Mock
-  private AbstractBuffer buffer;
+  private AbstractReadableBuffer buffer;
 
   @Before
   public void setup() {

File: netty/src/test/java/io/grpc/transport/netty/NettyTestUtil.java
Patch:
@@ -35,7 +35,6 @@
 
 import com.google.common.io.ByteStreams;
 
-import io.grpc.Status;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 

File: okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -46,7 +46,6 @@
 import io.grpc.MethodDescriptor;
 import io.grpc.Status;
 import io.grpc.Status.Code;
-import io.grpc.transport.ClientStream;
 import io.grpc.transport.ClientStreamListener;
 import io.grpc.transport.ClientTransport;
 

File: okhttp/src/test/java/io/grpc/transport/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -47,8 +47,6 @@
 import static org.mockito.Mockito.when;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.util.concurrent.Service;
-import com.google.common.util.concurrent.Service.State;
 
 import com.squareup.okhttp.internal.spdy.ErrorCode;
 import com.squareup.okhttp.internal.spdy.FrameReader;

File: core/src/main/java/io/grpc/transport/Http2ClientStream.java
Patch:
@@ -125,7 +125,7 @@ protected void transportDataReceived(Buffer frame, boolean endOfStream) {
           Buffers.readAsString(frame, errorCharset));
       frame.close();
       if (transportError.getDescription().length() > 1000 || endOfStream) {
-        inboundTransportError(transportError, false);
+        inboundTransportError(transportError);
         if (!endOfStream) {
           // We have enough error detail so lets cancel.
           sendCancel();
@@ -136,7 +136,7 @@ protected void transportDataReceived(Buffer frame, boolean endOfStream) {
       if (endOfStream) {
         // This is a protocol violation as we expect to receive trailers.
         transportError = Status.INTERNAL.withDescription("Recevied EOS on DATA frame");
-        inboundTransportError(transportError, true);
+        inboundTransportError(transportError);
       }
     }
   }
@@ -155,7 +155,7 @@ protected void transportTrailersReceived(Metadata.Trailers trailers) {
       transportError = checkContentType(trailers);
     }
     if (transportError != null) {
-      inboundTransportError(transportError, false);
+      inboundTransportError(transportError);
     } else {
       Status status = statusFromTrailers(trailers);
       stripTransportDetails(trailers);

File: core/src/test/java/io/grpc/transport/MessageDeframerTest.java
Patch:
@@ -116,6 +116,7 @@ public void payloadSplitBetweenBuffers() {
     verify(listener).messageRead(messages.capture());
     assertEquals(Bytes.asList(new byte[] {3, 14, 1, 5, 9, 2, 6}), bytes(messages));
     verify(listener, atLeastOnce()).bytesRead(anyInt());
+    verify(listener).deliveryStalled();
     verifyNoMoreInteractions(listener);
   }
 
@@ -130,6 +131,7 @@ public void frameHeaderSplitBetweenBuffers() {
     verify(listener).messageRead(messages.capture());
     assertEquals(Bytes.asList(new byte[] {3}), bytes(messages));
     verify(listener, atLeastOnce()).bytesRead(anyInt());
+    verify(listener).deliveryStalled();
     verifyNoMoreInteractions(listener);
   }
 

File: netty/src/main/java/io/grpc/transport/netty/NettyClientHandler.java
Patch:
@@ -194,7 +194,7 @@ private void onGoAwayRead(long errorCode, ByteBuf debugData) {
     if (debugData.isReadable()) {
       // If a debug message was provided, use it.
       String msg = debugData.toString(UTF_8);
-      status = status.withDescription(msg);
+      status = status.augmentDescription(msg);
     }
     goAwayStatus(status);
   }

File: netty/src/main/java/io/grpc/transport/netty/NettyChannelBuilder.java
Patch:
@@ -102,15 +102,15 @@ public NettyChannelBuilder sslContext(SslContext sslContext) {
   @Override
   protected ChannelEssentials buildEssentials() {
     final EventLoopGroup group = (userEventLoopGroup == null)
-        ? SharedResourceHolder.get(Utils.DEFAULT_CHANNEL_EVENT_LOOP_GROUP) : userEventLoopGroup;
+        ? SharedResourceHolder.get(Utils.DEFAULT_WORKER_EVENT_LOOP_GROUP) : userEventLoopGroup;
     ClientTransportFactory transportFactory = new NettyClientTransportFactory(
         serverAddress, negotiationType, group, sslContext);
     Runnable terminationRunnable = null;
     if (userEventLoopGroup == null) {
       terminationRunnable = new Runnable() {
         @Override
         public void run() {
-          SharedResourceHolder.release(Utils.DEFAULT_CHANNEL_EVENT_LOOP_GROUP, group);
+          SharedResourceHolder.release(Utils.DEFAULT_WORKER_EVENT_LOOP_GROUP, group);
         }
       };
     }

File: core/src/main/java/io/grpc/transport/AbstractClientStream.java
Patch:
@@ -125,7 +125,6 @@ protected void inboundHeadersReceived(Metadata.Headers headers) {
    * Processes the contents of a received data frame from the server.
    *
    * @param frame the received data frame. Its ownership is transferred to this method.
-   * @param 
    */
   protected void inboundDataReceived(Buffer frame) {
     Preconditions.checkNotNull(frame, "frame");

File: core/src/main/java/io/grpc/transport/HttpUtil.java
Patch:
@@ -191,7 +191,7 @@ public static Http2Error forCode(long code) {
     /**
      * Looks up the {@link Status} from the given HTTP/2 error code.
      *
-     * @param errorCode the HTTP/2 error code.
+     * @param code the HTTP/2 error code.
      * @return a {@link Status} representing the given error.
      */
     public static Status statusForCode(int code) {

File: netty/src/main/java/io/grpc/transport/netty/Http2Negotiator.java
Patch:
@@ -37,8 +37,8 @@
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandler;
-import io.netty.channel.ChannelHandlerAdapter;
 import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
 import io.netty.channel.ChannelInitializer;
 import io.netty.handler.codec.http.DefaultHttpRequest;
 import io.netty.handler.codec.http.HttpClientCodec;
@@ -229,7 +229,7 @@ public ListenableFuture<Void> completeFuture() {
   /**
    * Report protocol upgrade completion using a promise.
    */
-  private static class UpgradeCompletionHandler extends ChannelHandlerAdapter {
+  private static class UpgradeCompletionHandler extends ChannelInboundHandlerAdapter {
     private final SettableFuture<Void> upgradeFuture = SettableFuture.create();
 
     public ListenableFuture<Void> getUpgradeFuture() {

File: core/src/main/java/io/grpc/ClientInterceptor.java
Patch:
@@ -48,7 +48,7 @@
 public interface ClientInterceptor {
   /**
    * Intercept {@link Call} creation by the {@code next} {@link Channel}.
-   * <p/>
+   * <p>
    * Many variations of interception are possible. Complex implementations may return a wrapper
    * around the result of {@code next.newCall()}, whereas a simpler implementation may just modify
    * the header metadata prior to returning the result of {@code next.newCall()}.

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldServer.java
Patch:
@@ -24,7 +24,7 @@ private void start() throws Exception {
     Runtime.getRuntime().addShutdownHook(new Thread() {
       @Override
       public void run() {
-        // Use stderr here since the logger may has been reset by its JVM shutdown hook.
+        // Use stderr here since the logger may have been reset by its JVM shutdown hook.
         System.err.println("*** shutting down gRPC server since JVM is shutting down");
         HelloWorldServer.this.stop();
         System.err.println("*** server shut down");
@@ -55,4 +55,4 @@ public void sayHello(HelloRequest req, StreamObserver<HelloResponse> responseObs
       responseObserver.onCompleted();
     }
   }
-}
\ No newline at end of file
+}

File: examples/src/main/java/io/grpc/examples/helloworld/HelloWorldServer.java
Patch:
@@ -24,7 +24,7 @@ private void start() throws Exception {
     Runtime.getRuntime().addShutdownHook(new Thread() {
       @Override
       public void run() {
-        // Use stderr here since the logger may has been reset by its JVM shutdown hook.
+        // Use stderr here since the logger may have been reset by its JVM shutdown hook.
         System.err.println("*** shutting down gRPC server since JVM is shutting down");
         HelloWorldServer.this.stop();
         System.err.println("*** server shut down");
@@ -55,4 +55,4 @@ public void sayHello(HelloRequest req, StreamObserver<HelloResponse> responseObs
       responseObserver.onCompleted();
     }
   }
-}
\ No newline at end of file
+}

File: netty/src/main/java/io/grpc/transport/netty/Http2Negotiator.java
Patch:
@@ -111,8 +111,8 @@ public static ChannelHandler serverTls(SSLEngine sslEngine) {
   /**
    * Creates an TLS negotiation for HTTP/2 using ALPN/NPN.
    */
-  public static Negotiation tls(final ChannelHandler handler, final SSLEngine sslEngine) {
-    Preconditions.checkNotNull(handler, "handler");
+  public static Negotiation tls(final SSLEngine sslEngine, final ChannelHandler... handlers) {
+    Preconditions.checkArgument(handlers.length > 0, "No handlers were provided");
     Preconditions.checkNotNull(sslEngine, "sslEngine");
 
     final SettableFuture<Void> completeFuture = SettableFuture.create();
@@ -135,7 +135,7 @@ public void operationComplete(Future<? super Channel> future) throws Exception {
               }
             });
         ch.pipeline().addLast(sslHandler);
-        ch.pipeline().addLast(handler);
+        ch.pipeline().addLast(handlers);
       }
     };
 

File: netty/src/main/java/io/grpc/transport/netty/Http2Negotiator.java
Patch:
@@ -111,8 +111,8 @@ public static ChannelHandler serverTls(SSLEngine sslEngine) {
   /**
    * Creates an TLS negotiation for HTTP/2 using ALPN/NPN.
    */
-  public static Negotiation tls(final ChannelHandler handler, final SSLEngine sslEngine) {
-    Preconditions.checkNotNull(handler, "handler");
+  public static Negotiation tls(final SSLEngine sslEngine, final ChannelHandler... handlers) {
+    Preconditions.checkArgument(handlers.length > 0, "No handlers were provided");
     Preconditions.checkNotNull(sslEngine, "sslEngine");
 
     final SettableFuture<Void> completeFuture = SettableFuture.create();
@@ -135,7 +135,7 @@ public void operationComplete(Future<? super Channel> future) throws Exception {
               }
             });
         ch.pipeline().addLast(sslHandler);
-        ch.pipeline().addLast(handler);
+        ch.pipeline().addLast(handlers);
       }
     };
 

File: netty/src/main/java/io/grpc/transport/netty/NettyServerBuilder.java
Patch:
@@ -99,7 +99,7 @@ private NettyServerBuilder(SocketAddress address) {
    * A simple solution to this problem is to call {@link ServerImpl#awaitTerminated()} to
    * keep the main thread alive until the server has terminated.
    */
-  public NettyServerBuilder userBossEventLoopGroup(EventLoopGroup group) {
+  public NettyServerBuilder bossEventLoopGroup(EventLoopGroup group) {
     this.userBossEventLoopGroup = group;
     return this;
   }

File: examples/src/main/java/io/grpc/examples/StockServer.java
Patch:
@@ -31,9 +31,9 @@
 
 package io.grpc.examples;
 
-import com.google.protos.io.grpc.examples.StockGrpc;
-import com.google.protos.io.grpc.examples.StockOuterClass.StockReply;
-import com.google.protos.io.grpc.examples.StockOuterClass.StockRequest;
+import io.grpc.examples.StockGrpc;
+import io.grpc.examples.StockOuterClass.StockReply;
+import io.grpc.examples.StockOuterClass.StockRequest;
 
 import io.grpc.ServerImpl;
 import io.grpc.stub.StreamObserver;

File: okhttp/src/test/java/io/grpc/transport/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -42,6 +42,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.timeout;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -151,7 +152,7 @@ public void nextFrameThrowIOException() throws Exception {
     assertEquals(Status.INTERNAL.getCode(), listener1.status.getCode());
     assertEquals(NETWORK_ISSUE_MESSAGE, listener2.status.getCause().getMessage());
     verify(listener).transportShutdown();
-    verify(listener).transportTerminated();
+    verify(listener, timeout(TIME_OUT_MS)).transportTerminated();
   }
 
   @Test

File: core/src/main/java/com/google/net/stubby/Server.java
Patch:
@@ -31,13 +31,11 @@
 
 package com.google.net.stubby;
 
-import com.google.common.util.concurrent.Service;
-
 import javax.annotation.concurrent.ThreadSafe;
 
 /**
  * Server for listening for and dispatching incoming calls. Although Server is an interface, it is
  * not expected to be implemented by application code or interceptors.
  */
 @ThreadSafe
-public interface Server extends Service {}
+public interface Server {}

File: integration-testing/src/main/java/com/google/net/stubby/testing/integration/AbstractTransportTest.java
Patch:
@@ -99,11 +99,11 @@ protected static void startStaticServer(AbstractServerBuilder<?> builder) {
         .addService(ServerInterceptors.intercept(
             TestServiceGrpc.bindService(new TestServiceImpl(testServiceExecutor)),
             TestUtils.echoRequestHeadersInterceptor(Util.METADATA_KEY)))
-        .buildAndWaitForRunning();
+        .build().start();
   }
 
   protected static void stopStaticServer() {
-    server.stopAsync();
+    server.shutdownNow();
     testServiceExecutor.shutdown();
   }
 

File: okhttp/src/main/java/com/google/net/stubby/transport/okhttp/OkHttpClientStream.java
Patch:
@@ -63,9 +63,9 @@ static OkHttpClientStream newStream(ClientStreamListener listener,
     return new OkHttpClientStream(listener, frameWriter, transport, outboundFlow);
   }
 
-  @GuardedBy("executorLock")
+  @GuardedBy("lock")
   private int window = OkHttpClientTransport.DEFAULT_INITIAL_WINDOW_SIZE;
-  @GuardedBy("executorLock")
+  @GuardedBy("lock")
   private int processedWindow = OkHttpClientTransport.DEFAULT_INITIAL_WINDOW_SIZE;
   private final AsyncFrameWriter frameWriter;
   private final OutboundFlowController outboundFlow;
@@ -101,7 +101,7 @@ public void transportHeadersReceived(List<Header> headers, boolean endOfStream)
   }
 
   /**
-   * We synchronized on "executorLock" for delivering frames and updating window size, so that
+   * We synchronized on "lock" for delivering frames and updating window size, so that
    * the future listeners (executed by synchronizedExecutor) will not be executed in the same time.
    */
   public void transportDataReceived(okio.Buffer frame, boolean endOfStream) {

File: auth/src/main/java/com/google/net/stubby/auth/OAuth2ChannelInterceptor.java
Patch:
@@ -64,7 +64,7 @@ public OAuth2ChannelInterceptor(Credential credential, Executor executor) {
   @Override
   public <ReqT, RespT> Call<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,
       Channel next) {
-    // TODO(user): If the call fails for Auth reasons, this does not properly propagate info that
+    // TODO(ejona): If the call fails for Auth reasons, this does not properly propagate info that
     // would be in WWW-Authenticate, because it does not yet have access to the header.
     return new ForwardingCall<ReqT, RespT>(next.newCall(method)) {
       @Override

File: core/src/main/java/com/google/net/stubby/Call.java
Patch:
@@ -94,7 +94,7 @@ public abstract static class Listener<T> {
    * @param headers which can contain extra information like authentication.
    * @throws IllegalStateException if call is already started
    */
-  // TODO(user): Might be better to put into Channel#newCall, might reduce decoration burden
+  // TODO(lryan): Might be better to put into Channel#newCall, might reduce decoration burden
   public abstract void start(Listener<ResponseT> responseListener, Metadata.Headers headers);
 
   /**

File: core/src/main/java/com/google/net/stubby/Channel.java
Patch:
@@ -44,6 +44,6 @@ public interface Channel {
   /**
    * Create a call to the given service method.
    */
-  // TODO(user): perform start() as part of new Call creation?
+  // TODO(ejona): perform start() as part of new Call creation?
   public <ReqT, RespT> Call<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method);
 }

File: core/src/main/java/com/google/net/stubby/ChannelImpl.java
Patch:
@@ -94,7 +94,7 @@ public ChannelImpl(ClientTransportFactory transportFactory, ExecutorService exec
   }
 
   /** Hack to allow executors to auto-shutdown. Not for general use. */
-  // TODO(user): Replace with a real API.
+  // TODO(ejona): Replace with a real API.
   void setTerminationRunnable(Runnable runnable) {
     this.terminationRunnable = runnable;
   }
@@ -125,7 +125,7 @@ public synchronized ChannelImpl shutdown() {
    *
    * <p>NOT YET IMPLEMENTED. This method currently behaves identically to shutdown().
    */
-  // TODO(user): cancel preexisting calls.
+  // TODO(ejona): cancel preexisting calls.
   public synchronized ChannelImpl shutdownNow() {
     shutdown();
     return this;
@@ -263,7 +263,7 @@ public void start(Listener<RespT> observer, Metadata.Headers headers) {
         stream = transport.newStream(method, headers, listener);
       } catch (IllegalStateException ex) {
         // We can race with the transport and end up trying to use a terminated transport.
-        // TODO(user): Improve the API to remove the possibility of the race.
+        // TODO(ejona): Improve the API to remove the possibility of the race.
         stream = new NoopClientStream();
         listener.closed(Status.fromThrowable(ex), new Metadata.Trailers());
         return;

File: core/src/main/java/com/google/net/stubby/Marshaller.java
Patch:
@@ -41,7 +41,7 @@ public interface Marshaller<T> {
   /**
    * Given a message produce an {@link InputStream} for it.
    */
-  // TODO(user): Switch to ByteSource equivalent when ready
+  // TODO(lryan): Switch to ByteSource equivalent when ready
   public InputStream stream(T value);
 
   /**

File: core/src/main/java/com/google/net/stubby/Metadata.java
Patch:
@@ -104,7 +104,7 @@ public Integer parseAsciiString(String serialized) {
   /**
    * Constructor called by the transport layer when it receives binary metadata.
    */
-  // TODO(user): Convert to use ByteString so we can cache transformations
+  // TODO(lryan): Convert to use ByteString so we can cache transformations
   private Metadata(byte[]... binaryValues) {
     store = LinkedListMultimap.create();
     for (int i = 0; i < binaryValues.length; i++) {

File: core/src/main/java/com/google/net/stubby/SerializingExecutor.java
Patch:
@@ -49,7 +49,7 @@
  * @author JJ Furman
  */
 
-// TODO(user): figure out a way to not expose it or move it to transport package.
+// TODO(simonma): figure out a way to not expose it or move it to transport package.
 public final class SerializingExecutor implements Executor {
   private static final Logger log =
       Logger.getLogger(SerializingExecutor.class.getName());

File: core/src/main/java/com/google/net/stubby/ServerCall.java
Patch:
@@ -59,7 +59,7 @@ public abstract class ServerCall<ResponseT> {
    * <p>Implementations are free to block for extended periods of time. Implementations are not
    * required to be thread-safe.
    */
-  // TODO(user): We need to decide what to do in the case of server closing with non-cancellation
+  // TODO(ejona): We need to decide what to do in the case of server closing with non-cancellation
   // before client half closes. It may be that we treat such a case as an error. If we permit such
   // a case then we either get to generate a half close or purposefully omit it.
   public abstract static class Listener<RequestT> {

File: core/src/main/java/com/google/net/stubby/ServerImpl.java
Patch:
@@ -221,7 +221,7 @@ public void terminated(Service.State from) {
 
     @Override
     public void failed(Service.State from, Throwable failure) {
-      // TODO(user): Ideally we would want to force-stop transports before notifying application of
+      // TODO(ejona): Ideally we would want to force-stop transports before notifying application of
       // failure, but that would cause us to have an unrepresentative state since we would be
       // RUNNING but not accepting connections.
       notifyFailed(failure);
@@ -285,7 +285,7 @@ public void run() {
     /** Never returns {@code null}. */
     private <ReqT, RespT> ServerStreamListener startCall(ServerStream stream, String fullMethodName,
         ServerMethodDefinition<ReqT, RespT> methodDef, Metadata.Headers headers) {
-      // TODO(user): should we update fullMethodName to have the canonical path of the method?
+      // TODO(ejona): should we update fullMethodName to have the canonical path of the method?
       final ServerCallImpl<ReqT, RespT> call = new ServerCallImpl<ReqT, RespT>(stream, methodDef);
       ServerCall.Listener<ReqT> listener
           = methodDef.getServerCallHandler().startCall(fullMethodName, call, headers);
@@ -344,7 +344,7 @@ private void setListener(ServerStreamListener listener) {
      * Like {@link ServerCall#close(Status, Metadata.Trailers)}, but thread-safe for internal use.
      */
     private void internalClose(Status status, Metadata.Trailers trailers) {
-      // TODO(user): this is not thread-safe :)
+      // TODO(ejona): this is not thread-safe :)
       stream.close(status, trailers);
     }
 

File: core/src/main/java/com/google/net/stubby/transport/AbstractServerStream.java
Patch:
@@ -128,7 +128,7 @@ public void inboundDataReceived(Buffer frame, boolean endOfStream) {
       frame.close();
       return;
     }
-    // TODO(user): It sounds sub-optimal to deframe in the network thread. That means
+    // TODO(zhangkun): It sounds sub-optimal to deframe in the network thread. That means
     // decompression is serialized.
     deframe(frame, endOfStream);
   }
@@ -213,15 +213,15 @@ protected final void remoteEndClosed() {
    *                     about stream closure and send the status
    */
   public final void abortStream(Status status, boolean notifyClient) {
-    // TODO(user): Investigate whether we can remove the notification to the client
+    // TODO(lryan): Investigate whether we can remove the notification to the client
     // and rely on a transport layer stream reset instead.
     Preconditions.checkArgument(!status.isOk(), "status must not be OK");
     if (!listenerClosed) {
       listenerClosed = true;
       listener.closed(status);
     }
     if (notifyClient) {
-      // TODO(user): Remove
+      // TODO(lryan): Remove
       if (stashedTrailers == null) {
         stashedTrailers = new Metadata.Trailers();
       }

File: core/src/main/java/com/google/net/stubby/transport/AbstractStream.java
Patch:
@@ -147,7 +147,7 @@ public void writeMessage(InputStream message, int length, @Nullable Runnable acc
       framer.writePayload(message, length);
     }
 
-    // TODO(user): add flow control.
+    // TODO(nathanmittler): add flow control.
     if (accepted != null) {
       accepted.run();
     }

File: core/src/main/java/com/google/net/stubby/transport/ClientTransport.java
Patch:
@@ -47,7 +47,7 @@ public interface ClientTransport extends Service {
   /**
    * Creates a new stream for sending messages to the remote end-point. If the service is already
    * stopped, throws an {@link IllegalStateException}.
-   * TODO(user): Consider also throwing for stopping.
+   * TODO(nathanmittler): Consider also throwing for stopping.
    * <p>
    * This method returns immediately and does not wait for any validation of the request. If
    * creation fails for any reason, {@link ClientStreamListener#closed} will be called to provide

File: core/src/main/java/com/google/net/stubby/transport/MessageFramer.java
Patch:
@@ -194,7 +194,7 @@ public void close() {
    * closed or disposed, additional calls to this method will have no affect.
    */
   public void dispose() {
-    // TODO(user): Returning buffer to a pool would go here
+    // TODO(lryan): Returning buffer to a pool would go here
     bytebuf = null;
   }
 

File: core/src/main/java/com/google/net/stubby/transport/TransportFrameUtil.java
Patch:
@@ -55,7 +55,7 @@ public final class TransportFrameUtil {
   private static final byte[] binaryHeaderSuffixBytes =
       Metadata.BINARY_HEADER_SUFFIX.getBytes(US_ASCII);
 
-  // TODO(user): This needs proper namespacing support, this is currently just a hack
+  // TODO(lryan): This needs proper namespacing support, this is currently just a hack
   /**
    * Converts the path from the HTTP request to the full qualified method name.
    *
@@ -88,7 +88,7 @@ public static byte[][] toHttp2Headers(Metadata headers) {
       } else {
         // Non-binary header.
         // Filter out headers that contain non-spec-compliant ASCII characters.
-        // TODO(user): only do such check in development mode since it's expensive
+        // TODO(zhangkun): only do such check in development mode since it's expensive
         if (isSpecCompliantAscii(value)) {
           result.add(key);
           result.add(value);

File: examples/src/main/java/com/google/net/stubby/examples/MathClient.java
Patch:
@@ -217,7 +217,7 @@ public void onCompleted() {
    * <p> The asynchronous usage is similar to {@link #divMany}.
    */
   public void blockingFib() {
-    // TODO(user): Support "send until cancel". Currently, client application can not
+    // TODO(simonma): Support "send until cancel". Currently, client application can not
     // cancel a server streaming call.
     int limit = rand.nextInt(20) + 10;
     logger.info("*** Blocking Fib, print the first " + limit + " fibonacci numbers.");

File: examples/src/main/java/com/google/net/stubby/examples/MathServer.java
Patch:
@@ -61,7 +61,7 @@ public void start() {
         .addService(CalcGrpc.bindService(new CalcService()))
         .buildAndWaitForRunning();
     logger.info("Server started, listening on " + port);
-    // TODO(user): gRPC server should register JVM shutdown hook to shutdown itself, remove this
+    // TODO(simonma): gRPC server should register JVM shutdown hook to shutdown itself, remove this
     // after we support that.
     Runtime.getRuntime().addShutdownHook(new Thread() {
       @Override
@@ -131,7 +131,7 @@ public void onCompleted() {
     public void fib(FibArgs request, StreamObserver<Num> responseObserver) {
       int limit = (int) request.getLimit();
       if (limit <= 0) {
-        // TODO(user): Support "send until cancel". Currently, client application can not
+        // TODO(simonma): Support "send until cancel". Currently, client application can not
         // cancel a server streaming call.
         return;
       }

File: integration-testing/src/main/java/com/google/net/stubby/testing/integration/TestServiceImpl.java
Patch:
@@ -93,7 +93,7 @@ public void unaryCall(SimpleRequest req,
       boolean compressable = compressableResponse(req.getResponseType());
       ByteString dataBuffer = compressable ? compressableBuffer : uncompressableBuffer;
       // For consistency with the c++ TestServiceImpl, use a random offset for unary calls.
-      // TODO(user): whether or not this is a good approach needs further discussion.
+      // TODO(wonderfly): whether or not this is a good approach needs further discussion.
       int offset = random.nextInt(
           compressable ? compressableBuffer.size() : uncompressableBuffer.size());
       ByteString payload = generatePayload(dataBuffer, offset, req.getResponseSize());

File: netty/src/main/java/com/google/net/stubby/transport/netty/NettyClientHandler.java
Patch:
@@ -178,7 +178,7 @@ private void onDataRead(int streamId, ByteBuf data, boolean endOfStream) throws
    */
   private void onRstStreamRead(int streamId)
       throws Http2Exception {
-    // TODO(user): do something with errorCode?
+    // TODO(nathanmittler): do something with errorCode?
     Http2Stream http2Stream = connection().requireStream(streamId);
     NettyClientStream stream = clientStream(http2Stream);
     stream.transportReportStatus(Status.UNKNOWN, false, new Metadata.Trailers());
@@ -318,7 +318,7 @@ private void createPendingStreams() {
       if (streamId <= 0) {
         // The HTTP/2 connection has exhausted its stream IDs. Permanently fail all stream creation
         // attempts for this transport.
-        // TODO(user): send GO_AWAY?
+        // TODO(nathanmittler): send GO_AWAY?
         failPendingStreams(goAwayStatus);
         return;
       }

File: netty/src/main/java/com/google/net/stubby/transport/netty/NettyClientTransport.java
Patch:
@@ -127,7 +127,7 @@ class NettyClientTransport extends AbstractClientTransport {
             throw new RuntimeException(ex);
           }
         }
-        // TODO(user): specify allocator. The method currently ignores it though.
+        // TODO(ejona): specify allocator. The method currently ignores it though.
         SSLEngine sslEngine
             = sslContext.newEngine(null, inetAddress.getHostString(), inetAddress.getPort());
         SSLParameters sslParams = new SSLParameters();

File: netty/src/main/java/com/google/net/stubby/transport/netty/NettyServer.java
Patch:
@@ -80,7 +80,7 @@ public NettyServer(final ServerListener serverListener, SocketAddress address,
       public void initChannel(Channel ch) throws Exception {
         NettyServerTransport transport = new NettyServerTransport(ch, serverListener, sslContext);
         transport.startAsync();
-        // TODO(user): Should we wait for transport shutdown before shutting down server?
+        // TODO(nathanmittler): Should we wait for transport shutdown before shutting down server?
       }
     };
     this.bossGroup = bossGroup;

File: netty/src/test/java/com/google/net/stubby/transport/netty/NettyClientHandlerTest.java
Patch:
@@ -88,7 +88,7 @@ public class NettyClientHandlerTest extends NettyHandlerTestBase {
 
   private NettyClientHandler handler;
 
-  // TODO(user): mocking concrete classes is not safe. Consider making NettyClientStream an
+  // TODO(zhangkun): mocking concrete classes is not safe. Consider making NettyClientStream an
   // interface.
   @Mock
   private NettyClientStream stream;

File: okhttp/src/main/java/com/google/net/stubby/transport/okhttp/OkHttpClientStream.java
Patch:
@@ -132,7 +132,7 @@ protected void sendFrame(ByteBuffer frame, boolean endOfStream) {
     Preconditions.checkState(id() != 0, "streamId should be set");
     okio.Buffer buffer = new okio.Buffer();
     // Read the data into a buffer.
-    // TODO(user): swap to NIO buffers or zero-copy if/when okhttp/okio supports it
+    // TODO(simonma): swap to NIO buffers or zero-copy if/when okhttp/okio supports it
     buffer.write(frame.array(), frame.arrayOffset(), frame.remaining());
     // Write the data to the remote endpoint.
     // Per http2 SPEC, the max data length should be larger than 64K, while our frame size is

File: okhttp/src/main/java/com/google/net/stubby/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -448,13 +448,13 @@ public void windowUpdate(int streamId, long delta) {
     @Override
     public void priority(int streamId, int streamDependency, int weight, boolean exclusive) {
       // Ignore priority change.
-      // TODO(user): log
+      // TODO(simonma): log
     }
 
     @Override
     public void alternateService(int streamId, String origin, ByteString protocol, String host,
         int port, long maxAge) {
-      // TODO(user): Deal with alternateService propagation
+      // TODO(simonma): Deal with alternateService propagation
     }
   }
 

File: stub/src/main/java/com/google/net/stubby/stub/AbstractStub.java
Patch:
@@ -48,7 +48,7 @@
  * @param <S> the concrete type of this stub.
  * @param <C> the service descriptor type
  */
-// TODO(user): Move into 3rd party when tidy
+// TODO(lryan): Move into 3rd party when tidy
 // TODO(lryan/kevinb): Excessive parameterization can be a pain, try to eliminate once the generated
 // code is more tangible.
 public abstract class AbstractStub<S extends AbstractStub<?, ?>,

File: stub/src/main/java/com/google/net/stubby/stub/StreamObserver.java
Patch:
@@ -37,7 +37,7 @@
  * <p>Implementations are expected to be thread-compatible. Separate StreamObservers do not need to
  * be sychronized together; incoming and outgoing directions are independent.
  */
-// TODO(user): Consider whether we need to interact with flow-control at this layer. E.g.
+// TODO(lryan): Consider whether we need to interact with flow-control at this layer. E.g.
 // public ListenableFuture<Void> onValue(V value). Do we layer it in here or as an additional
 // interface? Interaction with flow control can be done by blocking here.
 public interface StreamObserver<V>  {

File: core/src/main/java/com/google/net/stubby/transport/Http2ClientStream.java
Patch:
@@ -102,7 +102,7 @@ protected void transportHeadersReceived(Metadata.Headers headers) {
   }
 
   protected void transportDataReceived(Buffer frame, boolean endOfStream) {
-    if (inboundPhase() == Phase.HEADERS) {
+    if (transportError == null && inboundPhase() == Phase.HEADERS) {
       // Must receive headers prior to receiving any payload as we use headers to check for
       // protocol correctness.
       transportError = Status.INTERNAL.withDescription("no headers received prior to data");

File: integration-testing/src/main/java/com/google/net/stubby/testing/integration/TestServiceImpl.java
Patch:
@@ -90,7 +90,7 @@ public void emptyCall(EmptyProtos.Empty empty,
   public void unaryCall(SimpleRequest req,
         StreamObserver<SimpleResponse> responseObserver) {
     SimpleResponse.Builder responseBuilder = SimpleResponse.newBuilder();
-    if (req.hasResponseType() && req.hasResponseSize()) {
+    if (req.getResponseSize() != 0) {
       boolean compressable = compressableResponse(req.getResponseType());
       ByteString dataBuffer = compressable ? compressableBuffer : uncompressableBuffer;
       // For consistency with the c++ TestServiceImpl, use a random offset for unary calls.

File: integration-testing/src/main/java/com/google/net/stubby/testing/integration/TestServiceClient.java
Patch:
@@ -221,6 +221,8 @@ private static void runTest(Tester tester, String testCase) throws Exception {
       tester.serverStreaming();
     } else if ("ping_pong".equals(testCase)) {
       tester.pingPong();
+    } else if ("empty_stream".equals(testCase)) {
+      tester.emptyStream();
     } else {
       throw new IllegalArgumentException("Unknown test case: " + testCase);
     }

File: okhttp/src/main/java/com/google/net/stubby/transport/okhttp/OkHttpClientTransport.java
Patch:
@@ -45,7 +45,7 @@
 import com.squareup.okhttp.internal.spdy.FrameReader;
 import com.squareup.okhttp.internal.spdy.Header;
 import com.squareup.okhttp.internal.spdy.HeadersMode;
-import com.squareup.okhttp.internal.spdy.Http20Draft14;
+import com.squareup.okhttp.internal.spdy.Http20Draft15;
 import com.squareup.okhttp.internal.spdy.Settings;
 import com.squareup.okhttp.internal.spdy.Variant;
 
@@ -195,7 +195,7 @@ protected void doStart() {
       } catch (IOException e) {
         throw new RuntimeException(e);
       }
-      Variant variant = new Http20Draft14();
+      Variant variant = new Http20Draft15();
       frameReader = variant.newReader(source, true);
       frameWriter = new AsyncFrameWriter(variant.newWriter(sink, true), this, executor);
       outboundFlow = new OutboundFlowController(this, frameWriter);

File: core/src/main/java/com/google/net/stubby/transport/AbstractStream.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AbstractStream<IdT> implements Stream {
    * and should please, please, please be temporary to ease migration.
    */
   // TODO(user): remove this once v1 support is dropped.
-  public static boolean GRPC_V2_PROTOCOL = false;
+  public static boolean GRPC_V2_PROTOCOL = true;
 
   /**
    * Indicates the phase of the GRPC stream in one direction.

File: integration-testing/src/main/java/com/google/net/stubby/testing/integration/TestServiceClient.java
Patch:
@@ -192,7 +192,7 @@ private static String getTestCase(Map<String, String> argMap) {
   private static int getGrpcVersion(Map<String, String> argMap) {
     String value = argMap.get(GRPC_VERSION_ARG.toLowerCase());
     if (value == null) {
-      return 1;
+      return 2;
     }
     int version = Integer.parseInt(value);
     System.out.println(GRPC_VERSION_ARG + " set to version: " + version);

File: integration-testing/src/main/java/com/google/net/stubby/testing/integration/TestServiceServer.java
Patch:
@@ -167,7 +167,7 @@ private static int getPort(String argName, Map<String, String> argMap) {
   private static int getGrpcVersion(Map<String, String> argMap) {
     String value = argMap.get(GRPC_VERSION_ARG.toLowerCase());
     if (value == null) {
-      return 1;
+      return 2;
     }
     int version = Integer.parseInt(value);
     System.out.println(GRPC_VERSION_ARG + " set to version: " + version);

File: integration-testing/src/test/java/com/google/net/stubby/testing/integration/Http2OkHttpTest.java
Patch:
@@ -32,7 +32,6 @@
 package com.google.net.stubby.testing.integration;
 
 import com.google.net.stubby.ChannelImpl;
-import com.google.net.stubby.transport.AbstractStream;
 import com.google.net.stubby.transport.netty.NettyServerBuilder;
 import com.google.net.stubby.transport.okhttp.OkHttpChannelBuilder;
 
@@ -50,14 +49,12 @@ public class Http2OkHttpTest extends AbstractTransportTest {
 
   @BeforeClass
   public static void startServer() throws Exception {
-    AbstractStream.GRPC_V2_PROTOCOL = true;
     startStaticServer(NettyServerBuilder.forPort(serverPort));
   }
 
   @AfterClass
   public static void stopServer() throws Exception {
     stopStaticServer();
-    AbstractStream.GRPC_V2_PROTOCOL = false;
   }
 
   @Override

File: netty/src/test/java/com/google/net/stubby/transport/netty/NettyServerHandlerTest.java
Patch:
@@ -54,7 +54,7 @@
 import com.google.net.stubby.Status;
 import com.google.net.stubby.Status.Code;
 import com.google.net.stubby.transport.Framer;
-import com.google.net.stubby.transport.MessageFramer;
+import com.google.net.stubby.transport.MessageFramer2;
 import com.google.net.stubby.transport.ServerStream;
 import com.google.net.stubby.transport.ServerStreamListener;
 import com.google.net.stubby.transport.ServerTransportListener;
@@ -272,7 +272,7 @@ private void createStream() throws Exception {
 
   private ByteBuf dataFrame(int streamId, boolean endStream) {
     final ByteBuf compressionFrame = Unpooled.buffer(CONTENT.length);
-    MessageFramer framer = new MessageFramer(new Framer.Sink<ByteBuffer>() {
+    MessageFramer2 framer = new MessageFramer2(new Framer.Sink<ByteBuffer>() {
       @Override
       public void deliverFrame(ByteBuffer frame, boolean endOfStream) {
         compressionFrame.writeBytes(frame);

File: okhttp/src/test/java/com/google/net/stubby/transport/okhttp/OkHttpClientTransportTest.java
Patch:
@@ -52,7 +52,6 @@
 import com.google.net.stubby.Metadata;
 import com.google.net.stubby.MethodDescriptor;
 import com.google.net.stubby.Status;
-import com.google.net.stubby.transport.AbstractStream;
 import com.google.net.stubby.transport.ClientStreamListener;
 import com.google.net.stubby.transport.okhttp.OkHttpClientTransport.ClientFrameHandler;
 
@@ -109,7 +108,6 @@ public class OkHttpClientTransportTest {
 
   @Before
   public void setup() {
-    AbstractStream.GRPC_V2_PROTOCOL = true;
     MockitoAnnotations.initMocks(this);
     streams = new HashMap<Integer, OkHttpClientStream>();
     frameReader = new MockFrameReader();

File: auth/src/main/java/com/google/net/stubby/auth/OAuth2ChannelInterceptor.java
Patch:
@@ -15,7 +15,7 @@
 /** Client interceptor that authenticates all calls with OAuth2. */
 public class OAuth2ChannelInterceptor implements ClientInterceptor {
   private static final Metadata.Key<String> AUTHORIZATION =
-      Metadata.Key.of("Authorization", Metadata.STRING_MARSHALLER);
+      Metadata.Key.of("Authorization", Metadata.ASCII_STRING_MARSHALLER);
 
   private final OAuth2AccessTokenProvider accessTokenProvider;
   private final Provider<String> authorizationHeaderProvider

File: core/src/main/java/com/google/net/stubby/transport/HttpUtil.java
Patch:
@@ -14,7 +14,7 @@ public final class HttpUtil {
    * spec.
    */
   public static final Metadata.Key<String> CONTENT_TYPE =
-      Metadata.Key.of("content-type", Metadata.STRING_MARSHALLER);
+      Metadata.Key.of("content-type", Metadata.ASCII_STRING_MARSHALLER);
 
   /**
    * Content-Type used for GRPC-over-HTTP/2.
@@ -29,7 +29,8 @@ public final class HttpUtil {
   /**
    * The TE header name. Defined here since it is not explicitly defined by the HTTP/2 spec.
    */
-  public static final Metadata.Key<String> TE = Metadata.Key.of("te", Metadata.STRING_MARSHALLER);
+  public static final Metadata.Key<String> TE = Metadata.Key.of("te",
+      Metadata.ASCII_STRING_MARSHALLER);
 
   /**
    * The TE (transport encoding) header for requests over HTTP/2

File: core/src/test/java/com/google/net/stubby/ClientInterceptorsTest.java
Patch:
@@ -128,7 +128,7 @@ public <ReqT, RespT> Call<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, Resp
 
   @Test
   public void addOutboundHeaders() {
-    final Metadata.Key<String> credKey = Metadata.Key.of("Cred", Metadata.STRING_MARSHALLER);
+    final Metadata.Key<String> credKey = Metadata.Key.of("Cred", Metadata.ASCII_STRING_MARSHALLER);
     ClientInterceptor interceptor = new ClientInterceptor() {
       @Override
       public <ReqT, RespT> Call<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,

File: okhttp/src/main/java/com/google/net/stubby/transport/okhttp/Utils.java
Patch:
@@ -1,6 +1,7 @@
 package com.google.net.stubby.transport.okhttp;
 
 import com.google.net.stubby.Metadata;
+import com.google.net.stubby.transport.TransportFrameUtil;
 
 import com.squareup.okhttp.internal.spdy.Header;
 
@@ -29,7 +30,7 @@ private static byte[][] convertHeadersToArray(List<Header> http2Headers) {
       headerValues[i++] = header.name.toByteArray();
       headerValues[i++] = header.value.toByteArray();
     }
-    return headerValues;
+    return TransportFrameUtil.toRawSerializedHeaders(headerValues);
   }
 
   private Utils() {

File: netty/src/main/java/com/google/net/stubby/transport/netty/NettyClientHandler.java
Patch:
@@ -117,7 +117,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
   void returnProcessedBytes(int streamId, int bytes) {
     try {
       Http2Stream http2Stream = connection().requireStream(streamId);
-      http2Stream.inboundFlow().returnProcessedBytes(ctx, bytes);
+      http2Stream.garbageCollector().returnProcessedBytes(ctx, bytes);
     } catch (Http2Exception e) {
       throw new RuntimeException(e);
     }
@@ -334,7 +334,7 @@ private void streamCreated(NettyClientStream stream, int streamId, ChannelPromis
       throws Http2Exception {
     // Attach the client stream to the HTTP/2 stream object as user data.
     Http2Stream http2Stream = connection().requireStream(streamId);
-    http2Stream.data(stream);
+    http2Stream.setProperty(NettyClientStream.class, stream);
 
     // Notify the stream that it has been created.
     stream.id(streamId);
@@ -345,7 +345,7 @@ private void streamCreated(NettyClientStream stream, int streamId, ChannelPromis
    * Gets the client stream associated to the given HTTP/2 stream object.
    */
   private NettyClientStream clientStream(Http2Stream stream) {
-    return stream.<NettyClientStream>data();
+    return stream.getProperty(NettyClientStream.class);
   }
 
   /**

File: netty/src/main/java/com/google/net/stubby/transport/netty/NettyServerHandler.java
Patch:
@@ -97,7 +97,7 @@ private void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
       // The Http2Stream object was put by AbstractHttp2ConnectionHandler before calling this
       // method.
       Http2Stream http2Stream = connection().requireStream(streamId);
-      http2Stream.data(stream);
+      http2Stream.setProperty(NettyServerStream.class, stream);
       String method = determineMethod(streamId, headers);
       ServerStreamListener listener =
           transportListener.streamCreated(stream, method, Utils.convertHeaders(headers));
@@ -198,7 +198,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
   void returnProcessedBytes(int streamId, int bytes) {
     try {
       Http2Stream http2Stream = connection().requireStream(streamId);
-      http2Stream.inboundFlow().returnProcessedBytes(ctx, bytes);
+      http2Stream.garbageCollector().returnProcessedBytes(ctx, bytes);
     } catch (Http2Exception e) {
       throw new RuntimeException(e);
     }
@@ -285,7 +285,7 @@ private String determineMethod(int streamId, Http2Headers headers) throws Http2S
    * Returns the server stream associated to the given HTTP/2 stream object
    */
   private NettyServerStream serverStream(Http2Stream stream) {
-    return stream.<NettyServerStream>data();
+    return stream.getProperty(NettyServerStream.class);
   }
 
   private Http2StreamException newStreamException(int streamId, Throwable cause) {

File: netty/src/main/java/com/google/net/stubby/transport/netty/NettyChannelBuilder.java
Patch:
@@ -64,15 +64,15 @@ public NettyChannelBuilder eventLoopGroup(EventLoopGroup group) {
   @Override
   protected ChannelEssentials buildEssentials() {
     final EventLoopGroup group = (userEventLoopGroup == null)
-        ? SharedResourceHolder.get(Utils.DEFAULT_WORKER_EVENT_LOOP_GROUP) : userEventLoopGroup;
+        ? SharedResourceHolder.get(Utils.DEFAULT_CHANNEL_EVENT_LOOP_GROUP) : userEventLoopGroup;
     ClientTransportFactory transportFactory = new NettyClientTransportFactory(
         serverAddress, negotiationType, group);
     Service.Listener listener = null;
     if (userEventLoopGroup == null) {
       listener = new ClosureHook() {
         @Override
         protected void onClosed() {
-          SharedResourceHolder.release(Utils.DEFAULT_WORKER_EVENT_LOOP_GROUP, group);
+          SharedResourceHolder.release(Utils.DEFAULT_CHANNEL_EVENT_LOOP_GROUP, group);
         }
       };
     }

File: integration-testing/src/main/java/com/google/net/stubby/testing/integration/Util.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.net.stubby.testing.integration;
 
 import com.google.net.stubby.Metadata;
-import com.google.net.stubby.stub.MetadataUtils;
+import com.google.net.stubby.proto.ProtoUtils;
 
 import java.io.IOException;
 import java.net.ServerSocket;
@@ -12,7 +12,7 @@
 public class Util {
 
   public static final Metadata.Key<Messages.SimpleContext> METADATA_KEY =
-      MetadataUtils.keyForProto(Messages.SimpleContext.getDefaultInstance());
+      ProtoUtils.keyForProto(Messages.SimpleContext.getDefaultInstance());
 
   /**
    * Picks an unused port.

File: core/src/main/java/com/google/net/stubby/Metadata.java
Patch:
@@ -449,7 +449,7 @@ public static <T> Key<T> of(String name, Marshaller<T> marshaller) {
      */
     private Key(String name, Marshaller<T> marshaller) {
       this.name = Preconditions.checkNotNull(name, "name").toLowerCase().intern();
-      this.asciiName = name.getBytes(US_ASCII);
+      this.asciiName = this.name.getBytes(US_ASCII);
       this.marshaller = Preconditions.checkNotNull(marshaller);
     }
 

File: core/src/main/java/com/google/net/stubby/newtransport/AbstractStream.java
Patch:
@@ -90,7 +90,7 @@ public void dispose() {
   }
 
   @Override
-  public final void writeMessage(InputStream message, int length, @Nullable Runnable accepted) {
+  public void writeMessage(InputStream message, int length, @Nullable Runnable accepted) {
     Preconditions.checkNotNull(message, "message");
     Preconditions.checkArgument(length >= 0, "length must be >= 0");
     outboundPhase(Phase.MESSAGE);

File: core/src/main/java/com/google/net/stubby/newtransport/HttpUtil.java
Patch:
@@ -23,7 +23,7 @@ public final class HttpUtil {
   /**
    * Content-Type used for GRPC-over-HTTP/2.
    */
-  public static final String CONTENT_TYPE_PROTORPC = "application/grpc";
+  public static final String CONTENT_TYPE_GRPC = "application/grpc";
 
   /**
    * The HTTP method used for GRPC requests.

File: core/src/main/java/com/google/net/stubby/newtransport/netty/NettyClientHandler.java
Patch:
@@ -137,7 +137,7 @@ private void initListener() {
   private void onHeadersRead(int streamId, Http2Headers headers, boolean endStream)
       throws Http2Exception {
     NettyClientStream stream = clientStream(connection().requireStream(streamId));
-    stream.inboundHeadersRecieved(headers, endStream);
+    stream.inboundHeadersReceived(headers, endStream);
   }
 
   /**

File: core/src/main/java/com/google/net/stubby/newtransport/okhttp/Headers.java
Patch:
@@ -19,7 +19,7 @@ public class Headers {
   public static final Header SCHEME_HEADER = new Header(Header.TARGET_SCHEME, "https");
   public static final Header METHOD_HEADER = new Header(Header.TARGET_METHOD, HttpUtil.HTTP_METHOD);
   public static final Header CONTENT_TYPE_HEADER =
-      new Header(HttpUtil.CONTENT_TYPE_HEADER, HttpUtil.CONTENT_TYPE_PROTORPC);
+      new Header(HttpUtil.CONTENT_TYPE_HEADER, HttpUtil.CONTENT_TYPE_GRPC);
   public static final Header RESPONSE_STATUS_OK = new Header(Header.RESPONSE_STATUS, "200");
 
   /**

File: core/src/test/java/com/google/net/stubby/ServerInterceptorsTest.java
Patch:
@@ -63,7 +63,7 @@ public void npeForNullServiceDefinition() {
 
   @Test(expected = NullPointerException.class)
   public void npeForNullInterceptorList() {
-    ServerInterceptors.intercept(serviceDefinition, null);
+    ServerInterceptors.intercept(serviceDefinition, (List) null);
   }
 
   @Test(expected = NullPointerException.class)

File: core/src/test/java/com/google/net/stubby/newtransport/netty/NettyServerHandlerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.net.stubby.newtransport.netty;
 
 import static com.google.net.stubby.newtransport.netty.Utils.CONTENT_TYPE_HEADER;
-import static com.google.net.stubby.newtransport.netty.Utils.CONTENT_TYPE_PROTORPC;
+import static com.google.net.stubby.newtransport.netty.Utils.CONTENT_TYPE_GRPC;
 import static com.google.net.stubby.newtransport.netty.Utils.HTTP_METHOD;
 import static io.netty.handler.codec.http2.Http2CodecUtil.toByteBuf;
 import static java.nio.charset.StandardCharsets.UTF_8;
@@ -213,7 +213,7 @@ public void closeShouldCloseChannel() throws Exception {
   private void createStream() throws Exception {
     Http2Headers headers = new DefaultHttp2Headers()
         .method(HTTP_METHOD)
-        .set(CONTENT_TYPE_HEADER, CONTENT_TYPE_PROTORPC)
+        .set(CONTENT_TYPE_HEADER, CONTENT_TYPE_GRPC)
         .path(new AsciiString("/foo.bar"));
     ByteBuf headersFrame = headersFrame(STREAM_ID, headers);
     handler.channelRead(ctx, headersFrame);

File: core/src/main/java/com/google/net/stubby/newtransport/Buffers.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.net.stubby.newtransport;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
+import static com.google.common.base.Charsets.UTF_8;
 
 import com.google.common.base.Preconditions;
 

File: core/src/main/java/com/google/net/stubby/newtransport/HttpUtil.java
Patch:
@@ -23,7 +23,7 @@ public final class HttpUtil {
   /**
    * Content-Type used for GRPC-over-HTTP/2.
    */
-  public static final String CONTENT_TYPE_PROTORPC = "application/protorpc";
+  public static final String CONTENT_TYPE_PROTORPC = "application/grpc";
 
   /**
    * The HTTP method used for GRPC requests.

File: core/src/main/java/com/google/net/stubby/newtransport/AbstractClientTransport.java
Patch:
@@ -24,7 +24,8 @@ public final ClientStream newStream(MethodDescriptor<?, ?> method,
     }
 
     if (state() != State.RUNNING) {
-      throw new IllegalStateException("Invalid state for creating new stream: " + state());
+      throw new IllegalStateException("Invalid state for creating new stream: " + state(),
+          failureCause());
     }
 
     // Create the stream.

File: core/src/main/java/com/google/net/stubby/newtransport/Deframer.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.io.ByteStreams;
 import com.google.net.stubby.GrpcFramingUtil;
-import com.google.net.stubby.Operation;
 import com.google.net.stubby.Status;
 
 import java.io.ByteArrayInputStream;
@@ -12,7 +11,7 @@
 
 /**
  * Base implementation that joins a sequence of framed GRPC data produced by a {@link Framer},
- * reconstructs their messages and hands them off to a receiving {@link Operation}
+ * reconstructs their messages and hands them off to a receiving {@link GrpcDeframer.Sink}
  */
 public abstract class Deframer<F> implements Framer.Sink<F> {
 

File: core/src/main/java/com/google/net/stubby/ServerImpl.java
Patch:
@@ -234,7 +234,9 @@ public void run() {
               try {
                 HandlerRegistry.Method method = registry.lookupMethod(methodName);
                 if (method == null) {
-                  stream.close(Status.UNIMPLEMENTED, new Metadata.Trailers());
+                  stream.close(
+                      Status.UNIMPLEMENTED.withDescription("Method not found: " + methodName),
+                      new Metadata.Trailers());
                   return;
                 }
                 listener = startCall(stream, methodName, method.getMethodDefinition(), headers);

File: core/src/main/java/com/google/net/stubby/newtransport/TransportFrameUtil.java
Patch:
@@ -54,7 +54,7 @@ public static String getFullMethodNameFromPath(String path) {
     if (!path.startsWith("/")) {
       return null;
     }
-    return path.substring(1);
+    return path;
   }
 
   private TransportFrameUtil() {}

File: stub/src/main/java/com/google/net/stubby/stub/Calls.java
Patch:
@@ -357,7 +357,7 @@ public ListenableFuture<Void> onPayload(T value) {
       public void onClose(Status status, Metadata.Trailers trailers) {
         Preconditions.checkState(!done, "Call already closed");
         if (status.isOk()) {
-          buffer.add(this);
+          buffer.add(BlockingResponseStream.this);
         } else {
           buffer.add(status.asRuntimeException());
         }

File: stub/src/main/java/com/google/net/stubby/stub/ServerCalls.java
Patch:
@@ -32,7 +32,7 @@ public ServerCall.Listener<ReqT> startCall(
           ReqT request;
           @Override
           public ListenableFuture<Void> onPayload(ReqT request) {
-            if (request == null) {
+            if (this.request == null) {
               // We delay calling method.invoke() until onHalfClose(), because application may call
               // close(OK) inside invoke(), while close(OK) is not allowed before onHalfClose().
               this.request = request;

File: core/src/main/java/com/google/net/stubby/Status.java
Patch:
@@ -139,7 +139,7 @@ private Code(int value) {
     public int value() {
       return value;
     }
-    
+
     private Status status() {
       return STATUS_LIST.get(value);
     }
@@ -169,9 +169,9 @@ private Status status() {
   public static final Status NOT_FOUND = Code.NOT_FOUND.status();
   public static final Status ALREADY_EXISTS = Code.ALREADY_EXISTS.status();
   public static final Status PERMISSION_DENIED = Code.PERMISSION_DENIED.status();
-  public static final Status UNAUTHENTICATED = Code.PERMISSION_DENIED.status();
+  public static final Status UNAUTHENTICATED = Code.UNAUTHENTICATED.status();
   public static final Status RESOURCE_EXHAUSTED = Code.RESOURCE_EXHAUSTED.status();
-  public static final Status FAILED_PRECONDITION = 
+  public static final Status FAILED_PRECONDITION =
       Code.FAILED_PRECONDITION.status();
   public static final Status ABORTED = Code.ABORTED.status();
   public static final Status OUT_OF_RANGE = Code.OUT_OF_RANGE.status();

File: core/src/main/java/com/google/net/stubby/ChannelImpl.java
Patch:
@@ -175,6 +175,7 @@ public void sendPayload(ReqT payload, SettableFuture<Void> accepted) {
         inProcessFutures.add(accepted);
         stream.writeMessage(payloadIs, available(payloadIs), new AcceptedRunnable(accepted));
       }
+      stream.flush();
     }
 
     private class AcceptedRunnable implements Runnable {

File: core/src/main/java/com/google/net/stubby/newtransport/netty/Utils.java
Patch:
@@ -26,6 +26,7 @@ class Utils {
       new AsciiString(HttpUtil.CONTENT_TYPE_HEADER);
   public static final AsciiString CONTENT_TYPE_PROTORPC =
       new AsciiString(HttpUtil.CONTENT_TYPE_PROTORPC);
+  public static final AsciiString GRPC_STATUS_HEADER = new AsciiString(HttpUtil.GRPC_STATUS_HEADER);
 
   /**
    * Copies the content of the given {@link ByteBuffer} to a new {@link ByteBuf} instance.

File: core/src/main/java/com/google/net/stubby/newtransport/netty/NettyBuffer.java
Patch:
@@ -64,7 +64,8 @@ public void readBytes(OutputStream dest, int length) {
 
   @Override
   public NettyBuffer readBytes(int length) {
-    return new NettyBuffer(buffer.readSlice(length));
+    // The ByteBuf returned by readSlice() stores a reference to buffer but does not call retain().
+    return new NettyBuffer(buffer.readSlice(length).retain());
   }
 
   @Override

File: core/src/main/java/com/google/net/stubby/newtransport/okhttp/OkHttpClientTransport.java
Patch:
@@ -152,7 +152,7 @@ protected void doStop() {
       abort(new Status(Code.INTERNAL, "Transport stopped"));
       // Send GOAWAY with lastGoodStreamId of 0, since we don't expect any server-initiated streams.
       // The GOAWAY is part of graceful shutdown.
-      frameWriter.goAway(0, ErrorCode.NO_ERROR, null);
+      frameWriter.goAway(0, ErrorCode.NO_ERROR, new byte[0]);
     }
     stopIfNecessary();
   }

File: core/src/main/java/com/google/net/stubby/ChannelImpl.java
Patch:
@@ -73,7 +73,7 @@ private synchronized ClientTransport obtainActiveTransport() {
       }
       activeTransport = transportFactory.newClientTransport();
       activeTransport.addListener(
-          new TransportListener(activeTransport), MoreExecutors.sameThreadExecutor());
+          new TransportListener(activeTransport), MoreExecutors.directExecutor());
       transports.add(activeTransport);
       activeTransport.startAsync();
     }
@@ -221,7 +221,7 @@ public void run() {
                     // TODO(user): If their Future fails, should we Call.cancel()?
                     ours.set(null);
                   }
-                }, MoreExecutors.sameThreadExecutor());
+                }, MoreExecutors.directExecutor());
               }
             } catch (Throwable t) {
               ours.set(null);

File: core/src/main/java/com/google/net/stubby/newtransport/AbstractStream.java
Patch:
@@ -258,6 +258,6 @@ private static void closeWhenDone(@Nullable ListenableFuture<Void> future,
       public void run() {
         Closeables.closeQuietly(input);
       }
-    }, MoreExecutors.sameThreadExecutor());
+    }, MoreExecutors.directExecutor());
   }
 }

File: stub/src/main/java/com/google/net/stubby/stub/Calls.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.LinkedBlockingQueue;
 
-
 /**
  * Utility functions for processing different call idioms. We have one-to-one correspondence
  * between utilities in this class and the potential signatures in a generated stub class so

File: core/src/main/java/com/google/net/stubby/newtransport/MessageFramer.java
Patch:
@@ -132,7 +132,7 @@ public void writeContext(String key, InputStream message, int messageLen) {
 
   @Override
   public void writeStatus(Status status) {
-    short code = (short) status.getCode().ordinal();
+    short code = (short) status.getCode().getNumber();
     scratch.clear();
     scratch.put(GrpcFramingUtil.STATUS_FRAME);
     int length = 2;

File: core/src/main/java/com/google/net/stubby/transport/MessageFramer.java
Patch:
@@ -139,7 +139,7 @@ public void writeContext(String key, InputStream message, boolean flush, Sink si
 
   @Override
   public void writeStatus(Status status, boolean flush, Sink sink) {
-    short code = (short) status.getCode().ordinal();
+    short code = (short) status.getCode().getNumber();
     scratch.clear();
     scratch.put(GrpcFramingUtil.STATUS_FRAME);
     int length = 2;

File: stub/src/main/java/com/google/net/stubby/stub/Call.java
Patch:
@@ -3,9 +3,8 @@
 /**
  * Encapsulates the producer and consumer aspects of a call. A Call is a deferred execution context
  * that does not dispatch data to the remote implementation until 'start' is called.
- * <p>
- * Call and it's sub-classes are used by the stub code generators to produced typed stubs.
- * </p>
+ *
+ * <p>Call and its sub-classes are used by the stub code generators to produced typed stubs.
  */
 // TODO(user): Implement context support
 public interface Call<RequestT, ResponseT> extends StreamObserver<RequestT>  {

