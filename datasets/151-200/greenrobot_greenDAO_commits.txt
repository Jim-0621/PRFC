File: DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java
Patch:
@@ -401,7 +401,7 @@ public void setSkipTableCreation(boolean skipTableCreation) {
         setSkipCreationInDb(skipTableCreation);
     }
 
-    /** Flag if CREATE & DROP TABLE scripts should be skipped in Dao. */
+    /** Flag if CREATE and DROP TABLE scripts should be skipped in Dao. */
     public void setSkipCreationInDb(boolean skipCreationInDb) {
         this.skipCreationInDb = skipCreationInDb;
     }

File: greendao-api/src/main/java/org/greenrobot/greendao/annotation/ToMany.java
Patch:
@@ -18,7 +18,7 @@
     String referencedJoinProperty() default "";
 
     /**
-     * Array of matching source -> target properties
+     * Array of matching source -&gt; target properties
      * Required unless {@link #referencedJoinProperty()} or {@link JoinEntity} is specified
      */
     JoinProperty[] joinProperties() default {};

File: DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
Patch:
@@ -392,7 +392,8 @@ private void checkLog(String sql) {
     private void appendJoinsAndWheres(StringBuilder builder, String tablePrefixOrNull) {
         values.clear();
         for (Join<T, ?> join : joins) {
-            builder.append(" JOIN ").append(join.daoDestination.getTablename()).append(' ');
+            builder.append(" JOIN ");
+            builder.append('"').append(join.daoDestination.getTablename()).append('"').append(' ');
             builder.append(join.tablePrefix).append(" ON ");
             SqlUtils.appendProperty(builder, join.sourceTablePrefix, join.joinPropertySource).append('=');
             SqlUtils.appendProperty(builder, join.tablePrefix, join.joinPropertyDestination);

File: DaoCore/src/main/java/org/greenrobot/greendao/database/DatabaseOpenHelper.java
Patch:
@@ -131,7 +131,7 @@ private EncryptedHelper checkEncryptedHelper() {
      */
     public Database getEncryptedWritableDb(String password) {
         EncryptedHelper encryptedHelper = checkEncryptedHelper();
-        return encryptedHelper.wrap(encryptedHelper.getReadableDatabase(password));
+        return encryptedHelper.wrap(encryptedHelper.getWritableDatabase(password));
     }
 
     /**

File: DaoCore/src/main/java/org/greenrobot/greendao/query/LazyList.java
Patch:
@@ -164,7 +164,7 @@ protected void checkCached() {
     }
 
     /** Like get but does not load the entity if it was not loaded before. */
-    public E peak(int location) {
+    public E peek(int location) {
         if (entities != null) {
             return entities.get(location);
         } else {

File: DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java
Patch:
@@ -269,7 +269,7 @@ public QueryBuilder<T> limit(int limit) {
     }
 
     /**
-     * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code limit} results are
+     * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code offset} results are
      * skipped and the total number of results will be limited by {@code limit}. You cannot use offset without limit.
      */
     public QueryBuilder<T> offset(int offset) {

File: DaoGenerator/src/org/greenrobot/greendao/generator/Property.java
Patch:
@@ -438,7 +438,9 @@ void init2ndPass() {
         } else if (primaryKey && propertyType == PropertyType.Long && dbName.equals("_id")) {
             nonDefaultDbName = false;
         }
-        if (!nonPrimitiveType) {
+
+        // For backwards compatibility, consider notNull. It should be only dependent on nonPrimitiveType in the future.
+        if (notNull && !nonPrimitiveType) {
             javaType = schema.mapToJavaTypeNotNull(propertyType);
         } else {
             javaType = schema.mapToJavaTypeNullable(propertyType);

File: DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java
Patch:
@@ -79,7 +79,7 @@ void gc() {
             Iterator<Entry<Long, WeakReference<Q>>> iterator = queriesForThreads.entrySet().iterator();
             while (iterator.hasNext()) {
                 Entry<Long, WeakReference<Q>> entry = iterator.next();
-                if (entry.getValue() == null) {
+                if (entry.getValue().get() == null) {
                     iterator.remove();
                 }
             }

File: DaoCore/src/main/java/org/greenrobot/greendao/internal/FastCursor.java
Patch:
@@ -182,6 +182,7 @@ public double getDouble(int columnIndex) {
         return window.getDouble(position, columnIndex);
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     public boolean isNull(int columnIndex) {
         return window.isNull(position, columnIndex);

File: tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/CustomerOrderTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.greenrobot.greendao.entityannotation;
+package org.greenrobot.greendao.test.entityannotation;
 
 import org.greenrobot.greendao.test.AbstractDaoSessionTest;
 

File: tests/DaoTestEntityAnnotation/src/androidTest/Java/org/greenrobot/greendao/test/entityannotation/NoteTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.greenrobot.greendao.entityannotation;
+package org.greenrobot.greendao.test.entityannotation;
 
 import org.greenrobot.greendao.test.AbstractDaoTestLongPk;
 

File: tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/App.java
Patch:
@@ -1,9 +1,9 @@
-package org.greenrobot.greendao.entityannotation;
+package org.greenrobot.greendao.test.entityannotation;
 
 import android.app.Application;
 
 import org.greenrobot.greendao.database.Database;
-import org.greenrobot.greendao.entityannotation.DaoMaster.DevOpenHelper;
+import org.greenrobot.greendao.test.entityannotation.DaoMaster.DevOpenHelper;
 
 public class App extends Application {
     private DaoSession daoSession;

File: tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Customer.java
Patch:
@@ -1,4 +1,4 @@
-package org.greenrobot.greendao.entityannotation;
+package org.greenrobot.greendao.test.entityannotation;
 
 import org.greenrobot.greendao.DaoException;
 import org.greenrobot.greendao.annotation.Entity;

File: tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Note.java
Patch:
@@ -1,4 +1,4 @@
-package org.greenrobot.greendao.entityannotation;
+package org.greenrobot.greendao.test.entityannotation;
 
 import org.greenrobot.greendao.annotation.Convert;
 import org.greenrobot.greendao.annotation.Entity;
@@ -36,7 +36,7 @@ public Note(Long id) {
         this.id = id;
     }
 
-    @Generated(hash = 1686394253)
+    @Generated(hash = 59778150)
     public Note(Long id, @NotNull String text, String comment, Date date, NoteType type) {
         this.id = id;
         this.text = text;

File: tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/NoteTypeConverter.java
Patch:
@@ -1,4 +1,4 @@
-package org.greenrobot.greendao.entityannotation;
+package org.greenrobot.greendao.test.entityannotation;
 
 import org.greenrobot.greendao.converter.PropertyConverter;
 

File: tests/DaoTestEntityAnnotation/src/main/java/org/greenrobot/greendao/test/entityannotation/Order.java
Patch:
@@ -1,4 +1,4 @@
-package org.greenrobot.greendao.entityannotation;
+package org.greenrobot.greendao.test.entityannotation;
 
 import org.greenrobot.greendao.DaoException;
 import org.greenrobot.greendao.annotation.Entity;

File: DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
Patch:
@@ -28,7 +28,7 @@ public class MinimalEntityTest {
     @Before
     public void setUp() {
         DaoMaster.DevOpenHelper openHelper = new DaoMaster.DevOpenHelper(RuntimeEnvironment.application, null);
-        Database db = openHelper.getWritableDatabase();
+        Database db = openHelper.getWritableDb();
         daoSession = new DaoMaster(db).newSession();
         minimalEntityDao = daoSession.getMinimalEntityDao();
     }

File: DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDataFileTest.java
Patch:
@@ -1,4 +1,4 @@
-package de.greenrobot.encryption;
+package org.greenrobot.greendao.daotest.encrypted;
 
 import java.io.File;
 import java.io.FileInputStream;

File: DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDatabaseOpenHelperTest.java
Patch:
@@ -1,4 +1,4 @@
-package de.greenrobot.encryption;
+package org.greenrobot.greendao.daotest.encrypted;
 
 import android.app.Application;
 import android.test.ApplicationTestCase;

File: DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptedDbUtils.java
Patch:
@@ -1,4 +1,4 @@
-package de.greenrobot.encryption;
+package org.greenrobot.greendao.daotest.encrypted;
 
 import android.content.Context;
 import android.database.Cursor;
@@ -30,6 +30,7 @@ public static Database createDatabase(Context context, String dbName, String pas
             sqLiteDatabase = SQLiteDatabase.create(null, password);
         } else {
             File dbFile = context.getDatabasePath(dbName);
+            dbFile.getParentFile().mkdir();
             context.deleteDatabase(dbName);
             sqLiteDatabase = SQLiteDatabase.openOrCreateDatabase(dbFile, password, null);
         }

File: DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/encrypted/EncryptionSimpleEntityTest.java
Patch:
@@ -1,4 +1,4 @@
-package de.greenrobot.encryption;
+package org.greenrobot.greendao.daotest.encrypted;
 
 import net.sqlcipher.database.SQLiteConstraintException;
 

File: DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/async/BasicAsyncTest.java
Patch:
@@ -172,7 +172,7 @@ public synchronized void onAsyncOperationCompleted(AsyncOperation operation) {
         assertWaitForCompletion1Sec();
         while (!testListenerMainThread_done) {
             synchronized (listener) {
-                listener.wait();
+                listener.wait(1000);
             }
         }
     }

File: DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java
Patch:
@@ -22,8 +22,9 @@ protected Database createDatabase() {
     public void testConcurrentLockAndQueryDuringTxWAL() throws InterruptedException {
         if (Build.VERSION.SDK_INT >= 16) {
             try {
-                Method method = db.getClass().getMethod("isWriteAheadLoggingEnabled");
-                boolean walEnabled = (Boolean) method.invoke(db);
+                Object rawDatabase = db.getRawDatabase();
+                Method method = rawDatabase.getClass().getMethod("isWriteAheadLoggingEnabled");
+                boolean walEnabled = (Boolean) method.invoke(rawDatabase);
                 if (!walEnabled) {
                     throw new RuntimeException("WAL is disabled. This test will deadlock without WAL");
                 }

File: DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
Patch:
@@ -70,7 +70,7 @@ public void generate() throws Exception {
         DaoGenerator daoGenerator = new DaoGenerator();
         daoGenerator.generateAll(schema, "../DaoTestBase/src/main/java");
         daoGenerator.generateAll(schema2, "../DaoTestBase/src/main/java");
-        daoGenerator.generateAll(schemaUnitTest, "../DaoTestBase/src/test/java");
+        daoGenerator.generateAll(schemaUnitTest, "../DaoTest/src/test/java");
     }
 
     protected void createSimple() {

File: DaoTest/src/androidTest/java/de/greenrobot/encryption/EncryptedDataFileTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.io.IOException;
 
 import org.greenrobot.greendao.database.Database;
-import org.greenrobot.greendaotest.SimpleEntity;
+import org.greenrobot.greendao.daotest.SimpleEntity;
 
 public class EncryptedDataFileTest extends EncryptionSimpleEntityTest {
 

File: DaoTest/src/androidTest/java/de/greenrobot/encryption/EncryptionSimpleEntityTest.java
Patch:
@@ -5,9 +5,9 @@
 import java.util.List;
 
 import org.greenrobot.greendao.database.Database;
-import org.greenrobot.greendaotest.SimpleEntity;
-import org.greenrobot.greendaotest.SimpleEntityDao.Properties;
-import org.greenrobot.greendaotest.entity.SimpleEntityTest;
+import org.greenrobot.greendao.daotest.SimpleEntity;
+import org.greenrobot.greendao.daotest.SimpleEntityDao.Properties;
+import org.greenrobot.greendao.daotest.entity.SimpleEntityTest;
 
 public class EncryptionSimpleEntityTest extends SimpleEntityTest {
     @Override

File: DaoTest/src/test/java/org/greenrobot/greendao/unittest/MinimalEntityTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.greenrobot.greendao.database.Database;
 import org.greenrobot.greendao.query.Query;
-import org.greenrobot.greendaotest.dummyapp.BuildConfig;
+import org.greenrobot.greendao.daotest.dummyapp.BuildConfig;
 
 
 import static org.junit.Assert.assertEquals;

File: DaoExample/src/main/java/org/greenrobot/greendao/example/NoteActivity.java
Patch:
@@ -37,7 +37,7 @@
 
 import org.greenrobot.greendao.database.Database;
 import org.greenrobot.greendao.database.EncryptedDatabase;
-import org.greenrobot.greendaoexample.DaoMaster.EncryptedDevOpenHelper;
+import org.greenrobot.greendao.example.DaoMaster.EncryptedDevOpenHelper;
 
 public class NoteActivity extends ListActivity {
 

File: DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java
Patch:
@@ -70,7 +70,7 @@ public void generate() throws Exception {
         DaoGenerator daoGenerator = new DaoGenerator();
         daoGenerator.generateAll(schema, "../DaoTestBase/src/main/java");
         daoGenerator.generateAll(schema2, "../DaoTestBase/src/main/java");
-        daoGenerator.generateAll(schemaUnitTest, "../DaoTestBase/src/test/java");
+        daoGenerator.generateAll(schemaUnitTest, "../DaoTest/src/test/java");
     }
 
     protected void createSimple() {

File: DaoExample/src/main/java/de/greenrobot/daoexample/Customer.java
Patch:
@@ -14,7 +14,6 @@
 public class Customer {
 
     @Id(autoincrement = true)
-    @Column(name = "_id")
     private Long id;
 
     @NotNull

File: DaoExample/src/main/java/de/greenrobot/daoexample/Note.java
Patch:
@@ -13,7 +13,6 @@
 public class Note {
 
     @Id
-    @Column(name = "_id")
     private Long id;
 
     @NotNull

File: DaoExample/src/main/java/de/greenrobot/daoexample/Order.java
Patch:
@@ -14,7 +14,6 @@
 public class Order {
 
     @Id
-    @Column(name = "_id")
     private Long id;
     private java.util.Date date;
     private long customerId;

File: DaoGenerator/src/de/greenrobot/daogenerator/Property.java
Patch:
@@ -404,6 +404,8 @@ void init2ndPass() {
         if (columnName == null) {
             columnName = DaoUtil.dbName(propertyName);
             nonDefaultColumnName = false;
+        } else if (primaryKey && propertyType == PropertyType.Long && columnName.equals("_id")) {
+            nonDefaultColumnName = false;
         }
         if (notNull) {
             javaType = schema.mapToJavaTypeNotNull(propertyType);

File: DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java
Patch:
@@ -116,7 +116,7 @@ private void addNote() {
 
         final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
         String comment = "Added on " + df.format(new Date());
-        Note note = new Note(null, noteText, comment, new Date());
+        Note note = new Note(null, noteText, comment, new Date(), NoteType.TEXT);
         noteDao.insert(note);
         Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
 

File: DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
Patch:
@@ -662,18 +662,18 @@ private void init3rdPassAdditionalImports() {
             String customType = property.getCustomType();
             if (customType != null) {
                 String pack = DaoUtil.getPackageFromFullyQualified(customType);
-                if (!pack.equals(javaPackage)) {
+                if (pack != null && !pack.equals(javaPackage)) {
                     additionalImportsEntity.add(customType);
                 }
-                if (!pack.equals(javaPackageDao)) {
+                if (pack != null && !pack.equals(javaPackageDao)) {
                     additionalImportsDao.add(customType);
                 }
             }
 
             String converter = property.getConverter();
             if (converter != null) {
                 String pack = DaoUtil.getPackageFromFullyQualified(converter);
-                if (!pack.equals(javaPackageDao)) {
+                if (pack != null && !pack.equals(javaPackageDao)) {
                     additionalImportsDao.add(converter);
                 }
             }

File: DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
Patch:
@@ -46,6 +46,8 @@ private static void addNote(Schema schema) {
         final Property text = note.addStringProperty("text").notNull().getProperty();
         note.addStringProperty("comment");
         final Property date = note.addDateProperty("date").getProperty();
+        note.addStringProperty("type")
+            .customType("de.greenrobot.daoexample.NoteType", "de.greenrobot.daoexample.NoteTypeConverter");
 
         final Index index = new Index();
         index.addProperty(text);

File: DaoTest/src-unit-test/de/greenrobot/dao/unittest/DaoSession.java
Patch:
@@ -1,11 +1,10 @@
 package de.greenrobot.dao.unittest;
 
-import android.database.sqlite.SQLiteDatabase;
-
 import java.util.Map;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.AbstractDaoSession;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
@@ -26,7 +25,7 @@ public class DaoSession extends AbstractDaoSession {
 
     private final MinimalEntityDao minimalEntityDao;
 
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
 

File: DaoTest/src/de/greenrobot/daotest/DeadlockPreventionTest.java
Patch:
@@ -37,7 +37,7 @@ public DeadlockPreventionTest() {
     }
 
     // Runs pretty long, only run manually
-    public void testLoadAll() throws InterruptedException {
+    public void _testLoadAll() throws InterruptedException {
         dao = daoSession.getTestEntityDao();
         List<TestEntity> entities = new ArrayList<>();
         for (int i = 0; i < 10000; i++) {

File: PerformanceTests/OrmLite/src/androidTest/java/de/greenrobot/performance/ormlite/MinimalEntity.java
Patch:
@@ -6,7 +6,7 @@
 @DatabaseTable(tableName = "MINIMAL_ENTITY")
 public class MinimalEntity {
 
-    @DatabaseField(id = true, columnName="_id")
+    @DatabaseField(generatedId = true, columnName="_id")
     private Long id;
 
     public Long getId() {

File: DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -308,10 +308,10 @@ private void executeOperation(AsyncOperation operation) {
                     executeTransactionCallable(operation);
                     break;
                 case QueryList:
-                    operation.result = ((Query) operation.parameter).list();
+                    operation.result = ((Query) operation.parameter).forCurrentThread().list();
                     break;
                 case QueryUnique:
-                    operation.result = ((Query) operation.parameter).unique();
+                    operation.result = ((Query) operation.parameter).forCurrentThread().unique();
                     break;
                 case DeleteByKey:
                     operation.dao.deleteByKey(operation.parameter);

File: DaoTest/src/de/greenrobot/daotest/performance/PerformanceTest.java
Patch:
@@ -162,7 +162,7 @@ protected void stopClock() {
     protected void stopClock(String extraInfoOrNull) {
         long time = System.currentTimeMillis() - start;
         String extraLog = extraInfoOrNull != null ? " (" + extraInfoOrNull + ")" : "";
-        DaoLog.d(traceName + " completed in " + time + "ms" + extraLog);
+        DaoLog.d(traceName + " completed in " + time + " ms" + extraLog);
         if (useTraceView) {
             Debug.stopMethodTracing();
         }

File: DaoExample/src-test/de/greenrobot/daoexample/CustomerOrderTest.java
Patch:
@@ -6,7 +6,7 @@
 import android.app.Application;
 import de.greenrobot.dao.test.AbstractDaoSessionTest;
 
-public class CustomerOrderTest extends AbstractDaoSessionTest<Application, DaoMaster, DaoSession> {
+public class CustomerOrderTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
     public CustomerOrderTest() {
         super(DaoMaster.class);

File: DaoExample/src-test/de/greenrobot/daoexample/CustomerOrderTest.java
Patch:
@@ -6,7 +6,7 @@
 import android.app.Application;
 import de.greenrobot.dao.test.AbstractDaoSessionTest;
 
-public class CustomerOrderTest extends AbstractDaoSessionTest<Application, DaoMaster, DaoSession> {
+public class CustomerOrderTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
     public CustomerOrderTest() {
         super(DaoMaster.class);

File: DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
Patch:
@@ -147,6 +147,6 @@ public static String createSqlUpdate(String tablename, String[] updateColumns, S
     }
 
     public static String createSqlCount(String tablename) {
-        return "SELECT COUNT(*) FROM " + tablename;
+        return "SELECT COUNT(*) FROM \"" + tablename +'"';
     }
 }

File: DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
Patch:
@@ -22,6 +22,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.AbstractDaoSession;
+import de.greenrobot.dao.database.Database;
 
 /**
  * Base class for DAO (master) related testing.
@@ -52,10 +53,10 @@ public AbstractDaoSessionTest(Class<T> daoMasterClass, boolean inMemory) {
     protected void setUp() throws Exception {
         super.setUp();
         try {
-            Constructor<T> constructor = daoMasterClass.getConstructor(SQLiteDatabase.class);
+            Constructor<T> constructor = daoMasterClass.getConstructor(Database.class);
             daoMaster = constructor.newInstance(db);
 
-            Method createTableMethod = daoMasterClass.getMethod("createAllTables", SQLiteDatabase.class, boolean.class);
+            Method createTableMethod = daoMasterClass.getMethod("createAllTables", Database.class, boolean.class);
             createTableMethod.invoke(null, db, false);
         } catch (Exception e) {
             throw new RuntimeException("Could not prepare DAO session test", e);

File: DaoCore/src/de/greenrobot/dao/test/AbstractDaoTest.java
Patch:
@@ -23,6 +23,7 @@
 import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.InternalUnitTestDaoAccess;
 import de.greenrobot.dao.Property;
+import de.greenrobot.dao.database.Database;
 import de.greenrobot.dao.identityscope.IdentityScope;
 
 /**
@@ -73,7 +74,7 @@ protected void setUp() throws Exception {
 
     protected void setUpTableForDao() throws Exception {
         try {
-            Method createTableMethod = daoClass.getMethod("createTable", SQLiteDatabase.class, boolean.class);
+            Method createTableMethod = daoClass.getMethod("createTable", Database.class, boolean.class);
             createTableMethod.invoke(null, db, false);
         } catch (NoSuchMethodException e) {
             DaoLog.i("No createTable method");

File: DaoCore/src/de/greenrobot/dao/query/CursorQuery.java
Patch:
@@ -68,7 +68,7 @@ public CursorQuery forCurrentThread() {
         return queryData.forCurrentThread(this);
     }
 
-    /** Executes the query and returns the result as a list containing all entities loaded into memory. */
+    /** Executes the query and returns a raw android.database.Cursor. Don't forget to close it. */
     public Cursor query() {
         checkThread();
         return dao.getDatabase().rawQuery(sql, parameters);

File: DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
Patch:
@@ -27,7 +27,9 @@
  * @param <T>
  *            The entity class the query will return results for.
  */
-// TODO support long, double, blob types directly
+// TODO support long, double and other types, not just Strings, for parameters
+// TODO Make parameters setable by Property (if unique in parameters)
+// TODO Make query compilable
 abstract class AbstractQuery<T> {
     protected final AbstractDao<T, ?> dao;
     protected final InternalQueryDaoAccess<T> daoAccess;

File: DaoCore/src/de/greenrobot/dao/query/DeleteQuery.java
Patch:
@@ -25,7 +25,7 @@
  * @author Markus
  * 
  * @param <T>
- *            The enitity class the query will delete from.
+ *            The entity class the query will delete from.
  */
 public class DeleteQuery<T> extends AbstractQuery<T> {
     private final static class QueryData<T2> extends AbstractQueryData<T2, DeleteQuery<T2>> {

File: DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
Patch:
@@ -81,7 +81,7 @@ public Long readKey(Cursor cursor, int offset) {
     public CustomTypeEntity readEntity(Cursor cursor, int offset) {
         CustomTypeEntity entity = new CustomTypeEntity( //
             cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // myCustomTimestamp
+            cursor.isNull(offset + 1) ? null : myCustomTimestampConverter.convertToEntityProperty(cursor.getLong(offset + 1)) // myCustomTimestamp
         );
         return entity;
     }
@@ -90,7 +90,7 @@ public CustomTypeEntity readEntity(Cursor cursor, int offset) {
     @Override
     public void readEntity(Cursor cursor, CustomTypeEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setMyCustomTimestamp(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
+        entity.setMyCustomTimestamp(cursor.isNull(offset + 1) ? null : myCustomTimestampConverter.convertToEntityProperty(cursor.getLong(offset + 1)));
      }
     
     /** @inheritdoc */

File: DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
Patch:
@@ -30,6 +30,7 @@ public static class Properties {
         public final static Property MyCustomTimestamp = new Property(1, Long.class, "myCustomTimestamp", false, "MY_CUSTOM_TIMESTAMP");
     };
 
+    private final MyTimestampConverter myCustomTimestampConverter = new MyTimestampConverter();
 
     public CustomTypeEntityDao(DaoConfig config) {
         super(config);
@@ -63,9 +64,9 @@ protected void bindValues(SQLiteStatement stmt, CustomTypeEntity entity) {
             stmt.bindLong(1, id);
         }
  
-        Long myCustomTimestamp = entity.getMyCustomTimestamp();
+        MyTimestamp myCustomTimestamp = entity.getMyCustomTimestamp();
         if (myCustomTimestamp != null) {
-            stmt.bindLong(2, myCustomTimestamp);
+            stmt.bindLong(2, myCustomTimestampConverter.convertToDatabaseValue(myCustomTimestamp));
         }
     }
 

File: DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
Patch:
@@ -78,7 +78,7 @@ protected void bindValues(SQLiteStatement stmt, SimpleEntity entity) {
  
         Boolean simpleBoolean = entity.getSimpleBoolean();
         if (simpleBoolean != null) {
-            stmt.bindLong(2, simpleBoolean ? 1l: 0l);
+            stmt.bindLong(2, simpleBoolean ? 1L: 0L);
         }
  
         Byte simpleByte = entity.getSimpleByte();

File: DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
Patch:
@@ -71,7 +71,7 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
     protected void bindValues(SQLiteStatement stmt, SimpleEntityNotNull entity) {
         stmt.clearBindings();
         stmt.bindLong(1, entity.getId());
-        stmt.bindLong(2, entity.getSimpleBoolean() ? 1l: 0l);
+        stmt.bindLong(2, entity.getSimpleBoolean() ? 1L: 0L);
         stmt.bindLong(3, entity.getSimpleByte());
         stmt.bindLong(4, entity.getSimpleShort());
         stmt.bindLong(5, entity.getSimpleInt());

File: DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
Patch:
@@ -108,7 +108,7 @@ protected void bindValues(SQLiteStatement stmt, TestEntity entity) {
  
         Boolean simpleBoolean = entity.getSimpleBoolean();
         if (simpleBoolean != null) {
-            stmt.bindLong(9, simpleBoolean ? 1l: 0l);
+            stmt.bindLong(9, simpleBoolean ? 1L: 0L);
         }
     }
 

File: DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntity.java
Patch:
@@ -1,5 +1,7 @@
 package de.greenrobot.daotest;
 
+import de.greenrobot.daotest.customtype.MyTimestamp;
+
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
  * Entity mapped to table CUSTOM_TYPE_ENTITY.

File: DaoTest/src-gen/de/greenrobot/daotest/CustomTypeEntityDao.java
Patch:
@@ -8,6 +8,9 @@
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
 
+import de.greenrobot.daotest.customtype.MyTimestamp;
+import de.greenrobot.daotest.customtype.MyTimestampConverter;
+
 import de.greenrobot.daotest.CustomTypeEntity;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

File: DaoCore/src/de/greenrobot/dao/query/LazyList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -343,7 +343,7 @@ public int size() {
     public List<E> subList(int start, int end) {
         checkCached();
         for (int i = start; i < end; i++) {
-            entities.get(i);
+            get(i);
         }
         return entities.subList(start, end);
     }

File: DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
  * 
@@ -18,8 +18,8 @@
 package de.greenrobot.daotest.entity;
 
 import java.util.ArrayList;
+import java.util.List;
 
-import de.greenrobot.dao.query.LazyList;
 import de.greenrobot.dao.test.AbstractDaoTest;
 import de.greenrobot.daotest.TestEntity;
 import de.greenrobot.daotest.TestEntityDao;
@@ -57,7 +57,7 @@ protected int getSimpleInteger(int i) {
         return 100 + i;
     }
 
-    protected void assertIds(ArrayList<TestEntity> list, LazyList<TestEntity> list2) {
+    protected void assertIds(List<TestEntity> list, List<TestEntity> list2) {
         for (int i = 0; i < list.size(); i++) {
             TestEntity entity = list.get(i);
             TestEntity lazyEntity = list2.get(i);

File: DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
Patch:
@@ -90,7 +90,7 @@ public void generateAll(Schema schema, String outDir, String outDirEntity, Strin
         File outDirTestFile = outDirTest != null ? toFileForceExists(outDirTest) : null;
 
         schema.init2ndPass();
-        schema.init3ndPass();
+        schema.init3rdPass();
 
         System.out.println("Processing schema version " + schema.getVersion() + "...");
 

File: DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
Patch:
@@ -446,7 +446,7 @@ public void setSuperclass(String classToExtend) {
     }
 
     void init2ndPass() {
-        init2nPassNamesWithDefaults();
+        init2ndPassNamesWithDefaults();
 
         for (int i = 0; i < properties.size(); i++) {
             Property property = properties.get(i);
@@ -503,7 +503,7 @@ void init2ndPass() {
         }
     }
 
-    protected void init2nPassNamesWithDefaults() {
+    protected void init2ndPassNamesWithDefaults() {
         if (tableName == null) {
             tableName = DaoUtil.dbName(className);
         }
@@ -552,7 +552,7 @@ protected void init2ndPassIndexNamesWithDefaults() {
         }
     }
 
-    void init3ndPass() {
+    void init3rdPass() {
         for (Property property : properties) {
             property.init3ndPass();
         }

File: DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
  * 
@@ -180,9 +180,9 @@ void init2ndPass() {
         }
     }
 
-    void init3ndPass() {
+    void init3rdPass() {
         for (Entity entity : entities) {
-            entity.init3ndPass();
+            entity.init3rdPass();
         }
     }
 

File: DaoGenerator/src/de/greenrobot/daogenerator/ContentProvider.java
Patch:
@@ -68,7 +68,7 @@ public void init2ndPass() {
             basePath = "";
         }
         if (className == null) {
-            className = "EntityContentProvider";
+            className = entities.get(0).getClassName() + "ContentProvider";
         }
         if (javaPackage == null) {
             javaPackage = schema.getDefaultJavaPackage();

File: DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
Patch:
@@ -229,6 +229,7 @@ protected void addIncomingToMany(ToMany toMany) {
 
     public ContentProvider addContentProvider() {
         List<Entity> entities = new ArrayList<Entity>();
+        entities.add(this);
         ContentProvider contentProvider = new ContentProvider(schema, entities);
         contentProviders.add(contentProvider);
         return contentProvider;

File: DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
Patch:
@@ -425,7 +425,7 @@ public List<ContentProvider> getContentProviders() {
 
     public void implementsInterface(String... interfaces) {
         for (String interfaceToImplement : interfaces) {
-            if (interfaceToImplement.contains(interfaceToImplement)) {
+            if (interfacesToImplement.contains(interfaceToImplement)) {
                 throw new RuntimeException("Interface defined more than once: " + interfaceToImplement);
             }
             interfacesToImplement.add(interfaceToImplement);

File: DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
Patch:
@@ -287,7 +287,7 @@ public DeleteQuery<T> buildDelete() {
         String sql = builder.toString();
         // Remove table aliases, not supported for DELETE queries.
         // TODO(?): don't create table aliases in the first place.
-        sql = sql.replace(tablePrefix + ".'", tablename + ".'");
+        sql = sql.replace(tablePrefix + ".\"", '"'+tablename + "\".\"");
         checkLog(sql);
 
         return DeleteQuery.create(dao, sql, values.toArray());

File: DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
Patch:
@@ -278,7 +278,7 @@ protected Cursor queryWithDummyColumnsInFront(int dummyCount, String valueForCol
             builder.append(valueForColumn).append(",");
         }
         SqlUtils.appendColumns(builder, "T", dao.getAllColumns()).append(" FROM ");
-        builder.append(dao.getTablename()).append(" T");
+        builder.append('"').append(dao.getTablename()).append('"').append(" T");
         if (pk != null) {
             builder.append(" WHERE ");
 

File: DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntity.java
Patch:
@@ -2,7 +2,7 @@
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
 /**
- * Entity mapped to table SPECIAL_NAMES_ENTITY.
+ * Entity mapped to table ORDER TRANSACTION GROUP BY.
  */
 public class SpecialNamesEntity {
 

File: DaoTestGenerator/src/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
Patch:
@@ -172,6 +172,7 @@ protected void createDate() {
 
     protected void createSpecialNames() {
         Entity specialNamesEntity = schema.addEntity("SpecialNamesEntity");
+        specialNamesEntity.setTableName("ORDER TRANSACTION GROUP BY");
         specialNamesEntity.addIdProperty();
         specialNamesEntity.addStringProperty("count");
         specialNamesEntity.addStringProperty("select");

File: DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
Patch:
@@ -425,6 +425,9 @@ public List<ContentProvider> getContentProviders() {
 
     public void implementsInterface(String... interfaces) {
         for (String interfaceToImplement : interfaces) {
+            if (interfaceToImplement.contains(interfaceToImplement)) {
+                throw new RuntimeException("Interface defined more than once: " + interfaceToImplement);
+            }
             interfacesToImplement.add(interfaceToImplement);
         }
     }

File: DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
Patch:
@@ -92,7 +92,8 @@ public String getOrder() {
         if (propertyOrderList.isEmpty()) {
             return null;
         } else {
-            return propertyOrderList.getCommaSeparatedString();
+            // Table prefix must match default of QueryBuilder in DaoCore
+            return propertyOrderList.getCommaSeparatedString("T");
         }
     }
 

File: DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
Patch:
@@ -58,9 +58,9 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'SIMPLE_BOOLEAN' INTEGER);"); // 8: simpleBoolean
         // Add Indexes
         db.execSQL("CREATE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING ON TEST_ENTITY" +
-                " (INDEXED_STRING);");
+                " ('INDEXED_STRING');");
         db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING_ASC_UNIQUE ON TEST_ENTITY" +
-                " (INDEXED_STRING_ASC_UNIQUE);");
+                " ('INDEXED_STRING_ASC_UNIQUE');");
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
Patch:
@@ -92,7 +92,7 @@ public void testQueryBuilderOffsetWithoutLimit() {
     public void testQueryLimitAndSetParameter() {
         Query<TestEntity> query = dao.queryBuilder().limit(5).offset(1).build();
         try{
-            query.setParameter(0, null);
+            query.setParameter(0, (Object) null);
             fail("Offset/limit parameters must not interfere with user parameters");
         } catch(RuntimeException expected) {
             //OK

File: DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
Patch:
@@ -14,10 +14,10 @@
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
- * Master of DAO (schema version 3): knows all DAOs.
+ * Master of DAO (schema version 1000): knows all DAOs.
 */
 public class DaoMaster extends AbstractDaoMaster {
-    public static final int SCHEMA_VERSION = 3;
+    public static final int SCHEMA_VERSION = 1000;
 
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {

File: DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
Patch:
@@ -31,7 +31,7 @@
 public class ExampleDaoGenerator {
 
     public static void main(String[] args) throws Exception {
-        Schema schema = new Schema(3, "de.greenrobot.daoexample");
+        Schema schema = new Schema(1000, "de.greenrobot.daoexample");
 
         addNote(schema);
         addCustomerOrder(schema);

File: DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
Patch:
@@ -51,7 +51,7 @@ public class DaoGenerator {
 
     public DaoGenerator() throws IOException {
         System.out.println("greenDAO Generator");
-        System.out.println("Copyright 2011-2013 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
+        System.out.println("Copyright 2011-2014 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
         System.out.println("This program comes with ABSOLUTELY NO WARRANTY");
 
         patternKeepIncludes = compilePattern("INCLUDES");

File: DaoCore/src/de/greenrobot/dao/query/AbstractQueryData.java
Patch:
@@ -49,8 +49,7 @@ Q forCurrentThread() {
 
     void gc() {
         synchronized (queriesForThreads) {
-            int size = queriesForThreads.size();
-            for (int i = 0; i < size; i++) {
+            for (int i = queriesForThreads.size() - 1; i >= 0; i--) {
                 if (queriesForThreads.valueAt(i).get() == null) {
                     queriesForThreads.remove(queriesForThreads.keyAt(i));
                 }

File: DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
Patch:
@@ -65,7 +65,7 @@ public class QueryBuilder<T> {
     private Integer limit;
 
     private Integer offset;
-    
+
     /** For internal use by greenDAO only. */
     public static <T2> QueryBuilder<T2> internalCreate(AbstractDao<T2, ?> dao) {
         return new QueryBuilder<T2>(dao);
@@ -326,9 +326,9 @@ public DeleteQuery<T> buildDelete() {
      */
     public CountQuery<T> buildCount() {
         String tablename = dao.getTablename();
-        String baseSql = SqlUtils.createSqlSelectCountStar(tablename);
+        String baseSql = SqlUtils.createSqlSelectCountStar(tablename, tablePrefix);
         StringBuilder builder = new StringBuilder(baseSql);
-        appendWhereClause(builder, tablename);
+        appendWhereClause(builder, tablePrefix);
         String sql = builder.toString();
 
         if (LOG_SQL) {

File: DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
Patch:
@@ -123,7 +123,7 @@ protected File toFileForceExists(String filename) throws IOException {
         File file = new File(filename);
         if (!file.exists()) {
             throw new IOException(filename
-                    + " does not exist. This check is to prevent accidential file generation into a wrong path.");
+                    + " does not exist. This check is to prevent accidental file generation into a wrong path.");
         }
         return file;
     }

File: DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
Patch:
@@ -123,7 +123,7 @@ protected File toFileForceExists(String filename) throws IOException {
         File file = new File(filename);
         if (!file.exists()) {
             throw new IOException(filename
-                    + " does not exist. This check is to prevent accidential file generation into a wrong path.");
+                    + " does not exist. This check is to prevent accidental file generation into a wrong path.");
         }
         return file;
     }

File: DaoCore/src/de/greenrobot/dao/identityscope/IdentityScope.java
Patch:
@@ -21,7 +21,8 @@
  * 
  * @author Markus
  * 
- * @param<K> Key
+ * @param <K>
+ *            Key
  * @param <T>
  *            Entity
  */

File: DaoCore/src/de/greenrobot/dao/identityscope/IdentityScopeLong.java
Patch:
@@ -25,8 +25,8 @@
  * The context for entity identities. Provides the scope in which entities will be tracked and managed.
  * 
  * @author Markus
- * @param <K>
  * @param <T>
+ *            Entity
  */
 public class IdentityScopeLong<T> implements IdentityScope<Long, T> {
     private final LongHashMap<Reference<T>> map;

File: DaoCore/src/de/greenrobot/dao/query/Query.java
Patch:
@@ -101,7 +101,7 @@ public void setParameter(int index, Object parameter) {
     }
 
     /**
-     * Sets the limit of the maximum number of results returned by this Query. {@link QueryBuilder#limit(int) must have
+     * Sets the limit of the maximum number of results returned by this Query. {@link QueryBuilder#limit(int)} must have
      * been called on the QueryBuilder that created this Query object.
      */
     public void setLimit(int limit) {
@@ -113,7 +113,7 @@ public void setLimit(int limit) {
     }
 
     /**
-     * Sets the offset for results returned by this Query. {@link QueryBuilder#offset(int) must have been called on the
+     * Sets the offset for results returned by this Query. {@link QueryBuilder#offset(int)} must have been called on the
      * QueryBuilder that created this Query object.
      */
     public void setOffset(int offset) {

File: DaoCore/src/de/greenrobot/dao/query/CountQuery.java
Patch:
@@ -1,8 +1,8 @@
 package de.greenrobot.dao.query;
 
+import android.database.Cursor;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
-import android.database.Cursor;
 
 public class CountQuery<T> extends AbstractQuery<T> {
 

File: DaoCore/src/de/greenrobot/dao/query/DeleteQuery.java
Patch:
@@ -15,9 +15,9 @@
  */
 package de.greenrobot.dao.query;
 
-import de.greenrobot.dao.AbstractDao;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
+import de.greenrobot.dao.AbstractDao;
 
 /**
  * A repeatable query for deleting entities.<br/>

File: DaoCore/src/de/greenrobot/dao/query/Query.java
Patch:
@@ -17,11 +17,10 @@
 
 import java.util.List;
 
+import android.database.Cursor;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
 
-import android.database.Cursor;
-
 /**
  * A repeatable query returning entities.
  * 

File: DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
Patch:
@@ -25,8 +25,7 @@
 import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.SqlUtils;
-import de.greenrobot.dao.WhereCondition;
-import de.greenrobot.dao.WhereCondition.PropertyCondition;
+import de.greenrobot.dao.query.WhereCondition.PropertyCondition;
 
 /**
  * Builds custom entity queries using constraints and parameters and without SQL (QueryBuilder creates SQL for you). To

File: DaoCore/src/de/greenrobot/dao/LazyList.java
Patch:
@@ -236,6 +236,7 @@ public E get(int location) {
                     if (entity == null) {
                         entity = loadEntity(location);
                         entities.set(location, entity);
+                        // Ignore FindBugs: increment of volatile is fine here because we use a lock
                         loadedCount++;
                         if (loadedCount == size) {
                             cursor.close();

File: DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
Patch:
@@ -288,6 +288,7 @@ protected Cursor queryWithDummyColumnsInFront(int dummyCount, String valueForCol
         return cursor;
     }
 
+    /** Provides a collision free PK () not returned before in the current test. */
     protected K nextPk() {
         for (int i = 0; i < 100000; i++) {
             K pk = createRandomPk();
@@ -299,7 +300,7 @@ protected K nextPk() {
     }
 
     protected T createEntityWithRandomPk() {
-        return createEntity(createRandomPk());
+        return createEntity(nextPk());
     }
 
     /** K does not have to be collision free, check nextPk for collision free PKs. */

File: DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
Patch:
@@ -48,7 +48,7 @@ public AbcdefEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'ABCDEF_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'ABCDEF_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'A' INTEGER," + // 1: a
                 "'B' INTEGER," + // 2: b
@@ -60,8 +60,7 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'H' INTEGER," + // 8: h
                 "'J' INTEGER," + // 9: j
                 "'I' INTEGER," + // 10: i
-                "'K' INTEGER);"; // 11: k
-        db.execSQL(sql);
+                "'K' INTEGER);"); // 11: k
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
Patch:
@@ -41,10 +41,9 @@ public AnActiveEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'AN_ACTIVE_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'AN_ACTIVE_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'TEXT' TEXT);"; // 1: text
-        db.execSQL(sql);
+                "'TEXT' TEXT);"); // 1: text
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
Patch:
@@ -37,9 +37,8 @@ public AutoincrementEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'AUTOINCREMENT_ENTITY' (" + //
-                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"; // 0: id
-        db.execSQL(sql);
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'AUTOINCREMENT_ENTITY' (" + //
+                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 0: id
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
Patch:
@@ -39,11 +39,10 @@ public DateEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'DATE_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'DATE_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'DATE' INTEGER," + // 1: date
-                "'DATE_NOT_NULL' INTEGER NOT NULL );"; // 2: dateNotNull
-        db.execSQL(sql);
+                "'DATE_NOT_NULL' INTEGER NOT NULL );"); // 2: dateNotNull
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
Patch:
@@ -38,10 +38,9 @@ public ExtendsImplementsEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'EXTENDS_IMPLEMENTS_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'EXTENDS_IMPLEMENTS_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'TEXT' TEXT);"; // 1: text
-        db.execSQL(sql);
+                "'TEXT' TEXT);"); // 1: text
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
Patch:
@@ -48,14 +48,13 @@ public RelationEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'RELATION_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'RELATION_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'PARENT_ID' INTEGER," + // 1: parentId
                 "'TEST_ID' INTEGER," + // 2: testId
                 "'TEST_ID_NOT_NULL' INTEGER NOT NULL ," + // 3: testIdNotNull
                 "'SIMPLE_STRING' TEXT," + // 4: simpleString
-                "'WITHOUT_PROPERTY_TEST_ID' INTEGER);"; // 5: testWithoutProperty
-        db.execSQL(sql);
+                "'WITHOUT_PROPERTY_TEST_ID' INTEGER);"); // 5: testWithoutProperty
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
Patch:
@@ -46,7 +46,7 @@ public SimpleEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'SIMPLE_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'SIMPLE_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'SIMPLE_BOOLEAN' INTEGER," + // 1: simpleBoolean
                 "'SIMPLE_BYTE' INTEGER," + // 2: simpleByte
@@ -56,8 +56,7 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'SIMPLE_FLOAT' REAL," + // 6: simpleFloat
                 "'SIMPLE_DOUBLE' REAL," + // 7: simpleDouble
                 "'SIMPLE_STRING' TEXT," + // 8: simpleString
-                "'SIMPLE_BYTE_ARRAY' BLOB);"; // 9: simpleByteArray
-        db.execSQL(sql);
+                "'SIMPLE_BYTE_ARRAY' BLOB);"); // 9: simpleByteArray
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
Patch:
@@ -46,7 +46,7 @@ public SimpleEntityNotNullDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'SIMPLE_ENTITY_NOT_NULL' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'SIMPLE_ENTITY_NOT_NULL' (" + //
                 "'_id' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                 "'SIMPLE_BOOLEAN' INTEGER NOT NULL ," + // 1: simpleBoolean
                 "'SIMPLE_BYTE' INTEGER NOT NULL ," + // 2: simpleByte
@@ -56,8 +56,7 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'SIMPLE_FLOAT' REAL NOT NULL ," + // 6: simpleFloat
                 "'SIMPLE_DOUBLE' REAL NOT NULL ," + // 7: simpleDouble
                 "'SIMPLE_STRING' TEXT NOT NULL ," + // 8: simpleString
-                "'SIMPLE_BYTE_ARRAY' BLOB NOT NULL );"; // 9: simpleByteArray
-        db.execSQL(sql);
+                "'SIMPLE_BYTE_ARRAY' BLOB NOT NULL );"); // 9: simpleByteArray
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
Patch:
@@ -46,7 +46,7 @@ public SpecialNamesEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'SPECIAL_NAMES_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'SPECIAL_NAMES_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'COUNT' TEXT," + // 1: count
                 "'SELECT' TEXT," + // 2: select
@@ -56,8 +56,7 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
                 "'DISTINCT' TEXT," + // 6: distinct
                 "'ON' TEXT," + // 7: on
                 "'INDEX' TEXT," + // 8: index
-                "'ORDER' INTEGER);"; // 9: order
-        db.execSQL(sql);
+                "'ORDER' INTEGER);"); // 9: order
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
Patch:
@@ -38,10 +38,9 @@ public StringKeyValueEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'STRING_KEY_VALUE_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'STRING_KEY_VALUE_ENTITY' (" + //
                 "'KEY' TEXT PRIMARY KEY NOT NULL ," + // 0: key
-                "'VALUE' TEXT);"; // 1: value
-        db.execSQL(sql);
+                "'VALUE' TEXT);"); // 1: value
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
Patch:
@@ -41,10 +41,9 @@ public ToManyEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TO_MANY_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TO_MANY_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'SOURCE_JOIN_PROPERTY' TEXT);"; // 1: sourceJoinProperty
-        db.execSQL(sql);
+                "'SOURCE_JOIN_PROPERTY' TEXT);"); // 1: sourceJoinProperty
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
Patch:
@@ -47,12 +47,11 @@ public ToManyTargetEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TO_MANY_TARGET_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TO_MANY_TARGET_ENTITY' (" + //
                 "'TO_MANY_ID' INTEGER," + // 0: toManyId
                 "'TO_MANY_ID_DESC' INTEGER," + // 1: toManyIdDesc
                 "'_id' INTEGER PRIMARY KEY ," + // 2: id
-                "'TARGET_JOIN_PROPERTY' TEXT);"; // 3: targetJoinProperty
-        db.execSQL(sql);
+                "'TARGET_JOIN_PROPERTY' TEXT);"); // 3: targetJoinProperty
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
Patch:
@@ -47,10 +47,9 @@ public TreeEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TREE_ENTITY' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TREE_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'PARENT_ID' INTEGER);"; // 1: parentId
-        db.execSQL(sql);
+                "'PARENT_ID' INTEGER);"); // 1: parentId
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
Patch:
@@ -37,9 +37,8 @@ public KeepEntityDao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'KEEP_ENTITY' (" + //
-                "'_id' INTEGER PRIMARY KEY );"; // 0: id
-        db.execSQL(sql);
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'KEEP_ENTITY' (" + //
+                "'_id' INTEGER PRIMARY KEY );"); // 0: id
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
Patch:
@@ -42,10 +42,9 @@ public ToManyTarget2Dao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TO_MANY_TARGET2' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TO_MANY_TARGET2' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'FK_ID' INTEGER);"; // 1: fkId
-        db.execSQL(sql);
+                "'FK_ID' INTEGER);"); // 1: fkId
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
Patch:
@@ -48,10 +48,9 @@ public RelationSource2Dao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'RELATION_SOURCE2' (" + //
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'RELATION_SOURCE2' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'TO_ONE_ID' INTEGER);"; // 1: toOneId
-        db.execSQL(sql);
+                "'TO_ONE_ID' INTEGER);"); // 1: toOneId
     }
 
     /** Drops the underlying database table. */

File: DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
Patch:
@@ -39,9 +39,8 @@ public ToOneTarget2Dao(DaoConfig config, DaoSession daoSession) {
 
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TO_ONE_TARGET2' (" + //
-                "'_id' INTEGER PRIMARY KEY );"; // 0: id
-        db.execSQL(sql);
+        db.execSQL("CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TO_ONE_TARGET2' (" + //
+                "'_id' INTEGER PRIMARY KEY );"); // 0: id
     }
 
     /** Drops the underlying database table. */

File: DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
Patch:
@@ -65,16 +65,15 @@ protected void setUp() {
         if (pkColumn == null) {
             throw new RuntimeException("Test does not work without a PK column");
         }
-
     }
 
     public void testInsertAndLoad() {
         K pk = nextPk();
         T entity = createEntity(pk);
         dao.insert(entity);
+        assertEquals(pk, daoAccess.getKey(entity));
         T entity2 = dao.load(pk);
         assertNotNull(entity2);
-        // assertNotSame(entity, entity2); // Unless we'll cache stuff one day --> we do now
         assertEquals(daoAccess.getKey(entity), daoAccess.getKey(entity2));
     }
 

File: DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
Patch:
@@ -179,6 +179,7 @@ public void readEntity(Cursor cursor, AbcdefEntity entity, int offset) {
         entity.setK(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(AbcdefEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
Patch:
@@ -98,6 +98,7 @@ public void readEntity(Cursor cursor, AnActiveEntity entity, int offset) {
         entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(AnActiveEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
Patch:
@@ -80,6 +80,7 @@ public void readEntity(Cursor cursor, AutoincrementEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(AutoincrementEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
Patch:
@@ -94,6 +94,7 @@ public void readEntity(Cursor cursor, DateEntity entity, int offset) {
         entity.setDateNotNull(new java.util.Date(cursor.getLong(offset + 2)));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(DateEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
Patch:
@@ -89,6 +89,7 @@ public void readEntity(Cursor cursor, ExtendsImplementsEntity entity, int offset
         entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ExtendsImplementsEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
Patch:
@@ -126,6 +126,7 @@ public void readEntity(Cursor cursor, RelationEntity entity, int offset) {
         entity.setSimpleString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(RelationEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
Patch:
@@ -161,6 +161,7 @@ public void readEntity(Cursor cursor, SimpleEntity entity, int offset) {
         entity.setSimpleByteArray(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(SimpleEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
Patch:
@@ -121,6 +121,7 @@ public void readEntity(Cursor cursor, SimpleEntityNotNull entity, int offset) {
         entity.setSimpleByteArray(cursor.getBlob(offset + 9));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(SimpleEntityNotNull entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
Patch:
@@ -161,6 +161,7 @@ public void readEntity(Cursor cursor, SpecialNamesEntity entity, int offset) {
         entity.setOrder(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(SpecialNamesEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
Patch:
@@ -39,7 +39,7 @@ public StringKeyValueEntityDao(DaoConfig config, DaoSession daoSession) {
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'STRING_KEY_VALUE_ENTITY' (" + //
-                "'KEY' TEXT PRIMARY KEY ," + // 0: key
+                "'KEY' TEXT PRIMARY KEY NOT NULL ," + // 0: key
                 "'VALUE' TEXT);"; // 1: value
         db.execSQL(sql);
     }
@@ -89,9 +89,10 @@ public void readEntity(Cursor cursor, StringKeyValueEntity entity, int offset) {
         entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected String updateKeyAfterInsert(StringKeyValueEntity entity, long rowId) {
-        return null;
+        return entity.getKey();
     }
     
     /** @inheritdoc */

File: DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
Patch:
@@ -149,6 +149,7 @@ public void readEntity(Cursor cursor, TestEntity entity, int offset) {
         entity.setSimpleBoolean(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(TestEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
Patch:
@@ -98,6 +98,7 @@ public void readEntity(Cursor cursor, ToManyEntity entity, int offset) {
         entity.setSourceJoinProperty(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ToManyEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
Patch:
@@ -114,6 +114,7 @@ public void readEntity(Cursor cursor, ToManyTargetEntity entity, int offset) {
         entity.setTargetJoinProperty(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ToManyTargetEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
Patch:
@@ -104,6 +104,7 @@ public void readEntity(Cursor cursor, TreeEntity entity, int offset) {
         entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(TreeEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
Patch:
@@ -80,6 +80,7 @@ public void readEntity(Cursor cursor, KeepEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(KeepEntity entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
Patch:
@@ -93,6 +93,7 @@ public void readEntity(Cursor cursor, ToManyTarget2 entity, int offset) {
         entity.setFkId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ToManyTarget2 entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
Patch:
@@ -105,6 +105,7 @@ public void readEntity(Cursor cursor, RelationSource2 entity, int offset) {
         entity.setToOneId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(RelationSource2 entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
Patch:
@@ -82,6 +82,7 @@ public void readEntity(Cursor cursor, ToOneTarget2 entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ToOneTarget2 entity, long rowId) {
         entity.setId(rowId);

File: DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
Patch:
@@ -20,7 +20,7 @@
 import de.greenrobot.dao.IdentityScopeLong;
 import de.greenrobot.daotest.TestEntity;
 
-public class TestEntityTestIdentityScope extends TestEntityTest {
+public class TestEntityIdentityScopeTest extends TestEntityTest {
     @Override
     protected void setUp() {
         setIdentityScopeBeforeSetUp(new IdentityScopeLong<TestEntity>());

File: DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
Patch:
@@ -27,7 +27,6 @@ public class PerformanceTestNotNull extends PerformanceTest<SimpleEntityNotNullD
 
     public PerformanceTestNotNull() {
         super(SimpleEntityNotNullDao.class);
-        // setIdentityScopeBeforeSetUp(new de.greenrobot.dao.IdentityScope<Long, SimpleEntityNotNull>());
     }
 
     @Override

File: DaoCore/src/de/greenrobot/dao/DaoConfig.java
Patch:
@@ -98,7 +98,7 @@ private static Property[] reflectProperties(Class<? extends AbstractDao<?, ?>> d
         ArrayList<Property> propertyList = new ArrayList<Property>();
         for (Field field : fields) {
             // There might be other fields introduced by some tools, just ignore them (see issue #28)
-            if ((field.getModifiers() & Modifier.STATIC) != 0) {
+            if ((field.getModifiers() & Modifier.STATIC) != 0 && (field.getModifiers() & Modifier.PUBLIC) != 0) {
                 Object fieldValue = field.get(null);
                 if (fieldValue instanceof Property) {
                     propertyList.add((Property) fieldValue);

File: DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java
Patch:
@@ -23,11 +23,10 @@
 import de.greenrobot.daotest.SpecialNamesEntityDao;
 import de.greenrobot.daotest.SpecialNamesEntityDao.Properties;
 
-public class QuerySpecialNames extends  AbstractDaoTest<SpecialNamesEntityDao, SpecialNamesEntity, Long> {
+public class QuerySpecialNamesTest extends  AbstractDaoTest<SpecialNamesEntityDao, SpecialNamesEntity, Long> {
     
-    public QuerySpecialNames() {
+    public QuerySpecialNamesTest() {
         super(SpecialNamesEntityDao.class);
-        // TODO Auto-generated constructor stub
     }
 
     @Override

File: DaoCore/src/de/greenrobot/dao/DaoConfig.java
Patch:
@@ -96,10 +96,10 @@ private static Property[] reflectProperties(Class<? extends AbstractDao<?, ?>> d
         Property[] properties = new Property[fields.length];
         for (Field field : fields) {
             Property property = (Property) field.get(null);
-            if (properties[property.oridinal] != null) {
+            if (properties[property.ordinal] != null) {
                 throw new DaoException("Duplicate property ordinals");
             }
-            properties[property.oridinal] = property;
+            properties[property.ordinal] = property;
         }
         return properties;
     }

File: DaoCore/src/de/greenrobot/dao/Property.java
Patch:
@@ -26,14 +26,14 @@
  * @author Markus
  */
 public class Property {
-    public final int oridinal;
+    public final int ordinal;
     public final Class<?> type;
     public final String name;
     public final boolean primaryKey;
     public final String columnName;
 
-    public Property(int oridinal, Class<?> type, String name, boolean primaryKey, String columnName) {
-        this.oridinal = oridinal;
+    public Property(int ordinal, Class<?> type, String name, boolean primaryKey, String columnName) {
+        this.ordinal = ordinal;
         this.type = type;
         this.name = name;
         this.primaryKey = primaryKey;

File: DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
Patch:
@@ -50,7 +50,7 @@ public class DaoGenerator {
 
     public DaoGenerator() throws IOException {
         System.out.println("greenDAO Generator");
-        System.out.println("Copyright 2011 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
+        System.out.println("Copyright 2011-2012 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
         System.out.println("This program comes with ABSOLUTELY NO WARRANTY");
 
         patternKeepIncludes = compilePattern("INCLUDES");

File: DaoGenerator/src/de/greenrobot/daogenerator/ToMany.java
Patch:
@@ -100,7 +100,7 @@ void init2ndPass() {
         if (name == null) {
             char[] nameCharArray = targetEntity.getClassName().toCharArray();
             nameCharArray[0] = Character.toLowerCase(nameCharArray[0]);
-            name = new String(nameCharArray);
+            name = new String(nameCharArray) + "List";
         }
         if (sourceProperties == null) {
             List<Property> pks = sourceEntity.getPropertiesPk();

File: DaoCore/src/de/greenrobot/dao/QueryBuilder.java
Patch:
@@ -249,6 +249,7 @@ public DeleteQuery<T> buildDelete() {
     }
 
     private void appendWhereClause(StringBuilder builder, String tablePrefixOrNull) {
+        values.clear();
         if (!whereConditions.isEmpty()) {
             builder.append(" WHERE ");
             ListIterator<WhereCondition> iter = whereConditions.listIterator();

File: DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
Patch:
@@ -100,7 +100,7 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
             if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
                 generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
             }
-            if (outDirTestFile != null) {
+            if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
                 String javaPackageTest = entity.getJavaPackageTest();
                 String classNameTest = entity.getClassNameTest();
                 File javaFilename = toJavaFilename(outDirTestFile, javaPackageTest, classNameTest);

File: DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
Patch:
@@ -1,4 +1,4 @@
-package de.greenrobot.daotest2;
+package de.greenrobot.daotest2.dao;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;

File: DaoTest/src/de/greenrobot/daotest2/entity/KeepEntityTest.java
Patch:
@@ -17,9 +17,10 @@
  */
 package de.greenrobot.daotest2.entity;
 
+import android.os.Build;
 import de.greenrobot.dao.test.AbstractDaoTestLongPk;
 import de.greenrobot.daotest2.KeepEntity;
-import de.greenrobot.daotest2.KeepEntityDao;
+import de.greenrobot.daotest2.dao.KeepEntityDao;
 
 public class KeepEntityTest extends AbstractDaoTestLongPk<KeepEntityDao, KeepEntity> {
 
@@ -36,7 +37,7 @@ protected KeepEntity createEntity(Long key) {
 
     public void testKeepSectionAvailable() {
         KeepEntity keepEntity = new KeepEntity(42l);
-        assertEquals("Custom toString ID=42", keepEntity.toString());
+        assertEquals("KeepEntity ID=42 (extra="+Build.VERSION.SDK+")", keepEntity.toString());
     }
 
 }

File: DaoCore/src/de/greenrobot/dao/QueryBuilder.java
Patch:
@@ -147,16 +147,16 @@ public <J> QueryBuilder<J> joinToMany(Class<J> entityClass, Property toManyPrope
     }
 
     public QueryBuilder<T> orderAsc(Property... properties) {
-        checkOrderBuilder();
         for (Property property : properties) {
+            checkOrderBuilder();
             append(orderBuilder, property).append(" ASC");
         }
         return this;
     }
 
     public QueryBuilder<T> orderDesc(Property... properties) {
-        checkOrderBuilder();
         for (Property property : properties) {
+            checkOrderBuilder();
             append(orderBuilder, property).append(" DESC");
         }
         return this;

File: DaoCore/src/de/greenrobot/dao/DaoConfig.java
Patch:
@@ -21,7 +21,7 @@
 
 import android.database.sqlite.SQLiteDatabase;
 
-public final class DaoConfig {
+public final class DaoConfig implements Cloneable {
 
     final SQLiteDatabase db;
     final String tablename;

File: DaoBase/src/de/greenrobot/dao/Query.java
Patch:
@@ -119,7 +119,7 @@ public T unique() {
     public T uniqueOrThrow() {
         T entity = unique();
         if (entity == null) {
-            new DaoException("No entity found for query");
+            throw new DaoException("No entity found for query");
         }
         return entity;
     }

File: DaoBase/src/de/greenrobot/dao/WhereCondition.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.greenrobot.dao;
 
-import java.sql.Date;
+import java.util.Date;
 import java.util.List;
 
 public interface WhereCondition {

File: DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
Patch:
@@ -100,6 +100,8 @@ protected Entity createTest() {
         testEntity.addStringProperty("simpleString");
         testEntity.addStringProperty("indexedString").index();
         testEntity.addStringProperty("indexedStringAscUnique").indexAsc(null, true);
+        testEntity.addDateProperty("simpleDate");
+        testEntity.addBooleanProperty("simpleBoolean");
         return testEntity;
     }
 

File: DaoBase/src/de/greenrobot/dao/Property.java
Patch:
@@ -56,7 +56,7 @@ public WhereCondition between(Object value1, Object value2) {
     }
 
     public WhereCondition in(Object... inValues) {
-        StringBuilder condition = new StringBuilder("IN (");
+        StringBuilder condition = new StringBuilder(" IN (");
         SqlUtils.appendPlaceholders(condition, inValues.length).append(')');
         return new PropertyCondition(this, condition.toString(), inValues);
     }

File: DaoBase/src/de/greenrobot/dao/QueryBuilder.java
Patch:
@@ -109,7 +109,7 @@ protected WhereCondition combineWhereConditions(String combineOp, WhereCondition
 
     protected void addCondition(StringBuilder builder, List<Object> values, WhereCondition condition) {
         checkCondition(condition);
-        condition.appendTo(builder, "T");
+        condition.appendTo(builder, tablePrefix);
         condition.appendValuesTo(values);
     }
 
@@ -135,7 +135,7 @@ public QueryBuilder<T> orderAsc(Property... properties) {
 
     protected StringBuilder append(StringBuilder builder, Property property) {
         checkProperty(property);
-        builder.append("T.").append(property.columnName);
+        builder.append(tablePrefix).append('.').append(property.columnName);
         return builder;
     }
 
@@ -172,7 +172,7 @@ public Query<T> build() {
                     builder.append(" AND ");
                 }
                 WhereCondition condition = iter.next();
-                condition.appendTo(builder, "T");
+                condition.appendTo(builder, tablePrefix);
                 condition.appendValuesTo(values);
             }
         }

File: DaoBase/src/de/greenrobot/dao/DaoException.java
Patch:
@@ -16,7 +16,6 @@
 package de.greenrobot.dao;
 
 import android.database.SQLException;
-import android.util.Log;
 
 /**
  * Exception thrown when something goes wrong in the DAO/ORM layer.

File: DaoBase/src/de/greenrobot/dao/DbUtils.java
Patch:
@@ -23,7 +23,6 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-import android.util.Log;
 
 public class DbUtils {
 

File: DaoBase/src/de/greenrobot/dao/Property.java
Patch:
@@ -16,7 +16,6 @@
 
 package de.greenrobot.dao;
 
-import de.greenrobot.dao.WhereCondition;
 import de.greenrobot.dao.WhereCondition.PropertyCondition;
 
 /**

File: DaoTest/src/de/greenrobot/dao/test/LazyListTest.java
Patch:
@@ -78,6 +78,7 @@ protected void testIerator(ArrayList<TestEntity> list, LazyList<TestEntity> list
             if (i > 0) {
                 TestEntity entityPrevious = list.get(i - 1);
                 assertEquals(entityPrevious.getId(), iterator.previous().getId());
+                iterator.next();
             }
 
             TestEntity entity = list.get(i);

File: DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
Patch:
@@ -54,6 +54,8 @@ public static void main(String[] args) throws Exception {
         relationEntity.addToOne(relationEntity, parentIdProperty).setName("parent");
         Property testIdProperty = relationEntity.addLongProperty("testId").getProperty();
         relationEntity.addToOne(testEntity, testIdProperty);
+        Property testIdNotNullProperty = relationEntity.addLongProperty("testIdNotNull").notNull().getProperty();
+        relationEntity.addToOne(testEntity, testIdNotNullProperty).setName("testNotNull");
         relationEntity.addStringProperty("simpleString");
         
         Entity dateEntity = schema.addEntity("DateEntity");

File: DaoTest/src-gen/de/greenrobot/dao/test/RelationEntity.java
Patch:
@@ -1,6 +1,7 @@
 package de.greenrobot.dao.test;
 
 import de.greenrobot.dao.test.DaoMaster;
+import de.greenrobot.dao.DaoException;
 
 // THIS CODE IS GENERATED, DO NOT EDIT.
 /** 

File: DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
Patch:
@@ -6,5 +6,5 @@
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray
+    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date
 }

File: DaoTest/src-gen/de/greenrobot/dao/test/RelationEntityDao.java
Patch:
@@ -1,12 +1,12 @@
-package de.greenrobot.testdao;
+package de.greenrobot.dao.test;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 
-import de.greenrobot.testdao.RelationEntity;
+import de.greenrobot.dao.test.RelationEntity;
 
 // THIS CODE IS GENERATED, DO NOT EDIT.
 /** 

File: DaoTest/src-gen/de/greenrobot/dao/test/SimpleEntity.java
Patch:
@@ -1,4 +1,4 @@
-package de.greenrobot.testdao;
+package de.greenrobot.dao.test;
 
 // THIS CODE IS GENERATED, DO NOT EDIT.
 /** 

File: DaoTest/src-gen/de/greenrobot/dao/test/SimpleEntityDao.java
Patch:
@@ -1,12 +1,12 @@
-package de.greenrobot.testdao;
+package de.greenrobot.dao.test;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 
-import de.greenrobot.testdao.SimpleEntity;
+import de.greenrobot.dao.test.SimpleEntity;
 
 // THIS CODE IS GENERATED, DO NOT EDIT.
 /** 

File: DaoTest/src-gen/de/greenrobot/dao/test/SimpleEntityNotNull.java
Patch:
@@ -1,4 +1,4 @@
-package de.greenrobot.testdao;
+package de.greenrobot.dao.test;
 
 // THIS CODE IS GENERATED, DO NOT EDIT.
 /** 

File: DaoTest/src-gen/de/greenrobot/dao/test/SimpleEntityNotNullDao.java
Patch:
@@ -1,12 +1,12 @@
-package de.greenrobot.testdao;
+package de.greenrobot.dao.test;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 
-import de.greenrobot.testdao.SimpleEntityNotNull;
+import de.greenrobot.dao.test.SimpleEntityNotNull;
 
 // THIS CODE IS GENERATED, DO NOT EDIT.
 /** 

File: DaoTest/src-gen/de/greenrobot/dao/test/TestEntity.java
Patch:
@@ -1,4 +1,4 @@
-package de.greenrobot.testdao;
+package de.greenrobot.dao.test;
 
 // THIS CODE IS GENERATED, DO NOT EDIT.
 /** 

File: DaoTest/src-gen/de/greenrobot/dao/test/TestEntityDao.java
Patch:
@@ -1,12 +1,12 @@
-package de.greenrobot.testdao;
+package de.greenrobot.dao.test;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 
-import de.greenrobot.testdao.TestEntity;
+import de.greenrobot.dao.test.TestEntity;
 
 // THIS CODE IS GENERATED, DO NOT EDIT.
 /** 

File: DaoTest/src/de/greenrobot/dao/test/DaoMasterTest.java
Patch:
@@ -1,7 +1,5 @@
 package de.greenrobot.dao.test;
 
-import de.greenrobot.testdao.DaoMaster;
-import de.greenrobot.testdao.SimpleEntity;
 
 public class DaoMasterTest extends AbstractDaoMasterTest<DaoMaster> {
 

File: DaoTest/src/de/greenrobot/dao/test/PerformanceTestNotNull.java
Patch:
@@ -1,7 +1,5 @@
 package de.greenrobot.dao.test;
 
-import de.greenrobot.testdao.SimpleEntityNotNull;
-import de.greenrobot.testdao.SimpleEntityNotNullDao;
 
 public class PerformanceTestNotNull extends PerformanceTest<SimpleEntityNotNullDao, SimpleEntityNotNull, Long> {
 

File: DaoTest/src/de/greenrobot/dao/test/SimpleEntityNotNullHelper.java
Patch:
@@ -1,6 +1,5 @@
 package de.greenrobot.dao.test;
 
-import de.greenrobot.testdao.SimpleEntityNotNull;
 
 public class SimpleEntityNotNullHelper {
     protected static SimpleEntityNotNull createEntity(Long key) {

File: DaoTest/src/de/greenrobot/dao/test/SimpleEntityNotNullTest.java
Patch:
@@ -2,9 +2,6 @@
 
 import java.util.Arrays;
 
-import de.greenrobot.testdao.SimpleEntityNotNull;
-import de.greenrobot.testdao.SimpleEntityNotNullDao;
-
 public class SimpleEntityNotNullTest extends AbstractDaoTestLongPk<SimpleEntityNotNullDao, SimpleEntityNotNull> {
 
     public SimpleEntityNotNullTest() {

File: DaoTest/src/de/greenrobot/dao/test/SimpleEntityTest.java
Patch:
@@ -2,9 +2,6 @@
 
 import java.util.Arrays;
 
-import de.greenrobot.testdao.SimpleEntity;
-import de.greenrobot.testdao.SimpleEntityDao;
-
 public class SimpleEntityTest extends AbstractDaoTestLongPk<SimpleEntityDao, SimpleEntity> {
 
     public SimpleEntityTest() {

File: DaoTest/src/de/greenrobot/dao/test/TestEntityTest.java
Patch:
@@ -1,8 +1,6 @@
 package de.greenrobot.dao.test;
 
 import de.greenrobot.dao.DaoException;
-import de.greenrobot.testdao.TestEntity;
-import de.greenrobot.testdao.TestEntityDao;
 
 public class TestEntityTest extends AbstractDaoTestLongPk<TestEntityDao, TestEntity> {
 

File: DaoTest/src/de/greenrobot/dao/test/ReflectionPerformanceTest.java
Patch:
@@ -6,7 +6,7 @@
 import junit.framework.TestCase;
 import android.util.Log;
 
-public class ReflectionPerformaceTest //* Not a regular unit test.  */ extends TestCase 
+public class ReflectionPerformanceTest
 {
 
     int intValue;

File: DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
Patch:
@@ -70,7 +70,7 @@ public ColumnBuilder addProperty(PropertyType propertyType, String propertyName)
 
     /** Adds a standard _id column required by standard Android classes, e.g. list adapters. */
     public ColumnBuilder addIdProperty() {
-        ColumnBuilder builder = new Property.ColumnBuilder(PropertyType.Int, "id");
+        ColumnBuilder builder = new Property.ColumnBuilder(PropertyType.Long, "id");
         builder.columnName("_id").primaryKey().asc();
         properties.add(builder.build());
         return builder;

File: DaoTest/src-gen/de/greenrobot/testdao/TestEntitySimple.java
Patch:
@@ -7,19 +7,19 @@
 */
 public class TestEntitySimple {
 
-    private Integer id; 
+    private Long id; 
     private Integer simpleInt; 
     private int simpleIntNotNull; 
     private Long simpleLong; 
     private long simpleLongNotNull; 
     private String simpleString; 
     private String simpleStringNotNull; 
     
-    public Integer getId() {
+    public Long getId() {
         return id;
     } 
 
-    public void setId(Integer id) {
+    public void setId(Long id) {
         this.id = id;
     } 
 

