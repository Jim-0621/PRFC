File: cola-components/cola-component-statemachine/src/test/java/com/alibaba/cola/test/StateMachineTest.java
Patch:
@@ -234,9 +234,9 @@ public void testParallel(){
             System.out.println(state);
         }
         States target2 = stateMachine.fireEvent(StateMachineTest.States.STATE2, StateMachineTest.Events.EVENT2, new Context());
-        Assert.assertEquals(States.STATE4,target2);
+        Assertions.assertEquals(States.STATE4,target2);
         States target3 = stateMachine.fireEvent(StateMachineTest.States.STATE3, StateMachineTest.Events.EVENT2, new Context());
-        Assert.assertEquals(States.STATE4,target3);
+        Assertions.assertEquals(States.STATE4,target3);
     }
 
     private Condition<Context> checkCondition() {

File: cola-components/cola-component-extension-starter/src/main/java/com/alibaba/cola/extension/register/ExtensionRegister.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.alibaba.cola.extension.*;
 import org.springframework.aop.support.AopUtils;
+import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.stereotype.Component;
 import org.springframework.util.ClassUtils;
@@ -46,9 +47,9 @@ public class ExtensionRegister {
     public void doRegistration(ExtensionPointI extensionObject) {
         Class<?> extensionClz = extensionObject.getClass();
         if (AopUtils.isAopProxy(extensionObject)) {
-            extensionClz = ClassUtils.getUserClass(extensionObject);
+            extensionClz = AopUtils.getTargetClass(extensionObject);
         }
-        Extension extensionAnn = AnnotationUtils.findAnnotation(extensionClz, Extension.class);
+        Extension extensionAnn = AnnotatedElementUtils.findMergedAnnotation(extensionClz, Extension.class);
         BizScenario bizScenario = BizScenario.valueOf(extensionAnn.bizId(), extensionAnn.useCase(), extensionAnn.scenario());
         ExtensionCoordinate extensionCoordinate = new ExtensionCoordinate(calculateExtensionPoint(extensionClz), bizScenario.getUniqueIdentity());
         ExtensionPointI preVal = extensionRepository.getExtensionRepo().put(extensionCoordinate, extensionObject);

File: cola-samples/charge/charging-system/src/test/java/com/huawei/charging/CleanArchTest.java
Patch:
@@ -15,6 +15,7 @@ public void protect_clean_arch() {
                 .importPackages("com.huawei.charging");
 
         layeredArchitecture()
+                .consideringAllDependencies()
                 .layer("adapter").definedBy("com.huawei.charging.adapter")
                 .layer("application").definedBy("com.huawei.charging.application")
                 .layer("domain").definedBy("com.huawei.charging.domain")

File: cola-components/cola-component-extension-starter/src/main/java/com/alibaba/cola/extension/Extension.java
Patch:
@@ -12,12 +12,13 @@
 import java.lang.annotation.*;
 
 /**
- * Extension 
+ * Extension
  * @author fulan.zjf 2017-11-05
  */
 @Inherited
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})
+@Repeatable(Extensions.class)
 @Component
 public @interface Extension {
     String bizId()  default BizScenario.DEFAULT_BIZ_ID;

File: cola-components/cola-component-statemachine/src/test/java/com/alibaba/cola/test/StateMachineTest.java
Patch:
@@ -69,7 +69,7 @@ public void testFailover() {
 
         builder.setFailoverCallback(new AlertFailoverCallbackImpl<>());
 
-        StateMachine<States, Events, Context> stateMachine = builder.build(MACHINE_ID);
+        StateMachine<States, Events, Context> stateMachine = builder.build(MACHINE_ID + "-testFailover");
         Assert.assertThrows(TransitionFailoverException.class,
             () -> stateMachine.fireEvent(States.STATE2, Events.EVENT1, new Context()));
     }
@@ -84,7 +84,7 @@ public void testVerify() {
             .when(checkCondition())
             .perform(doAction());
 
-        StateMachine<States, Events, Context> stateMachine = builder.build(MACHINE_ID);
+        StateMachine<States, Events, Context> stateMachine = builder.build(MACHINE_ID + "-testVerify");
 
         Assert.assertTrue(stateMachine.verify(States.STATE1, Events.EVENT1));
         Assert.assertFalse(stateMachine.verify(States.STATE1, Events.EVENT2));

File: cola-archetypes/cola-archetype-service/src/main/resources/archetype-resources/start/src/main/java/Application.java
Patch:
@@ -14,7 +14,6 @@
  * @author Frank Zhang
  */
 @SpringBootApplication
-@MapperScan("${package}.repository")
 public class Application {
 
     public static void main(String[] args) {

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/start/src/main/java/Application.java
Patch:
@@ -12,8 +12,7 @@
  *
  * @author Frank Zhang
  */
-@SpringBootApplication(scanBasePackages = {"${package}","com.alibaba.cola"})
-@MapperScan("${package}.repository")
+@SpringBootApplication(scanBasePackages = {"${package}", "com.alibaba.cola"})
 public class Application {
 
     public static void main(String[] args) {

File: cola-components/cola-component-catchlog-starter/src/main/java/com/alibaba/cola/catchlog/ApplicationContextHelper.java
Patch:
@@ -12,7 +12,7 @@
  * @author Frank Zhang
  * @date 2020-11-14 1:58 PM
  */
-@Component
+@Component("colaCatchLogApplicationContextHelper")
 @Slf4j
 public class ApplicationContextHelper implements ApplicationContextAware {
     private static ApplicationContext applicationContext;

File: cola-components/cola-component-domain-starter/src/main/java/com/alibaba/cola/domain/ApplicationContextHelper.java
Patch:
@@ -11,7 +11,7 @@
  * @author Frank Zhang
  * @date 2020-11-14 1:58 PM
  */
-@Component
+@Component("colaDomainApplicationContextHelper")
 public class ApplicationContextHelper implements ApplicationContextAware {
     private static ApplicationContext applicationContext;
 

File: cola-components/cola-component-catchlog-starter/src/main/java/com/alibaba/cola/catchlog/CatchLogAspect.java
Patch:
@@ -67,7 +67,7 @@ private Object handleException(ProceedingJoinPoint joinPoint, Throwable e) {
         if (e instanceof SysException) {
             log.error("SYS EXCEPTION :");
             log.error(e.getMessage(), e);
-            return ResponseHandlerFactory.get().handle(returnType, ((BizException) e).getErrCode(), e.getMessage());
+            return ResponseHandlerFactory.get().handle(returnType, ((SysException) e).getErrCode(), e.getMessage());
         }
 
         log.error("UNKNOWN EXCEPTION :");

File: cola-components/cola-component-catchlog-starter/src/test/java/com/alibaba/cola/catchlog/test/Demo.java
Patch:
@@ -68,7 +68,7 @@ public void executeWithExceptionAndVoid(){
         }
     }
 
-    public SingleResponse executeWithBizExceptionAndResponse(){
+    public Response executeWithBizExceptionAndResponse(){
         if(true){
             throw new BizException("execute With BizException And Response");
         }

File: cola-components/cola-component-catchlog-starter/src/main/java/com/alibaba/cola/catchlog/CatchLogAspect.java
Patch:
@@ -11,6 +11,7 @@
 import org.aspectj.lang.annotation.Aspect;
 import org.aspectj.lang.annotation.Pointcut;
 import org.aspectj.lang.reflect.MethodSignature;
+import org.springframework.core.annotation.Order;
 
 /**
  * @ Description   :  Catching and Logging
@@ -20,6 +21,7 @@
  */
 @Aspect
 @Slf4j
+@Order(1)
 public class CatchLogAspect {
 
     /**

File: cola-components/cola-component-statemachine/src/main/java/com/alibaba/cola/statemachine/Transition.java
Patch:
@@ -57,7 +57,7 @@ public interface Transition<S, E, C>{
      * @return the target state
      */
 
-    State<S,E,C> transit(C ctx);
+    State<S, E, C> transit(C ctx, boolean checkCondition);
     /**
      * Verify transition correctness
      */

File: cola-components/cola-component-statemachine/src/main/java/com/alibaba/cola/statemachine/impl/StateMachineImpl.java
Patch:
@@ -40,7 +40,7 @@ public S fireEvent(S sourceStateId, E event, C ctx) {
             return sourceStateId;
         }
 
-        return transition.transit(ctx).getId();
+        return transition.transit(ctx, false).getId();
     }
 
     private Transition<S, E, C> routeTransition(S sourceStateId, E event, C ctx) {

File: cola-components/cola-component-statemachine/src/main/java/com/alibaba/cola/statemachine/impl/TransitionImpl.java
Patch:
@@ -83,10 +83,10 @@ public void setAction(Action<S, E, C> action) {
     }
 
     @Override
-    public State<S, E, C> transit(C ctx) {
+    public State<S, E, C> transit(C ctx, boolean checkCondition) {
         Debugger.debug("Do transition: "+this);
         this.verify();
-        if(condition == null || condition.isSatisfied(ctx)){
+        if (!checkCondition || condition == null || condition.isSatisfied(ctx)) {
             if(action != null){
                 action.execute(source.getId(), target.getId(), event, ctx);
             }

File: cola-components/cola-component-statemachine/src/main/java/com/alibaba/cola/statemachine/Transition.java
Patch:
@@ -57,7 +57,7 @@ public interface Transition<S, E, C>{
      * @return the target state
      */
 
-    State<S,E,C> transit(C ctx);
+    State<S, E, C> transit(C ctx, boolean checkCondition);
     /**
      * Verify transition correctness
      */

File: cola-components/cola-component-statemachine/src/main/java/com/alibaba/cola/statemachine/impl/StateMachineImpl.java
Patch:
@@ -40,7 +40,7 @@ public S fireEvent(S sourceStateId, E event, C ctx) {
             return sourceStateId;
         }
 
-        return transition.transit(ctx).getId();
+        return transition.transit(ctx, false).getId();
     }
 
     private Transition<S, E, C> routeTransition(S sourceStateId, E event, C ctx) {

File: cola-components/cola-component-statemachine/src/main/java/com/alibaba/cola/statemachine/impl/TransitionImpl.java
Patch:
@@ -83,10 +83,10 @@ public void setAction(Action<S, E, C> action) {
     }
 
     @Override
-    public State<S, E, C> transit(C ctx) {
+    public State<S, E, C> transit(C ctx, boolean checkCondition) {
         Debugger.debug("Do transition: "+this);
         this.verify();
-        if(condition == null || condition.isSatisfied(ctx)){
+        if (!checkCondition || condition == null || condition.isSatisfied(ctx)) {
             if(action != null){
                 action.execute(source.getId(), target.getId(), event, ctx);
             }

File: cola-components/cola-component-catchlog-starter/src/main/java/com/alibaba/cola/catchlog/CatchLogAspect.java
Patch:
@@ -11,6 +11,7 @@
 import org.aspectj.lang.annotation.Aspect;
 import org.aspectj.lang.annotation.Pointcut;
 import org.aspectj.lang.reflect.MethodSignature;
+import org.springframework.core.annotation.Order;
 
 /**
  * @ Description   :  Catching and Logging
@@ -20,6 +21,7 @@
  */
 @Aspect
 @Slf4j
+@Order(1)
 public class CatchLogAspect {
 
     /**

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-client/src/main/java/api/CustomerServiceI.java
Patch:
@@ -11,7 +11,7 @@
 
 public interface CustomerServiceI {
 
-    public Response addCustomer(CustomerAddCmd customerAddCmd);
+    Response addCustomer(CustomerAddCmd customerAddCmd);
 
-    public MultiResponse<CustomerDTO> listByName(CustomerListByNameQry customerListByNameQry);
+    MultiResponse<CustomerDTO> listByName(CustomerListByNameQry customerListByNameQry);
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/Customer.java
Patch:
@@ -7,7 +7,7 @@
 import com.alibaba.cola.exception.BizException;
 import lombok.Data;
 
-//Domain Entity can choose to extends the domain model which is used for DTO
+//Domain Entity can choose to extend the domain model which is used for DTO
 @Data
 @Entity
 public class Customer{

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/domainservice/CreditChecker.java
Patch:
@@ -3,7 +3,7 @@
 #set( $symbol_escape = '\' )
 package ${package}.domain.customer.domainservice;
 
-//The domain's ablility can also be placed here
+//The domain's ability can also be placed here
 public class CreditChecker{
 
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/gateway/CreditGateway.java
Patch:
@@ -3,10 +3,9 @@
 #set( $symbol_escape = '\' )
 package ${package}.domain.customer.gateway;
 
-import ${package}.domain.customer.Customer;
 import ${package}.domain.customer.Credit;
 
-//Assume that the credit info is in antoher distributed Service
+//Assume that the credit info is in another distributed Service
 public interface CreditGateway {
-    public Credit getCredit(String customerId);
+    Credit getCredit(String customerId);
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/gateway/CustomerGateway.java
Patch:
@@ -6,5 +6,5 @@
 import ${package}.domain.customer.Customer;
 
 public interface CustomerGateway {
-    public Customer getByById(String customerId);
+    Customer getByById(String customerId);
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-infrastructure/src/main/java/customer/CustomerMapper.java
Patch:
@@ -8,5 +8,5 @@
 @Mapper
 public interface CustomerMapper{
 
-  public CustomerDO getById(String customerId);
+  CustomerDO getById(String customerId);
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-client/src/main/java/api/CustomerServiceI.java
Patch:
@@ -11,7 +11,7 @@
 
 public interface CustomerServiceI {
 
-    public Response addCustomer(CustomerAddCmd customerAddCmd);
+    Response addCustomer(CustomerAddCmd customerAddCmd);
 
-    public MultiResponse<CustomerDTO> listByName(CustomerListByNameQry customerListByNameQry);
+    MultiResponse<CustomerDTO> listByName(CustomerListByNameQry customerListByNameQry);
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/Customer.java
Patch:
@@ -7,7 +7,7 @@
 import com.alibaba.cola.exception.BizException;
 import lombok.Data;
 
-//Domain Entity can choose to extends the domain model which is used for DTO
+//Domain Entity can choose to extend the domain model which is used for DTO
 @Data
 @Entity
 public class Customer{

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/domainservice/CreditChecker.java
Patch:
@@ -3,7 +3,7 @@
 #set( $symbol_escape = '\' )
 package ${package}.domain.customer.domainservice;
 
-//The domain's ablility can also be placed here
+//The domain's ability can also be placed here
 public class CreditChecker{
 
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/gateway/CreditGateway.java
Patch:
@@ -3,10 +3,9 @@
 #set( $symbol_escape = '\' )
 package ${package}.domain.customer.gateway;
 
-import ${package}.domain.customer.Customer;
 import ${package}.domain.customer.Credit;
 
-//Assume that the credit info is in antoher distributed Service
+//Assume that the credit info is in another distributed Service
 public interface CreditGateway {
-    public Credit getCredit(String customerId);
+    Credit getCredit(String customerId);
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/gateway/CustomerGateway.java
Patch:
@@ -6,5 +6,5 @@
 import ${package}.domain.customer.Customer;
 
 public interface CustomerGateway {
-    public Customer getByById(String customerId);
+    Customer getByById(String customerId);
 }

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-infrastructure/src/main/java/customer/CustomerMapper.java
Patch:
@@ -8,5 +8,5 @@
 @Mapper
 public interface CustomerMapper{
 
-  public CustomerDO getById(String customerId);
+  CustomerDO getById(String customerId);
 }

File: cola-archetypes/cola-archetype-service/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/Customer.java
Patch:
@@ -31,7 +31,7 @@ public boolean isSME() {
         return registeredCapital > 10000 && registeredCapital < 1000000; //注册资金大于10万小于100万的为中小企业
     }
 
-    public void checkConfilict(){
+    public void checkConflict(){
         //Per different biz, the check policy could be different, if so, use ExtensionPoint
         if("ConflictCompanyName".equals(this.companyName)){
             throw new BizException(this.companyName+" has already existed, you can not add it");

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/Customer.java
Patch:
@@ -31,7 +31,7 @@ public boolean isSME() {
         return registeredCapital > 10000 && registeredCapital < 1000000; //注册资金大于10万小于100万的为中小企业
     }
 
-    public void checkConfilict(){
+    public void checkConflict(){
         //Per different biz, the check policy could be different, if so, use ExtensionPoint
         if("ConflictCompanyName".equals(this.companyName)){
             throw new BizException(this.companyName+" has already existed, you can not add it");

File: cola-archetypes/cola-archetype-service/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/Customer.java
Patch:
@@ -31,7 +31,7 @@ public boolean isSME() {
         return registeredCapital > 10000 && registeredCapital < 1000000; //注册资金大于10万小于100万的为中小企业
     }
 
-    public void checkConfilict(){
+    public void checkConflict(){
         //Per different biz, the check policy could be different, if so, use ExtensionPoint
         if("ConflictCompanyName".equals(this.companyName)){
             throw new BizException(this.companyName+" has already existed, you can not add it");

File: cola-archetypes/cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-domain/src/main/java/domain/customer/Customer.java
Patch:
@@ -31,7 +31,7 @@ public boolean isSME() {
         return registeredCapital > 10000 && registeredCapital < 1000000; //注册资金大于10万小于100万的为中小企业
     }
 
-    public void checkConfilict(){
+    public void checkConflict(){
         //Per different biz, the check policy could be different, if so, use ExtensionPoint
         if("ConflictCompanyName".equals(this.companyName)){
             throw new BizException(this.companyName+" has already existed, you can not add it");

File: samples/craftsman/craftsman-adapter/src/main/java/com/alibaba/craftsman/web/MetricsController.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.craftsman.controller;
+package com.alibaba.craftsman.web;
 
 import com.alibaba.cola.dto.MultiResponse;
 import com.alibaba.cola.dto.Response;

File: samples/craftsman/craftsman-app/src/main/java/com/alibaba/craftsman/command/query/ATAMetricQryExe.java
Patch:
@@ -27,7 +27,7 @@ public MultiResponse<ATAMetricCO> execute(ATAMetricQry cmd) {
             ataMetricCO.setOwnerId(metricDO.getUserId());
             ataMetricCOList.add(ataMetricCO);
         });
-        return MultiResponse.ofWithoutTotal(ataMetricCOList);
+        return MultiResponse.of(ataMetricCOList);
     }
 
 }

File: samples/craftsman/craftsman-app/src/main/java/com/alibaba/craftsman/command/query/UserProfileListQryExe.java
Patch:
@@ -26,7 +26,7 @@ public MultiResponse<UserProfileCO> execute(UserProfileListQry qry) {
             BeanUtils.copyProperties(userDO, userProfileCO);
             userProfileCOList.add(userProfileCO);
         });
-        return MultiResponse.ofWithoutTotal(userProfileCOList);
+        return MultiResponse.of(userProfileCOList);
     }
 
 }

File: samples/craftsman/craftsman-app/src/main/java/com/alibaba/craftsman/service/MetricsServiceImpl.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.craftsman.service;
 
+import com.alibaba.cola.catchlog.CatchAndLog;
 import com.alibaba.cola.dto.MultiResponse;
 import com.alibaba.cola.dto.Response;
 import com.alibaba.craftsman.api.MetricsServiceI;
@@ -18,6 +19,7 @@
  * @date 2019-03-01 11:41 AM
  */
 @Service
+@CatchAndLog
 public class MetricsServiceImpl implements MetricsServiceI{
 
     @Resource

File: samples/craftsman/craftsman-app/src/main/java/com/alibaba/craftsman/service/UserProfileServiceImpl.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.craftsman.service;
 
+import com.alibaba.cola.catchlog.CatchAndLog;
 import com.alibaba.cola.dto.MultiResponse;
 import com.alibaba.cola.dto.Response;
 import com.alibaba.cola.dto.SingleResponse;
@@ -22,6 +23,7 @@
  * @date 2019-02-28 6:22 PM
  */
 @Service
+@CatchAndLog
 public class UserProfileServiceImpl implements UserProfileServiceI{
     @Resource
     private UserProfileAddCmdExe userProfileAddCmdExe;

File: samples/craftsman/craftsman-domain/src/main/java/com/alibaba/craftsman/domain/metrics/Metric.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.craftsman.domain.metrics;
 
 
-import com.alibaba.cola.domain.EntityObject;
+import com.alibaba.cola.domain.Entity;
 import com.alibaba.craftsman.domain.user.UserProfile;
 import lombok.Getter;
 import lombok.Setter;
@@ -12,7 +12,8 @@
  * @author Frank Zhang
  * @date 2018-07-04 1:23 PM
  */
-public abstract class Metric extends EntityObject implements Measurable{
+@Entity
+public abstract class Metric implements Measurable{
 
     private double score;
 

File: samples/craftsman/craftsman-infrastructure/src/main/java/com/alibaba/craftsman/convertor/MetricConvertor.java
Patch:
@@ -15,6 +15,8 @@ public static MetricDO toDataObject(MetricItem metricItem){
         metricDO.setMainMetric(metricItem.getSubMetric().getParent().getCode());
         metricDO.setSubMetric(metricItem.getSubMetric().getCode());
         metricDO.setMetricItem(metricItem.toJsonString());
+        metricDO.setCreator("test");
+        metricDO.setModifier("test");
         return metricDO;
     }
 

File: cola-components/cola-component-extension-starter/src/main/java/com/alibaba/cola/extension/register/ExtensionBootstrap.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.context.ApplicationContextAware;
 import org.springframework.stereotype.Component;
 
+import javax.annotation.PostConstruct;
 import javax.annotation.Resource;
 import java.util.Map;
 
@@ -24,6 +25,7 @@ public class ExtensionBootstrap implements ApplicationContextAware {
 
     private ApplicationContext applicationContext;
 
+    @PostConstruct
     public void init(){
         Map<String, Object> extensionBeans = applicationContext.getBeansWithAnnotation(Extension.class);
         extensionBeans.values().forEach(

File: cola-components/cola-component-extension-starter/src/main/java/com/alibaba/cola/extension/register/ExtensionBootstrap.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.context.ApplicationContextAware;
 import org.springframework.stereotype.Component;
 
+import javax.annotation.PostConstruct;
 import javax.annotation.Resource;
 import java.util.Map;
 
@@ -24,6 +25,7 @@ public class ExtensionBootstrap implements ApplicationContextAware {
 
     private ApplicationContext applicationContext;
 
+    @PostConstruct
     public void init(){
         Map<String, Object> extensionBeans = applicationContext.getBeansWithAnnotation(Extension.class);
         extensionBeans.values().forEach(

File: sample/craftsman/craftsman-domain/src/test/java/com/alibaba/craftsman/domain/InfluenceMetricTest.java
Patch:
@@ -31,7 +31,7 @@ public void testQAScore(){
         Assert.assertEquals(124.5, influenceMetric.calculateScore(), 0.01);
     }
 
-    private void prepareSubMetrics(InfluenceMetric influenceMetric) {
+    public static void prepareSubMetrics(InfluenceMetric influenceMetric) {
         ATAMetric ataMetric = new ATAMetric(influenceMetric);
         ataMetric.addMetricItem( new ATAMetricItem("article",19,99,14,2));
         ataMetric.addMetricItem( new ATAMetricItem("article",20,100,15,3) );

File: cola-framework-core/src/main/java/com/alibaba/cola/event/EventHub.java
Patch:
@@ -50,9 +50,10 @@ public void register(Class<? extends EventI> eventClz, EventHandlerI executor){
         List<EventHandlerI> eventHandlers = eventRepository.get(eventClz);
         if(eventHandlers == null){
             eventHandlers = new ArrayList<>();
+            eventRepository.put(eventClz, eventHandlers);
         }
         eventHandlers.add(executor);
-        eventRepository.put(eventClz, eventHandlers);
+
     }
 
     private List<EventHandlerI> findHandler(Class<? extends EventI> eventClass){

File: cola-framework-core/src/main/java/com/alibaba/cola/event/EventHub.java
Patch:
@@ -50,9 +50,10 @@ public void register(Class<? extends EventI> eventClz, EventHandlerI executor){
         List<EventHandlerI> eventHandlers = eventRepository.get(eventClz);
         if(eventHandlers == null){
             eventHandlers = new ArrayList<>();
+            eventRepository.put(eventClz, eventHandlers);
         }
         eventHandlers.add(executor);
-        eventRepository.put(eventClz, eventHandlers);
+
     }
 
     private List<EventHandlerI> findHandler(Class<? extends EventI> eventClass){

File: cola-framework-core/src/main/java/com/alibaba/cola/event/EventHub.java
Patch:
@@ -50,10 +50,9 @@ public void register(Class<? extends EventI> eventClz, EventHandlerI executor){
         List<EventHandlerI> eventHandlers = eventRepository.get(eventClz);
         if(eventHandlers == null){
             eventHandlers = new ArrayList<>();
-            eventRepository.put(eventClz, eventHandlers);
         }
         eventHandlers.add(executor);
-
+        eventRepository.put(eventClz, eventHandlers);
     }
 
     private List<EventHandlerI> findHandler(Class<? extends EventI> eventClass){

File: cola-framework-core/src/main/java/com/alibaba/cola/event/EventHub.java
Patch:
@@ -50,10 +50,9 @@ public void register(Class<? extends EventI> eventClz, EventHandlerI executor){
         List<EventHandlerI> eventHandlers = eventRepository.get(eventClz);
         if(eventHandlers == null){
             eventHandlers = new ArrayList<>();
-            eventRepository.put(eventClz, eventHandlers);
         }
         eventHandlers.add(executor);
-
+        eventRepository.put(eventClz, eventHandlers);
     }
 
     private List<EventHandlerI> findHandler(Class<? extends EventI> eventClass){

File: cola-archetype-web/src/main/resources/archetype-resources/__rootArtifactId__-app/src/main/java/executor/CustomerAddCmdExe.java
Patch:
@@ -3,7 +3,6 @@
 #set( $symbol_escape = '\' )
 package ${package}.executor;
 
-import com.alibaba.cola.domain.DomainEventServiceI;
 import com.alibaba.cola.dto.Response;
 import com.alibaba.cola.exception.BizException;
 import ${package}.dto.CustomerAddCmd;

File: cola-archetype-web/src/main/resources/archetype-resources/start/src/test/java/test/CustomerServiceTest.java
Patch:
@@ -50,7 +50,7 @@ public void testCustomerAddSuccess(){
         Assert.assertTrue(response.isSuccess());
     }
 
-    @Test
+    @Test(expected = BizException.class)
     public void testCustomerAddCompanyNameConflict(){
         //1.prepare
         CustomerAddCmd customerAddCmd = new CustomerAddCmd();

File: cola-framework/cola-core/src/main/java/com/alibaba/cola/extension/ExtensionExecutor.java
Patch:
@@ -87,6 +87,7 @@ private <Ext> Ext loopTry(Class<Ext> targetClz, String bizCode){
             if (extension != null) {
                 return extension;
             }
+            lastDotIndex = bizCode.lastIndexOf(ColaConstant.BIZ_CODE_SEPARATOR);
         }
         return null;
     }

File: cola-archetype/src/main/resources/archetype-resources/start/src/test/java/TestConfig.java
Patch:
@@ -15,7 +15,7 @@
  * @date 2018-08-08 12:33 PM
  */
 @Configuration
-@ComponentScan(basePackages = {"com.alibaba.cola", "com.alibaba.demo"})
+@ComponentScan(basePackages = {"com.alibaba.cola", "${package}"})
 public class TestConfig {
 
     public TestConfig() {

File: cola-archetype/src/main/resources/archetype-resources/start/src/test/java/TestConfig.java
Patch:
@@ -15,7 +15,7 @@
  * @date 2018-08-08 12:33 PM
  */
 @Configuration
-@ComponentScan(basePackages = {"com.alibaba.cola", "com.alibaba.demo"})
+@ComponentScan(basePackages = {"com.alibaba.cola", "${package}"})
 public class TestConfig {
 
     public TestConfig() {

File: sofa-framework/sofa-core/src/main/java/com/alibaba/sofa/rule/RuleExecutor.java
Patch:
@@ -27,11 +27,11 @@ public class RuleExecutor extends ExtensionExecutor {
     @Override
     protected <C> C locateComponent(Class<C> targetClz) {
         C rule = (C) plainRuleRepository.getPlainRules().get(targetClz);
-        return null != rule ? rule : super.locateExtension(targetClz);
+        return null != rule ? rule : super.locateComponent(targetClz);
     }
 
     public void validate(Class<? extends RuleI> targetClz, Object... candidate) {
-        RuleI rule = locateComponent(targetClz);
+        RuleI rule = this.locateComponent(targetClz);
         rule.validate(candidate);
     }
 }

File: sofa-framework/sofa-core/src/main/java/com/alibaba/sofa/validator/ValidatorExecutor.java
Patch:
@@ -30,7 +30,7 @@ public void validate(Class<? extends ValidatorI> targetClz, Object candidate) {
     @Override
     protected <C> C locateComponent(Class<C> targetClz) {
         C validator = (C) plainValidatorRepository.getPlainValidators().get(targetClz);
-        return null != validator ? validator : super.locateExtension(targetClz);
+        return null != validator ? validator : super.locateComponent(targetClz);
     }
 
 }
\ No newline at end of file

File: sofa-framework/sofa-core/src/test/java/com/alibaba/sofa/test/customer/AddCustomerCmdExe.java
Patch:
@@ -35,7 +35,7 @@ public Response execute(AddCustomerCmd cmd) {
         validatorExecutor.validate(AddCustomerValidatorExtPt.class, cmd);
 
         //Convert CO to Entity
-        CustomerEntity customerEntity = extensionExecutor.execute(CustomerConvertorExtPt.class, extension -> extension.convert(cmd.getCustomerCO()));
+        CustomerEntity customerEntity = extensionExecutor.execute(CustomerConvertorExtPt.class, extension -> extension.clientToEntity(cmd.getCustomerCO()));
 
         //Call Domain Entity for business logic processing
         logger.info("Call Domain Entity for business logic processing..."+customerEntity);

File: sofa-framework/sofa-core/src/test/java/com/alibaba/sofa/test/customer/convertor/CustomerBizOneConvertorExt.java
Patch:
@@ -20,8 +20,8 @@ public class CustomerBizOneConvertorExt  implements CustomerConvertorExtPt{
     private CustomerConvertor customerConvertor;//Composite basic convertor to do basic conversion
 
     @Override
-    public CustomerEntity convert(CustomerCO customerCO){
-        CustomerEntity customerEntity = customerConvertor.convert(customerCO);
+    public CustomerEntity clientToEntity(CustomerCO customerCO){
+        CustomerEntity customerEntity = customerConvertor.clientToEntity(customerCO);
         //In this business, AD and RFQ are regarded as different source
         if(Constants.SOURCE_AD.equals(customerCO.getSource()))
         {

File: sofa-framework/sofa-core/src/test/java/com/alibaba/sofa/test/customer/convertor/CustomerBizTwoConvertorExt.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.sofa.extension.Extension;
 import com.alibaba.sofa.test.customer.Constants;
 import com.alibaba.sofa.test.customer.CustomerCO;
-import com.alibaba.sofa.test.customer.convertor.CustomerConvertorExtPt;
 import com.alibaba.sofa.test.customer.entity.CustomerEntity;
 import com.alibaba.sofa.test.customer.entity.SourceType;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -21,8 +20,8 @@ public class CustomerBizTwoConvertorExt implements CustomerConvertorExtPt{
     private CustomerConvertor customerConvertor;//Composite basic convertor to do basic conversion
 
     @Override
-    public CustomerEntity convert(CustomerCO customerCO){
-        CustomerEntity customerEntity = customerConvertor.convert(customerCO);
+    public CustomerEntity clientToEntity(CustomerCO customerCO){
+        CustomerEntity customerEntity = customerConvertor.clientToEntity(customerCO);
         //In this business, if customers from RFQ and Advertisement are both regarded as Advertisement
         if(Constants.SOURCE_AD.equals(customerCO.getSource()) || Constants.SOURCE_RFQ.equals(customerCO.getSource()))
         {

File: sofa-framework/sofa-core/src/test/java/com/alibaba/sofa/test/customer/convertor/CustomerConvertor.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.sofa.common.ApplicationContextHelper;
 import com.alibaba.sofa.convertor.ConvertorI;
 import com.alibaba.sofa.test.customer.CustomerCO;
+import com.alibaba.sofa.test.customer.CustomerDO;
 import com.alibaba.sofa.test.customer.entity.CustomerEntity;
 import com.alibaba.sofa.test.customer.entity.rule.CustomerRuleExtPt;
 import org.springframework.beans.BeansException;
@@ -18,10 +19,10 @@
  * @date 2018-01-07 3:08 AM
  */
 @Component
-public class CustomerConvertor implements ConvertorI<CustomerCO, CustomerEntity>{
+public class CustomerConvertor implements ConvertorI<CustomerCO, CustomerEntity, CustomerDO>{
 
     @Override
-    public CustomerEntity convert(CustomerCO customerCO){
+    public CustomerEntity clientToEntity(CustomerCO customerCO){
         CustomerEntity customerEntity = (CustomerEntity)ApplicationContextHelper.getBean(CustomerEntity.class);
         customerEntity.setCompanyName(customerCO.getCompanyName());
         customerEntity.setCustomerType(customerCO.getCustomerType());

File: sofa-framework/sofa-core/src/test/java/com/alibaba/sofa/test/customer/convertor/CustomerConvertorExtPt.java
Patch:
@@ -13,5 +13,5 @@
  */
 public interface CustomerConvertorExtPt extends ConvertorI, ExtensionPointI {
 
-    public CustomerEntity convert(CustomerCO customerCO);
+    public CustomerEntity clientToEntity(CustomerCO customerCO);
 }

File: sofa-framework/sofa-test/src/main/java/com/alibaba/sofa/pandora/test/TestExecutor.java
Patch:
@@ -24,7 +24,7 @@ public class TestExecutor {
     private String className;
     private String methodName;
     
-    private Map<String, Object> testInstanceCache = new HashMap<>();
+    private Map<String, Object> testInstanceCache = new HashMap<String, Object>();
     
     private ApplicationContext context;
 

