File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicFileUtils.java
Patch:
@@ -443,7 +443,7 @@ static void checkAndTrimCache() {
     static void checkAndTrimResourceCache() {
         HashMap<String, List<String>> currentCacheFileMap = new HashMap<String, List<String>>();
         long startTime = System.currentTimeMillis();
-        long cacheFileSize = calcCacheSize(getSonicCacheDirPath(), currentCacheFileMap);
+        long cacheFileSize = calcCacheSize(getSonicResourceCachePath(), currentCacheFileMap);
 
         final long MAX_CACHE_SIZE = SonicEngine.getInstance().getConfig().SONIC_RESOURCE_CACHE_MAX_SIZE;
 

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicServer.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static com.tencent.sonic.sdk.SonicSession.OFFLINE_MODE_HTTP;
@@ -246,7 +247,7 @@ public void disconnect() {
     public  Map<String, List<String>> getResponseHeaderFields() {
         if (null == cachedResponseHeaders) {
             // new cachedResponseHeaders
-            cachedResponseHeaders = new HashMap<String, List<String>>();
+            cachedResponseHeaders = new ConcurrentHashMap<String, List<String>>();
             // fill custom headers
             List<String> tmpHeaderList;
             if (session.config.customResponseHeaders != null && session.config.customResponseHeaders.size() > 0) {
@@ -271,8 +272,6 @@ public  Map<String, List<String>> getResponseHeaderFields() {
                     String key = entry.getKey();
                     if (!TextUtils.isEmpty(key)) {
                         cachedResponseHeaders.put(key.toLowerCase(), entry.getValue());
-                    } else {
-                        cachedResponseHeaders.put(key, entry.getValue());
                     }
                 }
             }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicServer.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static com.tencent.sonic.sdk.SonicSession.OFFLINE_MODE_HTTP;
@@ -246,7 +247,7 @@ public void disconnect() {
     public  Map<String, List<String>> getResponseHeaderFields() {
         if (null == cachedResponseHeaders) {
             // new cachedResponseHeaders
-            cachedResponseHeaders = new HashMap<String, List<String>>();
+            cachedResponseHeaders = new ConcurrentHashMap<String, List<String>>();
             // fill custom headers
             List<String> tmpHeaderList;
             if (session.config.customResponseHeaders != null && session.config.customResponseHeaders.size() > 0) {
@@ -271,8 +272,6 @@ public  Map<String, List<String>> getResponseHeaderFields() {
                     String key = entry.getKey();
                     if (!TextUtils.isEmpty(key)) {
                         cachedResponseHeaders.put(key.toLowerCase(), entry.getValue());
-                    } else {
-                        cachedResponseHeaders.put(key, entry.getValue());
                     }
                 }
             }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicServer.java
Patch:
@@ -458,7 +458,7 @@ public void onClose(boolean readComplete, ByteArrayOutputStream outputStream) {
                 SonicUtils.log(TAG, Log.ERROR, "session(" + session.sId + "), onClose error:" + e.getMessage() + ".");
             }
         }
-        session.onServerClosed(readComplete);
+        session.onServerClosed(this, readComplete);
     }
 
 }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicServer.java
Patch:
@@ -458,7 +458,7 @@ public void onClose(boolean readComplete, ByteArrayOutputStream outputStream) {
                 SonicUtils.log(TAG, Log.ERROR, "session(" + session.sId + "), onClose error:" + e.getMessage() + ".");
             }
         }
-        session.onServerClosed(readComplete);
+        session.onServerClosed(this, readComplete);
     }
 
 }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSession.java
Patch:
@@ -991,7 +991,7 @@ protected boolean shouldSetCookieAsynchronous() {
      */
     protected boolean setCookiesFromHeaders(Map<String, List<String>> headers, boolean executeInNewThread) {
         if (null != headers) {
-            final List<String> cookies = headers.get(SonicSessionConnection.HTTP_HEAD_FILED_SET_COOKIE);
+            final List<String> cookies = headers.get(SonicSessionConnection.HTTP_HEAD_FILED_SET_COOKIE.toLowerCase());
             if (null != cookies && 0 != cookies.size()) {
                 if (!executeInNewThread) {
                     return SonicEngine.getInstance().getRuntime().setCookie(getCurrentUrl(), cookies);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSession.java
Patch:
@@ -991,7 +991,7 @@ protected boolean shouldSetCookieAsynchronous() {
      */
     protected boolean setCookiesFromHeaders(Map<String, List<String>> headers, boolean executeInNewThread) {
         if (null != headers) {
-            final List<String> cookies = headers.get(SonicSessionConnection.HTTP_HEAD_FILED_SET_COOKIE);
+            final List<String> cookies = headers.get(SonicSessionConnection.HTTP_HEAD_FILED_SET_COOKIE.toLowerCase());
             if (null != cookies && 0 != cookies.size()) {
                 if (!executeInNewThread) {
                     return SonicEngine.getInstance().getRuntime().setCookie(getCurrentUrl(), cookies);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/QuickSonicSession.java
Patch:
@@ -361,7 +361,7 @@ private void handleClientCoreMessage_TemplateChange(Message msg) {
                 setResult(SONIC_RESULT_CODE_TEMPLATE_CHANGE, SONIC_RESULT_CODE_TEMPLATE_CHANGE, false);
             } else {
                 SonicUtils.log(TAG, Log.INFO, "handleClientCoreMessage_TemplateChange:not refresh.");
-                setResult(SONIC_RESULT_CODE_TEMPLATE_CHANGE, SONIC_RESULT_CODE_HIT_CACHE, false);
+                setResult(SONIC_RESULT_CODE_TEMPLATE_CHANGE, SONIC_RESULT_CODE_HIT_CACHE, true);
             }
         } else {
             SonicUtils.log(TAG, Log.INFO, "handleClientCoreMessage_TemplateChange:oh yeah template change hit 304.");

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -269,6 +269,9 @@ protected void handleFlow_TemplateChange(String newHtml) {
                     if (SonicUtils.needRefreshPage(cacheOffline)) {
                         Bundle data = new Bundle();
                         data.putBoolean(TEMPLATE_CHANGE_BUNDLE_PARAMS_REFRESH, true);
+                        msg.setData(data);
+                    } else {
+                        msg.arg2 = SONIC_RESULT_CODE_HIT_CACHE;
                     }
                 }
                 isCachePendingStream.set(false);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/QuickSonicSession.java
Patch:
@@ -361,7 +361,7 @@ private void handleClientCoreMessage_TemplateChange(Message msg) {
                 setResult(SONIC_RESULT_CODE_TEMPLATE_CHANGE, SONIC_RESULT_CODE_TEMPLATE_CHANGE, false);
             } else {
                 SonicUtils.log(TAG, Log.INFO, "handleClientCoreMessage_TemplateChange:not refresh.");
-                setResult(SONIC_RESULT_CODE_TEMPLATE_CHANGE, SONIC_RESULT_CODE_HIT_CACHE, false);
+                setResult(SONIC_RESULT_CODE_TEMPLATE_CHANGE, SONIC_RESULT_CODE_HIT_CACHE, true);
             }
         } else {
             SonicUtils.log(TAG, Log.INFO, "handleClientCoreMessage_TemplateChange:oh yeah template change hit 304.");

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -269,6 +269,9 @@ protected void handleFlow_TemplateChange(String newHtml) {
                     if (SonicUtils.needRefreshPage(cacheOffline)) {
                         Bundle data = new Bundle();
                         data.putBoolean(TEMPLATE_CHANGE_BUNDLE_PARAMS_REFRESH, true);
+                        msg.setData(data);
+                    } else {
+                        msg.arg2 = SONIC_RESULT_CODE_HIT_CACHE;
                     }
                 }
                 isCachePendingStream.set(false);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicUtils.java
Patch:
@@ -160,7 +160,7 @@ private static void handleCacheControl(Map<String, List<String>> headers, SonicD
                     try {
                         long maxAgeTime = Long.parseLong(maxAgeStr) * 1000;
                         if (maxAgeTime != 0) {
-                            sessionData.expiredTime = Long.parseLong(maxAgeStr) * 1000 + System.currentTimeMillis();
+                            sessionData.expiredTime = maxAgeTime + System.currentTimeMillis();
                         }
                     } catch (Exception e) {
                         log(TAG, Log.ERROR, "handleCacheControl:sessionId(" + sessionData.sessionId + ") error:" + e.getMessage());

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicUtils.java
Patch:
@@ -160,7 +160,7 @@ private static void handleCacheControl(Map<String, List<String>> headers, SonicD
                     try {
                         long maxAgeTime = Long.parseLong(maxAgeStr) * 1000;
                         if (maxAgeTime != 0) {
-                            sessionData.expiredTime = Long.parseLong(maxAgeStr) * 1000 + System.currentTimeMillis();
+                            sessionData.expiredTime = maxAgeTime + System.currentTimeMillis();
                         }
                     } catch (Exception e) {
                         log(TAG, Log.ERROR, "handleCacheControl:sessionId(" + sessionData.sessionId + ") error:" + e.getMessage());

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicServer.java
Patch:
@@ -249,6 +249,7 @@ public void disconnect() {
      *  return response headers which contains response headers from server and custom response headers from
      *  {@code com.tencent.sonic.sdk.SonicSessionConfig}
      *  note: server response headers have high priority than custom headers!
+     *  @return a Map of header fields
      */
     public  Map<String, List<String>> getResponseHeaderFields() {
         if (null == cachedResponseHeaders) {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSession.java
Patch:
@@ -636,6 +636,7 @@ protected void handleFlow_Connection(String cacheHtml) {
 
     /**
      * Handle template update {@link SonicSession#SONIC_RESULT_CODE_TEMPLATE_CHANGE} logic.
+     * @param newHtml new Html string from web-server
      */
     protected abstract void handleFlow_TemplateChange(String newHtml);
 

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicServer.java
Patch:
@@ -249,6 +249,7 @@ public void disconnect() {
      *  return response headers which contains response headers from server and custom response headers from
      *  {@code com.tencent.sonic.sdk.SonicSessionConfig}
      *  note: server response headers have high priority than custom headers!
+     *  @return a Map of header fields
      */
     public  Map<String, List<String>> getResponseHeaderFields() {
         if (null == cachedResponseHeaders) {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSession.java
Patch:
@@ -636,6 +636,7 @@ protected void handleFlow_Connection(String cacheHtml) {
 
     /**
      * Handle template update {@link SonicSession#SONIC_RESULT_CODE_TEMPLATE_CHANGE} logic.
+     * @param newHtml new Html string from web-server
      */
     protected abstract void handleFlow_TemplateChange(String newHtml);
 

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicEngine.java
Patch:
@@ -110,7 +110,7 @@ public static synchronized SonicEngine createInstance(@NonNull SonicRuntime runt
      * Init sonic DB which will upgrade to new version of database.
      */
     public void initSonicDB() {
-        SonicDBHelper.createInstance(getRuntime().getContext()).getWritableDatabase().close(); // init and update db
+        SonicDBHelper.createInstance(getRuntime().getContext()).getWritableDatabase(); // init and update db
     }
 
     /**

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicEngine.java
Patch:
@@ -110,7 +110,7 @@ public static synchronized SonicEngine createInstance(@NonNull SonicRuntime runt
      * Init sonic DB which will upgrade to new version of database.
      */
     public void initSonicDB() {
-        SonicDBHelper.createInstance(getRuntime().getContext()).getWritableDatabase().close(); // init and update db
+        SonicDBHelper.createInstance(getRuntime().getContext()).getWritableDatabase(); // init and update db
     }
 
     /**

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSession.java
Patch:
@@ -980,8 +980,7 @@ public final Object onClientRequestResource(String url) {
      * More about it see {https://issuetracker.google.com/issues/36989494#c8}
      * Fix VasSonic issue {https://github.com/Tencent/VasSonic/issues/90}
      *
-     * @param url The url of this session
-     * @return Return the data to kernel
+     * @return Return true if app will set cookie asynchronous.
      */
     protected boolean shouldSetCookieAsynchronous() {
         return RESOURCE_INTERCEPT_STATE_IN_OTHER_THREAD == resourceInterceptState.get();

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSessionConnection.java
Patch:
@@ -116,7 +116,7 @@ public abstract class SonicSessionConnection {
     
 
     /**
-     * HTTP Request Header : Cookie. </br>
+     * HTTP Request Header : Cookie. <br>
      */
     public final static String HTTP_HEAD_FIELD_COOKIE = "Cookie";
 

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/QuickSonicSession.java
Patch:
@@ -251,7 +251,7 @@ private void handleClientCoreMessage_PreLoad(Message msg) {
                     SonicUtils.log(TAG, Log.INFO, "session(" + sId + ") handleClientCoreMessage_PreLoad:PRE_LOAD_WITH_CACHE load data.");
                     String html = (String) msg.obj;
                     sessionClient.loadDataWithBaseUrlAndHeader(srcUrl, html, "text/html",
-                            SonicDataHelper.getCharset(id), srcUrl, getCacheHeaders());
+                            SonicUtils.DEFAULT_CHARSET, srcUrl, getCacheHeaders());
                 } else {
                     SonicUtils.log(TAG, Log.ERROR, "session(" + sId + ") handleClientCoreMessage_PreLoad:wasLoadDataInvoked = true.");
                 }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicCacheInterceptor.java
Patch:
@@ -83,7 +83,7 @@ public static String getCacheData(SonicSession session) {
             } else {
                 SonicDataHelper.updateSonicCacheHitCount(session.id);
                 File htmlCacheFile = new File(SonicFileUtils.getSonicHtmlPath(session.id));
-                htmlString = SonicFileUtils.readFile(htmlCacheFile, sessionData.charset);
+                htmlString = SonicFileUtils.readFile(htmlCacheFile);
                 verifyError = TextUtils.isEmpty(htmlString);
                 if (verifyError) {
                     SonicUtils.log(TAG, Log.ERROR, "session(" + session.sId + ") runSonicFlow error:cache data is null.");

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSessionConnection.java
Patch:
@@ -26,6 +26,7 @@
 import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -47,6 +48,7 @@
  */
 public abstract class SonicSessionConnection {
 
+
     private static final String TAG = SonicConstants.SONIC_SDK_LOG_PREFIX + "SonicSessionConnection";
 
     /**
@@ -385,7 +387,6 @@ protected boolean initConnection(URLConnection connection) {
                 connection.setRequestProperty(CUSTOM_HEAD_FILED_TEMPLATE_TAG, templateTag);
 
                 connection.setRequestProperty("method", "GET");
-                connection.setRequestProperty("accept-Charset", SonicDataHelper.SONIC_CACHE_DEFAULT_CHARSET);
                 connection.setRequestProperty("accept-Encoding", "gzip");
                 connection.setRequestProperty("accept-Language", "zh-CN,zh;");
                 connection.setRequestProperty(CUSTOM_HEAD_FILED_SDK_VERSION, "Sonic/" + SonicConstants.SONIC_VERSION_NUM);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -181,7 +181,7 @@ protected Object onRequestResource(String url) {
                 if (!isDestroyedOrWaitingForDestroy()) {
                     String mime = SonicUtils.getMime(srcUrl);
                     webResourceResponse = SonicEngine.getInstance().getRuntime().createWebResourceResponse(mime,
-                            isCachePendingStream.get() ? SonicDataHelper.getCharset(id) : getCharsetFromHeaders(),
+                            isCachePendingStream.get() ? SonicUtils.DEFAULT_CHARSET : getCharsetFromHeaders(),
                             pendingWebResourceStream,
                             isCachePendingStream.get() ? getCacheHeaders() : getHeaders());
                 } else {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/QuickSonicSession.java
Patch:
@@ -251,7 +251,7 @@ private void handleClientCoreMessage_PreLoad(Message msg) {
                     SonicUtils.log(TAG, Log.INFO, "session(" + sId + ") handleClientCoreMessage_PreLoad:PRE_LOAD_WITH_CACHE load data.");
                     String html = (String) msg.obj;
                     sessionClient.loadDataWithBaseUrlAndHeader(srcUrl, html, "text/html",
-                            SonicDataHelper.getCharset(id), srcUrl, getCacheHeaders());
+                            SonicUtils.DEFAULT_CHARSET, srcUrl, getCacheHeaders());
                 } else {
                     SonicUtils.log(TAG, Log.ERROR, "session(" + sId + ") handleClientCoreMessage_PreLoad:wasLoadDataInvoked = true.");
                 }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicCacheInterceptor.java
Patch:
@@ -83,7 +83,7 @@ public static String getCacheData(SonicSession session) {
             } else {
                 SonicDataHelper.updateSonicCacheHitCount(session.id);
                 File htmlCacheFile = new File(SonicFileUtils.getSonicHtmlPath(session.id));
-                htmlString = SonicFileUtils.readFile(htmlCacheFile, sessionData.charset);
+                htmlString = SonicFileUtils.readFile(htmlCacheFile);
                 verifyError = TextUtils.isEmpty(htmlString);
                 if (verifyError) {
                     SonicUtils.log(TAG, Log.ERROR, "session(" + session.sId + ") runSonicFlow error:cache data is null.");

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSessionConnection.java
Patch:
@@ -26,6 +26,7 @@
 import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -47,6 +48,7 @@
  */
 public abstract class SonicSessionConnection {
 
+
     private static final String TAG = SonicConstants.SONIC_SDK_LOG_PREFIX + "SonicSessionConnection";
 
     /**
@@ -385,7 +387,6 @@ protected boolean initConnection(URLConnection connection) {
                 connection.setRequestProperty(CUSTOM_HEAD_FILED_TEMPLATE_TAG, templateTag);
 
                 connection.setRequestProperty("method", "GET");
-                connection.setRequestProperty("accept-Charset", SonicDataHelper.SONIC_CACHE_DEFAULT_CHARSET);
                 connection.setRequestProperty("accept-Encoding", "gzip");
                 connection.setRequestProperty("accept-Language", "zh-CN,zh;");
                 connection.setRequestProperty(CUSTOM_HEAD_FILED_SDK_VERSION, "Sonic/" + SonicConstants.SONIC_VERSION_NUM);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -181,7 +181,7 @@ protected Object onRequestResource(String url) {
                 if (!isDestroyedOrWaitingForDestroy()) {
                     String mime = SonicUtils.getMime(srcUrl);
                     webResourceResponse = SonicEngine.getInstance().getRuntime().createWebResourceResponse(mime,
-                            isCachePendingStream.get() ? SonicDataHelper.getCharset(id) : getCharsetFromHeaders(),
+                            isCachePendingStream.get() ? SonicUtils.DEFAULT_CHARSET : getCharsetFromHeaders(),
                             pendingWebResourceStream,
                             isCachePendingStream.get() ? getCacheHeaders() : getHeaders());
                 } else {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/QuickSonicSession.java
Patch:
@@ -422,7 +422,7 @@ public boolean onClientReady() {
         return false;
     }
 
-    public Object onClientRequestResource(String url) {
+    protected Object onRequestResource(String url) {
         if (wasInterceptInvoked.get() || !isMatchCurrentUrl(url)) {
             return null;
         }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicRuntime.java
Patch:
@@ -171,7 +171,7 @@ public boolean shouldLog(int level) {
     public abstract String getCookie(String url);
 
     /**
-     * Det cookies to webview after session connection response with cookies in it's headers.
+     * Set cookies to webview after session connection response with cookies in it's headers.
      *
      * @param url The url which need to set cookies
      * @param cookies The cookies for current input url

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -137,7 +137,7 @@ public boolean onWebReady(SonicDiffDataCallback callback) {
         return true;
     }
 
-    public Object onClientRequestResource(String url) {
+    protected Object onRequestResource(String url) {
         if (!isMatchCurrentUrl(url)) {
             return null;
         }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSession.java
Patch:
@@ -344,14 +344,14 @@ public boolean handleMessage(Message msg) {
 
         if (isDestroyedOrWaitingForDestroy()) {
             SonicUtils.log(TAG, Log.ERROR, "session(" + sId + ") handleMessage error: is destroyed or waiting for destroy.");
-            return false;
+            return true;
         }
 
         if (SonicUtils.shouldLog(Log.DEBUG)) {
             SonicUtils.log(TAG, Log.DEBUG, "session(" + sId + ") handleMessage: msg what = " + msg.what + ".");
         }
 
-        return true;
+        return false;
     }
 
     SonicSession(String id, String url, SonicSessionConfig config) {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicCacheInterceptor.java
Patch:
@@ -83,7 +83,7 @@ public static String getCacheData(SonicSession session) {
             } else {
                 SonicDataHelper.updateSonicCacheHitCount(session.id);
                 File htmlCacheFile = new File(SonicFileUtils.getSonicHtmlPath(session.id));
-                htmlString = SonicFileUtils.readFile(htmlCacheFile);
+                htmlString = SonicFileUtils.readFile(htmlCacheFile, sessionData.charset);
                 verifyError = TextUtils.isEmpty(htmlString);
                 if (verifyError) {
                     SonicUtils.log(TAG, Log.ERROR, "session(" + session.sId + ") runSonicFlow error:cache data is null.");

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicCacheInterceptor.java
Patch:
@@ -83,7 +83,7 @@ public static String getCacheData(SonicSession session) {
             } else {
                 SonicDataHelper.updateSonicCacheHitCount(session.id);
                 File htmlCacheFile = new File(SonicFileUtils.getSonicHtmlPath(session.id));
-                htmlString = SonicFileUtils.readFile(htmlCacheFile);
+                htmlString = SonicFileUtils.readFile(htmlCacheFile, sessionData.charset);
                 verifyError = TextUtils.isEmpty(htmlString);
                 if (verifyError) {
                     SonicUtils.log(TAG, Log.ERROR, "session(" + session.sId + ") runSonicFlow error:cache data is null.");

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicCacheInterceptor.java
Patch:
@@ -77,7 +77,7 @@ public static String getCacheData(SonicSession session) {
             boolean verifyError;
             String htmlString = "";
             // verify local data
-            if (isExpired || TextUtils.isEmpty(sessionData.etag) || TextUtils.isEmpty(sessionData.htmlSha1)) {
+            if (isExpired || TextUtils.isEmpty(sessionData.eTag) || TextUtils.isEmpty(sessionData.htmlSha1)) {
                 verifyError = true;
                 SonicUtils.log(TAG, Log.INFO, "session(" + session.sId + ") runSonicFlow : session data is empty.");
             } else {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicRuntime.java
Patch:
@@ -66,7 +66,7 @@ public Context getContext() {
      * @return A unique session id
      */
     public String makeSessionId(String url, boolean isAccountRelated) {
-        if (!SonicDBHelper.isUpgrading() && isSonicUrl(url)) {
+        if (isSonicUrl(url)) {
             StringBuilder sessionIdBuilder = new StringBuilder();
             try {
                 Uri uri = Uri.parse(url);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSessionStatistics.java
Patch:
@@ -17,7 +17,7 @@
 
 
 /**
- * The Statistic model specifies the data models which are requried to be used to provide
+ * The Statistic model specifies the data models which are required to be used to provide
  * the performance data described by the specific attributes in a SonicSession.
  */
 public class SonicSessionStatistics {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSessionThreadPool.java
Patch:
@@ -13,6 +13,7 @@
 
 package com.tencent.sonic.sdk;
 
+import android.support.annotation.NonNull;
 import android.util.Log;
 
 import java.util.concurrent.ExecutorService;
@@ -79,7 +80,7 @@ private static class SessionThreadFactory implements ThreadFactory {
          * @return Constructed thread, or {@code null} if the request to
          * create a thread is rejected
          */
-        public Thread newThread(Runnable r) {
+        public Thread newThread(@NonNull Runnable r) {
             Thread thread = new Thread(this.group, r, NAME_PREFIX + this.threadNumber.getAndIncrement(), 0L);
             if (thread.isDaemon()) {
                 thread.setDaemon(false);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicCacheInterceptor.java
Patch:
@@ -77,7 +77,7 @@ public static String getCacheData(SonicSession session) {
             boolean verifyError;
             String htmlString = "";
             // verify local data
-            if (isExpired || TextUtils.isEmpty(sessionData.etag) || TextUtils.isEmpty(sessionData.htmlSha1)) {
+            if (isExpired || TextUtils.isEmpty(sessionData.eTag) || TextUtils.isEmpty(sessionData.htmlSha1)) {
                 verifyError = true;
                 SonicUtils.log(TAG, Log.INFO, "session(" + session.sId + ") runSonicFlow : session data is empty.");
             } else {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicRuntime.java
Patch:
@@ -66,7 +66,7 @@ public Context getContext() {
      * @return A unique session id
      */
     public String makeSessionId(String url, boolean isAccountRelated) {
-        if (!SonicDBHelper.isUpgrading() && isSonicUrl(url)) {
+        if (isSonicUrl(url)) {
             StringBuilder sessionIdBuilder = new StringBuilder();
             try {
                 Uri uri = Uri.parse(url);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSessionStatistics.java
Patch:
@@ -17,7 +17,7 @@
 
 
 /**
- * The Statistic model specifies the data models which are requried to be used to provide
+ * The Statistic model specifies the data models which are required to be used to provide
  * the performance data described by the specific attributes in a SonicSession.
  */
 public class SonicSessionStatistics {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSessionThreadPool.java
Patch:
@@ -13,6 +13,7 @@
 
 package com.tencent.sonic.sdk;
 
+import android.support.annotation.NonNull;
 import android.util.Log;
 
 import java.util.concurrent.ExecutorService;
@@ -79,7 +80,7 @@ private static class SessionThreadFactory implements ThreadFactory {
          * @return Constructed thread, or {@code null} if the request to
          * create a thread is rejected
          */
-        public Thread newThread(Runnable r) {
+        public Thread newThread(@NonNull Runnable r) {
             Thread thread = new Thread(this.group, r, NAME_PREFIX + this.threadNumber.getAndIncrement(), 0L);
             if (thread.isDaemon()) {
                 thread.setDaemon(false);

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/QuickSonicSession.java
Patch:
@@ -422,7 +422,7 @@ public boolean onClientReady() {
         return false;
     }
 
-    public Object onClientRequestResource(String url) {
+    protected Object onRequestResource(String url) {
         if (wasInterceptInvoked.get() || !isMatchCurrentUrl(url)) {
             return null;
         }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicRuntime.java
Patch:
@@ -171,7 +171,7 @@ public boolean shouldLog(int level) {
     public abstract String getCookie(String url);
 
     /**
-     * Det cookies to webview after session connection response with cookies in it's headers.
+     * Set cookies to webview after session connection response with cookies in it's headers.
      *
      * @param url The url which need to set cookies
      * @param cookies The cookies for current input url

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -137,7 +137,7 @@ public boolean onWebReady(SonicDiffDataCallback callback) {
         return true;
     }
 
-    public Object onClientRequestResource(String url) {
+    protected Object onRequestResource(String url) {
         if (!isMatchCurrentUrl(url)) {
             return null;
         }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/QuickSonicSession.java
Patch:
@@ -422,7 +422,7 @@ public boolean onClientReady() {
         return false;
     }
 
-    public Object onClientRequestResource(String url) {
+    protected Object onRequestResource(String url) {
         if (wasInterceptInvoked.get() || !isMatchCurrentUrl(url)) {
             return null;
         }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicRuntime.java
Patch:
@@ -171,7 +171,7 @@ public boolean shouldLog(int level) {
     public abstract String getCookie(String url);
 
     /**
-     * Det cookies to webview after session connection response with cookies in it's headers.
+     * Set cookies to webview after session connection response with cookies in it's headers.
      *
      * @param url The url which need to set cookies
      * @param cookies The cookies for current input url

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -137,7 +137,7 @@ public boolean onWebReady(SonicDiffDataCallback callback) {
         return true;
     }
 
-    public Object onClientRequestResource(String url) {
+    protected Object onRequestResource(String url) {
         if (!isMatchCurrentUrl(url)) {
             return null;
         }

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/SonicSession.java
Patch:
@@ -336,14 +336,14 @@ public boolean handleMessage(Message msg) {
 
         if (isDestroyedOrWaitingForDestroy()) {
             SonicUtils.log(TAG, Log.ERROR, "session(" + sId + ") handleMessage error: is destroyed or waiting for destroy.");
-            return false;
+            return true;
         }
 
         if (SonicUtils.shouldLog(Log.DEBUG)) {
             SonicUtils.log(TAG, Log.DEBUG, "session(" + sId + ") handleMessage: msg what = " + msg.what + ".");
         }
 
-        return true;
+        return false;
     }
 
     SonicSession(String id, String url, SonicSessionConfig config) {

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -168,7 +168,7 @@ public Object onClientRequestResource(String url) {
             if (null != pendingWebResourceStream) {
                 Object webResourceResponse;
                 if (!isDestroyedOrWaitingForDestroy()) {
-                    String mime = SonicUtils.getMime(currUrl);
+                    String mime = SonicUtils.getMime(srcUrl);
                     webResourceResponse = SonicEngine.getInstance().getRuntime().createWebResourceResponse(mime, "utf-8", pendingWebResourceStream, getHeaders());
                 } else {
                     webResourceResponse = null;

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -168,7 +168,7 @@ public Object onClientRequestResource(String url) {
             if (null != pendingWebResourceStream) {
                 Object webResourceResponse;
                 if (!isDestroyedOrWaitingForDestroy()) {
-                    String mime = SonicUtils.getMime(currUrl);
+                    String mime = SonicUtils.getMime(srcUrl);
                     webResourceResponse = SonicEngine.getInstance().getRuntime().createWebResourceResponse(mime, "utf-8", pendingWebResourceStream, getHeaders());
                 } else {
                     webResourceResponse = null;

File: sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java
Patch:
@@ -168,7 +168,7 @@ public Object onClientRequestResource(String url) {
             if (null != pendingWebResourceStream) {
                 Object webResourceResponse;
                 if (!isDestroyedOrWaitingForDestroy()) {
-                    String mime = SonicUtils.getMime(currUrl);
+                    String mime = SonicUtils.getMime(srcUrl);
                     webResourceResponse = SonicEngine.getInstance().getRuntime().createWebResourceResponse(mime, "utf-8", pendingWebResourceStream, getHeaders());
                 } else {
                     webResourceResponse = null;

