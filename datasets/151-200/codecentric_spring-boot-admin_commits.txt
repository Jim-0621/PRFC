File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java
Patch:
@@ -258,9 +258,11 @@ public HomepageForwardingFilterConfig homepageForwardingFilterConfig() throws IO
 
 				List<String> extensionRoutes = new UiRoutesScanner(this.applicationContext)
 					.scan(this.adminUi.getExtensionResourceLocations());
-				List<String> routesIncludes = Stream.concat(DEFAULT_UI_ROUTES.stream(), extensionRoutes.stream())
+				List<String> routesIncludes = Stream
+					.concat(DEFAULT_UI_ROUTES.stream(), Stream.concat(extensionRoutes.stream(), Stream.of("/")))
 					.map(this.adminServer::path)
 					.collect(Collectors.toList());
+
 				List<String> routesExcludes = Stream
 					.concat(DEFAULT_UI_ROUTE_EXCLUDES.stream(), this.adminUi.getAdditionalRouteExcludes().stream())
 					.map(this.adminServer::path)

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerProperties.java
Patch:
@@ -36,8 +36,8 @@
 public class AdminServerProperties {
 
 	/**
-	 * The context-path prefixes the path where the Admin Servers statics assets and api
-	 * should be served. Relative to the Dispatcher-Servlet.
+	 * The context-path prefixes the path where the Admin Servers static assets and api
+	 * should be served, relative to the Dispatcher-Servlet.
 	 */
 	private String contextPath = "";
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/EndpointDetectionTriggerTest.java
Patch:
@@ -100,12 +100,12 @@ public void should_not_detect_on_trigger_stopped() {
 	public void should_continue_detection_after_error() throws InterruptedException {
 		// when status-change event is emitted and an error is emitted
 		when(this.detector.detectEndpoints(any())).thenReturn(Mono.error(IllegalStateException::new))
-				.thenReturn(Mono.empty());
+			.thenReturn(Mono.empty());
 
 		this.events.next(
 				new InstanceStatusChangedEvent(this.instance.getId(), this.instance.getVersion(), StatusInfo.ofDown()));
-		this.events.next(
-				new InstanceStatusChangedEvent(this.instance.getId(), this.instance.getVersion(), StatusInfo.ofUp()));
+		this.events
+			.next(new InstanceStatusChangedEvent(this.instance.getId(), this.instance.getVersion(), StatusInfo.ofUp()));
 
 		// then should update
 		verify(this.detector, times(2)).detectEndpoints(this.instance.getId());

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/StatusUpdateTriggerTest.java
Patch:
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
 		when(this.updater.timeout(any())).thenReturn(this.updater);
 
 		this.trigger = new StatusUpdateTrigger(this.updater, this.events.flux(), Duration.ofSeconds(10),
-			Duration.ofSeconds(10), Duration.ofSeconds(60));
+				Duration.ofSeconds(10), Duration.ofSeconds(60));
 		this.trigger.start();
 		await().until(this.events::wasSubscribed);
 	}
@@ -140,7 +140,7 @@ public void should_not_update_on_non_relevant_event() {
 	public void should_continue_update_after_error() throws InterruptedException {
 		// when status-change event is emitted and an error is emitted
 		when(this.updater.updateStatus(any())).thenReturn(Mono.error(IllegalStateException::new))
-				.thenReturn(Mono.empty());
+			.thenReturn(Mono.empty());
 
 		this.events.next(new InstanceRegistrationUpdatedEvent(this.instance.getId(), this.instance.getVersion(),
 				this.instance.getRegistration()));

File: spring-boot-admin-samples/spring-boot-admin-sample-eureka/src/test/java/de/codecentric/boot/admin/SpringBootAdminEurekaApplicationTest.java
Patch:
@@ -23,10 +23,10 @@
 
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = { SpringBootAdminEurekaApplication.class })
-public class SpringBootAdminEurekaApplicationTest {
+class SpringBootAdminEurekaApplicationTest {
 
 	@Test
-	public void contextLoads() {
+	void contextLoads() {
 	}
 
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InfoUpdateTrigger.java
Patch:
@@ -38,10 +38,11 @@ public class InfoUpdateTrigger extends AbstractEventHandler<InstanceEvent> {
 
 	private final IntervalCheck intervalCheck;
 
-	public InfoUpdateTrigger(InfoUpdater infoUpdater, Publisher<InstanceEvent> publisher) {
+	public InfoUpdateTrigger(InfoUpdater infoUpdater, Publisher<InstanceEvent> publisher, Duration updateInterval,
+			Duration infoLifetime, Duration maxBackoff) {
 		super(publisher, InstanceEvent.class);
 		this.infoUpdater = infoUpdater;
-		this.intervalCheck = new IntervalCheck("info", this::updateInfo, Duration.ofMinutes(5), Duration.ofMinutes(1));
+		this.intervalCheck = new IntervalCheck("info", this::updateInfo, updateInterval, infoLifetime, maxBackoff);
 	}
 
 	@Override

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/InfoUpdateTriggerTest.java
Patch:
@@ -60,7 +60,8 @@ public class InfoUpdateTriggerTest {
 	public void setUp() throws Exception {
 		when(this.updater.updateInfo(any(InstanceId.class))).thenReturn(Mono.empty());
 
-		this.trigger = new InfoUpdateTrigger(this.updater, this.events.flux());
+		this.trigger = new InfoUpdateTrigger(this.updater, this.events.flux(), Duration.ofMinutes(5), Duration.ofMinutes(1),
+			Duration.ofMinutes(10));
 		this.trigger.start();
 		await().until(this.events::wasSubscribed);
 	}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/StatusUpdateTriggerTest.java
Patch:
@@ -58,7 +58,8 @@ public void setUp() throws Exception {
 		when(this.updater.updateStatus(any(InstanceId.class))).thenReturn(Mono.empty());
 		when(this.updater.timeout(any())).thenReturn(this.updater);
 
-		this.trigger = new StatusUpdateTrigger(this.updater, this.events.flux());
+		this.trigger = new StatusUpdateTrigger(this.updater, this.events.flux(), Duration.ofSeconds(10),
+			Duration.ofSeconds(10), Duration.ofSeconds(60));
 		this.trigger.start();
 		await().until(this.events::wasSubscribed);
 	}

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java
Patch:
@@ -182,6 +182,7 @@ public static class ExternalView {
 
 		public ExternalView(String label, String url, Integer order, boolean iframe, List<ExternalView> children) {
 			Assert.hasText(label, "'label' must not be empty");
+			Assert.hasText(url, "'url' must not be empty");
 			this.label = label;
 			this.url = url;
 			this.order = order;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/AbstractEventHandler.java
Patch:
@@ -26,7 +26,6 @@
 import reactor.core.publisher.Flux;
 import reactor.core.scheduler.Scheduler;
 import reactor.core.scheduler.Schedulers;
-import reactor.util.retry.Retry;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
 
@@ -58,7 +57,7 @@ public void start() {
 			.ofType(this.eventType)
 			.cast(this.eventType)
 			.transform(this::handle)
-			.retryWhen(Retry.indefinitely().doBeforeRetry((s) -> this.log.warn("Unexpected error", s.failure())))
+			.onErrorContinue((throwable, o) -> this.log.warn("Unexpected error", throwable))
 			.subscribe();
 	}
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/StatusUpdateTriggerTest.java
Patch:
@@ -56,6 +56,7 @@ public class StatusUpdateTriggerTest {
 	@BeforeEach
 	public void setUp() throws Exception {
 		when(this.updater.updateStatus(any(InstanceId.class))).thenReturn(Mono.empty());
+		when(this.updater.timeout(any())).thenReturn(this.updater);
 
 		this.trigger = new StatusUpdateTrigger(this.updater, this.events.flux());
 		this.trigger.start();

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/web/HomepageForwardingMatcherTest.java
Patch:
@@ -61,7 +61,7 @@ public void should_return_true() {
 	}
 
 	@Data
-	private static class MockRequest {
+	private static final class MockRequest {
 
 		private final String method;
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MailNotifier.java
Patch:
@@ -76,7 +76,7 @@ public class MailNotifier extends AbstractStatusChangeNotifier {
 	/**
 	 * Thymleaf template for mail
 	 */
-	private String template = "classpath:/META-INF/spring-boot-admin-server/mail/status-changed.html";
+	private String template = "META-INF/spring-boot-admin-server/mail/status-changed.html";
 
 	public MailNotifier(JavaMailSender mailSender, InstanceRepository repository, TemplateEngine templateEngine) {
 		super(repository);

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientCloudFoundryAutoConfigurationTest.java
Patch:
@@ -36,9 +36,9 @@ public class SpringBootAdminClientCloudFoundryAutoConfigurationTest {
 
 	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()
 		.withConfiguration(AutoConfigurations.of(EndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class,
-			WebMvcAutoConfiguration.class, DispatcherServletAutoConfiguration.class,
-			RestTemplateAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class,
-			SpringBootAdminClientCloudFoundryAutoConfiguration.class));
+				WebMvcAutoConfiguration.class, DispatcherServletAutoConfiguration.class,
+				RestTemplateAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class,
+				SpringBootAdminClientCloudFoundryAutoConfiguration.class));
 
 	@Test
 	public void non_cloud_platform() {

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientCloudFoundryAutoConfigurationTest.java
Patch:
@@ -36,9 +36,9 @@ public class SpringBootAdminClientCloudFoundryAutoConfigurationTest {
 
 	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()
 		.withConfiguration(AutoConfigurations.of(EndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class,
-				WebMvcAutoConfiguration.class, DispatcherServletAutoConfiguration.class,
-				RestTemplateAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class,
-				SpringBootAdminClientCloudFoundryAutoConfiguration.class));
+			WebMvcAutoConfiguration.class, DispatcherServletAutoConfiguration.class,
+			RestTemplateAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class,
+			SpringBootAdminClientCloudFoundryAutoConfiguration.class));
 
 	@Test
 	public void non_cloud_platform() {

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/MailNotifierIntegrationTest.java
Patch:
@@ -40,8 +40,8 @@ class MailNotifierIntegrationTest implements WithAssertions {
 	void fileProtocolIsNotAllowed() {
 		assertThatThrownBy(() -> {
 			URL resource = getClass().getClassLoader().getResource(".");
-			mailNotifier.setTemplate("file://" + resource.getFile()
-					+ "de/codecentric/boot/admin/server/notify/vulnerable-file.html");
+			mailNotifier.setTemplate(
+					"file://" + resource.getFile() + "de/codecentric/boot/admin/server/notify/vulnerable-file.html");
 			mailNotifier.getBody(new Context());
 		}).hasCauseInstanceOf(FileNotFoundException.class);
 	}

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -68,7 +68,7 @@ public class DefaultServiceInstanceConverter implements ServiceInstanceConverter
 	 */
 	private String healthEndpointPath = "health";
 
-	private static @Nullable String getMetadataValue(ServiceInstance instance, String[] keys) {
+	protected static @Nullable String getMetadataValue(ServiceInstance instance, String... keys) {
 		Map<String, String> metadata = instance.getMetadata();
 		for (String key : keys) {
 			String value = metadata.get(key);

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiProperties.java
Patch:
@@ -207,6 +207,8 @@ public CacheControl toCacheControl() {
 	@Data
 	public static class UiTheme {
 
+		private Boolean backgroundEnabled = true;
+
 		private Palette palette = new Palette();
 
 		private String color = "#14615A";

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AbstractAdminUiApplicationTest.java
Patch:
@@ -103,10 +103,12 @@ public void should_return_correct_content_type_for_js_extensions() {
 					.header("Accept", "*/*")
 					.exchange()
 					.expectStatus().isOk()
-					.expectHeader().contentType(MediaType.parseMediaType("application/javascript"));
+					.expectHeader().contentType(getExpectedMediaTypeForJavaScript());
 		//@formatter:on
 	}
 
+	abstract MediaType getExpectedMediaTypeForJavaScript();
+
 	@Test
 	public void should_return_correct_content_type_for_css_extensions() {
 		//@formatter:off

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
+import org.springframework.aot.hint.annotation.RegisterReflectionForBinding;
 import org.springframework.http.MediaType;
 import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
@@ -96,6 +97,7 @@ public Map<String, Object> getUser(@Nullable Principal principal) {
 	}
 
 	@GetMapping(path = "/", produces = MediaType.TEXT_HTML_VALUE)
+	@RegisterReflectionForBinding(String.class)
 	public String index() {
 		return "index";
 	}

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 
 import jakarta.servlet.ServletContext;
-
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration;
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
@@ -75,7 +74,6 @@ public class SpringBootAdminClientAutoConfiguration {
 	@ConditionalOnMissingBean
 	public ApplicationRegistrator registrator(RegistrationClient registrationClient, ClientProperties client,
 			ApplicationFactory applicationFactory) {
-
 		return new DefaultApplicationRegistrator(applicationFactory, registrationClient, client.getAdminUrl(),
 				client.isRegisterOnce());
 	}

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/ServletApplicationFactory.java
Patch:
@@ -17,7 +17,6 @@
 package de.codecentric.boot.admin.client.registration;
 
 import jakarta.servlet.ServletContext;
-
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties;
 import org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints;

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/CustomCsrfFilter.java
Patch:
@@ -23,7 +23,6 @@
 import jakarta.servlet.http.Cookie;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
-
 import org.springframework.security.web.csrf.CsrfToken;
 import org.springframework.web.filter.OncePerRequestFilter;
 import org.springframework.web.util.WebUtils;

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SecuritySecureConfig.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.UUID;
 
 import jakarta.servlet.DispatcherType;
-
 import org.springframework.boot.autoconfigure.security.SecurityProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/servlet/HomepageForwardingFilter.java
Patch:
@@ -26,7 +26,6 @@
 import jakarta.servlet.ServletRequest;
 import jakarta.servlet.ServletResponse;
 import jakarta.servlet.http.HttpServletRequest;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpHeaders;

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfigurationTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import jakarta.servlet.FilterChain;
 import jakarta.servlet.ServletResponse;
-
 import org.assertj.core.api.WithAssertions;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Map;
 
 import jakarta.annotation.Nullable;
-
 import org.springframework.context.expression.MapAccessor;
 import org.springframework.expression.Expression;
 import org.springframework.expression.ParserContext;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/servlet/InstancesProxyController.java
Patch:
@@ -24,7 +24,6 @@
 import jakarta.servlet.AsyncContext;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
-
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.core.io.buffer.DataBufferFactory;
 import org.springframework.core.io.buffer.DataBufferUtils;
@@ -93,7 +92,7 @@ public void instanceProxy(@PathVariable("instanceId") String instanceId, HttpSer
 		// org.springframework.security.web.context.HttpSessionSecurityContextRepository.SaveToSessionRequestWrapper.startAsync()
 		AsyncContext asyncContext = servletRequest.startAsync();
 		asyncContext.setTimeout(-1); // no timeout because instanceWebProxy will handle it
-										// for us
+		// for us
 		try {
 			ServletServerHttpRequest request = new ServletServerHttpRequest(
 					(HttpServletRequest) asyncContext.getRequest());

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/MailNotifierTest.java
Patch:
@@ -29,7 +29,6 @@
 import jakarta.mail.Session;
 import jakarta.mail.internet.InternetAddress;
 import jakarta.mail.internet.MimeMessage;
-
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
@@ -189,7 +188,7 @@ private String loadExpectedBody(String resource) throws IOException {
 	private String extractBody(DataHandler dataHandler) throws IOException {
 		ByteArrayOutputStream os = new ByteArrayOutputStream(4096);
 		dataHandler.writeTo(os);
-		return os.toString(StandardCharsets.UTF_8.name()).replaceAll("\\r?\\n", "\n");
+		return os.toString(StandardCharsets.UTF_8).replaceAll("\\r?\\n", "\n");
 	}
 
 }

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SecuritySecureConfig.java
Patch:
@@ -65,7 +65,6 @@ protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
 
 		http.authorizeHttpRequests((authorizeRequests) -> authorizeRequests //
 				.requestMatchers(new AntPathRequestMatcher(this.adminServer.path("/assets/**"))).permitAll() // <1>
-				.requestMatchers(new AntPathRequestMatcher(this.adminServer.path("/variables.css"))).permitAll()
 				.requestMatchers(new AntPathRequestMatcher(this.adminServer.path("/actuator/info"))).permitAll()
 				.requestMatchers(new AntPathRequestMatcher(adminServer.path("/actuator/health"))).permitAll()
 				.requestMatchers(new AntPathRequestMatcher(this.adminServer.path("/login"))).permitAll()

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java
Patch:
@@ -74,8 +74,7 @@ public class AdminServerUiAutoConfiguration {
 	 * path patterns that will be excluded from forwarding to the homepage (webapp), can
 	 * be extended via property: spring.boot.admin.ui.additionalRouteExcludes
 	 */
-	private static final List<String> DEFAULT_UI_ROUTE_EXCLUDES = asList("/extensions/**",
-			"/instances/*/actuator/**");
+	private static final List<String> DEFAULT_UI_ROUTE_EXCLUDES = asList("/extensions/**", "/instances/*/actuator/**");
 
 	private final AdminServerUiProperties adminUi;
 

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java
Patch:
@@ -75,7 +75,7 @@ public class AdminServerUiAutoConfiguration {
 	 * be extended via property: spring.boot.admin.ui.additionalRouteExcludes
 	 */
 	private static final List<String> DEFAULT_UI_ROUTE_EXCLUDES = asList("/extensions/**",
-			"/instances/*/actuator/heapdump", "/instances/*/actuator/logfile");
+			"/instances/*/actuator/**");
 
 	private final AdminServerUiProperties adminUi;
 

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/ClientProperties.java
Patch:
@@ -19,12 +19,11 @@
 import java.time.Duration;
 import java.time.temporal.ChronoUnit;
 
-import javax.annotation.Nullable;
-
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.convert.DurationUnit;
 import org.springframework.core.env.Environment;
+import org.springframework.lang.Nullable;
 
 @lombok.Data
 @ConfigurationProperties(prefix = "spring.boot.admin.client")

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/CloudFoundryApplicationProperties.java
Patch:
@@ -19,9 +19,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.lang.Nullable;
 
 @lombok.Data
 @ConfigurationProperties("vcap.application")

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/InstanceProperties.java
Patch:
@@ -19,10 +19,9 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.lang.Nullable;
 
 @lombok.Data
 @ConfigurationProperties(prefix = "spring.boot.admin.client.instance")

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/DefaultApplicationFactory.java
Patch:
@@ -21,8 +21,6 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties;
 import org.springframework.boot.actuate.endpoint.EndpointId;
@@ -31,6 +29,7 @@
 import org.springframework.boot.web.context.WebServerInitializedEvent;
 import org.springframework.boot.web.server.Ssl;
 import org.springframework.context.event.EventListener;
+import org.springframework.lang.Nullable;
 import org.springframework.util.StringUtils;
 import org.springframework.web.util.UriComponentsBuilder;
 

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java
Patch:
@@ -19,8 +19,6 @@
 import java.time.Duration;
 import java.util.concurrent.ScheduledFuture;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.DisposableBean;
@@ -30,6 +28,7 @@
 import org.springframework.context.event.EventListener;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
+import org.springframework.lang.Nullable;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
 
 /**

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/ServletApplicationFactory.java
Patch:
@@ -16,7 +16,7 @@
 
 package de.codecentric.boot.admin.client.registration;
 
-import javax.servlet.ServletContext;
+import jakarta.servlet.ServletContext;
 
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties;

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/CloudFoundryApplicationPropertiesTest.java
Patch:
@@ -16,11 +16,11 @@
 
 package de.codecentric.boot.admin.client.config;
 
-import org.apache.commons.logging.LogFactory;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor;
 import org.springframework.boot.context.properties.bind.Bindable;
 import org.springframework.boot.context.properties.bind.Binder;
+import org.springframework.boot.logging.DeferredLogs;
 import org.springframework.mock.env.MockEnvironment;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -41,8 +41,7 @@ public void bind() {
 
 		MockEnvironment env = new MockEnvironment();
 		env.setProperty("VCAP_APPLICATION", vcap);
-		new CloudFoundryVcapEnvironmentPostProcessor(LogFactory.getLog(CloudFoundryApplicationPropertiesTest.class))
-				.postProcessEnvironment(env, null);
+		new CloudFoundryVcapEnvironmentPostProcessor(new DeferredLogs()).postProcessEnvironment(env, null);
 
 		CloudFoundryApplicationProperties cfProperties = Binder.get(env)
 				.bind("vcap.application", Bindable.of(CloudFoundryApplicationProperties.class)).get();

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -20,11 +20,10 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.cloud.client.ServiceInstance;
+import org.springframework.lang.Nullable;
 import org.springframework.web.util.UriComponentsBuilder;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: .mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/ClientProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/CloudFoundryApplicationProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/InstanceProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/ServiceHostType.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientCloudFoundryAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientEnabledCondition.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/Application.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/ApplicationFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/ApplicationRegistrator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/BlockingRegistrationClient.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/CloudFoundryApplicationFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/DefaultApplicationFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/DefaultApplicationRegistrator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/ReactiveRegistrationClient.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationClient.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/ServletApplicationFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/metadata/CloudFoundryMetadataContributor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/metadata/CompositeMetadataContributor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/metadata/MetadataContributor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/metadata/StartupDateMetadataContributor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/metadata/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/AbstractClientApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/ClientReactiveApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/ClientServletApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/ClientPropertiesTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/CloudFoundryApplicationPropertiesTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientCloudFoundryAutoConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientEnabledConditionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/AbstractRegistrationClientTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/ApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/BlockingRegistrationClientTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/CloudFoundryApplicationFactoryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/DefaultApplicationFactoryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/DefaultApplicationRegistratorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/ReactiveRegistrationClientTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListenerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/ServletApplicationFactoryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/metadata/CloudFoundryMetadataContributorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/metadata/CompositeMetadataContributorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/metadata/StartupDateMetadataContributorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-consul/src/main/java/de/codecentric/boot/admin/SpringBootAdminConsulApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-consul/src/test/java/de/codecentric/boot/admin/SpringBootAdminConsulApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-eureka/src/main/java/de/codecentric/boot/admin/SpringBootAdminEurekaApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-eureka/src/test/java/de/codecentric/boot/admin/SpringBootAdminEurekaApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminHazelcastApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/test/java/de/codecentric/boot/admin/SpringBootAdminHazelcastApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-reactive/src/main/java/de/codecentric/boot/admin/SpringBootAdminReactiveApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-reactive/src/test/java/de/codecentric/boot/admin/SpringBootAdminReactiveApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/CustomEndpoint.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/CustomNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/NotifierConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SecurityPermitAllConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SecuritySecureConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SpringBootAdminServletApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/test/java/de/codecentric/boot/admin/SpringBootAdminServletApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-war/src/main/java/de/codecentric/boot/admin/SpringBootAdminWarApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-zookeeper/src/main/java/de/codecentric/boot/admin/SpringBootAdminZookeeperApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-samples/spring-boot-admin-sample-zookeeper/src/test/java/de/codecentric/boot/admin/SpringBootAdminZookeeperApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/config/AdminServerDiscoveryAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/config/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/EurekaServiceInstanceConverter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/InstanceDiscoveryListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/KubernetesServiceInstanceConverter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/ServiceInstanceConverter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/AdminApplicationDiscoveryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/config/AdminServerDiscoveryAutoConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/discovery/EurekaServiceInstanceConverterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/discovery/InstanceDiscoveryListenerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/discovery/KubernetesServiceInstanceConverterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/extensions/UiExtension.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/extensions/UiExtensions.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/extensions/UiExtensionsScanner.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/extensions/UiRoutesScanner.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/extensions/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/HomepageForwardingFilterConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/HomepageForwardingMatcher.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/reactive/HomepageForwardingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/reactive/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/servlet/HomepageForwardingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/servlet/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AbstractAdminUiApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AdminUiReactiveApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AdminUiServletApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/extensions/UiExtensionsScannerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/extensions/UiRoutesScannerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/web/HomepageForwardingMatcherTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/web/UiControllerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerCloudFoundryAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerHazelcastAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerInstanceWebClientConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerMarkerConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerWebConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/EnableAdminServer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/SpringBootAdminServerEnabledCondition.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/Application.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/EventsourcingInstanceRepository.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/Instance.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/InstanceRepository.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/SnapshottingInstanceRepository.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceDeregisteredEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceEndpointsDetectedEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceInfoChangedEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceRegisteredEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceRegistrationUpdatedEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceStatusChangedEvent.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/BuildVersion.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Endpoint.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Endpoints.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/InstanceId.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Registration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/StatusInfo.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Tags.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/ConcurrentMapEventStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/InMemoryEventStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/InstanceEventPublisher.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/InstanceEventStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/OptimisticLockingException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/AbstractEventNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/AbstractStatusChangeNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/CompositeNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HazelcastNotificationTrigger.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LoggingNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MailNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/NotificationTrigger.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/Notifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/NotifierProxyProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/RemindingNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/AbstractNotificationFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/ApplicationNameNotificationFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/ExpiringNotificationFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/FilteringNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/InstanceIdNotificationFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/NotificationFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/web/NotificationFilterController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/web/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/AbstractEventHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/ApiMediaTypeHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/ApplicationRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/CloudFoundryInstanceIdGenerator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/EndpointDetectionTrigger.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/EndpointDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/HashingInstanceUrlIdGenerator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InfoUpdateTrigger.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InfoUpdater.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InstanceIdGenerator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InstanceRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/IntervalCheck.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/StatusUpdateTrigger.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/StatusUpdater.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/ChainingStrategy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/EndpointDetectionStrategy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/ProbeEndpointsStrategy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/QueryIndexEndpointStrategy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/AdminServerModule.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/BuildVersionMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/EndpointMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/EndpointsMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InfoMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InstanceDeregisteredEventMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InstanceEndpointsDetectedEventMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InstanceEventMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InstanceIdMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InstanceInfoChangedEventMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InstanceRegisteredEventMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InstanceRegistrationUpdatedEventMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/InstanceStatusChangedEventMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/RegistrationBeanSerializerModifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/RegistrationDeserializer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/SanitizingMapSerializer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/StatusInfoMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/TagsMixin.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/AdminController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/ApplicationsController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/HttpHeaderFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/InstanceWebProxy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/InstancesController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/PathUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/BasicAuthHttpHeaderProvider.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/CloudFoundryHttpHeaderProvider.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/CompositeHttpHeadersProvider.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/HttpHeadersProvider.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunction.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunctions.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceWebClient.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceWebClientCustomizer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/LegacyEndpointConverter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/LegacyEndpointConverters.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/cookies/CookieStoreCleanupTrigger.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/cookies/JdkPerInstanceCookieStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/cookies/PerInstanceCookieStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/cookies/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/exception/InstanceWebClientException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/exception/ResolveEndpointException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/exception/ResolveInstanceException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/exception/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/reactive/AdminControllerHandlerMapping.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/reactive/InstancesProxyController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/reactive/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/servlet/AdminControllerHandlerMapping.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/servlet/InstancesProxyController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/servlet/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/AbstractAdminApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/AdminApplicationHazelcastTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/AdminReactiveApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/AdminServletApplicationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerAutoConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerCloudFoundryAutoConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerInstanceWebClientConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerPropertiesTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/SpringBootAdminServerEnabledConditionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/entities/AbstractInstanceRepositoryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/entities/EventsourcingInstanceRepositoryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/entities/InstanceTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/entities/SnapshottingInstanceRepositoryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/BuildVersionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/EndpointTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/EndpointsTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/InfoTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/InstanceIdTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/RegistrationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/StatusInfoTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/TagsTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/AbstractEventStoreTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreWithClientConfigTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreWithServerConfigTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/InMemoryEventStoreTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/CompositeNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/DingTalkNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/DiscordNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/HazelcastNotificationTriggerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/HipchatNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/LetsChatNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/MailNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/NotificationTriggerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/RemindingNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/SlackNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/TelegramNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/TestNotifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/filter/FilteringNotifierTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/filter/InstanceIdNotificationFilterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/filter/InstanceNameNotificationFilterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/filter/web/NotificationFilterControllerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/AbstractEventHandlerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/ApplicationRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/CloudFoundryInstanceIdGeneratorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/EndpointDetectionTriggerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/EndpointDetectorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/InfoUpdateTriggerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/InfoUpdaterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/InstanceRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ *     https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/IntervalCheck.java
Patch:
@@ -80,7 +80,7 @@ public void start() {
 		this.subscription = Flux.interval(this.interval)
 				.doOnSubscribe((s) -> log.debug("Scheduled {}-check every {}", this.name, this.interval))
 				.log(log.getName(), Level.FINEST).subscribeOn(this.scheduler).concatMap((i) -> this.checkAllInstances())
-				.retryWhen(Retry.indefinitely()
+				.retryWhen(Retry.backoff(Long.MAX_VALUE, Duration.ofSeconds(1))
 						.doBeforeRetry((s) -> log.warn("Unexpected error in {}-check", this.name, s.failure())))
 				.subscribe();
 	}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/IntervalCheckTest.java
Patch:
@@ -88,7 +88,7 @@ public void should_check_after_error() throws InterruptedException {
 		when(this.checkFn.apply(any())).thenReturn(Mono.error(new RuntimeException("Test"))).thenReturn(Mono.empty());
 
 		this.intervalCheck.start();
-		Thread.sleep(100);
+		Thread.sleep(1500);
 		verify(this.checkFn, atLeast(2)).apply(InstanceId.of("Test"));
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/BuildVersion.java
Patch:
@@ -32,9 +32,10 @@ public final class BuildVersion implements Serializable, Comparable<BuildVersion
 	private final String value;
 
 	private BuildVersion(String value) {
-		if(!StringUtils.hasText(value)) {
+		if (!StringUtils.hasText(value)) {
 			this.value = DEFAULT_VERSION;
-		} else {
+		}
+		else {
 			this.value = value;
 		}
 	}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/BuildVersionTest.java
Patch:
@@ -26,6 +26,7 @@ public class BuildVersionTest {
 
 	@Test
 	public void should_return_version() {
+		assertThat(BuildVersion.valueOf(null).getValue()).isEqualTo("UNKNOWN");
 		assertThat(BuildVersion.from(emptyMap())).isNull();
 		assertThat(BuildVersion.from(singletonMap("version", "1.0.0"))).isEqualTo(BuildVersion.valueOf("1.0.0"));
 		assertThat(BuildVersion.from(singletonMap("build.version", "1.0.0"))).isEqualTo(BuildVersion.valueOf("1.0.0"));

File: spring-boot-admin-samples/spring-boot-admin-sample-reactive/src/main/java/de/codecentric/boot/admin/SpringBootAdminReactiveApplication.java
Patch:
@@ -58,8 +58,8 @@ public SecurityWebFilterChain securityWebFilterChainSecure(ServerHttpSecurity ht
 		return http
 				.authorizeExchange((authorizeExchange) -> authorizeExchange
 						.pathMatchers(this.adminServer.path("/assets/**")).permitAll()
-						.pathMatchers("/actuator/health/**").permitAll()
-						.pathMatchers(this.adminServer.path("/login")).permitAll().anyExchange().authenticated())
+						.pathMatchers("/actuator/health/**").permitAll().pathMatchers(this.adminServer.path("/login"))
+						.permitAll().anyExchange().authenticated())
 				.formLogin((formLogin) -> formLogin.loginPage(this.adminServer.path("/login")))
 				.logout((logout) -> logout.logoutUrl(this.adminServer.path("/logout")))
 				.httpBasic(Customizer.withDefaults()).csrf(ServerHttpSecurity.CsrfSpec::disable).build();

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -144,7 +144,8 @@ protected String getManagementPath(ServiceInstance instance) {
 	}
 
 	protected URI getServiceUrl(ServiceInstance instance) {
-		// TODO: Mitigates an issue that is fixed in Spring Cloud Commons 3.1.2. We will remove this as soon as Spring Cloud includes the fix.
+		// TODO: Mitigates an issue that is fixed in Spring Cloud Commons 3.1.2. We will
+		// remove this as soon as Spring Cloud includes the fix.
 		if (instance.getPort() == -1) {
 			return UriComponentsBuilder.newInstance().scheme(instance.isSecure() ? "https" : "http")
 					.host(instance.getHost()).build().toUri();

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/AdminApplicationDiscoveryTest.java
Patch:
@@ -68,7 +68,7 @@ void setUp() {
 				.web(WebApplicationType.REACTIVE).run("--server.port=0", "--management.endpoints.web.base-path=/mgmt",
 						"--management.endpoints.web.exposure.include=info,health", "--info.test=foobar",
 						"--eureka.client.enabled=false", "--spring.cloud.kubernetes.enabled=false",
-						"--spring.cloud.kubernetes.discovery.enabled=false");
+						"--spring.cloud.kubernetes.discovery.enabled=false", "--management.info.env.enabled=true");
 
 		this.simpleDiscovery = this.instance.getBean(SimpleDiscoveryProperties.class);
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreWithClientConfigTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import java.util.List;
 
+import com.hazelcast.client.HazelcastClient;
 import com.hazelcast.client.config.ClientConfig;
 import com.hazelcast.core.HazelcastInstance;
 import com.hazelcast.map.IMap;
 import org.junit.jupiter.api.Tag;
-import org.springframework.boot.autoconfigure.hazelcast.HazelcastClientFactory;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
@@ -35,7 +35,7 @@
 public class HazelcastEventStoreWithClientConfigTest extends AbstractEventStoreTest {
 
 	@Container
-	private static final GenericContainer<?> hazelcastServer = new GenericContainer<>("hazelcast/hazelcast:4.0")
+	private static final GenericContainer<?> hazelcastServer = new GenericContainer<>("hazelcast/hazelcast:4.2.2")
 			.withExposedPorts(5701);
 
 	private final HazelcastInstance hazelcast;
@@ -56,7 +56,7 @@ private HazelcastInstance createHazelcastInstance() {
 		ClientConfig clientConfig = new ClientConfig();
 		clientConfig.getNetworkConfig().addAddress(address);
 
-		return new HazelcastClientFactory(clientConfig).getHazelcastInstance();
+		return HazelcastClient.newHazelcastClient(clientConfig);
 	}
 
 }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreWithServerConfigTest.java
Patch:
@@ -25,10 +25,10 @@
 import com.hazelcast.config.MapConfig;
 import com.hazelcast.config.MergePolicyConfig;
 import com.hazelcast.config.TcpIpConfig;
+import com.hazelcast.core.Hazelcast;
 import com.hazelcast.core.HazelcastInstance;
 import com.hazelcast.map.IMap;
 import com.hazelcast.spi.merge.PutIfAbsentMergePolicy;
-import org.springframework.boot.autoconfigure.hazelcast.HazelcastInstanceFactory;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
 import de.codecentric.boot.admin.server.domain.values.InstanceId;
@@ -54,7 +54,7 @@ protected InstanceEventStore createStore(int maxLogSizePerAggregate) {
 
 	private HazelcastInstance createHazelcastInstance() {
 		Config config = createHazelcastConfig();
-		return (new HazelcastInstanceFactory(config)).getHazelcastInstance();
+		return Hazelcast.newHazelcastInstance(config);
 	}
 
 	// config from sample project

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -148,8 +148,9 @@ protected URI getServiceUrl(ServiceInstance instance) {
 	}
 
 	protected Map<String, String> getMetadata(ServiceInstance instance) {
-		return (instance.getMetadata() != null) ? instance.getMetadata().entrySet().stream()
-				.filter((e) -> e.getKey() != null && e.getValue() != null).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))
+		return (instance.getMetadata() != null)
+				? instance.getMetadata().entrySet().stream().filter((e) -> e.getKey() != null && e.getValue() != null)
+						.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))
 				: emptyMap();
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Tags.java
Patch:
@@ -78,11 +78,12 @@ public static Tags from(Map<String, ?> map, @Nullable String prefix) {
 			}
 
 			String flatPrefix = prefix + ".";
-			return from(map.entrySet().stream().filter((e) -> e.getKey().toLowerCase().startsWith(flatPrefix))
+			return from(map.entrySet().stream().filter((e) -> e.getKey() != null)
+					.filter((e) -> e.getKey().toLowerCase().startsWith(flatPrefix))
 					.collect(toLinkedHashMap((e) -> e.getKey().substring(flatPrefix.length()), Map.Entry::getValue)));
 		}
 
-		return new Tags(map.entrySet().stream()
+		return new Tags(map.entrySet().stream().filter((e) -> e.getKey() != null)
 				.collect(toLinkedHashMap(Map.Entry::getKey, (e) -> Objects.toString(e.getValue()))));
 	}
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/endpoints/ProbeEndpointsStrategyTest.java
Patch:
@@ -21,13 +21,13 @@
 import com.github.tomakehurst.wiremock.WireMockServer;
 import com.github.tomakehurst.wiremock.core.Options;
 import com.github.tomakehurst.wiremock.http.Fault;
+import org.eclipse.jetty.http.HttpStatus;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import reactor.test.StepVerifier;
-import wiremock.org.eclipse.jetty.http.HttpStatus;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
 import de.codecentric.boot.admin.server.domain.values.Endpoints;

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfigurationTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
+import org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties;
 import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;
 import org.springframework.boot.test.context.runner.WebApplicationContextRunner;
 import org.springframework.http.HttpHeaders;
@@ -57,9 +58,8 @@ public class AdminServerUiAutoConfigurationTest implements WithAssertions {
 	public class ReactiveUiConfigurationTest {
 
 		private final ReactiveWebApplicationContextRunner contextRunner = new ReactiveWebApplicationContextRunner()
-				.withPropertyValues("--spring.boot.admin.ui.available-languages=de",
-						"--spring.boot.admin.contextPath=test")
-				.withBean(AdminServerProperties.class)
+				.withPropertyValues("--spring.boot.admin.ui.available-languages=de", "--spring.webflux.base-path=test")
+				.withBean(AdminServerProperties.class).withBean(WebFluxProperties.class)
 				.withConfiguration(AutoConfigurations.of(AdminServerUiAutoConfiguration.class));
 
 		@Mock

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java
Patch:
@@ -132,8 +132,8 @@ public HomepageForwardingFilterConfig homepageForwardingFilterConfig() throws IO
 				.scan(this.adminUi.getExtensionResourceLocations());
 		List<String> routesIncludes = Stream.concat(DEFAULT_UI_ROUTES.stream(), extensionRoutes.stream())
 				.map(this.adminServer::path).collect(Collectors.toList());
-		List<String> routesExcludes = Stream.concat(DEFAULT_UI_ROUTE_EXCLUDES.stream(), extensionRoutes.stream())
-				.map(this.adminServer::path).collect(Collectors.toList());
+		List<String> routesExcludes = DEFAULT_UI_ROUTE_EXCLUDES.stream().map(this.adminServer::path)
+				.collect(Collectors.toList());
 
 		return new HomepageForwardingFilterConfig(homepage, routesIncludes, routesExcludes);
 	}

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/HomepageForwardingMatcher.java
Patch:
@@ -53,8 +53,9 @@ public boolean test(T request) {
 		}
 
 		String path = this.pathAccessor.apply(request);
-		if (this.excludeRoutes.stream().anyMatch((p) -> p.matcher(path).matches())
-				|| this.includeRoutes.stream().noneMatch((p) -> p.matcher(path).matches())) {
+		boolean isExcludedRoute = this.excludeRoutes.stream().anyMatch((p) -> p.matcher(path).matches());
+		boolean isIncludedRoute = this.includeRoutes.stream().anyMatch((p) -> p.matcher(path).matches());
+		if (isExcludedRoute || !isIncludedRoute) {
 			return false;
 		}
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/AdminReactiveApplicationTest.java
Patch:
@@ -37,8 +37,8 @@ public class AdminReactiveApplicationTest extends AbstractAdminApplicationTest {
 	@BeforeEach
 	public void setUp() {
 		this.instance = new SpringApplicationBuilder().sources(TestAdminApplication.class)
-				.web(WebApplicationType.REACTIVE)
-				.run("--server.port=0", "--management.endpoints.web.base-path=/mgmt", "--info.test=foobar");
+				.web(WebApplicationType.REACTIVE).run("--server.port=0", "--management.endpoints.web.base-path=/mgmt",
+						"--management.endpoints.web.exposure.include=info,health", "--info.test=foobar");
 
 		super.setUp(this.instance.getEnvironment().getProperty("local.server.port", Integer.class, 0));
 	}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/AdminServletApplicationTest.java
Patch:
@@ -36,8 +36,8 @@ public class AdminServletApplicationTest extends AbstractAdminApplicationTest {
 	@BeforeEach
 	public void setUp() {
 		this.instance = new SpringApplicationBuilder().sources(TestAdminApplication.class)
-				.web(WebApplicationType.SERVLET)
-				.run("--server.port=0", "--management.endpoints.web.base-path=/mgmt", "--info.test=foobar");
+				.web(WebApplicationType.SERVLET).run("--server.port=0", "--management.endpoints.web.base-path=/mgmt",
+						"--management.endpoints.web.exposure.include=info,health", "--info.test=foobar");
 
 		super.setUp(this.instance.getEnvironment().getProperty("local.server.port", Integer.class, 0));
 	}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunctions.java
Patch:
@@ -27,7 +27,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.actuate.endpoint.http.ActuatorMediaType;
-import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
@@ -141,7 +140,7 @@ private static ClientResponse convertLegacyResponse(LegacyEndpointConverter conv
 		return response.mutate().headers((headers) -> {
 			headers.replace(HttpHeaders.CONTENT_TYPE, singletonList(ActuatorMediaType.V2_JSON));
 			headers.remove(HttpHeaders.CONTENT_LENGTH);
-		}).body(response.bodyToFlux(DataBuffer.class).transform(converter::convert)).build();
+		}).body(converter::convert).build();
 	}
 
 	public static InstanceExchangeFilterFunction setDefaultAcceptHeader() {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfiguration.java
Patch:
@@ -319,7 +319,8 @@ public static class DingTalkNotifierConfiguration {
 		@Bean
 		@ConditionalOnMissingBean
 		@ConfigurationProperties("spring.boot.admin.notify.dingtalk")
-		public DingTalkNotifier dingTalkNotifier(InstanceRepository repository, NotifierProxyProperties proxyProperties) {
+		public DingTalkNotifier dingTalkNotifier(InstanceRepository repository,
+				NotifierProxyProperties proxyProperties) {
 			return new DingTalkNotifier(repository, createNotifierRestTemplate(proxyProperties));
 		}
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/AbstractAdminApplicationTest.java
Patch:
@@ -62,7 +62,7 @@ public void lifecycle() {
 					listInstances();
 					deregisterInstance(location.get());
 				}).assertNext((event) -> assertThat(event.opt("type")).isEqualTo("DEREGISTERED"))
-				.then(this::listEmptyInstances).thenCancel().verify(Duration.ofSeconds(60));
+				.then(this::listEmptyInstances).thenCancel().verify(Duration.ofSeconds(120));
 	}
 
 	protected Flux<JSONObject> getEventStream() {

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/AbstractInstancesProxyControllerIntegrationTest.java
Patch:
@@ -72,7 +72,7 @@ public abstract class AbstractInstancesProxyControllerIntegrationTest {
 
 	@BeforeAll
 	public static void setUp() {
-		StepVerifier.setDefaultTimeout(Duration.ofSeconds(5));
+		StepVerifier.setDefaultTimeout(Duration.ofSeconds(60));
 	}
 
 	@AfterAll

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Endpoint.java
Patch:
@@ -47,6 +47,8 @@ public final class Endpoint implements Serializable {
 
 	public static final String MAPPINGS = "mappings";
 
+	public static final String STARTUP = "startup";
+
 	private final String id;
 
 	private final String url;

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerInstanceWebClientConfigurationTest.java
Patch:
@@ -54,7 +54,8 @@ public void simpleConfig() {
 					"healthLegacyEndpointConverter", "infoLegacyEndpointConverter", "envLegacyEndpointConverter",
 					"httptraceLegacyEndpointConverter", "threaddumpLegacyEndpointConverter",
 					"liquibaseLegacyEndpointConverter", "flywayLegacyEndpointConverter", "beansLegacyEndpointConverter",
-					"configpropsLegacyEndpointConverter", "mappingsLegacyEndpointConverter");
+					"configpropsLegacyEndpointConverter", "mappingsLegacyEndpointConverter",
+					"startupLegacyEndpointConverter");
 		});
 	}
 

File: .mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -20,12 +20,12 @@
 
 public class MavenWrapperDownloader {
 
-    private static final String WRAPPER_VERSION = "0.5.4";
+    private static final String WRAPPER_VERSION = "0.5.6";
     /**
      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
      */
     private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
-        + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + " .jar";
+        + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";
 
     /**
      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminHazelcastApplication.java
Patch:
@@ -21,6 +21,7 @@
 import com.hazelcast.config.EvictionPolicy;
 import com.hazelcast.config.InMemoryFormat;
 import com.hazelcast.config.MapConfig;
+import com.hazelcast.config.MaxSizePolicy;
 import com.hazelcast.config.MergePolicyConfig;
 import com.hazelcast.config.TcpIpConfig;
 import com.hazelcast.spi.merge.PutIfAbsentMergePolicy;
@@ -75,7 +76,8 @@ public Config hazelcastConfig() {
 		// the same notification to be sent by multiple instances
 		MapConfig sentNotificationsMap = new MapConfig(DEFAULT_NAME_SENT_NOTIFICATIONS_MAP)
 				.setInMemoryFormat(InMemoryFormat.OBJECT).setBackupCount(1)
-				.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU))
+				.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU)
+						.setMaxSizePolicy(MaxSizePolicy.PER_NODE))
 				.setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));
 
 		Config config = new Config();

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminHazelcastApplication.java
Patch:
@@ -21,6 +21,7 @@
 import com.hazelcast.config.EvictionPolicy;
 import com.hazelcast.config.InMemoryFormat;
 import com.hazelcast.config.MapConfig;
+import com.hazelcast.config.MaxSizePolicy;
 import com.hazelcast.config.MergePolicyConfig;
 import com.hazelcast.config.TcpIpConfig;
 import com.hazelcast.spi.merge.PutIfAbsentMergePolicy;
@@ -75,7 +76,8 @@ public Config hazelcastConfig() {
 		// the same notification to be sent by multiple instances
 		MapConfig sentNotificationsMap = new MapConfig(DEFAULT_NAME_SENT_NOTIFICATIONS_MAP)
 				.setInMemoryFormat(InMemoryFormat.OBJECT).setBackupCount(1)
-				.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU))
+				.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU)
+						.setMaxSizePolicy(MaxSizePolicy.PER_NODE))
 				.setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));
 
 		Config config = new Config();

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminHazelcastApplication.java
Patch:
@@ -21,6 +21,7 @@
 import com.hazelcast.config.EvictionPolicy;
 import com.hazelcast.config.InMemoryFormat;
 import com.hazelcast.config.MapConfig;
+import com.hazelcast.config.MaxSizePolicy;
 import com.hazelcast.config.MergePolicyConfig;
 import com.hazelcast.config.TcpIpConfig;
 import com.hazelcast.spi.merge.PutIfAbsentMergePolicy;
@@ -75,7 +76,8 @@ public Config hazelcastConfig() {
 		// the same notification to be sent by multiple instances
 		MapConfig sentNotificationsMap = new MapConfig(DEFAULT_NAME_SENT_NOTIFICATIONS_MAP)
 				.setInMemoryFormat(InMemoryFormat.OBJECT).setBackupCount(1)
-				.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU))
+				.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU)
+						.setMaxSizePolicy(MaxSizePolicy.PER_NODE))
 				.setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));
 
 		Config config = new Config();

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AdminUiReactiveApplicationTest.java
Patch:
@@ -39,9 +39,9 @@ public class AdminUiReactiveApplicationTest extends AbstractAdminUiApplicationTe
 	@BeforeAll
 	public static void setUp() {
 		instance = new SpringApplicationBuilder().sources(TestAdminApplication.class).web(WebApplicationType.REACTIVE)
-			.run("--server.port=0",
-				"--spring.boot.admin.ui.extension-resource-locations=classpath:/META-INF/test-extensions/",
-				"--spring.boot.admin.ui.available-languages=de");
+				.run("--server.port=0",
+						"--spring.boot.admin.ui.extension-resource-locations=classpath:/META-INF/test-extensions/",
+						"--spring.boot.admin.ui.available-languages=de");
 
 		port = instance.getEnvironment().getProperty("local.server.port", Integer.class, 0);
 	}

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import org.springframework.boot.context.properties.ConstructorBinding;
@@ -88,8 +86,10 @@ public List<UiExtension> getJsExtensions() {
 		return this.uiExtensions.getJsExtensions();
 	}
 
+	// FIXME: add @Nullable to principal parameter
+	// see https://github.com/spring-projects/spring-framework/issues/25981
 	@ModelAttribute(value = "user", binding = false)
-	public Map<String, Object> getUser(@Nullable Principal principal) {
+	public Map<String, Object> getUser(Principal principal) {
 		if (principal != null) {
 			return singletonMap("name", principal.getName());
 		}

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AdminUiServletApplicationTest.java
Patch:
@@ -59,7 +59,7 @@ public static class SecurityConfiguration extends WebSecurityConfigurerAdapter {
 			@Override
 			protected void configure(HttpSecurity http) throws Exception {
 				http.authorizeRequests().anyRequest().permitAll()//
-						.and().csrf().disable();
+						.and().csrf().disable().anonymous().principal("anonymousUser");
 			}
 
 		}

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/DefaultApplicationFactory.java
Patch:
@@ -101,7 +101,7 @@ protected String getServiceBaseUrl() {
 		}
 
 		return UriComponentsBuilder.newInstance().scheme(getScheme(this.server.getSsl())).host(getServiceHost())
-								   .port(getLocalServerPort()).toUriString();
+				.port(getLocalServerPort()).toUriString();
 	}
 
 	protected String getServicePath() {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/AbstractEventHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -62,7 +62,7 @@ public void start() {
 	protected abstract Publisher<Void> handle(Flux<T> publisher);
 
 	protected Scheduler createScheduler() {
-		return Schedulers.newElastic(this.getClass().getSimpleName());
+		return Schedulers.newSingle(this.getClass().getSimpleName());
 	}
 
 	public void stop() {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InfoUpdater.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -70,8 +70,8 @@ protected Mono<Instance> doUpdateInfo(Instance instance) {
 		}
 
 		log.debug("Update info for {}", instance);
-		return this.instanceWebClient.instance(instance).get().uri(Endpoint.INFO).exchange()
-				.log(log.getName(), Level.FINEST).flatMap((response) -> convertInfo(instance, response))
+		return this.instanceWebClient.instance(instance).get().uri(Endpoint.INFO)
+				.exchangeToMono((response) -> convertInfo(instance, response)).log(log.getName(), Level.FINEST)
 				.onErrorResume((ex) -> Mono.just(convertInfo(instance, ex))).map(instance::withInfo);
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/StatusUpdater.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -72,8 +72,8 @@ protected Mono<Instance> doUpdateStatus(Instance instance) {
 		}
 
 		log.debug("Update status for {}", instance);
-		return this.instanceWebClient.instance(instance).get().uri(Endpoint.HEALTH).exchange()
-				.log(log.getName(), Level.FINEST).flatMap(this::convertStatusInfo)
+		return this.instanceWebClient.instance(instance).get().uri(Endpoint.HEALTH)
+				.exchangeToMono(this::convertStatusInfo).log(log.getName(), Level.FINEST)
 				.doOnError((ex) -> logError(instance, ex)).onErrorResume(this::handleError)
 				.map(instance::withStatusInfo);
 	}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/ProbeEndpointsStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -70,8 +70,8 @@ public Mono<Endpoints> detectEndpoints(Instance instance) {
 	protected Mono<DetectedEndpoint> detectEndpoint(Instance instance, EndpointDefinition endpoint) {
 		URI uri = UriComponentsBuilder.fromUriString(instance.getRegistration().getManagementUrl()).path("/")
 				.path(endpoint.getPath()).build().toUri();
-		return this.instanceWebClient.instance(instance).options().uri(uri).exchange()
-				.flatMap(this.convert(instance.getId(), endpoint, uri)).onErrorResume((e) -> {
+		return this.instanceWebClient.instance(instance).options().uri(uri)
+				.exchangeToMono(this.convert(instance.getId(), endpoint, uri)).onErrorResume((e) -> {
 					log.warn("Endpoint probe for instance {} on endpoint '{}' failed: {}", instance.getId(), uri,
 							e.getMessage());
 					log.debug("Endpoint probe for instance {} on endpoint '{}' failed.", instance.getId(), uri, e);

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/QueryIndexEndpointStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -61,8 +61,8 @@ public Mono<Endpoints> detectEndpoints(Instance instance) {
 			return Mono.empty();
 		}
 
-		return this.instanceWebClient.instance(instance).get().uri(managementUrl).exchange()
-				.flatMap(this.convert(instance, managementUrl)).onErrorResume((e) -> {
+		return this.instanceWebClient.instance(instance).get().uri(managementUrl)
+				.exchangeToMono(this.convert(instance, managementUrl)).onErrorResume((e) -> {
 					log.warn("Querying actuator-index for instance {} on '{}' failed: {}", instance.getId(),
 							managementUrl, e.getMessage());
 					log.debug("Querying actuator-index for instance {} on '{}' failed.", instance.getId(),

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/AbstractEventHandlerTest.java
Patch:
@@ -92,7 +92,7 @@ private TestEventHandler(Publisher<InstanceEvent> publisher) {
 		protected Publisher<Void> handle(Flux<InstanceRegisteredEvent> publisher) {
 			return publisher.flatMap((event) -> {
 				if (event.equals(errorEvent)) {
-					return Mono.error(new IllegalStateException("Error"));
+					return Mono.error(new IllegalStateException("TestError"));
 				}
 				else {
 					log.info("Event {}", event);

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/CloudFoundryApplicationFactory.java
Patch:
@@ -43,7 +43,7 @@ public CloudFoundryApplicationFactory(InstanceProperties instance, ManagementSer
 	@Override
 	protected String getServiceBaseUrl() {
 		String baseUrl = this.instance.getServiceBaseUrl();
-		if (!StringUtils.isEmpty(baseUrl)) {
+		if (StringUtils.hasText(baseUrl)) {
 			return baseUrl;
 		}
 

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/ServletApplicationFactory.java
Patch:
@@ -68,7 +68,7 @@ protected String getServiceUrl() {
 	protected String getManagementBaseUrl() {
 		String baseUrl = instance.getManagementBaseUrl();
 
-		if (!StringUtils.isEmpty(baseUrl)) {
+		if (StringUtils.hasText(baseUrl)) {
 			return baseUrl;
 		}
 
@@ -83,7 +83,7 @@ protected String getManagementBaseUrl() {
 	}
 
 	protected String getManagementContextPath() {
-		return management.getServlet().getContextPath();
+		return management.getBasePath();
 	}
 
 	protected String getServerContextPath() {

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminHazelcastApplication.java
Patch:
@@ -74,7 +74,8 @@ public Config hazelcastConfig() {
 		// lead to
 		// the same notification to be sent by multiple instances
 		MapConfig sentNotificationsMap = new MapConfig(DEFAULT_NAME_SENT_NOTIFICATIONS_MAP)
-				.setInMemoryFormat(InMemoryFormat.OBJECT).setBackupCount(1).setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU))
+				.setInMemoryFormat(InMemoryFormat.OBJECT).setBackupCount(1)
+				.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU))
 				.setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));
 
 		Config config = new Config();

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/EurekaServiceInstanceConverter.java
Patch:
@@ -40,7 +40,7 @@ protected URI getHealthUrl(ServiceInstance instance) {
 
 		InstanceInfo instanceInfo = ((EurekaServiceInstance) instance).getInstanceInfo();
 		String healthUrl = instanceInfo.getSecureHealthCheckUrl();
-		if (StringUtils.isEmpty(healthUrl)) {
+		if (!StringUtils.hasText(healthUrl)) {
 			healthUrl = instanceInfo.getHealthCheckUrl();
 		}
 		return URI.create(healthUrl);

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/KubernetesServiceInstanceConverter.java
Patch:
@@ -18,14 +18,14 @@
 
 import org.springframework.cloud.client.ServiceInstance;
 
-import static org.springframework.util.StringUtils.isEmpty;
+import static org.springframework.util.StringUtils.hasText;
 
 public class KubernetesServiceInstanceConverter extends DefaultServiceInstanceConverter {
 
 	@Override
 	protected int getManagementPort(ServiceInstance instance) {
 		String managementPort = instance.getMetadata().get("port.management");
-		if (!isEmpty(managementPort)) {
+		if (hasText(managementPort)) {
 			return Integer.parseInt(managementPort);
 		}
 		return super.getManagementPort(instance);

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunctions.java
Patch:
@@ -138,7 +138,7 @@ private static Boolean isLegacyResponse(ClientResponse response) {
 	}
 
 	private static ClientResponse convertLegacyResponse(LegacyEndpointConverter converter, ClientResponse response) {
-		return ClientResponse.from(response).headers((headers) -> {
+		return response.mutate().headers((headers) -> {
 			headers.replace(HttpHeaders.CONTENT_TYPE, singletonList(ActuatorMediaType.V2_JSON));
 			headers.remove(HttpHeaders.CONTENT_LENGTH);
 		}).body(response.bodyToFlux(DataBuffer.class).transform(converter::convert)).build();

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/LegacyEndpointConverters.java
Patch:
@@ -399,7 +399,7 @@ private static Map<String, Object> convertMappingConditions(String predicate) {
 
 			// All detail values in SB1.x are in form of 'str1 || str2' so we split
 			// them on ' || '
-			List<Object> conditionValue = Arrays.asList(conditionValueStr.split(" \\|\\| "));
+			List<Object> conditionValue = Arrays.asList((Object[]) conditionValueStr.split(" \\|\\| "));
 
 			// Based on conditionKey we may need to apply some transformations,
 			// mostly wrapping, of the input values

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreWithServerConfigTest.java
Patch:
@@ -47,7 +47,8 @@ public HazelcastEventStoreWithServerConfigTest() {
 
 	@Override
 	protected InstanceEventStore createStore(int maxLogSizePerAggregate) {
-		IMap<InstanceId, List<InstanceEvent>> eventLogs = this.hazelcast.getMap("testList" + System.currentTimeMillis());
+		IMap<InstanceId, List<InstanceEvent>> eventLogs = this.hazelcast
+				.getMap("testList" + System.currentTimeMillis());
 		return new HazelcastEventStore(maxLogSizePerAggregate, eventLogs);
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Registration.java
Patch:
@@ -67,7 +67,8 @@ private Registration(String name, @Nullable String managementUrl, String healthU
 		this.healthUrl = healthUrl;
 		this.serviceUrl = serviceUrl;
 		this.source = source;
-		this.metadata = new LinkedHashMap<>(metadata);
+		this.metadata = new LinkedHashMap<>();
+		metadata.forEach((key, value) -> this.metadata.put(key, value));
 	}
 
 	public static Registration.Builder create(String name, String healthUrl) {

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/AbstractEventStoreTest.java
Patch:
@@ -49,7 +49,8 @@ public abstract class AbstractEventStoreTest {
 
 	private final InstanceId id = InstanceId.of("id");
 
-	private final Registration registration = Registration.create("foo", "http://health").build();
+	private final Registration registration = Registration.create("foo", "http://health").metadata("test", "dummy")
+			.build();
 
 	protected abstract InstanceEventStore createStore(int maxLogSizePerAggregate);
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreTest.java
Patch:
@@ -24,7 +24,8 @@ public class HazelcastEventStoreTest extends AbstractEventStoreTest {
 	@Override
 	protected InstanceEventStore createStore(int maxLogSizePerAggregate) {
 		HazelcastInstance hazelcast = new TestHazelcastInstanceFactory(1).newHazelcastInstance();
-		return new HazelcastEventStore(maxLogSizePerAggregate, hazelcast.getMap("testList"));
+		return new HazelcastEventStore(maxLogSizePerAggregate,
+				hazelcast.getMap("testList" + System.currentTimeMillis()));
 	}
 
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/RemindingNotifier.java
Patch:
@@ -32,7 +32,7 @@
 import reactor.core.publisher.Mono;
 import reactor.core.scheduler.Scheduler;
 import reactor.core.scheduler.Schedulers;
-import reactor.retry.Retry;
+import reactor.util.retry.Retry;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
 import de.codecentric.boot.admin.server.domain.entities.InstanceRepository;
@@ -89,8 +89,8 @@ public void start() {
 		this.subscription = Flux.interval(this.checkReminderInverval, this.reminderScheduler)
 				.log(log.getName(), Level.FINEST).doOnSubscribe((s) -> log.debug("Started reminders"))
 				.flatMap((i) -> this.sendReminders())
-				.retryWhen(Retry.any().retryMax(Long.MAX_VALUE)
-						.doOnRetry((ctx) -> log.warn("Unexpected error when sending reminders", ctx.exception())))
+				.retryWhen(Retry.indefinitely()
+						.doBeforeRetry((s) -> log.warn("Unexpected error when sending reminders", s.failure())))
 				.subscribe();
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/AbstractEventHandler.java
Patch:
@@ -27,7 +27,7 @@
 import reactor.core.publisher.Flux;
 import reactor.core.scheduler.Scheduler;
 import reactor.core.scheduler.Schedulers;
-import reactor.retry.Retry;
+import reactor.util.retry.Retry;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
 
@@ -54,8 +54,8 @@ public void start() {
 		this.scheduler = this.createScheduler();
 		this.subscription = Flux.from(this.publisher).subscribeOn(this.scheduler).log(this.log.getName(), Level.FINEST)
 				.doOnSubscribe((s) -> this.log.debug("Subscribed to {} events", this.eventType)).ofType(this.eventType)
-				.cast(this.eventType).transform(this::handle).retryWhen(Retry.any().retryMax(Long.MAX_VALUE)
-						.doOnRetry((ctx) -> this.log.warn("Unexpected error", ctx.exception())))
+				.cast(this.eventType).transform(this::handle)
+				.retryWhen(Retry.indefinitely().doBeforeRetry((s) -> this.log.warn("Unexpected error", s.failure())))
 				.subscribe();
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/IntervalCheck.java
Patch:
@@ -32,7 +32,7 @@
 import reactor.core.publisher.Mono;
 import reactor.core.scheduler.Scheduler;
 import reactor.core.scheduler.Schedulers;
-import reactor.retry.Retry;
+import reactor.util.retry.Retry;
 
 import de.codecentric.boot.admin.server.domain.values.InstanceId;
 
@@ -80,8 +80,8 @@ public void start() {
 		this.subscription = Flux.interval(this.interval)
 				.doOnSubscribe((s) -> log.debug("Scheduled {}-check every {}", this.name, this.interval))
 				.log(log.getName(), Level.FINEST).subscribeOn(this.scheduler).concatMap((i) -> this.checkAllInstances())
-				.retryWhen(Retry.any().retryMax(Long.MAX_VALUE)
-						.doOnRetry((ctx) -> log.warn("Unexpected error in {}-check", this.name, ctx.exception())))
+				.retryWhen(Retry.indefinitely()
+						.doBeforeRetry((s) -> log.warn("Unexpected error in {}-check", this.name, s.failure())))
 				.subscribe();
 	}
 

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java
Patch:
@@ -99,7 +99,7 @@ public void startRegisterTask() {
 		}
 
 		scheduledTask = taskScheduler.scheduleAtFixedRate(registrator::register, registerPeriod);
-		LOGGER.debug("Scheduled registration task for every {}s", registerPeriod.getSeconds());
+		LOGGER.debug("Scheduled registration task for every {}ms", registerPeriod.toMillis());
 	}
 
 	public void stopRegisterTask() {

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java
Patch:
@@ -99,7 +99,7 @@ public void startRegisterTask() {
 		}
 
 		scheduledTask = taskScheduler.scheduleAtFixedRate(registrator::register, registerPeriod);
-		LOGGER.debug("Scheduled registration task for every {}ms", registerPeriod);
+		LOGGER.debug("Scheduled registration task for every {}s", registerPeriod.getSeconds());
 	}
 
 	public void stopRegisterTask() {

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SpringBootAdminServletApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,6 +27,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 
@@ -39,6 +40,7 @@
 @EnableAutoConfiguration
 @EnableAdminServer
 @Import({ SecurityPermitAllConfig.class, SecuritySecureConfig.class, NotifierConfig.class })
+@Lazy(false)
 public class SpringBootAdminServletApplication {
 
 	private static final Logger log = LoggerFactory.getLogger(SpringBootAdminServletApplication.class);

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,6 +25,7 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 import de.codecentric.boot.admin.server.domain.entities.InstanceRepository;
 import de.codecentric.boot.admin.server.domain.entities.SnapshottingInstanceRepository;
@@ -52,6 +53,7 @@
 @EnableConfigurationProperties(AdminServerProperties.class)
 @ImportAutoConfiguration({ AdminServerInstanceWebClientConfiguration.class, AdminServerWebConfiguration.class })
 @AutoConfigureAfter({ WebClientAutoConfiguration.class })
+@Lazy(false)
 public class AdminServerAutoConfiguration {
 
 	private final AdminServerProperties adminServerProperties;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerCloudFoundryAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 import de.codecentric.boot.admin.server.services.CloudFoundryInstanceIdGenerator;
 import de.codecentric.boot.admin.server.services.HashingInstanceUrlIdGenerator;
@@ -31,6 +32,7 @@
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnCloudPlatform(CloudPlatform.CLOUD_FOUNDRY)
 @AutoConfigureBefore({ AdminServerAutoConfiguration.class })
+@Lazy(false)
 public class AdminServerCloudFoundryAutoConfiguration {
 
 	@Bean

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerInstanceWebClientConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.context.annotation.Scope;
 import org.springframework.core.annotation.Order;
 import org.springframework.web.reactive.function.client.WebClient;
@@ -38,6 +39,7 @@
 import de.codecentric.boot.admin.server.web.client.LegacyEndpointConverters;
 
 @Configuration(proxyBeanMethods = false)
+@Lazy(false)
 public class AdminServerInstanceWebClientConfiguration {
 
 	private final InstanceWebClient.Builder instanceWebClientBuilder;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/MediaType.java
Patch:
@@ -20,9 +20,8 @@
 
 public final class MediaType {
 
-	@SuppressWarnings("deprecation") // We need to support Spring Boot 1.x apps...
 	public static final org.springframework.http.MediaType ACTUATOR_V1_MEDIATYPE = org.springframework.http.MediaType
-			.parseMediaType(ActuatorMediaType.V1_JSON);
+			.parseMediaType("application/vnd.spring-boot.actuator.v1+json");
 
 	public static final org.springframework.http.MediaType ACTUATOR_V2_MEDIATYPE = org.springframework.http.MediaType
 			.parseMediaType(ActuatorMediaType.V2_JSON);

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunctions.java
Patch:
@@ -41,6 +41,7 @@
 import de.codecentric.boot.admin.server.web.client.exception.ResolveEndpointException;
 
 import static de.codecentric.boot.admin.server.utils.MediaType.ACTUATOR_V1_MEDIATYPE;
+import static de.codecentric.boot.admin.server.utils.MediaType.ACTUATOR_V2_MEDIATYPE;
 import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
 import static org.springframework.http.MediaType.APPLICATION_JSON;
@@ -53,7 +54,7 @@ public final class InstanceExchangeFilterFunctions {
 
 	@SuppressWarnings("deprecation") // We need to support Spring Boot 1.x apps...
 	private static final List<MediaType> DEFAULT_ACCEPT_MEDIATYPES = asList(
-			MediaType.parseMediaType(ActuatorMediaType.V2_JSON), MediaType.parseMediaType(ActuatorMediaType.V1_JSON),
+		ACTUATOR_V2_MEDIATYPE, ACTUATOR_V1_MEDIATYPE,
 			MediaType.APPLICATION_JSON);
 
 	private static final List<MediaType> DEFAULT_LOGFILE_ACCEPT_MEDIATYPES = singletonList(MediaType.TEXT_PLAIN);

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/AbstractEventHandlerTest.java
Patch:
@@ -61,7 +61,8 @@ public void should_resubscribe_after_error() {
 		eventHandler.start();
 
 		StepVerifier.create(eventHandler.getFlux()).expectSubscription()
-				.then(() -> testPublisher.next(firstEvent, errorEvent, secondEvent)).expectNext(firstEvent, secondEvent)
+				.then(() -> testPublisher.next(firstEvent, errorEvent, secondEvent))
+				.expectNext(firstEvent, secondEvent)
 				.thenCancel().verify(Duration.ofSeconds(1));
 
 	}
@@ -78,7 +79,7 @@ public void should_filter() {
 				.expectNext(firstEvent, secondEvent).thenCancel().verify(Duration.ofSeconds(1));
 	}
 
-	public final class TestEventHandler extends AbstractEventHandler<InstanceRegisteredEvent> {
+	public static final class TestEventHandler extends AbstractEventHandler<InstanceRegisteredEvent> {
 
 		private final FluxSink<InstanceEvent> sink;
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/BuildVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2018 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,6 @@
 
 import javax.annotation.Nullable;
 
-import com.fasterxml.jackson.annotation.JsonValue;
 import org.springframework.util.Assert;
 
 @lombok.Data
@@ -65,7 +64,6 @@ public static BuildVersion from(Map<String, ?> map) {
 		return null;
 	}
 
-	@JsonValue
 	public String getValue() {
 		return this.value;
 	}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Tags.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2018 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,6 @@
 
 import javax.annotation.Nullable;
 
-import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import org.springframework.util.StringUtils;
 
 import static java.util.stream.Collectors.toMap;
@@ -48,7 +47,6 @@ private Tags(Map<String, String> tags) {
 		}
 	}
 
-	@JsonAnyGetter
 	public Map<String, String> getValues() {
 		return this.values;
 	}

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/KubernetesServiceInstanceConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,10 +23,10 @@
 public class KubernetesServiceInstanceConverter extends DefaultServiceInstanceConverter {
 
 	@Override
-	protected String getManagementPort(ServiceInstance instance) {
+	protected int getManagementPort(ServiceInstance instance) {
 		String managementPort = instance.getMetadata().get("port.management");
 		if (!isEmpty(managementPort)) {
-			return managementPort;
+			return Integer.parseInt(managementPort);
 		}
 		return super.getManagementPort(instance);
 	}

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/discovery/EurekaServiceInstanceConverterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,7 @@ public void convert_secure() {
 		Registration registration = new EurekaServiceInstanceConverter().convert(service);
 
 		assertThat(registration.getName()).isEqualTo("test");
-		assertThat(registration.getServiceUrl()).isEqualTo("http://localhost:80/");
+		assertThat(registration.getServiceUrl()).isEqualTo("http://localhost:80");
 		assertThat(registration.getManagementUrl()).isEqualTo("http://localhost:80/mgmt");
 		assertThat(registration.getHealthUrl()).isEqualTo("http://localhost:80/mgmt/ping");
 	}

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AdminUiReactiveApplicationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,8 @@ public class AdminUiReactiveApplicationTest extends AbstractAdminUiApplicationTe
 	@Before
 	public void setUp() {
 		this.instance = new SpringApplicationBuilder().sources(TestAdminApplication.class)
-				.web(WebApplicationType.REACTIVE).run("--server.port=0");
+				.web(WebApplicationType.REACTIVE).run("--server.port=0",
+						"--spring.boot.admin.ui.extension-resource-locations=classpath:/META-INF/test-extensions/");
 
 		super.setUp(this.instance.getEnvironment().getProperty("local.server.port", Integer.class, 0));
 	}

File: spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AdminUiServletApplicationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,8 @@ public class AdminUiServletApplicationTest extends AbstractAdminUiApplicationTes
 	@Before
 	public void setUp() {
 		this.instance = new SpringApplicationBuilder().sources(TestAdminApplication.class)
-				.web(WebApplicationType.SERVLET).run("--server.port=0");
+				.web(WebApplicationType.SERVLET).run("--server.port=0",
+						"--spring.boot.admin.ui.extension-resource-locations=classpath:/META-INF/test-extensions/");
 
 		super.setUp(this.instance.getEnvironment().getProperty("local.server.port", Integer.class, 0));
 	}

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/servlet/HomepageForwardingFilter.java
Patch:
@@ -43,6 +43,7 @@
  * history mode</a>
  */
 public class HomepageForwardingFilter implements Filter {
+
 	private static final Logger log = LoggerFactory.getLogger(HomepageForwardingFilter.class);
 
 	private final String homepage;
@@ -79,4 +80,5 @@ public void init(FilterConfig filterConfig) {
 	@Override
 	public void destroy() {
 	}
+
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2019 the original author or authors.
+ * Copyright 2014-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -47,7 +47,7 @@ public class AdminServerProperties {
 	/**
 	 * The metadata keys which should be sanitized when serializing to json
 	 */
-	private String[] metadataKeysToSanitize = new String[] { ".*password$", ".*secret$", ".*key$", ".*$token$",
+	private String[] metadataKeysToSanitize = new String[] { ".*password$", ".*secret$", ".*key$", ".*token$",
 			".*credentials.*", ".*vcap_services$" };
 
 	/**

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -40,6 +40,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.core.env.Environment;
 import org.springframework.web.reactive.function.client.WebClient;
 
@@ -99,6 +100,7 @@ public StartupDateMetadataContributor startupDateMetadataContributor() {
 	public static class ServletConfiguration {
 
 		@Bean
+		@Lazy(false)
 		@ConditionalOnMissingBean
 		public ApplicationFactory applicationFactory(InstanceProperties instance, ManagementServerProperties management,
 				ServerProperties server, ServletContext servletContext, PathMappedEndpoints pathMappedEndpoints,
@@ -117,6 +119,7 @@ public ApplicationFactory applicationFactory(InstanceProperties instance, Manage
 	public static class ReactiveConfiguration {
 
 		@Bean
+		@Lazy(false)
 		@ConditionalOnMissingBean
 		public ApplicationFactory applicationFactory(InstanceProperties instance, ManagementServerProperties management,
 				ServerProperties server, PathMappedEndpoints pathMappedEndpoints, WebEndpointProperties webEndpoint,

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientCloudFoundryAutoConfiguration.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 import de.codecentric.boot.admin.client.registration.CloudFoundryApplicationFactory;
 import de.codecentric.boot.admin.client.registration.metadata.CloudFoundryMetadataContributor;
@@ -55,6 +56,7 @@ public CloudFoundryMetadataContributor cloudFoundryMetadataContributor(
 	}
 
 	@Bean
+	@Lazy(false)
 	@ConditionalOnMissingBean
 	public CloudFoundryApplicationFactory applicationFactory(InstanceProperties instance,
 			ManagementServerProperties management, ServerProperties server, PathMappedEndpoints pathMappedEndpoints,

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/reactive/HomepageForwardingFilter.java
Patch:
@@ -36,9 +36,9 @@ public class HomepageForwardingFilter implements WebFilter {
 
 	private final HomepageForwardingMatcher<ServerHttpRequest> matcher;
 
-	public HomepageForwardingFilter(String homepage, List<String> routes) {
+	public HomepageForwardingFilter(String homepage, List<String> routeIncludes, List<String> routeExcludes) {
 		this.homepage = homepage;
-		this.matcher = new HomepageForwardingMatcher<>(routes, ServerHttpRequest::getMethodValue,
+		this.matcher = new HomepageForwardingMatcher<>(routeIncludes, routeExcludes, ServerHttpRequest::getMethodValue,
 				(r) -> r.getPath().pathWithinApplication().toString(), (r) -> r.getHeaders().getAccept());
 	}
 

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/servlet/HomepageForwardingFilter.java
Patch:
@@ -49,10 +49,10 @@ public class HomepageForwardingFilter implements Filter {
 
 	private final HomepageForwardingMatcher<HttpServletRequest> matcher;
 
-	public HomepageForwardingFilter(String homepage, List<String> routes) {
+	public HomepageForwardingFilter(String homepage, List<String> routes, List<String> excludedRoutes) {
 		this.homepage = homepage;
 		UrlPathHelper urlPathHelper = new UrlPathHelper();
-		this.matcher = new HomepageForwardingMatcher<>(routes, HttpServletRequest::getMethod,
+		this.matcher = new HomepageForwardingMatcher<>(routes, excludedRoutes, HttpServletRequest::getMethod,
 				urlPathHelper::getPathWithinApplication,
 				(r) -> MediaType.parseMediaTypes(r.getHeader(HttpHeaders.ACCEPT)));
 	}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/ConcurrentMapEventStore.java
Patch:
@@ -109,7 +109,7 @@ protected boolean doAppend(List<InstanceEvent> events) {
 			return true;
 		}
 
-		log.debug("Unsuccessful attempot append the events {} ", events);
+		log.debug("Unsuccessful attempt append the events {} ", events);
 		return false;
 	}
 
@@ -122,7 +122,7 @@ private void compact(List<InstanceEvent> events) {
 
 	private OptimisticLockingException createOptimisticLockException(InstanceEvent event, long lastVersion) {
 		return new OptimisticLockingException(
-				"Verison " + event.getVersion() + " was overtaken by " + lastVersion + " for " + event.getInstance());
+				"Version " + event.getVersion() + " was overtaken by " + lastVersion + " for " + event.getInstance());
 	}
 
 	protected static long getLastVersion(List<InstanceEvent> events) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Registration.java
Patch:
@@ -96,10 +96,10 @@ private boolean checkUrl(String url) {
 		}
 	}
 
-    public static class Builder {
+	public static class Builder {
 
-        // Will be generated by lombok
+		// Will be generated by lombok
 
-    }
+	}
 
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerHazelcastAutoConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public HazelcastEventStore eventStore(HazelcastInstance hazelcastInstance) {
     @ConditionalOnBean(Notifier.class)
     public static class NotifierTriggerConfiguration {
 
-        @Value("${spring.boot.admin.hazelcast.event-store:" + DEFAULT_NAME_SENT_NOTIFICATIONS_MAP + "}")
+        @Value("${spring.boot.admin.hazelcast.sent-notifications:" + DEFAULT_NAME_SENT_NOTIFICATIONS_MAP + "}")
         private String nameSentNotificationsMap = DEFAULT_NAME_SENT_NOTIFICATIONS_MAP;
 
         @Bean(initMethod = "start", destroyMethod = "stop")

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/QueryIndexEndpointStrategy.java
Patch:
@@ -117,7 +117,7 @@ protected Function<Endpoints, Endpoints> alignWithManagementUrl(InstanceId insta
                 return endpoints;
             }
             log.warn(
-                "Endpoints for instance {} queried from {} are falsely using http. Rewritten to https. Consider configuring this instance to use 'server.use-forward-headers=true'.",
+                "Endpoints for instance {} queried from {} are falsely using http. Rewritten to https. Consider configuring this instance to use 'server.forward-headers-strategy=native'.",
                 instanceId,
                 managementUrl
             );

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/EurekaServiceInstanceConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2018 the original author or authors.
+ * Copyright 2014-2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 
 import java.net.URI;
 import org.springframework.cloud.client.ServiceInstance;
-import org.springframework.cloud.netflix.eureka.EurekaDiscoveryClient.EurekaServiceInstance;
+import org.springframework.cloud.netflix.eureka.EurekaServiceInstance;
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;
 import com.netflix.appinfo.InstanceInfo;

File: spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/discovery/EurekaServiceInstanceConverterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2018 the original author or authors.
+ * Copyright 2014-2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 
 import java.net.URI;
 import org.junit.Test;
-import org.springframework.cloud.netflix.eureka.EurekaDiscoveryClient.EurekaServiceInstance;
+import org.springframework.cloud.netflix.eureka.EurekaServiceInstance;
 import com.netflix.appinfo.InstanceInfo;
 
 import static java.util.Collections.singletonMap;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/MediaType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2018 the original author or authors.
+ * Copyright 2014-2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import org.springframework.boot.actuate.endpoint.http.ActuatorMediaType;
 
 public final class MediaType {
+    @SuppressWarnings("deprecation") // We need to support Spring Boot 1.x apps...
     public static final org.springframework.http.MediaType ACTUATOR_V1_MEDIATYPE = org.springframework.http.MediaType.parseMediaType(
         ActuatorMediaType.V1_JSON);
     public static final org.springframework.http.MediaType ACTUATOR_V2_MEDIATYPE = org.springframework.http.MediaType.parseMediaType(

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunctions.java
Patch:
@@ -47,6 +47,7 @@
 public final class InstanceExchangeFilterFunctions {
     private static final Logger log = LoggerFactory.getLogger(InstanceExchangeFilterFunctions.class);
     public static final String ATTRIBUTE_ENDPOINT = "endpointId";
+    @SuppressWarnings("deprecation") // We need to support Spring Boot 1.x apps...
     private static final List<MediaType> DEFAULT_ACCEPT_MEDIATYPES = asList(MediaType.parseMediaType(ActuatorMediaType.V2_JSON),
         MediaType.parseMediaType(ActuatorMediaType.V1_JSON),
         MediaType.APPLICATION_JSON

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java
Patch:
@@ -89,6 +89,7 @@ public UiController homeUiController() throws IOException {
                                       .notificationFilterEnabled(!this.applicationContext.getBeansOfType(
                                           NotificationFilterController.class).isEmpty())
                                       .routes(routes)
+                                      .rememberMeEnabled(this.adminUi.isRememberMeEnabled())
                                       .externalViews(this.adminUi.getExternalViews())
                                       .build();
 

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java
Patch:
@@ -118,6 +118,7 @@ public static class Settings {
         private final String favicon;
         private final String faviconDanger;
         private final boolean notificationFilterEnabled;
+        private final boolean rememberMeEnabled;
         private final List<String> routes;
         private final List<ExternalView> externalViews;
     }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InstanceRegistry.java
Patch:
@@ -43,7 +43,7 @@ public InstanceRegistry(InstanceRepository repository, InstanceIdGenerator gener
      * Register instance.
      *
      * @param registration instance to be registered.
-     * @return the if of the registered instance.
+     * @return the id of the registered instance.
      */
     public Mono<InstanceId> register(Registration registration) {
         Assert.notNull(registration, "'registration' must not be null");

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiProperties.java
Patch:
@@ -67,7 +67,7 @@ public class AdminServerUiProperties {
     /**
      * Brand to be shown in then navbar.
      */
-    private String brand = "<img src=\"assets/img/icon-spring-boot-admin.svg\"><span>Spring Boot Admin</span></img>";
+    private String brand = "<img src=\"assets/img/icon-spring-boot-admin.svg\"><span>Spring Boot Admin</span>";
 
     /**
      * If running behind a reverse proxy (using path rewriting) this can be used to output correct self references.

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java
Patch:
@@ -106,7 +106,7 @@ public String index() {
         return "index";
     }
 
-    @GetMapping(path = "/sba-settings.js", produces = MediaType.APPLICATION_JSON_VALUE)
+    @GetMapping(path = "/sba-settings.js", produces = "text/javascript")
     public String sbaSettings() {
         return "sba-settings.js";
     }

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SpringBootAdminServletApplication.java
Patch:
@@ -45,12 +45,11 @@ public static void main(String[] args) {
     // tag::customization-instance-exchange-filter-function[]
     @Bean
     public InstanceExchangeFilterFunction auditLog() {
-        return (instance, request, next) -> {
+        return (instance, request, next) -> next.exchange(request).doOnSubscribe(s -> {
             if (HttpMethod.DELETE.equals(request.method()) || HttpMethod.POST.equals(request.method())) {
                 log.info("{} for {} on {}", request.method(), instance.getId(), request.url());
             }
-            return next.exchange(request);
-        };
+        });
     }
     // end::customization-instance-exchange-filter-function[]
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/ApplicationsController.java
Patch:
@@ -71,7 +71,7 @@ public Flux<Application> applications() {
         return registry.getInstances()
                        .filter(Instance::isRegistered)
                        .groupBy(instance -> instance.getRegistration().getName())
-                       .flatMap(grouped -> toApplication(grouped.key(), grouped));
+                       .flatMap(grouped -> toApplication(grouped.key(), grouped), Integer.MAX_VALUE);
     }
 
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerInstanceWebClientConfigurationTest.java
Patch:
@@ -52,7 +52,7 @@ public void simpleConfig() {
                 "addHeadersInstanceExchangeFilter",
                 "rewriteEndpointUrlInstanceExchangeFilter",
                 "setDefaultAcceptHeaderInstanceExchangeFilter",
-                "legacyEndpointConverterInstanceExchangeFilter",
+                "legacyEndpointConverterInstanceExchangeFilter", "logfileAcceptWorkaround",
                 "retryInstanceExchangeFilter",
                 "timeoutInstanceExchangeFilter"
             );

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/web/NotificationFilterController.java
Patch:
@@ -63,7 +63,7 @@ public ResponseEntity<?> addFilter(@RequestParam(name = "instanceId", required =
             filteringNotifier.addFilter(filter);
             return ResponseEntity.ok(filter);
         } else {
-            return ResponseEntity.badRequest().body("Either 'id' or 'name' must be set");
+            return ResponseEntity.badRequest().body("Either 'instanceId' or 'applicationName' must be set");
         }
     }
 

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/InstanceDiscoveryListener.java
Patch:
@@ -146,9 +146,8 @@ protected Mono<InstanceId> registerInstance(ServiceInstance instance) {
 
     protected String toString(ServiceInstance instance) {
         String httpScheme = instance.isSecure() ? "https" : "http";
-        return String.format(
-            "serviceId=%s, url= %s://%s:%d",
-            instance.getServiceId(),
+        return String.format("serviceId=%s, instanceId=%s, url= %s://%s:%d",
+            instance.getServiceId(), instance.getInstanceId(),
             instance.getScheme() != null ? instance.getScheme() : httpScheme,
             instance.getHost(),
             instance.getPort()

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import de.codecentric.boot.admin.server.config.AdminServerMarkerConfiguration;
 import de.codecentric.boot.admin.server.config.AdminServerProperties;
 import de.codecentric.boot.admin.server.config.AdminServerWebConfiguration;
+import de.codecentric.boot.admin.server.notify.filter.web.NotificationFilterController;
 import de.codecentric.boot.admin.server.ui.extensions.UiExtension;
 import de.codecentric.boot.admin.server.ui.extensions.UiExtensionsScanner;
 import de.codecentric.boot.admin.server.ui.web.UiController;
@@ -68,7 +69,8 @@ public UiController homeUiController() throws IOException {
             null ? this.uiProperties.getPublicUrl() : this.adminServerProperties.getContextPath(),
             this.uiProperties.getTitle(),
             this.uiProperties.getBrand(),
-            this.uiExtensions()
+            this.uiExtensions(),
+            !this.applicationContext.getBeansOfType(NotificationFilterController.class).isEmpty()
         );
     }
 

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -115,7 +115,7 @@ public ApplicationRegistrator registrator(ClientProperties client,
                                                       .setConnectTimeout(client.getConnectTimeout())
                                                       .setReadTimeout(client.getReadTimeout());
         if (client.getUsername() != null) {
-            builder = builder.basicAuthorization(client.getUsername(), client.getPassword());
+            builder = builder.basicAuthentication(client.getUsername(), client.getPassword());
         }
         return new ApplicationRegistrator(builder.build(), client, applicationFactory);
     }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/entities/EventsourcingInstanceRepositoryTest.java
Patch:
@@ -18,10 +18,9 @@
 
 import de.codecentric.boot.admin.server.eventstore.InMemoryEventStore;
 
-public class EventsourcingInstanceRepositoryTest extends AbstractInstanceRepositoryTest {
+public class EventsourcingInstanceRepositoryTest extends AbstractInstanceRepositoryTest<EventsourcingInstanceRepository> {
 
     public EventsourcingInstanceRepositoryTest() {
         super(new EventsourcingInstanceRepository(new InMemoryEventStore()));
     }
-
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/NotificationTrigger.java
Patch:
@@ -17,14 +17,14 @@
 package de.codecentric.boot.admin.server.notify;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
-import de.codecentric.boot.admin.server.services.ResubscribingEventHandler;
+import de.codecentric.boot.admin.server.services.AbstractEventHandler;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.core.scheduler.Schedulers;
 
 import org.reactivestreams.Publisher;
 
-public class NotificationTrigger extends ResubscribingEventHandler<InstanceEvent> {
+public class NotificationTrigger extends AbstractEventHandler<InstanceEvent> {
     private final Notifier notifier;
 
     public NotificationTrigger(Notifier notifier, Publisher<InstanceEvent> publisher) {
@@ -33,7 +33,7 @@ public NotificationTrigger(Notifier notifier, Publisher<InstanceEvent> publisher
     }
 
     @Override
-    protected Publisher<?> handle(Flux<InstanceEvent> publisher) {
+    protected Publisher<Void> handle(Flux<InstanceEvent> publisher) {
         return publisher.subscribeOn(Schedulers.newSingle("notifications")).flatMap(this::sendNotifications);
     }
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/EndpointDetectionTrigger.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.reactivestreams.Publisher;
 
-public class EndpointDetectionTrigger extends ResubscribingEventHandler<InstanceEvent> {
+public class EndpointDetectionTrigger extends AbstractEventHandler<InstanceEvent> {
     private final EndpointDetector endpointDetector;
 
     public EndpointDetectionTrigger(EndpointDetector endpointDetector, Publisher<InstanceEvent> publisher) {
@@ -34,7 +34,7 @@ public EndpointDetectionTrigger(EndpointDetector endpointDetector, Publisher<Ins
     }
 
     @Override
-    protected Publisher<?> handle(Flux<InstanceEvent> publisher) {
+    protected Publisher<Void> handle(Flux<InstanceEvent> publisher) {
         return publisher.subscribeOn(Schedulers.newSingle("endpoint-detector"))
                         .filter(event -> event instanceof InstanceStatusChangedEvent ||
                                          event instanceof InstanceRegistrationUpdatedEvent)

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InfoUpdateTrigger.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.reactivestreams.Publisher;
 
-public class InfoUpdateTrigger extends ResubscribingEventHandler<InstanceEvent> {
+public class InfoUpdateTrigger extends AbstractEventHandler<InstanceEvent> {
     private final InfoUpdater infoUpdater;
 
     public InfoUpdateTrigger(InfoUpdater infoUpdater, Publisher<InstanceEvent> publisher) {
@@ -35,7 +35,7 @@ public InfoUpdateTrigger(InfoUpdater infoUpdater, Publisher<InstanceEvent> publi
     }
 
     @Override
-    protected Publisher<?> handle(Flux<InstanceEvent> publisher) {
+    protected Publisher<Void> handle(Flux<InstanceEvent> publisher) {
         return publisher.subscribeOn(Schedulers.newSingle("info-updater"))
                         .filter(event -> event instanceof InstanceEndpointsDetectedEvent ||
                                          event instanceof InstanceStatusChangedEvent ||

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -32,6 +32,7 @@
 import com.hazelcast.config.EvictionPolicy;
 import com.hazelcast.config.InMemoryFormat;
 import com.hazelcast.config.MapConfig;
+import com.hazelcast.map.merge.PutIfAbsentMapMergePolicy;
 
 @Configuration
 @EnableAutoConfiguration
@@ -42,7 +43,8 @@ public class SpringBootAdminApplication {
     public Config hazelcastConfig() {
         MapConfig mapConfig = new MapConfig("spring-boot-admin-event-store").setInMemoryFormat(InMemoryFormat.OBJECT)
                                                                             .setBackupCount(1)
-                                                                            .setEvictionPolicy(EvictionPolicy.NONE);
+                                                                            .setEvictionPolicy(EvictionPolicy.NONE)
+                                                                            .setMergePolicy(PutIfAbsentMapMergePolicy.class.getName());
         return new Config().setProperty("hazelcast.jmx", "true").addMapConfig(mapConfig);
     }
     // end::application-hazelcast[]

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Endpoint.java
Patch:
@@ -29,6 +29,7 @@ public class Endpoint implements Serializable {
     public static final String THREADDUMP = "threaddump";
     public static final String LIQUIBASE = "liquibase";
     public static final String FLYWAY = "flyway";
+    public static final String ACTUATOR_INDEX = "actuator-index";
     private final String id;
     private final String url;
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceWebClient.java
Patch:
@@ -78,7 +78,7 @@ private static WebClient createDefaultWebClient(Duration connectTimeout,
                                                     Duration readTimeout,
                                                     WebClientCustomizer customizer) {
         //@formatter:off
-        HttpClient httpClient = HttpClient.create().compress().tcpConfiguration(
+        HttpClient httpClient = HttpClient.create().compress(true).tcpConfiguration(
             tcp -> tcp.bootstrap(
                 bootstrap -> bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, (int) connectTimeout.toMillis())
             ).observe(

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/ApplicationsController.java
Patch:
@@ -75,6 +75,7 @@ public Flux<Application> applications() {
     @GetMapping(path = "/applications/{name}", produces = MediaType.APPLICATION_JSON_VALUE)
     public Mono<ResponseEntity<Application>> application(@PathVariable("name") String name) {
         return this.toApplication(name, registry.getInstances(name).filter(Instance::isRegistered))
+                   .filter(a -> !a.getInstances().isEmpty())
                    .map(ResponseEntity::ok)
                    .defaultIfEmpty(ResponseEntity.notFound().build());
     }
@@ -106,7 +107,7 @@ protected Tuple2<String, Flux<Instance>> getApplicationForInstance(Instance inst
     }
 
     protected Mono<Application> toApplication(String name, Flux<Instance> instances) {
-        return instances.collectList().filter(instanceList -> !instanceList.isEmpty()).map(instanceList -> {
+        return instances.collectList().map(instanceList -> {
             Application group = new Application(name);
             group.setInstances(instanceList);
             group.setBuildVersion(getBuildVersion(instanceList));

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Endpoint.java
Patch:
@@ -23,6 +23,7 @@
 public class Endpoint implements Serializable {
     public static final String INFO = "info";
     public static final String HEALTH = "health";
+    public static final String LOGFILE = "logfile";
     public static final String ENV = "env";
     public static final String HTTPTRACE = "httptrace";
     public static final String THREADDUMP = "threaddump";

File: spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/InstanceDiscoveryListener.java
Patch:
@@ -112,6 +112,7 @@ protected void discover() {
 
     protected Mono<Void> removeStaleInstances(Set<InstanceId> registeredInstanceIds) {
         return repository.findAll()
+                         .filter(Instance::isRegistered)
                          .filter(instance -> SOURCE.equals(instance.getRegistration().getSource()))
                          .map(Instance::getId)
                          .filter(id -> !registeredInstanceIds.contains(id))

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java
Patch:
@@ -74,7 +74,7 @@ public UiController homeUiController() throws IOException {
     private List<UiExtension> uiExtensions() throws IOException {
         UiExtensionsScanner scanner = new UiExtensionsScanner(this.applicationContext);
         List<UiExtension> uiExtensions = scanner.scan(this.uiProperties.getExtensionResourceLocations());
-        uiExtensions.forEach(e -> log.info("Loaded Spring Boot Admin UI Extension: " + e));
+        uiExtensions.forEach(e -> log.info("Loaded Spring Boot Admin UI Extension: {}", e));
         return uiExtensions;
     }
 

File: spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/extensions/UiExtensionsScanner.java
Patch:
@@ -45,7 +45,8 @@ public List<UiExtension> scan(String... locations) throws IOException {
     }
 
     private String toPattern(String location) {
-        return location + "**";
+        //replace the classpath pattern to search all locations and not just the first
+        return location.replace("classpath:", "classpath*:") + "**";
     }
 
     private boolean isExtension(Resource resource) {

File: spring-boot-admin-samples/spring-boot-admin-sample-consul/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -64,6 +64,7 @@ protected void configure(HttpSecurity http) throws Exception {
             // @formatter:off
             SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();
             successHandler.setTargetUrlParameter("redirectTo");
+            successHandler.setDefaultTargetUrl(adminContextPath + "/");
 
             http.authorizeRequests()
                 .antMatchers(adminContextPath + "/assets/**").permitAll()

File: spring-boot-admin-samples/spring-boot-admin-sample-eureka/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -67,6 +67,7 @@ protected void configure(HttpSecurity http) throws Exception {
             // @formatter:off
             SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();
             successHandler.setTargetUrlParameter("redirectTo");
+            successHandler.setDefaultTargetUrl(adminContextPath + "/");
 
             http.authorizeRequests()
                 .antMatchers(adminContextPath + "/assets/**").permitAll()

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -75,6 +75,7 @@ protected void configure(HttpSecurity http) throws Exception {
             // @formatter:off
             SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();
             successHandler.setTargetUrlParameter("redirectTo");
+            successHandler.setDefaultTargetUrl(adminContextPath + "/");
 
             http.authorizeRequests()
                 .antMatchers(adminContextPath + "/assets/**").permitAll()

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -85,6 +85,7 @@ protected void configure(HttpSecurity http) throws Exception {
             // @formatter:off
             SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();
             successHandler.setTargetUrlParameter("redirectTo");
+            successHandler.setDefaultTargetUrl(adminContextPath + "/");
 
             http.authorizeRequests()
                 .antMatchers(adminContextPath + "/assets/**").permitAll() // <1>

File: spring-boot-admin-samples/spring-boot-admin-sample-war/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -69,6 +69,7 @@ protected void configure(HttpSecurity http) throws Exception {
             // @formatter:off
             SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();
             successHandler.setTargetUrlParameter("redirectTo");
+            successHandler.setDefaultTargetUrl(adminContextPath + "/");
 
             http.authorizeRequests()
                 .antMatchers(adminContextPath + "/assets/**").permitAll()

File: spring-boot-admin-samples/spring-boot-admin-sample-zookeeper/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -63,6 +63,7 @@ protected void configure(HttpSecurity http) throws Exception {
             // @formatter:off
             SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();
             successHandler.setTargetUrlParameter("redirectTo");
+            successHandler.setDefaultTargetUrl(adminContextPath + "/");
 
             http.authorizeRequests()
                 .antMatchers(adminContextPath + "/assets/**").permitAll()

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/endpoints/ProbeEndpointsStrategyTest.java
Patch:
@@ -63,12 +63,13 @@ public void should_return_detect_endpoints() {
                                                           .managementUrl(wireMock.url("/mgmt"))
                                                           .build());
 
+        wireMock.stubFor(options(urlEqualTo("/mgmt/metrics")).willReturn(ok()));
         wireMock.stubFor(options(urlEqualTo("/mgmt/stats")).willReturn(ok()));
         wireMock.stubFor(options(urlEqualTo("/mgmt/info")).willReturn(ok()));
         wireMock.stubFor(options(urlEqualTo("/mgmt/non-exist")).willReturn(notFound()));
 
         ProbeEndpointsStrategy strategy = new ProbeEndpointsStrategy(instanceWebClient,
-            new String[]{"metrics:stats", "info", "non-exist"});
+            new String[]{"metrics:stats", "metrics", "info", "non-exist"});
 
         //when
         StepVerifier.create(strategy.detectEndpoints(instance))

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/DefaultApplicationFactory.java
Patch:
@@ -95,7 +95,7 @@ protected String getServiceBaseUrl() {
         }
 
         if (getLocalServerPort() == null) {
-            throw new IllegalStateException("couldn't determine local port. Please supply service-base-url.");
+            throw new IllegalStateException("couldn't determine local port. Please set spring.boot.admin.client.instance.service-base-url.");
         }
 
         return UriComponentsBuilder.newInstance()

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerProperties.java
Patch:
@@ -51,8 +51,9 @@ public class AdminServerProperties {
      * For Spring Boot 1.x applications SBA probes for the specified endpoints using an OPTIONS request.
      * If the path differs from the id you can specify this as id:path (e.g. health:ping).
      */
-    private String[] probedEndpoints = {"health", "env", "metrics", "httptrace:trace", "threaddump:dump", "jolokia",
-        "info", "logfile", "refresh", "flyway", "liquibase", "heapdump", "loggers", "auditevents"};
+    private String[] probedEndpoints = {"health", "env", "metrics", "httptrace:trace", "httptrace", "threaddump:dump",
+        "threaddump", "jolokia", "info", "logfile", "refresh", "flyway", "liquibase", "heapdump", "loggers",
+        "auditevents"};
 
     public void setContextPath(String contextPath) {
         this.contextPath = PathUtils.normalizePath(contextPath);

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java
Patch:
@@ -22,6 +22,7 @@
 import reactor.core.publisher.Mono;
 
 import java.net.URI;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 import org.springframework.context.expression.MapAccessor;
@@ -83,7 +84,7 @@ protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {
         HttpHeaders headers = new HttpHeaders();
         headers.setContentType(MediaType.APPLICATION_JSON);
         // Let's Chat requiers the token as basic username, the password can be an arbitrary string.
-        String auth = Base64Utils.encodeToString(String.format("%s:%s", token, username).getBytes());
+        String auth = Base64Utils.encodeToString(String.format("%s:%s", token, username).getBytes(StandardCharsets.UTF_8));
         headers.add(HttpHeaders.AUTHORIZATION, String.format("Basic %s", auth));
         return Mono.fromRunnable(() -> restTemplate.exchange(createUrl(), HttpMethod.POST,
             new HttpEntity<>(createMessage(event, instance), headers), Void.class));

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/FilteringNotifier.java
Patch:
@@ -104,9 +104,7 @@ public NotificationFilter removeFilter(String id) {
     }
 
     public Map<String, NotificationFilter> getNotificationFilters() {
-        synchronized (filters) {
-            return Collections.unmodifiableMap(new HashMap<>(filters));
-        }
+        return Collections.unmodifiableMap(new HashMap<>(filters));
     }
 
     public void setCleanupInterval(Duration cleanupInterval) {

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/InfoUpdaterTest.java
Patch:
@@ -46,7 +46,7 @@
 
 public class InfoUpdaterTest {
     @ClassRule
-    public static WireMockClassRule wireMockClassRule = new WireMockClassRule(Options.DYNAMIC_PORT);
+    public static final WireMockClassRule wireMockClassRule = new WireMockClassRule(Options.DYNAMIC_PORT);
 
     @Rule
     public WireMockClassRule wireMock = wireMockClassRule;

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/StatusUpdaterTest.java
Patch:
@@ -51,7 +51,7 @@
 
 public class StatusUpdaterTest {
     @ClassRule
-    public static WireMockClassRule wireMockClass = new WireMockClassRule(Options.DYNAMIC_PORT);
+    public static final WireMockClassRule wireMockClass = new WireMockClassRule(Options.DYNAMIC_PORT);
     @Rule
     public WireMockClassRule wireMock = wireMockClass;
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/endpoints/ProbeEndpointsStrategyTest.java
Patch:
@@ -40,7 +40,7 @@
 
 public class ProbeEndpointsStrategyTest {
     @ClassRule
-    public static WireMockClassRule wireMockClassRule = new WireMockClassRule(Options.DYNAMIC_PORT);
+    public static final WireMockClassRule wireMockClassRule = new WireMockClassRule(Options.DYNAMIC_PORT);
 
     @Rule
     public WireMockClassRule wireMock = wireMockClassRule;

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/AbstractInstancesProxyControllerIntegrationTest.java
Patch:
@@ -61,7 +61,7 @@ public abstract class AbstractInstancesProxyControllerIntegrationTest {
     private static ParameterizedTypeReference<Map<String, Object>> RESPONSE_TYPE = new ParameterizedTypeReference<Map<String, Object>>() {
     };
     @ClassRule
-    public static WireMockClassRule wireMock = new WireMockClassRule(
+    public static final WireMockClassRule wireMock = new WireMockClassRule(
         options().dynamicPort().extensions(new ConnectionCloseExtension()));
     private static WebTestClient client;
     private static String instanceId;

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/client/InstanceWebClientTest.java
Patch:
@@ -54,7 +54,7 @@
 
 public class InstanceWebClientTest {
     @ClassRule
-    public static WireMockClassRule wireMockClass = new WireMockClassRule(Options.DYNAMIC_PORT);
+    public static final WireMockClassRule wireMockClass = new WireMockClassRule(Options.DYNAMIC_PORT);
     @Rule
     public WireMockClassRule wireMock = wireMockClass;
 

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/Application.java
Patch:
@@ -27,6 +27,7 @@
  * @author Johannes Edmeier
  */
 @lombok.Data
+@lombok.ToString(exclude = "metadata")
 public class Application {
     private final String name;
     private final String managementUrl;

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/CloudFoundryApplicationFactory.java
Patch:
@@ -45,7 +45,7 @@ protected String getServiceBaseUrl() {
             return null;
         }
 
-        String uri = cfApplicationProperties.getUris().get(0).toLowerCase();
+        String uri = cfApplicationProperties.getUris().get(0);
         return "http://" + uri;
     }
 }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunctionsTest.java
Patch:
@@ -34,8 +34,8 @@
 import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
 
 import static de.codecentric.boot.admin.server.web.client.InstanceExchangeFilterFunctions.ATTRIBUTE_ENDPOINT;
-import static io.netty.handler.codec.http.HttpHeaders.Values.APPLICATION_JSON;
 import static org.springframework.http.HttpHeaders.CONTENT_TYPE;
+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 
 public class InstanceExchangeFilterFunctionsTest {
     private static final DefaultDataBufferFactory BUFFER_FACTORY = new DefaultDataBufferFactory();
@@ -72,8 +72,7 @@ public void should_convert_json() {
         ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create("/test"))
                                              .attribute(ATTRIBUTE_ENDPOINT, "test")
                                              .build();
-        ClientResponse response = ClientResponse.create(HttpStatus.OK)
-                                                .header(CONTENT_TYPE, APPLICATION_JSON)
+        ClientResponse response = ClientResponse.create(HttpStatus.OK).header(CONTENT_TYPE, APPLICATION_JSON_VALUE)
                                                 .body(Flux.just(ORIGINAL))
                                                 .build();
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java
Patch:
@@ -106,8 +106,8 @@ protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {
             message = getDeregisteredMessage(instance);
         } else if (event instanceof InstanceStatusChangedEvent) {
             InstanceStatusChangedEvent statusChangedEvent = (InstanceStatusChangedEvent) event;
-            message = getStatusChangedMessage(instance, statusChangedEvent.getStatusInfo().getStatus(),
-                getLastStatus(event.getInstance()));
+            message = getStatusChangedMessage(instance, getLastStatus(event.getInstance()),
+                statusChangedEvent.getStatusInfo().getStatus());
         } else {
             return Mono.empty();
         }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/servlet/InstancesProxyController.java
Patch:
@@ -71,8 +71,8 @@ public Mono<Void> endpointProxy(@PathVariable("instanceId") String instanceId,
         ServerHttpRequest request = new ServletServerHttpRequest(servletRequest);
         ServerHttpResponse response = new ServletServerHttpResponse(servletResponse);
 
-        String pathWithinApplication = servletRequest.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE)
-                                                     .toString();
+        String pathWithinApplication = UriComponentsBuilder.fromPath(
+            servletRequest.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE).toString()).toUriString();
         String endpointLocalPath = getEndpointLocalPath(pathWithinApplication);
 
         URI uri = UriComponentsBuilder.fromPath(endpointLocalPath)

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java
Patch:
@@ -72,7 +72,8 @@ public void onApplicationReady(ApplicationReadyEvent event) {
     @EventListener
     @Order(Ordered.LOWEST_PRECEDENCE)
     public void onClosedContext(ContextClosedEvent event) {
-        if (event.getApplicationContext().getParent() == null) {
+        if (event.getApplicationContext().getParent() == null ||
+            "bootstrap".equals(event.getApplicationContext().getParent().getId())) {
             stopRegisterTask();
 
             if (autoDeregister) {

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientEnabledCondition.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * This condition checks if the client should be enabled. Two properties are checked:
- * spring.boot.admin.client.enabled and spring.boot.admin.url. The following table shows under which conditions the
+ * spring.boot.admin.client.enabled and spring.boot.admin.client.url. The following table shows under which conditions the
  * client is active.
  * <pre>
  *           | enabled: false | enabled: true (default) |
@@ -48,7 +48,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeM
 
         if (clientProperties.getUrl().length == 0) {
             return ConditionOutcome.noMatch(
-                "Spring Boot Client is disabled, because 'spring.boot.admin.url' is empty.");
+                "Spring Boot Client is disabled, because 'spring.boot.admin.client.url' is empty.");
         }
 
         return ConditionOutcome.match();

File: spring-boot-admin-samples/spring-boot-admin-sample-eureka/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -28,7 +28,6 @@
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
 import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
 
-// tag::application-eureka[]
 @Configuration
 @EnableAutoConfiguration
 @EnableDiscoveryClient
@@ -77,4 +76,3 @@ protected void configure(HttpSecurity http) throws Exception {
     }
 
 }
-// end::application-eureka[]

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/servlet/InstancesProxyController.java
Patch:
@@ -89,6 +89,7 @@ public Mono<Void> endpointProxy(@PathVariable("instanceId") String instanceId,
         response.setStatusCode(clientResponse.statusCode());
         response.getHeaders().addAll(filterHeaders(clientResponse.headers().asHttpHeaders()));
         OutputStream responseBody = response.getBody();
+        response.flush();
 
         return clientResponse.body(BodyExtractors.toDataBuffers())
                              .window(1)

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java
Patch:
@@ -110,7 +110,7 @@ protected String buildUrl(InstanceEvent event, Instance instance) {
         return url.toString();
     }
 
-    protected HttpEntity createRequest(InstanceEvent event, Instance instance) {
+    protected HttpEntity<?> createRequest(InstanceEvent event, Instance instance) {
         Map<String, Object> body = new HashMap<>();
 
         if (user != null) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/reactive/InstancesProxyController.java
Patch:
@@ -47,8 +47,7 @@ public InstancesProxyController(String adminContextPath,
         super(adminContextPath, ignoredHeaders, registry, instanceWebClient, readTimeout);
     }
 
-    @RequestMapping(path = REQUEST_MAPPING_PATH, method = {RequestMethod.GET, RequestMethod.HEAD, RequestMethod.POST,
-        RequestMethod.PUT, RequestMethod.PATCH, RequestMethod.DELETE, RequestMethod.OPTIONS})
+    @RequestMapping(path = REQUEST_MAPPING_PATH, method = {RequestMethod.GET, RequestMethod.HEAD, RequestMethod.POST, RequestMethod.PUT, RequestMethod.PATCH, RequestMethod.DELETE, RequestMethod.OPTIONS})
     public Mono<Void> endpointProxy(@PathVariable("instanceId") String instanceId,
                                     ServerHttpRequest request,
                                     ServerHttpResponse response) {
@@ -62,7 +61,7 @@ public Mono<Void> endpointProxy(@PathVariable("instanceId") String instanceId,
             () -> BodyInserters.fromDataBuffers(request.getBody())).flatMap(clientResponse -> {
             response.setStatusCode(clientResponse.statusCode());
             response.getHeaders().addAll(filterHeaders(clientResponse.headers().asHttpHeaders()));
-            return response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers()));
+            return response.writeAndFlushWith(clientResponse.body(BodyExtractors.toDataBuffers()).window(1));
         });
     }
 }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifierTest.java
Patch:
@@ -103,7 +103,7 @@ private String getDescription(String expectedOldStatus, String expectedNewStatus
         return String.format("Instance App (-id-) went from %s to %s", expectedOldStatus, expectedNewStatus);
     }
 
-    private HttpEntity expectedRequest(String expectedOldStatus, String expectedNewStatus) {
+    private HttpEntity<Map<String, Object>> expectedRequest(String expectedOldStatus, String expectedNewStatus) {
         Map<String, Object> expected = new HashMap<>();
         expected.put("apiKey", "--service--");
         expected.put("message", getMessage(expectedNewStatus));

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/RemindingNotifierTest.java
Patch:
@@ -146,7 +146,7 @@ public void should_resubscribe_after_error() {
                     .expectNext(appDown)
                     .expectNext(appDown)
                     .then(reminder::stop)
-                    .expectNoEvent(Duration.ofMillis(10))
+                    .expectNoEvent(Duration.ofMillis(100))
                     .thenCancel()
                     .verify();
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunctions.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.Optional;
 import java.util.OptionalLong;
 import java.util.function.Function;
-import org.springframework.boot.actuate.endpoint.http.ActuatorMediaType;
 import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.http.HttpHeaders;
@@ -46,13 +45,13 @@
 import org.springframework.web.util.UriComponents;
 import org.springframework.web.util.UriComponentsBuilder;
 
+import static de.codecentric.boot.admin.server.utils.MediaType.ACTUATOR_V1_MEDIATYPE;
+import static de.codecentric.boot.admin.server.utils.MediaType.ACTUATOR_V2_MEDIATYPE;
 import static java.util.Collections.singletonList;
 
 public final class InstanceExchangeFilterFunctions {
     public static final String ATTRIBUTE_INSTANCE = "instance";
     public static final String ATTRIBUTE_ENDPOINT = "endpointId";
-    private static final MediaType ACTUATOR_V1_MEDIATYPE = MediaType.parseMediaType(ActuatorMediaType.V1_JSON);
-    private static final MediaType ACTUATOR_V2_MEDIATYPE = MediaType.parseMediaType(ActuatorMediaType.V2_JSON);
 
     private InstanceExchangeFilterFunctions() {
     }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceWebClient.java
Patch:
@@ -53,6 +53,7 @@ public InstanceWebClient(WebClient webClient, HttpHeadersProvider httpHeadersPro
             filters.add(InstanceExchangeFilterFunctions.addHeaders(httpHeadersProvider));
             filters.add(InstanceExchangeFilterFunctions.rewriteEndpointUrl());
             filters.add(InstanceExchangeFilterFunctions.convertLegacyEndpoint(LegacyEndpointConverters.health()));
+            filters.add(InstanceExchangeFilterFunctions.convertLegacyEndpoint(LegacyEndpointConverters.info()));
             filters.add(InstanceExchangeFilterFunctions.convertLegacyEndpoint(LegacyEndpointConverters.env()));
             filters.add(InstanceExchangeFilterFunctions.convertLegacyEndpoint(LegacyEndpointConverters.httptrace()));
             filters.add(InstanceExchangeFilterFunctions.convertLegacyEndpoint(LegacyEndpointConverters.threaddump()));

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -47,7 +47,7 @@ public class DefaultServiceInstanceConverter implements ServiceInstanceConverter
      * Default context-path to be appended to the url of the discovered service for the
      * managment-url.
      */
-    private String managementContextPath = "";
+    private String managementContextPath = "/actuator";
     /**
      * Default path of the health-endpoint to be used for the health-url of the discovered service.
      */

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/discovery/DefaultServiceInstanceConverterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,8 +35,8 @@ public void test_convert_with_defaults() {
 
         assertThat(registration.getName()).isEqualTo("test");
         assertThat(registration.getServiceUrl()).isEqualTo("http://localhost:80/");
-        assertThat(registration.getManagementUrl()).isEqualTo("http://localhost:80/");
-        assertThat(registration.getHealthUrl()).isEqualTo("http://localhost:80/health");
+        assertThat(registration.getManagementUrl()).isEqualTo("http://localhost:80/actuator");
+        assertThat(registration.getHealthUrl()).isEqualTo("http://localhost:80/actuator/health");
     }
 
     @Test

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/discovery/EurekaServiceInstanceConverterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ public void convert_missing_mgmtpath() {
 
         Registration registration = new EurekaServiceInstanceConverter().convert(service);
 
-        assertThat(registration.getManagementUrl()).isEqualTo("http://localhost:80/");
+        assertThat(registration.getManagementUrl()).isEqualTo("http://localhost:80/actuator");
     }
 
     @Test

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/discovery/InstanceDiscoveryListenerTest.java
Patch:
@@ -149,8 +149,8 @@ public void test_register_and_convert() {
 
         StepVerifier.create(registry.getInstances()).assertNext(application -> {
             Registration registration = application.getRegistration();
-            assertThat(registration.getHealthUrl()).isEqualTo("http://localhost:80/health");
-            assertThat(registration.getManagementUrl()).isEqualTo("http://localhost:80/");
+            assertThat(registration.getHealthUrl()).isEqualTo("http://localhost:80/actuator/health");
+            assertThat(registration.getManagementUrl()).isEqualTo("http://localhost:80/actuator");
             assertThat(registration.getServiceUrl()).isEqualTo("http://localhost:80/");
             assertThat(registration.getName()).isEqualTo("service");
         }).verifyComplete();

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfigurationTest.java
Patch:
@@ -209,7 +209,7 @@ private static class TestNotifier implements Notifier {
 
         private TestNotifier() {
             UnicastProcessor<InstanceEvent> unicastProcessor = UnicastProcessor.create();
-            this.publishedFlux = unicastProcessor.publish().autoConnect(0);
+            this.publishedFlux = unicastProcessor;
             this.sink = unicastProcessor.sink();
         }
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfigurationTest.java
Patch:
@@ -73,7 +73,7 @@ public void test_notifierListener() throws InterruptedException {
                     .expectNext(APP_DOWN)
                     .thenCancel()
                     .verify();
-        Thread.sleep(50); //wait for the notifications in different thread
+        Thread.sleep(100); //wait for the notifications in different thread
         assertThat(context.getBean(TestNotifier.class).getEvents()).containsOnly(APP_DOWN);
     }
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfigurationTest.java
Patch:
@@ -63,17 +63,18 @@ public void close() {
     }
 
     @Test
-    public void test_notifierListener() {
+    public void test_notifierListener() throws InterruptedException {
         load(TestSingleNotifierConfig.class);
         InstanceEventStore store = context.getBean(InstanceEventStore.class);
 
         StepVerifier.create(store)
                     .expectSubscription()
                     .then(() -> StepVerifier.create(store.append(Collections.singletonList(APP_DOWN))).verifyComplete())
                     .expectNext(APP_DOWN)
-                    .then(() -> assertThat(context.getBean(TestNotifier.class).getEvents()).containsOnly(APP_DOWN))
                     .thenCancel()
                     .verify();
+        Thread.sleep(50); //wait for the notifications in different thread
+        assertThat(context.getBean(TestNotifier.class).getEvents()).containsOnly(APP_DOWN);
     }
 
     @Test
@@ -163,7 +164,6 @@ public static class TestSingleNotifierConfig {
         public Notifier testNotifier() {
             return new TestNotifier();
         }
-
     }
 
     private static class MailSenderConfig {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerAutoConfiguration.java
Patch:
@@ -58,7 +58,7 @@
 @Configuration
 @ConditionalOnBean(AdminServerMarkerConfiguration.Marker.class)
 @EnableConfigurationProperties(AdminServerProperties.class)
-@Import({AdminServerWebConfiguration.class, AdminServerNotifierConfiguration.class})
+@Import({AdminServerWebConfiguration.class})
 public class AdminServerAutoConfiguration {
     private final AdminServerProperties adminServerProperties;
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfigurationTest.java
Patch:
@@ -49,7 +49,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class AdminServerNotifierConfigurationTest {
+public class AdminServerNotifierAutoConfigurationTest {
     private static final InstanceEvent APP_DOWN = new InstanceStatusChangedEvent(InstanceId.of("id-2"), 0L,
         StatusInfo.ofDown());
 
@@ -152,6 +152,7 @@ private void load(Class<?> config, String... environment) {
         context.register(RestTemplateAutoConfiguration.class);
         context.register(AdminServerMarkerConfiguration.class);
         context.register(AdminServerAutoConfiguration.class);
+        context.register(AdminServerNotifierAutoConfiguration.class);
 
         TestPropertyValues.of(environment).applyTo(context);
         context.refresh();

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/CloudFoundryApplicationProperties.java
Patch:
@@ -23,7 +23,7 @@
 @lombok.Data
 @ConfigurationProperties("vcap.application")
 public class CloudFoundryApplicationProperties {
-    private String instanceId;
+    private String applicationId;
     private String instanceIndex;
     private List<String> uris = new ArrayList<>();
 }

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/metadata/CloudFoundryMetadataContributor.java
Patch:
@@ -32,10 +32,10 @@ public CloudFoundryMetadataContributor(CloudFoundryApplicationProperties cfAppli
 
     @Override
     public Map<String, String> getMetadata() {
-        if (StringUtils.hasText(this.cfApplicationProperties.getInstanceId()) &&
+        if (StringUtils.hasText(this.cfApplicationProperties.getApplicationId()) &&
             StringUtils.hasText(this.cfApplicationProperties.getInstanceIndex())) {
             Map<String, String> map = new HashMap<>();
-            map.put("applicationId", this.cfApplicationProperties.getInstanceId());
+            map.put("applicationId", this.cfApplicationProperties.getApplicationId());
             map.put("instanceId", this.cfApplicationProperties.getInstanceIndex());
             return map;
         }

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientCloudFoundryAutoConfigurationTest.java
Patch:
@@ -55,6 +55,7 @@ public void non_cloud_platform() {
     @Test
     public void cloudfoundry() {
         String vcap = "VCAP_APPLICATION:{\"application_users\":[]," +
+                      "\"application_id\":\"9958288f-9842-4ddc-93dd-1ea3c90634cd\"," +
                       "\"instance_id\":\"bb7935245adf3e650dfb7c58a06e9ece\"," +
                       "\"instance_index\":0,\"version\":\"3464e092-1c13-462e-a47c-807c30318a50\"," +
                       "\"name\":\"foo\",\"uris\":[\"foo.cfapps.io\"]," +
@@ -70,7 +71,7 @@ public void cloudfoundry() {
         load("spring.boot.admin.client.url:http://localhost:8081", vcap);
         ApplicationFactory factory = context.getBean(ApplicationFactory.class);
         CloudFoundryMetadataContributor contributor = context.getBean(CloudFoundryMetadataContributor.class);
-        assertThat(contributor.getMetadata()).containsEntry("applicationId", "bb7935245adf3e650dfb7c58a06e9ece")
+        assertThat(contributor.getMetadata()).containsEntry("applicationId", "9958288f-9842-4ddc-93dd-1ea3c90634cd")
                                              .containsEntry("instanceId", "0");
         assertThat(factory).isInstanceOf(CloudFoundryApplicationFactory.class);
         assertThat(factory.createApplication().getServiceUrl()).isEqualTo("http://dsyerenv.cfapps.io/");

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/metadata/CloudFoundryMetadataContributorTest.java
Patch:
@@ -34,7 +34,7 @@ public void should_return_empty_metadata() {
     @Test
     public void should_return_metadata() {
         CloudFoundryApplicationProperties cfApplicationProperties = new CloudFoundryApplicationProperties();
-        cfApplicationProperties.setInstanceId("appId");
+        cfApplicationProperties.setApplicationId("appId");
         cfApplicationProperties.setInstanceIndex("1");
         CloudFoundryMetadataContributor contributor = new CloudFoundryMetadataContributor(cfApplicationProperties);
         assertThat(contributor.getMetadata()).containsEntry("applicationId", "appId").containsEntry("instanceId", "1");

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientEnabledCondition.java
Patch:
@@ -58,7 +58,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeM
 
     private ClientProperties getClientProperties(ConditionContext context) {
         Iterable<ConfigurationPropertySource> sources = ConfigurationPropertySources.get(context.getEnvironment());
-        ClientProperties clientProperties = new ClientProperties();
+        ClientProperties clientProperties = new ClientProperties(context.getEnvironment());
         new Binder(sources).bind("spring.boot.admin.client", Bindable.ofInstance(clientProperties));
         return clientProperties;
     }

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/ApplicationRegistratorTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
+import org.springframework.mock.env.MockEnvironment;
 import org.springframework.web.client.RestClientException;
 import org.springframework.web.client.RestTemplate;
 
@@ -52,7 +53,7 @@ public class ApplicationRegistratorTest {
     public void setup() {
         restTemplate = mock(RestTemplate.class);
 
-        client = new ClientProperties();
+        client = new ClientProperties(new MockEnvironment());
         client.setUrl(new String[]{"http://sba:8080", "http://sba2:8080"});
 
         ApplicationFactory factory = mock(ApplicationFactory.class);

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/Instance.java
Patch:
@@ -168,7 +168,8 @@ Instance apply(InstanceEvent event) {
     private Instance apply(InstanceEvent event, boolean isNewEvent) {
         Assert.notNull(event, "'event' must not be null");
         Assert.isTrue(this.id.equals(event.getInstance()), "'event' must refer the same instance");
-        Assert.isTrue(this.nextVersion() == event.getVersion(), "expected event version doesn't match");
+        Assert.isTrue(this.nextVersion() == event.getVersion(),
+            () -> "Event " + event.getVersion() + " doesn't match exptected version " + this.nextVersion());
 
         List<InstanceEvent> unsavedEvents = appendToEvents(event, isNewEvent);
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/ConcurrentMapEventStore.java
Patch:
@@ -102,9 +102,11 @@ protected boolean doAppend(List<InstanceEvent> events) {
         }
 
         if (eventLog.replace(id, oldEvents, newEvents)) {
-            log.debug("Events saved {}", events);
+            log.debug("Events appended to log {}", events);
             return true;
         }
+
+        log.debug("Unsuccessful attempot append the events {} ", events);
         return false;
     }
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierConfigurationTest.java
Patch:
@@ -50,7 +50,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class AdminServerNotifierConfigurationTest {
-    private static final InstanceEvent APP_DOWN = new InstanceStatusChangedEvent(InstanceId.of("id-2"), 1L,
+    private static final InstanceEvent APP_DOWN = new InstanceStatusChangedEvent(InstanceId.of("id-2"), 0L,
         StatusInfo.ofDown());
 
     private AnnotationConfigApplicationContext context;

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/entities/InstanceTest.java
Patch:
@@ -135,7 +135,7 @@ public void should_throw_when_applied_wrong_event() {
             IllegalArgumentException.class).hasMessage("'event' must refer the same instance");
 
         assertThatThrownBy(() -> instance.apply(new InstanceDeregisteredEvent(InstanceId.of("id"), 1L))).isInstanceOf(
-            IllegalArgumentException.class).hasMessage("expected event version doesn't match");
+            IllegalArgumentException.class).hasMessage("Event 1 doesn't match exptected version 0");
     }
 
 }

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/ClientProperties.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.client.config;
 
 import java.time.Duration;
@@ -83,7 +84,7 @@ public class ClientProperties {
     private boolean enabled = true;
 
     public String[] getAdminUrl() {
-        String adminUrls[] = url.clone();
+        String[] adminUrls = url.clone();
         for (int i = 0; i < adminUrls.length; i++) {
             adminUrls[i] += "/" + apiPath;
         }

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/InstanceProperties.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.client.config;
 
 import java.util.LinkedHashMap;

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.client.config;
 
 import de.codecentric.boot.admin.client.registration.ApplicationFactory;
@@ -62,7 +63,7 @@ public ApplicationFactory applicationFactory(InstanceProperties instance,
                                                      PathMappedEndpoints pathMappedEndpoints,
                                                      WebEndpointProperties webEndpoint) {
             return new ServletApplicationFactory(instance, management, server, servletContext, pathMappedEndpoints,
-                    webEndpoint);
+                webEndpoint);
         }
     }
 
@@ -120,7 +121,7 @@ public TaskScheduler registrationTaskScheduler() {
     public RegistrationApplicationListener registrationListener(ClientProperties client,
                                                                 ApplicationRegistrator registrator) {
         RegistrationApplicationListener listener = new RegistrationApplicationListener(registrator,
-                registrationTaskScheduler());
+            registrationTaskScheduler());
         listener.setAutoRegister(client.isAutoRegistration());
         listener.setAutoDeregister(client.isAutoDeregistration());
         listener.setRegisterPeriod(client.getPeriod());

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/Application.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.client.registration;
 
 import java.util.Collections;

File: spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.client.registration;
 
 import java.time.Duration;

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/ClientReactiveApplicationTest.java
Patch:
@@ -33,8 +33,8 @@ public void setUp() throws Exception {
         SpringApplication application = new SpringApplication(TestClientApplication.class);
         application.setWebApplicationType(WebApplicationType.REACTIVE);
         instance = application.run("--spring.application.name=Test-Client", "--server.port=0",
-                "--management.endpoints.web.base-path=/mgmt", "--endpoints.health.enabled=true",
-                "--spring.boot.admin.client.url=" + wireMock.url("/"));
+            "--management.endpoints.web.base-path=/mgmt", "--endpoints.health.enabled=true",
+            "--spring.boot.admin.client.url=" + wireMock.url("/"));
     }
 
     @After
@@ -54,4 +54,3 @@ protected int getManagementPort() {
     }
 
 }
-

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/ClientServletApplicationTest.java
Patch:
@@ -33,8 +33,8 @@ public void setUp() throws Exception {
         SpringApplication application = new SpringApplication(TestClientApplication.class);
         application.setWebApplicationType(WebApplicationType.SERVLET);
         instance = application.run("--spring.application.name=Test-Client", "--server.port=0",
-                "--management.endpoints.web.base-path=/mgmt", "--endpoints.health.enabled=true",
-                "--spring.boot.admin.client.url=" + wireMock.url("/"));
+            "--management.endpoints.web.base-path=/mgmt", "--endpoints.health.enabled=true",
+            "--spring.boot.admin.client.url=" + wireMock.url("/"));
     }
 
     @After
@@ -54,4 +54,3 @@ protected int getManagementPort() {
     }
 
 }
-

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -59,14 +59,14 @@ public void disabled() {
     @Test
     public void nonWebEnvironment() {
         load("spring.main.admin.url:http://localhost:8081", "spring.boot.admin.client.enabled:true",
-                "spring.main.web-application-type:none");
+            "spring.main.web-application-type:none");
         assertThat(context.getBeansOfType(ApplicationRegistrator.class).isEmpty());
     }
 
     private void load(final String... environment) {
         SpringApplication springApplication = new SpringApplication(TestClientApplication.class);
         springApplication.addInitializers(
-                applicationContext -> TestPropertyValues.of(environment).applyTo(applicationContext));
+            applicationContext -> TestPropertyValues.of(environment).applyTo(applicationContext));
         this.context = springApplication.run("--server.port=0");
     }
 

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/DefaultApplicationFactoryTest.java
Patch:
@@ -44,7 +44,7 @@ public class DefaultApplicationFactoryTest {
     private WebEndpointProperties webEndpoint = new WebEndpointProperties();
 
     private DefaultApplicationFactory factory = new DefaultApplicationFactory(instanceProperties, management, server,
-            pathMappedEndpoints, webEndpoint);
+        pathMappedEndpoints, webEndpoint);
 
     @Before
     public void setup() {
@@ -190,7 +190,7 @@ private void publishApplicationReadyEvent(DefaultApplicationFactory factory,
                                               Integer managementport) {
         factory.onWebServerInitialized(new TestWebServerInitializedEvent("server", serverport));
         factory.onWebServerInitialized(
-                new TestWebServerInitializedEvent("management", managementport != null ? managementport : serverport));
+            new TestWebServerInitializedEvent("management", managementport != null ? managementport : serverport));
     }
 
     private static class TestWebServerInitializedEvent extends WebServerInitializedEvent {

File: spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/ServletApplicationFactoryTest.java
Patch:
@@ -43,7 +43,7 @@ public class ServletApplicationFactoryTest {
     private PathMappedEndpoints pathMappedEndpoints = mock(PathMappedEndpoints.class);
     private WebEndpointProperties webEndpoint = new WebEndpointProperties();
     private ServletApplicationFactory factory = new ServletApplicationFactory(instance, management, server,
-            servletContext, pathMappedEndpoints, webEndpoint);
+        servletContext, pathMappedEndpoints, webEndpoint);
 
     @Before
     public void setup() {
@@ -114,7 +114,7 @@ private void publishApplicationReadyEvent(DefaultApplicationFactory factory,
                                               Integer managementport) {
         factory.onWebServerInitialized(new TestWebServerInitializedEvent("server", serverport));
         factory.onWebServerInitialized(
-                new TestWebServerInitializedEvent("management", managementport != null ? managementport : serverport));
+            new TestWebServerInitializedEvent("management", managementport != null ? managementport : serverport));
     }
 
     private static class TestWebServerInitializedEvent extends WebServerInitializedEvent {

File: spring-boot-admin-samples/spring-boot-admin-sample-consul/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin;
 
 import de.codecentric.boot.admin.server.config.EnableAdminServer;

File: spring-boot-admin-samples/spring-boot-admin-sample-eureka/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin;
 
 import de.codecentric.boot.admin.server.config.EnableAdminServer;

File: spring-boot-admin-samples/spring-boot-admin-sample-reactive/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin;
 
 import de.codecentric.boot.admin.server.config.AdminServerProperties;

File: spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin;
 
 import de.codecentric.boot.admin.server.config.AdminServerProperties;

File: spring-boot-admin-samples/spring-boot-admin-sample-zookeeper/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin;
 
 import de.codecentric.boot.admin.server.config.EnableAdminServer;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerAutoConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.config;
 
 import de.codecentric.boot.admin.server.domain.entities.InstanceRepository;
@@ -94,7 +95,7 @@ public StatusUpdateTrigger statusUpdateTrigger(StatusUpdater statusUpdater, Publ
     public EndpointDetector endpointDetector(InstanceRepository instanceRepository,
                                              InstanceWebClient instanceWebClient) {
         ChainingStrategy strategy = new ChainingStrategy(new QueryIndexEndpointStrategy(instanceWebClient),
-                new ProbeEndpointsStrategy(instanceWebClient, adminServerProperties.getProbedEndpoints()));
+            new ProbeEndpointsStrategy(instanceWebClient, adminServerProperties.getProbedEndpoints()));
         return new EndpointDetector(instanceRepository, strategy);
     }
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerDiscoveryAutoConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.config;
 
 import de.codecentric.boot.admin.server.discovery.DefaultServiceInstanceConverter;
@@ -38,8 +39,8 @@
 @ConditionalOnBean(AdminServerMarkerConfiguration.Marker.class)
 @ConditionalOnProperty(prefix = "spring.boot.admin.discovery", name = "enabled", matchIfMissing = true)
 @AutoConfigureAfter(value = AdminServerAutoConfiguration.class, name = {
-        "org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration",
-        "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration"})
+    "org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration",
+    "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration"})
 public class AdminServerDiscoveryAutoConfiguration {
 
     @Bean

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerHazelcastAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.config;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerNotifierConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.config;
 
 import de.codecentric.boot.admin.server.domain.entities.InstanceRepository;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerProperties.java
Patch:
@@ -44,15 +44,15 @@ public class AdminServerProperties {
      * The metadata keys which should be sanitized when serializing to json
      */
     private String[] metadataKeysToSanitize = new String[]{".*password$", ".*secret$", ".*key$", ".*$token$",
-            ".*credentials.*", ".*vcap_services$"};
+        ".*credentials.*", ".*vcap_services$"};
 
     /**
      * For Spring Boot 2.x applications the endpoints should be discovered automatically using the actuator links.
      * For Spring Boot 1.x applications SBA probes for the specified endpoints using an OPTIONS request.
      * If the path differs from the id you can specify this as id:path (e.g. health:ping).
      */
     private String[] probedEndpoints = {"health", "env", "metrics", "httptrace:trace", "threaddump:dump", "jolokia",
-            "info", "logfile", "refresh", "flyway", "liquibase", "heapdump", "loggers", "auditevents"};
+        "info", "logfile", "refresh", "flyway", "liquibase", "heapdump", "loggers", "auditevents"};
 
     public void setContextPath(String contextPath) {
         this.contextPath = PathUtils.normalizePath(contextPath);

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/EnableAdminServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.config;
 
 import java.lang.annotation.Documented;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.discovery;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -55,7 +56,7 @@ public class DefaultServiceInstanceConverter implements ServiceInstanceConverter
     @Override
     public Registration convert(ServiceInstance instance) {
         LOGGER.debug("Converting service '{}' running at '{}' with metadata {}", instance.getServiceId(),
-                instance.getUri(), instance.getMetadata());
+            instance.getUri(), instance.getMetadata());
 
         Registration.Builder builder = Registration.create(instance.getServiceId(), getHealthUrl(instance).toString());
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/discovery/EurekaServiceInstanceConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.discovery;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -34,7 +35,7 @@ public class EurekaServiceInstanceConverter extends DefaultServiceInstanceConver
     @Override
     protected URI getHealthUrl(ServiceInstance instance) {
         Assert.isInstanceOf(EurekaServiceInstance.class, instance,
-                "serviceInstance must be of type EurekaServiceInstance");
+            "serviceInstance must be of type EurekaServiceInstance");
 
         InstanceInfo instanceInfo = ((EurekaServiceInstance) instance).getInstanceInfo();
         String healthUrl = instanceInfo.getSecureHealthCheckUrl();

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/discovery/InstanceDiscoveryListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.discovery;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -106,7 +107,7 @@ protected void discover() {
             .flatMap(this::registerInstance)
             .collect(Collectors.toSet())
             .flatMap(this::removeStaleInstances)
-            .subscribe(v -> {}, ex -> log.error("Unexpected error.", ex));
+            .subscribe(v -> { }, ex -> log.error("Unexpected error.", ex));
     }
 
     protected Mono<Void> removeStaleInstances(Set<InstanceId> registeredInstanceIds) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/discovery/ServiceInstanceConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.discovery;
 
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/EventsourcingInstanceRepository.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.entities;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
@@ -42,8 +43,8 @@ public class EventsourcingInstanceRepository implements InstanceRepository {
                                                                  .fixedBackoff(Duration.ofMillis(50L))
                                                                  .retryMax(10)
                                                                  .doOnRetry(ctx -> log.debug(
-                                                                         "Retrying after OptimisticLockingException",
-                                                                         ctx.exception()));
+                                                                     "Retrying after OptimisticLockingException",
+                                                                     ctx.exception()));
 
     public EventsourcingInstanceRepository(InstanceEventStore eventStore) {
         this.eventStore = eventStore;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/InstanceRepository.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.entities;
 
 import de.codecentric.boot.admin.server.domain.values.InstanceId;
@@ -73,4 +74,4 @@ public interface InstanceRepository {
      * @return the saved istance
      */
     Mono<Instance> computeIfPresent(InstanceId id, BiFunction<InstanceId, Instance, Mono<Instance>> remappingFunction);
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceDeregisteredEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.events;
 
 import de.codecentric.boot.admin.server.domain.values.InstanceId;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceEndpointsDetectedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.events;
 
 import de.codecentric.boot.admin.server.domain.values.Endpoints;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceEvent.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.events;
 
 import de.codecentric.boot.admin.server.domain.values.InstanceId;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceInfoChangedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.events;
 
 import de.codecentric.boot.admin.server.domain.values.Info;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceRegisteredEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.events;
 
 import de.codecentric.boot.admin.server.domain.values.InstanceId;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceRegistrationUpdatedEvent.java
Patch:
@@ -36,4 +36,3 @@ public InstanceRegistrationUpdatedEvent(InstanceId instance, long version, Regis
         this.registration = registration;
     }
 }
-

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/events/InstanceStatusChangedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.events;
 
 import de.codecentric.boot.admin.server.domain.values.InstanceId;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.domain.values;
 
 import java.io.Serializable;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Registration.java
Patch:
@@ -53,9 +53,9 @@ private Registration(String name,
         Assert.hasText(healthUrl, "'healthUrl' must not be empty.");
         Assert.isTrue(checkUrl(healthUrl), "'healthUrl' is not valid: " + healthUrl);
         Assert.isTrue(StringUtils.isEmpty(managementUrl) || checkUrl(managementUrl),
-                "'managementUrl' is not valid: " + managementUrl);
+            "'managementUrl' is not valid: " + managementUrl);
         Assert.isTrue(StringUtils.isEmpty(serviceUrl) || checkUrl(serviceUrl),
-                "'serviceUrl' is not valid: " + serviceUrl);
+            "'serviceUrl' is not valid: " + serviceUrl);
         this.name = name;
         this.managementUrl = managementUrl;
         this.healthUrl = healthUrl;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.eventstore;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/InMemoryEventStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.eventstore;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/InstanceEventStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.eventstore;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/AbstractEventNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/AbstractStatusChangeNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/CompositeNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -85,7 +86,7 @@ protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {
         String auth = Base64Utils.encodeToString(String.format("%s:%s", token, username).getBytes());
         headers.add(HttpHeaders.AUTHORIZATION, String.format("Basic %s", auth));
         return Mono.fromRunnable(() -> restTemplate.exchange(createUrl(), HttpMethod.POST,
-                new HttpEntity<>(createMessage(event, instance), headers), Void.class));
+            new HttpEntity<>(createMessage(event, instance), headers), Void.class));
     }
 
     private URI createUrl() {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/Notifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
@@ -27,4 +28,4 @@ public interface Notifier {
 
     Mono<Void> notify(InstanceEvent event);
 
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/RemindingNotifier.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -71,7 +72,7 @@ public void sendReminders() {
     protected boolean shouldStartReminder(InstanceEvent event) {
         if (event instanceof InstanceStatusChangedEvent) {
             return Arrays.binarySearch(reminderStatuses,
-                    ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()) >= 0;
+                ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()) >= 0;
         }
         return false;
     }
@@ -82,7 +83,7 @@ protected boolean shouldEndReminder(InstanceEvent event) {
         }
         if (event instanceof InstanceStatusChangedEvent) {
             return Arrays.binarySearch(reminderStatuses,
-                    ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()) < 0;
+                ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()) < 0;
         }
         return false;
     }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java
Patch:
@@ -81,7 +81,7 @@ public SlackNotifier(InstanceRepository repository) {
     @Override
     protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {
         return Mono.fromRunnable(
-                () -> restTemplate.postForEntity(webhookUrl, createMessage(event, instance), Void.class));
+            () -> restTemplate.postForEntity(webhookUrl, createMessage(event, instance), Void.class));
     }
 
     public void setRestTemplate(RestTemplate restTemplate) {
@@ -122,8 +122,8 @@ protected String getText(InstanceEvent event, Instance instance) {
     protected String getColor(InstanceEvent event) {
         if (event instanceof InstanceStatusChangedEvent) {
             return StatusInfo.STATUS_UP.equals(((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()) ?
-                    "good" :
-                    "danger";
+                "good" :
+                "danger";
         } else {
             return "#439FE0";
         }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -74,7 +75,7 @@ public TelegramNotifier(InstanceRepository repository) {
     @Override
     protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {
         return Mono.fromRunnable(
-                () -> restTemplate.getForObject(buildUrl(), Void.class, createMessage(event, instance)));
+            () -> restTemplate.getForObject(buildUrl(), Void.class, createMessage(event, instance)));
     }
 
     protected String buildUrl() {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/ApplicationNameNotificationFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify.filter;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -41,4 +42,4 @@ public String getName() {
     public String toString() {
         return "NotificationFilter [name=" + name + ", expiry=" + getExpiry() + "]";
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/ExpiringNotificationFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify.filter;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -41,4 +42,4 @@ public boolean filter(InstanceEvent event, Instance instance) {
     public Instant getExpiry() {
         return expiry;
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/FilteringNotifier.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify.filter;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/InstanceIdNotificationFilter.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify.filter;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;
@@ -42,4 +43,4 @@ public InstanceId getId() {
     public String toString() {
         return "NotificationFilter [id=" + id + ", expiry=" + getExpiry() + "]";
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/NotificationFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify.filter;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/web/NotificationFilterController.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.notify.filter.web;
 
 import de.codecentric.boot.admin.server.domain.values.InstanceId;
@@ -83,7 +84,7 @@ private NotificationFilter createFilter(InstanceId id, String name, Duration ttl
         Instant expiry = ttl != null ? Instant.now().plus(ttl) : null;
 
         return id != null ?
-                new InstanceIdNotificationFilter(id, expiry) :
-                new ApplicationNameNotificationFilter(name, expiry);
+            new InstanceIdNotificationFilter(id, expiry) :
+            new ApplicationNameNotificationFilter(name, expiry);
     }
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/EndpointDetector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.services;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InfoUpdater.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.services;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InstanceIdGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.services;
 
 import de.codecentric.boot.admin.server.domain.values.InstanceId;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InstanceRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.services;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/ResubscribingEventHandler.java
Patch:
@@ -46,8 +46,8 @@ public void start() {
                            .compose(this::handle)
                            .retryWhen(Retry.any()
                                            .retryMax(Integer.MAX_VALUE)
-                                           .doOnRetry(ctx -> log.error("Resubscribing after uncaught error",
-                                                   ctx.exception())))
+                                           .doOnRetry(
+                                               ctx -> log.error("Resubscribing after uncaught error", ctx.exception())))
                            .subscribe();
     }
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/StatusUpdater.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.services;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/ProbeEndpointsStrategy.java
Patch:
@@ -75,7 +75,7 @@ private static EndpointDefinition create(String idWithPath) {
                 return new EndpointDefinition(idWithPath, idWithPath);
             } else {
                 return new EndpointDefinition(idWithPath.substring(0, idxDelimiter),
-                        idWithPath.substring(idxDelimiter + 1));
+                    idWithPath.substring(idxDelimiter + 1));
             }
         }
     }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/utils/jackson/SanitizingMapSerializer.java
Patch:
@@ -60,4 +60,4 @@ private String sanitize(String key, String value) {
                                           .anyMatch(pattern -> pattern.matcher(key).matches());
         return matchesAnyPattern ? "******" : value;
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/AdminController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.web;
 
 import java.lang.annotation.Documented;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/InstancesController.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.web;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/HttpHeadersProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.web.client;
 
 import de.codecentric.boot.admin.server.domain.entities.Instance;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/LegacyEndpointConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.web.client;
 
 import reactor.core.publisher.Flux;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/reactive/InstancesProxyController.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.web.reactive;
 
 import de.codecentric.boot.admin.server.services.InstanceRegistry;
@@ -45,7 +46,7 @@ public InstancesProxyController(String adminContextPath,
     }
 
     @RequestMapping(path = REQUEST_MAPPING_PATH, method = {RequestMethod.GET, RequestMethod.HEAD, RequestMethod.POST,
-            RequestMethod.PUT, RequestMethod.PATCH, RequestMethod.DELETE, RequestMethod.OPTIONS})
+        RequestMethod.PUT, RequestMethod.PATCH, RequestMethod.DELETE, RequestMethod.OPTIONS})
     public Mono<Void> endpointProxy(@PathVariable("instanceId") String instanceId,
                                     ServerHttpRequest request,
                                     ServerHttpResponse response) {
@@ -56,7 +57,7 @@ public Mono<Void> endpointProxy(@PathVariable("instanceId") String instanceId,
                                       .toUri();
 
         return super.forward(instanceId, uri, request.getMethod(), request.getHeaders(),
-                () -> BodyInserters.fromDataBuffers(request.getBody())).flatMap(clientResponse -> {
+            () -> BodyInserters.fromDataBuffers(request.getBody())).flatMap(clientResponse -> {
             response.setStatusCode(clientResponse.statusCode());
             response.getHeaders().addAll(filterHeaders(clientResponse.headers().asHttpHeaders()));
             return response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers()));

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/servlet/AdminControllerHandlerMapping.java
Patch:
@@ -49,10 +49,10 @@ private RequestMappingInfo withPrefix(RequestMappingInfo mapping) {
             return mapping;
         }
         PatternsRequestCondition patternsCondition = new PatternsRequestCondition(
-                withNewPatterns(mapping.getPatternsCondition().getPatterns()));
+            withNewPatterns(mapping.getPatternsCondition().getPatterns()));
         return new RequestMappingInfo(patternsCondition, mapping.getMethodsCondition(), mapping.getParamsCondition(),
-                mapping.getHeadersCondition(), mapping.getConsumesCondition(), mapping.getProducesCondition(),
-                mapping.getCustomCondition());
+            mapping.getHeadersCondition(), mapping.getConsumesCondition(), mapping.getProducesCondition(),
+            mapping.getCustomCondition());
     }
 
     private String[] withNewPatterns(Set<String> patterns) {

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierConfigurationTest.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.config;
 
 import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
@@ -49,7 +50,7 @@
 
 public class AdminServerNotifierConfigurationTest {
     private static final InstanceEvent APP_DOWN = new InstanceStatusChangedEvent(InstanceId.of("id-2"), 1L,
-            StatusInfo.ofDown());
+        StatusInfo.ofDown());
 
     private AnnotationConfigApplicationContext context;
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerWebConfigurationTest.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.config;
 
 import de.codecentric.boot.admin.server.discovery.InstanceDiscoveryListener;

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/entities/EventsourcingInstanceRepositoryTest.java
Patch:
@@ -24,4 +24,4 @@ public EventsourcingInstanceRepositoryTest() {
         super(new EventsourcingInstanceRepository(new InMemoryEventStore()));
     }
 
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/entities/SnapshottingInstanceRepositoryTest.java
Patch:
@@ -37,4 +37,4 @@ public void tearDown() {
         ((SnapshottingInstanceRepository) repository).stop();
     }
 
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/EndpointTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,4 +29,4 @@ public void invariants() {
         assertThatThrownBy(() -> Endpoint.of("id", "")).isInstanceOf(IllegalArgumentException.class)
                                                        .hasMessage("'url' must not be empty.");
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/EndpointsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,12 +36,12 @@ public void should_return_endpoint_or_empty() {
     public void factory_methods() {
         assertThat(Endpoints.empty()).isEqualTo(Endpoints.of(Collections.emptyList())).isEqualTo(Endpoints.of(null));
         assertThat(Endpoints.of(Collections.singletonList(Endpoint.of("id", "path")))).isEqualTo(
-                Endpoints.empty().withEndpoint("id", "path")).isEqualTo(Endpoints.single("id", "path"));
+            Endpoints.empty().withEndpoint("id", "path")).isEqualTo(Endpoints.single("id", "path"));
     }
 
     @Test
     public void should_throw_on_iterator_modificiation() {
         Endpoints endpoints = Endpoints.single("id", "path");
         assertThatThrownBy(() -> endpoints.iterator().remove()).isInstanceOf(UnsupportedOperationException.class);
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/InstanceIdTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,4 +37,4 @@ public void invariants() {
     public void json() throws JsonProcessingException {
         assertThat(new ObjectMapper().writeValueAsString(InstanceId.of("abc"))).isEqualTo("\"abc\"");
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.eventstore;
 
 import com.hazelcast.core.HazelcastInstance;

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/InMemoryEventStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package de.codecentric.boot.admin.server.eventstore;
 
 public class InMemoryEventStoreTest extends AbstractEventStoreTest {

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/CompositeNotifierTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,15 +29,15 @@
 
 public class CompositeNotifierTest {
     private static final InstanceEvent APP_DOWN = new InstanceStatusChangedEvent(InstanceId.of("-"), 0L,
-            StatusInfo.ofDown());
+        StatusInfo.ofDown());
 
     @Test(expected = IllegalArgumentException.class)
     public void test_ctor_assert() {
         new CompositeNotifier(null);
     }
 
     @Test
-    public void test_all_notifiers_get_notified() throws Exception {
+    public void test_all_notifiers_get_notified() {
         TestNotifier notifier1 = new TestNotifier();
         TestNotifier notifier2 = new TestNotifier();
         CompositeNotifier compositeNotifier = new CompositeNotifier(Arrays.asList(notifier1, notifier2));

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/NotificationTriggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public void should_notify_on_event() throws InterruptedException {
 
         //when registered event is emitted
         InstanceStatusChangedEvent event = new InstanceStatusChangedEvent(instance.getId(), instance.getVersion(),
-                StatusInfo.ofDown());
+            StatusInfo.ofDown());
         events.next(event);
         //then should notify
         verify(notifier, times(1)).notify(event);
@@ -60,4 +60,4 @@ public void should_notify_on_event() throws InterruptedException {
         //then should not notify
         verify(notifier, never()).notify(event);
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/RemindingNotifierTest.java
Patch:
@@ -43,9 +43,9 @@ public class RemindingNotifierTest {
                                                .register(Registration.create("App", "http://health").build())
                                                .withStatusInfo(StatusInfo.ofDown());
     private final InstanceEvent appDown = new InstanceStatusChangedEvent(instance1.getId(), instance1.getVersion(),
-            StatusInfo.ofDown());
+        StatusInfo.ofDown());
     private final InstanceEvent appUp = new InstanceStatusChangedEvent(instance1.getId(), instance1.getVersion(),
-            StatusInfo.ofUp());
+        StatusInfo.ofUp());
     private final InstanceEvent otherAppUp = new InstanceStatusChangedEvent(instance2.getId(), 0L, StatusInfo.ofUp());
     private InstanceRepository repository;
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/TestNotifier.java
Patch:
@@ -34,4 +34,4 @@ public Mono<Void> notify(InstanceEvent event) {
     public List<InstanceEvent> getEvents() {
         return events;
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/filter/FilteringNotifierTest.java
Patch:
@@ -38,7 +38,7 @@ public class FilteringNotifierTest {
     private final Instance instance = Instance.create(InstanceId.of("-"))
                                               .register(Registration.create("foo", "http://health").build());
     private final InstanceRegisteredEvent event = new InstanceRegisteredEvent(instance.getId(), instance.getVersion(),
-            instance.getRegistration());
+        instance.getRegistration());
     private InstanceRepository repository;
 
     @Before
@@ -58,7 +58,7 @@ public void test_expired_removal() {
         notifier.setCleanupInterval(Duration.ZERO);
 
         String id1 = notifier.addFilter(
-                new ApplicationNameNotificationFilter("foo", Instant.now().minus(Duration.ofSeconds(1))));
+            new ApplicationNameNotificationFilter("foo", Instant.now().minus(Duration.ofSeconds(1))));
         String id2 = notifier.addFilter(new ApplicationNameNotificationFilter("bar", null));
 
         assertThat(notifier.getNotificationFilters()).containsKey(id1).containsKey(id2);

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/notify/filter/InstanceIdNotificationFilterTest.java
Patch:
@@ -33,13 +33,13 @@ public void test_filterByName() {
         Instance filteredInstance = Instance.create(InstanceId.of("cafebabe"))
                                             .register(Registration.create("foo", "http://health").build());
         InstanceRegisteredEvent filteredEvent = new InstanceRegisteredEvent(filteredInstance.getId(),
-                filteredInstance.getVersion(), filteredInstance.getRegistration());
+            filteredInstance.getVersion(), filteredInstance.getRegistration());
         assertThat(filter.filter(filteredEvent, filteredInstance)).isTrue();
 
         Instance ignoredInstance = Instance.create(InstanceId.of("-"))
                                            .register(Registration.create("foo", "http://health").build());
         InstanceRegisteredEvent ignoredEvent = new InstanceRegisteredEvent(ignoredInstance.getId(),
-                ignoredInstance.getVersion(), ignoredInstance.getRegistration());
+            ignoredInstance.getVersion(), ignoredInstance.getRegistration());
         assertThat(filter.filter(ignoredEvent, ignoredInstance)).isFalse();
     }
 }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/EndpointDetectionTriggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -69,4 +69,4 @@ public void should_detect_on_event() throws InterruptedException {
         verify(detector, never()).detectEndpoints(instance.getId());
     }
 
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/EndpointDetectorTest.java
Patch:
@@ -95,8 +95,8 @@ public void should_update_endpoints() {
 
         StepVerifier.create(repository.find(instance.getId()))
                     .assertNext(app -> assertThat(app.getEndpoints()).isEqualTo(
-                            Endpoints.single("id", "url").withEndpoint("health", "http://health")))
+                        Endpoints.single("id", "url").withEndpoint("health", "http://health")))
                     .verifyComplete();
     }
 
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/InfoUpdateTriggerTest.java
Patch:
@@ -72,8 +72,8 @@ public void should_update_on_event() throws InterruptedException {
 
         //when registration updated event is emitted
         clearInvocations(updater);
-        events.next(new InstanceRegistrationUpdatedEvent(instance.getId(), instance.getVersion(),
-                instance.getRegistration()));
+        events.next(
+            new InstanceRegistrationUpdatedEvent(instance.getId(), instance.getVersion(), instance.getRegistration()));
         //then should update
         verify(updater, times(1)).updateInfo(instance.getId());
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/InfoUpdaterTest.java
Patch:
@@ -74,7 +74,7 @@ public void should_update_info_for_online_with_info_endpoint_only() {
         StepVerifier.create(repository.save(instance)).expectNextCount(1).verifyComplete();
         String body = "{ \"foo\": \"bar\" }";
         wireMock.stubFor(
-                get("/info").willReturn(okJson(body).withHeader("Content-Length", Integer.toString(body.length()))));
+            get("/info").willReturn(okJson(body).withHeader("Content-Length", Integer.toString(body.length()))));
 
         Instance noInfo = Instance.create(InstanceId.of("noinfo"))
                                   .register(registration)
@@ -141,7 +141,7 @@ public void should_clear_info_on_http_error() {
     @Test
     public void should_clear_info_on_exception() {
         updater = new InfoUpdater(repository,
-                new InstanceWebClient(instance -> HttpHeaders.EMPTY, Duration.ofMillis(250), Duration.ofMillis(250)));
+            new InstanceWebClient(instance -> HttpHeaders.EMPTY, Duration.ofMillis(250), Duration.ofMillis(250)));
 
         //given
         Instance instance = Instance.create(InstanceId.of("onl"))
@@ -167,4 +167,4 @@ public void should_clear_info_on_exception() {
                     .verifyComplete();
     }
 
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/StatusUpdateTriggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/endpoints/ChainingStrategyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,7 +44,7 @@ public void should_chain_on_empty() {
         //given
         Instance instance = Instance.create(InstanceId.of("id"));
         ChainingStrategy strategy = new ChainingStrategy((a) -> Mono.empty(), (a) -> Mono.empty(),
-                (a) -> Mono.just(Endpoints.single("id", "path")));
+            (a) -> Mono.just(Endpoints.single("id", "path")));
         //when/then
         StepVerifier.create(strategy.detectEndpoints(instance))
                     .expectNext(Endpoints.single("id", "path"))
@@ -59,4 +59,4 @@ public void should_return_empty_endpoints_when_all_empty() {
         //when/then
         StepVerifier.create(strategy.detectEndpoints(instance)).expectNext(Endpoints.empty()).verifyComplete();
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/utils/ComparableVersionTest.java
Patch:
@@ -54,4 +54,4 @@ public void compare() throws Exception {
     private int doCompare(String v1, String v2) {
         return ComparableVersion.valueOf(v1).compareTo(ComparableVersion.valueOf(v2));
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/utils/jackson/RegistrationDeserializerTest.java
Patch:
@@ -35,7 +35,7 @@ public RegistrationDeserializerTest() {
         SimpleModule module = new SimpleModule();
         module.addDeserializer(Registration.class, new RegistrationDeserializer());
         module.setSerializerModifier(
-                new RegistrationBeanSerializerModifier(new SanitizingMapSerializer(new String[]{".*password$"})));
+            new RegistrationBeanSerializerModifier(new SanitizingMapSerializer(new String[]{".*password$"})));
         objectMapper = Jackson2ObjectMapperBuilder.json().modules(module).build();
     }
 
@@ -121,4 +121,4 @@ public void test_sanitize_metadata() throws JsonProcessingException {
         assertThat(json).doesNotContain("qwertz123");
         assertThat(json).contains("humptydumpty");
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/PathUtilsTest.java
Patch:
@@ -32,4 +32,4 @@ public void normalizePath() {
         assertThat(PathUtils.normalizePath("/admin/")).isEqualTo("/admin");
         assertThat(PathUtils.normalizePath("admin/")).isEqualTo("/admin");
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/client/BasicAuthHttpHeaderProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public void test_auth_header() {
                                                 .build();
         Instance instance = Instance.create(InstanceId.of("id")).register(registration);
         assertThat(headersProvider.getHeaders(instance).get(HttpHeaders.AUTHORIZATION)).containsOnly(
-                "Basic dGVzdDpkcm93c3NhcA==");
+            "Basic dGVzdDpkcm93c3NhcA==");
     }
 
     @Test

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/client/LegacyEndpointConvertersTest.java
Patch:
@@ -143,6 +143,6 @@ private Flux<Object> unmarshal(Flux<DataBuffer> buffer) {
 
     private Flux<DataBuffer> read(String resourceName) {
         return DataBufferUtils.readInputStream(
-                () -> LegacyEndpointConvertersTest.class.getResourceAsStream(resourceName), bufferFactory, 10);
+            () -> LegacyEndpointConvertersTest.class.getResourceAsStream(resourceName), bufferFactory, 10);
     }
-}
\ No newline at end of file
+}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/client/LegacyEndpointConvertersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -142,7 +142,7 @@ private Flux<Object> unmarshal(Flux<DataBuffer> buffer) {
     }
 
     private Flux<DataBuffer> read(String resourceName) {
-        return DataBufferUtils.read(LegacyEndpointConvertersTest.class.getResourceAsStream(resourceName), bufferFactory,
-                10);
+        return DataBufferUtils.readInputStream(
+                () -> LegacyEndpointConvertersTest.class.getResourceAsStream(resourceName), bufferFactory, 10);
     }
 }
\ No newline at end of file

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/registration/DefaultApplicationFactory.java
Patch:
@@ -167,6 +167,7 @@ protected Map<String, String> getMetadata() {
         } else {
             Map<String, String> metadata = new LinkedHashMap<>();
             metadata.put("startup", this.timestamp.format(DateTimeFormatter.ISO_DATE_TIME));
+            metadata.putAll(instance.getMetadata());
             return metadata;
         }
     }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/MicrosoftTeamsNotifier.java
Patch:
@@ -92,7 +92,7 @@ protected void doNotify(ClientApplicationEvent event) throws Exception {
 			return;
 		}
 
-		this.restTemplate.postForObject(webhookUrl, message, Void.class);
+		this.restTemplate.postForEntity(webhookUrl, message, Void.class);
 	}
 
 	@Override

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/notify/MicrosoftTeamsNotifierTest.java
Patch:
@@ -51,7 +51,7 @@ public void test_onClientApplicationDeRegisteredEvent_resolve() throws Exception
 
 		notifier.doNotify(event);
 
-		verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),
+		verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),
 				any(Message.class), eq(Void.class));
 	}
 
@@ -61,7 +61,7 @@ public void test_onApplicationRegisteredEvent_resolve() throws Exception {
 
 		notifier.doNotify(event);
 
-		verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),
+		verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),
 				any(Message.class), eq(Void.class));
 	}
 
@@ -72,7 +72,7 @@ public void test_onApplicationStatusChangedEvent_resolve() throws Exception {
 
 		notifier.doNotify(event);
 
-		verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),
+		verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),
 				any(Message.class), eq(Void.class));
 	}
 

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/registration/ApplicationRegistrator.java
Patch:
@@ -70,9 +70,9 @@ public boolean register() {
 
                 if (response.getStatusCode().equals(HttpStatus.CREATED)) {
                     if (registeredId.compareAndSet(null, response.getBody().get("id").toString())) {
-                        LOGGER.info("Application registered itself as {}", response.getBody());
+                        LOGGER.info("Application registered itself as {}", response.getBody().get("id").toString());
                     } else {
-                        LOGGER.debug("Application refreshed itself as {}", response.getBody());
+                        LOGGER.debug("Application refreshed itself as {}", response.getBody().get("id").toString());
                     }
 
                     isRegistrationSuccessful = true;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/model/Application.java
Patch:
@@ -318,7 +318,7 @@ public MetadataSerializer() {
 		private static Pattern[] createPatterns(String... keys) {
 			Pattern[] patterns = new Pattern[keys.length];
 			for (int i = 0; i < keys.length; i++) {
-				patterns[i] = Pattern.compile(keys[i]);
+				patterns[i] = Pattern.compile(keys[i], Pattern.CASE_INSENSITIVE);
 			}
 			return patterns;
 		}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/model/ApplicationTest.java
Patch:
@@ -81,7 +81,7 @@ public void test_healthUrl_expected() throws Exception {
 	@Test
 	public void test_sanitize_metadata() throws JsonProcessingException {
 		Application app = Application.create("test").withHealthUrl("http://health")
-				.addMetadata("password", "qwertz123").addMetadata("user", "humptydumpty").build();
+				.addMetadata("PASSWORD", "qwertz123").addMetadata("user", "humptydumpty").build();
 		String json = objectMapper.writeValueAsString(app);
 		assertThat(json, not(containsString("qwertz123")));
 		assertThat(json, containsString("humptydumpty"));

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.actuate.autoconfigure.ManagementServerProperties;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.autoconfigure.web.ServerProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.web.client.RestTemplateBuilder;
@@ -38,6 +39,7 @@
 
 @Configuration
 @EnableConfigurationProperties({AdminProperties.class, AdminClientProperties.class})
+@ConditionalOnWebApplication
 @Conditional(SpringBootAdminClientEnabledCondition.class)
 public class SpringBootAdminClientAutoConfiguration {
 

File: spring-boot-admin-samples/spring-boot-admin-sample/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -16,7 +16,7 @@
 package de.codecentric.boot.admin;
 
 import de.codecentric.boot.admin.server.config.EnableAdminServer;
-import de.codecentric.boot.admin.server.domain.entities.ApplicationRepository;
+import de.codecentric.boot.admin.server.domain.entities.InstanceRepository;
 import de.codecentric.boot.admin.server.notify.LoggingNotifier;
 import de.codecentric.boot.admin.server.notify.RemindingNotifier;
 import de.codecentric.boot.admin.server.notify.filter.FilteringNotifier;
@@ -66,9 +66,9 @@ protected void configure(HttpSecurity http) throws Exception {
 
     @Configuration
     public static class NotifierConfig {
-        private final ApplicationRepository repository;
+        private final InstanceRepository repository;
 
-        public NotifierConfig(ApplicationRepository repository) {
+        public NotifierConfig(InstanceRepository repository) {
             this.repository = repository;
         }
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.codecentric.boot.admin.server.discovery;
 
-import de.codecentric.boot.admin.server.domain.entities.Application;
+import de.codecentric.boot.admin.server.domain.entities.Instance;
 import de.codecentric.boot.admin.server.domain.values.Registration;
 
 import java.net.URI;
@@ -29,8 +29,8 @@
 import static org.apache.commons.lang.StringUtils.stripStart;
 
 /**
- * Converts any {@link ServiceInstance}s to {@link Application}s. To customize the health- or
- * management-url for all applications you can set healthEndpointPath or managementContextPath
+ * Converts any {@link ServiceInstance}s to {@link Instance}s. To customize the health- or
+ * management-url for all instances you can set healthEndpointPath or managementContextPath
  * respectively. If you want to influence the url per service you can add
  * <code>management.context-path</code> or <code>management.port</code> or <code>health.path</code>
  * to the instances metadata.

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/discovery/EurekaServiceInstanceConverter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.codecentric.boot.admin.server.discovery;
 
-import de.codecentric.boot.admin.server.domain.entities.Application;
+import de.codecentric.boot.admin.server.domain.entities.Instance;
 
 import java.net.URI;
 import org.springframework.cloud.client.ServiceInstance;
@@ -25,7 +25,7 @@
 import com.netflix.appinfo.InstanceInfo;
 
 /**
- * Converts {@link EurekaServiceInstance}s to {@link Application}s
+ * Converts {@link EurekaServiceInstance}s to {@link Instance}s
  *
  * @author Johannes Edmeier
  */

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Info.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
-import com.fasterxml.jackson.annotation.JsonIgnore;
 
 /**
  * Represents the info fetched from the info actuator endpoint
@@ -45,8 +44,6 @@ public static Info empty() {
         return EMPTY;
     }
 
-
-    @JsonIgnore
     public String getVersion() {
         Object build = this.values.get("build");
         if (build instanceof Map) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Registration.java
Patch:
@@ -38,7 +38,7 @@
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 
 /**
- * Registration info the application registers with (inluding metadata)
+ * Registration info for the instance registers with (inluding metadata)
  *
  * @author Johannes Edmeier
  */

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/InMemoryEventStore.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.codecentric.boot.admin.server.eventstore;
 
-import de.codecentric.boot.admin.server.domain.events.ClientApplicationEvent;
+import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
 import reactor.core.publisher.Mono;
 
 import java.util.List;
@@ -36,7 +36,7 @@ public InMemoryEventStore(int maxLogSizePerAggregate) {
     }
 
     @Override
-    public Mono<Void> append(List<ClientApplicationEvent> events) {
+    public Mono<Void> append(List<InstanceEvent> events) {
         return super.append(events).then(Mono.fromRunnable(() -> this.publish(events)));
     }
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/CompositeNotifier.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.codecentric.boot.admin.server.notify;
 
-import de.codecentric.boot.admin.server.domain.events.ClientApplicationEvent;
+import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
@@ -35,7 +35,7 @@ public CompositeNotifier(Iterable<Notifier> delegates) {
     }
 
     @Override
-    public Mono<Void> notify(ClientApplicationEvent event) {
+    public Mono<Void> notify(InstanceEvent event) {
         return Flux.fromIterable(delegates).flatMap(d -> d.notify(event)).then();
     }
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/Notifier.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.codecentric.boot.admin.server.notify;
 
-import de.codecentric.boot.admin.server.domain.events.ClientApplicationEvent;
+import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
 import reactor.core.publisher.Mono;
 
 /**
@@ -25,6 +25,6 @@
  */
 public interface Notifier {
 
-    Mono<Void> notify(ClientApplicationEvent event);
+    Mono<Void> notify(InstanceEvent event);
 
 }
\ No newline at end of file

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/NotificationFilter.java
Patch:
@@ -15,9 +15,9 @@
  */
 package de.codecentric.boot.admin.server.notify.filter;
 
-import de.codecentric.boot.admin.server.domain.entities.Application;
-import de.codecentric.boot.admin.server.domain.events.ClientApplicationEvent;
+import de.codecentric.boot.admin.server.domain.entities.Instance;
+import de.codecentric.boot.admin.server.domain.events.InstanceEvent;
 
 public interface NotificationFilter {
-    boolean filter(ClientApplicationEvent event, Application application);
+    boolean filter(InstanceEvent event, Instance instance);
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/ChainingStrategy.java
Patch:
@@ -16,7 +16,7 @@
 
 package de.codecentric.boot.admin.server.services.endpoints;
 
-import de.codecentric.boot.admin.server.domain.entities.Application;
+import de.codecentric.boot.admin.server.domain.entities.Instance;
 import de.codecentric.boot.admin.server.domain.values.Endpoints;
 import reactor.core.publisher.Mono;
 
@@ -32,10 +32,10 @@ public ChainingStrategy(EndpointDetectionStrategy... delegates) {
     }
 
     @Override
-    public Mono<Endpoints> detectEndpoints(Application application) {
+    public Mono<Endpoints> detectEndpoints(Instance instance) {
         Mono<Endpoints> result = Mono.empty();
         for (EndpointDetectionStrategy delegate : delegates) {
-            result = result.switchIfEmpty(delegate.detectEndpoints(application));
+            result = result.switchIfEmpty(delegate.detectEndpoints(instance));
         }
         return result.switchIfEmpty(Mono.just(Endpoints.empty()));
     }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/EndpointDetectionStrategy.java
Patch:
@@ -16,10 +16,10 @@
 
 package de.codecentric.boot.admin.server.services.endpoints;
 
-import de.codecentric.boot.admin.server.domain.entities.Application;
+import de.codecentric.boot.admin.server.domain.entities.Instance;
 import de.codecentric.boot.admin.server.domain.values.Endpoints;
 import reactor.core.publisher.Mono;
 
 public interface EndpointDetectionStrategy {
-    Mono<Endpoints> detectEndpoints(Application application);
+    Mono<Endpoints> detectEndpoints(Instance instance);
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/HttpHeadersProvider.java
Patch:
@@ -15,18 +15,18 @@
  */
 package de.codecentric.boot.admin.server.web.client;
 
-import de.codecentric.boot.admin.server.domain.entities.Application;
+import de.codecentric.boot.admin.server.domain.entities.Instance;
 
 import org.springframework.http.HttpHeaders;
 
 /**
  * Is responsible to provide the {@link HttpHeaders} used to interact with the given
- * {@link Application}.
+ * {@link Instance}.
  *
  * @author Johannes Edmeier
  */
 public interface HttpHeadersProvider {
 
-    HttpHeaders getHeaders(Application application);
+    HttpHeaders getHeaders(Instance instance);
 
 }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/AdminApplicationHazelcastTest.java
Patch:
@@ -70,7 +70,7 @@ public void lifecycle() {
         super.lifecycle();
 
         Mono<String> events1 = getWebClient().get()
-                                             .uri("/api/applications/events")
+                                             .uri("/instances/events")
                                              .accept(MediaType.APPLICATION_JSON)
                                              .exchange()
                                              .expectStatus()
@@ -80,7 +80,7 @@ public void lifecycle() {
                                              .collect(Collectors.joining());
 
         Mono<String> events2 = webClient2.get()
-                                         .uri("/api/applications/events")
+                                         .uri("/instances/events")
                                          .accept(MediaType.APPLICATION_JSON)
                                          .exchange()
                                          .expectStatus()

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/HazelcastEventStoreTest.java
Patch:
@@ -21,7 +21,7 @@
 public class HazelcastEventStoreTest extends AbstractEventStoreTest {
 
     @Override
-    protected ClientApplicationEventStore createStore(int maxLogSizePerAggregate) {
+    protected InstanceEventStore createStore(int maxLogSizePerAggregate) {
         HazelcastInstance hazelcast = new TestHazelcastInstanceFactory(1).newHazelcastInstance();
         return new HazelcastEventStore(maxLogSizePerAggregate, hazelcast.getMap("testList"));
     }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/eventstore/InMemoryEventStoreTest.java
Patch:
@@ -18,7 +18,7 @@
 public class InMemoryEventStoreTest extends AbstractEventStoreTest {
 
     @Override
-    protected ClientApplicationEventStore createStore(int maxLogSizePerAggregate) {
+    protected InstanceEventStore createStore(int maxLogSizePerAggregate) {
         return new InMemoryEventStore(maxLogSizePerAggregate);
     }
 

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/config/ClientProperties.java
Patch:
@@ -29,7 +29,7 @@ public class ClientProperties {
     /**
      * The admin rest-apis path.
      */
-    private String apiPath = "api/applications";
+    private String apiPath = "instances";
 
     /**
      * Time interval (in ms) the registration is repeated

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/config/ClientServletApplicationTest.java
Patch:
@@ -55,9 +55,9 @@ public void setUp() throws Exception {
                                                         .withHeader("Content-Type", "application/json")
                                                         .withHeader("Location", "http://localhost:" +
                                                                                 wiremock.port() +
-                                                                                "/api/applications/abcdef")
+                                                                                "/instances/abcdef")
                                                         .withBody("{ \"id\" : \"abcdef\" }");
-        stubFor(post(urlEqualTo("/api/applications")).willReturn(response));
+        stubFor(post(urlEqualTo("/instances")).willReturn(response));
 
         instance = SpringApplication.run(TestClientApplication.class, "--spring.main.web-application-type=servlet",
                 "--spring.application.name=Test-Client", "--server.port=0", "--management.port=0",
@@ -75,7 +75,7 @@ public void test_context() throws InterruptedException {
                       " \"healthUrl\" : \"" + managementHost + "/mgmt/health/\"," + //
                       " \"serviceUrl\" : \"" + serviceHost + "/\", " + //
                       " \"metadata\" : {} }";
-        RequestPatternBuilder request = postRequestedFor(urlEqualTo("/api/applications")).withHeader("Content-Type",
+        RequestPatternBuilder request = postRequestedFor(urlEqualTo("/instances")).withHeader("Content-Type",
                 equalTo("application/json")).withRequestBody(equalToJson(body));
         verify(moreThanOrExactly(1), request);
     }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/discovery/DefaultServiceInstanceConverter.java
Patch:
@@ -47,7 +47,7 @@ public class DefaultServiceInstanceConverter implements ServiceInstanceConverter
 
     /**
      * Default context-path to be appended to the url of the discovered service for the
-     * managment-url.
+     * management-url.
      */
     private String managementContextPath = "";
     /**

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/registration/DefaultApplicationFactoryTest.java
Patch:
@@ -123,7 +123,7 @@ public void test_ssl() {
     }
 
     @Test
-    public void test_ssl_managment() {
+    public void test_ssl_management() {
         management.setSsl(new Ssl());
         management.getSsl().setEnabled(true);
         publishApplicationReadyEvent(factory, 8080, 9090);

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/discovery/ApplicationDiscoveryListenerTest.java
Patch:
@@ -145,8 +145,8 @@ public void test_register_and_convert() {
         Application application = registry.getApplications().iterator().next();
 
         assertEquals("http://localhost:80/health", application.getHealthUrl());
-        assertEquals("http://localhost:80", application.getManagementUrl());
-        assertEquals("http://localhost:80", application.getServiceUrl());
+        assertEquals("http://localhost:80/", application.getManagementUrl());
+        assertEquals("http://localhost:80/", application.getServiceUrl());
         assertEquals("service", application.getName());
     }
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/discovery/EurekaServiceInstanceConverterTest.java
Patch:
@@ -33,7 +33,7 @@ public void convert_secure() {
 
 		assertThat(application.getId(), nullValue());
 		assertThat(application.getName(), is("test"));
-		assertThat(application.getServiceUrl(), is("http://localhost:80"));
+		assertThat(application.getServiceUrl(), is("http://localhost:80/"));
 		assertThat(application.getManagementUrl(), is("http://localhost:80/mgmt"));
 		assertThat(application.getHealthUrl(), is("http://localhost:80/mgmt/ping"));
 	}
@@ -49,7 +49,7 @@ public void convert_missing_mgmtpath() {
 
 		Application application = new EurekaServiceInstanceConverter().convert(service);
 
-		assertThat(application.getManagementUrl(), is("http://localhost:80"));
+		assertThat(application.getManagementUrl(), is("http://localhost:80/"));
 	}
 
 	@Test

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerNotifierConfiguration.java
Patch:
@@ -47,7 +47,7 @@
 import org.springframework.mail.MailSender;
 
 @Configuration
-public class NotifierConfiguration {
+public class AdminServerNotifierConfiguration {
 
     @Configuration
     @ConditionalOnBean(Notifier.class)

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/EnableAdminServer.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2013-2014 the original author or authors.
+ * Copyright 2014-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -28,7 +28,7 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import(AdminServerImportSelector.class)
+@Import(AdminServerMarkerConfiguration.class)
 public @interface EnableAdminServer {
 
 }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierConfigurationTest.java
Patch:
@@ -48,7 +48,7 @@
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
 
-public class NotifierConfigurationTest {
+public class AdminServerNotifierConfigurationTest {
     private static final ClientApplicationEvent APP_DOWN = new ClientApplicationStatusChangedEvent(
             ApplicationId.of("id-2"), 1L, StatusInfo.ofDown());
 
@@ -126,9 +126,9 @@ private void load(Class<?> config, String... environment) {
             context.register(config);
         }
         context.register(RestTemplateAutoConfiguration.class);
-        context.register(AdminServerCoreConfiguration.class);
         context.register(MailSenderAutoConfiguration.class);
-        context.register(NotifierConfiguration.class);
+        context.register(AdminServerMarkerConfiguration.class);
+        context.register(AdminServerAutoConfiguration.class);
 
         TestPropertyValues.of(environment).applyTo(context);
         context.refresh();

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -47,7 +47,9 @@ public ApplicationRegistrator registrator(AdminProperties admin,
                                               ApplicationFactory applicationFactory,
                                               RestTemplateBuilder restTemplBuilder) {
         RestTemplateBuilder builder = restTemplBuilder.messageConverters(new MappingJackson2HttpMessageConverter())
-                                                      .requestFactory(SimpleClientHttpRequestFactory.class);
+                                                      .requestFactory(SimpleClientHttpRequestFactory.class)
+                                                      .setConnectTimeout(admin.getConnectTimeout())
+                                                      .setReadTimeout(admin.getReadTimeout());
         if (admin.getUsername() != null) {
             builder = builder.basicAuthorization(admin.getUsername(), admin.getPassword());
         }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/EnableAdminServer.java
Patch:
@@ -20,7 +20,7 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-
+import org.springframework.cloud.netflix.zuul.EnableZuulServer;
 import org.springframework.context.annotation.Import;
 
 /**
@@ -30,6 +30,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Import(AdminServerImportSelector.class)
+@EnableZuulServer
 public @interface EnableAdminServer {
 
 }

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/registration/ApplicationTest.java
Patch:
@@ -14,9 +14,7 @@
  * limitations under the License.
  */
 
-package de.codecentric.boot.admin.registration;
-
-import de.codecentric.boot.admin.client.registration.Application;
+package de.codecentric.boot.admin.client.registration;
 
 import java.io.IOException;
 import org.junit.Test;

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/config/AdminServerWebConfigurationTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.boot.test.util.EnvironmentTestUtils;
 import org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration;
 import org.springframework.cloud.commons.util.UtilAutoConfiguration;
+import org.springframework.boot.test.util.TestPropertyValues;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.converter.HttpMessageConverter;
@@ -126,7 +127,7 @@ private void load(Class<?> config, String... environment) {
         applicationContext.register(AdminServerCoreConfiguration.class);
         applicationContext.register(AdminServerWebConfiguration.class);
 
-        EnvironmentTestUtils.addEnvironment(applicationContext, environment);
+        TestPropertyValues.of(environment).applyTo(applicationContext);
         applicationContext.refresh();
         this.context = applicationContext;
     }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/config/NotifierConfigurationTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.After;
 import org.junit.Test;
 import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;
-import org.springframework.boot.test.util.EnvironmentTestUtils;
+import org.springframework.boot.test.util.TestPropertyValues;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Primary;
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
@@ -108,7 +108,7 @@ private void load(Class<?> config, String... environment) {
         context.register(MailSenderAutoConfiguration.class);
         context.register(NotifierConfiguration.class);
 
-        EnvironmentTestUtils.addEnvironment(context, environment);
+        TestPropertyValues.of(environment).applyTo(context);
         context.refresh();
     }
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/notify/SlackNotifierTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.springframework.http.MediaType;
 import org.springframework.web.client.RestTemplate;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfigurationTest.java
Patch:
@@ -51,5 +51,4 @@ private void load(final String... environment) {
     @EnableAutoConfiguration
     static class TestClientApplication {
     }
-
 }

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/AdminServerProperties.java
Patch:
@@ -71,7 +71,7 @@ public static class RoutesProperties {
 		 * Endpoints to be proxified by spring boot admin.
 		 */
 		private String[] endpoints = { "env", "metrics", "trace", "dump", "jolokia", "info",
-				"trace", "logfile", "refresh", "flyway", "liquibase", "heapdump", "loggers", "auditevents" };
+				"logfile", "refresh", "flyway", "liquibase", "heapdump", "loggers", "auditevents" };
 
 		public String[] getEndpoints() {
 			return endpoints;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/PagerdutyNotifier.java
Patch:
@@ -83,7 +83,7 @@ protected Map<String, Object> createPagerdutyEvent(ClientApplicationEvent event)
 		result.put("service_key", serviceKey);
 		result.put("incident_key",
 				event.getApplication().getName() + "/" + event.getApplication().getId());
-		result.put("description", getDescirption(event));
+		result.put("description", getDescription(event));
 
 		Map<String, Object> details = getDetails(event);
 		result.put("details", details);
@@ -111,7 +111,7 @@ protected Map<String, Object> createPagerdutyEvent(ClientApplicationEvent event)
 		return result;
 	}
 
-	protected String getDescirption(ClientApplicationEvent event) {
+	protected String getDescription(ClientApplicationEvent event) {
 		return description.getValue(event, String.class);
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/zuul/filters/route/SimpleHostRoutingFilter.java
Patch:
@@ -282,7 +282,7 @@ private CloseableHttpResponse forward(CloseableHttpClient httpclient, String ver
 		int contentLength = request.getContentLength();
 		InputStreamEntity entity = new InputStreamEntity(requestEntity, contentLength,
 				request.getContentType() != null
-						? ContentType.create(request.getContentType()) : null);
+						? ContentType.parse(request.getContentType()) : null);
 		switch (verb.toUpperCase()) {
 		case "POST":
 			HttpPost httpPost = new HttpPost(uri + this.helper.getQueryString(params));

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/AbstractStatusChangeNotifier.java
Patch:
@@ -52,4 +52,7 @@ public void setIgnoreChanges(String[] ignoreChanges) {
 		this.ignoreChanges = copy;
 	}
 
+	public String[] getIgnoreChanges() {
+		return ignoreChanges;
+	}
 }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/model/StatusInfoTest.java
Patch:
@@ -11,12 +11,12 @@ public class StatusInfoTest {
 	@Test
 	public void test_equals_hashcode() {
 		StatusInfo up = StatusInfo.ofUp();
-		StatusInfo up2 = StatusInfo.valueOf("UP", 0L);
+		StatusInfo up2 = StatusInfo.valueOf("UP");
 		StatusInfo down = StatusInfo.valueOf("DOWN");
 
 		assertThat(up, is(up2));
 		assertThat(up, not(is(down)));
 		assertThat(up.hashCode(), is(up2.hashCode()));
 	}
 
-}
+}
\ No newline at end of file

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/registry/StatusUpdaterTest.java
Patch:
@@ -123,7 +123,7 @@ public void test_updateStatusForApplications() {
 		store.save(app1);
 
 		Application app2 = Application.create("foo").withId("id-2").withHealthUrl("health-2")
-				.withStatusInfo(StatusInfo.valueOf("UP", 0L)).build();
+				.withStatusInfo(StatusInfo.valueOf("UP")).build();
 		store.save(app2);
 
 		when(template.getForEntity("health-2", Map.class))

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/config/AdminClientProperties.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.codecentric.boot.admin.config;
+package de.codecentric.boot.admin.client.config;
 
 import static org.springframework.util.StringUtils.trimLeadingCharacter;
 

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/config/AdminProperties.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.codecentric.boot.admin.config;
+package de.codecentric.boot.admin.client.config;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.codecentric.boot.admin.config;
+package de.codecentric.boot.admin.client.config;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
@@ -28,8 +28,8 @@
 import org.springframework.scheduling.TaskScheduler;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
 
-import de.codecentric.boot.admin.services.ApplicationRegistrator;
-import de.codecentric.boot.admin.services.RegistrationApplicationListener;
+import de.codecentric.boot.admin.client.registration.ApplicationRegistrator;
+import de.codecentric.boot.admin.client.registration.RegistrationApplicationListener;
 
 @Configuration
 @EnableConfigurationProperties({ AdminProperties.class, AdminClientProperties.class })

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientEnabledCondition.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.codecentric.boot.admin.config;
+package de.codecentric.boot.admin.client.config;
 
 import org.springframework.boot.autoconfigure.condition.ConditionOutcome;
 import org.springframework.boot.autoconfigure.condition.SpringBootCondition;

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package de.codecentric.boot.admin.services;
+package de.codecentric.boot.admin.client.registration;
 
 import java.util.concurrent.ScheduledFuture;
 

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/config/AdminClientPropertiesTest.java
Patch:
@@ -1,4 +1,4 @@
-package de.codecentric.boot.admin.config;
+package de.codecentric.boot.admin.client.config;
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.Matchers.is;
@@ -24,6 +24,8 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
 
+import de.codecentric.boot.admin.client.config.AdminClientProperties;
+
 public class AdminClientPropertiesTest {
 
 	private AnnotationConfigWebApplicationContext context;

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/config/ClientApplicationTest.java
Patch:
@@ -1,4 +1,4 @@
-package de.codecentric.boot.admin.config;
+package de.codecentric.boot.admin.client.config;
 
 import static org.hamcrest.Matchers.notNullValue;
 import static org.junit.Assert.assertThat;
@@ -12,6 +12,8 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.test.context.junit4.SpringRunner;
 
+import de.codecentric.boot.admin.client.config.AdminProperties;
+
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = TestClientApplication.class, webEnvironment = WebEnvironment.RANDOM_PORT, properties = {
 		"management.port=0", "spring.boot.admin.url=http://example.com" })

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfigurationTest.java
Patch:
@@ -1,4 +1,4 @@
-package de.codecentric.boot.admin.config;
+package de.codecentric.boot.admin.client.config;
 
 import static org.junit.Assert.assertTrue;
 
@@ -12,7 +12,8 @@
 import org.springframework.boot.test.util.EnvironmentTestUtils;
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
 
-import de.codecentric.boot.admin.services.ApplicationRegistrator;
+import de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration;
+import de.codecentric.boot.admin.client.registration.ApplicationRegistrator;
 
 public class SpringBootAdminClientAutoConfigurationTest {
 

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientEnabledConditionTest.java
Patch:
@@ -1,4 +1,4 @@
-package de.codecentric.boot.admin.config;
+package de.codecentric.boot.admin.client.config;
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -11,6 +11,8 @@
 import org.springframework.core.type.AnnotatedTypeMetadata;
 import org.springframework.mock.env.MockEnvironment;
 
+import de.codecentric.boot.admin.client.config.SpringBootAdminClientEnabledCondition;
+
 public class SpringBootAdminClientEnabledConditionTest {
 
 	private SpringBootAdminClientEnabledCondition condition;

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/config/AdminClientPropertiesTest.java
Patch:
@@ -67,15 +67,15 @@ public void test_contextPath_mgmtPath() {
 	@Test
 	public void test_contextPatht_mgmtPortPath() {
 		load("server.context-path=app", "management.context-path=/admin", "local.server.port=8080",
-				"local.management.port=8081");
+				"local.management.port=8081", "endpoints.health.path=/foo/bar");
 		AdminClientProperties clientProperties = context.getBean(AdminClientProperties.class);
 
 		publishApplicationReadyEvent(clientProperties);
 
 		assertThat(clientProperties.getManagementUrl(),
 				is("http://" + getHostname() + ":8081/admin"));
 		assertThat(clientProperties.getHealthUrl(),
-				is("http://" + getHostname() + ":8081/admin/health"));
+				is("http://" + getHostname() + ":8081/admin/foo/bar"));
 		assertThat(clientProperties.getServiceUrl(), is("http://" + getHostname() + ":8080/app"));
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/NotifierConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public class NotifierConfiguration {
 	@ConditionalOnBean(Notifier.class)
 	public static class NotifierListenerConfiguration {
 		@Autowired
-		public Notifier notifier;
+		private Notifier notifier;
 
 		@Bean
 		@ConditionalOnMissingBean

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/AbstractStatusChangeNotifier.java
Patch:
@@ -31,7 +31,7 @@ public abstract class AbstractStatusChangeNotifier extends AbstractEventNotifier
 	 * List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g.
 	 * *:UP or OFFLINE:*
 	 */
-	protected String[] ignoreChanges = { "UNKNOWN:UP" };
+	private String[] ignoreChanges = { "UNKNOWN:UP" };
 
 	@Override
 	protected boolean shouldNotify(ClientApplicationEvent event) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/HipchatNotifier.java
Patch:
@@ -33,7 +33,7 @@
  * @author Jamie Brown
  */
 public class HipchatNotifier extends AbstractStatusChangeNotifier {
-	private final static String DEFAULT_DESCRIPTION = "<strong>#{application.name}</strong>/#{application.id} is <strong>#{to.status}</strong>";
+	private static final String DEFAULT_DESCRIPTION = "<strong>#{application.name}</strong>/#{application.id} is <strong>#{to.status}</strong>";
 
 	private final SpelExpressionParser parser = new SpelExpressionParser();
 	private RestTemplate restTemplate = new RestTemplate();

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/MailNotifier.java
Patch:
@@ -33,8 +33,8 @@
  * @author Johannes Edmeier
  */
 public class MailNotifier extends AbstractStatusChangeNotifier {
-	private final static String DEFAULT_SUBJECT = "#{application.name} (#{application.id}) is #{to.status}";
-	private final static String DEFAULT_TEXT = "#{application.name} (#{application.id})\nstatus changed from #{from.status} to #{to.status}\n\n#{application.healthUrl}";
+	private static final String DEFAULT_SUBJECT = "#{application.name} (#{application.id}) is #{to.status}";
+	private static final String DEFAULT_TEXT = "#{application.name} (#{application.id})\nstatus changed from #{from.status} to #{to.status}\n\n#{application.healthUrl}";
 
 	private final SpelExpressionParser parser = new SpelExpressionParser();
 	private final MailSender sender;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/PagerdutyNotifier.java
Patch:
@@ -37,7 +37,7 @@ public class PagerdutyNotifier extends AbstractStatusChangeNotifier {
 	public static final URI DEFAULT_URI = URI
 			.create("https://events.pagerduty.com/generic/2010-04-15/create_event.json");
 
-	private final static String DEFAULT_DESCRIPTION = "#{application.name}/#{application.id} is #{to.status}";
+	private static final String DEFAULT_DESCRIPTION = "#{application.name}/#{application.id} is #{to.status}";
 
 	private final SpelExpressionParser parser = new SpelExpressionParser();
 	private RestTemplate restTemplate = new RestTemplate();

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/StatusUpdateApplicationListener.java
Patch:
@@ -8,6 +8,7 @@
 import org.springframework.context.event.ContextClosedEvent;
 import org.springframework.context.event.EventListener;
 import org.springframework.scheduling.TaskScheduler;
+import org.springframework.web.context.WebApplicationContext;
 
 import de.codecentric.boot.admin.event.ClientApplicationRegisteredEvent;
 
@@ -26,14 +27,14 @@ public StatusUpdateApplicationListener(StatusUpdater statusUpdater,
 
 	@EventListener
 	public void onApplicationReady(ApplicationReadyEvent event) {
-		if (event.getApplicationContext().getParent() == null) {
+		if (event.getApplicationContext() instanceof WebApplicationContext) {
 			startStatusUpdate();
 		}
 	}
 
 	@EventListener
 	public void onContextClosed(ContextClosedEvent event) {
-		if (event.getApplicationContext().getParent() == null) {
+		if (event.getApplicationContext() instanceof WebApplicationContext) {
 			stopStatusUpdate();
 		}
 	}

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/registry/StatusUpdateApplicationListenerTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;
 import org.springframework.boot.context.event.ApplicationReadyEvent;
-import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.event.ContextClosedEvent;
 import org.springframework.scheduling.TaskScheduler;
+import org.springframework.web.context.ConfigurableWebApplicationContext;
 
 import de.codecentric.boot.admin.event.ClientApplicationRegisteredEvent;
 import de.codecentric.boot.admin.model.Application;
@@ -34,7 +34,7 @@ public void test_start_stop() throws Exception {
 
 		listener.onApplicationReady(
 				new ApplicationReadyEvent(mock(SpringApplication.class), null,
-						mock(ConfigurableApplicationContext.class)));
+						mock(ConfigurableWebApplicationContext.class)));
 		verify(scheduler).scheduleAtFixedRate(isA(Runnable.class), eq(10_000L));
 
 		listener.onContextClosed(new ContextClosedEvent(mock(EmbeddedWebApplicationContext.class)));

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/AdminClientProperties.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.event.EventListener;
 import org.springframework.util.StringUtils;
+import org.springframework.web.context.WebApplicationContext;
 
 @ConfigurationProperties(prefix = "spring.boot.admin.client")
 public class AdminClientProperties {
@@ -73,7 +74,7 @@ public class AdminClientProperties {
 
 	@EventListener
 	public void onApplicationReady(ApplicationReadyEvent event) {
-		if (event.getApplicationContext().getParent() == null) {
+		if (event.getApplicationContext() instanceof WebApplicationContext) {
 			serverPort = event.getApplicationContext().getEnvironment()
 					.getProperty("local.server.port", Integer.class);
 			managementPort = event.getApplicationContext().getEnvironment()

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/services/RegistrationApplicationListener.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.scheduling.TaskScheduler;
+import org.springframework.web.context.WebApplicationContext;
 
 /**
  * Listener responsible for starting and stopping the registration task when the application is
@@ -50,15 +51,15 @@ public RegistrationApplicationListener(ApplicationRegistrator registrator,
 	@EventListener
 	@Order(Ordered.LOWEST_PRECEDENCE)
 	public void onApplicationReady(ApplicationReadyEvent event) {
-		if (event.getApplicationContext().getParent() == null && autoRegister) {
+		if (event.getApplicationContext() instanceof WebApplicationContext && autoRegister) {
 			startRegisterTask();
 		}
 	}
 
 	@EventListener
 	@Order(Ordered.LOWEST_PRECEDENCE)
 	public void onClosedContext(ContextClosedEvent event) {
-		if (event.getApplicationContext().getParent() == null) {
+		if (event.getApplicationContext() instanceof WebApplicationContext) {
 			stopRegisterTask();
 
 			if (autoDeregister) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/MailNotifier.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.mail.MailSender;
 import org.springframework.mail.SimpleMailMessage;
 
-import de.codecentric.boot.admin.event.ClientApplicationStatusChangedEvent;
+import de.codecentric.boot.admin.event.ClientApplicationEvent;
 
 /**
  * Notifier sending emails.
@@ -71,7 +71,7 @@ public MailNotifier(MailSender sender) {
 	}
 
 	@Override
-	protected void doNotify(ClientApplicationStatusChangedEvent event) {
+	protected void doNotify(ClientApplicationEvent event) {
 		EvaluationContext context = new StandardEvaluationContext(event);
 
 		SimpleMailMessage message = new SimpleMailMessage();

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/notify/MailNotifierTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.mail.MailSender;
 import org.springframework.mail.SimpleMailMessage;
 
+import de.codecentric.boot.admin.event.ClientApplicationEvent;
 import de.codecentric.boot.admin.event.ClientApplicationStatusChangedEvent;
 import de.codecentric.boot.admin.model.Application;
 import de.codecentric.boot.admin.model.StatusInfo;
@@ -96,7 +97,7 @@ public void test_onApplicationEvent_noSend_wildcard() {
 	public void test_onApplicationEvent_throw_doesnt_propagate() {
 		Notifier notifier = new AbstractStatusChangeNotifier() {
 			@Override
-			protected void doNotify(ClientApplicationStatusChangedEvent event) throws Exception {
+			protected void doNotify(ClientApplicationEvent event) throws Exception {
 				throw new IllegalStateException("test");
 			}
 		};

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/registry/StatusUpdateApplicationListenerTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;
 import org.springframework.boot.context.event.ApplicationReadyEvent;
+import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.event.ContextClosedEvent;
 import org.springframework.scheduling.TaskScheduler;
 
@@ -32,7 +33,8 @@ public void test_start_stop() throws Exception {
 		when(scheduler.scheduleAtFixedRate(isA(Runnable.class), eq(10_000L))).thenReturn(task);
 
 		listener.onApplicationReady(
-				new ApplicationReadyEvent(mock(SpringApplication.class), null, null));
+				new ApplicationReadyEvent(mock(SpringApplication.class), null,
+						mock(ConfigurableApplicationContext.class)));
 		verify(scheduler).scheduleAtFixedRate(isA(Runnable.class), eq(10_000L));
 
 		listener.onContextClosed(new ContextClosedEvent(mock(EmbeddedWebApplicationContext.class)));

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/zuul/ApplicationRouteLocator.java
Patch:
@@ -53,7 +53,7 @@ public class ApplicationRouteLocator implements RefreshableRouteLocator {
 	 * Endpoints to be proxified by spring boot admin.
 	 */
 	private String[] endpoints = { "env", "metrics", "trace", "dump", "jolokia", "info", "trace",
-			"activiti", "logfile", "refresh", "flyway", "liquibase", "heapdump" };
+			"logfile", "refresh", "flyway", "liquibase", "heapdump" };
 
 	public ApplicationRouteLocator(String servletPath, ApplicationRegistry registry,
 			String prefix) {

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.http.client.SimpleClientHttpRequestFactory;
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 
 import de.codecentric.boot.admin.services.ApplicationRegistrator;
@@ -48,7 +49,8 @@ public class SpringBootAdminClientAutoConfiguration {
 	@ConditionalOnMissingBean
 	public ApplicationRegistrator registrator() {
 		RestTemplateBuilder builder = restTemplBuilder
-				.messageConverters(new MappingJackson2HttpMessageConverter());
+				.messageConverters(new MappingJackson2HttpMessageConverter())
+				.requestFactory(SimpleClientHttpRequestFactory.class);
 		if (admin.getUsername() != null) {
 			builder = builder.basicAuthorization(admin.getUsername(), admin.getPassword());
 		}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/AdminServerWebConfiguration.java
Patch:
@@ -82,7 +82,7 @@ public class AdminServerWebConfiguration extends WebMvcConfigurerAdapter
 	private ResourcePatternResolver resourcePatternResolver;
 
 	@Autowired
-	private RestTemplateBuilder builder;
+	private RestTemplateBuilder restTemplBuilder;
 
 	@Bean
 	@ConditionalOnMissingBean
@@ -181,7 +181,8 @@ public ApplicationIdGenerator applicationIdGenerator() {
 	@Bean
 	@ConditionalOnMissingBean
 	public StatusUpdater statusUpdater() {
-		builder.messageConverters(new MappingJackson2HttpMessageConverter())
+		RestTemplateBuilder builder = restTemplBuilder
+				.messageConverters(new MappingJackson2HttpMessageConverter())
 				.errorHandler(new DefaultResponseErrorHandler() {
 			@Override
 			protected boolean hasError(HttpStatus statusCode) {

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -39,15 +39,16 @@ public class SpringBootAdminClientAutoConfiguration {
 	private AdminProperties admin;
 
 	@Autowired
-	private RestTemplateBuilder builder;
+	private RestTemplateBuilder restTemplBuilder;
 
 	/**
 	 * Task that registers the application at the spring-boot-admin application.
 	 */
 	@Bean
 	@ConditionalOnMissingBean
 	public ApplicationRegistrator registrator() {
-		builder = builder.messageConverters(new MappingJackson2HttpMessageConverter());
+		RestTemplateBuilder builder = restTemplBuilder
+				.messageConverters(new MappingJackson2HttpMessageConverter());
 		if (admin.getUsername() != null) {
 			builder = builder.basicAuthorization(admin.getUsername(), admin.getPassword());
 		}

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -47,9 +47,9 @@ public class SpringBootAdminClientAutoConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	public ApplicationRegistrator registrator() {
-		builder.messageConverters(new MappingJackson2HttpMessageConverter());
+		builder = builder.messageConverters(new MappingJackson2HttpMessageConverter());
 		if (admin.getUsername() != null) {
-			builder.basicAuthorization(admin.getUsername(), admin.getPassword());
+			builder = builder.basicAuthorization(admin.getUsername(), admin.getPassword());
 		}
 		return new ApplicationRegistrator(builder.build(), admin, client);
 	}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/RevereseZuulProxyConfiguration.java
Patch:
@@ -112,7 +112,7 @@ public RoutesEndpoint zuulEndpoint(RouteLocator routeLocator) {
 	private static class ZuulRefreshListener implements ApplicationListener<ApplicationEvent> {
 		private ZuulHandlerMapping zuulHandlerMapping;
 
-		public ZuulRefreshListener(ZuulHandlerMapping zuulHandlerMapping) {
+		private ZuulRefreshListener(ZuulHandlerMapping zuulHandlerMapping) {
 			this.zuulHandlerMapping = zuulHandlerMapping;
 		}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/RemindingNotifier.java
Patch:
@@ -30,7 +30,7 @@
  * @author Johannes Edmeier
  */
 public class RemindingNotifier implements Notifier {
-	private final ConcurrentHashMap<String, Reminder> reminders = new ConcurrentHashMap<String, Reminder>();
+	private final ConcurrentHashMap<String, Reminder> reminders = new ConcurrentHashMap<>();
 	private long reminderPeriod = TimeUnit.MINUTES.toMillis(10L);
 	private String[] reminderStatuses = { "DOWN", "OFFLINE" };
 	private final Notifier delegate;
@@ -51,7 +51,7 @@ public void notify(ClientApplicationEvent event) {
 
 	public void sendReminders() {
 		long now = System.currentTimeMillis();
-		for (Reminder reminder : new ArrayList<Reminder>(reminders.values())) {
+		for (Reminder reminder : new ArrayList<>(reminders.values())) {
 			if (now - reminder.getLastNotification() > reminderPeriod) {
 				reminder.setLastNotification(now);
 				delegate.notify(reminder.getEvent());
@@ -92,7 +92,7 @@ private static class Reminder {
 		private final ClientApplicationEvent event;
 		private long lastNotification;
 
-		public Reminder(ClientApplicationEvent event) {
+		private Reminder(ClientApplicationEvent event) {
 			this.event = event;
 			this.lastNotification = event.getTimestamp();
 		}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/web/servlet/resource/ConcatenatingResourceResolver.java
Patch:
@@ -43,7 +43,7 @@ public class ConcatenatingResourceResolver extends AbstractResourceResolver {
 	private final byte[] delimiter;
 
 	public ConcatenatingResourceResolver(byte[] delimiter) {
-		this.delimiter = delimiter;
+		this.delimiter = delimiter.clone();
 	}
 
 	@Override

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/zuul/ApplicationRouteLocator.java
Patch:
@@ -154,10 +154,8 @@ public void setEndpoints(String[] proxyEndpoints) {
 	private String stripServletPath(final String path) {
 		String adjustedPath = path;
 
-		if (StringUtils.hasText(servletPath)) {
-			if (!servletPath.equals("/")) {
+		if (StringUtils.hasText(servletPath) && !"/".equals(servletPath)) {
 				adjustedPath = path.substring(this.servletPath.length());
-			}
 		}
 
 		LOGGER.debug("adjustedPath={}", path);

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/notify/MailNotifierTest.java
Patch:
@@ -97,7 +97,7 @@ public void test_onApplicationEvent_throw_doesnt_propagate() {
 		Notifier notifier = new AbstractStatusChangeNotifier() {
 			@Override
 			protected void doNotify(ClientApplicationStatusChangedEvent event) throws Exception {
-				throw new RuntimeException();
+				throw new IllegalStateException("test");
 			}
 		};
 		notifier.notify(new ClientApplicationStatusChangedEvent(

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/discovery/ApplicationDiscoveryListener.java
Patch:
@@ -96,7 +96,9 @@ protected void discover() {
 	protected final Set<String> getAllApplicationIdsFromRegistry() {
 		Set<String> result = new HashSet<>();
 		for (Application application : registry.getApplications()) {
-			result.add(application.getId());
+			if (!ignoredServices.contains(application.getName())) {
+				result.add(application.getId());
+			}
 		}
 		return result;
 	}

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/AdminClientProperties.java
Patch:
@@ -104,9 +104,7 @@ && getServiceUrl() != null) {
 					server.getContextPath()), management.getContextPath());
 
 		}
-		return append(
-				append(createLocalUri(getHostAddress().getCanonicalHostName(), managementPort),
-						server.getContextPath()),
+		return append(createLocalUri(getHostAddress().getCanonicalHostName(), managementPort),
 				management.getContextPath());
 	}
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/RevereseZuulProxyConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.cloud.netflix.zuul.ZuulConfiguration;
 import org.springframework.cloud.netflix.zuul.filters.ProxyRequestHelper;
 import org.springframework.cloud.netflix.zuul.filters.RouteLocator;
+import org.springframework.cloud.netflix.zuul.filters.TraceProxyRequestHelper;
 import org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter;
 import org.springframework.cloud.netflix.zuul.filters.route.SimpleHostRoutingFilter;
 import org.springframework.cloud.netflix.zuul.web.ZuulHandlerMapping;
@@ -62,7 +63,7 @@ public ApplicationRouteLocator routeLocator() {
 
 	@Bean
 	public ProxyRequestHelper proxyRequestHelper() {
-		ProxyRequestHelper helper = new ProxyRequestHelper();
+		TraceProxyRequestHelper helper = new TraceProxyRequestHelper();
 		if (this.traces != null) {
 			helper.setTraces(this.traces);
 		}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/DiscoveryClientConfiguration.java
Patch:
@@ -63,6 +63,7 @@ public ApplicationDiscoveryListener applicationDiscoveryListener(
 	public static class EurekaConverterConfiguration {
 		@Bean
 		@ConditionalOnMissingBean({ ServiceInstanceConverter.class })
+		@ConfigurationProperties(prefix = "spring.boot.admin.discovery.converter")
 		public EurekaServiceInstanceConverter serviceInstanceConverter() {
 			return new EurekaServiceInstanceConverter();
 		}

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/DiscoveryClientConfiguration.java
Patch:
@@ -49,6 +49,7 @@ public class DiscoveryClientConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
+	@ConfigurationProperties(prefix = "spring.boot.admin.discovery")
 	public ApplicationDiscoveryListener applicationDiscoveryListener(
 			ServiceInstanceConverter serviceInstanceConverter) {
 		ApplicationDiscoveryListener listener = new ApplicationDiscoveryListener(discoveryClient,

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/zuul/ApplicationRouteLocator.java
Patch:
@@ -49,7 +49,7 @@ public class ApplicationRouteLocator implements RefreshableRouteLocator {
 	private String prefix;
 	private String servletPath;
 	private String[] proxyEndpoints = { "env", "metrics", "trace", "dump", "jolokia", "info",
-			"configprops", "trace", "activiti", "logfile", "refresh" };
+			"configprops", "trace", "activiti", "logfile", "refresh", "flyway" };
 
 	public ApplicationRouteLocator(String servletPath, ApplicationRegistry registry,
 			String prefix) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/SlackNotifier.java
Patch:
@@ -77,11 +77,11 @@ public void setUsername(String username) {
 		this.username = username;
 	}
 
-	public void setMessage(Expression message) {
-		this.message = message;
+	public void setMessage(String message) {
+		this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);
 	}
 
-	private Object createMessage(ClientApplicationStatusChangedEvent event) {
+	protected Object createMessage(ClientApplicationStatusChangedEvent event) {
 		Map<String, Object> messageJson = new HashMap<>();
 		messageJson.put("username", username);
 		if (icon != null) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/RevereseZuulProxyConfiguration.java
Patch:
@@ -69,7 +69,7 @@ public ApplicationRouteLocator routeLocator() {
 	@Bean
 	public PreDecorationFilter preDecorationFilter() {
 		return new PreDecorationFilter(routeLocator(), this.server.getServletPrefix(),
-				new ZuulProperties());
+				new ZuulProperties(), new ProxyRequestHelper());
 	}
 
 	@Bean

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/NotifierConfiguration.java
Patch:
@@ -82,7 +82,7 @@ public PagerdutyNotifier pagerdutyNotifier() {
 	@Configuration
 	@ConditionalOnProperty(prefix = "spring.boot.admin.notify.hipchat", name = "url")
 	@AutoConfigureBefore({ NotifierListenerConfiguration.class })
-	public class HipchatNotifierConfiguration {
+	public static class HipchatNotifierConfiguration {
 	    @Bean
 	    @ConditionalOnMissingBean
 	    @ConditionalOnProperty(prefix = "spring.boot.admin.notify.hipchat", name = "enabled", matchIfMissing = true)

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfiguration.java
Patch:
@@ -19,9 +19,9 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.client.ClientHttpRequestInterceptor;
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
@@ -39,7 +39,7 @@
  */
 @Configuration
 @EnableConfigurationProperties({ AdminProperties.class, AdminClientProperties.class })
-@ConditionalOnProperty("spring.boot.admin.url")
+@Conditional(SpringBootAdminClientEnabledCondition.class)
 public class SpringBootAdminClientAutoConfiguration {
 
 	@Autowired

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/AdminClientProperties.java
Patch:
@@ -94,7 +94,8 @@ public String getManagementUrl() {
 
 		if ((managementPort == null || managementPort.equals(serverPort))
 				&& getServiceUrl() != null) {
-			return append(getServiceUrl(), management.getContextPath());
+			return append(append(getServiceUrl(), server.getServletPrefix()),
+					management.getContextPath());
 		}
 
 		if (ready && managementPort == null) {

File: spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminApplication.java
Patch:
@@ -36,8 +36,8 @@ public Config hazelcastConfig() {
 		return new Config().setProperty("hazelcast.jmx", "true")
 				.addMapConfig(new MapConfig("spring-boot-admin-application-store").setBackupCount(1)
 						.setEvictionPolicy(EvictionPolicy.NONE))
-				.addListConfig(new ListConfig("spring-boot-admin-application-store")
-						.setBackupCount(1).setMaxSize(1000));
+				.addListConfig(new ListConfig("spring-boot-admin-event-store").setBackupCount(1)
+						.setMaxSize(1000));
 	}
 
 	public static void main(String[] args) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/controller/RegistryController.java
Patch:
@@ -69,7 +69,7 @@ public ResponseEntity<Application> register(@RequestBody Application app) {
 	@RequestMapping(method = RequestMethod.GET)
 	public Collection<Application> applications(
 			@RequestParam(value = "name", required = false) String name) {
-		LOGGER.debug("Deliver registered applications with name= {}", name);
+		LOGGER.debug("Deliver registered applications with name={}", name);
 		if (name == null || name.isEmpty()) {
 			return registry.getApplications();
 		} else {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/StatusUpdater.java
Patch:
@@ -45,7 +45,7 @@ public class StatusUpdater implements ApplicationEventPublisherAware {
 	/**
 	 * Lifetime of status in ms. The status won't be updated as long the last status isn't expired.
 	 */
-	private long statusLifetime = 30_000L;
+	private long statusLifetime = 10_000L;
 
 	public StatusUpdater(RestTemplate restTemplate, ApplicationStore store) {
 		this.restTemplate = restTemplate;

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/MailNotifier.java
Patch:
@@ -120,11 +120,11 @@ public void setSender(JavaMailSender sender) {
 	}
 
 	public void setTo(String[] to) {
-		this.to = to;
+		this.to = Arrays.copyOf(to, to.length);
 	}
 
 	public void setCc(String[] cc) {
-		this.cc = cc;
+		this.cc = Arrays.copyOf(cc, cc.length);
 	}
 
 	public void setFrom(String from) {

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/config/AdminServerWebConfigurationTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.junit.After;
 import org.junit.Test;
 import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;
+import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;
 import org.springframework.boot.test.EnvironmentTestUtils;
 import org.springframework.cloud.client.discovery.noop.NoopDiscoveryClientAutoConfiguration;
@@ -97,6 +98,7 @@ private void load(String... environment) {
 		applicationContext.register(PropertyPlaceholderAutoConfiguration.class);
 		applicationContext.register(ServerPropertiesAutoConfiguration.class);
 		applicationContext.register(NoopDiscoveryClientAutoConfiguration.class);
+		applicationContext.register(MailSenderAutoConfiguration.class);
 		applicationContext.register(AdminServerWebConfiguration.class);
 
 		EnvironmentTestUtils.addEnvironment(applicationContext, environment);

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/registry/StatusUpdaterTest.java
Patch:
@@ -84,7 +84,7 @@ public void test_update_noBody() {
 
 		// HTTP != 200 - DOWN
 		when(template.getForEntity("health", Map.class)).thenReturn(
-				ResponseEntity.status(500).<Map> body(null));
+				ResponseEntity.status(503).<Map> body(null));
 
 		updater.updateStatus(Application.create("foo").withId("id")
 				.withHealthUrl("health").build());

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/AdminServerWebConfiguration.java
Patch:
@@ -48,7 +48,9 @@
 import de.codecentric.boot.admin.registry.store.ApplicationStore;
 
 @Configuration
-@Import({RevereseZuulProxyConfiguration.class, HazelcastStoreConfiguration.class, SimpleStoreConfig.class, DiscoveryClientConfiguration.class})
+@Import({ RevereseZuulProxyConfiguration.class, MailNotifierConfiguration.class,
+		HazelcastStoreConfiguration.class, SimpleStoreConfig.class,
+		DiscoveryClientConfiguration.class })
 public class AdminServerWebConfiguration extends WebMvcConfigurerAdapter implements ApplicationContextAware {
 
 

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/HazelcastStoreConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 import com.hazelcast.core.MapEvent;
 
 import de.codecentric.boot.admin.event.ClientApplicationRegisteredEvent;
-import de.codecentric.boot.admin.event.ClientApplicationUnregisteredEvent;
+import de.codecentric.boot.admin.event.ClientApplicationDeregisteredEvent;
 import de.codecentric.boot.admin.model.Application;
 import de.codecentric.boot.admin.registry.store.ApplicationStore;
 import de.codecentric.boot.admin.registry.store.HazelcastApplicationStore;
@@ -83,7 +83,7 @@ public void entryAdded(EntryEvent<String, Application> event) {
 
 		@Override
 		public void entryRemoved(EntryEvent<String, Application> event) {
-			publisher.publishEvent(new ClientApplicationUnregisteredEvent(this,event.getValue()));
+			publisher.publishEvent(new ClientApplicationDeregisteredEvent(this,event.getValue()));
 		}
 
 		@Override

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/controller/RegistryController.java
Patch:
@@ -102,7 +102,7 @@ public ResponseEntity<Application> get(@PathVariable String id) {
 	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
 	public ResponseEntity<Application> unregister(@PathVariable String id) {
 		LOGGER.debug("Unregister application with ID '{}'", id);
-		Application app = registry.unregister(id);
+		Application app = registry.deregister(id);
 		if (app != null) {
 			return new ResponseEntity<Application>(app, HttpStatus.NO_CONTENT);
 		} else {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/discovery/ApplicationDiscoveryListener.java
Patch:
@@ -86,7 +86,9 @@ private Application convert(ServiceInstance instance) {
 		String managementUrl = append(instance.getUri().toString(), managementContextPath);
 		String healthUrl = append(managementUrl, healthEndpoint);
 
-		return new Application(healthUrl, managementUrl, serviceUrl, instance.getServiceId());
+		return Application.create(instance.getServiceId())
+				.withHealthUrl(healthUrl).withManagementUrl(managementUrl)
+				.withServiceUrl(serviceUrl).build();
 	}
 
 	public void setManagementContextPath(String managementContextPath) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/event/ClientApplicationDeregisteredEvent.java
Patch:
@@ -21,8 +21,8 @@
  * This event gets emitted when an application is unregistered.
  * @author Johannes Stelzer
  */
-public class ClientApplicationUnregisteredEvent extends ClientApplicationEvent {
-	public ClientApplicationUnregisteredEvent(Object source, Application application) {
+public class ClientApplicationDeregisteredEvent extends ClientApplicationEvent {
+	public ClientApplicationDeregisteredEvent(Object source, Application application) {
 		super(source, application);
 	}
 

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/config/AdminServerWebConfigurationTest.java
Patch:
@@ -11,6 +11,7 @@
 
 import org.junit.After;
 import org.junit.Test;
+import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;
 import org.springframework.boot.test.EnvironmentTestUtils;
 import org.springframework.cloud.client.discovery.noop.NoopDiscoveryClientAutoConfiguration;
@@ -82,6 +83,7 @@ public void discoveryConfig() {
 
 	private void load(String... environment) {
 		AnnotationConfigWebApplicationContext applicationContext = new AnnotationConfigWebApplicationContext();
+		applicationContext.register(PropertyPlaceholderAutoConfiguration.class);
 		applicationContext.register(ServerPropertiesAutoConfiguration.class);
 		applicationContext.register(NoopDiscoveryClientAutoConfiguration.class);
 		applicationContext.register(AdminServerWebConfiguration.class);

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/store/ApplicationStore.java
Patch:
@@ -25,7 +25,7 @@
 public interface ApplicationStore {
 
 	/**
-	 * Inserts a new Application into the store. If the Id is already present in the store the Application is NOT stored.
+	 * Inserts a new Application into the store. If the Id is already present in the store the old Application is replaced.
 	 * 
 	 * @param app Application to store
 	 * @return the Application associated previosly with the applications id.

File: spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/services/ApplicationRegistrator.java
Patch:
@@ -68,10 +68,11 @@ private static HttpHeaders createHttpHeaders() {
 	 * @return true if successful
 	 */
 	public boolean register() {
-		Application self = createApplication();
+		Application self = null;
 		String adminUrl = admin.getUrl() + '/' + admin.getContextPath();
-
 		try {
+			self = createApplication();
+
 			ResponseEntity<Application> response = template.postForEntity(adminUrl,
 					new HttpEntity<Application>(self, HTTP_HEADERS), Application.class);
 

File: spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfigurationTest.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.junit.After;
 import org.junit.Test;
+import org.springframework.boot.actuate.autoconfigure.ManagementServerPropertiesAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;
 import org.springframework.boot.test.EnvironmentTestUtils;
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
@@ -53,6 +54,7 @@ public void active_logfile_supressed() {
 	private void load(String... environment) {
 		AnnotationConfigWebApplicationContext applicationContext = new AnnotationConfigWebApplicationContext();
 		applicationContext.register(ServerPropertiesAutoConfiguration.class);
+		applicationContext.register(ManagementServerPropertiesAutoConfiguration.class);
 		applicationContext.register(SpringBootAdminClientAutoConfiguration.class);
 		EnvironmentTestUtils.addEnvironment(applicationContext, environment);
 		applicationContext.refresh();

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/EnableAdminServer.java
Patch:
@@ -30,7 +30,7 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import(WebappConfig.class)
+@Import(AdminServerWebConfiguration.class)
 public @interface EnableAdminServer {
 
 }

File: spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/AdminApplicationHazelcastTest.java
Patch:
@@ -63,9 +63,9 @@ public static class TestAdminApplication {
 	public void setup() throws InterruptedException {
 		System.setProperty("hazelcast.wait.seconds.before.join", "0");
 		instance1 = (EmbeddedWebApplicationContext) SpringApplication.run(TestAdminApplication.class, new String[] {
-			"--server.port=0", "--spring.jmx.enabled=false", "--spring.boot.admin.hazelcast.enable=true" });
+				"--server.port=0", "--spring.jmx.enabled=false", "--spring.boot.admin.hazelcast.enabled=true" });
 		instance2 = (EmbeddedWebApplicationContext) SpringApplication.run(TestAdminApplication.class, new String[] {
-			"--server.port=0", "--spring.jmx.enabled=false", "--spring.boot.admin.hazelcast.enable=true" });
+				"--server.port=0", "--spring.jmx.enabled=false", "--spring.boot.admin.hazelcast.enabled=true" });
 	}
 
 	@After

File: spring-boot-starter-admin-client/src/main/java/de/codecentric/boot/admin/actuate/LogfileMvcEndpoint.java
Patch:
@@ -109,12 +109,12 @@ public void invoke(HttpServletResponse response) throws IOException {
 
 	@RequestMapping(method = RequestMethod.HEAD)
 	@ResponseBody
-	public ResponseEntity<Void> available() {
+	public ResponseEntity<Object> available() {
 		if (isAvailable()) {
-			return new ResponseEntity<Void>(HttpStatus.OK);
+			return new ResponseEntity<Object>(HttpStatus.OK);
 		}
 		else {
-			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
+			return new ResponseEntity<Object>(HttpStatus.NOT_FOUND);
 		}
 	}
 

File: spring-boot-starter-admin-client/src/main/java/de/codecentric/boot/admin/services/SpringBootAdminRegistrator.java
Patch:
@@ -57,7 +57,7 @@ public boolean register() {
 			ResponseEntity<Application> response = template.postForEntity(adminUrl, app, Application.class);
 
 			if (response.getStatusCode().equals(HttpStatus.CREATED)) {
-				LOGGER.info("Application registered itself as {}", response.getBody());
+				LOGGER.debug("Application registered itself as {}", response.getBody());
 				return true;
 			}
 			else if (response.getStatusCode().equals(HttpStatus.CONFLICT)) {

File: spring-boot-starter-admin-client/src/main/java/de/codecentric/boot/admin/controller/LogfileController.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.core.env.Environment;
 import org.springframework.core.io.FileSystemResource;
 import org.springframework.core.io.Resource;
+import org.springframework.http.MediaType;
 import org.springframework.stereotype.Controller;
 import org.springframework.util.FileCopyUtils;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -55,8 +56,9 @@ public String getLogfile(HttpServletResponse response) {
 			LOGGER.error("Logfile download failed for missing file at path=" + path);
 			return "Logfile download failed for missing file at path=" + path;
 		}
-		response.setContentType("application/octet-stream");
+		response.setContentType(MediaType.TEXT_PLAIN_VALUE);
 		response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getFilename() + "\"");
+
 		try {
 			FileCopyUtils.copy(file.getInputStream(), response.getOutputStream());
 		} catch (IOException e) {

File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/service/ApplicationRegistry.java
Patch:
@@ -16,13 +16,13 @@
 package de.codecentric.boot.admin.service;
 
 import java.net.MalformedURLException;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
 import org.apache.commons.lang3.Validate;
-import org.apache.tomcat.util.net.URL;
 import org.springframework.stereotype.Service;
 
 import de.codecentric.boot.admin.model.Application;

