File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -223,6 +223,7 @@ public enum Kind {
     SUPER_METHOD_REFERENCE,
     SUPER_FIELD_ACCESS,
     SWITCH_CASE,
+    SWITCH_EXPRESSION,
     SWITCH_STATEMENT,
     SYNCHRONIZED_STATEMENT,
     TAG_ELEMENT,

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -75,6 +75,7 @@
 import com.google.devtools.j2objc.translate.OuterReferenceResolverTest;
 import com.google.devtools.j2objc.translate.PackageInfoRewriterTest;
 import com.google.devtools.j2objc.translate.PrivateDeclarationResolverTest;
+import com.google.devtools.j2objc.translate.RecordExpanderTest;
 import com.google.devtools.j2objc.translate.ReflectionCodeDetectorTest;
 import com.google.devtools.j2objc.translate.RewriterTest;
 import com.google.devtools.j2objc.translate.SerializationStripperTest;
@@ -175,6 +176,7 @@ public class SmallTests {
         PrimitiveArrayTest.class,
         PrivateDeclarationResolverTest.class,
         ProGuardUsageParserTest.class,
+        RecordExpanderTest.class,
         ReflectionCodeDetectorTest.class,
         RewriterTest.class,
         SerializationStripperTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -211,6 +211,7 @@ public enum Kind {
     PROPERTY_ANNOTATION,
     QUALIFIED_NAME,
     QUALIFIED_TYPE,
+    RECORD_DECLARATION,
     RETURN_STATEMENT,
     SIMPLE_NAME,
     SIMPLE_TYPE,

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -716,6 +716,7 @@ private void printPseudoProperty(MethodDeclaration m) {
   private void printMethodDeclaration(MethodDeclaration m, boolean isCompanionClass) {
     ExecutableElement methodElement = m.getExecutableElement();
     TypeElement typeElement = ElementUtil.getDeclaringClass(methodElement);
+    boolean allowGenerics = !typeUtil.isProtoClass(typeElement.asType());
 
     if (typeElement.getKind().isInterface()) {
       // isCompanion and isStatic must be both false (i.e. this prints a non-static method decl
@@ -735,7 +736,7 @@ private void printMethodDeclaration(MethodDeclaration m, boolean isCompanionClas
     }
 
     // Method declarations allow generics.
-    String methodSignature = getMethodSignature(m, true);
+    String methodSignature = getMethodSignature(m, allowGenerics);
 
     // In order to properly map the method name from the entire signature, we must isolate it from
     // associated type and parameter declarations.  The method name is guaranteed to be between the

File: translator/src/test/java/com/google/devtools/j2objc/J2ObjCTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
-import java.util.logging.Level;
 
 /**
  * Tests for {@link com.google.devtools.j2objc.J2ObjC}.
@@ -287,7 +286,6 @@ public void testSpecifiedAnnotationProcessingBypass() throws Exception {
   // Test for warning if compiling jar with -g.
   public void testJarSourceDebug() throws Exception {
     options.setEmitLineDirectives(true);
-    options.setLogLevel(Level.FINEST);
     J2ObjC.run(Collections.singletonList(jarPath), options);
     assertWarningRegex("source debugging of jar files is not supported: .*");
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ObjectiveCAdapterMethodAnnotation.java
Patch:
@@ -116,7 +116,9 @@ private static class AdapterConfig {
         List<Adaptation> adaptations = new ArrayList<>();
         for (AnnotationValue av : annotationValues) {
           for (Adaptation adaptation : Adaptation.values()) {
-            if (av.toString().equals(adaptation.toString())) {
+            // Match fully qualified and unqualified enum names.
+            if (av.toString().equals(adaptation.toString())
+                || av.toString().endsWith("." + adaptation.toString())) {
               adaptations.add(adaptation);
             }
           }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -40,7 +40,7 @@ public class ObjectiveCHeaderGenerator extends ObjectiveCSourceFileGenerator {
   // The prefix to use for preprocessor variable names. Derived from the path of
   // the generated file. For example if "my/pkg/Foo.h" is being generated the
   // prefix would be "MyPkgFoo".
-  protected final String varPrefix;
+  protected String varPrefix;
 
   /**
    * Generate an Objective-C header file for each type declared in the given {@link GenerationUnit}.
@@ -195,6 +195,7 @@ private void generateKythePragma() {
     println("#endif");
   }
 
+  @SuppressWarnings("ParameterComment")
   private void generateTypeMappings() {
     KytheIndexingMetadata metadata = new KytheIndexingMetadata();
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -483,7 +483,7 @@ public void testInnerClassDeclarationWithOuterReference() throws IOException {
     translation = getTranslatedFile("Example.m");
     assertTranslation(translation, "Example *this$0_;");
   }
-  
+
   public void testEnum() throws IOException {
     String translation = translateSourceFile(
       "public enum Color { RED, WHITE, BLUE }",
@@ -964,7 +964,7 @@ public void testFieldSetterGenerationWithNullMarked() throws IOException {
             "foo/bar/Test.h");
     assertTranslation(translation, "J2OBJC_FIELD_SETTER(FooBarTest, a_, NSString *_Nullable)");
     assertTranslation(translation, "J2OBJC_FIELD_SETTER(FooBarTest, b_, NSString *)");
-    assertTranslation(translation, "J2OBJC_FIELD_SETTER(FooBarTest, c_, id)");
+    assertTranslation(translation, "J2OBJC_FIELD_SETTER(FooBarTest, c_, id _Nullable)");
   }
 
   public void testStaticFieldObject() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/DeadCodeEliminatorTest.java
Patch:
@@ -643,7 +643,7 @@ public void testDeadClass_stringConstants_nullMarked() throws IOException {
     assertTranslation(translation, "FOUNDATION_EXPORT NSString *_Nullable FooBarA_B_FOO;");
 
     translation = getTranslatedFile("foo/bar/A.m");
-    assertTranslation(translation, "NSString *_Nullable FooBarA_B_FOO = @\"foo\";");
+    assertTranslation(translation, "NSString *FooBarA_B_FOO = @\"foo\";");
     assertTranslation(translation, "static NSString *FooBarA_B_BAR = @\"bar\";");
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -111,14 +111,15 @@ protected void generateFileHeader() {
         seenTypes.add(name);
       }
       for (Import imp : type.getHeaderIncludes()) {
-        if (!isLocalType(imp.getTypeName())) {
+        if (!isLocalType(imp.getTypeName()) && !imp.getImportFileName().isEmpty()) {
           includeFiles.add(imp.getImportFileName());
         }
       }
       for (Import imp : type.getHeaderForwardDeclarations()) {
         // Filter out any declarations that are resolved by an include.
         if (!seenTypes.contains(imp.getTypeName())
-            && !includeFiles.contains(imp.getImportFileName())) {
+            && (imp.getImportFileName().isEmpty()
+                || !includeFiles.contains(imp.getImportFileName()))) {
           forwardDeclarations.add(imp);
         }
       }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -125,7 +125,7 @@ private void printImports() {
     includeFiles.add(getGenerationUnit().getOutputPath() + ".h");
     for (GeneratedType generatedType : getOrderedTypes()) {
       for (Import imp : generatedType.getImplementationIncludes()) {
-        if (!isLocalType(imp.getTypeName())) {
+        if (!isLocalType(imp.getTypeName()) && !imp.getImportFileName().isEmpty()) {
           includeFiles.add(imp.getImportFileName());
         }
       }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -121,8 +121,8 @@ protected void printTypeDeclaration(GeneratedType type) {
     Set<Import> forwardDeclarations = Sets.newHashSet(type.getHeaderForwardDeclarations());
 
     for (Import imp : type.getHeaderIncludes()) {
-      // Verify this import isn't declared in this source file.
-      if (isLocalType(imp.getTypeName())) {
+      // Verify this import isn't declared in this source file or has no header.
+      if (isLocalType(imp.getTypeName()) || imp.getImportFileName().isEmpty()) {
         continue;
       }
       newline();

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -315,7 +315,7 @@ protected void printFunctionDeclaration(FunctionDeclaration function) {
       printJniFunctionAndWrapper(function);
     } else {
       String functionBody = generateStatement(function.getBody());
-      println(getFunctionSignature(function, false) + " " + reindent(functionBody));
+      println(getFunctionSignature(function, false, true) + " " + reindent(functionBody));
     }
   }
 
@@ -351,7 +351,7 @@ private void printJniFunctionAndWrapper(FunctionDeclaration function) {
     println(";\n");
 
     // Generate a wrapper function that calls the matching JNI function.
-    print(getFunctionSignature(function, false));
+    print(getFunctionSignature(function, false, true));
     println(" {");
     print("  ");
     TypeMirror returnType = function.getReturnType().getTypeMirror();

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -127,7 +127,7 @@ protected void printFunctionDeclaration(FunctionDeclaration function) {
     if (!Modifier.isNative(function.getModifiers())) {
       print("__attribute__((unused)) static ");
     }
-    print(getFunctionSignature(function, true));
+    print(getFunctionSignature(function, true, true));
     if (function.returnsRetained()) {
       print(" NS_RETURNS_RETAINED");
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/PackageInfoRewriter.java
Patch:
@@ -68,8 +68,8 @@ private void run() {
 
     Annotation swiftAnnotation = TreeUtil.getAnnotation(SwiftName.class, pkg.getAnnotations());
     if (swiftAnnotation != null) {
-      String swiftName =
-          ElementUtil.getAnnotationValue(swiftAnnotation.getAnnotationMirror(), "value").toString();
+      Object swiftName =
+          ElementUtil.getAnnotationValue(swiftAnnotation.getAnnotationMirror(), "value");
       if (swiftName != null) {
         ErrorUtil.warning("@SwiftName(" + swiftName + "): Package provided a Swift name value.");
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslator.java
Patch:
@@ -66,7 +66,7 @@ public boolean visit(MethodDeclaration node) {
     ExecutableElement method = node.getExecutableElement();
 
     // Check if @ObjectiveCName is used but is mismatched with an overridden method.
-    String name = NameTable.getMethodNameFromAnnotation(method);
+    String name = nameTable.getMethodNameFromAnnotation(method);
     if (name != null) {
       String selector = nameTable.selectorForMethodName(method, name);
       String actualSelector = nameTable.getMethodSelector(method);

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -90,7 +90,7 @@ public class Options {
   private String processors = null;
   private boolean disallowInheritedConstructors = true;
   private boolean nullability = false;
-  private boolean swiftEnums = false;
+  private boolean swiftEnums = true;
   private boolean nullMarked = false;
   private TimingLevel timingLevel = TimingLevel.NONE;
   private boolean dumpAST = false;

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeDeclarationGeneratorTest.java
Patch:
@@ -208,6 +208,7 @@ public void testEnumConstantAccessorMethodsAreImplicitlyNonnullWhenNullMarked()
   public void testEnumConstantClassProperties() throws IOException {
     options.setClassProperties(true);
     options.setNullability(true);
+    options.setSwiftEnums(false);
     String source = "enum Test { ONE, TWO, EOF }"; // EOF is a reserved name.
     String translation = translateSourceFile(source, "Test", "Test.h");
     assertTranslation(

File: jre_emul/android/platform/libcore/ojluni/src/test/java/time/test/java/time/format/TestZoneOffsetParser.java
Patch:
@@ -316,7 +316,7 @@ public void test_parse_endStringMatch_EmptyUTC(String pattern, String parse, Zon
     @DataProvider
     public static Object[][] provider_bigOffsets() {
         return new Object[][] {
-            {"+HH", "+59", 59 * 3600},
+            {"+HH", "+19", 19 * 3600},
             {"+HH", "-19", -(19 * 3600)},
 
             {"+HHMM", "+1801", 18 * 3600 + 1 * 60},

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -298,6 +298,8 @@ protected void printMethodDeclaration(MethodDeclaration m) {
       println("J2OBJC_IGNORE_DESIGNATED_BEGIN");
     }
     syncLineNumbers(m);  // avoid doc-comment
+    // Implementations should not contain generics as this allows us to avoid type errors
+    // when translating to ObjC's more limited system of generics.
     print(getMethodSignature(m, false) + " ");
     print(reindent(generateStatement(m.getBody())) + "\n");
     if (isDesignatedInitializer) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -66,7 +66,9 @@ private void generateDeclarationExtension() {
 
   private void printClassExtension() {
     newline();
-    printf("@interface %s ()", typeName);
+    printf("@interface %s", typeName);
+    printInterfaceGenerics();
+    printf(" ()");
     printInstanceVariables();
     Iterable<BodyDeclaration> privateDecls = getInnerDeclarations();
     printDeclarations(privateDecls);

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -74,6 +74,7 @@
 import com.google.devtools.j2objc.translate.PrivateDeclarationResolverTest;
 import com.google.devtools.j2objc.translate.ReflectionCodeDetectorTest;
 import com.google.devtools.j2objc.translate.RewriterTest;
+import com.google.devtools.j2objc.translate.SerializationStripperTest;
 import com.google.devtools.j2objc.translate.StaticVarRewriterTest;
 import com.google.devtools.j2objc.translate.SuperMethodInvocationRewriterTest;
 import com.google.devtools.j2objc.translate.SwitchRewriterTest;
@@ -170,6 +171,7 @@ public class SmallTests {
         ProGuardUsageParserTest.class,
         ReflectionCodeDetectorTest.class,
         RewriterTest.class,
+        SerializationStripperTest.class,
         SignatureGeneratorTest.class,
         StatementGeneratorTest.class,
         StaticVarRewriterTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -724,7 +724,7 @@ private static boolean hasRetentionPolicy(Element e, String policy) {
   }
 
   public static AnnotationMirror getAnnotation(Element element, Class<?> annotationClass) {
-    return getQualifiedNamedAnnotation(element, annotationClass.getName());
+    return getQualifiedNamedAnnotation(element, annotationClass.getCanonicalName());
   }
 
   public static boolean hasAnnotation(Element element, Class<?> annotationClass) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -369,8 +369,7 @@ private void addExtraNativeDecls(EnumDeclaration node) {
     } else {
       outerImpl.append(UnicodeUtils.format(
           "  %s_initialize();\n"
-          // Param is unsigned, so don't need to check lower bound.
-          + "  if (ordinal >= %s) {\n"
+          + "  if (ordinal < 0 || ordinal >= %s) {\n"
           + "    return nil;\n"
           + "  }\n"
           + "  return %s_values_[ordinal];\n"

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -375,7 +375,7 @@ private String createAnnotationsFunction(BodyDeclaration decl) {
     }
 
     /**
-     * Generate a function that returns the 2-dimentional array of annotations for method
+     * Generate a function that returns the 2-dimensional array of annotations for method
      * parameters.
      */
     private String createParamAnnotationsFunction(MethodDeclaration method) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeDeclarationGeneratorTest.java
Patch:
@@ -624,7 +624,7 @@ public void testNullableTypeAnnotation() throws IOException {
   }
 
   /*
-   * Temporarily, Guava is annoting usages of type variable's like `E next()` with a
+   * Temporarily, Guava is annotating usages of type variable's like `E next()` with a
    * `@ParametricNullness` annotation. This annotation means "the value may be null for an
    * `Iterator<@Nullable Foo>` but not for an `Iterator<@Nonnull Foo>`." For our purposes, that
    * means "It might be null."

File: examples/protobuf/ListPeople.java
Patch:
@@ -27,6 +27,8 @@ static void Print(AddressBook addressBook) {
           case WORK:
             System.out.print("  Work phone #: ");
             break;
+          default:
+            System.out.println("   Unknown phone number type: " + phoneNumber.getType());
         }
         System.out.println(phoneNumber.getNumber());
       }

File: jre_emul/android/platform/libcore/json/src/main/java/org/json/JSONObject.java
Patch:
@@ -117,13 +117,13 @@ public class JSONObject {
     };
 
     @UnsupportedAppUsage
-    private final LinkedHashMap<@NonNull String, Object> nameValuePairs;
+    private final LinkedHashMap<@NonNull String, @Nullable Object> nameValuePairs;
 
     /**
      * Creates a {@code JSONObject} with no name/value mappings.
      */
     public JSONObject() {
-        nameValuePairs = new LinkedHashMap<String, Object>();
+        nameValuePairs = new LinkedHashMap<@NonNull String, @Nullable Object>();
     }
 
     /**
@@ -689,7 +689,7 @@ public long optLong(@Nullable String name, long fallback) {
     @Nullable public JSONArray names() {
         return nameValuePairs.isEmpty()
                 ? null
-                : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));
+                : new JSONArray(new ArrayList<@Nullable String>(nameValuePairs.keySet()));
     }
 
     /**

File: jre_emul/android/platform/libcore/json/src/main/java/org/json/JSONStringer.java
Patch:
@@ -114,7 +114,8 @@ enum Scope {
      * levels of nesting.
      */
     @UnsupportedAppUsage
-    private final List<Scope> stack = new ArrayList<Scope>();
+    private final List<@Nullable Scope> stack =
+        new ArrayList<@Nullable Scope>();
 
     /**
      * A string containing a full set of spaces for a single level of

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -999,9 +999,9 @@ private static void checkNewProxyPermission(Class<?> caller, Class<?> proxyClass
      *          {@code false} otherwise
      * @throws  NullPointerException if {@code cl} is {@code null}
      */
-    public static boolean isProxyClass(Class<?> cl) {
-        return Proxy.class.isAssignableFrom(cl) && proxyClassCache.containsValue(cl);
-    }
+    public static native boolean isProxyClass(Class<?> cl) /*-[
+      return [nil_chk(cl) isKindOfClass:[IOSProxyClass class]];
+    ]-*/;
 
     /**
      * Returns the invocation handler for the specified proxy instance.

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/TreeShaker.java
Patch:
@@ -298,8 +298,9 @@ public static void main(String[] args) {
       shaker.testFileExistence();
       exitOnErrorsOrWarnings(treatWarningsAsErrors);
       CodeReferenceMap unusedCode = shaker.findUnusedCode();
-      exitOnErrorsOrWarnings(treatWarningsAsErrors);
-      writeToFile(options, unusedCode);
+      if (unusedCode != null) {
+        writeToFile(options, unusedCode);
+      }
     } catch (IOException e) {
       ErrorUtil.error(e.getMessage());
     }

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -614,7 +614,8 @@ private String getObjcTypeInner(
       objcType = type.toString();
     } else if (TypeUtil.isDeclaredType(type)
         && asObjCGenericDecl
-        && !((DeclaredType) type).getTypeArguments().isEmpty()) {
+        && !((DeclaredType) type).getTypeArguments().isEmpty()
+        && !TypeUtil.isInterface(type)) {
       final String finalQualifiers = qualifiers;
       objcType =
           String.format(

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/TreeShaker.java
Patch:
@@ -297,7 +297,9 @@ public static void main(String[] args) {
       TreeShaker shaker = new TreeShaker(options);
       shaker.testFileExistence();
       exitOnErrorsOrWarnings(treatWarningsAsErrors);
-      writeToFile(options, shaker.findUnusedCode());
+      CodeReferenceMap unusedCode = shaker.findUnusedCode();
+      exitOnErrorsOrWarnings(treatWarningsAsErrors);
+      writeToFile(options, unusedCode);
     } catch (IOException e) {
       ErrorUtil.error(e.getMessage());
     }

File: jre_emul/android/platform/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/javax/xml/parsers/SAXParserTestSupport.java
Patch:
@@ -34,7 +34,7 @@
  * Compares the result of the parser with golden data.
  * Contains the handler classes used to track the output of the parser.
  */
-public class SAXParserTestSupport {
+class SAXParserTestSupport {
 
     public static final char SEPARATOR_ELEMENT = '^';
     public static final char SEPARATOR_STRING = '$';

File: translator/src/test/java/com/google/devtools/j2objc/translate/SwitchRewriterTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
 import com.google.devtools.j2objc.ast.VariableDeclarationStatement;
-
 import java.io.IOException;
 import java.util.List;
 
@@ -85,9 +84,9 @@ public void testMultipleSwitchVariables() throws IOException {
       + "private void log(int i) {}}",
       "A", "A.m");
     int index = translation.indexOf("jint i;");
-    assertTrue(index >= 0 && index < translation.indexOf("switch"));
+    assertTrue(index >= 0 && index < translation.indexOf("switch (n)"));
     index = translation.indexOf("jint j;");
-    assertTrue(index >= 0 && index < translation.indexOf("switch"));
+    assertTrue(index >= 0 && index < translation.indexOf("switch (n)"));
     assertOccurrences(translation, "jint i;", 1);
     assertFalse(translation.contains("jint j = 2;"));
   }

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -446,6 +446,8 @@ public TypeElement getObjcClass(TypeMirror t) {
       return getIosArray(((ArrayType) t).getComponentType());
     } else if (isDeclaredType(t)) {
       return getObjcClass((TypeElement) ((DeclaredType) t).asElement());
+    } else if (t.getKind().isPrimitive()) {
+      return boxedClass((PrimitiveType) t);
     } else if (t.getKind() == TypeKind.UNION) {
       TypeMirror lub = leastUpperBound(((UnionType)t).getAlternatives());
       return getObjcClass(asTypeElement(lub));

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -164,7 +164,7 @@ private void printNativeEnum() {
     // C enum declaration and generate the type declaration.
     if (!constants.isEmpty()) {
       newline();
-      printf("typedef NS_ENUM(NSUInteger, %s) {\n", nativeName);
+      printf("typedef NS_ENUM(jint, %s) {\n", nativeName);
 
       // Print C enum typedef.
       indent();

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -36,7 +36,7 @@ public void testInnerEnumWithPackage() throws IOException {
         + "class MyClass {}", "Example", "mypackage/Example.h");
     assertTranslation(translation, "@interface MypackageExample");
     // enum declaration
-    assertTranslation(translation, "typedef NS_ENUM(NSUInteger, MypackageAbcd_Enum) {");
+    assertTranslation(translation, "typedef NS_ENUM(jint, MypackageAbcd_Enum) {");
     assertTranslation(translation, "@interface MypackageAbcd");
     assertTranslation(translation, "@interface MypackageMyClass");
     assertTranslation(translation, "MypackageMyClass *myclass_;");
@@ -486,7 +486,7 @@ public void testEnum() throws IOException {
       "public enum Color { RED, WHITE, BLUE }",
       "Color", "Color.h");
     assertTranslatedLines(translation,
-        "typedef NS_ENUM(NSUInteger, Color_Enum) {",
+        "typedef NS_ENUM(jint, Color_Enum) {",
         "  Color_Enum_RED = 0,",
         "  Color_Enum_WHITE = 1,",
         "  Color_Enum_BLUE = 2,",
@@ -608,7 +608,7 @@ public void testEnumNaming() throws IOException {
     String translation = translateSourceFile(
         "public enum MyEnum { ONE, TWO, THREE }",
         "MyEnum", "MyEnum.h");
-    assertTranslation(translation, "typedef NS_ENUM(NSUInteger, MyEnum_Enum) {");
+    assertTranslation(translation, "typedef NS_ENUM(jint, MyEnum_Enum) {");
     assertTranslation(translation, "@interface MyEnum : JavaLangEnum");
     assertTranslation(translation, "FOUNDATION_EXPORT MyEnum *MyEnum_values_[];");
     assertTranslation(translation, "inline MyEnum *MyEnum_get_ONE(void);");

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -273,7 +273,7 @@ public void testRenamePackageAnnotationEnum() throws IOException {
     addSourceFile("package foo.bar; public enum Test { FOO, BAR }", "foo/bar/Test.java");
     String translation = translateSourceFile("foo.bar.Test", "foo/bar/Test.h");
     assertTranslatedLines(translation,
-        "typedef NS_ENUM(NSUInteger, FBTest_Enum) {",
+        "typedef NS_ENUM(jint, FBTest_Enum) {",
         "  FBTest_Enum_FOO = 0,",
         "  FBTest_Enum_BAR = 1,",
         "};");

File: jre_emul/Classes/java/lang/System.java
Patch:
@@ -124,7 +124,7 @@ public static native long currentTimeMillis() /*-[
   ]-*/;
 
   public static native int identityHashCode(Object anObject) /*-[
-    return (int) (intptr_t) anObject;
+    return (int)(intptr_t)anObject;
   ]-*/;
 
   public static native void arraycopy(Object src, int srcPos, Object dest, int destPos,

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -44,6 +44,7 @@
 #include "IOSProxyClass.h"
 #include "IOSReflection.h"
 #include "java/lang/IllegalArgumentException.h"
+#include "java/lang/System.h"
 #include "java/lang/reflect/Method.h"
 #include <objc/runtime.h>
 
@@ -872,7 +873,7 @@ public native int hashCode() /*-[
     ]-*/;
 
     native int proxy_hashCode() /*-[
-      return (jint)(intptr_t)self;
+      return JavaLangSystem_identityHashCodeWithId_(self);
     ]-*/;
 
     @Override

File: translator/src/main/java/com/google/devtools/j2objc/javac/JavacParser.java
Patch:
@@ -61,7 +61,7 @@ public class JavacParser extends Parser {
 
   private StandardJavaFileManager fileManager;
 
-  public JavacParser(Options options){
+  public JavacParser(Options options) {
     super(options);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/OptionsTest.java
Patch:
@@ -33,7 +33,9 @@ public void testSourceVersionFlags() throws IOException {
       String javaVersion = System.getProperty("java.specification.version");
       options = new Options();
       options.load(new String[] {});
+    if (SourceVersion.executingOnSupportedVersion()) {
       assertTrue(javaVersion.startsWith(options.getSourceVersion().toString()));
+    }
 
     if (!onJava9OrAbove()) {
       System.setProperty("java.specification.version", "1.8");

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGeneratorTest.java
Patch:
@@ -58,7 +58,8 @@ public void testJsniDelimiters() throws IOException {
     // First test with defaults, to see if warnings are reported.
     assertTrue(options.jsniWarnings());
     String translation = translateSourceFile(source, "Example", "Example.h");
-    assertWarningCount(2);
+    assertWarning("Example.java:1: JSNI comment found");
+    assertWarning("Example.java:-1: JSNI comment found");
 
     // Verify both methods are declared in the header. The OCNI method is
     // implemented in the source. The JSNI implementation wraps an unimplemented
@@ -82,7 +83,7 @@ public void testJsniDelimiters() throws IOException {
     options.setJsniWarnings(false);
     ErrorUtil.reset();
     translation = translateSourceFile(source, "Example", "Example.h");
-    assertWarningCount(0);
+    assertNoWarnings();
 
     // Verify header and source file are not affected.
     assertTranslation(translation, "- (void)test1;");

File: translator/src/test/java/com/google/devtools/j2objc/pipeline/TranslationProcessorTest.java
Patch:
@@ -39,8 +39,8 @@ public void testSingleSourceFileBuildClosure() throws IOException {
 
     String translation = getTranslatedFile("Test.h");
     assertTranslation(translation, "@interface Test");
-    assertErrorCount(0);
-    assertWarningCount(0);
+    assertNoErrors();
+    assertNoWarnings();
   }
 
   public void testDuplicateSourceFileOnSourcepath() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.devtools.j2objc.Options.MemoryManagementOption;
 import com.google.devtools.j2objc.ast.AbstractTypeDeclaration;
 import com.google.devtools.j2objc.ast.CompilationUnit;
-
 import java.io.IOException;
 import java.util.List;
 
@@ -781,8 +780,8 @@ public void testWeakStaticClass() throws IOException {
     String source = "import com.google.j2objc.annotations.WeakOuter; "
         + "public class A { @WeakOuter static class B {}}";
     String translation = translateSourceFile(source, "A", "A.h");
-    assertWarningCount(1);
-    assertErrorCount(0);
+    assertWarning("static class A.B has WeakOuter annotation");
+    assertNoErrors();
     assertNotInTranslation(translation, "__unsafe_unretained");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/VariableRenamerTest.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.translate;
 
 import com.google.devtools.j2objc.GenerationTest;
-
 import java.io.IOException;
 
 /**
@@ -81,6 +80,8 @@ public void testErrorStaticFieldValuesInEnum() throws IOException {
     assertTranslation(translation, "FOUNDATION_EXPORT Example *Example_values_[];");
     // User variable.
     assertTranslation(translation, "FOUNDATION_EXPORT NSString *Example_values_;");
-    assertErrorCount(1);
+    assertError(
+        "\"values\" field in Example collides with the generated Enum values field. "
+            + "Consider using ObjectiveCName to rename it.");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/util/UnicodeUtilsTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.google.devtools.j2objc.util;
 
 import com.google.devtools.j2objc.GenerationTest;
-
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
 
@@ -50,7 +49,7 @@ public void testIllegalUnicodeEscapeSequence() {
       System.setErr(new PrintStream(new ByteArrayOutputStream()));
       String fragment = "abc\udfff";
       String escaped = UnicodeUtils.escapeStringLiteral(fragment);
-      assertErrorCount(1);
+      assertErrorRegex("Illegal .* Unicode character .*");
 
       // Verify the unicode is emitted anyways (it's useful as a diagnostic).
       assertEquals("abc\\udfff", escaped);

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/time/temporal/Temporal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/time/temporal/TemporalField.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -62,7 +62,6 @@
 package java.time.temporal;
 
 import java.time.DateTimeException;
-import java.time.chrono.Chronology;
 import java.time.format.ResolverStyle;
 import java.util.Locale;
 import java.util.Map;

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/time/temporal/TemporalUnit.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/time/temporal/Temporal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/time/temporal/TemporalField.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -62,6 +62,7 @@
 package java.time.temporal;
 
 import java.time.DateTimeException;
+import java.time.chrono.Chronology;
 import java.time.format.ResolverStyle;
 import java.util.Locale;
 import java.util.Map;

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/time/temporal/TemporalUnit.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/UsedCodeMarker.java
Patch:
@@ -444,7 +444,7 @@ private void startType(TypeElement type) {
 
     boolean isExported =
         context.exportedClasses.contains(typeName)
-            || ElementUtil.isGeneratedAnnotation(type)
+            || ElementUtil.isRuntimeAnnotation(type)
             || exportedClassInnerType;
 
     startTypeScope(typeName, superName, interfaces, isExported);

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -609,7 +609,7 @@ private String getObjcTypeInner(
           getObjcTypeInner(
               ((ArrayType) type).getComponentType(), qualifiers, asObjCGenericDecl, true);
       objcType = arrayClass + innerType;
-      objcType += objcType.endsWith("*") ? ">" : " *>";
+      objcType += ((ArrayType) type).getComponentType() instanceof ArrayType ? " *>" : ">";
       objcType += isArrayComponent ? "" : " *";
     } else {
       objcType = constructObjcTypeFromBounds(type);

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -582,6 +582,7 @@ public String getJniType(TypeMirror type) {
   private String getObjcTypeInner(
       TypeMirror type, String qualifiers, boolean asObjCGenericDecl, boolean isArrayComponent) {
     String objcType;
+    type = TypeUtil.unannotatedType(type);
     if (type instanceof NativeType) {
       objcType = ((NativeType) type).getName();
     } else if (type instanceof PointerType) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -292,7 +292,7 @@ protected void printMethodDeclaration(MethodDeclaration m) {
       println("J2OBJC_IGNORE_DESIGNATED_BEGIN");
     }
     syncLineNumbers(m);  // avoid doc-comment
-    print(getMethodSignature(m) + " ");
+    print(getMethodSignature(m, false) + " ");
     print(reindent(generateStatement(m.getBody())) + "\n");
     if (isDesignatedInitializer) {
       println("J2OBJC_IGNORE_DESIGNATED_END");

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.devtools.j2objc.ast.MethodReferenceTest;
 import com.google.devtools.j2objc.gen.ArrayAccessTest;
 import com.google.devtools.j2objc.gen.ArrayCreationTest;
+import com.google.devtools.j2objc.gen.ArrayGenericsTest;
 import com.google.devtools.j2objc.gen.JavadocGeneratorTest;
 import com.google.devtools.j2objc.gen.LineDirectivesTest;
 import com.google.devtools.j2objc.gen.LiteralGeneratorTest;
@@ -95,9 +96,7 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-/**
- * Returns a suite of all small tests in this package.
- */
+/** Returns a suite of all small tests in this package. */
 public class SmallTests {
 
   private static final Class<?>[] smallTestClasses =
@@ -108,6 +107,7 @@ public class SmallTests {
         AnonymousClassConverterTest.class,
         ArrayAccessTest.class,
         ArrayCreationTest.class,
+        ArrayGenericsTest.class,
         ArrayRewriterTest.class,
         AutoboxerTest.class,
         CastResolverTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeUtil.java
Patch:
@@ -309,7 +309,7 @@ public static String getSourceFileName(CompilationUnit unit) {
 
   /**
    * Returns the given statement as a list of statements that can be added to.
-   * If node is a Block, then returns it's statement list. If node is the direct
+   * If node is a Block, then returns its statement list. If node is the direct
    * child of a Block, returns the sublist containing node as the only element.
    * Otherwise, creates a new Block node in the place of node and returns its
    * list of statements.

File: translator/src/main/java/com/google/devtools/j2objc/gen/AbstractSourceGenerator.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This is a base class for all generator types, containing a SourceBuilder and
- * prividing convenient access to it.
+ * providing convenient access to it.
  *
  * @author Tom Ball, Keith Stanger
  */

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -580,7 +580,7 @@ private TreeNode convertBinary(BinaryTree node, TreePath parent) {
     // code traverses the subtree non-recursively and merges all children
     // that have the same operator into this node.
     //
-    // Note: we will not flatten the tree if the same opeartors are EQUAL_TO or NOT_EQUAL_TO.
+    // Note: we will not flatten the tree if the same operators are EQUAL_TO or NOT_EQUAL_TO.
     List<StackState> stack = Lists.newArrayList();
     stack.add(new StackState(node));
     while (!stack.isEmpty()) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -216,7 +216,7 @@ private void addShimWithInvocation(
     }
 
     private void addDefaultMethodShim(String selector, ExecutablePair method) {
-      // The shim's only purpose is to call the default method implementation and returns it value
+      // The shim's only purpose is to call the default method implementation and return its value
       // if required.
       TypeElement declaringClass = ElementUtil.getDeclaringClass(method.element());
       String name = nameTable.getFullFunctionName(method.element());

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -132,7 +132,7 @@ private Scope(Scope next, Kind kind, String label) {
       this.kind = kind;
       this.label = label;
       // When the stack grows, the existing scope is assumed to be terminating
-      // until a decendent branch merges back into it.
+      // until a descendant branch merges back into it.
       if (next != null) {
         next.terminates = true;
       }
@@ -197,7 +197,7 @@ private void mergeDownAndReset() {
       vars.clear();
     }
 
-    // This scope is re-entered from it's parent scope.
+    // This scope is re-entered from its parent scope.
     private void backwardMerge() {
       if (terminates) {
         vars.clear();

File: translator/src/main/java/com/google/devtools/j2objc/translate/NumberMethodRewriter.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Adds hash and isEqual: methods to java.lang.Number subclasses that
  * do not define them. This is necessary because classes that do not
- * define these method expect Object.equals() and Object.hashCode()
+ * define these methods expect Object.equals() and Object.hashCode()
  * behavior; since Number is mapped to NSNumber, though, by default
  * they inherit NSNumber behavior.
  *

File: translator/src/main/java/com/google/devtools/j2objc/translate/OcniExtractor.java
Patch:
@@ -47,7 +47,7 @@
  * Extracts OCNI code blocks into NativeDeclaration and NativeStatement nodes.
  * Adds native fast enumeration support for Iterable types, when not already
  * defined.
- * Adds synchronized blocks to methods with with the synchonized modifier.
+ * Adds synchronized blocks to methods with the synchronized modifier.
  *
  * @author Keith Stanger
  */

File: translator/src/main/java/com/google/devtools/j2objc/translate/SwitchRewriter.java
Patch:
@@ -45,7 +45,7 @@
 import javax.lang.model.type.TypeMirror;
 
 /**
- * Rewrites switch statemennts to be more compatible with Objective-C code.
+ * Rewrites switch statements to be more compatible with Objective-C code.
  *
  * @author Keith Stanger
  */

File: translator/src/main/java/com/google/devtools/j2objc/translate/UnsequencedExpressionRewriter.java
Patch:
@@ -173,7 +173,7 @@ private void extractOrderedAccesses(
       if (topConditional != null) {
         // Conditional expressions require special handling when extracting the
         // access because execution of the access may not be guaranteed.
-        // Here we collect all accesses that are decendant of the conditional
+        // Here we collect all accesses that are descendant of the conditional
         // expression and pass them to an appropriate extraction method.
         int j = i + 1;
         for (; j < toExtract.size(); j++) {

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -316,7 +316,7 @@ public static boolean isPackageInfo(TypeElement type) {
   }
 
   /**
-   * Tests if this type element is private to it's source file. A public type declared
+   * Tests if this type element is private to its source file. A public type declared
    * within a private type is considered private.
    */
   public static boolean isPrivateInnerType(TypeElement type) {

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -249,7 +249,7 @@ public static boolean isAssigned(Expression node) {
   }
 
   /**
-   * Reterns whether the expression might have any side effects. If true, it
+   * Returns whether the expression might have any side effects. If true, it
    * would be unsafe to prune the given node from the tree.
    */
   public static boolean hasSideEffect(Expression expr) {

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -719,7 +719,7 @@ public List<TypeElement> getObjcUpperBounds(TypeMirror t) {
     List<TypeElement> result = new ArrayList<>();
     for (TypeMirror bound : getUpperBounds(t)) {
       TypeElement elem = getObjcClass(bound);
-      // NSObject is emmitted as "id".
+      // NSObject is emitted as "id".
       if (elem != null && !elem.equals(NS_OBJECT)) {
         result.add(elem);
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/OperatorRewriter.java
Patch:
@@ -308,7 +308,9 @@ private void rewriteVolatileLoad(Expression node) {
     VariableElement var = TreeUtil.getVariableElement(node);
     if (var != null && ElementUtil.isVolatile(var) && !TranslationUtil.isAssigned(node)) {
       TypeMirror type = node.getTypeMirror();
-      TypeMirror declaredType = type.getKind().isPrimitive() ? type : TypeUtil.ID_TYPE;
+      TypeMirror declaredType = type.getKind().isPrimitive()
+          ? typeUtil.getPrimitiveType(type.getKind())
+          : TypeUtil.ID_TYPE;
       String funcName = "JreLoadVolatile" + NameTable.capitalize(declaredType.toString());
       FunctionElement element = new FunctionElement(funcName, declaredType, null)
           .addParameters(TypeUtil.ID_PTR_TYPE);

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/TypeGraphBuilder.java
Patch:
@@ -76,6 +76,9 @@ private void buildCrossReferences(LibraryInfo libraryInfo, Map<String, Type> typ
       for (MemberInfo memberInfo : typeInfo.getMemberList()) {
         Member member = type.getMemberByName(memberInfo.getName());
 
+        Type originalType = typesByName.get(libraryInfo.getTypeMap(memberInfo.getOriginalType()));
+        member.setOriginalType(originalType);
+
         for (int referencedId : memberInfo.getReferencedTypesList()) {
           Type referencedType = typesByName.get(libraryInfo.getTypeMap(referencedId));
           if (referencedType == null) {

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/GenerationBatch.java
Patch:
@@ -163,7 +163,7 @@ private void processJarFile(String filename) {
           }
         }
         if (!options.translateClassfiles() && !containsJavaFile) {
-          ErrorUtil.error(filename + " does not contain any Java source files.");
+          ErrorUtil.warning(filename + " does not contain any Java source files.");
         }
       } finally {
         zfile.close();  // Also closes input stream.

File: translator/src/test/java/com/google/devtools/j2objc/J2ObjCTest.java
Patch:
@@ -304,7 +304,7 @@ public void testJarSourceDebug() throws Exception {
   public void testJarNoJava() throws Exception {
     String processorJarPath = getResourceAsFile("annotations/Processor.jar");
     J2ObjC.run(Collections.singletonList(processorJarPath), options);
-    assertErrorCount(1);
+    assertWarningCount(1);
   }
 
   public void testSourcePathTypesIncludedInGlobalCombinedOutput() throws Exception {

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/UsedCodeMarker.java
Patch:
@@ -498,6 +498,7 @@ private void pushClinit() {
 
   private void popClinit() {
     context.memberScope.pop();
+    context.referencedTypesScope.pop();
   }
 
   static final class Context {

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/time/OffsetTime.java
Patch:
@@ -1072,7 +1072,7 @@ public OffsetTime minusNanos(long nanos) {
     public <R> R query(TemporalQuery<R> query) {
         if (query == TemporalQueries.offset() || query == TemporalQueries.zone()) {
             return (R) offset;
-        } else if (query == TemporalQueries.zoneId() | query == TemporalQueries.chronology() || query == TemporalQueries.localDate()) {
+        } else if (query == TemporalQueries.zoneId() || query == TemporalQueries.chronology() || query == TemporalQueries.localDate()) {
             return null;
         } else if (query == TemporalQueries.localTime()) {
             return (R) time;

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -285,7 +285,8 @@ public void setGlobalCombinedOutput(String outputName) {
   /**
    * Set all log handlers in this package with a common level.
    */
-  private void setLogLevel(Level level) {
+  @VisibleForTesting
+  void setLogLevel(Level level) {
     logger.setLevel(level);
     logLevelSet = true;
   }

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/GenerationBatch.java
Patch:
@@ -126,7 +126,7 @@ private void processJarFile(String filename) {
 
     // Warn if source debugging is specified for a jar file, since native debuggers
     // don't support Java-like source paths.
-    if (options.emitLineDirectives()) {
+    if (options.emitLineDirectives() && options.isVerbose()) {
       ErrorUtil.warning("source debugging of jar files is not supported: " + filename);
     }
 

File: translator/src/test/java/com/google/devtools/j2objc/J2ObjCTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.logging.Level;
 
 /**
  * Tests for {@link com.google.devtools.j2objc.J2ObjC}.
@@ -294,6 +295,7 @@ public void testSpecifiedAnnotationProcessingBypass() throws Exception {
   // Test for warning if compiling jar with -g.
   public void testJarSourceDebug() throws Exception {
     options.setEmitLineDirectives(true);
+    options.setLogLevel(Level.FINEST);
     J2ObjC.run(Collections.singletonList(jarPath), options);
     assertWarningCount(1);
   }

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/TypeGraphBuilder.java
Patch:
@@ -53,8 +53,7 @@ Collection<String> getUnknownMethodReferences() {
   private void buildCrossReferences(LibraryInfo libraryInfo, Map<String, Type> typesByName) {
     for (TypeInfo typeInfo : libraryInfo.getTypeList()) {
       Type type = typesByName.get(libraryInfo.getTypeMap(typeInfo.getTypeId()));
-      int extendsId = typeInfo.getExtendsType();
-      String superClassName = libraryInfo.getTypeMap(extendsId);
+      String superClassName = libraryInfo.getTypeMap(typeInfo.getExtendsType());
       Type superClass = typesByName.get(superClassName);
 
       if (superClass == null) {

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/UsedCodeMarker.java
Patch:
@@ -347,6 +347,7 @@ private void startTypeScope(String typeName, String superName,
     // Push the static initializer as the current method in scope.
     startMethodScope(CLASS_INITIALIZER_NAME, MemberInfo.newBuilder()
         .setName(CLASS_INITIALIZER_NAME).setStatic(true).setExported(isExported));
+    addMethodInvocation(CLASS_INITIALIZER_NAME, superName);
   }
 
   private void endTypeScope() {

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/UsedCodeMarker.java
Patch:
@@ -267,11 +267,11 @@ private static String getPseudoConstructorName(String type) {
   }
 
   private static String getImplicitValuesName(String type) {
-    return getMethodName("values",  "()[" + type);
+    return getMethodName("values", "()[" + type);
   }
 
   private static String getImplicitValueOfName(String type) {
-    return getMethodName("valueOf",  "(Ljava/lang/String;)" + type);
+    return getMethodName("valueOf", "(Ljava/lang/String;)" + type);
   }
 
   private static boolean isUntrackedClass(String typeName) {

File: tree_shaker/src/test/java/com/google/devtools/treeshaker/TreeShakerTest.java
Patch:
@@ -681,7 +681,7 @@ public void testLocalTypesBasic() throws IOException {
     addSourceFile("D.java", "package p; class D {}");
     CodeReferenceMap unused = findUnusedCode();
 
-    assertThat(getUnusedClasses(unused)).containsExactly("p.D", "p.B$1C");
+    assertThat(getUnusedClasses(unused)).containsExactly("C", "p.D", "p.B$1C");
     assertThat(getUnusedMethods(unused)).containsExactly(
         getMethodName("p.A", "A", "()V"),
         getMethodName("p.B", "b", "()V"));

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/time/format/DateTimeFormatterBuilder.java
Patch:
@@ -1986,9 +1986,11 @@ public DateTimeFormatterBuilder optionalEnd() {
         }
         if (active.printerParsers.size() > 0) {
             CompositePrinterParser cpp = new CompositePrinterParser(active.printerParsers, active.optional);
+            active.active = null; // j2objc: avoid retention cycle
             active = active.parent;
             appendInternal(cpp);
         } else {
+            active.active = null; // j2objc: avoid retention cycle
             active = active.parent;
         }
         return this;
@@ -2078,6 +2080,7 @@ DateTimeFormatter toFormatter(ResolverStyle resolverStyle, Chronology chrono) {
     private DateTimeFormatter toFormatter(Locale locale, ResolverStyle resolverStyle, Chronology chrono) {
         Objects.requireNonNull(locale, "locale");
         while (active.parent != null) {
+            active.active = null; // j2objc: avoid retention cycle
             optionalEnd();
         }
         CompositePrinterParser pp = new CompositePrinterParser(printerParsers, false);

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -932,7 +932,7 @@ private static native Class<?> generateProxy(String name, Class<?>[] interfaces,
         if (method) {
           NSString *originalName = strcmp(selName, "proxy_equalsWithId:") == 0
               ? @"equals" : [NSString stringWithUTF8String:(selName + 6)];
-          return [[ProxyMethod alloc] initWithMethod:method originalName:originalName];
+          return AUTORELEASE([[ProxyMethod alloc] initWithMethod:method originalName:originalName]);
         }
       }
       return nil;

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -872,7 +872,10 @@ public native int hashCode() /*-[
     ]-*/;
 
     native int proxy_hashCode() /*-[
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
       return (jint)self;
+#pragma clang diagnostic pop
     ]-*/;
 
     @Override

File: tree_shaker/src/test/java/com/google/devtools/treeshaker/TreeShakerTest.java
Patch:
@@ -719,6 +719,7 @@ public void testEraseParametricTypes() throws IOException {
     assertThat(UsedCodeMarker.eraseParametricTypes("C")).isEqualTo("C");
     assertThat(UsedCodeMarker.eraseParametricTypes("C<D>")).isEqualTo("C");
     assertThat(UsedCodeMarker.eraseParametricTypes("C<D<A>>")).isEqualTo("C");
+    assertThat(UsedCodeMarker.eraseParametricTypes("C<D<A>,D<B>>")).isEqualTo("C");
     assertThat(UsedCodeMarker.eraseParametricTypes("C<A>.D<A>")).isEqualTo("C.D");
   }
 

File: protobuf/tests/CompatibilityTest.java
Patch:
@@ -373,8 +373,7 @@ public void write(int b) throws IOException {
     }
   }
 
-  // TODO(b/186736574): Re-enable this test when we can.
-  public void disabled_testMergeFromInvalidProtocolBufferException() throws Exception {
+  public void testMergeFromInvalidProtocolBufferException() throws Exception {
     try {
       ByteArrayInputStream in = new ByteArrayInputStream(new byte[]{ 0x00 });
       @SuppressWarnings("unused")

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -88,7 +88,7 @@ public final class ElementUtil {
 
   private static final String LAZY_INIT = "com.google.errorprone.annotations.concurrent.LazyInit";
 
-  private static final Pattern NULLABLE_PATTERN = Pattern.compile("Nullable.*");
+  private static final Pattern NULLABLE_PATTERN = Pattern.compile("Nullable.*|CheckForNull");
   private static final Pattern NONNULL_PATTERN = Pattern.compile("No[nt][Nn]ull.*");
 
   private final Elements javacElements;

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/TypeGraphBuilder.java
Patch:
@@ -47,7 +47,7 @@ Collection<Type> getTypes() {
     for (LibraryInfo libraryInfo : libraryInfos) {
       buildCrossReferences(libraryInfo);
     }
-    logger.atInfo().log("External Types: %s", String.join(", ", externalTypeReferences));
+    logger.atFine().log("External Types: %s", String.join(", ", externalTypeReferences));
     return typesByName.values();
   }
 

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/UsedCodeMarker.java
Patch:
@@ -110,7 +110,7 @@ public void endVisit(FieldAccess node) {
     if (node.getVariableElement().getModifiers().contains(STATIC)) {
       context.addMethodInvocation(
           CLASS_INITIALIZER_NAME,
-          node.getTypeMirror().toString());
+          node.getExpression().getTypeMirror().toString());
     }
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -415,7 +415,8 @@ public void testAnonymousClassInInnerStatic() throws IOException {
         + "public T nextElement() { return it.next(); } }; }}",
         "Test", "Test.m");
     assertTranslation(translation, "return [((id<JavaUtilIterator>) nil_chk(it_)) hasNext];");
-    assertTranslation(translation, "return [((id<JavaUtilIterator>) nil_chk(it_)) next];");
+    assertTranslation(translation,
+        "return JreRetainedLocalValue([((id<JavaUtilIterator>) nil_chk(it_)) next]);");
     assertFalse(translation.contains("Test *this$0;"));
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/EnhancedForRewriterTest.java
Patch:
@@ -51,7 +51,7 @@ public void testEnhancedForLoopAnnotation() throws IOException {
           "{",
             "id<JavaUtilIterator> iter__ = [((id<JavaLangIterable>) nil_chk(strings)) iterator];",
             "while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {",
-              "NSString *s = [iter__ next];",
+              "NSString *s = JreRetainedLocalValue([iter__ next]);",
             "}",
           "}",
           "for (NSString * __strong s in strings) {",
@@ -90,7 +90,7 @@ public void testLabeledEnhancedForLoop() throws IOException {
         "  id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(list)) iterator];",
         "  while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {",
         "    {",
-        "      id o = [iter__ next];",
+        "      id o = JreRetainedLocalValue([iter__ next]);",
         "      if (b) {",
         "        goto break_testLabel2;",
         "      }",

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/RapidTypeAnalyser.java
Patch:
@@ -22,7 +22,7 @@
 final class RapidTypeAnalyser {
 
   static CodeReferenceMap analyse(List<LibraryInfo> libraryInfos) {
-    Collection<Type> types = TypeGraphBuilder.build(libraryInfos);
+    Collection<Type> types = new TypeGraphBuilder(libraryInfos).getTypes();
 
     types.stream().filter(Type::isExported).forEach(RapidTypeAnalyser::markTypeLive);
 

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/RapidTypeAnalyser.java
Patch:
@@ -24,12 +24,12 @@ final class RapidTypeAnalyser {
   static CodeReferenceMap analyse(List<LibraryInfo> libraryInfos) {
     Collection<Type> types = TypeGraphBuilder.build(libraryInfos);
 
-    types.stream().filter(Type::isJsTypeInterface).forEach(RapidTypeAnalyser::markTypeLive);
+    types.stream().filter(Type::isExported).forEach(RapidTypeAnalyser::markTypeLive);
 
     // Go over the entry points to start the traversal.
     types.stream()
         .flatMap(t -> t.getMembers().stream())
-        .filter(Member::isJsAccessible)
+        .filter(Member::isExported)
         .forEach(m -> onMemberReference(m));
 
     CodeReferenceMap.Builder crmBuilder = CodeReferenceMap.builder();

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/UsedCodeMarker.java
Patch:
@@ -211,10 +211,10 @@ private void startType(String typeName, String extendsTypeName) {
       currentTypeNameScope.push(typeName);
       // Push the new type info builder on top of the stack.
       currentTypeInfoScope.push(TypeInfo.newBuilder()
-          .setTypeId(id).setExtendsType(eid).setJstypeInterface(isExported));
+          .setTypeId(id).setExtendsType(eid).setExported(isExported));
       // Push the static initializer as the current method in scope.
       pushMethodScope(CLASS_INITIALIZER_NAME, MemberInfo.newBuilder()
-          .setName(CLASS_INITIALIZER_NAME).setStatic(true).setJsAccessible(isExported));
+          .setName(CLASS_INITIALIZER_NAME).setStatic(true).setExported(isExported));
     }
 
     private void endType() {
@@ -254,7 +254,7 @@ private void startMethodDeclaration(
           .setName(methodName)
           .setStatic(isStatic)
           .setConstructor(isConstructor)
-          .setJsAccessible(isExported));
+          .setExported(isExported));
     }
 
     private void addMethodInvocation(String methodName, String declTypeName) {

File: tree_shaker/src/main/java/com/google/devtools/treeshaker/Member.java
Patch:
@@ -22,7 +22,7 @@ static Member buildFrom(MemberInfo memberInfo, Type declaringType) {
     member.memberInfo = memberInfo;
     member.declaringType = declaringType;
     member.isStatic = memberInfo.getStatic();
-    member.isConstructor = memberInfo.getName().equals("constructor");
+    member.isConstructor = memberInfo.getConstructor();
     return member;
   }
 

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/text/DecimalFormatTest.java
Patch:
@@ -353,6 +353,9 @@ private String formatArbitraryCurrencyAmountInLocale(Currency currency, Locale l
 
     // j2objc: returns true if test is running on a MacOS Catalina or later operating system.
     protected boolean onCatalinaOrAbove() {
+        if (!"Mac OS X".equals(System.getProperty("os.name"))) {
+            return false;
+        }
         String[] versionFields = System.getProperty("os.version").split("\\.", -1);
         // MacOS Catalina is version 10.15.*.
         return

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.devtools.j2objc.gen.PrimitiveArrayTest;
 import com.google.devtools.j2objc.gen.SignatureGeneratorTest;
 import com.google.devtools.j2objc.gen.StatementGeneratorTest;
+import com.google.devtools.j2objc.gen.TypeDeclarationGeneratorTest;
 import com.google.devtools.j2objc.gen.TypeImplementationGeneratorTest;
 import com.google.devtools.j2objc.javac.ClassFileConverterTest;
 import com.google.devtools.j2objc.javac.JavacParserTest;
@@ -170,6 +171,7 @@ public class SmallTests {
         StaticVarRewriterTest.class,
         SuperMethodInvocationRewriterTest.class,
         SwitchRewriterTest.class,
+        TypeDeclarationGeneratorTest.class,
         TypeImplementationGeneratorTest.class,
         TypeUseAnnotationTest.class,
         TranslationProcessorTest.class,

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/util/Locale.java
Patch:
@@ -533,7 +533,7 @@
  *     <td><a href="http://www.unicode.org/versions/Unicode11.0.0/">Unicode 11.0</a></td></tr>
  * </table>
  *
- * <a name="default_locale"></a><h4>Be wary of the default locale</h3>
+ * <a name="default_locale"></a><h4>Be wary of the default locale</h4>
  * <p>Note that there are many convenience methods that automatically use the default locale, but
  * using them may lead to subtle bugs.
  *

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -689,7 +689,7 @@ public void testPropertiesOfTypeWeakOuter() throws IOException {
         + "}";
     String translation = translateSourceFile(sourceContent, "FooBar", "FooBar.m");
     assertTranslatedLines(translation,
-        "__unsafe_unretained FooBar_Internal *fieldBar_;",
+        "WEAK_ FooBar_Internal *fieldBar_;",
         "FooBar_Internal *fieldFoo_;");
   }
 
@@ -769,9 +769,9 @@ public void testCustomWeakAnnotations() throws IOException {
         + " void foo() {}"
         + " @WeakOuter public class Inner { void bar() { foo(); } }"
         + " @Weak public Object obj; }", "Test", "Test.h");
-    assertTranslation(translation, "__unsafe_unretained id obj_;");
+    assertTranslation(translation, "WEAK_ id obj_;");
     translation = getTranslatedFile("Test.m");
-    assertTranslation(translation, "__unsafe_unretained Test *this$0_;");
+    assertTranslation(translation, "WEAK_ Test *this$0_;");
   }
 
   public void testReservedWordAsAnnotationPropertyName() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -263,7 +263,7 @@ public void testClassField() throws IOException {
     assertTranslation(translation, "id fieldJar_;");
     assertTranslation(translation, "int newFieldBar_;");
     assertTranslation(translation, "id fieldFoo_;");
-    assertTranslation(translation, "__unsafe_unretained id fieldJar_;");
+    assertTranslation(translation, "WEAK_ id fieldJar_;");
     assertTranslation(translation, "int newFieldBar_;");
     assertTranslation(translation, "J2OBJC_STATIC_FIELD_PRIMITIVE(FooBar, fieldPhi, jint)");
   }

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeDeclarationGeneratorTest.java
Patch:
@@ -295,15 +295,15 @@ public void testPropertyWeakAssignment() throws IOException {
         + "}";
     String translation = translateSourceFile(source, "Foo", "Foo.h");
     // Add __weak instance variable
-    assertTranslation(translation, "__unsafe_unretained Foo *barA_;");
+    assertTranslation(translation, "WEAK_ Foo *barA_;");
     assertTranslation(translation, "@property (weak) Foo *barA;");
     assertNotInTranslation(translation, "J2OBJC_FIELD_SETTER(Foo, barA_, Foo *)");
     // Add weak property attribute
-    assertTranslation(translation, "__unsafe_unretained Foo *barB_;");
+    assertTranslation(translation, "WEAK_ Foo *barB_;");
     assertTranslation(translation, "@property (weak, readonly) Foo *barB;");
     assertNotInTranslation(translation, "J2OBJC_FIELD_SETTER(Foo, barB_, Foo *)");
     // Works with both
-    assertTranslation(translation, "__unsafe_unretained Foo *barC_;");
+    assertTranslation(translation, "WEAK_ Foo *barC_;");
     assertTranslation(translation, "@property (weak, readonly) Foo *barC;");
     assertNotInTranslation(translation, "J2OBJC_FIELD_SETTER(Foo, barC_, Foo *)");
   }

File: translator/src/test/java/com/google/devtools/j2objc/translate/ExternalAnnotationInjectorTest.java
Patch:
@@ -341,7 +341,7 @@ public void testWeakOuter() throws IOException {
             + "package p: "
             + "class A$B: @WeakOuter");
     String translation = translateSourceFile(source, "p.A", "p/A.m");
-    assertTranslation(translation, "__unsafe_unretained PA *this$0_;");
+    assertTranslation(translation, "WEAK_ PA *this$0_;");
     assertTranslation(translation, "this$0_ = outer$;");
   }
 
@@ -361,7 +361,7 @@ public void testWeak() throws IOException {
             + "class A:"
             + "  field t: @Weak ");
     String translation = translateSourceFile(source, "p.A", "p/A.m");
-    assertTranslation(translation, "__unsafe_unretained JavaLangThread *t_;");
+    assertTranslation(translation, "WEAK_ JavaLangThread *t_;");
     assertTranslation(translation, "t_ = otherT;");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -58,7 +58,7 @@ public void testWeakSimpleInnerClass() throws IOException {
     String source = "import com.google.j2objc.annotations.WeakOuter; "
         + "public class A { @WeakOuter class B { int test() { return o.hashCode(); }} Object o; }";
     String translation = translateSourceFile(source, "A", "A.m");
-    assertTranslation(translation, "__unsafe_unretained A *this$0_;");
+    assertTranslation(translation, "WEAK_ A *this$0_;");
     assertTranslation(translation, "this$0_ = outer$;");
   }
 
@@ -71,7 +71,7 @@ public void testWeakArcSimpleInnerClass() throws IOException {
     assertTranslation(translation, "id o_;");
     assertTranslation(translation, "id o2_;");
     translation = getTranslatedFile("A.m");
-    assertTranslation(translation, "__unsafe_unretained A *this$0_;");
+    assertTranslation(translation, "WEAK_ A *this$0_;");
   }
 
   public void testInnerInnerClass() throws IOException {
@@ -92,7 +92,7 @@ public void testWeakInnerInnerClass() throws IOException {
         + "  int test() { return o.hashCode(); }}} Object o; }";
     String translation = translateSourceFile(source, "A", "A.m");
     assertTranslation(translation, "A *this$0_;");
-    assertTranslation(translation, "__unsafe_unretained A_B *this$0_;");
+    assertTranslation(translation, "WEAK_ A_B *this$0_;");
     assertTranslation(translation, "[nil_chk(this$0_->this$0_->o_) hash]");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/LambdaTypeElementAdderTest.java
Patch:
@@ -33,6 +33,6 @@ public void testWeakOuterLambda() throws IOException {
         + "f = () -> i + 1; } }", "Test", "Test.m");
     // Verify that both lambdas have weak outers. This tests both VariableDeclaration and Assignment
     // as parent nodes of the lambda.
-    assertOccurrences(translation, "__unsafe_unretained Test *this$0_;", 2);
+    assertOccurrences(translation, "WEAK_ Test *this$0_;", 2);
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/ZeroingWeakTest.java
Patch:
@@ -43,7 +43,7 @@ public void testFieldDeclarationArc() throws IOException {
         FIELD_DECLARATION_SOURCE,
         "Test",
         "Test.h",
-        "weak NSString *string_;");
+        "WEAK_ NSString *string_;");
   }
 
   static final String FIELD_DECLARATION_WITH_INITIALIZER_SOURCE =

File: translator/src/test/java/com/google/devtools/j2objc/translate/CastResolverTest.java
Patch:
@@ -212,9 +212,8 @@ public void testInterfaceComparisons() throws IOException {
     // Wrong: clang will report a compare-distinct-pointer-types warning.
     assertNotInTranslation(translation, "return f == b;");
     assertNotInTranslation(translation, "return b != f;");
-    // Right: weaker right-hand type, since Java compiler already type-checked.
-    assertTranslation(translation, "return f == (id) b;");
-    assertTranslation(translation, "return b != (id) f;");
+    assertTranslation(translation, "return JreObjectEqualsEquals(f, b);");
+    assertTranslation(translation, "return !JreObjectEqualsEquals(b, f);");
     assertTranslation(translation, "IOSByteArray_Get(nil_chk(buffer), offset) != 'Z';");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -284,7 +284,7 @@ public void testLogicalPrecedence() throws IOException {
         "class Test { int i; @Override public boolean equals(Object object) { "
         + "return (object == this) || (object instanceof Test) && (i == ((Test) object).i); } }",
         "Test", "Test.m");
-    assertTranslatedLines(translation, "(object == self) || "
+    assertTranslatedLines(translation, "(JreObjectEqualsEquals(object, self)) || "
         + "(([object isKindOfClass:[Test class]]) && (i_ == ((Test *) nil_chk(((Test *) "
         + "cast_chk(object, [Test class]))))->i_));");
   }

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -226,7 +226,8 @@ public static boolean isAssigned(Expression node) {
     TreeNode parent = node.getParent();
 
     while (parent instanceof ParenthesizedExpression) {
-        parent = parent.getParent();
+      node = (Expression) parent;
+      parent = node.getParent();
     }
 
     if (parent instanceof PostfixExpression) {

File: jre_emul/android/platform/libcore/json/src/main/java/org/json/JSONArray.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.json;
 
-import dalvik.annotation.compat.UnsupportedAppUsage;
+//import dalvik.annotation.compat.UnsupportedAppUsage;
 import java.lang.reflect.Array;
 import java.util.ArrayList;
 import java.util.Collection;

File: jre_emul/android/platform/libcore/json/src/main/java/org/json/JSONStringer.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.json;
 
-import dalvik.annotation.compat.UnsupportedAppUsage;
+// import dalvik.annotation.compat.UnsupportedAppUsage;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;

File: jre_emul/android/platform/libcore/json/src/main/java/org/json/JSONTokener.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.json;
 
-import dalvik.annotation.compat.UnsupportedAppUsage;
+// import dalvik.annotation.compat.UnsupportedAppUsage;
 
 // Note: this class was written without inspecting the non-free org.json sourcecode.
 

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/nio/file/MacOSXPathTest.java
Patch:
@@ -362,7 +362,7 @@ public void test_toFile() {
         assertEquals(dummyPath.toAbsolutePath().toString(), file.getAbsolutePath());
     }
 
-    /* J2ObC removed: https://github.com/google/j2objc/issues/1440
+    /* j2objc: polling key events fails on MacOS, causing this test to hang.
     @Test
     public void test_register$WatchService$WatchEvent_Kind() throws IOException,
             InterruptedException {

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/nio/file/DefaultFileSystemProviderTest.java
Patch:
@@ -731,7 +731,6 @@ public void test_copy_directory() throws IOException {
         } catch (DirectoryNotEmptyException expected) {}
     }
 
-    /* TODO(amisail): check why this is failing
     @Test
     public void test_newDirectoryStream$Path$Filter() throws IOException {
 
@@ -763,13 +762,15 @@ public void test_copy_directory() throws IOException {
         // Filter all the directories.
         try (DirectoryStream<Path> directoryStream = provider.newDirectoryStream(path_root,
                 file -> Files.isDirectory(file))) {
+            /* J2ObjC changed: SecureDirectoryStream not supported
             assertTrue(directoryStream instanceof SecureDirectoryStream);
+             */
+            assertTrue(directoryStream instanceof DirectoryStream);
             directoryStream.forEach(path -> pathsSet.add(path));
 
             assertEquals(expectedPathsSet, pathsSet);
         }
     }
-     */
 
     /**
      * Tests exceptions for the newDirectoryStream(Path, DirectoryStream.Filter) method

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/nio/file/MacOSXPathTest.java
Patch:
@@ -354,13 +354,11 @@ public void test_toRealPath() throws IOException {
         assertTrue(Files.isSymbolicLink(realPath));
     }
 
-    /* TODO(amisail): fails when running test make but not when t1
     @Test
     public void test_toFile() {
         File file = dummyPath.toFile();
         assertEquals(dummyPath.toAbsolutePath().toString(), file.getAbsolutePath());
     }
-     */
 
     /* TODO(amisail): uncomment when UnixChannelFactory.open() is fixed
     @Test
@@ -593,4 +591,4 @@ public Class<T> type() {
             return null;
         }
     }
-}
\ No newline at end of file
+}

File: jre_emul/android/platform/libcore/ojluni/src/main/java/sun/nio/fs/UnixFileModeAttribute.java
Patch:
@@ -47,8 +47,8 @@ private UnixFileModeAttribute() {
 
     static int toUnixMode(Set<PosixFilePermission> perms) {
         int mode = 0;
-        /* J2ObjC changed: explicitly cast as if an element of perms is not
-        of type PosixFilePermission an ClassCastException is not thrown
+        /* J2ObjC changed: explicitly cast in case that an element of perms is not
+        of type PosixFilePermission so that a ClassCastException is thrown
          */
         for (Object o: perms) {
             PosixFilePermission perm = (PosixFilePermission) o;

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/nio/file/DefaultFileSystemProviderTest.java
Patch:
@@ -731,6 +731,7 @@ public void test_copy_directory() throws IOException {
         } catch (DirectoryNotEmptyException expected) {}
     }
 
+    /* TODO(amisail): check why this is failing
     @Test
     public void test_newDirectoryStream$Path$Filter() throws IOException {
 
@@ -768,6 +769,7 @@ public void test_copy_directory() throws IOException {
             assertEquals(expectedPathsSet, pathsSet);
         }
     }
+     */
 
     /**
      * Tests exceptions for the newDirectoryStream(Path, DirectoryStream.Filter) method

File: jre_emul/openjdk/src/macosx/classes/sun/nio/fs/MacOSXFileSystemProvider.java
Patch:
@@ -47,8 +47,6 @@ MacOSXFileSystem newFileSystem(String dir) {
 
     @Override
     FileTypeDetector getFileTypeDetector() {
-        Path userMimeTypes = Paths.get(AccessController.doPrivileged(
-                new GetPropertyAction("user.home")), ".mime.types");
-        return new MimeTypesFileTypeDetector(userMimeTypes);
+        return new MimeTypesFileTypeDetector();
     }
 }

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -212,7 +212,7 @@ private int generateMethodsMetadata() {
       if (typeNode instanceof AnnotationTypeDeclaration) {
         // Add property accessor and static default methods.
         for (AnnotationTypeMemberDeclaration decl : TreeUtil.getAnnotationMembers(typeNode)) {
-          String name = ElementUtil.getName(decl.getExecutableElement());
+          String name = nameTable.getMethodSelector(decl.getExecutableElement());
           String returnType = getTypeName(decl.getExecutableElement().getReturnType());
           String metadata = UnicodeUtils.format("    { NULL, %s, 0x%x, -1, -1, -1, -1, -1, -1 },\n",
               cStr(returnType),

File: jre_emul/android/platform/libcore/ojluni/src/main/java/sun/nio/fs/DefaultFileSystemProvider.java
Patch:
@@ -63,7 +63,7 @@ public static FileSystemProvider create() {
         // if (osname.equals("Linux"))
         if (osname.equals("Linux") || osname.equals("Fuchsia"))
             return createProvider("sun.nio.fs.LinuxFileSystemProvider");
-        if (osname.contains("OS X"))
+        if (osname.contains("OS X") || osname.contains("iPhone"))
             return createProvider("sun.nio.fs.MacOSXFileSystemProvider");
         if (osname.equals("AIX"))
             return createProvider("sun.nio.fs.AixFileSystemProvider");

File: jre_emul/openjdk/src/macosx/classes/sun/nio/ch/KQueuePort.java
Patch:
@@ -25,8 +25,6 @@
 
 package sun.nio.ch;
 
-import com.google.j2objc.annotations.WeakOuter;
-
 import java.nio.channels.spi.AsynchronousChannelProvider;
 import java.io.IOException;
 import java.util.concurrent.BlockingQueue;
@@ -192,7 +190,6 @@ void startPoll(int fd, int events) {
      * event is used to signal one consumer to re-poll when all events have
      * been consumed.
      */
-    @WeakOuter
     private class EventHandlerTask implements Runnable {
         private Event poll() throws IOException {
             try {

File: jre_emul/android/platform/libcore/luni/src/main/java/libcore/io/NetworkOs.java
Patch:
@@ -231,7 +231,7 @@ static BOOL inetAddressToSockaddrImpl(JavaNetInetAddress *inetAddress, int port,
     if (ss->ss_family == AF_INET6) {
       // IPv6 address. Copy the bytes...
       jbyte *dst = (jbyte *)sin6->sin6_addr.s6_addr;
-      [((JavaNetInet6Address *) inetAddress)->ipaddress_ getBytes:dst length:16];
+      [((JavaNetInet6Address *) inetAddress)->holder6_->ipaddress_ getBytes:dst length:16];
       // ...and set the scope id...
       sin6->sin6_scope_id = [(JavaNetInet6Address *) inetAddress getScopeId];
       *sa_len = sizeof(struct sockaddr_in6);

File: jre_emul/openjdk/src/macosx/classes/sun/nio/ch/KQueuePort.java
Patch:
@@ -25,6 +25,8 @@
 
 package sun.nio.ch;
 
+import com.google.j2objc.annotations.WeakOuter;
+
 import java.nio.channels.spi.AsynchronousChannelProvider;
 import java.io.IOException;
 import java.util.concurrent.ArrayBlockingQueue;
@@ -189,6 +191,7 @@ void startPoll(int fd, int events) {
      * event is used to signal one consumer to re-poll when all events have
      * been consumed.
      */
+    @WeakOuter
     private class EventHandlerTask implements Runnable {
         private Event poll() throws IOException {
             try {

File: jre_emul/android/platform/libcore/ojluni/src/main/java/sun/nio/ch/AsynchronousChannelGroupImpl.java
Patch:
@@ -37,6 +37,8 @@
 import java.security.PrivilegedAction;
 import java.security.AccessController;
 import java.security.AccessControlContext;
+
+import com.google.j2objc.annotations.Weak;
 import sun.security.action.GetIntegerAction;
 
 /**
@@ -62,6 +64,7 @@ abstract class AsynchronousChannelGroupImpl
 
     // task queue for when using a fixed thread pool. In that case, thread
     // waiting on I/O events must be awokon to poll tasks from this queue.
+    @Weak
     private final Queue<Runnable> taskQueue;
 
     // group shutdown

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/util/zip/ZipFileTest.java
Patch:
@@ -18,7 +18,7 @@
 
 /* J2ObjC modified.
 import android.system.OsConstants; */
-import static libcore.io.OsConstants.*;
+import static libcore.io.OsConstants.SEEK_CUR;
 import libcore.io.Libcore;
 
 import java.io.BufferedOutputStream;

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/util/HashMap.java
Patch:
@@ -25,8 +25,8 @@
 
 package java.util;
 
+import com.google.j2objc.annotations.Weak;
 import com.google.j2objc.annotations.WeakOuter;
-
 import java.io.IOException;
 import java.io.InvalidObjectException;
 import java.io.Serializable;
@@ -1851,10 +1851,10 @@ void internalWriteEntries(java.io.ObjectOutputStream s) throws IOException {
      * linked node.
      */
     static final class TreeNode<K,V> extends LinkedHashMap.LinkedHashMapEntry<K,V> {
-        TreeNode<K,V> parent;  // red-black tree links
+        @Weak TreeNode<K,V> parent; // red-black tree links
         TreeNode<K,V> left;
         TreeNode<K,V> right;
-        TreeNode<K,V> prev;    // needed to unlink next upon deletion
+        @Weak TreeNode<K,V> prev;    // needed to unlink next upon deletion
         boolean red;
         TreeNode(int hash, K key, V val, Node<K,V> next) {
             super(hash, key, val, next);

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -430,6 +430,7 @@ private native void start0() /*-[
     if (stack >= PTHREAD_STACK_MIN) {
       pthread_attr_setstacksize(&attr, stack);
     }
+    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
     pthread_create(&nt->t, &attr, &start_routine, [self retain]);
   ]-*/;
 

File: jre_emul/android/platform/libcore/ojluni/src/test/java/time/tck/java/time/AbstractTCKTest.java
Patch:
@@ -56,7 +56,7 @@
  */
 package tck.java.time;
 
-import android.icu.impl.Assert;
+import static org.junit.Assert.*;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -71,8 +71,6 @@
 import java.util.Arrays;
 import java.util.Formatter;
 
-import static org.junit.Assert.*;
-
 /**
  * Base test class.
  */

File: jre_emul/android/platform/libcore/ojluni/src/test/java/time/tck/java/time/chrono/serial/TCKChronologySerialization.java
Patch:
@@ -111,7 +111,7 @@ public void test_chronoSerialization(Chronology chrono) throws Exception {
     //-----------------------------------------------------------------------
     @Test()
     @UseDataProvider("data_of_calendars")
-    private void test_serializationBytes(Chronology chrono) throws Exception {
+    public void test_serializationBytes(Chronology chrono) throws Exception {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         try (DataOutputStream dos = new DataOutputStream(baos) ) {
             dos.writeByte(CHRONO_TYPE);

File: jre_emul/android/platform/libcore/ojluni/src/test/java/time/tck/java/time/AbstractTCKTest.java
Patch:
@@ -56,7 +56,7 @@
  */
 package tck.java.time;
 
-import android.icu.impl.Assert;
+import static org.junit.Assert.*;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -71,8 +71,6 @@
 import java.util.Arrays;
 import java.util.Formatter;
 
-import static org.junit.Assert.*;
-
 /**
  * Base test class.
  */

File: jre_emul/android/platform/libcore/ojluni/src/test/java/time/tck/java/time/chrono/serial/TCKChronologySerialization.java
Patch:
@@ -111,7 +111,7 @@ public void test_chronoSerialization(Chronology chrono) throws Exception {
     //-----------------------------------------------------------------------
     @Test()
     @UseDataProvider("data_of_calendars")
-    private void test_serializationBytes(Chronology chrono) throws Exception {
+    public void test_serializationBytes(Chronology chrono) throws Exception {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         try (DataOutputStream dos = new DataOutputStream(baos) ) {
             dos.writeByte(CHRONO_TYPE);

File: jre_emul/android/platform/libcore/ojluni/src/test/java/time/tck/java/time/chrono/TCKChronoPeriod.java
Patch:
@@ -95,7 +95,7 @@ public class TCKChronoPeriod {
     // regular data factory for names and descriptions of available calendars
     //-----------------------------------------------------------------------
     @DataProvider
-    Chronology[][] data_of_calendars() {
+    public static Object[][] data_of_calendars() {
         return new Chronology[][]{
                     /* J2ObjC removed: Only "gregorian" and "julian" calendars are supported.
                     {HijrahChronology.INSTANCE}, */

File: jre_emul/android/platform/libcore/luni/src/main/java/javax/xml/datatype/FactoryFinder.java
Patch:
@@ -61,8 +61,8 @@ private static class CacheHolder {
             File f = new File(configFile);
             if (f.exists()) {
                 if (debug) debugPrintln("Read properties file " + f);
-                try {
-                    cacheProps.load(new FileInputStream(f));
+                try (FileInputStream inputStream = new FileInputStream(f)) {
+                    cacheProps.load(inputStream);
                 } catch (Exception ex) {
                     if (debug) {
                         ex.printStackTrace();

File: jre_emul/android/platform/libcore/luni/src/main/java/javax/xml/datatype/FactoryFinder.java
Patch:
@@ -61,8 +61,8 @@ private static class CacheHolder {
             File f = new File(configFile);
             if (f.exists()) {
                 if (debug) debugPrintln("Read properties file " + f);
-                try {
-                    cacheProps.load(new FileInputStream(f));
+                try (FileInputStream inputStream = new FileInputStream(f)) {
+                    cacheProps.load(inputStream);
                 } catch (Exception ex) {
                     if (debug) {
                         ex.printStackTrace();

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -783,7 +783,7 @@ static IOException secureConnectionException(String description) {
     if (self->instanceFollowRedirects_
         && [response.URL.scheme isEqualToString:request.URL.scheme]) {
       // Workaround for iOS bug (https://forums.developer.apple.com/thread/43818).
-      NSMutableURLRequest *nextRequest = [request mutableCopy];
+      NSMutableURLRequest *nextRequest = [[request mutableCopy] autorelease];
 
       NSString *responseCookies = [response.allHeaderFields objectForKey:@"Set-Cookie"];
       if (responseCookies) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -240,7 +240,7 @@ protected void printStaticInterfaceMethods() {
    * Prints the list of static variable and/or enum constant accessor methods.
    */
   protected void printStaticAccessors() {
-    if (options.staticAccessorMethods()) {
+    if (options.staticAccessorMethods() && !options.classProperties()) {
       for (VariableDeclarationFragment fragment : getStaticFields()) {
         VariableElement var = fragment.getVariableElement();
         TypeMirror type = var.asType();

File: jre_emul/openjdk/src/macosx/classes/sun/nio/ch/KQueueArrayWrapper.java
Patch:
@@ -270,7 +270,7 @@ private native int kevent0(int kq, long keventAddress, int keventCount,
       // Java timeout == -1 : wait forever : timespec timeout of NULL
       // Java timeout == 0  : return immediately : timespec timeout of zero
       if (timeout >= 0) {
-        ts.tv_sec = timeout / 1000L;
+        ts.tv_sec = (long) (timeout / 1000);
         ts.tv_nsec = (timeout % 1000L) * 1000000; //nanosec = 1 million millisec
         tsp = &ts;
       } else {

File: jre_emul/openjdk/src/macosx/classes/sun/nio/ch/KQueueArrayWrapper.java
Patch:
@@ -270,8 +270,8 @@ private native int kevent0(int kq, long keventAddress, int keventCount,
       // Java timeout == -1 : wait forever : timespec timeout of NULL
       // Java timeout == 0  : return immediately : timespec timeout of zero
       if (timeout >= 0) {
-        ts.tv_sec = timeout / 1000;
-        ts.tv_nsec = (timeout % 1000) * 1000000; //nanosec = 1 million millisec
+        ts.tv_sec = timeout / 1000L;
+        ts.tv_nsec = (timeout % 1000L) * 1000000; //nanosec = 1 million millisec
         tsp = &ts;
       } else {
         tsp = NULL;

File: protobuf/tests/MapsTest.java
Patch:
@@ -147,6 +147,7 @@ public void testGetOrDefault() throws Exception {
     assertEquals("default", msg.getIntStringOrDefault(7, "default"));
   }
 
+  @SuppressWarnings("unchecked")
   public void testMapFieldDescriptor() throws Exception {
     Descriptor descriptor = MapMsg.Builder.getDescriptor();
     FieldDescriptor stringStringField = descriptor.findFieldByNumber(1);
@@ -248,6 +249,7 @@ public void testGetAllFields() throws Exception {
     assertEquals(Integer.valueOf(2), entry.getValue());
   }
 
+  @SuppressWarnings("unchecked")
   public void testMixingMapAndListApi() throws Exception {
     Descriptor descriptor = MapMsg.Builder.getDescriptor();
     FieldDescriptor field = descriptor.findFieldByNumber(1);

File: jre_emul/openjdk/src/java.base/share/classes/java/lang/Deprecated.java
Patch:
@@ -79,7 +79,9 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE})
+// j2objc: defer including MODULE to maintain Java 8 minimum.
+//@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE})
+@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})
 public @interface Deprecated {
     /**
      * Returns the version in which the annotated element became deprecated.

File: jre_emul/android/platform/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/nio/channels/DatagramChannelTest.java
Patch:
@@ -1189,6 +1189,7 @@ public void testReceiveSend_NonBlock_Empty_S2C() throws Exception {
         receiveOnChannel1AndClose(CAPACITY_NORMAL, datagramSocket1Address, "");
     }
 
+    /** iOS poll of empty datagram fails: Apple Radar #47594701
     public void testReceiveSend_Block_Empty_C2S() throws Exception {
         sendOnChannel2("", datagramSocket1Address);
         receiveOnDatagramSocket1(CAPACITY_NORMAL, "");
@@ -1212,6 +1213,7 @@ public void testReceiveSend_Empty_S2S() throws Exception {
         this.datagramSocket2.receive(rdp);
         assertEquals(new String(buf, 0, CAPACITY_NORMAL).trim(), msg);
     }
+    */
 
     public void testReceiveSend_Block_Oversize() throws Exception {
         sendOnChannel2("0123456789", channel1Address);

File: translator/src/test/java/com/google/devtools/j2objc/regression/LambdaExpressionsTest.java
Patch:
@@ -618,8 +618,7 @@ public void test026() {
   				"X.foo(1234,4321)\n" + 
   				"5555");
   }
-  // https://bugs.eclipse.org/bugs/show_bug.cgi?id=406589, [1.8][compiler][codegen] super call misdispatched 
-  /* TODO(b/27552662): J2ObjC failure.
+  // https://bugs.eclipse.org/bugs/show_bug.cgi?id=406589, [1.8][compiler][codegen] super call misdispatched
 	public void test027() {
   	this.runConformTest(
   			new String[] {
@@ -658,7 +657,7 @@ public void test027() {
   				"I.foo(1234,4321)\n" + 
   				"5555\n" + 
   				"Exception");
-  }*/
+  }
   // https://bugs.eclipse.org/bugs/show_bug.cgi?id=406584, Bug 406584 - [1.8][compiler][codegen] ClassFormatError: Invalid method signature 
   public void test028() {
   	this.runConformTest(

File: translator/src/test/java/com/google/devtools/j2objc/regression/LambdaExpressionsTest.java
Patch:
@@ -333,7 +333,6 @@ public void test014() {
   				"Argv[0] = Hello! \n" + 
   				"Argv[1] = World!");
   }
-  /* TODO(b/27552662): J2ObjC failure.
   public void test015() {
   	this.runConformTest(
   			new String[] {
@@ -355,7 +354,7 @@ public void test015() {
   					"}\n"
   				},
   				"null");
-  }*/
+  }
   public void test016() {
   	this.runConformTest(
   			new String[] {

File: jre_emul/Classes/com/google/j2objc/nio/charset/IOSCharset.java
Patch:
@@ -167,6 +167,7 @@ public static Charset charsetForName(String charsetName) {
   static const NSString *big5hkscs_aliases[] = { @"Big5_HKSCS", @"big5hkscs" };
 
   static const jbyte ascii_replacement[] = { 63 };
+  static const jbyte gb18030_replacement[] =  { 0x1a };
   static const jbyte utf16be_replacement[] = { -1, -3 };
   static const jbyte utf16le_replacement[] = { -3, -1 };
   static const jbyte iso2022_replacement[] = { 33, 41 };
@@ -225,7 +226,7 @@ public static Charset charsetForName(String charsetName) {
     { kCFStringEncodingGBK_95, "GBK", @"GBK", gbk_aliases, 4,
       2.0f, 2.0f, 0.5f, 1.0f, ascii_replacement, 1 },
     { kCFStringEncodingGB_18030_2000, "GB18030", @"GB18030", gb18030_aliases, 1,
-      4.0f, 4.0f, 1.0f, 2.0f, ascii_replacement, 1 },
+      2.5f, 4.0f, 1.0f, 2.0f, gb18030_replacement, 1 },
     { kCFStringEncodingBig5, "BIG5", @"BIG5", big5_aliases, 4,
       2.0f, 2.0f, 0.5f, 1.0f, ascii_replacement, 1 },
     { kCFStringEncodingBig5_HKSCS_1999, "BIG5-HKSCS", @"BIG5-HKSCS", big5hkscs_aliases, 2,

File: jre_emul/android/platform/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/nio/charset/ASCIICharsetEncoderTest.java
Patch:
@@ -73,6 +73,7 @@ public void testSpecificDefaultValue() {
         assertEquals(1.0, encoder.maxBytesPerChar(), 0.0);
     }
 
+    /* j2objc: iconv doesn't support ASCII multi-step encoding.
     public void testMultiStepEncode() throws CharacterCodingException {
         encoder.onMalformedInput(CodingErrorAction.REPORT);
         encoder.onUnmappableCharacter(CodingErrorAction.REPORT);
@@ -99,6 +100,7 @@ public void testMultiStepEncode() throws CharacterCodingException {
         assertTrue(encoder.encode(buffer2, out, true).isUnmappable());
         assertEquals(0, buffer2.position());
     }
+    */
 
     public void testEncodeMapping() throws CharacterCodingException {
         encoder.reset();
@@ -113,7 +115,7 @@ public void testEncodeMapping() throws CharacterCodingException {
         CharBuffer cb = CharBuffer.wrap("\u0080");
         try {
             encoder.encode(cb);
-        } catch (UnmappableCharacterException e) {
+        } catch (UnmappableCharacterException | MalformedInputException e) { // j2objc: iconv limit
             //expected
         }
 

File: jre_emul/Classes/com/google/j2objc/nio/charset/IOSCharset.java
Patch:
@@ -178,7 +178,7 @@ public static Charset charsetForName(String charsetName) {
   // All encoding names must be uppercase, so map lookups are case-insensitive.
   static const CharsetInfo iosCharsets[] = {
     { kCFStringEncodingUTF8, "UTF-8", @"UTF-8", utf8_aliases, 2,
-      1.1f, 3.0f, 1.0f, 1.0f, ascii_replacement, 1 },
+      2.0f, 3.0f, 1.0f, 1.0f, ascii_replacement, 1 },
     { kCFStringEncodingASCII, "ASCII", @"US-ASCII", ascii_aliases, 16,
       1.0f, 1.0f, 1.0f, 1.0f, ascii_replacement, 1 },
     { kCFStringEncodingEUC_JP, "EUC-JP", @"EUC-JP", eucjp_aliases, 7,

File: jre_emul/Classes/com/google/j2objc/nio/charset/IconvCharsetDecoder.java
Patch:
@@ -95,7 +95,7 @@ static jint getMalformedLength(iconv_t coder, char *inPos, size_t inRemaining) {
 
   @Override
   protected native CoderResult decodeLoop(ByteBuffer inBuf, CharBuffer outBuf) /*-[
-    jint inSize = [inBuf remaining];
+    jint inSize = [nil_chk(inBuf) remaining];
     if (inSize <= 0) {
       return JavaNioCharsetCoderResult_get_UNDERFLOW();
     }
@@ -121,7 +121,7 @@ protected native CoderResult decodeLoop(ByteBuffer inBuf, CharBuffer outBuf) /*-
     }
     size_t inRawBytes = inSize;
 
-    jint outSize = [outBuf remaining];
+    jint outSize = [nil_chk(outBuf) remaining];
     IOSCharArray *outArray = nil;
     char *outRaw = NULL;
     size_t outRawBytes = outSize * BYTES_PER_CHAR;

File: jre_emul/Classes/com/google/j2objc/nio/charset/IconvCharsetEncoder.java
Patch:
@@ -90,6 +90,7 @@ protected native CoderResult encodeLoop(CharBuffer inBuf, ByteBuffer outBuf) /*-
     }
     size_t inRawBytes = inSize * BYTES_PER_CHAR;
 
+    (void)nil_chk(outBuf);
     jint outSize = [outBuf remaining];
     IOSByteArray *outArray = nil;
     char *outRaw = NULL;
@@ -118,6 +119,7 @@ protected native CoderResult encodeLoop(CharBuffer inBuf, ByteBuffer outBuf) /*-
     }
 
     if (inRawBytes > 0) {
+      (void)nil_chk(inBuf);
       [inBuf positionWithInt:[inBuf position] - ((jint)inRawBytes / BYTES_PER_CHAR)];
     }
     jint encodedBytes = outSize - (jint)outRawBytes;

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnnotationRewriter.java
Patch:
@@ -168,7 +168,8 @@ private void addConstructor(
 
       VariableElement param = GeneratedVariableElement.newParameter(propName, memberType, null);
       constructorDecl.addParameter(new SingleVariableDeclaration(param));
-      String rhs = TypeUtil.isReferenceType(memberType) ? "RETAIN_(" + propName + ")" : propName;
+      String paramName = nameTable.getVariableShortName(param);
+      String rhs = TypeUtil.isReferenceType(memberType) ? "RETAIN_(" + paramName + ")" : paramName;
       stmts.add(new NativeStatement("self->" + fieldName + " = " + rhs + ";"));
     }
 

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/lang/IntegerTest.java
Patch:
@@ -181,7 +181,6 @@ public void testDivideAndRemainderUnsigned() {
             }
         }
 
-        /* TODO(b/137121871): generates SIGFPE instead of ArithmeticException.
         for(long dividend : vals) {
             try {
                 Integer.divideUnsigned((int) dividend, 0);
@@ -191,7 +190,7 @@ public void testDivideAndRemainderUnsigned() {
                 Integer.remainderUnsigned((int) dividend, 0);
                 fail();
             } catch (ArithmeticException expected) { }
-        } */
+        }
     }
 
     public void testParseUnsignedInt() {

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/lang/LongTest.java
Patch:
@@ -196,7 +196,6 @@ public void testDivideAndRemainderUnsigned() {
             }
         }
 
-        /* TODO(b/137121871): generates SIGFPE instead of ArithmeticException.
         for(BigInteger dividend : vals) {
             try {
                 Long.divideUnsigned(dividend.longValue(), 0);
@@ -206,7 +205,7 @@ public void testDivideAndRemainderUnsigned() {
                 Long.remainderUnsigned(dividend.longValue(), 0);
                 fail();
             } catch (ArithmeticException expected) { }
-        } */
+        }
     }
 
     public void testParseUnsignedLong() {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayAccessTest.java
Patch:
@@ -57,7 +57,7 @@ public void testSetElementWithExpression() {
     String result = generateStatement(stmts.get(1));
     assertEquals("*IOSIntArray_GetRef(arr, 0) = 2 * 5;", result);
     result = generateStatement(stmts.get(2));
-    assertEquals("*IOSIntArray_GetRef(arr, 1) = 6 / 3;", result);
+    assertEquals("*IOSIntArray_GetRef(arr, 1) = JreIntDiv(6, 3);", result);
   }
 
   public void testPrefixOperator() {

File: translator/src/test/java/com/google/devtools/j2objc/gen/LineDirectivesTest.java
Patch:
@@ -98,7 +98,7 @@ public void testForIfWhileStatementsWithoutBlocks() throws IOException {
     assertTranslatedLines(translation,
         "for (jint i = 0; i < 10; i++)",
         "#line 4",
-        "if ((n % 2) == 0)",
+        "if ((JreIntMod(n, 2)) == 0)",
         "#line 5",
         "n += i;",
         "",

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -380,6 +380,7 @@ public void endVisit(VariableDeclarationFragment node) {
    * well in sorted collections which rely on Java's runtime type checking.
    */
   @Override
+  @SuppressWarnings("TypeEquals")
   public void endVisit(MethodDeclaration node) {
     ExecutableElement element = node.getExecutableElement();
     if (!ElementUtil.getName(element).equals("compareTo") || node.getBody() == null) {

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedArrayType.java
Patch:
@@ -50,6 +50,7 @@ public <R, P> R accept(TypeVisitor<R, P> v, P p) {
   }
 
   @Override
+  @SuppressWarnings("TypeEquals")
   public boolean equals(Object obj) {
     if (this == obj) {
       return true;

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -274,13 +274,15 @@ public boolean isSubtype(TypeMirror t1, TypeMirror t2) {
     return javacTypes.isSubtype(t1, t2);
   }
 
+  @SuppressWarnings("TypeEquals")
   public boolean isSameType(TypeMirror t1, TypeMirror t2) {
     if (isGeneratedType(t1) || isGeneratedType(t2)) {
       return t1.equals(t2);
     }
     return javacTypes.isSameType(t1, t2);
   }
 
+  @SuppressWarnings("TypeEquals")
   public boolean isSubsignature(ExecutableType m1, ExecutableType m2) {
     if (isGeneratedType(m1) || isGeneratedType(m2)) {
       return m1.equals(m2);
@@ -656,6 +658,7 @@ public boolean isDeclaredAsId(TypeMirror t) {
     return isReferenceType(t) && getObjcUpperBounds(t).isEmpty();
   }
 
+  @SuppressWarnings("TypeEquals")
   public boolean isObjcAssignable(TypeMirror t1, TypeMirror t2) {
     if (!isReferenceType(t1) || !isReferenceType(t2)) {
       if (t1 instanceof PointerType && t2 instanceof PointerType) {

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -84,8 +84,8 @@ public final class ElementUtil {
 
   private static final String LAZY_INIT = "com.google.errorprone.annotations.concurrent.LazyInit";
 
-  private static final Pattern NULLABLE_PATTERN = Pattern.compile("Nullable");
-  private static final Pattern NONNULL_PATTERN = Pattern.compile("No[nt][Nn]ull");
+  private static final Pattern NULLABLE_PATTERN = Pattern.compile("Nullable.*");
+  private static final Pattern NONNULL_PATTERN = Pattern.compile("No[nt][Nn]ull.*");
 
   private final Elements javacElements;
   private final Map<Element, TypeMirror> elementTypeMap = new HashMap<>();

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/io/ObjectStreamClass.java
Patch:
@@ -666,7 +666,7 @@ native Object newInstance(Class<?> instantiationClass) /*-[
       Class cls = JavaIoObjectStreamClass_resolveConstructorClassWithIOSClass_(
           self, instantiationClass).objcClass;
       SEL sel = [resolvedConstructor_ getSelector];
-      IMP imp = class_getMethodImplementation(cls, sel);
+      id (*imp)(id, SEL) = (id (*)(id, SEL)) class_getMethodImplementation(cls, sel);
       id newInstance = [[instantiationClass.objcClass alloc] autorelease];
       return imp(newInstance, sel);
     ]-*/;

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/lang/Enum.java
Patch:
@@ -283,7 +283,9 @@ public static <T extends Enum<T>> T valueOf(Class<T> enumType,
           SEL valuesSelector = sel_registerName("values");
           Method valuesMethod = class_getClassMethod(cls, valuesSelector);
           if (valuesMethod) {
-            return method_invoke(cls, valuesMethod);
+            static IOSObjectArray* (*method_invoke_values)(Class, Method) =
+                (IOSObjectArray* (*)(Class, Method)) method_invoke;
+            return method_invoke_values(cls, valuesMethod);
           }
           @throw create_JavaLangAssertionError_initWithId_(
               [@"Enum type with no values method: " stringByAppendingString:[enumType getName]]);

File: jre_emul/android/platform/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/lang/ObjectTest.java
Patch:
@@ -286,9 +286,10 @@ public void test_waitJ() {
         // Test for method void java.lang.Object.wait(long)
 
         // Start of test code.
+        // J2ObjC change: adjust allowable error to minimize false-failures.
 
         final int loopCount = 20;
-        final int allowableError = 100; // millesconds
+        final int allowableError = 1000; // millesconds
         final int delay = 200; // milliseconds
         synchronized (obj1) {
             try {
@@ -309,7 +310,7 @@ public void test_waitJ() {
                             toLong[count][2] = after;
                             count++;
                         }
-                        if (error > (1000 + delay) || count == toLong.length) {
+                        if (error > (10000 + delay) || count == toLong.length) {
                             StringBuffer sb = new StringBuffer();
                             for (int j = 0; j < count; j++) {
                                 sb

File: jre_emul/android/platform/external/icu/android_icu4j/src/main/java/android/icu/util/Calendar.java
Patch:
@@ -5480,6 +5480,7 @@ private static Long findPreviousZoneTransitionTime(TimeZone tz, int upperOffset,
      *     changed in a future release. See <a href="http://bugs.icu-project.org/trac/ticket/11632">
      *     ICU ticket #11632</a> for details.
      */
+    @Deprecated
     protected int computeMillisInDay() {
         // Do the time portion of the conversion.
 
@@ -5528,6 +5529,7 @@ protected int computeMillisInDay() {
      *     changed in a future release. See <a href="http://bugs.icu-project.org/trac/ticket/11632">
      *     ICU ticket #11632</a> for details.
      */
+    @Deprecated
     protected int computeZoneOffset(long millis, int millisInDay) {
         int[] offsets = new int[2];
         long wall = millis + millisInDay;

File: jre_emul/android/platform/libcore/luni/src/objc/java/libcore/icu/ICU.java
Patch:
@@ -445,13 +445,13 @@ public static String getDisplayScript(Locale targetLocale, Locale locale) {
   /* J2ObjC unused.
   public static Locale addLikelySubtags(Locale locale) {
       return Locale.forLanguageTag(addLikelySubtags(locale.toLanguageTag()).replace('_', '-'));
-  }*/
+  }
 
   /**
    * @deprecated use {@link #addLikelySubtags(java.util.Locale)} instead.
    * J2ObjC unused.
   @Deprecated
-  public static native String addLikelySubtags(String locale);*/
+  public static native String addLikelySubtags(String locale);
 
   /**
    * @deprecated use {@link java.util.Locale#getScript()} instead. This has been kept

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/sql/CallableStatement.java
Patch:
@@ -296,6 +296,7 @@ void registerOutParameter(int parameterIndex, int sqlType, int scale)
      *             or <code>getBigDecimal(String parameterName)</code>
      * @see #setBigDecimal
      */
+    @Deprecated
     BigDecimal getBigDecimal(int parameterIndex, int scale)
         throws SQLException;
 

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/sql/ResultSet.java
Patch:
@@ -479,6 +479,7 @@ public interface ResultSet extends Wrapper, AutoCloseable {
      * @deprecated use <code>getCharacterStream</code> in place of
      *              <code>getUnicodeStream</code>
      */
+    @Deprecated
     java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException;
 
     /**
@@ -763,6 +764,7 @@ java.io.InputStream getBinaryStream(int columnIndex)
      * this method
      * @deprecated use <code>getCharacterStream</code> instead
      */
+    @Deprecated
     java.io.InputStream getUnicodeStream(String columnLabel) throws SQLException;
 
     /**

File: translator/src/main/java/com/google/devtools/j2objc/translate/ExternalAnnotationInjector.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Set;
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import scenelib.annotations.Annotation;
 import scenelib.annotations.el.AClass;
@@ -136,7 +137,8 @@ private void injectAnnotationsToElement(GeneratedElement element, Set<Annotation
   }
 
   private GeneratedAnnotationMirror generateAnnotationMirror(Annotation annotation) {
-    GeneratedAnnotationMirror annotationMirror = new GeneratedAnnotationMirror(annotation.def.name);
+    DeclaredType type = (DeclaredType) typeUtil.resolveJavaType(annotation.def.name).asType();
+    GeneratedAnnotationMirror annotationMirror = new GeneratedAnnotationMirror(type);
     for (Map.Entry<String, Object> entry : annotation.fieldValues.entrySet()) {
       String fieldName = entry.getKey();
       // For our uses cases, the scenelib library encodes the annotation value as a string.

File: jre_emul/android/platform/external/icu/android_icu4j/src/main/java/android/icu/impl/ICUData.java
Patch:
@@ -24,7 +24,7 @@
 
 /*-[
 // J2ObjC: make sure that the embedded resources are linked by referencing
-// the class defined in jre_emul/android/platform/external/icu/data/ICUData.m.
+// the class ICUData.m which is generated at build time (see jre_emul/icu_data.mk).
 #pragma clang diagnostic push
 #pragma GCC diagnostic ignored "-Wreceiver-forward-class"
 @class ICUData;

File: jre_emul/android/platform/external/icu/android_icu4j/src/main/java/android/icu/util/VersionInfo.java
Patch:
@@ -156,7 +156,7 @@ public final class VersionInfo implements Comparable<VersionInfo>
      * @hide draft / provisional / internal are hidden on Android
      */
     @Deprecated
-    public static final String ICU_DATA_VERSION_PATH = "58b";
+    public static final String ICU_DATA_VERSION_PATH = "60b";
 
     /**
      * Data version in ICU4J.

File: jre_emul/Tests/com/google/j2objc/io/AsyncPipedNSInputStreamAdapterTest.java
Patch:
@@ -145,12 +145,12 @@ static class DataProvider implements AsyncPipedNSInputStreamAdapter.Delegate {
       dataSize = stopWritingAt;
     }
 
-    int getTotalWritten() {
+    synchronized int getTotalWritten() {
       return offset;
     }
 
     @Override
-    public void offerData(OutputStream stream) {
+    public synchronized void offerData(OutputStream stream) {
       try {
         int remaining = dataSize - offset;
         int len = (remaining > WRITE_CHUNK_SIZE) ? WRITE_CHUNK_SIZE : remaining;

File: translator/src/test/java/com/google/devtools/j2objc/translate/TypeUseAnnotationTest.java
Patch:
@@ -36,9 +36,8 @@ public void testAnnotatedStringType() throws IOException {
     assertNotInTranslation(translation, "JavaLangString");
   }
 
-  // TODO(nbraswell): Use com.google.j2objc.annotations.WeakOuter when transitioned to Java 8
   String testWeakOuterSetup = "import java.lang.annotation.*;\n"
-      + "@Target(ElementType.TYPE_USE) @interface WeakOuter {}"
+      + "import com.google.j2objc.annotations.WeakOuter;"
       + "interface Simple { public int run(); }"
       + "class SimpleClass { public int run() {return 1;}; }"
       + "abstract class SimpleAbstractClass { public int run(){return 2;}; }"

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/io/BufferedReader.java
Patch:
@@ -328,7 +328,8 @@ String readLine(boolean ignoreLF) throws IOException {
             ensureOpen();
             boolean omitLF = ignoreLF || skipLF;
 
-        bufferLoop:
+        // j2objc: unused label, avoids LLVM warning.
+        // bufferLoop:
             for (;;) {
 
                 if (nextChar >= nChars)

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/util/Collections.java
Patch:
@@ -3806,9 +3806,9 @@ public Object[] toArray() {
                  * Ensure that we don't get an ArrayStoreException even if
                  * s.toArray returns an array of something other than Object
                  */
-                Object[] dest = (CheckedEntry.class.isInstance(
-                    source.getClass().getComponentType()) ? source :
-                                 new Object[source.length]);
+                Object[] dest = (source.getClass() == Object[].class)
+                    ? source
+                    : new Object[source.length];
 
                 for (int i = 0; i < source.length; i++)
                     dest[i] = checkedEntry((Map.Entry<K,V>)source[i],

File: jre_emul/android/platform/libcore/ojluni/src/main/java/sun/util/calendar/AbstractCalendar.java
Patch:
@@ -65,7 +65,7 @@ protected AbstractCalendar() {
     public Era getEra(String eraName) {
         if (eras != null) {
             for (int i = 0; i < eras.length; i++) {
-                if (eras[i].equals(eraName)) {
+                if (eras[i].getName().equals(eraName)) {
                     return eras[i];
                 }
             }

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/BuildClosureQueue.java
Patch:
@@ -80,7 +80,7 @@ public void addProcessedName(String name) {
   private InputFile getFileForName(String name) {
     InputFile inputFile = null;
     try {
-      inputFile = options.fileUtil().findOnSourcePath(name);
+      inputFile = options.fileUtil().findTypeOnSourcePath(name);
     } catch (IOException e) {
       ErrorUtil.warning(e.getMessage());
     }
@@ -106,7 +106,7 @@ private InputFile getFileForName(String name) {
   private boolean findClassFile(String name) {
     InputFile f = null;
     try {
-      f = options.fileUtil().findOnClassPath(name);
+      f = options.fileUtil().findTypeOnClassPath(name);
     } catch (IOException e) {
       ErrorUtil.warning(e.getMessage());
     }

File: translator/src/main/java/com/google/devtools/j2objc/util/PackageInfoLookup.java
Patch:
@@ -110,12 +110,12 @@ private PackageData findPackageData(String packageName) {
     try {
       String typeName = packageName + ".package-info";
       // First look on the sourcepath.
-      InputFile sourceFile = fileUtil.findOnSourcePath(typeName);
+      InputFile sourceFile = fileUtil.findTypeOnSourcePath(typeName);
       if (sourceFile != null) {
         return parseDataFromSourceFile(sourceFile);
       }
       // Then look on the classpath.
-      InputFile classFile = fileUtil.findOnClassPath(typeName);
+      InputFile classFile = fileUtil.findTypeOnClassPath(typeName);
       if (classFile != null) {
         return parseDataFromClassFile(classFile);
       }

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -172,7 +172,7 @@ private ReflectionSupport.Level getReflectionSupportLevelOnPackage(PackageElemen
     }
     // Check if package-info.java contains ReflectionSupport annotation
     level = options.getPackageInfoLookup().getReflectionSupportLevel(
-        node.getSimpleName().toString());
+        node.getQualifiedName().toString());
     return level;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -223,6 +223,9 @@ public static CompilationUnit convertCompilationUnit(
       TreePath path = new TreePath(javacUnit);
       converter.newUnit.setPackage(converter.convertPackage(path));
       for (Tree type : javacUnit.getTypeDecls()) {
+        if (type.getKind() == Kind.IMPORT) {
+          continue;
+        }
         TreeNode newNode = converter.convert(type, path);
         if (newNode.getKind() != TreeNode.Kind.EMPTY_STATEMENT) {
           converter.newUnit.addType((AbstractTypeDeclaration) newNode);

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -756,7 +756,7 @@ private native void makeRequest() throws IOException /*-[
    * Returns an SSLException if that class is linked into the application,
    * otherwise IOException.
    */
-  private static IOException secureConnectionException(String description) {
+  static IOException secureConnectionException(String description) {
     try {
       Class<?> sslExceptionClass = Class.forName("javax.net.ssl.SSLException");
       Constructor<?> constructor = sslExceptionClass.getConstructor(String.class);

File: jre_emul/android/platform/libcore/ojluni/src/main/java/javax/net/ssl/SSLException.java
Patch:
@@ -26,6 +26,7 @@
 
 package javax.net.ssl;
 
+import com.google.j2objc.annotations.ReflectionSupport;
 import java.io.IOException;
 
 /**
@@ -36,6 +37,7 @@
  * @since 1.4
  * @author David Brownell
  */
+@ReflectionSupport(value = ReflectionSupport.Level.FULL)
 public
 class SSLException extends IOException
 {

File: annotations/src/main/java/com/google/j2objc/annotations/WeakOuter.java
Patch:
@@ -1,6 +1,4 @@
 /*
- * Copyright 2012 Google Inc. All Rights Reserved.
- *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
@@ -18,6 +16,7 @@
 
 import static java.lang.annotation.ElementType.LOCAL_VARIABLE;
 import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import java.lang.annotation.Retention;
@@ -32,7 +31,7 @@
  *
  * @author Tom Ball
  */
-@Target({TYPE, LOCAL_VARIABLE})
+@Target({TYPE, TYPE_USE, LOCAL_VARIABLE})
 @Retention(SOURCE)
 public @interface WeakOuter {
 }

File: translator/src/main/java/com/google/devtools/j2objc/javac/JavacParser.java
Patch:
@@ -155,6 +155,7 @@ private List<String> getJavacOptions(boolean processAnnotations) {
     } else {
       javacOptions.add("-proc:none");
     }
+    javacOptions.addAll(options.getExtraJavacParserFlags());
     return javacOptions;
   }
 

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/lang/reflect/MethodTest.java
Patch:
@@ -306,7 +306,6 @@ public void testStaticInterfaceMethod_getDeclaredMethod() throws Exception {
         assertEquals(InterfaceWithStatic.class, declaredMethod.getDeclaringClass());
     }
 
-    /* J2ObjC: enable and fix.
     public void testStaticInterfaceMethod_invoke() throws Exception {
         String interfaceWithStaticClassName = InterfaceWithStatic.class.getName();
         assertEquals(interfaceWithStaticClassName, InterfaceWithStatic.staticMethod());
@@ -322,7 +321,7 @@ public void testStaticInterfaceMethod_setAccessible() throws Exception {
         method.setAccessible(false);
         // No effect expected.
         assertEquals(interfaceWithStaticClassName, method.invoke(null));
-    } */
+    }
 
     // Default method reflection.
 

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/util/stream/AbstractPipeline.java
Patch:
@@ -24,6 +24,7 @@
  */
 package java.util.stream;
 
+import com.google.j2objc.annotations.Weak;
 import java.util.Objects;
 import java.util.Spliterator;
 import java.util.function.IntFunction;
@@ -80,12 +81,14 @@ public abstract class AbstractPipeline<E_IN, E_OUT, S extends BaseStream<E_OUT,
      * stage).
      */
     @SuppressWarnings("rawtypes")
+    @Weak
     private final AbstractPipeline sourceStage;
 
     /**
      * The "upstream" pipeline, or null if this is the source stage.
      */
     @SuppressWarnings("rawtypes")
+    @Weak
     private final AbstractPipeline previousStage;
 
     /**

File: translator/src/test/java/com/google/devtools/j2objc/J2ObjCTest.java
Patch:
@@ -283,7 +283,8 @@ public void testSpecifiedAnnotationProcessingBypass() throws Exception {
     assertErrorCount(0);
 
     assertSpecifiedAnnotationProcessorOutput();
-    assertFalse("Overridden processor generated output", getTempFile("ProcessingResult.h").exists());
+    assertFalse("Overridden processor generated output",
+        getTempFile("ProcessingResult.h").exists());
   }
 
   // Test for warning if compiling jar with -g.

File: jre_emul/android/platform/libcore/ojluni/src/test/java/time/test/java/time/format/TestDateTimeFormatterBuilder.java
Patch:
@@ -979,7 +979,7 @@ public static Object[][] localizedDateTimePatterns() {
     public void test_getLocalizedDateTimePattern(FormatStyle dateStyle, FormatStyle timeStyle,
             Chronology chrono, Locale locale, String expected) {
         String actual = DateTimeFormatterBuilder.getLocalizedDateTimePattern(dateStyle, timeStyle, chrono, locale);
-        assertEquals(actual, expected, "Pattern " + convertNonAscii(actual));
+        assertEquals("Pattern " + convertNonAscii(actual), actual, expected);
     }
 
     @Test(expected=java.lang.IllegalArgumentException.class)

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -345,7 +345,7 @@ protected void printCompanionClassDeclaration() {
       return;
     }
     printf("\n@interface %s : NSObject", typeName);
-    if (ElementUtil.isRuntimeAnnotation(typeElement)) {
+    if (ElementUtil.isGeneratedAnnotation(typeElement)) {
       // Print annotation implementation interface.
       printf(" < %s >", typeName);
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -248,7 +248,7 @@ protected boolean needsPublicCompanionClass() {
     }
     return hasInitializeMethod()
         || hasStaticAccessorMethods()
-        || ElementUtil.isRuntimeAnnotation(typeElement)
+        || ElementUtil.isGeneratedAnnotation(typeElement)
         || hasStaticMethods();
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnnotationRewriter.java
Patch:
@@ -62,7 +62,7 @@ public AnnotationRewriter(CompilationUnit unit) {
   @Override
   public void endVisit(AnnotationTypeDeclaration node) {
     TypeElement type = node.getTypeElement();
-    if (!ElementUtil.isRuntimeAnnotation(type)) {
+    if (!ElementUtil.isGeneratedAnnotation(type)) {
       return;
     }
     List<AnnotationTypeMemberDeclaration> members = TreeUtil.getAnnotationMembers(node);

File: translator/src/main/java/com/google/devtools/j2objc/translate/DeadCodeEliminator.java
Patch:
@@ -75,7 +75,7 @@ public void endVisit(EnumDeclaration node) {
   @Override
   public void endVisit(AnnotationTypeDeclaration node) {
     TypeElement type = node.getTypeElement();
-    if (!ElementUtil.isRuntimeAnnotation(type)) {
+    if (!ElementUtil.isGeneratedAnnotation(type)) {
       eliminateDeadCode(type, node);
     }
   }
@@ -236,7 +236,7 @@ public static void removeDeadClasses(CompilationUnit unit, CodeReferenceMap dead
     while (iter.hasNext()) {
       AbstractTypeDeclaration type = iter.next();
       TypeElement typeElement = type.getTypeElement();
-      if (!ElementUtil.isRuntimeAnnotation(typeElement)) {
+      if (!ElementUtil.isGeneratedAnnotation(typeElement)) {
         if (deadCodeMap.containsClass(typeElement, elementUtil)) {
           type.setDeadClass(true);
         } else {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -609,9 +609,9 @@ public void testAnnotationWithField() throws IOException {
     assertTranslation(translation, "#define Test_I 5");
     assertTranslation(translation, "FOUNDATION_EXPORT NSString *Test_FOO;");
     assertTranslation(translation, "J2OBJC_STATIC_FIELD_OBJ_FINAL(Test, FOO, NSString *)");
+    assertTranslation(translation, "@interface Test : NSObject");
     translation = getTranslatedFile("Test.m");
     assertTranslation(translation, "NSString *Test_FOO = @\"foo\";");
-    assertTranslation(translation, "@interface Test : NSObject");
   }
 
   public void testCombinedGeneration() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -437,7 +437,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     function.setBody(TreeUtil.remove(method.getBody()));
 
-    if (ElementUtil.isStatic(elem)) {
+    if (ElementUtil.isStatic(elem) || ElementUtil.isDefault(elem)) {
       // Add class initialization invocation, since this may be the first use of this class.
       String initName = UnicodeUtils.format("%s_initialize", nameTable.getFullName(declaringClass));
       TypeMirror voidType = typeUtil.getVoid();

File: jre_emul/Classes/com/google/j2objc/net/ssl/IosSslSocketFactory.java
Patch:
@@ -41,7 +41,7 @@ public Socket createSocket(Socket s, String host, int port, boolean autoClose)
 
   @Override
   public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
-    throw new UnsupportedOperationException();
+    return new IosSslSocket(host, port);
   }
 
   @Override

File: jre_emul/stub_classes/com/google/j2objc/net/ssl/IosSslSocket.java
Patch:
@@ -25,6 +25,8 @@
  */
 public class IosSslSocket extends SSLSocket {
 
+  public IosSslSocket(String host, int port) {}
+
   @Override
   public String[] getSupportedCipherSuites() {
     return new String[0];

File: jre_emul/android/platform/libcore/ojluni/src/main/java/sun/misc/Unsafe.java
Patch:
@@ -475,7 +475,8 @@ public void unpark(Object obj) {
      * Allocates an instance of the given class without running the constructor.
      * The class' <clinit> will be run, if necessary.
      */
-    public native Object allocateInstance(Class<?> c);
+    // j2objc: added throws to match OpenJDK signature.
+    public native Object allocateInstance(Class<?> c) throws InstantiationException;
 
     public native int addressSize();
 

File: translator/src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -127,7 +127,6 @@ public static void run(List<String> fileArgs, Options options) {
       TranslationProcessor translationProcessor =
           new TranslationProcessor(parser, loadDeadCodeMap());
       translationProcessor.processInputs(inputs);
-      translationProcessor.processBuildClosureDependencies();
       if (ErrorUtil.errorCount() > 0) {
         return;
       }

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/GenerationBatch.java
Patch:
@@ -52,8 +52,7 @@ public class GenerationBatch {
   public GenerationBatch(Options options){
     this.options = options;
     if (options.globalCombinedOutput() != null) {
-      globalCombinedUnit = GenerationUnit.newCombinedJarUnit(
-          options.globalCombinedOutput(), options);
+      globalCombinedUnit = options.globalCombinedOutput().globalGenerationUnit();
     }
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/pipeline/TranslationProcessorTest.java
Patch:
@@ -36,7 +36,6 @@ public void testSingleSourceFileBuildClosure() throws IOException {
     batch.addSource(new RegularInputFile(getTempDir() + "/Test.java", "Test.java"));
     TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(options), null);
     processor.processInputs(batch.getInputs());
-    processor.processBuildClosureDependencies();
 
     String translation = getTranslatedFile("Test.h");
     assertTranslation(translation, "@interface Test");
@@ -60,7 +59,6 @@ public void testDuplicateSourceFileOnSourcepath() throws IOException {
     batch.addSource(new RegularInputFile(getTempDir() + "/src/main/java/Foo.java", "Foo.java"));
     TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(options), null);
     processor.processInputs(batch.getInputs());
-    processor.processBuildClosureDependencies();
 
     String translation = getTranslatedFile("Foo.h");
     assertTranslation(translation, "- (void)foo2;");
@@ -80,7 +78,6 @@ public void testEntryClasses() throws IOException {
     GenerationBatch batch = new GenerationBatch(options);
     TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(options), null);
     processor.processInputs(batch.getInputs());
-    processor.processBuildClosureDependencies();
 
     // Assert B entry class was compiled.
     assertTrue(new File(tempDir, "B.m").exists());

File: translator/src/main/java/com/google/devtools/j2objc/translate/ExternalAnnotationInjector.java
Patch:
@@ -105,7 +105,7 @@ private void endVisitAbstractTypeDeclaration() {
   private void injectAnnotations(MethodDeclaration node, Set<Annotation> annotations) {
     ExecutableElement element = node.getExecutableElement();
     GeneratedExecutableElement generatedElement =
-        GeneratedExecutableElement.newMappedMethod(nameTable.getMethodSelector(element), element);
+        GeneratedExecutableElement.mutableCopy(nameTable.getMethodSelector(element), element);
     for (Annotation externalAnnotation : annotations) {
       generatedElement.addAnnotationMirror(
           new GeneratedAnnotationMirror(externalAnnotation.def.name));

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -107,7 +107,7 @@ protected void save(String path) {
         source += '\n';
       }
 
-      Files.write(source, outputFile, unit.options().fileUtil().getCharset());
+      Files.asCharSink(outputFile, unit.options().fileUtil().getCharset()).write(source);
     } catch (IOException e) {
       ErrorUtil.error(e.getMessage());
     } finally {

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/InputFilePreprocessor.java
Patch:
@@ -103,7 +103,8 @@ private void processRegularSource(ProcessingContext input) throws IOException {
       String relativePath = qualifiedName.replace('.', File.separatorChar) + ".java";
       File strippedFile = new File(strippedDir, relativePath);
       Files.createParentDirs(strippedFile);
-      Files.write(parseResult.getSource(), strippedFile, options.fileUtil().getCharset());
+      Files.asCharSink(strippedFile, options.fileUtil().getCharset())
+          .write(parseResult.getSource());
       input.setFile(new RegularInputFile(strippedFile.getPath(), relativePath));
     }
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -327,7 +327,7 @@ private void addExtraNativeDecls(EnumDeclaration node) {
     int numConstants = node.getEnumConstants().size();
 
     // The native type is not declared for an empty enum.
-    if (options.swiftFriendly() && numConstants > 0) {
+    if (options.staticAccessorMethods() && numConstants > 0) {
       String nativeName = NameTable.getNativeEnumName(typeName);
       node.addBodyDeclaration(NativeDeclaration.newInnerDeclaration(
           UnicodeUtils.format("- (%s)toNSEnum;\n", nativeName),

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -381,8 +381,6 @@ protected void printProperties() {
             attributes.add("nullable");
           } else if (ElementUtil.isNonnull(varElement, parametersNonnullByDefault)) {
             attributes.add("nonnull");
-          } else if (!attributes.contains("null_unspecified")) {
-            attributes.add("null_resettable");
           }
         }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeDeclarationGeneratorTest.java
Patch:
@@ -493,9 +493,9 @@ public void testPropertyNullability() throws IOException {
 
     assertTranslatedLines(translation,
         "@property (copy, nullable) NSString *test;",
-        "@property (copy, null_resettable) NSString *test2;",
+        "@property (copy) NSString *test2;",
         "@property (copy, nonnull) NSString *test3;",
-        "@property (copy, nonatomic, null_resettable) NSString *test4;");
+        "@property (copy, nonatomic) NSString *test4;");
 
     // Verify explicit nullability parameters override default.
     assertTranslatedLines(translation,

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/Options.java
Patch:
@@ -206,7 +206,7 @@ public static Options parse(String[] args) throws IOException {
           }
           // TODO(tball): remove when Java 10 source is supported.
           if (options.sourceVersion == SourceVersion.JAVA_10) {
-            ErrorUtil.warning("Java 10 source version is not supported, using Java 10.");
+            ErrorUtil.warning("Java 10 source version is not supported, using Java 8.");
             options.sourceVersion = SourceVersion.JAVA_8;
           }
         } catch (IllegalArgumentException e) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -230,7 +230,7 @@ private void printTypeLiteralImplementation() {
   }
 
   private void printNameMapping() {
-    if (!options.stripClassNameMapping()) {
+    if (!options.stripNameMapping()) {
       Optional<String> mapping = nameTable.getNameMapping(typeElement, typeName);
       if (mapping.isPresent()) {
         newline();

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -703,7 +703,7 @@ public Optional<String> getNameMapping(TypeElement typeElement, String typeName)
       String packageName = packageElement.getQualifiedName().toString();
       String mappedPackageName = getPrefix(packageElement);
       return Optional.of(
-          String.format(mappingFormat, mappedPackageName, packageName, mappedPackageName));
+          String.format(mappingFormat, typeName, packageName, mappedPackageName));
     }
 
     return Optional.empty();

File: jre_emul/stub_classes/java/lang/reflect/Method.java
Patch:
@@ -36,7 +36,7 @@ public int getModifiers() {
     return 0;
   }
 
-  public Class getReturnType() {
+  public Class<?> getReturnType() {
     return null;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -65,7 +65,8 @@ public class Options {
   private boolean segmentedHeaders = true;
   private boolean jsniWarnings = true;
   private boolean buildClosure = false;
-  private EnumSet<MetadataSupport> includedMetadata = EnumSet.allOf(MetadataSupport.class);
+  private EnumSet<MetadataSupport> includedMetadata =
+      EnumSet.of(MetadataSupport.FULL, MetadataSupport.ENUM_CONSTANTS);
   private boolean emitWrapperMethods = true;
   private boolean extractUnsequencedModifications = true;
   private boolean docCommentsEnabled = false;

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -684,6 +684,7 @@ public void testPackageInfoDocNoAnnotation() throws IOException {
   }
 
   public void testPackageInfoPrefixAnnotation() throws IOException {
+    options.setStripClassNameMapping(false);
     addSourcesToSourcepaths();
     addSourceFile(
         "@ObjectiveCName(\"FBM\")\n"
@@ -703,6 +704,7 @@ public void testPackageInfoPrefixAnnotation() throws IOException {
   }
 
   public void testPackageInfoPreprocessing() throws IOException {
+    options.setStripClassNameMapping(false);
     addSourceFile(
         "@ObjectiveCName(\"FBM\")\n"
         + "package foo.bar.mumble;\n"
@@ -722,6 +724,7 @@ public void testPackageInfoPreprocessing() throws IOException {
   }
 
   public void testPackageInfoOnClasspath() throws IOException {
+    options.setStripClassNameMapping(false);
     addSourceFile(
         "@ObjectiveCName(\"FBM\")\n"
         + "package foo.bar.mumble;\n"

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -729,6 +729,7 @@ public static String getQualifiedName(TypeMirror t) {
       case INT:
       case LONG:
       case SHORT:
+      case TYPEVAR:
       case VOID:
         return getName(t);
       default:

File: translator/src/main/java/com/google/devtools/j2objc/util/ErrorUtil.java
Patch:
@@ -119,7 +119,7 @@ public static void parserDiagnostic(Diagnostic<? extends JavaFileObject> diagnos
       return;
     }
     String msg;
-    if (CLANG_STYLE_ERROR_MSG) {
+    if (CLANG_STYLE_ERROR_MSG && diagnostic.getSource() != null) {
       msg = String.format("error: %s:%d: %s", diagnostic.getSource().getName(),
           diagnostic.getLineNumber(), diagnostic.getMessage(null).trim());
     } else {

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Posix.java
Patch:
@@ -53,6 +53,8 @@ public final class Posix implements Os {
   Posix() { }
 
   /*-[
+  #pragma clang diagnostic push
+  #pragma clang diagnostic ignored "-Wunused-function"
   static LibcoreIoStructStat *makeStructStat(const struct stat *sb) {
       return AUTORELEASE([[LibcoreIoStructStat alloc]
                           initWithLong:sb->st_dev
@@ -140,6 +142,7 @@ BOOL setBlocking(int fd, bool blocking) {
     }
     return [path fileSystemRepresentation];
   }
+  #pragma clang diagnostic pop
   ]-*/
 
   static void throwErrnoException(String message, int errorCode) throws ErrnoException {

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -706,6 +706,7 @@ public TypeMirror getType(Element element) {
    */
   public static boolean isNonnull(Element element, boolean parametersNonnullByDefault) {
     return hasNonnullAnnotation(element)
+        || isConstructor(element)  // Java constructors are always non-null.
         || (isParameter(element)
             && parametersNonnullByDefault
             && !((VariableElement) element).asType().getKind().isPrimitive());

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -706,7 +706,6 @@ public TypeMirror getType(Element element) {
    */
   public static boolean isNonnull(Element element, boolean parametersNonnullByDefault) {
     return hasNonnullAnnotation(element)
-        || isConstructor(element)  // Java constructors are always non-null.
         || (isParameter(element)
             && parametersNonnullByDefault
             && !((VariableElement) element).asType().getKind().isPrimitive());

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -706,6 +706,7 @@ public TypeMirror getType(Element element) {
    */
   public static boolean isNonnull(Element element, boolean parametersNonnullByDefault) {
     return hasNonnullAnnotation(element)
+        || isConstructor(element)  // Java constructors are always non-null.
         || (isParameter(element)
             && parametersNonnullByDefault
             && !((VariableElement) element).asType().getKind().isPrimitive());

File: jre_emul/android/platform/libcore/luni/src/main/java/java/util/concurrent/ConcurrentSkipListMap.java
Patch:
@@ -502,7 +502,7 @@ V getValidValue() {
          */
         AbstractMap.SimpleImmutableEntry<K,V> createSnapshot() {
             Object v = value;
-            if (v == null || v == this || v == BASE_HEADER)
+            if (v == null || v == sentinel() || v == BASE_HEADER)
                 return null;
             @SuppressWarnings("unchecked") V vv = (V)v;
             return new AbstractMap.SimpleImmutableEntry<K,V>(key, vv);

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/util/Collections.java
Patch:
@@ -2290,7 +2290,7 @@ private static class SynchronizedMap<K,V>
 
         SynchronizedMap(Map<K,V> m) {
             this.m = Objects.requireNonNull(m);
-            mutex = this;
+            mutex = new Object();
         }
 
         SynchronizedMap(Map<K,V> m, Object mutex) {

File: translator/src/main/java/com/google/devtools/j2objc/javac/MethodTranslator.java
Patch:
@@ -149,7 +149,7 @@ private TypeMirror resolve(TypeReference typeRef) {
       return parserEnv.resolvePrimitiveType(typeRef.getSignature());
     }
     String typeName = typeRef.getFullName();
-    Element element = parserEnv.resolve(typeName);
+    Element element = parserEnv.elementUtilities().getTypeElement(typeName);
     // TODO(tball): element is raw, any support for type parameters needed?
     return element.asType();
   }

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/FileProcessor.java
Patch:
@@ -159,8 +159,6 @@ private void processCompiledSource(ProcessingContext input,
     } catch (Throwable t) {
       // Report any uncaught exceptions.
       ErrorUtil.fatalError(t, input.getOriginalSourcePath());
-    } finally {
-      unit.getEnv().reset();
     }
   }
 

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/util/Timer.java
Patch:
@@ -24,6 +24,8 @@
  */
 
 package java.util;
+
+import com.google.j2objc.annotations.AutoreleasePool;
 import java.util.Date;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -516,7 +518,7 @@ public void run() {
      * The main timer loop.  (See class comment.)
      */
     private void mainLoop() {
-        while (true) {
+        for (@AutoreleasePool int i = 0;;) {
             try {
                 TimerTask task;
                 boolean taskFired;

File: jre_emul/Classes/com/google/j2objc/security/IosRSAKey.java
Patch:
@@ -339,6 +339,9 @@ private static native long createPrivateSecKeyRef(byte[] bytes) /*-[
       }
 
       // Store key in keychain.
+      // Set kSecAttrAccessible to Always, since this fails when the app launches before the phone
+      // is unlocked (b/72042384).
+      keyQuery[(id)kSecAttrAccessible] = (id)kSecAttrAccessibleAlways;
       keyQuery[(id)kSecAttrCanDecrypt] = (id)kCFBooleanTrue;
       keyQuery[(id)kSecAttrCanDerive] = (id)kCFBooleanTrue;
       keyQuery[(id)kSecAttrCanEncrypt] = (id)kCFBooleanTrue;

File: translator/src/main/java/com/google/devtools/j2objc/util/ProGuardUsageParser.java
Patch:
@@ -166,7 +166,9 @@ private void handleField(String line) throws IOException {
 
       @Override
       public boolean processLine(String line) throws IOException {
-        if (line.startsWith("ProGuard, version") || line.startsWith("Reading ")) {
+        if (line.startsWith("ProGuard, version")
+            || line.startsWith("Reading ")
+            || line.startsWith("    processed in")) {
           // ignore output header
         } else if (!line.startsWith("    ")) {
           handleClass(line);

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/util/logging/Level.java
Patch:
@@ -69,7 +69,8 @@
  */
 
 public class Level implements java.io.Serializable {
-    private static String defaultBundle = "sun.util.logging.resources.logging";
+    // j2objc: disable level name localization to reduce app size.
+    private static String defaultBundle = /* "sun.util.logging.resources.logging" */ null;
 
     /**
      * @serial  The non-localized name of the level.

File: jre_emul/Classes/com/google/j2objc/security/IosRSAKey.java
Patch:
@@ -364,8 +364,7 @@ private static native long createPrivateSecKeyRef(byte[] bytes) /*-[
       if (secKeyRef == NULL) {
         // Try again, my way.
         // Convert a PKCS#8 key to PKCS#1 key by stripping off the header.
-        NSData *pkcs1Key = [[privateKey subdataWithRange:NSMakeRange(26, [privateKey length] - 26)]
-            autorelease];
+        NSData *pkcs1Key = [privateKey subdataWithRange:NSMakeRange(26, [privateKey length] - 26)];
 
         keyQuery[(id)kSecAttrKeyType] = (id)kSecAttrKeyTypeRSA;
         keyQuery[(id)kSecAttrKeyClass] = (id)kSecAttrKeyClassPrivate;

File: translator/src/main/java/com/google/devtools/j2objc/javac/ClassFileConverter.java
Patch:
@@ -120,8 +120,7 @@ private ClassFileConverter(JavacEnvironment parserEnv, TranslationEnvironment tr
    */
   private void setClassPath() throws IOException {
     String fullPath = file.getAbsolutePath();
-    String relativePath = classFile.getFullName().replace('.',  '/') + ".class";
-    String rootPath = fullPath.substring(0, fullPath.lastIndexOf(relativePath));
+    String rootPath = fullPath.substring(0, fullPath.lastIndexOf(classFile.getRelativePath()));
     List<File> classPath = new ArrayList<>();
     classPath.add(new File(rootPath));
     parserEnv.fileManager().setLocation(StandardLocation.CLASS_PATH, classPath);

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -739,7 +739,8 @@ private TreeNode convertFieldAccess(JCTree.JCFieldAccess node) {
       }
     }
     if (ElementUtil.isConstant((VariableElement) node.sym) && ElementUtil.isStatic(node.sym)
-        && !(selected.getKind() == Kind.METHOD_INVOCATION)) {
+        && !(selected.getKind() == Kind.METHOD_INVOCATION)
+        && !(selected.getKind() == Kind.MEMBER_SELECT)) {
       return new QualifiedName()
           .setName(convertSimpleName(node.sym, node.type, pos))
           .setQualifier((Name) convert(selected))

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -495,7 +495,7 @@ private List<String> getPathArgument(String argument, boolean expandAarFiles) {
         f = fileUtil().extractClassesJarFromAarFile(f);
       }
       if (f.exists()) {
-        entries.add(entry);
+        entries.add(f.toString());
       }
     }
     return entries;

File: jre_emul/Tests/com/google/j2objc/ReflectionTests.java
Patch:
@@ -26,8 +26,8 @@ public class ReflectionTests {
     com.google.j2objc.ArrayTest.class,
     com.google.j2objc.ClassTest.class,
     com.google.j2objc.ReflectionTest.class,
+    com.google.j2objc.reflect.ProxyTest.class,
     java.lang.reflect.MethodTest.class,
-    java.lang.reflect.ProxyTest.class,
     libcore.java.lang.CharacterTest.class,
     libcore.java.lang.reflect.AnnotationsTest.class,
     libcore.java.lang.reflect.ArrayTest.class,
@@ -50,6 +50,7 @@ public class ReflectionTests {
     org.apache.harmony.tests.java.lang.reflect.MethodTest.class,
     org.apache.harmony.tests.java.lang.reflect.ModifierTest.class,
     org.apache.harmony.tests.java.lang.reflect.ParameterizedTypeTest.class,
+    org.apache.harmony.tests.java.lang.reflect.ProxyTest.class,
     org.apache.harmony.tests.java.lang.reflect.TypeVariableTest.class,
     org.apache.harmony.tests.java.lang.reflect.UndeclaredThrowableExceptionTest.class,
     org.apache.harmony.tests.java.lang.reflect.WildcardTypeTest.class,

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/net/URL.java
Patch:
@@ -1189,8 +1189,8 @@ static URLStreamHandler getURLStreamHandler(String protocol) {
             if (handler == null) {
                 try {
                     if (protocol.equals("file")) {
-                        handler = (URLStreamHandler)Class.
-                            forName("sun.net.www.protocol.file.Handler").newInstance();
+                        // https://github.com/google/j2objc/issues/912
+                        handler = new sun.net.www.protocol.file.Handler();
                     } else if (protocol.equals("jar")) {
                       throw new UnsupportedOperationException("Jar streams are not supported.");
                     } else if (protocol.equals("http")) {

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/lang/reflect/AnnotatedElement.java
Patch:
@@ -103,7 +103,7 @@
  * <caption>Overview of kind of presence detected by different AnnotatedElement methods</caption>
  * <tr><th colspan="2"></th><th colspan="4">Kind of Presence</th>
  * <tr><th colspan="2">Method</th><th>Directly Present</th><th>Indirectly Present</th><th>Present</th><th>Associated</th>
- * <tr><td align=right>{@code T}</td><td>{@link #getAnnotation(Class) getAnnotation(Class&lt;T&gt;)}
+ * <tr><td align="right">{@code T}</td><td>{@link #getAnnotation(Class) getAnnotation(Class&lt;T&gt;)}
  * <td></td><td></td><td>X</td><td></td>
  * </tr>
  * <tr><td align="right">{@code Annotation[]}</td><td>{@link #getAnnotations getAnnotations()}

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -202,9 +202,9 @@ private void addNonArcInitialization(EnumDeclaration node) {
       }
 
       initStatements.add(new ExpressionStatement(new CommaExpression(
-          new CastExpression(voidType,new ParenthesizedExpression(new Assignment(new SimpleName(varElement), new Assignment(
-          new SimpleName(localEnum), new NativeExpression(UnicodeUtils.format(
-              "objc_constructInstance(%s, (void *)ptr)", classExpr), type.asType()))))),
+          new CastExpression(voidType,new ParenthesizedExpression(new Assignment(new SimpleName(
+          varElement), new Assignment(new SimpleName(localEnum), new NativeExpression(UnicodeUtils
+          .format("objc_constructInstance(%s, (void *)ptr)", classExpr),type.asType()))))),
           new NativeExpression("ptr += " + sizeName, voidType))));
       String initName = nameTable.getFullFunctionName(methodElement);
       FunctionElement initElement = new FunctionElement(initName, voidType, valueType)

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -202,9 +202,9 @@ private void addNonArcInitialization(EnumDeclaration node) {
       }
 
       initStatements.add(new ExpressionStatement(new CommaExpression(
-          new CastExpression(voidType,new ParenthesizedExpression(new Assignment(new SimpleName(varElement), new Assignment(
-          new SimpleName(localEnum), new NativeExpression(UnicodeUtils.format(
-              "objc_constructInstance(%s, (void *)ptr)", classExpr), type.asType()))))),
+          new CastExpression(voidType,new ParenthesizedExpression(new Assignment(new SimpleName(
+          varElement), new Assignment(new SimpleName(localEnum), new NativeExpression(UnicodeUtils
+          .format("objc_constructInstance(%s, (void *)ptr)", classExpr),type.asType()))))),
           new NativeExpression("ptr += " + sizeName, voidType))));
       String initName = nameTable.getFullFunctionName(methodElement);
       FunctionElement initElement = new FunctionElement(initName, voidType, valueType)

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/Options.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.io.Files;
 import com.google.common.io.Resources;
+import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.SourceVersion;
 import com.google.devtools.j2objc.util.Version;
 import java.io.BufferedReader;
@@ -200,7 +201,8 @@ public static Options parse(String[] args) throws IOException {
           options.sourceVersion = SourceVersion.parse(args[nArg]);
           // TODO(tball): remove when Java 9 source is supported.
           if (options.sourceVersion == SourceVersion.JAVA_9) {
-            usage("Java 9 source version is not currently supported.");
+            ErrorUtil.warning("Java 9 source version is not supported, using Java 8.");
+            options.sourceVersion = SourceVersion.JAVA_8;
           }
         } catch (IllegalArgumentException e) {
           usage("invalid source release: " + args[nArg]);

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -384,7 +384,8 @@ private void processArg(Iterator<String> args) throws IOException {
           sourceVersion = SourceVersion.parse(s);
           // TODO(tball): remove when Java 9 source is supported.
           if (sourceVersion == SourceVersion.JAVA_9) {
-            usage("Java 9 source version is not currently supported.");
+            ErrorUtil.warning("Java 9 source version is not supported, using Java 8.");
+            sourceVersion = SourceVersion.JAVA_8;
           }
         } catch (IllegalArgumentException e) {
           usage("invalid source release: " + s);

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -257,7 +257,7 @@ protected void printFunctionDeclaration(FunctionDeclaration function) {
       printJniFunctionAndWrapper(function);
     } else {
       String functionBody = generateStatement(function.getBody());
-      println(getFunctionSignature(function) + " " + reindent(functionBody));
+      println(getFunctionSignature(function, false) + " " + reindent(functionBody));
     }
   }
 
@@ -293,7 +293,7 @@ private void printJniFunctionAndWrapper(FunctionDeclaration function) {
     println(";\n");
 
     // Generate a wrapper function that calls the matching JNI function.
-    print(getFunctionSignature(function));
+    print(getFunctionSignature(function, false));
     println(" {");
     print("  ");
     TypeMirror returnType = function.getReturnType().getTypeMirror();

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -96,7 +96,7 @@ protected void printFunctionDeclaration(FunctionDeclaration function) {
     if (!Modifier.isNative(function.getModifiers())) {
       print("__attribute__((unused)) static ");
     }
-    print(getFunctionSignature(function));
+    print(getFunctionSignature(function, true));
     if (function.returnsRetained()) {
       print(" NS_RETURNS_RETAINED");
     }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGeneratorTest.java
Patch:
@@ -140,15 +140,15 @@ public void testReservedNames() throws IOException {
         + "public static final int INCLUDE_ALL = 2;"
         + "static class Inner { public static final int RESTRICT = 3; } }", "Test", "Test.h");
     assertTranslatedLines(translation,
-        "inline jint Test_get_INCLUDE();",
+        "inline jint Test_get_INCLUDE(void);",
         "#define Test_INCLUDE 1",
         "J2OBJC_STATIC_FIELD_CONSTANT(Test, INCLUDE, jint)");
     assertTranslatedLines(translation,
-        "inline jint Test_get_INCLUDE_ALL();",
+        "inline jint Test_get_INCLUDE_ALL(void);",
         "#define Test_INCLUDE_ALL 2",
         "J2OBJC_STATIC_FIELD_CONSTANT(Test, INCLUDE_ALL, jint)");
     assertTranslatedLines(translation,
-        "inline jint Test_Inner_get_RESTRICT();",
+        "inline jint Test_Inner_get_RESTRICT(void);",
         "#define Test_Inner_RESTRICT 3",
         "J2OBJC_STATIC_FIELD_CONSTANT(Test_Inner, RESTRICT, jint)");
   }

File: translator/src/test/java/com/google/devtools/j2objc/translate/DefaultMethodsTest.java
Patch:
@@ -79,7 +79,7 @@ public void testBasicDefaultMethodUsage() throws IOException {
 
     assertTranslation(header, "void A_f(id<A> self)");
     assertTranslation(header, "jint A_g(id<A> self)");
-    assertTranslation(header, "void A_q()");
+    assertTranslation(header, "void A_q(void)");
     assertTranslation(header, "id A_rWithInt_withA_(id<A> self, jint x, id<A> b)");
 
     // This is an illegal value for JVM's access_flags field and should never show up in metadata.
@@ -233,7 +233,7 @@ public void testFunctionizedMethodRenaming() throws Exception {
     String header = translateSourceFile(source, "Test", "Test.h");
     String impl = getTranslatedFile("Test.m");
 
-    assertTranslation(header, "P_get_f_()");
+    assertTranslation(header, "P_get_f_(void)");
     assertTranslation(header, "P_f_");
     assertTranslation(header, "void P_f(id<P> self)");
     assertTranslation(impl, "id P_f_;");

File: translator/src/test/java/com/google/devtools/j2objc/translate/PrivateDeclarationResolverTest.java
Patch:
@@ -56,6 +56,6 @@ public void testPrivateBaseClassExposedBySubclass() throws IOException {
     assertTranslation(translation, "jint field_");
     assertTranslation(translation, "- (void)method;");
     assertTranslation(translation, "+ (void)staticMethod;");
-    assertTranslation(translation, "FOUNDATION_EXPORT void Test_Base_staticMethod();");
+    assertTranslation(translation, "FOUNDATION_EXPORT void Test_Base_staticMethod(void);");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/VariableRenamerTest.java
Patch:
@@ -67,7 +67,7 @@ public void testStaticFieldAndMethodCollision() throws IOException {
     assertTranslation(header, "#define Test_foo_ 3");
     assertTranslation(header, "J2OBJC_STATIC_FIELD_CONSTANT(Test, foo_, jint)");
     // The functionized static method is unchanged.
-    assertTranslation(header, "void Test_foo();");
+    assertTranslation(header, "void Test_foo(void);");
     // Test static field and non-static method collision.
     assertTranslation(impl, "jint Test_bar_");
     assertTranslation(impl, "void Test_bar(Test *self)");

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -270,7 +270,7 @@ public void testRenamePackageAnnotationEnum() throws IOException {
         "  FBTest_Enum_BAR = 1,",
         "};");
     assertTranslation(translation, "@interface FBTest : JavaLangEnum");
-    assertTranslation(translation, "FBTest_values()");
+    assertTranslation(translation, "FBTest_values(void);");
     assertTranslation(translation, "+ (FBTest *)valueOfWithNSString:(NSString *)name;");
     assertTranslation(translation, "FBTest *FBTest_valueOfWithNSString_");
     assertTranslation(translation, "J2OBJC_STATIC_INIT(FBTest)");

File: annotations/src/main/java/com/google/j2objc/annotations/ObjectiveCName.java
Patch:
@@ -24,7 +24,7 @@
  * constructor or package declaration should be when translated.
  *
  * <p>For packages add the annotation to the package declaration in a package-info.java file to
- * specify the desired package prefix. Alternativesly, package prefixes may be specified using the
+ * specify the desired package prefix. Alternatively, package prefixes may be specified using the
  * {@code --prefix} or {@code --prefixes} flags when invoking j2objc.
  *
  * <p>For classes specify the desired Objective-C class name for the translated type.

File: jre_emul/android/platform/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/javax/net/ssl/SSLEngineResultStatusTest.java
Patch:
@@ -37,7 +37,7 @@ public void test_SSLEngineResultStatus_values() {
             for (int i = 0; i < enS.length; i++) {
                 flag = false;
                 for (int j = 0; j < str.length; j++) {
-                    if (enS[i].toString() == str[j]) {
+                    if (enS[i].toString().equals(str[j])) {
                         flag = true;
                         break;
                     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -291,6 +291,9 @@ private String generateFieldMetadata(VariableElement var, String annotationsFunc
         // Don't print Java name if it matches the default pattern, to conserve space.
         javaName = null;
       }
+      if ((ElementUtil.isEnumConstant(var) && options.stripEnumConstants())) {
+        objcName = null;
+      }
       String staticRef = null;
       String constantValue;
       if (ElementUtil.isPrimitiveConstant(var)) {

File: annotations/src/main/java/com/google/j2objc/annotations/ObjectiveCName.java
Patch:
@@ -24,7 +24,7 @@
  * constructor or package declaration should be when translated.
  *
  * <p>For packages add the annotation to the package declaration in a package-info.java file to
- * specify the desired package prefix. Alternativesly, package prefixes may be specified using the
+ * specify the desired package prefix. Alternatively, package prefixes may be specified using the
  * {@code --prefix} or {@code --prefixes} flags when invoking j2objc.
  *
  * <p>For classes specify the desired Objective-C class name for the translated type.

File: annotations/src/main/java/com/google/j2objc/annotations/ObjectiveCName.java
Patch:
@@ -24,7 +24,7 @@
  * constructor or package declaration should be when translated.
  *
  * <p>For packages add the annotation to the package declaration in a package-info.java file to
- * specify the desired package prefix. Alternativesly, package prefixes may be specified using the
+ * specify the desired package prefix. Alternatively, package prefixes may be specified using the
  * {@code --prefix} or {@code --prefixes} flags when invoking j2objc.
  *
  * <p>For classes specify the desired Objective-C class name for the translated type.

File: jre_emul/android/platform/libcore/xml/src/main/java/org/xmlpull/v1/sax2/Driver.java
Patch:
@@ -421,7 +421,8 @@ public void parseSubTree(XmlPullParser pp) throws SAXException, IOException {
                             }
                             contentHandler.endElement(pp.getNamespace(),
                                                       name,
-                                                      prefix != null ? name : rawName.toString()
+                                                      // TODO Fixed this. Was "not equals".
+                                                      prefix == null ? name : rawName.toString()
                                                      );
                             // when entering show prefixes for all levels!!!!
                             final int depth = pp.getDepth();

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -684,7 +684,7 @@ private TreeNode copyConstantValue(JCTree node, Expression newNode) {
         default:  // value doesn't need to be changed.
       }
     }
-    return newNode.setConstantValue(value);
+    return value != null ? newNode.setConstantValue(value) : newNode;
   }
 
   private TreeNode convertExpressionStatement(JCTree.JCExpressionStatement node) {

File: translator/src/test/java/com/google/devtools/j2objc/javac/ClassFileConverterTest.java
Patch:
@@ -28,6 +28,7 @@ public class ClassFileConverterTest extends GenerationTest {
   protected void setUp() throws IOException {
     super.setUp();
     options.setTranslateClassfiles(true);
+    enableDebuggingSupport();
   }
 
   public void testEmptyInterface() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -197,8 +197,7 @@ public static TypeElement getDeclaringClass(Element element) {
   }
 
   public static TypeElement getSuperclass(TypeElement element) {
-    TypeMirror supertype = element.getSuperclass();
-    return supertype != null ? TypeUtil.asTypeElement(supertype) : null;
+    return TypeUtil.asTypeElement(element.getSuperclass());
   }
 
   public static List<TypeElement> getInterfaces(TypeElement element) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -179,7 +179,7 @@ private List<String> getInterfaceNames() {
     for (TypeElement intrface : TranslationUtil.getInterfaceTypes(typeNode)) {
       names.add(nameTable.getFullName(intrface));
     }
-    if (ElementUtil.isEnum(typeElement)) {
+    if (ElementUtil.getQualifiedName(typeElement).equals("java.lang.Enum")) {
       names.remove("NSCopying");
       names.add(0, "NSCopying");
     } else if (isInterfaceType()) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -318,9 +318,9 @@ private void printJniFunctionAndWrapper(FunctionDeclaration function) {
 
   @Override
   protected void printNativeDeclaration(NativeDeclaration declaration) {
-    newline();
     String code = declaration.getImplementationCode();
     if (code != null) {
+      newline();
       println(reindent(code));
     }
   }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -488,7 +488,7 @@ public void testEnum() throws IOException {
         "  Color_Enum_WHITE = 1,",
         "  Color_Enum_BLUE = 2,",
         "};");
-    assertTranslation(translation, "@interface Color : JavaLangEnum < NSCopying >");
+    assertTranslation(translation, "@interface Color : JavaLangEnum");
     assertTranslation(translation, "+ (IOSObjectArray *)values;");
     assertTranslation(translation, "+ (Color *)valueOfWithNSString:(NSString *)name;");
     assertTranslation(translation, "FOUNDATION_EXPORT Color *Color_values_[];");
@@ -648,7 +648,7 @@ public void testEnumWithInterfaces() throws IOException {
         + "enum Foo implements I, Runnable, Cloneable { "
         + "A, B, C; public void run() {}}}", "A", "A.h");
     assertTranslation(translation,
-        "@interface A_Foo : JavaLangEnum < NSCopying, A_I, JavaLangRunnable >");
+        "@interface A_Foo : JavaLangEnum < A_I, JavaLangRunnable, NSCopying >");
     assertTranslation(translation, "#include \"java/lang/Runnable.h\"");
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/javac/ClassFileConverter.java
Patch:
@@ -381,7 +381,7 @@ private TreeNode convertEnumConstantDeclaration(VariableElement element) {
   private TypeElement resolve(AstType type) {
     String fqn = type.toTypeReference().getErasedSignature();
     Element element = parserEnv.resolve(fqn);
-    if (element == null || element instanceof TypeElement) {
+    if (element == null || !(element instanceof TypeElement)) {
       throw new AssertionError("failed resolving type: " + fqn);
     }
     return (TypeElement) element;

File: translator/src/main/java/com/google/devtools/j2objc/util/ClassFile.java
Patch:
@@ -83,7 +83,9 @@ public String getName() {
    * Returns the fully-qualified name of the type defined by this class file.
    */
   public String getFullName() {
-    return unit.getPackage().getName() + "." + type.getName();
+    String pkgName = unit.getPackage().getName();
+    String typeName = type.getName();
+    return pkgName.isEmpty() ? typeName : pkgName + "." + typeName;
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/javac/ClassFileConverter.java
Patch:
@@ -305,7 +305,6 @@ private TreeNode convertMethodDeclaration(ExecutableElement element) {
       // to work around potential javac8 bug iterating over parameter names.
       MethodNode asmNode = classFile.getMethodNode(element);
       int nMethodNodes = asmNode.parameters != null ? asmNode.parameters.size() : 0;
-
       for (int i = 0; i < nParams; i++) {
         VariableElement param = element.getParameters().get(i);
         SingleVariableDeclaration varDecl = (SingleVariableDeclaration) convert(param);

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -202,7 +202,7 @@ protected CompilationUnit compileType(String name, String source) {
    * @return the parsed compilation unit
    */
   protected CompilationUnit compileAsClassFile(String name, String source) throws IOException {
-    return compileAsClassFile(name, source, "-parameters", "-g");
+    return compileAsClassFile(name, source, "-parameters", "-cp", tempDir.getAbsolutePath());
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -354,7 +354,8 @@ public void endVisit(MethodDeclaration node) {
         }
       } else {
         // Static methods and constructors, no reflection.
-        if (options.emitWrapperMethods()) {
+        if (options.emitWrapperMethods() && !ElementUtil.isPrivateInnerType(declaringClass)
+            && !ElementUtil.isPrivate(element)) {
           setFunctionCaller(node, element);
         } else {
           node.remove();

File: jre_emul/android/platform/libcore/jsr166-tests/src/test/java/jsr166/ReentrantLockTest.java
Patch:
@@ -939,11 +939,8 @@ public void realRun() {
     public void testInterruptible_awaitTimed_fair() { testInterruptible(true,  AwaitMethod.awaitTimed); }
     public void testInterruptible_awaitNanos()      { testInterruptible(false, AwaitMethod.awaitNanos); }
     public void testInterruptible_awaitNanos_fair() { testInterruptible(true,  AwaitMethod.awaitNanos); }
-    /* TODO(tball): replace with pthread_cancel (b/11536576)
-     * TODO(zgao): enable after b/62378460 is fixed.
     public void testInterruptible_awaitUntil()      { testInterruptible(false, AwaitMethod.awaitUntil); }
     public void testInterruptible_awaitUntil_fair() { testInterruptible(true,  AwaitMethod.awaitUntil); }
-    */
     public void testInterruptible(boolean fair, final AwaitMethod awaitMethod) {
         final PublicReentrantLock lock =
             new PublicReentrantLock(fair);

File: translator/src/main/java/com/google/devtools/j2objc/util/FileUtil.java
Patch:
@@ -13,7 +13,6 @@
  */
 package com.google.devtools.j2objc.util;
 
-import com.google.common.collect.Lists;
 import com.google.common.io.CharStreams;
 import com.google.common.io.Files;
 import com.google.devtools.j2objc.J2ObjC;
@@ -29,6 +28,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.nio.charset.Charset;
+import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Properties;
@@ -46,8 +46,8 @@
 public class FileUtil {
 
   private Set<String> tempDirs = new HashSet<>();
-  private List<String> sourcePathEntries = Lists.newArrayList(".");
-  private List<String> classPathEntries = Lists.newArrayList(".");
+  private List<String> sourcePathEntries = new ArrayList<>();
+  private List<String> classPathEntries = new ArrayList<>();
   private File outputDirectory = new File(".");
   private String fileEncoding = System.getProperty("file.encoding", "UTF-8");
   private Charset charset = Charset.forName(fileEncoding);

File: jre_emul/Tests/com/google/j2objc/security/IosRSASignatureTest.java
Patch:
@@ -21,9 +21,8 @@
 import java.security.spec.RSAPublicKeySpec;
 import junit.framework.TestCase;
 
-
 /**
- * Unit tests for {@link IosRSASignatureTest}.
+ * Unit tests for {@link IosRSASignature}.
  *
  * @author Tom Ball
  */

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/lang/reflect/AnnotationsTest.java
Patch:
@@ -244,7 +244,7 @@ public void testAnonymousClassModifiers() {
         assertFalse(Modifier.isPrivate(modifiers));
         assertFalse(Modifier.isAbstract(modifiers));
         assertTrue(Modifier.isStatic(modifiers));
-        assertFalse(Modifier.isFinal(modifiers));
+        assertTrue(Modifier.isFinal(modifiers));
         assertFalse(Modifier.isStrict(modifiers));
     }
 

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/io/Reader.java
Patch:
@@ -64,7 +64,8 @@ public abstract class Reader implements Readable, Closeable {
      * synchronize on the reader itself.
      */
     protected Reader() {
-        this.lock = this;
+        // J2ObjC changed: Avoid a leak by creating a new object for the lock.
+        this.lock = new Object();
     }
 
     /**

File: jre_emul/android/platform/libcore/ojluni/src/main/java/java/io/Writer.java
Patch:
@@ -73,7 +73,8 @@ public abstract class Writer implements Appendable, Closeable, Flushable {
      * synchronize on the writer itself.
      */
     protected Writer() {
-        this.lock = this;
+        // J2ObjC changed: Avoid a leak by creating a new object for the lock.
+        this.lock = new Object();
     }
 
     /**

File: translator/src/test/java/com/google/devtools/j2objc/gen/LiteralGeneratorTest.java
Patch:
@@ -26,8 +26,9 @@ public class LiteralGeneratorTest extends TestCase {
   public void testBuildStringFromChars() {
     String s = "a\uffffz";
     String result = LiteralGenerator.buildStringFromChars(s);
-    assertEquals(result,
+    assertEquals(
         "[NSString stringWithCharacters:(jchar[]) "
-        + "{ (int) 0x61, (int) 0xffff, (int) 0x7a } length:3]");
+            + "{ (int) 0x61, (int) 0xffff, (int) 0x7a } length:3]",
+        result);
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.devtools.j2objc.GenerationTest;
 import com.google.devtools.j2objc.Options.MemoryManagementOption;
 import com.google.devtools.j2objc.ast.Statement;
-
 import java.io.IOException;
 import java.util.List;
 
@@ -746,9 +745,9 @@ public void testStaticConstants() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(0)).trim();
-    assertEquals(result, "jfloat f = JavaLangFloat_NaN;");
+    assertEquals("jfloat f = JavaLangFloat_NaN;", result);
     result = generateStatement(stmts.get(1)).trim();
-    assertEquals(result, "jdouble d = JavaLangDouble_POSITIVE_INFINITY;");
+    assertEquals("jdouble d = JavaLangDouble_POSITIVE_INFINITY;", result);
   }
 
   public void testInstanceStaticConstants() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/util/CodeReferenceMapTest.java
Patch:
@@ -64,8 +64,7 @@ public void testToString() {
         .build();
 
     String stringVersion = report.toString();
-    assertEquals(stringVersion, "[foo.bar.Baz]\n" 
-        + "{foo.bah.Bar=[xyz]}\n"
-        + "{foo.bah.Bar={abc=[()]}}");
+    assertEquals(
+        "[foo.bar.Baz]\n" + "{foo.bah.Bar=[xyz]}\n" + "{foo.bah.Bar={abc=[()]}}", stringVersion);
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ConstantBranchPruner.java
Patch:
@@ -235,6 +235,9 @@ private Statement getSideEffects(Expression expr) {
    * The evaluated result of the expression may differ from the original.
    */
   private Expression extractSideEffects(Expression expr) {
+    if (expr.getConstantValue() instanceof Boolean) {
+      return null;
+    }
     switch (expr.getKind()) {
       case INFIX_EXPRESSION:
         {

File: protobuf/tests/CompatibilityTest.java
Patch:
@@ -15,7 +15,7 @@
 import abc_def.gHiJkL.Foo2bar;
 import abc_def.gHiJkL.Foo_bar;
 import abc_def.gHiJkL.fooBar;
-import com.google.j2objc.PrefixDummy;
+import com.google.j2objc.test.PrefixDummy;
 import com.google.protobuf.AbstractMessage;
 import com.google.protobuf.ByteString;
 import com.google.protobuf.Descriptors.Descriptor;

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -361,7 +361,7 @@ protected void printProperties() {
               + " --static-accessor-methods flag");
         }
 
-        if (options.nullability()) {
+        if (options.nullability() && !varElement.asType().getKind().isPrimitive()) {
           if (ElementUtil.hasNullableAnnotation(varElement)) {
             attributes.add("nullable");
           } else if (ElementUtil.isNonnull(varElement, parametersNonnullByDefault)) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTDump.java
Patch:
@@ -227,7 +227,7 @@ public boolean visit(SuperMethodReference node) {
 
   @Override
   public boolean visit(TagElement node) {
-    String tagName = node.getTagName();
+    String tagName = node.getTagKind().toString();
     sb.print(' ');
     sb.print(tagName != null ? tagName : "null");
     return true;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -99,6 +99,7 @@
 import com.google.devtools.j2objc.ast.SwitchStatement;
 import com.google.devtools.j2objc.ast.SynchronizedStatement;
 import com.google.devtools.j2objc.ast.TagElement;
+import com.google.devtools.j2objc.ast.TagElement.TagKind;
 import com.google.devtools.j2objc.ast.TextElement;
 import com.google.devtools.j2objc.ast.ThisExpression;
 import com.google.devtools.j2objc.ast.ThrowStatement;
@@ -1188,7 +1189,7 @@ private static TreeNode convertSuperMethodInvocation(
 
   private static TreeNode convertTagElement(org.eclipse.jdt.core.dom.TagElement node) {
     TagElement newNode = new TagElement()
-        .setTagName(node.getTagName());
+        .setTagKind(TagKind.parse(node.getTagName()));
     for (Object fragment : node.fragments()) {
       newNode.addFragment(TreeConverter.convert(fragment));
     }

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -58,6 +58,7 @@
 import com.google.devtools.j2objc.translate.LambdaTypeElementAdderTest;
 import com.google.devtools.j2objc.translate.MetadataWriterTest;
 import com.google.devtools.j2objc.translate.NilCheckResolverTest;
+import com.google.devtools.j2objc.translate.NumberMethodRewriterTest;
 import com.google.devtools.j2objc.translate.OcniExtractorTest;
 import com.google.devtools.j2objc.translate.OperatorRewriterTest;
 import com.google.devtools.j2objc.translate.OuterReferenceFixerTest;
@@ -134,6 +135,7 @@ public class SmallTests {
     MethodReferenceTest.class,
     NameTableTest.class,
     NilCheckResolverTest.class,
+    NumberMethodRewriterTest.class,
     ObjectiveCHeaderGeneratorTest.class,
     ObjectiveCImplementationGeneratorTest.class,
     ObjectiveCSegmentedHeaderGeneratorTest.class,

File: protobuf/tests/CompatibilityTest.java
Patch:
@@ -1314,11 +1314,11 @@ private void expectSubstringIndexOutOfBounds(ByteString bs, int startIndex, int
   }
 
   public void testByteStringSubstring() throws Exception {
-    ByteString bs1 = ByteString.copyFrom("abcdefghijklmnop".getBytes());
+    ByteString bs1 = ByteString.copyFrom("abcdefghijklmnop".getBytes("UTF-8"));
     ByteString bs2 = bs1.substring(1, 15);
-    assertEquals("bcdefghijklmno", new String(bs2.toByteArray()));
+    assertEquals("bcdefghijklmno", new String(bs2.toByteArray(), "UTF-8"));
     ByteString bs3 = bs1.substring(12);
-    assertEquals("mnop", new String(bs3.toByteArray()));
+    assertEquals("mnop", new String(bs3.toByteArray(), "UTF-8"));
     ByteString bs4 = bs1.substring(11, 11);
     assertTrue(bs4.isEmpty());
     expectSubstringIndexOutOfBounds(bs1, -1, 1);

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.Map;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.NestingKind;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.TypeParameterElement;
 import javax.lang.model.element.VariableElement;
@@ -690,8 +689,7 @@ public static String getBinaryName(TypeMirror t) {
    * from the outermost class declaration to the inner class declaration.
    */
   public String getReferenceName(ExecutableElement element) {
-    if (!ElementUtil.isConstructor(element)
-        || ElementUtil.getDeclaringClass(element).getNestingKind() != NestingKind.MEMBER) {
+    if (!ElementUtil.isConstructor(element)) {
       return ElementUtil.getName(element);
     }
     TypeElement parent = ElementUtil.getDeclaringClass(element);

File: translator/src/test/java/com/google/devtools/j2objc/translate/DeadCodeEliminatorTest.java
Patch:
@@ -149,7 +149,7 @@ public void testDeadEnum() throws IOException {
   public void testConstructorGeneration() throws IOException {
     CodeReferenceMap map = CodeReferenceMap.builder()
         .addClass("A")
-        .addMethod("C", "<init>", "(I)V")
+        .addMethod("C", "C", "(I)V")
         .build();
     setDeadCodeMap(map);
     addSourceFile("class B {\n"
@@ -286,7 +286,7 @@ public void testDeadAnnotation() throws IOException {
 
   public void testDeadDefaultConstructor() throws IOException {
     CodeReferenceMap map = CodeReferenceMap.builder()
-        .addMethod("Test", "<init>", "()V")
+        .addMethod("Test", "Test", "()V")
         .build();
     setDeadCodeMap(map);
     String translation = translateSourceFile("class Test {}", "Test", "Test.h");

File: jre_emul/Tests/com/google/j2objc/nio/charset/CharsetTest.java
Patch:
@@ -44,7 +44,7 @@ private void assertCorrectDecoding(String expected, byte[] bytes, String charset
   }
 
   public void testDecoding() throws IOException {
-    // UTF-8 with some invalic bytes.
+    // UTF-8 with some invalid bytes.
     byte[] invalidUtf8 = {
       91, 92, -1, -40, -1, -32, 1, 16, 74, 0, 70, -27, -101, 73, 70, -28, -72, -83, -27, -101 };
     assertCorrectDecoding(

File: cycle_finder/src/test/java/com/google/devtools/cyclefinder/CycleFinderTest.java
Patch:
@@ -458,6 +458,7 @@ private void findCycles() throws IOException {
       options.setPrintReferenceGraph();
     }
     CycleFinder finder = new CycleFinder(options);
+    finder.constructGraph();
     cycles = finder.findCycles();
     if (printReferenceGraph) {
       referenceGraph = finder.getReferenceGraph();

File: jre_emul/stub_classes/java/lang/String.java
Patch:
@@ -60,8 +60,6 @@ public String(char[] chars, int i, int j) {}
 
   public String(int[] codePoints, int offset, int length) {}
 
-  String(int i, int j, char[] chars) {}
-
   public String(String s) {}
 
   public String(StringBuffer sb) {}
@@ -329,4 +327,3 @@ public int compare(String s1, String s2) {
     }
   }
 }
-

File: translator/src/main/java/com/google/devtools/j2objc/util/Mappings.java
Patch:
@@ -53,7 +53,6 @@ public class Mappings {
       .put("java.lang.String.<init>([C)V", "java_stringWithCharacters:")
       .put("java.lang.String.<init>([CII)V", "java_stringWithCharacters:offset:length:")
       .put("java.lang.String.<init>([III)V", "java_stringWithInts:offset:length:")
-      .put("java.lang.String.<init>(II[C)V", "java_stringWithOffset:length:characters:")
       .put("java.lang.String.<init>(Ljava/lang/StringBuffer;)V",
           "java_stringWithJavaLangStringBuffer:")
       .put("java.lang.String.<init>(Ljava/lang/StringBuilder;)V",

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTDump.java
Patch:
@@ -90,7 +90,7 @@ public boolean visit(AnnotationTypeDeclaration node) {
 
   @Override
   public boolean visit(AnnotationTypeMemberDeclaration node) {
-    printName(node.getName());
+    printName(node.getExecutableElement());
     return true;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -72,9 +72,9 @@ public boolean visit(AnnotationTypeMemberDeclaration node) {
     sb.printIndent();
     printAnnotations(node.getAnnotations());
     printModifiers(node.getModifiers());
-    node.getType().accept(this);
+    sb.print(node.getTypeMirror().toString());
     sb.print(' ');
-    node.getName().accept(this);
+    sb.print(ElementUtil.getName(node.getExecutableElement()));
     sb.print("()");
     if (node.getDefault() != null) {
       sb.print(" default ");

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -447,8 +447,6 @@ private static TreeNode convertAnnotationTypeMemberDeclaration(
     convertBodyDeclaration(node, newNode);
     return newNode
         .setExecutableElement(BindingConverter.getExecutableElement(node.resolveBinding()))
-        .setName((SimpleName) convert(node.getName()))
-        .setType((Type) convert(node.getType()))
         .setDefault((Expression) convert(node.getDefault()));
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -203,7 +203,7 @@ private int generateMethodsMetadata() {
       if (typeNode instanceof AnnotationTypeDeclaration) {
         // Add property accessor and static default methods.
         for (AnnotationTypeMemberDeclaration decl : TreeUtil.getAnnotationMembers(typeNode)) {
-          String name = decl.getName().getIdentifier();
+          String name = ElementUtil.getName(decl.getExecutableElement());
           String returnType = getTypeName(decl.getExecutableElement().getReturnType());
           String metadata = UnicodeUtils.format("    { NULL, %s, 0x%x, -1, -1, -1, -1, -1, -1 },\n",
               cStr(returnType),

File: translator/src/main/java/com/google/devtools/j2objc/types/HeaderImportCollector.java
Patch:
@@ -112,7 +112,7 @@ private void addDeclaredType(TypeElement type) {
   @Override
   public boolean visit(AnnotationTypeMemberDeclaration node) {
     if (filter.include(node)) {
-      addForwardDecl(node.getType());
+      addForwardDecl(node.getTypeMirror());
     }
     return false;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -637,9 +637,7 @@ public boolean visit(MethodDeclaration node) {
     ExecutableElement meth = node.getExecutableElement();
     printTypeParameters(meth.getTypeParameters());
     if (!node.isConstructor()) {
-      if (node.getReturnType() != null) {
-        node.getReturnType().accept(this);
-      }
+      sb.print(node.getReturnTypeMirror().toString());
       sb.print(' ');
     }
     sb.print(ElementUtil.getName(meth));

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -889,8 +889,7 @@ private TreeNode convertMethodDeclaration(JCTree.JCMethodDecl node) {
     return newNode
         .setIsConstructor(ElementUtil.isConstructor(node.sym))
         .setExecutableElement(node.sym)
-        .setBody((Block) convert(node.getBody()))
-        .setReturnType(convertType(node.type));
+        .setBody((Block) convert(node.getBody()));
   }
 
   private static String getMemberName(JCTree.JCExpression node) {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -939,7 +939,6 @@ private static TreeNode convertMethodDeclaration(
     }
     newNode
         .setIsConstructor(node.isConstructor())
-        .setReturnType((Type) TreeConverter.convert(node.getReturnType2()))
         .setExecutableElement(BindingConverter.getExecutableElement(node.resolveBinding()))
         .setBody((Block) TreeConverter.convert(node.getBody()));
     maybeAddImplicitSuperCall(newNode);

File: translator/src/main/java/com/google/devtools/j2objc/translate/AbstractMethodRewriter.java
Patch:
@@ -86,7 +86,7 @@ public void endVisit(MethodDeclaration node) {
     // Generate a body which throws a NSInvalidArgumentException.
     String bodyCode = "// can't call an abstract method\n"
         + "[self doesNotRecognizeSelector:_cmd];";
-    if (!TypeUtil.isVoid(node.getReturnType().getTypeMirror())) {
+    if (!TypeUtil.isVoid(node.getReturnTypeMirror())) {
       bodyCode += "\nreturn 0;"; // Never executes, but avoids a gcc warning.
     }
     body.addStatement(new NativeStatement(bodyCode));

File: translator/src/main/java/com/google/devtools/j2objc/translate/PrivateDeclarationResolver.java
Patch:
@@ -151,7 +151,7 @@ public boolean visit(MethodDeclaration node) {
     boolean isPrivate = Modifier.isPrivate(node.getModifiers());
     node.setHasPrivateDeclaration(isPrivate);
     if (!isPrivate) {
-      addPublicType(node.getReturnType());
+      addPublicType(node.getReturnTypeMirror());
     }
     return false;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/HeaderImportCollector.java
Patch:
@@ -139,7 +139,7 @@ public boolean visit(FunctionDeclaration node) {
   @Override
   public boolean visit(MethodDeclaration node) {
     if (filter.include(node)) {
-      addForwardDecl(node.getReturnType());
+      addForwardDecl(node.getReturnTypeMirror());
       for (VariableElement param : node.getExecutableElement().getParameters()) {
         addForwardDecl(param.asType());
       }

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -175,7 +175,7 @@ public boolean visit(MethodDeclaration node) {
     if (Modifier.isAbstract(node.getModifiers())) {
       return false;
     }
-    addImports(node.getReturnType());
+    addImports(node.getReturnTypeMirror());
     return true;
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/types/CompoundTypeTest.java
Patch:
@@ -47,7 +47,7 @@ public void testIsCompound() throws Exception {
         MethodDeclaration method = (MethodDeclaration) body;
         if (ElementUtil.getName(method.getExecutableElement()).equals("thenTesting")) {
           // Verify a normal type isn't marked as compound.
-          TypeMirror returnType = method.getReturnType().getTypeMirror();
+          TypeMirror returnType = method.getReturnTypeMirror();
           assertFalse(TypeUtil.isIntersection(returnType));
           // The method's return type isn't compound, but the cast expression in
           // its return statement is.

File: translator/src/main/java/com/google/devtools/j2objc/translate/DeadCodeEliminator.java
Patch:
@@ -54,8 +54,7 @@ public void endVisit(TypeDeclaration node) {
     eliminateDeadCode(type, node.getBodyDeclarations());
     // Also strip supertypes.
     if (deadCodeMap.containsClass(elementUtil.getBinaryName(type))) {
-      node.stripSuperclass();
-      node.getSuperInterfaceTypes().clear();
+      node.stripSupertypes();
     }
   }
 
@@ -66,7 +65,7 @@ public void endVisit(EnumDeclaration node) {
     if (deadCodeMap.containsClass(elementUtil.getBinaryName(type))) {
       // Dead enum means none of the constants are ever used, so they can all be deleted.
       node.getEnumConstants().clear();
-      node.getSuperInterfaceTypes().clear();
+      node.stripSuperInterfaces();
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -1044,9 +1044,10 @@ public boolean visit(TypeDeclaration node) {
     node.getName().accept(this);
     printTypeParameters(node.getTypeElement().getTypeParameters());
     sb.print(' ');
-    if (node.getSuperclassType() != null) {
+    TypeMirror superclassTypeMirror = node.getSuperclassTypeMirror();
+    if (!TypeUtil.isNone(superclassTypeMirror)) {
       sb.print("extends ");
-      node.getSuperclassType().accept(this);
+      sb.print(superclassTypeMirror.toString());
       sb.print(' ');
     }
     if (!node.getSuperInterfaceTypes().isEmpty()) {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -1245,7 +1245,6 @@ private static TreeNode convertType(
   private static TreeNode convertTypeDeclaration(org.eclipse.jdt.core.dom.TypeDeclaration node) {
     TypeDeclaration newNode =
         (TypeDeclaration) convertAbstractTypeDeclaration(node, new TypeDeclaration());
-    newNode.setSuperclassType((Type) convert(node.getSuperclassType()));
     newNode.setInterface(node.isInterface());
     for (Object superInterface : node.superInterfaceTypes()) {
       newNode.addSuperInterfaceType((Type) convert(superInterface));

File: translator/src/main/java/com/google/devtools/j2objc/translate/DeadCodeEliminator.java
Patch:
@@ -54,7 +54,7 @@ public void endVisit(TypeDeclaration node) {
     eliminateDeadCode(type, node.getBodyDeclarations());
     // Also strip supertypes.
     if (deadCodeMap.containsClass(elementUtil.getBinaryName(type))) {
-      node.setSuperclassType(null);
+      node.stripSuperclass();
       node.getSuperInterfaceTypes().clear();
     }
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -1141,7 +1141,7 @@ public boolean visit(VariableDeclarationFragment node) {
   public boolean visit(VariableDeclarationStatement node) {
     sb.printIndent();
     printModifiers(node.getModifiers());
-    node.getType().accept(this);
+    sb.print(node.getTypeMirror().toString());
     sb.print(' ');
     for (Iterator<VariableDeclarationFragment> it = node.getFragments().iterator();
          it.hasNext(); ) {

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -1169,8 +1169,7 @@ private TreeNode convertVariableDeclaration(JCTree.JCVariableDecl node) {
       return newNode;
     }
     if (var.getKind() == ElementKind.LOCAL_VARIABLE) {
-      return new VariableDeclarationStatement(var, (Expression) convert(node.getInitializer()))
-          .setType(convertType(var.asType(), pos, false));
+      return new VariableDeclarationStatement(var, (Expression) convert(node.getInitializer()));
     }
     if (var.getKind() == ElementKind.ENUM_CONSTANT) {
       EnumConstantDeclaration newNode = new EnumConstantDeclaration()

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -1338,8 +1338,7 @@ private static TreeNode convertVariableDeclarationStatement(
     for (Object fragment : node.fragments()) {
       newNode.addFragment((VariableDeclarationFragment) TreeConverter.convert(fragment));
     }
-    return newNode
-        .setType((Type) TreeConverter.convert(node.getType()));
+    return newNode;
   }
 
   private static TreeNode convertWhileStatement(org.eclipse.jdt.core.dom.WhileStatement node) {

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -279,7 +279,7 @@ public boolean visit(VariableDeclarationExpression node) {
 
   @Override
   public boolean visit(VariableDeclarationStatement node) {
-    addImports(node.getType());
+    addImports(node.getTypeMirror());
     return true;
   }
 }

File: jre_emul/Classes/com/google/j2objc/security/IosSecurityProvider.java
Patch:
@@ -33,14 +33,16 @@ public class IosSecurityProvider extends Provider {
 
   private static final String PREFIX = "com.google.j2objc.security.";
 
+  private static final long serialVersionUID = 1L;
+
   public IosSecurityProvider() {
     super(PROVIDER_NAME, 1.0, "J2ObjC's iOS Security Framework-backed provider");
 
     // Secure random implementation.
     put("SecureRandom.SHA1PRNG", PREFIX + "IosSecureRandomImpl");
 
     // X509 certificate provider.
-    put("CertificateFactory.X.509", "com.google.j2objc.security.cert.IosCertificateFactory");
+    put("CertificateFactory.X.509", "sun.security.provider.X509Factory");
     put("Alg.Alias.CertificateFactory.X509", "X.509");
 
     /* === Message Digests === */

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -436,7 +436,7 @@ public boolean visit(FieldDeclaration node) {
     sb.printIndent();
     printAnnotations(node.getAnnotations());
     printModifiers(node.getModifiers());
-    node.getType().accept(this);
+    sb.print(node.getTypeMirror().toString());
     sb.print(' ');
     for (Iterator<VariableDeclarationFragment> it = node.getFragments().iterator();
         it.hasNext(); ) {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -781,8 +781,7 @@ private static TreeNode convertFieldDeclaration(org.eclipse.jdt.core.dom.FieldDe
     for (Object fragment : node.fragments()) {
       newNode.addFragment((VariableDeclarationFragment) convert(fragment));
     }
-    return newNode
-        .setType((Type) convert(node.getType()));
+    return newNode;
   }
 
   private static TreeNode convertForStatement(org.eclipse.jdt.core.dom.ForStatement node) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/DeadCodeEliminator.java
Patch:
@@ -123,7 +123,7 @@ private boolean isInlinableConstant(BodyDeclaration decl) {
         || Modifier.isPrivate(modifiers)) {
       return false;
     }
-    TypeMirror type = ((FieldDeclaration) decl).getType().getTypeMirror();
+    TypeMirror type = ((FieldDeclaration) decl).getTypeMirror();
     if (!(type.getKind().isPrimitive() || typeUtil.isString(type))) {
       return false;
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/PrivateDeclarationResolver.java
Patch:
@@ -131,7 +131,7 @@ public boolean visit(FieldDeclaration node) {
     boolean isPrivate = Modifier.isPrivate(node.getModifiers());
     node.setHasPrivateDeclaration(isPrivate);
     if (!isPrivate) {
-      addPublicType(node.getType());
+      addPublicType(node.getTypeMirror());
     }
     return false;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/HeaderImportCollector.java
Patch:
@@ -120,7 +120,7 @@ public boolean visit(AnnotationTypeMemberDeclaration node) {
   @Override
   public boolean visit(FieldDeclaration node) {
     if (filter.include(node)) {
-      addForwardDecl(node.getType());
+      addForwardDecl(node.getTypeMirror());
     }
     return false;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -134,7 +134,7 @@ public boolean visit(FieldAccess node) {
 
   @Override
   public boolean visit(FieldDeclaration node) {
-    addImports(node.getType());
+    addImports(node.getTypeMirror());
     return true;
   }
 

File: jre_emul/android/platform/libcore/luni/src/test/java/libcore/java/text/NumberFormatTest.java
Patch:
@@ -246,8 +246,9 @@ public void test_setCurrency() throws Exception {
     public void test_currencyWithPatternDigits() throws Exception {
         // Japanese Yen 0 fractional digits.
         NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.JAPAN);
-        // TODO(tball): investigate iOS 10 failures, b/33557359.
-        //assertEquals("￥50", nf.format(50.00));
+        String result = nf.format(50.00);
+        // Allow either full-width (0xFFE5) or regular width yen sign (0xA5).
+        assertTrue(result.equals("￥50") || result.equals("¥50"));
 
         // Armenian Dram 0 fractional digits.
         nf = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("hy-AM"));

File: jre_emul/Classes/com/google/j2objc/security/cert/IosX509Certificate.java
Patch:
@@ -122,7 +122,6 @@ public native void checkValidity(Date date) throws CertificateExpiredException,
     // Verify it is valid for the specified date.
     double requestedTime = [date getTime] / 1000.0;
     NSDate *nsDate = [NSDate dateWithTimeIntervalSince1970:requestedTime];
-    NSLog(@"trust date: %@", nsDate);
     SecTrustResultType trustResult;
     SecTrustSetVerifyDate(trust, (ARCBRIDGE CFDateRef) nsDate);
     status = SecTrustEvaluate(trust, &trustResult);

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -174,9 +174,9 @@ private static enum FrontEnd {
     static FrontEnd defaultFrontEnd() {
       String envFlag = System.getenv(ENV_FRONT_END_FLAG);
       if (envFlag != null) {
-        if (envFlag.equalsIgnoreCase(JAVAC.name())) {
-          return JAVAC;
-        } else if (!envFlag.equalsIgnoreCase(JDT.name())) {
+        try {
+          return FrontEnd.valueOf(envFlag);
+        } catch (IllegalArgumentException e) {
           ErrorUtil.error("Invalid front end environment flag: " + envFlag);
         }
       }

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.devtools.j2objc.gen.StatementGeneratorTest;
 import com.google.devtools.j2objc.gen.TypeDeclarationGeneratorTest;
 import com.google.devtools.j2objc.gen.TypeImplementationGeneratorTest;
+import com.google.devtools.j2objc.javac.JavacTreeConverterTest;
 import com.google.devtools.j2objc.jdt.TreeConverterTest;
 import com.google.devtools.j2objc.pipeline.J2ObjCIncompatibleStripperTest;
 import com.google.devtools.j2objc.pipeline.TranslationProcessorTest;
@@ -122,6 +123,7 @@ public class SmallTests {
     J2ObjCIncompatibleStripperTest.class,
     J2ObjCTest.class,
     JavaCloneWriterTest.class,
+    JavacTreeConverterTest.class,
     JavadocGeneratorTest.class,
     JavaToIOSMethodTranslatorTest.class,
     LambdaExpressionTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -180,7 +180,7 @@ static FrontEnd defaultFrontEnd() {
           ErrorUtil.error("Invalid front end environment flag: " + envFlag);
         }
       }
-      return JDT;
+      return JAVAC;
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/Expression.java
Patch:
@@ -21,7 +21,7 @@
  */
 public abstract class Expression extends TreeNode {
 
-  private Object constantValue;
+  protected Object constantValue;
 
   protected Expression(Expression other) {
     super(other);

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/GraphBuilder.java
Patch:
@@ -230,7 +230,9 @@ private void visitType(TypeMirror type) {
     }
 
     private void followType(TypeMirror type, TypeNode node) {
-      for (TypeMirror supertype : typeUtil.directSupertypes(type)) {
+      List<? extends TypeMirror> supertypes = TypeUtil.isDeclaredType(type)
+          ? typeUtil.directSupertypes(type) : typeUtil.getUpperBounds(type);
+      for (TypeMirror supertype : supertypes) {
         TypeNode supertypeNode = getOrCreateNode(supertype);
         if (supertypeNode != null) {
           subtypes.put(supertypeNode, node);

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -739,8 +739,7 @@ private TreeNode convertFieldAccess(JCTree.JCFieldAccess node) {
             .setElement(node.sym);
       }
     }
-    if (ElementUtil.isPrimitiveConstant((VariableElement) node.sym)
-        && ElementUtil.isStatic(node.sym)) {
+    if (ElementUtil.isConstant((VariableElement) node.sym) && ElementUtil.isStatic(node.sym)) {
       return new QualifiedName()
           .setName(convertSimpleName(node.sym, node.type, pos))
           .setQualifier((Name) convert(selected))

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -1205,6 +1205,7 @@ private Type convertType(TypeMirror varType, SourcePosition pos, boolean isVarar
             .setTypeMirror(varType);
       } else if (varType.getKind() == TypeKind.UNION) {
         newType = new UnionType();
+        newType.setTypeMirror(varType);
         for (TypeMirror t : ((javax.lang.model.type.UnionType) varType).getAlternatives()) {
           Type alternative = convertType(t, pos, false);
           alternative.setPosition(pos);

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -171,7 +171,7 @@ public static CompilationUnit convertCompilationUnit(
       }
       addOcniComments(converter.newUnit, options.jsniWarnings());
       return converter.newUnit;
-    } catch (IOException e) {
+    } catch (Throwable e) {
       ErrorUtil.fatalError(e, sourceFilePath);
       return null;
     }

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/lang/reflect/AnnotationsTest.java
Patch:
@@ -239,7 +239,9 @@ public void testAnonymousClassModifiers() {
         assertFalse(Modifier.isPrivate(modifiers));
         assertFalse(Modifier.isAbstract(modifiers));
         assertTrue(Modifier.isStatic(modifiers));
-        assertFalse(Modifier.isFinal(modifiers));
+        // javac marks anonymous classes final, JDT doesn't. It doesn't
+        // really matter, since anonymous classes can't be subclassed.
+        // assertFalse(Modifier.isFinal(modifiers));
         assertFalse(Modifier.isStrict(modifiers));
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -1239,7 +1239,7 @@ private Comment convertAssociatedComment(JCTree node, Element element) {
   }
 
   private Javadoc convertJavadocComment(Element element) {
-    return JavadocConverter.convertJavadoc(element, env,
+    return JavadocConverter.convertJavadoc(element, newUnit.getSource(), env,
         newUnit.getEnv().options().reportJavadocWarnings());
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -208,6 +208,7 @@ private TreeNode convertInner(JCTree javacNode) {
         throw new AssertionError("Unknown node type: " + javacNode.getKind());
 
       case ANNOTATION:
+      case TYPE_ANNOTATION:
         return convertAnnotation((JCTree.JCAnnotation) javacNode);
       case ANNOTATION_TYPE:
         return convertAnnotationTypeDeclaration((JCTree.JCClassDecl) javacNode);
@@ -593,6 +594,7 @@ private TreeNode convertClassDeclaration(JCTree.JCClassDecl node) {
       // TODO(kstanger): See if anonymous classes can follow the same code branch as regular class
       // declarations.
       TypeDeclaration newNode = new TypeDeclaration(node.sym);
+      newUnit.getEnv().elementUtil().mapElementType(node.sym, node.type);
       for (JCTree bodyDecl : node.getMembers()) {
         Object member = convert(bodyDecl);
         if (member instanceof BodyDeclaration) {  // Not true for enum constants.

File: translator/src/test/java/com/google/devtools/j2objc/translate/TypeUseAnnotationTest.java
Patch:
@@ -28,7 +28,7 @@ public class TypeUseAnnotationTest extends GenerationTest {
   public void testAnnotatedStringType() throws IOException {
     addSourceFile(
         "import java.lang.annotation.*;\n"
-        + "@Target(ElementType.TYPE_USE) @public @interface A {}", "A.java");
+        + "@Target(ElementType.TYPE_USE) public @interface A {}", "A.java");
     String translation = translateSourceFile(
         "class Test { @A String str; @A String foo() { return null; } }",
         "Test", "Test.m");

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/GraphBuilder.java
Patch:
@@ -275,7 +275,7 @@ private void followEnclosingType(DeclaredType type, TypeNode typeNode) {
       TypeNode declarationType = getOrCreateNode(element.asType());
       if (declarationType != null && enclosingTypeNode != null
           && ElementUtil.hasOuterContext(element)
-          && !ElementUtil.isWeakOuterType(element)
+          && !elementUtil.isWeakOuterType(element)
           && !whitelist.containsType(enclosingTypeNode)
           && !whitelist.hasOuterForType(typeNode)) {
         possibleOuterEdges.put(

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -455,7 +455,7 @@ public void testMultipleClassDeclaration() throws IOException {
       assertTranslation(translation, "IOSClass *one_, *two_, *three_;");
     } else {
       assertTranslatedLines(translation,
-          "IOSClass *one_", "IOSClass *two_", "IOSClass *three_");
+          "IOSClass *one_;", "IOSClass *two_;", "IOSClass *three_;");
     }
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -478,7 +478,7 @@ public void testInnerSubClassOfOtherInnerWithOuterRefsExtraction2() throws IOExc
   public void testInnerSubClassOfOtherInnerWithOuterRefsWithGenerics() throws IOException {
     String source = "public class Test { "
         + "class B extends A<B.BInner> { "
-        + "  public class BInner extends A.Inner { BInner() { super(null); } } } "
+        + "  public class BInner extends A<B.BInner>.Inner { BInner() { super(null); } } } "
         + "class A<T extends A<T>.Inner> { "
         + "  private void foo() { } "
         + "  public class Inner { Inner(T t) { foo(); } } } "

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -521,13 +521,14 @@ public void testAnonymousClassWithinLambdaWithSuperOuterParam() throws IOExcepti
         + "static class B { String s;  I test(Test t, int i) { "
         + "return () -> t.new A() { public String toString() { return s + i; } }; } } }",
         "Test", "Test.m");
+    String superOuter = Options.isJDT() ? "superOuter$" : "x0";
     assertTranslation(translation,
         "static Test_B_1 *create_Test_B_1_initWithTest_B_withInt_withTest_("
-        + "Test_B *outer$, jint capture$0, Test *superOuter$);");
+        + "Test_B *outer$, jint capture$0, Test *" + superOuter + ");");
     assertTranslation(translation,
         "return create_Test_B_1_initWithTest_B_withInt_withTest_(this$0_, val$i_, val$t_);");
     // The super outer must be nil_chk'ed in the anonymous constructor.
-    assertTranslation(translation, "Test_A_initWithTest_(self, nil_chk(superOuter$));");
+    assertTranslation(translation, "Test_A_initWithTest_(self, nil_chk(" + superOuter + "));");
   }
 
   public void testSuperclassHasCapturedVariables() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/SwitchRewriterTest.java
Patch:
@@ -62,7 +62,8 @@ public void testVariableDeclarationsInSwitchStatement2() throws IOException {
         + "case 3: log(i); int k = i, l = 42; break; }}"
         + "private void log(int i) {}}");
     TypeDeclaration testType = (TypeDeclaration) unit.getTypes().get(0);
-    MethodDeclaration method = TreeUtil.getMethodDeclarationsList(testType).get(0);
+    // First MethodDeclaration is the implicit default constructor.
+    MethodDeclaration method = TreeUtil.getMethodDeclarationsList(testType).get(1);
     List<Statement> stmts = method.getBody().getStatements();
     assertEquals(1, stmts.size());
     Block block = (Block) stmts.get(0);

File: translator/src/test/java/com/google/devtools/j2objc/translate/DefaultMethodsTest.java
Patch:
@@ -393,7 +393,7 @@ public void testPrivateNestedInterfaceWithDefaultMethod() throws IOException {
 
   public void testExtraSelectorsFromMultipleOverrides() throws IOException {
     addSourceFile("interface I { int foo(String t); }", "I.java");
-    addSourceFile("class A<T> { int foo(T t) {} }", "A.java");
+    addSourceFile("class A<T> { int foo(T t) { return 0; } }", "A.java");
     String translation = translateSourceFile(
         "class B extends A<String> implements I { public int foo(String t) { return 7; } }",
         "B", "B.h");

File: translator/src/test/java/com/google/devtools/j2objc/types/ImplementationImportCollectorTest.java
Patch:
@@ -88,7 +88,7 @@ public void testObjectArrayImport() throws IOException {
 
   public void testEnhancedForMethodInvocation() throws IOException {
     addSourceFile("import java.util.*; class A { "
-        + "final Map<String,String> map; }", "A.java");
+        + "final Map<String,String> map = new HashMap<>(); }", "A.java");
     String translation = translateSourceFile(
         "import java.util.*; class B extends A { "
         + "void test() { for (String s : map.keySet()) {}}}", "B", "B.m");

File: translator/src/main/java/com/google/devtools/j2objc/translate/AbstractMethodRewriter.java
Patch:
@@ -129,6 +129,9 @@ private void addReturnTypeNarrowingDeclarations(AbstractTypeDeclaration node) {
     for (DeclaredType inheritedType : typeUtil.getObjcOrderedInheritedTypes(type.asType())) {
       TypeElement inheritedElem = (TypeElement) inheritedType.asElement();
       for (ExecutableElement methodElem : ElementUtil.getMethods(inheritedElem)) {
+        if (methodElem.getModifiers().contains(Modifier.PRIVATE)) {
+          continue;
+        }
         TypeMirror declaredReturnType = typeUtil.erasure(methodElem.getReturnType());
         if (!TypeUtil.isReferenceType(declaredReturnType)) {
           continue;  // Short circuit

File: translator/src/main/java/com/google/devtools/j2objc/jdt/AbstractBinding.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.google.devtools.j2objc.types;
+package com.google.devtools.j2objc.jdt;
 
 import com.google.common.collect.Lists;
 import java.util.Arrays;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/AbstractTypeBinding.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.google.devtools.j2objc.types;
+package com.google.devtools.j2objc.jdt;
 
 import org.eclipse.jdt.core.dom.IAnnotationBinding;
 import org.eclipse.jdt.core.dom.IBinding;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -17,7 +17,6 @@
 import com.google.devtools.j2objc.types.AbstractTypeMirror;
 import com.google.devtools.j2objc.types.GeneratedElement;
 import com.google.devtools.j2objc.types.GeneratedExecutableElement;
-import com.google.devtools.j2objc.types.GeneratedPackageBinding;
 import com.google.devtools.j2objc.types.GeneratedPackageElement;
 import com.google.devtools.j2objc.types.GeneratedTypeElement;
 import com.google.devtools.j2objc.types.GeneratedVariableElement;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/GeneratedPackageBinding.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.devtools.j2objc.types;
+package com.google.devtools.j2objc.jdt;
 
 import org.eclipse.jdt.core.dom.IBinding;
 import org.eclipse.jdt.core.dom.IPackageBinding;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/GeneratedTypeBinding.java
Patch:
@@ -17,8 +17,6 @@
 package com.google.devtools.j2objc.jdt;
 
 import com.google.common.collect.Sets;
-import com.google.devtools.j2objc.types.AbstractTypeBinding;
-import com.google.devtools.j2objc.types.GeneratedPackageBinding;
 import com.google.devtools.j2objc.util.BindingUtil;
 import java.util.Set;
 import javax.lang.model.element.PackageElement;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtNullType.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.google.devtools.j2objc.jdt;
 
-import com.google.devtools.j2objc.types.AbstractTypeBinding;
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtElements.java
Patch:
@@ -48,7 +48,8 @@ public TypeElement getTypeElement(CharSequence name) {
   @Override
   public Map<? extends ExecutableElement, ? extends AnnotationValue> getElementValuesWithDefaults(
       AnnotationMirror a) {
-    throw new AssertionError("not implemented");
+    // JDT's IAnnotationBinding includes defaults with its value list.
+    return a.getElementValues();
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -289,7 +289,7 @@ public Expression createAnnotation(AnnotationMirror annotationMirror) {
         new FunctionElement("create_" + nameTable.getFullName(typeElem), type, typeElem);
     FunctionInvocation invocation = new FunctionInvocation(element, type);
     Map<? extends ExecutableElement, ? extends AnnotationValue> values =
-        annotationMirror.getElementValues();
+        typeUtil.elementUtil().getElementValuesWithDefaults(annotationMirror);
     for (ExecutableElement member : ElementUtil.getSortedAnnotationMembers(typeElem)) {
       TypeMirror valueType = member.getReturnType();
       element.addParameters(valueType);

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -186,6 +186,8 @@ public static boolean isAnnotationMember(ExecutableElement e) {
     return isAnnotationType(getDeclaringClass(e));
   }
 
+  //TODO(user): For elements inside static blocks, this method returns a "TypeElement" of a
+  //  static block, which does not work with getBinaryName(TypeElement) (one proven example)
   public static TypeElement getDeclaringClass(Element element) {
     do {
       element = element.getEnclosingElement();

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -148,7 +148,6 @@ public String toString() {
   public enum Kind {
     ANNOTATION_TYPE_DECLARATION,
     ANNOTATION_TYPE_MEMBER_DECLARATION,
-    ANONYMOUS_CLASS_DECLARATION,
     ARRAY_ACCESS,
     ARRAY_CREATION,
     ARRAY_INITIALIZER,

File: translator/src/main/java/com/google/devtools/j2objc/ast/TypeDeclaration.java
Patch:
@@ -85,18 +85,15 @@ public TypeDeclaration addSuperInterfaceType(Type type) {
     return this;
   }
 
-  @Override
   public Expression getSuperOuter() {
     return superOuter.get();
   }
 
-  @Override
   public TypeDeclaration setSuperOuter(Expression newSuperOuter) {
     superOuter.set(newSuperOuter);
     return this;
   }
 
-  @Override
   public List<Expression> getSuperCaptureArgs() {
     return superCaptureArgs;
   }

File: translator/src/main/java/com/google/devtools/j2objc/javac/JavacParser.java
Patch:
@@ -97,8 +97,8 @@ private JavacFileManager getFileManager(JavaCompiler compiler,
     Charset charset = encoding != null ? Charset.forName(encoding) : Options.getCharset();
     JavacFileManager fileManager = (JavacFileManager)
         compiler.getStandardFileManager(diagnostics, null, charset);
-    addPaths(StandardLocation.CLASS_PATH, Options.getClassPathEntries(), fileManager);
-    addPaths(StandardLocation.SOURCE_PATH, Options.getSourcePathEntries(), fileManager);
+    addPaths(StandardLocation.CLASS_PATH, classpathEntries, fileManager);
+    addPaths(StandardLocation.SOURCE_PATH, sourcepathEntries, fileManager);
     fileManager.setLocation(StandardLocation.CLASS_OUTPUT,
         Lists.newArrayList(Options.getOutputDirectory()));
     fileManager.setLocation(StandardLocation.SOURCE_OUTPUT,

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -99,7 +99,7 @@ private void visit() {
     }
 
     private void collectInheritedMethods(TypeMirror type) {
-      if (type == null) {
+      if (TypeUtil.isNone(type)) {
         return;
       }
       collectMethods((DeclaredType) type);

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedExecutableElement.java
Patch:
@@ -205,7 +205,7 @@ public IMethodBinding asMethodBinding() {
    * The associated ExecutableType.
    * TODO(kstanger): Make private when BindingConverter is removed.
    */
-  public class Mirror implements ExecutableType {
+  public class Mirror extends AbstractTypeMirror implements ExecutableType {
 
     private final List<? extends TypeMirror> parameterTypes =
         Lists.transform(parameters, param -> param.asType());

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -911,16 +911,16 @@ private TreeNode convertNewArray(JCTree.JCNewArray node) {
       dimensions.add((Expression) convert(dimension));
     }
     javax.lang.model.type.ArrayType type = (javax.lang.model.type.ArrayType) node.type;
-    ArrayInitializer initializers = new ArrayInitializer(type);
     if (node.getInitializers() != null) {
+      ArrayInitializer initializers = new ArrayInitializer(type);
       for (JCTree.JCExpression initializer : node.getInitializers()) {
         initializers.addExpression((Expression) convert(initializer));
       }
+      newNode.setInitializer(initializers);
     }
     return newNode
         .setType(new ArrayType(type))
-        .setDimensions(dimensions)
-        .setInitializer(initializers);
+        .setDimensions(dimensions);
   }
 
   private TreeNode convertNewClass(JCTree.JCNewClass node) {

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedTypeElement.java
Patch:
@@ -207,8 +207,8 @@ public Element asElement() {
 
     @Override
     public TypeMirror getEnclosingType() {
-      Element enclosingElement = getEnclosingElement();
-      return enclosingElement == null ? null : enclosingElement.asType();
+      TypeElement declaringClass = ElementUtil.getDeclaringClass(GeneratedTypeElement.this);
+      return declaringClass == null ? null : declaringClass.asType();
     }
 
     @Override

File: cycle_finder/src/test/java/com/google/devtools/cyclefinder/CycleFinderTest.java
Patch:
@@ -136,9 +136,10 @@ public void testRetainedWithField() throws Exception {
     assertNoCycles();
   }
 
-  public void testRecursiveWildcard() throws Exception {
+  public void testRecursiveTypeVariable() throws Exception {
     addSourceFile("A.java", "class A<T> { A<? extends T> a; }");
     addSourceFile("B.java", "class B<T> { B<? extends B<T>> b; }");
+    addSourceFile("C.java", "class C<T> { C<java.util.List<T>> c; }");
     findCycles();
     // This test passes if it doesn't hang or crash due to infinite recursion.
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -760,7 +760,8 @@ public boolean visit(NullLiteral node) {
 
   @Override
   public boolean visit(NumberLiteral node) {
-    sb.print(node.getToken());
+    String text = node.getToken();
+    sb.print(text != null ? text : node.getValue().toString());
     return false;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -136,7 +136,7 @@ public static Element getElement(IBinding binding) {
       element = new JdtPackageElement((IPackageBinding) binding);
     } else if (binding instanceof ITypeBinding) {
       ITypeBinding typeBinding = (ITypeBinding) binding;
-      element = typeBinding.isTypeVariable()
+      element = typeBinding.isTypeVariable() || typeBinding.isCapture()
           ? new JdtTypeParameterElement(typeBinding) : new JdtTypeElement(typeBinding);
     } else if (binding instanceof IVariableBinding) {
       element = JdtVariableElement.create((IVariableBinding) binding);

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -417,7 +417,7 @@ private String getParameterTypeKeyword(TypeMirror type) {
     }
     String name;
     if (type.getKind().isPrimitive()) {
-      name = typeUtil.getName(type);
+      name = TypeUtil.getName(type);
     } else {
       // For type variables, use the first bound for the parameter keyword.
       List<? extends TypeMirror> bounds = typeUtil.getUpperBounds(type);

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -46,6 +46,7 @@
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
+import javax.lang.model.element.Name;
 import javax.lang.model.element.NestingKind;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;

File: translator/src/main/java/com/google/devtools/j2objc/ast/MethodInvocation.java
Patch:
@@ -134,5 +134,6 @@ public void validateInner() {
     super.validateInner();
     Preconditions.checkNotNull(method);
     Preconditions.checkNotNull(name.get());
+    Preconditions.checkNotNull(typeMirror);
   }
 }

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/CycleFinder.java
Patch:
@@ -161,7 +161,7 @@ public static void printCycles(Collection<? extends Iterable<Edge>> cycles, Prin
       }
       out.println("----- Full Types -----");
       for (Edge e : cycle) {
-        out.println(e.getOrigin().getKey());
+        out.println(e.getOrigin().getSignature());
       }
     }
     out.println();

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -470,6 +470,9 @@ public static PackageElement getPackage(Element e) {
   }
 
   public String getBinaryName(TypeElement e) {
+    if (e instanceof GeneratedTypeElement) {
+      return e.getQualifiedName().toString();
+    }
     return javacElements.getBinaryName(e).toString();
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/pipeline/TranslationProcessorTest.java
Patch:
@@ -58,7 +58,7 @@ public void testJarBatchTranslation() throws IOException {
     GenerationBatch batch = new GenerationBatch();
     batch.addSource(new JarredInputFile(getTempDir() + "/test.jar", "mypkg/Foo.java"));
     batch.addSource(new JarredInputFile(getTempDir() + "/test.jar", "mypkg/Bar.java"));
-    TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(), null, null);
+    TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(), null);
     processor.processInputs(batch.getInputs());
 
     assertEquals(0, ErrorUtil.errorCount());
@@ -71,7 +71,7 @@ public void testSingleSourceFileBuildClosure() throws IOException {
 
     GenerationBatch batch = new GenerationBatch();
     batch.addSource(new RegularInputFile(getTempDir() + "/Test.java", "Test.java"));
-    TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(), null, null);
+    TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(), null);
     processor.processInputs(batch.getInputs());
     processor.processBuildClosureDependencies();
 
@@ -95,7 +95,7 @@ public void testDuplicateSourceFileOnSourcepath() throws IOException {
     GenerationBatch batch = new GenerationBatch();
     batch.addSource(new RegularInputFile(getTempDir() + "/Test.java", "Test.java"));
     batch.addSource(new RegularInputFile(getTempDir() + "/src/main/java/Foo.java", "Foo.java"));
-    TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(), null, null);
+    TranslationProcessor processor = new TranslationProcessor(J2ObjC.createParser(), null);
     processor.processInputs(batch.getInputs());
     processor.processBuildClosureDependencies();
 

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -48,7 +48,6 @@
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
 import org.eclipse.jdt.core.dom.IBinding;
@@ -182,8 +181,8 @@ public static TypeElement getDeclaringClass(Element element) {
   }
 
   public static TypeElement getSuperclass(TypeElement element) {
-    DeclaredType superClass = (DeclaredType) element.getSuperclass();
-    return superClass != null ? (TypeElement) superClass.asElement() : null;
+    TypeMirror supertype = element.getSuperclass();
+    return supertype != null ? TypeUtil.asTypeElement(supertype) : null;
   }
 
   public static List<TypeElement> getInterfaces(TypeElement element) {

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -48,6 +48,7 @@
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
 import org.eclipse.jdt.core.dom.IBinding;
@@ -181,7 +182,8 @@ public static TypeElement getDeclaringClass(Element element) {
   }
 
   public static TypeElement getSuperclass(TypeElement element) {
-    return TypeUtil.asTypeElement(element.getSuperclass());
+    DeclaredType superClass = (DeclaredType) element.getSuperclass();
+    return superClass != null ? (TypeElement) superClass.asElement() : null;
   }
 
   public static List<TypeElement> getInterfaces(TypeElement element) {

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -48,7 +48,6 @@
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
 import org.eclipse.jdt.core.dom.IBinding;
@@ -182,8 +181,7 @@ public static TypeElement getDeclaringClass(Element element) {
   }
 
   public static TypeElement getSuperclass(TypeElement element) {
-    DeclaredType superClass = (DeclaredType) element.getSuperclass();
-    return superClass != null ? (TypeElement) superClass.asElement() : null;
+    return TypeUtil.asTypeElement(element.getSuperclass());
   }
 
   public static List<TypeElement> getInterfaces(TypeElement element) {

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -328,7 +328,7 @@ private TreeNode convertInner(JCTree javacNode) {
       case SYNCHRONIZED:
         return convertSynchronized((JCTree.JCSynchronized) javacNode);
       case NULL_LITERAL:
-        return new NullLiteral();
+        return new NullLiteral(((JCTree.JCLiteral) javacNode).type);
 
       case AND:
       case CONDITIONAL_AND:

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -271,7 +271,7 @@ private static TreeNode convertInner(ASTNode jdtNode) {
       case ASTNode.NORMAL_ANNOTATION:
         return convertNormalAnnotation((org.eclipse.jdt.core.dom.NormalAnnotation) jdtNode);
       case ASTNode.NULL_LITERAL:
-        return new NullLiteral();
+        return new NullLiteral(BindingConverter.NULL_TYPE);
       case ASTNode.NUMBER_LITERAL:
         return convertNumberLiteral((org.eclipse.jdt.core.dom.NumberLiteral) jdtNode);
       case ASTNode.PACKAGE_DECLARATION:

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -301,7 +301,7 @@ public Expression createAnnotation(AnnotationMirror annotationMirror) {
   public Expression createAnnotationValue(TypeMirror type, AnnotationValue aValue) {
     Object value = aValue.getValue();
     if (value == null) {
-      return new NullLiteral();
+      return new NullLiteral(typeUtil.getNull());
     } else if (value instanceof VariableElement) {
       return new SimpleName((VariableElement) value);
     } else if (TypeUtil.isArray(type)) {

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -558,6 +558,8 @@ public static String getName(TypeMirror t) {
         return getName(((ArrayType) t).getComponentType()) + "[]";
       case DECLARED:
         return ElementUtil.getName(asTypeElement(t));
+      case TYPEVAR:
+        return ElementUtil.getName(((TypeVariable) t).asElement());
       case BOOLEAN:
         return "boolean";
       case BYTE:

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.devtools.j2objc.ast.LambdaExpressionTest;
 import com.google.devtools.j2objc.ast.MethodReferenceTest;
-import com.google.devtools.j2objc.ast.TreeUtilTest;
 import com.google.devtools.j2objc.gen.ArrayAccessTest;
 import com.google.devtools.j2objc.gen.ArrayCreationTest;
 import com.google.devtools.j2objc.gen.JavadocGeneratorTest;
@@ -152,7 +151,6 @@ public class SmallTests {
     TypeImplementationGeneratorTest.class,
     TranslationProcessorTest.class,
     TranslationUtilTest.class,
-    TreeUtilTest.class,
     UnicodeUtilsTest.class,
     UnsequencedExpressionRewriterTest.class,
     VarargsRewriterTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/ast/UnitTreeVisitor.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.devtools.j2objc.gen.SignatureGenerator;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TranslationEnvironment;
@@ -30,7 +29,6 @@ public class UnitTreeVisitor extends TreeVisitor {
   protected final CompilationUnit unit;
   protected final ElementUtil elementUtil;
   protected final TypeUtil typeUtil;
-  protected final Types typeEnv;
   protected final NameTable nameTable;
   protected final SignatureGenerator signatureGenerator;
   protected final TranslationUtil translationUtil;
@@ -40,7 +38,6 @@ public UnitTreeVisitor(CompilationUnit unit) {
     TranslationEnvironment env = unit.getEnv();
     elementUtil = env.elementUtil();
     typeUtil = env.typeUtil();
-    typeEnv = env.types();
     nameTable = env.nameTable();
     signatureGenerator = env.signatureGenerator();
     translationUtil = env.translationUtil();

File: translator/src/main/java/com/google/devtools/j2objc/ast/PrefixExpression.java
Patch:
@@ -29,7 +29,7 @@ public class PrefixExpression extends Expression {
   public static enum Operator {
     INCREMENT("++"),
     DECREMENT("--"),
-    PLUS("+"),
+    POSITIVE("+"),
     NEGATIVE("-"),
     COMPLEMENT("~"),
     NOT("!"),
@@ -43,7 +43,8 @@ public static enum Operator {
       for (Operator operator : Operator.values()) {
         stringLookup.put(operator.toString(), operator);
       }
-      // javac uses "---" to differentiate from minus infix operator.
+      // javac uses "+++" and "---" to differentiate from infix operators.
+      stringLookup.put("+++", POSITIVE);
       stringLookup.put("---", NEGATIVE);
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/UnitTreeVisitor.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.gen.SignatureGenerator;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.NameTable;
@@ -31,6 +32,7 @@ public class UnitTreeVisitor extends TreeVisitor {
   protected final TypeUtil typeUtil;
   protected final Types typeEnv;
   protected final NameTable nameTable;
+  protected final SignatureGenerator signatureGenerator;
   protected final TranslationUtil translationUtil;
 
   public UnitTreeVisitor(CompilationUnit unit) {
@@ -40,6 +42,7 @@ public UnitTreeVisitor(CompilationUnit unit) {
     typeUtil = env.typeUtil();
     typeEnv = env.types();
     nameTable = env.nameTable();
+    signatureGenerator = env.signatureGenerator();
     translationUtil = env.translationUtil();
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtTypeVariable.java
Patch:
@@ -75,8 +75,7 @@ public <R, P> R accept(TypeVisitor<R, P> v, P p) {
 
   @Override
   public Element asElement() {
-    // TODO(tball): implement.
-    return null;
+    return BindingConverter.getElement(binding);
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -46,7 +46,6 @@
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
 import com.google.devtools.j2objc.ast.UnitTreeVisitor;
-import com.google.devtools.j2objc.gen.SignatureGenerator;
 import com.google.devtools.j2objc.types.FunctionElement;
 import com.google.devtools.j2objc.types.GeneratedExecutableElement;
 import com.google.devtools.j2objc.types.GeneratedVariableElement;
@@ -376,7 +375,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     FunctionDeclaration function =
         new FunctionDeclaration(nameTable.getFullFunctionName(elem), elem.getReturnType());
-    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(elem));
+    function.setJniSignature(signatureGenerator.createJniFunctionSignature(elem));
     function.setLineNumber(method.getName().getLineNumber());
 
     if (!ElementUtil.isStatic(elem)) {

File: translator/src/test/java/com/google/devtools/j2objc/util/PackagePrefixesTest.java
Patch:
@@ -72,7 +72,7 @@ public void testGetFullNameWithPrefix() {
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(0);
-    assertEquals("FBSomeClass", nameTable.getFullName(decl.getTypeBinding()));
+    assertEquals("FBSomeClass", nameTable.getFullName(decl.getTypeElement()));
   }
 
   // Verify inner class name with prefix.
@@ -82,7 +82,7 @@ public void testGetFullNameWithInnerClassAndPrefix() {
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(1);
-    assertEquals("FBSomeClass_Inner", nameTable.getFullName(decl.getTypeBinding()));
+    assertEquals("FBSomeClass_Inner", nameTable.getFullName(decl.getTypeElement()));
   }
 
   public void testPackageWildcards() throws IOException {
@@ -91,7 +91,7 @@ public void testPackageWildcards() throws IOException {
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(0);
-    assertEquals("FBSomeClass", nameTable.getFullName(decl.getTypeBinding()));
+    assertEquals("FBSomeClass", nameTable.getFullName(decl.getTypeElement()));
   }
 
   public void testWildcardToRegex() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -538,8 +538,7 @@ private void printBoxedOperators() {
   }
 
   private void printUnprefixedAlias() {
-    String pkg = ElementUtil.getName(ElementUtil.getPackage(typeElement));
-    if (nameTable.hasPrefix(pkg) && ElementUtil.isTopLevel(typeElement)) {
+    if (ElementUtil.isTopLevel(typeElement)) {
       String unprefixedName =
           NameTable.camelCaseQualifiedName(ElementUtil.getQualifiedName(typeElement));
       if (!unprefixedName.equals(typeName)) {

File: translator/src/test/java/com/google/devtools/j2objc/util/PackagePrefixesTest.java
Patch:
@@ -41,8 +41,8 @@ public void testPackagePrefixesFile() throws IOException {
     Properties properties = new Properties();
     properties.load(reader);
     PackagePrefixes prefixMap = Options.getPackagePrefixes();
-    assertFalse(prefixMap.hasPrefix("java.lang"));
-    assertFalse(prefixMap.hasPrefix("foo.bar"));
+    assertNull(prefixMap.getPrefix("java.lang"));
+    assertNull(prefixMap.getPrefix("foo.bar"));
     prefixMap.addPrefixProperties(properties);
     assertEquals("JL", prefixMap.getPrefix("java.lang"));
     assertEquals("FB", prefixMap.getPrefix("foo.bar"));

File: translator/src/main/java/com/google/devtools/j2objc/translate/SuperMethodInvocationRewriter.java
Patch:
@@ -143,7 +143,7 @@ public void endVisit(SuperMethodInvocation node) {
     List<Expression> args = invocation.getArguments();
     args.add(TreeUtil.remove(receiver));
     String selectorExpr = UnicodeUtils.format("@selector(%s)", nameTable.getMethodSelector(method));
-    args.add(new NativeExpression(selectorExpr, typeEnv.getIdType()));
+    args.add(new NativeExpression(selectorExpr, TypeUtil.ID_TYPE));
     TreeUtil.copyList(node.getArguments(), args);
     node.replaceWith(invocation);
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -20,8 +20,7 @@
 import com.google.devtools.j2objc.ast.Expression;
 import com.google.devtools.j2objc.ast.FunctionDeclaration;
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
-
-import org.eclipse.jdt.core.dom.Modifier;
+import java.lang.reflect.Modifier;
 
 /**
  * Generates private type declarations within the source file.

File: translator/src/main/java/com/google/devtools/j2objc/translate/ComplexExpressionExtractor.java
Patch:
@@ -35,12 +35,12 @@
 import com.google.devtools.j2objc.ast.VariableDeclarationStatement;
 import com.google.devtools.j2objc.ast.WhileStatement;
 import com.google.devtools.j2objc.types.GeneratedVariableElement;
+import com.google.devtools.j2objc.util.TypeUtil;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.TypeKind;
 
 /**
  * Detects deep expression trees and extracts them into separate statements.
@@ -163,7 +163,7 @@ public void endVisit(PrefixExpression node) {
 
   @Override
   public void endVisit(Assignment node) {
-    if (node.getTypeMirror().getKind() == TypeKind.BOOLEAN) {
+    if (TypeUtil.isBoolean(node.getTypeMirror())) {
       if (node.getRightHandSide() instanceof InfixExpression) {
         // Avoid clang precedence warning by putting parentheses around expression.
         ParenthesizedExpression.parenthesizeAndReplace(node.getRightHandSide());

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -610,7 +610,7 @@ public static boolean hasNullableAnnotation(Element element) {
   public static boolean hasNonnullAnnotation(Element element) {
     Pattern p = Pattern.compile("No[nt][Nn]ull");
     for (AnnotationMirror annotation : element.getAnnotationMirrors()) {
-      if (p.matcher(annotation.getClass().getSimpleName()).matches()) {
+      if (p.matcher(annotation.getAnnotationType().asElement().getSimpleName()).matches()) {
         return true;
       }
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -269,7 +269,7 @@ protected void printInstanceVariables() {
           // included by a file compiled with ARC.
           print("__unsafe_unretained ");
         }
-        String objcType = getDeclarationType(varBinding);
+        String objcType = getDeclarationType(BindingConverter.getVariableElement(varBinding));
         needsAsterisk = objcType.endsWith("*");
         if (needsAsterisk) {
           // Strip pointer from type, as it will be added when appending fragment.
@@ -438,7 +438,7 @@ private void printStaticFieldFullDeclaration(VariableDeclarationFragment fragmen
     boolean isVolatile = BindingUtil.isVolatile(var);
     String objcType = nameTable.getObjCType(var.getType());
     String objcTypePadded = objcType + (objcType.endsWith("*") ? "" : " ");
-    String declType = getDeclarationType(var);
+    String declType = getDeclarationType(BindingConverter.getVariableElement(var));
     declType += (declType.endsWith("*") ? "" : " ");
     String name = nameTable.getVariableShortName(var);
     boolean isFinal = Modifier.isFinal(var.getModifiers());

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -489,7 +489,7 @@ public boolean isObjcAssignable(TypeMirror t1, TypeMirror t2) {
     return true;
   }
 
-  private boolean isObjcSubtype(TypeElement type, TypeElement targetSupertype) {
+  public boolean isObjcSubtype(TypeElement type, TypeElement targetSupertype) {
     if (type == null) {
       return false;
     }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -95,11 +95,11 @@ public final void accept(TreeVisitor visitor) {
         acceptInner(visitor);
       }
       visitor.postVisit(this);
-    } catch (TreeVisitorAssertionError e) {
+    } catch (TreeVisitorError e) {
       // Avoid re-wrapping.
       throw e;
-    } catch (AssertionError e) {
-      throw new TreeVisitorAssertionError(e, this);
+    } catch (Throwable t) {
+      throw new TreeVisitorError(t, this);
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtExecutableElement.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.google.devtools.j2objc.jdt;
 
+import com.google.devtools.j2objc.types.GeneratedVariableElement;
 import java.util.ArrayList;
 import java.util.List;
 import javax.lang.model.element.AnnotationValue;
@@ -69,7 +70,8 @@ public List<? extends VariableElement> getParameters() {
     List<VariableElement> params = new ArrayList<>();
     ITypeBinding[] paramTypes = methodBinding.getParameterTypes();
     for (int i = 0; i < paramTypes.length; i++) {
-      params.add(JdtVariableElement.createParameterElement(paramTypes[i], methodBinding, i));
+      params.add(GeneratedVariableElement.newParameter(
+          "param" + i, BindingConverter.getType(paramTypes[i]), this));
     }
     return params;
   }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGeneratorTest.java
Patch:
@@ -162,6 +162,7 @@ public void testTypeVariableReturnType() throws IOException {
   }
 
   public void testOverriddenGenericConstructor() throws IOException {
+    Options.setDisallowInheritedConstructors(true);
     addSourceFile("class A<T> { A(T t) {} }", "A.java");
     String translation = translateSourceFile(
         "class B extends A<String> { B(String s) { super(s); } }", "B", "B.h");

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -78,7 +78,7 @@ public class Options {
   private boolean staticAccessorMethods = false;
   private int batchTranslateMaximum = -1;
   private String processors = null;
-  private boolean disallowInheritedConstructors = true;
+  private boolean disallowInheritedConstructors = false;
   private boolean swiftFriendly = false;
   private boolean nullability = false;
   private EnumSet<LintOption> lintOptions = EnumSet.noneOf(LintOption.class);

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -81,7 +81,7 @@ protected void generate() {
     printStaticVars();
     printEnumValuesArray();
 
-    if (!typeBinding.isInterface() || needsCompanionClass()) {
+    if (!typeElement.getKind().isInterface() || needsCompanionClass()) {
       newline();
       syncLineNumbers(typeNode.getName()); // avoid doc-comment
       printf("@implementation %s\n", typeName);

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -23,7 +23,6 @@
 import com.google.devtools.j2objc.util.TranslationEnvironment;
 import java.util.Collection;
 import java.util.Set;
-import javax.lang.model.element.NestingKind;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
@@ -43,7 +42,7 @@ public class Import implements Comparable<Import> {
   private Import(TypeElement type, NameTable nameTable) {
     this.typeName = nameTable.getFullName(type);
     TypeElement mainType = type;
-    while (mainType.getNestingKind() != NestingKind.TOP_LEVEL) {
+    while (!ElementUtil.isTopLevel(mainType)) {
       mainType = ElementUtil.getDeclaringClass(mainType);
     }
     this.importFileName = Options.getHeaderMap().get(mainType);

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGeneratorTest.java
Patch:
@@ -166,7 +166,7 @@ public void testOverriddenGenericConstructor() throws IOException {
     String translation = translateSourceFile(
         "class B extends A<String> { B(String s) { super(s); } }", "B", "B.h");
     assertTranslation(translation, "- (instancetype)initWithNSString:(NSString *)s;");
-    assertNotInTranslation(translation, "initWithId");
+    assertTranslation(translation, "initWithId:(id)arg0 NS_UNAVAILABLE;");
   }
 
   public void testPrivateMethodHiding() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -66,10 +66,8 @@ public class NameTable {
   private final Map<IVariableBinding, String> variableNames = new HashMap<>();
 
   public static final String INIT_NAME = "init";
-  public static final String ALLOC_METHOD = "alloc";
   public static final String RETAIN_METHOD = "retain";
   public static final String RELEASE_METHOD = "release";
-  public static final String AUTORELEASE_METHOD = "autorelease";
   public static final String DEALLOC_METHOD = "dealloc";
   public static final String FINALIZE_METHOD = "finalize";
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/Autoboxer.java
Patch:
@@ -334,7 +334,7 @@ public void endVisit(InfixExpression node) {
       return;
     }
     // Don't unbox for string concatenation.
-    if (op == InfixExpression.Operator.PLUS && typeEnv.isJavaStringType(node.getTypeMirror())) {
+    if (op == InfixExpression.Operator.PLUS && typeUtil.isString(node.getTypeMirror())) {
       return;
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -287,7 +287,8 @@ private boolean returnValueNeedsIntCast(Expression arg) {
         && methodBinding.getReturnType().isEqualTo(typeEnv.resolveJavaType("int"))) {
       return true;
     }
-    if (typeEnv.isStringType(methodBinding.getDeclaringClass()) && methodName.equals("length")) {
+    if (typeUtil.isString(BindingConverter.getTypeElement(methodBinding.getDeclaringClass()))
+        && methodName.equals("length")) {
       return true;
     }
     return false;

File: translator/src/main/java/com/google/devtools/j2objc/translate/DeadCodeEliminator.java
Patch:
@@ -129,7 +129,7 @@ private boolean isInlinableConstant(BodyDeclaration decl) {
       return false;
     }
     TypeMirror type = ((FieldDeclaration) decl).getType().getTypeMirror();
-    if (!(type.getKind().isPrimitive() || typeEnv.isStringType(type))) {
+    if (!(type.getKind().isPrimitive() || typeUtil.isString(type))) {
       return false;
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -118,7 +118,7 @@ public void endVisit(ForStatement node) {
   @Override
   public void endVisit(InfixExpression node) {
     InfixExpression.Operator op = node.getOperator();
-    if (typeEnv.isJavaStringType(node.getTypeMirror()) && op == InfixExpression.Operator.PLUS) {
+    if (typeUtil.isString(node.getTypeMirror()) && op == InfixExpression.Operator.PLUS) {
       rewriteStringConcat(node);
     } else if (op == InfixExpression.Operator.CONDITIONAL_AND) {
       // Avoid logical-op-parentheses compiler warnings.
@@ -153,7 +153,7 @@ private void rewriteStringConcat(InfixExpression node) {
     TypeMirror nonStringExprType = null;
     for (Expression operand : node.getOperands()) {
       TypeMirror operandType = operand.getTypeMirror();
-      if (typeEnv.isJavaStringType(operandType)) {
+      if (typeUtil.isString(operandType)) {
         break;
       }
       nonStringOperands.add(operand);
@@ -301,7 +301,7 @@ public void endVisit(PropertyAnnotation node) {
     FieldDeclaration field = (FieldDeclaration) node.getParent();
     TypeMirror fieldType = field.getType().getTypeMirror();
     VariableDeclarationFragment firstVarNode = field.getFragment(0);
-    if (typeEnv.isStringType(fieldType)) {
+    if (typeUtil.isString(fieldType)) {
       node.addAttribute("copy");
     } else if (ElementUtil.hasAnnotation(firstVarNode.getVariableElement(), Weak.class)) {
       if (node.hasAttribute("strong")) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/SwitchRewriter.java
Patch:
@@ -123,7 +123,7 @@ private void fixVariableDeclarations(SwitchStatement node) {
   private void fixStringValue(SwitchStatement node) {
     Expression expr = node.getExpression();
     TypeMirror type = expr.getTypeMirror();
-    if (!typeEnv.isJavaStringType(type)) {
+    if (!typeUtil.isString(type)) {
       return;
     }
     ArrayType arrayType = typeUtil.getArrayType(type);

File: translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
Patch:
@@ -101,16 +101,15 @@ public static String createMethodTypeSignature(ExecutableElement method) {
     return builder.toString();
   }
 
-  public static String createJniFunctionSignature(
-      ExecutableElement method, ElementUtil elementUtil) {
+  public static String createJniFunctionSignature(ExecutableElement method) {
     // Mangle function name as described in JNI specification.
     // http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html#wp615
     StringBuilder sb = new StringBuilder();
     sb.append("Java_");
 
     String methodName = ElementUtil.getName(method);
     TypeElement declaringClass = ElementUtil.getDeclaringClass(method);
-    PackageElement pkg = elementUtil.getPackage(declaringClass);
+    PackageElement pkg = ElementUtil.getPackage(declaringClass);
     if (pkg != null && !pkg.isUnnamed()) {
       String pkgName = pkg.getQualifiedName().toString();
       for (String part : pkgName.split("\\.")) {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -92,6 +92,8 @@ public static TypeMirror getType(ITypeBinding binding) {
       type = new JdtWildcardType(binding);
     } else if (binding.isCapture()) {
       type = JdtTypeVariable.fromCapture(binding);
+    } else if (binding.isNullType()) {
+      return NULL_TYPE;
     } else {
       type = new JdtDeclaredType(binding);
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -371,7 +371,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     FunctionDeclaration function =
         new FunctionDeclaration(nameTable.getFullFunctionName(elem), elem.getReturnType());
-    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(elem, elementUtil));
+    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(elem));
     function.setLineNumber(method.getName().getLineNumber());
 
     if (!ElementUtil.isStatic(elem)) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -144,7 +144,7 @@ private void generateClassMetadata() {
           + "%s, %s, %%s, %s, %s, %d, 0x%x, %d, %d, %s, %s, %s, %s, %s };",
           fullName,
           cStr(ElementUtil.isAnonymous(type) ? "" : ElementUtil.getName(type)),
-          cStr(Strings.emptyToNull(ElementUtil.getName(elementUtil.getPackage(type)))),
+          cStr(Strings.emptyToNull(ElementUtil.getName(ElementUtil.getPackage(type)))),
           methodMetadataCount > 0 ? "methods" : "NULL",
           fieldMetadataCount > 0 ? "fields" : "NULL",
           METADATA_VERSION,

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -96,12 +96,11 @@ private void addImports(TypeElement type) {
   }
 
   private void addImports(TypeMirror type) {
-    Import.addImports(
-        BindingConverter.unwrapTypeMirrorIntoTypeBinding(type), imports, unit.getEnv());
+    Import.addImports(type, imports, unit.getEnv());
   }
 
   private void addImports(ITypeBinding type) {
-    Import.addImports(type, imports, unit.getEnv());
+    Import.addImports(BindingConverter.getType(type), imports, unit.getEnv());
   }
 
   private void addImports(Iterable<TypeMirror> types) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTDump.java
Patch:
@@ -42,6 +42,7 @@ public class DebugASTDump extends TreeVisitor {
   public static void dumpUnit(CompilationUnit unit) {
     String relativeOutputPath = unit.getMainTypeName().replace('.', '/') + ".ast";
     File outputFile = new File(Options.getOutputDirectory(), relativeOutputPath);
+    outputFile.getParentFile().mkdirs();
 
     try (FileOutputStream fout = new FileOutputStream(outputFile);
         OutputStreamWriter out = new OutputStreamWriter(fout, "UTF-8")) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/Type.java
Patch:
@@ -42,7 +42,7 @@ public Type(TypeMirror typeMirror) {
   }
 
   public static Type newType(TypeMirror typeMirror) {
-    if (typeMirror.getKind().isPrimitive()) {
+    if (typeMirror.getKind().isPrimitive() || typeMirror.getKind() == TypeKind.VOID) {
       return new PrimitiveType(typeMirror);
     } else if (typeMirror.getKind().equals(TypeKind.ARRAY)) {
       return new ArrayType((javax.lang.model.type.ArrayType) typeMirror);

File: translator/src/test/java/com/google/devtools/j2objc/translate/OuterReferenceResolverTest.java
Patch:
@@ -98,7 +98,7 @@ public void testInheritedOuterMethod() {
     assertTrue(expr instanceof SimpleName);
     VariableElement fooReceiver = TreeUtil.getVariableElement(expr);
     assertNotNull(fooReceiver);
-    assertEquals("B", fooReceiver.asType().toString());
+    assertEquals("Test.B", fooReceiver.asType().toString());
   }
 
   public void testCapturedLocalVariable() {

File: translator/src/test/java/com/google/devtools/j2objc/util/ElementUtilTest.java
Patch:
@@ -50,7 +50,8 @@ public void testGetAnnotation() throws IOException {
     AbstractTypeDeclaration decl = unit.getTypes().get(0);
     TypeElement element = decl.getTypeElement();
     AnnotationMirror annotation = ElementUtil.getAnnotation(element, ObjectiveCName.class);
-    assertEquals("ObjectiveCName", annotation.getAnnotationType().toString());
+    assertEquals("com.google.j2objc.annotations.ObjectiveCName",
+        annotation.getAnnotationType().toString());
   }
 
   public void testGetAnnotationValue() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperFieldAccess.java
Patch:
@@ -51,7 +51,8 @@ public SuperFieldAccess setVariableElement(VariableElement var) {
 
   @Override
   public TypeMirror getTypeMirror() {
-    return variableElement != null ? variableElement.asType() : null;
+    SimpleName nameNode = name.get();
+    return nameNode != null ? nameNode.getTypeMirror() : null;
   }
 
   public Name getQualifier() {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -144,7 +144,7 @@ public static Element getElement(IBinding binding) {
       element = typeBinding.isTypeVariable()
           ? new JdtTypeParameterElement(typeBinding) : new JdtTypeElement(typeBinding);
     } else if (binding instanceof IVariableBinding) {
-      element = new JdtVariableElement((IVariableBinding) binding);
+      element = JdtVariableElement.create((IVariableBinding) binding);
     } else {
       throw new AssertionError("unknown element binding: " + binding.getClass().getSimpleName());
     }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -961,7 +961,9 @@ private static TreeNode convertReturnStatement(org.eclipse.jdt.core.dom.ReturnSt
   private static TreeNode convertSimpleName(org.eclipse.jdt.core.dom.SimpleName node) {
     SimpleName newNode = new SimpleName();
     convertName(node, newNode);
-    return newNode.setIdentifier(node.getIdentifier());
+    return newNode
+        .setIdentifier(node.getIdentifier())
+        .setTypeMirror(BindingConverter.getType(node.resolveTypeBinding()));
   }
 
   private static TreeNode convertSimpleType(org.eclipse.jdt.core.dom.SimpleType node) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -501,16 +501,15 @@ public void endVisit(SimpleName node) {
       VariableElement var = TreeUtil.getVariableElement(node);
       if (var != null && var.getKind().isField()) {
         // Convert name to self->name.
-        node.replaceWith(new QualifiedName(var, new SimpleName(selfParam)));
+        node.replaceWith(new QualifiedName(var, node.getTypeMirror(), new SimpleName(selfParam)));
       }
     }
 
     @Override
     public boolean visit(SuperFieldAccess node) {
       // Change super.field expression to self.field.
       SimpleName qualifier = new SimpleName(selfParam);
-      FieldAccess newAccess = new FieldAccess(node.getVariableElement(), qualifier);
-      node.replaceWith(newAccess);
+      node.replaceWith(new FieldAccess(node.getVariableElement(), node.getTypeMirror(), qualifier));
       return false;
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -240,10 +240,10 @@ private Name getOuterPathInherited(TypeElement type) {
     return path;
   }
 
-  private Name getPathForField(VariableElement var) {
+  private Name getPathForField(VariableElement var, TypeMirror type) {
     Name path = getOuterPathInherited((TypeElement) var.getEnclosingElement());
     if (path != null) {
-      path = Name.newName(path, var);
+      path = Name.newName(path, var, type);
     }
     return path;
   }
@@ -420,7 +420,7 @@ public boolean visit(SimpleName node) {
     if (var != null) {
       Expression path = null;
       if (ElementUtil.isInstanceVar(var)) {
-        path = getPathForField(var);
+        path = getPathForField(var, node.getTypeMirror());
       } else if (!var.getKind().isField()) {
         path = getPathForLocalVar(var);
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -251,7 +251,8 @@ public boolean visit(QualifiedName node) {
     Expression qualifier = node.getQualifier();
     if (var != null && var.getKind().isField() && TreeUtil.getVariableElement(qualifier) != null) {
       // FieldAccess nodes are more easily mutated than QualifiedName.
-      FieldAccess fieldAccess = new FieldAccess(var, TreeUtil.remove(qualifier));
+      FieldAccess fieldAccess =
+          new FieldAccess(var, node.getTypeMirror(), TreeUtil.remove(qualifier));
       node.replaceWith(fieldAccess);
       fieldAccess.accept(this);
       return false;

File: translator/src/test/java/com/google/devtools/j2objc/translate/CastResolverTest.java
Patch:
@@ -179,7 +179,7 @@ public void testAccessOfFieldFromSubclassWithMoreSpecificTypeVariable() throws I
         + "class A<T extends I1> { T foo; }"
         + "class B<T extends I2> extends A<T> {}", "Test", "Test.m");
     // Test that access of "foo" from subclass B is cast to id<I2>.
-    assertTranslation(translation, "[self test1WithI2:((id<I2>) ((B *) nil_chk(b))->foo_)];");
+    assertTranslation(translation, "[self test1WithI2:((id<I2>) ((A *) nil_chk(b))->foo_)];");
     assertTranslation(translation, "Test_test2WithI2_(self, ((id<I2>) b->foo_));");
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -121,8 +121,8 @@ public static void addImports(
         || BindingUtil.isLambda(binding)) {
       return;
     }
-    if (binding instanceof PointerTypeBinding) {
-      addImports(((PointerTypeBinding) binding).getPointeeType(), imports, env);
+    if (binding instanceof PointerType.Binding) {
+      addImports(((PointerType.Binding) binding).getPointeeType(), imports, env);
       return;
     }
     for (TypeMirror boundT : env.typeUtil().getUpperBounds(BindingConverter.getType(binding))) {

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -113,7 +113,7 @@ public boolean isStringType(ITypeBinding type) {
 
   public boolean isIdType(ITypeBinding type) {
     return type == idType || type == NSObject || type == javaObjectType
-        || (type instanceof NativeTypeBinding && type.getName().equals("id"));
+        || (type instanceof NativeType.Binding && type.getName().equals("id"));
   }
 
   // Used by SignatureGenerator. Other classes should use getNSObject().

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -117,16 +117,17 @@ public static Set<Import> getImports(ITypeBinding binding, TranslationEnvironmen
 
   public static void addImports(
       ITypeBinding binding, Collection<Import> imports, TranslationEnvironment env) {
-    if (binding == null || binding.isPrimitive() || BindingUtil.isLambda(binding)) {
+    if (binding == null || binding.isPrimitive() || binding.isNullType()
+        || BindingUtil.isLambda(binding)) {
       return;
     }
     if (binding instanceof PointerTypeBinding) {
       addImports(((PointerTypeBinding) binding).getPointeeType(), imports, env);
       return;
     }
     for (TypeMirror boundT : env.typeUtil().getUpperBounds(BindingConverter.getType(binding))) {
+      boundT = env.typeUtil().mapType(boundT);
       ITypeBinding bound = BindingConverter.unwrapTypeMirrorIntoTypeBinding(boundT);
-      bound = env.types().mapType(bound);
       if (!FOUNDATION_TYPES.contains(bound.getName())) {
         imports.add(new Import(bound, env.nameTable()));
       }

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -845,7 +845,8 @@ public String getFullName(TypeElement element) {
    */
   public String getFullName(ITypeBinding binding) {
     // Make sure type variables aren't included.
-    binding = typeEnv.mapType(binding.getErasure());
+    binding = BindingConverter.unwrapTypeMirrorIntoTypeBinding(
+        typeUtil.mapType(BindingConverter.getType(binding.getErasure())));
 
     // Avoid package prefix renaming for package-info types, and use a valid ObjC name that doesn't
     // have a dash character.

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationEnvironment.java
Patch:
@@ -31,7 +31,7 @@ public class TranslationEnvironment {
   public TranslationEnvironment(ParserEnvironment parserEnv) {
     elementUtil = new ElementUtil(parserEnv.elementUtilities());
     typeUtil = new TypeUtil(parserEnv, elementUtil);
-    typeEnv = new Types(parserEnv, typeUtil);
+    typeEnv = new Types(parserEnv);
     captureInfo = new CaptureInfo(typeUtil);
     nameTable = new NameTable(typeEnv, typeUtil, captureInfo);
     translationUtil = new TranslationUtil(typeUtil, nameTable);

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -84,7 +84,7 @@ private void addDeallocMethod(AbstractTypeDeclaration node) {
     }
 
     ExecutableElement deallocElement = GeneratedExecutableElement.newMethodWithSelector(
-        NameTable.DEALLOC_METHOD, typeUtil.getVoidType(), type)
+        NameTable.DEALLOC_METHOD, typeUtil.getVoid(), type)
         .addModifiers(Modifier.PUBLIC);
     MethodDeclaration deallocDecl = new MethodDeclaration(deallocElement);
     deallocDecl.setHasDeclaration(false);
@@ -146,7 +146,7 @@ private Statement createRelease(VariableElement var) {
     if (funcName == null) {
       return null;
     }
-    TypeMirror voidType = typeUtil.getVoidType();
+    TypeMirror voidType = typeUtil.getVoid();
     TypeMirror idType = TypeUtil.ID_TYPE;
     FunctionElement element = new FunctionElement(funcName, voidType, null);
     FunctionInvocation releaseInvocation = new FunctionInvocation(element, voidType);

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -164,7 +164,7 @@ private void addNonArcInitialization(EnumDeclaration node) {
     int baseTypeCount = 0;
     List<Statement> sizeStatements = new ArrayList<>();
     List<Statement> initStatements = new ArrayList<>();
-    TypeMirror voidType = typeUtil.getVoidType();
+    TypeMirror voidType = typeUtil.getVoid();
     VariableElement localEnum = GeneratedVariableElement.newLocalVar("e", TypeUtil.ID_TYPE, null);
 
     int i = 0;

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -240,7 +240,7 @@ public void endVisit(SuperConstructorInvocation node) {
     CommonTypeDeclaration typeDecl = TreeUtil.getEnclosingType(node);
     TypeElement superType = ElementUtil.getSuperclass(typeDecl.getTypeElement());
     FunctionElement funcElement = newFunctionElement(element);
-    FunctionInvocation invocation = new FunctionInvocation(funcElement, typeUtil.getVoidType());
+    FunctionInvocation invocation = new FunctionInvocation(funcElement, typeUtil.getVoid());
     List<Expression> args = invocation.getArguments();
     args.add(new ThisExpression(ElementUtil.getDeclaringClass(element).asType()));
     if (captureInfo.needsOuterParam(superType)) {
@@ -263,7 +263,7 @@ public void endVisit(ConstructorInvocation node) {
     ExecutableElement element = node.getExecutableElement();
     TypeElement declaringClass = ElementUtil.getDeclaringClass(element);
     FunctionElement funcElement = newFunctionElement(element);
-    FunctionInvocation invocation = new FunctionInvocation(funcElement, typeUtil.getVoidType());
+    FunctionInvocation invocation = new FunctionInvocation(funcElement, typeUtil.getVoid());
     List<Expression> args = invocation.getArguments();
     args.add(new ThisExpression(declaringClass.asType()));
     for (VariableElement captureParam : captureInfo.getImplicitPrefixParams(declaringClass)) {
@@ -398,7 +398,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
     if (ElementUtil.isStatic(elem)) {
       // Add class initialization invocation, since this may be the first use of this class.
       String initName = UnicodeUtils.format("%s_initialize", nameTable.getFullName(declaringClass));
-      TypeMirror voidType = typeUtil.getVoidType();
+      TypeMirror voidType = typeUtil.getVoid();
       FunctionElement initElement = new FunctionElement(initName, voidType, declaringClass);
       FunctionInvocation initCall = new FunctionInvocation(initElement, voidType);
       function.getBody().addStatement(0, new ExpressionStatement(initCall));

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaCloneWriter.java
Patch:
@@ -69,7 +69,7 @@ public void endVisit(TypeDeclaration node) {
       return;
     }
 
-    TypeMirror voidType = typeUtil.getVoidType();
+    TypeMirror voidType = typeUtil.getVoid();
     ExecutableElement javaCloneElement =
         GeneratedExecutableElement.newMethodWithSelector(JAVA_CLONE_METHOD, voidType, type)
         .addParameter(originalVar);
@@ -113,7 +113,7 @@ private List<Statement> getFieldAdjustments(TypeDeclaration node, VariableElemen
 
   private Statement createReleaseStatement(VariableElement var) {
     if (Options.useARC()) {
-      TypeMirror voidType = typeUtil.getVoidType();
+      TypeMirror voidType = typeUtil.getVoid();
       FunctionElement element = new FunctionElement("JreRelease", voidType, null)
           .addParameters(TypeUtil.ID_TYPE);
       FunctionInvocation invocation = new FunctionInvocation(element, voidType);
@@ -127,7 +127,7 @@ private Statement createReleaseStatement(VariableElement var) {
 
   private Statement createVolatileCloneStatement(
       VariableElement var, VariableElement originalVar, boolean isWeak) {
-    TypeMirror voidType = typeUtil.getVoidType();
+    TypeMirror voidType = typeUtil.getVoid();
     TypeMirror pointerType = new PointerType(var.asType());
     String funcName = "JreCloneVolatile" + (isWeak ? "" : "Strong");
     FunctionElement element = new FunctionElement(funcName, voidType, null)

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedExecutableElement.java
Patch:
@@ -78,7 +78,7 @@ public static GeneratedExecutableElement newMethodWithSelector(
   public static GeneratedExecutableElement newConstructor(
       TypeElement enclosingElement, TypeUtil typeUtil) {
     return new GeneratedExecutableElement(
-        NameTable.INIT_NAME, null, ElementKind.CONSTRUCTOR, typeUtil.getVoidType(),
+        NameTable.INIT_NAME, null, ElementKind.CONSTRUCTOR, typeUtil.getVoid(),
         enclosingElement, false, true);
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -389,7 +389,7 @@ public PrimitiveType getShort() {
     return getPrimitiveType(TypeKind.SHORT);
   }
 
-  public NoType getVoidType() {
+  public NoType getVoid() {
     return javacTypes.getNoType(TypeKind.VOID);
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/BooleanLiteral.java
Patch:
@@ -14,7 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
+import com.google.devtools.j2objc.util.TypeUtil;
 import javax.lang.model.type.TypeMirror;
 
 /**
@@ -31,8 +31,8 @@ public BooleanLiteral(BooleanLiteral other) {
     typeMirror = other.getTypeMirror();
   }
 
-  public BooleanLiteral(boolean booleanValue, Types typeEnv) {
-    this(booleanValue, typeEnv.resolveJavaTypeMirror("boolean"));
+  public BooleanLiteral(boolean booleanValue, TypeUtil typeUtil) {
+    this(booleanValue, typeUtil.getBoolean());
   }
 
   public BooleanLiteral(boolean booleanValue, TypeMirror typeMirror) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/CharacterLiteral.java
Patch:
@@ -14,7 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
+import com.google.devtools.j2objc.util.TypeUtil;
 import javax.lang.model.type.TypeMirror;
 
 /**
@@ -31,8 +31,8 @@ public CharacterLiteral(CharacterLiteral other) {
     typeMirror = other.getTypeMirror();
   }
 
-  public CharacterLiteral(char charValue, Types typeEnv) {
-    this(charValue, typeEnv.resolveJavaTypeMirror("char"));
+  public CharacterLiteral(char charValue, TypeUtil typeUtil) {
+    this(charValue, typeUtil.getChar());
   }
 
   public CharacterLiteral(char charValue, TypeMirror typeMirror) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/StringLiteral.java
Patch:
@@ -14,7 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
+import com.google.devtools.j2objc.util.TypeUtil;
 import javax.lang.model.type.TypeMirror;
 
 /**
@@ -38,8 +38,8 @@ public StringLiteral(String literalValue, TypeMirror type) {
     typeMirror = type;
   }
 
-  public StringLiteral(String literalValue, Types typeEnv) {
-    this(literalValue, typeEnv.resolveJavaTypeMirror("java.lang.String"));
+  public StringLiteral(String literalValue, TypeUtil typeUtil) {
+    this(literalValue, typeUtil.getJavaString().asType());
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/translate/Autoboxer.java
Patch:
@@ -241,7 +241,7 @@ public void endVisit(CastExpression node) {
     Expression expr = node.getExpression();
     TypeMirror exprType = expr.getTypeMirror();
     if (castType.getKind().isPrimitive() && !exprType.getKind().isPrimitive()) {
-      if (typeUtil.isAssignable(exprType, typeEnv.resolveJavaTypeMirror("java.lang.Number"))) {
+      if (typeUtil.isAssignable(exprType, typeUtil.getJavaNumber().asType())) {
         // Casting a Number object to a primitive, convert to value method.
         unbox(expr, (PrimitiveType) castType);
       } else {

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -111,7 +111,7 @@ public void endVisit(CastExpression node) {
   private Expression rewriteFloatToIntegralCast(
       ITypeBinding castType, Expression expr, String funcName, ITypeBinding funcReturnType) {
     FunctionElement element = new FunctionElement(funcName, funcReturnType, null)
-        .addParameters(typeEnv.resolveJavaTypeMirror("double"));
+        .addParameters(typeUtil.getDouble());
     FunctionInvocation invocation = new FunctionInvocation(element, funcReturnType);
     invocation.addArgument(TreeUtil.remove(expr));
     Expression newExpr = invocation;
@@ -131,7 +131,7 @@ private FunctionInvocation createCastCheck(ITypeBinding type, Expression expr) {
           .addParameters(idType, TypeUtil.IOS_CLASS.asType());
       invocation = new FunctionInvocation(element, idType);
       invocation.addArgument(TreeUtil.remove(expr));
-      invocation.addArgument(new TypeLiteral(type, typeEnv));
+      invocation.addArgument(new TypeLiteral(type, typeUtil));
     } else if (type.isClass() || type.isArray() || type.isAnnotation() || type.isEnum()) {
       FunctionElement element = new FunctionElement("cast_chk", idType, null)
           .addParameters(idType, idType);

File: translator/src/main/java/com/google/devtools/j2objc/translate/GwtConverter.java
Patch:
@@ -126,14 +126,13 @@ public boolean visit(MethodInvocation node) {
         && ElementUtil.getQualifiedName(ElementUtil.getDeclaringClass(method)).equals(GWT_CLASS)
         && args.size() == 1) {
       // Convert GWT.create(Foo.class) to Foo.class.newInstance().
-      ExecutableElement newMethod = ElementUtil.findMethod(
-          typeEnv.resolveJavaTypeElement("java.lang.Class"), "newInstance");
+      ExecutableElement newMethod = ElementUtil.findMethod(typeUtil.getJavaClass(), "newInstance");
       node.setName(new SimpleName(newMethod));
       Expression clazz = args.remove(0);
       node.setExpression(clazz);
       node.setExecutablePair(new ExecutablePair(newMethod));
     } else if (isGwtTest(node)) {
-      node.replaceWith(new BooleanLiteral(false, typeEnv));
+      node.replaceWith(new BooleanLiteral(false, typeUtil));
     }
     return true;
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/InitializationNormalizer.java
Patch:
@@ -160,7 +160,7 @@ private boolean requiresInitializer(VariableDeclarationFragment frag) {
           && !UnicodeUtils.hasValidCppCharacters((String) constantValue)) {
         return true;
       }
-      frag.setInitializer(TreeUtil.newLiteral(constantValue, typeEnv));
+      frag.setInitializer(TreeUtil.newLiteral(constantValue, typeUtil));
       return false;
     }
     return true;

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaCloneWriter.java
Patch:
@@ -84,7 +84,7 @@ public void endVisit(TypeDeclaration node) {
     List<Statement> statements = body.getStatements();
 
     ExecutableElement javaCloneSuperElement = GeneratedExecutableElement.newMethodWithSelector(
-        JAVA_CLONE_METHOD, voidType, typeEnv.getJavaObjectElement());
+        JAVA_CLONE_METHOD, voidType, typeUtil.getJavaObject());
     SuperMethodInvocation superCall =
         new SuperMethodInvocation(new ExecutablePair(javaCloneSuperElement));
     superCall.addArgument(new SimpleName(originalVar));
@@ -127,7 +127,7 @@ private Statement createReleaseStatement(VariableElement var) {
 
   private Statement createVolatileCloneStatement(
       VariableElement var, VariableElement originalVar, boolean isWeak) {
-    TypeMirror voidType = typeEnv.resolveJavaTypeMirror("void");
+    TypeMirror voidType = typeUtil.getVoidType();
     TypeMirror pointerType = new PointerType(var.asType());
     String funcName = "JreCloneVolatile" + (isWeak ? "" : "Strong");
     FunctionElement element = new FunctionElement(funcName, voidType, null)

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslator.java
Patch:
@@ -143,8 +143,7 @@ private void addCopyWithZoneMethod(TypeDeclaration node) {
     Block block = new Block();
     copyDecl.setBody(block);
 
-    ExecutableElement cloneElement =
-        ElementUtil.findMethod(typeEnv.getJavaObjectElement(), "clone");
+    ExecutableElement cloneElement = ElementUtil.findMethod(typeUtil.getJavaObject(), "clone");
     MethodInvocation invocation = new MethodInvocation(new ExecutablePair(cloneElement), null);
     if (Options.useReferenceCounting()) {
       invocation = new MethodInvocation(typeEnv.getRetainMethod(), invocation);

File: translator/src/main/java/com/google/devtools/j2objc/translate/LambdaRewriter.java
Patch:
@@ -207,7 +207,7 @@ private void forwardRemainingArgs(Iterator<VariableElement> params, List<Express
     private void rewriteCreationReference(CreationReference node) {
       TypeMirror creationType = node.getType().getTypeMirror();
       if (TypeUtil.isArray(creationType)) {
-        ArrayCreation creation = new ArrayCreation((ArrayType) creationType, typeEnv);
+        ArrayCreation creation = new ArrayCreation((ArrayType) creationType, typeUtil);
         forwardRemainingArgs(createParameters(), creation.getDimensions());
         setImplementationBody(creation);
       } else {
@@ -265,8 +265,7 @@ private ExecutablePair getExecutablePair(TypeMethodReference node) {
       // java.lang.Object.
       String name = node.getName().getIdentifier();
       int numParams = functionalInterface.getParameters().size() - 1;
-      TypeElement javaObject = typeEnv.getJavaObjectElement();
-      for (ExecutableElement method : ElementUtil.getMethods(javaObject)) {
+      for (ExecutableElement method : ElementUtil.getMethods(typeUtil.getJavaObject())) {
         if (ElementUtil.getName(method).equals(name)
             && method.getParameters().size() == numParams) {
           return new ExecutablePair(method);

File: translator/src/main/java/com/google/devtools/j2objc/translate/LambdaTypeElementAdder.java
Patch:
@@ -54,7 +54,7 @@ private String getLambdaUniqueName(FunctionalExpression node) {
   private boolean handleFunctionalExpression(FunctionalExpression node) {
     LambdaTypeElement elem = new LambdaTypeElement(
         getLambdaUniqueName(node), TreeUtil.getEnclosingElement(node),
-        typeEnv.getJavaObjectElement().asType());
+        typeUtil.getJavaObject().asType());
     elem.addInterfaces(node.getTargetTypes());
     node.setTypeElement(elem);
     return true;

File: translator/src/main/java/com/google/devtools/j2objc/translate/OcniExtractor.java
Patch:
@@ -117,7 +117,7 @@ public void endVisit(MethodDeclaration node) {
     if (Modifier.isSynchronized(modifiers)) {
       TypeElement declaringClass = ElementUtil.getDeclaringClass(node.getExecutableElement());
       SynchronizedStatement syncStmt = new SynchronizedStatement(
-          Modifier.isStatic(modifiers) ? new TypeLiteral(declaringClass.asType(), typeEnv)
+          Modifier.isStatic(modifiers) ? new TypeLiteral(declaringClass.asType(), typeUtil)
           : new ThisExpression(declaringClass.asType()));
       syncStmt.setBody(TreeUtil.remove(node.getBody()));
       Block newBody = new Block();

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -123,7 +123,7 @@ private Scope(Scope outer, TypeElement type) {
       // "inherit" from Object. Therefore we add this manually to make the set complete. This is
       // needed because Java 8 default methods can call methods in Object.
       if (ElementUtil.isInterface(type)) {
-        inheritedScopeBuilder.add(typeEnv.getJavaObjectElement());
+        inheritedScopeBuilder.add(typeUtil.getJavaObject());
       }
 
       this.inheritedScope = inheritedScopeBuilder.build();
@@ -257,7 +257,7 @@ private Expression getPathForLocalVar(VariableElement var) {
     }
     if (var.getConstantValue() != null) {
       // Var has constant value, return a literal.
-      return TreeUtil.newLiteral(var.getConstantValue(), typeEnv);
+      return TreeUtil.newLiteral(var.getConstantValue(), typeUtil);
     }
     Scope lastScope = scope;
     while (!(scope = scope.outer).declaredVars.contains(var)) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/VarargsRewriter.java
Patch:
@@ -76,7 +76,7 @@ private void rewriteVarargs(ExecutablePair method, List<Expression> args) {
     List<Expression> varargsCopy = Lists.newArrayList(varargs);
     varargs.clear();
     if (varargsCopy.isEmpty()) {
-      args.add(new ArrayCreation((ArrayType) typeUtil.erasure(varargType), typeEnv, 0));
+      args.add(new ArrayCreation((ArrayType) typeUtil.erasure(varargType), typeUtil, 0));
     } else {
       ArrayInitializer newInit = new ArrayInitializer((ArrayType) typeUtil.erasure(varargType));
       newInit.getExpressions().addAll(varargsCopy);
@@ -87,7 +87,7 @@ private void rewriteVarargs(ExecutablePair method, List<Expression> args) {
   @Override
   public void endVisit(ArrayInitializer node) {
     if (!(node.getParent() instanceof ArrayCreation)) {
-      ArrayCreation newArray = new ArrayCreation(node.getTypeMirror(), typeEnv);
+      ArrayCreation newArray = new ArrayCreation(node.getTypeMirror(), typeUtil);
       node.replaceWith(newArray);
       newArray.setInitializer(node);
     }

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -673,8 +673,7 @@ private ExecutableElement getOriginalMethod(
       return null;
     }
     TypeElement superclass = currentType.getKind().isInterface()
-        ? typeEnv.getJavaObjectElement()
-        : ElementUtil.getSuperclass(currentType);
+        ? typeUtil.getJavaObject() : ElementUtil.getSuperclass(currentType);
     ExecutableElement original = getOriginalMethod(topMethod, declaringClass, superclass);
     if (original != null) {
       return original;

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationEnvironment.java
Patch:
@@ -32,9 +32,9 @@ public TranslationEnvironment(ParserEnvironment parserEnv) {
     elementUtil = new ElementUtil(parserEnv.elementUtilities());
     typeUtil = new TypeUtil(parserEnv, elementUtil);
     typeEnv = new Types(parserEnv, typeUtil);
-    captureInfo = new CaptureInfo(typeEnv, typeUtil);
+    captureInfo = new CaptureInfo(typeUtil);
     nameTable = new NameTable(typeEnv, typeUtil, captureInfo);
-    translationUtil = new TranslationUtil(typeEnv, nameTable);
+    translationUtil = new TranslationUtil(typeUtil, nameTable);
   }
 
   public ElementUtil elementUtil() {

File: translator/src/main/java/com/google/devtools/j2objc/translate/ArrayRewriter.java
Patch:
@@ -266,7 +266,7 @@ private Expression newArrayAccess(
         componentType.getKind().isPrimitive() ? componentType : TypeUtil.ID_TYPE;
     if (assignable) {
       funcName += "Ref";
-      returnType = declaredReturnType = typeEnv.getPointerType(componentType);
+      returnType = declaredReturnType = new PointerType(componentType);
     }
     FunctionElement element = new FunctionElement(funcName, declaredReturnType, iosArrayElement)
         .addParameters(iosArrayElement.asType(), typeEnv.resolveJavaTypeMirror("int"));

File: translator/src/main/java/com/google/devtools/j2objc/translate/Autoboxer.java
Patch:
@@ -48,6 +48,7 @@
 import com.google.devtools.j2objc.ast.WhileStatement;
 import com.google.devtools.j2objc.types.ExecutablePair;
 import com.google.devtools.j2objc.types.FunctionElement;
+import com.google.devtools.j2objc.types.PointerType;
 import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TranslationUtil;
@@ -167,7 +168,7 @@ private void rewriteBoxedAssignment(Assignment node) {
     if (primitiveType == null) {
       return;
     }
-    TypeMirror pointerType = typeEnv.getPointerType(type);
+    TypeMirror pointerType = new PointerType(type);
     String funcName = "JreBoxed" + getAssignFunctionName(node.getOperator())
         + TranslationUtil.getOperatorFunctionModifier(lhs)
         + NameTable.capitalize(primitiveType.toString());
@@ -378,7 +379,7 @@ private void rewriteBoxedPrefixOrPostfix(TreeNode node, Expression operand, Stri
     if (primitiveType == null) {
       return;
     }
-    TypeMirror pointerType = typeEnv.getPointerType(type);
+    TypeMirror pointerType = new PointerType(type);
     funcName = "JreBoxed" + funcName + TranslationUtil.getOperatorFunctionModifier(operand)
         + NameTable.capitalize(primitiveType.toString());
     FunctionElement element = new FunctionElement(funcName, type, TypeUtil.asTypeElement(type))

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -155,7 +155,7 @@ private Statement createRelease(VariableElement var) {
       releaseInvocation.addArgument(
           new ThisExpression(ElementUtil.getDeclaringClass(var).asType()));
     }
-    element.addParameters(isVolatile ? typeEnv.getPointerType(idType) : idType);
+    element.addParameters(isVolatile ? TypeUtil.ID_PTR_TYPE : idType);
     Expression arg = new SimpleName(var);
     if (isVolatile) {
       arg = new PrefixExpression(

File: translator/src/main/java/com/google/devtools/j2objc/translate/StaticVarRewriter.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.devtools.j2objc.ast.TreeNode;
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.ast.UnitTreeVisitor;
+import com.google.devtools.j2objc.types.PointerType;
 import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.TranslationUtil;
 import javax.lang.model.element.TypeElement;
@@ -64,7 +65,7 @@ private void rewriteStaticAccess(Expression node) {
     TypeMirror exprType = var.asType();
     if (assignable) {
       code.append("Ref");
-      exprType = typeEnv.getPointerType(exprType);
+      exprType = new PointerType(exprType);
     }
     code.append("(");
     code.append(nameTable.getFullName(declaringClass));
@@ -99,7 +100,7 @@ public boolean visit(FieldAccess node) {
     CommaExpression commaExpr = new CommaExpression(expr);
     if (TranslationUtil.isAssigned(node)) {
       commaExpr.addExpression(new PrefixExpression(
-          typeEnv.getPointerType(var.asType()), PrefixExpression.Operator.ADDRESS_OF, varNode));
+          new PointerType(var.asType()), PrefixExpression.Operator.ADDRESS_OF, varNode));
       node.replaceWith(new PrefixExpression(
           var.asType(), PrefixExpression.Operator.DEREFERENCE, commaExpr));
     } else {

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.devtools.j2objc.types.ExecutablePair;
 import com.google.devtools.j2objc.types.GeneratedTypeElement;
 import com.google.devtools.j2objc.types.NativeType;
+import com.google.devtools.j2objc.types.PointerType;
 import java.util.Collections;
 import java.util.EnumMap;
 import java.util.LinkedHashSet;
@@ -50,6 +51,7 @@
 public final class TypeUtil {
 
   public static final TypeMirror ID_TYPE = new NativeType("id");
+  public static final TypeMirror ID_PTR_TYPE = new PointerType(ID_TYPE);
   public static final TypeElement NS_OBJECT =
       GeneratedTypeElement.newIosClass("NSObject", null, "");
   public static final TypeElement NS_STRING =

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -41,6 +41,7 @@
 import com.google.devtools.j2objc.types.PointerType;
 import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.NameTable;
+import com.google.devtools.j2objc.util.TypeUtil;
 import java.util.List;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
@@ -146,7 +147,7 @@ private Statement createRelease(VariableElement var) {
       return null;
     }
     TypeMirror voidType = typeUtil.getVoidType();
-    TypeMirror idType = typeEnv.getIdTypeMirror();
+    TypeMirror idType = TypeUtil.ID_TYPE;
     FunctionElement element = new FunctionElement(funcName, voidType, null);
     FunctionInvocation releaseInvocation = new FunctionInvocation(element, voidType);
     if (isRetainedWith) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaCloneWriter.java
Patch:
@@ -38,6 +38,7 @@
 import com.google.devtools.j2objc.types.GeneratedVariableElement;
 import com.google.devtools.j2objc.types.PointerType;
 import com.google.devtools.j2objc.util.ElementUtil;
+import com.google.devtools.j2objc.util.TypeUtil;
 import java.util.List;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
@@ -114,7 +115,7 @@ private Statement createReleaseStatement(VariableElement var) {
     if (Options.useARC()) {
       TypeMirror voidType = typeUtil.getVoidType();
       FunctionElement element = new FunctionElement("JreRelease", voidType, null)
-          .addParameters(typeEnv.getIdTypeMirror());
+          .addParameters(TypeUtil.ID_TYPE);
       FunctionInvocation invocation = new FunctionInvocation(element, voidType);
       invocation.addArgument(new SimpleName(var));
       return new ExpressionStatement(invocation);

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslator.java
Patch:
@@ -38,6 +38,7 @@
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.Mappings;
 import com.google.devtools.j2objc.util.NameTable;
+import com.google.devtools.j2objc.util.TypeUtil;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
@@ -129,7 +130,7 @@ private boolean implementsCloneable(TypeMirror type) {
   private void addCopyWithZoneMethod(TypeDeclaration node) {
     // Create copyWithZone: method.
     GeneratedExecutableElement copyElement = GeneratedExecutableElement.newMethodWithSelector(
-        "copyWithZone:", typeEnv.getIdTypeMirror(), node.getTypeElement());
+        "copyWithZone:", TypeUtil.ID_TYPE, node.getTypeElement());
     MethodDeclaration copyDecl = new MethodDeclaration(copyElement);
     copyDecl.setHasDeclaration(false);
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -414,7 +414,7 @@ private void addNilCheck(Expression node) {
     if (var != null) {
       addSafeVar(var);
     }
-    TypeMirror idType = typeEnv.getIdTypeMirror();
+    TypeMirror idType = TypeUtil.ID_TYPE;
     FunctionElement element = new FunctionElement("nil_chk", idType, null).addParameters(idType);
     FunctionInvocation nilChkInvocation = new FunctionInvocation(element, node.getTypeMirror());
     node.replaceWith(nilChkInvocation);

File: translator/src/main/java/com/google/devtools/j2objc/translate/SuperMethodInvocationRewriter.java
Patch:
@@ -109,7 +109,7 @@ public void endVisit(SuperMethodInvocation node) {
     if (ElementUtil.isDefault(method)) {
       FunctionElement element = new FunctionElement(
           nameTable.getFullFunctionName(method), exprType, ElementUtil.getDeclaringClass(method))
-          .addParameters(typeEnv.getIdTypeMirror())
+          .addParameters(TypeUtil.ID_TYPE)
           .addParameters(ElementUtil.asTypes(method.getParameters()));
       FunctionInvocation invocation = new FunctionInvocation(element, exprType);
       List<Expression> args = invocation.getArguments();
@@ -137,7 +137,7 @@ public void endVisit(SuperMethodInvocation node) {
 
     FunctionElement element =
         new FunctionElement(getSuperFunctionName(superMethod), exprType, receiverElem)
-        .addParameters(receiverType, typeEnv.getIdTypeMirror())
+        .addParameters(receiverType, TypeUtil.ID_TYPE)
         .addParameters(ElementUtil.asTypes(method.getParameters()));
     FunctionInvocation invocation = new FunctionInvocation(element, exprType);
     List<Expression> args = invocation.getArguments();

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.PrimitiveType;
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -162,7 +163,7 @@ private void printTypeDocumentation() {
   }
 
   private String getSuperTypeName() {
-    ITypeBinding supertype = TranslationUtil.getSuperType(typeNode);
+    TypeElement supertype = TranslationUtil.getSuperType(typeNode);
     if (supertype != null) {
       return nameTable.getFullName(supertype);
     }
@@ -174,7 +175,7 @@ private List<String> getInterfaceNames() {
       return Lists.newArrayList("JavaLangAnnotationAnnotation");
     }
     List<String> names = Lists.newArrayList();
-    for (ITypeBinding intrface : TranslationUtil.getInterfaceTypes(typeNode)) {
+    for (TypeElement intrface : TranslationUtil.getInterfaceTypes(typeNode)) {
       names.add(nameTable.getFullName(intrface));
     }
     if (typeBinding.isEnum()) {

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedPackageElement.java
Patch:
@@ -28,8 +28,6 @@
  */
 public class GeneratedPackageElement extends GeneratedElement implements PackageElement {
 
-  public static final PackageElement EMPTY_PACKAGE = new GeneratedPackageElement("");
-
   public GeneratedPackageElement(String name) {
     super(name, ElementKind.PACKAGE, null, false);
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -49,6 +49,7 @@
 import com.google.devtools.j2objc.ast.VariableDeclarationStatement;
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.util.BindingUtil;
+import com.google.devtools.j2objc.util.TypeUtil;
 import java.util.LinkedHashSet;
 import java.util.Set;
 import javax.lang.model.element.TypeElement;
@@ -269,9 +270,9 @@ public boolean visit(TypeDeclaration node) {
   public boolean visit(TypeLiteral node) {
     TypeMirror type = node.getType().getTypeMirror();
     if (type.getKind().isPrimitive()) {
-      addImports(typeEnv.resolveIOSType("IOSClass"));
+      addImports(TypeUtil.IOS_CLASS);
     } else if (type.getKind().equals(TypeKind.ARRAY)) {
-      addImports(typeEnv.resolveIOSType("IOSClass"));
+      addImports(TypeUtil.IOS_CLASS);
       addImports(((ArrayType) type).getComponentType());
     } else {
       addImports(node.getType());

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.devtools.j2objc.Options;
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.util.BindingUtil;
+import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TranslationEnvironment;
 import java.util.Collection;
@@ -51,8 +52,8 @@ private Import(ITypeBinding type, NameTable nameTable) {
       mainType = mainType.getDeclaringClass();
     }
     this.importFileName = Options.getHeaderMap().get(mainType);
-    this.javaQualifiedName =
-        mainType instanceof IOSTypeBinding ? null : mainType.getQualifiedName();
+    this.javaQualifiedName = ElementUtil.isIosType(BindingConverter.getTypeElement(mainType))
+        ? null : mainType.getQualifiedName();
     this.isInterface = type.isInterface();
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/types/LambdaTypeElement.java
Patch:
@@ -31,7 +31,7 @@ public class LambdaTypeElement extends GeneratedTypeElement {
   public LambdaTypeElement(
       String name, Element enclosingElement, TypeMirror superclass) {
     super(name, ElementKind.CLASS, enclosingElement, superclass, NestingKind.ANONYMOUS, null,
-          false);
+          false, false);
     addModifiers(Modifier.PRIVATE);
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -365,7 +365,7 @@ private Scope findScope(Scope.Kind kind, String label) {
   private boolean isBoxingMethod(ExecutableElement method) {
     TypeElement declaringClass = ElementUtil.getDeclaringClass(method);
     // Autoboxing methods.
-    if (typeEnv.isBoxedPrimitive(declaringClass)) {
+    if (typeUtil.isBoxedType(declaringClass.asType())) {
       String name = ElementUtil.getName(method);
       TypeMirror returnType = method.getReturnType();
       List<? extends VariableElement> params = method.getParameters();

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -18,6 +18,7 @@
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.types.ExecutablePair;
 import com.google.devtools.j2objc.types.GeneratedTypeElement;
+import com.google.devtools.j2objc.types.NativeType;
 import java.util.Collections;
 import java.util.EnumMap;
 import java.util.LinkedHashSet;
@@ -52,6 +53,7 @@ public final class TypeUtil {
       GeneratedTypeElement.newIosClass("NSObject", null, "");
   public static final TypeElement IOS_OBJECT_ARRAY =
       GeneratedTypeElement.newIosClass("IOSObjectArray", NS_OBJECT, "IOSObjectArray.h");
+  public static final TypeMirror NATIVE_CHAR_PTR = new NativeType("char *");
   private static final Map<TypeKind, TypeElement> PRIMITIVE_IOS_ARRAYS;
 
   static {

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -790,7 +790,7 @@ private String constructObjCType(Iterable<ITypeBinding> types) {
     String classType = null;
     List<String> interfaces = new ArrayList<>();
     for (ITypeBinding type : types) {
-      if (typeEnv.isIdType(type) || typeEnv.isJavaVoidType(type)) {
+      if (typeEnv.isIdType(type)) {
         continue;
       }
       if (type.isInterface()) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnhancedForRewriter.java
Patch:
@@ -88,7 +88,7 @@ private void handleArrayIteration(EnhancedForStatement node) {
     ArrayType expressionType = (ArrayType) expression.getTypeMirror();
     VariableElement loopVariable = node.getParameter().getVariableElement();
     TypeMirror componentType = expressionType.getComponentType();
-    TypeElement iosArrayType = typeEnv.resolveArrayType(componentType);
+    TypeElement iosArrayType = typeUtil.getIosArray(componentType);
     TypeMirror bufferType = new PointerType(componentType);
     VariableElement arrayVariable = GeneratedVariableElement.newLocalVar(
         "a__", expressionType, null);

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedPackageElement.java
Patch:
@@ -22,11 +22,14 @@
 
 /**
  * Element class for packages created during translation.
+ * TODO(kstanger): Eliminate this class in favor of Javac's Elements.getPackageElement().
  *
  * @author Keith Stanger
  */
 public class GeneratedPackageElement extends GeneratedElement implements PackageElement {
 
+  public static final PackageElement EMPTY_PACKAGE = new GeneratedPackageElement("");
+
   public GeneratedPackageElement(String name) {
     super(name, ElementKind.PACKAGE, null, false);
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/LambdaTypeElement.java
Patch:
@@ -30,7 +30,8 @@ public class LambdaTypeElement extends GeneratedTypeElement {
 
   public LambdaTypeElement(
       String name, Element enclosingElement, TypeMirror superclass) {
-    super(name, ElementKind.CLASS, enclosingElement, superclass, NestingKind.ANONYMOUS, false);
+    super(name, ElementKind.CLASS, enclosingElement, superclass, NestingKind.ANONYMOUS, null,
+          false);
     addModifiers(Modifier.PRIVATE);
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationEnvironment.java
Patch:
@@ -31,7 +31,7 @@ public class TranslationEnvironment {
   public TranslationEnvironment(ParserEnvironment parserEnv) {
     elementUtil = new ElementUtil(parserEnv.elementUtilities());
     typeUtil = new TypeUtil(parserEnv, elementUtil);
-    typeEnv = new Types(parserEnv);
+    typeEnv = new Types(parserEnv, typeUtil);
     captureInfo = new CaptureInfo(typeEnv, typeUtil);
     nameTable = new NameTable(typeEnv, typeUtil, captureInfo);
     translationUtil = new TranslationUtil(typeEnv, nameTable);

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationEnvironment.java
Patch:
@@ -30,10 +30,10 @@ public class TranslationEnvironment {
 
   public TranslationEnvironment(ParserEnvironment parserEnv) {
     elementUtil = new ElementUtil(parserEnv.elementUtilities());
-    typeUtil = new TypeUtil(parserEnv.typeUtilities(), elementUtil);
+    typeUtil = new TypeUtil(parserEnv, elementUtil);
     typeEnv = new Types(parserEnv);
     captureInfo = new CaptureInfo(typeEnv, typeUtil);
-    nameTable = new NameTable(typeEnv, elementUtil, captureInfo);
+    nameTable = new NameTable(typeEnv, typeUtil, captureInfo);
     translationUtil = new TranslationUtil(typeEnv, nameTable);
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -56,6 +56,7 @@ protected void generateFileHeader() {
       printLocalIncludes(type);
     }
     pushIgnoreDeprecatedDeclarationsPragma();
+    pushIgnoreNullabilityCompletenessPragma();
 
     // Print OCNI blocks
     Collection<String> nativeBlocks = getGenerationUnit().getNativeHeaderBlocks();
@@ -99,6 +100,7 @@ private void printLocalIncludes(GeneratedType type) {
   protected void generateFileFooter() {
     // Don't need #endif for file-level header guard.
     newline();
+    popIgnoreNullabilityCompletenessPragma();
     popIgnoreDeprecatedDeclarationsPragma();
     printf("#pragma pop_macro(\"INCLUDE_ALL_%s\")\n", varPrefix);
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -44,13 +44,11 @@ protected boolean printPrivateDeclarations() {
   }
 
   private void generate() {
-    pushNullabilityCompletenessPragma();
     if (typeNode.hasPrivateDeclaration()) {
       generateInitialDeclaration();
     } else {
       generateDeclarationExtension();
     }
-    popNullabilityCompletenessPragma();
   }
 
   private void generateDeclarationExtension() {

File: translator/src/main/java/com/google/devtools/j2objc/ast/ArrayCreation.java
Patch:
@@ -17,7 +17,6 @@
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.types.Types;
 import java.util.List;
-import javax.lang.model.type.TypeMirror;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 /**
@@ -65,7 +64,7 @@ public Kind getKind() {
   }
 
   @Override
-  public TypeMirror getTypeMirror() {
+  public javax.lang.model.type.ArrayType getTypeMirror() {
     ArrayType arrayTypeNode = arrayType.get();
     return arrayTypeNode != null ? arrayTypeNode.getTypeMirror() : null;
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -499,7 +499,7 @@ public boolean visit(QualifiedName node) {
     @Override
     public void endVisit(SimpleName node) {
       VariableElement var = TreeUtil.getVariableElement(node);
-      if (var != null && ElementUtil.isField(var)) {
+      if (var != null && var.getKind().isField()) {
         // Convert name to self->name.
         node.replaceWith(new QualifiedName(var, new SimpleName(selfParam)));
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -428,7 +428,7 @@ private String getTypeName(TypeMirror type) {
     } else if (TypeUtil.isArray(type)) {
       return "[" + getTypeName(((ArrayType) type).getComponentType());
     } else {
-      return typeUtil.getBinaryName(type);
+      return TypeUtil.getBinaryName(type);
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -421,7 +421,7 @@ public boolean visit(SimpleName node) {
       Expression path = null;
       if (ElementUtil.isInstanceVar(var)) {
         path = getPathForField(var);
-      } else if (!ElementUtil.isField(var)) {
+      } else if (!var.getKind().isField()) {
         path = getPathForLocalVar(var);
       }
       if (path != null) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -233,7 +233,7 @@ public void endVisit(FieldDeclaration node) {
   public boolean visit(QualifiedName node) {
     VariableElement var = TreeUtil.getVariableElement(node);
     Expression qualifier = node.getQualifier();
-    if (var != null && ElementUtil.isField(var) && TreeUtil.getVariableElement(qualifier) != null) {
+    if (var != null && var.getKind().isField() && TreeUtil.getVariableElement(qualifier) != null) {
       // FieldAccess nodes are more easily mutated than QualifiedName.
       FieldAccess fieldAccess = new FieldAccess(var, TreeUtil.remove(qualifier));
       node.replaceWith(fieldAccess);

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -373,7 +373,7 @@ public String getVariableShortName(IVariableBinding var) {
 
   public String getVariableShortName(VariableElement var) {
     String baseName = getVariableBaseName(var);
-    if (ElementUtil.isField(var) && !ElementUtil.isGlobalVar(var)) {
+    if (var.getKind().isField() && !ElementUtil.isGlobalVar(var)) {
       return baseName + '_';
     }
     return baseName;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtArrayType.java
Patch:
@@ -18,10 +18,11 @@
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVisitor;
+import org.eclipse.jdt.core.dom.ITypeBinding;
 
 class JdtArrayType extends JdtTypeMirror implements ArrayType {
 
-  JdtArrayType(JdtTypeBinding binding) {
+  JdtArrayType(ITypeBinding binding) {
     super(binding);
     assert binding.isArray();
   }
@@ -38,6 +39,6 @@ public <R, P> R accept(TypeVisitor<R, P> v, P p) {
 
   @Override
   public TypeMirror getComponentType() {
-    return BindingConverter.getType(((JdtTypeBinding) binding).getComponentType());
+    return BindingConverter.getType(((ITypeBinding) binding).getComponentType());
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtNativeType.java
Patch:
@@ -17,10 +17,11 @@
 import javax.lang.model.type.PrimitiveType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeVisitor;
+import org.eclipse.jdt.core.dom.ITypeBinding;
 
 class JdtNativeType extends JdtTypeMirror implements PrimitiveType {
 
-  JdtNativeType(JdtTypeBinding binding) {
+  JdtNativeType(ITypeBinding binding) {
     super(binding);
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtNoType.java
Patch:
@@ -17,15 +17,15 @@
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;
-
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.type.NoType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeVisitor;
+import org.eclipse.jdt.core.dom.ITypeBinding;
 
 class JdtNoType extends JdtTypeMirror implements NoType {
 
-  JdtNoType(JdtTypeBinding binding) {
+  JdtNoType(ITypeBinding binding) {
     super(binding);
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtPrimitiveType.java
Patch:
@@ -17,17 +17,18 @@
 import javax.lang.model.type.PrimitiveType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeVisitor;
+import org.eclipse.jdt.core.dom.ITypeBinding;
 
 class JdtPrimitiveType extends JdtTypeMirror implements PrimitiveType {
 
-  JdtPrimitiveType(JdtTypeBinding binding) {
+  JdtPrimitiveType(ITypeBinding binding) {
     super(binding);
     assert binding.isPrimitive();
   }
 
   @Override
   public TypeKind getKind() {
-    String binaryName = ((JdtTypeBinding) binding).getBinaryName();
+    String binaryName = ((ITypeBinding) binding).getBinaryName();
     if (binaryName.length() == 1) {
       switch (binaryName.charAt(0)) {
         case 'B': return TypeKind.BYTE;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtTypeElement.java
Patch:
@@ -58,7 +58,7 @@ public ElementKind getKind() {
 
   @Override
   public NestingKind getNestingKind() {
-    JdtTypeBinding type = (JdtTypeBinding) binding;
+    ITypeBinding type = (ITypeBinding) binding;
     if (type.isAnonymous()) {
       return NestingKind.ANONYMOUS;
     }
@@ -73,7 +73,7 @@ public NestingKind getNestingKind() {
 
   @Override
   public Name getQualifiedName() {
-    return BindingConverter.getName(((JdtTypeBinding) binding).getQualifiedName());
+    return BindingConverter.getName(((ITypeBinding) binding).getQualifiedName());
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtTypeVariable.java
Patch:
@@ -14,17 +14,16 @@
 
 package com.google.devtools.j2objc.jdt;
 
-import org.eclipse.jdt.core.dom.ITypeBinding;
-
 import javax.lang.model.element.Element;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.type.TypeVisitor;
+import org.eclipse.jdt.core.dom.ITypeBinding;
 
 class JdtTypeVariable extends JdtTypeMirror implements TypeVariable {
 
-  JdtTypeVariable(JdtTypeBinding binding) {
+  JdtTypeVariable(ITypeBinding binding) {
     super(binding);
     assert binding.isTypeVariable();
   }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtWildcardType.java
Patch:
@@ -14,16 +14,15 @@
 
 package com.google.devtools.j2objc.jdt;
 
-import org.eclipse.jdt.core.dom.ITypeBinding;
-
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVisitor;
 import javax.lang.model.type.WildcardType;
+import org.eclipse.jdt.core.dom.ITypeBinding;
 
 class JdtWildcardType extends JdtTypeMirror implements WildcardType {
 
-  JdtWildcardType(JdtTypeBinding binding) {
+  JdtWildcardType(ITypeBinding binding) {
     super(binding);
     assert binding.isWildcardType();
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedPackageBinding.java
Patch:
@@ -16,20 +16,19 @@
 
 package com.google.devtools.j2objc.types;
 
-import com.google.devtools.j2objc.jdt.JdtPackageBinding;
 import org.eclipse.jdt.core.dom.IBinding;
+import org.eclipse.jdt.core.dom.IPackageBinding;
 
 /**
  * Binding class for types created during translation.
  *
  * @author Keith Stanger
  */
-public class GeneratedPackageBinding extends JdtPackageBinding {
+public class GeneratedPackageBinding extends AbstractBinding implements IPackageBinding {
 
   private final String name;
 
   public GeneratedPackageBinding(String name) {
-    super(null);
     this.name = name;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.common.collect.Maps;
 import com.google.devtools.j2objc.jdt.BindingConverter;
-import com.google.devtools.j2objc.jdt.JdtTypeBinding;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.ParserEnvironment;
@@ -165,8 +164,8 @@ private void initializePrimitiveArray(String javaTypeName, String iosTypeName) {
     arrayBindingMap.put(javaType, iosType);
   }
 
-  private JdtTypeBinding resolveWellKnownType(String name) {
-    return (JdtTypeBinding) BindingConverter.unwrapElement(env.resolve(name));
+  private ITypeBinding resolveWellKnownType(String name) {
+    return BindingConverter.unwrapTypeElement((TypeElement) env.resolve(name));
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/util/HeaderMap.java
Patch:
@@ -46,7 +46,6 @@ public class HeaderMap {
   private static final Set<String> PLATFORM_PACKAGES = Sets.newHashSet(new String[] {
       "android",
       "com.android.internal.util",
-      "com.google.android",
       "com.google.common",
       "com.google.common.annotations",
       "com.google.common.base",

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -706,8 +706,8 @@ public static String getPrimitiveObjCType(ITypeBinding type) {
    */
   public static String getPrimitiveObjCType(TypeMirror type) {
     TypeKind kind = type.getKind();
-    return kind.isPrimitive() ? (kind.equals(TypeKind.VOID)
-        ? "void" : "j" + type.toString()) : "id";
+    return kind == TypeKind.VOID ? "void"
+        : kind.isPrimitive() ? "j" + TypeUtil.getName(type) : "id";
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -96,7 +96,6 @@ public Types(ParserEnvironment env) {
     NSString = mapIOSType(IOSTypeBinding.newClass("NSString", javaStringType, NSObject));
     NSException = mapIOSType(IOSTypeBinding.newClass("NSException", javaThrowableType, NSObject));
     IOSClass = mapIOSType(IOSTypeBinding.newUnmappedClass("IOSClass"));
-    mapIOSType(IOSTypeBinding.newUnmappedClass("NSZone"));
     idType = mapIOSType(IOSTypeBinding.newUnmappedClass("id"));
 
     initializeArrayTypes();

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtVariableElement.java
Patch:
@@ -55,15 +55,15 @@ public ElementKind getKind() {
       return ElementKind.PARAMETER;
     }
     IVariableBinding var = (IVariableBinding) binding;
+    if (var.isEnumConstant()) {
+      return ElementKind.ENUM_CONSTANT;
+    }
     if (var.isField()) {
       return ElementKind.FIELD;
     }
     if (var.isParameter()) {
       return ElementKind.PARAMETER;
     }
-    if (var.isEnumConstant()) {
-      return ElementKind.ENUM_CONSTANT;
-    }
     return ElementKind.LOCAL_VARIABLE;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedExecutableElement.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.devtools.j2objc.util.TypeUtil;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
@@ -142,7 +143,7 @@ public <R, P> R accept(ElementVisitor<R, P> v, P p) {
 
   @Override
   public List<? extends TypeParameterElement> getTypeParameters() {
-    throw new AssertionError("not implemented");
+    return Collections.emptyList();
   }
 
   @Override
@@ -172,7 +173,7 @@ public boolean isDefault() {
 
   @Override
   public List<? extends TypeMirror> getThrownTypes() {
-    throw new AssertionError("not implemented");
+    return Collections.emptyList();
   }
 
   @Override

File: translator/src/test/java/com/google/devtools/j2objc/ast/TreeUtilTest.java
Patch:
@@ -16,8 +16,7 @@
 
 import com.google.common.collect.Lists;
 import com.google.devtools.j2objc.GenerationTest;
-import com.google.devtools.j2objc.util.BindingUtil;
-
+import com.google.devtools.j2objc.util.ElementUtil;
 import java.io.IOException;
 import java.util.ArrayList;
 
@@ -43,7 +42,7 @@ public void testSortMethods() throws IOException {
     unit.accept(new TreeVisitor() {
       @Override
       public void endVisit(MethodDeclaration node) {
-        if (!BindingUtil.isSynthetic(node.getModifiers())) {
+        if (!ElementUtil.isSynthetic(node.getExecutableElement())) {
           methods.add(node);
         }
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/StaticVarRewriter.java
Patch:
@@ -73,7 +73,7 @@ private void rewriteStaticAccess(Expression node) {
     code.append(nameTable.getVariableShortName(var));
     code.append(")");
     NativeExpression nativeExpr = new NativeExpression(code.toString(), exprType);
-    nativeExpr.addImportType(var.getDeclaringClass());
+    nativeExpr.addImportType(BindingConverter.getType(var.getDeclaringClass()));
     Expression newNode = nativeExpr;
     if (assignable) {
       newNode = new PrefixExpression(

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -103,8 +103,8 @@ private void addImports(ITypeBinding type) {
     Import.addImports(type, imports, unit.getEnv());
   }
 
-  private void addImports(Iterable<ITypeBinding> types) {
-    for (ITypeBinding type : types) {
+  private void addImports(Iterable<TypeMirror> types) {
+    for (TypeMirror type : types) {
       addImports(type);
     }
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeUtil.java
Patch:
@@ -429,7 +429,7 @@ public static Expression newLiteral(Object value, Types typeEnv) {
     } else if (value instanceof String) {
       return new StringLiteral((String) value, typeEnv);
     }
-    throw new AssertionError("unknown constant type");
+    throw new AssertionError("unknown constant type: " + value.getClass().getName());
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtAnnotationValue.java
Patch:
@@ -32,9 +32,9 @@ public JdtAnnotationValue(Object value) {
       this.value = BindingConverter.getType((ITypeBinding) value);
     } else if (value instanceof IAnnotationBinding) {
       this.value = new JdtAnnotationMirror((IAnnotationBinding) value);
-    } else if (value instanceof List) {
+    } else if (value instanceof Object[]) {
       List<AnnotationValue> newValues = new ArrayList<AnnotationValue>();
-      for (Object o : ((List<?>) value)) {
+      for (Object o : ((Object[]) value)) {
         newValues.add(new JdtAnnotationValue(o));
       }
       this.value = newValues;

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -121,7 +121,6 @@
 import com.google.j2objc.annotations.Property;
 import java.util.ArrayList;
 import java.util.List;
-import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import org.eclipse.jdt.core.dom.ASTNode;
@@ -402,7 +401,7 @@ private static TreeNode convertAnnotationTypeMemberDeclaration(
     AnnotationTypeMemberDeclaration newNode = new AnnotationTypeMemberDeclaration();
     convertBodyDeclaration(node, newNode);
     return newNode
-        .setElement((ExecutableElement) BindingConverter.getElement(node.resolveBinding()))
+        .setExecutableElement(BindingConverter.getExecutableElement(node.resolveBinding()))
         .setName((SimpleName) convert(node.getName()))
         .setType((Type) convert(node.getType()))
         .setDefault((Expression) convert(node.getDefault()));

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -206,8 +206,8 @@ private int generateMethodsMetadata() {
         // Add property accessor and static default methods.
         for (AnnotationTypeMemberDeclaration decl : TreeUtil.getAnnotationMembers(typeNode)) {
           String name = decl.getName().getIdentifier();
-          IMethodBinding memberBinding = (IMethodBinding)
-              BindingConverter.unwrapElement(decl.getElement());
+          IMethodBinding memberBinding =
+              BindingConverter.unwrapExecutableElement(decl.getExecutableElement());
           String returnType = getTypeName(memberBinding.getReturnType());
           String metadata = UnicodeUtils.format("    { NULL, %s, 0x%x, -1, -1, -1, -1, -1, -1 },\n",
               cStr(returnType),

File: translator/src/main/java/com/google/devtools/j2objc/ast/UnitTreeVisitor.java
Patch:
@@ -18,6 +18,7 @@
 import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TranslationEnvironment;
+import com.google.devtools.j2objc.util.TranslationUtil;
 import com.google.devtools.j2objc.util.TypeUtil;
 
 /**
@@ -30,6 +31,7 @@ public class UnitTreeVisitor extends TreeVisitor {
   protected final TypeUtil typeUtil;
   protected final Types typeEnv;
   protected final NameTable nameTable;
+  protected final TranslationUtil translationUtil;
 
   public UnitTreeVisitor(CompilationUnit unit) {
     this.unit = unit;
@@ -38,6 +40,7 @@ public UnitTreeVisitor(CompilationUnit unit) {
     typeUtil = env.typeUtil();
     typeEnv = env.types();
     nameTable = env.nameTable();
+    translationUtil = env.translationUtil();
   }
 
   public void run() {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -802,7 +802,7 @@ public void testAnnotationWithDefaultAnnotation() throws IOException {
         + "public @interface OuterAnn { InnerAnn test() default @InnerAnn(); }}",
         "A", "A.m");
     assertTranslatedLines(translation,
-        "+ (id<A_InnerAnn>)testDefault {", "return [[[A_InnerAnn alloc] init] autorelease];", "}");
+        "+ (id<A_InnerAnn>)testDefault {", "return create_A_InnerAnn();", "}");
   }
 
   public void testAnnotationWithDefaultAnnotationWithArguments() throws IOException {
@@ -815,7 +815,7 @@ public void testAnnotationWithDefaultAnnotationWithArguments() throws IOExceptio
         "A", "A.m");
     assertTranslatedLines(translation,
         "+ (id<A_InnerAnn>)testDefault {",
-        "return [[[A_InnerAnn alloc] initWithFoo:@\"bar\" withNum:5] autorelease];",
+        "return create_A_InnerAnn(@\"bar\", 5);",
         "}");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/jdt/TreeConverterTest.java
Patch:
@@ -35,7 +35,7 @@ public void testAnnotationTypeMemberConversion() throws IOException {
         + "@Retention(RUNTIME) @Target({TYPE, METHOD, FIELD}) public @interface Complex { "
         + "Simple member() default @Simple; }", "Complex", "Complex.m");
     assertTranslatedLines(translation,
-        "+ (id<Simple>)memberDefault {", "return [[[Simple alloc] init] autorelease];", "}");
+        "+ (id<Simple>)memberDefault {", "return create_Simple(@\"default_value\");", "}");
   }
 
   // Issue 471: ClassCastException converting annotation with array members.

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedExecutableElement.java
Patch:
@@ -90,8 +90,9 @@ public String getSelector() {
     return selector;
   }
 
-  public void addParameter(VariableElement param) {
+  public GeneratedExecutableElement addParameter(VariableElement param) {
     parameters.add(param);
+    return this;
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/InputFilePreprocessor.java
Patch:
@@ -127,7 +127,7 @@ private void extractPackagePrefix(InputFile file, CompilationUnit unit) {
             ObjectiveCName.class.getCanonicalName())) {
           String key = unit.getPackage().getName().getFullyQualifiedName();
           String val = (String) ((SingleMemberAnnotation) annotation).getValue().getConstantValue();
-          Options.addPackagePrefix(key, val);
+          Options.getPackagePrefixes().addPrefix(key, val);
         }
       }
     }

File: translator/src/test/java/com/google/devtools/j2objc/util/PackagePrefixesTest.java
Patch:
@@ -68,7 +68,7 @@ public void testPackagePrefixesWithTrailingSpace() throws IOException {
   // Verify class name with prefix.
   public void testGetFullNameWithPrefix() {
     String source = "package foo.bar; public class SomeClass {}";
-    Options.addPackagePrefix("foo.bar", "FB");
+    Options.getPackagePrefixes().addPrefix("foo.bar", "FB");
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(0);
@@ -78,7 +78,7 @@ public void testGetFullNameWithPrefix() {
   // Verify inner class name with prefix.
   public void testGetFullNameWithInnerClassAndPrefix() {
     String source = "package foo.bar; public class SomeClass { static class Inner {}}";
-    Options.addPackagePrefix("foo.bar", "FB");
+    Options.getPackagePrefixes().addPrefix("foo.bar", "FB");
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(1);
@@ -87,7 +87,7 @@ public void testGetFullNameWithInnerClassAndPrefix() {
 
   public void testPackageWildcards() throws IOException {
     String source = "package foo.bar; public class SomeClass {}";
-    Options.addPackagePrefix("foo.*", "FB");
+    Options.getPackagePrefixes().addPrefix("foo.*", "FB");
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(0);

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -396,6 +396,8 @@ public static IBinding unwrapTypeMirrorIntoBinding(TypeMirror t) {
           ((PointerType) t).getPointeeType()));
     } else if (t instanceof GeneratedTypeElement.Mirror) {
       return ((GeneratedTypeElement.Mirror) t).asTypeBinding();
+    } else if (t instanceof GeneratedExecutableElement.Mirror) {
+      return ((GeneratedExecutableElement.Mirror) t).asMethodBinding();
     }
     return ((JdtTypeMirror) t).binding;
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -230,8 +230,7 @@ private void addArcInitialization(EnumDeclaration node) {
     int i = 0;
     for (EnumConstantDeclaration constant : node.getEnumConstants()) {
       IVariableBinding varBinding = constant.getVariableBinding();
-      IMethodBinding binding = constant.getMethodBinding().getMethodDeclaration();
-      ClassInstanceCreation creation = new ClassInstanceCreation(binding);
+      ClassInstanceCreation creation = new ClassInstanceCreation(constant.getExecutablePair());
       TreeUtil.copyList(constant.getArguments(), creation.getArguments());
       creation.addArgument(new StringLiteral(varBinding.getName(), typeEnv));
       creation.addArgument(new NumberLiteral(i++, typeEnv));

File: translator/src/main/java/com/google/devtools/j2objc/translate/GwtConverter.java
Patch:
@@ -35,12 +35,12 @@
 import com.google.devtools.j2objc.ast.StringLiteral;
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.ast.UnitTreeVisitor;
+import com.google.devtools.j2objc.types.ExecutablePair;
 import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.TypeUtil;
 import java.util.List;
 import java.util.Set;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.type.ExecutableType;
 
 /**
  * Updates the Java AST to remove code bound by GWT.isClient and
@@ -131,8 +131,7 @@ public boolean visit(MethodInvocation node) {
       node.setName(new SimpleName(newMethod));
       Expression clazz = args.remove(0);
       node.setExpression(clazz);
-      node.setExecutableElement(newMethod);
-      node.setExecutableType((ExecutableType) newMethod.asType());
+      node.setExecutablePair(new ExecutablePair(newMethod));
     } else if (isGwtTest(node)) {
       node.replaceWith(new BooleanLiteral(false, typeEnv));
     }

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -707,7 +707,7 @@ public void testNewStringWithArrayInAnonymousClass() throws IOException {
         + "    return new Runnable() { "
         + "      public void run() { String s = new String(new char[10]); } }; } }",
         "Test", "Test.m");
-    assertTranslation(translation, "s = [NSString stringWith");
+    assertTranslation(translation, "s = [NSString java_stringWith");
   }
 
   public void testMostNegativeIntegers() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -416,7 +416,7 @@ private void addNilCheck(Expression node) {
     }
     TypeMirror idType = typeEnv.getIdTypeMirror();
     FunctionElement element = new FunctionElement("nil_chk", idType, null).addParameters(idType);
-    FunctionInvocation nilChkInvocation = new FunctionInvocation(element, node.getTypeBinding());
+    FunctionInvocation nilChkInvocation = new FunctionInvocation(element, node.getTypeMirror());
     node.replaceWith(nilChkInvocation);
     nilChkInvocation.addArgument(node);
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedExecutableElement.java
Patch:
@@ -171,7 +171,7 @@ public TypeMirror getReturnType() {
   }
 
   @Override
-  public List<? extends VariableElement> getParameters() {
+  public List<VariableElement> getParameters() {
     return parameters;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtTypes.java
Patch:
@@ -94,7 +94,7 @@ public TypeMirror asMemberOf(DeclaredType containing, Element element) {
 
   @Override
   public TypeElement boxedClass(PrimitiveType p) {
-    throw new AssertionError("not implemented");
+    return boxedClasses.get(p.getKind());
   }
 
   @Override
@@ -170,7 +170,8 @@ public WildcardType getWildcardType(TypeMirror extendsBound, TypeMirror superBou
 
   @Override
   public boolean isAssignable(TypeMirror t1, TypeMirror t2) {
-    throw new AssertionError("not implemented");
+    return BindingConverter.unwrapTypeMirrorIntoTypeBinding(t1).isAssignmentCompatible(
+        BindingConverter.unwrapTypeMirrorIntoTypeBinding(t2));
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -445,7 +445,7 @@ private static TreeNode convertArrayInitializer(org.eclipse.jdt.core.dom.ArrayIn
     ArrayInitializer newNode = new ArrayInitializer();
     convertExpression(node, newNode);
     return newNode
-        .setTypeMirror(BindingConverter.getType(node.resolveTypeBinding()))
+        .setTypeMirror((JdtArrayType) BindingConverter.getType(node.resolveTypeBinding()))
         .setExpressions(expressions);
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/SwitchRewriter.java
Patch:
@@ -41,6 +41,7 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ExecutableType;
 import javax.lang.model.type.TypeMirror;
@@ -127,7 +128,7 @@ private void fixStringValue(SwitchStatement node) {
     if (!typeEnv.isJavaStringType(type)) {
       return;
     }
-    TypeMirror arrayType = typeUtil.getArrayType(type);
+    ArrayType arrayType = typeUtil.getArrayType(type);
     ArrayInitializer arrayInit = new ArrayInitializer(arrayType);
     int idx = 0;
     for (Statement stmt : node.getStatements()) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslator.java
Patch:
@@ -142,7 +142,7 @@ private void addCopyWithZoneMethod(TypeDeclaration node) {
     cloneMethod.setBody(block);
 
     GeneratedMethodBinding cloneBinding = GeneratedMethodBinding.newMethod(
-        "clone", 0, nsObjectType, type);
+        "java_clone", 0, nsObjectType, type);
     MethodInvocation invocation = new MethodInvocation(cloneBinding, null);
     if (Options.useReferenceCounting()) {
       invocation = new MethodInvocation(typeEnv.getRetainMethod(), invocation);

File: translator/src/test/java/com/google/devtools/j2objc/ast/MethodReferenceTest.java
Patch:
@@ -104,7 +104,7 @@ public void testTypeReference() throws IOException {
         typeReferenceHeader + "class Test { H h = int[]::clone; }", "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (id)copy__WithIntArray:(IOSIntArray *)a {",
-        "  return [((IOSIntArray *) nil_chk(a)) clone];",
+        "  return [((IOSIntArray *) nil_chk(a)) java_clone];",
         "}");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/VarargsRewriterTest.java
Patch:
@@ -90,7 +90,7 @@ public void testArrayCloneArgument() throws IOException {
         + "void test() { Object[] objs = new Object[] { \"\", \"\" };"
         + "varargs(\"objects\", objs.clone()); }}", "A", "A.m");
     assertTranslation(translation,
-        "[self varargsWithNSString:@\"objects\" withNSObjectArray:[objs clone]];");
+        "[self varargsWithNSString:@\"objects\" withNSObjectArray:[objs java_clone]];");
   }
 
   public void testGenericSuperMethodInvocation() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -558,8 +558,7 @@ private void printMethodDeclaration(MethodDeclaration m, boolean isCompanionClas
     JavadocGenerator.printDocComment(getBuilder(), m.getJavadoc());
     print(getMethodSignature(m));
     String methodName = nameTable.getMethodSelector(methodBinding);
-    if (!m.isConstructor() && !BindingUtil.isSynthetic(m.getModifiers())
-        && NameTable.needsObjcMethodFamilyNoneAttribute(methodName)) {
+    if (!m.isConstructor() && NameTable.needsObjcMethodFamilyNoneAttribute(methodName)) {
       // Getting around a clang warning.
       // clang assumes that methods with names starting with new, alloc or copy
       // return objects of the same type as the receiving class, regardless of

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtTypes.java
Patch:
@@ -186,7 +186,8 @@ public boolean isSubsignature(ExecutableType m1, ExecutableType m2) {
 
   @Override
   public boolean isSubtype(TypeMirror t1, TypeMirror t2) {
-    throw new AssertionError("not implemented");
+    return BindingConverter.unwrapTypeMirrorIntoTypeBinding(t1).isSubTypeCompatible(
+        BindingConverter.unwrapTypeMirrorIntoTypeBinding(t2));
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -182,8 +182,7 @@ private boolean takesPrecedence(ExecutablePair a, ExecutablePair b) {
 
     private void addShimWithInvocation(
         String selector, ExecutablePair method, Expression invocation, List<Expression> args) {
-      ExecutableElement element = (ExecutableElement)
-          GeneratedExecutableElement.newMethodWithSelector(
+      ExecutableElement element = GeneratedExecutableElement.newMethodWithSelector(
               selector, method.type().getReturnType(), typeElem)
           .addModifiers(method.element().getModifiers())
           .removeModifiers(Modifier.ABSTRACT, Modifier.DEFAULT);

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -83,8 +83,7 @@ private void addDeallocMethod(AbstractTypeDeclaration node) {
       return;
     }
 
-    ExecutableElement deallocElement = (ExecutableElement)
-        GeneratedExecutableElement.newMethodWithSelector(
+    ExecutableElement deallocElement = GeneratedExecutableElement.newMethodWithSelector(
         NameTable.DEALLOC_METHOD, typeUtil.getVoidType(), BindingConverter.getTypeElement(type))
         .addModifiers(Modifier.PUBLIC);
     MethodDeclaration deallocDecl = new MethodDeclaration(deallocElement);

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -58,7 +58,7 @@ public final class BindingConverter {
   private static Map<String, Name> nameCache = new HashMap<>();
   private static Map<JdtBinding, JdtTypeMirror> typeCache = new HashMap<>();
 
-  public static final JdtTypeMirror NO_TYPE = new JdtNoType();
+  public static final JdtNoType NO_TYPE = new JdtNoType(null);
   public static final JdtTypeMirror NULL_TYPE = new JdtNullType();
 
   public static JdtAnnotationBinding wrapBinding(IAnnotationBinding binding) {
@@ -253,6 +253,8 @@ public static JdtTypeMirror getType(ITypeBinding binding) {
     } else if (binding.isPrimitive()) {
       if (jdtType instanceof NativeTypeBinding) {
         type = new JdtNativeType(jdtType);
+      } else if (jdtType.getBinaryName().charAt(0) == 'V') {
+        type = new JdtNoType(jdtType);
       } else {
         type = new JdtPrimitiveType(jdtType);
       }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtNoType.java
Patch:
@@ -25,13 +25,13 @@
 
 class JdtNoType extends JdtTypeMirror implements NoType {
 
-  JdtNoType() {
-    super(null);
+  JdtNoType(JdtTypeBinding binding) {
+    super(binding);
   }
 
   @Override
   public TypeKind getKind() {
-    return TypeKind.NONE;
+    return binding != null ? TypeKind.VOID : TypeKind.NONE;
   }
 
   @Override

File: jre_emul/Classes/com/google/j2objc/WeakProxy.java
Patch:
@@ -44,8 +44,8 @@ public static <T> T forObject(T o) {
     return [delegate_ isKindOfClass:aClass];
   }
 
-  - (IOSClass *)getClass {
-    return [delegate_ getClass];
+  - (IOSClass *)java_getClass {
+    return [delegate_ java_getClass];
   }
   ]-*/
 }

File: jre_emul/android/libcore/luni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -287,7 +287,7 @@ private static native Class<?> generateProxy(String name, Class<?>[] interfaces,
 
     /*-[
     static JavaLangReflectMethod *FindMethod(id self, SEL sel) {
-      for (IOSClass *cls in [[self getClass] getInterfacesInternal]) {
+      for (IOSClass *cls in [[self java_getClass] getInterfacesInternal]) {
         JavaLangReflectMethod *result = JreMethodForSelectorInherited(cls, sel);
         if (result) {
           return result;
@@ -333,7 +333,7 @@ private static native Class<?> generateProxy(String name, Class<?>[] interfaces,
                            withNSObjectArray:args];
       IOSClass *returnType = [method getReturnType];
       if (returnType != [IOSClass voidClass]) {
-        IOSClass *resultType = [javaResult getClass];
+        IOSClass *resultType = [javaResult java_getClass];
         if ([returnType isPrimitive]) {
           // Return value is currently wrapped, so check wrapper type instead.
           returnType = [(IOSPrimitiveClass *) returnType wrapperClass];

File: testing/mockito/src/main/java/org/mockito/internal/creation/ios/IosMockMaker.java
Patch:
@@ -163,7 +163,7 @@ void setHandler(InvocationHandler handler) {
     /*-[
     static JavaLangReflectMethod *FindMethod(id self, SEL selector) {
       IOSClass *mockedClass =
-          [OrgMockitoInternalCreationIosIosMockMaker_proxyCache getWithId:[self getClass]];
+          [OrgMockitoInternalCreationIosIosMockMaker_proxyCache getWithId:[self java_getClass]];
       return [mockedClass getMethodWithSelector:sel_getName(selector)];
     }
     ]-*/

File: translator/src/test/java/com/google/devtools/j2objc/translate/DefaultMethodsTest.java
Patch:
@@ -353,7 +353,8 @@ public void testNarrowedReturnType() throws IOException {
   public void testAccessingOuterType() throws IOException {
     String source = "interface A { default Class<?> type() { return getClass(); } }";
     String impl = translateSourceFile(source, "Test", "Test.m");
-    assertTranslatedLines(impl, "IOSClass *A_type(id<A> self) {", "return [self getClass];", "}");
+    assertTranslatedLines(impl,
+        "IOSClass *A_type(id<A> self) {", "return [self java_getClass];", "}");
   }
 
   public void testDefaultMethodWithMultipleSelectors() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -100,7 +100,7 @@ public void testClassGetSuperclass() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(0));
-    assertEquals("IOSClass *cls = [self getClass];", result);
+    assertEquals("IOSClass *cls = [self java_getClass];", result);
     result = generateStatement(stmts.get(1));
     assertEquals("IOSClass *superClass = [cls getSuperclass];", result);
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnhancedForRewriter.java
Patch:
@@ -31,9 +31,9 @@
 import com.google.devtools.j2objc.ast.UnitTreeVisitor;
 import com.google.devtools.j2objc.ast.VariableDeclarationStatement;
 import com.google.devtools.j2objc.ast.WhileStatement;
-import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.types.ExecutablePair;
 import com.google.devtools.j2objc.types.GeneratedVariableElement;
+import com.google.devtools.j2objc.types.PointerType;
 import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.TypeUtil;
 import com.google.j2objc.annotations.AutoreleasePool;
@@ -90,8 +90,7 @@ private void handleArrayIteration(EnhancedForStatement node) {
     VariableElement loopVariable = node.getParameter().getVariableElement();
     TypeMirror componentType = expressionType.getComponentType();
     TypeElement iosArrayType = typeEnv.resolveArrayType(componentType);
-    TypeMirror bufferType = BindingConverter.getType(typeEnv.getPointerType(
-        BindingConverter.unwrapTypeMirrorIntoTypeBinding(componentType)));
+    TypeMirror bufferType = new PointerType(componentType);
     VariableElement arrayVariable = new GeneratedVariableElement(
         "a__", expressionType, ElementKind.LOCAL_VARIABLE, null);
     VariableElement bufferVariable = new GeneratedVariableElement(

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -351,8 +351,7 @@ protected void printCompanionClassDeclaration() {
       return;
     }
     printf("\n@interface %s : NSObject", typeName);
-    if (BindingUtil.isRuntimeAnnotation(typeBinding)
-        || BindingUtil.hasDefaultMethodsInFamily(typeBinding)) {
+    if (BindingUtil.isRuntimeAnnotation(typeBinding)) {
       // Print annotation implementation interface.
       printf(" < %s >", typeName);
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -251,7 +251,6 @@ protected boolean needsPublicCompanionClass() {
     return hasInitializeMethod()
         || hasStaticAccessorMethods()
         || BindingUtil.isRuntimeAnnotation(typeBinding)
-        || BindingUtil.hasDefaultMethodsInFamily(typeBinding)
         || BindingUtil.hasStaticInterfaceMethods(typeBinding);
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -242,6 +242,8 @@ public void endVisit(EnumDeclaration node) {
 
   @Override
   public void endVisit(TypeDeclaration node) {
-    new TypeFixer(node).visit();
+    if (!node.isInterface()) {
+      new TypeFixer(node).visit();
+    }
   }
 }

File: jre_emul/android/platform/libcore/ojluni/src/objc/java/java/io/PrintWriter.java
Patch:
@@ -25,6 +25,7 @@
 
 package java.io;
 
+import com.google.j2objc.WeakProxy;
 import java.util.Objects;
 import java.util.Formatter;
 import java.util.Locale;
@@ -900,7 +901,7 @@ public PrintWriter format(String format, Object ... args) {
                 ensureOpen();
                 if ((formatter == null)
                     || (formatter.locale() != Locale.getDefault()))
-                    formatter = new Formatter(this);
+                    formatter = new Formatter(WeakProxy.forObject(this));
                 formatter.format(Locale.getDefault(), format, args);
                 if (autoFlush)
                     out.flush();
@@ -959,7 +960,7 @@ public PrintWriter format(Locale l, String format, Object ... args) {
             synchronized (lock) {
                 ensureOpen();
                 if ((formatter == null) || (formatter.locale() != l))
-                    formatter = new Formatter(this, l);
+                    formatter = new Formatter(WeakProxy.forObject(this), l);
                 formatter.format(l, format, args);
                 if (autoFlush)
                     out.flush();

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -365,6 +365,9 @@ public static IBinding unwrapElement(Element element) {
           BindingConverter.unwrapTypeMirrorIntoTypeBinding(gElement.getReturnType()), null,
           BindingConverter.unwrapTypeElement((TypeElement) gElement.getEnclosingElement()),
           element.getKind() == ElementKind.CONSTRUCTOR, gElement.isVarArgs());
+      if (gElement.isSynthetic()) {
+        newOne.addModifiers(BindingUtil.ACC_SYNTHETIC);
+      }
       for (VariableElement p : gElement.getParameters()) {
         newOne.getParameters().add(
             BindingConverter.unwrapTypeMirrorIntoTypeBinding(p.asType()));

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -354,6 +354,7 @@ public static IBinding unwrapElement(Element element) {
           possibleEnclosing != null ? possibleEnclosing.asType() : null, null);
       newBinding.addAnnotations(element.getAnnotationMirrors());
       newBinding.setNonnull(((GeneratedVariableElement) element).isNonnull());
+      newBinding.setTypeQualifiers(((GeneratedVariableElement) element).getTypeQualifiers());
       return newBinding;
     }
     if (element instanceof GeneratedExecutableElement) {

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -261,8 +261,7 @@ public static boolean isVariable(Element element) {
   }
 
   public static boolean isField(Element element) {
-    ElementKind kind = element.getKind();
-    return kind == ElementKind.FIELD || kind == ElementKind.ENUM_CONSTANT;
+    return element.getKind().isField();
   }
 
   public static boolean isMethod(Element element) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -45,6 +45,7 @@
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.UnitTreeVisitor;
 import com.google.devtools.j2objc.gen.SignatureGenerator;
+import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.types.FunctionBinding;
 import com.google.devtools.j2objc.types.GeneratedVariableBinding;
 import com.google.devtools.j2objc.util.BindingUtil;
@@ -278,7 +279,8 @@ public void endVisit(MethodDeclaration node) {
           // Public methods must be kept for the public API.
           || !(BindingUtil.isPrivateInnerType(declaringClass) || BindingUtil.isPrivate(binding))
           // Methods must be kept for reflection if enabled.
-          || (TranslationUtil.needsReflection(declaringClass) && !isEnumConstructor);
+          || (TranslationUtil.needsReflection(BindingConverter.getTypeElement(declaringClass))
+              && !isEnumConstructor);
       if (keepMethod) {
         setFunctionCaller(node, binding);
       } else {

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -83,7 +83,7 @@ public void endVisit(AnnotationTypeDeclaration node) {
 
   private void visitType(AbstractTypeDeclaration node) {
     ITypeBinding type = node.getTypeBinding();
-    if (!TranslationUtil.needsReflection(type)) {
+    if (!TranslationUtil.needsReflection(BindingConverter.getTypeElement(type))) {
       return;
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/StaticVarRewriter.java
Patch:
@@ -46,8 +46,7 @@ public StaticVarRewriter(CompilationUnit unit) {
   }
 
   private boolean needsStaticLoad(TreeNode currentNode, IVariableBinding var) {
-    if (!BindingUtil.isStatic(var) || BindingUtil.isPrimitiveConstant(var)
-        || BindingUtil.isStringConstant(var)) {
+    if (!BindingUtil.isStatic(var) || BindingUtil.isConstant(var)) {
       return false;
     }
     ITypeBinding enclosingType = TreeUtil.getEnclosingTypeBinding(currentNode);

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -591,7 +591,8 @@ private static IOException secureConnectionException(String description) {
 
       for (CFIndex i = 0; i < count; i++) {
         SecCertificateRef certificate = SecTrustGetCertificateAtIndex(serverTrust, i);
-        NSData* remoteCertificateData = (__bridge NSData *) SecCertificateCopyData(certificate);
+        NSData* remoteCertificateData =
+            [(NSData *) SecCertificateCopyData(certificate) autorelease];
         IOSByteArray* rawCert = [IOSByteArray arrayWithNSData:remoteCertificateData];
         [securityDataHandler_ handleSecCertificateDataWithByteArray:rawCert];
       }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtParser.java
Patch:
@@ -237,9 +237,11 @@ private boolean checkCompilationErrors(String filename, CompilationUnit unit) {
   private static class JdtParserEnvironment implements ParserEnvironment {
 
     private final AST ast;
+    private final Types types;
 
     JdtParserEnvironment(AST ast) {
       this.ast = ast;
+      types = new JdtTypes(ast);
     }
 
     @Override
@@ -254,7 +256,7 @@ public Elements elementUtilities() {
 
     @Override
     public Types typeUtilities() {
-      return JdtTypes.INSTANCE;
+      return types;
     }
   }
 }

File: annotations/src/main/java/com/google/j2objc/annotations/RetainedLocalRef.java
Patch:
@@ -14,12 +14,12 @@
 
 package com.google.j2objc.annotations;
 
+import static java.lang.annotation.ElementType.LOCAL_VARIABLE;
+import static java.lang.annotation.RetentionPolicy.SOURCE;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.ElementType.*;
-import static java.lang.annotation.RetentionPolicy.*;
-
 /**
  * Annotation that indicates a local variable should be retained outside of any
  * subsequent AutoreleasePool use. Otherwise, if a local variable has a copy

File: annotations/src/main/java/com/google/j2objc/annotations/WeakOuter.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.google.j2objc.annotations;
 
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.SOURCE;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.ElementType.*;
-import static java.lang.annotation.RetentionPolicy.*;
-
 /**
  * Annotation that indicates an inner class has a weak relationship
  * to its owning class.

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtElements.java
Patch:
@@ -63,7 +63,7 @@ public boolean isDeprecated(Element e) {
 
   @Override
   public Name getBinaryName(TypeElement type) {
-    throw new AssertionError("not implemented");
+    return new StringName(BindingConverter.unwrapTypeElement(type).getBinaryName());
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -244,7 +244,7 @@ private String getOverrideSignature(ExecutablePair method) {
     StringBuilder sb = new StringBuilder(ElementUtil.getName(method.elem));
     sb.append('(');
     for (TypeMirror pType : method.type.getParameterTypes()) {
-      sb.append(TypeUtil.getBinaryName(typeUtil.erasure(pType)));
+      sb.append(typeUtil.getSignatureName(pType));
     }
     sb.append(')');
     return sb.toString();

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationEnvironment.java
Patch:
@@ -30,7 +30,7 @@ public class TranslationEnvironment {
   public TranslationEnvironment(NameTable.Factory nameTableFactory, ParserEnvironment parserEnv) {
     Preconditions.checkNotNull(nameTableFactory);
     elementUtil = new ElementUtil(parserEnv.elementUtilities());
-    typeUtil = new TypeUtil(parserEnv.typeUtilities());
+    typeUtil = new TypeUtil(parserEnv.typeUtilities(), elementUtil);
     typeEnv = new Types(parserEnv);
     nameTable = nameTableFactory.newNameTable(typeEnv, elementUtil);
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/GeneratedType.java
Patch:
@@ -74,7 +74,7 @@ private GeneratedType(
   public static GeneratedType fromTypeDeclaration(AbstractTypeDeclaration typeNode) {
     ITypeBinding typeBinding = typeNode.getTypeBinding();
     CompilationUnit unit = TreeUtil.getCompilationUnit(typeNode);
-    NameTable nameTable = unit.getNameTable();
+    NameTable nameTable = unit.getEnv().nameTable();
 
     ImmutableList.Builder<String> superTypes = ImmutableList.builder();
     ITypeBinding superclass = typeBinding.getSuperclass();

File: translator/src/main/java/com/google/devtools/j2objc/javac/JavacParser.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.Parser;
 import com.google.devtools.j2objc.util.SourceVersion;
+import com.google.devtools.j2objc.util.TranslationEnvironment;
 import com.sun.source.tree.CompilationUnitTree;
 import com.sun.tools.javac.api.JavacTaskImpl;
 import com.sun.tools.javac.tree.JCTree;
@@ -120,7 +121,8 @@ public void parseFiles(Collection<String> paths, Handler handler, SourceVersion
     Iterable<? extends JavaFileObject> fileObjects = fileManager.getJavaFileObjectsFromFiles(files);
     JavacTaskImpl task = (JavacTaskImpl) compiler.getTask(
         null, fileManager, diagnostics, javacOptions, null, fileObjects);
-    JavacEnvironment env = new JavacEnvironment(nameTableFactory, task.getContext());
+    JavacEnvironment parserEnv = new JavacEnvironment(task.getContext());
+    TranslationEnvironment env = new TranslationEnvironment(nameTableFactory, parserEnv);
 
     List<CompilationUnitTree> units = new ArrayList<>();
     try {

File: translator/src/main/java/com/google/devtools/j2objc/javac/TreeConverter.java
Patch:
@@ -51,7 +51,7 @@
 import com.google.devtools.j2objc.file.JarredInputFile;
 import com.google.devtools.j2objc.file.RegularInputFile;
 import com.google.devtools.j2objc.util.FileUtil;
-import com.google.devtools.j2objc.util.ParserEnvironment;
+import com.google.devtools.j2objc.util.TranslationEnvironment;
 import com.sun.source.tree.AnnotationTree;
 import com.sun.source.tree.StatementTree;
 import com.sun.source.tree.Tree.Kind;
@@ -77,7 +77,7 @@ public class TreeConverter {
   private JCTree.JCCompilationUnit unit;
 
   public static CompilationUnit convertCompilationUnit(
-      ParserEnvironment env, JCTree.JCCompilationUnit javacUnit) {
+      TranslationEnvironment env, JCTree.JCCompilationUnit javacUnit) {
     TreeConverter converter = new TreeConverter(javacUnit);
     String sourceFilePath = javacUnit.getSourceFile().toUri().getPath();
     InputFile sourceFile = convertFileObject(javacUnit.getSourceFile());

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -116,7 +116,7 @@
 import com.google.devtools.j2objc.ast.VariableDeclarationStatement;
 import com.google.devtools.j2objc.ast.WhileStatement;
 import com.google.devtools.j2objc.util.BindingUtil;
-import com.google.devtools.j2objc.util.ParserEnvironment;
+import com.google.devtools.j2objc.util.TranslationEnvironment;
 import com.google.j2objc.annotations.Property;
 import java.util.ArrayList;
 import java.util.List;
@@ -134,7 +134,7 @@
 public class TreeConverter {
 
   public static CompilationUnit convertCompilationUnit(
-      ParserEnvironment env, org.eclipse.jdt.core.dom.CompilationUnit jdtUnit,
+      TranslationEnvironment env, org.eclipse.jdt.core.dom.CompilationUnit jdtUnit,
       String sourceFilePath, String mainTypeName, String source) {
     return new CompilationUnit(env, jdtUnit, sourceFilePath, mainTypeName, source);
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnonymousClassConverter.java
Patch:
@@ -128,9 +128,8 @@ private ExecutableElement findSuperConstructorElement(ExecutableElement construc
         (DeclaredType) ElementUtil.getDeclaringClass(constructorElement).getSuperclass();
     for (ExecutableElement m : ElementUtil.getDeclaredMethods(TypeUtil.asTypeElement(superClass))) {
       if (ElementUtil.isConstructor(m)) {
-        ExecutableType mType = (ExecutableType) env.typeUtilities().asMemberOf(superClass, m);
-        if (env.typeUtilities().isSubsignature(
-            (ExecutableType) constructorElement.asType(), mType)) {
+        ExecutableType mType = typeUtil.asMemberOf(superClass, m);
+        if (typeUtil.isSubsignature((ExecutableType) constructorElement.asType(), mType)) {
           return m;
         }
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -298,7 +298,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     FunctionDeclaration function = new FunctionDeclaration(
         nameTable.getFullFunctionName(m), m.getReturnType(), declaringClass);
-    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(m, env));
+    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(m, elementUtil));
     function.setLineNumber(method.getName().getLineNumber());
 
     if (!BindingUtil.isStatic(m)) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -114,8 +114,8 @@ private Scope(Scope outer, TypeElement type) {
 
       // Lambdas are ignored when resolving implicit outer scope.
       if (kind == ScopeKind.CLASS) {
-        for (DeclaredType inheritedType :
-          ElementUtil.getInheritedDeclaredTypesInclusive(type.asType(), env)) {
+        for (DeclaredType inheritedType
+             : typeUtil.getInheritedDeclaredTypesInclusive(type.asType())) {
           inheritedScopeBuilder.add(inheritedType.asElement());
         }
       }
@@ -124,7 +124,7 @@ private Scope(Scope outer, TypeElement type) {
       // "inherit" from Object. Therefore we add this manually to make the set complete. This is
       // needed because Java 8 default methods can call methods in Object.
       if (ElementUtil.isInterface(type)) {
-        inheritedScopeBuilder.add(env.types().getJavaObjectElement());
+        inheritedScopeBuilder.add(typeEnv.getJavaObjectElement());
       }
 
       this.inheritedScope = inheritedScopeBuilder.build();

File: translator/src/main/java/com/google/devtools/j2objc/translate/PackageInfoRewriter.java
Patch:
@@ -53,7 +53,7 @@ public static void run(CompilationUnit unit) {
 
   private PackageInfoRewriter(CompilationUnit unit) {
     this.unit = unit;
-    typeEnv = unit.getTypeEnv();
+    typeEnv = unit.getEnv().types();
   }
 
   private void run() {

File: translator/src/main/java/com/google/devtools/j2objc/types/HeaderImportCollector.java
Patch:
@@ -95,15 +95,15 @@ private void addForwardDecl(Type type) {
   }
 
   private void addForwardDecl(ITypeBinding type) {
-    forwardDecls.addAll(Sets.difference(Import.getImports(type, unit), declaredTypes));
+    forwardDecls.addAll(Sets.difference(Import.getImports(type, unit.getEnv()), declaredTypes));
   }
 
   private void addSuperType(ITypeBinding type) {
-    Import.addImports(type, superTypes, unit);
+    Import.addImports(type, superTypes, unit.getEnv());
   }
 
   private void addDeclaredType(ITypeBinding type) {
-    Import.addImports(type, declaredTypes, unit);
+    Import.addImports(type, declaredTypes, unit.getEnv());
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -95,11 +95,12 @@ private void addImports(TypeElement type) {
   }
 
   private void addImports(TypeMirror type) {
-    Import.addImports(BindingConverter.unwrapTypeMirrorIntoTypeBinding(type), imports, unit);
+    Import.addImports(
+        BindingConverter.unwrapTypeMirrorIntoTypeBinding(type), imports, unit.getEnv());
   }
 
   private void addImports(ITypeBinding type) {
-    Import.addImports(type, imports, unit);
+    Import.addImports(type, imports, unit.getEnv());
   }
 
   private void addImports(Iterable<ITypeBinding> types) {

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -233,7 +233,7 @@ public void testMethodVarInNestedAnonymousClass() throws IOException {
 
     // Verify method var in r1.run() isn't mistakenly made a field in r1.
     CompilationUnit unit = translateType("Test", source);
-    NameTable nameTable = unit.getNameTable();
+    NameTable nameTable = unit.getEnv().nameTable();
     List<AbstractTypeDeclaration> types = unit.getTypes();
     AbstractTypeDeclaration r1 = types.get(1);
     assertEquals("Test_$1", nameTable.getFullName(r1.getTypeBinding()));
@@ -271,7 +271,7 @@ public void testMethodVarInAnonymousClass() throws IOException {
 
     // Verify method var in r1.run() isn't mistakenly made a field in r1.
     CompilationUnit unit = translateType("Test", source);
-    NameTable nameTable = unit.getNameTable();
+    NameTable nameTable = unit.getEnv().nameTable();
     List<AbstractTypeDeclaration> types = unit.getTypes();
     AbstractTypeDeclaration r1 = types.get(1);
     assertEquals("Test_$1", nameTable.getFullName(r1.getTypeBinding()));
@@ -300,7 +300,7 @@ public void testMethodVarInSwitch() throws IOException {
 
     // Verify method var in r1.run() isn't mistakenly made a field in r1.
     CompilationUnit unit = translateType("Test", source);
-    NameTable nameTable = unit.getNameTable();
+    NameTable nameTable = unit.getEnv().nameTable();
     List<AbstractTypeDeclaration> types = unit.getTypes();
     AbstractTypeDeclaration r1 = types.get(2);
     assertEquals("Test_$1", nameTable.getFullName(r1.getTypeBinding()));

File: translator/src/test/java/com/google/devtools/j2objc/types/CompoundTypeTest.java
Patch:
@@ -87,7 +87,7 @@ public void testCompoundTypeFullName() throws IOException {
           // its return statement is.
           ReturnStatement stmt = (ReturnStatement) method.getBody().getStatements().get(0);
           TypeMirror mirror = stmt.getExpression().getTypeMirror();
-          String typeName = unit.getNameTable().getObjCType(mirror);
+          String typeName = unit.getEnv().nameTable().getObjCType(mirror);
           assertEquals("id<FooBarTest, JavaIoSerializable>", typeName);
           return;
         }

File: translator/src/test/java/com/google/devtools/j2objc/util/PackagePrefixesTest.java
Patch:
@@ -70,7 +70,7 @@ public void testGetFullNameWithPrefix() {
     String source = "package foo.bar; public class SomeClass {}";
     Options.addPackagePrefix("foo.bar", "FB");
     CompilationUnit unit = translateType("SomeClass", source);
-    NameTable nameTable = unit.getNameTable();
+    NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(0);
     assertEquals("FBSomeClass", nameTable.getFullName(decl.getTypeBinding()));
   }
@@ -80,7 +80,7 @@ public void testGetFullNameWithInnerClassAndPrefix() {
     String source = "package foo.bar; public class SomeClass { static class Inner {}}";
     Options.addPackagePrefix("foo.bar", "FB");
     CompilationUnit unit = translateType("SomeClass", source);
-    NameTable nameTable = unit.getNameTable();
+    NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(1);
     assertEquals("FBSomeClass_Inner", nameTable.getFullName(decl.getTypeBinding()));
   }
@@ -89,7 +89,7 @@ public void testPackageWildcards() throws IOException {
     String source = "package foo.bar; public class SomeClass {}";
     Options.addPackagePrefix("foo.*", "FB");
     CompilationUnit unit = translateType("SomeClass", source);
-    NameTable nameTable = unit.getNameTable();
+    NameTable nameTable = unit.getEnv().nameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(0);
     assertEquals("FBSomeClass", nameTable.getFullName(decl.getTypeBinding()));
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnonymousClassConverter.java
Patch:
@@ -81,6 +81,7 @@ public void endVisit(AnonymousClassDeclaration node) {
     TypeDeclaration typeDecl = new TypeDeclaration(typeElement);
     typeDecl.setSourceRange(node.getStartPosition(), node.getLength());
     TreeUtil.moveList(node.getBodyDeclarations(), typeDecl.getBodyDeclarations());
+    TreeUtil.moveList(node.getSuperCaptureArgs(), typeDecl.getSuperCaptureArgs());
 
     // Add a default constructor.
     addDefaultConstructor(typeDecl, constructorElement);

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -455,13 +455,13 @@ public boolean visit(AnonymousClassDeclaration node) {
 
   @Override
   public void endVisit(AnonymousClassDeclaration node) {
+    TypeElement type = node.getTypeElement();
     TreeNode parent = node.getParent();
     Expression superOuter = parent instanceof ClassInstanceCreation
         ? TreeUtil.remove(((ClassInstanceCreation) parent).getExpression()) : null;
     if (superOuter != null) {
       // The parent creation node has an explicit outer reference that needs to be passed through to
       // the superclass constructor.
-      TypeElement type = node.getTypeElement();
       ((ClassInstanceCreation) parent).setSuperOuterArg(superOuter);
       VariableElement param = new GeneratedVariableElement(
           "superOuter$", superOuter.getTypeMirror(), ElementKind.PARAMETER, type)
@@ -471,6 +471,7 @@ public void endVisit(AnonymousClassDeclaration node) {
     } else {
       addSuperOuterPath(node);
     }
+    addCaptureArgs(ElementUtil.getSuperclass(type), node.getSuperCaptureArgs());
     popType();
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/util/PackagePrefixes.java
Patch:
@@ -124,7 +124,7 @@ public String getPrefix(PackageElement packageElement) {
       for (AnnotationMirror annotation : packageElement.getAnnotationMirrors()) {
         DeclaredType annotationType = annotation.getAnnotationType();
         if (annotationType.asElement().getSimpleName().toString().equals("ObjectiveCName")) {
-          String prefix = (String) annotation.getElementValues().get("value").getValue();
+          String prefix = (String) ElementUtil.getAnnotationValue(annotation, "value");
           addPrefix(packageName, prefix);
           // Don't return, as there may be a prefix annotation that overrides this value.
         }

File: translator/src/main/java/com/google/devtools/j2objc/translate/LambdaRewriter.java
Patch:
@@ -114,7 +114,7 @@ public void resolveFunctionalInterface() {
     }
 
     private void createTypeDeclaration() {
-      typeDecl = new TypeDeclaration(BindingConverter.unwrapTypeElement(lambdaType));
+      typeDecl = new TypeDeclaration(lambdaType);
       typeDecl.setSourceRange(node.getStartPosition(), node.getLength());
       TreeUtil.getEnclosingTypeBodyDeclarations(node).add(typeDecl);
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/PackageInfoRewriter.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.devtools.j2objc.ast.StringLiteral;
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
+import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.types.GeneratedMethodBinding;
 import com.google.devtools.j2objc.types.GeneratedTypeBinding;
 import com.google.devtools.j2objc.types.Types;
@@ -68,7 +69,7 @@ private void run() {
         NameTable.PACKAGE_INFO_CLASS_NAME, pkg.getPackageElement(), typeEnv.getNSObject(), false,
         null);
     typeBinding.setModifiers(Modifier.PRIVATE);
-    TypeDeclaration typeDecl = new TypeDeclaration(typeBinding);
+    TypeDeclaration typeDecl = new TypeDeclaration(BindingConverter.getTypeElement(typeBinding));
     TreeUtil.moveList(pkg.getAnnotations(), typeDecl.getAnnotations());
 
     if (prefix != null) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/AnonymousClassDeclaration.java
Patch:
@@ -23,7 +23,7 @@
  * Anonymous class declaration node. Must be the child of a
  * ClassInstanceCreation node.
  */
-public final class AnonymousClassDeclaration extends TreeNode {
+public final class AnonymousClassDeclaration extends TreeNode implements CommonTypeDeclaration {
 
   private TypeElement element = null;
   private final ChildList<BodyDeclaration> bodyDeclarations =
@@ -47,6 +47,7 @@ public ITypeBinding getTypeBinding() {
     return (ITypeBinding) BindingConverter.unwrapElement(element);
   }
 
+  @Override
   public TypeElement getTypeElement() {
     return element;
   }
@@ -56,6 +57,7 @@ public AnonymousClassDeclaration setTypeElement(TypeElement newElement) {
     return this;
   }
 
+  @Override
   public List<BodyDeclaration> getBodyDeclarations() {
     return bodyDeclarations;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeVisitor.java
Patch:
@@ -16,13 +16,15 @@
 
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.NameTable;
+import com.google.devtools.j2objc.util.ParserEnvironment;
 
 /**
  * Base visitor class for the J2ObjC tree.
  */
 public class TreeVisitor {
 
   protected CompilationUnit unit = null;
+  protected ParserEnvironment env = null;
   protected Types typeEnv = null;
   protected NameTable nameTable = null;
 
@@ -34,6 +36,7 @@ public class TreeVisitor {
    */
   public void run(TreeNode node) {
     unit = TreeUtil.getCompilationUnit(node);
+    env = unit.getEnv();
     typeEnv = unit.getTypeEnv();
     nameTable = unit.getNameTable();
     node.accept(this);

File: translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.gen;
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
-import com.google.devtools.j2objc.jdt.JdtElements;
+import com.google.devtools.j2objc.util.ParserEnvironment;
 import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -100,7 +100,7 @@ public static String createMethodTypeSignature(IMethodBinding method) {
     return builder.toString();
   }
 
-  public static String createJniFunctionSignature(IMethodBinding method) {
+  public static String createJniFunctionSignature(IMethodBinding method, ParserEnvironment env) {
     // Mangle function name as described in JNI specification.
     // http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html#wp615
     StringBuilder sb = new StringBuilder();
@@ -109,7 +109,7 @@ public static String createJniFunctionSignature(IMethodBinding method) {
     String methodName = method.getName();
     ITypeBinding declaringClass = method.getDeclaringClass();
     PackageElement pkg =
-        JdtElements.getInstance().getPackageOf(BindingConverter.getElement(declaringClass));
+        env.elementUtilities().getPackageOf(BindingConverter.getElement(declaringClass));
     if (pkg != null && !pkg.isUnnamed()) {
       String pkgName = pkg.getQualifiedName().toString();
       for (String part : pkgName.split("\\.")) {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtParser.java
Patch:
@@ -247,12 +247,12 @@ public Element resolve(String name) {
 
     @Override
     public javax.lang.model.util.Elements elementUtilities() {
-      return JdtElements.getInstance();
+      return JdtElements.INSTANCE;
     }
 
     @Override
     public javax.lang.model.util.Types typeUtilities() {
-      return JdtTypes.getInstance();
+      return JdtTypes.INSTANCE;
     }
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -293,7 +293,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     FunctionDeclaration function = new FunctionDeclaration(
         nameTable.getFullFunctionName(m), m.getReturnType(), declaringClass);
-    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(m));
+    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(m, env));
     function.setLineNumber(method.getName().getLineNumber());
 
     if (!BindingUtil.isStatic(m)) {

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedExecutableElement.java
Patch:
@@ -118,7 +118,7 @@ public List<? extends VariableElement> getParameters() {
     return parameters;
   }
 
-  //@Override
+  @Override
   public TypeMirror getReceiverType() {
     throw new AssertionError("not implemented");
   }
@@ -128,7 +128,7 @@ public boolean isVarArgs() {
     return varargs;
   }
 
-  //@Override
+  @Override
   public boolean isDefault() {
     throw new AssertionError("not implemented");
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class Types {
 
-  private final ParserEnvironment environment;
+  private final ParserEnvironment env;
   private final Map<ITypeBinding, ITypeBinding> typeMap = Maps.newHashMap();
   private final Map<ITypeBinding, ITypeBinding> primitiveToWrapperTypes =
       new HashMap<ITypeBinding, ITypeBinding>();
@@ -85,7 +85,7 @@ public class Types {
   private final IOSMethodBinding deallocMethod;
 
   public Types(ParserEnvironment env) {
-    this.environment = env;
+    this.env = env;
 
     // Find core java types.
     javaObjectType = resolveWellKnownType("java.lang.Object");
@@ -188,7 +188,7 @@ private void populatePrimitiveAndWrapperTypeMaps() {
   }
 
   private JdtTypeBinding resolveWellKnownType(String name) {
-    return (JdtTypeBinding) BindingConverter.unwrapElement(environment.resolve(name));
+    return (JdtTypeBinding) BindingConverter.unwrapElement(env.resolve(name));
   }
 
   private void loadPrimitiveAndWrapperTypes(String primitiveName, String wrapperName) {

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -16,7 +16,6 @@
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.jdt.JdtIntersectionType;
-import com.google.devtools.j2objc.jdt.JdtTypes;
 import java.util.List;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
@@ -81,8 +80,8 @@ public static TypeElement asTypeElement(TypeMirror t) {
     }
   }
 
-  public static DeclaredType getSuperclass(TypeMirror t) {
-    List<? extends TypeMirror> supertypes = JdtTypes.getInstance().directSupertypes(t);
+  public static DeclaredType getSuperclass(TypeMirror t, ParserEnvironment env) {
+    List<? extends TypeMirror> supertypes = env.typeUtilities().directSupertypes(t);
     if (supertypes.isEmpty()) {
       return null;
     }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeVisitor.java
Patch:
@@ -16,15 +16,13 @@
 
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.NameTable;
-import com.google.devtools.j2objc.util.ParserEnvironment;
 
 /**
  * Base visitor class for the J2ObjC tree.
  */
 public class TreeVisitor {
 
   protected CompilationUnit unit = null;
-  protected ParserEnvironment env = null;
   protected Types typeEnv = null;
   protected NameTable nameTable = null;
 
@@ -36,7 +34,6 @@ public class TreeVisitor {
    */
   public void run(TreeNode node) {
     unit = TreeUtil.getCompilationUnit(node);
-    env = unit.getEnv();
     typeEnv = unit.getTypeEnv();
     nameTable = unit.getNameTable();
     node.accept(this);

File: translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.gen;
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
-import com.google.devtools.j2objc.util.ParserEnvironment;
+import com.google.devtools.j2objc.jdt.JdtElements;
 import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -100,7 +100,7 @@ public static String createMethodTypeSignature(IMethodBinding method) {
     return builder.toString();
   }
 
-  public static String createJniFunctionSignature(IMethodBinding method, ParserEnvironment env) {
+  public static String createJniFunctionSignature(IMethodBinding method) {
     // Mangle function name as described in JNI specification.
     // http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html#wp615
     StringBuilder sb = new StringBuilder();
@@ -109,7 +109,7 @@ public static String createJniFunctionSignature(IMethodBinding method, ParserEnv
     String methodName = method.getName();
     ITypeBinding declaringClass = method.getDeclaringClass();
     PackageElement pkg =
-        env.elementUtilities().getPackageOf(BindingConverter.getElement(declaringClass));
+        JdtElements.getInstance().getPackageOf(BindingConverter.getElement(declaringClass));
     if (pkg != null && !pkg.isUnnamed()) {
       String pkgName = pkg.getQualifiedName().toString();
       for (String part : pkgName.split("\\.")) {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtParser.java
Patch:
@@ -247,12 +247,12 @@ public Element resolve(String name) {
 
     @Override
     public javax.lang.model.util.Elements elementUtilities() {
-      return JdtElements.INSTANCE;
+      return JdtElements.getInstance();
     }
 
     @Override
     public javax.lang.model.util.Types typeUtilities() {
-      return JdtTypes.INSTANCE;
+      return JdtTypes.getInstance();
     }
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -293,7 +293,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     FunctionDeclaration function = new FunctionDeclaration(
         nameTable.getFullFunctionName(m), m.getReturnType(), declaringClass);
-    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(m, env));
+    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(m));
     function.setLineNumber(method.getName().getLineNumber());
 
     if (!BindingUtil.isStatic(m)) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceFixer.java
Patch:
@@ -66,7 +66,7 @@ public boolean visit(ClassInstanceCreation node) {
 
     if (!parameterTypes.isEmpty()) {
       GeneratedExecutableElement element =
-          new GeneratedExecutableElement(node.getExecutableElement(), env);
+          new GeneratedExecutableElement(node.getExecutableElement());
       element.addParametersPlaceholderFront(parameterTypes);
       node.setExecutableElement(element);
       assert element.isVarArgs() || node.getArguments().size() == element.getParameters().size();
@@ -158,7 +158,7 @@ public void endVisit(SuperConstructorInvocation node) {
 
     if (!parameterTypes.isEmpty()) {
       GeneratedExecutableElement element =
-          new GeneratedExecutableElement(node.getExecutableElement(), env);
+          new GeneratedExecutableElement(node.getExecutableElement());
       element.addParametersPlaceholderFront(parameterTypes);
       node.setExecutableElement(element);
       assert element.isVarArgs() || node.getArguments().size() == element.getParameters().size();

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedExecutableElement.java
Patch:
@@ -118,7 +118,7 @@ public List<? extends VariableElement> getParameters() {
     return parameters;
   }
 
-  @Override
+  //@Override
   public TypeMirror getReceiverType() {
     throw new AssertionError("not implemented");
   }
@@ -128,7 +128,7 @@ public boolean isVarArgs() {
     return varargs;
   }
 
-  @Override
+  //@Override
   public boolean isDefault() {
     throw new AssertionError("not implemented");
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class Types {
 
-  private final ParserEnvironment env;
+  private final ParserEnvironment environment;
   private final Map<ITypeBinding, ITypeBinding> typeMap = Maps.newHashMap();
   private final Map<ITypeBinding, ITypeBinding> primitiveToWrapperTypes =
       new HashMap<ITypeBinding, ITypeBinding>();
@@ -85,7 +85,7 @@ public class Types {
   private final IOSMethodBinding deallocMethod;
 
   public Types(ParserEnvironment env) {
-    this.env = env;
+    this.environment = env;
 
     // Find core java types.
     javaObjectType = resolveWellKnownType("java.lang.Object");
@@ -188,7 +188,7 @@ private void populatePrimitiveAndWrapperTypeMaps() {
   }
 
   private JdtTypeBinding resolveWellKnownType(String name) {
-    return (JdtTypeBinding) BindingConverter.unwrapElement(env.resolve(name));
+    return (JdtTypeBinding) BindingConverter.unwrapElement(environment.resolve(name));
   }
 
   private void loadPrimitiveAndWrapperTypes(String primitiveName, String wrapperName) {

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -16,6 +16,7 @@
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.jdt.JdtIntersectionType;
+import com.google.devtools.j2objc.jdt.JdtTypes;
 import java.util.List;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
@@ -80,8 +81,8 @@ public static TypeElement asTypeElement(TypeMirror t) {
     }
   }
 
-  public static DeclaredType getSuperclass(TypeMirror t, ParserEnvironment env) {
-    List<? extends TypeMirror> supertypes = env.typeUtilities().directSupertypes(t);
+  public static DeclaredType getSuperclass(TypeMirror t) {
+    List<? extends TypeMirror> supertypes = JdtTypes.getInstance().directSupertypes(t);
     if (supertypes.isEmpty()) {
       return null;
     }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeVisitor.java
Patch:
@@ -16,13 +16,15 @@
 
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.NameTable;
+import com.google.devtools.j2objc.util.ParserEnvironment;
 
 /**
  * Base visitor class for the J2ObjC tree.
  */
 public class TreeVisitor {
 
   protected CompilationUnit unit = null;
+  protected ParserEnvironment env = null;
   protected Types typeEnv = null;
   protected NameTable nameTable = null;
 
@@ -34,6 +36,7 @@ public class TreeVisitor {
    */
   public void run(TreeNode node) {
     unit = TreeUtil.getCompilationUnit(node);
+    env = unit.getEnv();
     typeEnv = unit.getTypeEnv();
     nameTable = unit.getNameTable();
     node.accept(this);

File: translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.gen;
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
-import com.google.devtools.j2objc.jdt.JdtElements;
+import com.google.devtools.j2objc.util.ParserEnvironment;
 import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -100,7 +100,7 @@ public static String createMethodTypeSignature(IMethodBinding method) {
     return builder.toString();
   }
 
-  public static String createJniFunctionSignature(IMethodBinding method) {
+  public static String createJniFunctionSignature(IMethodBinding method, ParserEnvironment env) {
     // Mangle function name as described in JNI specification.
     // http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html#wp615
     StringBuilder sb = new StringBuilder();
@@ -109,7 +109,7 @@ public static String createJniFunctionSignature(IMethodBinding method) {
     String methodName = method.getName();
     ITypeBinding declaringClass = method.getDeclaringClass();
     PackageElement pkg =
-        JdtElements.getInstance().getPackageOf(BindingConverter.getElement(declaringClass));
+        env.elementUtilities().getPackageOf(BindingConverter.getElement(declaringClass));
     if (pkg != null && !pkg.isUnnamed()) {
       String pkgName = pkg.getQualifiedName().toString();
       for (String part : pkgName.split("\\.")) {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtParser.java
Patch:
@@ -247,12 +247,12 @@ public Element resolve(String name) {
 
     @Override
     public javax.lang.model.util.Elements elementUtilities() {
-      return JdtElements.getInstance();
+      return JdtElements.INSTANCE;
     }
 
     @Override
     public javax.lang.model.util.Types typeUtilities() {
-      return JdtTypes.getInstance();
+      return JdtTypes.INSTANCE;
     }
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -293,7 +293,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     FunctionDeclaration function = new FunctionDeclaration(
         nameTable.getFullFunctionName(m), m.getReturnType(), declaringClass);
-    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(m));
+    function.setJniSignature(SignatureGenerator.createJniFunctionSignature(m, env));
     function.setLineNumber(method.getName().getLineNumber());
 
     if (!BindingUtil.isStatic(m)) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceFixer.java
Patch:
@@ -66,7 +66,7 @@ public boolean visit(ClassInstanceCreation node) {
 
     if (!parameterTypes.isEmpty()) {
       GeneratedExecutableElement element =
-          new GeneratedExecutableElement(node.getExecutableElement());
+          new GeneratedExecutableElement(node.getExecutableElement(), env);
       element.addParametersPlaceholderFront(parameterTypes);
       node.setExecutableElement(element);
       assert element.isVarArgs() || node.getArguments().size() == element.getParameters().size();
@@ -158,7 +158,7 @@ public void endVisit(SuperConstructorInvocation node) {
 
     if (!parameterTypes.isEmpty()) {
       GeneratedExecutableElement element =
-          new GeneratedExecutableElement(node.getExecutableElement());
+          new GeneratedExecutableElement(node.getExecutableElement(), env);
       element.addParametersPlaceholderFront(parameterTypes);
       node.setExecutableElement(element);
       assert element.isVarArgs() || node.getArguments().size() == element.getParameters().size();

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedExecutableElement.java
Patch:
@@ -118,7 +118,7 @@ public List<? extends VariableElement> getParameters() {
     return parameters;
   }
 
-  //@Override
+  @Override
   public TypeMirror getReceiverType() {
     throw new AssertionError("not implemented");
   }
@@ -128,7 +128,7 @@ public boolean isVarArgs() {
     return varargs;
   }
 
-  //@Override
+  @Override
   public boolean isDefault() {
     throw new AssertionError("not implemented");
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class Types {
 
-  private final ParserEnvironment environment;
+  private final ParserEnvironment env;
   private final Map<ITypeBinding, ITypeBinding> typeMap = Maps.newHashMap();
   private final Map<ITypeBinding, ITypeBinding> primitiveToWrapperTypes =
       new HashMap<ITypeBinding, ITypeBinding>();
@@ -85,7 +85,7 @@ public class Types {
   private final IOSMethodBinding deallocMethod;
 
   public Types(ParserEnvironment env) {
-    this.environment = env;
+    this.env = env;
 
     // Find core java types.
     javaObjectType = resolveWellKnownType("java.lang.Object");
@@ -188,7 +188,7 @@ private void populatePrimitiveAndWrapperTypeMaps() {
   }
 
   private JdtTypeBinding resolveWellKnownType(String name) {
-    return (JdtTypeBinding) BindingConverter.unwrapElement(environment.resolve(name));
+    return (JdtTypeBinding) BindingConverter.unwrapElement(env.resolve(name));
   }
 
   private void loadPrimitiveAndWrapperTypes(String primitiveName, String wrapperName) {

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -16,7 +16,6 @@
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.jdt.JdtIntersectionType;
-import com.google.devtools.j2objc.jdt.JdtTypes;
 import java.util.List;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
@@ -81,8 +80,8 @@ public static TypeElement asTypeElement(TypeMirror t) {
     }
   }
 
-  public static DeclaredType getSuperclass(TypeMirror t) {
-    List<? extends TypeMirror> supertypes = JdtTypes.getInstance().directSupertypes(t);
+  public static DeclaredType getSuperclass(TypeMirror t, ParserEnvironment env) {
+    List<? extends TypeMirror> supertypes = env.typeUtilities().directSupertypes(t);
     if (supertypes.isEmpty()) {
       return null;
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Autoboxer.java
Patch:
@@ -50,6 +50,7 @@
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TranslationUtil;
+import com.google.devtools.j2objc.util.TypeUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -168,7 +169,7 @@ private void rewriteBoxedAssignment(Assignment node) {
     String funcName = "JreBoxed" + getAssignFunctionName(node.getOperator())
         + TranslationUtil.getOperatorFunctionModifier(lhs)
         + NameTable.capitalize(primitiveType.toString());
-    FunctionBinding binding = new FunctionBinding(funcName, type, type);
+    FunctionBinding binding = new FunctionBinding(funcName, type, TypeUtil.asTypeElement(type));
     binding.addParameters(pointerType, primitiveType);
     FunctionInvocation invocation = new FunctionInvocation(binding, type);
     invocation.addArgument(new PrefixExpression(
@@ -390,7 +391,7 @@ private void rewriteBoxedPrefixOrPostfix(TreeNode node, Expression operand, Stri
     TypeMirror pointerType = typeEnv.getPointerType(type);
     funcName = "JreBoxed" + funcName + TranslationUtil.getOperatorFunctionModifier(operand)
         + NameTable.capitalize(typeEnv.getPrimitiveType(type).toString());
-    FunctionBinding binding = new FunctionBinding(funcName, type, type);
+    FunctionBinding binding = new FunctionBinding(funcName, type, TypeUtil.asTypeElement(type));
     binding.addParameters(pointerType);
     FunctionInvocation invocation = new FunctionInvocation(binding, type);
     invocation.addArgument(new PrefixExpression(

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -117,7 +117,7 @@ private Expression rewriteFloatToIntegralCast(
 
   private FunctionInvocation createCastCheck(ITypeBinding type, Expression expr) {
     type = type.getErasure();
-    TypeMirror idType = typeEnv.resolveIOSTypeMirror("id");
+    TypeMirror idType = typeEnv.getIdTypeMirror();
     FunctionInvocation invocation = null;
     if ((type.isInterface() && !type.isAnnotation())
         || (type.isArray() && !type.getComponentType().isPrimitive())) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -224,8 +224,7 @@ private void addDefaultMethodShim(String selector, ExecutablePair method) {
       // if required.
       TypeElement declaringClass = ElementUtil.getDeclaringClass(method.elem);
       String name = nameTable.getFullFunctionName(method.elem);
-      FunctionBinding fb = new FunctionBinding(
-          name, method.elem.getReturnType(), declaringClass.asType());
+      FunctionBinding fb = new FunctionBinding(name, method.elem.getReturnType(), declaringClass);
       fb.addParameters(declaringClass.asType());
       fb.addParameters(((ExecutableType) method.elem.asType()).getParameterTypes());
       FunctionInvocation invocation = new FunctionInvocation(fb, method.type.getReturnType());

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaCloneWriter.java
Patch:
@@ -111,7 +111,7 @@ private Statement createReleaseStatement(IVariableBinding var) {
     if (Options.useARC()) {
       ITypeBinding voidType = typeEnv.resolveJavaType("void");
       FunctionBinding binding = new FunctionBinding("JreRelease", voidType, null);
-      binding.addParameters(typeEnv.resolveIOSTypeMirror("id"));
+      binding.addParameters(typeEnv.getIdTypeMirror());
       FunctionInvocation invocation = new FunctionInvocation(binding, voidType);
       invocation.addArgument(new SimpleName(var));
       return new ExpressionStatement(invocation);

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -409,7 +409,7 @@ private void addNilCheck(Expression node) {
     if (var != null) {
       addSafeVar(var);
     }
-    TypeMirror idType = typeEnv.resolveIOSTypeMirror("id");
+    TypeMirror idType = typeEnv.getIdTypeMirror();
     FunctionBinding binding = new FunctionBinding("nil_chk", idType, null);
     binding.addParameters(idType);
     FunctionInvocation nilChkInvocation = new FunctionInvocation(binding, node.getTypeBinding());

File: translator/src/main/java/com/google/devtools/j2objc/translate/OperatorRewriter.java
Patch:
@@ -150,7 +150,7 @@ private void rewriteVolatileLoad(Expression node) {
     IVariableBinding var = TreeUtil.getVariableBinding(node);
     if (var != null && BindingUtil.isVolatile(var) && !TranslationUtil.isAssigned(node)) {
       TypeMirror type = node.getTypeMirror();
-      TypeMirror idType = typeEnv.resolveIOSTypeMirror("id");
+      TypeMirror idType = typeEnv.getIdTypeMirror();
       TypeMirror declaredType = type.getKind().isPrimitive() ? type : idType;
       String funcName = "JreLoadVolatile" + NameTable.capitalize(declaredType.toString());
       FunctionBinding binding = new FunctionBinding(funcName, declaredType, null);
@@ -409,7 +409,7 @@ private void rewriteStringAppend(Assignment node) {
     List<Expression> operands = getStringAppendOperands(node);
     Expression lhs = node.getLeftHandSide();
     TypeMirror lhsType = lhs.getTypeMirror();
-    TypeMirror idType = typeEnv.resolveIOSTypeMirror("id");
+    TypeMirror idType = typeEnv.getIdTypeMirror();
     String funcName = "JreStrAppend" + TranslationUtil.getOperatorFunctionModifier(lhs);
     FunctionBinding binding = new FunctionBinding(funcName, idType, null);
     binding.addParameters(

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeUtil.java
Patch:
@@ -448,7 +448,7 @@ public static Expression newLiteral(Object value, Types typeEnv) {
     } else if (value instanceof Character) {
       return new CharacterLiteral((Character) value, typeEnv);
     } else if (value instanceof Number) {
-      return new NumberLiteral((Number) value, typeEnv);
+      return new NumberLiteral((Number) value, typeEnv).setToken(value.toString());
     } else if (value instanceof String) {
       return new StringLiteral((String) value, typeEnv);
     }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtElements.java
Patch:
@@ -100,7 +100,8 @@ public boolean hides(Element hider, Element hidden) {
   @Override
   public boolean overrides(ExecutableElement overrider, ExecutableElement overridden,
       TypeElement type) {
-    throw new AssertionError("not implemented");
+    return BindingConverter.unwrapExecutableElement(overrider).overrides(
+        BindingConverter.unwrapExecutableElement(overridden));
   }
 
   @Override
@@ -118,6 +119,7 @@ public Name getName(CharSequence cs) {
     return new StringName(cs.toString());
   }
 
+  @Override
   public boolean isFunctionalInterface(TypeElement type) {
     throw new AssertionError("not implemented");
   }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtTypes.java
Patch:
@@ -96,7 +96,8 @@ public List<? extends TypeMirror> directSupertypes(TypeMirror t) {
 
   @Override
   public TypeMirror erasure(TypeMirror t) {
-    throw new AssertionError("not implemented");
+    ITypeBinding binding = BindingConverter.unwrapTypeMirrorIntoTypeBinding(t);
+    return BindingConverter.getType(binding.getErasure());
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtExecutableType.java
Patch:
@@ -59,13 +59,12 @@ public TypeMirror getReturnType() {
   public List<? extends TypeMirror> getParameterTypes() {
     List<TypeMirror> params = new ArrayList<TypeMirror>();
     for (ITypeBinding param : ((JdtMethodBinding) binding).getParameterTypes()) {
-      params.add((TypeVariable) BindingConverter.getType(param));
+      params.add(BindingConverter.getType(param));
     }
     return params;
   }
 
-  // TODO(tball): enable when Java 8 is minimum version.
-  // @Override
+  @Override
   public TypeMirror getReceiverType() {
     return null;
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/LambdaRewriter.java
Patch:
@@ -91,7 +91,6 @@ public void endVisit(LambdaExpression node) {
     ClassInstanceCreation creation = new ClassInstanceCreation(
         constructorBinding, Type.newType(lambdaType.asType()));
 
-    typeDecl.setKey(node.getKey());
     creation.setKey(node.getKey());
 
     removeCastExpression(node);

File: translator/src/main/java/com/google/devtools/j2objc/translate/UnsequencedExpressionRewriter.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.devtools.j2objc.ast.Block;
 import com.google.devtools.j2objc.ast.BooleanLiteral;
 import com.google.devtools.j2objc.ast.BreakStatement;
+import com.google.devtools.j2objc.ast.CommaExpression;
 import com.google.devtools.j2objc.ast.ConditionalExpression;
 import com.google.devtools.j2objc.ast.ConstructorInvocation;
 import com.google.devtools.j2objc.ast.DoStatement;
@@ -408,6 +409,8 @@ private boolean isUnsequenced(
     if (isWithinConditionalBranch(modification.expression, commonAncestor)
         || isWithinConditionalBranch(access.expression, commonAncestor)) {
       return false;
+    } else if (commonAncestor instanceof CommaExpression) {
+      return false;
     } else if (commonAncestor instanceof Assignment && modification.expression == commonAncestor) {
       // "i = 1 + (i = 2);" is not unsequenced.
       // "i = 1 + i++;" is unsequenced (according to clang).

File: translator/src/main/java/com/google/devtools/j2objc/types/LambdaTypeElement.java
Patch:
@@ -16,6 +16,7 @@
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.Modifier;
 import javax.lang.model.element.NestingKind;
 import javax.lang.model.type.TypeMirror;
 
@@ -30,5 +31,6 @@ public class LambdaTypeElement extends GeneratedTypeElement {
   public LambdaTypeElement(
       String name, Element enclosingElement, TypeMirror superclass) {
     super(name, ElementKind.CLASS, enclosingElement, superclass, NestingKind.ANONYMOUS);
+    addModifiers(Modifier.PRIVATE);
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -103,6 +103,9 @@ public static boolean needsReflection(PackageDeclaration node) {
   }
 
   public static boolean needsReflection(ITypeBinding type) {
+    if (BindingUtil.isLambda(type)) {
+      return false;
+    }
     while (type != null) {
       TypeElement element = (TypeElement) BindingConverter.getElement(type);
       ReflectionSupport.Level level = getReflectionSupportLevel(

File: translator/src/main/java/com/google/devtools/j2objc/ast/AbstractTypeDeclaration.java
Patch:
@@ -36,7 +36,7 @@ public abstract class AbstractTypeDeclaration extends BodyDeclaration {
 
   public AbstractTypeDeclaration(AbstractTypeDeclaration other) {
     super(other);
-    typeElement = other.getElement();
+    typeElement = other.getTypeElement();
     name.copyFrom(other.getName());
     bodyDeclarations.copyFrom(other.getBodyDeclarations());
   }
@@ -64,7 +64,7 @@ public void setTypeBinding(ITypeBinding typeBinding) {
     this.typeElement = BindingConverter.getTypeElement(typeBinding);
   }
 
-  public TypeElement getElement() {
+  public TypeElement getTypeElement() {
     return typeElement;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/AnonymousClassDeclaration.java
Patch:
@@ -33,7 +33,7 @@ public AnonymousClassDeclaration() {}
 
   public AnonymousClassDeclaration(AnonymousClassDeclaration other) {
     super(other);
-    element = other.getElement();
+    element = other.getTypeElement();
     bodyDeclarations.copyFrom(other.getBodyDeclarations());
   }
 
@@ -47,11 +47,11 @@ public ITypeBinding getTypeBinding() {
     return (ITypeBinding) BindingConverter.unwrapElement(element);
   }
 
-  public TypeElement getElement() {
+  public TypeElement getTypeElement() {
     return element;
   }
 
-  public AnonymousClassDeclaration setElement(TypeElement newElement) {
+  public AnonymousClassDeclaration setTypeElement(TypeElement newElement) {
     element = newElement;
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -645,7 +645,7 @@ public boolean visit(MethodDeclaration node) {
     sb.printIndent();
     printAnnotations(node.getAnnotations());
     printModifiers(node.getModifiers());
-    ExecutableElement meth = node.getMethodElement();
+    ExecutableElement meth = node.getExecutableElement();
     printTypeParameters(meth.getTypeParameters());
     if (!node.isConstructor()) {
       if (node.getReturnType() != null) {
@@ -1051,7 +1051,7 @@ public boolean visit(TypeDeclaration node) {
     printModifiers(node.getModifiers());
     sb.print(node.isInterface() ? "interface " : "class ");
     node.getName().accept(this);
-    printTypeParameters(node.getElement().getTypeParameters());
+    printTypeParameters(node.getTypeElement().getTypeParameters());
     sb.print(' ');
     if (node.getSuperclassType() != null) {
       sb.print("extends ");

File: translator/src/main/java/com/google/devtools/j2objc/ast/MethodDeclaration.java
Patch:
@@ -67,16 +67,16 @@ public IMethodBinding getMethodBinding() {
     return methodBinding;
   }
 
-  public ExecutableElement getMethodElement() {
+  public ExecutableElement getExecutableElement() {
     return BindingConverter.getExecutableElement(methodBinding);
   }
 
   public void setMethodBinding(IMethodBinding newMethodBinding) {
     methodBinding = newMethodBinding;
   }
 
-  public MethodDeclaration setMethodElement(ExecutableElement newMethodElement) {
-    methodBinding = (IMethodBinding) BindingConverter.unwrapElement(newMethodElement);
+  public MethodDeclaration setExecutableElement(ExecutableElement newElement) {
+    methodBinding = (IMethodBinding) BindingConverter.unwrapElement(newElement);
     return this;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -414,7 +414,7 @@ private static TreeNode convertAnonymousClassDeclaration(
       bodyDeclarations.add((BodyDeclaration) convert(bodyDecl));
     }
     return new AnonymousClassDeclaration()
-        .setElement((TypeElement) BindingConverter.getElement(node.resolveBinding()))
+        .setTypeElement((TypeElement) BindingConverter.getElement(node.resolveBinding()))
         .setBodyDeclarations(bodyDeclarations);
   }
 
@@ -826,7 +826,7 @@ private static TreeNode convertMethodDeclaration(
         .setName((SimpleName) TreeConverter.convert(node.getName()))
         .setIsConstructor(node.isConstructor())
         .setReturnType((Type) TreeConverter.convert(node.getReturnType2()))
-        .setMethodElement(BindingConverter.getExecutableElement(node.resolveBinding()))
+        .setExecutableElement(BindingConverter.getExecutableElement(node.resolveBinding()))
         .setBody((Block) TreeConverter.convert(node.getBody()));
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -176,7 +176,7 @@ public boolean visit(MethodDeclaration node) {
       return false;
     }
     GeneratedMethodBinding newBinding = addEnumConstructorParams(node.getMethodBinding());
-    node.setMethodElement(BindingConverter.getExecutableElement(newBinding));
+    node.setExecutableElement(BindingConverter.getExecutableElement(newBinding));
     node.removeModifiers(Modifier.PUBLIC | Modifier.PROTECTED);
     node.addModifiers(Modifier.PRIVATE);
     newBinding.setModifiers((newBinding.getModifiers() & ~(Modifier.PUBLIC | Modifier.PROTECTED))

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -137,7 +137,7 @@ private void endHandleType(AbstractTypeDeclaration node) {
 
   private void addOuterFields(AbstractTypeDeclaration node) {
     List<BodyDeclaration> members = node.getBodyDeclarations();
-    TypeElement clazz = node.getElement();
+    TypeElement clazz = node.getTypeElement();
 
     VariableElement outerFieldElement = outerResolver.getOuterField(clazz);
     if (outerFieldElement != null) {
@@ -162,7 +162,7 @@ private void updateConstructors(AbstractTypeDeclaration node) {
   protected void addOuterParameters(
       AbstractTypeDeclaration typeNode, MethodDeclaration constructor) {
     ITypeBinding type = typeNode.getTypeBinding();
-    TypeElement typeE = (TypeElement) typeNode.getElement();
+    TypeElement typeE = typeNode.getTypeElement();
     ITypeBinding outerType = type.getDeclaringClass();
     IVariableBinding outerParamBinding = null;
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/LambdaRewriter.java
Patch:
@@ -111,7 +111,7 @@ public LambdaGenerator(LambdaExpression node) {
       this.node = node;
       enclosingType =
           TreeUtil.getNearestAncestorWithType(TypeDeclaration.class, node);
-      enclosingTypeMirror = enclosingType.getElement().asType();
+      enclosingTypeMirror = enclosingType.getTypeElement().asType();
       lambdaElement = node.getTypeElement();
       lambdaName = nameTable.getFullName(lambdaElement.asType());
       lambdaGetName = lambdaName + "_get";

File: translator/src/main/java/com/google/devtools/j2objc/translate/LambdaTypeElementAdder.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.translate;
 
 import com.google.devtools.j2objc.ast.CreationReference;
-import com.google.devtools.j2objc.ast.Expression;
 import com.google.devtools.j2objc.ast.ExpressionMethodReference;
 import com.google.devtools.j2objc.ast.FunctionalExpression;
 import com.google.devtools.j2objc.ast.LambdaExpression;
@@ -37,7 +36,7 @@ public class LambdaTypeElementAdder extends TreeVisitor {
 
   private Map<TypeElement, Integer> lambdaCounts = new HashMap<>();
 
-  private String getLambdaUniqueName(Expression node) {
+  private String getLambdaUniqueName(FunctionalExpression node) {
     TypeElement enclosingType = TreeUtil.getEnclosingTypeElement(node);
     Integer count = lambdaCounts.get(enclosingType);
     if (count == null) {
@@ -49,7 +48,7 @@ private String getLambdaUniqueName(Expression node) {
 
   private boolean handleFunctionalExpression(FunctionalExpression node) {
     LambdaTypeElement elem = new LambdaTypeElement(
-        getLambdaUniqueName(node), TreeUtil.getEnclosingTypeElement(node),
+        getLambdaUniqueName(node), TreeUtil.getEnclosingElement(node),
         typeEnv.getJavaObjectElement().asType());
     elem.addInterfaces(node.getTargetTypes());
     node.setTypeElement(elem);

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceFixer.java
Patch:
@@ -53,7 +53,7 @@ public OuterReferenceFixer(OuterReferenceResolver outerResolver) {
 
   @Override
   public boolean visit(MethodDeclaration node) {
-    if (node.getMethodElement().getKind() == ElementKind.CONSTRUCTOR) {
+    if (node.getExecutableElement().getKind() == ElementKind.CONSTRUCTOR) {
       List<SingleVariableDeclaration> params = node.getParameters();
       if (params.size() > 0) {
         VariableElement firstParam = params.get(0).getVariableElement();

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -31,6 +31,7 @@
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
+import javax.lang.model.element.NestingKind;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.DeclaredType;
@@ -239,9 +240,8 @@ public static boolean isWeakReference(VariableElement varElement) {
   }
 
   public static boolean isLocal(TypeElement type) {
-    ElementKind kind = type.getEnclosingElement().getKind();
-    return kind != ElementKind.CLASS && kind != ElementKind.INTERFACE
-        && kind != ElementKind.PACKAGE && kind != ElementKind.ENUM;
+    NestingKind nestingKind = type.getNestingKind();
+    return nestingKind == NestingKind.ANONYMOUS || nestingKind == NestingKind.LOCAL;
   }
 
   public static ExecutableElement getFunctionalInterface(TypeMirror type) {

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/ScheduledThreadPoolExecutor.java
Patch:
@@ -8,6 +8,8 @@
 
 import static java.util.concurrent.TimeUnit.NANOSECONDS;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
+
+import com.google.j2objc.annotations.Weak;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.ReentrantLock;
@@ -169,7 +171,7 @@ private class ScheduledFutureTask<V>
         private final long period;
 
         /** The actual task to be re-enqueued by reExecutePeriodic */
-        RunnableScheduledFuture<V> outerTask = this;
+        @Weak RunnableScheduledFuture<V> outerTask = this;
 
         /**
          * Index into delay queue, to support faster cancellation.

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/CycleFinder.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.devtools.j2objc.file.RegularInputFile;
 import com.google.devtools.j2objc.jdt.JdtParser;
 import com.google.devtools.j2objc.pipeline.J2ObjCIncompatibleStripper;
-import com.google.devtools.j2objc.translate.LambdaTypeBindingFixer;
+import com.google.devtools.j2objc.translate.LambdaTypeElementAdder;
 import com.google.devtools.j2objc.translate.OuterReferenceResolver;
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.FileUtil;
@@ -131,7 +131,7 @@ public List<List<Edge>> findCycles() throws IOException {
     Parser.Handler handler = new Parser.Handler() {
       @Override
       public void handleParsedUnit(String path, CompilationUnit unit) {
-        new LambdaTypeBindingFixer().run(unit);
+        new LambdaTypeElementAdder().run(unit);
         typeCollector.visitAST(unit);
         outerResolver.run(unit);
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/VariableRenamer.java
Patch:
@@ -165,7 +165,7 @@ public void endVisit(AnonymousClassDeclaration node) {
 
   @Override
   public boolean visit(LambdaExpression node) {
-    pushType(node.getLambdaType());
+    pushType(node.getTypeElement());
     return true;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/util/BindingUtil.java
Patch:
@@ -14,7 +14,7 @@
 
 package com.google.devtools.j2objc.util;
 
-import com.google.devtools.j2objc.types.LambdaTypeBinding;
+import com.google.devtools.j2objc.types.GeneratedTypeElement;
 import com.google.j2objc.annotations.Property;
 import com.google.j2objc.annotations.RetainedWith;
 import java.lang.annotation.RetentionPolicy;
@@ -163,7 +163,8 @@ public static boolean isFloatingPoint(ITypeBinding type) {
   }
 
   public static boolean isLambda(ITypeBinding type) {
-    return type instanceof LambdaTypeBinding;
+    return type instanceof GeneratedTypeElement.Binding
+        && ElementUtil.isLambda(((GeneratedTypeElement.Binding) type).asElement());
   }
 
   public static boolean isPackageInfo(ITypeBinding type) {

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -16,6 +16,7 @@
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.jdt.JdtTypes;
+import com.google.devtools.j2objc.types.LambdaTypeElement;
 import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.HashMap;
@@ -89,7 +90,7 @@ public static boolean isVolatile(VariableElement element) {
   }
 
   public static boolean isLambda(TypeElement type) {
-    return BindingUtil.isLambda(BindingConverter.unwrapTypeElement(type));
+    return type instanceof LambdaTypeElement;
   }
 
   public static boolean isInterface(Element type) {

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -955,6 +955,8 @@ private static String getTypeSubName(ITypeBinding binding) {
         --innerClassIndex;
       }
       return binaryName.substring(innerClassIndex);
+    } else if (BindingUtil.isLambda(binding)) {
+      return binding.getName();
     }
     return binding.getName().replace('$', '_');
   }

File: translator/src/test/java/com/google/devtools/j2objc/translate/DefaultMethodsTest.java
Patch:
@@ -154,7 +154,7 @@ public void testDefaultMethodWithLambda() throws IOException {
 
     // Make sure we base the non-capturing lambda on interface A's companion class that has the
     // default method shim.
-    assertTranslatedSegments(impl, "id<A, Unrelated> B$$Lambda$2_get() {",
+    assertTranslatedSegments(impl, "id<A, Unrelated> B_$Lambda$2_get() {",
         "Method method", "= class_getInstanceMethod([Unrelated class], @selector(unrelated));",
         "Method method", "= class_getInstanceMethod([A class], "
             + "@selector(underscorePrefixWithNSString:));",

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtParser.java
Patch:
@@ -247,12 +247,12 @@ public Element resolve(String name) {
 
     @Override
     public javax.lang.model.util.Elements elementUtilities() {
-      throw new AssertionError("not implemented");
+      return JdtElements.getInstance();
     }
 
     @Override
     public javax.lang.model.util.Types typeUtilities() {
-      throw new AssertionError("not implemented");
+      return JdtTypes.getInstance();
     }
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtTypes.java
Patch:
@@ -117,7 +117,7 @@ public NoType getNoType(TypeKind kind) {
 
   @Override
   public NullType getNullType() {
-    throw new AssertionError("not implemented");
+    return new JdtNullType();
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -230,7 +230,7 @@ private ITypeBinding getDeclaredType(Expression expr) {
           }
         }
         return getDeclaredReturnType(
-            method, TreeUtil.getOwningType(invocation).getTypeBinding().getSuperclass());
+            method, TreeUtil.getEnclosingTypeBinding(invocation).getSuperclass());
       }
       default:
         return null;

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -191,8 +191,7 @@ public void endVisit(MethodInvocation node) {
     if (!BindingUtil.isStatic(binding)) {
       Expression expr = node.getExpression();
       if (expr == null) {
-        ITypeBinding thisClass = TreeUtil.getOwningType(node).getTypeBinding();
-        expr = new ThisExpression(thisClass);
+        expr = new ThisExpression(TreeUtil.getEnclosingTypeBinding(node));
       }
       args.add(0, TreeUtil.remove(expr));
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -365,7 +365,7 @@ public boolean visit(LambdaExpression node) {
   }
 
   private String getLambdaUniqueName(LambdaExpression node) {
-    ITypeBinding owningType = TreeUtil.getOwningType(node).getTypeBinding();
+    ITypeBinding owningType = TreeUtil.getEnclosingTypeBinding(node);
     Integer count = lambdaCounts.get(owningType);
     if (count == null) {
       count = 0;

File: translator/src/main/java/com/google/devtools/j2objc/translate/StaticVarRewriter.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.google.devtools.j2objc.translate;
 
-import com.google.devtools.j2objc.ast.AbstractTypeDeclaration;
 import com.google.devtools.j2objc.ast.CommaExpression;
 import com.google.devtools.j2objc.ast.Expression;
 import com.google.devtools.j2objc.ast.FieldAccess;
@@ -46,8 +45,8 @@ private boolean needsStaticLoad(TreeNode currentNode, IVariableBinding var) {
         || BindingUtil.isStringConstant(var)) {
       return false;
     }
-    AbstractTypeDeclaration owningType = TreeUtil.getOwningType(currentNode);
-    return owningType == null || !owningType.getTypeBinding().getTypeDeclaration().isEqualTo(
+    ITypeBinding enclosingType = TreeUtil.getEnclosingTypeBinding(currentNode);
+    return enclosingType == null || !enclosingType.getTypeDeclaration().isEqualTo(
         var.getDeclaringClass().getTypeDeclaration());
   }
 

File: jre_emul/Tests/com/google/j2objc/NativeUtil.java
Patch:
@@ -22,6 +22,6 @@
 public class NativeUtil {
 
   public static native int getRetainCount(Object o) /*-[
-    return ((NSObject *)o).retainCount;
+    return (jint) ((NSObject *)o).retainCount;
   ]-*/;
 }

File: testing/junit_ext/src/java/com/google/j2objc/testing/JUnitTestRunner.java
Patch:
@@ -34,6 +34,7 @@
 import java.io.InputStream;
 import java.io.PrintStream;
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Modifier;
 import java.util.Arrays;
 import java.util.Comparator;
 import java.util.HashMap;
@@ -242,7 +243,8 @@ private native Set<Class<?>> getAllTestClasses() /*-[
    * @return true if {@param cls} is either a JUnit 3 or JUnit 4 test.
    */
   protected boolean isJUnitTestClass(Class<?> cls) {
-    return isJUnit3TestClass(cls) || isJUnit4TestClass(cls);
+    return !Modifier.isAbstract(cls.getModifiers())
+            && (isJUnit3TestClass(cls) || isJUnit4TestClass(cls));
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/FieldDeclaration.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.BindingConverter;
 import java.util.List;
 import javax.lang.model.element.VariableElement;
 import org.eclipse.jdt.core.dom.IVariableBinding;
@@ -41,10 +42,9 @@ public FieldDeclaration(VariableDeclarationFragment fragment) {
     fragments.add(fragment);
   }
 
+  // TODO(tball): remove when javac migration is complete.
   public FieldDeclaration(IVariableBinding variableBinding, Expression initializer) {
-    super(variableBinding);
-    type.set(Type.newType(variableBinding.getType()));
-    fragments.add(new VariableDeclarationFragment(variableBinding, initializer));
+    this((VariableElement) BindingConverter.getElement(variableBinding), initializer);
   }
 
   public FieldDeclaration(VariableElement variableElement, Expression initializer) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/VariableDeclarationFragment.java
Patch:
@@ -23,14 +23,13 @@
  */
 public class VariableDeclarationFragment extends VariableDeclaration {
 
-  public VariableDeclarationFragment(org.eclipse.jdt.core.dom.VariableDeclarationFragment jdtNode) {
-    super(jdtNode);
-  }
+  public VariableDeclarationFragment() {}
 
   public VariableDeclarationFragment(VariableDeclarationFragment other) {
     super(other);
   }
 
+  // TODO(tball): remove when javac migration is complete.
   public VariableDeclarationFragment(IVariableBinding variableBinding, Expression initializer) {
     super(variableBinding, initializer);
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -329,7 +329,7 @@ private LinkedListMultimap<Integer, VariableDeclarationFragment> rewriteExtraDim
           newDeclarations = LinkedListMultimap.create();
         }
         VariableDeclarationFragment newFrag = new VariableDeclarationFragment(
-            frag.getVariableBinding(), TreeUtil.remove(frag.getInitializer()));
+            frag.getVariableElement(), TreeUtil.remove(frag.getInitializer()));
         newDeclarations.put(dimensions, newFrag);
         iter.remove();
       } else {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/BindingConverter.java
Patch:
@@ -282,7 +282,7 @@ private static JdtTypeMirror getTypeMirror(IBinding binding) {
   }
 
   public static Element getElement(IBinding binding) {
-      return getElement(wrapBinding(binding));
+    return getElement(wrapBinding(binding));
   }
 
   public static VariableElement getVariableElement(IVariableBinding binding) {
@@ -311,7 +311,8 @@ public static JdtElement getElement(JdtBinding binding) {
       element = new JdtPackageElement((JdtPackageBinding) binding);
     } else if (binding instanceof JdtTypeBinding) {
       JdtTypeBinding typeBinding = (JdtTypeBinding) binding;
-      element = new JdtTypeElement(typeBinding);
+      element = typeBinding.isTypeVariable()
+          ? new JdtTypeParameterElement(typeBinding) : new JdtTypeElement(typeBinding);
     } else if (binding instanceof JdtVariableBinding) {
       element = new JdtVariableElement((JdtVariableBinding) binding);
     } else {

File: translator/src/main/java/com/google/devtools/j2objc/ast/AbstractTypeDeclaration.java
Patch:
@@ -45,7 +45,7 @@ public AbstractTypeDeclaration(AbstractTypeDeclaration other) {
   public AbstractTypeDeclaration(ITypeBinding typeBinding) {
     super(typeBinding);
     this.typeElement = BindingConverter.getTypeElement(typeBinding);
-    name.set(new SimpleName(typeBinding));
+    name.set(new SimpleName(typeElement));
   }
 
   public AbstractTypeDeclaration(TypeElement typeElement) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -37,6 +37,7 @@
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.VariableDeclarationStatement;
+import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.types.FunctionBinding;
 import com.google.devtools.j2objc.types.GeneratedMethodBinding;
 import com.google.devtools.j2objc.types.GeneratedTypeBinding;
@@ -175,7 +176,7 @@ public boolean visit(MethodDeclaration node) {
       return false;
     }
     GeneratedMethodBinding newBinding = addEnumConstructorParams(node.getMethodBinding());
-    node.setMethodBinding(newBinding);
+    node.setMethodElement(BindingConverter.getExecutableElement(newBinding));
     node.removeModifiers(Modifier.PUBLIC | Modifier.PROTECTED);
     node.addModifiers(Modifier.PRIVATE);
     newBinding.setModifiers((newBinding.getModifiers() & ~(Modifier.PUBLIC | Modifier.PROTECTED))

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeUtil.java
Patch:
@@ -284,7 +284,7 @@ public static IVariableBinding getVariableBinding(Name node) {
 
   public static VariableElement getVariableElement(Name node) {
     Element element = node.getElement();
-    return element instanceof VariableElement ? (VariableElement) element : null;
+    return element != null && ElementUtil.isVariable(element) ? (VariableElement) element : null;
   }
 
   public static IMethodBinding getMethodBinding(Expression node) {

File: translator/src/main/java/com/google/devtools/j2objc/jdt/TreeConverter.java
Patch:
@@ -579,7 +579,9 @@ private static TreeNode convertEnhancedForStatement(
 
   private static TreeNode convertEnumConstantDeclaration(
       org.eclipse.jdt.core.dom.EnumConstantDeclaration node) {
-    EnumConstantDeclaration newNode = new EnumConstantDeclaration()
+    EnumConstantDeclaration newNode = new EnumConstantDeclaration();
+    convertBodyDeclaration(node, newNode);
+    newNode
         .setVariableBinding(BindingConverter.wrapBinding(node.resolveVariable()))
         .setExecutableElement(
             BindingConverter.getExecutableElement(node.resolveConstructorBinding()))

File: translator/src/main/java/com/google/devtools/j2objc/translate/PackageInfoRewriter.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.devtools.j2objc.types.GeneratedTypeBinding;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.BindingUtil;
+import com.google.devtools.j2objc.util.ElementUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TranslationUtil;
 import com.google.j2objc.annotations.ObjectiveCName;
@@ -80,7 +81,7 @@ private void run() {
   private static String getPackagePrefix(PackageDeclaration pkg) {
     Annotation objcName = TreeUtil.getAnnotation(ObjectiveCName.class, pkg.getAnnotations());
     if (objcName != null) {
-      return (String) BindingUtil.getAnnotationValue(objcName.getAnnotationMirror(), "value");
+      return (String) ElementUtil.getAnnotationValue(objcName.getAnnotationMirror(), "value");
     }
     return null;
   }

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -75,6 +75,7 @@
 import com.google.devtools.j2objc.types.ImplementationImportCollectorTest;
 import com.google.devtools.j2objc.util.BindingUtilTest;
 import com.google.devtools.j2objc.util.DeadCodeMapTest;
+import com.google.devtools.j2objc.util.ElementUtilTest;
 import com.google.devtools.j2objc.util.ErrorUtilTest;
 import com.google.devtools.j2objc.util.FileUtilTest;
 import com.google.devtools.j2objc.util.NameTableTest;
@@ -106,6 +107,7 @@ public class SmallTests {
     DeadCodeEliminatorTest.class,
     DeadCodeMapTest.class,
     DestructorGeneratorTest.class,
+    ElementUtilTest.class,
     EnhancedForRewriterTest.class,
     EnumRewriterTest.class,
     ErrorUtilTest.class,

File: translator/src/test/java/com/google/devtools/j2objc/ast/LambdaExpressionTest.java
Patch:
@@ -152,7 +152,7 @@ public void testLambdaCloseOverReservedWord() throws IOException {
     String translation = translateSourceFile(functionHeader
         + "class Test { void f(int operator) { Function l = (a) -> operator; } }",
         "Test", "Test.m");
-    assertTranslatedSegments(translation, "captures->operator_ =");
+    assertTranslatedSegments(translation, "captures__->operator_ =");
   }
 
   public void testLargeArgumentCount() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -428,7 +428,7 @@ public void endVisit(LambdaExpression node) {
     // it in the lambda_get function.
     VariableElement outerField = getOuterField(node.getLambdaType());
     if (outerField != null) {
-      addPath(node, getOuterPathInherited(TypeUtil.getTypeElement(outerField.asType())));
+      addPath(node, getOuterPathInherited(TypeUtil.asTypeElement(outerField.asType())));
     }
     List<Capture> capturesForType = captures.get(node.getLambdaType());
     List<List<VariableElement>> capturePaths = new ArrayList<>(capturesForType.size());

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -37,10 +37,10 @@
 import com.google.devtools.j2objc.ast.TypeDeclaration;
 import com.google.devtools.j2objc.ast.VariableDeclaration;
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
-import com.google.devtools.j2objc.jdt.TypeUtil;
 import com.google.devtools.j2objc.types.GeneratedVariableElement;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ElementUtil;
+import com.google.devtools.j2objc.util.TypeUtil;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;

File: translator/src/main/java/com/google/devtools/j2objc/util/ElementUtil.java
Patch:
@@ -16,7 +16,6 @@
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.jdt.JdtTypes;
-import com.google.devtools.j2objc.jdt.TypeUtil;
 import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.HashMap;

File: translator/src/main/java/com/google/devtools/j2objc/util/TypeUtil.java
Patch:
@@ -12,8 +12,10 @@
  * limitations under the License.
  */
 
-package com.google.devtools.j2objc.jdt;
+package com.google.devtools.j2objc.util;
 
+import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.JdtIntersectionType;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.TypeElement;

File: translator/src/test/java/com/google/devtools/j2objc/types/CompoundTypeTest.java
Patch:
@@ -22,9 +22,9 @@
 import com.google.devtools.j2objc.ast.FunctionDeclaration;
 import com.google.devtools.j2objc.ast.MethodDeclaration;
 import com.google.devtools.j2objc.ast.ReturnStatement;
-import com.google.devtools.j2objc.jdt.TypeUtil;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.SourceVersion;
+import com.google.devtools.j2objc.util.TypeUtil;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
 

File: jre_emul/apache_harmony/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/LocaleTest.java
Patch:
@@ -350,7 +350,7 @@ public void test_setDefaultLjava_util_Locale() {
 		assertEquals("Failed to set locale", "fr_CA_WIN32", x.toString());
 
 		// iOS doesn't have Turkish case tables by default, use German
-		// since it has a case where "�".toUpper() is "SS", and 
+		// since it has a case where "§".toUpper() is "SS", and 
 		// "SS".toLower() is "ss".
 		Locale.setDefault(new Locale("de", ""));
 		String res1 = "\u00DF".toUpperCase();

File: jre_emul/stub_classes/java/lang/Throwable.java
Patch:
@@ -17,6 +17,7 @@
 
 package java.lang;
 
+import java.io.ObjectInputStream;
 import java.io.PrintStream;
 import java.io.PrintWriter;
 import java.io.Serializable;
@@ -110,4 +111,6 @@ public final Throwable[] getSuppressed() {
   public String toString() {
     return null;
   }
+
+  private void readObject(ObjectInputStream in) {}
 }

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtExecutableElement.java
Patch:
@@ -34,7 +34,8 @@
 class JdtExecutableElement extends JdtElement implements ExecutableElement {
 
   public JdtExecutableElement(IMethodBinding binding) {
-    super(binding, binding.getName(), binding.getModifiers());
+    super(binding.getMethodDeclaration(), binding.getMethodDeclaration().getName(),
+        binding.getMethodDeclaration().getModifiers());
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtVariableElement.java
Patch:
@@ -75,7 +75,9 @@ public Object getConstantValue() {
 
   @Override
   public TypeMirror asType() {
-    return BindingConverter.getType(((IVariableBinding) binding).getType());
+    return BindingConverter.getType(binding instanceof ITypeBinding
+        ? ((ITypeBinding) binding)
+        : ((IVariableBinding) binding).getType());
   }
 
   @Override

File: jre_emul/android/libcore/luni/src/main/java/libcore/icu/ICU.java
Patch:
@@ -296,9 +296,8 @@ public static native String getCurrencyDisplayName(Locale locale, String currenc
       return [nativeLocale displayNameForKey:NSLocaleCurrencyCode value:currencyCode];
     ]-*/;
 
-    public static native String getCurrencyCode(String localeId) /*-[
-      NSLocale *nativeLocale =
-          AUTORELEASE([[NSLocale alloc] initWithLocaleIdentifier:localeId]);
+    public static native String getCurrencyCode(Locale locale) /*-[
+      NSLocale *nativeLocale = [NSLocale localeWithLocaleIdentifier:[locale toLanguageTag]];
       NSNumberFormatter *formatter = AUTORELEASE([[NSNumberFormatter alloc] init]);
       [formatter setNumberStyle:NSNumberFormatterCurrencyStyle];
       [formatter setLocale:nativeLocale];

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/TranslationProcessor.java
Patch:
@@ -163,7 +163,7 @@ public static void applyMutations(
     ticker.tick("Rewriter");
 
     // Add abstract method stubs.
-    new AbstractMethodRewriter(unit).run(unit);
+    new AbstractMethodRewriter(unit, deadCodeMap).run(unit);
     ticker.tick("AbstractMethodRewriter");
 
     new VariableRenamer().run(unit);
@@ -222,7 +222,7 @@ public static void applyMutations(
     new JavaCloneWriter().run(unit);
     ticker.tick("JavaCloneWriter");
 
-    new OcniExtractor(unit).run(unit);
+    new OcniExtractor(unit, deadCodeMap).run(unit);
     ticker.tick("OcniExtractor");
 
     // After: NilCheckResolver - Don't add nil checks to our generated code,

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -124,7 +124,7 @@ private void addNonArcInitialization(EnumDeclaration node) {
           new NativeExpression("ptr += " + sizeName, voidType))));
       String initName = nameTable.getFullFunctionName(methodBinding);
       FunctionBinding initBinding = new FunctionBinding(initName, voidType, valueType);
-      initBinding.addParameter(valueType);
+      initBinding.addParameters(valueType);
       initBinding.addParameters(methodBinding.getParameterTypes());
       FunctionInvocation initFunc = new FunctionInvocation(initBinding, type);
       initFunc.addArgument(new SimpleName(localEnum));

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -161,7 +161,7 @@ private FunctionBinding newFunctionBinding(IMethodBinding method) {
     FunctionBinding binding = new FunctionBinding(
         nameTable.getFullFunctionName(method), method.getReturnType(), declaringClass);
     if (method.isConstructor() || !BindingUtil.isStatic(method)) {
-      binding.addParameter(declaringClass);
+      binding.addParameters(declaringClass);
     }
     binding.addParameters(method.getParameterTypes());
     return binding;

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -69,6 +69,7 @@
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
+import javax.lang.model.type.TypeMirror;
 
 /**
  * Adds nil_chk calls where required to maintain compatibility Java's
@@ -409,9 +410,9 @@ private void addNilCheck(Expression node) {
     if (var != null) {
       addSafeVar(var);
     }
-    ITypeBinding idType = typeEnv.resolveIOSType("id");
+    TypeMirror idType = typeEnv.resolveIOSTypeMirror("id");
     FunctionBinding binding = new FunctionBinding("nil_chk", idType, null);
-    binding.addParameter(idType);
+    binding.addParameters(idType);
     FunctionInvocation nilChkInvocation = new FunctionInvocation(binding, node.getTypeBinding());
     node.replaceWith(nilChkInvocation);
     nilChkInvocation.addArgument(node);

File: translator/src/main/java/com/google/devtools/j2objc/translate/RuntimeAnnotationGenerator.java
Patch:
@@ -151,7 +151,7 @@ private Expression createAnnotation(IAnnotationBinding annotationBinding) {
     FunctionInvocation invocation = new FunctionInvocation(binding, annotationType);
     for (IMemberValuePairBinding valueBinding :
          BindingUtil.getSortedMemberValuePairs(annotationBinding)) {
-      binding.addParameter(valueBinding.getMethodBinding().getReturnType());
+      binding.addParameters(valueBinding.getMethodBinding().getReturnType());
       invocation.addArgument(createAnnotationValue(valueBinding.getValue()));
     }
     return invocation;

File: jre_emul/Tests/com/google/j2objc/ReflectionTests.java
Patch:
@@ -25,9 +25,9 @@ public class ReflectionTests {
   private static final Class<?>[] reflectionTests = {
     com.google.j2objc.ArrayTest.class,
     com.google.j2objc.ClassTest.class,
+    com.google.j2objc.ReflectionTest.class,
     java.lang.reflect.MethodTest.class,
     java.lang.reflect.ProxyTest.class,
-    java.lang.reflect.ReflectionTest.class,
     libcore.java.lang.CharacterTest.class,
     libcore.java.lang.reflect.AnnotationsTest.class,
     libcore.java.lang.reflect.ArrayTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -224,7 +224,8 @@ private int generateFieldsMetadata() {
       List<String> fieldMetadata = new ArrayList<>();
       if (typeNode instanceof EnumDeclaration) {
         for (EnumConstantDeclaration decl : ((EnumDeclaration) typeNode).getEnumConstants()) {
-          fieldMetadata.add(generateFieldMetadata(decl.getVariableBinding(), null));
+          String annotationsFunc = annotationGenerator.createFunction(decl);
+          fieldMetadata.add(generateFieldMetadata(decl.getVariableBinding(), annotationsFunc));
         }
       }
       for (FieldDeclaration decl : TreeUtil.getFieldDeclarations(typeNode)) {

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -526,7 +526,7 @@ public State getState() {
   }
 
   public ThreadGroup getThreadGroup() {
-    return threadGroup;
+    return state == State.TERMINATED ? null : threadGroup;
   }
 
   public StackTraceElement[] getStackTrace() {

File: translator/src/main/java/com/google/devtools/j2objc/ast/FunctionDeclaration.java
Patch:
@@ -30,6 +30,7 @@ public class FunctionDeclaration extends BodyDeclaration {
   private final ChildList<SingleVariableDeclaration> parameters =
       ChildList.create(SingleVariableDeclaration.class, this);
   private final ChildLink<Block> body = ChildLink.create(Block.class, this);
+  //TODO(user): declaringClass should more properly be an Element.
   private final TypeMirror declaringClass;
   private String jniSignature = null;
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceFixer.java
Patch:
@@ -179,7 +179,7 @@ public void endVisit(SuperConstructorInvocation node) {
   }
 
   private List<VariableElement> fixPath(List<VariableElement> path) {
-    if (BindingConverter.unwrapElement(path.get(0)) == OuterReferenceResolver.OUTER_PARAMETER) {
+    if (path.get(0) == OuterReferenceResolver.OUTER_PARAMETER) {
       assert outerParam != null;
       path = Lists.newArrayList(path);
       path.set(0, outerParam);

File: translator/src/test/java/com/google/devtools/j2objc/translate/OuterReferenceResolverTest.java
Patch:
@@ -25,7 +25,6 @@
 import com.google.devtools.j2objc.ast.PostfixExpression;
 import com.google.devtools.j2objc.ast.TreeNode;
 import com.google.devtools.j2objc.ast.TreeNode.Kind;
-import com.google.devtools.j2objc.jdt.BindingConverter;
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
 import com.google.devtools.j2objc.util.BindingUtil;
@@ -87,8 +86,7 @@ public void testInheritedOuterMethod() {
     List<VariableElement> bPath = outerResolver.getPath(bNode);
     assertNotNull(bPath);
     assertEquals(1, bPath.size());
-    assertEquals(OuterReferenceResolver.OUTER_PARAMETER,
-        BindingConverter.unwrapElement(bPath.get(0)));
+    assertEquals(OuterReferenceResolver.OUTER_PARAMETER, bPath.get(0));
 
     // foo() call will need to get to B's scope to call the inherited method.
     MethodInvocation fooCall = (MethodInvocation) nodesByType.get(Kind.METHOD_INVOCATION).get(0);

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -414,8 +414,8 @@ private native void start0() /*-[
     NativeThread *nt = (NativeThread *)self->nativeThread_;
     pthread_attr_t attr;
     pthread_attr_init(&attr);
-    jlong stack = self->stackSize_;
-    if (stack != 0) {
+    size_t stack = (size_t)self->stackSize_;
+    if (stack >= PTHREAD_STACK_MIN) {
       pthread_attr_setstacksize(&attr, stack);
     }
     pthread_create(&nt->t, &attr, &start_routine, [self retain]);

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtExecutableElement.java
Patch:
@@ -56,7 +56,7 @@ public List<? extends TypeParameterElement> getTypeParameters() {
 
   @Override
   public TypeMirror getReturnType() {
-    return BindingConverter.getType(((JdtMethodBinding) binding).getDeclaringClass());
+    return BindingConverter.getType(((JdtMethodBinding) binding).getReturnType());
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/jdt/JdtTypeParameterElement.java
Patch:
@@ -28,7 +28,7 @@
 class JdtTypeParameterElement extends JdtElement implements TypeParameterElement {
 
   JdtTypeParameterElement(ITypeBinding binding) {
-    super(binding.getTypeDeclaration(), binding.getName(), 0);
+    super(binding, binding.getName(), 0);
   }
 
   @Override

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -598,7 +598,7 @@ private void removeHeader(String k) {
 
   private void setHeader(String k, String v) {
     for (HeaderEntry entry : headers) {
-      if (entry.key == k) {
+      if (entry.key == k || (entry.key != null && k != null && k.equalsIgnoreCase(entry.key))) {
         headers.remove(entry);
         break;
       }

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/CycleFinder.java
Patch:
@@ -17,8 +17,8 @@
 import com.google.common.base.Strings;
 import com.google.common.io.Files;
 import com.google.devtools.j2objc.ast.CompilationUnit;
-import com.google.devtools.j2objc.ast.TreeConverter;
 import com.google.devtools.j2objc.file.RegularInputFile;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import com.google.devtools.j2objc.pipeline.J2ObjCIncompatibleStripper;
 import com.google.devtools.j2objc.translate.OuterReferenceResolver;
 import com.google.devtools.j2objc.util.ErrorUtil;

File: translator/src/main/java/com/google/devtools/j2objc/ast/AbstractTypeDeclaration.java
Patch:
@@ -16,6 +16,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 import javax.lang.model.type.DeclaredType;
 import org.eclipse.jdt.core.dom.ITypeBinding;

File: translator/src/main/java/com/google/devtools/j2objc/ast/AnnotatableType.java
Patch:
@@ -14,7 +14,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.devtools.j2objc.Options;
-
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 import javax.lang.model.type.TypeMirror;

File: translator/src/main/java/com/google/devtools/j2objc/ast/Annotation.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.IAnnotationBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.type.TypeMirror;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/Block.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/BodyDeclaration.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 import org.eclipse.jdt.core.dom.IBinding;
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/BreakStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Node type for a break statement.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/CastExpression.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
-
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.type.TypeMirror;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/CatchClause.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Node type for a catch clause.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/ClassInstanceCreation.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 import javax.lang.model.type.TypeMirror;

File: translator/src/main/java/com/google/devtools/j2objc/ast/CompilationUnit.java
Patch:
@@ -16,6 +16,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.NameTable;
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/ConditionalExpression.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.type.TypeMirror;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/ConstructorInvocation.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/ContinueStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Continue statement node type.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/CreationReference.java
Patch:
@@ -13,6 +13,8 @@
  */
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Creation reference expression AST node type (added in JLS8, section 15.13).
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/Dimension.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/DoStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Do statement node type.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/EnhancedForStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Enhanced for statement node type. (e.g. "for (int i : listOfInts) {...}")
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/EnumConstantDeclaration.java
Patch:
@@ -17,6 +17,7 @@
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/EnumDeclaration.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/ExpressionMethodReference.java
Patch:
@@ -13,6 +13,8 @@
  */
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Expression method reference node type (added in JLS8, section 15.13).
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/ExpressionStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Converts an Expression node into a statement node by wrapping it.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/FieldAccess.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.type.TypeMirror;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/FieldDeclaration.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import org.eclipse.jdt.core.dom.IVariableBinding;
-
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/ForStatement.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/IfStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * If statement node type.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/InfixExpression.java
Patch:
@@ -17,6 +17,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 import java.util.List;

File: translator/src/main/java/com/google/devtools/j2objc/ast/Initializer.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.common.base.Preconditions;
-
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.lang.reflect.Modifier;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/InstanceofExpression.java
Patch:
@@ -15,6 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import com.google.devtools.j2objc.types.Types;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;

File: translator/src/main/java/com/google/devtools/j2objc/ast/IntersectionType.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/Javadoc.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/LabeledStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Wrapper for another statement node adding a label.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/LambdaExpression.java
Patch:
@@ -14,6 +14,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import com.google.devtools.j2objc.types.LambdaTypeBinding;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;

File: translator/src/main/java/com/google/devtools/j2objc/ast/MemberValuePair.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Node type for a member value pair in a normal annotation.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/MethodDeclaration.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/MethodInvocation.java
Patch:
@@ -16,6 +16,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/MethodReference.java
Patch:
@@ -16,6 +16,7 @@
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 import javax.lang.model.type.TypeMirror;

File: translator/src/main/java/com/google/devtools/j2objc/ast/NameQualifiedType.java
Patch:
@@ -13,6 +13,8 @@
  */
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Node for a name-qualified type (added in JLS8, section 6.5.5.2).
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/NormalAnnotation.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/PackageDeclaration.java
Patch:
@@ -16,6 +16,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 import javax.lang.model.element.PackageElement;

File: translator/src/main/java/com/google/devtools/j2objc/ast/ParameterizedType.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Node type for a parameterized type.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/ParenthesizedExpression.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.type.TypeMirror;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/PostfixExpression.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.common.collect.Maps;
-
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import org.eclipse.jdt.core.dom.IVariableBinding;
 
 import java.util.Map;

File: translator/src/main/java/com/google/devtools/j2objc/ast/PrefixExpression.java
Patch:
@@ -16,6 +16,7 @@
 
 import com.google.common.collect.Maps;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 import java.util.Map;

File: translator/src/main/java/com/google/devtools/j2objc/ast/QualifiedName.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.element.Element;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/ReturnStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Return statement node type.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/SingleMemberAnnotation.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import com.google.j2objc.annotations.Property;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/SingleVariableDeclaration.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 import javax.lang.model.element.VariableElement;
 import org.eclipse.jdt.core.dom.IVariableBinding;

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperConstructorInvocation.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperFieldAccess.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.type.TypeMirror;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperMethodInvocation.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 import javax.lang.model.type.TypeMirror;

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperMethodReference.java
Patch:
@@ -13,6 +13,8 @@
  */
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Super method reference AST node type (added in JLS8, section 15.13).
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/SwitchCase.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Node type for a switch case statement.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/SwitchStatement.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/SynchronizedStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Synchronized statement node type.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/TagElement.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/ThisExpression.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.type.TypeMirror;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/ThrowStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Throw statement node type.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/TryStatement.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/TypeDeclaration.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
-
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/TypeDeclarationStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Node type for a local type declaration.
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/TypeLiteral.java
Patch:
@@ -15,6 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import com.google.devtools.j2objc.types.Types;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;

File: translator/src/main/java/com/google/devtools/j2objc/ast/TypeMethodReference.java
Patch:
@@ -13,6 +13,8 @@
  */
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * Type method reference expression AST node type (added in JLS8, section 15.13).
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/UnionType.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/VariableDeclaration.java
Patch:
@@ -15,6 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import javax.lang.model.element.VariableElement;
 import org.eclipse.jdt.core.dom.IVariableBinding;
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/VariableDeclarationExpression.java
Patch:
@@ -15,6 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 import javax.lang.model.type.TypeMirror;

File: translator/src/main/java/com/google/devtools/j2objc/ast/VariableDeclarationStatement.java
Patch:
@@ -15,7 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import org.eclipse.jdt.core.dom.IVariableBinding;
-
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import java.util.List;
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/ast/WhileStatement.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.ast;
 
+import com.google.devtools.j2objc.jdt.TreeConverter;
+
 /**
  * While statement node type.
  */

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/FileProcessor.java
Patch:
@@ -19,9 +19,9 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.devtools.j2objc.Options;
-import com.google.devtools.j2objc.ast.TreeConverter;
 import com.google.devtools.j2objc.file.InputFile;
 import com.google.devtools.j2objc.jdt.BindingConverter;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.FileUtil;
 import com.google.devtools.j2objc.util.JdtParser;

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -23,12 +23,12 @@
 import com.google.devtools.j2objc.ast.CompilationUnit;
 import com.google.devtools.j2objc.ast.MethodDeclaration;
 import com.google.devtools.j2objc.ast.Statement;
-import com.google.devtools.j2objc.ast.TreeConverter;
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.file.RegularInputFile;
 import com.google.devtools.j2objc.gen.GenerationUnit;
 import com.google.devtools.j2objc.gen.SourceBuilder;
 import com.google.devtools.j2objc.gen.StatementGenerator;
+import com.google.devtools.j2objc.jdt.TreeConverter;
 import com.google.devtools.j2objc.pipeline.GenerationBatch;
 import com.google.devtools.j2objc.pipeline.InputFilePreprocessor;
 import com.google.devtools.j2objc.pipeline.ProcessingContext;

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.devtools.j2objc.ast.LambdaExpressionTest;
 import com.google.devtools.j2objc.ast.MethodReferenceTest;
-import com.google.devtools.j2objc.ast.TreeConvertTest;
 import com.google.devtools.j2objc.ast.TreeUtilTest;
 import com.google.devtools.j2objc.gen.ArrayAccessTest;
 import com.google.devtools.j2objc.gen.ArrayCreationTest;
@@ -34,6 +33,7 @@
 import com.google.devtools.j2objc.gen.StatementGeneratorTest;
 import com.google.devtools.j2objc.gen.TypeDeclarationGeneratorTest;
 import com.google.devtools.j2objc.gen.TypeImplementationGeneratorTest;
+import com.google.devtools.j2objc.jdt.TreeConverterTest;
 import com.google.devtools.j2objc.pipeline.J2ObjCIncompatibleStripperTest;
 import com.google.devtools.j2objc.pipeline.TranslationProcessorTest;
 import com.google.devtools.j2objc.translate.AbstractMethodRewriterTest;
@@ -143,7 +143,7 @@ public class SmallTests {
     StatementGeneratorTest.class,
     StaticVarRewriterTest.class,
     SuperMethodInvocationRewriterTest.class,
-    TreeConvertTest.class,
+    TreeConverterTest.class,
     TypeDeclarationGeneratorTest.class,
     TypeImplementationGeneratorTest.class,
     TranslationProcessorTest.class,

File: translator/src/test/java/com/google/devtools/j2objc/jdt/TreeConverterTest.java
Patch:
@@ -12,17 +12,16 @@
  * limitations under the License.
  */
 
-package com.google.devtools.j2objc.ast;
+package com.google.devtools.j2objc.jdt;
 
 import com.google.devtools.j2objc.GenerationTest;
 import com.google.devtools.j2objc.util.UnicodeUtils;
-
 import java.io.IOException;
 
 /**
  * Tests for {@link TreeConverter}.
  */
-public class TreeConvertTest extends GenerationTest {
+public class TreeConverterTest extends GenerationTest {
 
   // Issue 470: ClassCastException converting annotation with simple members.
   public void testAnnotationTypeMemberConversion() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/ast/AbstractTypeDeclaration.java
Patch:
@@ -78,7 +78,7 @@ public DeclaredType getTypeMirror() {
     return typeMirror;
   }
 
-  AbstractTypeDeclaration setTypeMirror(DeclaredType newTypeMirror) {
+  public AbstractTypeDeclaration setTypeMirror(DeclaredType newTypeMirror) {
     typeMirror = newTypeMirror;
     return this;
   }
@@ -96,7 +96,7 @@ public List<BodyDeclaration> getBodyDeclarations() {
     return bodyDeclarations;
   }
 
-  BodyDeclaration setBodyDeclarations(List<BodyDeclaration> newDeclarations) {
+  public BodyDeclaration setBodyDeclarations(List<BodyDeclaration> newDeclarations) {
     bodyDeclarations.replaceAll(newDeclarations);
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/AnnotationTypeDeclaration.java
Patch:
@@ -19,7 +19,7 @@
  */
 public class AnnotationTypeDeclaration extends AbstractTypeDeclaration {
 
-  AnnotationTypeDeclaration() {}
+  public AnnotationTypeDeclaration() {}
 
   public AnnotationTypeDeclaration(AnnotationTypeDeclaration other) {
     super(other);

File: translator/src/main/java/com/google/devtools/j2objc/ast/AnonymousClassDeclaration.java
Patch:
@@ -51,7 +51,7 @@ public TypeElement getElement() {
     return element;
   }
 
-  AnonymousClassDeclaration setElement(TypeElement newElement) {
+  public AnonymousClassDeclaration setElement(TypeElement newElement) {
     element = newElement;
     return this;
   }
@@ -60,7 +60,7 @@ public List<BodyDeclaration> getBodyDeclarations() {
     return bodyDeclarations;
   }
 
-  AnonymousClassDeclaration setBodyDeclarations(List<BodyDeclaration> newBodyDeclarations) {
+  public AnonymousClassDeclaration setBodyDeclarations(List<BodyDeclaration> newBodyDeclarations) {
     bodyDeclarations.replaceAll(newBodyDeclarations);
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/ArrayAccess.java
Patch:
@@ -25,7 +25,7 @@ public class ArrayAccess extends Expression {
   private final ChildLink<Expression> array = ChildLink.create(Expression.class, this);
   private final ChildLink<Expression> index = ChildLink.create(Expression.class, this);
 
-  ArrayAccess() {}
+  public ArrayAccess() {}
 
   public ArrayAccess(ArrayAccess other) {
     super(other);
@@ -49,7 +49,7 @@ public Expression getArray() {
     return array.get();
   }
 
-  ArrayAccess setArray(Expression newArray) {
+  public ArrayAccess setArray(Expression newArray) {
     array.set(newArray);
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/ArrayCreation.java
Patch:
@@ -34,7 +34,7 @@ public class ArrayCreation extends Expression {
   private final ChildLink<ArrayInitializer> initializer =
       ChildLink.create(ArrayInitializer.class, this);
 
-  ArrayCreation() {}
+  public ArrayCreation() {}
 
   public ArrayCreation(ArrayCreation other) {
     super(other);
@@ -78,7 +78,7 @@ public ArrayType getType() {
     return arrayType.get();
   }
 
-  ArrayCreation setType(ArrayType newType) {
+  public ArrayCreation setType(ArrayType newType) {
     arrayType.set(newType);
     return this;
   }
@@ -87,7 +87,7 @@ public List<Expression> getDimensions() {
     return dimensions;
   }
 
-  ArrayCreation setDimensions(List<Expression> newDimensions) {
+  public ArrayCreation setDimensions(List<Expression> newDimensions) {
     dimensions.replaceAll(newDimensions);
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/ArrayInitializer.java
Patch:
@@ -28,7 +28,7 @@ public class ArrayInitializer extends Expression {
 
   private ChildList<Expression> expressions = ChildList.create(Expression.class, this);
 
-  ArrayInitializer() {}
+  public ArrayInitializer() {}
 
   public ArrayInitializer(ArrayInitializer other) {
     super(other);
@@ -50,7 +50,7 @@ public TypeMirror getTypeMirror() {
     return typeMirror;
   }
 
-  ArrayInitializer setTypeMirror(TypeMirror newTypeMirror) {
+  public ArrayInitializer setTypeMirror(TypeMirror newTypeMirror) {
     typeMirror = newTypeMirror;
     return this;
   }
@@ -59,7 +59,7 @@ public List<Expression> getExpressions() {
     return expressions;
   }
 
-  ArrayInitializer setExpressions(List<Expression> newExpressions) {
+  public ArrayInitializer setExpressions(List<Expression> newExpressions) {
     expressions.replaceAll(newExpressions);
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/ArrayType.java
Patch:
@@ -23,7 +23,7 @@ public class ArrayType extends Type {
   // TODO(kirbs): Add dimensions into pipeline processing for annotations support on dimensions.
   private ChildLink<Type> componentType = ChildLink.create(Type.class, this);
 
-  ArrayType() {}
+  public ArrayType() {}
 
   public ArrayType(ArrayType other) {
     super(other);
@@ -44,7 +44,7 @@ public Type getComponentType() {
     return componentType.get();
   }
 
-  ArrayType setComponentType(Type newComponentType) {
+  public ArrayType setComponentType(Type newComponentType) {
     componentType.set(newComponentType);
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/AssertStatement.java
Patch:
@@ -22,7 +22,7 @@ public class AssertStatement extends Statement {
   private ChildLink<Expression> expression = ChildLink.create(Expression.class, this);
   private ChildLink<Expression> message = ChildLink.create(Expression.class, this);
 
-  AssertStatement() {
+  public AssertStatement() {
     super();
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/BodyDeclaration.java
Patch:
@@ -96,7 +96,7 @@ public List<Annotation> getAnnotations() {
     return annotations;
   }
 
-  BodyDeclaration setAnnotations(List<Annotation> newAnnotations) {
+  public BodyDeclaration setAnnotations(List<Annotation> newAnnotations) {
     annotations.replaceAll(newAnnotations);
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/Expression.java
Patch:
@@ -53,7 +53,7 @@ public Object getConstantValue() {
     return constantValue;
   }
 
-  Expression setConstantValue(Object value) {
+  public Expression setConstantValue(Object value) {
     constantValue = value;
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/SourcePosition.java
Patch:
@@ -27,11 +27,11 @@ public class SourcePosition {
    */
   public static final SourcePosition NO_POSITION = new SourcePosition(-1, 0, -1);
 
-  SourcePosition(int startPosition, int length) {
+  public SourcePosition(int startPosition, int length) {
     this(startPosition, length, -1);
   }
 
-  SourcePosition(int startPosition, int length, int lineNumber) {
+  public SourcePosition(int startPosition, int length, int lineNumber) {
     this.startPosition = startPosition;
     this.length = length;
     this.lineNumber = lineNumber;

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -136,7 +136,7 @@ public boolean preVisit(TreeNode node) {
 
   public void validateInner() {}
 
-  TreeNode setPosition(SourcePosition position) {
+  public TreeNode setPosition(SourcePosition position) {
     this.startPosition = position.getStartPosition();
     this.length = position.getLength();
     this.lineNumber = position.getLineNumber();

File: translator/src/main/java/com/google/devtools/j2objc/ast/Type.java
Patch:
@@ -71,7 +71,7 @@ public TypeMirror getTypeMirror() {
     return typeMirror;
   }
 
-  Type setTypeMirror(TypeMirror newTypeMirror) {
+  public Type setTypeMirror(TypeMirror newTypeMirror) {
     typeMirror = newTypeMirror;
     return this;
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/PrimitiveType.java
Patch:
@@ -14,7 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
-import org.eclipse.jdt.core.dom.ITypeBinding;
+import javax.lang.model.type.TypeMirror;
 
 /**
  * Node type for a primitive type.
@@ -29,8 +29,8 @@ public PrimitiveType(PrimitiveType other) {
     super(other);
   }
 
-  public PrimitiveType(ITypeBinding typeBinding) {
-    super(typeBinding);
+  public PrimitiveType(TypeMirror typeMirror) {
+    super(typeMirror);
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/ast/SimpleType.java
Patch:
@@ -14,7 +14,7 @@
 
 package com.google.devtools.j2objc.ast;
 
-import org.eclipse.jdt.core.dom.ITypeBinding;
+import javax.lang.model.type.TypeMirror;
 
 /**
  * Creates a type node by wrapping a name.
@@ -29,8 +29,8 @@ public SimpleType(SimpleType other) {
     super(other);
   }
 
-  public SimpleType(ITypeBinding typeBinding) {
-    super(typeBinding);
+  public SimpleType(TypeMirror typeMirror) {
+    super(typeMirror);
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/javac/JdtNullType.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.javac;
 
+import com.google.devtools.j2objc.types.NullTypeBinding;
+
 import java.lang.annotation.Annotation;
 import java.util.Collections;
 import java.util.List;
@@ -26,7 +28,7 @@
 class JdtNullType extends JdtTypeMirror implements NullType {
 
   JdtNullType() {
-    super(null);
+    super(NullTypeBinding.getInstance());
   }
 
   @Override

File: jre_emul/Classes/com/google/j2objc/security/cert/IosCertificateFactory.java
Patch:
@@ -61,8 +61,7 @@ public Certificate engineGenerateCertificate(InputStream inStream)
   private native Certificate iosGenerateCertificate(byte[] bytes) throws CertificateException /*-[
     NSData *data = [[NSData alloc] initWithBytesNoCopy:bytes->buffer_ length:bytes->size_];
     SecCertificateRef newCertificate =
-        SecCertificateCreateWithData(NULL, (ARCBRIDGE CFDataRef) data);
-    [data release];
+        SecCertificateCreateWithData(NULL, (__bridge CFDataRef) data);
     if (!newCertificate) {
       @throw AUTORELEASE([[JavaSecurityCertCertificateException alloc]
                           initWithNSString:@"not a valid DER-encoded X.509 certificate"]);

File: translator/src/main/java/com/google/devtools/j2objc/javac/JdtPrimitiveType.java
Patch:
@@ -37,6 +37,7 @@ public TypeKind getKind() {
         case 'I': return TypeKind.INT;
         case 'J': return TypeKind.LONG;
         case 'S': return TypeKind.SHORT;
+        case 'V': return TypeKind.VOID;
         case 'Z': return TypeKind.BOOLEAN;
         default:
           // Fall through and throw assertion error.

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1406,7 +1406,7 @@ public void testDifferentTypesInConditionalExpression() throws IOException {
     String translation = translateSourceFile(
         "class Test { String test(Runnable r) { return \"foo\" + (r != null ? r : \"bar\"); } }",
         "Test", "Test.m");
-    assertTranslation(translation, "(r != nil ? ((id) r) : @\"bar\")");
+    assertTranslation(translation, "(r != nil ? ((id) (r)) : @\"bar\")");
   }
 
   // Verify that when a method invocation returns an object that is ignored,

File: jre_emul/Classes/com/google/j2objc/security/cert/IosCertificateFactory.java
Patch:
@@ -61,7 +61,8 @@ public Certificate engineGenerateCertificate(InputStream inStream)
   private native Certificate iosGenerateCertificate(byte[] bytes) throws CertificateException /*-[
     NSData *data = [[NSData alloc] initWithBytesNoCopy:bytes->buffer_ length:bytes->size_];
     SecCertificateRef newCertificate =
-        SecCertificateCreateWithData(NULL, (__bridge CFDataRef) data);
+        SecCertificateCreateWithData(NULL, (ARCBRIDGE CFDataRef) data);
+    [data release];
     if (!newCertificate) {
       @throw AUTORELEASE([[JavaSecurityCertCertificateException alloc]
                           initWithNSString:@"not a valid DER-encoded X.509 certificate"]);

File: jre_emul/Classes/com/google/j2objc/security/cert/IosCertificateFactory.java
Patch:
@@ -61,8 +61,7 @@ public Certificate engineGenerateCertificate(InputStream inStream)
   private native Certificate iosGenerateCertificate(byte[] bytes) throws CertificateException /*-[
     NSData *data = [[NSData alloc] initWithBytesNoCopy:bytes->buffer_ length:bytes->size_];
     SecCertificateRef newCertificate =
-        SecCertificateCreateWithData(NULL, (ARCBRIDGE CFDataRef) data);
-    [data release];
+        SecCertificateCreateWithData(NULL, (__bridge CFDataRef) data);
     if (!newCertificate) {
       @throw AUTORELEASE([[JavaSecurityCertCertificateException alloc]
                           initWithNSString:@"not a valid DER-encoded X.509 certificate"]);

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -181,7 +181,7 @@ private int generateMethodsMetadata() {
         for (AnnotationTypeMemberDeclaration decl : TreeUtil.getAnnotationMembers(typeNode)) {
           String name = decl.getName().getIdentifier();
           String returnType = getTypeName(decl.getMethodBinding().getReturnType());
-          String metadata = UnicodeUtils.format("    { %s, %s, 0x%x, -1, -1, -1, -1, -1 },\n",
+          String metadata = UnicodeUtils.format("    { %s, %s, 0x%x, -1, -1, -1, -1, -1, -1 },\n",
               cStr(name), cStr(returnType),
               java.lang.reflect.Modifier.PUBLIC | java.lang.reflect.Modifier.ABSTRACT);
           methodMetadata.add(metadata);
@@ -209,8 +209,9 @@ private String getMethodMetadata(
 
       int modifiers = getMethodModifiers(method) & BindingUtil.ACC_FLAG_MASK;
       String returnTypeStr = method.isConstructor() ? null : getTypeName(method.getReturnType());
-      return UnicodeUtils.format("    { \"%s\", %s, 0x%x, %s, %s, %s, %s, %s },\n",
+      return UnicodeUtils.format("    { \"%s\", %s, 0x%x, %s, %s, %s, %s, %s, %s },\n",
           selector, cStr(returnTypeStr), modifiers, cStrIdx(methodName),
+          cStrIdx(getTypeList(method.getParameterTypes())),
           cStrIdx(getTypeList(method.getExceptionTypes())),
           cStrIdx(SignatureGenerator.createMethodTypeSignature(method)),
           funcPtrIdx(annotationsFunc), funcPtrIdx(paramAnnotationsFunc));

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -208,7 +208,7 @@ private int generateMethodsMetadata() {
         // Add property accessor and static default methods.
         for (AnnotationTypeMemberDeclaration decl : TreeUtil.getAnnotationMembers(typeNode)) {
           String name = decl.getName().getIdentifier();
-          String returnType = getTypeName(decl.getMethodBinding().getReturnType());
+          String returnType = getTypeName2(decl.getMethodBinding().getReturnType());
           String metadata = UnicodeUtils.format("    { %s, %s, 0x%x, -1, -1, -1, -1, -1 },\n",
               cStr(name), cStr(returnType),
               java.lang.reflect.Modifier.PUBLIC | java.lang.reflect.Modifier.ABSTRACT);
@@ -236,7 +236,7 @@ private String getMethodMetadata(
       }
 
       int modifiers = getMethodModifiers(method) & BindingUtil.ACC_FLAG_MASK;
-      String returnTypeStr = method.isConstructor() ? null : getTypeName(method.getReturnType());
+      String returnTypeStr = method.isConstructor() ? null : getTypeName2(method.getReturnType());
       return UnicodeUtils.format("    { \"%s\", %s, 0x%x, %s, %s, %s, %s, %s },\n",
           selector, cStr(returnTypeStr), modifiers, cStrIdx(methodName),
           cStrIdx(getTypeList(method.getExceptionTypes())),

File: translator/src/test/java/com/google/devtools/j2objc/gen/SignatureGeneratorTest.java
Patch:
@@ -179,9 +179,8 @@ public void testGenericTypeMetadata() throws IOException {
 
     // Assert class metadata has generic signature.
     assertTranslation(translation,
-        "J2ObjcClassInfo _Test = { 4, \"Test\", NULL, NULL, 0x0, 2, methods, "
-        + "1, fields, 0, NULL, 0, NULL, NULL, \"<T:Ljava/lang/Object;>Ljava/lang/Object;\", -1, "
-        + "ptrTable };");
+        "J2ObjcClassInfo _Test = { 4, \"Test\", NULL, NULL, 0x0, 2, methods, 1, fields, 0, NULL, "
+        + "NULL, \"<T:Ljava/lang/Object;>Ljava/lang/Object;\", -1, ptrTable };");
 
     // Assert method metadata has generic signature. (in pointer table)
     assertTranslation(translation, "\"(Ljava/util/Map<Ljava/lang/Long;Ljava/util/List<TT;>;>;)V\"");

File: translator/src/test/java/com/google/devtools/j2objc/translate/MetadataWriterTest.java
Patch:
@@ -68,7 +68,7 @@ public void testMethodMetadata() throws IOException {
         "{ \"test11WithId:withId:withId:\", \"V\", 0x400, 5, -1, 6, -1, -1 },");
     assertTranslation(translation,
         "static const void *ptrTable[] = { \"test6\", "
-        + "\"Ljava.lang.InterruptedException;Ljava.lang.Error;\", \"()TT;\", \"test10\", "
+        + "\"LJavaLangInterruptedException;LJavaLangError;\", \"()TT;\", \"test10\", "
         + "\"(ITT;)V\", \"test11\", \"<V:Ljava/lang/Object;X:Ljava/lang/Object;>(TV;TX;TT;)V\" };");
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/javac/JdtBinding.java
Patch:
@@ -82,7 +82,7 @@ public boolean isSynthetic() {
   }
 
   public boolean equals(Object obj) {
-    return obj instanceof IBinding && this.equals((IBinding) obj);
+    return obj instanceof JdtBinding && this.binding.equals(((JdtBinding) obj).binding);
   }
 
   public int hashCode() {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -111,8 +111,7 @@ protected void generateInitialDeclaration() {
     printDisallowedConstructors();
     println("\n@end");
 
-    // Package-info type, skip all outer declarations.
-    if (BindingUtil.isSynthetic(typeBinding)) {
+    if (BindingUtil.isPackageInfo(typeBinding)) {
       return;
     }
     printCompanionClassDeclaration();

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -92,8 +92,7 @@ protected void generate() {
       println("\n@end");
     }
 
-    // Package-info type, skip all outer declarations.
-    if (BindingUtil.isSynthetic(typeBinding)) {
+    if (BindingUtil.isPackageInfo(typeBinding)) {
       return;
     }
     printOuterDeclarations();

File: translator/src/main/java/com/google/devtools/j2objc/translate/MetadataWriter.java
Patch:
@@ -74,7 +74,7 @@ public void endVisit(AnnotationTypeDeclaration node) {
 
   private void visitType(AbstractTypeDeclaration node) {
     ITypeBinding type = node.getTypeBinding();
-    if (BindingUtil.isSynthetic(type) || !TranslationUtil.needsReflection(type)) {
+    if (BindingUtil.isPackageInfo(type) || !TranslationUtil.needsReflection(type)) {
       return;
     }
 

File: jre_emul/Classes/com/google/j2objc/security/cert/IosCertificateFactory.java
Patch:
@@ -61,8 +61,7 @@ public Certificate engineGenerateCertificate(InputStream inStream)
   private native Certificate iosGenerateCertificate(byte[] bytes) throws CertificateException /*-[
     NSData *data = [[NSData alloc] initWithBytesNoCopy:bytes->buffer_ length:bytes->size_];
     SecCertificateRef newCertificate =
-        SecCertificateCreateWithData(NULL, (ARCBRIDGE CFDataRef) data);
-    [data release];
+        SecCertificateCreateWithData(NULL, (__bridge CFDataRef) data);
     if (!newCertificate) {
       @throw AUTORELEASE([[JavaSecurityCertCertificateException alloc]
                           initWithNSString:@"not a valid DER-encoded X.509 certificate"]);

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/ReferenceGraph.java
Patch:
@@ -90,7 +90,8 @@ private void addFieldEdges() {
             && !Modifier.isStatic(field.getModifiers())
             // Exclude self-referential fields. (likely linked DS or delegate pattern)
             && !type.isAssignmentCompatible(fieldType)
-            && !BindingUtil.isWeakReference(field)) {
+            && !BindingUtil.isWeakReference(field)
+            && !BindingUtil.isRetainedWithField(field)) {
           addEdge(Edge.newFieldEdge(type, field));
         }
       }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeVisitorAssertionError.java
Patch:
@@ -29,6 +29,9 @@ public class TreeVisitorAssertionError extends AssertionError {
 
   private static String constructMessage(AssertionError original, TreeNode node) {
     CompilationUnit unit = TreeUtil.getCompilationUnit(node);
+    if (unit == null) {
+      return original.getMessage();
+    }
     return String.format(
         "%s:%s: %s", unit.getSourceFilePath(), node.getLineNumber(), original.getMessage());
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/MethodReferenceRewriter.java
Patch:
@@ -42,7 +42,6 @@ public class MethodReferenceRewriter extends TreeVisitor {
 
   @Override
   public void endVisit(CreationReference node) {
-    IMethodBinding methodBinding = node.getMethodBinding();
     ITypeBinding exprBinding = node.getTypeBinding();
     ITypeBinding creationType = node.getType().getTypeBinding();
     IMethodBinding functionalInterface = exprBinding.getFunctionalInterfaceMethod();
@@ -54,12 +53,12 @@ public void endVisit(CreationReference node) {
       invocationArguments = arrayCreation.getDimensions();
     } else {
       ClassInstanceCreation classCreation =
-          new ClassInstanceCreation(methodBinding, Type.newType(creationType));
+          new ClassInstanceCreation(node.getMethodBinding(), Type.newType(creationType));
       invocation = classCreation;
       invocationArguments = classCreation.getArguments();
     }
     LambdaExpression lambda = new LambdaExpression(
-        "CreationReference:" + node.getLineNumber(), exprBinding, methodBinding);
+        "CreationReference:" + node.getLineNumber(), exprBinding);
     lambda.setBody(invocation);
     addRemainingLambdaParams(
         Arrays.asList(functionalInterface.getParameterTypes()), invocationArguments, lambda, null);

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -761,7 +761,7 @@ private void printBlockCallWrapper(IMethodBinding methodBinding) {
    * calling portion sans blocks can be reused by method references.
    */
   private void printLambdaCall(LambdaExpression node) {
-    ITypeBinding functionalTypeBinding = node.functionalTypeBinding();
+    ITypeBinding functionalTypeBinding = node.getTypeBinding();
     IMethodBinding methodBinding = node.getMethodBinding();
     IMethodBinding functionalInterface = functionalTypeBinding.getFunctionalInterfaceMethod();
     List<VariableDeclaration> parameters = node.getParameters();

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -410,7 +410,7 @@ public void endVisit(AnnotationTypeDeclaration node) {
 
   @Override
   public boolean visit(LambdaExpression node) {
-    pushType(node, node.getTypeBinding());
+    pushType(node, node.getLambdaTypeBinding());
     return true;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -397,8 +397,7 @@ public boolean visit(LambdaExpression node) {
       node.setBody(block);
     }
     // Resolve whether a lambda captures variables from the enclosing scope.
-    ITypeBinding binding = node.getTypeBinding();
-    node.setIsCapturing(outerResolver.hasImplicitCaptures(binding));
+    node.setIsCapturing(outerResolver.hasImplicitCaptures(node.getLambdaTypeBinding()));
     return true;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/VariableRenamer.java
Patch:
@@ -165,7 +165,7 @@ public void endVisit(AnonymousClassDeclaration node) {
 
   @Override
   public boolean visit(LambdaExpression node) {
-    pushType(node.getTypeBinding());
+    pushType(node.getLambdaTypeBinding());
     return true;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -161,7 +161,7 @@ public boolean visit(InstanceofExpression node) {
 
   @Override
   public void endVisit(LambdaExpression node) {
-    addImports(node.functionalTypeBinding());
+    addImports(node.getTypeBinding());
   }
 
   @Override

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/ReferenceGraph.java
Patch:
@@ -171,7 +171,7 @@ private void addAnonymousClassCaptureEdges() {
     for (ITypeBinding type : allTypes.values()) {
       if (type.isAnonymous()) {
         for (IVariableBinding capturedVar :
-             outerResolver.getCapturedVars(type.getTypeDeclaration())) {
+             outerResolver.getInnerFields(type.getTypeDeclaration())) {
           ITypeBinding targetType = getElementType(capturedVar.getType());
           if (!targetType.isPrimitive() && !whitelist.containsType(targetType)
               && !BindingUtil.isWeakReference(capturedVar)) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/UnsequencedExpressionRewriter.java
Patch:
@@ -51,6 +51,7 @@
 import com.google.devtools.j2objc.ast.VariableDeclarationStatement;
 import com.google.devtools.j2objc.ast.WhileStatement;
 import com.google.devtools.j2objc.types.GeneratedVariableBinding;
+import com.google.devtools.j2objc.util.BindingUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -97,7 +98,7 @@ private VariableAccess(
   }
 
   private void addVariableAccess(IVariableBinding var, Expression node, boolean isModification) {
-    if (var != null) {
+    if (var != null && !BindingUtil.isInstanceVar(var)) {
       hasModification |= isModification;
       orderedAccesses.add(new VariableAccess(var, node, isModification));
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -158,7 +158,8 @@ private MethodDeclaration createDefaultMethodShim(
     // The shim's only purpose is to call the default method implementation and returns it value
     // if required.
     String name = nameTable.getFullFunctionName(method);
-    FunctionBinding fb = new FunctionBinding(name, method.getReturnType(), type);
+    FunctionBinding fb =
+        new FunctionBinding(name, method.getMethodDeclaration().getReturnType(), type);
     fb.addParameters(type);
     fb.addParameters(method.getParameterTypes());
     FunctionInvocation invocation = new FunctionInvocation(fb, method.getReturnType());

File: translator/src/main/java/com/google/devtools/j2objc/gen/MetadataGenerator.java
Patch:
@@ -217,9 +217,10 @@ private String generateFieldMetadata(IVariableBinding var, SimpleName name) {
       return null;
     }
     int modifiers = getFieldModifiers(var);
+    boolean isStatic = BindingUtil.isStatic(var);
     String javaName = name.getIdentifier();
     String objcName = nameTable.getVariableShortName(var);
-    if (objcName.equals(javaName + '_')) {
+    if ((isStatic && objcName.equals(javaName)) || (!isStatic && objcName.equals(javaName + '_'))) {
       // Don't print Java name if it matches the default pattern, to conserve space.
       javaName = null;
     }
@@ -231,7 +232,7 @@ private String generateFieldMetadata(IVariableBinding var, SimpleName name) {
     } else {
       // Explicit 0-initializer to avoid Clang warning.
       constantValue = ".constantValue.asLong = 0";
-      if (BindingUtil.isStatic(var)) {
+      if (isStatic) {
         staticRef = '&' + nameTable.getVariableQualifiedName(var);
       }
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -443,7 +443,9 @@ public void endVisit(SuperMethodInvocation node) {
     if (BindingUtil.isDefault(node.getMethodBinding())) {
       // Default methods can be invoked with a SuperMethodInvocation. In this
       // case the qualifier is not an enclosing class, but the interface that
-      // implements the default method.
+      // implements the default method. Since the default method is an instance
+      // method it implicitly captures self.
+      markImplicitCaptures();
       return;
     }
     Name qualifier = node.getQualifier();

File: translator/src/test/java/com/google/devtools/j2objc/translate/DefaultMethodsTest.java
Patch:
@@ -81,10 +81,12 @@ public void testSuperDefaultMethodInvocation() throws IOException {
     String translation = translateSourceFile(
         "interface Foo { default int f(int y) { return y + 1; } }"
         + "class Bar implements Foo {"
+        + "  public Bar(int x) { int i = Foo.super.f(x); }"
         + "  public int f(int y) { return Foo.super.f(y) + 1; }"
         + "}", "Test", "Test.m");
 
-    assertTranslatedLines(translation, "return Foo_fWithInt_(self, y) + 1;");
+    assertTranslation(translation, "jint i = Foo_fWithInt_(self, x);");
+    assertTranslation(translation, "return Foo_fWithInt_(self, y) + 1;");
   }
 
   public void testBasicDefaultMethodUsage() throws IOException {

File: testing/junit-ext/src/java/com/google/j2objc/testing/JUnitTestRunner.java
Patch:
@@ -216,7 +216,7 @@ private native Set<Class> getAllTestClasses() /*-[
     int classCount = objc_getClassList(NULL, 0);
     Class *classes = (Class *)malloc(classCount * sizeof(Class));
     objc_getClassList(classes, classCount);
-    id<JavaUtilSet> result = [ComGoogleCommonCollectSets newHashSet];
+    id<JavaUtilSet> result = AUTORELEASE([[JavaUtilHashSet alloc] init]);
     for (int i = 0; i < classCount; i++) {
       @try {
         Class cls = classes[i];
@@ -332,7 +332,6 @@ private void loadProperties(InputStream stream) {
     } catch (IOException e) {
       onError(e);
     }
-    ClassLoader classLoader = ClassLoader.getSystemClassLoader();
     Set<String> propertyNames = properties.stringPropertyNames();
     for (String key : propertyNames) {
       String value = properties.getProperty(key);

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -124,7 +124,7 @@ public static void addImports(
       return;
     }
     for (ITypeBinding bound : BindingUtil.getTypeBounds(binding)) {
-      bound = unit.getTypeEnv().mapType(bound.getErasure());
+      bound = unit.getTypeEnv().mapType(bound);
       if (!FOUNDATION_TYPES.contains(bound.getName())) {
         imports.add(new Import(bound, unit.getNameTable()));
       }

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -801,7 +801,6 @@ private String constructObjCType(Iterable<ITypeBinding> types) {
     String classType = null;
     List<String> interfaces = new ArrayList<>();
     for (ITypeBinding type : types) {
-      type = type.getErasure();
       if (typeEnv.isIdType(type) || typeEnv.isJavaVoidType(type)) {
         continue;
       }

File: translator/src/test/java/com/google/devtools/j2objc/types/CompoundTypeTest.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class CompoundTypeTest extends GenerationTest {
 
-  // Test BindingUtil.isCompound(ITypeBinding).
+  // Test BindingUtil.isIntersectionType(ITypeBinding).
   public void testIsCompound() throws Exception {
     Options.setSourceVersion(SourceVersion.JAVA_8);
     createParser();
@@ -54,7 +54,7 @@ public void testIsCompound() throws Exception {
         // Verify a normal type isn't marked as compound.
         if (method.getName().getIdentifier().equals("reversed")) {
           ITypeBinding binding = method.getReturnType().getTypeBinding();
-          assertFalse(BindingUtil.isCompound(binding));
+          assertFalse(BindingUtil.isIntersectionType(binding));
           methodsFound++;
         }
       }
@@ -66,7 +66,7 @@ public void testIsCompound() throws Exception {
           // its return statement is.
           ReturnStatement stmt = (ReturnStatement) function.getBody().getStatements().get(0);
           ITypeBinding binding = stmt.getExpression().getTypeBinding();
-          assertTrue(BindingUtil.isCompound(binding));
+          assertTrue(BindingUtil.isIntersectionType(binding));
           methodsFound++;
         }
       }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -179,7 +179,7 @@ protected void printStaticAccessors() {
         boolean isPrimitive = type.isPrimitive();
         String accessorName = nameTable.getStaticAccessorName(varBinding);
         String varName = nameTable.getVariableQualifiedName(varBinding);
-        String objcType = nameTable.getSpecificObjCType(type);
+        String objcType = nameTable.getObjCType(type);
         String typeSuffix = isPrimitive ? NameTable.capitalize(type.getName()) : "Id";
         if (isVolatile) {
           printf("\n+ (%s)%s {\n  return JreLoadVolatile%s(&%s);\n}\n",
@@ -318,7 +318,7 @@ private void printJniFunctionAndWrapper(FunctionDeclaration function) {
       if (returnType.isPrimitive()) {
         print("return ");
       } else {
-        printf("return (%s) ", nameTable.getSpecificObjCType(returnType));
+        printf("return (%s) ", nameTable.getObjCType(returnType));
       }
     }
     print(function.getJniSignature());

File: translator/src/main/java/com/google/devtools/j2objc/translate/AbstractMethodRewriter.java
Patch:
@@ -183,8 +183,8 @@ private void addReturnTypeNarrowingDeclarations(AbstractTypeDeclaration node) {
           continue;
         }
         if (declaredReturnType != returnType
-            && !nameTable.getSpecificObjCType(declaredReturnType).equals(
-                nameTable.getSpecificObjCType(returnType))) {
+            && !nameTable.getObjCType(declaredReturnType).equals(
+                nameTable.getObjCType(returnType))) {
           newDeclarations.put(selector, method);
           declaredReturnTypes.put(selector, returnType);
         }

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnnotationRewriter.java
Patch:
@@ -122,7 +122,7 @@ private void addMemberProperties(
       IMethodBinding memberBinding = member.getMethodBinding();
       ITypeBinding memberType = memberBinding.getReturnType();
       String propName = NameTable.getAnnotationPropertyName(memberBinding);
-      String memberTypeStr = nameTable.getSpecificObjCType(memberType);
+      String memberTypeStr = nameTable.getObjCType(memberType);
 
       String fieldName = nameTable.getVariableShortName(fieldBindings.get(memberBinding));
       propertyDecls.append(UnicodeUtils.format("@property (readonly) %s%s%s;\n",

File: translator/src/test/java/com/google/devtools/j2objc/types/CompoundTypeTest.java
Patch:
@@ -93,7 +93,7 @@ public void testCompoundTypeFullName() throws IOException {
           // its return statement is.
           ReturnStatement stmt = (ReturnStatement) function.getBody().getStatements().get(0);
           ITypeBinding binding = stmt.getExpression().getTypeBinding();
-          String typeName = unit.getNameTable().getSpecificObjCType(binding);
+          String typeName = unit.getNameTable().getObjCType(binding);
           assertEquals("id<FooBarTest, JavaIoSerializable>", typeName);
           return;
         }

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -105,7 +105,7 @@ public void testTypeVariableWithTypeVariableBounds() {
     });
     assertNotNull(methodBinding[0]);
     ITypeBinding paramType = methodBinding[0].getParameterTypes()[0];
-    assertEquals("id", nameTable.getSpecificObjCType(paramType));
+    assertEquals("id", nameTable.getObjCType(paramType));
   }
 
   public void testPrimitiveArrayParameterName() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -179,7 +179,7 @@ protected void printStaticAccessors() {
         boolean isPrimitive = type.isPrimitive();
         String accessorName = nameTable.getStaticAccessorName(varBinding);
         String varName = nameTable.getVariableQualifiedName(varBinding);
-        String objcType = nameTable.getObjCType(type);
+        String objcType = nameTable.getSpecificObjCType(type);
         String typeSuffix = isPrimitive ? NameTable.capitalize(type.getName()) : "Id";
         if (isVolatile) {
           printf("\n+ (%s)%s {\n  return JreLoadVolatile%s(&%s);\n}\n",

File: translator/src/main/java/com/google/devtools/j2objc/translate/AbstractMethodRewriter.java
Patch:
@@ -183,8 +183,8 @@ private void addReturnTypeNarrowingDeclarations(AbstractTypeDeclaration node) {
           continue;
         }
         if (declaredReturnType != returnType
-            && !nameTable.getObjCType(declaredReturnType).equals(
-                nameTable.getObjCType(returnType))) {
+            && !nameTable.getSpecificObjCType(declaredReturnType).equals(
+                nameTable.getSpecificObjCType(returnType))) {
           newDeclarations.put(selector, method);
           declaredReturnTypes.put(selector, returnType);
         }

File: translator/src/test/java/com/google/devtools/j2objc/types/CompoundTypeTest.java
Patch:
@@ -93,7 +93,7 @@ public void testCompoundTypeFullName() throws IOException {
           // its return statement is.
           ReturnStatement stmt = (ReturnStatement) function.getBody().getStatements().get(0);
           ITypeBinding binding = stmt.getExpression().getTypeBinding();
-          String typeName = unit.getNameTable().getObjCType(binding);
+          String typeName = unit.getNameTable().getSpecificObjCType(binding);
           assertEquals("id<FooBarTest, JavaIoSerializable>", typeName);
           return;
         }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -263,7 +263,7 @@ protected String getMethodSignature(MethodDeclaration m) {
     StringBuilder sb = new StringBuilder();
     IMethodBinding binding = m.getMethodBinding();
     char prefix = Modifier.isStatic(m.getModifiers()) ? '+' : '-';
-    String returnType = nameTable.getObjCType(binding.getReturnType());
+    String returnType = nameTable.getSpecificObjCType(binding.getReturnType());
     String selector = nameTable.getMethodSelector(binding);
     if (m.isConstructor()) {
       returnType = "instancetype";
@@ -383,7 +383,7 @@ public void endVisit(MethodDeclaration node) {
 
   protected String getFunctionSignature(FunctionDeclaration function) {
     StringBuilder sb = new StringBuilder();
-    String returnType = nameTable.getObjCType(function.getReturnType().getTypeBinding());
+    String returnType = nameTable.getSpecificObjCType(function.getReturnType().getTypeBinding());
     returnType += returnType.endsWith("*") ? "" : " ";
     sb.append(returnType).append(function.getName()).append('(');
     for (Iterator<SingleVariableDeclaration> iter = function.getParameters().iterator();

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGeneratorTest.java
Patch:
@@ -158,7 +158,7 @@ public void testExistingStaticReaderDetected() throws IOException {
   public void testTypeVariableReturnType() throws IOException {
     String translation = translateSourceFile(
         "interface I<T extends Runnable> { T test(); }", "Test", "Test.h");
-    assertTranslation(translation, "- (id)test;");
+    assertTranslation(translation, "- (id<JavaLangRunnable>)test;");
   }
 
   public void testOverriddenGenericConstructor() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -253,7 +253,7 @@ public void endVisit(MethodDeclaration node) {
       return;
     }
     boolean isInstanceMethod = !BindingUtil.isStatic(binding) && !binding.isConstructor();
-    boolean isDefaultMethod = BindingUtil.isDefault(binding);
+    boolean isDefaultMethod = Modifier.isDefault(node.getModifiers());
     FunctionDeclaration function = null;
     List<BodyDeclaration> declarationList = TreeUtil.asDeclarationSublist(node);
     List<String> extraSelectors = nameTable.getExtraSelectors(binding);

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -33,8 +33,10 @@
 import com.google.devtools.j2objc.types.GeneratedVariableBinding;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.UnicodeUtils;
+
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
+import org.eclipse.jdt.core.dom.Modifier;
 
 import java.util.Map;
 import java.util.Set;
@@ -137,7 +139,7 @@ private void addDefaultMethodShims(AbstractTypeDeclaration node) {
       GeneratedMethodBinding binding = new GeneratedMethodBinding(method);
 
       // Don't carry over the default method flag from the original binding.
-      binding.removeModifiers(BindingUtil.ACC_DEFAULT);
+      binding.removeModifiers(Modifier.DEFAULT);
       // Mark synthetic to avoid writing metadata.
       binding.addModifiers(BindingUtil.ACC_SYNTHETIC);
 

File: translator/src/main/java/com/google/devtools/j2objc/util/BindingUtil.java
Patch:
@@ -54,9 +54,6 @@ public final class BindingUtil {
   // Not defined in JVM spec, but used by reflection support.
   public static final int ACC_ANONYMOUS = 0x8000;
 
-  // Used by JDT to mark default methods.
-  public static final int ACC_DEFAULT = 0x10000;
-
   // Class files can only use the lower 16 bits.
   public static final int ACC_FLAG_MASK = 0xFFFF;
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/DefaultMethodShimGenerator.java
Patch:
@@ -141,6 +141,8 @@ private void addDefaultMethodShims(AbstractTypeDeclaration node) {
 
       binding.setDeclaringClass(type);
       MethodDeclaration methodDecl = new MethodDeclaration(binding);
+      // Mark as synthetic to skip the header declaration.
+      methodDecl.addModifiers(BindingUtil.ACC_SYNTHETIC);
 
       // The shim's only purpose is to call the default method implementation and returns it value
       // if required.

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -802,6 +802,8 @@ private String getObjCTypeInner(ITypeBinding type, String qualifiers, boolean ex
       } else {
         objCType = ID_TYPE;
       }
+    } else if (BindingUtil.isCompound(type)) {
+      objCType = constructObjCType(Arrays.asList(type.getInterfaces()));
     } else if (type.isPrimitive()) {
       objCType = getPrimitiveObjCType(type);
     } else {

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -68,6 +68,7 @@
 import com.google.devtools.j2objc.translate.UnsequencedExpressionRewriterTest;
 import com.google.devtools.j2objc.translate.VarargsRewriterTest;
 import com.google.devtools.j2objc.translate.VariableRenamerTest;
+import com.google.devtools.j2objc.types.CompoundTypeTest;
 import com.google.devtools.j2objc.types.HeaderImportCollectorTest;
 import com.google.devtools.j2objc.types.ImplementationImportCollectorTest;
 import com.google.devtools.j2objc.util.BindingUtilTest;
@@ -156,6 +157,7 @@ public static Test suite() {
       Class.forName("java.lang.invoke.LambdaMetafactory");
 
       // Running with Java 8 JRE, add test classes that depend on it.
+      testSuite.addTestSuite(CompoundTypeTest.class);
       testSuite.addTestSuite(DefaultMethodsTest.class);
       testSuite.addTestSuite(LambdaExpressionTest.class);
       testSuite.addTestSuite(MethodReferenceTest.class);

File: translator/src/test/java/com/google/devtools/j2objc/util/BindingUtilTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.devtools.j2objc.ast.BodyDeclaration;
 import com.google.devtools.j2objc.ast.CompilationUnit;
 import com.google.devtools.j2objc.ast.MethodDeclaration;
+
 import org.eclipse.jdt.core.dom.IMethodBinding;
 
 import java.io.IOException;

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -380,7 +380,6 @@ private native void makeSynchronousRequest() throws IOException /*-[
       NSMutableURLRequest *request =
           [NSMutableURLRequest requestWithURL:[NSURL URLWithString:[self->url_ toExternalForm]]];
       request.HTTPShouldHandleCookies = false;
-      request.HTTPMethod = self->method_;
       request.cachePolicy = self->useCaches_ ?
           NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData;
       int readTimeout = [self getReadTimeout];
@@ -408,6 +407,7 @@ private native void makeSynchronousRequest() throws IOException /*-[
           request.HTTPBody = [(NSDataOutputStream *) self->nativeRequestData_ data];
         }
       }
+      request.HTTPMethod = self->method_;
 
       __block NSError *error;
       __block NSURLResponse *urlResponse;

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/NetworkOs.java
Patch:
@@ -391,8 +391,8 @@ public static native InetAddress[] getaddrinfo(String node, StructAddrinfo javaH
       }
 
       // Convert each IP address into a Java byte array.
-      struct sockaddr_storage address = *(struct sockaddr_storage *) ai->ai_addr;
-      JavaNetInetAddress *inetAddress = sockaddrToInetAddress(&address, NULL);
+      struct sockaddr_storage *address = (struct sockaddr_storage *) ai->ai_addr;
+      JavaNetInetAddress *inetAddress = sockaddrToInetAddress(address, NULL);
       if (!inetAddress) {
         freeaddrinfo(addressList);
         return nil;

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/NetworkOs.java
Patch:
@@ -528,11 +528,12 @@ public static native InetAddress ioctlInetAddress(FileDescriptor fd, int cmd,
         addr = addr->ifa_next;
       }
     }
-    freeifaddrs(interfaces);
     if (!sinAddress) {
+      freeifaddrs(interfaces);
       LibcoreIoPosix_throwErrnoExceptionWithNSString_withInt_(msg, originalError);
     }
     IOSByteArray *byteArray = [IOSByteArray arrayWithBytes:(jbyte *)sinAddress count:4];
+    freeifaddrs(interfaces);
     return JavaNetInetAddress_getByAddressWithNSString_withByteArray_withInt_(nil, byteArray, 0);
   ]-*/;
 

File: jre_emul/Classes/java/lang/System.java
Patch:
@@ -228,7 +228,7 @@ public native static Properties getProperties() /*-[
         // If [NSProcessInfo processInfo].operatingSystemVersion is not available in the SDK and
         // this is iOS SDK, use [UIDevice currentDevice].
     #if TARGET_OS_WATCH
-        versionString = @"2.2";
+        versionString = [NSProcessInfo processInfo].operatingSystemVersionString;
     #else
         versionString = [UIDevice currentDevice].systemVersion;
     #endif // #if TARGET_OS_WATCH

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -142,7 +142,7 @@ private FunctionInvocation createCastCheck(ITypeBinding type, Expression expr) {
   }
 
   private void addCast(Expression expr) {
-    ITypeBinding exprType = typeEnv.mapType(expr.getTypeBinding().getTypeDeclaration());
+    ITypeBinding exprType = typeEnv.mapType(expr.getTypeBinding());
     CastExpression castExpr = new CastExpression(exprType, null);
     expr.replaceWith(ParenthesizedExpression.parenthesize(castExpr));
     castExpr.setExpression(expr);
@@ -165,8 +165,8 @@ private boolean needsCast(Expression expr, ITypeBinding expectedType, boolean sh
     if (declaredType == null) {
       return false;
     }
-    ITypeBinding exprType = typeEnv.mapType(expr.getTypeBinding().getTypeDeclaration());
-    declaredType = typeEnv.mapType(declaredType.getTypeDeclaration());
+    ITypeBinding exprType = typeEnv.mapType(expr.getTypeBinding());
+    declaredType = typeEnv.mapType(declaredType);
     if (
         // In general we do not need to cast primitive types.
         exprType.isPrimitive()

File: jre_emul/android/libcore/luni/src/main/java/org/apache/harmony/xml/dom/NodeImpl.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.apache.harmony.xml.dom;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.ArrayList;
@@ -65,7 +67,7 @@ public boolean isDerivedFrom(
      * The containing document. This is non-null except for DocumentTypeImpl
      * nodes created by the DOMImplementation.
      */
-    DocumentImpl document;
+    @Weak DocumentImpl document;
 
     NodeImpl(DocumentImpl document) {
         this.document = document;

File: translator/src/main/java/com/google/devtools/j2objc/types/HeaderImportCollector.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.Type;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
+import com.google.devtools.j2objc.util.TranslationUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -158,8 +159,8 @@ private boolean visitTypeDeclaration(AbstractTypeDeclaration node) {
     if (filter.include(node)) {
       ITypeBinding binding = node.getTypeBinding();
       addDeclaredType(binding);
-      addSuperType(binding.getSuperclass());
-      for (ITypeBinding interfaze : binding.getInterfaces()) {
+      addSuperType(TranslationUtil.getSuperType(node));
+      for (ITypeBinding interfaze : TranslationUtil.getInterfaceTypes(node)) {
         addSuperType(interfaze);
       }
     }

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.google.devtools.j2objc.translate;
 
 import com.google.devtools.j2objc.GenerationTest;
-import com.google.devtools.j2objc.util.DeadCodeMap;
 
 import java.io.IOException;
 
@@ -35,7 +34,7 @@ public class InitializationNormalizerTest extends GenerationTest {
   @Override
   protected void setUp() throws IOException {
     super.setUp();
-    instance = new InitializationNormalizer(new DeadCodeMap.Builder().build());
+    instance = new InitializationNormalizer();
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -37,6 +37,7 @@
 import com.google.devtools.j2objc.pipeline.J2ObjCIncompatibleStripperTest;
 import com.google.devtools.j2objc.pipeline.TranslationProcessorTest;
 import com.google.devtools.j2objc.translate.AbstractMethodRewriterTest;
+import com.google.devtools.j2objc.translate.AnnotationRewriterTest;
 import com.google.devtools.j2objc.translate.AnonymousClassConverterTest;
 import com.google.devtools.j2objc.translate.ArrayRewriterTest;
 import com.google.devtools.j2objc.translate.AutoboxerTest;
@@ -87,6 +88,7 @@ public class SmallTests {
 
   private static final Class<?>[] smallTestClasses = new Class[] {
     AbstractMethodRewriterTest.class,
+    AnnotationRewriterTest.class,
     AnonymousClassConverterTest.class,
     ArrayAccessTest.class,
     ArrayCreationTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/gen/MetadataGenerator.java
Patch:
@@ -75,6 +75,9 @@ private void ensureGenerated() {
   }
 
   private void generateMetadata() {
+    if (BindingUtil.isSynthetic(type)) {
+      return;
+    }
     String fullName = nameTable.getFullName(type);
     println("\n+ (const J2ObjcClassInfo *)__metadata {");
     generateMethodsMetadata();

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -105,9 +105,7 @@ private void printImports() {
     Set<Import> forwardDecls = Sets.newHashSet();
     for (GeneratedType generatedType : getOrderedTypes()) {
       String name = generatedType.getTypeName();
-      if (name != null) {
-        seenTypes.add(name);
-      }
+      seenTypes.add(name);
       for (Import imp : generatedType.getImplementationForwardDeclarations()) {
         // Only need to forward declare private local types. All else is handled
         // by imports.

File: translator/src/main/java/com/google/devtools/j2objc/util/BindingUtil.java
Patch:
@@ -140,8 +140,8 @@ public static boolean isSynthetic(int modifiers) {
     return (modifiers & ACC_SYNTHETIC) > 0;
   }
 
-  public static boolean isSynthetic(IMethodBinding m) {
-    return isSynthetic(m.getModifiers());
+  public static boolean isSynthetic(IBinding binding) {
+    return isSynthetic(binding.getModifiers());
   }
 
   public static boolean isVoid(ITypeBinding type) {

File: translator/src/test/java/com/google/devtools/j2objc/ast/LambdaExpressionTest.java
Patch:
@@ -51,13 +51,13 @@ public void testBlockBodyCreation() throws IOException {
   public void testCaptureDetection() throws IOException {
     String nonCaptureTranslation = translateSourceFile(
         functionHeader + "class Test { Function f = x -> x;}", "Test", "Test.m");
-    String nonCaptureTranslationOuter = translateSourceFile(
+    String captureTranslationOuter = translateSourceFile(
         functionHeader + "class Test { int y; Function f = x -> y;}", "Test", "Test.m");
     String captureTranslation = translateSourceFile(
         functionHeader + "class Test { Function<Function, Function> f = y -> x -> y;}", "Test",
         "Test.m");
     assertTranslation(nonCaptureTranslation, "GetNonCapturingLambda");
-    assertTranslation(nonCaptureTranslationOuter, "GetNonCapturingLambda");
+    assertTranslation(captureTranslationOuter, "GetCapturingLambda");
     assertTranslatedSegments(captureTranslation, "GetNonCapturingLambda", "GetCapturingLambda");
   }
 

File: jre_emul/Tests/com/google/j2objc/java8/SmallTests.java
Patch:
@@ -22,6 +22,7 @@
 public class SmallTests {
   private static final Class<?>[] smallTestClasses = new Class[] {
     CreationReferenceTest.class,
+    DefaultMethodsTest.class,
     ExpressionMethodReferenceTest.class,
     LambdaTest.class,
     SuperMethodReferenceTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -350,6 +350,8 @@ protected void printCompanionClassDeclaration() {
       } else {
         newline();
       }
+    } else if (BindingUtil.hasDefaultMethodsInFamily(typeBinding)) {
+      printf(" < %s >", typeName);
     } else {
       newline();
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -248,9 +248,10 @@ private boolean isDesignatedInitializer(IMethodBinding method) {
 
   @Override
   protected void printMethodDeclaration(MethodDeclaration m) {
-    if (typeBinding.isInterface() || Modifier.isAbstract(m.getModifiers())) {
+    if (Modifier.isAbstract(m.getModifiers())) {
       return;
     }
+
     newline();
     boolean isDesignatedInitializer = isDesignatedInitializer(m.getMethodBinding());
     if (isDesignatedInitializer) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -248,8 +248,7 @@ public void endVisit(ClassInstanceCreation node) {
   public void endVisit(MethodDeclaration node) {
     IMethodBinding binding = node.getMethodBinding();
     boolean isInstanceMethod = !BindingUtil.isStatic(binding) && !binding.isConstructor();
-    boolean isInterface = binding.getDeclaringClass().isInterface();
-    boolean isDefaultMethod = BindingUtil.isDefault(binding) && isInterface;
+    boolean isDefaultMethod = BindingUtil.isDefault(binding);
     FunctionDeclaration function = null;
     List<BodyDeclaration> declarationList = TreeUtil.asDeclarationSublist(node);
     List<String> extraSelectors = nameTable.getExtraSelectors(binding);

File: translator/src/test/java/com/google/devtools/j2objc/ast/LambdaExpressionTest.java
Patch:
@@ -113,7 +113,7 @@ public void testProtocolCast() throws IOException {
     String translation = translateSourceFile(
         functionHeader + "class Test { Function f = (Function) (x) -> x;}", "Test", "Test.m");
     assertTranslatedSegments(translation,
-        "(id<Function>) cast_check(GetNonCapturingLambda(@protocol(Function), ",
+        "(id<Function>) cast_check(GetNonCapturingLambda(NULL, @protocol(Function), ",
         "Function_class_()");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -44,6 +44,7 @@
 import com.google.devtools.j2objc.translate.ComplexExpressionExtractorTest;
 import com.google.devtools.j2objc.translate.ConstantBranchPrunerTest;
 import com.google.devtools.j2objc.translate.DeadCodeEliminatorTest;
+import com.google.devtools.j2objc.translate.DefaultMethodsTest;
 import com.google.devtools.j2objc.translate.DestructorGeneratorTest;
 import com.google.devtools.j2objc.translate.EnhancedForRewriterTest;
 import com.google.devtools.j2objc.translate.EnumRewriterTest;
@@ -154,6 +155,7 @@ public static Test suite() {
       // Running with Java 8 JRE, add test classes that depend on it.
       testSuite.addTestSuite(MethodReferenceTest.class);
       testSuite.addTestSuite(LambdaExpressionTest.class);
+      testSuite.addTestSuite(DefaultMethodsTest.class);
     } catch (ClassNotFoundException e) {
       // Running on pre-Java 8 JRE.
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -143,7 +143,8 @@ private void printNativeEnum() {
       int ordinal = 0;
       for (EnumConstantDeclaration constant : constants) {
         printIndent();
-        printf("%s_%s = %d,\n", nativeName, constant.getName().getIdentifier(), ordinal++);
+        printf("%s_%s = %d,\n",
+            nativeName, nameTable.getVariableBaseName(constant.getVariableBinding()), ordinal++);
       }
       unindent();
       print("};\n");

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -65,7 +65,6 @@
 import com.google.devtools.j2objc.translate.UnsequencedExpressionRewriterTest;
 import com.google.devtools.j2objc.translate.VarargsRewriterTest;
 import com.google.devtools.j2objc.translate.VariableRenamerTest;
-import com.google.devtools.j2objc.types.BindingMapBuilderTest;
 import com.google.devtools.j2objc.types.HeaderImportCollectorTest;
 import com.google.devtools.j2objc.types.ImplementationImportCollectorTest;
 import com.google.devtools.j2objc.util.BindingUtilTest;
@@ -92,7 +91,6 @@ public class SmallTests {
     ArrayCreationTest.class,
     ArrayRewriterTest.class,
     AutoboxerTest.class,
-    BindingMapBuilderTest.class,
     BindingUtilTest.class,
     CastResolverTest.class,
     ComplexExpressionExtractorTest.class,

File: translator/src/test/java/com/google/devtools/j2objc/translate/CastResolverTest.java
Patch:
@@ -107,9 +107,9 @@ public void testDerivedTypeVariableInvocation() throws IOException {
         + "  }"
         + "}", "Test", "Test.m");
     // Verify foo.derivedMethod() has cast of appropriate type variable.
-    assertTranslation(translation, "[((Test_DerivedFoo *) foo_) derivedMethod];");
+    assertTranslation(translation, "[((Test_DerivedFoo *) nil_chk(foo_)) derivedMethod];");
     // Verify that a cast can be added to a QualifiedName node.
-    assertTranslation(translation, "return ((Test_DerivedFoo *) foo_)->myInt_;");
+    assertTranslation(translation, "return ((Test_DerivedFoo *) nil_chk(foo_))->myInt_;");
   }
 
   public void testCapturedType() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/StaticVarRewriterTest.java
Patch:
@@ -32,7 +32,7 @@ public void testRewriteChildOfQualifiedName() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "[nil_chk(((Test *) nil_chk(JreLoadStatic(Test, test)))->obj_) description];",
-        "[JreLoadStatic(Test, test)->obj_ description];");
+        "[nil_chk(((Test *) nil_chk(JreLoadStatic(Test, test)))->obj_) description];");
   }
 
   public void testAssinmentToNewObject() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -238,10 +238,9 @@ private int unmatchedLineIndex(String s, String[] lines) throws IOException {
         if (nextLine == null) {
           return i;
         }
-        index += nextLine.length() + 1;  // Also skip trailing newline.
         if (!nextLine.trim().equals(lines[i].trim())) {
           // Check if there is a subsequent match.
-          int subsequentMatch = unmatchedLineIndex(s.substring(index), lines);
+          int subsequentMatch = unmatchedLineIndex(s.substring(index + 1), lines);
           if (subsequentMatch == -1) {
             return -1;
           }

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ClassLoader.java
Patch:
@@ -737,8 +737,8 @@ public native InputStream getResourceAsStream(String name) /*-[
     if (!path) {
       return nil;
     }
-    return [new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(
-        [new_JavaIoFileInputStream_initWithNSString_(path) autorelease]) autorelease];
+    return create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(
+        create_JavaIoFileInputStream_initWithNSString_(path));
   ]-*/;
 
   @Override

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/atomic/AtomicIntegerArray.java
Patch:
@@ -57,8 +57,8 @@ public final int length() {
     /*-[
     static void CheckIdx(JavaUtilConcurrentAtomicAtomicIntegerArray *self, jint i) {
       if (i < 0 || i >= self->array_->size_) {
-        @throw [new_JavaLangIndexOutOfBoundsException_initWithNSString_(
-            JreStrcat("$I", @"index ", i)) autorelease];
+        @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(
+            JreStrcat("$I", @"index ", i));
       }
     }
 

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/atomic/AtomicLongArray.java
Patch:
@@ -56,8 +56,8 @@ public final int length() {
     /*-[
     static void CheckIdx(JavaUtilConcurrentAtomicAtomicLongArray *self, jint i) {
       if (i < 0 || i >= self->array_->size_) {
-        @throw [new_JavaLangIndexOutOfBoundsException_initWithNSString_(
-            JreStrcat("$I", @"index ", i)) autorelease];
+        @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(
+            JreStrcat("$I", @"index ", i));
       }
     }
 

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/atomic/AtomicReferenceArray.java
Patch:
@@ -74,8 +74,8 @@ public final int length() {
     /*-[
     static void CheckIdx(JavaUtilConcurrentAtomicAtomicReferenceArray *self, jint i) {
       if (i < 0 || i >= self->array_->size_) {
-        @throw [new_JavaLangIndexOutOfBoundsException_initWithNSString_(
-            JreStrcat("$I", @"index ", i)) autorelease];
+        @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(
+            JreStrcat("$I", @"index ", i));
       }
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -585,9 +585,7 @@ else if (arg.equals("--final-methods-as-functions")
    */
   private static void addPrefixOption(String arg) {
     int i = arg.indexOf('=');
-
-    // Make sure key and value are at least 1 character.
-    if (i < 1 || i >= arg.length() - 1) {
+    if (i < 1) {
       usage("invalid prefix format");
     }
     String pkg = arg.substring(0, i);

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -391,10 +391,11 @@ protected void preprocessFiles(String... fileNames) {
     new InputFilePreprocessor(parser).processInputs(batch.getInputs());
   }
 
-  protected void addSourceFile(String source, String fileName) throws IOException {
+  protected String addSourceFile(String source, String fileName) throws IOException {
     File file = new File(tempDir, fileName);
     file.getParentFile().mkdirs();
     Files.write(source, file, Options.getCharset());
+    return file.getPath();
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -267,6 +267,9 @@ public void endVisit(MethodDeclaration node) {
           && !isEnumConstructor) {
         declarationList.add(makeAllocatingConstructor(node));
         declarationList.add(makeReleasingConstructor(node));
+      } else if (isEnumConstructor && Options.useARC()) {
+        // Enums with ARC need the retaining constructor.
+        declarationList.add(makeAllocatingConstructor(node));
       }
       // Instance methods must be kept in case they are invoked using "super".
       boolean keepMethod = isInstanceMethod

File: translator/src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.devtools.j2objc.util.FileUtil;
 import com.google.devtools.j2objc.util.JdtParser;
 import com.google.devtools.j2objc.util.ProGuardUsageParser;
+import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import java.io.File;
 import java.io.IOException;
@@ -56,7 +57,7 @@ public class J2ObjC {
   }
 
   public static String getFileHeader(String sourceFileName) {
-    return String.format(Options.getFileHeader(), sourceFileName);
+    return UnicodeUtils.format(Options.getFileHeader(), sourceFileName);
   }
 
   private static void checkErrors() {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.devtools.j2objc.Options;
 import com.google.devtools.j2objc.types.Import;
 import com.google.devtools.j2objc.util.ErrorUtil;
+import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import java.io.File;
 import java.io.IOException;
@@ -146,7 +147,7 @@ protected void printForwardDeclarations(Set<Import> forwardDecls) {
   }
 
   private String createForwardDeclaration(String typeName, boolean isInterface) {
-    return String.format("@%s %s;", isInterface ? "protocol" : "class", typeName);
+    return UnicodeUtils.format("@%s %s;", isInterface ? "protocol" : "class", typeName);
   }
 
   private static List<GeneratedType> getOrderedGeneratedTypes(GenerationUnit generationUnit) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.google.devtools.j2objc.gen;
 
+import com.google.devtools.j2objc.util.UnicodeUtils;
+
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.IPackageBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -156,7 +158,7 @@ private static String jniMangle(String s) {
         default: {
           Character.UnicodeBlock block = Character.UnicodeBlock.of(c);
           if (block != Character.UnicodeBlock.BASIC_LATIN) {
-            sb.append(String.format("_%05x", (int) c));
+            sb.append(UnicodeUtils.format("_%05x", (int) c));
           } else {
             sb.append(c);
           }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -36,6 +36,7 @@
 import com.google.devtools.j2objc.util.FileUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TranslationUtil;
+import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import org.eclipse.jdt.core.dom.IBinding;
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -268,7 +269,7 @@ protected String getMethodSignature(MethodDeclaration m) {
       // Explicitly test hashCode() because of NSObject's hash return value.
       returnType = "NSUInteger";
     }
-    sb.append(String.format("%c (%s%s)", prefix, returnType, nullability(binding, false)));
+    sb.append(UnicodeUtils.format("%c (%s%s)", prefix, returnType, nullability(binding, false)));
 
     List<SingleVariableDeclaration> params = m.getParameters();
     String[] selParts = selector.split(":");
@@ -286,7 +287,7 @@ protected String getMethodSignature(MethodDeclaration m) {
         }
         IVariableBinding var = params.get(i).getVariableBinding();
         String typeName = nameTable.getSpecificObjCType(var.getType());
-        sb.append(String.format("%s:(%s%s)%s", selParts[i], typeName, nullability(var, true),
+        sb.append(UnicodeUtils.format("%s:(%s%s)%s", selParts[i], typeName, nullability(var, true),
             nameTable.getVariableShortName(var)));
       }
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -33,6 +33,7 @@
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
+import com.google.devtools.j2objc.util.UnicodeUtils;
 import com.google.j2objc.annotations.Property;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -408,7 +409,7 @@ private void printAnnotationProperties(List<AnnotationTypeMemberDeclaration> mem
     }
     for (AnnotationTypeMemberDeclaration member : members) {
       IMethodBinding memberBinding = member.getMethodBinding();
-      println(String.format("@synthesize %s = %s;",
+      println(UnicodeUtils.format("@synthesize %s = %s;",
           NameTable.getAnnotationPropertyName(memberBinding),
           NameTable.getAnnotationPropertyVariableName(memberBinding)));
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ArrayRewriter.java
Patch:
@@ -37,6 +37,7 @@
 import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.IOSTypeBinding;
 import com.google.devtools.j2objc.util.TranslationUtil;
+import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.Modifier;
@@ -133,7 +134,7 @@ private String getInitializeSelector(ITypeBinding componentType, boolean retaine
       paramName = "Objects";
       selectorFmt += "type:";
     }
-    return String.format(selectorFmt, paramName);
+    return UnicodeUtils.format(selectorFmt, paramName);
   }
 
   private MethodInvocation newSingleDimensionArrayInvocation(

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -51,6 +51,7 @@
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TranslationUtil;
+import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -323,7 +324,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     if (BindingUtil.isStatic(m)) {
       // Add class initialization invocation, since this may be the first use of this class.
-      String initName = String.format("%s_initialize", nameTable.getFullName(declaringClass));
+      String initName = UnicodeUtils.format("%s_initialize", nameTable.getFullName(declaringClass));
       ITypeBinding voidType = typeEnv.resolveJavaType("void");
       FunctionBinding initBinding = new FunctionBinding(initName, voidType, declaringClass);
       FunctionInvocation initCall = new FunctionInvocation(initBinding, voidType);

File: translator/src/main/java/com/google/devtools/j2objc/util/HeaderMap.java
Patch:
@@ -114,7 +114,7 @@ private static boolean isPlatformClass(String className) {
     String[] parts = className.split("\\.");
     String pkg = null;
     for (int i = 0; i < parts.length; i++) {
-      pkg = i == 0 ? parts[0] : String.format("%s.%s", pkg, parts[i]);
+      pkg = i == 0 ? parts[0] : UnicodeUtils.format("%s.%s", pkg, parts[i]);
       if (PLATFORM_PACKAGES.contains(pkg)) {
         return true;
       }
@@ -164,7 +164,7 @@ public void printMappings() {
       PrintWriter writer = new PrintWriter(outputFile);
 
       for (Map.Entry<String, String> entry : map.entrySet()) {
-        writer.println(String.format("%s=%s", entry.getKey(), entry.getValue()));
+        writer.println(UnicodeUtils.format("%s=%s", entry.getKey(), entry.getValue()));
       }
 
       writer.close();

File: translator/src/main/java/com/google/devtools/j2objc/util/PackagePrefixes.java
Patch:
@@ -214,8 +214,8 @@ static String wildcardToRegex(String s) {
         // Include root package in regex. For example, foo.bar.* needs to match
         // foo.bar, foo.bar.mumble, etc.
         String root = s.substring(0, s.length() - 2).replace(".",  "\\.");
-        return String.format("^(%s|%s\\..*)$", root, root);
+        return UnicodeUtils.format("^(%s|%s\\..*)$", root, root);
       }
-      return String.format("^%s$", s.replace(".", "\\.").replace("\\*", ".*"));
+      return UnicodeUtils.format("^%s$", s.replace(".", "\\.").replace("\\*", ".*"));
     }
 }

File: translator/src/test/java/com/google/devtools/j2objc/ast/TreeConvertTest.java
Patch:
@@ -15,6 +15,7 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.devtools.j2objc.GenerationTest;
+import com.google.devtools.j2objc.util.UnicodeUtils;
 
 import java.io.IOException;
 
@@ -60,7 +61,7 @@ public void testVeryDeeplyNextedExpression() throws IOException {
     }
     sb.append(";");
     String exprStr = sb.toString();
-    String translation = translateSourceFile(String.format(
+    String translation = translateSourceFile(UnicodeUtils.format(
         "class Test { boolean test(int i) { %s } }", exprStr), "Test", "Test.m");
     assertTranslation(translation, exprStr);
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -125,8 +125,7 @@ private boolean canFunctionize(MethodDeclaration node) {
 
     // Never functionize these types of methods.
     if (Modifier.isStatic(modifiers) || Modifier.isAbstract(modifiers)
-        || BindingUtil.isSynthetic(modifiers) || m.isAnnotationMember()
-        || BindingUtil.isDestructor(m)) {
+        || BindingUtil.isSynthetic(modifiers) || m.isAnnotationMember()) {
       return false;
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/types/AbstractTypeBinding.java
Patch:
@@ -267,7 +267,6 @@ public IAnnotationBinding[] getTypeAnnotations() {
     return null;
   }
 
-  @Override
   public IBinding getDeclaringMember() {
     return null;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedMethodBinding.java
Patch:
@@ -293,7 +293,6 @@ public ITypeBinding getDeclaredReceiverType() {
     return null;
   }
 
-  @Override
   public IBinding getDeclaringMember() {
     return null;
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -251,7 +251,7 @@ protected void printInstanceVariables() {
         if (BindingUtil.isWeakReference(varBinding) && !BindingUtil.isVolatile(varBinding)) {
           // We must add this even without -use-arc because the header may be
           // included by a file compiled with ARC.
-          print("__weak ");
+          print("__unsafe_unretained ");
         }
         String objcType = getDeclarationType(varBinding);
         needsAsterisk = objcType.endsWith("*");

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -666,7 +666,7 @@ public void testPropertiesOfTypeWeakOuter() throws IOException {
         + "}";
     String translation = translateSourceFile(sourceContent, "FooBar", "FooBar.m");
     assertTranslatedLines(translation,
-        "__weak FooBar_Internal *fieldBar_;",
+        "__unsafe_unretained FooBar_Internal *fieldBar_;",
         "FooBar_Internal *fieldFoo_;");
   }
 
@@ -746,9 +746,9 @@ public void testCustomWeakAnnotations() throws IOException {
         + " void foo() {}"
         + " @WeakOuter public class Inner { void bar() { foo(); } }"
         + " @Weak public Object obj; }", "Test", "Test.h");
-    assertTranslation(translation, "__weak id obj_;");
+    assertTranslation(translation, "__unsafe_unretained id obj_;");
     translation = getTranslatedFile("Test.m");
-    assertTranslation(translation, "__weak Test *this$0_;");
+    assertTranslation(translation, "__unsafe_unretained Test *this$0_;");
   }
 
   public void testReservedWordAsAnnotationPropertyName() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -262,7 +262,7 @@ public void testClassField() throws IOException {
     assertTranslation(translation, "id fieldJar_;");
     assertTranslation(translation, "int newFieldBar_;");
     assertTranslation(translation, "id fieldFoo_;");
-    assertTranslation(translation, "__weak id fieldJar_;");
+    assertTranslation(translation, "__unsafe_unretained id fieldJar_;");
     assertTranslation(translation, "int newFieldBar_;");
     assertTranslation(translation, "J2OBJC_STATIC_FIELD_PRIMITIVE(FooBar, fieldPhi, jint)");
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -251,7 +251,7 @@ protected void printInstanceVariables() {
         if (BindingUtil.isWeakReference(varBinding) && !BindingUtil.isVolatile(varBinding)) {
           // We must add this even without -use-arc because the header may be
           // included by a file compiled with ARC.
-          print("__weak ");
+          print("__unsafe_unretained ");
         }
         String objcType = getDeclarationType(varBinding);
         needsAsterisk = objcType.endsWith("*");

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -666,7 +666,7 @@ public void testPropertiesOfTypeWeakOuter() throws IOException {
         + "}";
     String translation = translateSourceFile(sourceContent, "FooBar", "FooBar.m");
     assertTranslatedLines(translation,
-        "__weak FooBar_Internal *fieldBar_;",
+        "__unsafe_unretained FooBar_Internal *fieldBar_;",
         "FooBar_Internal *fieldFoo_;");
   }
 
@@ -746,9 +746,9 @@ public void testCustomWeakAnnotations() throws IOException {
         + " void foo() {}"
         + " @WeakOuter public class Inner { void bar() { foo(); } }"
         + " @Weak public Object obj; }", "Test", "Test.h");
-    assertTranslation(translation, "__weak id obj_;");
+    assertTranslation(translation, "__unsafe_unretained id obj_;");
     translation = getTranslatedFile("Test.m");
-    assertTranslation(translation, "__weak Test *this$0_;");
+    assertTranslation(translation, "__unsafe_unretained Test *this$0_;");
   }
 
   public void testReservedWordAsAnnotationPropertyName() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -262,7 +262,7 @@ public void testClassField() throws IOException {
     assertTranslation(translation, "id fieldJar_;");
     assertTranslation(translation, "int newFieldBar_;");
     assertTranslation(translation, "id fieldFoo_;");
-    assertTranslation(translation, "__weak id fieldJar_;");
+    assertTranslation(translation, "__unsafe_unretained id fieldJar_;");
     assertTranslation(translation, "int newFieldBar_;");
     assertTranslation(translation, "J2OBJC_STATIC_FIELD_PRIMITIVE(FooBar, fieldPhi, jint)");
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/StaticVarRewriter.java
Patch:
@@ -56,7 +56,7 @@ private void rewriteStaticAccess(Expression node) {
     }
 
     boolean assignable = TranslationUtil.isAssigned(node);
-    StringBuilder code = new StringBuilder("JreLoadStatic");
+    StringBuilder code = new StringBuilder(var.isEnumConstant() ? "JreLoadEnum" : "JreLoadStatic");
     ITypeBinding exprType = var.getType();
     if (assignable) {
       code.append("Ref");

File: translator/src/main/java/com/google/devtools/j2objc/translate/SuperMethodInvocationRewriter.java
Patch:
@@ -69,8 +69,8 @@ public void endVisit(CompilationUnit unit) {
       String signature = getSuperFunctionSignature(superMethod.method);
 
       // Add declarations for the function pointers to call.
-      unit.getNativeBlocks().add(new NativeDeclaration(null,
-          "static " + String.format(signature, funcName) + ";"));
+      unit.getNativeBlocks().add(NativeDeclaration.newOuterDeclaration(
+          null, "static " + String.format(signature, funcName) + ";"));
 
       // Look up the implementations in the static initialization.
       AbstractTypeDeclaration typeNode = typeMap.get(superMethod.type.getTypeDeclaration());

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -66,7 +66,7 @@ public void testEnumConstantReferences() throws IOException {
         "public class A { static enum B { ONE, TWO; "
         + "public static B doSomething(boolean b) { return b ? ONE : TWO; }}}",
         "A", "A.m");
-    assertTranslation(translation, "return b ? A_B_ONE : A_B_TWO;");
+    assertTranslation(translation, "return b ? JreEnum(A_B, ONE) : JreEnum(A_B, TWO);");
   }
 
   public void testInnerClassFQN() throws IOException {
@@ -450,7 +450,7 @@ public void testEnumInEqualsTest() throws IOException {
         "public class Test { enum TicTacToe { X, Y } "
         + "boolean isX(TicTacToe ttt) { return ttt == TicTacToe.X; } }",
         "Test", "Test.m");
-    assertTranslation(translation, "return ttt == JreLoadStatic(Test_TicTacToe, X);");
+    assertTranslation(translation, "return ttt == JreLoadEnum(Test_TicTacToe, X);");
   }
 
   public void testArrayLocalVariable() throws IOException {
@@ -1668,7 +1668,7 @@ public void testSelfStaticVarAccess() throws IOException {
     String translation = translateSourceFile(
         "public class Test { enum Type { TYPE_BOOL; } Type test() { return Type.TYPE_BOOL; }}",
         "Test", "Test.m");
-    assertTranslation(translation, "return JreLoadStatic(Test_Type, TYPE_BOOL);");
+    assertTranslation(translation, "return JreLoadEnum(Test_Type, TYPE_BOOL);");
   }
 
   public void testMakeQuotedStringHang() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeImplementationGeneratorTest.java
Patch:
@@ -125,9 +125,9 @@ public void testEnumConstantAccessorMethods() throws IOException {
     Options.setStaticAccessorMethods(true);
     String source = "enum Test { ONE, TWO, EOF }";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslatedLines(translation, "+ (Test *)ONE {", "return Test_ONE;");
-    assertTranslatedLines(translation, "+ (Test *)TWO {", "return Test_TWO;");
-    assertTranslatedLines(translation, "+ (Test *)EOF_ {", "return Test_EOF;");
+    assertTranslatedLines(translation, "+ (Test *)ONE {", "return JreEnum(Test, ONE);");
+    assertTranslatedLines(translation, "+ (Test *)TWO {", "return JreEnum(Test, TWO);");
+    assertTranslatedLines(translation, "+ (Test *)EOF_ {", "return JreEnum(Test, EOF);");
   }
 
   // Verify that accessor methods for enum constants are not generated by default.

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -345,9 +345,10 @@ public void testEnumConstantAnonymousClassNaming() throws IOException {
         "withInt:(jint)__ordinal {");
 
     assertTranslation(impl, "Test_initWithNSString_withInt_(self, __name, __ordinal);");
-    assertTranslation(impl, "Test_UP = new_Test_$1_initWithNSString_withInt_(@\"UP\", 0);");
     assertTranslation(impl,
-        "Test_DOWN = new_Test_$2_initWithNSString_withInt_(@\"DOWN\", 1);");
+        "JreEnum(Test, UP) = new_Test_$1_initWithNSString_withInt_(@\"UP\", 0);");
+    assertTranslation(impl,
+        "JreEnum(Test, DOWN) = new_Test_$2_initWithNSString_withInt_(@\"DOWN\", 1);");
   }
 
   public void testTwoOutersInAnonymousSubClassOfInner() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/EnumRewriterTest.java
Patch:
@@ -34,7 +34,7 @@ public void testGenericEnumConstructor() throws IOException {
         "withNSString:(NSString *)__name",
         "withInt:(jint)__ordinal {");
     assertTranslation(translation,
-        "Test_A = new_Test_initWithId_withNSString_withInt_(@\"foo\", @\"A\", 0);");
+        "JreEnum(Test, A) = new_Test_initWithId_withNSString_withInt_(@\"foo\", @\"A\", 0);");
   }
 
   public void testNoDefaultToNsEnumConversion() throws Exception {

File: protobuf/tests/CompatibilityTest.java
Patch:
@@ -536,7 +536,7 @@ public void testEnumValueOf() throws Exception {
     assertEquals(TypicalData.EnumType.VALUE3, TypicalData.EnumType.valueOf(3));
     assertEquals(TypicalData.EnumType.VALUE4, TypicalData.EnumType.valueOf(4));
     assertEquals(TypicalData.EnumType.VALUE9, TypicalData.EnumType.valueOf(9));
-    // TODO(user): Add a test for bad values
+    assertNull(TypicalData.EnumType.valueOf(5));
   }
 
   public void testEnumForNumber() throws Exception {
@@ -545,7 +545,7 @@ public void testEnumForNumber() throws Exception {
     assertEquals(TypicalData.EnumType.VALUE3, TypicalData.EnumType.forNumber(3));
     assertEquals(TypicalData.EnumType.VALUE4, TypicalData.EnumType.forNumber(4));
     assertEquals(TypicalData.EnumType.VALUE9, TypicalData.EnumType.forNumber(9));
-    // TODO(user): Add a test for bad values
+    assertNull(TypicalData.EnumType.forNumber(5));
   }
 
   public void testEnumValueOfWithString() throws Exception {

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -551,12 +551,12 @@ private native void setPriority0(int priority) /*-[
 
   public native State getState() /*-[
     if ([(NSThread *) self->nsThread_ isCancelled] || [(NSThread *) self->nsThread_ isFinished]) {
-      return JavaLangThread_StateEnum_get_TERMINATED();
+      return JavaLangThread_State_get_TERMINATED();
     }
     if ([(NSThread *) self->nsThread_ isExecuting]) {
-      return JavaLangThread_StateEnum_get_RUNNABLE();
+      return JavaLangThread_State_get_RUNNABLE();
     }
-    return JavaLangThread_StateEnum_get_NEW();
+    return JavaLangThread_State_get_NEW();
   ]-*/;
 
   public ThreadGroup getThreadGroup() {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -110,9 +110,9 @@ protected void printFunctionDeclaration(FunctionDeclaration function) {
     String name = function.getName();
     String oldName = function.getOldName();
     if (!oldName.equals(name)) {
-      println("#ifdef J2OBJC_RENAME_ALIASES");
+      println("#ifdef J2OBJC_RENAME2_ALIASES");
       printf("#define %s %s\n", oldName, name);
-      println("#endif // J2OBJC_RENAME_ALIASES");
+      println("#endif // J2OBJC_RENAME2_ALIASES");
     }
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeImplementationGeneratorTest.java
Patch:
@@ -125,9 +125,9 @@ public void testEnumConstantAccessorMethods() throws IOException {
     Options.setStaticAccessorMethods(true);
     String source = "enum Test { ONE, TWO, EOF }";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslatedLines(translation, "+ (TestEnum *)ONE {", "return TestEnum_ONE;");
-    assertTranslatedLines(translation, "+ (TestEnum *)TWO {", "return TestEnum_TWO;");
-    assertTranslatedLines(translation, "+ (TestEnum *)EOF_ {", "return TestEnum_EOF;");
+    assertTranslatedLines(translation, "+ (Test *)ONE {", "return Test_ONE;");
+    assertTranslatedLines(translation, "+ (Test *)TWO {", "return Test_TWO;");
+    assertTranslatedLines(translation, "+ (Test *)EOF_ {", "return Test_EOF;");
   }
 
   // Verify that accessor methods for enum constants are not generated by default.

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -294,10 +294,10 @@ public void testBoxedEnumConstructorArgs() throws IOException {
     String translation = translateSourceFile(source, "Test", "Test.m");
 
     assertTranslation(translation,
-        "new_TestEnum_initWithId_withNSString_withInt_("
+        "new_Test_initWithId_withNSString_withInt_("
         + "JavaLangInteger_valueOfWithInt_(0), @\"INT\", 0)");
     assertTranslation(translation,
-        "new_TestEnum_initWithId_withNSString_withInt_("
+        "new_Test_initWithId_withNSString_withInt_("
         + "JavaLangBoolean_valueOfWithBoolean_(false), @\"BOOLEAN\", 1)");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/EnumRewriterTest.java
Patch:
@@ -34,7 +34,7 @@ public void testGenericEnumConstructor() throws IOException {
         "withNSString:(NSString *)__name",
         "withInt:(jint)__ordinal {");
     assertTranslation(translation,
-        "TestEnum_A = new_TestEnum_initWithId_withNSString_withInt_(@\"foo\", @\"A\", 0);");
+        "Test_A = new_Test_initWithId_withNSString_withInt_(@\"foo\", @\"A\", 0);");
   }
 
   public void testNoDefaultToNsEnumConversion() throws Exception {

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -291,8 +291,8 @@ public void testRenamePackageAnnotationEnum() throws IOException {
 
     // Make sure package-info class doesn't use prefix for its own type name.
     translation = translateSourceFile("foo.bar.package-info", "foo/bar/package-info.m");
-    assertTranslation(translation, "@interface FBFooBarpackage_info");
-    assertTranslation(translation, "@implementation FBFooBarpackage_info");
+    assertTranslation(translation, "@interface FooBarpackage_info");
+    assertTranslation(translation, "@implementation FooBarpackage_info");
     assertNotInTranslation(translation, "FBpackage_info");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -291,8 +291,8 @@ public void testRenamePackageAnnotationEnum() throws IOException {
 
     // Make sure package-info class doesn't use prefix for its own type name.
     translation = translateSourceFile("foo.bar.package-info", "foo/bar/package-info.m");
-    assertTranslation(translation, "@interface FooBarpackage_info");
-    assertTranslation(translation, "@implementation FooBarpackage_info");
+    assertTranslation(translation, "@interface FBFooBarpackage_info");
+    assertTranslation(translation, "@implementation FBFooBarpackage_info");
     assertNotInTranslation(translation, "FBpackage_info");
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/gen/GeneratedType.java
Patch:
@@ -185,7 +185,7 @@ private static String generatePackageInfo(CompilationUnit unit) {
 
     SourceBuilder builder = new SourceBuilder(Options.emitLineDirectives());
     builder.newline();
-    String typeName = unit.getNameTable().getPrefix(pkg.getPackageBinding())
+    String typeName = NameTable.camelCaseQualifiedName(pkg.getPackageBinding().getName())
         + NameTable.PACKAGE_INFO_MAIN_TYPE;
     builder.printf("@interface %s : NSObject\n", typeName);
     builder.printf("@end\n\n");

File: translator/src/main/java/com/google/devtools/j2objc/gen/GeneratedType.java
Patch:
@@ -185,7 +185,7 @@ private static String generatePackageInfo(CompilationUnit unit) {
 
     SourceBuilder builder = new SourceBuilder(Options.emitLineDirectives());
     builder.newline();
-    String typeName = NameTable.camelCaseQualifiedName(pkg.getPackageBinding().getName())
+    String typeName = unit.getNameTable().getPrefix(pkg.getPackageBinding())
         + NameTable.PACKAGE_INFO_MAIN_TYPE;
     builder.printf("@interface %s : NSObject\n", typeName);
     builder.printf("@end\n\n");

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -886,7 +886,7 @@ public boolean visit(SingleVariableDeclaration node) {
 
   @Override
   public boolean visit(StringLiteral node) {
-    sb.print(UnicodeUtils.escapeStringLiteral(node.getLiteralValue()));
+    sb.printf("\"%s\"", UnicodeUtils.escapeStringLiteral(node.getLiteralValue()));
     return false;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/OperatorRewriter.java
Patch:
@@ -354,7 +354,7 @@ private void rewriteStringConcatenation(InfixExpression node) {
 
   private List<Expression> getStringAppendOperands(Assignment node) {
     Expression rhs = node.getRightHandSide();
-    if (rhs instanceof InfixExpression) {
+    if (rhs instanceof InfixExpression && typeEnv.isStringType(rhs.getTypeBinding())) {
       InfixExpression infixExpr = (InfixExpression) rhs;
       if (infixExpr.getOperator() == InfixExpression.Operator.PLUS) {
         List<Expression> operands = infixExpr.getOperands();

File: jre_emul/stub_classes/java/lang/Class.java
Patch:
@@ -36,6 +36,7 @@
  * @see java.lang.Object
  */
 public final class Class<T> implements AnnotatedElement, GenericDeclaration, Serializable, Type {
+  private static final long serialVersionUID = 3206093459760846163L;
 
   public static Class<?> forName(String className) throws ClassNotFoundException {
     return null;

File: jre_emul/stub_classes/java/lang/Number.java
Patch:
@@ -23,7 +23,8 @@
  * @see java.lang.Object
  */
 public abstract class Number implements java.io.Serializable {
-
+  private static final long serialVersionUID = -8742448824652078965L;
+  
   public Number() {}
 
   public byte byteValue() {

File: jre_emul/Classes/java/util/logging/IOSLogHandler.java
Patch:
@@ -124,12 +124,12 @@ private native void log(String logMessage, int aslLevel) /*-[
 
     NSThread *currentThread = [NSThread currentThread];
     NSMutableDictionary *threadData = [currentThread threadDictionary];
-    ASLClientHolder *logClient = [threadData objectForKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT_];
+    ASLClientHolder *logClient = [threadData objectForKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT];
     if (!logClient) {
       aslclient aslClient = asl_open([[currentThread name] UTF8String],
           [[[NSBundle mainBundle] bundleIdentifier] UTF8String], ASL_OPT_NO_DELAY | ASL_OPT_STDERR);
       logClient = AUTORELEASE([[ASLClientHolder alloc] initWithClient:aslClient]);
-      [threadData setObject:logClient forKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT_];
+      [threadData setObject:logClient forKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT];
     }
     asl_log(logClient->_client, NULL, aslLevel, "%s", [logMessage UTF8String]);
   ]-*/;

File: jre_emul/android/libcore/luni/src/main/java/java/nio/charset/IOSCharset.java
Patch:
@@ -174,7 +174,7 @@ static Charset charsetForName(String charsetName) {
                                      withNSString:info.name
                                 withNSStringArray:aliases
                                         withFloat:info.charBytes] autorelease];
-    [JavaNioCharsetIOSCharset_encodings_ putWithId:info.name withId:cs];
+    [JavaNioCharsetIOSCharset_encodings putWithId:info.name withId:cs];
     return cs;
   }
   ]-*/
@@ -203,6 +203,6 @@ private static native Map<String, IOSCharset> getEncodings() /*-[
         addEncoding(iosCharsets[i]);
       }
     });
-    return JavaNioCharsetIOSCharset_encodings_;
+    return JavaNioCharsetIOSCharset_encodings;
   ]-*/;
 }

File: jre_emul/android/libcore/luni/src/main/java/java/util/logging/LogManager.java
Patch:
@@ -174,7 +174,7 @@ private static native void checkConfiguration() /*-[
       // DISABLE_JAVA_LOG_CONFIGURATION to non-zero in project.
       #if !defined(DISABLE_JAVA_LOG_CONFIGURATION) || DISABLE_JAVA_LOG_CONFIGURATION == 0
         @try {
-          [JavaUtilLoggingLogManager_manager_ readConfiguration];
+          [JavaUtilLoggingLogManager_manager readConfiguration];
         }
         @catch (JavaIoIOException *e) {
           [e printStackTrace];

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -1121,8 +1121,9 @@ public boolean visit(SwitchCase node) {
       boolean isEnumConstant = expr.getTypeBinding().isEnum();
       if (isEnumConstant) {
         String typeName = nameTable.getFullName(expr.getTypeBinding());
+        // TODO(kstanger): Add a NameTable method for getting the C enum name.
         String bareTypeName = typeName.endsWith("Enum")
-            ? typeName.substring(0, typeName.length() - 4) : typeName;
+            ? typeName.substring(0, typeName.length() - 4) + "_Enum" : typeName;
         buffer.append(bareTypeName).append("_");
       }
       if (isEnumConstant && expr instanceof SimpleName) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -71,6 +71,7 @@ public abstract class TypeGenerator extends AbstractSourceGenerator {
   protected final Types typeEnv;
   protected final NameTable nameTable;
   protected final String typeName;
+  protected final String oldTypeName; // TODO(kstanger): Remove after users migrate.
   protected final boolean typeNeedsReflection;
 
   private final List<BodyDeclaration> declarations;
@@ -84,6 +85,7 @@ protected TypeGenerator(SourceBuilder builder, AbstractTypeDeclaration node) {
     typeEnv = compilationUnit.getTypeEnv();
     nameTable = compilationUnit.getNameTable();
     typeName = nameTable.getFullName(typeBinding);
+    oldTypeName = nameTable.getFullName(typeBinding, true);
     typeNeedsReflection = TranslationUtil.needsReflection(typeBinding);
     declarations = filterDeclarations(node.getBodyDeclarations());
     parametersNonnullByDefault = Options.nullability()

File: translator/src/main/java/com/google/devtools/j2objc/translate/VariableRenamer.java
Patch:
@@ -64,7 +64,7 @@ private void collectAndRenameFields(ITypeBinding type, Set<IVariableBinding> fie
       }
       for (IVariableBinding field : type.getDeclaredFields()) {
         String fieldName = field.getName();
-        if (BindingUtil.isPrimitiveConstant(field) || field.isEnumConstant()) {
+        if (BindingUtil.isGlobalVar(field)) {
           if (staticMethodNames.contains(fieldName)) {
             while (staticMethodNames.contains(fieldName)) {
               fieldName += "_";

File: translator/src/test/java/com/google/devtools/j2objc/ast/LambdaExpressionTest.java
Patch:
@@ -89,8 +89,8 @@ public void testOuterFunctions() throws IOException {
   public void testStaticFunctions() throws IOException {
     String translation = translateSourceFile(
         functionHeader + "class Test { static Function staticF = (x) -> x;}", "Test", "Test.m");
-    assertTranslatedSegments(translation, "id<Function> Test_staticF_;",
-        "if (self == [Test class]) {", "JreStrongAssign(&Test_staticF_, GetNonCapturingLambda");
+    assertTranslatedSegments(translation, "id<Function> Test_staticF;",
+        "if (self == [Test class]) {", "JreStrongAssign(&Test_staticF, GetNonCapturingLambda");
   }
 
   public void testNestedLambdas() throws IOException {
@@ -131,7 +131,7 @@ public void testLambdaUniquify() throws IOException {
         + "class Test { class Foo{ class Bar { Function f = x -> x; }}\n"
         + "Function f = x -> x;}",
         "Test", "Test.m");
-    assertTranslatedSegments(translation, "@\"Test_lambda$", "@\"Test_Foo_Bar_lambda");
+    assertTranslatedSegments(translation, "@\"Test_lambda$", "@\"Test$Foo$Bar_lambda");
   }
 
   public void testLargeArgumentCount() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeDeclarationGeneratorTest.java
Patch:
@@ -30,7 +30,7 @@ public void testAnonymousClassDeclaration() throws IOException {
     String translation = translateSourceFile(
       "public class Example { Runnable run = new Runnable() { public void run() {} }; }",
       "Example", "Example.m");
-    assertTranslation(translation, "@interface Example_$1 : NSObject < JavaLangRunnable >");
+    assertTranslation(translation, "@interface Example$$1 : NSObject < JavaLangRunnable >");
     assertTranslation(translation, "- (void)run;");
     // Outer reference is not required.
     assertNotInTranslation(translation, "Example *this");

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -427,7 +427,7 @@ public void testWildcardBoxType() throws IOException {
         + "void test(Entry<? extends Long> entry) { long l = entry.getValue(); } }",
         "Test", "Test.m");
     assertTranslation(translation,
-        "jlong l = [((JavaLangLong *) nil_chk([((id<Test_Entry>) nil_chk(entry_)) "
+        "jlong l = [((JavaLangLong *) nil_chk([((id<Test$Entry>) nil_chk(entry_)) "
         + "getValue])) longLongValue];");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/ComplexExpressionExtractorTest.java
Patch:
@@ -63,7 +63,7 @@ public void testComplexExpressionWithinStaticInit() throws IOException {
           + "[new_JavaLangStringBuilder_init() autorelease]) appendWithChar:'a']);",
         "NSString *complex$2 = [((JavaLangStringBuilder *) nil_chk([complex$1 "
           + "appendWithChar:'b'])) description];",
-        "JreStrongAssign(&Test_s_, complex$2);");
+        "JreStrongAssign(&Test_s, complex$2);");
   }
 
   public void testLongExpression() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/ConstantBranchPrunerTest.java
Patch:
@@ -197,7 +197,7 @@ public void testExpressionPruning() throws IOException {
         + "  if (DEBUG && TEST && nonConstant) return false; "
         + "  return true; }}", "A", "A.m");
     assertTranslatedLines(translation,
-        "- (jboolean)test {", "if (A_nonConstant_) return false;", "return true;", "}");
+        "- (jboolean)test {", "if (A_nonConstant) return false;", "return true;", "}");
   }
 
   // Verify that volatile loads aren't pruned because they provide a memory

File: translator/src/test/java/com/google/devtools/j2objc/translate/DestructorGeneratorTest.java
Patch:
@@ -98,7 +98,7 @@ public void testFieldReleaseFinalizeReferenceCounting() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (void)dealloc {",
-        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) "
           + "printlnWithId:self];",
         "RELEASE_(o_);",
         "RELEASE_(r_);",
@@ -116,7 +116,7 @@ public void testFieldReleaseFinalizeARC() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (void)dealloc {",
-        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) "
           + "printlnWithId:self];",
         "}");
   }

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -218,9 +218,9 @@ public void testCloneRenamingWithSuperClone() throws IOException {
     assertTranslation(translation,
         "return (Example *) cast_chk([self clone], [Example class]);");
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone {");
-    assertTranslation(translation, "Example_Inner *inner = "
-        + "(Example_Inner *) cast_chk([super clone], [Example_Inner class]);");
-    assertTranslation(translation, "((Example_Inner *) nil_chk(inner))->i_ = i_;");
+    assertTranslation(translation, "Example$Inner *inner = "
+        + "(Example$Inner *) cast_chk([super clone], [Example$Inner class]);");
+    assertTranslation(translation, "((Example$Inner *) nil_chk(inner))->i_ = i_;");
   }
 
   // Ensure using the builder pattern does not invoke O(2^N) running time.

File: translator/src/test/java/com/google/devtools/j2objc/translate/OuterReferenceFixerTest.java
Patch:
@@ -29,20 +29,20 @@ public void testSuperConstructorExpression() throws IOException {
     addSourceFile("class A { class Inner { } }", "A.java");
     String translation = translateSourceFile(
         "class B extends A.Inner { B(A a) { a.super(); } }", "B", "B.m");
-    assertTranslation(translation, "A_Inner_initWithA_(self, a);");
+    assertTranslation(translation, "A$Inner_initWithA_(self, a);");
   }
 
   public void testLocalClassCaptureVariablesInsideGenericClass() throws IOException {
     String translation = translateSourceFile(
         "class Test<T> { void test() { final Object o = null; class Inner { "
         + "public void foo() { o.toString(); } } new Inner(); } }", "Test", "Test.m");
-    assertTranslation(translation, "new_Test_1Inner_initWithId_(o)");
+    assertTranslation(translation, "new_Test$1Inner_initWithId_(o)");
   }
 
   public void testRecursiveConstructionOfLocalClass() throws IOException {
     String translation = translateSourceFile(
         "public class Test { void test(final Object bar) { "
         + "class Foo { void foo() { bar.toString(); new Foo(); } } } }", "Test", "Test.m");
-    assertTranslation(translation, "new_Test_1Foo_initWithTest_withId_(this$0_, val$bar_)");
+    assertTranslation(translation, "new_Test$1Foo_initWithTest_withId_(this$0_, val$bar_)");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/util/PackagePrefixesTest.java
Patch:
@@ -82,7 +82,7 @@ public void testGetFullNameWithInnerClassAndPrefix() {
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getNameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(1);
-    assertEquals("FBSomeClass_Inner", nameTable.getFullName(decl.getTypeBinding()));
+    assertEquals("FBSomeClass$Inner", nameTable.getFullName(decl.getTypeBinding()));
   }
 
   public void testPackageWildcards() throws IOException {

File: jre_emul/Classes/java/util/logging/IOSLogHandler.java
Patch:
@@ -124,12 +124,12 @@ private native void log(String logMessage, int aslLevel) /*-[
 
     NSThread *currentThread = [NSThread currentThread];
     NSMutableDictionary *threadData = [currentThread threadDictionary];
-    ASLClientHolder *logClient = [threadData objectForKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT];
+    ASLClientHolder *logClient = [threadData objectForKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT_];
     if (!logClient) {
       aslclient aslClient = asl_open([[currentThread name] UTF8String],
           [[[NSBundle mainBundle] bundleIdentifier] UTF8String], ASL_OPT_NO_DELAY | ASL_OPT_STDERR);
       logClient = AUTORELEASE([[ASLClientHolder alloc] initWithClient:aslClient]);
-      [threadData setObject:logClient forKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT];
+      [threadData setObject:logClient forKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT_];
     }
     asl_log(logClient->_client, NULL, aslLevel, "%s", [logMessage UTF8String]);
   ]-*/;

File: jre_emul/android/libcore/luni/src/main/java/java/nio/charset/IOSCharset.java
Patch:
@@ -174,7 +174,7 @@ static Charset charsetForName(String charsetName) {
                                      withNSString:info.name
                                 withNSStringArray:aliases
                                         withFloat:info.charBytes] autorelease];
-    [JavaNioCharsetIOSCharset_encodings putWithId:info.name withId:cs];
+    [JavaNioCharsetIOSCharset_encodings_ putWithId:info.name withId:cs];
     return cs;
   }
   ]-*/
@@ -203,6 +203,6 @@ private static native Map<String, IOSCharset> getEncodings() /*-[
         addEncoding(iosCharsets[i]);
       }
     });
-    return JavaNioCharsetIOSCharset_encodings;
+    return JavaNioCharsetIOSCharset_encodings_;
   ]-*/;
 }

File: jre_emul/android/libcore/luni/src/main/java/java/util/logging/LogManager.java
Patch:
@@ -174,7 +174,7 @@ private static native void checkConfiguration() /*-[
       // DISABLE_JAVA_LOG_CONFIGURATION to non-zero in project.
       #if !defined(DISABLE_JAVA_LOG_CONFIGURATION) || DISABLE_JAVA_LOG_CONFIGURATION == 0
         @try {
-          [JavaUtilLoggingLogManager_manager readConfiguration];
+          [JavaUtilLoggingLogManager_manager_ readConfiguration];
         }
         @catch (JavaIoIOException *e) {
           [e printStackTrace];

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -1121,9 +1121,8 @@ public boolean visit(SwitchCase node) {
       boolean isEnumConstant = expr.getTypeBinding().isEnum();
       if (isEnumConstant) {
         String typeName = nameTable.getFullName(expr.getTypeBinding());
-        // TODO(kstanger): Add a NameTable method for getting the C enum name.
         String bareTypeName = typeName.endsWith("Enum")
-            ? typeName.substring(0, typeName.length() - 4) + "_Enum" : typeName;
+            ? typeName.substring(0, typeName.length() - 4) : typeName;
         buffer.append(bareTypeName).append("_");
       }
       if (isEnumConstant && expr instanceof SimpleName) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -71,7 +71,6 @@ public abstract class TypeGenerator extends AbstractSourceGenerator {
   protected final Types typeEnv;
   protected final NameTable nameTable;
   protected final String typeName;
-  protected final String oldTypeName; // TODO(kstanger): Remove after users migrate.
   protected final boolean typeNeedsReflection;
 
   private final List<BodyDeclaration> declarations;
@@ -85,7 +84,6 @@ protected TypeGenerator(SourceBuilder builder, AbstractTypeDeclaration node) {
     typeEnv = compilationUnit.getTypeEnv();
     nameTable = compilationUnit.getNameTable();
     typeName = nameTable.getFullName(typeBinding);
-    oldTypeName = nameTable.getFullName(typeBinding, true);
     typeNeedsReflection = TranslationUtil.needsReflection(typeBinding);
     declarations = filterDeclarations(node.getBodyDeclarations());
     parametersNonnullByDefault = Options.nullability()

File: translator/src/main/java/com/google/devtools/j2objc/translate/VariableRenamer.java
Patch:
@@ -64,7 +64,7 @@ private void collectAndRenameFields(ITypeBinding type, Set<IVariableBinding> fie
       }
       for (IVariableBinding field : type.getDeclaredFields()) {
         String fieldName = field.getName();
-        if (BindingUtil.isGlobalVar(field)) {
+        if (BindingUtil.isPrimitiveConstant(field) || field.isEnumConstant()) {
           if (staticMethodNames.contains(fieldName)) {
             while (staticMethodNames.contains(fieldName)) {
               fieldName += "_";

File: translator/src/test/java/com/google/devtools/j2objc/ast/LambdaExpressionTest.java
Patch:
@@ -89,8 +89,8 @@ public void testOuterFunctions() throws IOException {
   public void testStaticFunctions() throws IOException {
     String translation = translateSourceFile(
         functionHeader + "class Test { static Function staticF = (x) -> x;}", "Test", "Test.m");
-    assertTranslatedSegments(translation, "id<Function> Test_staticF;",
-        "if (self == [Test class]) {", "JreStrongAssign(&Test_staticF, GetNonCapturingLambda");
+    assertTranslatedSegments(translation, "id<Function> Test_staticF_;",
+        "if (self == [Test class]) {", "JreStrongAssign(&Test_staticF_, GetNonCapturingLambda");
   }
 
   public void testNestedLambdas() throws IOException {
@@ -131,7 +131,7 @@ public void testLambdaUniquify() throws IOException {
         + "class Test { class Foo{ class Bar { Function f = x -> x; }}\n"
         + "Function f = x -> x;}",
         "Test", "Test.m");
-    assertTranslatedSegments(translation, "@\"Test_lambda$", "@\"Test$Foo$Bar_lambda");
+    assertTranslatedSegments(translation, "@\"Test_lambda$", "@\"Test_Foo_Bar_lambda");
   }
 
   public void testLargeArgumentCount() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeDeclarationGeneratorTest.java
Patch:
@@ -30,7 +30,7 @@ public void testAnonymousClassDeclaration() throws IOException {
     String translation = translateSourceFile(
       "public class Example { Runnable run = new Runnable() { public void run() {} }; }",
       "Example", "Example.m");
-    assertTranslation(translation, "@interface Example$$1 : NSObject < JavaLangRunnable >");
+    assertTranslation(translation, "@interface Example_$1 : NSObject < JavaLangRunnable >");
     assertTranslation(translation, "- (void)run;");
     // Outer reference is not required.
     assertNotInTranslation(translation, "Example *this");

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -427,7 +427,7 @@ public void testWildcardBoxType() throws IOException {
         + "void test(Entry<? extends Long> entry) { long l = entry.getValue(); } }",
         "Test", "Test.m");
     assertTranslation(translation,
-        "jlong l = [((JavaLangLong *) nil_chk([((id<Test$Entry>) nil_chk(entry_)) "
+        "jlong l = [((JavaLangLong *) nil_chk([((id<Test_Entry>) nil_chk(entry_)) "
         + "getValue])) longLongValue];");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/ComplexExpressionExtractorTest.java
Patch:
@@ -63,7 +63,7 @@ public void testComplexExpressionWithinStaticInit() throws IOException {
           + "[new_JavaLangStringBuilder_init() autorelease]) appendWithChar:'a']);",
         "NSString *complex$2 = [((JavaLangStringBuilder *) nil_chk([complex$1 "
           + "appendWithChar:'b'])) description];",
-        "JreStrongAssign(&Test_s, complex$2);");
+        "JreStrongAssign(&Test_s_, complex$2);");
   }
 
   public void testLongExpression() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/ConstantBranchPrunerTest.java
Patch:
@@ -197,7 +197,7 @@ public void testExpressionPruning() throws IOException {
         + "  if (DEBUG && TEST && nonConstant) return false; "
         + "  return true; }}", "A", "A.m");
     assertTranslatedLines(translation,
-        "- (jboolean)test {", "if (A_nonConstant) return false;", "return true;", "}");
+        "- (jboolean)test {", "if (A_nonConstant_) return false;", "return true;", "}");
   }
 
   // Verify that volatile loads aren't pruned because they provide a memory

File: translator/src/test/java/com/google/devtools/j2objc/translate/DestructorGeneratorTest.java
Patch:
@@ -98,7 +98,7 @@ public void testFieldReleaseFinalizeReferenceCounting() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (void)dealloc {",
-        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) "
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
           + "printlnWithId:self];",
         "RELEASE_(o_);",
         "RELEASE_(r_);",
@@ -116,7 +116,7 @@ public void testFieldReleaseFinalizeARC() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (void)dealloc {",
-        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) "
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
           + "printlnWithId:self];",
         "}");
   }

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -218,9 +218,9 @@ public void testCloneRenamingWithSuperClone() throws IOException {
     assertTranslation(translation,
         "return (Example *) cast_chk([self clone], [Example class]);");
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone {");
-    assertTranslation(translation, "Example$Inner *inner = "
-        + "(Example$Inner *) cast_chk([super clone], [Example$Inner class]);");
-    assertTranslation(translation, "((Example$Inner *) nil_chk(inner))->i_ = i_;");
+    assertTranslation(translation, "Example_Inner *inner = "
+        + "(Example_Inner *) cast_chk([super clone], [Example_Inner class]);");
+    assertTranslation(translation, "((Example_Inner *) nil_chk(inner))->i_ = i_;");
   }
 
   // Ensure using the builder pattern does not invoke O(2^N) running time.

File: translator/src/test/java/com/google/devtools/j2objc/translate/OuterReferenceFixerTest.java
Patch:
@@ -29,20 +29,20 @@ public void testSuperConstructorExpression() throws IOException {
     addSourceFile("class A { class Inner { } }", "A.java");
     String translation = translateSourceFile(
         "class B extends A.Inner { B(A a) { a.super(); } }", "B", "B.m");
-    assertTranslation(translation, "A$Inner_initWithA_(self, a);");
+    assertTranslation(translation, "A_Inner_initWithA_(self, a);");
   }
 
   public void testLocalClassCaptureVariablesInsideGenericClass() throws IOException {
     String translation = translateSourceFile(
         "class Test<T> { void test() { final Object o = null; class Inner { "
         + "public void foo() { o.toString(); } } new Inner(); } }", "Test", "Test.m");
-    assertTranslation(translation, "new_Test$1Inner_initWithId_(o)");
+    assertTranslation(translation, "new_Test_1Inner_initWithId_(o)");
   }
 
   public void testRecursiveConstructionOfLocalClass() throws IOException {
     String translation = translateSourceFile(
         "public class Test { void test(final Object bar) { "
         + "class Foo { void foo() { bar.toString(); new Foo(); } } } }", "Test", "Test.m");
-    assertTranslation(translation, "new_Test$1Foo_initWithTest_withId_(this$0_, val$bar_)");
+    assertTranslation(translation, "new_Test_1Foo_initWithTest_withId_(this$0_, val$bar_)");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/util/PackagePrefixesTest.java
Patch:
@@ -82,7 +82,7 @@ public void testGetFullNameWithInnerClassAndPrefix() {
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getNameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(1);
-    assertEquals("FBSomeClass$Inner", nameTable.getFullName(decl.getTypeBinding()));
+    assertEquals("FBSomeClass_Inner", nameTable.getFullName(decl.getTypeBinding()));
   }
 
   public void testPackageWildcards() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -306,6 +306,9 @@ private String nullability(IBinding binding, boolean isParameter) {
       if (BindingUtil.hasAnnotation(binding, Nullable.class)) {
         return " __nullable";
       }
+      if (BindingUtil.hasAnnotation(binding, Nonnull.class)) {
+        return " __nonnull";
+      }
       if (isParameter && !((IVariableBinding) binding).getType().isPrimitive()
           && (parametersNonnullByDefault || BindingUtil.hasAnnotation(binding, Nonnull.class))) {
         return " __nonnull";

File: jre_emul/Classes/java/util/logging/IOSLogHandler.java
Patch:
@@ -124,12 +124,12 @@ private native void log(String logMessage, int aslLevel) /*-[
 
     NSThread *currentThread = [NSThread currentThread];
     NSMutableDictionary *threadData = [currentThread threadDictionary];
-    ASLClientHolder *logClient = [threadData objectForKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT_];
+    ASLClientHolder *logClient = [threadData objectForKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT];
     if (!logClient) {
       aslclient aslClient = asl_open([[currentThread name] UTF8String],
           [[[NSBundle mainBundle] bundleIdentifier] UTF8String], ASL_OPT_NO_DELAY | ASL_OPT_STDERR);
       logClient = AUTORELEASE([[ASLClientHolder alloc] initWithClient:aslClient]);
-      [threadData setObject:logClient forKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT_];
+      [threadData setObject:logClient forKey:JavaUtilLoggingIOSLogHandler_ASLCLIENT];
     }
     asl_log(logClient->_client, NULL, aslLevel, "%s", [logMessage UTF8String]);
   ]-*/;

File: jre_emul/android/libcore/luni/src/main/java/java/nio/charset/IOSCharset.java
Patch:
@@ -174,7 +174,7 @@ static Charset charsetForName(String charsetName) {
                                      withNSString:info.name
                                 withNSStringArray:aliases
                                         withFloat:info.charBytes] autorelease];
-    [JavaNioCharsetIOSCharset_encodings_ putWithId:info.name withId:cs];
+    [JavaNioCharsetIOSCharset_encodings putWithId:info.name withId:cs];
     return cs;
   }
   ]-*/
@@ -203,6 +203,6 @@ private static native Map<String, IOSCharset> getEncodings() /*-[
         addEncoding(iosCharsets[i]);
       }
     });
-    return JavaNioCharsetIOSCharset_encodings_;
+    return JavaNioCharsetIOSCharset_encodings;
   ]-*/;
 }

File: jre_emul/android/libcore/luni/src/main/java/java/util/logging/LogManager.java
Patch:
@@ -174,7 +174,7 @@ private static native void checkConfiguration() /*-[
       // DISABLE_JAVA_LOG_CONFIGURATION to non-zero in project.
       #if !defined(DISABLE_JAVA_LOG_CONFIGURATION) || DISABLE_JAVA_LOG_CONFIGURATION == 0
         @try {
-          [JavaUtilLoggingLogManager_manager_ readConfiguration];
+          [JavaUtilLoggingLogManager_manager readConfiguration];
         }
         @catch (JavaIoIOException *e) {
           [e printStackTrace];

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -1121,8 +1121,9 @@ public boolean visit(SwitchCase node) {
       boolean isEnumConstant = expr.getTypeBinding().isEnum();
       if (isEnumConstant) {
         String typeName = nameTable.getFullName(expr.getTypeBinding());
+        // TODO(kstanger): Add a NameTable method for getting the C enum name.
         String bareTypeName = typeName.endsWith("Enum")
-            ? typeName.substring(0, typeName.length() - 4) : typeName;
+            ? typeName.substring(0, typeName.length() - 4) + "_Enum" : typeName;
         buffer.append(bareTypeName).append("_");
       }
       if (isEnumConstant && expr instanceof SimpleName) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -71,6 +71,7 @@ public abstract class TypeGenerator extends AbstractSourceGenerator {
   protected final Types typeEnv;
   protected final NameTable nameTable;
   protected final String typeName;
+  protected final String oldTypeName; // TODO(kstanger): Remove after users migrate.
   protected final boolean typeNeedsReflection;
 
   private final List<BodyDeclaration> declarations;
@@ -84,6 +85,7 @@ protected TypeGenerator(SourceBuilder builder, AbstractTypeDeclaration node) {
     typeEnv = compilationUnit.getTypeEnv();
     nameTable = compilationUnit.getNameTable();
     typeName = nameTable.getFullName(typeBinding);
+    oldTypeName = nameTable.getFullName(typeBinding, true);
     typeNeedsReflection = TranslationUtil.needsReflection(typeBinding);
     declarations = filterDeclarations(node.getBodyDeclarations());
     parametersNonnullByDefault = Options.nullability()

File: translator/src/main/java/com/google/devtools/j2objc/translate/VariableRenamer.java
Patch:
@@ -64,7 +64,7 @@ private void collectAndRenameFields(ITypeBinding type, Set<IVariableBinding> fie
       }
       for (IVariableBinding field : type.getDeclaredFields()) {
         String fieldName = field.getName();
-        if (BindingUtil.isPrimitiveConstant(field) || field.isEnumConstant()) {
+        if (BindingUtil.isGlobalVar(field)) {
           if (staticMethodNames.contains(fieldName)) {
             while (staticMethodNames.contains(fieldName)) {
               fieldName += "_";

File: translator/src/test/java/com/google/devtools/j2objc/ast/LambdaExpressionTest.java
Patch:
@@ -89,8 +89,8 @@ public void testOuterFunctions() throws IOException {
   public void testStaticFunctions() throws IOException {
     String translation = translateSourceFile(
         functionHeader + "class Test { static Function staticF = (x) -> x;}", "Test", "Test.m");
-    assertTranslatedSegments(translation, "id<Function> Test_staticF_;",
-        "if (self == [Test class]) {", "JreStrongAssign(&Test_staticF_, GetNonCapturingLambda");
+    assertTranslatedSegments(translation, "id<Function> Test_staticF;",
+        "if (self == [Test class]) {", "JreStrongAssign(&Test_staticF, GetNonCapturingLambda");
   }
 
   public void testNestedLambdas() throws IOException {
@@ -131,7 +131,7 @@ public void testLambdaUniquify() throws IOException {
         + "class Test { class Foo{ class Bar { Function f = x -> x; }}\n"
         + "Function f = x -> x;}",
         "Test", "Test.m");
-    assertTranslatedSegments(translation, "@\"Test_lambda$", "@\"Test_Foo_Bar_lambda");
+    assertTranslatedSegments(translation, "@\"Test_lambda$", "@\"Test$Foo$Bar_lambda");
   }
 
   public void testLargeArgumentCount() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeDeclarationGeneratorTest.java
Patch:
@@ -30,7 +30,7 @@ public void testAnonymousClassDeclaration() throws IOException {
     String translation = translateSourceFile(
       "public class Example { Runnable run = new Runnable() { public void run() {} }; }",
       "Example", "Example.m");
-    assertTranslation(translation, "@interface Example_$1 : NSObject < JavaLangRunnable >");
+    assertTranslation(translation, "@interface Example$$1 : NSObject < JavaLangRunnable >");
     assertTranslation(translation, "- (void)run;");
     // Outer reference is not required.
     assertNotInTranslation(translation, "Example *this");

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -427,7 +427,7 @@ public void testWildcardBoxType() throws IOException {
         + "void test(Entry<? extends Long> entry) { long l = entry.getValue(); } }",
         "Test", "Test.m");
     assertTranslation(translation,
-        "jlong l = [((JavaLangLong *) nil_chk([((id<Test_Entry>) nil_chk(entry_)) "
+        "jlong l = [((JavaLangLong *) nil_chk([((id<Test$Entry>) nil_chk(entry_)) "
         + "getValue])) longLongValue];");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/ComplexExpressionExtractorTest.java
Patch:
@@ -63,7 +63,7 @@ public void testComplexExpressionWithinStaticInit() throws IOException {
           + "[new_JavaLangStringBuilder_init() autorelease]) appendWithChar:'a']);",
         "NSString *complex$2 = [((JavaLangStringBuilder *) nil_chk([complex$1 "
           + "appendWithChar:'b'])) description];",
-        "JreStrongAssign(&Test_s_, complex$2);");
+        "JreStrongAssign(&Test_s, complex$2);");
   }
 
   public void testLongExpression() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/ConstantBranchPrunerTest.java
Patch:
@@ -197,7 +197,7 @@ public void testExpressionPruning() throws IOException {
         + "  if (DEBUG && TEST && nonConstant) return false; "
         + "  return true; }}", "A", "A.m");
     assertTranslatedLines(translation,
-        "- (jboolean)test {", "if (A_nonConstant_) return false;", "return true;", "}");
+        "- (jboolean)test {", "if (A_nonConstant) return false;", "return true;", "}");
   }
 
   // Verify that volatile loads aren't pruned because they provide a memory

File: translator/src/test/java/com/google/devtools/j2objc/translate/DestructorGeneratorTest.java
Patch:
@@ -98,7 +98,7 @@ public void testFieldReleaseFinalizeReferenceCounting() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (void)dealloc {",
-        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) "
           + "printlnWithId:self];",
         "RELEASE_(o_);",
         "RELEASE_(r_);",
@@ -116,7 +116,7 @@ public void testFieldReleaseFinalizeARC() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (void)dealloc {",
-        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) "
           + "printlnWithId:self];",
         "}");
   }

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -218,9 +218,9 @@ public void testCloneRenamingWithSuperClone() throws IOException {
     assertTranslation(translation,
         "return (Example *) cast_chk([self clone], [Example class]);");
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone {");
-    assertTranslation(translation, "Example_Inner *inner = "
-        + "(Example_Inner *) cast_chk([super clone], [Example_Inner class]);");
-    assertTranslation(translation, "((Example_Inner *) nil_chk(inner))->i_ = i_;");
+    assertTranslation(translation, "Example$Inner *inner = "
+        + "(Example$Inner *) cast_chk([super clone], [Example$Inner class]);");
+    assertTranslation(translation, "((Example$Inner *) nil_chk(inner))->i_ = i_;");
   }
 
   // Ensure using the builder pattern does not invoke O(2^N) running time.

File: translator/src/test/java/com/google/devtools/j2objc/translate/OuterReferenceFixerTest.java
Patch:
@@ -29,20 +29,20 @@ public void testSuperConstructorExpression() throws IOException {
     addSourceFile("class A { class Inner { } }", "A.java");
     String translation = translateSourceFile(
         "class B extends A.Inner { B(A a) { a.super(); } }", "B", "B.m");
-    assertTranslation(translation, "A_Inner_initWithA_(self, a);");
+    assertTranslation(translation, "A$Inner_initWithA_(self, a);");
   }
 
   public void testLocalClassCaptureVariablesInsideGenericClass() throws IOException {
     String translation = translateSourceFile(
         "class Test<T> { void test() { final Object o = null; class Inner { "
         + "public void foo() { o.toString(); } } new Inner(); } }", "Test", "Test.m");
-    assertTranslation(translation, "new_Test_1Inner_initWithId_(o)");
+    assertTranslation(translation, "new_Test$1Inner_initWithId_(o)");
   }
 
   public void testRecursiveConstructionOfLocalClass() throws IOException {
     String translation = translateSourceFile(
         "public class Test { void test(final Object bar) { "
         + "class Foo { void foo() { bar.toString(); new Foo(); } } } }", "Test", "Test.m");
-    assertTranslation(translation, "new_Test_1Foo_initWithTest_withId_(this$0_, val$bar_)");
+    assertTranslation(translation, "new_Test$1Foo_initWithTest_withId_(this$0_, val$bar_)");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/util/PackagePrefixesTest.java
Patch:
@@ -82,7 +82,7 @@ public void testGetFullNameWithInnerClassAndPrefix() {
     CompilationUnit unit = translateType("SomeClass", source);
     NameTable nameTable = unit.getNameTable();
     AbstractTypeDeclaration decl = unit.getTypes().get(1);
-    assertEquals("FBSomeClass_Inner", nameTable.getFullName(decl.getTypeBinding()));
+    assertEquals("FBSomeClass$Inner", nameTable.getFullName(decl.getTypeBinding()));
   }
 
   public void testPackageWildcards() throws IOException {

File: jre_emul/Classes/java/lang/System.java
Patch:
@@ -21,6 +21,7 @@
 #import <UIKit/UIKit.h>
 #endif
 
+#import "IOSArray_PackagePrivate.h"
 #import "IOSObjectArray.h"
 #import "IOSPrimitiveArray.h"
 #import "NSDictionaryMap.h"

File: jre_emul/Classes/java/lang/System.java
Patch:
@@ -21,7 +21,6 @@
 #import <UIKit/UIKit.h>
 #endif
 
-#import "IOSArray_PackagePrivate.h"
 #import "IOSObjectArray.h"
 #import "IOSPrimitiveArray.h"
 #import "NSDictionaryMap.h"

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -443,9 +443,7 @@ private void printStaticFieldFullDeclaration(VariableDeclarationFragment fragmen
     boolean isPrimitive = var.getType().isPrimitive();
     String volatileStr = isVolatile ? "_VOLATILE" + (isPrimitive ? "" : "_OBJ") : "";
     newline();
-    if (BindingUtil.isPrimitiveConstant(var)) {
-      name = var.getName();
-    } else {
+    if (!BindingUtil.isPrimitiveConstant(var)) {
       printStaticFieldDeclaration(fragment, String.format("%s%s_%s", declType, typeName, name));
     }
     printf("J2OBJC_STATIC%s_FIELD_GETTER(%s, %s, %s)\n", volatileStr, typeName, name, objcType);

File: translator/src/test/java/com/google/devtools/j2objc/translate/VariableRenamerTest.java
Patch:
@@ -63,6 +63,7 @@ public void testStaticFieldAndMethodCollision() throws IOException {
         "public class Test { static final int foo = 3; static void foo() {}}", "Test", "Test.h");
     // The variable is renamed.
     assertTranslation(translation, "#define Test_foo_ 3");
+    assertTranslation(translation, "J2OBJC_STATIC_FIELD_GETTER(Test, foo_, jint)");
     // The functionized static method is unchanged.
     assertTranslation(translation, "void Test_foo();");
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -165,7 +165,7 @@ private boolean needsCast(Expression expr, ITypeBinding expectedType, boolean sh
         // In most cases we don't need to cast from an id type. However, if the
         // expression is being dereferenced then the compiler needs the type
         // info.
-        || (declaredType == typeEnv.getIdType() && !shouldCastFromId)
+        || (typeEnv.isIdType(declaredType) && !shouldCastFromId)
         // If the declared type can be assigned into the actual type, or the
         // expected type, then the compiler already has sufficient type info.
         || typeEnv.isIdType(exprType) || typeEnv.isIdType(expectedType)

File: jre_emul/android/libcore/luni/src/main/java/java/lang/StringBuilder.java
Patch:
@@ -698,8 +698,7 @@ private native void readObject(ObjectInputStream in) throws IOException,
             ClassNotFoundException /*-[
       [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
       jint count = [inArg readInt];
-      IOSCharArray *value = (IOSCharArray *) check_class_cast(
-        [inArg readObject], [IOSCharArray class]);
+      IOSCharArray *value = (IOSCharArray *) cast_chk([inArg readObject], [IOSCharArray class]);
       [self setWithCharArray:value withInt:count];
     ]-*/;
 

File: testing/junit-ext/src/java/com/google/j2objc/testing/JUnitTestRunner.java
Patch:
@@ -134,7 +134,8 @@ public static int run(Class[] classes, RunListener listener) {
    * @returns Zero if all tests pass, non-zero otherwise.
    */
   public int run() {
-    Class[] classes = (Class[]) getTestClasses().toArray();
+    Set<Class> classesSet = getTestClasses();
+    Class[] classes = classesSet.toArray(new Class[classesSet.size()]);
     sortClasses(classes, sortOrder);
     RunListener listener = newRunListener(outputFormat);
     return run(classes, listener);

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -332,6 +332,9 @@ public boolean visit(TypeLiteral node) {
     ITypeBinding type = node.getType().getTypeBinding();
     if (type.isPrimitive()) {
       addImports(typeEnv.resolveIOSType("IOSClass"));
+    } else if (type.isArray()) {
+      addImports(typeEnv.resolveIOSType("IOSClass"));
+      addImports(type.getElementType());
     } else {
       addImports(node.getType());
     }

File: translator/src/test/java/com/google/devtools/j2objc/ast/LambdaExpressionTest.java
Patch:
@@ -114,7 +114,7 @@ public void testProtocolCast() throws IOException {
     String translation = translateSourceFile(
         functionHeader + "class Test { Function f = (Function) (x) -> x;}", "Test", "Test.m");
     assertTranslatedSegments(translation,
-        "(id<Function>) check_protocol_cast(GetNonCapturingLambda(@protocol(Function), ",
+        "(id<Function>) cast_check(GetNonCapturingLambda(@protocol(Function), ",
         "Function_class_()");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -156,8 +156,8 @@ public void testStaticVariableWithGenericTypeCast() throws IOException {
         + "  public <B> Example<B> foo() { return (Example<B>) FOO; } "
         + "  public static final Example<?> FOO = new Example(); }",
         "Example", "Example.m");
-    assertTranslation(translation,
-        "return (Example *) check_class_cast(Example_FOO_, [Example class])");
+    // The erasure of FOO matches the erasure of the return type of foo() so no cast necessary.
+    assertTranslation(translation, "return Example_FOO_");
   }
 
   public void testStaticVariableInOtherVariable() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -109,10 +109,10 @@ public void testCastTranslation() throws IOException {
     assertEquals(3, stmts.size());
     String result = generateStatement(stmts.get(1));
     assertEquals("JavaLangThrowable *t = "
-        + "(JavaLangThrowable *) check_class_cast(o, [JavaLangThrowable class]);", result);
+        + "(JavaLangThrowable *) cast_chk(o, [JavaLangThrowable class]);", result);
     result = generateStatement(stmts.get(2));
     assertEquals("IOSIntArray *i = "
-        + "(IOSIntArray *) check_class_cast(o, [IOSIntArray class]);", result);
+        + "(IOSIntArray *) cast_chk(o, [IOSIntArray class]);", result);
   }
 
   public void testInterfaceCastTranslation() throws IOException {
@@ -122,7 +122,7 @@ public void testInterfaceCastTranslation() throws IOException {
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(1));
     assertEquals("id<JavaUtilList> l = "
-        + "(id<JavaUtilList>) check_protocol_cast(al, JavaUtilList_class_());", result);
+        + "(id<JavaUtilList>) cast_check(al, JavaUtilList_class_());", result);
   }
 
   public void testCatchTranslation() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -450,7 +450,7 @@ public void testNonWrapperObjectTypeCastToPrimitive() throws IOException {
         + "int test2(Integer i) { return (int) i; } }", "Test", "Test.m");
     assertTranslation(translation,
         "return [((JavaLangInteger *) nil_chk((JavaLangInteger *) "
-        + "check_class_cast(o, [JavaLangInteger class]))) intValue];");
+        + "cast_chk(o, [JavaLangInteger class]))) intValue];");
     // Make sure we don't unnecessarily add a cast check if the object type
     // matches the primitive cast type.
     assertTranslation(translation,

File: translator/src/test/java/com/google/devtools/j2objc/translate/NilCheckResolverTest.java
Patch:
@@ -36,7 +36,7 @@ public void testNilCheckOnCastExpression() throws IOException {
     String translation = translateSourceFile(
         "class Test { int i; void test(Object o) { int i = ((Test) o).i; } }", "Test", "Test.m");
     assertTranslation(translation,
-        "((Test *) nil_chk(((Test *) check_class_cast(o, [Test class]))))->i_");
+        "((Test *) nil_chk(((Test *) cast_chk(o, [Test class]))))->i_");
   }
 
   public void testNoNilCheckOnSecondDereference() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -209,7 +209,7 @@ public void testTypeCheckInCompareToMethod() throws IOException {
         + "  public int compareTo(Test t) { return i - t.i; } }", "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (jint)compareToWithId:(Test *)t {",
-        "check_class_cast(t, [Test class]);");
+        "cast_chk(t, [Test class]);");
   }
 
   public void testAdditionWithinStringConcatenation() throws IOException {
@@ -342,7 +342,7 @@ public void testLogicalPrecedence() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation, "(object == self) || "
         + "(([object isKindOfClass:[Test class]]) && (i_ == ((Test *) nil_chk(((Test *) "
-        + "check_class_cast(object, [Test class]))))->i_));");
+        + "cast_chk(object, [Test class]))))->i_));");
   }
 
   // Objective-C requires that bit-wise and tests be surrounded by parens when mixed with or tests.
@@ -400,7 +400,7 @@ public void testRetainedLocalRef() throws IOException {
         + "JreLoadStatic(NSString, CASE_INSENSITIVE_ORDER_)) autorelease];");
     assertTranslation(translation,
         "return [((id<JavaUtilComparator>) nil_chk(((id<JavaUtilComparator>) "
-        + "check_protocol_cast(c->var_, JavaUtilComparator_class_())))) "
+        + "cast_check(c->var_, JavaUtilComparator_class_())))) "
         + "compareWithId:s1 withId:s2] == 0;");
     assertTranslation(translation, "ComGoogleJ2objcUtilScopedLocalRef *thing = "
         + "[new_ComGoogleJ2objcUtilScopedLocalRef_initWithId_(t) autorelease];");

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -304,7 +304,7 @@ private String nullability(IBinding binding, boolean isParameter) {
       if (BindingUtil.hasAnnotation(binding, Nullable.class)) {
         return " __nullable";
       }
-      if (isParameter
+      if (isParameter && !((IVariableBinding) binding).getType().isPrimitive()
           && (parametersNonnullByDefault || BindingUtil.hasAnnotation(binding, Nonnull.class))) {
         return " __nonnull";
       }

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/ThreadPoolExecutor.java
Patch:
@@ -1072,7 +1072,6 @@ final void runWorker(Worker w) {
      */
     @AutoreleasePool
     private boolean runTask(boolean isFirstRun, Thread wt, Worker w) {
-        w.lock();
         Runnable task = null;
         if (isFirstRun) {
             task = w.firstTask;
@@ -1081,6 +1080,7 @@ private boolean runTask(boolean isFirstRun, Thread wt, Worker w) {
         if (task == null && (task = getTask()) == null) {
             return true;
         }
+        w.lock();
         // If pool is stopping, ensure thread is interrupted;
         // if not, ensure thread is not interrupted.  This
         // requires a recheck in second case to deal with

File: translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
Patch:
@@ -174,7 +174,8 @@ private static String createTypeSignature(ITypeBinding type) {
   }
 
   private static boolean hasGenericSignature(IMethodBinding method) {
-    if (method.isGenericMethod() || method.getReturnType().isTypeVariable()) {
+    if (method.isGenericMethod() || method.getReturnType().isTypeVariable()
+        || method.getReturnType().isParameterizedType()) {
       return true;
     }
     for (ITypeBinding param : method.getParameterTypes()) {

File: jre_emul/apache_harmony/classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/AllTests.java
Patch:
@@ -45,7 +45,7 @@ public static Test suite() {
 //        suite.addTestSuite(ExpressionTest.class);
         suite.addTestSuite(IndexedPropertyDescriptorTest.class);
         suite.addTestSuite(EventSetDescriptorTest.class);
-//        suite.addTestSuite(IntrospectionExceptionTest.class);
+        suite.addTestSuite(IntrospectionExceptionTest.class);
         suite.addTestSuite(FeatureDescriptorTest.class);
 //        suite.addTestSuite(CustomizedPersistenceDelegateTest.class);
 //        suite.addTestSuite(VetoableChangeListenerProxyTest.class);

File: jre_emul/stub_classes/java/lang/Object.java
Patch:
@@ -186,7 +186,7 @@ public int hashCode() {
    * these objects. This means that subclasses of {@code Object} usually
    * override either both methods or neither of them.
    *
-   * @param o
+   * @param obj
    *            the object to compare this instance with.
    * @return {@code true} if the specified object is equal to this {@code
    *         Object}; {@code false} otherwise.
@@ -336,7 +336,7 @@ public final void notifyAll() {}
    * <p>A timeout of zero means the calling thread should wait forever unless interrupted or
    * notified.
    *
-   * @param millis
+   * @param timeout
    *            the maximum time to wait in milliseconds.
    * @throws IllegalArgumentException
    *             if {@code millis < 0}.
@@ -373,7 +373,7 @@ public final void wait(long timeout) throws InterruptedException {}
    * <p>A timeout of zero means the calling thread should wait forever unless interrupted or
    * notified.
    *
-   * @param millis
+   * @param timeout
    *            the maximum time to wait in milliseconds.
    * @param nanos
    *            the fraction of a millisecond to wait, specified in

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -53,6 +53,7 @@ public void testTypeNameTranslation() throws IOException {
   }
 
   public void testUnicodeHeaderGuardTranslation() throws IOException {
+    Options.setSegmentedHeaders(false);
     // Non-letters should be replaced
     String translation = translateSourceFile(
         "public class ¢ents {}", "¢ents", "¢ents.h");
@@ -221,6 +222,7 @@ public void testOutputHeaderFileMappingWithMultipleClassesInOneHeader() throws I
   }
 
   public void testCombinedGeneration() throws IOException {
+    Options.setSegmentedHeaders(false);
     addSourceFile("package unit; public class Test {"
             + "    public void Dummy() {}"
             + "}",
@@ -795,6 +797,7 @@ public void testPackagePrivateBaseClass() throws IOException {
   }
 
   public void testNoForwardDeclarationWhenIncluded() throws IOException {
+    Options.setSegmentedHeaders(false);
     addSourceFile("class Foo { static class Bar { } }", "Foo.java");
     String translation = translateSourceFile(
         "class Test extends Foo { Foo.Bar bar; }", "Test", "Test.h");

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -757,7 +757,6 @@ public void testPackageInfoAnnotationAndDoc() throws IOException {
         + "package foo.bar.mumble;\n"
         + "import foo.annotations.Test;",
         "package-info", "foo/bar/mumble/package-info.h");
-    assertTranslation(translation, "_FooBarMumblePackage_info_H_");
     assertTranslatedLines(translation, "/*!", "@brief A package doc-comment.", "*/");
     translation = getTranslatedFile("foo/bar/mumble/package-info.m");
     assertTranslation(translation, "@implementation FooBarMumblepackage_info");
@@ -778,7 +777,6 @@ public void testPackageInfoAnnotationNoDoc() throws IOException {
         + "package foo.bar.mumble;\n"
         + "import foo.annotations.Test;",
         "package-info", "foo/bar/mumble/package-info.h");
-    assertTranslation(translation, "_FooBarMumblePackage_info_H_");
     assertNotInTranslation(translation, "/**");
     translation = getTranslatedFile("foo/bar/mumble/package-info.m");
     assertTranslation(translation, "@implementation FooBarMumblepackage_info");
@@ -793,7 +791,6 @@ public void testPackageInfoDocNoAnnotation() throws IOException {
         "/** A package doc-comment. */\n"
         + "package foo.bar.mumble;",
         "package-info", "foo/bar/mumble/package-info.h");
-    assertTranslation(translation, "_FooBarMumblePackage_info_H_");
     assertTranslatedLines(translation, "/*!", "@brief A package doc-comment.", "*/");
     translation = getTranslatedFile("foo/bar/mumble/package-info.m");
     assertNotInTranslation(translation, "@implementation FooBarMumblepackage_info");

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGeneratorTest.java
Patch:
@@ -30,7 +30,7 @@ public class ObjectiveCSegmentedHeaderGeneratorTest extends GenerationTest {
   @Override
   protected void setUp() throws IOException {
     super.setUp();
-    Options.enableSegmentedHeaders();
+    // Segmented headers are on by default.
   }
 
   public void testTypicalPreprocessorStatements() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/DeadCodeEliminatorTest.java
Patch:
@@ -69,7 +69,7 @@ public void testDeadMethod_InnerClassConstructor() throws IOException {
         + "  }\n"
         + "}\n";
     DeadCodeMap map = DeadCodeMap.builder()
-        .addDeadMethod("A$B", "A$B", "(I)V")
+        .addDeadMethod("A$B", "A$B", "(LA;I)V")
         .build();
     setDeadCodeMap(map);
     String translation = translateSourceFile(source, "A", "A.m");

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGeneratorTest.java
Patch:
@@ -30,7 +30,7 @@ public class ObjectiveCSegmentedHeaderGeneratorTest extends GenerationTest {
   @Override
   protected void setUp() throws IOException {
     super.setUp();
-    Options.enableSegmentedHeaders();
+    // Segmented headers are on by default.
   }
 
   public void testTypicalPreprocessorStatements() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
Patch:
@@ -178,7 +178,7 @@ private static boolean hasGenericSignature(IMethodBinding method) {
       return true;
     }
     for (ITypeBinding param : method.getParameterTypes()) {
-      if (param.isTypeVariable()) {
+      if (param.isTypeVariable() || param.getTypeArguments().length > 0) {
         return true;
       }
     }

File: jre_emul/stub_classes/java/lang/Number.java
Patch:
@@ -41,6 +41,4 @@ public byte byteValue() {
   public short shortValue() {
     return 0;
   }
-  
-  private static final long serialVersionUID = -8742448824652078965L
 }

File: jre_emul/android/libcore/luni/src/main/java/java/lang/Character.java
Patch:
@@ -24,7 +24,7 @@
 
 /*-[
 #include "java/util/Arrays.h"
-#include "unicode/uchar.h"
+#include "J2ObjC_icu.h"
 ]-*/
 
 /**

File: translator/src/main/java/com/google/devtools/j2objc/gen/JavadocGenerator.java
Patch:
@@ -152,7 +152,8 @@ private String printTag(TagElement tag) {
       }
 
       if (tagName.equals(TagElement.TAG_SEE)) {
-        return "";
+        String comment = printTagFragments(tag.getFragments()).trim();
+        return comment.isEmpty() ? "" : "- seealso: " + comment;
       }
 
       if (tagName.equals(TagElement.TAG_CODE)) {
@@ -183,7 +184,7 @@ private String printTag(TagElement tag) {
   }
 
   public String formatLinkTag(TagElement tag, String template) {
-    String text = printTagFragments(tag.getFragments());
+    String text = printTagFragments(tag.getFragments()).trim();
     int iLabel = text.indexOf(' ');
     if (iLabel > 0) {
       return String.format(template, text.substring(iLabel).trim());

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -121,8 +121,9 @@ public boolean apply(BodyDeclaration decl) {
         case METHOD_DECLARATION:
         case NATIVE_DECLARATION:
           return true;
+        default:
+          return false;
       }
-      return false;
     }
   };
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -156,8 +156,9 @@ private boolean needsNilCheck(Expression e) {
       case NULL_LITERAL:
       case PREFIX_EXPRESSION:
         return true;
+      default:
+        return false;
     }
-    return false;
   }
 
   private void addNilCheck(Expression node) {

File: translator/src/main/java/com/google/devtools/j2objc/util/JdtParser.java
Patch:
@@ -160,6 +160,7 @@ public void acceptAST(String sourceFilePath, CompilationUnit ast) {
     parser.createASTs(pathsArray, getEncodings(pathsArray.length), pathsArray, astRequestor, null);
   }
 
+  @SuppressWarnings("deprecation")
   private ASTParser newASTParser(boolean resolveBindings) {
     ASTParser parser;
     if (Options.isJava8Translator()) {

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -124,9 +124,10 @@ public static Expression retainResult(Expression node) {
             && ((IOSMethodBinding) method).getSelector().equals(NameTable.AUTORELEASE_METHOD)) {
           return TreeUtil.remove(expr);
         }
-        break;
+        // else fall-through
+      default:
+        return null;
     }
-    return null;
   }
 
   public static IMethodBinding findDefaultConstructorBinding(ITypeBinding type, Types typeEnv) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -389,8 +389,9 @@ public void testStaticVariableWithInitTranslation() throws IOException {
 
   public void testInitMessageTranslation() throws IOException {
     String translation = translateSourceFile(
-        "public class Example { void init() {} }", "Example", "Example.h");
+        "public class Example { void init() {} void _init() {}}", "Example", "Example.h");
     assertTranslation(translation, "- (void)init__ OBJC_METHOD_FAMILY_NONE;");
+    assertTranslation(translation, "- (void)_init OBJC_METHOD_FAMILY_NONE;");
   }
 
   public void testInitializeMessageTranslation() throws IOException {

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -386,7 +386,7 @@ private native void makeSynchronousRequest() throws IOException /*-[
 
       if (urlResponse && ![urlResponse isKindOfClass:[NSHTTPURLResponse class]]) {
           @throw AUTORELEASE(([[JavaLangAssertionError alloc]
-                               initWithNSString:[NSString stringWithFormat:@"Unknown class %@",
+                               initWithId:[NSString stringWithFormat:@"Unknown class %@",
                                    NSStringFromClass([urlResponse class])]]));
       }
       NSHTTPURLResponse *response = (NSHTTPURLResponse*) urlResponse;

File: jre_emul/Classes/sun/misc/Unsafe.java
Patch:
@@ -67,7 +67,7 @@ public long objectFieldOffset(Field field) {
 
     /*-[
     static void unalignedPointer(void *ptr) {
-      @throw [[[JavaLangAssertionError alloc] initWithNSString:[NSString stringWithFormat:
+      @throw [[[JavaLangAssertionError alloc] initWithId:[NSString stringWithFormat:
           @"Cannot perform atomic access on unaligned address %p", ptr]] autorelease];
     }
 
@@ -126,8 +126,7 @@ private static native int getArrayBaseOffsetForComponentType(Class component_cla
       Class arrayCls = [component_class objcArrayClass];
       Ivar ivar = class_getInstanceVariable(arrayCls, "buffer_");
       if (!ivar) {
-        @throw AUTORELEASE([[JavaLangAssertionError alloc] initWithNSString:
-            @"buffer_ ivar not found."]);
+        @throw AUTORELEASE([[JavaLangAssertionError alloc] initWithId:@"buffer_ ivar not found."]);
       }
       return (jint)ivar_getOffset(ivar);
     ]-*/;

File: jre_emul/android/libcore/luni/src/main/java/java/util/IllformedLocaleException.java
Patch:
@@ -21,7 +21,6 @@
  *
  * See {@link Locale} and {@link Locale.Builder}.
  *
- * @hide
  * @since 1.7
  */
 public class IllformedLocaleException extends RuntimeException {

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/FutureTask.java
Patch:
@@ -274,7 +274,7 @@ protected boolean runAndReset() {
         boolean ran = false;
         int s = state;
         try {
-            Callable<V> c = callable;
+            @RetainedLocalRef Callable<V> c = callable;
             if (c != null && s == NEW) {
                 try {
                     c.call(); // don't set result

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/FutureTask.java
Patch:
@@ -6,6 +6,8 @@
 
 package java.util.concurrent;
 
+import com.google.j2objc.annotations.RetainedLocalRef;
+
 import java.util.concurrent.locks.LockSupport;
 
 /**
@@ -229,7 +231,7 @@ public void run() {
             !U.compareAndSwapObject(this, RUNNER, null, Thread.currentThread()))
             return;
         try {
-            Callable<V> c = callable;
+            @RetainedLocalRef Callable<V> c = callable;
             if (c != null && state == NEW) {
                 V result;
                 boolean ran;

File: jre_emul/android/libcore/luni/src/main/java/java/util/zip/Inflater.java
Patch:
@@ -433,7 +433,7 @@ private native int setFileInputImpl(FileDescriptor fd, long offset, int byteCoun
         long handle) /*-[
       JavaIoFileInputStream *fileIn =
           [[JavaIoFileInputStream alloc] initWithJavaIoFileDescriptor:fd];
-      [fileIn skipWithLong:offset];
+      lseek([fd getInt$], offset, SEEK_SET);
       IOSByteArray *in = [IOSByteArray arrayWithLength:byteCount];
       jint bytesRead = [fileIn readWithByteArray:in withInt:0 withInt:byteCount];
       if (bytesRead < 0) {

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/util/zip/AbstractZipFileTest.java
Patch:
@@ -523,7 +523,6 @@ public void testArchivesWithRelativePaths() throws IOException {
         }
     }
 
-  /* Disabled until b/24360201 is fixed.
     public void testZipFileErrorReadingData() throws IOException {
         File resources = Support_Resources.createTempFolder();
         File tempZipFile = Support_Resources.copyFile(
@@ -542,7 +541,6 @@ public void testZipFileErrorReadingData() throws IOException {
           assertNotNull(content);
         }
     }
-  */
 
     // From Guava's com.google.common.io.ByteStreams.
     public static byte[] toByteArray(InputStream in) throws IOException {

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/ReferenceQueue.java
Patch:
@@ -60,7 +60,6 @@ public synchronized Reference<? extends T> poll() {
 
         ret.queueNext = null;
 
-        ret.weakenReferent();
         return ret;
     }
 
@@ -140,7 +139,6 @@ synchronized void enqueue(Reference<? extends T> reference) {
             reference.queueNext = head;
         }
         head = reference;
-        reference.strengthenReferent();
         notify();
     }
 

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/SoftReference.java
Patch:
@@ -76,8 +76,6 @@
  * allocation.
  */
 public class SoftReference<T> extends Reference<T> {
-    // Used by IOSReference.
-    boolean queued = false;
 
     /**
      * Constructs a new soft reference to the given referent. The newly created

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/ReferenceQueue.java
Patch:
@@ -60,6 +60,7 @@ public synchronized Reference<? extends T> poll() {
 
         ret.queueNext = null;
 
+        ret.weakenReferent();
         return ret;
     }
 
@@ -139,6 +140,7 @@ synchronized void enqueue(Reference<? extends T> reference) {
             reference.queueNext = head;
         }
         head = reference;
+        reference.strengthenReferent();
         notify();
     }
 

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/SoftReference.java
Patch:
@@ -76,6 +76,8 @@
  * allocation.
  */
 public class SoftReference<T> extends Reference<T> {
+    // Used by IOSReference.
+    boolean queued = false;
 
     /**
      * Constructs a new soft reference to the given referent. The newly created

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/ReferenceQueue.java
Patch:
@@ -60,7 +60,6 @@ public synchronized Reference<? extends T> poll() {
 
         ret.queueNext = null;
 
-        ret.weakenReferent();
         return ret;
     }
 
@@ -140,7 +139,6 @@ synchronized void enqueue(Reference<? extends T> reference) {
             reference.queueNext = head;
         }
         head = reference;
-        reference.strengthenReferent();
         notify();
     }
 

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/SoftReference.java
Patch:
@@ -76,8 +76,6 @@
  * allocation.
  */
 public class SoftReference<T> extends Reference<T> {
-    // Used by IOSReference.
-    boolean queued = false;
 
     /**
      * Constructs a new soft reference to the given referent. The newly created

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/io/OldReaderTest.java
Patch:
@@ -27,7 +27,7 @@ public class OldReaderTest extends TestCase {
 
     public void test_Reader() {
         MockReader r = new MockReader();
-        assertTrue("Test 1: Lock has not been set correctly.", r.lockSet(r));
+        assertTrue("Test 1: Lock has not been set correctly.", r.lockSet());
     }
 
     public void test_Reader_CharBufferChar() throws IOException {
@@ -117,8 +117,8 @@ class MockReader extends Reader {
             throw new UnsupportedOperationException();
         }
 
-        public boolean lockSet(Object o) {
-            return (lock == o);
+        public boolean lockSet() {
+            return (lock != null);
         }
     }
 }

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -326,7 +326,7 @@ private native void makeSynchronousRequest() throws IOException /*-[
 
       NSMutableURLRequest *request =
           [NSMutableURLRequest requestWithURL:[NSURL URLWithString:[self->url_ toExternalForm]]];
-      request.HTTPShouldHandleCookies = NO;
+      request.HTTPShouldHandleCookies = false;
       request.HTTPMethod = self->method_;
       request.cachePolicy = self->useCaches_ ?
           NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData;

File: jre_emul/Classes/com/google/j2objc/security/IosRSAKey.java
Patch:
@@ -92,7 +92,7 @@ public native byte[] getEncoded() /*-[
       [publicKeyQuery setObject:(id)kSecClassKey forKey:(id)kSecClass];
       [publicKeyQuery setObject:publicTag forKey:(id)kSecAttrApplicationTag];
       [publicKeyQuery setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
-      [publicKeyQuery setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecReturnData];
+      [publicKeyQuery setObject:[NSNumber numberWithBool:true] forKey:(id)kSecReturnData];
       OSStatus result =
           SecItemCopyMatching((CFDictionaryRef)publicKeyQuery, (CFTypeRef *)&publicKey);
       [publicKeyQuery release];
@@ -156,7 +156,7 @@ public native byte[] getEncoded() /*-[
       [privateKeyQuery setObject:(id)kSecClassKey forKey:(id)kSecClass];
       [privateKeyQuery setObject:privateTag forKey:(id)kSecAttrApplicationTag];
       [privateKeyQuery setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
-      [privateKeyQuery setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecReturnData];
+      [privateKeyQuery setObject:[NSNumber numberWithBool:true] forKey:(id)kSecReturnData];
       OSStatus result =
           SecItemCopyMatching((CFDictionaryRef)privateKeyQuery, (CFTypeRef *)&privateKey);
       [privateKeyQuery release];

File: jre_emul/Classes/com/google/j2objc/security/IosRSAKeyPairGenerator.java
Patch:
@@ -39,13 +39,13 @@ public class IosRSAKeyPairGenerator extends KeyPairGeneratorSpi {
   public native KeyPair generateKeyPair() /*-[
     // Requested keypair attributes.
     NSMutableDictionary * privateKeyAttr = [[NSMutableDictionary alloc] init];
-    [privateKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
+    [privateKeyAttr setObject:[NSNumber numberWithBool:true] forKey:(id)kSecAttrIsPermanent];
     NSData *privateTag = [ComGoogleJ2objcSecurityIosRSAKey_PRIVATE_KEY_TAG_
                           dataUsingEncoding:NSUTF8StringEncoding];
     [privateKeyAttr setObject:privateTag forKey:(id)kSecAttrApplicationTag];
 
     NSMutableDictionary * publicKeyAttr = [[NSMutableDictionary alloc] init];
-    [publicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
+    [publicKeyAttr setObject:[NSNumber numberWithBool:true] forKey:(id)kSecAttrIsPermanent];
     NSData *publicTag = [ComGoogleJ2objcSecurityIosRSAKey_PUBLIC_KEY_TAG_
                          dataUsingEncoding:NSUTF8StringEncoding];
     [publicKeyAttr setObject:publicTag forKey:(id)kSecAttrApplicationTag];

File: jre_emul/Classes/java/lang/StackTraceElement.java
Patch:
@@ -227,7 +227,7 @@ private native void initializeFromAddress() /*-[
         NSString *className = [[[NSString alloc] initWithBytesNoCopy:start
                                                               length:idx - start
                                                             encoding:encoding
-                                                        freeWhenDone:NO] autorelease];
+                                                        freeWhenDone:false] autorelease];
         cls = [IOSClass classForIosName:className];
       }
       if (cls) {

File: jre_emul/Classes/java/lang/System.java
Patch:
@@ -190,7 +190,7 @@ public native static Properties getProperties() /*-[
 
       NSString *versionString;
 #if !TARGET_OS_IPHONE && !TARGET_OS_IPHONE_SIMULATOR
-      BOOL onSimulator = NO;
+      BOOL onSimulator = false;
 #endif
       // During compile time, see if [NSProcessInfo processInfo].operatingSystemVersion is available
       // in the SDK.
@@ -232,7 +232,7 @@ public native static Properties getProperties() /*-[
         id currentDevice = [uiDeviceClass performSelector:currentDeviceSel];
         versionString = (NSString *)[currentDevice performSelector:systemVersionSel];
         if (versionString) {
-          onSimulator = YES;
+          onSimulator = true;
         } else {
           // Ok, this is OS X. We use operatingSystemVersionString which gives us a localized
           // version not suitable for parsing. Given the use case of this property, it's not worth

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -441,7 +441,7 @@ public native void start() /*-[
 #endif
       @throw e;
     }
-    running_ = YES;
+    running_ = true;
     [(NSThread *) nativeThread start];
   ]-*/;
 
@@ -662,7 +662,7 @@ public void interrupt() {
   public static native boolean interrupted() /*-[
     JavaLangThread *currentThread = JavaLangThread_currentThread();
     BOOL result = currentThread->interrupted_;
-    currentThread->interrupted_ = NO;
+    currentThread->interrupted_ = false;
     return result;
   ]-*/;
 
@@ -779,7 +779,7 @@ public native boolean isAlive() /*-[
     BOOL alive = [nativeThread isExecuting] && ![nativeThread isCancelled];
     if (!alive && running_) {
       // Thread finished, clean up.
-      running_ = NO;
+      running_ = false;
       if (self->threadGroup_) {
         [threadGroup_ removeWithJavaLangThread:self];
         AUTORELEASE(self->threadGroup_);

File: jre_emul/Classes/sun/misc/Unsafe.java
Patch:
@@ -211,9 +211,9 @@ public native boolean compareAndSwapObject(Object obj, long offset,
           __ATOMIC_SEQ_CST)) {
         [newValue retain];
         [expectedValue autorelease];
-        return YES;
+        return true;
       }
-      return NO;
+      return false;
     ]-*/;
 
     /**

File: translator/src/main/java/com/google/devtools/j2objc/gen/LiteralGenerator.java
Patch:
@@ -148,7 +148,7 @@ public static String fixIntToken(String token) {
 
   public static String generate(Object value) {
     if (value instanceof Boolean) {
-      return ((Boolean) value).booleanValue() ? "YES" : "NO";
+      return ((Boolean) value).booleanValue() ? "true" : "false";
     } else if (value instanceof Character) {
       return UnicodeUtils.escapeCharLiteral(((Character) value).charValue());
     } else if (value instanceof Number) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -291,7 +291,7 @@ private void printStatements(List<?> statements) {
 
   @Override
   public boolean visit(BooleanLiteral node) {
-    buffer.append(node.booleanValue() ? "YES" : "NO");
+    buffer.append(node.booleanValue() ? "true" : "false");
     return false;
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayCreationTest.java
Patch:
@@ -99,7 +99,7 @@ public void testBooleanArrayCreationNoDimension() {
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
     assertEquals("IOSBooleanArray *foo = "
-        + "[IOSBooleanArray arrayWithBooleans:(jboolean[]){ YES, NO } count:2];", result);
+        + "[IOSBooleanArray arrayWithBooleans:(jboolean[]){ true, false } count:2];", result);
   }
 
   public void testByteArrayCreationNoDimension() {
@@ -166,7 +166,7 @@ public void testBooleanArrayCreation() {
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
     assertEquals("IOSBooleanArray *foo = "
-        + "[IOSBooleanArray arrayWithBooleans:(jboolean[]){ YES, NO } count:2];", result);
+        + "[IOSBooleanArray arrayWithBooleans:(jboolean[]){ true, false } count:2];", result);
   }
 
   public void testByteArrayCreation() {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -516,7 +516,7 @@ public void testEnumWithMultipleConstructors() throws IOException {
         "withInt:(jint)__ordinal {");
     assertTranslation(translation,
         "ColorEnum_initWithInt_withBoolean_withNSString_withInt_("
-        + "self, rgb, YES, __name, __ordinal);");
+        + "self, rgb, true, __name, __ordinal);");
     assertTranslatedLines(translation,
         "void ColorEnum_initWithInt_withBoolean_withNSString_withInt_("
           + "ColorEnum *self, jint rgb, jboolean primary, NSString *__name, jint __ordinal) {",

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -314,7 +314,7 @@ public void testAnnotationGeneration() throws IOException {
     // Verify default value accessor.
     assertTranslatedLines(translation,
         "+ (jboolean)fooableDefault {",
-        "return NO;");
+        "return false;");
 
     assertTranslatedLines(translation,
         "- (IOSClass *)annotationType {",

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1299,7 +1299,7 @@ public void testIntConcatenation() throws IOException {
         + "void test(int i, int j) { check(true, \"%d-%d\", i, j); }}",
         "Test", "Test.m");
     assertTranslation(translation,
-        "[self checkWithBoolean:YES withNSString:@\"%d-%d\" "
+        "[self checkWithBoolean:true withNSString:@\"%d-%d\" "
         + "withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ "
         + "JavaLangInteger_valueOfWithInt_(i), JavaLangInteger_valueOfWithInt_(j) } count:2 "
         + "type:NSObject_class_()]];");

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -74,7 +74,7 @@ public void testFinalArrayInnerAccess() throws IOException {
         "- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;");
     assertTranslation(impl, "IOSBooleanArray *bar = [IOSBooleanArray arrayWithLength:1];");
     assertTranslation(impl, "new_Test_$1_initWithBooleanArray_(bar)");
-    assertTranslation(impl, "*IOSBooleanArray_GetRef(nil_chk(val$bar_), 0) = YES;");
+    assertTranslation(impl, "*IOSBooleanArray_GetRef(nil_chk(val$bar_), 0) = true;");
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -195,15 +195,15 @@ public void testConditionalExpression() throws IOException {
         "public class Test { "
         + "void test() { Boolean b = true ? false : null; } }",
         "Test", "Test.m");
-    assertTranslation(translation, "JavaLangBoolean_valueOfWithBoolean_(NO)");
+    assertTranslation(translation, "JavaLangBoolean_valueOfWithBoolean_(false)");
   }
 
   public void testReturnWithConditional() throws IOException {
     String translation = translateSourceFile(
         "public class Test { "
         + "boolean test() { Boolean b = null; return b != null ? b : false; } }",
         "Test", "Test.m");
-    assertTranslation(translation, "b != nil ? [b booleanValue] : NO");
+    assertTranslation(translation, "b != nil ? [b booleanValue] : false");
   }
 
   public void testConditionalOnBoxedValue() throws IOException {
@@ -298,7 +298,7 @@ public void testBoxedEnumConstructorArgs() throws IOException {
         + "JavaLangInteger_valueOfWithInt_(0), @\"INT\", 0)");
     assertTranslation(translation,
         "new_TestEnum_initWithId_withNSString_withInt_("
-        + "JavaLangBoolean_valueOfWithBoolean_(NO), @\"BOOLEAN\", 1)");
+        + "JavaLangBoolean_valueOfWithBoolean_(false), @\"BOOLEAN\", 1)");
   }
 
   public void testBoxedBoolInIf() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/ConstantBranchPrunerTest.java
Patch:
@@ -169,6 +169,6 @@ public void testExpressionPruning() throws IOException {
         + "  if (DEBUG && TEST && nonConstant) return false; "
         + "  return true; }}", "A", "A.m");
     assertTranslatedLines(translation,
-        "- (jboolean)test {", "if (A_nonConstant_) return NO;", "return YES;", "}");
+        "- (jboolean)test {", "if (A_nonConstant_) return false;", "return true;", "}");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/GwtConverterTest.java
Patch:
@@ -62,7 +62,7 @@ public void testGwtIsScript() throws IOException {
         + "class Test { boolean test() { "
         + "  if (GWT.isClient() || GWT.isScript()) { return true; } return false; }}",
         "Test", "Test.m");
-    assertTranslatedLines(translation, "- (jboolean)test {", "return NO;", "}");
+    assertTranslatedLines(translation, "- (jboolean)test {", "return false;", "}");
   }
 
   // Verify GwtIncompatible method is not stripped by default.

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -51,8 +51,8 @@ public void testThisConstructorCallInlined() throws IOException {
     String translation = translateSourceFile(source, "Test", "Test.m");
     assertTranslatedLines(translation,
         "void Test_init(Test *self) {",
-        "  Test_initWithBoolean_(self, YES);",
-        "  self->b2_ = YES;",
+        "  Test_initWithBoolean_(self, true);",
+        "  self->b2_ = true;",
         "}");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -204,7 +204,7 @@ public void testInnerClassDefaultInitialization() throws IOException {
         + "class Inner { Inner(boolean b) {} int size() { return Test.this.size(); } } }",
         "Test", "Test.m");
     assertTranslation(translation, "JreStrongAssignAndConsume(&self->inner_, "
-        + "new_Test_Inner_initWithTest_withBoolean_(self, YES));");
+        + "new_Test_Inner_initWithTest_withBoolean_(self, true));");
     assertTranslation(translation, "JreStrongAssign(&self->this$0_, outer$);");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -54,9 +54,9 @@ public void testStringValueOfBoolean() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(0));
-    assertEquals("NSString *trueString = NSString_valueOfBool_(YES);", result);
+    assertEquals("NSString *trueString = NSString_valueOfBool_(true);", result);
     result = generateStatement(stmts.get(1));
-    assertEquals("NSString *falseString = NSString_valueOfBool_(NO);", result);
+    assertEquals("NSString *falseString = NSString_valueOfBool_(false);", result);
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/translate/UnsequencedExpressionRewriterTest.java
Patch:
@@ -112,7 +112,7 @@ public void testWhileLoop() throws IOException {
     String translation = translateSourceFile(
         "class Test { void test(int i) { while (i + i++ < 10) {} } }", "Test", "Test.m");
     assertTranslatedLines(translation,
-        "while (YES) {",
+        "while (true) {",
         "  jint unseq$1 = i;",
         "  if (!(unseq$1 + i++ < 10)) break;");
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -1265,7 +1265,7 @@ public boolean visit(TryStatement node) {
 
     for (CatchClause cc : node.getCatchClauses()) {
       if (cc.getException().getType() instanceof UnionType) {
-        printMultiCatch(cc, hasResources);
+        printMultiCatch(cc);
       }
       buffer.append("@catch (");
       cc.getException().accept(this);

File: jre_emul/android/libcore/luni/src/main/java/java/nio/FileChannelImpl.java
Patch:
@@ -17,6 +17,8 @@
 
 package java.nio;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.io.Closeable;
 import java.io.FileDescriptor;
 import java.io.IOException;
@@ -50,6 +52,7 @@ public int compare(FileLock lock1, FileLock lock2) {
         }
     };
 
+    @Weak
     private final Object stream;
     private final FileDescriptor fd;
     private final int mode;

File: jre_emul/android/libcore/luni/src/main/java/java/nio/channels/FileLock.java
Patch:
@@ -17,6 +17,8 @@
 
 package java.nio.channels;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.io.IOException;
 
 /**
@@ -71,6 +73,7 @@
 public abstract class FileLock implements AutoCloseable {
 
     // The underlying file channel.
+    @Weak
     private final FileChannel channel;
 
     // The lock starting position.

File: jre_emul/android/libcore/luni/src/main/java/java/nio/FileChannelImpl.java
Patch:
@@ -17,6 +17,8 @@
 
 package java.nio;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.io.Closeable;
 import java.io.FileDescriptor;
 import java.io.IOException;
@@ -50,6 +52,7 @@ public int compare(FileLock lock1, FileLock lock2) {
         }
     };
 
+    @Weak
     private final Object stream;
     private final FileDescriptor fd;
     private final int mode;

File: jre_emul/android/libcore/luni/src/main/java/java/nio/channels/FileLock.java
Patch:
@@ -17,6 +17,8 @@
 
 package java.nio.channels;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.io.IOException;
 
 /**
@@ -71,6 +73,7 @@
 public abstract class FileLock implements AutoCloseable {
 
     // The underlying file channel.
+    @Weak
     private final FileChannel channel;
 
     // The lock starting position.

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -156,7 +156,8 @@ private static List<GeneratedType> getOrderedGeneratedTypes(GenerationUnit gener
     for (GeneratedType generatedType : generatedTypes) {
       String name = generatedType.getTypeName();
       if (name != null) {
-        assert typeMap.put(name, generatedType) == null : "Duplicate type name: " + name;
+        Object dupe = typeMap.put(name, generatedType);
+        assert dupe == null : "Duplicate type name: " + name;
       }
     }
 

File: jre_emul/android/libcore/luni/src/main/java/java/nio/FileChannelImpl.java
Patch:
@@ -17,6 +17,8 @@
 
 package java.nio;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.io.Closeable;
 import java.io.FileDescriptor;
 import java.io.IOException;
@@ -50,6 +52,7 @@ public int compare(FileLock lock1, FileLock lock2) {
         }
     };
 
+    @Weak
     private final Object stream;
     private final FileDescriptor fd;
     private final int mode;

File: jre_emul/android/libcore/luni/src/main/java/java/nio/channels/FileLock.java
Patch:
@@ -17,6 +17,8 @@
 
 package java.nio.channels;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.io.IOException;
 
 /**
@@ -71,6 +73,7 @@
 public abstract class FileLock implements AutoCloseable {
 
     // The underlying file channel.
+    @Weak
     private final FileChannel channel;
 
     // The lock starting position.

File: jre_emul/android/libcore/luni/src/main/java/java/util/jar/JarEntry.java
Patch:
@@ -17,6 +17,8 @@
 
 package java.util.jar;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.io.IOException;
 import java.security.CodeSigner;
 import java.security.cert.CertPath;
@@ -39,6 +41,7 @@
 public class JarEntry extends ZipEntry {
     private Attributes attributes;
 
+    @Weak
     final JarFile parentJar;
 
     CodeSigner signers[];

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/TranslationProcessor.java
Patch:
@@ -158,7 +158,7 @@ public static void applyMutations(
     ticker.tick("InnerClassExtractor");
 
     // Normalize init statements
-    new InitializationNormalizer().run(unit);
+    new InitializationNormalizer(deadCodeMap).run(unit);
     ticker.tick("InitializationNormalizer");
 
     // Fix references to outer scope and captured variables.

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -17,11 +17,12 @@
 package com.google.devtools.j2objc.translate;
 
 import com.google.devtools.j2objc.GenerationTest;
+import com.google.devtools.j2objc.util.DeadCodeMap;
 
 import java.io.IOException;
 
 /**
- * Unit tests for {@link InitializationNormalization} phase.
+ * Unit tests for {@link InitializationNormalizer} phase.
  *
  * @author Tom Ball
  */
@@ -34,7 +35,7 @@ public class InitializationNormalizerTest extends GenerationTest {
   @Override
   protected void setUp() throws IOException {
     super.setUp();
-    instance = new InitializationNormalizer();
+    instance = new InitializationNormalizer(new DeadCodeMap.Builder().build());
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -1274,7 +1274,8 @@ public boolean visit(TryStatement node) {
       if (node.getFinally() != null) {
         printStatements(node.getFinally().getStatements());
       }
-      for (VariableDeclarationExpression var : resources) {
+      // Close resources in the opposite order than they were opened.
+      for (VariableDeclarationExpression var : Lists.reverse(resources)) {
         for (VariableDeclarationFragment frag : var.getFragments()) {
           buffer.append("@try {\n[");
           buffer.append(frag.getName().getFullyQualifiedName());

File: jre_emul/Classes/java/lang/System.java
Patch:
@@ -328,8 +328,8 @@ public static String getProperty(String key, String defaultValue) {
     return result != null ? result : defaultValue;
   }
 
-  public static void setProperty(String key, String value) {
-    getProperties().setProperty(key, value);
+  public static String setProperty(String key, String value) {
+    return (String) getProperties().setProperty(key, value);
   }
 
   public static void setProperties(Properties properties) {

File: jre_emul/Classes/com/google/j2objc/security/cert/IosCertificateFactory.java
Patch:
@@ -67,8 +67,8 @@ private native Certificate iosGenerateCertificate(byte[] bytes) throws Certifica
       @throw AUTORELEASE([[JavaSecurityCertCertificateException alloc]
                           initWithNSString:@"not a valid DER-encoded X.509 certificate"]);
     }
-    return [[ComGoogleJ2objcSecurityCertIosX509Certificate alloc]
-            initWithLong:(long long) newCertificate];
+    return AUTORELEASE([[ComGoogleJ2objcSecurityCertIosX509Certificate alloc]
+                        initWithLong:(long long) newCertificate]);
   ]-*/;
 
   @Override

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -72,6 +72,7 @@
 import com.google.devtools.j2objc.util.ErrorUtilTest;
 import com.google.devtools.j2objc.util.FileUtilTest;
 import com.google.devtools.j2objc.util.NameTableTest;
+import com.google.devtools.j2objc.util.PackagePrefixesTest;
 import com.google.devtools.j2objc.util.ProGuardUsageParserTest;
 import com.google.devtools.j2objc.util.UnicodeUtilsTest;
 
@@ -125,6 +126,7 @@ public class SmallTests {
     OptionsTest.class,
     OuterReferenceFixerTest.class,
     OuterReferenceResolverTest.class,
+    PackagePrefixesTest.class,
     PrimitiveArrayTest.class,
     PrivateDeclarationResolverTest.class,
     ProGuardUsageParserTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -196,7 +196,7 @@ public static String getOperatorFunctionModifier(Expression expr) {
     if (BindingUtil.isVolatile(var)) {
       modifier += "Volatile";
     }
-    if (var.isField() && !BindingUtil.isWeakReference(var)) {
+    if (!BindingUtil.isWeakReference(var) && (var.isField() || Options.useARC())) {
       modifier += "Strong";
     }
     return modifier;

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -216,7 +216,7 @@ protected void printStaticAccessors() {
     if (Options.staticAccessorMethods()) {
       for (VariableDeclarationFragment fragment : getStaticFields()) {
         IVariableBinding var = fragment.getVariableBinding();
-        String accessorName = nameTable.getVariableBaseName(var);
+        String accessorName = nameTable.getStaticAccessorName(var);
         String objcType = nameTable.getObjCType(var.getType());
         printf("\n+ (%s)%s;\n", objcType, accessorName);
         if (!Modifier.isFinal(var.getModifiers())) {
@@ -225,8 +225,8 @@ protected void printStaticAccessors() {
       }
       if (typeNode instanceof EnumDeclaration) {
         for (EnumConstantDeclaration constant : ((EnumDeclaration) typeNode).getEnumConstants()) {
-          String varName = nameTable.getVariableBaseName(constant.getVariableBinding());
-          printf("\n+ (%s *)%s;\n", typeName, varName);
+          String accessorName = nameTable.getStaticAccessorName(constant.getVariableBinding());
+          printf("\n+ (%s *)%s;\n", typeName, accessorName);
         }
       }
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -175,7 +175,7 @@ protected void printStaticAccessors() {
         ITypeBinding type = varBinding.getType();
         boolean isVolatile = BindingUtil.isVolatile(varBinding);
         boolean isPrimitive = type.isPrimitive();
-        String accessorName = nameTable.getVariableBaseName(varBinding);
+        String accessorName = nameTable.getStaticAccessorName(varBinding);
         String varName = nameTable.getVariableQualifiedName(varBinding);
         String objcType = nameTable.getObjCType(type);
         String typeSuffix = isPrimitive ? NameTable.capitalize(type.getName()) : "Id";
@@ -204,7 +204,7 @@ protected void printStaticAccessors() {
       for (EnumConstantDeclaration constant : ((EnumDeclaration) typeNode).getEnumConstants()) {
         IVariableBinding varBinding = constant.getVariableBinding();
         printf("\n+ (%s *)%s {\n  return %s;\n}\n",
-            typeName, nameTable.getVariableBaseName(varBinding),
+            typeName, nameTable.getStaticAccessorName(varBinding),
             nameTable.getVariableQualifiedName(varBinding));
       }
     }

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeImplementationGeneratorTest.java
Patch:
@@ -124,10 +124,11 @@ public void testNoStaticFieldAccessorMethods() throws IOException {
   // Verify that accessor methods for enum constants are generated on request.
   public void testEnumConstantAccessorMethods() throws IOException {
     Options.setStaticAccessorMethods(true);
-    String source = "enum Test { ONE, TWO }";
+    String source = "enum Test { ONE, TWO, EOF }";
     String translation = translateSourceFile(source, "Test", "Test.m");
     assertTranslatedLines(translation, "+ (TestEnum *)ONE {", "return TestEnum_ONE;");
     assertTranslatedLines(translation, "+ (TestEnum *)TWO {", "return TestEnum_TWO;");
+    assertTranslatedLines(translation, "+ (TestEnum *)EOF_ {", "return TestEnum_EOF;");
   }
 
   // Verify that accessor methods for enum constants are not generated by default.

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -742,7 +742,8 @@ private void printBlockCallWrapper(IMethodBinding methodBinding) {
     printBlockPreExpression(methodBinding, returnType);
     buffer.append(nameTable.getSpecificObjCType(returnType));
     buffer.append(" (^block)");
-    buffer.append(Options.getLanguage() == Options.OutputLanguageOption.OBJECTIVE_CPLUSPLUS ? "(...)" : "()");
+    buffer.append(Options.getLanguage() == Options.OutputLanguageOption.OBJECTIVE_CPLUSPLUS
+        ? "(...)" : "()");
     buffer.append(" = objc_getAssociatedObject(_self, (void *) 0);\n");
     if (!BindingUtil.isVoid(returnType)) {
       buffer.append("return ");

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -42,7 +42,7 @@ public static void generate(GenerationUnit unit) {
 
   private ObjectiveCImplementationGenerator(GenerationUnit unit) {
     super(unit, Options.emitLineDirectives());
-    suffix = Options.getImplementationFileSuffix();
+    suffix = Options.getLanguage().suffix();
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -741,7 +741,9 @@ private void printBlockCallWrapper(IMethodBinding methodBinding) {
     ITypeBinding returnType = methodBinding.getReturnType();
     printBlockPreExpression(methodBinding, returnType);
     buffer.append(nameTable.getSpecificObjCType(returnType));
-    buffer.append(" (^block)() = objc_getAssociatedObject(_self, (void *) 0);\n");
+    buffer.append(" (^block)");
+    buffer.append(Options.getLanguage() == Options.OutputLanguageOption.OBJECTIVE_CPLUSPLUS ? "(...)" : "()");
+    buffer.append(" = objc_getAssociatedObject(_self, (void *) 0);\n");
     if (!BindingUtil.isVoid(returnType)) {
       buffer.append("return ");
     }

File: annotations/src/main/java/com/google/j2objc/annotations/ObjectiveCName.java
Patch:
@@ -36,5 +36,5 @@
   /**
    * The Objective-C name to use.
    */
-  public String value();
+  String value();
 }

File: annotations/src/main/java/com/google/j2objc/annotations/Property.java
Patch:
@@ -25,22 +25,22 @@
  * See <a
  * href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html"
  * >Apple's &#64;property documentation</a>.
- * <p/>
+ * <p>
  * Notes:
  * <ul>
  *   <li>Invalid attributes are reported as errors.</li>
  *   <li><b>readwrite</b>, <b>strong</b>, and <b>atomic</b> attributes are removed
  *     since they are defaults.</li>
  *   <li>Strings will include the <b>copy</b> attribute.</li>
  * </ul>
- * <p/>
+ * <p>
  * Example:
  * <pre>
  * class Foo {
  *   &#64;Property("copy, nonatomic") protected String bar;
  * }</pre>
  * generates:
- * <p/>
+ * <p>
  * <pre>
  * &#64;property (copy, nonatomic) NSString *bar;</pre>
  *

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -740,7 +740,8 @@ private void printBlockCallWrapper(IMethodBinding methodBinding) {
     boolean isSelector = false;
     ITypeBinding returnType = methodBinding.getReturnType();
     printBlockPreExpression(methodBinding, returnType);
-    buffer.append("id (^block)() = objc_getAssociatedObject(_self, (void *) 0);\n");
+    buffer.append(nameTable.getSpecificObjCType(returnType));
+    buffer.append(" (^block)() = objc_getAssociatedObject(_self, (void *) 0);\n");
     if (!BindingUtil.isVoid(returnType)) {
       buffer.append("return ");
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -212,7 +212,6 @@ private List<IVariableBinding> getOuterPath(ITypeBinding type) {
       if (type.equals(scope.type)) {
         break;
       }
-      // TODO(kirbs): Test instance method calls from containing class for lambdas.
       if (!(BindingUtil.isLambda(scope.type))) {
         path.add(getOrCreateOuterField(scope));
       }

File: translator/src/test/java/com/google/devtools/j2objc/OptionsTest.java
Patch:
@@ -45,7 +45,9 @@ public void testPackagePrefixesWithTrailingSpace() throws IOException {
 
   public void testSourceVersionFlags() throws IOException {
     // TODO(kirbs): Uncomment following lines and lines in Options when we enable automatic version
-    // detection.
+    // detection. Currently this is breaking pulse builds using 64 bit Java 8, and upgrading to
+    // Eclipse 4.5 is gated by bytecode errors in compiling junit. I won't have time to do a more in
+    // depth root cause analysis on this.
     // // Check that version default is correctly pulled from system properties.
     // String javaVersion = System.getProperty("java.version");
     //

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -741,7 +741,8 @@ private void printBlockCallWrapper(IMethodBinding methodBinding) {
     boolean isSelector = false;
     ITypeBinding returnType = methodBinding.getReturnType();
     printBlockPreExpression(methodBinding, returnType);
-    buffer.append("id (^block)() = objc_getAssociatedObject(_self, (void *) 0);\n");
+    buffer.append(nameTable.getSpecificObjCType(returnType));
+    buffer.append(" (^block)() = objc_getAssociatedObject(_self, (void *) 0);\n");
     if (!BindingUtil.isVoid(returnType)) {
       buffer.append("return ");
     }

File: translator/src/main/java/com/google/devtools/j2objc/ast/CreationReference.java
Patch:
@@ -44,6 +44,7 @@ protected void acceptInner(TreeVisitor visitor) {
     if (visitor.visit(this)) {
       type.accept(visitor);
       typeArguments.accept(visitor);
+      invocation.accept(visitor);
     }
     visitor.endVisit(this);
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -1074,10 +1074,10 @@ public boolean visit(TypeLiteral node) {
   public boolean visit(TypeMethodReference node) {
     node.getType().accept(this);
     sb.print("::");
-    if (!node.typeArguments().isEmpty()) {
+    if (!node.getTypeArguments().isEmpty()) {
       sb.print('<');
       boolean delimiterFlag = false;
-      for (Type t : node.typeArguments()) {
+      for (Type t : node.getTypeArguments()) {
         if (delimiterFlag) {
           sb.print(", ");
         } else {

File: translator/src/main/java/com/google/devtools/j2objc/ast/ExpressionMethodReference.java
Patch:
@@ -60,6 +60,7 @@ protected void acceptInner(TreeVisitor visitor) {
       expression.accept(visitor);
       typeArguments.accept(visitor);
       name.accept(visitor);
+      invocation.accept(visitor);
     }
     visitor.endVisit(this);
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperMethodReference.java
Patch:
@@ -52,6 +52,7 @@ protected void acceptInner(TreeVisitor visitor) {
       qualifier.accept(visitor);
       typeArguments.accept(visitor);
       name.accept(visitor);
+      invocation.accept(visitor);
     }
     visitor.endVisit(this);
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TypeMethodReference.java
Patch:
@@ -52,6 +52,7 @@ protected void acceptInner(TreeVisitor visitor) {
       type.accept(visitor);
       typeArguments.accept(visitor);
       name.accept(visitor);
+      invocation.accept(visitor);
     }
     visitor.endVisit(this);
   }

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -256,7 +256,7 @@ public Thread(ThreadGroup group, Runnable runnable) {
    * @param group ThreadGroup to which the new Thread will belong
    * @param runnable a java.lang.Runnable whose method <code>run</code> will
    *        be executed by the new Thread
-   * @param name Name for the Thread being created
+   * @param threadName Name for the Thread being created
    * @param stack Platform dependent stack size
    * @throws SecurityException if <code>group.checkAccess()</code> fails
    *         with a SecurityException

File: jre_emul/android/frameworks/base/core/java/android/test/suitebuilder/annotation/Smoke.java
Patch:
@@ -25,8 +25,6 @@
  * Marks a test that should run as part of the smoke tests.
  * The <code>android.test.suitebuilder.SmokeTestSuiteBuilder</code>
  * will run all tests with this annotation.
- *
- * @see android.test.suitebuilder.SmokeTestSuiteBuilder
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE})

File: jre_emul/android/frameworks/base/core/java/android/text/Editable.java
Patch:
@@ -19,8 +19,7 @@
 /**
  * This is the interface for text whose content and markup
  * can be changed (as opposed
- * to immutable text like Strings).  If you make a {@link DynamicLayout}
- * of an Editable, the layout will be reflowed as the text is changed.
+ * to immutable text like Strings).
  */
 public interface Editable
 extends CharSequence, GetChars, Spannable, Appendable

File: jre_emul/android/frameworks/base/core/java/android/text/TextUtils.java
Patch:
@@ -1013,15 +1013,15 @@ public enum TruncateAt {
         END_SMALL
     }
 
+    /* TODO(tball): enable if android.graphics is ever supported.
     public interface EllipsizeCallback {
         /**
          * This method is called to report that the specified region of
          * text was ellipsized away by a call to {@link #ellipsize}.
-         */
+         *
         public void ellipsized(int start, int end);
     }
 
-    /* TODO(tball): enable if android.graphics is ever supported.
     /**
      * Returns the original text if it fits in the specified width
      * given the properties of the specified Paint,

File: jre_emul/android/frameworks/base/core/java/android/util/Log.java
Patch:
@@ -297,9 +297,6 @@ public static int e(String tag, String msg, Throwable tr) {
     /**
      * What a Terrible Failure: Report a condition that should never happen.
      * The error will always be logged at level ASSERT with the call stack.
-     * Depending on system configuration, a report may be added to the
-     * {@link android.os.DropBoxManager} and/or the process may be terminated
-     * immediately with an error dialog.
      * @param tag Used to identify the source of a log message.
      * @param msg The message you would like logged.
      */

File: jre_emul/android/frameworks/base/core/java/android/util/Printer.java
Patch:
@@ -18,9 +18,7 @@
 
 /**
  * Simple interface for printing text, allowing redirection to various
- * targets.  Standard implementations are {@link android.util.LogPrinter},
- * {@link android.util.StringBuilderPrinter}, and
- * {@link android.util.PrintWriterPrinter}.
+ * targets.
  */
 public interface Printer {
     /**

File: jre_emul/android/libcore/luni/src/main/java/java/io/Console.java
Patch:
@@ -21,8 +21,8 @@
 import static libcore.io.OsConstants.*;
 
 /**
- * Provides access to the console, if available. The system-wide instance can
- * be accessed via {@link java.lang.System#console}.
+ * Provides access to the console, if available.
+ *
  * @since 1.6
  */
 public final class Console implements Flushable {

File: jre_emul/android/libcore/luni/src/main/java/java/io/ObjectInputStream.java
Patch:
@@ -541,10 +541,10 @@ public int read() throws IOException {
      *
      * @param buffer
      *            the array in which to store the bytes read.
-     * @param offset
+     * @param byteOffset
      *            the initial position in {@code buffer} to store the bytes
      *            read from the source stream.
-     * @param length
+     * @param byteCount
      *            the maximum number of bytes to store in {@code buffer}.
      * @return the number of bytes read or -1 if the end of the source input
      *         stream has been reached.

File: jre_emul/android/libcore/luni/src/main/java/java/io/Serializable.java
Patch:
@@ -91,7 +91,7 @@
  *
  * <h3>Recommended Alternatives</h3>
  * <strong>JSON</strong> is concise, human-readable and efficient. Android
- * includes both a {@link android.util.JsonReader streaming API} and a {@link
+ * includes both a android.util.JsonReader streaming API and a {@link
  * org.json.JSONObject tree API} to read and write JSON. Use a binding library
  * like <a href="http://code.google.com/p/google-gson/">GSON</a> to read and
  * write Java objects directly.

File: jre_emul/android/libcore/luni/src/main/java/java/net/URL.java
Patch:
@@ -63,8 +63,6 @@
  *     Transfer Protocol</a>
  * <li><strong>https</strong>: <a href="http://www.ietf.org/rfc/rfc2818.txt">HTTP
  *     over TLS</a>
- * <li><strong>jar</strong>: read {@link JarFile Jar files} from the
- *     filesystem</li>
  * </ul>
  * In general, attempts to create URLs with any other protocol will fail with a
  * {@link MalformedURLException}. Applications may install handlers for other

File: jre_emul/android/libcore/luni/src/main/java/java/net/URLConnection.java
Patch:
@@ -68,8 +68,6 @@
  *   <li><strong>HTTP and HTTPS</strong><br>
  *      Refer to the {@link HttpURLConnection} and {@link
  *      javax.net.ssl.HttpsURLConnection HttpsURLConnection} subclasses.
- *   <li><strong>Jar</strong><br>
- *      Refer to the {@link JarURLConnection} subclass.
  * </ul>
  *
  * <h3>Registering Additional Protocols</h3>

File: jre_emul/android/libcore/luni/src/main/java/java/security/SecureRandom.java
Patch:
@@ -46,8 +46,6 @@
  * <p>Note that the output of a {@code SecureRandom} instance should never
  * be relied upon to be deterministic. For deterministic output from a given
  * input, see {@link MessageDigest} which provides one-way hash functions.
- * For deriving keys from passwords, see
- * {@link javax.crypto.SecretKeyFactory}.
  *
  * <h3><a name="insecure_seed">Seeding {@code SecureRandom} may be
  * insecure</a></h3>

File: jre_emul/android/libcore/luni/src/main/java/java/text/CollationKey.java
Patch:
@@ -76,7 +76,6 @@
  * </blockquote>
  *
  * @see Collator
- * @see RuleBasedCollator
  */
 public abstract class CollationKey implements Comparable<CollationKey> {
     private final String source;

File: jre_emul/android/libcore/luni/src/main/java/java/text/SimpleDateFormat.java
Patch:
@@ -41,9 +41,7 @@
  * pattern describing what strings are produced/accepted, but almost all
  * callers should use {@link DateFormat#getDateInstance}, {@link DateFormat#getDateTimeInstance},
  * or {@link DateFormat#getTimeInstance} to get a ready-made instance suitable for the user's
- * locale. In cases where the system does not provide a suitable pattern, see
- * {@link android.text.format.DateFormat#getBestDateTimePattern} which lets you specify
- * the elements you'd like in a pattern and get back a pattern suitable for any given locale.
+ * locale.
  *
  * <p>The main reason you'd create an instance this class directly is because you need to
  * format/parse a specific machine-readable format, in which case you almost certainly want

File: jre_emul/android/libcore/luni/src/main/java/java/util/Locale.java
Patch:
@@ -326,7 +326,6 @@ public Locale(String language, String country, String variant) {
      * offer their own {@code getAvailableLocales} method, which should be
      * preferred over this general purpose method.
      *
-     * @see java.text.BreakIterator#getAvailableLocales()
      * @see java.text.Collator#getAvailableLocales()
      * @see java.text.DateFormat#getAvailableLocales()
      * @see java.text.DateFormatSymbols#getAvailableLocales()

File: jre_emul/apache_harmony/classlib/modules/luni-kernel/src/main/java/java/lang/ThreadGroup.java
Patch:
@@ -597,8 +597,6 @@ public String toString() {
      * @param t the Thread that terminated with an uncaught exception
      * @param e the uncaught exception itself
      *
-     * @see Thread#stop()
-     * @see Thread#stop(Throwable)
      * @see ThreadDeath
      */
     public void uncaughtException(Thread t, Throwable e) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -324,6 +324,6 @@ protected String getAnnotationConstructorSignature(ITypeBinding annotation) {
   }
 
   protected String generateExpression(Expression expr) {
-    return StatementGenerator.generate(expr, false, getBuilder().getCurrentLine());
+    return StatementGenerator.generate(expr, getBuilder().getCurrentLine());
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -190,7 +190,7 @@ protected static List<String> getComGoogleDevtoolsJ2objcPath() {
   }
 
   protected String generateStatement(Statement statement) {
-    return StatementGenerator.generate(statement, false, SourceBuilder.BEGINNING_OF_FILE).trim();
+    return StatementGenerator.generate(statement, SourceBuilder.BEGINNING_OF_FILE).trim();
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -441,7 +441,7 @@ public void testAssertMessage() throws IOException {
     String translation = translateSourceFile(
         "class Test { void test(int i) { assert i == 0 : i; }}", "Test", "Test.m");
     assertTranslation(translation,
-        "NSAssert(i == 0, [JavaLangInteger_valueOfWithInt_(i) description]);");
+        "JreAssert(i == 0, JavaLangInteger_valueOfWithInt_(i));");
   }
 
   public void testNonWrapperObjectTypeCastToPrimitive() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/UnsequencedExpressionRewriterTest.java
Patch:
@@ -137,8 +137,7 @@ public void testAssertStatement() throws IOException {
         "jint unseq$1 = i++;",
         "jboolean unseq$2 = unseq$1 + i++ == 0;",
         "jint unseq$3 = i++;",
-        " NSAssert(unseq$2, [JreStrcat(\"$II\" J2OBJC_COMMA() @\"foo\" J2OBJC_COMMA() unseq$3"
-          + " J2OBJC_COMMA() i++) description]);");
+        "JreAssert(unseq$2, JreStrcat(\"$II\", @\"foo\", unseq$3, i++));");
   }
 
   public void testForInitStatements() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/ast/CreationReference.java
Patch:
@@ -27,7 +27,7 @@ public CreationReference(org.eclipse.jdt.core.dom.CreationReference jdtNode) {
 
   public CreationReference(CreationReference other) {
     super(other);
-    type.set(other.getType());
+    type.copyFrom(other.getType());
   }
 
   @Override

File: guava/sources/com/google/common/collect/Collections2.java
Patch:
@@ -198,12 +198,12 @@ public boolean remove(Object element) {
 
     @Override
     public boolean removeAll(final Collection<?> collection) {
-      return Iterables.removeIf(unfiltered, and(predicate, in(collection)));
+      return Iterables.removeIf(unfiltered, and(predicate, Predicates.<Object>in(collection)));
     }
 
     @Override
     public boolean retainAll(final Collection<?> collection) {
-      return Iterables.removeIf(unfiltered, and(predicate, not(in(collection))));
+      return Iterables.removeIf(unfiltered, and(predicate, not(Predicates.<Object>in(collection))));
     }
 
     @Override

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -648,7 +648,7 @@ public boolean visit(LambdaExpression node) {
     buffer.append(" class], @protocol(");
     buffer.append(functionalClassName);
     buffer.append("), @\"");
-    buffer.append(nameTable.getFullName(node.getTypeBinding()));
+    buffer.append(nameTable.getFullLambdaName(node.getMethodBinding()));
     buffer.append("\", @selector(");
     buffer.append(nameTable.getMethodSelector(functionalInterface));
     buffer.append("), ^");

File: jre_emul/Classes/java/lang/System.java
Patch:
@@ -189,9 +189,7 @@ public native static Properties getProperties() /*-[
       #undef J2OBJC_BUILD_ARCH_STRINGIFY
 
       NSString *versionString;
-#if TARGET_OS_IPHONE_SIMULATOR
-      BOOL onSimulator = YES;
-#else
+#if !TARGET_OS_IPHONE && !TARGET_OS_IPHONE_SIMULATOR
       BOOL onSimulator = NO;
 #endif
       // During compile time, see if [NSProcessInfo processInfo].operatingSystemVersion is available

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/ForkJoinPool.java
Patch:
@@ -2283,7 +2283,7 @@ private boolean tryTerminate(boolean now, boolean enable) {
      * least one task.
      */
     static WorkQueue commonSubmitterQueue() {
-        Submitter z; ForkJoinPool p; WorkQueue[] ws; int m, r;
+        Submitter z; ForkJoinPool p; WorkQueue[] ws; int m;
         return ((z = submitters.get()) != null &&
                 (p = common) != null &&
                 (ws = p.workQueues) != null &&

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -645,7 +645,9 @@ public boolean visit(LambdaExpression node) {
     }
     buffer.append('[');
     buffer.append(functionalClassName);
-    buffer.append(" class], @\"");
+    buffer.append(" class], @protocol(");
+    buffer.append(functionalClassName);
+    buffer.append("), @\"");
     buffer.append(nameTable.getFullName(node.getTypeBinding()));
     buffer.append("\", @selector(");
     buffer.append(nameTable.getMethodSelector(functionalInterface));

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.Sets;
 import com.google.devtools.j2objc.Options;
 import com.google.devtools.j2objc.ast.CompilationUnit;
+import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -129,7 +130,8 @@ public static void addImports(
       return;
     }
     binding = unit.getTypeEnv().mapType(binding.getErasure());
-    if (FOUNDATION_TYPES.contains(binding.getName())) {
+    // We don't need imports for foundation types or lambdas.
+    if (FOUNDATION_TYPES.contains(binding.getName()) || BindingUtil.isLambda(binding)) {
       return;
     }
     imports.add(new Import(binding, unit.getNameTable()));

File: translator/src/main/java/com/google/devtools/j2objc/translate/UnsequencedExpressionRewriter.java
Patch:
@@ -260,7 +260,7 @@ private void extractConditionalExpression(
       List<Statement> elseStmts = elseBlock.getStatements();
       extractOrderedAccesses(elseStmts, elseExpr, elseAccesses);
       // The recursive call might replace the else expression child.
-      thenExpr = conditional.getElseExpression();
+      elseExpr = conditional.getElseExpression();
       elseStmts.add(new ExpressionStatement(
           new Assignment(new SimpleName(resultVar), elseExpr.copy())));
     } else {

File: translator/src/main/java/com/google/devtools/j2objc/translate/OperatorRewriter.java
Patch:
@@ -284,7 +284,7 @@ private static String getPromotionSuffix(Assignment node) {
       return "F";
     }
     if (lhs == 'J' || rhs == 'J') {
-      return "L";
+      return "J";
     }
     return "I";
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -67,16 +67,16 @@ public void endVisit(CastExpression node) {
       assert type.isPrimitive();  // Java wouldn't allow a cast from primitive to non-primitive.
       switch (type.getBinaryName().charAt(0)) {
         case 'J':
-          node.replaceWith(rewriteFloatToIntegralCast(type, expr, "J2ObjCFpToLong", type));
+          node.replaceWith(rewriteFloatToIntegralCast(type, expr, "JreFpToLong", type));
           return;
         case 'C':
-          node.replaceWith(rewriteFloatToIntegralCast(type, expr, "J2ObjCFpToUnichar", type));
+          node.replaceWith(rewriteFloatToIntegralCast(type, expr, "JreFpToChar", type));
           return;
         case 'B':
         case 'S':
         case 'I':
           node.replaceWith(rewriteFloatToIntegralCast(
-              type, expr, "J2ObjCFpToInt", typeEnv.resolveJavaType("int")));
+              type, expr, "JreFpToInt", typeEnv.resolveJavaType("int")));
           return;
       }
       // else fall-through.

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeUtil.java
Patch:
@@ -108,7 +108,7 @@ public static <T extends TreeNode> T getNearestAncestorWithType(Class<T> type, T
   /**
    * Returns the first descendant of the given node that is not a ParenthesizedExpression.
    */
-  public static TreeNode trimParentheses(TreeNode node) {
+  public static Expression trimParentheses(Expression node) {
     while (node instanceof ParenthesizedExpression) {
       node = ((ParenthesizedExpression) node).getExpression();
     }
@@ -231,6 +231,7 @@ public static List<BodyDeclaration> asDeclarationSublist(BodyDeclaration node) {
    * represents a variable. Returns null otherwise.
    */
   public static IVariableBinding getVariableBinding(Expression node) {
+    node = trimParentheses(node);
     switch (node.getKind()) {
       case FIELD_ACCESS:
         return ((FieldAccess) node).getVariableBinding();

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -642,8 +642,7 @@ public void testStringAddOperator() throws IOException {
         "import java.util.*; public class A { String myString;"
         + "  A() { myString = \"Foo\"; myString += \"Bar\"; }}",
         "A", "A.m");
-    assertTranslation(translation,
-        "A_set_myString_(self, JreStrcat(\"$$\", self->myString_, @\"Bar\"));");
+    assertTranslation(translation, "JreStrAppendStrong(&self->myString_, \"$\", @\"Bar\");");
   }
 
   public void testPrimitiveConstantInSwitchCase() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/ArrayRewriter.java
Patch:
@@ -269,7 +269,6 @@ private Expression newArrayAccess(
     ITypeBinding declaredReturnType =
         componentType.isPrimitive() ? componentType : typeEnv.resolveIOSType("id");
     if (assignable) {
-      assert componentType.isPrimitive();
       funcName += "Ref";
       returnType = declaredReturnType = typeEnv.getPointerType(componentType);
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ArrayRewriter.java
Patch:
@@ -269,6 +269,7 @@ private Expression newArrayAccess(
     ITypeBinding declaredReturnType =
         componentType.isPrimitive() ? componentType : typeEnv.resolveIOSType("id");
     if (assignable) {
+      assert componentType.isPrimitive();
       funcName += "Ref";
       returnType = declaredReturnType = typeEnv.getPointerType(componentType);
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ArrayRewriter.java
Patch:
@@ -269,7 +269,6 @@ private Expression newArrayAccess(
     ITypeBinding declaredReturnType =
         componentType.isPrimitive() ? componentType : typeEnv.resolveIOSType("id");
     if (assignable) {
-      assert componentType.isPrimitive();
       funcName += "Ref";
       returnType = declaredReturnType = typeEnv.getPointerType(componentType);
     }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -164,8 +164,8 @@ public void testStaticVariableInOtherVariable() throws IOException {
     String translation = translateSourceFile("public class Example { "
         + "void test() { Bar.FOO=2; } } class Bar { public static int FOO=1; }",
        "Example", "Example.m");
-    assertTranslation(translation, "int Bar_FOO_ = 1;");
-    assertTranslation(translation, "*Bar_getRef_FOO_() = 2;");
+    assertTranslation(translation, "jint Bar_FOO_ = 1;");
+    assertTranslation(translation, "*JreLoadStaticRef(Bar, FOO_) = 2;");
   }
 
   public void testNSObjectMessageRename() throws IOException {
@@ -396,7 +396,7 @@ public void testEnumWithEnumField() throws IOException {
     assertFalse(impl.contains("\n  return NO;\n  [super initWithTest_TypeEnum:arg$0]}"));
     assertTranslation(impl,
         "Test_FieldEnum_STRING = new_Test_Field_$1Enum_initWithTest_TypeEnum_withNSString_withInt_("
-        + "Test_TypeEnum_get_STRING(), @\"STRING\", 2);");
+        + "JreLoadStatic(Test_TypeEnum, STRING), @\"STRING\", 2);");
   }
 
   public void testAutoreleasePoolMethod() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/TypeImplementationGeneratorTest.java
Patch:
@@ -57,7 +57,8 @@ public void testFunctionLineNumbers() throws IOException {
         + "  }}", "A", "A.m");
     assertTranslatedLines(translation,
         "#line 3", "void A_test() {", "A_initialize();", "", "#line 4",
-        "[((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithId:A_class_()];");
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
+          + "printlnWithId:A_class_()];");
   }
 
   // Regression for non-static constants used in switch statements.

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -218,7 +218,8 @@ public void testFinalVarInEnhancedForStatement() throws IOException {
         + "  }}}";
     String translation = translateSourceFile(source, "Test", "Test.m");
     assertTranslation(translation,
-        "[((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:val$s_];");
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
+        + "printlnWithNSString:val$s_];");
   }
 
   public void testMethodVarInNestedAnonymousClass() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -122,7 +122,7 @@ public void testStaticInitializerBlock() throws IOException {
         "+ (void)initialize {",
         "if (self == [Test class]) {",
         "{",
-        "[((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) "
+        "[((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
             + "printlnWithNSString:@\"foo\"];");
   }
 
@@ -143,7 +143,8 @@ public void testInitializerMovedToDesignatedConstructor() throws IOException {
         "  {",
         "    Test_setAndConsume_date_(self, new_JavaUtilDate_init());",
         "  }",
-        "  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithInt:i];",
+        "  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out_))) "
+          + "printlnWithInt:i];",
         "}");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -397,7 +397,7 @@ public void testRetainedLocalRef() throws IOException {
     assertNotInTranslation(translation, "RetainedLocalRef");
     assertTranslation(translation, "ComGoogleJ2objcUtilScopedLocalRef *c = "
         + "[new_ComGoogleJ2objcUtilScopedLocalRef_initWithId_("
-        + "NSString_get_CASE_INSENSITIVE_ORDER_()) autorelease];");
+        + "JreLoadStatic(NSString, CASE_INSENSITIVE_ORDER_)) autorelease];");
     assertTranslation(translation,
         "return [((id<JavaUtilComparator>) nil_chk(((id<JavaUtilComparator>) "
         + "check_protocol_cast(c->var_, @protocol(JavaUtilComparator))))) "

File: translator/src/main/java/com/google/devtools/j2objc/ast/LambdaExpression.java
Patch:
@@ -97,6 +97,7 @@ public void setBody(TreeNode newBody) {
   @Override
   protected void acceptInner(TreeVisitor visitor) {
     if (visitor.visit(this)) {
+      parameters.accept(visitor);
       body.accept(visitor);
     }
     visitor.endVisit(this);

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Posix.java
Patch:
@@ -920,7 +920,7 @@ private native int preadBytes(FileDescriptor fd, Object buffer, int bufferOffset
         return -1;
     }
     int rc =
-      TEMP_FAILURE_RETRY(pwrite64([fd getInt$], bytes + bufferOffset, byteCount, offset));
+      TEMP_FAILURE_RETRY(pread64([fd getInt$], bytes + bufferOffset, byteCount, offset));
     return LibcoreIoPosix_throwIfMinusOneWithNSString_withInt_(@"pread", rc);
   ]-*/;
 

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/TypeCollector.java
Patch:
@@ -59,7 +59,7 @@ public void visitType(ITypeBinding type) {
       return;
     }
     type = getElementType(type);
-    if (allTypes.containsKey(type.getKey()) || type.isPrimitive()) {
+    if (allTypes.containsKey(type.getKey()) || type.isPrimitive() || type.isRawType()) {
       return;
     }
     if (hasNestedWildcard(type)) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -428,7 +428,7 @@ private void printUnprefixedAlias() {
           // Protocols can't be used in typedefs.
           printf("\n#define %s %s\n", unprefixedName, typeName);
         } else {
-          printf("\ntypedef %s %s;\n", typeName, unprefixedName);
+          printf("\n@compatibility_alias %s %s;\n", unprefixedName, typeName);
         }
       }
     }

File: translator/src/test/java/com/google/devtools/j2objc/J2ObjCTest.java
Patch:
@@ -65,7 +65,6 @@ private void makeAssertions(String exampleH, String exampleM, String packageInfo
     assertTranslation(exampleH, "interface CBTExample : NSObject");
     assertTranslation(exampleH, "- (instancetype)init;");
     assertTranslation(exampleH, "J2OBJC_EMPTY_STATIC_INIT(CBTExample)");
-    assertTranslation(exampleH, "typedef CBTExample");
     assertTranslation(exampleH, "J2OBJC_TYPE_LITERAL_HEADER(CBTExample)");
     assertTranslation(exampleM, "@implementation CBTExample");
     assertTranslation(exampleM, "- (instancetype)init {");

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -811,7 +811,7 @@ public void testPackageInfoPrefixAnnotation() throws IOException {
             + "public class Test {}",
         "foo.bar.mumble.Test", "foo/bar/mumble/Test.h");
     assertTranslation(translation, "@interface FBMTest");
-    assertTranslation(translation, "typedef FBMTest FooBarMumbleTest;");
+    assertTranslation(translation, "@compatibility_alias FooBarMumbleTest FBMTest;");
     translation = getTranslatedFile("foo/bar/mumble/Test.m");
     assertTranslation(translation, "@implementation FBMTest");
     assertNotInTranslation(translation, "FooBarMumbleTest");
@@ -828,7 +828,7 @@ public void testPackageInfoPreprocessing() throws IOException {
         + "public class Test {}",
         "foo.bar.mumble.Test", "foo/bar/mumble/Test.h");
     assertTranslation(translation, "@interface FBMTest");
-    assertTranslation(translation, "typedef FBMTest FooBarMumbleTest;");
+    assertTranslation(translation, "@compatibility_alias FooBarMumbleTest FBMTest;");
     translation = getTranslatedFile("foo/bar/mumble/Test.m");
     assertTranslation(translation, "@implementation FBMTest");
     assertNotInTranslation(translation, "FooBarMumbleTest");
@@ -861,7 +861,7 @@ public void testPackageInfoOnClasspath() throws IOException {
           + "public class Test {}",
           "foo.bar.mumble.Test", "foo/bar/mumble/Test.h");
       assertTranslation(translation, "@interface FBMTest");
-      assertTranslation(translation, "typedef FBMTest FooBarMumbleTest;");
+      assertTranslation(translation, "@compatibility_alias FooBarMumbleTest FBMTest;");
       translation = getTranslatedFile("foo/bar/mumble/Test.m");
       assertTranslation(translation, "@implementation FBMTest");
       assertNotInTranslation(translation, "FooBarMumbleTest");

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -288,7 +288,7 @@ public void testRenamePackageAnnotation() throws IOException {
     String translation = translateSourceFile("foo.bar.Test", "foo/bar/Test.h");
     assertTranslation(translation, "@interface FBTest : NSObject");
     assertTranslation(translation, "J2OBJC_EMPTY_STATIC_INIT(FBTest)");
-    assertTranslation(translation, "typedef FBTest FooBarTest;");
+    assertTranslation(translation, "@compatibility_alias FooBarTest FBTest;");
 
     translation = getTranslatedFile("foo/bar/Test.m");
     assertTranslation(translation, "#include \"foo/bar/Test.h\""); // should be full path.
@@ -309,7 +309,7 @@ public void testRenamePackageAnnotationEnum() throws IOException {
     assertTranslation(translation, "+ (FBTestEnum *)valueOfWithNSString:(NSString *)name;");
     assertTranslation(translation, "FBTestEnum *FBTestEnum_valueOfWithNSString_");
     assertTranslation(translation, "J2OBJC_STATIC_INIT(FBTestEnum");
-    assertTranslation(translation, "typedef FBTestEnum FooBarTestEnum;");
+    assertTranslation(translation, "@compatibility_alias FooBarTestEnum FBTestEnum;");
 
     translation = getTranslatedFile("foo/bar/Test.m");
     assertTranslation(translation, "#include \"foo/bar/Test.h\""); // should be full path.

File: translator/src/test/java/com/google/devtools/j2objc/J2ObjCTest.java
Patch:
@@ -65,6 +65,7 @@ private void makeAssertions(String exampleH, String exampleM, String packageInfo
     assertTranslation(exampleH, "interface CBTExample : NSObject");
     assertTranslation(exampleH, "- (instancetype)init;");
     assertTranslation(exampleH, "J2OBJC_EMPTY_STATIC_INIT(CBTExample)");
+    assertTranslation(exampleH, "typedef CBTExample");
     assertTranslation(exampleH, "J2OBJC_TYPE_LITERAL_HEADER(CBTExample)");
     assertTranslation(exampleM, "@implementation CBTExample");
     assertTranslation(exampleM, "- (instancetype)init {");

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -288,7 +288,7 @@ public void testRenamePackageAnnotation() throws IOException {
     String translation = translateSourceFile("foo.bar.Test", "foo/bar/Test.h");
     assertTranslation(translation, "@interface FBTest : NSObject");
     assertTranslation(translation, "J2OBJC_EMPTY_STATIC_INIT(FBTest)");
-    assertTranslation(translation, "@compatibility_alias FooBarTest FBTest;");
+    assertTranslation(translation, "typedef FBTest FooBarTest;");
 
     translation = getTranslatedFile("foo/bar/Test.m");
     assertTranslation(translation, "#include \"foo/bar/Test.h\""); // should be full path.
@@ -309,7 +309,7 @@ public void testRenamePackageAnnotationEnum() throws IOException {
     assertTranslation(translation, "+ (FBTestEnum *)valueOfWithNSString:(NSString *)name;");
     assertTranslation(translation, "FBTestEnum *FBTestEnum_valueOfWithNSString_");
     assertTranslation(translation, "J2OBJC_STATIC_INIT(FBTestEnum");
-    assertTranslation(translation, "@compatibility_alias FooBarTestEnum FBTestEnum;");
+    assertTranslation(translation, "typedef FBTestEnum FooBarTestEnum;");
 
     translation = getTranslatedFile("foo/bar/Test.m");
     assertTranslation(translation, "#include \"foo/bar/Test.h\""); // should be full path.

File: translator/src/test/java/com/google/devtools/j2objc/J2ObjCTest.java
Patch:
@@ -65,7 +65,6 @@ private void makeAssertions(String exampleH, String exampleM, String packageInfo
     assertTranslation(exampleH, "interface CBTExample : NSObject");
     assertTranslation(exampleH, "- (instancetype)init;");
     assertTranslation(exampleH, "J2OBJC_EMPTY_STATIC_INIT(CBTExample)");
-    assertTranslation(exampleH, "typedef CBTExample");
     assertTranslation(exampleH, "J2OBJC_TYPE_LITERAL_HEADER(CBTExample)");
     assertTranslation(exampleM, "@implementation CBTExample");
     assertTranslation(exampleM, "- (instancetype)init {");

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -288,7 +288,7 @@ public void testRenamePackageAnnotation() throws IOException {
     String translation = translateSourceFile("foo.bar.Test", "foo/bar/Test.h");
     assertTranslation(translation, "@interface FBTest : NSObject");
     assertTranslation(translation, "J2OBJC_EMPTY_STATIC_INIT(FBTest)");
-    assertTranslation(translation, "typedef FBTest FooBarTest;");
+    assertTranslation(translation, "@compatibility_alias FooBarTest FBTest;");
 
     translation = getTranslatedFile("foo/bar/Test.m");
     assertTranslation(translation, "#include \"foo/bar/Test.h\""); // should be full path.
@@ -309,7 +309,7 @@ public void testRenamePackageAnnotationEnum() throws IOException {
     assertTranslation(translation, "+ (FBTestEnum *)valueOfWithNSString:(NSString *)name;");
     assertTranslation(translation, "FBTestEnum *FBTestEnum_valueOfWithNSString_");
     assertTranslation(translation, "J2OBJC_STATIC_INIT(FBTestEnum");
-    assertTranslation(translation, "typedef FBTestEnum FooBarTestEnum;");
+    assertTranslation(translation, "@compatibility_alias FooBarTestEnum FBTestEnum;");
 
     translation = getTranslatedFile("foo/bar/Test.m");
     assertTranslation(translation, "#include \"foo/bar/Test.h\""); // should be full path.

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeUtil.java
Patch:
@@ -335,6 +335,9 @@ public static void insertBefore(Statement node, Statement toInsert) {
    * Replaces (in place) a QualifiedName node with an equivalent FieldAccess
    * node. This is helpful when a mutation needs to replace the qualifier with
    * a node that has Expression type but not Name type.
+   * CAUTION: It is strongly recommended that this method be used within a
+   * "visit", and not a "endVisit" because it will rewrite all QualifiedNode
+   * ancestors.
    */
   public static FieldAccess convertToFieldAccess(QualifiedName node) {
     TreeNode parent = node.getParent();

File: annotations/src/main/java/com/google/j2objc/annotations/J2ObjCIncompatible.java
Patch:
@@ -22,8 +22,8 @@
 /**
  * Marks a declaration to be stripped by the J2ObjC translator prior to
  * compilation. It is the developer's responsibility to ensure that any code
- * depending on an element marked with @J2ObjCIncompatible is also marked with
- * @J2ObjCIncompatible.
+ * depending on an element marked with {@literal @}J2ObjCIncompatible is also
+ * marked with {@literal @}J2ObjCIncompatible.
  *
  * @author Keith Stanger
  */

File: translator/src/main/java/com/google/devtools/j2objc/ast/Dimension.java
Patch:
@@ -29,8 +29,6 @@ public Dimension(org.eclipse.jdt.core.dom.Dimension jdtNode) {
     for (Object x : jdtNode.annotations()) {
       annotations.add((Annotation) TreeConverter.convert(x));
     }
-    System.out.println(jdtNode);
-    System.out.println(this);
   }
 
   public Dimension(Dimension other) {

File: protobuf/tests/CompatibilityTest.java
Patch:
@@ -167,6 +167,8 @@ public void testSetAndGetRepeatedString() throws Exception {
     TypicalData data = TypicalData.newBuilder().addRepeatedString("coin").build();
     assertEquals(1, data.getRepeatedStringCount());
     assertEquals("coin", data.getRepeatedString(0));
+    List<String> list = data.getRepeatedStringList();
+    assertEquals(1, list.size());
   }
 
   public void testSetAndGetRepeatedBytes() throws Exception {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -153,8 +153,8 @@ protected void printStaticAccessors() {
                   NameTable.capitalize(accessorName), objcType, varName);
             } else {
               printf("\n+ (void)set%s:(%s)value {\n  %s_set_%s(value);\n}\n",
-                  NameTable.capitalize(accessorName), objcType,
-                  typeBinding.getName(), nameTable.getVariableShortName(varBinding));
+                  NameTable.capitalize(accessorName), objcType, typeName,
+                  nameTable.getVariableShortName(varBinding));
             }
           }
         }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ComplexExpressionExtractor.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.translate;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.devtools.j2objc.ast.Assignment;
@@ -116,7 +115,7 @@ public void endVisit(MethodDeclaration node) {
 
   @Override
   public void endVisit(InfixExpression node) {
-    handleNode(node, ImmutableList.of(node.getLeftOperand(), node.getRightOperand()));
+    handleNode(node, node.getOperands());
   }
 
   @Override

File: translator/src/test/java/com/google/devtools/j2objc/translate/OuterReferenceResolverTest.java
Patch:
@@ -113,7 +113,7 @@ public void testCapturedLocalVariable() {
     assertEquals("val$i", innerFields.get(0).getName());
 
     InfixExpression addition = (InfixExpression) nodesByType.get(Kind.INFIX_EXPRESSION).get(0);
-    List<IVariableBinding> iPath = outerResolver.getPath(addition.getLeftOperand());
+    List<IVariableBinding> iPath = outerResolver.getPath(addition.getOperands().get(0));
     assertNotNull(iPath);
     assertEquals(1, iPath.size());
     assertEquals("val$i", iPath.get(0).getName());

File: translator/src/main/java/com/google/devtools/j2objc/ast/ExpressionMethodReference.java
Patch:
@@ -16,7 +16,7 @@
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 /**
- * Expression method reference node type (added in JLS8 API).
+ * Expression method reference node type (added in JLS8, section 15.13).
  */
 public class ExpressionMethodReference extends MethodReference {
   private final ITypeBinding typeBinding;

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeConverter.java
Patch:
@@ -114,6 +114,8 @@ public static TreeNode convertInner(ASTNode jdtNode) {
         return new IfStatement((org.eclipse.jdt.core.dom.IfStatement) jdtNode);
       case ASTNode.INFIX_EXPRESSION:
         return new InfixExpression((org.eclipse.jdt.core.dom.InfixExpression) jdtNode);
+      case ASTNode.INTERSECTION_TYPE:
+        return new IntersectionType((org.eclipse.jdt.core.dom.IntersectionType) jdtNode);
       case ASTNode.INITIALIZER:
         return new Initializer((org.eclipse.jdt.core.dom.Initializer) jdtNode);
       case ASTNode.INSTANCEOF_EXPRESSION:

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -188,6 +188,7 @@ public enum Kind {
     INFIX_EXPRESSION,
     INITIALIZER,
     INSTANCEOF_EXPRESSION,
+    INTERSECTION_TYPE,
     JAVADOC,
     LABELED_STATEMENT,
     LAMBDA_EXPRESSION,

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeConverter.java
Patch:
@@ -99,6 +99,9 @@ public static TreeNode convertInner(ASTNode jdtNode) {
             (org.eclipse.jdt.core.dom.EnumConstantDeclaration) jdtNode);
       case ASTNode.ENUM_DECLARATION:
         return new EnumDeclaration((org.eclipse.jdt.core.dom.EnumDeclaration) jdtNode);
+      case ASTNode.EXPRESSION_METHOD_REFERENCE:
+        return new ExpressionMethodReference(
+            (org.eclipse.jdt.core.dom.ExpressionMethodReference) jdtNode);
       case ASTNode.EXPRESSION_STATEMENT:
         return new ExpressionStatement((org.eclipse.jdt.core.dom.ExpressionStatement) jdtNode);
       case ASTNode.FIELD_ACCESS:

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -177,6 +177,7 @@ public enum Kind {
     ENHANCED_FOR_STATEMENT,
     ENUM_CONSTANT_DECLARATION,
     ENUM_DECLARATION,
+    EXPRESSION_METHOD_REFERENCE,
     EXPRESSION_STATEMENT,
     FIELD_ACCESS,
     FIELD_DECLARATION,

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -153,8 +153,8 @@ protected void printStaticAccessors() {
                   NameTable.capitalize(accessorName), objcType, varName);
             } else {
               printf("\n+ (void)set%s:(%s)value {\n  %s_set_%s(value);\n}\n",
-                  NameTable.capitalize(accessorName), objcType,
-                  typeBinding.getName(), nameTable.getVariableShortName(varBinding));
+                  NameTable.capitalize(accessorName), objcType, typeName,
+                  nameTable.getVariableShortName(varBinding));
             }
           }
         }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ComplexExpressionExtractor.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.translate;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.devtools.j2objc.ast.Assignment;
@@ -116,7 +115,7 @@ public void endVisit(MethodDeclaration node) {
 
   @Override
   public void endVisit(InfixExpression node) {
-    handleNode(node, ImmutableList.of(node.getLeftOperand(), node.getRightOperand()));
+    handleNode(node, node.getOperands());
   }
 
   @Override

File: translator/src/test/java/com/google/devtools/j2objc/translate/OuterReferenceResolverTest.java
Patch:
@@ -113,7 +113,7 @@ public void testCapturedLocalVariable() {
     assertEquals("val$i", innerFields.get(0).getName());
 
     InfixExpression addition = (InfixExpression) nodesByType.get(Kind.INFIX_EXPRESSION).get(0);
-    List<IVariableBinding> iPath = outerResolver.getPath(addition.getLeftOperand());
+    List<IVariableBinding> iPath = outerResolver.getPath(addition.getOperands().get(0));
     assertNotNull(iPath);
     assertEquals(1, iPath.size());
     assertEquals("val$i", iPath.get(0).getName());

File: translator/src/main/java/com/google/devtools/j2objc/ast/ExpressionMethodReference.java
Patch:
@@ -16,7 +16,7 @@
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 /**
- * Expression method reference node type (added in JLS8 API).
+ * Expression method reference node type (added in JLS8, section 15.13).
  */
 public class ExpressionMethodReference extends MethodReference {
   private final ITypeBinding typeBinding;

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeConverter.java
Patch:
@@ -114,6 +114,8 @@ public static TreeNode convertInner(ASTNode jdtNode) {
         return new IfStatement((org.eclipse.jdt.core.dom.IfStatement) jdtNode);
       case ASTNode.INFIX_EXPRESSION:
         return new InfixExpression((org.eclipse.jdt.core.dom.InfixExpression) jdtNode);
+      case ASTNode.INTERSECTION_TYPE:
+        return new IntersectionType((org.eclipse.jdt.core.dom.IntersectionType) jdtNode);
       case ASTNode.INITIALIZER:
         return new Initializer((org.eclipse.jdt.core.dom.Initializer) jdtNode);
       case ASTNode.INSTANCEOF_EXPRESSION:

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -188,6 +188,7 @@ public enum Kind {
     INFIX_EXPRESSION,
     INITIALIZER,
     INSTANCEOF_EXPRESSION,
+    INTERSECTION_TYPE,
     JAVADOC,
     LABELED_STATEMENT,
     LAMBDA_EXPRESSION,

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeConverter.java
Patch:
@@ -99,6 +99,9 @@ public static TreeNode convertInner(ASTNode jdtNode) {
             (org.eclipse.jdt.core.dom.EnumConstantDeclaration) jdtNode);
       case ASTNode.ENUM_DECLARATION:
         return new EnumDeclaration((org.eclipse.jdt.core.dom.EnumDeclaration) jdtNode);
+      case ASTNode.EXPRESSION_METHOD_REFERENCE:
+        return new ExpressionMethodReference(
+            (org.eclipse.jdt.core.dom.ExpressionMethodReference) jdtNode);
       case ASTNode.EXPRESSION_STATEMENT:
         return new ExpressionStatement((org.eclipse.jdt.core.dom.ExpressionStatement) jdtNode);
       case ASTNode.FIELD_ACCESS:

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -177,6 +177,7 @@ public enum Kind {
     ENHANCED_FOR_STATEMENT,
     ENUM_CONSTANT_DECLARATION,
     ENUM_DECLARATION,
+    EXPRESSION_METHOD_REFERENCE,
     EXPRESSION_STATEMENT,
     FIELD_ACCESS,
     FIELD_DECLARATION,

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeConverter.java
Patch:
@@ -119,6 +119,8 @@ public static TreeNode convertInner(ASTNode jdtNode) {
         return new Javadoc((org.eclipse.jdt.core.dom.Javadoc) jdtNode);
       case ASTNode.LABELED_STATEMENT:
         return new LabeledStatement((org.eclipse.jdt.core.dom.LabeledStatement) jdtNode);
+      case ASTNode.LAMBDA_EXPRESSION:
+        return new LambdaExpression((org.eclipse.jdt.core.dom.LambdaExpression) jdtNode);
       case ASTNode.LINE_COMMENT:
         return new LineComment((org.eclipse.jdt.core.dom.LineComment) jdtNode);
       case ASTNode.MARKER_ANNOTATION:

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -189,6 +189,7 @@ public enum Kind {
     INSTANCEOF_EXPRESSION,
     JAVADOC,
     LABELED_STATEMENT,
+    LAMBDA_EXPRESSION,
     LINE_COMMENT,
     MARKER_ANNOTATION,
     MEMBER_VALUE_PAIR,

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -245,6 +245,8 @@ public boolean visit(AssertStatement node) {
           unit.getSource().substring(startPos, startPos + node.getLength());
       assertStatementString = CharMatcher.WHITESPACE.trimFrom(assertStatementString);
       assertStatementString = makeQuotedString(assertStatementString);
+      // Avoid format-invalid-specific warnings.
+      assertStatementString = assertStatementString.replace("%", "%%");
       // Generates the following string:
       // filename.java:456 condition failed: foobar != fish.
       buffer.append("@\"" + TreeUtil.getSourceFileName(unit) + ":" + node.getLineNumber()
@@ -1133,7 +1135,7 @@ public boolean visit(Initializer node) {
     throw new AssertionError("initializer node not converted");
   }
 
-  // Returns a string where all characters that will interfer in
+  // Returns a string where all characters that will interfere in
   // a valid Objective-C string are quoted.
   private static String makeQuotedString(String originalString) {
     int location = 0;

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -965,6 +965,9 @@ private void printStringSwitchStatement(SwitchStatement node) {
 
   private static String getStringConstant(Expression expr) {
     Object constantValue = expr.getConstantValue();
+    if (constantValue == null) {
+      constantValue = TreeUtil.getVariableBinding(expr).getConstantValue();
+    }
     assert constantValue != null && constantValue instanceof String;
     return (String) constantValue;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/AbstractTypeBinding.java
Patch:
@@ -259,12 +259,10 @@ public boolean isSubTypeCompatible(ITypeBinding type) {
     throw new AssertionError("not implemented");
   }
 
-  @Override
   public IMethodBinding getFunctionalInterfaceMethod() {
     return null;
   }
 
-  @Override
   public IAnnotationBinding[] getTypeAnnotations() {
     return null;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedMethodBinding.java
Patch:
@@ -284,7 +284,6 @@ public String toString() {
     return sb.toString();
   }
 
-  @Override
   public ITypeBinding getDeclaredReceiverType() {
     return null;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedVariableBinding.java
Patch:
@@ -217,7 +217,6 @@ public String toString() {
     return sb.toString();
   }
 
-  @Override
   public boolean isEffectivelyFinal() {
     return false;
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -143,7 +143,9 @@ protected void printStaticAccessors() {
         if (!((FieldDeclaration) fragment.getParent()).hasPrivateDeclaration()) {
           IVariableBinding varBinding = fragment.getVariableBinding();
           String accessorName = nameTable.getVariableName(varBinding);
-          String varName = nameTable.getStaticVarQualifiedName(varBinding);
+          String varName = BindingUtil.isPrimitiveConstant(varBinding)
+              ? nameTable.getPrimitiveConstantName(varBinding)
+              : nameTable.getStaticVarQualifiedName(varBinding);
           String objcType = nameTable.getObjCType(varBinding.getType());
           printf("\n+ (%s)%s {\n  return %s;\n}\n", objcType, accessorName, varName);
           int modifiers = varBinding.getModifiers();

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/AnnotationPreProcessor.java
Patch:
@@ -78,7 +78,7 @@ public void process(Iterable<String> fileArgs) {
     compileArgs.add("-encoding");
     compileArgs.add(Options.getCharset().name());
     compileArgs.add("-source");
-    compileArgs.add("1.7");
+    compileArgs.add(Options.getSourceVersion());
     compileArgs.add("-s");
     compileArgs.add(tmpDirPath);
     compileArgs.add("-d");

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -208,7 +208,7 @@ private void printImplementedProtocols() {
    * Prints the list of static variable and/or enum constant accessor methods.
    */
   protected void printStaticAccessors() {
-    if (Options.staticAccessorMethods() && !Modifier.isPrivate(typeBinding.getModifiers())) {
+    if (Options.staticAccessorMethods()) {
       for (VariableDeclarationFragment fragment : getStaticFields()) {
         IVariableBinding var = fragment.getVariableBinding();
         String accessorName = nameTable.getVariableName(var);

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Posix.java
Patch:
@@ -967,7 +967,6 @@ public int read(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount)
 
   private native int readBytes(FileDescriptor fd, Object buffer, int offset, int byteCount)
       throws ErrnoException /*-[
-    IOSArray_checkRange([(IOSArray *)buffer length], offset, byteCount);
     char *bytes = BytesRW(buffer);
     if (!bytes) {
       return -1;

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -38,7 +38,6 @@
  *
  * @author Tom Ball
  */
-@SuppressWarnings("unchecked")
 public class RewriterTest extends GenerationTest {
 
   public void testContinueAndBreakUsingSameLabel() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -325,7 +325,7 @@ else if (arg.equals("--final-methods-as-functions")
           || arg.equals("--no-final-methods-functions")
           || arg.equals("--hide-private-members")
           || arg.equals("--no-hide-private-members")) {
-        break;
+        // ignore
       } else if (arg.startsWith("-")) {
         usage("invalid flag: " + arg);
       } else {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -18,7 +18,6 @@
 import com.google.devtools.j2objc.ast.AbstractTypeDeclaration;
 import com.google.devtools.j2objc.ast.BodyDeclaration;
 import com.google.devtools.j2objc.ast.Expression;
-import com.google.devtools.j2objc.ast.FieldDeclaration;
 import com.google.devtools.j2objc.ast.FunctionDeclaration;
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
 
@@ -65,8 +64,7 @@ private void printClassExtension() {
     if (isInterfaceType()) {
       return;
     }
-    Iterable<FieldDeclaration> privateFields = getInstanceFields();
-    boolean hasPrivateFields = !Iterables.isEmpty(privateFields);
+    boolean hasPrivateFields = !Iterables.isEmpty(getInstanceFields());
     Iterable<BodyDeclaration> privateDecls = getInnerDeclarations();
     if (!Iterables.isEmpty(privateDecls) || hasPrivateFields) {
       newline();

File: translator/src/main/java/com/google/devtools/j2objc/translate/StaticVarRewriter.java
Patch:
@@ -92,7 +92,7 @@ private void handleFieldAccess(Expression node, Expression maybeFieldAccess) {
       return;
     }
     FieldAccess fieldAccess = (FieldAccess) maybeFieldAccess;
-    if (!BindingUtil.isStatic(fieldAccess.getVariableBinding())) {
+    if (BindingUtil.isInstanceVar(fieldAccess.getVariableBinding())) {
       return;
     }
     Expression expr = fieldAccess.getExpression();

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -270,8 +270,6 @@ public void testCombinedGenerationOrdering() throws IOException {
     String header = translateCombinedFiles(
         "unit/Foo", ".h",
         "unit/TestDependent.java", "unit/AnotherTest.java", "unit/Test.java");
-    assertTranslation(header, "@class UnitTest");
-    assertTranslation(header, "@class UnitAnotherTest");
     assert header.indexOf("@interface UnitTest") < header.indexOf("@interface UnitAnotherTest");
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/pipeline/TranslationProcessor.java
Patch:
@@ -102,8 +102,6 @@ protected void processConvertedTree(ProcessingContext input, CompilationUnit uni
     }
 
     if (genUnit.isFullyParsed()) {
-      logger.finest("Processing compiled unit " + genUnit.getName()
-          + " of size " + genUnit.getCompilationUnits().size());
       generateObjectiveCSource(genUnit);
     }
   }
@@ -257,6 +255,7 @@ public static void generateObjectiveCSource(GenerationUnit unit) {
     assert unit.getOutputPath() != null;
     assert unit.isFullyParsed();
     TimeTracker ticker = getTicker(unit.getOutputPath());
+    logger.fine("Generating " + unit.getOutputPath());
     logger.finest("writing output file(s) to " + Options.getOutputDirectory().getAbsolutePath());
     ticker.push();
 

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/CycleFinder.java
Patch:
@@ -120,6 +120,7 @@ private File stripIncompatible(
   public List<List<Edge>> findCycles() throws IOException {
     final TypeCollector typeCollector = new TypeCollector();
     JdtParser parser = createParser(options);
+    final OuterReferenceResolver outerResolver = new OuterReferenceResolver();
 
     List<String> sourceFiles = options.getSourceFiles();
     File strippedDir = stripIncompatible(sourceFiles, parser);
@@ -137,7 +138,7 @@ public void handleParsedUnit(String path, org.eclipse.jdt.core.dom.CompilationUn
         CompilationUnit unit = TreeConverter.convertCompilationUnit(
             jdtUnit, path, FileUtil.getMainTypeName(file), source, null);
         typeCollector.visitAST(unit);
-        OuterReferenceResolver.resolve(unit);
+        outerResolver.run(unit);
       }
     };
     parser.parseFiles(sourceFiles, handler);
@@ -150,7 +151,7 @@ public void handleParsedUnit(String path, org.eclipse.jdt.core.dom.CompilationUn
 
     // Construct the graph and find cycles.
     ReferenceGraph graph = new ReferenceGraph(
-        typeCollector, NameList.createFromFiles(options.getWhitelistFiles()),
+        typeCollector, outerResolver, NameList.createFromFiles(options.getWhitelistFiles()),
         getBlacklist());
     return graph.findCycles();
   }

File: guava/sources/com/google/common/collect/AbstractMapBasedMultimap.java
Patch:
@@ -1317,6 +1317,7 @@ Entry<K, Collection<V>> wrapEntry(Entry<K, Collection<V>> entry) {
       return Maps.immutableEntry(key, wrapCollection(key, entry.getValue()));
     }
 
+    @WeakOuter
     class AsMapEntries extends Maps.EntrySet<K, Collection<V>> {
       @Override
       Map<K, Collection<V>> map() {

File: guava/sources/com/google/common/collect/AbstractMultimap.java
Patch:
@@ -181,6 +181,7 @@ Collection<V> createValues() {
     return new Values();
   }
 
+  @WeakOuter
   class Values extends AbstractCollection<V> {
     @Override public Iterator<V> iterator() {
       return valueIterator();

File: guava/sources/com/google/common/collect/AbstractTable.java
Patch:
@@ -15,6 +15,7 @@
 package com.google.common.collect;
 
 import com.google.common.annotations.GwtCompatible;
+import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.AbstractCollection;
 import java.util.AbstractSet;
@@ -117,6 +118,7 @@ Set<Cell<R, C, V>> createCellSet() {
 
   abstract Iterator<Table.Cell<R, C, V>> cellIterator();
 
+  @WeakOuter
   class CellSet extends AbstractSet<Cell<R, C, V>> {
     @Override
     public boolean contains(Object o) {
@@ -177,6 +179,7 @@ V transform(Cell<R, C, V> cell) {
     };
   }
 
+  @WeakOuter
   class Values extends AbstractCollection<V> {
     @Override
     public Iterator<V> iterator() {

File: guava/sources/com/google/common/collect/FilteredKeyMultimap.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.base.Predicate;
+import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -180,6 +181,7 @@ Collection<Entry<K, V>> createEntries() {
     return new Entries();
   }
 
+  @WeakOuter
   class Entries extends ForwardingCollection<Entry<K, V>> {
     @Override
     protected Collection<Entry<K, V>> delegate() {

File: guava/sources/com/google/common/collect/FilteredMultimapValues.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import com.google.j2objc.annotations.Weak;
 
 import java.util.AbstractCollection;
 import java.util.Collection;
@@ -36,6 +37,7 @@
  */
 @GwtCompatible
 final class FilteredMultimapValues<K, V> extends AbstractCollection<V> {
+  @Weak
   private final FilteredMultimap<K, V> multimap;
 
   FilteredMultimapValues(FilteredMultimap<K, V> multimap) {

File: guava/sources/com/google/common/collect/ImmutableSetMultimap.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.base.MoreObjects;
+import com.google.j2objc.annotations.Weak;
 
 import java.io.IOException;
 import java.io.InvalidObjectException;
@@ -423,6 +424,7 @@ private ImmutableSetMultimap<V, K> invert() {
   }
   
   private static final class EntrySet<K, V> extends ImmutableSet<Entry<K, V>> {
+    @Weak
     private transient final ImmutableSetMultimap<K, V> multimap;
     
     EntrySet(ImmutableSetMultimap<K, V> multimap) {

File: guava/sources/com/google/common/collect/LinkedHashMultimap.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Objects;
+import com.google.j2objc.annotations.WeakOuter;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
@@ -300,6 +301,7 @@ public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {
   }
 
   @VisibleForTesting
+  @WeakOuter
   final class ValueSet extends Sets.ImprovedAbstractSet<V> implements ValueSetLink<K, V> {
     /*
      * We currently use a fixed load factor of 1.0, a bit higher than normal to reduce memory

File: guava/sources/com/google/common/collect/MapMakerInternalMap.java
Patch:
@@ -3806,6 +3806,7 @@ public void clear() {
     }
   }
 
+  @WeakOuter
   final class Values extends AbstractCollection<V> {
 
     @Override

File: guava/sources/com/google/common/collect/RegularImmutableTable.java
Patch:
@@ -92,6 +92,7 @@ final ImmutableCollection<V> createValues() {
     return isEmpty() ? ImmutableList.<V>of() : new Values();
   }
   
+  @WeakOuter
   private final class Values extends ImmutableList<V> {
     @Override
     public int size() {

File: guava/sources/com/google/common/collect/StandardTable.java
Patch:
@@ -397,6 +397,7 @@ public void remove() {
     return new Column(columnKey);
   }
 
+  @WeakOuter
   private class Column extends ImprovedAbstractMap<R, V> {
     final C columnKey;
 

File: guava/sources/com/google/common/util/concurrent/SerializingExecutor.java
Patch:
@@ -17,6 +17,7 @@
 package com.google.common.util.concurrent;
 
 import com.google.common.base.Preconditions;
+import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.ArrayDeque;
 import java.util.Queue;
@@ -126,6 +127,7 @@ public void execute(Runnable r) {
    * isThreadScheduled = false and returns.  This allows the current worker
    * thread to return to the original pool.
    */
+  @WeakOuter
   private class TaskRunner implements Runnable {
     @Override
     public void run() {

File: guava/sources/com/google/common/annotations/GwtCompatible.java
Patch:
@@ -40,7 +40,7 @@
  *   }
  * }
  * </pre>
- * <p>The return value of {@code Lists.newArrayList(E[])} has GWT
+ * The return value of {@code Lists.newArrayList(E[])} has GWT
  * serializable type.  It is also useful in specifying contracts of interface
  * methods.  In the following example,
  *
@@ -52,7 +52,7 @@
  *   &lt;E> List&lt;E> newArrayList(E... elements);
  * }
  * </pre>
- * <p>The {@code newArrayList(E[])} method of all implementations of {@code
+ * The {@code newArrayList(E[])} method of all implementations of {@code
  * ListFactory} is expected to return a value with a GWT serializable type.
  *
  * <p>Note that a {@code GwtCompatible} type may have some {@link

File: guava/sources/com/google/common/base/AbstractIterator.java
Patch:
@@ -75,9 +75,7 @@ public final T next() {
       throw new NoSuchElementException();
     }
     state = State.NOT_READY;
-    T result = next;
-    next = null;
-    return result;
+    return next;
   }
 
   @Override public final void remove() {

File: guava/sources/com/google/common/base/Optional.java
Patch:
@@ -74,8 +74,9 @@ public abstract class Optional<T> implements Serializable {
   /**
    * Returns an {@code Optional} instance with no contained reference.
    */
+  @SuppressWarnings("unchecked")
   public static <T> Optional<T> absent() {
-    return Absent.withType();
+    return (Optional<T>) Absent.INSTANCE;
   }
 
   /**
@@ -128,7 +129,7 @@ public static <T> Optional<T> fromNullable(@Nullable T nullableReference) {
    *   Optional<? extends Number> first = numbers.first();
    *   Number value = first.or(0.5); // error}</pre>
    *
-   * <p>As a workaround, it is always safe to cast an {@code Optional<? extends T>} to {@code
+   * As a workaround, it is always safe to cast an {@code Optional<? extends T>} to {@code
    * Optional<T>}. Casting either of the above example {@code Optional} instances to {@code
    * Optional<Number>} (where {@code Number} is the desired output type) solves the problem:
    * <pre>   {@code

File: guava/sources/com/google/common/base/SmallCharMatcher.java
Patch:
@@ -87,6 +87,7 @@ private boolean checkFilter(int c) {
     return tableSize;
   }
 
+  @GwtIncompatible("java.util.BitSet")
   static CharMatcher from(BitSet chars, String description) {
     // Compute the filter.
     long filter = 0;
@@ -139,6 +140,7 @@ public boolean matches(char c) {
     return false;
   }
 
+  @GwtIncompatible("java.util.BitSet")
   @Override
   void setBits(BitSet table) {
     if (containsZero) {

File: guava/sources/com/google/common/cache/CacheStats.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.GwtCompatible;
-import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 
 import java.util.concurrent.Callable;
@@ -265,7 +264,7 @@ public boolean equals(@Nullable Object object) {
 
   @Override
   public String toString() {
-    return MoreObjects.toStringHelper(this)
+    return Objects.toStringHelper(this)
         .add("hitCount", hitCount)
         .add("missCount", missCount)
         .add("loadSuccessCount", loadSuccessCount)

File: guava/sources/com/google/common/cache/RemovalNotification.java
Patch:
@@ -73,7 +73,7 @@ public boolean wasEvicted() {
     return value;
   }
 
-  @Override public final V setValue(V value) {
+  @Override public final V setValue(V value){
     throw new UnsupportedOperationException();
   }
 

File: guava/sources/com/google/common/collect/AbstractBiMap.java
Patch:
@@ -18,7 +18,6 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
-import static com.google.common.collect.CollectPreconditions.checkRemove;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
@@ -325,7 +324,7 @@ class BiMapEntry extends ForwardingMapEntry<K, V> {
         }
 
         @Override public void remove() {
-          checkRemove(entry != null);
+          checkState(entry != null);
           V value = entry.getValue();
           iterator.remove();
           removeFromInverseMap(value);

File: guava/sources/com/google/common/collect/ArrayListMultimap.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.common.collect;
 
-import static com.google.common.collect.CollectPreconditions.checkNonnegative;
+import static com.google.common.base.Preconditions.checkArgument;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
@@ -110,7 +110,7 @@ private ArrayListMultimap() {
 
   private ArrayListMultimap(int expectedKeys, int expectedValuesPerKey) {
     super(Maps.<K, Collection<V>>newHashMapWithExpectedSize(expectedKeys));
-    checkNonnegative(expectedValuesPerKey, "expectedValuesPerKey");
+    checkArgument(expectedValuesPerKey >= 0);
     this.expectedValuesPerKey = expectedValuesPerKey;
   }
 

File: guava/sources/com/google/common/collect/DescendingMultiset.java
Patch:
@@ -140,4 +140,4 @@ class DescendingMultisetEntrySet extends Multisets.EntrySet<E> {
   @Override public String toString() {
     return entrySet().toString();
   }
-}
\ No newline at end of file
+}

File: guava/sources/com/google/common/collect/ForwardingList.java
Patch:
@@ -127,7 +127,7 @@ public List<E> subList(int fromIndex, int toIndex) {
    *
    * @since 7.0
    */
-  protected boolean standardAdd(E element) {
+  protected boolean standardAdd(E element){
     add(size(), element);
     return true;
   }

File: guava/sources/com/google/common/collect/ForwardingNavigableMap.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.google.common.collect;
 
-import static com.google.common.collect.CollectPreconditions.checkRemove;
 import static com.google.common.collect.Maps.keyOrNull;
 
 import com.google.common.annotations.Beta;
@@ -306,7 +305,7 @@ public java.util.Map.Entry<K, V> next() {
 
         @Override
         public void remove() {
-          checkRemove(toRemove != null);
+          Iterators.checkRemove(toRemove != null);
           forward().remove(toRemove.getKey());
           toRemove = null;
         }

File: guava/sources/com/google/common/collect/HashBasedTable.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.common.collect;
 
-import static com.google.common.collect.CollectPreconditions.checkNonnegative;
+import static com.google.common.base.Preconditions.checkArgument;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.base.Supplier;
@@ -86,7 +86,7 @@ public static <R, C, V> HashBasedTable<R, C, V> create() {
    */
   public static <R, C, V> HashBasedTable<R, C, V> create(
       int expectedRows, int expectedCellsPerRow) {
-    checkNonnegative(expectedCellsPerRow, "expectedCellsPerRow");
+    checkArgument(expectedCellsPerRow >= 0);
     Map<R, Map<C, V>> backingMap =
         Maps.newHashMapWithExpectedSize(expectedRows);
     return new HashBasedTable<R, C, V>(

File: guava/sources/com/google/common/collect/ImmutableSortedMapFauxverideShim.java
Patch:
@@ -16,13 +16,16 @@
 
 package com.google.common.collect;
 
+import com.google.common.annotations.GwtCompatible;
+
 /**
  * "Overrides" the {@link ImmutableMap} static methods that lack
  * {@link ImmutableSortedMap} equivalents with deprecated, exception-throwing
  * versions. See {@link ImmutableSortedSetFauxverideShim} for details.
  *
  * @author Chris Povirk
  */
+@GwtCompatible
 abstract class ImmutableSortedMapFauxverideShim<K, V>
     extends ImmutableMap<K, V> {
   /**

File: guava/sources/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java
Patch:
@@ -26,8 +26,8 @@
  *   Set<Object> sorted = ImmutableSortedMultiset.copyOf(objects);
  *   // BAD CODE! The returned multiset is actually an unsorted ImmutableMultiset!}</pre>
  *
- * <p>While we could put the overrides in {@link ImmutableSortedMultiset} itself, it seems clearer
- * to separate these "do not call" methods from those intended for normal use.
+ * While we could put the overrides in {@link ImmutableSortedMultiset} itself, it seems clearer to
+ * separate these "do not call" methods from those intended for normal use.
  *
  * @author Louis Wasserman
  */

File: guava/sources/com/google/common/collect/MapConstraint.java
Patch:
@@ -33,7 +33,7 @@
  *     }
  *   }}</pre>
  *
- * <p>In order to be effective, constraints should be deterministic; that is, they
+ * In order to be effective, constraints should be deterministic; that is, they
  * should not depend on state that can change (such as external state, random
  * variables, and time) and should only depend on the value of the passed-in key
  * and value. A non-deterministic constraint cannot reliably enforce that all

File: guava/sources/com/google/common/collect/MinMaxPriorityQueue.java
Patch:
@@ -20,7 +20,6 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkPositionIndex;
 import static com.google.common.base.Preconditions.checkState;
-import static com.google.common.collect.CollectPreconditions.checkRemove;
 
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.VisibleForTesting;
@@ -782,7 +781,8 @@ private class QueueIterator implements Iterator<E> {
     }
 
     @Override public void remove() {
-      checkRemove(canRemove);
+      checkState(canRemove,
+          "no calls to remove() since the last call to next()");
       checkModCount();
       canRemove = false;
       expectedModCount++;

File: guava/sources/com/google/common/collect/Multiset.java
Patch:
@@ -307,7 +307,7 @@ interface Entry<E> {
    *
    *   ((element == null) ? 0 : element.hashCode()) ^ count(element)}</pre>
    *
-   * <p>over all distinct elements in the multiset. It follows that a multiset and
+   * over all distinct elements in the multiset. It follows that a multiset and
    * its entry set always have the same hash code.
    */
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/translate/AbstractMethodRewriter.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.devtools.j2objc.ast.NativeStatement;
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
+import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.TranslationUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -61,7 +62,7 @@ public void endVisit(MethodDeclaration node) {
       // Generate a body which throws a NSInvalidArgumentException.
       String bodyCode = "// can't call an abstract method\n"
           + "[self doesNotRecognizeSelector:_cmd];";
-      if (!typeEnv.isVoidType(node.getReturnType().getTypeBinding())) {
+      if (!BindingUtil.isVoid(node.getReturnType().getTypeBinding())) {
         bodyCode += "\nreturn 0;"; // Never executes, but avoids a gcc warning.
       }
       body.getStatements().add(new NativeStatement(bodyCode));

File: translator/src/main/java/com/google/devtools/j2objc/translate/ComplexExpressionExtractor.java
Patch:
@@ -36,6 +36,7 @@
 import com.google.devtools.j2objc.ast.VariableDeclarationStatement;
 import com.google.devtools.j2objc.ast.WhileStatement;
 import com.google.devtools.j2objc.types.GeneratedVariableBinding;
+import com.google.devtools.j2objc.util.BindingUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -167,7 +168,7 @@ public void endVisit(PrefixExpression node) {
 
   @Override
   public void endVisit(Assignment node) {
-    if (typeEnv.isBooleanType(node.getTypeBinding())) {
+    if (BindingUtil.isBoolean(node.getTypeBinding())) {
       if (node.getRightHandSide() instanceof InfixExpression) {
         // Avoid clang precedence warning by putting parentheses around expression.
         ParenthesizedExpression.parenthesizeAndReplace(node.getRightHandSide());

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -380,7 +380,7 @@ private void setFunctionCaller(MethodDeclaration method, FunctionDeclaration fun
     for (SingleVariableDeclaration param : method.getParameters()) {
       args.add(new SimpleName(param.getVariableBinding()));
     }
-    if (typeEnv.isVoidType(returnType)) {
+    if (BindingUtil.isVoid(returnType)) {
       stmts.add(new ExpressionStatement(invocation));
       if (methodBinding.isConstructor()) {
         stmts.add(new ReturnStatement(new ThisExpression(declaringClass)));

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/CycleFinder.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.devtools.j2objc.file.InputFile;
 import com.google.devtools.j2objc.file.RegularInputFile;
 import com.google.devtools.j2objc.translate.OuterReferenceResolver;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.FileUtil;
 import com.google.devtools.j2objc.util.JdtParser;
@@ -105,7 +104,6 @@ public void handleParsedUnit(
         } catch (IOException e) {
           ErrorUtil.error("Error reading file " + file.getPath() + ": " + e.getMessage());
         }
-        Types.initialize(jdtUnit);
         CompilationUnit unit = TreeConverter.convertCompilationUnit(jdtUnit, file, source, null);
         typeCollector.visitAST(unit);
         OuterReferenceResolver.resolve(unit);

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/TypeCollector.java
Patch:
@@ -117,7 +117,7 @@ public boolean visit(TypeDeclaration node) {
       public boolean visit(AnonymousClassDeclaration node) {
         ITypeBinding binding = node.getTypeBinding();
         visitType(binding);
-        renamings.put(binding, "anonymous:" + unit.getLineNumber(node.getStartPosition()));
+        renamings.put(binding, "anonymous:" + node.getLineNumber());
         return true;
       }
       @Override

File: translator/src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.io.Files;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.DeadCodeMap;
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.FileUtil;
@@ -127,7 +126,6 @@ public static void run(List<String> fileArgs) {
       }
       translationProcessor.postProcess();
     } finally {
-      Types.cleanup();
       if (preProcessorTempDir != null) {
         FileUtil.deleteTempDir(preProcessorTempDir);
       }

File: translator/src/main/java/com/google/devtools/j2objc/TranslationProcessor.java
Patch:
@@ -169,7 +169,6 @@ protected void processCompiledGenerationUnit(GenerationUnit unit) {
       }
 
       for (CompilationUnit compUnit : unit.getCompilationUnits()) {
-        compUnit.setGenerationContext();
         applyMutations(compUnit, deadCodeMap, ticker);
         ticker.tick("Tree mutations for " + compUnit.getMainTypeName());
       }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeConverter.java
Patch:
@@ -27,10 +27,10 @@ public class TreeConverter {
 
   public static CompilationUnit convertCompilationUnit(
       org.eclipse.jdt.core.dom.CompilationUnit jdtUnit, InputFile inputFile, String source,
-      NameTable nameTable) {
+      NameTable.Factory nameTableFactory) {
     return new CompilationUnit(
         jdtUnit, inputFile, FileUtil.getClassNameFromFilePath(inputFile.getUnitName()), source,
-        nameTable);
+        nameTableFactory);
   }
 
   public static Statement convertStatement(org.eclipse.jdt.core.dom.Statement jdtStatement) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -59,8 +59,6 @@ public void generate() {
     // First, gather everything we need to generate.
     // We do this first because we'll be reordering it later.
     for (CompilationUnit unit : getGenerationUnit().getCompilationUnits()) {
-      unit.setGenerationContext();
-
       // It would be nice if we could put the PackageDeclarations and AbstractTypeDeclarations
       // in the same list of 'things to generate'.
       // TODO(mthvedt): Puzzle--figure out a way to do that in Java's type system
@@ -75,7 +73,6 @@ public void generate() {
 
     for (AbstractTypeDeclaration decl : getOrderedTypes()) {
       CompilationUnit unit = TreeUtil.getCompilationUnit(decl);
-      unit.setGenerationContext();
 
       // Print package docs before the first type in the package. (See above comments and TODO.)
       if (Options.docCommentsEnabled() && packagesToDoc.contains(unit.getPackage())) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -72,7 +72,6 @@ public void generate() {
       printImports(packageInfos);
       for (CompilationUnit packageInfo : packageInfos) {
         syncFilename(packageInfo.getInputFile().getPath());
-        packageInfo.setGenerationContext();
         generatePackageInfo(packageInfo);
       }
 
@@ -100,7 +99,6 @@ private List<CompilationUnit> collectPackageInfos(List<CompilationUnit> units) {
     List<CompilationUnit> packageInfos = new ArrayList<CompilationUnit>();
 
     for (CompilationUnit unit : units) {
-      unit.setGenerationContext();
       if (unit.getMainTypeName().endsWith(NameTable.PACKAGE_INFO_MAIN_TYPE)) {
         PackageDeclaration pkg = unit.getPackage();
         if (TreeUtil.getRuntimeAnnotationsList(pkg.getAnnotations()).size() > 0

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -93,7 +93,6 @@ protected boolean isLocalType(ITypeBinding type) {
   protected void setGenerationContext(AbstractTypeDeclaration type) {
     CompilationUnit unit = TreeUtil.getCompilationUnit(type);
     syncFilename(unit.getInputFile().getPath());
-    unit.setGenerationContext();
   }
 
   protected void save(String path) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -31,7 +31,6 @@
 import com.google.devtools.j2objc.ast.NativeDeclaration;
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 
@@ -386,7 +385,7 @@ private void printTypeLiteralDeclaration() {
       "int", "long", "double", "float", "short", "byte", "char");
 
   private void printIncrementAndDecrementFunctions() {
-    ITypeBinding primitiveType = Types.getPrimitiveType(typeBinding);
+    ITypeBinding primitiveType = typeEnv.getPrimitiveType(typeBinding);
     if (primitiveType == null || !NEEDS_INC_AND_DEC.contains(primitiveType.getName())) {
       return;
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/AbstractMethodRewriter.java
Patch:
@@ -23,7 +23,6 @@
 import com.google.devtools.j2objc.ast.NativeStatement;
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.TranslationUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -62,7 +61,7 @@ public void endVisit(MethodDeclaration node) {
       // Generate a body which throws a NSInvalidArgumentException.
       String bodyCode = "// can't call an abstract method\n"
           + "[self doesNotRecognizeSelector:_cmd];";
-      if (!Types.isVoidType(node.getReturnType().getTypeBinding())) {
+      if (!typeEnv.isVoidType(node.getReturnType().getTypeBinding())) {
         bodyCode += "\nreturn 0;"; // Never executes, but avoids a gcc warning.
       }
       body.getStatements().add(new NativeStatement(bodyCode));

File: translator/src/main/java/com/google/devtools/j2objc/translate/DeadCodeEliminator.java
Patch:
@@ -26,7 +26,6 @@
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.DeadCodeMap;
 
@@ -115,7 +114,7 @@ private boolean isInlinableConstant(BodyDeclaration decl) {
       return false;
     }
     ITypeBinding type = ((FieldDeclaration) decl).getType().getTypeBinding();
-    return type.isPrimitive() || Types.isStringType(type);
+    return type.isPrimitive() || typeEnv.isStringType(type);
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/translate/GwtConverter.java
Patch:
@@ -33,7 +33,6 @@
 import com.google.devtools.j2objc.ast.StringLiteral;
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.ast.TreeVisitor;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.BindingUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -121,13 +120,13 @@ public boolean visit(MethodInvocation node) {
         && args.size() == 1) {
       // Convert GWT.create(Foo.class) to Foo.class.newInstance().
       IMethodBinding newBinding = BindingUtil.findDeclaredMethod(
-          Types.resolveJavaType("java.lang.Class"), "newInstance");
+          typeEnv.resolveJavaType("java.lang.Class"), "newInstance");
       node.setName(new SimpleName(newBinding));
       Expression clazz = args.remove(0);
       node.setExpression(clazz);
       node.setMethodBinding(newBinding);
     } else if (isGwtTest(node)) {
-      node.replaceWith(new BooleanLiteral(false));
+      node.replaceWith(new BooleanLiteral(false, typeEnv));
     }
     return true;
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -161,7 +161,7 @@ private void updateConstructors(AbstractTypeDeclaration node) {
 
     if (needsConstructor) {
       GeneratedMethodBinding binding =
-          GeneratedMethodBinding.newConstructor(node.getTypeBinding(), 0);
+          GeneratedMethodBinding.newConstructor(node.getTypeBinding(), 0, typeEnv);
       MethodDeclaration constructor = new MethodDeclaration(binding);
       constructor.setBody(new Block());
       addOuterParameters(node, constructor);
@@ -233,7 +233,7 @@ protected void addOuterParameters(
       ITypeBinding superType = type.getSuperclass().getTypeDeclaration();
       if (superCall == null) {
         superCall = new SuperConstructorInvocation(
-            TranslationUtil.findDefaultConstructorBinding(superType));
+            TranslationUtil.findDefaultConstructorBinding(superType, typeEnv));
         statements.add(0, superCall);
       }
       passOuterParamToSuper(typeNode, superCall, superType, outerParamBinding);

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -50,7 +50,6 @@
 import com.google.devtools.j2objc.ast.VariableDeclarationExpression;
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
 import com.google.devtools.j2objc.ast.WhileStatement;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.BindingUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -145,7 +144,7 @@ private boolean needsNilCheck(Expression e) {
     if (method != null) {
       // Check for some common cases where the result is known not to be null.
       return !method.isConstructor() && !method.getName().equals("getClass")
-          && !(Types.isBoxedPrimitive(method.getDeclaringClass())
+          && !(typeEnv.isBoxedPrimitive(method.getDeclaringClass())
                && method.getName().equals("valueOf"));
     }
     switch (e.getKind()) {
@@ -171,7 +170,7 @@ private void addNilCheck(Expression node) {
       safeVarsTrue.add(var);
       safeVarsFalse.add(var);
     }
-    ITypeBinding idType = Types.resolveIOSType("id");
+    ITypeBinding idType = typeEnv.resolveIOSType("id");
     FunctionInvocation nilChkInvocation = new FunctionInvocation(
         "nil_chk", node.getTypeBinding(), idType, idType);
     node.replaceWith(nilChkInvocation);

File: translator/src/main/java/com/google/devtools/j2objc/translate/OcniExtractor.java
Patch:
@@ -117,7 +117,7 @@ public void endVisit(MethodDeclaration node) {
     if (Modifier.isSynchronized(modifiers)) {
       ITypeBinding declaringClass = node.getMethodBinding().getDeclaringClass();
       SynchronizedStatement syncStmt = new SynchronizedStatement(
-          Modifier.isStatic(modifiers) ? new TypeLiteral(declaringClass)
+          Modifier.isStatic(modifiers) ? new TypeLiteral(declaringClass, typeEnv)
           : new ThisExpression(declaringClass));
       syncStmt.setBody(TreeUtil.remove(node.getBody()));
       Block newBody = new Block();

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceFixer.java
Patch:
@@ -143,7 +143,7 @@ public boolean visit(SimpleName node) {
     if (path != null) {
       if (path.size() == 1 && path.get(0).getConstantValue() != null) {
         IVariableBinding var = path.get(0);
-        node.replaceWith(TreeUtil.newLiteral(var.getConstantValue()));
+        node.replaceWith(TreeUtil.newLiteral(var.getConstantValue(), typeEnv));
       } else {
         node.replaceWith(Name.newName(fixPath(path)));
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/SuperMethodInvocationRewriter.java
Patch:
@@ -30,7 +30,6 @@
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.ast.TypeDeclaration;
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.NameTable;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
@@ -125,7 +124,7 @@ public void endVisit(SuperMethodInvocation node) {
     List<Expression> args = invocation.getArguments();
     args.add(TreeUtil.remove(qualifier));
     String selectorExpr = String.format("@selector(%s)", nameTable.getMethodSelector(method));
-    args.add(new NativeExpression(selectorExpr, Types.resolveIOSType("id")));
+    args.add(new NativeExpression(selectorExpr, typeEnv.resolveIOSType("id")));
     TreeUtil.copyList(node.getArguments(), args);
     node.replaceWith(invocation);
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/VarargsRewriter.java
Patch:
@@ -70,7 +70,7 @@ private void rewriteVarargs(IMethodBinding method, List<Expression> args) {
     List<Expression> varargsCopy = Lists.newArrayList(varargs);
     varargs.clear();
     if (varargsCopy.isEmpty()) {
-      args.add(new ArrayCreation(lastParam.getErasure(), 0));
+      args.add(new ArrayCreation(lastParam.getErasure(), typeEnv, 0));
     } else {
       ArrayInitializer newInit = new ArrayInitializer(lastParam.getErasure());
       newInit.getExpressions().addAll(varargsCopy);
@@ -81,7 +81,7 @@ private void rewriteVarargs(IMethodBinding method, List<Expression> args) {
   @Override
   public void endVisit(ArrayInitializer node) {
     if (!(node.getParent() instanceof ArrayCreation)) {
-      ArrayCreation newArray = new ArrayCreation(node.getTypeBinding());
+      ArrayCreation newArray = new ArrayCreation(node.getTypeBinding(), typeEnv);
       node.replaceWith(newArray);
       newArray.setInitializer(node);
     }

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.devtools.j2objc.ast.TreeUtil;
 import com.google.devtools.j2objc.types.GeneratedMethodBinding;
 import com.google.devtools.j2objc.types.IOSMethodBinding;
+import com.google.devtools.j2objc.types.Types;
 import com.google.j2objc.annotations.ReflectionSupport;
 
 import org.eclipse.jdt.core.dom.IAnnotationBinding;
@@ -122,7 +123,7 @@ public static Expression retainResult(Expression node) {
     return null;
   }
 
-  public static IMethodBinding findDefaultConstructorBinding(ITypeBinding type) {
+  public static IMethodBinding findDefaultConstructorBinding(ITypeBinding type, Types typeEnv) {
     // Search for a non-varargs match.
     for (IMethodBinding m : type.getDeclaredMethods()) {
       if (m.isConstructor() && m.getParameterTypes().length == 0) {
@@ -144,6 +145,6 @@ public static IMethodBinding findDefaultConstructorBinding(ITypeBinding type) {
     }
     // Sometimes there won't be a default constructor (eg. enums), so just
     // create our own binding.
-    return GeneratedMethodBinding.newConstructor(type, type.getModifiers());
+    return GeneratedMethodBinding.newConstructor(type, type.getModifiers(), typeEnv);
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -143,7 +143,7 @@ protected CompilationUnit translateType(String typeName, String source) {
     fullSourcePath += typePath + ".java";
     CompilationUnit newUnit = TreeConverter.convertCompilationUnit(
         unit, new RegularInputFile(fullSourcePath, typePath + ".java"), source,
-        NameTable.newFactory().newNameTable());
+        NameTable.newFactory());
     TranslationProcessor.applyMutations(newUnit, deadCodeMap, TimeTracker.noop());
     return newUnit;
   }

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/Options.java
Patch:
@@ -55,7 +55,7 @@ class Options {
   private List<String> whitelistFiles = Lists.newArrayList();
   private List<String> blacklistFiles = Lists.newArrayList();
   private List<String> sourceFiles = Lists.newArrayList();
-  private String fileEncoding = System.getProperty("file.encoding", "ISO-8859-1");
+  private String fileEncoding = System.getProperty("file.encoding", "UTF-8");
 
   public List<String> getSourceFiles() {
     return sourceFiles;

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/CycleFinder.java
Patch:
@@ -49,8 +49,9 @@ public class CycleFinder {
     }
   }
 
-  public CycleFinder(Options options) {
+  public CycleFinder(Options options) throws IOException {
     this.options = options;
+    com.google.devtools.j2objc.Options.load(new String[] { "-encoding", options.fileEncoding() });
   }
 
   private static JdtParser createParser(Options options) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGeneratorTest.java
Patch:
@@ -173,7 +173,7 @@ public void testPrivateMethodHiding() throws IOException {
   }
 
   public void testNoPrivateMethodHiding() throws IOException {
-    Options.resetHidePrivateMembers();
+    Options.setHidePrivateMembers(false);
     String translation = translateSourceFile(
         "class Test  { public void test1() {} private void test2() {} }", "Test", "Test.h");
     assertTranslation(translation, "- (void)test1;");
@@ -197,7 +197,7 @@ public void testPrivateFieldHiding() throws IOException {
   }
 
   public void testNoPrivateFieldHiding() throws IOException {
-    Options.resetHidePrivateMembers();
+    Options.setHidePrivateMembers(false);
     String translation = translateSourceFile(
         "class Test  { public Object o1; protected Object o2; Object o3; private Object o4; }",
         "Test", "Test.h");

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -302,7 +302,7 @@ public void testOuterMethodReference() throws IOException {
         + "        public void foo() { if (x ==0) mumble(y); } }; } }"
         + "  private void mumble(int y) { } }";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslation(translation, "[this$0_->this$0_ mumbleWithInt:0]");
+    assertTranslation(translation, "Test_mumbleWithInt_(this$0_->this$0_, 0)");
   }
 
   public void testInnerSubClassOfGenericClassInner() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/FileProcessor.java
Patch:
@@ -111,7 +111,6 @@ protected void processBatch() {
       JdtParser.Handler handler = new JdtParser.Handler() {
         @Override
         public void handleParsedUnit(InputFile inputFile, CompilationUnit unit) {
-          ErrorUtil.setCurrentFileName(inputFile.getPath());
           processCompilationUnit(unitMap.get(inputFile), unit, inputFile);
         }
       };
@@ -132,8 +131,6 @@ public void handleParsedUnit(InputFile inputFile, CompilationUnit unit) {
   protected void processSource(InputFile file, GenerationUnit generationUnit) {
     logger.finest("parsing " + file);
 
-    ErrorUtil.setCurrentFileName(file.getPath());
-
     String source;
     try {
       source = FileUtil.readFile(file);

File: translator/src/main/java/com/google/devtools/j2objc/translate/OcniExtractor.java
Patch:
@@ -226,9 +226,7 @@ private String extractNativeCode(TreeNode node) {
         start = text.indexOf("/*-{");
         end = text.lastIndexOf("}-*/");
         if (start != -1 && end > start) {
-          String message = String.format("JSNI comment found: %s:%d",
-              unit.getInputFile().getPath(), unit.getLineNumber(offset));
-          ErrorUtil.warning(message);
+          ErrorUtil.warning(node, "JSNI comment found");
         }
       }
       return null;

File: translator/src/main/java/com/google/devtools/j2objc/gen/MetadataGenerator.java
Patch:
@@ -213,8 +213,8 @@ private void generateFieldsMetadata() {
   private String generateFieldMetadata(IVariableBinding var, SimpleName name, String typeName) {
     int modifiers = getFieldModifiers(var);
     String javaName = name.getIdentifier();
-    String objcName = var.isEnumConstant() ? NameTable.getName(var)
-        : NameTable.javaFieldToObjC(NameTable.getName(var));
+    String objcName = var.isEnumConstant() ? NameTable.getVariableName(var)
+        : NameTable.javaFieldToObjC(NameTable.getVariableName(var));
     if (objcName.equals(javaName + '_')) {
       // Don't print Java name if it matches the default pattern, to conserve space.
       javaName = null;

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -790,9 +790,9 @@ public boolean visit(SimpleName node) {
       } else if (BindingUtil.isStatic(var)) {
         buffer.append(NameTable.getStaticVarQualifiedName(var));
       } else if (var.isField()) {
-        buffer.append(NameTable.javaFieldToObjC(NameTable.getName(var)));
+        buffer.append(NameTable.javaFieldToObjC(NameTable.getVariableName(var)));
       } else {
-        buffer.append(NameTable.getName(var));
+        buffer.append(NameTable.getVariableName(var));
       }
       return false;
     }
@@ -900,7 +900,7 @@ public boolean visit(SuperConstructorInvocation node) {
 
   @Override
   public boolean visit(SuperFieldAccess node) {
-    buffer.append(NameTable.javaFieldToObjC(NameTable.getName(node.getName().getBinding())));
+    buffer.append(NameTable.javaFieldToObjC(NameTable.getVariableName(node.getVariableBinding())));
     return false;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeDeclarationGenerator.java
Patch:
@@ -248,7 +248,7 @@ protected void printInstanceVariables() {
         if (needsAsterisk) {
           print('*');
         }
-        String name = NameTable.getName(f.getName().getBinding());
+        String name = NameTable.getVariableName(f.getVariableBinding());
         print(NameTable.javaFieldToObjC(name));
         if (it.hasNext()) {
           print(", ");
@@ -331,7 +331,8 @@ protected void printFieldSetters() {
         if (BindingUtil.isWeakReference(var.getVariableBinding())) {
           continue;
         }
-        String fieldName = NameTable.javaFieldToObjC(NameTable.getName(var.getName().getBinding()));
+        String fieldName = NameTable.javaFieldToObjC(
+            NameTable.getVariableName(var.getVariableBinding()));
         if (!newlinePrinted) {
           newlinePrinted = true;
           newline();

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeGenerator.java
Patch:
@@ -207,7 +207,8 @@ protected String getMethodSignature(MethodDeclaration m) {
         }
         IVariableBinding var = params.get(i).getVariableBinding();
         String typeName = NameTable.getSpecificObjCType(var.getType());
-        sb.append(String.format("%s:(%s)%s", selParts[i], typeName, NameTable.getName(var)));
+        sb.append(String.format(
+            "%s:(%s)%s", selParts[i], typeName, NameTable.getVariableName(var)));
       }
     }
 
@@ -224,7 +225,7 @@ protected String getFunctionSignature(FunctionDeclaration function) {
       IVariableBinding var = iter.next().getVariableBinding();
       String paramType = NameTable.getSpecificObjCType(var.getType());
       paramType += (paramType.endsWith("*") ? "" : " ");
-      sb.append(paramType + NameTable.getName(var));
+      sb.append(paramType + NameTable.getVariableName(var));
       if (iter.hasNext()) {
         sb.append(", ");
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -72,7 +72,7 @@ public void endVisit(EnumDeclaration node) {
           addEnumConstructorParams(constant.getMethodBinding().getMethodDeclaration());
       ClassInstanceCreation creation = new ClassInstanceCreation(binding);
       TreeUtil.copyList(constant.getArguments(), creation.getArguments());
-      String name = NameTable.getName(constant.getName().getBinding());
+      String name = NameTable.getVariableName(constant.getVariableBinding());
       creation.getArguments().add(new StringLiteral(name));
       creation.getArguments().add(new NumberLiteral(i++));
       creation.setHasRetainedResult(true);

File: translator/src/main/java/com/google/devtools/j2objc/translate/OperatorRewriter.java
Patch:
@@ -145,7 +145,7 @@ private static FunctionInvocation newFieldSetterInvocation(
       value = retainedValue;
     }
     String setterName = String.format(setterFormat, NameTable.getFullName(declaringType),
-        NameTable.javaFieldToObjC(NameTable.getName(var)));
+        NameTable.javaFieldToObjC(NameTable.getVariableName(var)));
     FunctionInvocation invocation = new FunctionInvocation(
         setterName, varType, varType, declaringType);
     invocation.getArguments().add(TreeUtil.remove(instance));

File: translator/src/main/java/com/google/devtools/j2objc/FileProcessor.java
Patch:
@@ -160,9 +160,6 @@ private boolean isFullyParsed(GenerationUnit unit) {
   protected void processCompilationUnit(
       GenerationUnit genUnit, CompilationUnit unit, InputFile file) {
     try {
-      Types.initialize(unit);
-      NameTable.initialize();
-
       String source = FileUtil.readFile(file);
       com.google.devtools.j2objc.ast.CompilationUnit translatedUnit
           = TreeConverter.convertCompilationUnit(unit, file, source);

File: translator/src/main/java/com/google/devtools/j2objc/ast/CompilationUnit.java
Patch:
@@ -49,7 +49,7 @@ public CompilationUnit(
       org.eclipse.jdt.core.dom.CompilationUnit jdtNode, InputFile inputFile,
       String mainTypeName, String source) {
     super(jdtNode);
-    this.nameTable = NameTable.newNameTable();
+    this.nameTable = NameTable.newInstance();
     this.typesService = Types.newTypes(jdtNode);
     setGenerationContext();
     this.inputFile = Preconditions.checkNotNull(inputFile);

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -867,7 +867,7 @@ public void testPackageInfoOnClasspath() throws IOException {
     batchCompiler.compile(compileArgs.toArray(new String[0]));
     List<String> oldClassPathEntries = new ArrayList<String>(Options.getClassPathEntries());
     Options.getClassPathEntries().add(tempDir.getAbsolutePath() + "/src/");
-    NameTable.initialize();
+    NameTable.newInstance().setInstance();
     try {
       String translation = translateSourceFile("package foo.bar.mumble;\n"
           + "public class Test {}",
@@ -880,6 +880,7 @@ public void testPackageInfoOnClasspath() throws IOException {
     } finally {
       Options.getClassPathEntries().clear();
       Options.getClassPathEntries().addAll(oldClassPathEntries);
+      NameTable.cleanup();
     }
   }
 

File: protobuf/tests/CompatibilityTest.java
Patch:
@@ -31,7 +31,6 @@
 import abc_def.gHiJkL.Foo2bar;
 import abc_def.gHiJkL.Foo_bar;
 import abc_def.gHiJkL.fooBar;
-import foo.bar.baz.PrefixDummy2;
 
 import junit.framework.TestCase;
 
@@ -862,7 +861,6 @@ public void testFunnyNames() throws Exception {
 
   public void testPackagePrefix() throws Exception {
     PrefixDummy dummy = PrefixDummy.newBuilder().build();
-    PrefixDummy2 dummy2 = PrefixDummy2.newBuilder().build();
   }
 
   public void testToStringOnMessage() throws Exception {

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -167,6 +167,7 @@ public enum Kind {
     CATCH_CLAUSE,
     CHARACTER_LITERAL,
     CLASS_INSTANCE_CREATION,
+    COMMA_EXPRESSION,
     COMPILATION_UNIT,
     CONDITIONAL_EXPRESSION,
     CONSTRUCTOR_INVOCATION,

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -135,8 +135,9 @@ protected void printFunctionDeclaration(FunctionDeclaration function) {
     if (Modifier.isNative(function.getModifiers())) {
       return;
     }
-    String functionBody = generateStatement(function.getBody(), /* isFunction */ true);
     newline();
+    syncLineNumbers(function);  // avoid doc-comment
+    String functionBody = generateStatement(function.getBody(), /* isFunction */ true);
     println(getFunctionSignature(function) + " " + reindent(functionBody));
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -294,6 +294,7 @@ private FunctionDeclaration makeFunction(MethodDeclaration method) {
 
     FunctionDeclaration function = new FunctionDeclaration(
         NameTable.getFullFunctionName(m), m.getReturnType());
+    function.setLineNumber(method.getName().getLineNumber());
 
     if (!BindingUtil.isStatic(m)) {
       GeneratedVariableBinding var = new GeneratedVariableBinding(NameTable.SELF_NAME, 0,
@@ -338,6 +339,7 @@ private FunctionDeclaration makeAllocatingConstructor(MethodDeclaration method)
 
     FunctionDeclaration function = new FunctionDeclaration(
         NameTable.getAllocatingConstructorName(binding), declaringClass);
+    function.setLineNumber(method.getName().getLineNumber());
     function.setModifiers(BindingUtil.isPrivate(binding) ? Modifier.PRIVATE : Modifier.PUBLIC);
     function.setReturnsRetained(true);
     TreeUtil.copyList(method.getParameters(), function.getParameters());

File: guava/sources/com/google/common/collect/AbstractMapBasedMultimap.java
Patch:
@@ -1317,7 +1317,6 @@ Entry<K, Collection<V>> wrapEntry(Entry<K, Collection<V>> entry) {
       return Maps.immutableEntry(key, wrapCollection(key, entry.getValue()));
     }
 
-    @WeakOuter
     class AsMapEntries extends Maps.EntrySet<K, Collection<V>> {
       @Override
       Map<K, Collection<V>> map() {
@@ -1428,7 +1427,6 @@ SortedSet<K> createKeySet() {
   }
 
   @GwtIncompatible("NavigableAsMap")
-  @WeakOuter
   class NavigableAsMap extends SortedAsMap implements NavigableMap<K, Collection<V>> {
 
     NavigableAsMap(NavigableMap<K, Collection<V>> submap) {

File: guava/sources/com/google/common/collect/AbstractMultimap.java
Patch:
@@ -181,7 +181,6 @@ Collection<V> createValues() {
     return new Values();
   }
 
-  @WeakOuter
   class Values extends AbstractCollection<V> {
     @Override public Iterator<V> iterator() {
       return valueIterator();

File: guava/sources/com/google/common/collect/AbstractTable.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.common.collect;
 
 import com.google.common.annotations.GwtCompatible;
-import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.AbstractCollection;
 import java.util.AbstractSet;
@@ -118,7 +117,6 @@ Set<Cell<R, C, V>> createCellSet() {
 
   abstract Iterator<Table.Cell<R, C, V>> cellIterator();
 
-  @WeakOuter
   class CellSet extends AbstractSet<Cell<R, C, V>> {
     @Override
     public boolean contains(Object o) {
@@ -179,7 +177,6 @@ V transform(Cell<R, C, V> cell) {
     };
   }
 
-  @WeakOuter
   class Values extends AbstractCollection<V> {
     @Override
     public Iterator<V> iterator() {

File: guava/sources/com/google/common/collect/FilteredKeyMultimap.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.base.Predicate;
-import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -181,7 +180,6 @@ Collection<Entry<K, V>> createEntries() {
     return new Entries();
   }
 
-  @WeakOuter
   class Entries extends ForwardingCollection<Entry<K, V>> {
     @Override
     protected Collection<Entry<K, V>> delegate() {

File: guava/sources/com/google/common/collect/FilteredMultimapValues.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
-import com.google.j2objc.annotations.Weak;
 
 import java.util.AbstractCollection;
 import java.util.Collection;
@@ -37,7 +36,7 @@
  */
 @GwtCompatible
 final class FilteredMultimapValues<K, V> extends AbstractCollection<V> {
-  @Weak private final FilteredMultimap<K, V> multimap;
+  private final FilteredMultimap<K, V> multimap;
 
   FilteredMultimapValues(FilteredMultimap<K, V> multimap) {
     this.multimap = checkNotNull(multimap);

File: guava/sources/com/google/common/collect/ImmutableSetMultimap.java
Patch:
@@ -22,7 +22,6 @@
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.base.MoreObjects;
-import com.google.j2objc.annotations.Weak;
 
 import java.io.IOException;
 import java.io.InvalidObjectException;
@@ -424,7 +423,7 @@ private ImmutableSetMultimap<V, K> invert() {
   }
   
   private static final class EntrySet<K, V> extends ImmutableSet<Entry<K, V>> {
-    @Weak private transient final ImmutableSetMultimap<K, V> multimap;
+    private transient final ImmutableSetMultimap<K, V> multimap;
     
     EntrySet(ImmutableSetMultimap<K, V> multimap) {
       this.multimap = multimap;

File: guava/sources/com/google/common/collect/LinkedHashMultimap.java
Patch:
@@ -23,7 +23,6 @@
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Objects;
-import com.google.j2objc.annotations.WeakOuter;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
@@ -301,7 +300,6 @@ public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {
   }
 
   @VisibleForTesting
-  @WeakOuter
   final class ValueSet extends Sets.ImprovedAbstractSet<V> implements ValueSetLink<K, V> {
     /*
      * We currently use a fixed load factor of 1.0, a bit higher than normal to reduce memory

File: guava/sources/com/google/common/collect/MapMakerInternalMap.java
Patch:
@@ -3806,7 +3806,6 @@ public void clear() {
     }
   }
 
-  @WeakOuter
   final class Values extends AbstractCollection<V> {
 
     @Override

File: guava/sources/com/google/common/collect/RegularImmutableTable.java
Patch:
@@ -92,7 +92,6 @@ final ImmutableCollection<V> createValues() {
     return isEmpty() ? ImmutableList.<V>of() : new Values();
   }
   
-  @WeakOuter
   private final class Values extends ImmutableList<V> {
     @Override
     public int size() {

File: guava/sources/com/google/common/util/concurrent/SerializingExecutor.java
Patch:
@@ -17,7 +17,6 @@
 package com.google.common.util.concurrent;
 
 import com.google.common.base.Preconditions;
-import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.ArrayDeque;
 import java.util.Queue;
@@ -127,7 +126,6 @@ public void execute(Runnable r) {
    * isThreadScheduled = false and returns.  This allows the current worker
    * thread to return to the original pool.
    */
-  @WeakOuter
   private class TaskRunner implements Runnable {
     @Override
     public void run() {

File: guava/sources/com/google/common/collect/AbstractMapBasedMultimap.java
Patch:
@@ -1317,6 +1317,7 @@ Entry<K, Collection<V>> wrapEntry(Entry<K, Collection<V>> entry) {
       return Maps.immutableEntry(key, wrapCollection(key, entry.getValue()));
     }
 
+    @WeakOuter
     class AsMapEntries extends Maps.EntrySet<K, Collection<V>> {
       @Override
       Map<K, Collection<V>> map() {
@@ -1427,6 +1428,7 @@ SortedSet<K> createKeySet() {
   }
 
   @GwtIncompatible("NavigableAsMap")
+  @WeakOuter
   class NavigableAsMap extends SortedAsMap implements NavigableMap<K, Collection<V>> {
 
     NavigableAsMap(NavigableMap<K, Collection<V>> submap) {

File: guava/sources/com/google/common/collect/AbstractMultimap.java
Patch:
@@ -181,6 +181,7 @@ Collection<V> createValues() {
     return new Values();
   }
 
+  @WeakOuter
   class Values extends AbstractCollection<V> {
     @Override public Iterator<V> iterator() {
       return valueIterator();

File: guava/sources/com/google/common/collect/AbstractTable.java
Patch:
@@ -15,6 +15,7 @@
 package com.google.common.collect;
 
 import com.google.common.annotations.GwtCompatible;
+import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.AbstractCollection;
 import java.util.AbstractSet;
@@ -117,6 +118,7 @@ Set<Cell<R, C, V>> createCellSet() {
 
   abstract Iterator<Table.Cell<R, C, V>> cellIterator();
 
+  @WeakOuter
   class CellSet extends AbstractSet<Cell<R, C, V>> {
     @Override
     public boolean contains(Object o) {
@@ -177,6 +179,7 @@ V transform(Cell<R, C, V> cell) {
     };
   }
 
+  @WeakOuter
   class Values extends AbstractCollection<V> {
     @Override
     public Iterator<V> iterator() {

File: guava/sources/com/google/common/collect/FilteredKeyMultimap.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.base.Predicate;
+import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -180,6 +181,7 @@ Collection<Entry<K, V>> createEntries() {
     return new Entries();
   }
 
+  @WeakOuter
   class Entries extends ForwardingCollection<Entry<K, V>> {
     @Override
     protected Collection<Entry<K, V>> delegate() {

File: guava/sources/com/google/common/collect/FilteredMultimapValues.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import com.google.j2objc.annotations.Weak;
 
 import java.util.AbstractCollection;
 import java.util.Collection;
@@ -36,7 +37,7 @@
  */
 @GwtCompatible
 final class FilteredMultimapValues<K, V> extends AbstractCollection<V> {
-  private final FilteredMultimap<K, V> multimap;
+  @Weak private final FilteredMultimap<K, V> multimap;
 
   FilteredMultimapValues(FilteredMultimap<K, V> multimap) {
     this.multimap = checkNotNull(multimap);

File: guava/sources/com/google/common/collect/ImmutableSetMultimap.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.base.MoreObjects;
+import com.google.j2objc.annotations.Weak;
 
 import java.io.IOException;
 import java.io.InvalidObjectException;
@@ -423,7 +424,7 @@ private ImmutableSetMultimap<V, K> invert() {
   }
   
   private static final class EntrySet<K, V> extends ImmutableSet<Entry<K, V>> {
-    private transient final ImmutableSetMultimap<K, V> multimap;
+    @Weak private transient final ImmutableSetMultimap<K, V> multimap;
     
     EntrySet(ImmutableSetMultimap<K, V> multimap) {
       this.multimap = multimap;

File: guava/sources/com/google/common/collect/LinkedHashMultimap.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Objects;
+import com.google.j2objc.annotations.WeakOuter;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
@@ -300,6 +301,7 @@ public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {
   }
 
   @VisibleForTesting
+  @WeakOuter
   final class ValueSet extends Sets.ImprovedAbstractSet<V> implements ValueSetLink<K, V> {
     /*
      * We currently use a fixed load factor of 1.0, a bit higher than normal to reduce memory

File: guava/sources/com/google/common/collect/MapMakerInternalMap.java
Patch:
@@ -3806,6 +3806,7 @@ public void clear() {
     }
   }
 
+  @WeakOuter
   final class Values extends AbstractCollection<V> {
 
     @Override

File: guava/sources/com/google/common/collect/RegularImmutableTable.java
Patch:
@@ -92,6 +92,7 @@ final ImmutableCollection<V> createValues() {
     return isEmpty() ? ImmutableList.<V>of() : new Values();
   }
   
+  @WeakOuter
   private final class Values extends ImmutableList<V> {
     @Override
     public int size() {

File: guava/sources/com/google/common/util/concurrent/SerializingExecutor.java
Patch:
@@ -17,6 +17,7 @@
 package com.google.common.util.concurrent;
 
 import com.google.common.base.Preconditions;
+import com.google.j2objc.annotations.WeakOuter;
 
 import java.util.ArrayDeque;
 import java.util.Queue;
@@ -126,6 +127,7 @@ public void execute(Runnable r) {
    * isThreadScheduled = false and returns.  This allows the current worker
    * thread to return to the original pool.
    */
+  @WeakOuter
   private class TaskRunner implements Runnable {
     @Override
     public void run() {

File: guava/sources/com/google/common/annotations/GwtCompatible.java
Patch:
@@ -40,7 +40,7 @@
  *   }
  * }
  * </pre>
- * The return value of {@code Lists.newArrayList(E[])} has GWT
+ * <p>The return value of {@code Lists.newArrayList(E[])} has GWT
  * serializable type.  It is also useful in specifying contracts of interface
  * methods.  In the following example,
  *
@@ -52,7 +52,7 @@
  *   &lt;E> List&lt;E> newArrayList(E... elements);
  * }
  * </pre>
- * The {@code newArrayList(E[])} method of all implementations of {@code
+ * <p>The {@code newArrayList(E[])} method of all implementations of {@code
  * ListFactory} is expected to return a value with a GWT serializable type.
  *
  * <p>Note that a {@code GwtCompatible} type may have some {@link

File: guava/sources/com/google/common/base/AbstractIterator.java
Patch:
@@ -75,7 +75,9 @@ public final T next() {
       throw new NoSuchElementException();
     }
     state = State.NOT_READY;
-    return next;
+    T result = next;
+    next = null;
+    return result;
   }
 
   @Override public final void remove() {

File: guava/sources/com/google/common/base/Optional.java
Patch:
@@ -74,9 +74,8 @@ public abstract class Optional<T> implements Serializable {
   /**
    * Returns an {@code Optional} instance with no contained reference.
    */
-  @SuppressWarnings("unchecked")
   public static <T> Optional<T> absent() {
-    return (Optional<T>) Absent.INSTANCE;
+    return Absent.withType();
   }
 
   /**
@@ -129,7 +128,7 @@ public static <T> Optional<T> fromNullable(@Nullable T nullableReference) {
    *   Optional<? extends Number> first = numbers.first();
    *   Number value = first.or(0.5); // error}</pre>
    *
-   * As a workaround, it is always safe to cast an {@code Optional<? extends T>} to {@code
+   * <p>As a workaround, it is always safe to cast an {@code Optional<? extends T>} to {@code
    * Optional<T>}. Casting either of the above example {@code Optional} instances to {@code
    * Optional<Number>} (where {@code Number} is the desired output type) solves the problem:
    * <pre>   {@code

File: guava/sources/com/google/common/base/SmallCharMatcher.java
Patch:
@@ -87,7 +87,6 @@ private boolean checkFilter(int c) {
     return tableSize;
   }
 
-  @GwtIncompatible("java.util.BitSet")
   static CharMatcher from(BitSet chars, String description) {
     // Compute the filter.
     long filter = 0;
@@ -140,7 +139,6 @@ public boolean matches(char c) {
     return false;
   }
 
-  @GwtIncompatible("java.util.BitSet")
   @Override
   void setBits(BitSet table) {
     if (containsZero) {

File: guava/sources/com/google/common/cache/CacheStats.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.GwtCompatible;
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Objects;
 
 import java.util.concurrent.Callable;
@@ -264,7 +265,7 @@ public boolean equals(@Nullable Object object) {
 
   @Override
   public String toString() {
-    return Objects.toStringHelper(this)
+    return MoreObjects.toStringHelper(this)
         .add("hitCount", hitCount)
         .add("missCount", missCount)
         .add("loadSuccessCount", loadSuccessCount)

File: guava/sources/com/google/common/cache/RemovalNotification.java
Patch:
@@ -73,7 +73,7 @@ public boolean wasEvicted() {
     return value;
   }
 
-  @Override public final V setValue(V value){
+  @Override public final V setValue(V value) {
     throw new UnsupportedOperationException();
   }
 

File: guava/sources/com/google/common/collect/AbstractBiMap.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
+import static com.google.common.collect.CollectPreconditions.checkRemove;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
@@ -324,7 +325,7 @@ class BiMapEntry extends ForwardingMapEntry<K, V> {
         }
 
         @Override public void remove() {
-          checkState(entry != null);
+          checkRemove(entry != null);
           V value = entry.getValue();
           iterator.remove();
           removeFromInverseMap(value);

File: guava/sources/com/google/common/collect/ArrayListMultimap.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.common.collect;
 
-import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.collect.CollectPreconditions.checkNonnegative;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
@@ -110,7 +110,7 @@ private ArrayListMultimap() {
 
   private ArrayListMultimap(int expectedKeys, int expectedValuesPerKey) {
     super(Maps.<K, Collection<V>>newHashMapWithExpectedSize(expectedKeys));
-    checkArgument(expectedValuesPerKey >= 0);
+    checkNonnegative(expectedValuesPerKey, "expectedValuesPerKey");
     this.expectedValuesPerKey = expectedValuesPerKey;
   }
 

File: guava/sources/com/google/common/collect/DescendingMultiset.java
Patch:
@@ -140,4 +140,4 @@ class DescendingMultisetEntrySet extends Multisets.EntrySet<E> {
   @Override public String toString() {
     return entrySet().toString();
   }
-}
+}
\ No newline at end of file

File: guava/sources/com/google/common/collect/ForwardingList.java
Patch:
@@ -127,7 +127,7 @@ public List<E> subList(int fromIndex, int toIndex) {
    *
    * @since 7.0
    */
-  protected boolean standardAdd(E element){
+  protected boolean standardAdd(E element) {
     add(size(), element);
     return true;
   }

File: guava/sources/com/google/common/collect/ForwardingNavigableMap.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.google.common.collect;
 
+import static com.google.common.collect.CollectPreconditions.checkRemove;
 import static com.google.common.collect.Maps.keyOrNull;
 
 import com.google.common.annotations.Beta;
@@ -305,7 +306,7 @@ public java.util.Map.Entry<K, V> next() {
 
         @Override
         public void remove() {
-          Iterators.checkRemove(toRemove != null);
+          checkRemove(toRemove != null);
           forward().remove(toRemove.getKey());
           toRemove = null;
         }

File: guava/sources/com/google/common/collect/HashBasedTable.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.common.collect;
 
-import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.collect.CollectPreconditions.checkNonnegative;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.base.Supplier;
@@ -86,7 +86,7 @@ public static <R, C, V> HashBasedTable<R, C, V> create() {
    */
   public static <R, C, V> HashBasedTable<R, C, V> create(
       int expectedRows, int expectedCellsPerRow) {
-    checkArgument(expectedCellsPerRow >= 0);
+    checkNonnegative(expectedCellsPerRow, "expectedCellsPerRow");
     Map<R, Map<C, V>> backingMap =
         Maps.newHashMapWithExpectedSize(expectedRows);
     return new HashBasedTable<R, C, V>(

File: guava/sources/com/google/common/collect/ImmutableSortedMapFauxverideShim.java
Patch:
@@ -16,16 +16,13 @@
 
 package com.google.common.collect;
 
-import com.google.common.annotations.GwtCompatible;
-
 /**
  * "Overrides" the {@link ImmutableMap} static methods that lack
  * {@link ImmutableSortedMap} equivalents with deprecated, exception-throwing
  * versions. See {@link ImmutableSortedSetFauxverideShim} for details.
  *
  * @author Chris Povirk
  */
-@GwtCompatible
 abstract class ImmutableSortedMapFauxverideShim<K, V>
     extends ImmutableMap<K, V> {
   /**

File: guava/sources/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java
Patch:
@@ -26,8 +26,8 @@
  *   Set<Object> sorted = ImmutableSortedMultiset.copyOf(objects);
  *   // BAD CODE! The returned multiset is actually an unsorted ImmutableMultiset!}</pre>
  *
- * While we could put the overrides in {@link ImmutableSortedMultiset} itself, it seems clearer to
- * separate these "do not call" methods from those intended for normal use.
+ * <p>While we could put the overrides in {@link ImmutableSortedMultiset} itself, it seems clearer
+ * to separate these "do not call" methods from those intended for normal use.
  *
  * @author Louis Wasserman
  */

File: guava/sources/com/google/common/collect/MapConstraint.java
Patch:
@@ -33,7 +33,7 @@
  *     }
  *   }}</pre>
  *
- * In order to be effective, constraints should be deterministic; that is, they
+ * <p>In order to be effective, constraints should be deterministic; that is, they
  * should not depend on state that can change (such as external state, random
  * variables, and time) and should only depend on the value of the passed-in key
  * and value. A non-deterministic constraint cannot reliably enforce that all

File: guava/sources/com/google/common/collect/MinMaxPriorityQueue.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkPositionIndex;
 import static com.google.common.base.Preconditions.checkState;
+import static com.google.common.collect.CollectPreconditions.checkRemove;
 
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.VisibleForTesting;
@@ -781,8 +782,7 @@ private class QueueIterator implements Iterator<E> {
     }
 
     @Override public void remove() {
-      checkState(canRemove,
-          "no calls to remove() since the last call to next()");
+      checkRemove(canRemove);
       checkModCount();
       canRemove = false;
       expectedModCount++;

File: guava/sources/com/google/common/collect/Multiset.java
Patch:
@@ -307,7 +307,7 @@ interface Entry<E> {
    *
    *   ((element == null) ? 0 : element.hashCode()) ^ count(element)}</pre>
    *
-   * over all distinct elements in the multiset. It follows that a multiset and
+   * <p>over all distinct elements in the multiset. It follows that a multiset and
    * its entry set always have the same hash code.
    */
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/TranslationProcessor.java
Patch:
@@ -444,7 +444,7 @@ private void maybeAddToClosure(ITypeBinding type) {
         return;
       }
       typeName = typeName.substring(0, iDot);
-      sourceName = typeName.replace('.', File.pathSeparatorChar) + ".java";
+      sourceName = typeName.replace('.', File.separatorChar) + ".java";
       if (seenFiles.contains(sourceName)) {
         return;
       }
@@ -469,7 +469,7 @@ private boolean findClassFile(String typeName) {
     String path = typeName.replace('.', '/') + ".class";
     InputFile f = null;
     try {
-      f = FileUtil.findOnSourcePath(path);
+      f = FileUtil.findOnClassPath(path);
     } catch (IOException e) {
       ErrorUtil.warning(e.getMessage());
     }

File: jre_emul/android/libcore/luni/src/main/java/libcore/icu/NativeDecimalFormat.java
Patch:
@@ -676,7 +676,7 @@ private static native Number parse(Object nativeFormatter, String string,
         }
       }
 
-      NSError *error;
+      NSError *error = nil;
       BOOL success = [formatter getObjectValue:&result
                                      forString:string
                                          range:&range

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -190,7 +190,7 @@ private void printImports(List<CompilationUnit> packageInfos) {
       }
     }
 
-    Set<Import> forwardDecls = Sets.newHashSet(declarationCollector.getForwardDeclarations());
+    Set<Import> forwardDecls = Sets.newHashSet();
     for (Import imp : declarationCollector.getForwardDeclarations()) {
       // Only need to forward declare private local types. All else is handled
       // by imports.

File: jre_emul/android/libcore/luni/src/main/java/libcore/icu/NativeDecimalFormat.java
Patch:
@@ -681,7 +681,7 @@ private static native Number parse(Object nativeFormatter, String string,
                                      forString:string
                                          range:&range
                                          error:&error];
-      if (success) {
+      if (success && (error == nil)) {
         [position setIndexWithInt:start + (int) range.length];
         if (fmod([result doubleValue], 1.0) == 0) {
           return JavaLangLong_valueOfWithLong_([result longLongValue]);

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -443,11 +443,10 @@ public void testGenericMethodWithAnonymousReturn() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation,
         "return [new_Test_$1_initWithJavaUtilCollection_(collection) autorelease];");
-    translation = getTranslatedFile("Test.h");
     assertTranslation(translation,
         "- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)capture$0;");
     assertTranslation(translation,
-        "FOUNDATION_EXPORT Test_$1 *new_Test_$1_initWithJavaUtilCollection_("
+        "__attribute__((unused)) static Test_$1 *new_Test_$1_initWithJavaUtilCollection_("
         + "id<JavaUtilCollection> capture$0) NS_RETURNS_RETAINED;");
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/types/HeaderImportCollector.java
Patch:
@@ -36,6 +36,7 @@
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
+import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 
@@ -82,8 +83,7 @@ public HeaderImportCollector(Filter filter) {
   }
 
   public void collect(TreeNode node) {
-    run(node);
-    postCollect();
+    collect(Collections.singletonList(node));
   }
 
   public void collect(List<? extends TreeNode> nodes) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -118,7 +118,7 @@ protected void generateFileHeader() {
     Set<String> includeStmts = Sets.newTreeSet();
     includeStmts.add("#include \"J2ObjC_header.h\"");
     for (Import imp : superTypes) {
-      includeStmts.add(String.format("#include \"%s.h\"", imp.getImportFileName()));
+      includeStmts.add(String.format("#include \"%s\"", imp.getImportFileName()));
     }
     for (String stmt : includeStmts) {
       println(stmt);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -132,7 +132,7 @@ public void generateType(AbstractTypeDeclaration node) {
       newline();
       printf("#define %s_RESTRICT 1\n", imp.getMainTypeName());
       printf("#define %s_INCLUDE 1\n", imp.getTypeName());
-      printf("#include \"%s.h\"\n", imp.getImportFileName());
+      printf("#include \"%s\"\n", imp.getImportFileName());
     }
 
     super.generateType(node);

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -91,7 +91,7 @@ private Import(ITypeBinding type) {
       mainType = mainType.getDeclaringClass();
     }
     this.mainTypeName = NameTable.getFullName(mainType);
-    this.importFileName = getImportFileName(mainType);
+    this.importFileName = getImportFileName(mainType) + ".h";
   }
 
   public ITypeBinding getType() {

File: translator/src/main/java/com/google/devtools/j2objc/util/TranslationUtil.java
Patch:
@@ -56,6 +56,9 @@ public static boolean hasPrivateDeclaration(ITypeBinding type) {
    * implementation file.
    */
   public static boolean hasPrivateDeclaration(BodyDeclaration decl) {
+    if (decl instanceof AbstractTypeDeclaration) {
+      return hasPrivateDeclaration(((AbstractTypeDeclaration) decl).getTypeBinding());
+    }
     TreeNode parent = decl.getParent();
     if (parent instanceof AbstractTypeDeclaration
         && hasPrivateDeclaration(((AbstractTypeDeclaration) parent).getTypeBinding())) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -49,7 +49,7 @@ public static void generate(GenerationUnit unit) {
   }
 
   @Override
-  protected void generateFileHeader(List<AbstractTypeDeclaration> types) {
+  protected void generateFileHeader() {
     println("#include \"J2ObjC_header.h\"");
     newline();
     printf("#pragma push_macro(\"%s_INCLUDE_ALL\")\n", mainTypeName);
@@ -60,8 +60,7 @@ protected void generateFileHeader(List<AbstractTypeDeclaration> types) {
     println("#endif");
     printf("#undef %s_RESTRICT\n", mainTypeName);
 
-    types = Lists.reverse(types);
-    for (AbstractTypeDeclaration type : types) {
+    for (AbstractTypeDeclaration type : Lists.reverse(getOrderedTypes())) {
       HeaderImportCollector collector =
           new HeaderImportCollector(HeaderImportCollector.Filter.PUBLIC_ONLY);
       collector.collect(type);

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -54,7 +54,6 @@
 import com.google.devtools.j2objc.translate.RewriterTest;
 import com.google.devtools.j2objc.translate.StaticVarRewriterTest;
 import com.google.devtools.j2objc.translate.SuperMethodInvocationRewriterTest;
-import com.google.devtools.j2objc.translate.TypeSorterTest;
 import com.google.devtools.j2objc.translate.UnsequencedExpressionRewriterTest;
 import com.google.devtools.j2objc.translate.VarargsRewriterTest;
 import com.google.devtools.j2objc.translate.VariableRenamerTest;
@@ -128,7 +127,6 @@ public class SmallTests {
     SuperMethodInvocationRewriterTest.class,
     TreeConvertTest.class,
     TypeImplementationGeneratorTest.class,
-    TypeSorterTest.class,
     TranslationProcessorTest.class,
     TreeUtilTest.class,
     UnicodeUtilsTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeUtil.java
Patch:
@@ -395,7 +395,7 @@ public int compare(MethodDeclaration m1, MethodDeclaration m2) {
   }
 
   public static List<AnnotationTypeMemberDeclaration> getAnnotationMembers(
-      AnnotationTypeDeclaration node) {
+      AbstractTypeDeclaration node) {
     return Lists.newArrayList(
         Iterables.filter(node.getBodyDeclarations(), AnnotationTypeMemberDeclaration.class));
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypeImplementationGenerator.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.gen;
 
 import com.google.devtools.j2objc.ast.AbstractTypeDeclaration;
-import com.google.devtools.j2objc.ast.AnnotationTypeDeclaration;
 import com.google.devtools.j2objc.ast.AnnotationTypeMemberDeclaration;
 import com.google.devtools.j2objc.ast.EnumConstantDeclaration;
 import com.google.devtools.j2objc.ast.EnumDeclaration;
@@ -174,8 +173,7 @@ private void printReflectionMethods() {
 
   private void printAnnotationImplementation() {
     if (BindingUtil.isRuntimeAnnotation(typeBinding)) {
-      List<AnnotationTypeMemberDeclaration> members =
-          TreeUtil.getAnnotationMembers((AnnotationTypeDeclaration) typeNode);
+      List<AnnotationTypeMemberDeclaration> members = TreeUtil.getAnnotationMembers(typeNode);
       printAnnotationProperties(members);
       if (!members.isEmpty()) {
         printAnnotationConstructor(typeBinding);

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -466,7 +466,7 @@ public void testEnum() throws IOException {
         "  Color_WHITE = 1,",
         "  Color_BLUE = 2,",
         "};");
-    assertTranslation(translation, "@interface ColorEnum : JavaLangEnum < NSCopying > {");
+    assertTranslation(translation, "@interface ColorEnum : JavaLangEnum < NSCopying >");
     assertTranslation(translation, "+ (IOSObjectArray *)values;");
     assertTranslation(translation, "+ (ColorEnum *)valueOfWithNSString:(NSString *)name;");
     assertTranslation(translation, "FOUNDATION_EXPORT ColorEnum *ColorEnum_values_[];");

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -48,6 +48,7 @@ protected boolean printPrivateDeclarations() {
   private void generate() {
     printConstantDefines();
     printClassExtension();
+    printCompanionClassDeclaration();
     printFieldSetters();
     printStaticFieldDeclarations();
     printOuterDeclarations();

File: translator/src/main/java/com/google/devtools/j2objc/translate/OcniExtractor.java
Patch:
@@ -134,7 +134,9 @@ public void endVisit(EnumDeclaration node) {
 
   @Override
   public void endVisit(TypeDeclaration node) {
-    visitType(node);
+    if (!node.isInterface()) {
+      visitType(node);
+    }
   }
 
   private void visitType(AbstractTypeDeclaration node) {

File: translator/src/main/java/com/google/devtools/j2objc/util/BindingUtil.java
Patch:
@@ -305,7 +305,7 @@ public static boolean isRuntimeAnnotation(IAnnotationBinding binding) {
    * a runtime retention policy.
    */
   public static boolean isRuntimeAnnotation(ITypeBinding binding) {
-    if (binding != null) {
+    if (binding != null && binding.isAnnotation()) {
       for (IAnnotationBinding ann : binding.getAnnotations()) {
         if (ann.getName().equals("Retention")) {
           IVariableBinding retentionBinding =

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -152,7 +152,7 @@ private void generatePackageInfo(CompilationUnit unit) {
     printf("@interface %s : NSObject\n", typeName);
     printf("@end\n\n");
     printf("@implementation %s\n", typeName);
-    new RuntimeAnnotationGenerator(getBuilder()).printPackageAnnotationMethod(node);
+    RuntimeAnnotationGenerator.printPackageAnnotationMethod(getBuilder(), node);
     println("\n@end");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -28,6 +28,7 @@
 import com.google.devtools.j2objc.gen.PrimitiveArrayTest;
 import com.google.devtools.j2objc.gen.SignatureGeneratorTest;
 import com.google.devtools.j2objc.gen.StatementGeneratorTest;
+import com.google.devtools.j2objc.gen.TypeImplementationGeneratorTest;
 import com.google.devtools.j2objc.translate.AbstractMethodRewriterTest;
 import com.google.devtools.j2objc.translate.AnonymousClassConverterTest;
 import com.google.devtools.j2objc.translate.ArrayRewriterTest;
@@ -126,6 +127,7 @@ public class SmallTests {
     StaticVarRewriterTest.class,
     SuperMethodInvocationRewriterTest.class,
     TreeConvertTest.class,
+    TypeImplementationGeneratorTest.class,
     TypeSorterTest.class,
     TranslationProcessorTest.class,
     TreeUtilTest.class,

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -999,17 +999,17 @@ public void testEnclosingMethodAndConstructor() throws IOException {
     assertTranslatedLines(translation,
         "static const J2ObjCEnclosingMethodInfo "
         + "enclosing_method = { \"A\", \"initWithNSString:\" };",
-        "static const J2ObjcClassInfo _A_A_B = { 2, \"B\", NULL, \"A\", 0x0, 1, methods, "
+        "static const J2ObjcClassInfo _A_1B = { 2, \"B\", NULL, \"A\", 0x0, 1, methods, "
         + "0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };");
     assertTranslatedLines(translation,
         "static const J2ObjCEnclosingMethodInfo "
         + "enclosing_method = { \"A\", \"testWithInt:withLong:\" };",
-        "static const J2ObjcClassInfo _A_test_C = { 2, \"C\", NULL, \"A\", 0x0, 1, methods, "
+        "static const J2ObjcClassInfo _A_1C = { 2, \"C\", NULL, \"A\", 0x0, 1, methods, "
         + "0, NULL, 0, NULL, 1, inner_classes, &enclosing_method, NULL };");
 
     // Verify D is not enclosed by test(), as it's enclosed by C.
     assertTranslation(translation,
-        "J2ObjcClassInfo _A_test_C_test_D = { 2, \"D\", NULL, \"A$C\", 0x0, 1, methods, "
+        "J2ObjcClassInfo _A_1C_D = { 2, \"D\", NULL, \"A$C\", 0x0, 1, methods, "
         + "0, NULL, 0, NULL, 0, NULL, NULL, NULL }");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/OuterReferenceFixerTest.java
Patch:
@@ -36,13 +36,13 @@ public void testLocalClassCaptureVariablesInsideGenericClass() throws IOExceptio
     String translation = translateSourceFile(
         "class Test<T> { void test() { final Object o = null; class Inner { "
         + "public void foo() { o.toString(); } } new Inner(); } }", "Test", "Test.m");
-    assertTranslation(translation, "[[Test_test_Inner alloc] initWithId:o]");
+    assertTranslation(translation, "[[Test_1Inner alloc] initWithId:o]");
   }
 
   public void testRecursiveConstructionOfLocalClass() throws IOException {
     String translation = translateSourceFile(
         "public class Test { void test(final Object bar) { "
         + "class Foo { void foo() { bar.toString(); new Foo(); } } } }", "Test", "Test.m");
-    assertTranslation(translation, "[[Test_test_Foo alloc] initWithTest:this$0_ withId:val$bar_]");
+    assertTranslation(translation, "[[Test_1Foo alloc] initWithTest:this$0_ withId:val$bar_]");
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/gen/TypePrivateDeclarationGenerator.java
Patch:
@@ -21,7 +21,6 @@
 import com.google.devtools.j2objc.ast.FieldDeclaration;
 import com.google.devtools.j2objc.ast.FunctionDeclaration;
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
-import com.google.devtools.j2objc.util.NameTable;
 
 import org.eclipse.jdt.core.dom.Modifier;
 
@@ -62,7 +61,6 @@ private void printClassExtension() {
     boolean hasPrivateFields = !Iterables.isEmpty(privateFields);
     Iterable<BodyDeclaration> privateDecls = getInnerDeclarations();
     if (!Iterables.isEmpty(privateDecls) || hasPrivateFields) {
-      String typeName = NameTable.getFullName(node.getTypeBinding());
       newline();
       printf("@interface %s ()", typeName);
       if (hasPrivateFields) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
Patch:
@@ -65,7 +65,7 @@ public static String createClassSignature(ITypeBinding type) {
   public static String createFieldTypeSignature(IVariableBinding variable) {
     ITypeBinding type = variable.getType();
     if (type.isArray()) {
-      if (!type.getElementType().isTypeVariable()) {
+      if (!type.getElementType().isTypeVariable() && !type.getElementType().isParameterizedType()) {
         return null;
       }
     } else if (!type.isTypeVariable() && !type.isParameterizedType()) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -164,10 +164,10 @@ protected void printForwardDeclarations(Set<Import> forwardDecls) {
       forwardStmts.add(createForwardDeclaration(imp.getTypeName(), imp.isInterface()));
     }
     if (!forwardStmts.isEmpty()) {
+      newline();
       for (String stmt : forwardStmts) {
         println(stmt);
       }
-      newline();
     }
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -122,7 +122,7 @@ public void testCastTranslation() throws IOException {
   }
 
   public void testInterfaceCastTranslation() throws IOException {
-    String source = "java.util.ArrayList al = new java.util.ArrayList(); "
+    String source = "java.util.Collection al = new java.util.ArrayList(); "
         + "java.util.List l = (java.util.List) al;";
     List<Statement> stmts = translateStatements(source);
     assertEquals(2, stmts.size());

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -66,14 +66,12 @@ private void setGenerationContext(AbstractTypeDeclaration type) {
 
   public void generate() {
     List<CompilationUnit> units = getGenerationUnit().getCompilationUnits();
-    String outputPath = getGenerationUnit().getOutputPath();
-
     List<AbstractTypeDeclaration> types = collectTypes(units);
     List<CompilationUnit> packageInfos = collectPackageInfos(units);
 
     println(J2ObjC.getFileHeader(getGenerationUnit().getSourceName()));
     if (!types.isEmpty() || !packageInfos.isEmpty()) {
-      printStart(outputPath);
+      printStart(getGenerationUnit().getSourceName());
       printImports();
       for (CompilationUnit packageInfo : packageInfos) {
         packageInfo.setGenerationContext();

File: translator/src/test/java/com/google/devtools/j2objc/gen/LineDirectivesTest.java
Patch:
@@ -60,6 +60,7 @@ public void testMethodNumbering() throws IOException {
         + "  void two() {}\n"
         + "  void three() {}}\n",
         "A", "A.m");
+    assertTranslation(translation, "#line 1 \"A.java\"");
     assertTranslation(translation, "#line 3\n@implementation A");
     assertTranslation(translation, "#line 6\n- (void)one");
     // Lines match up between one() and two() so no need for the directive.
@@ -77,6 +78,7 @@ public void testStatementNumbering() throws IOException {
         + "    return Integer.toString(i);\n"
         + "  }}\n",
         "A", "A.m");
+    assertTranslation(translation, "#line 1 \"A.java\"");
     assertTranslation(translation, "#line 1\n@implementation A");
     assertTranslation(translation, "#line 2\n- (NSString *)test");
     assertTranslation(translation, "#line 4\n  jint i = 0;");

File: jre_emul/android/libcore/luni/src/main/java/java/util/regex/Matcher.java
Patch:
@@ -298,7 +298,7 @@ public StringBuffer appendTail(StringBuffer buffer) {
      */
     public String replaceFirst(String replacement) {
         reset();
-        StringBuffer buffer = new StringBuilder(input.length());
+        StringBuffer buffer = new StringBuffer(input.length());
         if (find()) {
             appendReplacement(buffer, replacement);
         }
@@ -315,7 +315,7 @@ public String replaceFirst(String replacement) {
      */
     public String replaceAll(String replacement) {
         reset();
-        StringBuffer buffer = new StringBuilder(input.length());
+        StringBuffer buffer = new StringBuffer(input.length());
         while (find()) {
             appendReplacement(buffer, replacement);
         }

File: translator/src/main/java/com/google/devtools/j2objc/TranslationProcessor.java
Patch:
@@ -109,7 +109,7 @@ this path is calculated with getRelativePath(String, CompilationUnit). For files
   a given compilation unit more than once. For some use cases, this is important, like if
   we supply a source or input file that overrides files later on the source file paths.
 
-  TODO(user): Consider whether this logic is correct; in particular, the potential problem of
+  TODO(mthvedt): Consider whether this logic is correct; in particular, the potential problem of
   depending on InputFiles to have the correct java relative path returned by #getUnitName().
   Right now, this fulfills expected behavior and passes tests. See discussion on cl/86308318 .
    */

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -49,7 +49,7 @@ public static void generate(GenerationUnit unit) {
 
   @Override
   protected void generateFileHeader() {
-    // TODO(user): Work out if we need segmented headers for GenerationUnits with multiple
+    // TODO(mthvedt): Work out if we need segmented headers for GenerationUnits with multiple
     // CompilationUnits, and if so, how to handle these directives properly.
     println("#include \"J2ObjC_header.h\"");
     newline();

File: translator/src/main/java/com/google/devtools/j2objc/gen/SourceFileGenerator.java
Patch:
@@ -137,7 +137,7 @@ protected GenerationUnit getGenerationUnit() {
   }
 
   protected CompilationUnit getUnit() {
-    // TODO(user): Eliminate this method
+    // TODO(mthvedt): Eliminate this method
     // when we support multiple compilation units per generation unit.
     return getGenerationUnit().getCompilationUnits().get(0);
   }

File: testing/mockito/src/main/java/org/mockito/internal/creation/ios/IosMockMaker.java
Patch:
@@ -224,7 +224,8 @@ void setHandler(InvocationHandler handler) {
       IOSClass *clazz = getMethodDescription([self class], selector, &methodDescription);
       if (clazz) {
         JavaLangReflectMethod *method =
-            [clazz findMethodWithTranslatedName:NSStringFromSelector(selector)];
+            [clazz findMethodWithTranslatedName:NSStringFromSelector(selector)
+                                checkSupertypes:YES];
         IOSObjectArray *paramTypes = [method getParameterTypes];
         NSUInteger numArgs = paramTypes->size_;
         IOSObjectArray *args = [IOSObjectArray arrayWithLength:numArgs type:NSObject_class_()];

File: jre_emul/android/libcore/luni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -333,7 +333,8 @@ private static native Class generateProxy(String name, Class[] interfaces,
         if (methodDescription.name && sel_isEqual(selector, methodDescription.name)) {
           IOSClass *iosProtocol = IOSClass_fromProtocol(protocol);
           JavaLangReflectMethod *method =
-              [iosProtocol findMethodWithTranslatedName:NSStringFromSelector(selector)];
+              [iosProtocol findMethodWithTranslatedName:NSStringFromSelector(selector)
+                                        checkSupertypes:YES];
           IOSObjectArray *paramTypes = [method getParameterTypes];
           jint numArgs = paramTypes->size_;
           IOSObjectArray *args = [IOSObjectArray arrayWithLength:numArgs type:NSObject_class_()];

File: jre_emul/apache_harmony/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/ClassTest.java
Patch:
@@ -374,11 +374,9 @@ public void test_getConstructors() throws Exception {
     /**
      * @tests java.lang.Class#getDeclaredClasses()
      */
-    /* TODO(tball): enable if Class.getDeclaredClasses is mapped.
     public void test_getDeclaredClasses() {
         assertEquals("Incorrect class array returned", 2, ClassTest.class.getClasses().length);
     }
-    */
 
     /**
      * @tests java.lang.Class#getDeclaredConstructor(java.lang.Class[])

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -96,7 +96,7 @@ protected void generateFileFooter() {
   }
 
   @Override
-  public void generate(AbstractTypeDeclaration node) {
+  public void generateType(AbstractTypeDeclaration node) {
     String typeName = NameTable.getFullName(node.getTypeBinding());
     printf("#if !defined (_%s_) && (%s_INCLUDE_ALL || %s_INCLUDE)\n", typeName, mainTypeName,
            typeName);
@@ -124,7 +124,7 @@ public void generate(AbstractTypeDeclaration node) {
       newline();
     }
 
-    super.generate(node);
+    super.generateType(node);
     println("#endif");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -212,7 +212,7 @@ public void testAccessExternalStringConstant() throws IOException {
       + "String foo; { foo = Bar.FOO; } }",
       "Example", "Example.m");
     assertTranslation(translation, "Example_set_foo_(self, Example_Bar_get_FOO_())");
-    assertTranslation(translation, "NSString * Example_Bar_FOO_ = @\"Mumble\";");
+    assertTranslation(translation, "NSString *Example_Bar_FOO_ = @\"Mumble\";");
     translation = getTranslatedFile("Example.h");
     assertTranslation(translation, "FOUNDATION_EXPORT NSString *Example_Bar_FOO_;");
     assertTranslation(translation, "J2OBJC_STATIC_FIELD_GETTER(Example_Bar, FOO_, NSString *)");

File: translator/src/test/java/com/google/devtools/j2objc/translate/DeadCodeEliminatorTest.java
Patch:
@@ -92,12 +92,12 @@ public void testDeadFields() throws IOException {
         .build();
     setDeadCodeMap(map);
     String translation = translateSourceFile(source, "A", "A.h");
-    assertTranslation(translation, "#define A_foo 1");
     assertTranslation(translation, "#define A_pi 3.2");
     assertTranslation(translation, "NSString *bah_;");
     assertNotInTranslation(translation, "baz");
     translation = getTranslatedFile("A.m");
-    assertTranslation(translation, "NSString * A_bar_ = @\"bar\";");
+    assertTranslation(translation, "#define A_foo 1");
+    assertTranslation(translation, "NSString *A_bar_ = @\"bar\";");
     assertTranslation(translation, "abc_ = 9;");
     assertTranslation(translation, "A_set_bah_(self, @\"123\");");
     assertNotInTranslation(translation, "baz");

File: translator/src/main/java/com/google/devtools/j2objc/translate/UnsequencedExpressionRewriter.java
Patch:
@@ -350,7 +350,7 @@ private Expression conditionalFromSubBranches(
       InfixExpression result = new InfixExpression(
           Types.resolveJavaType("boolean"), op, branches.get(0).copy(), branches.get(1).copy());
       for (int i = 2; i < branches.size(); i++) {
-        result.getExtendedOperands().add(branches.get(i));
+        result.getExtendedOperands().add(branches.get(i).copy());
       }
       return result;
     }

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -361,7 +361,7 @@ public void testBitPrecedence() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "return a & b;");
     assertTranslation(translation, "return c | d;");
-    assertTranslatedLines(translation, "return ((e & f) | (g & h)) | i;");
+    assertTranslatedLines(translation, "return (e & f) | (g & h) | i;");
     assertTranslatedLines(translation, "return j | k | (l & m & n);");
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -339,8 +339,7 @@ private void printStaticInitFunction(AbstractTypeDeclaration node) {
     ITypeBinding binding = node.getTypeBinding();
     String typeName = NameTable.getFullName(binding);
     if (hasInitializeMethod(node)) {
-      printf("\nFOUNDATION_EXPORT BOOL %s_initialized;\n", typeName);
-      printf("J2OBJC_STATIC_INIT(%s)\n", typeName);
+      printf("\nJ2OBJC_STATIC_INIT(%s)\n", typeName);
     } else {
       printf("\nJ2OBJC_EMPTY_STATIC_INIT(%s)\n", typeName);
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -343,7 +343,7 @@ private void printInitFlagDefinition(AbstractTypeDeclaration node) {
     ITypeBinding binding = node.getTypeBinding();
     String typeName = NameTable.getFullName(binding);
     if (hasInitializeMethod(node)) {
-      printf("\nBOOL %s_initialized = NO;\n", typeName);
+      printf("\nJ2OBJC_INITIALIZED_DEFN(%s)\n", typeName);
     }
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -280,7 +280,6 @@ public void testRenamePackageAnnotationEnum() throws IOException {
     assertTranslation(translation, "FBTestEnum_values()");
     assertTranslation(translation, "+ (FBTestEnum *)valueOfWithNSString:(NSString *)name;");
     assertTranslation(translation, "FBTestEnum *FBTestEnum_valueOfWithNSString_");
-    assertTranslation(translation, "FBTestEnum_initialized");
     assertTranslation(translation, "J2OBJC_STATIC_INIT(FBTestEnum");
     assertTranslation(translation, "typedef FBTestEnum FooBarTestEnum;");
 

File: guava/sources/com/google/common/base/Stopwatch.java
Patch:
@@ -133,7 +133,7 @@ public static Stopwatch createStarted(Ticker ticker) {
    * @deprecated Use {@link Stopwatch#createUnstarted()} instead.
    */
   @Deprecated
-  Stopwatch() {
+  public Stopwatch() {
     this(Ticker.systemTicker());
   }
 
@@ -144,7 +144,7 @@ public static Stopwatch createStarted(Ticker ticker) {
    * @deprecated Use {@link Stopwatch#createUnstarted(Ticker)} instead.
    */
   @Deprecated
-  Stopwatch(Ticker ticker) {
+  public Stopwatch(Ticker ticker) {
     this.ticker = checkNotNull(ticker, "ticker");
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -75,7 +75,7 @@ public class Options {
   private static boolean jsniWarnings = true;
   private static boolean buildClosure = false;
   private static boolean stripReflection = false;
-  private static boolean extractUnsequencedModifications = false;
+  private static boolean extractUnsequencedModifications = true;
   private static boolean docCommentsEnabled = false;
   private static boolean finalMethodsAsFunctions = true;
   private static boolean removeClassMethods = false;
@@ -299,6 +299,8 @@ public static String[] load(String[] args) throws IOException {
         buildClosure = true;
       } else if (arg.equals("--extract-unsequenced")) {
         extractUnsequencedModifications = true;
+      } else if (arg.equals("--no-extract-unsequenced")) {
+        extractUnsequencedModifications = false;
       } else if (arg.equals("--doc-comments")) {
         docCommentsEnabled = true;
       } else if (arg.startsWith(BATCH_PROCESSING_MAX_FLAG)) {

File: translator/src/main/java/com/google/devtools/j2objc/TranslationProcessor.java
Patch:
@@ -419,7 +419,7 @@ public static void applyMutations(
   static String getOutputFileName(InputFile file, CompilationUnit node) {
     String result;
     if (Options.useSourceDirectories()) {
-      result = file.getUnitName();
+      result = file.getUnitName().replace(".java", "");
     } else {
       PackageDeclaration pkg = node.getPackage();
       if (Options.usePackageDirectories() && !pkg.isDefaultPackage()) {

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -265,7 +265,7 @@ public void testRenamePackageAnnotation() throws IOException {
     translation = getTranslatedFile("foo/bar/Test.m");
     assertTranslation(translation, "#include \"foo/bar/Test.h\""); // should be full path.
     assertTranslation(translation, "@implementation FBTest");
-    assertTranslation(translation, "J2ObjcClassInfo _FBTest = { 1, \"Test\", \"foo.bar\", ");
+    assertTranslation(translation, "J2ObjcClassInfo _FBTest = { 2, \"Test\", \"foo.bar\", ");
   }
 
   public void testRenamePackageAnnotationEnum() throws IOException {
@@ -287,7 +287,7 @@ public void testRenamePackageAnnotationEnum() throws IOException {
     translation = getTranslatedFile("foo/bar/Test.m");
     assertTranslation(translation, "#include \"foo/bar/Test.h\""); // should be full path.
     assertTranslation(translation, "@implementation FBTestEnum");
-    assertTranslation(translation, "J2ObjcClassInfo _FBTestEnum = { 1, \"Test\", \"foo.bar\", ");
+    assertTranslation(translation, "J2ObjcClassInfo _FBTestEnum = { 2, \"Test\", \"foo.bar\", ");
 
     // Make sure package-info class doesn't use prefix for its own type name.
     translation = translateSourceFile("foo/bar/package-info", "foo/bar/package-info.m");

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -213,6 +213,9 @@ protected void generate(AnnotationTypeDeclaration node) {
         println("\n- (IOSClass *)annotationType {");
         printf("  return %s_class_();\n", typeName);
         println("}");
+        println("\n- (NSString *)description {");
+        printf("  return @\"@%s()\";\n", node.getTypeBinding().getBinaryName());
+        println("}");
       }
       printInitializeMethod(node);
       if (needsReflection) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -899,8 +899,8 @@ public void testAnnotationMetadata() throws IOException {
         + "}",
         "Test", "Test.m");
     assertTranslation(translation,
-        "{ \"fooDefault\", \"foo\", \"Ljava.lang.String;\", 0x401, NULL },");
-    assertTranslation(translation, "{ \"numDefault\", \"num\", \"I\", 0x401, NULL },");
+        "{ \"fooDefault\", \"foo\", \"Ljava.lang.String;\", 0x100a, NULL },");
+    assertTranslation(translation, "{ \"numDefault\", \"num\", \"I\", 0x100a, NULL },");
   }
 
   // Verify that a class with an annotation with a reserved name property is

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -632,7 +632,8 @@ private void printAnnotationParameters(Annotation annotation) {
       }
       IMemberValuePairBinding valueBinding = valueBindings[i];
       print(i == 0 ? "With" : "with");
-      printf("%s:", NameTable.capitalize(valueBinding.getName()));
+      printf("%s:", NameTable.capitalize(
+          NameTable.getAnnotationPropertyName(valueBinding.getMethodBinding())));
       Object value = valueBinding.getValue();
       printAnnotationValue(value);
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/MetadataGenerator.java
Patch:
@@ -79,7 +79,7 @@ private void generateMetadata() {
     int superclassTypeArgsSize = printSuperclassTypeArguments();
     printf("  static const J2ObjcClassInfo _%s = { %d, ", fullName, METADATA_VERSION);
     String simpleName = type.getName();
-    if (simpleName.matches("^\\$[0-9]*$")) {
+    if (type.isAnonymous()) {
       simpleName = "";  // Anonymous classes have an empty simple name.
     }
     printf("\"%s\", ", simpleName);

File: jre_emul/Classes/com/google/j2objc/security/IosRSAKey.java
Patch:
@@ -95,7 +95,7 @@ public native byte[] getEncoded() /*-[
 
       IOSByteArray *bytes = nil;
       if (result == noErr && publicKey.length > 0) {
-        bytes = [IOSByteArray arrayWithBytes:publicKey.bytes count:publicKey.length];
+        bytes = [IOSByteArray arrayWithBytes:(jbyte *)publicKey.bytes count:publicKey.length];
         [publicKey release];
       }
       return bytes;
@@ -161,7 +161,7 @@ public native byte[] getEncoded() /*-[
 
       IOSByteArray *bytes = nil;
       if (result == noErr && privateKey.length > 0) {
-        bytes = [IOSByteArray arrayWithBytes:privateKey.bytes count:privateKey.length];
+        bytes = [IOSByteArray arrayWithBytes:(jbyte *)privateKey.bytes count:privateKey.length];
         [privateKey release];
       }
       return bytes;

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -152,10 +152,8 @@ public void generate(TypeDeclaration node) {
     } else {
       printStaticInitFunction(node);
       printFieldSetters(node, false);
-      printf("\nCF_EXTERN_C_BEGIN\n");
       printFunctions(node.getBodyDeclarations());
       printStaticFields(node);
-      printf("CF_EXTERN_C_END\n");
     }
 
     printIncrementAndDecrementFunctions(binding);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -204,8 +204,7 @@ protected void generate(AnnotationTypeDeclaration node) {
       printf("\n@implementation %s\n", typeName);
 
       if (isRuntime) {
-        List<AnnotationTypeMemberDeclaration> members = Lists.newArrayList(
-            Iterables.filter(node.getBodyDeclarations(), AnnotationTypeMemberDeclaration.class));
+        List<AnnotationTypeMemberDeclaration> members = TreeUtil.getAnnotationMembers(node);
         printAnnotationProperties(members);
         if (!members.isEmpty()) {
           printAnnotationConstructor(node.getTypeBinding());

File: translator/src/main/java/com/google/devtools/j2objc/util/BindingUtil.java
Patch:
@@ -47,6 +47,9 @@ public final class BindingUtil {
   public static final int ACC_ANNOTATION = 0x2000;
   public static final int ACC_ENUM = 0x4000;
 
+  // Not defined in JVM spec, but used by reflection support.
+  public static final int ACC_ANONYMOUS = 0x8000;
+
   public static boolean isStatic(IBinding binding) {
     return Modifier.isStatic(binding.getModifiers());
   }

File: translator/src/test/java/com/google/devtools/j2objc/ast/TreeConvertTest.java
Patch:
@@ -34,7 +34,8 @@ public void testAnnotationTypeMemberConversion() throws IOException {
     String translation = translateSourceFile(headers
         + "@Retention(RUNTIME) @Target({TYPE, METHOD, FIELD}) public @interface Complex { "
         + "Simple member() default @Simple; }", "Complex", "Complex.m");
-    assertTranslatedLines(translation, "+ (id<Simple>)memberDefault {", "return Simple;", "}");
+    assertTranslatedLines(translation,
+        "+ (id<Simple>)memberDefault {", "return [[[Simple alloc] init] autorelease];", "}");
   }
 
   // Issue 471: ClassCastException converting annotation with array members.

File: translator/src/main/java/com/google/devtools/j2objc/util/PathClassLoader.java
Patch:
@@ -20,7 +20,6 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.logging.Logger;
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -317,7 +317,7 @@ public void testAnnotationGeneration() throws IOException {
         + "public @interface Compatible { boolean fooable() default false; }",
         "Compatible", "foo/Compatible.m");
     assertTranslation(translation, "@implementation FooCompatible");
-    assertTranslation(translation, "@synthesize fooable;");
+    assertTranslation(translation, "@synthesize fooable = fooable_;");
 
     // Verify constructor generated.
     assertTranslation(translation, "- (instancetype)initWithFooable:(jboolean)fooable__ {");
@@ -858,7 +858,7 @@ public void testReservedWordAsAnnotationPropertyName() throws IOException {
         + "public @interface Bar { String namespace() default \"\"; } "
         + "class Test { Bar ann; String namespace() { return ann.namespace(); }}",
         "Bar", "foo/Bar.m");
-    assertTranslation(translation, "@synthesize namespace__;");
+    assertTranslation(translation, "@synthesize namespace__ = namespace___;");
     assertTranslation(translation, "- (instancetype)initWithNamespace__:(NSString *)namespace____ {");
     assertTranslation(translation, "self->namespace___ = RETAIN_(namespace____);");
     assertTranslation(translation, "+ (NSString *)namespace__Default {");

File: translator/src/main/java/com/google/devtools/j2objc/util/BindingUtil.java
Patch:
@@ -328,6 +328,9 @@ public static boolean isRuntimeAnnotation(ITypeBinding binding) {
           return retentionBinding.getName().equals(RetentionPolicy.RUNTIME.name());
         }
       }
+      if (binding.isNested()) {
+        return BindingUtil.isRuntimeAnnotation(binding.getDeclaringClass());
+      }
     }
     return false;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/HeaderImportCollector.java
Patch:
@@ -102,7 +102,7 @@ public boolean visit(FieldDeclaration node) {
   public boolean visit(FunctionDeclaration node) {
     addForwardDecl(node.getReturnType());
     for (SingleVariableDeclaration param : node.getParameters()) {
-      addForwardDecl(param.getType());
+      addForwardDecl(param.getVariableBinding().getType());
     }
     return false;
   }

File: jre_emul/Classes/com/google/j2objc/security/IosMD5MessageDigest.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @author Tom Ball
  */
-public class IosMD5MessageDigest extends MessageDigest {
+public class IosMD5MessageDigest extends MessageDigest implements Cloneable {
 
   private ByteArrayOutputStream buffer;
 

File: jre_emul/Classes/com/google/j2objc/security/IosSHAMessageDigest.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @author Tom Ball
  */
-public abstract class IosSHAMessageDigest extends MessageDigest {
+public abstract class IosSHAMessageDigest extends MessageDigest implements Cloneable {
 
   protected ByteArrayOutputStream buffer;
 

File: jre_emul/android/libcore/luni/src/test/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java
Patch:
@@ -586,12 +586,14 @@ protected String engineToString() {
 
     /**
      * Tests OAEP AlgorithmParameters provider
-     */
+     *
+    TODO(tball): enable when OAEP provider is implemented.
     public void testOAEPProvider() throws Exception {
         AlgorithmParameters params = AlgorithmParameters.getInstance("OAEP");
 
         assertEquals("Algorithm", "OAEP", params.getAlgorithm());
     }
+    */
 
     /**
      * Test for <code>AlgorithmParameters</code> constructor

File: jre_emul/android/libcore/luni/src/test/java/org/apache/harmony/security/tests/java/security/SignatureTest.java
Patch:
@@ -459,6 +459,8 @@ public void testUpdatebyteArrayintint2() throws Exception {
             fail("NullPointerException wasn't thrown");
         } catch (NullPointerException npe) {
             // ok
+        } catch (IllegalArgumentException se) {
+            // ok
         }
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -274,7 +274,7 @@ private void generate(PackageDeclaration node) {
     if (runtimeAnnotations.size() > 0 && TranslationUtil.needsReflection(node)) {
       printImports(getUnit());
       newline();
-      String typeName = NameTable.getPrefix(node.getPackageBinding())
+      String typeName = NameTable.camelCaseQualifiedName(node.getPackageBinding().getName())
           + NameTable.PACKAGE_INFO_MAIN_TYPE;
       printf("@interface %s : NSObject\n", typeName);
       printf("@end\n\n");

File: jre_emul/Tests/java/lang/SystemTest.java
Patch:
@@ -1,3 +1,4 @@
+package java.lang;
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/ReferenceGraph.java
Patch:
@@ -251,7 +251,7 @@ private List<Edge> runDijkstras(SetMultimap<String, Edge> graph, String root) {
     }
     List<Edge> cycle = Lists.newArrayList();
     String curNode = root;
-    while (curNode != root || cycle.size() == 0) {
+    while (!curNode.equals(root) || cycle.size() == 0) {
       Edge nextEdge = backlinks.get(curNode);
       cycle.add(nextEdge);
       curNode = nextEdge.getOrigin().getKey();

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -588,8 +588,8 @@ private void printParameterAnnotationMethods(MethodDeclaration method) {
           print("[IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()]");
         }
       }
-      printf(" } count:%d type:[IOSClass arrayClassWithComponentType:"
-          + "JavaLangAnnotationAnnotation_class_()]];\n}\n", params.size());
+      printf(" } count:%d type:IOSClass_arrayOf("
+          + "JavaLangAnnotationAnnotation_class_())];\n}\n", params.size());
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/FileProcessor.java
Patch:
@@ -50,8 +50,8 @@ abstract class FileProcessor {
   private static final Logger logger = Logger.getLogger(FileProcessor.class.getName());
 
   private final JdtParser parser;
-  private final List<String> batchSources = Lists.newArrayList();
-  private final boolean doBatching = Options.batchTranslateMaximum() > 0;
+  protected final List<String> batchSources = Lists.newArrayList();
+  protected final boolean doBatching = Options.batchTranslateMaximum() > 0;
 
   public FileProcessor(JdtParser parser) {
     this.parser = Preconditions.checkNotNull(parser);

File: translator/src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -188,6 +188,9 @@ public static void main(String[] args) {
 
     JdtParser parser = createParser();
 
+    PackageInfoPreProcessor packageInfoPreProcessor = new PackageInfoPreProcessor(parser);
+    packageInfoPreProcessor.processFiles(Arrays.asList(files));
+
     if (Options.shouldPreProcess()) {
       HeaderMappingPreProcessor headerMappingPreProcessor = new HeaderMappingPreProcessor(parser);
       headerMappingPreProcessor.processFiles(Arrays.asList(files));

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -587,8 +587,8 @@ public static Map<String, String> getPackagePrefixes() {
     return packagePrefixes;
   }
 
-  public static void addPackagePrefix(String pkg, String prefix) {
-    packagePrefixes.put(pkg, prefix);
+  public static String addPackagePrefix(String pkg, String prefix) {
+    return packagePrefixes.put(pkg, prefix);
   }
 
   @VisibleForTesting

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -199,6 +199,7 @@ public void testGetReservedEnumConstantName() throws IOException {
   }
 
   public void testRenamePackageAnnotation() throws IOException {
+    addSourcesToSourcepaths();
     addSourceFile("@com.google.j2objc.annotations.ObjectiveCName(\"FB\") "
         + "package foo.bar;", "foo/bar/package-info.java");
     addSourceFile("package foo.bar; public class Test {}", "foo/bar/Test.java");
@@ -214,6 +215,7 @@ public void testRenamePackageAnnotation() throws IOException {
   }
 
   public void testRenamePackageAnnotationEnum() throws IOException {
+    addSourcesToSourcepaths();
     addSourceFile("@com.google.j2objc.annotations.ObjectiveCName(\"FB\") "
         + "package foo.bar;", "foo/bar/package-info.java");
     addSourceFile("package foo.bar; public enum Test { FOO, BAR }", "foo/bar/Test.java");

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -165,7 +165,7 @@ public void testNonStaticMultiDimArrayInitializer() throws IOException {
     assertTranslation(translation,
         "[IOSObjectArray newArrayWithObjects:(id[]){"
         + " [IOSIntArray arrayWithInts:(jint[]){ 1, 2, 3 } count:3] } count:1"
-        + " type:[IOSIntArray iosClass]]");
+        + " type:IOSClass_intArray(1)]");
   }
 
   public void testArrayCreationInConstructorInvocation() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/VarargsRewriterTest.java
Patch:
@@ -64,7 +64,7 @@ public void testPrimitiveArrayToObjectVarargs() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "JavaUtilArrays_asListWithNSObjectArray_("
         + "[IOSObjectArray arrayWithObjects:(id[]){ array } count:1 "
-        + "type:[IOSFloatArray iosClass]]);");
+        + "type:IOSClass_floatArray(1)]);");
   }
 
   public void testMultiDimPrimitiveArrayPassedToTypeVariableVarargs() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/types/ImplementationImportCollectorTest.java
Patch:
@@ -119,12 +119,12 @@ public void testPrimitiveTypeLiteral() throws IOException {
     assertTranslation(translation, "#include \"IOSClass.h\"");
   }
 
-  // Verify that an object array type literal imports IOSObjectArray.
+  // Verify that an object array type literal imports IOSClass.
   public void testArrayTypeLiteralImport() throws IOException {
     String translation = translateSourceFile(
         "class Test { Class arrayType() { return Object[].class; }}",
         "Test", "Test.m");
-    assertTranslation(translation, "#include \"IOSObjectArray.h\"");
+    assertTranslation(translation, "#include \"IOSClass.h\"");
   }
 
   // Verify that a multi-dimensional array declaration imports IOSObjectArray.

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1596,7 +1596,7 @@ public void testQualifiedSuperMethodInvocation() throws IOException {
         + "static class Inner extends Test { Runnable test() { return new Runnable() { "
         + "public void run() { Inner.super.foo(1); } }; } } }", "Test", "Test.m");
     assertTranslation(translation,
-        "((jdouble (*)(id, SEL, ...))[Test instanceMethodForSelector:@selector(fooWithInt:)])"
+        "((jdouble (*)(id, SEL, jint))[Test instanceMethodForSelector:@selector(fooWithInt:)])"
         + "(this$0_, @selector(fooWithInt:), 1);");
   }
 

File: jre_emul/android/libcore/luni/src/main/java/org/apache/harmony/xml/dom/LeafNodeImpl.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.apache.harmony.xml.dom;
 
+import com.google.j2objc.annotations.Weak;
+
 import org.w3c.dom.Node;
 
 /**
@@ -33,6 +35,7 @@
 public abstract class LeafNodeImpl extends NodeImpl {
 
     // Maintained by InnerNodeImpl.
+    @Weak
     InnerNodeImpl parent;
 
     // Maintained by InnerNodeImpl.

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -150,7 +150,7 @@ private String parameterKey(IMethodBinding method) {
   private String methodKey(IMethodBinding method) {
     StringBuilder sb = new StringBuilder();
     if (method.isConstructor()) {
-      sb.append(NameTable.getFullName(method.getDeclaringClass()));
+      sb.append("init");
     } else {
       sb.append(NameTable.getName(method));
     }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -557,7 +557,7 @@ public void testConstructorAnnotationNoParameters() throws IOException {
         "public class Test { @Deprecated Test() {} }",
         "Test", "Test.m");
     assertTranslatedLines(translation,
-        "+ (IOSObjectArray *)__annotations_Test {",
+        "+ (IOSObjectArray *)__annotations_init {",
         "return [IOSObjectArray arrayWithObjects:(id[]) "
         + "{ [[[JavaLangDeprecated alloc] init] autorelease] } "
         + "count:1 type:JavaLangAnnotationAnnotation_class_()];");
@@ -568,7 +568,7 @@ public void testConstructorAnnotationWithParameter() throws IOException {
         "public class Test { @Deprecated Test(int i) {} }",
         "Test", "Test.m");
     assertTranslatedLines(translation,
-        "+ (IOSObjectArray *)__annotations_TestWithInt_ {",
+        "+ (IOSObjectArray *)__annotations_initWithInt_ {",
         "return [IOSObjectArray arrayWithObjects:(id[]) "
         + "{ [[[JavaLangDeprecated alloc] init] autorelease] } "
         + "count:1 type:JavaLangAnnotationAnnotation_class_()];");

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -383,7 +383,7 @@ protected void printStaticField(IVariableBinding var) {
   @Override
   protected void printFunction(FunctionDeclaration function) {
     if (!Modifier.isPrivate(function.getModifiers())) {
-      println("FOUNDATION_EXPORT " + getFunctionSignature(function) + ';');
+      println("\nFOUNDATION_EXPORT " + getFunctionSignature(function) + ';');
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -134,7 +134,7 @@ private static void addExtraNativeDecls(EnumDeclaration node) {
 
     StringBuilder sb = new StringBuilder();
     sb.append(String.format(
-        "FOUNDATION_EXPORT IOSObjectArray *%s_values() {\n"
+        "IOSObjectArray *%s_values() {\n"
         + "  %s_init();\n"
         + "  return [IOSObjectArray arrayWithObjects:%s_values_ count:%s type:%s_class_()];\n"
         + "}\n"

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayCreationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testObjectArrayCreationNoInitializer() {
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
     assertEquals("IOSObjectArray *foo = [IOSObjectArray "
-        + "arrayWithLength:3 type:[IOSClass classFromClass:[JavaLangInteger class]]];",
+        + "arrayWithLength:3 type:JavaLangInteger_class_()];",
         result);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -493,7 +493,7 @@ public void testStaticSynchronizedMethod() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "void Test_foo() {\n"
         + "  Test_init();\n"
-        + "  @synchronized([IOSClass classFromClass:[Test class]]) {");
+        + "  @synchronized(Test_class_()) {");
   }
 
   // Verify that an interface that has a generated implementation file and an Object method

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -116,7 +116,7 @@ public void testAnonymousClassWithTypeArgParameter() throws IOException {
         "+ (void)initialize {",
         "if (self == [Test class]) {",
         "JreStrongAssignAndConsume(&Test_t_, nil, [[Test_$1 alloc] "
-            + "initWithIOSClass:[IOSClass classFromClass:[Test class]]]);");
+            + "initWithIOSClass:Test_class_()]);");
   }
 
   public void testFinalParameter() throws IOException {
@@ -502,6 +502,6 @@ public void testAnonymousClassWithVarargsConstructor() throws IOException {
     assertTranslation(translation,
         "[super initWithNSString:arg$0 withNSObjectArray:"
         + "[IOSObjectArray arrayWithObjects:(id[]){ arg$1, arg$2 } count:2 "
-        + "type:[IOSClass classFromClass:[NSObject class]]]]");
+        + "type:NSObject_class_()]]");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/FunctionizerTest.java
Patch:
@@ -310,7 +310,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static synchronized String str() { return \"abc\"; }}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
+    assertTranslation(translation, "@synchronized(A_class_())");
     assertOccurrences(translation, "@synchronized", 1);
     translation = translateSourceFile(
         "class A { void test() { str(); } "
@@ -321,7 +321,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static String str() { synchronized(A.class) { return \"abc\"; }}}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
+    assertTranslation(translation, "@synchronized(A_class_())");
   }
 
   public void testSetter() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/GwtConverterTest.java
Patch:
@@ -58,8 +58,7 @@ public void testGwtCreate() throws IOException {
         + "  Test INSTANCE = GWT.create(Test.class);"
         + "  String FOO = foo();"  // Regression requires subsequent non-mapped method invocation.
         + "  static String foo() { return \"foo\"; } }", "Test", "Test.m");
-    assertTranslation(translation, "Test_set_INSTANCE_(self, "
-        + "[[IOSClass classFromClass:[Test class]] newInstance]);");
+    assertTranslation(translation, "Test_set_INSTANCE_(self, [Test_class_() newInstance]);");
   }
 
   public void testGwtIsScript() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -88,8 +88,7 @@ public void testFieldArrayInitializer() throws IOException {
     String translation = translateSourceFile(source, "Distance", "Distance.m");
     assertTranslation(translation,
         "[IOSObjectArray newArrayWithObjects:(id[]){ [[[Distance_SimplexVertex alloc] "
-        + "initWithDistance:outer$] autorelease] } "
-        + "count:1 type:[IOSClass classFromClass:[Distance_SimplexVertex class]]]");
+        + "initWithDistance:outer$] autorelease] } count:1 type:Distance_SimplexVertex_class_()]");
   }
 
   public void testStaticVarInitialization() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -652,9 +652,9 @@ public void testListArgsInEnumConstantDeclaration() throws IOException {
         + "}";
     String translation = translateSourceFile(source, "Outer", "Outer.m");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"1\", @\"2\", @\"3\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
+        + "@\"1\", @\"2\", @\"3\" } count:3 type:NSString_class_()]");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"4\", @\"5\", @\"6\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
+        + "@\"4\", @\"5\", @\"6\" } count:3 type:NSString_class_()]");
   }
 
   public void testInnerClassVarargsConstructor() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayCreationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testObjectArrayCreationNoInitializer() {
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
     assertEquals("IOSObjectArray *foo = [IOSObjectArray "
-        + "arrayWithLength:3 type:JavaLangInteger_class_()];",
+        + "arrayWithLength:3 type:[IOSClass classFromClass:[JavaLangInteger class]]];",
         result);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -493,7 +493,7 @@ public void testStaticSynchronizedMethod() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "void Test_foo() {\n"
         + "  Test_init();\n"
-        + "  @synchronized(Test_class_()) {");
+        + "  @synchronized([IOSClass classFromClass:[Test class]]) {");
   }
 
   // Verify that an interface that has a generated implementation file and an Object method

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -116,7 +116,7 @@ public void testAnonymousClassWithTypeArgParameter() throws IOException {
         "+ (void)initialize {",
         "if (self == [Test class]) {",
         "JreStrongAssignAndConsume(&Test_t_, nil, [[Test_$1 alloc] "
-            + "initWithIOSClass:Test_class_()]);");
+            + "initWithIOSClass:[IOSClass classFromClass:[Test class]]]);");
   }
 
   public void testFinalParameter() throws IOException {
@@ -502,6 +502,6 @@ public void testAnonymousClassWithVarargsConstructor() throws IOException {
     assertTranslation(translation,
         "[super initWithNSString:arg$0 withNSObjectArray:"
         + "[IOSObjectArray arrayWithObjects:(id[]){ arg$1, arg$2 } count:2 "
-        + "type:NSObject_class_()]]");
+        + "type:[IOSClass classFromClass:[NSObject class]]]]");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/FunctionizerTest.java
Patch:
@@ -310,7 +310,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static synchronized String str() { return \"abc\"; }}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized(A_class_())");
+    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
     assertOccurrences(translation, "@synchronized", 1);
     translation = translateSourceFile(
         "class A { void test() { str(); } "
@@ -321,7 +321,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static String str() { synchronized(A.class) { return \"abc\"; }}}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized(A_class_())");
+    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
   }
 
   public void testSetter() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/GwtConverterTest.java
Patch:
@@ -58,7 +58,8 @@ public void testGwtCreate() throws IOException {
         + "  Test INSTANCE = GWT.create(Test.class);"
         + "  String FOO = foo();"  // Regression requires subsequent non-mapped method invocation.
         + "  static String foo() { return \"foo\"; } }", "Test", "Test.m");
-    assertTranslation(translation, "Test_set_INSTANCE_(self, [Test_class_() newInstance]);");
+    assertTranslation(translation, "Test_set_INSTANCE_(self, "
+        + "[[IOSClass classFromClass:[Test class]] newInstance]);");
   }
 
   public void testGwtIsScript() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -88,7 +88,8 @@ public void testFieldArrayInitializer() throws IOException {
     String translation = translateSourceFile(source, "Distance", "Distance.m");
     assertTranslation(translation,
         "[IOSObjectArray newArrayWithObjects:(id[]){ [[[Distance_SimplexVertex alloc] "
-        + "initWithDistance:outer$] autorelease] } count:1 type:Distance_SimplexVertex_class_()]");
+        + "initWithDistance:outer$] autorelease] } "
+        + "count:1 type:[IOSClass classFromClass:[Distance_SimplexVertex class]]]");
   }
 
   public void testStaticVarInitialization() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -652,9 +652,9 @@ public void testListArgsInEnumConstantDeclaration() throws IOException {
         + "}";
     String translation = translateSourceFile(source, "Outer", "Outer.m");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"1\", @\"2\", @\"3\" } count:3 type:NSString_class_()]");
+        + "@\"1\", @\"2\", @\"3\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"4\", @\"5\", @\"6\" } count:3 type:NSString_class_()]");
+        + "@\"4\", @\"5\", @\"6\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
   }
 
   public void testInnerClassVarargsConstructor() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -91,6 +91,8 @@ public void generate() {
 
     for (AbstractTypeDeclaration type : unit.getTypes()) {
       generate(type);
+      newline();
+      printf("J2OBJC_TYPE_LITERAL_HEADER(%s)\n", NameTable.getFullName(type.getTypeBinding()));
     }
 
     generateFileFooter();
@@ -345,7 +347,7 @@ private void printStaticInitFunction(AbstractTypeDeclaration node) {
       printf("\nFOUNDATION_EXPORT BOOL %s_initialized;\n", typeName);
       printf("J2OBJC_STATIC_INIT(%s)\n", typeName);
     } else {
-      printf("\n__attribute__((always_inline)) inline void %s_init() {}\n", typeName);
+      printf("\nJ2OBJC_EMPTY_STATIC_INIT(%s)\n", typeName);
     }
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayCreationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testObjectArrayCreationNoInitializer() {
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
     assertEquals("IOSObjectArray *foo = [IOSObjectArray "
-        + "arrayWithLength:3 type:[IOSClass classFromClass:[JavaLangInteger class]]];",
+        + "arrayWithLength:3 type:JavaLangInteger_class_()];",
         result);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -493,7 +493,7 @@ public void testStaticSynchronizedMethod() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "void Test_foo() {\n"
         + "  Test_init();\n"
-        + "  @synchronized([IOSClass classFromClass:[Test class]]) {");
+        + "  @synchronized(Test_class_()) {");
   }
 
   // Verify that an interface that has a generated implementation file and an Object method

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -116,7 +116,7 @@ public void testAnonymousClassWithTypeArgParameter() throws IOException {
         "+ (void)initialize {",
         "if (self == [Test class]) {",
         "JreStrongAssignAndConsume(&Test_t_, nil, [[Test_$1 alloc] "
-            + "initWithIOSClass:[IOSClass classFromClass:[Test class]]]);");
+            + "initWithIOSClass:Test_class_()]);");
   }
 
   public void testFinalParameter() throws IOException {
@@ -502,6 +502,6 @@ public void testAnonymousClassWithVarargsConstructor() throws IOException {
     assertTranslation(translation,
         "[super initWithNSString:arg$0 withNSObjectArray:"
         + "[IOSObjectArray arrayWithObjects:(id[]){ arg$1, arg$2 } count:2 "
-        + "type:[IOSClass classFromClass:[NSObject class]]]]");
+        + "type:NSObject_class_()]]");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/FunctionizerTest.java
Patch:
@@ -310,7 +310,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static synchronized String str() { return \"abc\"; }}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
+    assertTranslation(translation, "@synchronized(A_class_())");
     assertOccurrences(translation, "@synchronized", 1);
     translation = translateSourceFile(
         "class A { void test() { str(); } "
@@ -321,7 +321,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static String str() { synchronized(A.class) { return \"abc\"; }}}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
+    assertTranslation(translation, "@synchronized(A_class_())");
   }
 
   public void testSetter() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/GwtConverterTest.java
Patch:
@@ -58,8 +58,7 @@ public void testGwtCreate() throws IOException {
         + "  Test INSTANCE = GWT.create(Test.class);"
         + "  String FOO = foo();"  // Regression requires subsequent non-mapped method invocation.
         + "  static String foo() { return \"foo\"; } }", "Test", "Test.m");
-    assertTranslation(translation, "Test_set_INSTANCE_(self, "
-        + "[[IOSClass classFromClass:[Test class]] newInstance]);");
+    assertTranslation(translation, "Test_set_INSTANCE_(self, [Test_class_() newInstance]);");
   }
 
   public void testGwtIsScript() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -88,8 +88,7 @@ public void testFieldArrayInitializer() throws IOException {
     String translation = translateSourceFile(source, "Distance", "Distance.m");
     assertTranslation(translation,
         "[IOSObjectArray newArrayWithObjects:(id[]){ [[[Distance_SimplexVertex alloc] "
-        + "initWithDistance:outer$] autorelease] } "
-        + "count:1 type:[IOSClass classFromClass:[Distance_SimplexVertex class]]]");
+        + "initWithDistance:outer$] autorelease] } count:1 type:Distance_SimplexVertex_class_()]");
   }
 
   public void testStaticVarInitialization() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -652,9 +652,9 @@ public void testListArgsInEnumConstantDeclaration() throws IOException {
         + "}";
     String translation = translateSourceFile(source, "Outer", "Outer.m");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"1\", @\"2\", @\"3\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
+        + "@\"1\", @\"2\", @\"3\" } count:3 type:NSString_class_()]");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"4\", @\"5\", @\"6\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
+        + "@\"4\", @\"5\", @\"6\" } count:3 type:NSString_class_()]");
   }
 
   public void testInnerClassVarargsConstructor() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -204,7 +204,7 @@ public void testRenamePackageAnnotation() throws IOException {
     addSourceFile("package foo.bar; public class Test {}", "foo/bar/Test.java");
     String translation = translateSourceFile("foo/bar/Test", "foo/bar/Test.h");
     assertTranslation(translation, "@interface FBTest : NSObject");
-    assertTranslation(translation, "FBTest_init()");
+    assertTranslation(translation, "J2OBJC_EMPTY_STATIC_INIT(FBTest)");
     assertTranslation(translation, "typedef FBTest FooBarTest;");
 
     translation = getTranslatedFile("foo/bar/Test.m");

File: translator/src/main/java/com/google/devtools/j2objc/TranslationProcessor.java
Patch:
@@ -58,6 +58,7 @@
 import com.google.devtools.j2objc.util.DeadCodeMap;
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.JdtParser;
+import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.TimeTracker;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -253,6 +254,7 @@ protected void processUnit(
   public static void applyMutations(
       CompilationUnit unit, DeadCodeMap deadCodeMap, TimeTracker ticker) {
     ticker.push();
+    NameTable.setUnit(unit);
 
     if (deadCodeMap != null) {
       new DeadCodeEliminator(unit, deadCodeMap).run(unit);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -296,8 +296,7 @@ private void generate(PackageDeclaration node) {
     if (runtimeAnnotations.size() > 0 && TranslationUtil.needsReflection(node)) {
       printImports(getUnit());
       newline();
-      String typeName =
-          NameTable.getPrefix(node.getPackageBinding(), TreeUtil.getCompilationUnit(node))
+      String typeName = NameTable.getPrefix(node.getPackageBinding())
           + NameTable.PACKAGE_INFO_MAIN_TYPE;
       printf("@interface %s : NSObject\n", typeName);
       printf("@end\n\n");

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -129,7 +129,7 @@ private static void addExtraNativeDecls(EnumDeclaration node) {
         "+ (IOSObjectArray *)values;\n"
         + "FOUNDATION_EXPORT IOSObjectArray *%s_values();\n\n"
         + "+ (%s *)valueOfWithNSString:(NSString *)name;\n\n"
-        + "FOUNDATION_EXPORT %s *%s_valueOfWithNSString_(NSString *name);"
+        + "FOUNDATION_EXPORT %s *%s_valueOfWithNSString_(NSString *name);\n"
         + "- (id)copyWithZone:(NSZone *)zone;\n", typeName, typeName, typeName, typeName);
 
     StringBuilder sb = new StringBuilder();

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -77,7 +77,7 @@ public class ImplementationImportCollector extends TreeVisitor {
   private Set<Import> declaredTypes = Sets.newHashSet();
 
   public void collect(CompilationUnit unit) {
-    mainTypeName = NameTable.getMainTypeFullName(unit);
+    mainTypeName = NameTable.getMainTypeFullName();
     run(unit);
     for (Import imp : declaredTypes) {
       imports.remove(imp);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -91,8 +91,6 @@ public void generate() {
 
     for (AbstractTypeDeclaration type : unit.getTypes()) {
       generate(type);
-      newline();
-      printf("J2OBJC_TYPE_LITERAL_HEADER(%s)\n", NameTable.getFullName(type.getTypeBinding()));
     }
 
     generateFileFooter();
@@ -338,7 +336,7 @@ private void printStaticInitFunction(AbstractTypeDeclaration node) {
       printf("\nFOUNDATION_EXPORT BOOL %s_initialized;\n", typeName);
       printf("J2OBJC_STATIC_INIT(%s)\n", typeName);
     } else {
-      printf("J2OBJC_EMPTY_STATIC_INIT(%s)\n", typeName);
+      printf("\n__attribute__((always_inline)) inline void %s_init() {}\n", typeName);
     }
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayCreationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testObjectArrayCreationNoInitializer() {
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
     assertEquals("IOSObjectArray *foo = [IOSObjectArray "
-        + "arrayWithLength:3 type:JavaLangInteger_class_()];",
+        + "arrayWithLength:3 type:[IOSClass classFromClass:[JavaLangInteger class]]];",
         result);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -493,7 +493,7 @@ public void testStaticSynchronizedMethod() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "void Test_foo() {\n"
         + "  Test_init();\n"
-        + "  @synchronized(Test_class_()) {");
+        + "  @synchronized([IOSClass classFromClass:[Test class]]) {");
   }
 
   // Verify that an interface that has a generated implementation file and an Object method

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -116,7 +116,7 @@ public void testAnonymousClassWithTypeArgParameter() throws IOException {
         "+ (void)initialize {",
         "if (self == [Test class]) {",
         "JreStrongAssignAndConsume(&Test_t_, nil, [[Test_$1 alloc] "
-            + "initWithIOSClass:Test_class_()]);");
+            + "initWithIOSClass:[IOSClass classFromClass:[Test class]]]);");
   }
 
   public void testFinalParameter() throws IOException {
@@ -502,6 +502,6 @@ public void testAnonymousClassWithVarargsConstructor() throws IOException {
     assertTranslation(translation,
         "[super initWithNSString:arg$0 withNSObjectArray:"
         + "[IOSObjectArray arrayWithObjects:(id[]){ arg$1, arg$2 } count:2 "
-        + "type:NSObject_class_()]]");
+        + "type:[IOSClass classFromClass:[NSObject class]]]]");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/FunctionizerTest.java
Patch:
@@ -310,7 +310,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static synchronized String str() { return \"abc\"; }}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized(A_class_())");
+    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
     assertOccurrences(translation, "@synchronized", 1);
     translation = translateSourceFile(
         "class A { void test() { str(); } "
@@ -321,7 +321,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static String str() { synchronized(A.class) { return \"abc\"; }}}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized(A_class_())");
+    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
   }
 
   public void testSetter() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/GwtConverterTest.java
Patch:
@@ -58,7 +58,8 @@ public void testGwtCreate() throws IOException {
         + "  Test INSTANCE = GWT.create(Test.class);"
         + "  String FOO = foo();"  // Regression requires subsequent non-mapped method invocation.
         + "  static String foo() { return \"foo\"; } }", "Test", "Test.m");
-    assertTranslation(translation, "Test_set_INSTANCE_(self, [Test_class_() newInstance]);");
+    assertTranslation(translation, "Test_set_INSTANCE_(self, "
+        + "[[IOSClass classFromClass:[Test class]] newInstance]);");
   }
 
   public void testGwtIsScript() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -88,7 +88,8 @@ public void testFieldArrayInitializer() throws IOException {
     String translation = translateSourceFile(source, "Distance", "Distance.m");
     assertTranslation(translation,
         "[IOSObjectArray newArrayWithObjects:(id[]){ [[[Distance_SimplexVertex alloc] "
-        + "initWithDistance:outer$] autorelease] } count:1 type:Distance_SimplexVertex_class_()]");
+        + "initWithDistance:outer$] autorelease] } "
+        + "count:1 type:[IOSClass classFromClass:[Distance_SimplexVertex class]]]");
   }
 
   public void testStaticVarInitialization() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -652,9 +652,9 @@ public void testListArgsInEnumConstantDeclaration() throws IOException {
         + "}";
     String translation = translateSourceFile(source, "Outer", "Outer.m");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"1\", @\"2\", @\"3\" } count:3 type:NSString_class_()]");
+        + "@\"1\", @\"2\", @\"3\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"4\", @\"5\", @\"6\" } count:3 type:NSString_class_()]");
+        + "@\"4\", @\"5\", @\"6\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
   }
 
   public void testInnerClassVarargsConstructor() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -91,6 +91,8 @@ public void generate() {
 
     for (AbstractTypeDeclaration type : unit.getTypes()) {
       generate(type);
+      newline();
+      printf("J2OBJC_TYPE_LITERAL_HEADER(%s)\n", NameTable.getFullName(type.getTypeBinding()));
     }
 
     generateFileFooter();
@@ -336,7 +338,7 @@ private void printStaticInitFunction(AbstractTypeDeclaration node) {
       printf("\nFOUNDATION_EXPORT BOOL %s_initialized;\n", typeName);
       printf("J2OBJC_STATIC_INIT(%s)\n", typeName);
     } else {
-      printf("\n__attribute__((always_inline)) inline void %s_init() {}\n", typeName);
+      printf("J2OBJC_EMPTY_STATIC_INIT(%s)\n", typeName);
     }
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayCreationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testObjectArrayCreationNoInitializer() {
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
     assertEquals("IOSObjectArray *foo = [IOSObjectArray "
-        + "arrayWithLength:3 type:[IOSClass classFromClass:[JavaLangInteger class]]];",
+        + "arrayWithLength:3 type:JavaLangInteger_class_()];",
         result);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -493,7 +493,7 @@ public void testStaticSynchronizedMethod() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "void Test_foo() {\n"
         + "  Test_init();\n"
-        + "  @synchronized([IOSClass classFromClass:[Test class]]) {");
+        + "  @synchronized(Test_class_()) {");
   }
 
   // Verify that an interface that has a generated implementation file and an Object method

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -116,7 +116,7 @@ public void testAnonymousClassWithTypeArgParameter() throws IOException {
         "+ (void)initialize {",
         "if (self == [Test class]) {",
         "JreStrongAssignAndConsume(&Test_t_, nil, [[Test_$1 alloc] "
-            + "initWithIOSClass:[IOSClass classFromClass:[Test class]]]);");
+            + "initWithIOSClass:Test_class_()]);");
   }
 
   public void testFinalParameter() throws IOException {
@@ -502,6 +502,6 @@ public void testAnonymousClassWithVarargsConstructor() throws IOException {
     assertTranslation(translation,
         "[super initWithNSString:arg$0 withNSObjectArray:"
         + "[IOSObjectArray arrayWithObjects:(id[]){ arg$1, arg$2 } count:2 "
-        + "type:[IOSClass classFromClass:[NSObject class]]]]");
+        + "type:NSObject_class_()]]");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/FunctionizerTest.java
Patch:
@@ -310,7 +310,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static synchronized String str() { return \"abc\"; }}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
+    assertTranslation(translation, "@synchronized(A_class_())");
     assertOccurrences(translation, "@synchronized", 1);
     translation = translateSourceFile(
         "class A { void test() { str(); } "
@@ -321,7 +321,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static String str() { synchronized(A.class) { return \"abc\"; }}}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
+    assertTranslation(translation, "@synchronized(A_class_())");
   }
 
   public void testSetter() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/GwtConverterTest.java
Patch:
@@ -58,8 +58,7 @@ public void testGwtCreate() throws IOException {
         + "  Test INSTANCE = GWT.create(Test.class);"
         + "  String FOO = foo();"  // Regression requires subsequent non-mapped method invocation.
         + "  static String foo() { return \"foo\"; } }", "Test", "Test.m");
-    assertTranslation(translation, "Test_set_INSTANCE_(self, "
-        + "[[IOSClass classFromClass:[Test class]] newInstance]);");
+    assertTranslation(translation, "Test_set_INSTANCE_(self, [Test_class_() newInstance]);");
   }
 
   public void testGwtIsScript() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -88,8 +88,7 @@ public void testFieldArrayInitializer() throws IOException {
     String translation = translateSourceFile(source, "Distance", "Distance.m");
     assertTranslation(translation,
         "[IOSObjectArray newArrayWithObjects:(id[]){ [[[Distance_SimplexVertex alloc] "
-        + "initWithDistance:outer$] autorelease] } "
-        + "count:1 type:[IOSClass classFromClass:[Distance_SimplexVertex class]]]");
+        + "initWithDistance:outer$] autorelease] } count:1 type:Distance_SimplexVertex_class_()]");
   }
 
   public void testStaticVarInitialization() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -652,9 +652,9 @@ public void testListArgsInEnumConstantDeclaration() throws IOException {
         + "}";
     String translation = translateSourceFile(source, "Outer", "Outer.m");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"1\", @\"2\", @\"3\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
+        + "@\"1\", @\"2\", @\"3\" } count:3 type:NSString_class_()]");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"4\", @\"5\", @\"6\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
+        + "@\"4\", @\"5\", @\"6\" } count:3 type:NSString_class_()]");
   }
 
   public void testInnerClassVarargsConstructor() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -76,8 +76,7 @@ public class Options {
   private static boolean docCommentsEnabled = false;
   private static boolean finalMethodsAsFunctions = true;
   private static boolean removeClassMethods = false;
-  // TODO(tball): set true again when native code accessing private Java methods is fixed.
-  private static boolean hidePrivateMembers = false;
+  private static boolean hidePrivateMembers = true;
   private static int batchTranslateMaximum = 0;
 
   private static File proGuardUsageFile = null;

File: translator/src/main/java/com/google/devtools/j2objc/ast/DebugASTPrinter.java
Patch:
@@ -48,7 +48,7 @@ public boolean visit(AnnotationTypeDeclaration node) {
     printModifiers(node.getModifiers());
     sb.print("@interface ");
     node.getName().accept(this);
-    sb.print(" {");
+    sb.println(" {");
     sb.indent();
     for (BodyDeclaration decl : node.getBodyDeclarations()) {
       decl.accept(this);
@@ -125,6 +125,7 @@ public boolean visit(ArrayInitializer node) {
         sb.print(',');
       }
     }
+    sb.print('}');
     return false;
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/NumberLiteral.java
Patch:
@@ -46,7 +46,9 @@ public NumberLiteral(Number value) {
   }
 
   public static NumberLiteral newIntLiteral(Integer i) {
-    return new NumberLiteral(i);
+    NumberLiteral numLit = new NumberLiteral(i);
+    numLit.token = Integer.toString(i);
+    return numLit;
   }
 
   @Override

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.google.devtools.j2objc;
 
+import com.google.devtools.ast.TreeConvertTest;
 import com.google.devtools.j2objc.gen.ArrayAccessTest;
 import com.google.devtools.j2objc.gen.ArrayCreationTest;
 import com.google.devtools.j2objc.gen.LineDirectivesTest;
@@ -119,6 +120,7 @@ public class SmallTests {
     RewriterTest.class,
     StatementGeneratorTest.class,
     StaticVarRewriterTest.class,
+    TreeConvertTest.class,
     TypeSorterTest.class,
     UnicodeUtilsTest.class,
     UnsequencedExpressionRewriterTest.class,

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -71,7 +71,6 @@ protected void setUp() throws IOException {
     tempDir = createTempDir();
     Options.load(new String[] {
       "-d", tempDir.getAbsolutePath(),
-      "--mem-debug", // Run tests with memory debugging by default.
       "--hide-private-members" // Future default, run tests with it now.
     });
     parser = initializeParser(tempDir);

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -901,7 +901,7 @@ public void testSuperReservedName() throws IOException {
     assertTranslation(translation, "- (instancetype)init;");
     assertTranslation(translation, "- (void)init__WithInt:(jint)a");
     translation = translateSourceFile("B", "B.m");
-    assertTranslation(translation, "return JreMemDebugAdd([super init]);");
+    assertTranslation(translation, "return [super init];");
     assertTranslation(translation, "[super init__WithInt:b];");
   }
 

File: jre_emul/android/libcore/luni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -294,7 +294,7 @@ private static native Class generateProxy(String name, Class[] interfaces,
       Method constructor = class_getInstanceMethod([JavaLangReflectProxy class], sel);
       class_addMethod(proxyClass, sel, method_getImplementation(constructor),
           method_getTypeEncoding(constructor));
-      return [IOSClass classWithClass:proxyClass];
+      return [IOSClass classFromClass:proxyClass];
     ]-*/;
 
     /*-[
@@ -331,7 +331,7 @@ private static native Class generateProxy(String name, Class[] interfaces,
         struct objc_method_description methodDescription =
             protocol_getMethodDescription(protocol, selector, YES, YES);
         if (methodDescription.name && sel_isEqual(selector, methodDescription.name)) {
-          IOSClass *iosProtocol = [IOSClass classWithProtocol:protocol];
+          IOSClass *iosProtocol = [IOSClass classFromProtocol:protocol];
           JavaLangReflectMethod *method =
               [iosProtocol findMethodWithTranslatedName:NSStringFromSelector(selector)];
           IOSObjectArray *paramTypes = [method getParameterTypes];

File: jre_emul/android/libcore/luni/src/main/java/java/util/TimeZone.java
Patch:
@@ -115,7 +115,7 @@ private TimeZone(Object nativeTimeZone) {
     public static synchronized native String[] getAvailableIDs() /*-[
       NSArray *timeZones = [NSTimeZone knownTimeZoneNames];
       return [IOSObjectArray arrayWithNSArray:timeZones
-                                         type:[IOSClass classWithClass:[NSString class]]];
+                                         type:[IOSClass classFromClass:[NSString class]]];
     ]-*/;
 
     /**
@@ -136,7 +136,7 @@ public static synchronized native String[] getAvailableIDs(int offsetMillis) /*-
         }
       }
       return [IOSObjectArray arrayWithNSArray:results
-                                         type:[IOSClass classWithClass:[NSString class]]];
+                                         type:[IOSClass classFromClass:[NSString class]]];
     ]-*/;
 
     /**

File: testing/junit-ext/src/java/com/google/j2objc/testing/JUnitTestRunner.java
Patch:
@@ -219,7 +219,7 @@ private native Set<Class> getAllTestClasses() /*-[
     for (int i = 0; i < classCount; i++) {
       Class cls = classes[i];
       if (IsNSObjectClass(cls)) {
-        IOSClass *javaClass = [IOSClass classWithClass:cls];
+        IOSClass *javaClass = [IOSClass classFromClass:cls];
         if ([self isJUnitTestClassWithIOSClass:javaClass]) {
           [result addWithId:javaClass];
         }

File: testing/mockito/src/main/java/org/mockito/internal/creation/ios/IosMockMaker.java
Patch:
@@ -142,7 +142,7 @@ private static native <T> Class<T> generateClassProxy(String name, Class<T> clas
       class_addProtocol(proxyClass, intrface.objcProtocol);
     }
     objc_registerClassPair(proxyClass);
-    return [IOSClass classWithClass:proxyClass];
+    return [IOSClass classFromClass:proxyClass];
   ]-*/;
 
   static class ClassProxy {
@@ -159,7 +159,7 @@ void setHandler(InvocationHandler handler) {
     /*-[
     static IOSClass* getMethodDescription(Class cls, SEL aSelector,
         struct objc_method_description *md) {
-      IOSClass *mockClass = [IOSClass classWithClass:cls];
+      IOSClass *mockClass = [IOSClass classFromClass:cls];
       IOSClass *mockedClass =
           [OrgMockitoInternalCreationIosIosMockMaker_proxyCache_ getWithId:mockClass];
 
@@ -202,7 +202,7 @@ void setHandler(InvocationHandler handler) {
         if (methodDescription.name && sel_isEqual(aSelector, methodDescription.name)) {
           memcpy(md, &methodDescription, sizeof(struct objc_method_description));
           free(interfaces);
-          return [IOSClass classWithProtocol:interfaces[i]];
+          return [IOSClass classFromProtocol:interfaces[i]];
         }
       }
       free(interfaces);

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -1227,11 +1227,11 @@ public boolean visit(TypeLiteral node) {
     if (type.isPrimitive()) {
       buffer.append(String.format("[IOSClass %sClass]", type.getName()));
     } else if (type.isInterface()) {
-      buffer.append("[IOSClass classWithProtocol:@protocol(");
+      buffer.append("[IOSClass classFromProtocol:@protocol(");
       buffer.append(NameTable.getFullName(type));
       buffer.append(")]");
     } else {
-      buffer.append("[IOSClass classWithClass:[");
+      buffer.append("[IOSClass classFromClass:[");
       buffer.append(NameTable.getFullName(type));
       buffer.append(" class]]");
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -137,7 +137,7 @@ private static void addExtraNativeDecls(EnumDeclaration node) {
         "FOUNDATION_EXPORT IOSObjectArray *%s_values() {\n"
         + "  %s_init();\n"
         + "  return [IOSObjectArray arrayWithObjects:%s_values_ count:%s type:"
-        + "[IOSClass classWithClass:[%s class]]];\n"
+        + "[IOSClass classFromClass:[%s class]]];\n"
         + "}\n"
         + "+ (IOSObjectArray *)values {\n"
         + "  return %s_values();\n"

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayCreationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testObjectArrayCreationNoInitializer() {
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
     assertEquals("IOSObjectArray *foo = [IOSObjectArray "
-        + "arrayWithLength:3 type:[IOSClass classWithClass:[JavaLangInteger class]]];",
+        + "arrayWithLength:3 type:[IOSClass classFromClass:[JavaLangInteger class]]];",
         result);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -116,7 +116,7 @@ public void testAnonymousClassWithTypeArgParameter() throws IOException {
         "+ (void)initialize {",
         "if (self == [Test class]) {",
         "JreStrongAssignAndConsume(&Test_t_, nil, [[Test_$1 alloc] "
-            + "initWithIOSClass:[IOSClass classWithClass:[Test class]]]);");
+            + "initWithIOSClass:[IOSClass classFromClass:[Test class]]]);");
   }
 
   public void testFinalParameter() throws IOException {
@@ -502,6 +502,6 @@ public void testAnonymousClassWithVarargsConstructor() throws IOException {
     assertTranslation(translation,
         "[super initWithNSString:arg$0 withNSObjectArray:"
         + "[IOSObjectArray arrayWithObjects:(id[]){ arg$1, arg$2 } count:2 "
-        + "type:[IOSClass classWithClass:[NSObject class]]]]");
+        + "type:[IOSClass classFromClass:[NSObject class]]]]");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/FunctionizerTest.java
Patch:
@@ -310,7 +310,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static synchronized String str() { return \"abc\"; }}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized([IOSClass classWithClass:[A class]])");
+    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
     assertOccurrences(translation, "@synchronized", 1);
     translation = translateSourceFile(
         "class A { void test() { str(); } "
@@ -321,7 +321,7 @@ public void testSynchronizedFunction() throws IOException {
         "class A { void test() { str(); } "
         + "  private static String str() { synchronized(A.class) { return \"abc\"; }}}",
         "A", "A.m");
-    assertTranslation(translation, "@synchronized([IOSClass classWithClass:[A class]])");
+    assertTranslation(translation, "@synchronized([IOSClass classFromClass:[A class]])");
   }
 
   public void testSetter() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/GwtConverterTest.java
Patch:
@@ -59,7 +59,7 @@ public void testGwtCreate() throws IOException {
         + "  String FOO = foo();"  // Regression requires subsequent non-mapped method invocation.
         + "  static String foo() { return \"foo\"; } }", "Test", "Test.m");
     assertTranslation(translation, "Test_set_INSTANCE_(self, "
-        + "[[IOSClass classWithClass:[Test class]] newInstance]);");
+        + "[[IOSClass classFromClass:[Test class]] newInstance]);");
   }
 
   public void testGwtIsScript() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -89,7 +89,7 @@ public void testFieldArrayInitializer() throws IOException {
     assertTranslation(translation,
         "[IOSObjectArray newArrayWithObjects:(id[]){ [[[Distance_SimplexVertex alloc] "
         + "initWithDistance:outer$] autorelease] } "
-        + "count:1 type:[IOSClass classWithClass:[Distance_SimplexVertex class]]]");
+        + "count:1 type:[IOSClass classFromClass:[Distance_SimplexVertex class]]]");
   }
 
   public void testStaticVarInitialization() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -652,9 +652,9 @@ public void testListArgsInEnumConstantDeclaration() throws IOException {
         + "}";
     String translation = translateSourceFile(source, "Outer", "Outer.m");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"1\", @\"2\", @\"3\" } count:3 type:[IOSClass classWithClass:[NSString class]]]");
+        + "@\"1\", @\"2\", @\"3\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
     assertTranslation(translation, "[IOSObjectArray arrayWithObjects:(id[]){ "
-        + "@\"4\", @\"5\", @\"6\" } count:3 type:[IOSClass classWithClass:[NSString class]]]");
+        + "@\"4\", @\"5\", @\"6\" } count:3 type:[IOSClass classFromClass:[NSString class]]]");
   }
 
   public void testInnerClassVarargsConstructor() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -47,7 +47,7 @@ public static void generate(CompilationUnit unit) {
 
   @Override
   protected void generateFileHeader() {
-    println("#import \"JreEmulation.h\"");
+    println("#include \"J2ObjC_header.h\"");
     newline();
     printf("#if !%s_RESTRICT\n", mainTypeName);
     printf("#define %s_INCLUDE_ALL 1\n", mainTypeName);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -47,7 +47,7 @@ public static void generate(CompilationUnit unit) {
 
   @Override
   protected void generateFileHeader() {
-    println("#include \"J2ObjC_header.h\"");
+    println("#import \"JreEmulation.h\"");
     newline();
     printf("#if !%s_RESTRICT\n", mainTypeName);
     printf("#define %s_INCLUDE_ALL 1\n", mainTypeName);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -47,7 +47,7 @@ public static void generate(CompilationUnit unit) {
 
   @Override
   protected void generateFileHeader() {
-    println("#import \"JreEmulation.h\"");
+    println("#include \"J2ObjC_header.h\"");
     newline();
     printf("#if !%s_RESTRICT\n", mainTypeName);
     printf("#define %s_INCLUDE_ALL 1\n", mainTypeName);

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -59,6 +59,7 @@
 import com.google.devtools.j2objc.types.RenamedTypeBindingTest;
 import com.google.devtools.j2objc.util.BindingUtilTest;
 import com.google.devtools.j2objc.util.DeadCodeMapTest;
+import com.google.devtools.j2objc.util.ErrorUtilTest;
 import com.google.devtools.j2objc.util.NameTableTest;
 import com.google.devtools.j2objc.util.ProGuardUsageParserTest;
 import com.google.devtools.j2objc.util.UnicodeUtilsTest;
@@ -91,6 +92,7 @@ public class SmallTests {
     DestructorGeneratorTest.class,
     EnhancedForRewriterTest.class,
     EnumRewriterTest.class,
+    ErrorUtilTest.class,
     FileUtilTest.class,
     FunctionizerTest.class,
     GwtConverterTest.class,

File: testing/junit-ext/src/java/com/google/j2objc/testing/JUnitTestRunner.java
Patch:
@@ -126,7 +126,7 @@ public static int run(Class[] classes, RunListener listener) {
       Result result = junitCore.run(c);
       hasError = hasError || !result.wasSuccessful();
     }
-    return hasError ? 0 : 1;
+    return hasError ? 1 : 0;
   }
 
   /**

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -395,7 +395,7 @@ private void printMultiCatch(CatchClause node, boolean hasResources) {
     for (Type exceptionType : ((UnionType) exception.getType()).getTypes()) {
       buffer.append("@catch (");
       exceptionType.accept(this);
-      buffer.append(' ');
+      buffer.append(" *");
       exception.getName().accept(this);
       buffer.append(") {\n");
       printMainExceptionStore(hasResources, node);

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1460,8 +1460,8 @@ public void testMultiCatch() throws IOException {
         + "      else { throw new SecondException(); }"
         + "    } catch (FirstException|SecondException e) { throw e; }}}",
         "Test", "Test.m");
-    assertTranslation(translation, "@catch (Test_FirstException e) {\n    @throw e;\n  }");
-    assertTranslation(translation, "@catch (Test_SecondException e) {\n    @throw e;\n  }");
+    assertTranslation(translation, "@catch (Test_FirstException *e) {\n    @throw e;\n  }");
+    assertTranslation(translation, "@catch (Test_SecondException *e) {\n    @throw e;\n  }");
   }
 
   public void testDifferentTypesInConditionalExpression() throws IOException {

File: jre_emul/Classes/com/google/j2objc/security/cert/IosX509Certificate.java
Patch:
@@ -77,7 +77,7 @@ public native void checkValidity(Date date) throws CertificateExpiredException,
     // Create an X509 trust policy for this certificate.
     SecPolicyRef policy = SecPolicyCreateBasicX509();
     SecCertificateRef certArray[1] = { (SecCertificateRef) secCertificateRef_ };
-    CFArrayRef certs = CFArrayCreate(NULL, (void *) certArray, 1, NULL);
+    CFArrayRef certs = CFArrayCreate(NULL, (const void **) certArray, 1, NULL);
     SecTrustRef trust;
     OSStatus status = SecTrustCreateWithCertificates(certs, policy, &trust);
     CFRelease(certs);

File: jre_emul/Classes/java/lang/StackTraceElement.java
Patch:
@@ -188,7 +188,7 @@ private native void initializeFromAddress() /*-[
       }
       char *selector = strsep(&signature, "[ ]");
       if (selector) {
-        char *methodName = NULL;
+        const char *methodName = NULL;
 
         // Strip all parameter type mangling.
         char *colon = strchr(selector, ':');

File: jre_emul/android/libcore/luni/src/main/java/java/nio/charset/IOSCharsetEncoder.java
Patch:
@@ -108,6 +108,6 @@ private static native byte[] encode(char[] in, long encoding) /*-[
     NSString *s = [NSString stringWithCharacters:inArg->buffer_
                                           length:inArg->size_];
     NSData *data = [s dataUsingEncoding:(NSStringEncoding) encoding allowLossyConversion:NO];
-    return [IOSByteArray arrayWithBytes:[data bytes] count:(jint)[data length]];
+    return [IOSByteArray arrayWithBytes:(const jbyte *)[data bytes] count:(jint)[data length]];
   ]-*/;
 }

File: jre_emul/android/libcore/luni/src/main/java/java/util/HashMap.java
Patch:
@@ -1081,7 +1081,7 @@ private void readObject(ObjectInputStream stream) throws IOException,
         state->extra[1] = 0;
       }
       NSUInteger position = state->extra[0];
-      JavaUtilHashMap_HashMapEntry *entry = (void *) state->extra[1];
+      JavaUtilHashMap_HashMapEntry *entry = (JavaUtilHashMap_HashMapEntry *) state->extra[1];
       state->itemsPtr = stackbuf;
       NSUInteger objCount = 0;
       if (state->state == 1 && objCount < len) {

File: jre_emul/android/libcore/luni/src/main/java/java/util/LinkedHashMap.java
Patch:
@@ -413,7 +413,7 @@ protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
         state->mutationsPtr = (unsigned long *) &modCount_;
         entry = header_->nxt_;
       } else {
-        entry = (void *) state->extra[0];
+        entry = (JavaUtilLinkedHashMap_LinkedEntry *) state->extra[0];
       }
       state->itemsPtr = stackbuf;
       NSUInteger objCount = 0;

File: jre_emul/android/libcore/luni/src/main/java/java/util/zip/Deflater.java
Patch:
@@ -493,7 +493,7 @@ private native void setLevelsImpl(int level, int strategy, long handle) /*-[
 
     private native void setInputImpl(byte[] buf, int offset, int byteCount, long handle) /*-[
       z_stream *zStream = (z_stream *) handle;
-      char *baseAddr = malloc(byteCount);
+      char *baseAddr = (char *) malloc(byteCount);
       if (baseAddr == NULL) {
         @throw AUTORELEASE([[JavaLangOutOfMemoryError alloc] init]);
       }
@@ -565,7 +565,7 @@ public synchronized long getBytesWritten() {
     }
 
     private native long createStream(int level, int strategy, boolean noHeader) /*-[
-        z_stream *zStream = malloc(sizeof(z_stream));
+        z_stream *zStream = (z_stream *) malloc(sizeof(z_stream));
         int err = 0;
 
         zStream->opaque = Z_NULL;

File: jre_emul/android/libcore/luni/src/main/java/java/util/zip/Inflater.java
Patch:
@@ -95,7 +95,7 @@ public Inflater(boolean noHeader) {
     }
 
     private native long createStream(boolean noHeader) /*-[
-        z_stream *zStream = malloc(sizeof(z_stream));
+        z_stream *zStream = (z_stream *) malloc(sizeof(z_stream));
         zStream->opaque = Z_NULL;
         zStream->zalloc = Z_NULL;
         zStream->zfree = Z_NULL;
@@ -406,7 +406,7 @@ public synchronized void setInput(byte[] buf, int offset, int byteCount) {
 
     private native void setInputImpl(byte[] buf, int offset, int byteCount, long handle) /*-[
       z_stream *zStream = (z_stream *) handle;
-      char *baseAddr = malloc(byteCount);
+      char *baseAddr = (char *) malloc(byteCount);
       if (baseAddr == NULL) {
         @throw AUTORELEASE([[JavaLangOutOfMemoryError alloc] init]);
       }

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Memory.java
Patch:
@@ -301,7 +301,7 @@ public static native void memmove(Object dstObject, int dstOffset, Object srcObj
       if (!srcBytes) {
         return;
       }
-      memmove(dstBytes + dstOffset, srcBytes + srcOffset, byteCount);
+      memmove(dstBytes + dstOffset, srcBytes + srcOffset, (size_t)byteCount);
     ]-*/;
 
     public static native byte peekByte(long address) /*-[

File: guava/sources/com/google/common/base/CharMatcher.java
Patch:
@@ -227,7 +227,7 @@ private static String showCharacter(char c) {
     char[] tmp = {'\\', 'u', '\0', '\0', '\0', '\0'};
     for (int i = 0; i < 4; i++) {
       tmp[5 - i] = hex.charAt(c & 0xF);
-      c >>= 4;
+      c = (char) (c >> 4);
     }
     return String.copyValueOf(tmp);
 

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -318,9 +318,7 @@ private native void create(ThreadGroup group, Runnable target, String name, long
     NSThread *currentThread = [NSThread currentThread];
     NSMutableDictionary *currentThreadData = [currentThread threadDictionary];
     if (!group) {
-      JavaLangThread *currentJavaThread =
-          [currentThreadData objectForKey:JavaLangThread_JAVA_THREAD_];
-      group = [currentJavaThread getThreadGroup];
+      group = [[JavaLangThread currentThread] getThreadGroup];
     }
     assert(group != nil);
     self->threadGroup_ = RETAIN_(group);

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -346,7 +346,6 @@ private native void makeSynchronousRequest() throws IOException /*-[
         self->responseException_ = [[JavaNetProtocolException alloc] initWithNSString:errMsg];
         @throw self->responseException_;
       }
-      [request setValue:[self getContentType] forHTTPHeaderField:@"Content-Type"];
       if (self->nativeRequestData_) {
         request.HTTPBody = [(NSDataOutputStream *) self->nativeRequestData_ data];
       }

File: jre_emul/android/libcore/luni/src/main/java/java/util/TimeZone.java
Patch:
@@ -443,8 +443,8 @@ private static native TimeZone getNativeTimeZone(String id) /*-[
 
         // Fetch each date's components.
         NSCalendar *calendar = [NSCalendar currentCalendar];
-        NSUInteger units = NSMonthCalendarUnit | NSDayCalendarUnit |
-            NSHourCalendarUnit | NSMinuteCalendarUnit | NSSecondCalendarUnit;
+        NSUInteger units = NSCalendarUnitMonth | NSCalendarUnitDay |
+            NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;
         NSDateComponents *daylight = [calendar components:units
                                                  fromDate:toDaylightSaving];
         NSDateComponents *standard = [calendar components:units

File: jre_emul/android/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/lang/MathTest.java
Patch:
@@ -110,9 +110,9 @@ public void test_atanD() {
      */
     public void test_atan2DD() {
         // Test for method double java.lang.Math.atan2(double, double)
-        double answer = Math.atan(Math.tan(1.0));
-        assertTrue("Returned incorrect arc tangent: " + answer, answer <= 1.0
-                && answer >= 9.9999999999999983E-1);
+        double correct = Math.atan(0.5);
+        double answer = Math.atan2(1,  2);
+        assertEquals("Should equal atan(0.5)", correct, answer, 1.0E-16);
     }
 
     /**

File: jre_emul/android/libcore/luni/src/main/java/java/lang/Math.java
Patch:
@@ -192,7 +192,7 @@ public static native double atan(double d) /*-[
      * @return the arc tangent of {@code y/x}.
      */
     public static native double atan2(double y, double x) /*-[
-      return atan2(x, y);
+      return atan2(y, x);
     ]-*/;
 
     /**

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -72,7 +72,8 @@ public class Options {
   private static boolean docCommentsEnabled = false;
   private static boolean finalMethodsAsFunctions = true;
   private static boolean removeClassMethods = false;
-  private static boolean hidePrivateMembers = true;
+  // TODO(tball): set true again when native code accessing private Java methods is fixed.
+  private static boolean hidePrivateMembers = false;
   private static int batchTranslateMaximum = 0;
 
   private static File proGuardUsageFile = null;

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -188,11 +188,11 @@ public void testFinalParameterAccess() throws IOException {
     // Test.foo(): since the bar_ parameter shadows a field, the parameter
     // gets renamed to bar_Arg.
     assertTranslation(translation, "- (void)fooWithId:(id)bar_Arg {");
-    assertTranslation(translation, "[self logWithInt:2 withId:bar_Arg];");
+    assertTranslation(translation, "Test_logWithInt_withId_(self, 2, bar_Arg);");
 
     // Test_$: since bar_ is an unshadowed field, the parameter name is
     // unchanged.
-    assertTranslation(translation, "[this$0_ logWithInt:1 withId:val$bar__];");
+    assertTranslation(translation, "Test_logWithInt_withId_(this$0_, 1, val$bar__);");
     assertTranslation(translation, "Test_$1_set_val$bar__(self, capture$0);");
   }
 

File: annotations/src/main/java/com/google/j2objc/annotations/ObjectiveCName.java
Patch:
@@ -20,12 +20,12 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that specifies what the Objective-C class, protocol, method or
- * constructor declaration should be when translated.
+ * Annotation that specifies what the Objective-C class, protocol, method,
+ * constructor or package declaration should be when translated.
  *
  * @author Tom Ball
  */
-@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR })
+@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PACKAGE })
 @Retention(RetentionPolicy.CLASS)
 public @interface ObjectiveCName {
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -297,7 +297,8 @@ private void generate(PackageDeclaration node) {
     if (runtimeAnnotations.size() > 0 && TranslationUtil.needsReflection(node)) {
       printImports(getUnit());
       newline();
-      String typeName = NameTable.getPrefix(node.getName().getFullyQualifiedName())
+      String typeName =
+          NameTable.getPrefix(node.getPackageBinding(), TreeUtil.getCompilationUnit(node))
           + NameTable.PACKAGE_INFO_MAIN_TYPE;
       printf("@interface %s : NSObject\n", typeName);
       printf("@end\n\n");

File: jre_emul/Classes/java/text/IOSCollator.java
Patch:
@@ -85,7 +85,7 @@ public void setStrength(int value) {
 
   @Override
   public native int hashCode() /*-[
-    return (jint) [(NSLocale *) self->nsLocale_ hash];
+    return [(NSLocale *) self->nsLocale_ hash];
   ]-*/;
 
   @Override

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -339,7 +339,7 @@ public void testAutoboxCast() throws IOException {
         + "public int hashCode() { return ((Double) doubleValue).hashCode(); } }";
     String translation = translateSourceFile(source, "Test", "Test.m");
 
-    assertTranslation(translation, "[JavaLangDouble_valueOfWithDouble_(doubleValue_) hashCode]");
+    assertTranslation(translation, "[JavaLangDouble_valueOfWithDouble_(doubleValue_) hash]");
   }
 
   public void testAutoboxArrayIndex() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -92,7 +92,7 @@ public void testStringHashCode() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
-    assertEquals("jint test = [@\"foo\" hashCode];", result);
+    assertEquals("jint test = ((jint) [@\"foo\" hash]);", result);
   }
 
   public void testClassGetSuperclass() throws IOException {

File: jre_emul/Classes/java/text/IOSCollator.java
Patch:
@@ -85,7 +85,7 @@ public void setStrength(int value) {
 
   @Override
   public native int hashCode() /*-[
-    return [(NSLocale *) self->nsLocale_ hash];
+    return (jint) [(NSLocale *) self->nsLocale_ hash];
   ]-*/;
 
   @Override

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -339,7 +339,7 @@ public void testAutoboxCast() throws IOException {
         + "public int hashCode() { return ((Double) doubleValue).hashCode(); } }";
     String translation = translateSourceFile(source, "Test", "Test.m");
 
-    assertTranslation(translation, "[JavaLangDouble_valueOfWithDouble_(doubleValue_) hash]");
+    assertTranslation(translation, "[JavaLangDouble_valueOfWithDouble_(doubleValue_) hashCode]");
   }
 
   public void testAutoboxArrayIndex() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -92,7 +92,7 @@ public void testStringHashCode() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
-    assertEquals("jint test = ((jint) [@\"foo\" hash]);", result);
+    assertEquals("jint test = [@\"foo\" hashCode];", result);
   }
 
   public void testClassGetSuperclass() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -599,7 +599,7 @@ protected String getFunctionSignature(FunctionDeclaration function) {
     for (Iterator<SingleVariableDeclaration> iter = function.getParameters().iterator();
          iter.hasNext(); ) {
       IVariableBinding var = iter.next().getVariableBinding();
-      String paramType = NameTable.getObjCType(var.getType());
+      String paramType = NameTable.getSpecificObjCType(var.getType());
       paramType += (paramType.endsWith("*") ? "" : " ");
       sb.append(paramType + NameTable.getName(var));
       if (iter.hasNext()) {

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -51,6 +51,7 @@
 import com.google.devtools.j2objc.translate.StaticVarRewriterTest;
 import com.google.devtools.j2objc.translate.TypeSorterTest;
 import com.google.devtools.j2objc.translate.UnsequencedExpressionRewriterTest;
+import com.google.devtools.j2objc.translate.VarargsRewriterTest;
 import com.google.devtools.j2objc.translate.VariableRenamerTest;
 import com.google.devtools.j2objc.types.BindingMapBuilderTest;
 import com.google.devtools.j2objc.types.HeaderImportCollectorTest;
@@ -118,6 +119,7 @@ public class SmallTests {
     TypeSorterTest.class,
     UnicodeUtilsTest.class,
     UnsequencedExpressionRewriterTest.class,
+    VarargsRewriterTest.class,
     VariableRenamerTest.class
   };
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/CastResolver.java
Patch:
@@ -155,8 +155,8 @@ private boolean needsCast(Expression expr, boolean shouldCastFromId) {
 
   private ITypeBinding getDeclaredType(Expression expr) {
     IVariableBinding var = TreeUtil.getVariableBinding(expr);
-    if (var != null && var.getVariableDeclaration().getType().isTypeVariable()) {
-      return Types.resolveIOSType("id");
+    if (var != null) {
+      return var.getVariableDeclaration().getType();
     }
     switch (expr.getKind()) {
       case CLASS_INSTANCE_CREATION:

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/IoBridge.java
Patch:
@@ -151,6 +151,9 @@ private static void connectErrno(FileDescriptor fd, InetAddress inetAddress, int
             IoUtils.setBlocking(fd, true); // 4. set the socket back to blocking.
             return; // We connected immediately.
         } catch (ErrnoException errnoException) {
+            if (errnoException.errno == ETIMEDOUT) {
+                throw new SocketTimeoutException(connectDetail(inetAddress, port, timeoutMs, null));
+            }
             if (errnoException.errno != EINPROGRESS) {
                 throw errnoException;
             }

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Posix.java
Patch:
@@ -604,7 +604,7 @@ public native InetAddress[] getaddrinfo(String node, StructAddrinfo javaHints)
       }
     }
     if (addressCount == 0) {
-      free(addressList);
+      freeaddrinfo(addressList);
       return nil;
     }
 
@@ -627,12 +627,13 @@ public native InetAddress[] getaddrinfo(String node, StructAddrinfo javaHints)
       struct sockaddr_storage address = *(struct sockaddr_storage *) ai->ai_addr;
       JavaNetInetAddress *inetAddress = sockaddrToInetAddress(&address, NULL);
       if (!inetAddress) {
-        free(addressList);
+        freeaddrinfo(addressList);
         return nil;
       }
       [result replaceObjectAtIndex:index withObject:inetAddress];
       ++index;
     }
+    freeaddrinfo(addressList);
     return result;
   ]-*/;
 

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/io/OldFileTest.java
Patch:
@@ -143,8 +143,8 @@ public void test_ConstructorLjava_lang_StringLjava_lang_String() throws IOExcept
 
     public void test_createTempFileLjava_lang_StringLjava_lang_String() {
         try {
-            // Providing an illegal file prefix.
-            File f3 = File.createTempFile("/../../../../../", null);
+            // Providing an illegal file prefix (iOS simulator paths can be very deep).
+            File f3 = File.createTempFile("/../../../../../../../../../../../../../../", null);
             f3.delete();
             fail("IOException not thrown");
         } catch (IOException e) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/LineDirectivesTest.java
Patch:
@@ -80,7 +80,7 @@ public void testStatementNumbering() throws IOException {
     assertTranslation(translation, "#line 1\n@implementation A");
     assertTranslation(translation, "#line 2\n- (NSString *)test");
     assertTranslation(translation, "#line 4\n  jint i = 0;");
-    assertTranslation(translation, "#line 7\n  return [JavaLangInteger toStringWithInt:i];");
+    assertTranslation(translation, "#line 7\n  return JavaLangInteger_toStringWithInt_(i);");
   }
 
   public void testForIfWhileStatementsWithoutBlocks() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/ArrayRewriterTest.java
Patch:
@@ -48,7 +48,7 @@ public void testObjectArrayVarargs() throws IOException {
     String translation = translateSourceFile(
         "class Test { void test(Object[] array) { java.util.Arrays.asList(array); }}",
         "Test", "Test.m");
-    assertTranslation(translation, "[JavaUtilArrays asListWithNSObjectArray:array];");
+    assertTranslation(translation, "JavaUtilArrays_asListWithNSObjectArray_(array);");
   }
 
   // Verify that a single primitive array argument to a primitive varargs method is
@@ -67,9 +67,9 @@ public void testPrimitiveArrayToObjectVarargs() throws IOException {
     String translation = translateSourceFile(
         "class Test { void test(float[] array) { java.util.Arrays.asList(array); }}",
         "Test", "Test.m");
-    assertTranslation(translation, "[JavaUtilArrays asListWithNSObjectArray:"
+    assertTranslation(translation, "JavaUtilArrays_asListWithNSObjectArray_("
         + "[IOSObjectArray arrayWithObjects:(id[]){ array } count:1 "
-        + "type:[IOSClass classWithClass:[NSObject class]]]];");
+        + "type:[IOSClass classWithClass:[NSObject class]]]);");
   }
 
   // Verify that the "SetAndConsume" setter is used.

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -241,7 +241,7 @@ public void testStaticInitializersKeptInOrder() throws IOException {
         + "  public static final int iSetSize = iSet.size(); }";
     String translation = translateSourceFile(source, "Test", "Test.m");
     String setInit = "JreStrongAssignAndConsume(&Test_iSet_, nil, [[JavaUtilHashSet alloc] init])";
-    String setAdd = "[Test_iSet_ addWithId:[JavaLangInteger valueOfWithInt:Test_I]]";
+    String setAdd = "[Test_iSet_ addWithId:JavaLangInteger_valueOfWithInt_(Test_I)]";
     String setSize = "Test_iSetSize_ = [Test_iSet_ size]";
     assertTranslation(translation, setInit);
     assertTranslation(translation, setAdd);

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -54,9 +54,9 @@ public void testStringValueOfBoolean() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(0));
-    assertEquals("NSString *trueString = [NSString valueOfBool:YES];", result);
+    assertEquals("NSString *trueString = NSString_valueOfWithBoolean_(YES);", result);
     result = generateStatement(stmts.get(1));
-    assertEquals("NSString *falseString = [NSString valueOfBool:NO];", result);
+    assertEquals("NSString *falseString = NSString_valueOfWithBoolean_(NO);", result);
   }
 
   /**
@@ -68,7 +68,7 @@ public void testMethodAndStatementTranslation() throws IOException {
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "- (NSString *)toStringWithBoolean:(jboolean)value {",
-        "return [NSString valueOfBool:value];");
+        "return NSString_valueOfWithBoolean_(value);");
   }
 
   public void testStringDefaultConstructor() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/OperatorRewriterTest.java
Patch:
@@ -32,7 +32,7 @@ public void testSetFieldOnResultOfExpression() throws IOException {
         "class Test { String s; static Test getTest() { return null; } "
         + "void test(boolean b) { (b ? new Test() : getTest()).s = \"foo\"; } }", "Test", "Test.m");
     assertTranslation(translation,
-        "Test_set_s_((b ? [[[Test alloc] init] autorelease] : [Test getTest]), @\"foo\");");
+        "Test_set_s_((b ? [[[Test alloc] init] autorelease] : Test_getTest()), @\"foo\");");
   }
 
   public void testModAssignOperator() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -130,7 +130,7 @@ public void testRenameClassAnnotation() throws IOException {
     String translation = translateSourceFile("A", "A.h");
     assertTranslation(translation, "@interface TestName : NSObject");
     translation = translateSourceFile("B", "B.m");
-    assertTranslation(translation, "[TestName test];");
+    assertTranslation(translation, "TestName_test();");
   }
 
   public void testRenameMapping() throws IOException {
@@ -142,7 +142,7 @@ public void testRenameMapping() throws IOException {
       String translation = translateSourceFile("foo/bar/A", "foo/bar/A.h");
       assertTranslation(translation, "@interface Test2Name : NSObject");
       translation = translateSourceFile("foo/bar/B", "foo/bar/B.m");
-      assertTranslation(translation, "[Test2Name test];");
+      assertTranslation(translation, "Test2Name_test();");
     } finally {
       Options.getClassMappings().remove("foo.bar.A");
     }

File: jre_emul/android/libcore/luni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -355,7 +355,7 @@ private static native Class generateProxy(String name, Class[] interfaces,
               // Return value is currently wrapped, so check wrapper type instead.
               returnType = [(IOSPrimitiveClass *) returnType wrapperClass];
             }
-            if (![returnType isAssignableFrom:resultType]) {
+            if (javaResult && ![returnType isAssignableFrom:resultType]) {
               @throw AUTORELEASE([[JavaLangIllegalArgumentException alloc] init]);
             }
             J2ObjcRawValue result;

File: jre_emul/android/libcore/luni/src/main/java/java/nio/charset/IOSCharset.java
Patch:
@@ -192,7 +192,7 @@ private static native IOSCharset getDefaultCharset() /*-[
       // Return UTF-8 default, like JRE does.
       JavaNioCharsetIOSCharset_DEFAULT_CHARSET_ = addEncoding(iosCharsets[0]);
     }
-    return JavaNioCharsetIOSCharset_DEFAULT_CHARSET_;
+    return RETAIN_(JavaNioCharsetIOSCharset_DEFAULT_CHARSET_);
   ]-*/;
 
   static final IOSCharset DEFAULT_CHARSET = getDefaultCharset();

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -93,7 +93,6 @@
 import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.IOSTypeBinding;
 import com.google.devtools.j2objc.types.Types;
-import com.google.devtools.j2objc.util.ASTNodeException;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.UnicodeUtils;
@@ -121,8 +120,7 @@ public class StatementGenerator extends TreeVisitor {
 
   private static final Pattern TRIGRAPH_REGEX = Pattern.compile("@\".*\\?\\?[=/'()!<>-].*\"");
 
-  public static String generate(
-      TreeNode node, boolean asFunction, int currentLine) throws ASTNodeException {
+  public static String generate(TreeNode node, boolean asFunction, int currentLine) {
     StatementGenerator generator = new StatementGenerator(node, asFunction, currentLine);
     if (node == null) {
       throw new NullPointerException("cannot generate a null statement");

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -57,7 +57,6 @@
 import com.google.devtools.j2objc.types.RenamedTypeBindingTest;
 import com.google.devtools.j2objc.util.BindingUtilTest;
 import com.google.devtools.j2objc.util.DeadCodeMapTest;
-import com.google.devtools.j2objc.util.ErrorReportingASTVisitorTest;
 import com.google.devtools.j2objc.util.NameTableTest;
 import com.google.devtools.j2objc.util.ProGuardUsageParserTest;
 import com.google.devtools.j2objc.util.UnicodeUtilsTest;
@@ -90,7 +89,6 @@ public class SmallTests {
     DestructorGeneratorTest.class,
     EnhancedForRewriterTest.class,
     EnumRewriterTest.class,
-    ErrorReportingASTVisitorTest.class,
     FunctionizerTest.class,
     GwtConverterTest.class,
     HeaderImportCollectorTest.class,

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.devtools.j2objc.gen.ObjectiveCSourceFileGeneratorTest;
 import com.google.devtools.j2objc.gen.PrimitiveArrayTest;
 import com.google.devtools.j2objc.gen.StatementGeneratorTest;
+import com.google.devtools.j2objc.translate.AbstractMethodRewriterTest;
 import com.google.devtools.j2objc.translate.AnonymousClassConverterTest;
 import com.google.devtools.j2objc.translate.ArrayRewriterTest;
 import com.google.devtools.j2objc.translate.AutoboxerTest;
@@ -72,6 +73,7 @@
 public class SmallTests {
 
   private static final Class<?>[] smallTestClasses = new Class[] {
+    AbstractMethodRewriterTest.class,
     AnonymousClassConverterTest.class,
     ArrayAccessTest.class,
     ArrayCreationTest.class,

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/lang/reflect/ConstructorTest.java
Patch:
@@ -48,6 +48,7 @@ public void test_getParameterTypes() throws Exception {
     public void testGetConstructorWithNullArgumentsArray() throws Exception {
         Constructor<?> constructor = ConstructorTestHelper.class.getConstructor((Class[]) null);
         assertEquals(0, constructor.getParameterTypes().length);
+        assertNotNull(constructor.newInstance((Object[]) null));
     }
 
     public void testGetConstructorWithNullArgument() throws Exception {

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -50,7 +50,7 @@ public class Import implements Comparable<Import> {
   // TODO(tball): move this list to a distributed file, perhaps generated by build.
   private static final Set<String> PLATFORM_PACKAGES = Sets.newHashSet(new String[] {
       "android",
-      "com.android",
+      "com.android.internal.util",
       "com.google.android",
       "com.google.common",
       "com.google.common.annotations",

File: translator/src/test/java/com/google/devtools/j2objc/translate/FunctionizerTest.java
Patch:
@@ -391,7 +391,7 @@ public void testNativeMethodsWithoutOcni() throws IOException {
     assertTranslation(translation, "- (void)foo;");
     // Public declaration for "bar". both the class method and c-function.
     assertTranslation(translation, "+ (void)bar;");
-    assertTranslation(translation, "extern void Test_bar();");
+    assertTranslation(translation, "FOUNDATION_EXPORT void Test_bar();");
 
     translation = getTranslatedFile("Test.m");
     // No implementation for "foo".

File: translator/src/main/java/com/google/devtools/j2objc/ast/AnnotationTypeDeclaration.java
Patch:
@@ -39,6 +39,7 @@ protected void acceptInner(TreeVisitor visitor) {
       annotations.accept(visitor);
       name.accept(visitor);
       bodyDeclarations.accept(visitor);
+      classInitStatements.accept(visitor);
     }
     visitor.endVisit(this);
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/EnumDeclaration.java
Patch:
@@ -53,6 +53,7 @@ protected void acceptInner(TreeVisitor visitor) {
       name.accept(visitor);
       enumConstants.accept(visitor);
       bodyDeclarations.accept(visitor);
+      classInitStatements.accept(visitor);
     }
     visitor.endVisit(this);
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TypeDeclaration.java
Patch:
@@ -85,6 +85,7 @@ protected void acceptInner(TreeVisitor visitor) {
       superclassType.accept(visitor);
       superInterfaceTypes.accept(visitor);
       bodyDeclarations.accept(visitor);
+      classInitStatements.accept(visitor);
     }
     visitor.endVisit(this);
   }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ComplexExpressionExtractor.java
Patch:
@@ -83,7 +83,6 @@ private void handleNode(Expression node, Collection<Expression> children) {
     }
     if (depth >= maxDepth) {
       ITypeBinding type = node.getTypeBinding();
-      assert currentMethod != null; // Should be OK if run after InitializationNormalizer.
       IVariableBinding newVar = new GeneratedVariableBinding(
           "complex$" + count++, 0, type, false, false, null, currentMethod);
       Statement newStmt = new VariableDeclarationStatement(newVar, node.copy());

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -54,7 +54,6 @@ public class NameTable {
   private final Map<IBinding, String> renamings = Maps.newHashMap();
 
   public static final String INIT_NAME = "init";
-  public static final String CLINIT_NAME = "initialize";
   public static final String DEALLOC_METHOD = "dealloc";
   public static final String FINALIZE_METHOD = "finalize";
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -317,11 +317,11 @@ protected void generate(EnumDeclaration node) {
     println("\n@end");
     printStaticInitFunction(node, methods);
     printFunctions(node.getBodyDeclarations());
-    printf("\nFOUNDATION_EXPORT %s *%s_values[];\n", typeName, typeName);
+    printf("\nFOUNDATION_EXPORT %s *%s_values_[];\n", typeName, typeName);
     for (EnumConstantDeclaration constant : constants) {
       String varName = NameTable.getStaticVarName(constant.getVariableBinding());
       String valueName = constant.getName().getIdentifier();
-      printf("\n#define %s_%s %s_values[%s_%s]\n",
+      printf("\n#define %s_%s %s_values_[%s_%s]\n",
              typeName, varName, typeName, bareTypeName, valueName);
       printf("J2OBJC_STATIC_FIELD_GETTER(%s, %s, %s *)\n", typeName, varName, typeName);
     }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -427,7 +427,7 @@ protected void generate(EnumDeclaration node) {
     String typeName = NameTable.getFullName(node.getTypeBinding());
     printInitFlagDefinition(node, methods);
     newline();
-    printf("%s *%s_values[%s];\n", typeName, typeName, constants.size());
+    printf("%s *%s_values_[%s];\n", typeName, typeName, constants.size());
 
     newline();
     printf("@implementation %s\n", typeName);

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -212,12 +212,12 @@ public void testEnum() throws IOException {
     String translation = translateSourceFile(
       "public enum Color { RED, WHITE, BLUE }",
       "Color", "Color.m");
-    assertTranslation(translation, "ColorEnum *ColorEnum_values[3];");
+    assertTranslation(translation, "ColorEnum *ColorEnum_values_[3];");
     assertTranslation(translation, "@implementation ColorEnum");
     assertTranslation(translation,
         "ColorEnum_RED = [[ColorEnum alloc] initWithNSString:@\"RED\" withInt:0];");
     assertTranslation(translation, "for (int i = 0; i < 3; i++) {");
-    assertTranslation(translation, "ColorEnum *e = ColorEnum_values[i];");
+    assertTranslation(translation, "ColorEnum *e = ColorEnum_values_[i];");
   }
 
   public void testEnumWithParameters() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -301,7 +301,7 @@ protected void printNativeDeclaration(NativeDeclaration declaration) {
     newline();
     String code = declaration.getImplementationCode();
     if (code != null) {
-      print(code);
+      println(reindent(code));
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/ClassInstanceCreation.java
Patch:
@@ -49,6 +49,7 @@ public ClassInstanceCreation(org.eclipse.jdt.core.dom.ClassInstanceCreation jdtN
   public ClassInstanceCreation(ClassInstanceCreation other) {
     super(other);
     methodBinding = other.getMethodBinding();
+    hasRetainedResult = other.hasRetainedResult();
     expression.copyFrom(other.getExpression());
     type.copyFrom(other.getType());
     arguments.copyFrom(other.getArguments());

File: jre_emul/Classes/com/google/j2objc/security/IosMD5MessageDigest.java
Patch:
@@ -53,7 +53,7 @@ protected native byte[] engineDigest() /*-[
     IOSByteArray *bytes = [buffer_ toByteArray];
     unsigned char digest[CC_MD5_DIGEST_LENGTH];
     CC_MD5(bytes->buffer_, (unsigned) bytes->size_, digest);
-    return [IOSByteArray arrayWithBytes:(const char *) digest count:CC_MD5_DIGEST_LENGTH];
+    return [IOSByteArray arrayWithBytes:(jbyte *)digest count:CC_MD5_DIGEST_LENGTH];
   ]-*/;
 
   @Override

File: jre_emul/Classes/java/text/IOSCollator.java
Patch:
@@ -129,7 +129,7 @@ public int compareTo(CollationKey value) {
     public native byte[] toByteArray() /*-[
       const char *utf = [[self getSourceString] UTF8String];
       // Include null terminator.
-      return [IOSByteArray arrayWithBytes:utf count:(jint)strlen(utf) + 1];
+      return [IOSByteArray arrayWithBytes:(const jbyte *)utf count:(jint)strlen(utf) + 1];
     ]-*/;
   }
 }

File: jre_emul/android/libcore/luni/src/main/java/java/nio/ByteArrayBuffer.java
Patch:
@@ -123,7 +123,7 @@ private static ByteArrayBuffer copy(ByteArrayBuffer other, int markOfOther, bool
     nil_chk(dst); \
     jint byteCount = [self checkGetBoundsWithInt:sizeof(TYPE) withInt:(jint)dst->size_ \
         withInt:dstOffset withInt:count]; \
-    char *src = backingArray_->buffer_ + arrayOffset_ + position__; \
+    char *src = (char *)(backingArray_->buffer_ + arrayOffset_ + position__); \
     unsafeBulkCopy((char *)(dst->buffer_ + dstOffset), src, byteCount, sizeof(TYPE), \
         order__->needsSwap_); \
     position__ += byteCount;
@@ -280,7 +280,7 @@ final native void get(short[] dst, int dstOffset, int count) /*-[
     nil_chk(src); \
     jint byteCount = [self checkPutBoundsWithInt:sizeof(TYPE) withInt:(jint)src->size_ \
         withInt:srcOffset withInt:count]; \
-    char *dst = backingArray_->buffer_ + arrayOffset_ + position__; \
+    char *dst = (char *)(backingArray_->buffer_ + arrayOffset_ + position__); \
     unsafeBulkCopy(dst, (char *)(src->buffer_ + srcOffset), byteCount, sizeof(TYPE), \
         order__->needsSwap_); \
     position__ += byteCount; \

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/HeapBufferIterator.java
Patch:
@@ -72,7 +72,8 @@ public int readInt() {
     public native void readIntArray(int[] dst, int dstOffset, int intCount) /*-[
       jint byteCount = intCount * sizeof(jint);
       if (dst != nil && buffer_ != nil) {
-        unsafeBulkCopy((char *)(dst->buffer_ + dstOffset), buffer_->buffer_ + offset_ + position_,
+        unsafeBulkCopy(
+            (char *)(dst->buffer_ + dstOffset), (char *)(buffer_->buffer_ + offset_ + position_),
             byteCount, sizeof(jint), order_->needsSwap_);
       }
       position_ += byteCount;

File: translator/src/test/java/com/google/devtools/j2objc/translate/EnumRewriterTest.java
Patch:
@@ -31,7 +31,7 @@ public void testGenericEnumConstructor() throws IOException {
     assertTranslatedLines(translation,
         "- (instancetype)initWithId:(id)t",
         "withNSString:(NSString *)__name",
-        "withInt:(int)__ordinal {");
+        "withInt:(jint)__ordinal {");
     assertTranslation(translation,
         "TestEnum_A = [[TestEnum alloc] initWithId:@\"foo\" withNSString:@\"A\" withInt:0];");
   }

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -67,7 +67,7 @@ public void testMethodAndStatementTranslation() throws IOException {
         "class Test { public String toString(boolean value) { return String.valueOf(value); } }",
         "Test", "Test.m");
     assertTranslatedLines(translation,
-        "- (NSString *)toStringWithBoolean:(BOOL)value {",
+        "- (NSString *)toStringWithBoolean:(jboolean)value {",
         "return [NSString valueOfBool:value];");
   }
 
@@ -92,7 +92,7 @@ public void testStringHashCode() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
-    assertEquals("int test = ((int) [@\"foo\" hash]);", result);
+    assertEquals("jint test = ((jint) [@\"foo\" hash]);", result);
   }
 
   public void testClassGetSuperclass() throws IOException {
@@ -143,7 +143,7 @@ public void testStringIndexOf() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(9, stmts.size());
     String result = generateStatement(stmts.get(1));
-    assertEquals("int idx = [s indexOf:'g'];", result);
+    assertEquals("jint idx = [s indexOf:'g'];", result);
     result = generateStatement(stmts.get(2));
     assertEquals("idx = [s indexOfString:@\"brillig\"];", result);
     result = generateStatement(stmts.get(3));

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -477,8 +477,6 @@ protected void printMappedMethodDeclaration(MethodDeclaration m, IOSMethod mappe
   }
 
   private String generateMethodBody(MethodDeclaration m) {
-    IMethodBinding binding = m.getMethodBinding();
-    boolean isFunction = BindingUtil.isFunction(binding);
     if (Modifier.isNative(m.getModifiers())) {
       if (Options.generateNativeStubs()) {
         return generateNativeStub(m);
@@ -495,7 +493,7 @@ private String generateMethodBody(MethodDeclaration m) {
       return body + "}";
     } else {
       // generate a normal method body
-      return generateStatement(m.getBody(), isFunction);
+      return generateStatement(m.getBody(), /* isFunction */ false);
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -117,8 +117,8 @@ private boolean canFunctionize(MethodDeclaration node) {
     IMethodBinding m = node.getMethodBinding();
 
     // Never functionize these types of methods.
-    if (BindingUtil.isFunction(m) || BindingUtil.isAbstract(m) || BindingUtil.isSynthetic(m)
-        || m.isAnnotationMember() || m.isConstructor() || BindingUtil.isDestructor(m)) {
+    if (BindingUtil.isAbstract(m) || BindingUtil.isSynthetic(m) || m.isAnnotationMember()
+        || m.isConstructor() || BindingUtil.isDestructor(m)) {
       return false;
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeNode.java
Patch:
@@ -175,6 +175,7 @@ public enum Kind {
     FIELD_ACCESS,
     FIELD_DECLARATION,
     FOR_STATEMENT,
+    FUNCTION_DECLARATION,
     FUNCTION_INVOCATION,
     IF_STATEMENT,
     INFIX_EXPRESSION,

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -657,7 +657,7 @@ public boolean visit(ForStatement node) {
 
   @Override
   public boolean visit(FunctionInvocation node) {
-    boolean castPrinted = maybePrintCast(node, node.getDeclaredReturnType());
+    boolean castPrinted = maybePrintCast(node, Types.mapType(node.getDeclaredReturnType()));
     buffer.append(node.getName());
     buffer.append('(');
     for (Iterator<Expression> iter = node.getArguments().iterator(); iter.hasNext(); ) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -257,7 +257,7 @@ private void addTypeAndName(IOSParameter iosParameter, SingleVariableDeclaration
   protected String functionDeclaration(MethodDeclaration method, IOSMethod mappedMethod) {
     StringBuffer sb = new StringBuffer();
     IMethodBinding m = method.getMethodBinding();
-    sb.append(BindingUtil.isStatic(m) ? "" : "__attribute__ ((unused)) static ");
+    sb.append("__attribute__ ((unused)) static ");
     Type returnType = method.getReturnType();
     sb.append(String.format("%s %s(",
         NameTable.getObjCType(returnType.getTypeBinding()),

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -513,7 +513,7 @@ public void testSynchronizedMethod() throws IOException {
         + "  public synchronized void foo() {} }",
         "Test", "Test.m");
     assertTranslation(translation, "- (void)foo {\n"
-        + "  @synchronized(self) {");
+        + "  @synchronized (self) {");
   }
 
   public void testStaticSynchronizedMethod() throws IOException {
@@ -522,7 +522,7 @@ public void testStaticSynchronizedMethod() throws IOException {
         + "  public static synchronized void foo() {} }",
         "Test", "Test.m");
     assertTranslation(translation, "+ (void)foo {\n"
-        + "  @synchronized([Test getClass]) {");
+        + "  @synchronized ([IOSClass classWithClass:[Test class]]) {");
   }
 
   public void testNoGenMethodStubs() throws IOException {
@@ -711,7 +711,7 @@ public void testSynchronizedNativeMethod() throws IOException {
     String translation = translateSourceFile(
         "class Test { public synchronized native void exit() /*-[ exit(0); ]-*/; }",
         "Test", "Test.m");
-    assertTranslation(translation, "@synchronized(self)");
+    assertTranslation(translation, "@synchronized (self)");
   }
 
   public void testMethodMetadata() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/FunctionizerTest.java
Patch:
@@ -273,6 +273,7 @@ public void testSynchronizedFunction() throws IOException {
         + "private synchronized String str() { return toString(); }}",
         "A", "A.m");
     assertTranslation(translation, "@synchronized (self)");
+    assertOccurrences(translation, "@synchronized", 1);
     translation = translateSourceFile(
         "class A { void test() { str(); } "
         + "  private String str() { synchronized(this) { return toString(); }}}",
@@ -283,6 +284,7 @@ public void testSynchronizedFunction() throws IOException {
         + "  private static synchronized String str() { return \"abc\"; }}",
         "A", "A.m");
     assertTranslation(translation, "@synchronized ([IOSClass classWithClass:[A class]])");
+    assertOccurrences(translation, "@synchronized", 1);
     translation = translateSourceFile(
         "class A { void test() { str(); } "
         + "  private String str() { synchronized(this.getClass()) { return \"abc\"; }}}",

File: translator/src/main/java/com/google/devtools/j2objc/TranslationProcessor.java
Patch:
@@ -234,7 +234,6 @@ public static void applyMutations(CompilationUnit unit, TimeTracker ticker) {
 
     new OcniExtractor(unit).run(unit);
     ticker.tick("OcniExtractor");
-    System.out.println(unit.toString());
 
     Map<String, String> methodMappings = Options.getMethodMappings();
     if (methodMappings.isEmpty()) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -311,7 +311,7 @@ protected void generate(EnumDeclaration node) {
     printInstanceVariables(node, false);
     println("}");
     printDeclarations(node.getBodyDeclarations());
-    println("@end");
+    println("\n@end");
     printStaticInitFunction(node, methods);
     printf("\nFOUNDATION_EXPORT %s *%s_values[];\n", typeName, typeName);
     for (EnumConstantDeclaration constant : constants) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/EnumRewriter.java
Patch:
@@ -147,7 +147,7 @@ private static void addExtraNativeDecls(EnumDeclaration node) {
     String header = String.format(
         "+ (IOSObjectArray *)values;\n\n"
         + "+ (%s *)valueOfWithNSString:(NSString *)name;\n\n"
-        + "- (id)copyWithZone:(NSZone *)zone;", typeName);
+        + "- (id)copyWithZone:(NSZone *)zone;\n", typeName);
 
     StringBuilder sb = new StringBuilder();
     sb.append(String.format(

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -35,6 +35,7 @@
 import com.google.devtools.j2objc.translate.DeadCodeEliminatorTest;
 import com.google.devtools.j2objc.translate.DestructorGeneratorTest;
 import com.google.devtools.j2objc.translate.EnhancedForRewriterTest;
+import com.google.devtools.j2objc.translate.EnumRewriterTest;
 import com.google.devtools.j2objc.translate.FunctionizerTest;
 import com.google.devtools.j2objc.translate.GwtConverterTest;
 import com.google.devtools.j2objc.translate.InitializationNormalizerTest;
@@ -84,6 +85,7 @@ public class SmallTests {
     DeadCodeMapTest.class,
     DestructorGeneratorTest.class,
     EnhancedForRewriterTest.class,
+    EnumRewriterTest.class,
     ErrorReportingASTVisitorTest.class,
     FunctionizerTest.class,
     GwtConverterTest.class,

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -356,8 +356,9 @@ public void testEnumConstantAnonymousClassNaming() throws IOException {
 
     assertTranslation(header, "@interface TestEnum_$1 : TestEnum");
     assertTranslation(header, "@interface TestEnum_$2 : TestEnum");
-    assertTranslation(header,
-        "- (instancetype)initWithNSString:(NSString *)__name withInt:(int)__ordinal");
+    assertTranslatedLines(header,
+        "- (instancetype)initWithNSString:(NSString *)__name",
+        "withInt:(int)__ordinal;");
 
     assertTranslation(impl, "[super initWithNSString:__name withInt:__ordinal]");
     assertTranslation(impl,

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -594,7 +594,8 @@ public static String getFullName(ITypeBinding binding) {
    * Returns a "Type_method" function name for static methods, such as from
    * enum types.
    */
-  public static String makeFunctionName(ITypeBinding classBinding, IMethodBinding methodBinding) {
+  public static String makeFunctionName(IMethodBinding methodBinding) {
+    ITypeBinding classBinding = methodBinding.getDeclaringClass();
     String className = getFullName(classBinding);
     String methodName = methodBinding.getName();
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/NilCheckResolver.java
Patch:
@@ -68,7 +68,7 @@
  */
 public class NilCheckResolver extends TreeVisitor {
 
-  private static final IOSMethodBinding NIL_CHK_DECL = IOSMethodBinding.newFunction(
+  private final IOSMethodBinding nilChkDecl = IOSMethodBinding.newFunction(
       "nil_chk", Types.resolveIOSType("id"), null, Types.resolveIOSType("id"));
 
   // Contains the set of "safe" variables that don't need nil checks. A new
@@ -169,7 +169,7 @@ private void addNilCheck(Expression node) {
       safeVarsFalse.add(var);
     }
     IOSMethodBinding nilChkBinding = IOSMethodBinding.newTypedInvocation(
-        NIL_CHK_DECL, node.getTypeBinding());
+        nilChkDecl, node.getTypeBinding());
     MethodInvocation nilChkInvocation = new MethodInvocation(nilChkBinding, null);
     node.replaceWith(nilChkInvocation);
     nilChkInvocation.getArguments().add(node);

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -480,14 +480,14 @@ public boolean visit(CastExpression node) {
       buffer.append(", @protocol(");
       buffer.append(NameTable.getFullName(type));
       buffer.append("))");
-    } else if (type.isClass() || type.isAnnotation()) {
+    } else if (type.isClass() || type.isArray() || type.isAnnotation()) {
       buffer.append("check_class_cast(");
       node.getExpression().accept(this);
       buffer.append(", [");
       buffer.append(NameTable.getFullName(type));
       buffer.append(" class])");
     } else {
-      // Cast type check not needed for primitive, enum and array types.
+      // Cast type check not needed for primitive and enum types.
       node.getExpression().accept(this);
     }
     return false;

File: translator/src/main/java/com/google/devtools/j2objc/translate/Autoboxer.java
Patch:
@@ -45,7 +45,6 @@
 import com.google.devtools.j2objc.ast.VariableDeclarationFragment;
 import com.google.devtools.j2objc.ast.WhileStatement;
 import com.google.devtools.j2objc.types.IOSMethodBinding;
-import com.google.devtools.j2objc.types.PointerTypeBinding;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
@@ -356,9 +355,10 @@ private void rewriteBoxedPrefixOrPostfix(
     }
     String methodName = methodPrefix + NameTable.capitalize(Types.getPrimitiveType(type).getName());
     IOSMethodBinding methodBinding = IOSMethodBinding.newFunction(
-        methodName, type, type, new PointerTypeBinding(type));
+        methodName, type, type, Types.getPointerType(type));
     MethodInvocation invocation = new MethodInvocation(methodBinding, null);
-    invocation.getArguments().add(MethodInvocation.newAddressOf(operand.copy()));
+    invocation.getArguments().add(new PrefixExpression(
+        PrefixExpression.Operator.ADDRESS_OF, TreeUtil.remove(operand)));
     node.replaceWith(invocation);
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -307,8 +307,7 @@ private void handleCompareToMethod(MethodDeclaration node, IMethodBinding bindin
         Types.resolveJavaType("boolean"), InfixExpression.Operator.NOT_EQUALS,
         new SimpleName(param), new NullLiteral());
     Expression instanceofExpr = new InstanceofExpression(new SimpleName(param), typeArguments[0]);
-    instanceofExpr = new PrefixExpression(
-        Types.resolveJavaType("boolean"), PrefixExpression.Operator.NOT, instanceofExpr);
+    instanceofExpr = new PrefixExpression(PrefixExpression.Operator.NOT, instanceofExpr);
 
     ITypeBinding cceType = GeneratedTypeBinding.newTypeBinding(
         "java.lang.ClassCastException", Types.resolveJavaType("java.lang.RuntimeException"), false);

File: translator/src/main/java/com/google/devtools/j2objc/types/IOSMethod.java
Patch:
@@ -37,9 +37,6 @@ public class IOSMethod {
   private final List<IOSParameter> parameters;
   private boolean varArgs = false;
 
-  public static final IOSMethod DEREFERENCE = newFunction("_dereference_");
-  public static final IOSMethod ADDRESS_OF = newFunction("_address_of_");
-
   private IOSMethod(
       String name, boolean isFunction, String declaringClass, List<IOSParameter> parameters,
       boolean varArgs) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -158,7 +158,7 @@ public void testStaticVariableInOtherVariable() throws IOException {
         + "void test() { Bar.FOO=2; } } class Bar { public static int FOO=1; }",
        "Example", "Example.m");
     assertTranslation(translation, "int Bar_FOO_ = 1;");
-    assertTranslation(translation, "(*Bar_getRef_FOO_()) = 2;");
+    assertTranslation(translation, "*Bar_getRef_FOO_() = 2;");
   }
 
   public void testNSObjectMessageRename() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -79,7 +79,7 @@ public void testFinalArrayInnerAccess() throws IOException {
         "- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;");
     assertTranslation(impl, "IOSBooleanArray *bar = [IOSBooleanArray arrayWithLength:1];");
     assertTranslation(impl, "[[Test_$1 alloc] initWithBooleanArray:bar]");
-    assertTranslation(impl, "(*IOSBooleanArray_GetRef(nil_chk(val$bar_), 0)) = YES;");
+    assertTranslation(impl, "*IOSBooleanArray_GetRef(nil_chk(val$bar_), 0) = YES;");
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -353,8 +353,7 @@ public void testAutoboxArrayIndex() throws IOException {
         "    array[index()] = 2; }}";
     String translation = translateSourceFile(source, "Test", "Test.m");
     assertTranslation(translation,
-        "(*IOSIntArray_GetRef(array, [((JavaLangInteger *) nil_chk([self index])) intValue])) = " +
-        "2;");
+        "*IOSIntArray_GetRef(array, [((JavaLangInteger *) nil_chk([self index])) intValue]) = 2;");
   }
 
   public void testPrefixExpression() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/EnhancedForRewriterTest.java
Patch:
@@ -34,7 +34,7 @@ public void testEnhancedForWithBoxedType() throws IOException {
         "void test() { for (char c : charArray) {} for (char c : charList) {} } }";
     String translation = translateSourceFile(source, "A", "A.m");
     assertTranslation(translation,
-        "unichar c = [((JavaLangCharacter *) nil_chk((*b__++))) charValue];");
+        "unichar c = [((JavaLangCharacter *) nil_chk(*b__++)) charValue];");
     assertTranslation(translation,
         "unichar c = [((JavaLangCharacter *) nil_chk(boxed__)) charValue];");
   }

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Posix.java
Patch:
@@ -969,7 +969,7 @@ public int read(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount)
 
   private native int readBytes(FileDescriptor fd, Object buffer, int offset, int byteCount)
       throws ErrnoException /*-[
-    IOSArray_checkRange([(IOSArray *)buffer length], NSMakeRange(offset, byteCount));
+    IOSArray_checkRange([(IOSArray *)buffer length], offset, byteCount);
     char *bytes = BytesRW(buffer);
     if (!bytes) {
       return -1;
@@ -1336,7 +1336,7 @@ public native int write(FileDescriptor fd, byte[] bytes, int byteOffset, int byt
     if (!bytes) {
       return -1;
     }
-    IOSArray_checkRange(bytes->size_, NSMakeRange(byteOffset, byteCount));
+    IOSArray_checkRange(bytes->size_, byteOffset, byteCount);
     int rc =
         TEMP_FAILURE_RETRY(write([fd getInt$], bytes->buffer_ + byteOffset, byteCount));
     return [LibcoreIoPosix throwIfMinusOneWithNSString:@"write" withInt:rc];

File: annotations/src/main/java/com/google/j2objc/annotations/ObjectiveCName.java
Patch:
@@ -20,12 +20,12 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation that specifies what the Objective-C class or protocol
- * name should be when translated.
+ * Annotation that specifies what the Objective-C class, protocol, method or
+ * constructor declaration should be when translated.
  *
  * @author Tom Ball
  */
-@Target(ElementType.TYPE)
+@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR })
 @Retention(RetentionPolicy.CLASS)
 public @interface ObjectiveCName {
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -203,10 +203,11 @@ protected String mappedMethodDeclaration(MethodDeclaration method, IOSMethod map
     if (mappedMethod.getName().equals("hash")) {
       baseDeclaration = "- (NSUInteger)hash";
     } else {
+      String returnType = method.isConstructor() ? "instancetype"
+          : NameTable.getObjCType(method.getReturnType().getTypeBinding());
       baseDeclaration = String.format("%c (%s)%s",
           Modifier.isStatic(method.getModifiers()) ? '+' : '-',
-          NameTable.getObjCType(method.getReturnType().getTypeBinding()),
-          mappedMethod.getName());
+          returnType, mappedMethod.getName());
     }
 
     sb.append(baseDeclaration);

File: translator/src/main/java/com/google/devtools/j2objc/types/IOSMethod.java
Patch:
@@ -113,7 +113,9 @@ private static String[] splitParameterString(String s) {
       // If a type has spaces in it (ie, foo *), combine the parts.
       if (part.contains("(")) {
         while (!part.contains(")")) {
-          assert i + 1 < parts.length;
+          if (i + 1 >= parts.length) {
+            throw new IllegalArgumentException("invalid Objective-C parameter string: " + s);
+          }
           part += ' ' + parts[++i];
         }
       }

File: jre_emul/android/libcore/luni/src/main/java/java/lang/Package.java
Patch:
@@ -95,7 +95,7 @@ public <A extends Annotation> A getAnnotation(Class<A> annotationType) {
      */
     public Annotation[] getAnnotations() {
         try {
-            Class<?> c = Class.forName(getName() + ".package-info");
+            Class<?> c = Class.forName(getName() + ".package_info");
             return c.getAnnotations();
         } catch (Exception ex) {
             return NO_ANNOTATIONS;

File: translator/src/main/java/com/google/devtools/j2objc/ast/Block.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import java.util.List;
 
 /**
@@ -31,7 +29,6 @@ public Block(org.eclipse.jdt.core.dom.Block jdtNode) {
     for (Object statement : jdtNode.statements()) {
       statements.add((Statement) TreeConverter.convert(statement));
     }
-    hasAutoreleasePool = Types.hasAutoreleasePool(jdtNode);
   }
 
   public Block(Block other) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/AbstractTypeDeclaration.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.common.base.Preconditions;
-import com.google.devtools.j2objc.types.Types;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
@@ -33,7 +32,7 @@ public abstract class AbstractTypeDeclaration extends BodyDeclaration {
 
   public AbstractTypeDeclaration(org.eclipse.jdt.core.dom.AbstractTypeDeclaration jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveBinding();
     name.set((SimpleName) TreeConverter.convert(jdtNode.getName()));
     for (Object bodyDecl : jdtNode.bodyDeclarations()) {
       bodyDeclarations.add((BodyDeclaration) TreeConverter.convert(bodyDecl));

File: translator/src/main/java/com/google/devtools/j2objc/ast/Annotation.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.IAnnotationBinding;
 
 /**
@@ -28,7 +26,7 @@ public abstract class Annotation extends TreeNode {
 
   protected Annotation(org.eclipse.jdt.core.dom.Annotation jdtNode) {
     super(jdtNode);
-    annotationBinding = Types.getAnnotationBinding(jdtNode);
+    annotationBinding = jdtNode.resolveAnnotationBinding();
     typeName.set((Name) TreeConverter.convert(jdtNode.getTypeName()));
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/AnnotationTypeMemberDeclaration.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.IMethodBinding;
 
 /**
@@ -31,7 +29,7 @@ public class AnnotationTypeMemberDeclaration extends BodyDeclaration {
   public AnnotationTypeMemberDeclaration(
       org.eclipse.jdt.core.dom.AnnotationTypeMemberDeclaration jdtNode) {
     super(jdtNode);
-    methodBinding = Types.getMethodBinding(jdtNode);
+    methodBinding = jdtNode.resolveBinding();
     type.set((Type) TreeConverter.convert(jdtNode.getType()));
     name.set((SimpleName) TreeConverter.convert(jdtNode.getName()));
     defaultValue.set((Expression) TreeConverter.convert(jdtNode.getDefault()));

File: translator/src/main/java/com/google/devtools/j2objc/ast/AnonymousClassDeclaration.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 import java.util.List;
@@ -32,7 +30,7 @@ public class AnonymousClassDeclaration extends TreeNode {
 
   public AnonymousClassDeclaration(org.eclipse.jdt.core.dom.AnonymousClassDeclaration jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveBinding();
     for (Object bodyDecl : jdtNode.bodyDeclarations()) {
       bodyDeclarations.add((BodyDeclaration) TreeConverter.convert(bodyDecl));
     }

File: translator/src/main/java/com/google/devtools/j2objc/ast/ArrayInitializer.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 import java.util.List;
@@ -30,7 +28,7 @@ public class ArrayInitializer extends Expression {
 
   public ArrayInitializer(org.eclipse.jdt.core.dom.ArrayInitializer jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveTypeBinding();
     for (Object expression : jdtNode.expressions()) {
       expressions.add((Expression) TreeConverter.convert(expression));
     }

File: translator/src/main/java/com/google/devtools/j2objc/ast/ClassInstanceCreation.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
@@ -35,7 +33,7 @@ public class ClassInstanceCreation extends Expression {
 
   public ClassInstanceCreation(org.eclipse.jdt.core.dom.ClassInstanceCreation jdtNode) {
     super(jdtNode);
-    methodBinding = Types.getMethodBinding(jdtNode);
+    methodBinding = jdtNode.resolveConstructorBinding();
     expression.set((Expression) TreeConverter.convert(jdtNode.getExpression()));
     type.set((Type) TreeConverter.convert(jdtNode.getType()));
     for (Object argument : jdtNode.arguments()) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/ConditionalExpression.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 /**
@@ -30,7 +28,7 @@ public class ConditionalExpression extends Expression {
 
   public ConditionalExpression(org.eclipse.jdt.core.dom.ConditionalExpression jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveTypeBinding();
     expression.set((Expression) TreeConverter.convert(jdtNode.getExpression()));
     thenExpression.set((Expression) TreeConverter.convert(jdtNode.getThenExpression()));
     elseExpression.set((Expression) TreeConverter.convert(jdtNode.getElseExpression()));

File: translator/src/main/java/com/google/devtools/j2objc/ast/ConstructorInvocation.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.IMethodBinding;
 
 import java.util.List;
@@ -34,7 +32,7 @@ public ConstructorInvocation(IMethodBinding methodBinding) {
 
   public ConstructorInvocation(org.eclipse.jdt.core.dom.ConstructorInvocation jdtNode) {
     super(jdtNode);
-    methodBinding = Types.getMethodBinding(jdtNode);
+    methodBinding = jdtNode.resolveConstructorBinding();
     for (Object argument : jdtNode.arguments()) {
       arguments.add((Expression) TreeConverter.convert(argument));
     }

File: translator/src/main/java/com/google/devtools/j2objc/ast/FieldAccess.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.IVariableBinding;
 
@@ -30,7 +28,7 @@ public class FieldAccess extends Expression {
 
   public FieldAccess(org.eclipse.jdt.core.dom.FieldAccess jdtNode) {
     super(jdtNode);
-    variableBinding = Types.getVariableBinding(jdtNode);
+    variableBinding = jdtNode.resolveFieldBinding();
     expression.set((Expression) TreeConverter.convert(jdtNode.getExpression()));
     name.set((SimpleName) TreeConverter.convert(jdtNode.getName()));
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/InfixExpression.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.common.collect.Maps;
-import com.google.devtools.j2objc.types.Types;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
@@ -87,7 +86,7 @@ public static Operator fromJdtOperator(
 
   public InfixExpression(org.eclipse.jdt.core.dom.InfixExpression jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveTypeBinding();
     operator = Operator.fromJdtOperator(jdtNode.getOperator());
     leftOperand.set((Expression) TreeConverter.convert(jdtNode.getLeftOperand()));
     rightOperand.set((Expression) TreeConverter.convert(jdtNode.getRightOperand()));

File: translator/src/main/java/com/google/devtools/j2objc/ast/MethodDeclaration.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.IMethodBinding;
 
 import java.util.List;
@@ -35,7 +33,7 @@ public class MethodDeclaration extends BodyDeclaration {
 
   public MethodDeclaration(org.eclipse.jdt.core.dom.MethodDeclaration jdtNode) {
     super(jdtNode);
-    methodBinding = Types.getMethodBinding(jdtNode);
+    methodBinding = jdtNode.resolveBinding();
     isConstructor = jdtNode.isConstructor();
     returnType.set((Type) TreeConverter.convert(jdtNode.getReturnType2()));
     name.set((SimpleName) TreeConverter.convert(jdtNode.getName()));

File: translator/src/main/java/com/google/devtools/j2objc/ast/MethodInvocation.java
Patch:
@@ -16,7 +16,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.devtools.j2objc.types.IOSMethodBinding;
-import com.google.devtools.j2objc.types.Types;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -35,7 +34,7 @@ public class MethodInvocation extends Expression {
 
   public MethodInvocation(org.eclipse.jdt.core.dom.MethodInvocation jdtNode) {
     super(jdtNode);
-    methodBinding = Types.getMethodBinding(jdtNode);
+    methodBinding = jdtNode.resolveMethodBinding();
     expression.set((Expression) TreeConverter.convert(jdtNode.getExpression()));
     name.set((SimpleName) TreeConverter.convert(jdtNode.getName()));
     for (Object argument : jdtNode.arguments()) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/Name.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.BindingUtil;
 
 import org.eclipse.jdt.core.dom.IBinding;
@@ -31,7 +30,7 @@ public abstract class Name extends Expression {
 
   public Name(org.eclipse.jdt.core.dom.Name jdtNode) {
     super(jdtNode);
-    binding = Types.getBindingUnsafe(jdtNode);
+    binding = jdtNode.resolveBinding();
   }
 
   public Name(Name other) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/NumberLiteral.java
Patch:
@@ -29,7 +29,7 @@ public class NumberLiteral extends Expression {
 
   public NumberLiteral(org.eclipse.jdt.core.dom.NumberLiteral jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveTypeBinding();
     token = jdtNode.getToken();
     Object constantValue = jdtNode.resolveConstantExpressionValue();
     // TODO(kstanger): We should be able to remove the null test once all the

File: translator/src/main/java/com/google/devtools/j2objc/ast/PrefixExpression.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.common.collect.Maps;
-import com.google.devtools.j2objc.types.Types;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
@@ -69,7 +68,7 @@ public static Operator fromJdtOperator(
 
   public PrefixExpression(org.eclipse.jdt.core.dom.PrefixExpression jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveTypeBinding();
     operator = Operator.fromJdtOperator(jdtNode.getOperator());
     operand.set((Expression) TreeConverter.convert(jdtNode.getOperand()));
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperConstructorInvocation.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.IMethodBinding;
 
 import java.util.List;
@@ -31,7 +29,7 @@ public class SuperConstructorInvocation extends Statement {
 
   public SuperConstructorInvocation(org.eclipse.jdt.core.dom.SuperConstructorInvocation jdtNode) {
     super(jdtNode);
-    methodBinding = Types.getMethodBinding(jdtNode);
+    methodBinding = jdtNode.resolveConstructorBinding();
     expression.set((Expression) TreeConverter.convert(jdtNode.getExpression()));
     for (Object argument : jdtNode.arguments()) {
       arguments.add((Expression) TreeConverter.convert(argument));

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperFieldAccess.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.IVariableBinding;
 
@@ -30,7 +28,7 @@ public class SuperFieldAccess extends Expression {
 
   public SuperFieldAccess(org.eclipse.jdt.core.dom.SuperFieldAccess jdtNode) {
     super(jdtNode);
-    variableBinding = Types.getVariableBinding(jdtNode);
+    variableBinding = jdtNode.resolveFieldBinding();
     qualifier.set((Name) TreeConverter.convert(jdtNode.getQualifier()));
     name.set((SimpleName) TreeConverter.convert(jdtNode.getName()));
   }

File: translator/src/main/java/com/google/devtools/j2objc/ast/SuperMethodInvocation.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
@@ -33,7 +31,7 @@ public class SuperMethodInvocation extends Expression {
 
   public SuperMethodInvocation(org.eclipse.jdt.core.dom.SuperMethodInvocation jdtNode) {
     super(jdtNode);
-    methodBinding = Types.getMethodBinding(jdtNode);
+    methodBinding = jdtNode.resolveMethodBinding();
     qualifier.set((Name) TreeConverter.convert(jdtNode.getQualifier()));
     name.set((SimpleName) TreeConverter.convert(jdtNode.getName()));
     for (Object argument : jdtNode.arguments()) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/ThisExpression.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
 /**
@@ -28,7 +26,7 @@ public class ThisExpression extends Expression {
 
   public ThisExpression(org.eclipse.jdt.core.dom.ThisExpression jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveTypeBinding();
     qualifier.set((Name) TreeConverter.convert(jdtNode.getQualifier()));
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeVisitor.java
Patch:
@@ -240,7 +240,9 @@ public boolean visit(InstanceofExpression node) {
   public void endVisit(InstanceofExpression node) {}
 
   public boolean visit(Javadoc node) {
-    return true;
+    // By default don't visit javadoc nodes because they aren't code.
+    // This is consistent with JDT's base visitor class.
+    return false;
   }
 
   public void endVisit(Javadoc node) {}

File: translator/src/main/java/com/google/devtools/j2objc/ast/Type.java
Patch:
@@ -15,7 +15,6 @@
 package com.google.devtools.j2objc.ast;
 
 import com.google.common.base.Preconditions;
-import com.google.devtools.j2objc.types.Types;
 
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
@@ -28,7 +27,7 @@ public abstract class Type extends TreeNode {
 
   public Type(org.eclipse.jdt.core.dom.Type jdtNode) {
     super(jdtNode);
-    typeBinding = Types.getTypeBinding(jdtNode);
+    typeBinding = jdtNode.resolveBinding();
   }
 
   public Type(Type other) {

File: translator/src/main/java/com/google/devtools/j2objc/ast/VariableDeclaration.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.google.devtools.j2objc.ast;
 
-import com.google.devtools.j2objc.types.Types;
-
 import org.eclipse.jdt.core.dom.IVariableBinding;
 
 /**
@@ -30,7 +28,7 @@ public abstract class VariableDeclaration extends TreeNode {
 
   public VariableDeclaration(org.eclipse.jdt.core.dom.VariableDeclaration jdtNode) {
     super(jdtNode);
-    variableBinding = Types.getVariableBinding(jdtNode);
+    variableBinding = jdtNode.resolveBinding();
     extraDimensions = jdtNode.getExtraDimensions();
     name.set((SimpleName) TreeConverter.convert(jdtNode.getName()));
     initializer.set((Expression) TreeConverter.convert(jdtNode.getInitializer()));

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -26,7 +26,6 @@
 import com.google.devtools.j2objc.gen.ObjectiveCSourceFileGeneratorTest;
 import com.google.devtools.j2objc.gen.PrimitiveArrayTest;
 import com.google.devtools.j2objc.gen.StatementGeneratorTest;
-import com.google.devtools.j2objc.translate.ASTFactoryTest;
 import com.google.devtools.j2objc.translate.AnonymousClassConverterTest;
 import com.google.devtools.j2objc.translate.ArrayRewriterTest;
 import com.google.devtools.j2objc.translate.AutoboxerTest;
@@ -71,7 +70,6 @@
 public class SmallTests {
 
   private static final Class<?>[] smallTestClasses = new Class[] {
-    ASTFactoryTest.class,
     AnonymousClassConverterTest.class,
     ArrayAccessTest.class,
     ArrayCreationTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/translate/ConstantBranchPruner.java
Patch:
@@ -76,15 +76,15 @@ public void endVisit(InfixExpression node) {
       if (operator == CONDITIONAL_AND) {
         if (left == TRUE) {
           node.replaceWith(node.getRightOperand().copy());
-        } if (right == TRUE) {
+        } else if (right == TRUE) {
           node.replaceWith(node.getLeftOperand().copy());
         } else {
           node.replaceWith(new BooleanLiteral(false));
         }
       } else {
         if (left == FALSE) {
           node.replaceWith(node.getRightOperand().copy());
-        } if (right == FALSE) {
+        } else if (right == FALSE) {
           node.replaceWith(node.getLeftOperand().copy());
         } else {
           node.replaceWith(new BooleanLiteral(true));

File: jre_emul/Tests/com/google/j2objc/ThrowableTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package java.lang;
+package com.google.j2objc;
 
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
@@ -67,7 +67,7 @@ public void testStackTraceWithPrintStream() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = baos.toString("UTF-8");
-    assertTrue(trace.contains("java.lang.ThrowableTest.testStackTraceWithPrintStream()"));
+    assertTrue(trace.contains("com.google.j2objc.ThrowableTest.testStackTraceWithPrintStream("));
   }
 
   public void testStackTraceWithPrintWriter() throws Exception {
@@ -77,6 +77,6 @@ public void testStackTraceWithPrintWriter() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = sw.toString();
-    assertTrue(trace.contains("java.lang.ThrowableTest.testStackTraceWithPrintWriter()"));
+    assertTrue(trace.contains("com.google.j2objc.ThrowableTest.testStackTraceWithPrintWriter("));
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -503,7 +503,7 @@ public void testInnerSubClassOfOtherInnerWithOuterRefsWithGenerics() throws IOEx
 
     // Make sure that the call to super(null) in B.BInner's constructor
     // is translated with the right keyword for the generic second parameter.
-    assertTranslation(translation, "[super initWithTest_A:outer$ withId:nil");
+    assertTranslation(translation, "[super initWithTest_A:outer$ withTest_A_Inner:nil");
   }
 
   public void testStaticImportReferenceInInnerClass() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/TranslationProcessor.java
Patch:
@@ -202,6 +202,9 @@ public static CompilationUnit applyMutations(
     new NilCheckResolver().run(newUnit);
     ticker.tick("NilCheckResolver");
 
+    new ArrayRewriter().run(newUnit);
+    ticker.tick("ArrayRewriter");
+
     // Translate core Java type use to similar iOS types
     new JavaToIOSTypeConverter().run(newUnit);
     ticker.tick("JavaToIOSTypeConverter");
@@ -213,9 +216,6 @@ public static CompilationUnit applyMutations(
     new JavaToIOSMethodTranslator(methodMappings).run(newUnit);
     ticker.tick("JavaToIOSMethodTranslator");
 
-    new ArrayRewriter().run(newUnit);
-    ticker.tick("ArrayRewriter");
-
     new StaticVarRewriter().run(newUnit);
     ticker.tick("StaticVarRewriter");
 

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeConverter.java
Patch:
@@ -123,6 +123,8 @@ public static TreeNode convertInner(ASTNode jdtNode) {
         return new IfStatement((org.eclipse.jdt.core.dom.IfStatement) jdtNode);
       case ASTNode.INFIX_EXPRESSION:
         return new InfixExpression((org.eclipse.jdt.core.dom.InfixExpression) jdtNode);
+      case ASTNode.INITIALIZER:
+        return new Initializer((org.eclipse.jdt.core.dom.Initializer) jdtNode);
       case ASTNode.INSTANCEOF_EXPRESSION:
         return new InstanceofExpression((org.eclipse.jdt.core.dom.InstanceofExpression) jdtNode);
       case ASTNode.JAVADOC:

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedMethodBinding.java
Patch:
@@ -181,7 +181,7 @@ public ITypeBinding[] getExceptionTypes() {
 
   @Override
   public ITypeBinding[] getTypeParameters() {
-    throw new AssertionError("not implemented");
+    return new ITypeBinding[0];
   }
 
   @Override

File: jre_emul/Tests/java/util/TreeMapTest.java
Patch:
@@ -49,6 +49,8 @@ public void testIteration() {
     }
     iterationHelper(map, 1498500, 499500, 999000);
     iterationHelper(map.subMap(200, 750), 782925, 260975, 521950);
+    iterationHelper(map.subMap(1001, 1002), 0, 0, 0);
+    iterationHelper(map.subMap(-2, -1), 0, 0, 0);
     iterationHelper(new TreeMap<Integer, Integer>(), 0, 0, 0);
   }
 }

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -325,8 +325,8 @@ private native void makeSynchronousRequest() throws IOException /*-[
     request.HTTPMethod = self->method_;
     request.cachePolicy = self->useCaches_ ?
         NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData;
-    request.timeoutInterval =
-        self->readTimeout_ > 0 ? (self->readTimeout_ / 1000.0) : JavaLangDouble_MAX_VALUE;
+    int readTimeout = [self getReadTimeout];
+    request.timeoutInterval = readTimeout > 0 ? (readTimeout / 1000.0) : JavaLangDouble_MAX_VALUE;
     int n = [self->headers_ size];
     for (int i = 0; i < n; i++) {
       ComGoogleJ2objcNetIosHttpURLConnection_HeaderEntry *entry = [self->headers_ getWithInt:i];
@@ -346,7 +346,7 @@ private native void makeSynchronousRequest() throws IOException /*-[
         self->responseException_ = [[JavaNetProtocolException alloc] initWithNSString:errMsg];
         @throw self->responseException_;
       }
-      [request setValue:self->contentType_ forHTTPHeaderField:@"Content-Type"];
+      [request setValue:[self getContentType] forHTTPHeaderField:@"Content-Type"];
       if (self->nativeRequestData_) {
         request.HTTPBody = [(NSDataOutputStream *) self->nativeRequestData_ data];
       }

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -50,12 +50,12 @@ public class Thread implements Runnable {
   /** Android source declares this as the native VMThread class. */
   private final Object vmThread = new Object();
   private boolean isDaemon;
-  private boolean interrupted;
+  boolean interrupted;
   private boolean running;
   private ClassLoader contextClassLoader;
 
   /** The object the thread is waiting on (normally null). */
-  private Object blocker;
+  Object blocker;
 
   @Weak
   private ThreadGroup threadGroup;

File: jre_emul/Classes/java/text/IOSCollator.java
Patch:
@@ -127,7 +127,7 @@ public int compareTo(CollationKey value) {
 
     @Override
     public native byte[] toByteArray() /*-[
-      const char *utf = [source_ UTF8String];
+      const char *utf = [[self getSourceString] UTF8String];
       return [IOSByteArray arrayWithBytes:utf count:strlen(utf) + 1];  // Include null terminator.
     ]-*/;
   }

File: jre_emul/android/frameworks/base/core/java/android/os/SystemClock.java
Patch:
@@ -17,7 +17,7 @@
 package android.os;
 
 /*-[
-#include "libcore/io/Posix.h"
+#include "libcore/io/ErrnoException.h"
 
 #include <sys/types.h>
 #include <sys/sysctl.h>
@@ -181,7 +181,8 @@ public static native long elapsedRealtimeNanos() /*-[
       mib[1] = KERN_BOOTTIME;
       size = sizeof(boottime);
       if (sysctl(mib, MIB_SIZE, &boottime, &size, NULL, 0) == -1) {
-        [LibcoreIoPosix throwErrnoExceptionWithNSString:@"sysctl" withInt:errno];
+        @throw AUTORELEASE([[LibcoreIoErrnoException alloc]
+                            initWithNSString:@"sysctl" withInt:errno]);
       }
       return ((long long) boottime.tv_sec) * 1.e6 + boottime.tv_usec;
     ]-*/;

File: jre_emul/android/libcore/luni/src/main/java/java/lang/RealToString.java
Patch:
@@ -33,17 +33,17 @@ final class RealToString {
 
     private static final double invLogOfTenBaseTwo = Math.log(2.0) / Math.log(10.0);
 
-    private int firstK;
+    int firstK;
 
     /**
      * An array of decimal digits, filled by longDigitGenerator or bigIntDigitGenerator.
      */
-    private final int[] digits = new int[64];
+    final int[] digits = new int[64];
 
     /**
      * Number of valid entries in 'digits'.
      */
-    private int digitCount;
+    int digitCount;
 
     private RealToString() {
     }

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/SoftReference.java
Patch:
@@ -77,7 +77,7 @@
  */
 public class SoftReference<T> extends Reference<T> {
     // Used by IOSReference.
-    private boolean queued = false;
+    boolean queued = false;
 
     /**
      * Constructs a new soft reference to the given referent. The newly created

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/AsynchronousCloseMonitor.java
Patch:
@@ -125,7 +125,7 @@ private AsynchronousCloseMonitor() {
     }
 
     public static native void signalBlockedThreads(FileDescriptor fd) /*-[
-      [AsynchronousSocketCloseMonitor signalBlockedThreads:fd->descriptor_];
+      [AsynchronousSocketCloseMonitor signalBlockedThreads:[fd getInt$]];
     ]-*/;
 
     public static native Object newAsynchronousSocketCloseMonitor(int fd) /*-[

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/StructTimeval.java
Patch:
@@ -27,7 +27,7 @@ public final class StructTimeval {
     /** Microseconds. */
     public final long tv_usec;
 
-    private StructTimeval(long tv_sec, long tv_usec) {
+    StructTimeval(long tv_sec, long tv_usec) {
         this.tv_sec = tv_sec;
         this.tv_usec = tv_usec;
     }

File: translator/src/main/java/com/google/devtools/j2objc/TranslationProcessor.java
Patch:
@@ -306,7 +306,7 @@ private void maybeAddToClosure(ITypeBinding type) {
       return;  // Ignore core types.
     }
     String typeName = type.getErasure().getQualifiedName();
-    String sourceName = typeName.replace('.', File.pathSeparatorChar) + ".java";
+    String sourceName = typeName.replace('.', File.separatorChar) + ".java";
     if (seenFiles.contains(sourceName)) {
       return;
     }

File: translator/src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -85,7 +85,7 @@ public void testStringConstructorWithString() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(1, stmts.size());
     String result = generateStatement(stmts.get(0));
-    assertEquals("NSString *s = [NSString stringWithString:@\"test\"];", result);
+    assertEquals("NSString *s = @\"test\";", result);
   }
 
   public void testStringHashCode() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.google.devtools.j2objc.ast.Statement;
 import com.google.devtools.j2objc.ast.TreeVisitor;
 import com.google.devtools.j2objc.gen.SourceBuilder;
-import com.google.devtools.j2objc.gen.SourcePosition;
 import com.google.devtools.j2objc.gen.StatementGenerator;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ErrorUtil;
@@ -164,7 +163,7 @@ protected static List<String> getComGoogleDevtoolsJ2objcPath() {
   protected String generateStatement(Statement statement) {
     return StatementGenerator.generate(
         statement, Collections.<IVariableBinding>emptySet(), false,
-        new SourcePosition(null, SourceBuilder.BEGINNING_OF_FILE, null)).trim();
+        SourceBuilder.BEGINNING_OF_FILE).trim();
   }
 
   /**
@@ -314,7 +313,7 @@ protected String translateSourceFile(String source, String typeName, String file
       throws IOException {
     CompilationUnit unit = translateType(typeName, source);
     String sourceName = typeName + ".java";
-    TranslationProcessor.generateObjectiveCSource(sourceName, source, unit, TimeTracker.noop());
+    TranslationProcessor.generateObjectiveCSource(sourceName, unit, TimeTracker.noop());
     return getTranslatedFile(fileName);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -267,7 +267,7 @@ public void testMethodVarInNestedAnonymousClass() throws IOException {
     assertTrue("required field not found", found);
 
     // Verify constructor takes both outer field and var.
-    ObjectiveCImplementationGenerator.generate("Test.java", unit, source);
+    ObjectiveCImplementationGenerator.generate("Test.java", unit);
     String translation = getTranslatedFile("Test.m");
     assertTranslation(translation,
         "r2 = [[[Test_$1_$1 alloc] initWithJavaLangInteger:i] autorelease]");
@@ -296,7 +296,7 @@ public void testMethodVarInAnonymousClass() throws IOException {
     assertTrue("required field not found", found);
 
     // Verify method var is passed to constructor.
-    ObjectiveCImplementationGenerator.generate("Test.java", unit, source);
+    ObjectiveCImplementationGenerator.generate("Test.java", unit);
     String translation = getTranslatedFile("Test.m");
     assertTranslation(translation, "r = [[[Test_$1 alloc] initWithJavaLangInteger:i] autorelease]");
   }
@@ -325,7 +325,7 @@ public void testMethodVarInSwitch() throws IOException {
     assertTrue("required field not found", found);
 
     // Verify method var is passed to constructor.
-    ObjectiveCImplementationGenerator.generate("Test.java", unit, source);
+    ObjectiveCImplementationGenerator.generate("Test.java", unit);
     String translation = getTranslatedFile("Test.m");
     assertTranslation(translation,
         "r = [[[Test_$1 alloc] initWithJavaLangInteger:i] autorelease]");

File: translator/src/main/java/com/google/devtools/j2objc/ast/Initializer.java
Patch:
@@ -40,7 +40,8 @@ public Initializer copy() {
   }
 
   @Override
-  public void validate() {
+  public void validateInner() {
+    super.validateInner();
     Preconditions.checkState(annotations.isEmpty());
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/ast/PackageDeclaration.java
Patch:
@@ -55,8 +55,8 @@ public PackageDeclaration copy() {
   }
 
   @Override
-  public void validate() {
-    super.validate();
+  public void validateInner() {
+    super.validateInner();
     Preconditions.checkNotNull(name);
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/ast/TreeConverter.java
Patch:
@@ -22,8 +22,8 @@
 public class TreeConverter {
 
   public static CompilationUnit convertCompilationUnit(
-      org.eclipse.jdt.core.dom.CompilationUnit jdtUnit, String mainTypeName) {
-    return new CompilationUnit((org.eclipse.jdt.core.dom.CompilationUnit) jdtUnit, mainTypeName);
+      org.eclipse.jdt.core.dom.CompilationUnit jdtUnit, String mainTypeName, String source) {
+    return new CompilationUnit(jdtUnit, mainTypeName, source);
   }
 
   public static Statement convertStatement(org.eclipse.jdt.core.dom.Statement jdtStatement) {

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -124,7 +124,8 @@ protected CompilationUnit translateType(String name, String source) {
     NameTable.initialize();
     Types.initialize(unit);
     return TranslationProcessor.applyMutations(
-        unit, TranslationProcessor.getClassNameFromFilePath(name + ".java"), TimeTracker.noop());
+        unit, TranslationProcessor.getClassNameFromFilePath(name + ".java"), source,
+        TimeTracker.noop());
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -508,7 +508,7 @@ public void testAddIgnoreDeprecationWarningsPragmaIfDeprecatedDeclarationsIsEnab
       throws IOException {
     Options.enableDeprecatedDeclarations();
 
-    String sourceContent = "";
+    String sourceContent = "class Test {}";
     String translation = translateSourceFile(sourceContent, "FooBar", "FooBar.h");
 
     assertTranslation(translation, "#pragma clang diagnostic push");
@@ -518,7 +518,7 @@ public void testAddIgnoreDeprecationWarningsPragmaIfDeprecatedDeclarationsIsEnab
 
   public void testDoNotAddIgnoreDeprecationWarningsPragmaIfDeprecatedDeclarationsIsDisabled()
       throws IOException {
-    String sourceContent = "";
+    String sourceContent = "class Test {}";
     String translation = translateSourceFile(sourceContent, "FooBar", "FooBar.h");
 
     assertNotInTranslation(translation, "#pragma clang diagnostic push");

File: translator/src/main/java/com/google/devtools/j2objc/Plugin.java
Patch:
@@ -17,8 +17,7 @@
 package com.google.devtools.j2objc;
 
 import com.google.common.base.Preconditions;
-
-import org.eclipse.jdt.core.dom.CompilationUnit;
+import com.google.devtools.j2objc.ast.CompilationUnit;
 
 import java.io.File;
 import java.io.IOException;

File: translator/src/main/java/com/google/devtools/j2objc/translate/InitializationNormalizer.java
Patch:
@@ -256,7 +256,7 @@ private int findSuperConstructorInvocation(List<Statement> statements) {
    * "this(...)".  This constructors are skipped so initializers
    * aren't run more than once per instance creation.
    */
-  boolean isDesignatedConstructor(MethodDeclaration node) {
+  private static boolean isDesignatedConstructor(MethodDeclaration node) {
     if (!node.isConstructor()) {
       return false;
     }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayAccessTest.java
Patch:
@@ -17,8 +17,7 @@
 package com.google.devtools.j2objc.gen;
 
 import com.google.devtools.j2objc.GenerationTest;
-
-import org.eclipse.jdt.core.dom.Statement;
+import com.google.devtools.j2objc.ast.Statement;
 
 import java.util.List;
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ArrayCreationTest.java
Patch:
@@ -17,8 +17,7 @@
 package com.google.devtools.j2objc.gen;
 
 import com.google.devtools.j2objc.GenerationTest;
-
-import org.eclipse.jdt.core.dom.Statement;
+import com.google.devtools.j2objc.ast.Statement;
 
 import java.util.List;
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/PrimitiveArrayTest.java
Patch:
@@ -17,8 +17,7 @@
 package com.google.devtools.j2objc.gen;
 
 import com.google.devtools.j2objc.GenerationTest;
-
-import org.eclipse.jdt.core.dom.Statement;
+import com.google.devtools.j2objc.ast.Statement;
 
 import java.util.List;
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/ASTFactoryTest.java
Patch:
@@ -40,7 +40,8 @@ public class ASTFactoryTest extends GenerationTest {
   protected void setUp() throws IOException {
     super.setUp();
     // Compile any file to initialize Types instance.
-    unit = translateType("Example", "public class Example {}");
+    unit = compileType("Example", "public class Example {}");
+    Types.initialize(unit);
     ast = unit.getAST();
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -17,8 +17,7 @@
 package com.google.devtools.j2objc.translate;
 
 import com.google.devtools.j2objc.GenerationTest;
-
-import org.eclipse.jdt.core.dom.Statement;
+import com.google.devtools.j2objc.ast.Statement;
 
 import java.io.IOException;
 import java.util.List;

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -51,7 +51,6 @@
 import com.google.devtools.j2objc.types.BindingMapBuilderTest;
 import com.google.devtools.j2objc.types.HeaderImportCollectorTest;
 import com.google.devtools.j2objc.types.ImplementationImportCollectorTest;
-import com.google.devtools.j2objc.types.ModifiedTypeBindingTest;
 import com.google.devtools.j2objc.types.RenamedTypeBindingTest;
 import com.google.devtools.j2objc.util.BindingUtilTest;
 import com.google.devtools.j2objc.util.DeadCodeMapTest;
@@ -95,7 +94,6 @@ public class SmallTests {
     InnerClassExtractorTest.class,
     JavaToIOSMethodTranslatorTest.class,
     LineDirectivesTest.class,
-    ModifiedTypeBindingTest.class,
     NameTableTest.class,
     NilCheckResolverTest.class,
     ObjectiveCHeaderGeneratorTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/FileProcessor.java
Patch:
@@ -207,7 +207,7 @@ protected void processSource(String path, String source) {
     ticker.tick("Parsing file");
 
     ErrorUtil.setCurrentFileName(path);
-    NameTable.initialize(unit);
+    NameTable.initialize();
     Types.initialize(unit);
     processUnit(path, source, unit, ticker);
     NameTable.cleanup();
@@ -247,7 +247,7 @@ public void handleParsedUnit(String path, CompilationUnit unit) {
   private void processUnit(String path, CompilationUnit unit, TimeTracker ticker) {
     try {
       ErrorUtil.setCurrentFileName(path);
-      NameTable.initialize(unit);
+      NameTable.initialize();
       Types.initialize(unit);
       processUnit(path, Files.toString(new File(path), Options.getCharset()), unit, ticker);
       NameTable.cleanup();

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -77,7 +77,7 @@ public static void generate(String fileName, String source, CompilationUnit unit
 
   protected ObjectiveCHeaderGenerator(String fileName, String source, CompilationUnit unit) {
     super(fileName, source, unit, false);
-    mainTypeName = NameTable.getMainTypeName(unit.jdtNode(), fileName);
+    mainTypeName = NameTable.getMainTypeFullName(unit);
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -817,7 +817,7 @@ private String extractNativeMethodBody(MethodDeclaration m) {
 
   private void printImports(CompilationUnit node) {
     ImplementationImportCollector collector = new ImplementationImportCollector();
-    collector.collect(node, getSourceFileName());
+    collector.collect(node);
     Set<Import> imports = collector.getImports();
 
     if (!imports.isEmpty()) {

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -76,8 +76,8 @@ public class ImplementationImportCollector extends TreeVisitor {
   private Set<Import> imports = Sets.newLinkedHashSet();
   private Set<Import> declaredTypes = Sets.newHashSet();
 
-  public void collect(CompilationUnit unit, String sourceFileName) {
-    mainTypeName = NameTable.getMainTypeName(unit.jdtNode(), sourceFileName);
+  public void collect(CompilationUnit unit) {
+    mainTypeName = NameTable.getMainTypeFullName(unit);
     run(unit);
     for (Import imp : declaredTypes) {
       imports.remove(imp);

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -283,7 +283,7 @@ public void testMethodVarInNestedAnonymousClass() throws IOException {
 
     // Verify constructor takes both outer field and var.
     ObjectiveCImplementationGenerator.generate(
-        "Test.java", TreeConverter.convertCompilationUnit(unit), source);
+        "Test.java", TreeConverter.convertCompilationUnit(unit, "Test"), source);
     String translation = getTranslatedFile("Test.m");
     assertTranslation(translation,
         "r2 = [[[Test_$1_$1 alloc] initWithJavaLangInteger:i] autorelease]");
@@ -316,7 +316,7 @@ public void testMethodVarInAnonymousClass() throws IOException {
 
     // Verify method var is passed to constructor.
     ObjectiveCImplementationGenerator.generate(
-        "Test.java", TreeConverter.convertCompilationUnit(unit), source);
+        "Test.java", TreeConverter.convertCompilationUnit(unit, "Test"), source);
     String translation = getTranslatedFile("Test.m");
     assertTranslation(translation, "r = [[[Test_$1 alloc] initWithJavaLangInteger:i] autorelease]");
   }
@@ -349,7 +349,7 @@ public void testMethodVarInSwitch() throws IOException {
 
     // Verify method var is passed to constructor.
     ObjectiveCImplementationGenerator.generate(
-        "Test.java", TreeConverter.convertCompilationUnit(unit), source);
+        "Test.java", TreeConverter.convertCompilationUnit(unit, "Test"), source);
     String translation = getTranslatedFile("Test.m");
     assertTranslation(translation,
         "r = [[[Test_$1 alloc] initWithJavaLangInteger:i] autorelease]");

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/ReferenceGraph.java
Patch:
@@ -26,7 +26,6 @@
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.j2objc.annotations.WeakOuter;
 
-import org.eclipse.jdt.core.dom.IAnnotationBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import org.eclipse.jdt.core.dom.Modifier;

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -26,7 +26,6 @@
 import com.google.devtools.j2objc.ast.Annotation;
 import com.google.devtools.j2objc.ast.AnnotationTypeDeclaration;
 import com.google.devtools.j2objc.ast.AnnotationTypeMemberDeclaration;
-import com.google.devtools.j2objc.ast.BodyDeclaration;
 import com.google.devtools.j2objc.ast.CompilationUnit;
 import com.google.devtools.j2objc.ast.EnumConstantDeclaration;
 import com.google.devtools.j2objc.ast.EnumDeclaration;
@@ -42,7 +41,6 @@
 import com.google.devtools.j2objc.types.IOSMethod;
 import com.google.devtools.j2objc.types.Import;
 import com.google.devtools.j2objc.types.Types;
-import com.google.devtools.j2objc.util.ASTUtil;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.UnicodeUtils;

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -50,7 +50,6 @@
 import com.google.devtools.j2objc.types.ImplementationImportCollector;
 import com.google.devtools.j2objc.types.Import;
 import com.google.devtools.j2objc.types.Types;
-import com.google.devtools.j2objc.util.ASTUtil;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.ErrorUtil;
 import com.google.devtools.j2objc.util.NameTable;
@@ -62,7 +61,6 @@
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import org.eclipse.jdt.core.dom.Modifier;
 
-import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSegmentedHeaderGenerator.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.devtools.j2objc.ast.CompilationUnit;
 import com.google.devtools.j2objc.types.HeaderImportCollector;
 import com.google.devtools.j2objc.types.Import;
-import com.google.devtools.j2objc.util.ASTUtil;
 import com.google.devtools.j2objc.util.NameTable;
 
 import java.util.Collections;

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -39,7 +39,6 @@
 import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.IOSParameter;
 import com.google.devtools.j2objc.types.Types;
-import com.google.devtools.j2objc.util.ASTUtil;
 import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -51,11 +51,11 @@
 import com.google.devtools.j2objc.ast.Initializer;
 import com.google.devtools.j2objc.ast.InstanceofExpression;
 import com.google.devtools.j2objc.ast.LabeledStatement;
+import com.google.devtools.j2objc.ast.MethodDeclaration;
+import com.google.devtools.j2objc.ast.MethodInvocation;
 import com.google.devtools.j2objc.ast.Name;
 import com.google.devtools.j2objc.ast.NullLiteral;
 import com.google.devtools.j2objc.ast.NumberLiteral;
-import com.google.devtools.j2objc.ast.MethodDeclaration;
-import com.google.devtools.j2objc.ast.MethodInvocation;
 import com.google.devtools.j2objc.ast.ParenthesizedExpression;
 import com.google.devtools.j2objc.ast.PostfixExpression;
 import com.google.devtools.j2objc.ast.PrefixExpression;

File: translator/src/main/java/com/google/devtools/j2objc/translate/StaticVarRewriter.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.google.devtools.j2objc.translate;
 
-import com.google.devtools.j2objc.types.IOSMethod;
 import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.NodeCopier;
 import com.google.devtools.j2objc.types.PointerTypeBinding;
@@ -32,7 +31,6 @@
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import org.eclipse.jdt.core.dom.MethodInvocation;
-import org.eclipse.jdt.core.dom.Modifier;
 import org.eclipse.jdt.core.dom.Name;
 import org.eclipse.jdt.core.dom.PostfixExpression;
 import org.eclipse.jdt.core.dom.PrefixExpression;

File: translator/src/main/java/com/google/devtools/j2objc/util/ErrorReportingASTVisitor.java
Patch:
@@ -19,7 +19,6 @@
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ASTVisitor;
 import org.eclipse.jdt.core.dom.ImportDeclaration;
-import org.eclipse.jdt.core.dom.PackageDeclaration;
 
 import java.util.Stack;
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -282,7 +282,7 @@ protected String constructorDeclaration(MethodDeclaration m, boolean isInner) {
     assert m.isConstructor();
     StringBuffer sb = new StringBuffer();
     IMethodBinding binding = m.getMethodBinding();
-    String baseDeclaration = "- (id)init";
+    String baseDeclaration = "- (instancetype)init";
     if (isInner) {
       baseDeclaration += NameTable.getFullName(binding.getDeclaringClass());
     }
@@ -297,7 +297,7 @@ protected String constructorDeclaration(MethodDeclaration m, boolean isInner) {
    */
   protected String annotationConstructorDeclaration(ITypeBinding annotation) {
     StringBuffer sb = new StringBuffer();
-    sb.append("- (id)init");
+    sb.append("- (instancetype)init");
     IMethodBinding[] members = BindingUtil.getSortedAnnotationMembers(annotation);
     for (int i = 0; i < members.length; i++) {
       if (i == 0) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGeneratorTest.java
Patch:
@@ -130,7 +130,7 @@ public void testOverriddenGenericConstructor() throws IOException {
     addSourceFile("class A<T> { A(T t) {} }", "A.java");
     String translation = translateSourceFile(
         "class B extends A<String> { B(String s) { super(s); } }", "B", "B.h");
-    assertTranslation(translation, "- (id)initWithNSString:(NSString *)s;");
+    assertTranslation(translation, "- (instancetype)initWithNSString:(NSString *)s;");
     assertNotInTranslation(translation, "initWithId");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -590,7 +590,7 @@ public void testDocComments() throws IOException {
     assertTranslation(translation, "@brief Field javadoc.");
     assertTranslatedLines(translation,
         "@brief Method javadoc.",
-        "@param foo  Unused.",
+        "@param foo Unused.",
         "@return always false.");
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -137,6 +137,7 @@ protected CompilationUnit translateType(String name, String source) {
    */
   protected CompilationUnit compileType(String name, String source) {
     int errors = ErrorUtil.errorCount();
+    parser.setEnableDocComments(Options.docCommentsEnabled());
     CompilationUnit unit = parser.parse(name, source);
     assertEquals(errors, ErrorUtil.errorCount());
     return unit;

File: translator/src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -347,7 +347,7 @@ public static void help(boolean errorExit) {
 
   private static List<String> getPathArgument(String argument) {
     List<String> entries = Lists.newArrayList();
-    for (String entry : Splitter.on(':').split(argument)) {
+    for (String entry : Splitter.on(File.pathSeparatorChar).split(argument)) {
       if (new File(entry).exists()) {  // JDT fails with bad path entries.
         entries.add(entry);
       } else if (entry.startsWith("~/")) {

File: translator/src/main/java/com/google/devtools/j2objc/util/BindingUtil.java
Patch:
@@ -98,7 +98,7 @@ public static boolean hasOuterContext(ITypeBinding type) {
     }
     // Local types can't be declared static, but if the declaring method is
     // static then the local type is effectively static.
-    IMethodBinding declaringMethod = type.getDeclaringMethod();
+    IMethodBinding declaringMethod = type.getTypeDeclaration().getDeclaringMethod();
     if (declaringMethod != null) {
       return !BindingUtil.isStatic(declaringMethod);
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/CopyAllFieldsWriter.java
Patch:
@@ -70,7 +70,7 @@ public void endVisit(TypeDeclaration node) {
     String typeName = NameTable.getFullName(type);
     IOSMethod iosMethod = IOSMethod.create(
         String.format("%s copyAllFieldsTo:(%s *)other", typeName, typeName));
-    int modifiers = Modifier.PUBLIC | 0x1000;  // Modifier.SYNTHETIC.
+    int modifiers = Modifier.PUBLIC | BindingUtil.ACC_SYNTHETIC;
     IOSMethodBinding methodBinding = IOSMethodBinding.newMethod(
         iosMethod, modifiers, Types.resolveJavaType("void"), type);
     methodBinding.addParameter(type);

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -215,7 +215,7 @@ private void addReleaseStatements(MethodDeclaration method, List<IVariableBindin
   private MethodDeclaration buildFinalizeMethod(AST ast, ITypeBinding declaringClass,
         List<IVariableBinding> fields) {
     ITypeBinding voidType = Types.mapTypeName("void");
-    int modifiers = Modifier.PUBLIC | 0x1000;  // Modifier.SYNTHETIC.
+    int modifiers = Modifier.PUBLIC | BindingUtil.ACC_SYNTHETIC;
     GeneratedMethodBinding binding = GeneratedMethodBinding.newMethod(
         destructorName, modifiers, voidType, declaringClass);
     MethodDeclaration method = ASTFactory.newMethodDeclaration(ast, binding);

File: translator/src/main/java/com/google/devtools/j2objc/translate/Functionizer.java
Patch:
@@ -75,8 +75,6 @@ public class Functionizer extends ErrorReportingASTVisitor {
   // Map each functionalized method to its function.
   private Map<IMethodBinding, IMethodBinding> functionMap = Maps.newHashMap();
 
-  private static final int SYNTHETIC = 0x1000;
-
   @Override
   public boolean visit(AnnotationTypeDeclaration node) {
     return false;
@@ -155,7 +153,8 @@ public void endVisit(MethodInvocation node) {
           !BindingUtil.isStatic(enclosingBinding) && needsReceiver) {
         // Add self parameter.
         GeneratedVariableBinding selfParam = new GeneratedVariableBinding(NameTable.SELF_NAME,
-            binding.getModifiers() | SYNTHETIC, declaringClass, false, true, declaringClass, null);
+            binding.getModifiers() | BindingUtil.ACC_SYNTHETIC, declaringClass, false, true,
+            declaringClass, null);
         args.add(0, ASTFactory.newSimpleName(node.getAST(), selfParam));
       } else {
         boolean needsInstanceParam = isInstance && needsReceiver;

File: jre_emul/apache_harmony/classlib/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java
Patch:
@@ -82,6 +82,7 @@ protected void setUp() throws Exception {
 	protected void tearDown() throws Exception {
         CallVerificationStack.getInstance().clear();
 		Locale.setDefault(oldLocale);
+        LogManager.getLogManager().reset();
         super.tearDown();
 	}
 

File: translator/src/main/java/com/google/devtools/j2objc/DeadCodeProcessor.java
Patch:
@@ -77,7 +77,7 @@ private static DeadCodeMap loadDeadCodeMap() {
     File file = Options.getProGuardUsageFile();
     if (file != null) {
       try {
-        return ProGuardUsageParser.parse(Files.newReaderSupplier(file, Charset.defaultCharset()));
+        return ProGuardUsageParser.parse(Files.asCharSource(file, Charset.defaultCharset()));
       } catch (IOException e) {
         throw new AssertionError(e);
       }

File: jre_emul/android/libcore/luni/src/main/java/java/util/regex/Matcher.java
Patch:
@@ -666,7 +666,7 @@ private native boolean findImpl(int start, boolean continuing) /*-[
                            usingBlock:^(NSTextCheckingResult *match,
                                         NSMatchingFlags flags,
                                         BOOL *stop) {
-        if (match.range.location < start) {
+        if (match.range.location < (NSUInteger) start) {
           *stop = NO;
         } else {
           self->progressFlags_ = flags;
@@ -731,7 +731,7 @@ private native boolean matchesImpl() /*-[
                       withInt:(int) (matchRange.location + matchRange.length)];
       }
       NSRange range = [match range];
-      return range.location == self->regionStart__ && range.length == length;
+      return range.location == (NSUInteger) self->regionStart__ && range.length == length;
     ]-*/;
 
     private native boolean requireEndImpl() /*-[

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Posix.java
Patch:
@@ -862,9 +862,9 @@ public native FileDescriptor[] pipe() throws ErrnoException /*-[
   ]-*/;
 
   public native int poll(StructPollfd[] fds, int timeoutMs) throws ErrnoException /*-[
-    nfds_t count = (nfds_t) [fds count];
+    unsigned count = (unsigned) [fds count];
     struct pollfd *pollFds = calloc(count, sizeof(struct pollfd));
-    for (int i = 0; i < count; i++) {
+    for (unsigned i = 0; i < count; i++) {
       LibcoreIoStructPollfd *javaPollFd = [fds objectAtIndex:i];
       pollFds[i].fd = javaPollFd->fd_->descriptor_;
       pollFds[i].events = javaPollFd->events_;
@@ -874,7 +874,7 @@ public native int poll(StructPollfd[] fds, int timeoutMs) throws ErrnoException
       free(pollFds);
       [LibcoreIoPosix throwErrnoExceptionWithNSString:@"poll" withInt:rc];
     }
-    for (int i = 0; i < count; i++) {
+    for (unsigned i = 0; i < count; i++) {
       LibcoreIoStructPollfd *javaPollFd = [fds objectAtIndex:i];
       javaPollFd->revents_ = pollFds[i].revents;
     }

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/AbstractCollection.java
Patch:
@@ -357,7 +357,7 @@ public native <T> T[] toArray(T[] contents) /*-[
         @throw exception;
         return nil;
       }
-      if ([contents count] < [self size]) {
+      if ([contents count] < (unsigned) [self size]) {
         contents =
             [IOSObjectArray arrayWithLength:[self size]
                                        type:[[contents getClass] getComponentType]];

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Posix.java
Patch:
@@ -175,7 +175,7 @@ static BOOL fillInetSocketAddress(int rc, JavaNetInetSocketAddress *srcAddress,
 
   static id doStat(NSString *path, BOOL isLstat) {
     if (!path) {
-      return NO;
+      return nil;
     }
     const char* cpath = [path UTF8String];
     struct stat sb;
@@ -1255,7 +1255,7 @@ public native StructStat stat(String path) throws ErrnoException /*-[
 
   public native StructStatVfs statvfs(String path) throws ErrnoException /*-[
     if (!path) {
-      return NO;
+      return nil;
     }
     const char* cpath = [path UTF8String];
     struct statvfs sb;

File: jre_emul/Classes/com/google/j2objc/net/IosHttpURLConnection.java
Patch:
@@ -318,10 +318,10 @@ private native void makeSynchronousRequest() throws IOException /*-[
     NSData *responseData = [NSURLConnection sendSynchronousRequest:request
                                                  returningResponse:&response
                                                              error:&error];
-    self->responseCode_ = response ? [response statusCode] : [error code];
+    self->responseCode_ = (int) (response ? [response statusCode] : [error code]);
     self->responseMessage_ =
         [ComGoogleJ2objcNetIosHttpURLConnection getResponseStatusTextWithInt:self->responseCode_];
-    self->contentLength_ = [responseData length];
+    self->contentLength_ = (int) ([responseData length]);
 
     if (error || [response statusCode] >= JavaNetHttpURLConnection_HTTP_BAD_REQUEST) {
       if (responseData) {

File: jre_emul/Classes/com/google/j2objc/security/IosMD5MessageDigest.java
Patch:
@@ -52,7 +52,7 @@ protected void engineUpdate(byte[] input, int offset, int len) {
   protected native byte[] engineDigest() /*-[
     IOSByteArray *bytes = [buffer_ toByteArray];
     unsigned char digest[CC_MD5_DIGEST_LENGTH];
-    CC_MD5(bytes->buffer_, [bytes count], digest);
+    CC_MD5(bytes->buffer_, (unsigned) [bytes count], digest);
     return [IOSByteArray arrayWithBytes:(const char *) digest count:CC_MD5_DIGEST_LENGTH];
   ]-*/;
 

File: jre_emul/Classes/java/lang/Runtime.java
Patch:
@@ -34,7 +34,7 @@ public static Runtime getRuntime() {
   }
 
   public native int availableProcessors() /*-[
-    return [[NSProcessInfo processInfo] processorCount];
+    return (int) [[NSProcessInfo processInfo] processorCount];
   ]-*/;
 
   public native void exit(int status) /*-[

File: jre_emul/android/libcore/luni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -280,7 +280,7 @@ public static InvocationHandler getInvocationHandler(Object proxy)
     private static native Class generateProxy(String name, Class[] interfaces,
         ClassLoader loader) throws IllegalArgumentException /*-[
       Class proxyClass = objc_allocateClassPair([JavaLangReflectProxy class], [name UTF8String], 0);
-      unsigned interfaceCount = [interfaces count];
+      NSUInteger interfaceCount = [interfaces count];
       for (unsigned i = 0; i < interfaceCount; i++) {
         IOSClass *intrface = (IOSClass *) [interfaces objectAtIndex:i];
         if (![intrface isInterface]) {

File: jre_emul/android/libcore/luni/src/main/java/java/util/zip/Deflater.java
Patch:
@@ -281,8 +281,8 @@ private native int deflateImpl(byte[] buf, int offset, int byteCount, long handl
           @throw AUTORELEASE([[JavaUtilZipDataFormatException alloc] init]);
       }
 
-      int bytesRead = zStream->next_in - initialNextIn;
-      int bytesWritten = zStream->next_out - initialNextOut;
+      int bytesRead = (int) (zStream->next_in - initialNextIn);
+      int bytesWritten = (int) (zStream->next_out - initialNextOut);
 
       self->inRead_ += bytesRead;
       return bytesWritten;
@@ -361,7 +361,7 @@ public synchronized int getAdler() {
 
     private native int getAdlerImpl(long handle) /*-[
         z_stream *zStream = (z_stream*) handle;
-        return zStream->adler;
+        return (int) zStream->adler;
     ]-*/;
 
     /**

File: jre_emul/android/libcore/luni/src/main/java/java/util/zip/Inflater.java
Patch:
@@ -171,7 +171,7 @@ public synchronized int getAdler() {
 
     private native int getAdlerImpl(long handle) /*-[
         z_stream *zStream = (z_stream*) handle;
-        return zStream->adler;
+        return (int) zStream->adler;
     ]-*/;
 
     /**
@@ -309,8 +309,8 @@ private native int inflateImpl(byte[] buf, int offset, int byteCount, long handl
           @throw AUTORELEASE([[JavaUtilZipDataFormatException alloc] init]);
       }
 
-      int bytesRead = zStream->next_in - initialNextIn;
-      int bytesWritten = zStream->next_out - initialNextOut;
+      int bytesRead = (int) (zStream->next_in - initialNextIn);
+      int bytesWritten = (int) (zStream->next_out - initialNextOut);
 
       self->inRead_ += bytesRead;
       return bytesWritten;

File: jre_emul/android/libcore/luni/src/main/java/libcore/icu/ICU.java
Patch:
@@ -287,6 +287,6 @@ public static native String getCurrencySymbol(String localeId) /*-[
     public static native int getCurrencyFractionDigits(String currencyCode) /*-[
       NSNumberFormatter *formatter = AUTORELEASE([[NSNumberFormatter alloc] init]);
       [formatter setCurrencyCode:currencyCode];
-      return [formatter maximumFractionDigits];
+      return (int) [formatter maximumFractionDigits];
     ]-*/;
 }

File: translator/src/main/java/com/google/devtools/j2objc/gen/SourceBuilder.java
Patch:
@@ -191,7 +191,7 @@ public void reset() {
   }
 
   public void syncLineNumbers(ASTNode node) {
-    if (emitLineDirectives) {
+    if (emitLineDirectives && unit != null) {
       int position = node.getStartPosition();
       if (position != -1) {
         int sourceLine = unit.getLineNumber(position);

File: translator/src/main/java/com/google/devtools/j2objc/gen/SourceBuilder.java
Patch:
@@ -196,7 +196,7 @@ public void syncLineNumbers(ASTNode node) {
       if (position != -1) {
         int sourceLine = unit.getLineNumber(position);
         if (currentLine != sourceLine) {
-          buffer.append(String.format("#line %d\n", sourceLine));
+          buffer.append(String.format("\n#line %d\n", sourceLine));
           currentLine = sourceLine;
         }
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ArrayRewriter.java
Patch:
@@ -147,7 +147,8 @@ private void rewriteVarargs(IMethodBinding method, List<Expression> args, AST as
       if (lastArgType.isNullType()) {
         return;
       }
-      if (lastParam.getDimensions() == lastArgType.getDimensions()) {
+      if (lastParam.getDimensions() == lastArgType.getDimensions() &&
+          lastParam.getElementType().isPrimitive() == lastArgType.getElementType().isPrimitive()) {
         // Last argument is already an array.
         return;
       }

File: translator/src/main/java/com/google/devtools/j2objc/translate/ArrayRewriter.java
Patch:
@@ -144,6 +144,9 @@ private void rewriteVarargs(IMethodBinding method, List<Expression> args, AST as
     int varargsSize = args.size() - paramTypes.length + 1;
     if (varargsSize == 1) {
       ITypeBinding lastArgType = Types.getTypeBinding(args.get(args.size() - 1));
+      if (lastArgType.isNullType()) {
+        return;
+      }
       if (lastParam.getDimensions() == lastArgType.getDimensions()) {
         // Last argument is already an array.
         return;

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -28,6 +28,7 @@
 import com.google.devtools.j2objc.gen.StatementGeneratorTest;
 import com.google.devtools.j2objc.translate.ASTFactoryTest;
 import com.google.devtools.j2objc.translate.AnonymousClassConverterTest;
+import com.google.devtools.j2objc.translate.ArrayRewriterTest;
 import com.google.devtools.j2objc.translate.AutoboxerTest;
 import com.google.devtools.j2objc.translate.ComplexExpressionExtractorTest;
 import com.google.devtools.j2objc.translate.CopyAllFieldsWriterTest;
@@ -73,6 +74,7 @@ public class SmallTests {
     AnonymousClassConverterTest.class,
     ArrayAccessTest.class,
     ArrayCreationTest.class,
+    ArrayRewriterTest.class,
     AutoboxerTest.class,
     BindingMapBuilderTest.class,
     BindingUtilTest.class,

File: jre_emul/Classes/com/google/j2objc/net/IosHttpHandler.java
Patch:
@@ -31,9 +31,7 @@ public class IosHttpHandler extends URLStreamHandler {
 
   @Override
   protected URLConnection openConnection(URL url) throws IOException {
-    URLConnection connection = new IosHttpURLConnection(url);
-    connection.connect();
-    return connection;
+    return new IosHttpURLConnection(url);
   }
 
   @Override

File: testing/junit-ext/src/java/com/google/j2objc/testing/JUnitTestRunner.java
Patch:
@@ -108,9 +108,6 @@ public JUnitTestRunner(PrintStream out) {
   }
 
   public static int main(String[] args) {
-    // This is a workaround for b/10914294.
-    Class voidClass = Void.TYPE;
-
     // Create JUnit test runner.
     JUnitTestRunner runner = new JUnitTestRunner();
     runner.loadPropertiesFromResource(PROPERTIES_FILE_NAME);

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -613,7 +613,8 @@ public void testRetainedLocalRef() throws IOException {
     		"[[[ComGoogleJ2objcUtilScopedLocalRef alloc] " +
     		"initWithId:NSString_get_CASE_INSENSITIVE_ORDER_()] autorelease];");
     assertTranslation(translation,
-        "return [nil_chk(c->var_) compareWithId:s1 withId:s2] == 0;");
+        "return [((id<JavaUtilComparator>) nil_chk(((id<JavaUtilComparator>) " +
+        "check_protocol_cast(c->var_, @protocol(JavaUtilComparator))))) compareWithId:s1 withId:s2] == 0;");
     assertTranslation(translation, "ComGoogleJ2objcUtilScopedLocalRef *thing = " +
     		"[[[ComGoogleJ2objcUtilScopedLocalRef alloc] initWithId:t] autorelease];");
     assertTranslation(translation,

File: jre_emul/Classes/sun/misc/Unsafe.java
Patch:
@@ -132,7 +132,7 @@ public native boolean compareAndSwapObject(Object obj, long offset,
       id tmp = *address;
       if (OSAtomicCompareAndSwapPtrBarrier(expectedValue, newValue, (void * volatile *) address)) {
         [*address retain];
-        [tmp release];
+        [tmp autorelease];
         return YES;
       }
       return NO;
@@ -476,7 +476,7 @@ public native boolean compareAndSwapArrayObject(Object array, int index,
       if (OSAtomicCompareAndSwapPtrBarrier(expectedValue, newValue,
           (void * volatile *) (buffer + index))) {
         [buffer[index] retain];
-        [tmp release];
+        [tmp autorelease];
         return YES;
       }
       return NO;

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -165,6 +165,7 @@ private void initializeCommonJavaTypes() {
   private void initializePrimitiveArray(String javaTypeName, String iosTypeName) {
     ITypeBinding javaType = ast.resolveWellKnownType(javaTypeName);
     IOSTypeBinding iosType = mapIOSType(IOSTypeBinding.newUnmappedClass(iosTypeName));
+    iosType.setHeader("IOSPrimitiveArray");
     arrayBindingMap.put(javaType, iosType);
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1304,7 +1304,7 @@ public void testPartialArrayCreation2D() throws IOException {
     String translation = translateSourceFile(
         "class Test { void foo() { char[][] c = new char[3][]; } }", "Test", "Test.m");
     assertTranslation(translation, "#include \"IOSObjectArray.h\"");
-    assertTranslation(translation, "#include \"IOSCharArray.h\"");
+    assertTranslation(translation, "#include \"IOSPrimitiveArray.h\"");
     assertTranslation(translation,
         "IOSObjectArray *c = [IOSObjectArray arrayWithLength:3 type:[IOSCharArray iosClass]]");
   }

File: translator/src/test/java/com/google/devtools/j2objc/types/ImplementationImportCollectorTest.java
Patch:
@@ -65,15 +65,15 @@ public void testBooleanArrayImport() throws IOException {
     addSourceFile("class A { boolean[] b; }", "A.java");
     String translation = translateSourceFile(
         "class B { int test() { return new A().b.length; }}", "B", "B.m");
-    assertTranslation(translation, "#include \"IOSBooleanArray.h\"");
+    assertTranslation(translation, "#include \"IOSPrimitiveArray.h\"");
   }
 
   public void testPrimitiveArrayAsParameterImport() throws IOException {
     addSourceFile(
         "class B { protected char bits[]; public B(char[] bits_) { bits = bits_;} }", "B.java");
     String translation = translateSourceFile(
         "class A { public static final B test = new B(new char[]{'a', 'b'}); }", "A", "A.m");
-    assertTranslation(translation, "#include \"IOSCharArray.h\"");
+    assertTranslation(translation, "#include \"IOSPrimitiveArray.h\"");
   }
 
   public void testObjectArrayImport() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -350,10 +350,11 @@ protected void generate(EnumDeclaration node) {
     printStaticInitFunction(node, methods);
     printf("\nFOUNDATION_EXPORT %s *%s_values[];\n", typeName, typeName);
     for (EnumConstantDeclaration constant : constants) {
+      String varName = NameTable.getStaticVarName(Types.getVariableBinding(constant.getName()));
       String valueName = constant.getName().getIdentifier();
       printf("\n#define %s_%s %s_values[%s_%s]\n",
-             typeName, valueName, typeName, bareTypeName, valueName);
-      printf("J2OBJC_STATIC_FIELD_GETTER(%s, %s, %s *)\n", typeName, valueName, typeName);
+             typeName, varName, typeName, bareTypeName, valueName);
+      printf("J2OBJC_STATIC_FIELD_GETTER(%s, %s, %s *)\n", typeName, varName, typeName);
     }
     printStaticFields(fields, /* isInterface */ false);
     printFieldSetters(enumType, fields);

File: cycle_finder/src/main/java/com/google/devtools/cyclefinder/Options.java
Patch:
@@ -54,7 +54,7 @@ class Options {
   private String bootclasspath;
   private List<String> whitelistFiles = Lists.newArrayList();
   private List<String> sourceFiles = Lists.newArrayList();
-  private static String fileEncoding = System.getProperty("file.encoding", "ISO-8859-1");
+  private String fileEncoding = System.getProperty("file.encoding", "ISO-8859-1");
 
   public List<String> getSourceFiles() {
     return sourceFiles;
@@ -101,7 +101,7 @@ private void addManifest(String manifestFile) throws IOException {
     }
   }
 
-  public static String fileEncoding() {
+  public String fileEncoding() {
     return fileEncoding;
   }
 
@@ -149,7 +149,7 @@ public static Options parse(String[] args) throws IOException {
         if (++nArg == args.length) {
           usage("-encoding requires an argument");
         }
-        fileEncoding = args[nArg];
+        options.fileEncoding = args[nArg];
       } else if (arg.startsWith("-h") || arg.equals("--help")) {
         help(false);
       } else if (arg.startsWith("-")) {

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Memory.java
Patch:
@@ -73,7 +73,6 @@ typedef struct __attribute__ ((packed)) { \
 
       PUT_UNALIGNED(short, short);
       PUT_UNALIGNED(int, int);
-      PUT_UNALIGNED(long long, long);
 
       // Byte-swap 2 short values packed in an int.
       static inline int bswap_2x16(int v) {

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -33,6 +33,7 @@
 import com.google.devtools.j2objc.translate.CopyAllFieldsWriterTest;
 import com.google.devtools.j2objc.translate.DeadCodeEliminatorTest;
 import com.google.devtools.j2objc.translate.DestructorGeneratorTest;
+import com.google.devtools.j2objc.translate.EnhancedForRewriterTest;
 import com.google.devtools.j2objc.translate.GwtConverterTest;
 import com.google.devtools.j2objc.translate.InitializationNormalizerTest;
 import com.google.devtools.j2objc.translate.InnerClassExtractorTest;
@@ -80,6 +81,7 @@ public class SmallTests {
     DeadCodeEliminatorTest.class,
     DeadCodeMapTest.class,
     DestructorGeneratorTest.class,
+    EnhancedForRewriterTest.class,
     ErrorReportingASTVisitorTest.class,
     GwtConverterTest.class,
     HeaderImportCollectorTest.class,

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/Posix.java
Patch:
@@ -167,7 +167,7 @@ static BOOL fillInetSocketAddress(int rc, JavaNetInetSocketAddress *srcAddress,
     if (!sender) {
       return NO;
     }
-    srcAddress->addr_ = sender;
+    srcAddress->addr_ = RETAIN_(sender);
     srcAddress->port_ = port;
     return YES;
  }
@@ -266,7 +266,7 @@ static id doStat(NSString *path, BOOL isLstat) {
   static BOOL inetAddressToSockaddrImpl(JavaNetInetAddress *inetAddress, int port,
       struct sockaddr_storage *ss, socklen_t *sa_len, BOOL map) {
     memset(ss, 0, sizeof(struct sockaddr_storage));
-    sa_len = 0;
+    *sa_len = 0;
     nil_chk(inetAddress);
 
     // Get the address family.

File: jre_emul/Classes/java/lang/System.java
Patch:
@@ -176,6 +176,7 @@ private static native void setSystemProperties(Properties props) /*-[
       tmpDir = [tmpDir substringToIndex:iLast];
     }
     [props setPropertyWithNSString:@"java.io.tmpdir" withNSString:tmpDir];
+    [props setPropertyWithNSString:@"java.home" withNSString:[[NSBundle mainBundle] bundlePath]];
   ]-*/;
 
   public static String getProperty(String key) {

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -827,7 +827,7 @@ public static native boolean holdsLock(Object object) /*-[
    * @see java.lang.ClassLoader
    */
   public ClassLoader getContextClassLoader() {
-    return contextClassLoader;
+    return contextClassLoader != null ? contextClassLoader : ClassLoader.getSystemClassLoader();
   }
 
   public void setContextClassLoader(ClassLoader cl) {

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -67,7 +67,6 @@ public class Thread implements Runnable {
   private Object parkBlocker = new Object();
 
   /** Callbacks to run on interruption. */
-  @Weak
   private final List<Runnable> interruptActions = new ArrayList<Runnable>();
 
   private static ThreadGroup systemThreadGroup;
@@ -471,6 +470,7 @@ private void run0(Object arg) throws Throwable {
         throw(t);
       }
     } finally {
+      interruptActions.clear();
       cancelNativeThread();
     }
   }

File: jre_emul/android/libcore/luni/src/main/java/java/util/regex/Matcher.java
Patch:
@@ -717,6 +717,9 @@ private native boolean matchesImpl() /*-[
           [regex firstMatchInString:self->input_
                             options:options
                               range:NSMakeRange(0, length)];
+      if (match == nil) {
+        return NO;
+      }
 
       // Update offsets.
       NSUInteger nGroups = [match numberOfRanges];

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -229,7 +229,7 @@ protected String mappedMethodDeclaration(MethodDeclaration method, IOSMethod map
       IOSParameter first = iosParameters.next();
       SingleVariableDeclaration var = parameters.get(first.getIndex());
       addTypeAndName(first, var, sb);
-      if (iosParameters.hasNext()) {
+      while (iosParameters.hasNext()) {
         sb.append(mappedMethod.isVarArgs() ? ", " : " ");
         IOSParameter next = iosParameters.next();
         sb.append(next.getParameterName());

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/atomic/AtomicMarkableReference.java
Patch:
@@ -171,7 +171,7 @@ private native boolean casPair(Pair<V> cmp, Pair<V> val) /*-[
       id tmp = pair_;
       if (OSAtomicCompareAndSwapPtrBarrier(cmp, val, (void * volatile *) &pair_)) {
         [pair_ retain];
-        [tmp release];
+        [tmp autorelease];
         return YES;
       }
       return NO;

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/atomic/AtomicReference.java
Patch:
@@ -132,7 +132,7 @@ private native boolean compareAndSwapValue(V oldValue, V newValue) /*-[
       id tmp = value_;
       if (OSAtomicCompareAndSwapPtrBarrier(oldValue, newValue, (void * volatile *) &value_)) {
         [value_ retain];
-        [tmp release];
+        [tmp autorelease];
         return YES;
       }
       return NO;

File: jre_emul/android/libcore/luni/src/main/java/libcore/icu/NativeDecimalFormat.java
Patch:
@@ -593,7 +593,9 @@ private static native void setDecimalFormatSymbols(Object nativeFormatter,
       [formatter setNotANumberSymbol:nan];
       [formatter setPercentSymbol:[NSString stringWithCharacters:&percent length:1]];
       [formatter setPerMillSymbol:[NSString stringWithCharacters:&perMill length:1]];
-      [formatter setZeroSymbol:[NSString stringWithCharacters:&zeroDigit length:1]];
+      if (zeroDigit != '0') {
+        [formatter setZeroSymbol:[NSString stringWithCharacters:&zeroDigit length:1]];
+      }
     ]-*/;
 
     /**

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -408,7 +408,7 @@ protected void addSourceFile(String source, String fileName) throws IOException
    */
   protected String getTranslatedFile(String fileName) throws IOException {
     File f = new File(tempDir, fileName);
-    assertTrue(f.exists());
+    assertTrue(fileName + " not generated", f.exists());
     return Files.toString(f, Charset.defaultCharset());
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -374,14 +374,14 @@ public void testPrefixExpression() throws IOException {
   public void testStringConcatenation() throws IOException {
     String translation = translateSourceFile(
         "class Test { void test() { Boolean b = Boolean.TRUE; Integer i = new Integer(3); " +
-        "String s = b + \"foo\" + i; } }", "Test", "test.m");
+        "String s = b + \"foo\" + i; } }", "Test", "Test.m");
     assertTranslation(translation, "NSString *s = [NSString stringWithFormat:@\"%@foo%@\", b, i]");
   }
 
   public void testExtendedOperandsAreUnboxed() throws IOException {
     String translation = translateSourceFile(
         "class Test { void test() { Integer i1 = new Integer(2); Integer i2 = new Integer(3); " +
-        "int i3 = 1 + 2 + i1 + i2; } }", "Test", "test.m");
+        "int i3 = 1 + 2 + i1 + i2; } }", "Test", "Test.m");
     assertTranslation(translation, "int i3 = 1 + 2 + [i1 intValue] + [i2 intValue]");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -225,7 +225,7 @@ public void testInterfaceConstantsIgnored() throws IOException {
 
   public void testStringWithInvalidCppCharacters() throws IOException {
     String source = "class Test { static final String foo = \"\\uffff\"; }";
-    String translation = translateSourceFile(source, "Test", "test.m");
+    String translation = translateSourceFile(source, "Test", "Test.m");
     assertTranslation(translation, "static NSString * Test_foo_;");
     assertTranslation(translation,
         "JreOperatorRetainedAssign(&Test_foo_, nil, [NSString stringWithCharacters:(unichar[]) { "
@@ -234,7 +234,7 @@ public void testStringWithInvalidCppCharacters() throws IOException {
 
   public void testStringConcatWithInvalidCppCharacters() throws IOException {
     String source = "class Test { static final String foo = \"hello\" + \"\\uffff\"; }";
-    String translation = translateSourceFile(source, "Test", "test.m");
+    String translation = translateSourceFile(source, "Test", "Test.m");
     assertTranslation(translation, "static NSString * Test_foo_;");
     assertTranslation(translation,
         "JreOperatorRetainedAssign(&Test_foo_, nil, [NSString stringWithFormat:@\"hello%@\", "

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -434,7 +434,7 @@ public void testTypeCheckInCompareToMethod() throws IOException {
 
   public void testAdditionWithinStringConcatenation() throws IOException {
     String translation = translateSourceFile(
-        "class Test { void test() { String s = 1 + 2.3f + \"foo\"; } }", "Test", "test.m");
+        "class Test { void test() { String s = 1 + 2.3f + \"foo\"; } }", "Test", "Test.m");
     assertTranslation(translation,
         "NSString *s = [NSString stringWithFormat:@\"%ffoo\", 1 + 2.3f]");
   }

File: jre_emul/android/libcore/luni/src/main/java/java/lang/Character.java
Patch:
@@ -4377,7 +4377,7 @@ private static native int toLowerCaseImpl(int codePoint) /*-[
       NSString *s = [[NSString alloc] initWithCharactersNoCopy:(unichar *) &codePoint
                                                         length:1
                                                   freeWhenDone:NO];
-      NSString *s2 = AUTORELEASE([s lowercaseStringWithLocale:[NSLocale currentLocale]]);
+      NSString *s2 = [s lowercaseStringWithLocale:[NSLocale currentLocale]];
       RELEASE_(s);
       return [s2 characterAtIndex:0];
     ]-*/;

File: translator/src/main/java/com/google/devtools/j2objc/translate/ASTFactory.java
Patch:
@@ -17,6 +17,7 @@
 import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.IOSTypeBinding;
 import com.google.devtools.j2objc.types.NodeCopier;
+import com.google.devtools.j2objc.types.PointerTypeBinding;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
 
@@ -385,6 +386,8 @@ public static Type newType(AST ast, ITypeBinding binding) {
       type = ast.newPrimitiveType(PrimitiveType.toCode(binding.getName()));
     } else if (binding.isArray()) {
       type = ast.newArrayType(newType(ast, binding.getComponentType()));
+    } else if (binding instanceof PointerTypeBinding) {
+      type = newType(ast, ((PointerTypeBinding) binding).getPointeeType());
     } else {
       type = ast.newSimpleType(newSimpleName(ast, binding.getErasure()));
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -508,9 +508,6 @@ private Block makeArrayIterationBlock(
       AST ast, Expression expression, ITypeBinding expressionType, IVariableBinding loopVariable,
       Statement loopBody) {
     ITypeBinding componentType = expressionType.getComponentType();
-    if (!componentType.isPrimitive()) {
-      componentType = Types.resolveIOSType("id");
-    }
     ITypeBinding iosArrayType = Types.resolveArrayType(componentType);
     PointerTypeBinding bufferType = new PointerTypeBinding(componentType);
     IVariableBinding arrayVariable = new GeneratedVariableBinding(

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -586,8 +586,8 @@ public void testEnhancedForStatement() throws IOException {
     assertTranslatedLines(result,
         "{",
           "IOSObjectArray *a__ = strings;",
-          "id const *b__ = a__->buffer_;",
-          "id const *e__ = b__ + a__->size_;",
+          "NSString * const *b__ = a__->buffer_;",
+          "NSString * const *e__ = b__ + a__->size_;",
           "while (b__ < e__) {",
             "NSString *string = (*b__++);",
           "}",

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/Executors.java
Patch:
@@ -389,11 +389,12 @@ static final class RunnableAdapter<T> implements Callable<T> {
             this.task = task;
             this.result = result;
         }
-        @AutoreleasePool
         public T call() {
-            task.run();
+            callInternal();
             return result;
         }
+        @AutoreleasePool
+        private void callInternal() { task.run(); }
     }
 
     /**

File: jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/ForkJoinTask.java
Patch:
@@ -1271,6 +1271,7 @@ public boolean exec() {
                 throw new RuntimeException(ex);
             }
         }
+        @AutoreleasePool
         public void run() { invoke(); }
         private static final long serialVersionUID = 2838392045355241008L;
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -228,9 +228,9 @@ public boolean visit(MethodDeclaration node) {
     IMethodBinding binding = Types.getMethodBinding(node);
 
     if (BindingUtil.hasAnnotation(binding, AutoreleasePool.class)) {
-      if (!Types.isVoidType(binding.getReturnType())) {
+      if (!binding.getReturnType().isPrimitive()) {
         J2ObjC.warning(
-            "Warning: Ignoring AutoreleasePool annotation on method with non-void return type");
+            "Warning: Ignoring AutoreleasePool annotation on method with retainable return type");
       } else if (node.getBody() != null) {
         Types.addAutoreleasePool(node.getBody());
       }

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/io/File.java
Patch:
@@ -268,14 +268,12 @@ private String fixSlashes(String origPath) {
                     foundSlash = true;
                 }
             } else {
-                // check for leading slashes before a drive
                 if (pathChar == ':'
                         && uncIndex > 0
                         && (newLength == 2 || (newLength == 3 && newPath[1] == separatorChar))
                         && newPath[0] == separatorChar) {
                     newPath[0] = newPath[newLength - 1];
                     newLength = 1;
-                    // allow trailing slash after drive letter
                     uncIndex = 2;
                 }
                 newPath[newLength++] = pathChar;

File: jre_emul/Classes/com/google/j2objc/security/IosSecurityProvider.java
Patch:
@@ -34,6 +34,9 @@ public class IosSecurityProvider extends Provider {
   public IosSecurityProvider() {
     super(PROVIDER_NAME, 1.0, "J2ObjC's iOS Security Framework-backed provider");
 
+    // Secure random implementation.
+    put("SecureRandom.SHA1PRNG", PREFIX + "IosSecureRandomImpl");
+
     /* === Message Digests === */
     put("MessageDigest.SHA-1", PREFIX + "IosSHAMessageDigest$SHA1");
     put("Alg.Alias.MessageDigest.SHA1", "SHA-1");

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -44,6 +44,7 @@
 import com.google.devtools.j2objc.translate.RewriterTest;
 import com.google.devtools.j2objc.translate.StaticVarRewriterTest;
 import com.google.devtools.j2objc.translate.TypeSorterTest;
+import com.google.devtools.j2objc.translate.UnsequencedExpressionRewriterTest;
 import com.google.devtools.j2objc.types.BindingMapBuilderTest;
 import com.google.devtools.j2objc.types.HeaderImportCollectorTest;
 import com.google.devtools.j2objc.types.ImplementationImportCollectorTest;
@@ -106,7 +107,8 @@ public class SmallTests {
     StatementGeneratorTest.class,
     StaticVarRewriterTest.class,
     TypeSorterTest.class,
-    UnicodeUtilsTest.class
+    UnicodeUtilsTest.class,
+    UnsequencedExpressionRewriterTest.class
   };
 
   public static Test suite() {

File: jre_emul/android/libcore/luni/src/main/java/libcore/icu/NativeDecimalFormat.java
Patch:
@@ -571,7 +571,7 @@ private static native Object open(String pattern, String currencySymbol,
                                                             withChar:perMill
                                                             withChar:zeroDigit];
 
-      return formatter;
+      return AUTORELEASE(formatter);
     ]-*/;
 
     private static native void setDecimalFormatSymbols(Object nativeFormatter,

File: jre_emul/android/libcore/luni/src/main/java/java/lang/reflect/Array.java
Patch:
@@ -382,7 +382,7 @@ public static Object newInstance(Class<?> componentType, int size) throws Negati
      */
     private static native Object createObjectArray(Class<?> componentType, int length)
         throws NegativeArraySizeException /*-[
-      return [[IOSObjectArray alloc] initWithLength:length type:componentType];
+      return [IOSObjectArray arrayWithLength:length type:componentType];
     ]-*/;
 
     /**

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -39,13 +39,10 @@
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.MethodInvocation;
 import org.eclipse.jdt.core.dom.Modifier;
-import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
-import org.eclipse.jdt.core.dom.PrimitiveType;
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.SuperMethodInvocation;
 import org.eclipse.jdt.core.dom.TryStatement;
-import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -253,7 +253,6 @@ private List<IVariableBinding> getOuterPathInherited(ITypeBinding type) {
   }
 
   private List<IVariableBinding> getPathForField(IVariableBinding var) {
-    var = var.getVariableDeclaration();
     List<IVariableBinding> path = getOuterPathInherited(var.getDeclaringClass());
     if (!path.isEmpty()) {
       path.add(var);
@@ -262,7 +261,6 @@ private List<IVariableBinding> getPathForField(IVariableBinding var) {
   }
 
   private List<IVariableBinding> getPathForLocalVar(IVariableBinding var) {
-    var = var.getVariableDeclaration();
     boolean isConstant = var.getConstantValue() != null;
     List<IVariableBinding> path = Lists.newArrayList();
     Scope lastScope = null;

File: jre_emul/android/libcore/luni/src/main/java/java/util/logging/Logger.java
Patch:
@@ -17,6 +17,8 @@
 
 package java.util.logging;
 
+import com.google.j2objc.annotations.Weak;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -98,6 +100,7 @@ public class Logger {
     private volatile String name;
 
     /** The parent logger of this logger. */
+    @Weak
     Logger parent;
 
     /** The logging level of this logger, or null if none is set. */

File: testing/mockito/src/main/java/org/mockito/internal/creation/ios/IosMockMaker.java
Patch:
@@ -233,7 +233,7 @@ void setHandler(InvocationHandler handler) {
         for (unsigned i = 0; i < numArgs; i++) {
           J2ObjcRawValue arg;
           [anInvocation getArgument:&arg atIndex:i + 2];
-          id javaArg = [paramTypes->buffer_[i] boxValue:&arg];
+          id javaArg = [paramTypes->buffer_[i] __boxValue:&arg];
           [args replaceObjectAtIndex:i withObject:javaArg];
         }
         id<JavaLangReflectInvocationHandler> handler = [self getHandler];
@@ -243,7 +243,7 @@ void setHandler(InvocationHandler handler) {
         IOSClass *returnType = [method getReturnType];
         if (returnType != [IOSClass voidClass]) {
           J2ObjcRawValue result;
-          [[method getReturnType] unboxValue:javaResult toRawValue:&result];
+          [[method getReturnType] __unboxValue:javaResult toRawValue:&result];
           [anInvocation setReturnValue:&result];
         }
         return;  // success!

File: jre_emul/android/libcore/luni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -340,7 +340,7 @@ private static native Class generateProxy(String name, Class[] interfaces,
           for (unsigned i = 0; i < numArgs; i++) {
             J2ObjcRawValue arg;
             [anInvocation getArgument:&arg atIndex:i + 2];
-            id javaArg = [paramTypes->buffer_[i] boxValue:&arg];
+            id javaArg = [paramTypes->buffer_[i] __boxValue:&arg];
             [args replaceObjectAtIndex:i withObject:javaArg];
           }
           id javaResult = [handler_ invokeWithId:self
@@ -349,7 +349,7 @@ private static native Class generateProxy(String name, Class[] interfaces,
           IOSClass *returnType = [method getReturnType];
           if (returnType != [IOSClass voidClass]) {
             J2ObjcRawValue result;
-            [[method getReturnType] unboxValue:javaResult toRawValue:&result];
+            [[method getReturnType] __unboxValue:javaResult toRawValue:&result];
             [anInvocation setReturnValue:&result];
           }
           return;  // success!

File: jre_emul/apache_harmony/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/ClassTest.java
Patch:
@@ -431,7 +431,7 @@ public void test_getDeclaredFields() throws Exception {
      */
     public void test_getDeclaredMethods() throws Exception {
         Method[] m = TestClass.class.getDeclaredMethods();
-        assertEquals("Returned incorrect number of methods", 5, m.length);
+        assertEquals("Returned incorrect number of methods", 3, m.length);
         m = SubTestClass.class.getDeclaredMethods();
         assertEquals("Returned incorrect number of methods", 0, m.length);
     }
@@ -494,10 +494,10 @@ public void test_getInterfaces() {
     public void test_getMethods() throws Exception {
         Method[] m = TestClass.class.getMethods();
         assertEquals("Returned incorrect number of methods",
-                     4 + Object.class.getMethods().length, m.length);
+                     2 + Object.class.getMethods().length, m.length);
         m = SubTestClass.class.getMethods();
         assertEquals("Returned incorrect number of sub-class methods",
-                     4 + Object.class.getMethods().length, m.length);
+                     2 + Object.class.getMethods().length, m.length);
         // Number of inherited methods
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/CopyAllFieldsWriter.java
Patch:
@@ -70,8 +70,9 @@ public void endVisit(TypeDeclaration node) {
     String typeName = NameTable.getFullName(type);
     IOSMethod iosMethod = IOSMethod.create(
         String.format("%s copyAllFieldsTo:(%s *)other", typeName, typeName));
+    int modifiers = Modifier.PUBLIC | 0x1000;  // Modifier.SYNTHETIC.
     IOSMethodBinding methodBinding = IOSMethodBinding.newMethod(
-        iosMethod, Modifier.PUBLIC, Types.resolveJavaType("void"), type);
+        iosMethod, modifiers, Types.resolveJavaType("void"), type);
     methodBinding.addParameter(type);
     GeneratedVariableBinding copyParamBinding = new GeneratedVariableBinding(
         "other", 0, type, false, true, null, methodBinding);

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -217,8 +217,9 @@ public void endVisit(SuperMethodInvocation node) {
   private MethodDeclaration buildFinalizeMethod(AST ast, ITypeBinding declaringClass,
         List<IVariableBinding> fields) {
     ITypeBinding voidType = Types.mapTypeName("void");
+    int modifiers = Modifier.PUBLIC | 0x1000;  // Modifier.SYNTHETIC.
     GeneratedMethodBinding binding = GeneratedMethodBinding.newMethod(
-        destructorName, Modifier.PUBLIC, voidType, declaringClass);
+        destructorName, modifiers, voidType, declaringClass);
     MethodDeclaration method = ast.newMethodDeclaration();
     Types.addBinding(method, binding);
     method.setName(ast.newSimpleName(destructorName));

File: translator/src/test/java/com/google/devtools/j2objc/translate/DestructorGeneratorTest.java
Patch:
@@ -44,7 +44,7 @@ public void testFinalizeMethodRenamed() throws IOException {
     translation = getTranslatedFile("Test.m");
     assertTranslation(translation, "- (void)dealloc ");
     assertTranslation(translation, "[super dealloc];");
-    assertFalse(translation.contains("finalize"));
+    assertFalse(translation.contains("- (void)finalize "));
   }
 
   public void testFinalizeMethodRenamedWithGC() throws IOException {
@@ -71,6 +71,6 @@ public void testFinalizeMethodRenamedWithReleasableFields() throws IOException {
     translation = getTranslatedFile("Test.m");
     assertTranslation(translation, "- (void)dealloc ");
     assertTranslation(translation, "[super dealloc];");
-    assertFalse(translation.contains("finalize"));
+    assertFalse(translation.contains("- (void)finalize "));
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -600,7 +600,7 @@ private void printConstantDefines(AbstractTypeDeclaration node) {
           if (l == Long.MIN_VALUE) {
             println("((long long) 0x8000000000000000LL)");
           } else {
-            println(value.toString());
+            println(value.toString() + "LL");
           }
         } else if (value instanceof Integer) {
           long l = ((Integer) value).intValue();

File: guava/sources/com/google/common/util/concurrent/CycleDetectingLockFactory.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.common.collect.MapMaker;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.google.j2objc.annotations.Weak;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -915,7 +916,7 @@ public boolean isAcquiredByCurrentThread() {
   private class CycleDetectingReentrantReadLock
       extends ReentrantReadWriteLock.ReadLock {
 
-    final CycleDetectingReentrantReadWriteLock readWriteLock;
+    @Weak final CycleDetectingReentrantReadWriteLock readWriteLock;
 
     CycleDetectingReentrantReadLock(
         CycleDetectingReentrantReadWriteLock readWriteLock) {
@@ -977,7 +978,7 @@ public void unlock() {
   private class CycleDetectingReentrantWriteLock
       extends ReentrantReadWriteLock.WriteLock {
 
-    final CycleDetectingReentrantReadWriteLock readWriteLock;
+    @Weak final CycleDetectingReentrantReadWriteLock readWriteLock;
 
     CycleDetectingReentrantWriteLock(
         CycleDetectingReentrantReadWriteLock readWriteLock) {

File: guava/sources/com/google/common/util/concurrent/Monitor.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.annotations.Beta;
 import com.google.common.base.Throwables;
 import com.google.common.collect.Lists;
+import com.google.j2objc.annotations.Weak;
 
 import java.util.ArrayList;
 import java.util.concurrent.TimeUnit;
@@ -218,7 +219,7 @@ public final class Monitor {
   @Beta
   public abstract static class Guard {
     
-    final Monitor monitor;
+    @Weak final Monitor monitor;
     final Condition condition;
 
     @GuardedBy("monitor.lock")

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -111,6 +111,7 @@ public boolean visit(AnnotationTypeDeclaration node) {
     ITypeBinding type = Types.getTypeBinding(node);
     addImports(type);
     addDeclaredType(type, false);
+    addImports(Types.resolveIOSType("IOSClass"));
     return true;
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -350,7 +350,7 @@ public void testAnnotationGeneration() throws IOException {
 
     // Test that the annotation was declared as a protocol and a value class.
     assertTranslation(translation, "@protocol FooCompatible < JavaLangAnnotationAnnotation >");
-    assertTranslation(translation, "@interface FooCompatibleImpl : NSObject < FooCompatible >");
+    assertTranslation(translation, "@interface FooCompatible : NSObject < FooCompatible >");
 
     // Verify that the value is defined as a property instead of a method.
     assertTranslation(translation, "@private\n  BOOL fooable;");
@@ -520,7 +520,7 @@ public void testInnerAnnotationGeneration() throws IOException {
         "public @interface Initialize {}}";
     String translation = translateSourceFile(source, "Test", "Test.h");
     assertTranslation(translation, "@protocol Test_Initialize < JavaLangAnnotationAnnotation >");
-    assertTranslation(translation, "@interface Test_InitializeImpl : NSObject < Test_Initialize >");
+    assertTranslation(translation, "@interface Test_Initialize : NSObject < Test_Initialize >");
   }
 
   public void testFieldSetterGeneration() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnonymousClassConverter.java
Patch:
@@ -195,8 +195,8 @@ private GeneratedMethodBinding addDefaultConstructor(
     constructor.setName(name);
     constructor.setBody(ast.newBlock());
 
-    GeneratedMethodBinding superCallBinding = new GeneratedMethodBinding(
-        findSuperConstructorBinding(clazz.getSuperclass(), invocationArguments));
+    IMethodBinding superCallBinding =
+        findSuperConstructorBinding(clazz.getSuperclass(), invocationArguments);
     SuperConstructorInvocation superCall =
         ASTFactory.newSuperConstructorInvocation(ast, superCallBinding);
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGeneratorTest.java
Patch:
@@ -132,7 +132,7 @@ public void testOverriddenGenericConstructor() throws IOException {
     addSourceFile("class A<T> { A(T t) {} }", "A.java");
     String translation = translateSourceFile(
         "class B extends A<String> { B(String s) { super(s); } }", "B", "B.h");
-    assertTranslation(translation, "- (id)initWithId:(NSString *)s;");
-    assertNotInTranslation(translation, "initWithNSString");
+    assertTranslation(translation, "- (id)initWithNSString:(NSString *)s;");
+    assertNotInTranslation(translation, "initWithId");
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -1166,7 +1166,7 @@ private void printMetadata(AbstractTypeDeclaration node) {
     printf("  static J2ObjcClassInfo _%s = { ", fullName);
     printf("\"%s\", ", type.getName());
     String pkgName = type.getPackage().getName();
-    if (Strings.isNullOrEmpty(pkgName)) {
+    if (pkgName == null) {
       printf("NULL, ");
     } else {
       printf("\"%s\", ", pkgName);

File: jre_emul/android/libcore/luni/src/main/java/java/util/TimeZone.java
Patch:
@@ -429,11 +429,11 @@ private static native TimeZone getNativeTimeZone(String id) /*-[
                             initWithInt:offset
                            withNSString:[tz name]
                                 withInt:[daylight month] - 1
-                                withInt:[daylight day] - 1
+                                withInt:[daylight day]
                                 withInt:0
                                 withInt:daylightTime
                                 withInt:[standard month] - 1
-                                withInt:[standard day] - 1
+                                withInt:[standard day]
                                 withInt:0
                                 withInt:standardTime
                                 withInt:savingsOffset]);

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -481,7 +481,7 @@ public static int enumerate(Thread[] threads) {
   }
 
   public native long getId() /*-[
-    NSDictionary *threadData = [[NSThread currentThread] threadDictionary];
+    NSDictionary *threadData = [(NSThread *) nsThread_ threadDictionary];
     NSNumber *threadId = [threadData objectForKey:JavaLangThread_THREAD_ID_];
     return [threadId longLongValue];
   ]-*/;
@@ -956,7 +956,7 @@ public static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler h
    * @return an {@link UncaughtExceptionHandler} instance or {@code null}.
    */
   public native UncaughtExceptionHandler getUncaughtExceptionHandler() /*-[
-    NSDictionary *threadData = [[NSThread currentThread] threadDictionary];
+    NSDictionary *threadData = [(NSThread *) nsThread_ threadDictionary];
     id<JavaLangThread_UncaughtExceptionHandler> uncaughtHandler =
         [threadData objectForKey:JavaLangThread_UNCAUGHT_HANDLER_];
     if (uncaughtHandler) {
@@ -970,7 +970,7 @@ public native UncaughtExceptionHandler getUncaughtExceptionHandler() /*-[
   ]-*/;
 
   public native void setUncaughtExceptionHandler(UncaughtExceptionHandler handler) /*-[
-    NSMutableDictionary *threadData = [[NSThread currentThread] threadDictionary];
+    NSMutableDictionary *threadData = [(NSThread *) nsThread_ threadDictionary];
     if (handler) {
       [threadData setObject:handler forKey:JavaLangThread_UNCAUGHT_HANDLER_];
     } else {

File: jre_emul/android/libcore/luni/src/main/java/java/lang/RealToString.java
Patch:
@@ -21,7 +21,7 @@
 
 /*-[
 extern void RealToString_bigIntDigitGenerator(
-    JavaLangRealToString *obj, long f, int e, BOOL isDenormalized, int p);
+    JavaLangRealToString *obj, long long f, int e, BOOL isDenormalized, int p);
 ]-*/
 
 final class RealToString {

File: cycle_finder/src/test/java/com/google/devtools/cyclefinder/CycleFinderTest.java
Patch:
@@ -297,8 +297,8 @@ private void findCycles() throws IOException {
     options.setSourceFiles(inputFiles);
     options.setClasspath(System.getProperty("java.class.path"));
     ByteArrayOutputStream errorMessages = new ByteArrayOutputStream();
-    CycleFinder finder = new CycleFinder(options, new PrintStream(new NullOutputStream()),
-                                         new PrintStream(errorMessages));
+    System.setErr(new PrintStream(errorMessages));
+    CycleFinder finder = new CycleFinder(options, new PrintStream(new NullOutputStream()));
     cycles = finder.findCycles();
     if (finder.errorCount() > 0) {
       fail("CycleFinder failed with errors:\n" + errorMessages.toString());

File: jre_emul/android/libcore/luni/src/test/java/libcore/icu/LocaleDataTest.java
Patch:
@@ -89,7 +89,6 @@ public void test_cs_CZ() throws Exception {
     public void test_ru_RU() throws Exception {
         LocaleData l = LocaleData.get(new Locale("ru", "RU"));
 
-        assertEquals("0432", String.format("%04x", (int) l.longWeekdayNames[1].charAt(0)));
         assertEquals("воскресенье", l.longWeekdayNames[1]);
         assertEquals("вс", l.shortWeekdayNames[1]);
 

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/text/NumberFormatTest.java
Patch:
@@ -115,8 +115,6 @@ public void testDefaultNumberFormats() {
     public void testFrenchNumberFormats() {
       Locale locale = Locale.FRANCE;
       assertEquals(NumberFormat.getInstance(locale).format(23.45678), "23,457");
-      assertEquals("20ac", String.format("%04x",
-          (int) NumberFormat.getCurrencyInstance(locale).format(23.45678).charAt(6)));
       assertEquals(NumberFormat.getCurrencyInstance(locale).format(23.45678), "23.46 €");
       assertEquals(NumberFormat.getIntegerInstance(locale).format(23.45678), "23");
       assertEquals(NumberFormat.getNumberInstance(locale).format(23.45678), "23,457");

File: jre_emul/android/libcore/luni/src/test/java/libcore/icu/LocaleDataTest.java
Patch:
@@ -74,6 +74,7 @@ public void test_cs_CZ() throws Exception {
     public void test_ru_RU() throws Exception {
         LocaleData l = LocaleData.get(new Locale("ru", "RU"));
 
+        assertEquals("0432", String.format("%04x", (int) l.longWeekdayNames[1].charAt(0)));
         assertEquals("воскресенье", l.longWeekdayNames[1]);
         assertEquals("вс", l.shortWeekdayNames[1]);
 

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/text/NumberFormatTest.java
Patch:
@@ -103,6 +103,8 @@ public void testDefaultNumberFormats() {
     public void testFrenchNumberFormats() {
       Locale locale = Locale.FRANCE;
       assertEquals(NumberFormat.getInstance(locale).format(23.45678), "23,457");
+      assertEquals("20ac", String.format("%04x",
+          (int) NumberFormat.getCurrencyInstance(locale).format(23.45678).charAt(6)));
       assertEquals(NumberFormat.getCurrencyInstance(locale).format(23.45678), "23.46 €");
       assertEquals(NumberFormat.getIntegerInstance(locale).format(23.45678), "23");
       assertEquals(NumberFormat.getNumberInstance(locale).format(23.45678), "23,457");

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -259,8 +259,7 @@ protected String methodDeclaration(MethodDeclaration m) {
     String baseDeclaration = String.format("%c (%s)%s", isStatic ? '+' : '-',
         NameTable.getObjCType(binding.getReturnType()), methodName);
     sb.append(baseDeclaration);
-    parametersDeclaration(BindingUtil.getOriginalMethodBinding(binding), ASTUtil.getParameters(m),
-        baseDeclaration, sb);
+    parametersDeclaration(binding, ASTUtil.getParameters(m), baseDeclaration, sb);
     return sb.toString();
   }
 
@@ -316,6 +315,7 @@ protected String annotationConstructorDeclaration(ITypeBinding annotation) {
 
   private void parametersDeclaration(IMethodBinding method, List<SingleVariableDeclaration> params,
       String baseDeclaration, StringBuffer sb) throws AssertionError {
+    method = BindingUtil.getOriginalMethodBinding(method);
     if (!params.isEmpty()) {
       ITypeBinding[] parameterTypes = method.getParameterTypes();
       boolean first = true;

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1301,7 +1301,7 @@ public void testUnicodeStringConcat() throws IOException {
         "class Test { static final String NAME = \"\\u4e2d\\u56fd\";" +
         " static final String CAPTION = \"China's name is \";" +
         " static final String TEST = CAPTION + NAME; }", "Test", "Test.m");
-    assertTranslation(translation, "Test_TEST_ = @\"China's name is \u4e2d\u56fd\"");
+    assertTranslation(translation, "Test_TEST_ = @\"China's name is \\u4e2d\\u56fd\"");
   }
 
   public void testPartialArrayCreation2D() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1301,7 +1301,7 @@ public void testUnicodeStringConcat() throws IOException {
         "class Test { static final String NAME = \"\\u4e2d\\u56fd\";" +
         " static final String CAPTION = \"China's name is \";" +
         " static final String TEST = CAPTION + NAME; }", "Test", "Test.m");
-    assertTranslation(translation, "Test_TEST_ = @\"China's name is \\u4e2d\\u56fd\"");
+    assertTranslation(translation, "Test_TEST_ = @\"China's name is \u4e2d\u56fd\"");
   }
 
   public void testPartialArrayCreation2D() throws IOException {

File: jre_emul/android/libcore/luni/src/main/java/java/net/URL.java
Patch:
@@ -555,7 +555,7 @@ private void readObject(ObjectInputStream stream) throws IOException {
             if (streamHandler == null) {
                 throw new IOException("Unknown protocol: " + protocol);
             }
-            hashCode = 0; // necessary until http://b/4471249 is fixed
+            hashCode = 0;
         } catch (ClassNotFoundException e) {
             throw new IOException(e);
         }

File: jre_emul/android/libcore/luni/src/main/java/java/text/DateFormatSymbols.java
Patch:
@@ -322,7 +322,6 @@ public String[] getWeekdays() {
     public String[][] getZoneStrings() {
         String[][] result = clone2dStringArray(internalZoneStrings());
         // If icu4c doesn't have a name, our array contains a null. TimeZone.getDisplayName
-        // knows how to format GMT offsets (and, unlike icu4c, has accurate data). http://b/8128460.
         for (String[] zone : result) {
             String id = zone[0];
             if (zone[1] == null) {

File: jre_emul/android/libcore/luni/src/main/java/java/text/SimpleDateFormat.java
Patch:
@@ -198,10 +198,8 @@ public class SimpleDateFormat extends DateFormat {
     private static final int RFC_822_TIMEZONE_FIELD = 18;
 
     // The index of 'L' (cf. 'M') in the PATTERN_CHARS string. This is an ICU-compatible extension
-    // necessary for correct localization in various languages (http://b/2633414).
     private static final int STAND_ALONE_MONTH_FIELD = 19;
     // The index of 'c' (cf. 'E') in the PATTERN_CHARS string. This is an ICU-compatible extension
-    // necessary for correct localization in various languages (http://b/2633414).
     private static final int STAND_ALONE_DAY_OF_WEEK_FIELD = 20;
 
     private String pattern;
@@ -1183,7 +1181,6 @@ private int parseTimeZone(String string, int offset) {
                 if (row[i] == null) {
                     // If icu4c doesn't have a name, our array contains a null. Normally we'd
                     // work out the correct GMT offset, but we already handled parsing GMT offsets
-                    // above, so we can just ignore these cases. http://b/8128460.
                     continue;
                 }
                 if (string.regionMatches(true, offset, row[i], 0, row[i].length())) {

File: jre_emul/android/libcore/luni/src/main/java/java/util/Locale.java
Patch:
@@ -17,7 +17,6 @@
 
 package java.util;
 
-import java.io.IOException;
 import java.io.Serializable;
 import libcore.icu.ICU;
 
@@ -397,7 +396,6 @@ public String getDisplayLanguage(Locale locale) {
             return "";
         }
 
-        // http://b/8049507 --- frameworks/base should use fil_PH instead of tl_PH.
         // Until then, we're stuck covering their tracks, making it look like they're
         // using "fil" when they're not.
         String localeString = toString();

File: jre_emul/android/libcore/luni/src/main/java/libcore/icu/TimeZones.java
Patch:
@@ -42,7 +42,6 @@ public final class TimeZones {
     private static final ZoneStringsCache cachedZoneStrings = new ZoneStringsCache();
 
     public static class ZoneStringsCache extends BasicLruCache<Locale, String[][]> {
-        // De-duplicate the strings (http://b/2672057).
         private final HashMap<String, String> internTable = new HashMap<String, String>();
 
         public ZoneStringsCache() {

File: jre_emul/android/libcore/luni/src/main/java/libcore/io/IoUtils.java
Patch:
@@ -155,7 +155,6 @@ public static void deleteContents(File dir) throws IOException {
      */
     public static boolean canOpenReadOnly(String path) {
         try {
-            // Use open(2) rather than stat(2) so we require fewer permissions. http://b/6485312.
             FileDescriptor fd = Libcore.os.open(path, O_RDONLY, 0);
             Libcore.os.close(fd);
             return true;

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/lang/reflect/FieldTest.java
Patch:
@@ -22,7 +22,6 @@
 public final class FieldTest extends TestCase {
     private static final long MY_LONG = 5073258162644648461L;
 
-    // Reflection for static long fields was broken http://b/1120750
     public void testLongFieldReflection() throws Exception {
         Field field = getClass().getDeclaredField("MY_LONG");
         assertEquals(5073258162644648461L, field.getLong(null));

File: jre_emul/android/libcore/luni/src/test/java/libcore/java/lang/reflect/MethodTest.java
Patch:
@@ -198,7 +198,6 @@ private void a() {
     }
 
     // iOS: toString returns may be different than in Java.
-//    // http://b/1045939
 //    public void testMethodToString() throws Exception {
 //        assertEquals("public final native void java.lang.Object.clone()",
 //                Object.class.getMethod("clone", new Class[] { }).toString());

File: translator/src/test/java/com/google/devtools/j2objc/types/ImplementationImportCollectorTest.java
Patch:
@@ -40,7 +40,6 @@ public void testMethodReturnHasHeader() throws IOException {
     assertTranslation(translation, "#include \"FooException.h\"");
   }
 
-  // http://b/7073329
   public void testVarargsMethodNoActualArguments() throws IOException {
     translateSourceFile(
         "class Test { Test(String ... values) { } Test test = new Test(); }",

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -179,8 +179,8 @@ private String getOuterFieldName(ITypeBinding type) {
     // Ensure that the new outer field does not conflict with a field in a superclass.
     type = type.getSuperclass();
     int suffix = 0;
-    while (type.getDeclaringClass() != null) {
-      if (!Modifier.isStatic(type.getModifiers())) {
+    while (type != null) {
+      if (type.getDeclaringClass() != null && !Modifier.isStatic(type.getModifiers())) {
         suffix++;
       }
       type = type.getSuperclass();

File: jre_emul/android/libcore/luni/src/main/java/java/util/TreeMap.java
Patch:
@@ -162,6 +162,7 @@ public TreeMap(SortedMap<K, ? extends V> copyFrom) {
             map.root = root != null ? root.copy(null) : null;
             map.entrySet = null;
             map.keySet = null;
+            map.valuesCollection = null;
             return map;
         } catch (CloneNotSupportedException e) {
             throw new AssertionError();

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -1205,7 +1205,7 @@ private String getMethodMetadata(IMethodBinding method) {
         needsMetadata = true;
       }
     } else {
-      returnTypeStr = "\"" + NameTable.getFullName(method.getReturnType()) + "\"";
+      returnTypeStr = "\"L" + NameTable.getFullName(method.getReturnType()) + "\"";
       needsMetadata = true;
     }
     String methodName = "NULL";

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceFixer.java
Patch:
@@ -70,7 +70,7 @@ public void endVisit(MethodDeclaration node) {
 
   @Override
   public boolean visit(ClassInstanceCreation node) {
-    ITypeBinding newType = Types.getTypeBinding(node);
+    ITypeBinding newType = Types.getTypeBinding(node).getTypeDeclaration();
     ITypeBinding declaringClass = newType.getDeclaringClass();
     if (Modifier.isStatic(newType.getModifiers()) || declaringClass == null) {
       return true;

File: jre_emul/Classes/java/security/SecureRandom.java
Patch:
@@ -19,7 +19,7 @@
 
 /*-[
 #import "java/lang/InternalError.h"
-#import <SecRandom.h>
+#import <Security/SecRandom.h>
 ]-*/
 
 /**

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -385,9 +385,9 @@ public void testEnumConstantAnonymousClassNaming() throws IOException {
 
     assertTranslation(impl, "[super initWithNSString:__name withInt:__ordinal]");
     assertTranslation(impl,
-        "TestEnum_UP = [[TestEnum_$1 alloc] initWithNSString:@\"Test_UP\" withInt:0];");
+        "TestEnum_UP = [[TestEnum_$1 alloc] initWithNSString:@\"UP\" withInt:0];");
     assertTranslation(impl,
-        "TestEnum_DOWN = [[TestEnum_$2 alloc] initWithNSString:@\"Test_DOWN\" withInt:1];");
+        "TestEnum_DOWN = [[TestEnum_$2 alloc] initWithNSString:@\"DOWN\" withInt:1];");
   }
 
   public void testTwoOutersInAnonymousSubClassOfInner() throws IOException {
@@ -452,7 +452,7 @@ public void testEnumWithParametersAndInnerClasses() throws IOException {
 
     // Verify constant initialization.
     assertTranslation(impl,
-        "[[ColorEnum_$1 alloc] initWithInt:42 withNSString:@\"Color_RED\" withInt:0]");
+        "[[ColorEnum_$1 alloc] initWithInt:42 withNSString:@\"RED\" withInt:0]");
   }
 
   public void testEnumWithInnerEnum() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -302,10 +302,10 @@ public void testBoxedEnumConstructorArgs() throws IOException {
     // but 1 and 2 should be because they are passed as varargs.
     assertTranslation(translation,
         "[[TestEnum alloc] initWithId:[JavaLangInteger valueOfWithInt:0] " +
-        "withNSString:@\"Test_INT\" withInt:0]");
+        "withNSString:@\"INT\" withInt:0]");
     assertTranslation(translation,
         "[[TestEnum alloc] initWithId:[JavaLangBoolean valueOfWithBoolean:NO] " +
-        "withNSString:@\"Test_BOOLEAN\" withInt:1]");
+        "withNSString:@\"BOOLEAN\" withInt:1]");
   }
 
   public void testBoxedBoolInIf() throws IOException {

File: jre_emul/android/libcore/luni/src/main/java/java/lang/reflect/Proxy.java
Patch:
@@ -332,15 +332,15 @@ private static native Class generateProxy(String name, Class[] interfaces,
           IOSClass *iosProtocol = [IOSClass classWithProtocol:protocol];
           JavaLangReflectMethod *method =
               [iosProtocol findMethodWithTranslatedName:NSStringFromSelector(selector)];
-          NSMethodSignature *signature = [self methodSignatureForSelector:selector];
-          NSUInteger numArgs = [signature numberOfArguments] - 2;  // Skip first two hidden args.
+          IOSObjectArray *paramTypes = [method getParameterTypes];
+          NSUInteger numArgs = paramTypes->size_;
           IOSObjectArray *args = [IOSObjectArray arrayWithLength:numArgs
                                                             type:[NSObject getClass]];
 
           for (unsigned i = 0; i < numArgs; i++) {
             J2ObjcRawValue arg;
             [anInvocation getArgument:&arg atIndex:i + 2];
-            id javaArg = J2ObjcBoxValue(&arg, [signature getArgumentTypeAtIndex:i + 2]);
+            id javaArg = [paramTypes->buffer_[i] boxValue:&arg];
             [args replaceObjectAtIndex:i withObject:javaArg];
           }
           id javaResult = [handler_ invokeWithId:self

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -98,7 +98,8 @@ public static boolean needsOuterReference(ITypeBinding type) {
 
   public static boolean needsOuterParam(ITypeBinding type) {
     assert instance != null;
-    return instance.outerVars.containsKey(type) || instance.usesOuterParam.contains(type);
+    return !type.isLocal() || instance.outerVars.containsKey(type)
+        || instance.usesOuterParam.contains(type);
   }
 
   public static IVariableBinding getOuterField(ITypeBinding type) {

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -402,7 +402,7 @@ public void testTwoOutersInAnonymousSubClassOfInner() throws IOException {
     assertTranslation(translation,
         "[[[Test_A_$1 alloc] initWithTest_A:self withTest_B:b withInt:1 withTest_B:b]");
     assertTranslation(translation,
-        "[super initWithTest_B:capture$0 withInt:arg$0]");
+        "[super initWithTest_B:superOuter$ withInt:arg$0]");
   }
 
   public void testAnonymousClassInStaticBlock() throws IOException {

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/lang/Void.java
Patch:
@@ -27,5 +27,5 @@ public final class Void extends Object {
     /**
      * The {@link Class} object that represents the primitive type {@code void}.
      */
-    public static final Class<Void> TYPE = Void.class;
+    public static final Class<Void> TYPE = void.class;
 }

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -98,8 +98,7 @@ public static boolean needsOuterReference(ITypeBinding type) {
 
   public static boolean needsOuterParam(ITypeBinding type) {
     assert instance != null;
-    return !type.isLocal() || instance.outerVars.containsKey(type)
-        || instance.usesOuterParam.contains(type);
+    return instance.outerVars.containsKey(type) || instance.usesOuterParam.contains(type);
   }
 
   public static IVariableBinding getOuterField(ITypeBinding type) {

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -402,7 +402,7 @@ public void testTwoOutersInAnonymousSubClassOfInner() throws IOException {
     assertTranslation(translation,
         "[[[Test_A_$1 alloc] initWithTest_A:self withTest_B:b withInt:1 withTest_B:b]");
     assertTranslation(translation,
-        "[super initWithTest_B:superOuter$ withInt:arg$0]");
+        "[super initWithTest_B:capture$0 withInt:arg$0]");
   }
 
   public void testAnonymousClassInStaticBlock() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/OuterReferenceResolver.java
Patch:
@@ -98,7 +98,8 @@ public static boolean needsOuterReference(ITypeBinding type) {
 
   public static boolean needsOuterParam(ITypeBinding type) {
     assert instance != null;
-    return instance.outerVars.containsKey(type) || instance.usesOuterParam.contains(type);
+    return !type.isLocal() || instance.outerVars.containsKey(type)
+        || instance.usesOuterParam.contains(type);
   }
 
   public static IVariableBinding getOuterField(ITypeBinding type) {

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -402,7 +402,7 @@ public void testTwoOutersInAnonymousSubClassOfInner() throws IOException {
     assertTranslation(translation,
         "[[[Test_A_$1 alloc] initWithTest_A:self withTest_B:b withInt:1 withTest_B:b]");
     assertTranslation(translation,
-        "[super initWithTest_B:capture$0 withInt:arg$0]");
+        "[super initWithTest_B:superOuter$ withInt:arg$0]");
   }
 
   public void testAnonymousClassInStaticBlock() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -270,8 +270,9 @@ public boolean visit(MethodInvocation node) {
       ITypeBinding[] parameterTypes = binding.getParameterTypes();
       int nParameters = parameterTypes.length;
       if (binding.isVarargs()) {
-        // Add IOSObjectArray import for varargs arguments.
-        addImports(Types.resolveArrayType(Types.getNSObject()));
+        // Only check type for varargs parameters, since the actual
+        // number of arguments will vary.
+        addImports(parameterTypes[nParameters - 1]);
         --nParameters;
       }
       for (int i = 0; i < nParameters; i++) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnonymousClassConverter.java
Patch:
@@ -226,8 +226,7 @@ private GeneratedMethodBinding addDefaultConstructor(
       ASTUtil.getParameters(constructor).add(0,
           ASTFactory.newSingleVariableDeclaration(ast, outerExpressionParam));
       binding.addParameter(0, outerExpressionType);
-      ASTUtil.getArguments(superCall).add(ASTFactory.newSimpleName(ast, outerExpressionParam));
-      superCallBinding.addParameter(0, outerExpressionType);
+      superCall.setExpression(ASTFactory.newSimpleName(ast, outerExpressionParam));
     }
 
     // The invocation arguments must become parameters of the generated

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -39,6 +39,7 @@
 import com.google.devtools.j2objc.translate.JavaToIOSMethodTranslatorTest;
 import com.google.devtools.j2objc.translate.NilCheckResolverTest;
 import com.google.devtools.j2objc.translate.OperatorRewriterTest;
+import com.google.devtools.j2objc.translate.OuterReferenceFixerTest;
 import com.google.devtools.j2objc.translate.OuterReferenceResolverTest;
 import com.google.devtools.j2objc.translate.RewriterTest;
 import com.google.devtools.j2objc.translate.StaticVarRewriterTest;
@@ -96,6 +97,7 @@ public class SmallTests {
     ObjectiveCSourceFileGeneratorTest.class,
     OperatorRewriterTest.class,
     OptionsTest.class,
+    OuterReferenceFixerTest.class,
     OuterReferenceResolverTest.class,
     PrimitiveArrayTest.class,
     ProGuardUsageParserTest.class,

File: jre_emul/Classes/java/lang/StackTraceElement.java
Patch:
@@ -132,9 +132,8 @@ private native void initializeFromAddress() /*-[
       char *signature = leftBrace + 1;
       char *className = strsep(&signature, "[ ]");
       if (className && strlen(className) > 0) {
-        IOSClass *cls =
-            IOSClass_ClassForName([NSString stringWithCString:className
-                                                     encoding:[NSString defaultCStringEncoding]]);
+        IOSClass *cls = [IOSClass classForIosName:[NSString stringWithCString:className
+            encoding:[NSString defaultCStringEncoding]]];
         if (cls) {
           className__ = RETAIN_([cls getName]);
         }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -700,8 +700,8 @@ public void testExceptionsMetadata() throws IOException {
         "class Test { void test() throws Exception, java.lang.Error {} }", "Test", "Test.m");
     assertTranslation(translation, "+ (IOSObjectArray *)__exceptions_test ");
     assertTranslation(translation,
-        "return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass], " +
-        "[JavaLangError getClass] } count:2 type:[IOSClass getClass]];");
+        "return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangException class] getClass], " +
+        "[[JavaLangError class] getClass] } count:2 type:[[IOSClass class] getClass]];");
   }
 
   public void testFreeFormNativeCode() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -384,10 +384,10 @@ private static Statement getLoopBody(Statement s) {
   }
 
   @Override
-  public boolean visit(LabeledStatement node) {
+  public void endVisit(LabeledStatement node) {
     Statement loopBody = getLoopBody(node.getBody());
     if (loopBody == null) {
-      return true;
+      return;
     }
 
     final AST ast = node.getAST();
@@ -434,7 +434,6 @@ public void endVisit(BreakStatement node) {
       // Replace this node with its statement, thus deleting the label.
       ASTUtil.setProperty(node, NodeCopier.copySubtree(ast, node.getBody()));
     }
-    return true;
   }
 
   @Override

File: jre_emul/Tests/java/lang/ThrowableTest.java
Patch:
@@ -67,7 +67,7 @@ public void testStackTraceWithPrintStream() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = baos.toString("UTF-8");
-    assertTrue(trace.contains("JavaLangThrowableTest.testStackTraceWithPrintStream()"));
+    assertTrue(trace.contains("java.lang.ThrowableTest.testStackTraceWithPrintStream()"));
   }
 
   public void testStackTraceWithPrintWriter() throws Exception {
@@ -77,6 +77,6 @@ public void testStackTraceWithPrintWriter() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = sw.toString();
-    assertTrue(trace.contains("JavaLangThrowableTest.testStackTraceWithPrintWriter()"));
+    assertTrue(trace.contains("java.lang.ThrowableTest.testStackTraceWithPrintWriter()"));
   }
 }

File: jre_emul/apache_harmony/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/ClassTest.java
Patch:
@@ -426,9 +426,9 @@ public void test_getDeclaredFields() throws Exception {
      */
     public void test_getDeclaredMethods() throws Exception {
         Method[] m = TestClass.class.getDeclaredMethods();
-        assertEquals("Returned incorrect number of methods", 5, m.length);
+        assertEquals("Returned incorrect number of methods", 6, m.length);
         m = SubTestClass.class.getDeclaredMethods();
-        assertEquals("Returned incorrect number of methods", 0, m.length);
+        assertEquals("Returned incorrect number of methods", 1, m.length);
     }
 
     /**

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -41,6 +41,7 @@
 import com.google.devtools.j2objc.translate.OperatorRewriterTest;
 import com.google.devtools.j2objc.translate.OuterReferenceResolverTest;
 import com.google.devtools.j2objc.translate.RewriterTest;
+import com.google.devtools.j2objc.translate.StaticVarRewriterTest;
 import com.google.devtools.j2objc.translate.TypeSorterTest;
 import com.google.devtools.j2objc.types.BindingMapBuilderTest;
 import com.google.devtools.j2objc.types.HeaderImportCollectorTest;
@@ -101,6 +102,7 @@ public class SmallTests {
     RenamedTypeBindingTest.class,
     RewriterTest.class,
     StatementGeneratorTest.class,
+    StaticVarRewriterTest.class,
     TypeSorterTest.class,
     UnicodeUtilsTest.class
   };

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -284,7 +284,7 @@ private void printAnnotationConstructor(ITypeBinding annotation) {
       ITypeBinding type = member.getReturnType();
       boolean needsRetain = !type.isPrimitive();
       if (needsRetain) {
-        print("RETAIN(");
+        print("RETAIN_(");
       }
       printf("%s_", name);
       if (needsRetain) {

File: jre_emul/Tests/java/lang/ThrowableTest.java
Patch:
@@ -67,7 +67,7 @@ public void testStackTraceWithPrintStream() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = baos.toString("UTF-8");
-    assertTrue(trace.contains("[JavaLangThrowableTest testStackTraceWithPrintStream]"));
+    assertTrue(trace.contains("JavaLangThrowableTest.testStackTraceWithPrintStream()"));
   }
 
   public void testStackTraceWithPrintWriter() throws Exception {
@@ -77,6 +77,6 @@ public void testStackTraceWithPrintWriter() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = sw.toString();
-    assertTrue(trace.contains("[JavaLangThrowableTest testStackTraceWithPrintWriter]"));
+    assertTrue(trace.contains("JavaLangThrowableTest.testStackTraceWithPrintWriter()"));
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -67,7 +67,7 @@ public void testByteAssignment() throws IOException {
     String source = "byte b = 5; Byte foo = Byte.valueOf((byte) 3); b = foo;";
     List<Statement> stmts = translateStatements(source);
     String result = generateStatement(stmts.get(2));
-    assertEquals("b = [foo byteValue];", result);
+    assertEquals("b = [foo charValue];", result);
 
     source = "byte b = 5; Byte foo = Byte.valueOf((byte) 3); foo = b;";
     stmts = translateStatements(source);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -188,6 +188,8 @@ private void printIncrementAndDecrementFunctions(ITypeBinding type) {
     String valueMethod = primitiveName + "Value";
     if (primitiveName.equals("long")) {
       valueMethod = "longLongValue";
+    } else if (primitiveName.equals("byte")) {
+      valueMethod = "charValue";
     }
     newline();
     printf("BOXED_INC_AND_DEC(%s, %s, %s)\n", NameTable.capitalize(primitiveName), valueMethod,

File: translator/src/main/java/com/google/devtools/j2objc/gen/SourceFileGenerator.java
Patch:
@@ -29,7 +29,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.nio.charset.Charset;
 
 /**
  * This class handles common actions shared by the header, implementation, and

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/ReferenceQueue.java
Patch:
@@ -60,7 +60,7 @@ public synchronized Reference<? extends T> poll() {
 
         ret.queueNext = null;
 
-        ret.releaseReferent();
+        ret.weakenReferent();
         return ret;
     }
 
@@ -140,7 +140,7 @@ synchronized void enqueue(Reference<? extends T> reference) {
             reference.queueNext = head;
         }
         head = reference;
-        reference.retainReferent();
+        reference.strengthenReferent();
         notify();
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnonymousClassConverter.java
Patch:
@@ -226,8 +226,7 @@ private GeneratedMethodBinding addDefaultConstructor(
       ASTUtil.getParameters(constructor).add(0,
           ASTFactory.newSingleVariableDeclaration(ast, outerExpressionParam));
       binding.addParameter(0, outerExpressionType);
-      ASTUtil.getArguments(superCall).add(ASTFactory.newSimpleName(ast, outerExpressionParam));
-      superCallBinding.addParameter(0, outerExpressionType);
+      superCall.setExpression(ASTFactory.newSimpleName(ast, outerExpressionParam));
     }
 
     // The invocation arguments must become parameters of the generated

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -39,6 +39,7 @@
 import com.google.devtools.j2objc.translate.JavaToIOSMethodTranslatorTest;
 import com.google.devtools.j2objc.translate.NilCheckResolverTest;
 import com.google.devtools.j2objc.translate.OperatorRewriterTest;
+import com.google.devtools.j2objc.translate.OuterReferenceFixerTest;
 import com.google.devtools.j2objc.translate.OuterReferenceResolverTest;
 import com.google.devtools.j2objc.translate.RewriterTest;
 import com.google.devtools.j2objc.translate.StaticVarRewriterTest;
@@ -96,6 +97,7 @@ public class SmallTests {
     ObjectiveCSourceFileGeneratorTest.class,
     OperatorRewriterTest.class,
     OptionsTest.class,
+    OuterReferenceFixerTest.class,
     OuterReferenceResolverTest.class,
     PrimitiveArrayTest.class,
     ProGuardUsageParserTest.class,

File: jre_emul/Classes/java/lang/StackTraceElement.java
Patch:
@@ -132,9 +132,8 @@ private native void initializeFromAddress() /*-[
       char *signature = leftBrace + 1;
       char *className = strsep(&signature, "[ ]");
       if (className && strlen(className) > 0) {
-        IOSClass *cls =
-            IOSClass_ClassForName([NSString stringWithCString:className
-                                                     encoding:[NSString defaultCStringEncoding]]);
+        IOSClass *cls = [IOSClass classForIosName:[NSString stringWithCString:className
+            encoding:[NSString defaultCStringEncoding]]];
         if (cls) {
           className__ = RETAIN_([cls getName]);
         }

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -700,8 +700,8 @@ public void testExceptionsMetadata() throws IOException {
         "class Test { void test() throws Exception, java.lang.Error {} }", "Test", "Test.m");
     assertTranslation(translation, "+ (IOSObjectArray *)__exceptions_test ");
     assertTranslation(translation,
-        "return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass], " +
-        "[JavaLangError getClass] } count:2 type:[IOSClass getClass]];");
+        "return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangException class] getClass], " +
+        "[[JavaLangError class] getClass] } count:2 type:[[IOSClass class] getClass]];");
   }
 
   public void testFreeFormNativeCode() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -384,10 +384,10 @@ private static Statement getLoopBody(Statement s) {
   }
 
   @Override
-  public boolean visit(LabeledStatement node) {
+  public void endVisit(LabeledStatement node) {
     Statement loopBody = getLoopBody(node.getBody());
     if (loopBody == null) {
-      return true;
+      return;
     }
 
     final AST ast = node.getAST();
@@ -434,7 +434,6 @@ public void endVisit(BreakStatement node) {
       // Replace this node with its statement, thus deleting the label.
       ASTUtil.setProperty(node, NodeCopier.copySubtree(ast, node.getBody()));
     }
-    return true;
   }
 
   @Override

File: jre_emul/Tests/java/lang/ThrowableTest.java
Patch:
@@ -67,7 +67,7 @@ public void testStackTraceWithPrintStream() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = baos.toString("UTF-8");
-    assertTrue(trace.contains("JavaLangThrowableTest.testStackTraceWithPrintStream()"));
+    assertTrue(trace.contains("java.lang.ThrowableTest.testStackTraceWithPrintStream()"));
   }
 
   public void testStackTraceWithPrintWriter() throws Exception {
@@ -77,6 +77,6 @@ public void testStackTraceWithPrintWriter() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = sw.toString();
-    assertTrue(trace.contains("JavaLangThrowableTest.testStackTraceWithPrintWriter()"));
+    assertTrue(trace.contains("java.lang.ThrowableTest.testStackTraceWithPrintWriter()"));
   }
 }

File: jre_emul/apache_harmony/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/ClassTest.java
Patch:
@@ -426,9 +426,9 @@ public void test_getDeclaredFields() throws Exception {
      */
     public void test_getDeclaredMethods() throws Exception {
         Method[] m = TestClass.class.getDeclaredMethods();
-        assertEquals("Returned incorrect number of methods", 5, m.length);
+        assertEquals("Returned incorrect number of methods", 6, m.length);
         m = SubTestClass.class.getDeclaredMethods();
-        assertEquals("Returned incorrect number of methods", 0, m.length);
+        assertEquals("Returned incorrect number of methods", 1, m.length);
     }
 
     /**

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -41,6 +41,7 @@
 import com.google.devtools.j2objc.translate.OperatorRewriterTest;
 import com.google.devtools.j2objc.translate.OuterReferenceResolverTest;
 import com.google.devtools.j2objc.translate.RewriterTest;
+import com.google.devtools.j2objc.translate.StaticVarRewriterTest;
 import com.google.devtools.j2objc.translate.TypeSorterTest;
 import com.google.devtools.j2objc.types.BindingMapBuilderTest;
 import com.google.devtools.j2objc.types.HeaderImportCollectorTest;
@@ -101,6 +102,7 @@ public class SmallTests {
     RenamedTypeBindingTest.class,
     RewriterTest.class,
     StatementGeneratorTest.class,
+    StaticVarRewriterTest.class,
     TypeSorterTest.class,
     UnicodeUtilsTest.class
   };

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -284,7 +284,7 @@ private void printAnnotationConstructor(ITypeBinding annotation) {
       ITypeBinding type = member.getReturnType();
       boolean needsRetain = !type.isPrimitive();
       if (needsRetain) {
-        print("RETAIN(");
+        print("RETAIN_(");
       }
       printf("%s_", name);
       if (needsRetain) {

File: jre_emul/Tests/java/lang/ThrowableTest.java
Patch:
@@ -67,7 +67,7 @@ public void testStackTraceWithPrintStream() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = baos.toString("UTF-8");
-    assertTrue(trace.contains("[JavaLangThrowableTest testStackTraceWithPrintStream]"));
+    assertTrue(trace.contains("JavaLangThrowableTest.testStackTraceWithPrintStream()"));
   }
 
   public void testStackTraceWithPrintWriter() throws Exception {
@@ -77,6 +77,6 @@ public void testStackTraceWithPrintWriter() throws Exception {
     testException.printStackTrace(out);
     out.flush();
     String trace = sw.toString();
-    assertTrue(trace.contains("[JavaLangThrowableTest testStackTraceWithPrintWriter]"));
+    assertTrue(trace.contains("JavaLangThrowableTest.testStackTraceWithPrintWriter()"));
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -67,7 +67,7 @@ public void testByteAssignment() throws IOException {
     String source = "byte b = 5; Byte foo = Byte.valueOf((byte) 3); b = foo;";
     List<Statement> stmts = translateStatements(source);
     String result = generateStatement(stmts.get(2));
-    assertEquals("b = [foo byteValue];", result);
+    assertEquals("b = [foo charValue];", result);
 
     source = "byte b = 5; Byte foo = Byte.valueOf((byte) 3); foo = b;";
     stmts = translateStatements(source);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -188,6 +188,8 @@ private void printIncrementAndDecrementFunctions(ITypeBinding type) {
     String valueMethod = primitiveName + "Value";
     if (primitiveName.equals("long")) {
       valueMethod = "longLongValue";
+    } else if (primitiveName.equals("byte")) {
+      valueMethod = "charValue";
     }
     newline();
     printf("BOXED_INC_AND_DEC(%s, %s, %s)\n", NameTable.capitalize(primitiveName), valueMethod,

File: translator/src/main/java/com/google/devtools/j2objc/gen/SourceFileGenerator.java
Patch:
@@ -29,7 +29,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.nio.charset.Charset;
 
 /**
  * This class handles common actions shared by the header, implementation, and

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/ReferenceQueue.java
Patch:
@@ -60,7 +60,7 @@ public synchronized Reference<? extends T> poll() {
 
         ret.queueNext = null;
 
-        ret.releaseReferent();
+        ret.weakenReferent();
         return ret;
     }
 
@@ -140,7 +140,7 @@ synchronized void enqueue(Reference<? extends T> reference) {
             reference.queueNext = head;
         }
         head = reference;
-        reference.retainReferent();
+        reference.strengthenReferent();
         notify();
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/SourceFileGenerator.java
Patch:
@@ -29,7 +29,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.nio.charset.Charset;
 
 /**
  * This class handles common actions shared by the header, implementation, and

File: jre_emul/android/libcore/luni/src/main/java/java/lang/ref/ReferenceQueue.java
Patch:
@@ -60,7 +60,7 @@ public synchronized Reference<? extends T> poll() {
 
         ret.queueNext = null;
 
-        ret.releaseReferent();
+        ret.weakenReferent();
         return ret;
     }
 
@@ -140,7 +140,7 @@ synchronized void enqueue(Reference<? extends T> reference) {
             reference.queueNext = head;
         }
         head = reference;
-        reference.retainReferent();
+        reference.strengthenReferent();
         notify();
     }
 

File: translator/src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -527,7 +527,7 @@ private static void saveConvertedSource(String filename, String source, Compilat
       edit.apply(doc);
       File outputFile = new File(Options.getOutputDirectory(), filename);
       outputFile.getParentFile().mkdirs();
-      Files.write(doc.get(), outputFile, Charset.defaultCharset());
+      Files.write(doc.get(), outputFile, Options.getCharset());
     } catch (MalformedTreeException e) {
       throw new AssertionError(e);
     } catch (BadLocationException e) {
@@ -579,7 +579,7 @@ private static String getSource(String path) throws IOException {
     if (file == null) {
       return findArchivedSource(path);
     } else {
-      return Files.toString(file, Charset.defaultCharset());
+      return Files.toString(file, Options.getCharset());
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/SourceFileGenerator.java
Patch:
@@ -149,7 +149,7 @@ protected void save(String path) {
         source += '\n';
       }
 
-      Files.write(source, outputFile, Charset.defaultCharset());
+      Files.write(source, outputFile, Options.getCharset());
     } catch (IOException e) {
       J2ObjC.error(e.getMessage());
     } finally {

File: jre_emul/apache_harmony/classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/CollatorTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.harmony.text.tests.java.text;
 
 import java.text.Collator;
-import java.text.ParseException;
 import java.util.Locale;
 
 public class CollatorTest extends junit.framework.TestCase {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Autoboxer.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.common.collect.Lists;
 import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.NodeCopier;
+import com.google.devtools.j2objc.types.PointerTypeBinding;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
 import com.google.devtools.j2objc.util.BindingUtil;
@@ -350,7 +351,8 @@ private void rewriteBoxedPrefixOrPostfix(
     }
     AST ast = node.getAST();
     String methodName = methodPrefix + NameTable.capitalize(Types.getPrimitiveType(type).getName());
-    IOSMethodBinding methodBinding = IOSMethodBinding.newFunction(methodName, type, type, type);
+    IOSMethodBinding methodBinding = IOSMethodBinding.newFunction(
+        methodName, type, type, new PointerTypeBinding(type));
     MethodInvocation invocation = ASTFactory.newMethodInvocation(ast, methodBinding, null);
     ASTUtil.getArguments(invocation).add(
         ASTFactory.newAddressOf(ast, NodeCopier.copySubtree(ast, operand)));

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -276,7 +276,7 @@ public void testFieldArrayInitializerUnboxed() throws IOException {
   public void testBoxedTypeLiteral() throws IOException {
     String source = "public class Test { Class c = int.class; }";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslation(translation, "Test_set_c_(self, [JavaLangInteger TYPE]);");
+    assertTranslation(translation, "Test_set_c_(self, [IOSClass intClass]);");
   }
 
   public void testBoxedLhsOperatorAssignment() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslator.java
Patch:
@@ -86,6 +86,7 @@ public JavaToIOSMethodTranslator(AST ast, Map<String, String> methodMappings) {
     loadTargetMethods(ast.resolveWellKnownType("java.lang.Object"));
     loadTargetMethods(ast.resolveWellKnownType("java.lang.Class"));
     loadTargetMethods(ast.resolveWellKnownType("java.lang.String"));
+    loadTargetMethods(Types.resolveJavaType("java.lang.Number"));
     loadCharSequenceMethods();
     javaLangCloneable = ast.resolveWellKnownType("java.lang.Cloneable");
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -377,10 +377,10 @@ protected void printStaticConstructorDeclaration(MethodDeclaration m) {
   }
 
   @Override
-  protected void printMethod(MethodDeclaration m) {
+  protected void printNormalMethod(MethodDeclaration m) {
     IMethodBinding binding = Types.getMethodBinding(m);
     if (!binding.isSynthetic()) {
-      super.printMethod(m);
+      super.printNormalMethod(m);
     }
   }
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -1065,7 +1065,7 @@ private void printAnnotationValue(AST ast, Object value) {
     } else if (value instanceof String) {
       StringLiteral node = ast.newStringLiteral();
       node.setLiteralValue((String) value);
-      printf(StatementGenerator.generateStringLiteral(node));
+      print(StatementGenerator.generateStringLiteral(node));
     } else if (value instanceof Number || value instanceof Character || value instanceof Boolean) {
       print(value.toString());
     } else if (value.getClass().isArray()) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -673,12 +673,13 @@ public void testTypeAnnotationDefaultParameter() throws IOException {
   public void testTypeAnnotationWithParameter() throws IOException {
     String translation = translateSourceFile(
         "import org.junit.*;" +
-        "@Ignore(\"some comment\") public class Test { void test() {} }",
+        "@Ignore(\"some \\\"escaped\\n comment\") public class Test { void test() {} }",
         "Test", "Test.m");
     assertTranslatedLines(translation,
         "+ (IOSObjectArray *)__annotations {",
         "return [IOSObjectArray arrayWithObjects:(id[]) " +
-        "{ [[[OrgJunitIgnoreImpl alloc] initWithValue:@\"some comment\"] autorelease] } " +
+        "{ [[[OrgJunitIgnoreImpl alloc] initWithValue:" +
+        "@\"some \\\"escaped\\n comment\"] autorelease] } " +
         "count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -314,12 +314,12 @@ public void testEnumWithMultipleConstructors() throws IOException {
         "withInt:(int)__ordinal;");
     assertTranslatedLines(translation,
         "- (id)initWithInt:(int)rgb",
-        "withBOOL:(BOOL)primary",
+        "withBoolean:(BOOL)primary",
         "withNSString:(NSString *)__name",
         "withInt:(int)__ordinal;");
     translation = getTranslatedFile("Color.m");
     assertTranslation(translation,
-        "[self initColorEnumWithInt:rgb withBOOL:YES withNSString:__name withInt:__ordinal]");
+        "[self initColorEnumWithInt:rgb withBoolean:YES withNSString:__name withInt:__ordinal]");
     assertTranslatedLines(translation,
         "if ((self = [super initWithNSString:__name withInt:__ordinal])) {",
         "self->rgb_ = rgb;",

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -69,7 +69,7 @@ public void testThisConstructorCallInlined() throws IOException {
         "Test() { this(true); b2 = true; }" +
         "Test(boolean b) { b1 = b; }}";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslation(translation, "if ((self = [self initTestWithBOOL:YES])) {");
+    assertTranslation(translation, "if ((self = [self initTestWithBoolean:YES])) {");
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -252,7 +252,7 @@ public void testInnerClassDefaultInitialization() throws IOException {
         "class Inner { Inner(boolean b) {} int size() { return Test.this.size(); } } }",
         "Test", "Test.m");
     assertTranslation(translation, "Test_set_inner_(self, " +
-        "[[[Test_Inner alloc] initWithTest:self withBOOL:YES] autorelease]);");
+        "[[[Test_Inner alloc] initWithTest:self withBoolean:YES] autorelease]);");
     assertTranslation(translation, "Test_Inner_set_this$0_(self, outer$);");
   }
 

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -366,7 +366,7 @@ private static native void initializeThreadClass() /*-[
     (void) [[JavaLangThread alloc]
             initWithJavaLangThreadGroup:JavaLangThread_mainThreadGroup_
                            withNSString:@"main"
-                               withBOOL:FALSE];
+                            withBoolean:FALSE];
   ]-*/;
 
   public static native Thread currentThread() /*-[
@@ -377,7 +377,7 @@ public static native Thread currentThread() /*-[
       thread =
           [[JavaLangThread alloc] initWithJavaLangThreadGroup:JavaLangThread_mainThreadGroup_
                                                  withNSString:name
-                                                     withBOOL:FALSE];
+                                                  withBoolean:FALSE];
 #if !__has_feature(objc_arc)
       [thread autorelease];
 #endif

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -186,9 +186,9 @@ private void printIncrementAndDecrementFunctions(ITypeBinding type) {
     }
     String primitiveName = primitiveType.getName();
     newline();
+    // TODO(user): The fourth param here is no longer needed.
     printf("BOXED_INC_AND_DEC(%s, %s, %s, %s)\n", NameTable.capitalize(primitiveName),
-        primitiveName, NameTable.getFullName(type),
-        NameTable.capitalize(NameTable.getPrimitiveTypeParameterKeyword(primitiveName)));
+        primitiveName, NameTable.getFullName(type), NameTable.capitalize(primitiveName));
   }
 
   @Override

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -878,7 +878,7 @@ private String unquoteAndEscape(String s) {
 
   private void printStringConcatenationArg(Expression arg) {
     if (Types.getTypeBinding(arg).isEqualTo(arg.getAST().resolveWellKnownType("boolean"))) {
-      buffer.append("[JavaLangBoolean toStringWithBOOL:");
+      buffer.append("[JavaLangBoolean toStringWithBoolean:");
       arg.accept(this);
       buffer.append(']');
       return;

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -776,7 +776,7 @@ private String enumConstructorDeclaration(MethodDeclaration m, List<Statement> s
     // Insert synthetic parameters.
     StringBuilder sb2 =
         new StringBuilder(generateStatement(createInnerConstructorInvocation(m), false));
-    invocation = sb2.insert(sb2.length() - 1, " withNSString:name withInt:ordinal").toString();
+    invocation = sb2.insert(sb2.length() - 1, " withNSString:__name withInt:__ordinal").toString();
 
     if (invokedConstructors.contains(parameterKey(binding))) {
       return super.constructorDeclaration(m, true) + " " + reindent(sb.toString()) + "\n\n"

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -337,7 +337,7 @@ public static String primitiveTypeToObjC(String javaName) {
       .put("long", "longInt")
       .build();
 
-  private static String getPrimitiveTypeParameterKeyword(String javaName) {
+  public static String getPrimitiveTypeParameterKeyword(String javaName) {
     String result = PRIMITIVE_TYPE_KEYWORD_MAP.get(javaName);
     return result != null ? result : javaName;
   }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -1078,7 +1078,7 @@ private void printAnnotations(List<Annotation> runtimeAnnotations) {
   // isn't specified in the annotation will use the default.
   private void printAnnotationParameters(Annotation annotation) {
     IAnnotationBinding binding = Types.getAnnotationBinding(annotation);
-    IMemberValuePairBinding[] valueBindings = binding.getAllMemberValuePairs();
+    IMemberValuePairBinding[] valueBindings = BindingUtil.getSortedMemberValuePairs(binding);
     for (int i = 0; i < valueBindings.length; i++) {
       if (i > 0) {
         print(' ');

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -287,7 +287,7 @@ protected String constructorDeclaration(MethodDeclaration m, boolean isInner) {
   protected String annotationConstructorDeclaration(ITypeBinding annotation) {
     StringBuffer sb = new StringBuffer();
     sb.append("- (id)init");
-    IMethodBinding[] members = annotation.getDeclaredMethods();
+    IMethodBinding[] members = BindingUtil.getSortedAnnotationMembers(annotation);
     for (int i = 0; i < members.length; i++) {
       if (i == 0) {
         sb.append("With");

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -820,7 +820,7 @@ private void printStringConcatenation(Expression leftOperand, Expression rightOp
               format += "%d";
               break;
             case 'J':  // long
-              format += "%qi";
+              format += "%lld";
               break;
             case 'D':  // double
             case 'F':  // float

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -275,7 +275,7 @@ public void testStringConcatenationTypes() throws IOException {
       " + \" i=\" + i + \" l=\" + l + \" s=\" + s; }}",
       "Example", "Example.m");
     assertTranslation(translation,
-        "return [NSString stringWithFormat:@\"obj=%@ b=%@ c=%C d=%f f=%f i=%d l=%qi s=%d\", " +
+        "return [NSString stringWithFormat:@\"obj=%@ b=%@ c=%C d=%f f=%f i=%d l=%lld s=%d\", " +
         "obj_, [JavaLangBoolean toStringWithBOOL:b_], c_, d_, f_, i_, l_, s_];");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -362,7 +362,7 @@ public void testNoBoxingFormatPrimitiveParameter() throws IOException {
     String translation = translateSourceFile(source, "Test", "Test.m");
 
     assertTranslation(translation,
-        "stringWithFormat:@\"b=%d b2=%d c=%C d=%f f=%f i=%d l=%d s=%d\" , " +
+        "stringWithFormat:@\"b=%d b2=%d c=%C d=%f f=%f i=%d l=%lld s=%d\" , " +
         "b_, b2_, c_, d_, f_, i_, l_, s_, nil];");
   }
 

File: jre_emul/stub_classes/java/lang/reflect/Field.java
Patch:
@@ -36,11 +36,11 @@ public int getModifiers() {
     return 0;
   }
   
-  public Type getType() {
+  public Class<?> getType() {
     return null;
   }
 
-  public Class getDeclaringClass() {
+  public Class<?> getDeclaringClass() {
     return null;
   }
   

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -40,6 +40,7 @@
 import com.google.devtools.j2objc.translate.RewriterTest;
 import com.google.devtools.j2objc.translate.TypeSorterTest;
 import com.google.devtools.j2objc.types.BindingMapBuilderTest;
+import com.google.devtools.j2objc.types.HeaderImportCollectorTest;
 import com.google.devtools.j2objc.types.ImplementationImportCollectorTest;
 import com.google.devtools.j2objc.types.ModifiedTypeBindingTest;
 import com.google.devtools.j2objc.types.RenamedTypeBindingTest;
@@ -74,6 +75,7 @@ public class SmallTests {
     DestructorGeneratorTest.class,
     ErrorReportingASTVisitorTest.class,
     GwtConverterTest.class,
+    HeaderImportCollectorTest.class,
     HiddenFieldDetectorTest.class,
     ImplementationImportCollectorTest.class,
     InitializationNormalizerTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnonymousClassConverter.java
Patch:
@@ -263,7 +263,7 @@ private GeneratedMethodBinding addDefaultConstructor(
           binding);
       ASTUtil.getParameters(constructor).add(
           ASTFactory.newSingleVariableDeclaration(ast, paramBinding));
-      binding.addParameter(paramBinding);
+      binding.addParameter(paramBinding.getType());
       ASTUtil.getStatements(constructor.getBody()).add(
           ast.newExpressionStatement(ASTFactory.newAssignment(ast,
           ASTFactory.newSimpleName(ast, innerField), ASTFactory.newSimpleName(ast, paramBinding))));

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -210,7 +210,7 @@ protected void addOuterParameter(
     SingleVariableDeclaration outerParam =
         ASTFactory.newSingleVariableDeclaration(ast, outerParamBinding);
     ASTUtil.getParameters(constructor).add(0, outerParam);
-    binding.addParameter(0, outerParamBinding);
+    binding.addParameter(0, outerType);
 
     ConstructorInvocation thisCall = null;
     SuperConstructorInvocation superCall = null;

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslator.java
Patch:
@@ -414,7 +414,7 @@ private void addCopyWithZoneMethod(TypeDeclaration node) {
     GeneratedVariableBinding zoneBinding = new GeneratedVariableBinding(
         "zone", 0, Types.resolveIOSType("NSZone"), false, true, binding.getDeclaringClass(),
         binding);
-    binding.addParameter(zoneBinding);
+    binding.addParameter(zoneBinding.getType());
     ASTUtil.getParameters(cloneMethod).add(makeZoneParameter(zoneBinding));
 
     Block block = ast.newBlock();

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -193,7 +193,7 @@ public void endVisit(SuperMethodInvocation node) {
         SimpleName receiver = ast.newSimpleName(field.getName());
         Types.addBinding(receiver, field);
         assign.setLeftHandSide(receiver);
-        assign.setRightHandSide(Types.newNullLiteral());
+        assign.setRightHandSide(ASTFactory.newNullLiteral(ast));
         Types.addBinding(assign, field.getDeclaringClass());
         ExpressionStatement stmt = ast.newExpressionStatement(assign);
         statements.add(index, stmt);

File: translator/src/main/java/com/google/devtools/j2objc/translate/GwtConverter.java
Patch:
@@ -132,13 +132,13 @@ && hasAnnotation(GwtIncompatible.class, ASTUtil.getModifiers(node))) {
 
   @Override
   public boolean visit(MethodInvocation node) {
+    AST ast = node.getAST();
     IMethodBinding method = Types.getMethodBinding(node);
     List<Expression> args = ASTUtil.getArguments(node);
     if (method.getName().equals("create") &&
         method.getDeclaringClass().getQualifiedName().equals(GWT_CLASS) &&
         args.size() == 1) {
       // Convert GWT.create(Foo.class) to Foo.class.newInstance().
-      AST ast = node.getAST();
       SimpleName name = ast.newSimpleName("newInstance");
       node.setName(name);
       Expression clazz = NodeCopier.copySubtree(ast, args.get(0));
@@ -149,7 +149,7 @@ public boolean visit(MethodInvocation node) {
       Types.addBinding(name, newBinding);
       Types.addBinding(node, newBinding);
     } else if (isGwtTest(node)) {
-      BooleanLiteral falseLiteral = Types.newBooleanLiteral(false);
+      BooleanLiteral falseLiteral = ASTFactory.newBooleanLiteral(ast, false);
       ASTUtil.setProperty(node, falseLiteral);
     }
     return true;

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -306,7 +306,9 @@ private void handleCompareToMethod(MethodDeclaration node, IMethodBinding bindin
     AST ast = node.getAST();
     IVariableBinding param = Types.getVariableBinding(ASTUtil.getParameters(node).get(0));
 
-    Expression nullCheck = ASTFactory.createNullCheck(ast, param, false);
+    Expression nullCheck = ASTFactory.newInfixExpression(
+        ast, ASTFactory.newSimpleName(ast, param), InfixExpression.Operator.NOT_EQUALS,
+        ASTFactory.newNullLiteral(ast), ast.resolveWellKnownType("boolean"));
     Expression instanceofExpr = ASTFactory.newInstanceofExpression(
         ast, ASTFactory.newSimpleName(ast, param), typeArguments[0]);
     instanceofExpr = ASTFactory.newPrefixExpression(

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -24,7 +24,6 @@
 import com.google.devtools.j2objc.Options;
 import com.google.devtools.j2objc.translate.DestructorGenerator;
 import com.google.devtools.j2objc.types.GeneratedMethodBinding;
-import com.google.devtools.j2objc.types.IOSArrayTypeBinding;
 import com.google.devtools.j2objc.types.IOSMethod;
 import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.IOSTypeBinding;
@@ -1877,7 +1876,7 @@ private void printTypeLiteral(ITypeBinding type) {
   private void printArrayTypeLiteral(ITypeBinding arrayType) {
     assert arrayType.isArray();
     ITypeBinding elementType = arrayType.getElementType();
-    IOSArrayTypeBinding iosArrayType = Types.resolveArrayType(elementType);
+    IOSTypeBinding iosArrayType = Types.resolveArrayType(elementType);
     buffer.append("[").append(iosArrayType.getName()).append(" iosClass");
     int dimensions = arrayType.getDimensions();
     if (dimensions > 1) {

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -226,9 +226,7 @@ public void testAbstractMethodsAddedWithArrayType() {
         assertTrue(Modifier.isAbstract(modifiers));
         ITypeBinding returnType = Types.getTypeBinding(m.getReturnType2());
         if (name.equals("toArray")) {
-          assertTrue(returnType.isArray());
-          ITypeBinding componentType = returnType.getComponentType();
-          assertEquals(Types.getNSObject(), componentType);
+          assertEquals("IOSObjectArray", returnType.getName());
           if (!m.parameters().isEmpty()) {
             assertEquals(1, m.parameters().size());
             Object param = m.parameters().get(0);

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -91,7 +91,7 @@ public void endVisit(EnumDeclaration node) {
 
   @Override
   public boolean visit(AnnotationTypeDeclaration node) {
-    return false; // ignore annotations
+    return handleType(node);
   }
 
   private boolean handleType(AbstractTypeDeclaration node) {

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -118,7 +118,7 @@ public static Set<Import> getImports(ITypeBinding binding) {
   }
 
   public static void addImports(ITypeBinding binding, Collection<Import> imports) {
-    if (binding == null || binding.isPrimitive() || binding.isAnnotation()) {
+    if (binding == null || binding.isPrimitive()) {
       return;
     }
     if (binding.isTypeVariable()) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -91,7 +91,7 @@ public void endVisit(EnumDeclaration node) {
 
   @Override
   public boolean visit(AnnotationTypeDeclaration node) {
-    return handleType(node);
+    return false; // ignore annotations
   }
 
   private boolean handleType(AbstractTypeDeclaration node) {

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -118,7 +118,7 @@ public static Set<Import> getImports(ITypeBinding binding) {
   }
 
   public static void addImports(ITypeBinding binding, Collection<Import> imports) {
-    if (binding == null || binding.isPrimitive()) {
+    if (binding == null || binding.isPrimitive() || binding.isAnnotation()) {
       return;
     }
     if (binding.isTypeVariable()) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -91,7 +91,7 @@ public void endVisit(EnumDeclaration node) {
 
   @Override
   public boolean visit(AnnotationTypeDeclaration node) {
-    return false; // ignore annotations
+    return handleType(node);
   }
 
   private boolean handleType(AbstractTypeDeclaration node) {

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -118,7 +118,7 @@ public static Set<Import> getImports(ITypeBinding binding) {
   }
 
   public static void addImports(ITypeBinding binding, Collection<Import> imports) {
-    if (binding == null || binding.isPrimitive() || binding.isAnnotation()) {
+    if (binding == null || binding.isPrimitive()) {
       return;
     }
     if (binding.isTypeVariable()) {

File: translator/src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -660,16 +660,15 @@ public void endVisit(SwitchStatement node) {
       Statement stmt = statements.get(i);
       if (stmt instanceof VariableDeclarationStatement) {
         VariableDeclarationStatement declStmt = (VariableDeclarationStatement) stmt;
-        statements.remove(i);
+        statements.remove(i--);
         List<VariableDeclarationFragment> fragments = ASTUtil.getFragments(declStmt);
-        int iStatement = i;
         for (VariableDeclarationFragment decl : fragments) {
           Expression initializer = decl.getInitializer();
           if (initializer != null) {
             Assignment assignment = ASTFactory.newAssignment(ast,
                 NodeCopier.copySubtree(ast, decl.getName()),
                 NodeCopier.copySubtree(ast, initializer));
-            statements.add(iStatement++, ast.newExpressionStatement(assignment));
+            statements.add(++i, ast.newExpressionStatement(assignment));
             decl.setInitializer(null);
           }
         }

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -527,14 +527,14 @@ public void testVariableDeclarationsInSwitchStatement2() throws IOException {
   public void testMultipleSwitchVariables() throws IOException {
     String translation = translateSourceFile(
       "public class A { public void doSomething(int n) { switch (n) { " +
-      "case 1: int i = 1; int j = 2; }}" +
+      "case 1: int i; int j = 2; }}" +
       "private void log(int i) {}}",
       "A", "A.m");
     int index = translation.indexOf("int i;");
     assertTrue(index >= 0 && index < translation.indexOf("switch"));
     index = translation.indexOf("int j;");
     assertTrue(index >= 0 && index < translation.indexOf("switch"));
-    assertFalse(translation.contains("int i = 1;"));
+    assertOccurrences(translation, "int i;", 1);
     assertFalse(translation.contains("int j = 2;"));
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -89,7 +89,7 @@ public void testFinalArrayInnerAccess() throws IOException {
     assertTranslation(impl, "IOSBooleanArray *bar = [IOSBooleanArray arrayWithLength:1];");
     assertTranslation(impl, "[[Test_$1 alloc] initWithBooleanArray:bar]");
     assertTranslation(impl,
-        "[((IOSBooleanArray *) nil_chk(val$bar_)) replaceBooleanAtIndex:0 withBoolean:YES];");
+        "(*[((IOSBooleanArray *) nil_chk(val$bar_)) booleanRefAtIndex:0]) = YES;");
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -375,7 +375,7 @@ public void testAutoboxArrayIndex() throws IOException {
         "    array[index()] = 2; }}";
     String translation = translateSourceFile(source, "Test", "Test.m");
     assertTranslation(translation,
-        "replaceIntAtIndex:[((JavaLangInteger *) nil_chk([self index])) intValue]");
+        "intRefAtIndex:[((JavaLangInteger *) nil_chk([self index])) intValue]");
   }
 
   public void testPrefixExpression() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -91,7 +91,7 @@ public void endVisit(EnumDeclaration node) {
 
   @Override
   public boolean visit(AnnotationTypeDeclaration node) {
-    return handleType(node);
+    return false; // ignore annotations
   }
 
   private boolean handleType(AbstractTypeDeclaration node) {

File: translator/src/main/java/com/google/devtools/j2objc/types/Import.java
Patch:
@@ -118,7 +118,7 @@ public static Set<Import> getImports(ITypeBinding binding) {
   }
 
   public static void addImports(ITypeBinding binding, Collection<Import> imports) {
-    if (binding == null || binding.isPrimitive()) {
+    if (binding == null || binding.isPrimitive() || binding.isAnnotation()) {
       return;
     }
     if (binding.isTypeVariable()) {

File: translator/src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -195,7 +195,7 @@ public void testNSObjectMessageSuperRename() throws IOException {
         "public class Example { int load() { return 1; }} "
         + "class SubClass extends Example { int load() { return super.load(); }}",
         "Example", "Example.m");
-    assertTranslation(translation, "return (int) [super load__];");
+    assertTranslation(translation, "return [super load__];");
   }
 
   public void testNSObjectMessageStaticRename() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -337,6 +337,7 @@ protected void printForwardDeclarations(Set<Import> forwardDecls) {
   protected void generateFileHeader() {
     printf("#ifndef _%s_H_\n", mainTypeName);
     printf("#define _%s_H_\n", mainTypeName);
+    pushIgnoreDeprecatedDeclarationsPragma();
     newline();
 
     HeaderImportCollector collector = new HeaderImportCollector();
@@ -365,6 +366,7 @@ protected String createForwardDeclaration(String typeName, boolean isInterface)
 
   protected void generateFileFooter() {
     newline();
+    popIgnoreDeprecatedDeclarationsPragma();
     printf("#endif // _%s_H_\n", mainTypeName);
   }
 
@@ -577,3 +579,4 @@ boolean hasDeprecated(List<IExtendedModifier> modifiers) {
     return false;
   }
 }
+

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -97,6 +97,7 @@ public void generate(CompilationUnit unit) {
       findInvokedConstructors(unit);
       printStart(getSourceFileName());
       printImports(unit);
+      pushIgnoreDeprecatedDeclarationsPragma();
       unit.accept(new ErrorReportingASTVisitor() {
         @Override
         public boolean visit(TypeDeclaration node) {
@@ -110,6 +111,7 @@ public boolean visit(EnumDeclaration node) {
           return true;
         }
       });
+      popIgnoreDeprecatedDeclarationsPragma();
     } else {
       // Print a dummy C function so compiled object file is valid.
       List<AbstractTypeDeclaration> types = ASTUtil.getTypes(unit);

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.devtools.j2objc.types.Import;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
+import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.UnicodeUtils;
 
@@ -458,7 +459,7 @@ private void printConstantDefines(AbstractTypeDeclaration node) {
     ITypeBinding type = Types.getTypeBinding(node);
     boolean hadConstant = false;
     for (IVariableBinding field : type.getDeclaredFields()) {
-      if (Types.isPrimitiveConstant(field)) {
+      if (BindingUtil.isPrimitiveConstant(field)) {
         printf("#define %s ", NameTable.getPrimitiveConstantName(field));
         Object value = field.getConstantValue();
         assert value != null;

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.devtools.j2objc.types.Import;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
+import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.ErrorReportingASTVisitor;
 import com.google.devtools.j2objc.util.NameTable;
 
@@ -461,7 +462,7 @@ protected void generate(EnumDeclaration node) {
 
   @Override
   protected void printStaticFieldGetter(IVariableBinding var) {
-    String name = Types.isPrimitiveConstant(var) ?
+    String name = BindingUtil.isPrimitiveConstant(var) ?
         NameTable.getPrimitiveConstantName(var) :
         NameTable.getStaticVarQualifiedName(var);
     printf("%s {\n  return %s;\n}\n\n", staticFieldGetterSignature(var), name);
@@ -743,7 +744,7 @@ private void printStaticVars(List<FieldDeclaration> fields, boolean isInterface)
       if (Modifier.isStatic(f.getModifiers()) || isInterface) {
         for (VariableDeclarationFragment var : ASTUtil.getFragments(f)) {
           IVariableBinding binding = Types.getVariableBinding(var);
-          if (!Types.isPrimitiveConstant(binding)) {
+          if (!BindingUtil.isPrimitiveConstant(binding)) {
             String name = NameTable.getStaticVarQualifiedName(binding);
             String objcType = NameTable.getObjCType(binding.getType());
             Expression initializer = var.getInitializer();

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -114,7 +114,7 @@ protected List<IVariableBinding> getStaticFieldsNeedingAccessors(
           IVariableBinding binding = Types.getVariableBinding(var);
           // Don't define accessors for private constants, since they can be
           // directly referenced.
-          if (!(Types.isPrimitiveConstant(binding) && Modifier.isPrivate(binding.getModifiers()))) {
+          if (!(BindingUtil.isPrimitiveConstant(binding) && BindingUtil.isPrivate(binding))) {
             bindings.add(binding);
           }
         }

File: translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java
Patch:
@@ -77,7 +77,7 @@ public boolean visit(TypeDeclaration node) {
           @Override
           public boolean visit(VariableDeclarationFragment node) {
             IVariableBinding binding = Types.getVariableBinding(node);
-            if (!Modifier.isStatic(field.getModifiers()) && !Types.isConstantVariable(binding)) {
+            if (!Modifier.isStatic(field.getModifiers())) {
               releaseableFields.add(binding);
             }
             return true;

File: translator/src/main/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslator.java
Patch:
@@ -176,7 +176,7 @@ private void mapMethod(MethodDeclaration node, IMethodBinding binding, IOSMethod
       for (int i = 0; i < n; i++) {
         ITypeBinding newParamType = Types.resolveIOSType(iosArgs.get(i).getType());
         if (newParamType != null) {
-          parameters.get(i).setType(Types.makeType(newParamType));
+          parameters.get(i).setType(ASTFactory.newType(ast, newParamType));
         }
       }
     }
@@ -394,7 +394,7 @@ private SingleVariableDeclaration makeZoneParameter(GeneratedVariableBinding zon
     Types.addBinding(zoneName, zoneBinding);
     SingleVariableDeclaration zoneParam = ast.newSingleVariableDeclaration();
     zoneParam.setName(zoneName);
-    zoneParam.setType(Types.makeType(zoneBinding.getType()));
+    zoneParam.setType(ASTFactory.newType(ast, zoneBinding.getType()));
     Types.addBinding(zoneParam, zoneBinding);
     return zoneParam;
   }

File: translator/src/main/java/com/google/devtools/j2objc/types/JavaMethod.java
Patch:
@@ -17,6 +17,7 @@
 package com.google.devtools.j2objc.types;
 
 import com.google.common.base.Preconditions;
+import com.google.devtools.j2objc.util.BindingUtil;
 
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
@@ -53,7 +54,7 @@ public static JavaMethod getJavaMethod(IMethodBinding binding) {
 
   private JavaMethod(IMethodBinding binding, ITypeBinding classBinding) {
     name = binding.getName();
-    signature = Types.getSignature(binding);
+    signature = BindingUtil.getSignature(binding);
     clazz = classBinding.getBinaryName();
     varargs = binding.isVarargs();
   }

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.devtools.j2objc.gen.ObjectiveCSourceFileGeneratorTest;
 import com.google.devtools.j2objc.gen.PrimitiveArrayTest;
 import com.google.devtools.j2objc.gen.StatementGeneratorTest;
+import com.google.devtools.j2objc.translate.ASTFactoryTest;
 import com.google.devtools.j2objc.translate.AnonymousClassConverterTest;
 import com.google.devtools.j2objc.translate.AutoboxerTest;
 import com.google.devtools.j2objc.translate.DeadCodeEliminatorTest;
@@ -41,7 +42,6 @@
 import com.google.devtools.j2objc.types.ImplementationImportCollectorTest;
 import com.google.devtools.j2objc.types.ModifiedTypeBindingTest;
 import com.google.devtools.j2objc.types.RenamedTypeBindingTest;
-import com.google.devtools.j2objc.types.TypesTest;
 import com.google.devtools.j2objc.util.BindingUtilTest;
 import com.google.devtools.j2objc.util.DeadCodeMapTest;
 import com.google.devtools.j2objc.util.ErrorReportingASTVisitorTest;
@@ -60,6 +60,7 @@
 public class SmallTests {
 
   private static final Class<?>[] smallTestClasses = new Class[] {
+    ASTFactoryTest.class,
     AnonymousClassConverterTest.class,
     ArrayAccessTest.class,
     ArrayCreationTest.class,
@@ -91,7 +92,6 @@ public class SmallTests {
     RewriterTest.class,
     StatementGeneratorTest.class,
     TypeSorterTest.class,
-    TypesTest.class,
     UnicodeUtilsTest.class
   };
 

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.devtools.j2objc.types.IOSParameter;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
+import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.NameTable;
 
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
@@ -253,7 +254,7 @@ protected String methodDeclaration(MethodDeclaration m) {
     String baseDeclaration = String.format("%c (%s)%s", isStatic ? '+' : '-',
         NameTable.getObjCType(binding.getReturnType()), methodName);
     sb.append(baseDeclaration);
-    parametersDeclaration(Types.getOriginalMethodBinding(binding), ASTUtil.getParameters(m),
+    parametersDeclaration(BindingUtil.getOriginalMethodBinding(binding), ASTUtil.getParameters(m),
         baseDeclaration, sb);
     if (methodName.startsWith("new") || methodName.startsWith("copy")
      || methodName.startsWith("alloc") || methodName.startsWith("init")) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTNodeException;
 import com.google.devtools.j2objc.util.ASTUtil;
+import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.ErrorReportingASTVisitor;
 import com.google.devtools.j2objc.util.NameTable;
 import com.google.devtools.j2objc.util.UnicodeUtils;
@@ -200,7 +201,7 @@ private void printArgument(IMethodBinding method, Expression arg, int index) {
           buffer.append(iosMethod.getParameters().get(index).getParameterName());
         }
       } else {
-        method = Types.getOriginalMethodBinding(method.getMethodDeclaration());
+        method = BindingUtil.getOriginalMethodBinding(method.getMethodDeclaration());
         ITypeBinding[] parameterTypes = method.getParameterTypes();
         assert index < parameterTypes.length : "method called with more parameters than declared";
         ITypeBinding parameter = parameterTypes[index];

File: translator/src/main/java/com/google/devtools/j2objc/translate/GwtConverter.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.devtools.j2objc.types.NodeCopier;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
+import com.google.devtools.j2objc.util.BindingUtil;
 import com.google.devtools.j2objc.util.ErrorReportingASTVisitor;
 
 import org.eclipse.jdt.core.dom.AST;
@@ -143,7 +144,7 @@ public boolean visit(MethodInvocation node) {
       Expression clazz = NodeCopier.copySubtree(ast, args.get(0));
       args.remove(0);
       node.setExpression(clazz);
-      IMethodBinding newBinding = Types.findDeclaredMethod(
+      IMethodBinding newBinding = BindingUtil.findDeclaredMethod(
           ast.resolveWellKnownType("java.lang.Class"), "newInstance");
       Types.addBinding(name, newBinding);
       Types.addBinding(node, newBinding);

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -42,6 +42,7 @@
 import com.google.devtools.j2objc.types.ModifiedTypeBindingTest;
 import com.google.devtools.j2objc.types.RenamedTypeBindingTest;
 import com.google.devtools.j2objc.types.TypesTest;
+import com.google.devtools.j2objc.util.BindingUtilTest;
 import com.google.devtools.j2objc.util.DeadCodeMapTest;
 import com.google.devtools.j2objc.util.ErrorReportingASTVisitorTest;
 import com.google.devtools.j2objc.util.NameTableTest;
@@ -64,6 +65,7 @@ public class SmallTests {
     ArrayCreationTest.class,
     AutoboxerTest.class,
     BindingMapBuilderTest.class,
+    BindingUtilTest.class,
     DeadCodeEliminatorTest.class,
     DeadCodeMapTest.class,
     DestructorGeneratorTest.class,

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/io/OutputStreamWriter.java
Patch:
@@ -178,7 +178,7 @@ private native void convert(char[] buf, int offset, int count) /*-[
       }
       IOSByteArray *array = [[IOSByteArray alloc] initWithBytes:bytes count:nBytes];
       free(bytes);
-      [out_ writeWithJavaLangByteArray:array];
+      [out_ writeWithByteArray:array];
 #if ! __has_feature(objc_arc)
       [array release];
 #endif

File: translator/src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -345,9 +345,6 @@ private static String getPrimitiveTypeParameterKeyword(String javaName) {
   // TODO(user): See whether the logic in this method can be simplified.
   //     Also, what about type variables?
   private static String getArrayTypeParameterKeyword(ITypeBinding elementType, int dimensions) {
-    if (elementType.isPrimitive()) {
-      elementType = Types.getWrapperType(elementType);
-    }
     if (elementType.isParameterizedType()) {
       elementType = elementType.getErasure();
     }

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -349,7 +349,7 @@ public void testVarargsMethodInvocationPrimitiveArgs() throws IOException {
     String translation = translateSourceFile(
         "class Test { void call() { foo(1); } void foo(int... i) {} }", "Test", "Test.m");
     assertTranslation(translation,
-        "[self fooWithJavaLangIntegerArray:[IOSIntArray arrayWithInts:(int[]){ 1 } count:1]];");
+        "[self fooWithIntArray:[IOSIntArray arrayWithInts:(int[]){ 1 } count:1]];");
   }
 
   public void testStaticInnerSubclassAccessingOuterStaticVar() throws IOException {
@@ -683,7 +683,7 @@ public void testMethodWithPrimitiveArrayParameter() throws IOException {
       "public class Test { " +
       "  public void foo(char[] chars) { } }",
       "Test", "Test.m");
-    assertTranslation(translation, "fooWithJavaLangCharacterArray:");
+    assertTranslation(translation, "fooWithCharArray:");
   }
 
   public void testMethodWithGenericArrayParameter() throws IOException {

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -85,9 +85,9 @@ public void testFinalArrayInnerAccess() throws IOException {
     assertTranslation(header, "IOSBooleanArray *val$bar_;");
     assertTranslation(header, "@property (nonatomic, retain) IOSBooleanArray *val$bar;");
     assertTranslation(header,
-        "- (id)initWithJavaLangBooleanArray:(IOSBooleanArray *)capture$0;");
+        "- (id)initWithBooleanArray:(IOSBooleanArray *)capture$0;");
     assertTranslation(impl, "IOSBooleanArray *bar = [IOSBooleanArray arrayWithLength:1];");
-    assertTranslation(impl, "[[Test_$1 alloc] initWithJavaLangBooleanArray:bar]");
+    assertTranslation(impl, "[[Test_$1 alloc] initWithBooleanArray:bar]");
     assertTranslation(impl,
         "[((IOSBooleanArray *) NIL_CHK(val$bar_)) replaceBooleanAtIndex:0 withBoolean:YES];");
   }

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -839,7 +839,7 @@ public void testInnerClassVarargsConstructor() throws IOException {
         "class Test { class Inner { Inner(int... i) {} } void test() { new Inner(1, 2, 3); } }",
         "Test", "Test.m");
     assertTranslation(translation,
-        "[[Test_Inner alloc] initWithTest:self withJavaLangIntegerArray:" +
+        "[[Test_Inner alloc] initWithTest:self withIntArray:" +
         "[IOSIntArray arrayWithInts:(int[]){ 1, 2, 3 } count:3]]");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -379,7 +379,7 @@ public void testArrayCreationInConstructorInvocation() throws IOException {
     String translation = translateSourceFile(
         "class Test { Test(int[] i) {} Test() { this(new int[] {}); } }", "Test", "Test.m");
     assertTranslation(translation,
-        "[self initTestWithJavaLangIntegerArray:[IOSIntArray arrayWithInts:(int[]){  } count:0]]");
+        "[self initTestWithIntArray:[IOSIntArray arrayWithInts:(int[]){  } count:0]]");
   }
 
   /**

File: jre_emul/android/libcore/luni/src/main/java/java/util/TimeZone.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.regex.Pattern;
 
 /*-[
+#import "IOSClass.h"
 #import "java/util/SimpleTimeZone.h"
 ]-*/
 

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/AbstractCollection.java
Patch:
@@ -17,9 +17,10 @@
 
 package java.util;
 
-/*-{
+/*-[
+#import "IOSClass.h"
 #import "java/lang/NullPointerException.h"
-}-*/
+]-*/
 
 /**
  * Class {@code AbstractCollection} is an abstract implementation of the {@code

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -372,7 +372,7 @@ public void testNonStaticMultiDimArrayInitializer() throws IOException {
     assertTranslation(translation,
         "[IOSObjectArray arrayWithObjects:(id[]){" +
         " [IOSIntArray arrayWithInts:(int[]){ 1, 2, 3 } count:3] } count:1" +
-        " type:[IOSClass classWithClass:[IOSIntArray class]]]");
+        " type:[IOSIntArray iosClass]]");
   }
 
   public void testArrayCreationInConstructorInvocation() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.devtools.j2objc.gen.ObjectiveCHeaderGenerator;
 import com.google.devtools.j2objc.gen.ObjectiveCImplementationGenerator;
 import com.google.devtools.j2objc.translate.AnonymousClassConverter;
+import com.google.devtools.j2objc.translate.ArrayRewriter;
 import com.google.devtools.j2objc.translate.Autoboxer;
 import com.google.devtools.j2objc.translate.DeadCodeEliminator;
 import com.google.devtools.j2objc.translate.DestructorGenerator;
@@ -371,6 +372,8 @@ public static String translate(CompilationUnit unit, String source) {
     }
     new JavaToIOSMethodTranslator(unit.getAST(), methodMappings).run(unit);
 
+    new ArrayRewriter().run(unit);
+
     // Reorders the types so that superclasses are declared before classes that
     // extend them.
     TypeSorter.sortTypes(unit);

File: translator/src/main/java/com/google/devtools/j2objc/types/BindingMapBuilder.java
Patch:
@@ -394,6 +394,6 @@ public boolean visit(VariableDeclarationFragment node) {
   }
 
   private ITypeBinding createLabelBinding(SimpleName label) {
-    return new IOSTypeBinding(label.getIdentifier(), false);
+    return IOSTypeBinding.newUnmappedClass(label.getIdentifier());
   }
 }

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -86,8 +86,7 @@ public void testFinalArrayInnerAccess() throws IOException {
     assertTranslation(header, "@property (nonatomic, retain) IOSBooleanArray *val$bar;");
     assertTranslation(header,
         "- (id)initWithJavaLangBooleanArray:(IOSBooleanArray *)capture$0;");
-    assertTranslation(impl,
-        "IOSBooleanArray *bar = [[[IOSBooleanArray alloc] initWithLength:1] autorelease];");
+    assertTranslation(impl, "IOSBooleanArray *bar = [IOSBooleanArray arrayWithLength:1];");
     assertTranslation(impl, "[[Test_$1 alloc] initWithJavaLangBooleanArray:bar]");
     assertTranslation(impl,
         "[((IOSBooleanArray *) NIL_CHK(val$bar_)) replaceBooleanAtIndex:0 withBoolean:YES];");

File: translator/src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -40,8 +40,9 @@ public void testDoNotBoxIntInVarargMethod() throws IOException {
     // but 1 and 2 should be because they are passed as varargs.
     assertTranslation(translation, "twoWithTest:[[[Test alloc] initWithNSString:s] autorelease] " +
         "withInt:i withJavaLangIntegerArray:" +
-        "[IOSObjectArray arrayWithType:[IOSClass classWithClass:[JavaLangInteger class]] count:2,"+
-        " [JavaLangInteger valueOfWithInt:1], [JavaLangInteger valueOfWithInt:2] ]];");
+        "[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:1], " +
+        "[JavaLangInteger valueOfWithInt:2] } count:2 type:" +
+        "[IOSClass classWithClass:[JavaLangInteger class]]]];");
   }
 
   public void testUnboxReturn() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -714,6 +714,7 @@ public void addJarFile(String path) throws MalformedURLException {
 
   private static void initPlugins(String[] pluginPaths, String pluginOptionString)
       throws IOException {
+    @SuppressWarnings("resource")
     JarFileLoader classLoader = new JarFileLoader();
     for (String path : pluginPaths) {
       if (path.endsWith(".jar")) {

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.common.collect.Lists;
 import com.google.devtools.j2objc.types.IOSMethod;
+import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.IOSParameter;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
@@ -178,7 +179,7 @@ protected void printMethods(List<MethodDeclaration> methods) {
     for (MethodDeclaration m : methods) {
       syncLineNumbers(m.getName());  // avoid doc-comment
       IMethodBinding binding = Types.getMethodBinding(m);
-      IOSMethod iosMethod = Types.getMappedMethod(binding);
+      IOSMethod iosMethod = IOSMethodBinding.getIOSMethod(binding);
       if (iosMethod != null) {
         print(mappedMethodDeclaration(m, iosMethod));
       } else if (m.isConstructor()) {

File: translator/src/main/java/com/google/devtools/j2objc/types/IOSParameter.java
Patch:
@@ -19,8 +19,6 @@
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 
-import org.eclipse.jdt.core.dom.AST;
-
 import java.util.List;
 import java.util.regex.Pattern;
 
@@ -41,7 +39,7 @@ public class IOSParameter {
     static final Splitter IOS_PARAMETER_SPLITTER =
       Splitter.on(Pattern.compile("(:|\\(|\\)|\\{|\\})")).omitEmptyStrings().trimResults();
 
-    public IOSParameter(String s, int index, AST ast) {
+    public IOSParameter(String s, int index) {
       if (s.equals("...")) {
         name = "values";
         type = null;

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.common.collect.Lists;
 import com.google.devtools.j2objc.types.IOSMethod;
+import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.IOSParameter;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
@@ -178,7 +179,7 @@ protected void printMethods(List<MethodDeclaration> methods) {
     for (MethodDeclaration m : methods) {
       syncLineNumbers(m.getName());  // avoid doc-comment
       IMethodBinding binding = Types.getMethodBinding(m);
-      IOSMethod iosMethod = Types.getMappedMethod(binding);
+      IOSMethod iosMethod = IOSMethodBinding.getIOSMethod(binding);
       if (iosMethod != null) {
         print(mappedMethodDeclaration(m, iosMethod));
       } else if (m.isConstructor()) {

File: translator/src/main/java/com/google/devtools/j2objc/types/IOSParameter.java
Patch:
@@ -19,8 +19,6 @@
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 
-import org.eclipse.jdt.core.dom.AST;
-
 import java.util.List;
 import java.util.regex.Pattern;
 
@@ -41,7 +39,7 @@ public class IOSParameter {
     static final Splitter IOS_PARAMETER_SPLITTER =
       Splitter.on(Pattern.compile("(:|\\(|\\)|\\{|\\})")).omitEmptyStrings().trimResults();
 
-    public IOSParameter(String s, int index, AST ast) {
+    public IOSParameter(String s, int index) {
       if (s.equals("...")) {
         name = "values";
         type = null;

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.devtools.j2objc.gen.SourcePosition;
 import com.google.devtools.j2objc.gen.StatementGenerator;
 import com.google.devtools.j2objc.translate.DestructorGenerator;
-import com.google.devtools.j2objc.translate.InitializationNormalizer;
+import com.google.devtools.j2objc.util.NameTable;
 
 import junit.framework.TestCase;
 
@@ -286,7 +286,7 @@ protected MethodDeclaration translateMethod(String method) {
       @Override
       public boolean visit(MethodDeclaration node) {
         String name = node.getName().getIdentifier();
-        if (name.equals(InitializationNormalizer.INIT_NAME) ||
+        if (name.equals(NameTable.INIT_NAME) ||
             name.equals(DestructorGenerator.FINALIZE_METHOD) ||
             name.equals(DestructorGenerator.DEALLOC_METHOD)) {
           return false;

File: translator/src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -141,7 +141,7 @@ public void testFieldInitializer() {
     BodyDeclaration decl = classMembers.get(1);
     assertTrue(decl instanceof MethodDeclaration);
     MethodDeclaration method = (MethodDeclaration) decl;
-    assertEquals(InitializationNormalizer.INIT_NAME, method.getName().getIdentifier());
+    assertEquals(NameTable.INIT_NAME, method.getName().getIdentifier());
     assertEquals(Modifier.PUBLIC, method.getModifiers());
     assertTrue(method.parameters().isEmpty());
     List<Statement> generatedStatements = method.getBody().statements();
@@ -171,7 +171,7 @@ public void testInitializationBlock() {
     assertTrue(decl instanceof MethodDeclaration);
     MethodDeclaration method = (MethodDeclaration) decl;
     assertTrue(method.isConstructor());
-    assertEquals(InitializationNormalizer.INIT_NAME, method.getName().getIdentifier());
+    assertEquals(NameTable.INIT_NAME, method.getName().getIdentifier());
     assertEquals(Modifier.PUBLIC, method.getModifiers());
     assertTrue(method.parameters().isEmpty());
     List<Statement> generatedStatements = method.getBody().statements();

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.devtools.j2objc.J2ObjC;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ASTUtil;
+import com.google.devtools.j2objc.util.NameTable;
 
 import org.eclipse.jdt.core.dom.Block;
 import org.eclipse.jdt.core.dom.BodyDeclaration;
@@ -177,7 +178,7 @@ public void testAbstractMethodsAdded() {
         assertFalse(Modifier.isAbstract(modifiers));
       } else if (name.equals(DestructorGenerator.FINALIZE_METHOD)
           || name.equals(DestructorGenerator.DEALLOC_METHOD)
-          || name.equals(InitializationNormalizer.INIT_NAME)) {
+          || name.equals(NameTable.INIT_NAME)) {
         // it's ok.
       } else {
         // it's an added method
@@ -218,7 +219,7 @@ public void testAbstractMethodsAddedWithArrayType() {
         assertFalse(Modifier.isAbstract(modifiers));
       } else if (name.equals(DestructorGenerator.FINALIZE_METHOD)
           || name.equals(DestructorGenerator.DEALLOC_METHOD)
-          || name.equals(InitializationNormalizer.INIT_NAME)) {
+          || name.equals(NameTable.INIT_NAME)) {
         // it's ok.
       } else {
         // it's an added method

File: translator/src/main/java/com/google/devtools/j2objc/types/IOSMethod.java
Patch:
@@ -45,11 +45,11 @@ public IOSMethod(String s, IMethodBinding binding, AST ast) {
 
   public IOSMethod(String s, IMethodBinding binding, ITypeBinding returnType, AST ast) {
     if (s.endsWith(";")) {
-      s = s.substring(0, s.length() -1 );
+      s = s.substring(0, s.length() - 1);
     }
     int i = s.indexOf(' ');
     String className = s.substring(0, i);
-    IOSTypeBinding clazz = Types.resolveIOSType(className);
+    ITypeBinding clazz = Types.resolveIOSType(className);
     if (clazz == null) {
       clazz = new IOSTypeBinding(className, false);
     }

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -35,6 +35,7 @@
 import com.google.devtools.j2objc.translate.JavaToIOSMethodTranslatorTest;
 import com.google.devtools.j2objc.translate.OuterReferenceResolverTest;
 import com.google.devtools.j2objc.translate.RewriterTest;
+import com.google.devtools.j2objc.translate.TypeSorterTest;
 import com.google.devtools.j2objc.types.BindingMapBuilderTest;
 import com.google.devtools.j2objc.types.ImplementationImportCollectorTest;
 import com.google.devtools.j2objc.types.ModifiedTypeBindingTest;
@@ -85,6 +86,7 @@ public class SmallTests {
     RenamedTypeBindingTest.class,
     RewriterTest.class,
     StatementGeneratorTest.class,
+    TypeSorterTest.class,
     TypesTest.class,
     UnicodeUtilsTest.class
   };

File: translator/src/test/java/com/google/devtools/j2objc/translate/RewriterTest.java
Patch:
@@ -276,7 +276,7 @@ public void testInterfaceOfSuperclassMethod() {
         "interface Equateable { boolean equals(Object o); }";
     CompilationUnit unit = translateType("Test", source);
     assertEquals(2, unit.types().size());
-    TypeDeclaration innerType = (TypeDeclaration) unit.types().get(0);
+    TypeDeclaration innerType = (TypeDeclaration) unit.types().get(1);
     assertEquals("Test", innerType.getName().toString());
 
     MethodDeclaration[] methods = innerType.getMethods();

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -604,14 +604,14 @@ private void printConstantDefines(AbstractTypeDeclaration node) {
         } else if (value instanceof Long) {
           long l = ((Long) value).longValue();
           if (l == Long.MIN_VALUE) {
-            println("-0x7fffffffffffffffLL - 1");
+            println("((long long) 0x8000000000000000LL)");
           } else {
             println(value.toString());
           }
         } else if (value instanceof Integer) {
           long l = ((Integer) value).intValue();
           if (l == Integer.MIN_VALUE) {
-            println("-0x7fffffff - 1");
+            println("((int) 0x80000000)");
           } else {
             println(value.toString());
           }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -152,7 +152,7 @@ public boolean visit(AnnotationTypeDeclaration node) {
   private String constructorKey(IMethodBinding constructor) {
     StringBuilder sb = new StringBuilder();
     for (ITypeBinding type : constructor.getParameterTypes()) {
-      sb.append(NameTable.javaRefToObjC(type) + ":");
+      sb.append(NameTable.parameterKeyword(type) + ":");
     }
     return sb.toString();
   }
@@ -844,7 +844,7 @@ private void printStaticVars(List<FieldDeclaration> fields, boolean isInterface)
           IVariableBinding binding = Types.getVariableBinding(var);
           if (!Types.isPrimitiveConstant(binding)) {
             String name = NameTable.getStaticVarQualifiedName(binding);
-            String objcType = NameTable.javaRefToObjC(f.getType());
+            String objcType = NameTable.getObjCType(binding.getType());
             Expression initializer = var.getInitializer();
             if (initializer != null) {
               printf("static %s %s = %s;\n", objcType, name, generateExpression(initializer));
@@ -873,7 +873,7 @@ private void printProperties(List<FieldDeclaration> fields) {
 
           String name = NameTable.getName(var.getName());
           ITypeBinding type = Types.getTypeBinding(field.getType());
-          String typeString = NameTable.javaRefToObjC(type);
+          String typeString = NameTable.getSpecificObjCType(type);
           String objCFieldName = NameTable.javaFieldToObjC(name);
 
           // Don't emit the getter when there is already a method with the

File: translator/src/test/java/com/google/devtools/j2objc/util/NameTableTest.java
Patch:
@@ -105,6 +105,6 @@ public void testTypeVariableWithTypeVariableBounds() {
     });
     assertNotNull(methodBinding[0]);
     ITypeBinding paramType = methodBinding[0].getParameterTypes()[0];
-    assertEquals("id", NameTable.javaRefToObjC(paramType));
+    assertEquals("id", NameTable.getSpecificObjCType(paramType));
   }
 }

File: translator/src/main/java/com/google/devtools/j2objc/types/GeneratedMethodBinding.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
+import com.google.devtools.j2objc.util.ASTUtil;
 
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.dom.IAnnotationBinding;
@@ -66,8 +67,7 @@ public GeneratedMethodBinding(MethodDeclaration m, ITypeBinding declaringClass,
     this(m.getName().getIdentifier(), m.getModifiers(), getReturnType(m),
         declaringClass, m.isConstructor(), m.isVarargs(), isSynthetic);
 
-    @SuppressWarnings("unchecked") // safe by definition
-    List<SingleVariableDeclaration> params = m.parameters();
+    List<SingleVariableDeclaration> params = ASTUtil.getParameters(m);
     for (SingleVariableDeclaration param : params) {
       GeneratedVariableBinding gvb = new GeneratedVariableBinding(param.getName().getIdentifier(),
         param.getModifiers(), Types.getTypeBinding(param), false, true, declaringClass, this);

File: translator/src/main/java/com/google/devtools/j2objc/types/ModifiedTypeBinding.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.google.devtools.j2objc.types;
 
+import com.google.devtools.j2objc.util.ASTUtil;
+
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
@@ -45,8 +47,7 @@ public static ITypeBinding bind(TypeDeclaration type) {
     ITypeBinding originalBinding = Types.getTypeBinding(type);
     Type superType = type.getSuperclassType();
     ITypeBinding superclass = superType != null ? Types.getTypeBinding(superType) : null;
-    @SuppressWarnings("unchecked")
-    List<ITypeBinding> interfaceList = type.superInterfaceTypes(); // safe by definition
+    List<Type> interfaceList = ASTUtil.getSuperInterfaceTypes(type);
     ITypeBinding[] interfaces = new ITypeBinding[interfaceList.size()];
     for (int i = 0; i < interfaces.length; i++) {
       interfaces[i] = Types.getTypeBinding(interfaceList.get(i));

File: translator/src/main/java/com/google/devtools/j2objc/types/ImportCollector.java
Patch:
@@ -94,7 +94,8 @@ private void addImports(Type type, Collection<Import> references) {
     if (binding == null) {
       return; // parser already reported missing class
     }
-    if (Types.isIOSType(type)) {
+    if (Types.isIOSType(type)
+        && !(binding instanceof IOSArrayTypeBinding)) { // Include array definitions.
       return;
     }
     if (binding.isPrimitive()) {

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -447,7 +447,8 @@ public static boolean hasIOSEquivalent(ITypeBinding binding) {
    * Returns true if a Type AST node refers to an iOS type.
    */
   public static boolean isIOSType(Type type) {
-    return isIOSType(type.toString());
+    return isIOSType(type.toString())
+        || instance.iosBindingMap.containsValue(getTypeBinding(type));
   }
 
   /**

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -963,7 +963,7 @@ public void testObjectMultiDimArray() throws IOException {
         "type:[IOSClass classWithClass:[JavaLangInteger class]]], " +
         "[IOSObjectArray arrayWithObjects:(id[]){ j_, i_ } count:2 " +
         "type:[IOSClass classWithClass:[JavaLangInteger class]]] } count:3 " +
-        "type:[IOSClass classWithClass:[IOSObjectArray class]]];");
+        "type:[IOSArrayClass classWithComponentType:[IOSClass classWithClass:[NSObject class]]]];");
   }
 
   public void testVarargsMethodInvocationZeroLengthArray() throws IOException {

File: translator/src/main/java/com/google/devtools/j2objc/gen/HiddenFieldDetector.java
Patch:
@@ -84,7 +84,7 @@ private void addFields(ITypeBinding binding, boolean includePrivate, Set<String>
 
   @Override
   public boolean visit(MethodDeclaration node) {
-    IMethodBinding binding = node.resolveBinding();
+    IMethodBinding binding = Types.getMethodBinding(node);
     if (binding != null) {
       Set<String> fieldNames = fieldNameMap.get(binding.getDeclaringClass().getBinaryName());
       if (fieldNames == null) {
@@ -94,7 +94,7 @@ public boolean visit(MethodDeclaration node) {
       @SuppressWarnings("unchecked")
       List<SingleVariableDeclaration> parameters = node.parameters();
       for (SingleVariableDeclaration param : parameters) {
-        IVariableBinding varBinding = param.resolveBinding();
+        IVariableBinding varBinding = Types.getVariableBinding(param);
         if (varBinding != null && fieldNames.contains(varBinding.getName())) {
           fieldNameConflicts.add(varBinding);
         }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -129,7 +129,7 @@ public void generate(TypeDeclaration node) {
     if (!interfaces.isEmpty()) {
       print(" < ");
       for (Iterator<Type> iterator = interfaces.iterator(); iterator.hasNext();) {
-        print(NameTable.javaTypeToObjC(iterator.next(), true));
+        print(NameTable.getFullName(Types.getTypeBinding(iterator.next())));
         if (iterator.hasNext()) {
           print(", ");
         }

File: translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -249,7 +249,7 @@ private void printMethods(TypeDeclaration node) {
       if (primitiveType != null) {
         // All java.lang primitive type wrappers have a "value" field.
         printf("- (void)getValue:(void *)buffer {\n  *((%s *) buffer) = value_;\n}\n\n",
-            NameTable.getFullName(primitiveType));
+            NameTable.primitiveTypeToObjC(primitiveType.getName()));
       }
     }
 
@@ -714,8 +714,7 @@ private String enumConstructorDeclaration(MethodDeclaration m, List<Statement> s
 
   @Override
   protected void printStaticConstructorDeclaration(MethodDeclaration m) {
-    String className =
-        NameTable.javaTypeToObjC(Types.getMethodBinding(m).getDeclaringClass(), false);
+    String className = NameTable.getFullName(Types.getMethodBinding(m).getDeclaringClass());
     StringBuffer sb = new StringBuffer();
     sb.append("{\nif (self == [" + className + " class]) {\n");
     @SuppressWarnings("unchecked")

File: translator/src/test/java/com/google/devtools/j2objc/translate/InnerClassExtractorTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.devtools.j2objc.gen.SourceBuilder;
 import com.google.devtools.j2objc.gen.SourcePosition;
 import com.google.devtools.j2objc.gen.StatementGenerator;
+import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.NameTable;
 
 import org.eclipse.jdt.core.dom.ASTVisitor;
@@ -538,7 +539,7 @@ public void testInnerSubClassOfOtherInnerWithOuterRefsExtraction() throws IOExce
     assertEquals("main", method.getName().getIdentifier());
     VariableDeclarationStatement field =
         (VariableDeclarationStatement) method.getBody().statements().get(0);
-    assertEquals("Test_B", NameTable.javaTypeToObjC(field.getType(), false));
+    assertEquals("Test_B", NameTable.getFullName(Types.getTypeBinding(field.getType())));
     String result = StatementGenerator.generate(field, Collections.EMPTY_SET, false,
         new SourcePosition(null, SourceBuilder.BEGINNING_OF_FILE, null)).trim();
     assertEquals("Test_B *b = " +
@@ -593,7 +594,7 @@ public void testInnerSubClassOfOtherInnerWithOuterRefsExtraction2() throws IOExc
     assertEquals("main", method.getName().getIdentifier());
     VariableDeclarationStatement field =
         (VariableDeclarationStatement) method.getBody().statements().get(0);
-    assertEquals("Test_B", NameTable.javaTypeToObjC(field.getType(), false));
+    assertEquals("Test_B", NameTable.getFullName(Types.getTypeBinding(field.getType())));
     String result = StatementGenerator.generate(field, Collections.EMPTY_SET, false,
         new SourcePosition(null, SourceBuilder.BEGINNING_OF_FILE, null)).trim();
     assertEquals("Test_B *b = " +

File: translator/src/main/java/com/google/devtools/j2objc/translate/AnonymousClassConverter.java
Patch:
@@ -42,6 +42,7 @@
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
+import org.eclipse.jdt.core.dom.NullLiteral;
 import org.eclipse.jdt.core.dom.SimpleName;
 import org.eclipse.jdt.core.dom.SuperConstructorInvocation;
 import org.eclipse.jdt.core.dom.Type;
@@ -244,7 +245,8 @@ private GeneratedMethodBinding addDefaultConstructor(
     // constructor and passed to the super call.
     int argCount = 0;
     for (Expression arg : invocationArguments) {
-      ITypeBinding argType = Types.getTypeBinding(arg);
+      ITypeBinding argType =
+          arg instanceof NullLiteral ? Types.getNSObject() : Types.getTypeBinding(arg);
       GeneratedVariableBinding argBinding = new GeneratedVariableBinding(
           "arg$" + argCount++, 0, argType, false, true, clazz, binding);
       ASTUtil.getParameters(constructor).add(

File: jre_emul/android/libcore/luni/src/main/java/java/lang/annotation/Annotation.java
Patch:
@@ -37,7 +37,7 @@ public interface Annotation {
     /**
      * Determines whether or not this annotation is equivalent to the annotation
      * passed. This is determined according to the following rules:
-     * 
+     *
      * <ul>
      *     <li>
      *         Two annotations {@code x} and {@code y} are equal if and only if
@@ -80,7 +80,7 @@ public interface Annotation {
     /**
      * Returns the hash code of this annotation. The hash code is determined
      * according to the following rules:
-     * 
+     *
      * <ul>
      *     <li>
      *         The hash code of an annotation is the sum of the hash codes of
@@ -118,7 +118,7 @@ public interface Annotation {
      * consists of the name of the annotation, preceded by a "@". If the
      * annotation contains field members, their names and values are also
      * included in the result.
-     * 
+     *
      * @return the {@code String} that represents this annotation.
      */
     String toString();

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -141,6 +141,7 @@ private Types(CompilationUnit unit) {
     NSString.setMappedType(javaStringType);
     ITypeBinding binding = ast.resolveWellKnownType("java.lang.Integer");
     javaNumberType = binding.getSuperclass();
+    NSNumber.setMappedType(javaNumberType);
     initializeArrayTypes();
     initializeTypeMap();
     populateSimpleTypeMap();
@@ -213,10 +214,7 @@ private void initializeTypeMap() {
     typeMap.put(javaClassType, IOSClass);
     typeMap.put(javaCloneableType, NSCopying);
     typeMap.put(javaStringType, NSString);
-
-    // Number isn't a well-known type, but its subclasses are.
     typeMap.put(javaNumberType, NSNumber);
-    NSNumber.setMappedType(javaNumberType.getSuperclass());
   }
 
   private void populateSimpleTypeMap() {

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/lang/Double.java
Patch:
@@ -209,7 +209,9 @@ public double doubleValue() {
      */
     @Override
     public native boolean equals(Object object) /*-{
-        if (!object) return NO;
+        if (!object || ![object isKindOfClass:[JavaLangDouble class]]) {
+          return NO;
+        }
         NSComparisonResult result = [self compare:object];
         return result == NSOrderedSame;
     }-*/;

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/lang/Float.java
Patch:
@@ -164,7 +164,9 @@ public double doubleValue() {
      */
     @Override
     public native boolean equals(Object object) /*-{
-        if (!object) return NO;
+        if (!object || ![object isKindOfClass:[JavaLangFloat class]]) {
+          return NO;
+        }
         NSComparisonResult result = [self compare:object];
         return result == NSOrderedSame;
     }-*/;

File: translator/src/main/java/com/google/devtools/j2objc/translate/Autoboxer.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.devtools.j2objc.types.IOSMethodBinding;
 import com.google.devtools.j2objc.types.NodeCopier;
 import com.google.devtools.j2objc.types.Types;
+import com.google.devtools.j2objc.util.ASTUtil;
 import com.google.devtools.j2objc.util.ErrorReportingASTVisitor;
 
 import org.eclipse.jdt.core.dom.AST;
@@ -213,7 +214,7 @@ public void endVisit(CastExpression node) {
             }
           }
         }
-        ClassConverter.setProperty(node.getParent(), expr);
+        ASTUtil.setProperty(node.getParent(), expr);
       }
     }
   }

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -899,7 +899,7 @@ public void testSuperReservedName() throws IOException {
     assertTranslation(translation, "- (id)init;");
     assertTranslation(translation, "- (void)init__WithInt:(int)a");
     translation = translateSourceFile("B", "B.m");
-    assertTranslation(translation, "return (self = JreMemDebugAdd([super init]));");
+    assertTranslation(translation, "return JreMemDebugAdd([super init]);");
     assertTranslation(translation, "[super init__WithInt:b];");
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/sym/ScopeTest.java
Patch:
@@ -96,7 +96,7 @@ public void testInitializeMethod() {
     String source = "public class Test { static { for (int i = 0; i < 3; i++) { } } }";
     CompilationUnit unit = translateType("Test", source);
     TypeDeclaration decl = (TypeDeclaration) unit.types().get(0);
-    MethodDeclaration init = (MethodDeclaration) decl.bodyDeclarations().get(0);
+    MethodDeclaration init = (MethodDeclaration) decl.bodyDeclarations().get(1);
     assertEquals("initialize", init.getName().getIdentifier());
     Block b = (Block) init.getBody().statements().get(0);
     ForStatement stmt = (ForStatement) b.statements().get(0);

File: translator/src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -162,7 +162,7 @@ public void endVisit(ClassInstanceCreation node) {
       public void endVisit(MethodDeclaration node) {
         if (node.isConstructor()) {
           assertEquals("final NSObject outer$0", node.parameters().get(1).toString());
-          assertEquals("val$test=outer$0;", node.getBody().statements().get(1).toString().trim());
+          assertEquals("val$test=outer$0;", node.getBody().statements().get(2).toString().trim());
           ++testsFound[0];
         }
       };
@@ -204,7 +204,7 @@ public void endVisit(ClassInstanceCreation node) {
       public void endVisit(MethodDeclaration node) {
         if (node.isConstructor()) {
           assertEquals("final NSObject outer$0", node.parameters().get(1).toString());
-          assertEquals("val$foo=outer$0;", node.getBody().statements().get(1).toString().trim());
+          assertEquals("val$foo=outer$0;", node.getBody().statements().get(2).toString().trim());
           ++testsFound[0];
         }
       };

File: translator/src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -279,6 +279,8 @@ private void populatePrimitiveAndWrapperTypeMaps() {
         ast.resolveWellKnownType("float"), ast.resolveWellKnownType("java.lang.Float"));
     loadPrimitiveAndWrapperTypes(
         ast.resolveWellKnownType("double"), ast.resolveWellKnownType("java.lang.Double"));
+    loadPrimitiveAndWrapperTypes(
+        ast.resolveWellKnownType("void"), ast.resolveWellKnownType("java.lang.Void"));
   }
 
   private void loadPrimitiveAndWrapperTypes(ITypeBinding primitive, ITypeBinding wrapper) {

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/LinkedList.java
Patch:
@@ -726,8 +726,9 @@ public E element() {
         return getFirst();
     }
 
-    // This avoids the circular link.next references, leaking memory on iOS.
+    // This avoids the circular link element references, leaking memory on iOS.
     protected void finalize() {
         clear();
+        voidLink.previous = voidLink.next = null;
     }
 }

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/io/Reader.java
Patch:
@@ -48,7 +48,7 @@ public abstract class Reader implements Readable, Closeable {
      */
     protected Reader() {
         super();
-        lock = this;
+        lock = new Object();
     }
 
     /**

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/io/Writer.java
Patch:
@@ -49,7 +49,7 @@ public abstract class Writer implements Appendable, Closeable, Flushable {
      */
     protected Writer() {
         super();
-        lock = this;
+        lock = new Object();
     }
 
     /**

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/Collections.java
Patch:
@@ -385,7 +385,7 @@ static class SynchronizedCollection<E> implements Collection<E>,
 
         SynchronizedCollection(Collection<E> collection) {
             c = collection;
-            mutex = this;
+            mutex = new Object();
         }
 
         SynchronizedCollection(Collection<E> collection, Object mutex) {
@@ -636,7 +636,7 @@ static class SynchronizedMap<K, V> implements Map<K, V>, Serializable {
 
         SynchronizedMap(Map<K, V> map) {
             m = map;
-            mutex = this;
+            mutex = new Object();
         }
 
         SynchronizedMap(Map<K, V> map, Object mutex) {

File: jre_emul/android/libcore/luni/src/main/java/org/xml/sax/helpers/NamespaceSupport.java
Patch:
@@ -6,6 +6,8 @@
 
 package org.xml.sax.helpers;
 
+import com.google.j2objc.annotations.WeakOuter;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EmptyStackException;
@@ -539,6 +541,7 @@ public boolean isNamespaceDeclUris ()
      * the amount of memory that's consumed.
      * </p>
      */
+    @WeakOuter
     final class Context {
 
     /**

File: jre_emul/android/libcore/luni/src/main/java/org/xml/sax/helpers/ParserAdapter.java
Patch:
@@ -6,6 +6,8 @@
 
 package org.xml.sax.helpers;
 
+import com.google.j2objc.annotations.WeakOuter;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Enumeration;
@@ -853,6 +855,7 @@ private void checkNotParsing (String type, String name)
      * from SAX1 to SAX2, except that names and types are
      * interned whenever requested.</p>
      */
+    @WeakOuter
     final class AttributeListAdapter implements Attributes
     {
 

File: translator/src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1372,7 +1372,7 @@ public void testStringComparison() throws IOException {
           "boolean check(String s) { if (s == null) { return false; } return s == \"foo\"; }}",
       "Test", "Test.m");
     // Assert string equate is converted,
-    assertTranslation(translation, "[s isEqualToString:@\"foo\"]");
+    assertTranslation(translation, "((!s && !@\"foo\") || [s isEqualToString:@\"foo\"])");
     // but that non-string compare isn't.
     assertTranslation(translation, "if (s == nil)");
   }

File: jre_emul/apache_harmony/classlib/modules/annotation/src/main/java/java/lang/annotation/Annotation.java
Patch:
@@ -5,9 +5,9 @@
  * licenses this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: translator/src/main/java/com/google/devtools/j2objc/translate/GwtConverter.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.collect.Sets;
 import com.google.devtools.j2objc.J2ObjC;
-import com.google.devtools.j2objc.types.GeneratedMethodBinding;
 import com.google.devtools.j2objc.types.NodeCopier;
 import com.google.devtools.j2objc.types.Types;
 import com.google.devtools.j2objc.util.ErrorReportingASTVisitor;

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -170,7 +170,6 @@ private void addOuterFields(AbstractTypeDeclaration node) {
 
     // Ensure that the new outer field does not conflict with a field in a superclass.
     ITypeBinding superClazz = clazz.getSuperclass();
-    ITypeBinding superDeclaringClazz = superClazz.getDeclaringClass();
     int suffix = 0;
     while (superClazz.getDeclaringClass() != null) {
       if (!Modifier.isStatic(superClazz.getModifiers())) {

File: jre_emul/android/libcore/luni/src/main/java/java/util/TimeZone.java
Patch:
@@ -477,7 +477,7 @@ private static TimeZone getCustomTimeZone(String id) {
 
         // Determine whether to include a separator between hours and minutes.
         String fmt = m.group(2) != null && !Character.isDigit(m.group(2).charAt(0)) ?
-        	"GMT%c%02d%02d" : "GMT%c%02d:%02d";
+            "GMT%c%02d%02d" : "GMT%c%02d:%02d";
         String cleanId = String.format(fmt, sign, hour, minute);
         return new SimpleTimeZone(raw, cleanId);
     }

File: translator/src/main/java/com/google/devtools/j2objc/translate/GwtConverter.java
Patch:
@@ -139,9 +139,8 @@ public boolean visit(MethodInvocation node) {
       Expression clazz = NodeCopier.copySubtree(ast, args.get(0));
       args.remove(0);
       node.setExpression(clazz);
-      GeneratedMethodBinding newBinding = new GeneratedMethodBinding("newInstance", 0,
-        ast.resolveWellKnownType("java.lang.Object"), ast.resolveWellKnownType("java.lang.Class"),
-        false, false, false);
+      IMethodBinding newBinding = Types.findDeclaredMethod(
+          ast.resolveWellKnownType("java.lang.Class"), "newInstance");
       Types.addBinding(name, newBinding);
       Types.addBinding(node, newBinding);
     } else if (isGwtTest(node)) {

File: translator/src/test/java/com/google/devtools/j2objc/GenerationTest.java
Patch:
@@ -340,6 +340,7 @@ public void println(String msg) {
 
   protected void addSourceFile(String source, String fileName) throws IOException {
     File file = new File(tempDir, fileName);
+    file.getParentFile().mkdirs();
     Files.write(source, file, Charset.defaultCharset());
   }
 

File: translator/src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.devtools.j2objc.translate.AutoboxerTest;
 import com.google.devtools.j2objc.translate.DeadCodeEliminatorTest;
 import com.google.devtools.j2objc.translate.DestructorGeneratorTest;
+import com.google.devtools.j2objc.translate.GwtConverterTest;
 import com.google.devtools.j2objc.translate.InitializationNormalizerTest;
 import com.google.devtools.j2objc.translate.InnerClassExtractorTest;
 import com.google.devtools.j2objc.translate.JavaToIOSMethodTranslatorTest;
@@ -65,6 +66,7 @@ public class SmallTests {
     DeadCodeMapTest.class,
     DestructorGeneratorTest.class,
     ErrorReportingASTVisitorTest.class,
+    GwtConverterTest.class,
     HiddenFieldDetectorTest.class,
     ImplementationImportCollectorTest.class,
     InitializationNormalizerTest.class,

File: translator/src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -291,7 +291,7 @@ public boolean visit(ClassInstanceCreation node) {
         GeneratedVariableBinding param = new GeneratedVariableBinding(declaringClass,
             false, true, declaringClass, binding);
         newBinding.addParameter(0, param);
-        assert node.arguments().size() == binding.getParameterTypes().length;
+        assert binding.isVarargs() || node.arguments().size() == binding.getParameterTypes().length;
       }
       return true;
     }

File: src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -534,8 +534,9 @@ public static String getStaticAccessorName(String varName) {
     return isReservedName(varName) ? "get" + capitalize(varName) : varName;
   }
 
-  public static String getStaticVarQualifiedName(ITypeBinding declaringType, String varName) {
-    return getFullName(declaringType) + "_" + varName + "_";
+  public static String getStaticVarQualifiedName(IVariableBinding var) {
+    ITypeBinding declaringType = var.getDeclaringClass().getTypeDeclaration();
+    return getFullName(declaringType) + "_" + getName(var) + (var.isEnumConstant() ? "" : "_");
   }
 
   public static String getPrimitiveConstantName(IVariableBinding constant) {

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -138,7 +138,7 @@ public void testStaticVariableTranslation() throws IOException {
         "public class Example { public static java.util.Date today; }",
         "Example", "Example.h");
     assertTranslation(translation, "+ (JavaUtilDate *)today;");
-    assertTranslation(translation, "+ (void)setTodayWithJavaUtilDate:(JavaUtilDate *)today;");
+    assertTranslation(translation, "+ (void)setToday:(JavaUtilDate *)today;");
     assertFalse(translation.contains("initialize"));
     assertFalse(translation.contains("dealloc"));
   }
@@ -148,7 +148,7 @@ public void testStaticVariableWithInitTranslation() throws IOException {
         "public class Example { public static java.util.Date today = new java.util.Date(); }",
         "Example", "Example.h");
     assertTranslation(translation, "+ (JavaUtilDate *)today;");
-    assertTranslation(translation, "+ (void)setTodayWithJavaUtilDate:(JavaUtilDate *)today;");
+    assertTranslation(translation, "+ (void)setToday:(JavaUtilDate *)today;");
     assertFalse(translation.contains("+ (void)initialize;"));
     assertFalse(translation.contains("dealloc"));
   }

File: src/main/java/com/google/devtools/j2objc/translate/ClassConverter.java
Patch:
@@ -33,6 +33,7 @@
 import org.eclipse.jdt.core.dom.ClassInstanceCreation;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.ConstructorInvocation;
+import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
 import org.eclipse.jdt.core.dom.Expression;
 import org.eclipse.jdt.core.dom.FieldDeclaration;
 import org.eclipse.jdt.core.dom.IExtendedModifier;
@@ -311,6 +312,8 @@ public static void setProperty(ASTNode node, Expression expr) {
         args = ((SuperConstructorInvocation) parent).arguments();
       } else if (parent instanceof ArrayCreation) {
         args = ((ArrayCreation) parent).dimensions();
+      } else if (parent instanceof EnumConstantDeclaration) {
+        args = ((EnumConstantDeclaration) parent).arguments();
       } else {
         throw new AssertionError("unknown parent node type: " + parent.getClass().getSimpleName());
       }

File: src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -2014,7 +2014,9 @@ public boolean visit(SwitchCase node) {
       Expression expr = node.getExpression();
       boolean isEnumConstant = Types.getTypeBinding(expr).isEnum();
       if (isEnumConstant) {
-        String bareTypeName = NameTable.getFullName(Types.getTypeBinding(expr)).replace("Enum", "");
+        String typeName = NameTable.getFullName(Types.getTypeBinding(expr));
+        String bareTypeName = typeName.endsWith("Enum") ?
+            typeName.substring(0, typeName.length() - 4) : typeName;
         buffer.append(bareTypeName).append("_");
       }
       if (isEnumConstant && expr instanceof SimpleName) {

File: src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -139,6 +139,9 @@ public class NameTable {
       // Core Foundation definitions
       "BIG_ENDIAN", "BYTE_ORDER", "LITTLE_ENDIAN", "PDP_ENDIAN",
 
+      // Common preprocessor definitions.
+      "DEBUG", "NDEBUG",
+
       // Foundation methods with conflicting return types
       "scale");
 

File: src/main/java/com/google/devtools/j2objc/translate/ClassConverter.java
Patch:
@@ -49,6 +49,7 @@
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.StructuralPropertyDescriptor;
 import org.eclipse.jdt.core.dom.SuperConstructorInvocation;
+import org.eclipse.jdt.core.dom.SwitchStatement;
 import org.eclipse.jdt.core.dom.SynchronizedStatement;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 
@@ -332,6 +333,8 @@ public static void setProperty(ASTNode node, Statement stmt) {
       List<Statement> args;
       if (parent instanceof Block) {
         args = ((Block) parent).statements();
+      } else if (parent instanceof SwitchStatement) {
+        args = ((SwitchStatement) parent).statements();
       } else {
         throw new AssertionError("unknown parent node type: " + parent.getClass().getSimpleName());
       }

File: jre_emul/Classes/java/util/logging/NSLogHandler.java
Patch:
@@ -27,7 +27,7 @@
  */
 class NSLogHandler extends Handler {
 
-  class NSLogFormatter extends Formatter {
+  static class NSLogFormatter extends Formatter {
 
     /**
      * Very simple formatter, since NSLog adds its own text.

File: src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -265,7 +265,7 @@ public boolean visit(MethodDeclaration node) {
    * checking.
    */
   private void handleCompareToMethod(MethodDeclaration node, IMethodBinding binding) {
-    if (!binding.getName().equals("compareTo")) {
+    if (!binding.getName().equals("compareTo") || node.getBody() == null) {
       return;
     }
     ITypeBinding comparableType =

File: src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -251,6 +251,8 @@ public boolean visit(MethodDeclaration node) {
 
   @Override
   public boolean visit(MethodInvocation node) {
+    IMethodBinding methodBinding = Types.getMethodBinding(node);
+    addReference(methodBinding.getReturnType());
     // Check for vararg method
     IMethodBinding binding = Types.getMethodBinding(node);
     if (binding != null && binding.isVarargs()) {
@@ -292,7 +294,6 @@ public boolean visit(MethodInvocation node) {
       }
     }
     while (expr != null && expr instanceof Name) {
-      IMethodBinding methodBinding = Types.getMethodBinding(node);
       if (methodBinding instanceof IOSMethodBinding) {
         // true for mapped methods
         IMethodBinding resolvedBinding = Types.resolveInvocationBinding(node);
@@ -301,7 +302,6 @@ public boolean visit(MethodInvocation node) {
           break;
         }
       }
-      addReference(methodBinding.getReturnType());
       ITypeBinding typeBinding = Types.getTypeBinding(expr);
       if (typeBinding != null && typeBinding.isClass()) { // if class literal
         addReference(typeBinding);

File: jre_emul/android/libcore/luni/src/main/java/java/util/regex/Pattern.java
Patch:
@@ -285,7 +285,7 @@ public final class Pattern implements Serializable {
     private final int flags;
 
     // NSRegularExpression instance.
-    long nativePattern;
+    Object nativePattern;
 
     /**
      * Returns a {@link Matcher} for this pattern applied to the given {@code input}.
@@ -495,12 +495,12 @@ private native void compileImpl(String icuPattern, int iosFlags)
 #if ! __has_feature(objc_arc)
       [regex retain];
 #endif
-      nativePattern_ = (long long) regex;
+      nativePattern_ = regex;
     ]-*/;
 
     native void releaseNativePattern() /*-[
 #if ! __has_feature(objc_arc)
-      [(id) nativePattern_ release];
+      [nativePattern_ release];
 #endif
       nativePattern_ = 0;
     ]-*/;

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -474,7 +474,6 @@ public void testARCAutoreleasePoolMethod() throws IOException {
       "Test", "Test.m");
     assertTranslation(translation, "- (void)foo {\n" +
         "  @autoreleasepool {\n" +
-        "    {\n    }\n" +
         "  }\n" +
         "}");
   }

File: src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -630,7 +630,8 @@ public void testEnhancedForStatement() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(1));
-    assertTrue(result.contains("{\nint n__"));
+    assertTranslation(result, "int n__ = ");
+    assertTranslation(result, "for (int i__ = 0; i__ < n__; i__++) {");
   }
 
   public void testSwitchStatementWithExpression() throws IOException {
@@ -1256,7 +1257,6 @@ public void testARCAutoreleasePoolForStatement() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "  for (int i = 0; i < 10; i++) {\n" +
         "    @autoreleasepool {\n" +
-        "      {\n      }\n" +
         "    }\n" +
         "  }");
   }

File: src/main/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGenerator.java
Patch:
@@ -201,7 +201,7 @@ protected String methodDeclaration(MethodDeclaration m) {
       // Sections 5.1 (Explicit method family control)
       // and 5.2.2 (Related result types)
       // TODO(user,user): Rename method instead of using the attribute.
-      sb.append(" OBJC_METHOD_FAMILY_NONE ");
+      sb.append(" OBJC_METHOD_FAMILY_NONE");
     }
     return sb.toString();
   }

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -156,13 +156,13 @@ public void testStaticVariableWithInitTranslation() throws IOException {
   public void testInitMessageTranslation() throws IOException {
     String translation = translateSourceFile(
         "public class Example { void init() {} }", "Example", "Example.h");
-    assertTranslation(translation, "- (void)init__;");
+    assertTranslation(translation, "- (void)init__ OBJC_METHOD_FAMILY_NONE;");
   }
 
   public void testInitializeMessageTranslation() throws IOException {
     String translation = translateSourceFile(
         "public class Example { void initialize() {} }", "Example", "Example.h");
-    assertTranslation(translation, "- (void)initialize__;");
+    assertTranslation(translation, "- (void)initialize__ OBJC_METHOD_FAMILY_NONE;");
   }
 
   public void testToStringRenaming() throws IOException {

File: src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -917,7 +917,7 @@ public void testSuperReservedName() throws IOException {
         "public class B extends A { B() {} public void init(int b) { super.init(b); }}", "B.java");
     String translation = translateSourceFile("A", "A.h");
     assertTranslation(translation, "- (id)init;");
-    assertTranslation(translation, "- (void)init__WithInt:(int)a;");
+    assertTranslation(translation, "- (void)init__WithInt:(int)a");
     translation = translateSourceFile("B", "B.m");
     assertTranslation(translation, "return (self = JreMemDebugAdd([super init]));");
     assertTranslation(translation, "[super init__WithInt:b];");

File: src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -40,7 +40,7 @@ public void testCopyCloneRenaming() throws IOException {
         "  try { Example e = (Example) super.clone(); e.i = i; return e; } " +
         "  catch (CloneNotSupportedException e) { return null; }}}",
         "Example", "Example.h");
-    assertTranslation(translation, "- (Example *)copy__ OBJC_METHOD_FAMILY_NONE ;");
+    assertTranslation(translation, "- (Example *)copy__ OBJC_METHOD_FAMILY_NONE;");
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone;");
     translation = getTranslatedFile("Example.m");
     assertTranslation(translation, "return (Example *) [self clone];");
@@ -219,7 +219,7 @@ public void testCloneRenamingWithSuperClone() throws IOException {
         "    try { Inner inner = (Inner) super.clone(); inner.i = i; return inner; } " +
         "    catch (CloneNotSupportedException e) { return null; }}}}",
         "Example", "Example.h");
-    assertTranslation(translation, "- (Example *)copy__ OBJC_METHOD_FAMILY_NONE ;");
+    assertTranslation(translation, "- (Example *)copy__ OBJC_METHOD_FAMILY_NONE;");
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone;");
     translation = getTranslatedFile("Example.m");
     assertTranslation(translation, "return (Example *) [self clone];");

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -474,7 +474,6 @@ public void testARCAutoreleasePoolMethod() throws IOException {
       "Test", "Test.m");
     assertTranslation(translation, "- (void)foo {\n" +
         "  @autoreleasepool {\n" +
-        "    {\n    }\n" +
         "  }\n" +
         "}");
   }

File: src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -630,7 +630,8 @@ public void testEnhancedForStatement() throws IOException {
     List<Statement> stmts = translateStatements(source);
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(1));
-    assertTrue(result.contains("{\nint n__"));
+    assertTranslation(result, "int n__ = ");
+    assertTranslation(result, "for (int i__ = 0; i__ < n__; i__++) {");
   }
 
   public void testSwitchStatementWithExpression() throws IOException {
@@ -1256,7 +1257,6 @@ public void testARCAutoreleasePoolForStatement() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "  for (int i = 0; i < 10; i++) {\n" +
         "    @autoreleasepool {\n" +
-        "      {\n      }\n" +
         "    }\n" +
         "  }");
   }

File: src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -840,8 +840,9 @@ public boolean visit(Block node) {
           SuperMethodInvocation invocation = (SuperMethodInvocation) subnode;
           IMethodBinding binding = Types.getMethodBinding(invocation);
           String methodName = NameTable.getName(binding);
-          if ((methodName.equals(DestructorGenerator.FINALIZE_METHOD)) ||
-              (methodName.equals(DestructorGenerator.DEALLOC_METHOD))) {
+          if (Options.memoryDebug() &&
+              ((methodName.equals(DestructorGenerator.FINALIZE_METHOD)) ||
+               (methodName.equals(DestructorGenerator.DEALLOC_METHOD)))) {
             buffer.append("JreMemDebugRemove(self);\n");
           }
         }

File: src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -644,7 +644,7 @@ public boolean visit(Assignment node) {
         }
         buffer.append(" set");
         buffer.append(NameTable.capitalize(var.getName()));
-        String typeName = NameTable.javaTypeToObjC(var.getType(), false);
+        String typeName = NameTable.javaTypeToObjC(var.getType(), true);
         String param = ObjectiveCSourceFileGenerator.parameterKeyword(typeName, var.getType());
         buffer.append(NameTable.capitalize(param));
         buffer.append(':');

File: src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -164,6 +164,8 @@ public boolean visit(ClassInstanceCreation node) {
         if (!parameterType.equals(actualType) &&
             actualType.isAssignmentCompatible(parameterType)) {
           addReference(actualType);
+        } else {
+          addReference(parameterType);
         }
       }
     }

File: src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -130,7 +130,7 @@ public boolean visit(Assignment node) {
 
   @Override
   public boolean visit(ArrayType node) {
-    addReference(Types.getTypeBinding(node.getComponentType()));
+    addReference(Types.getTypeBinding(node).getComponentType());
     return super.visit(node);
   }
 
@@ -293,6 +293,8 @@ public boolean visit(MethodInvocation node) {
         IVariableBinding var = Types.getVariableBinding(expr);
         if (var == null || var.isEnumConstant()) {
           addReference(Types.getTypeBinding(expr));
+        } else {
+          addReference(var.getType());
         }
       }
     }

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/lang/Enum.java
Patch:
@@ -127,6 +127,9 @@ protected final Object clone() throws CloneNotSupportedException {
      * @see java.lang.Comparable
      */
     public final int compareTo(E o) {
+	if (o == null) {
+	    throw new NullPointerException();
+	}
         return ordinal - ((Enum<E>) o).ordinal;
     }
 

File: src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -615,7 +615,7 @@ protected String constructorDeclaration(MethodDeclaration m) {
       for (int i = firstPrinted ? 1 : 0; i < statements.size(); i++) {
         sb.append(generateStatement(statements.get(i), false, true));
       }
-      sb.append("JreMemDebugAdd(self);");
+      sb.append("JreMemDebugAdd(self);\n");
       sb.append("}\nreturn self;\n}");
       methodBody = sb.toString();
     }
@@ -673,7 +673,7 @@ private String enumConstructorDeclaration(MethodDeclaration m, List<Statement> s
       for (int i = 1; i < statements.size(); i++) {
         sb.append(generateStatement(statements.get(i), false, true));
       }
-      sb.append("JreMemDebugAdd(self);");
+      sb.append("JreMemDebugAdd(self);\n");
       sb.append("}\nreturn self;\n}");
     }
     String result = super.constructorDeclaration(m) + " " + reindent(sb.toString()) + "\n\n";

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -503,7 +503,7 @@ public void testInnerConstructorGenerated() throws IOException {
         "Test", "Test.m");
     assertTranslation(translation, "- (id)initWithInt:(int)i {");
     assertTranslation(translation, "- (id)initTestWithInt:(int)i {");
-    assertTranslation(translation, "[self initTestWithInt:42];");
+    assertTranslation(translation, "[self initTestWithInt:42]");
   }
 
   public void testInnerConstructorGeneratedForNonStaticInnerClass() throws IOException {

File: src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -408,7 +408,7 @@ public void testInnerClassSuperConstructor() throws IOException {
       "static class Two extends One { Two(int i) { super(i); }}}",
       "Test", "Test.m");
     assertTranslation(translation, "- (id)initWithInt:(int)i");
-    assertTranslation(translation, "return [super initWithInt:i];");
+    assertTranslation(translation, "[super initWithInt:i]");
   }
 
   public void testStaticInnerClassSuperFieldAccess() throws IOException {
@@ -892,7 +892,7 @@ public void testSuperReservedName() throws IOException {
     assertTranslation(translation, "- (id)init;");
     assertTranslation(translation, "- (void)init__WithInt:(int)a;");
     translation = translateSourceFile("B", "B.m");
-    assertTranslation(translation, "return (self = [super init]);");
+    assertTranslation(translation, "return (self = JreMemDebugAdd([super init]));");
     assertTranslation(translation, "[super init__WithInt:b];");
   }
 

File: src/test/java/com/google/devtools/j2objc/translate/AnonymousClassConverterTest.java
Patch:
@@ -514,7 +514,7 @@ public void testEnumWithParametersAndInnerClasses() throws IOException {
         "- (id)initWithInt:(int)n\n" +
         "     withNSString:(NSString *)name\n" +
         "          withInt:(int)ordinal {\n" +
-        "  return [super initWithNSString:name withInt:ordinal];\n}");
+        "  return JreMemDebugAdd([super initWithNSString:name withInt:ordinal]);\n}");
 
     // Verify ColorEnum_$1 constructor.
     assertTranslation(impl,
@@ -524,6 +524,7 @@ public void testEnumWithParametersAndInnerClasses() throws IOException {
         "                withInt:(int)ordinal {\n" +
         "  if ((self = [super initWithInt:arg$0 withNSString:name withInt:ordinal])) {\n" +
         "    JreOperatorRetainedAssign(&this$0_, outer$1);\n" +
+        "    JreMemDebugAdd(self);\n" +
         "  }\n" +
         "  return self;\n}");
 

File: src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -106,7 +106,7 @@ public void testStaticVarInitialization() {
     TypeDeclaration clazz =
         translateClassBody("static java.util.Date date = new java.util.Date();");
     List<BodyDeclaration> classMembers = clazz.bodyDeclarations();
-    assertEquals(4, classMembers.size()); // added two accessors and initialize method
+    assertEquals(5, classMembers.size()); // added two accessors and initialize method
 
     // test that initializer was stripped from the declaration
     BodyDeclaration decl = classMembers.get(0);
@@ -224,7 +224,7 @@ public void testInitializationBlock() {
   public void testStaticInitializerBlock() {
     TypeDeclaration clazz = translateClassBody("static { System.out.println(\"foo\"); }");
     List<BodyDeclaration> classMembers = clazz.bodyDeclarations();
-    assertEquals(1, classMembers.size());
+    assertEquals(2, classMembers.size());
 
     // test that a static initialize() method was created
     BodyDeclaration decl = classMembers.get(0);
@@ -246,7 +246,7 @@ public void testIsDesignatedConstructor() {
     TypeDeclaration clazz = translateClassBody(
         "Test() { this(42); } Test(int i) {} Test(int i, byte b) { System.out.print(b); }");
     List<BodyDeclaration> classMembers = clazz.bodyDeclarations();
-    assertEquals(3, classMembers.size());
+    assertEquals(4, classMembers.size());
 
     BodyDeclaration decl = classMembers.get(0);
     assertTrue(decl instanceof MethodDeclaration);

File: src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -350,13 +350,13 @@ public static String translate(CompilationUnit unit, String source) {
     // Add auto-boxing conversions.
     new Autoboxer(unit.getAST()).run(unit);
 
-    // Normalize init statements
-    new InitializationNormalizer().run(unit);
-
     // Extract inner and anonymous classes
     new AnonymousClassConverter(unit).run(unit);
     new InnerClassExtractor(unit).run(unit);
 
+    // Normalize init statements
+    new InitializationNormalizer().run(unit);
+
     // Translate core Java type use to similar iOS types
     new JavaToIOSTypeConverter().run(unit);
     Map<String, String> methodMappings = Options.getMethodMappings();

File: src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -523,9 +523,7 @@ private void printProperties(FieldDeclaration[] fields) {
           IVariableBinding varBinding = Types.getVariableBinding(var);
           if (type.isPrimitive()) {
             print("assign");
-          } else if (Types.isWeakReference(varBinding) ||
-              (varBinding.getName().startsWith("this$") &&
-                  Types.hasWeakAnnotation(varBinding.getDeclaringClass()))) {
+          } else if (Types.isWeakReference(varBinding)) {
             print(Options.useARC() ? "weak" : "assign");
           } else if (type.isEqualTo(Types.getNSString())) {
             print("copy");

File: src/main/java/com/google/devtools/j2objc/gen/StatementGenerator.java
Patch:
@@ -758,8 +758,7 @@ private boolean isLeftHandSideRetainedProperty(Expression lhs) {
       IVariableBinding var = Types.getVariableBinding(lhs);
       ITypeBinding type = Types.getTypeBinding(lhs);
       if (!type.isPrimitive() && lhs instanceof SimpleName) {
-        if (isProperty((SimpleName) lhs) && !Types.hasWeakAnnotation(var.getDeclaringClass()) &&
-            !Types.isWeakReference(var)) {
+        if (isProperty((SimpleName) lhs) && !Types.isWeakReference(var)) {
           isRetainedProperty = true;
         }
         else if (isStaticVariableAccess(lhs)) {

File: src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -350,13 +350,13 @@ public static String translate(CompilationUnit unit, String source) {
     // Add auto-boxing conversions.
     new Autoboxer(unit.getAST()).run(unit);
 
-    // Normalize init statements
-    new InitializationNormalizer().run(unit);
-
     // Extract inner and anonymous classes
     new AnonymousClassConverter(unit).run(unit);
     new InnerClassExtractor(unit).run(unit);
 
+    // Normalize init statements
+    new InitializationNormalizer().run(unit);
+
     // Translate core Java type use to similar iOS types
     new JavaToIOSTypeConverter().run(unit);
     Map<String, String> methodMappings = Options.getMethodMappings();

File: src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -350,13 +350,13 @@ public static String translate(CompilationUnit unit, String source) {
     // Add auto-boxing conversions.
     new Autoboxer(unit.getAST()).run(unit);
 
-    // Normalize init statements
-    new InitializationNormalizer().run(unit);
-
     // Extract inner and anonymous classes
     new AnonymousClassConverter(unit).run(unit);
     new InnerClassExtractor(unit).run(unit);
 
+    // Normalize init statements
+    new InitializationNormalizer().run(unit);
+
     // Translate core Java type use to similar iOS types
     new JavaToIOSTypeConverter().run(unit);
     Map<String, String> methodMappings = Options.getMethodMappings();

File: src/main/java/com/google/devtools/j2objc/translate/Rewriter.java
Patch:
@@ -453,7 +453,6 @@ private static <E extends Statement> E insertStatement(E node, Statement toInser
     return node;
   }
 
-  @SuppressWarnings("unchecked")
   @Override
   public boolean visit(LabeledStatement node) {
     Statement loopBody = getLoopBody(node.getBody());
@@ -483,7 +482,6 @@ public void endVisit(BreakStatement node) {
       }
     });
 
-    List<Statement> stmts = null;
     if (hasContinue[0]) {
       LabeledStatement newLabelStmt = ast.newLabeledStatement();
       newLabelStmt.setLabel(Types.newLabel("continue_" + labelIdentifier));
@@ -770,7 +768,8 @@ private boolean rewriteSystemOut(MethodInvocation node) {
             ASTNode newArg = NodeCopier.copySubtree(ast, arg);
             if (arg instanceof MethodInvocation) {
               IMethodBinding argBinding = ((MethodInvocation) arg).resolveMethodBinding();
-              if (!argBinding.getReturnType().isPrimitive()) {
+              if (!argBinding.getReturnType().isPrimitive() &&
+                  !Types.isJavaStringType(argBinding.getReturnType())) {
                 IOSMethodBinding newBinding =
                     new IOSMethodBinding("format", argBinding, Types.getNSString());
                 Types.addMappedInvocation((MethodInvocation) newArg, newBinding);

File: src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -336,7 +336,7 @@ public static String javaTypeToObjC(Type type, boolean includeInterfaces) {
 
   public static String javaTypeToObjC(ITypeBinding binding, boolean includeInterfaces) {
     if (binding.isInterface() && !includeInterfaces || binding == Types.resolveIOSType("id") ||
-        binding == Types.resolveIOSType("NSObject")) {
+        binding == Types.resolveIOSType("NSObject") || Types.isJavaObjectType(binding)) {
       return NameTable.ID_TYPE;
     }
     if (binding.isTypeVariable()) {

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGeneratorTest.java
Patch:
@@ -174,9 +174,9 @@ public void testToStringRenaming() throws IOException {
 
   public void testMultipleObjectDeclaration() throws IOException {
     String translation = translateSourceFile(
-      "public class Example { Object one, two, three; }",
+      "public class Example { String one, two, three; }",
       "Example", "Example.h");
-    assertTranslation(translation, "NSObject *one_, *two_, *three_;");
+    assertTranslation(translation, "NSString *one_, *two_, *three_;");
   }
 
   public void testMultiplePrimitiveDeclaration() throws IOException {

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -292,8 +292,8 @@ public void testClassField() throws IOException {
     assertTranslation(translation, "+ (void)setFieldPhiWithInt:(int)fieldPhi {");
     assertTranslation(translation, "FooBar_fieldPhi_ = fieldPhi;");
     translation = getTranslatedFile("FooBar.h");
-    assertTranslation(translation, "NSObject *fieldFoo_;");
-    assertTranslation(translation, "NSObject *fieldJar_;");
+    assertTranslation(translation, "id fieldFoo_;");
+    assertTranslation(translation, "id fieldJar_;");
     assertTranslation(translation, "int newFieldBar_;");
     assertTranslation(translation, "@property (nonatomic, retain) id fieldFoo;");
     assertTranslation(translation, "@property (nonatomic, assign) id fieldJar;");

File: src/test/java/com/google/devtools/j2objc/gen/PrimitiveArrayTest.java
Patch:
@@ -144,7 +144,7 @@ public void testObjectArrayAccess() {
         "Object[] foo = new Object[3]; Object o = foo[1];");
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(1));
-    assertEquals("NSObject *o = [((IOSObjectArray *) NIL_CHK(foo)) objectAtIndex:1];", result);
+    assertEquals("id o = [((IOSObjectArray *) NIL_CHK(foo)) objectAtIndex:1];", result);
 
     stmts = translateStatements("Exception[] foo = new Exception[3]; Exception o = foo[1];");
     assertEquals(2, stmts.size());

File: src/main/java/com/google/devtools/j2objc/util/UnicodeUtils.java
Patch:
@@ -66,7 +66,7 @@ static String escapeUnicodeSequences(String s, boolean logErrorMessage) {
             if (!isValidCppCharacter(value)) {
               if (logErrorMessage) {
                 J2ObjC.error(String.format("Illegal C/C++ Unicode character \\u%4x in \"%s\"",
-                    value, s));
+                    (int) value, s));
               } else {
                 J2ObjC.error();
               }

File: src/main/java/com/google/devtools/j2objc/translate/Autoboxer.java
Patch:
@@ -483,8 +483,8 @@ private void getFormatPrimitiveArgs(List<Expression> args, int formatArg,
       }
 
       // Set if specifier requires a primitive argument.
-      if (c == 'c' || c == 'd' || c == 'o' || c == 'x' || c == 'X' || c == 'e' || c == 'f' ||
-          c == 'g' || c == 'a' || c == 'A') {
+      if (c == 'c' || c == 'C' || c == 'd' || c == 'o' || c == 'x' || c == 'X' || c == 'e' ||
+          c == 'f' || c == 'g' || c == 'a' || c == 'A') {
         primitiveFormatArgs.set(currentArgument);
       }
       currentArgument++;

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCSourceFileGeneratorTest.java
Patch:
@@ -66,8 +66,6 @@ public void testAcceptJsniDelimiters() throws IOException {
     assertTranslation(translation, "ocni();");
     assertFalse(translation.contains("jsni();"));
     assertFalse(translation.contains("test2"));
-    translation = getTranslatedFile("Example.h");
-    assertFalse(translation.contains("test2"));
     assertWarningCount(1); // No native code for jsni().
     assertTranslationLog("no native code");
   }

File: src/main/java/com/google/devtools/j2objc/types/ImplementationImportCollector.java
Patch:
@@ -110,7 +110,9 @@ private void declareType(AbstractTypeDeclaration type, String mainType) {
 
   @Override
   public boolean visit(ArrayAccess node) {
-    addReference(Types.getTypeBinding(node));
+    ITypeBinding componentType = Types.getTypeBinding(node);
+    addReference(componentType);
+    addReference(Types.resolveArrayType(componentType));
     return super.visit(node);
   }
 

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/lang/Enum.java
Patch:
@@ -168,7 +168,7 @@ public static <T extends Enum<T>> T valueOf(Class<T> enumType, String name) {
             throw new IllegalArgumentException(enumType.getSimpleName() + " is not an enum type");
         }
         for (T enumConst : values) {
-            if (enumConst.name.equals(name)) {
+            if (enumConst.name().equals(name)) {
                 return enumConst;
             }
         }

File: src/main/java/com/google/devtools/j2objc/Options.java
Patch:
@@ -274,9 +274,10 @@ private static void addPrefixesFile(String filename) throws IOException {
     addPrefixProperties(props);
   }
 
-  private static void addPrefixProperties(Properties props) {
+  @VisibleForTesting
+  static void addPrefixProperties(Properties props) {
     for (String pkg : props.stringPropertyNames()) {
-      addPackagePrefix(pkg, props.getProperty(pkg));
+      addPackagePrefix(pkg, props.getProperty(pkg).trim());
     }
   }
 

File: src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -76,6 +76,7 @@ public class SmallTests {
     ObjectiveCHeaderGeneratorTest.class,
     ObjectiveCImplementationGeneratorTest.class,
     ObjectiveCSourceFileGeneratorTest.class,
+    OptionsTest.class,
     PrimitiveArrayTest.class,
     ProGuardUsageParserTest.class,
     RenamedTypeBindingTest.class,

File: src/test/java/com/google/devtools/j2objc/util/UnicodeUtilsTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.google.devtools.j2objc.util;
 
 import com.google.devtools.j2objc.GenerationTest;
-import com.google.devtools.j2objc.J2ObjC;
 
 /**
  * Unit tests for {@link UnicodeUtils}.
@@ -45,7 +44,7 @@ public void testUnicodeEscapeSequenceFragment() {
   public void testIllegalUnicodeEscapeSequence() {
     String fragment = "abc\\uffff";
     String escaped = UnicodeUtils.escapeUnicodeSequences(fragment, false);
-    assertEquals(1, J2ObjC.getErrorCount());
+    assertErrorCount(1);
 
     // Verify string wasn't modified (it's useful as a diagnostic).
     assertEquals(fragment, escaped);

File: src/main/java/com/google/devtools/j2objc/util/NameTable.java
Patch:
@@ -429,7 +429,7 @@ public static String getFullName(ITypeBinding binding) {
         outerBinding = outerBinding.getDeclaringClass();
       }
       String baseName = getFullName(outerBinding) + prefix + '_' + getName(binding);
-      return outerBinding.isEnum() ? baseName : baseName + suffix;
+      return (outerBinding.isEnum() && binding.isAnonymous()) ? baseName : baseName + suffix;
     }
     IPackageBinding pkg = binding.getPackage();
     String pkgName = pkg != null ? getPrefix(pkg.getName()) : "";

File: src/main/java/com/google/devtools/j2objc/types/IOSMethodBinding.java
Patch:
@@ -192,7 +192,7 @@ public boolean isVarargs() {
 
   @Override
   public boolean overrides(IMethodBinding method) {
-    return delegate.overrides(method);
+    return delegate.equals(method) || delegate.overrides(method);
   }
 
   public IMethodBinding getDelegate() {

File: src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1033,7 +1033,7 @@ public void testThisCallInInnerConstructor() throws IOException {
         "    public Inner() { }" +
         "    public Inner(int foo) { this(); int i = foo; }}}",
         "Test", "Test.m");
-    assertTranslation(translation, "self = [self initWithTest:outer$1]");
+    assertTranslation(translation, "self = [self initTest_InnerWithTest:outer$1]");
   }
 
   public void testDoubleModulo() throws IOException {

File: src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -79,7 +79,7 @@ public void testThisConstructorCallInlined() throws IOException {
         "Test() { this(true); b2 = true; }" +
         "Test(boolean b) { b1 = b; }}";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslation(translation, "if ((self = [self initWithBOOL:YES])) {");
+    assertTranslation(translation, "if ((self = [self initTestWithBOOL:YES])) {");
   }
 
   /**

File: src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1033,7 +1033,7 @@ public void testThisCallInInnerConstructor() throws IOException {
         "    public Inner() { }" +
         "    public Inner(int foo) { this(); int i = foo; }}}",
         "Test", "Test.m");
-    assertTranslation(translation, "self = [self initTest_InnerWithTest:outer$1]");
+    assertTranslation(translation, "self = [self initWithTest:outer$1]");
   }
 
   public void testDoubleModulo() throws IOException {

File: src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -79,7 +79,7 @@ public void testThisConstructorCallInlined() throws IOException {
         "Test() { this(true); b2 = true; }" +
         "Test(boolean b) { b1 = b; }}";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslation(translation, "if ((self = [self initTestWithBOOL:YES])) {");
+    assertTranslation(translation, "if ((self = [self initWithBOOL:YES])) {");
   }
 
   /**

File: src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -1033,7 +1033,7 @@ public void testThisCallInInnerConstructor() throws IOException {
         "    public Inner() { }" +
         "    public Inner(int foo) { this(); int i = foo; }}}",
         "Test", "Test.m");
-    assertTranslation(translation, "self = [self initWithTest:outer$1]");
+    assertTranslation(translation, "self = [self initTest_InnerWithTest:outer$1]");
   }
 
   public void testDoubleModulo() throws IOException {

File: src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -79,7 +79,7 @@ public void testThisConstructorCallInlined() throws IOException {
         "Test() { this(true); b2 = true; }" +
         "Test(boolean b) { b1 = b; }}";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslation(translation, "if ((self = [self initWithBOOL:YES])) {");
+    assertTranslation(translation, "if ((self = [self initTestWithBOOL:YES])) {");
   }
 
   /**

File: src/test/java/com/google/devtools/j2objc/gen/StatementGeneratorTest.java
Patch:
@@ -799,7 +799,8 @@ public void testArrayInstanceOfTranslation() throws IOException {
     assertEquals(2, stmts.size());
     String result = generateStatement(stmts.get(1));
     assertEquals(
-        "if ([[(IOSArray *) args elementType] isEqual:[NSString class]]) {\n}", result);
+        "if ([args isKindOfClass:[IOSArray class]] ? " +
+        "[[(IOSArray *) args elementType] isEqual:[NSString class]] : NO) {\n}", result);
   }
 
   public void testObjectArrayInitializer() throws IOException {

File: src/main/java/com/google/devtools/j2objc/util/UnicodeUtils.java
Patch:
@@ -141,7 +141,7 @@ public static String escapeCharacter(int value) {
   public static boolean isValidCppCharacter(char c) {
     // This would be more efficiently implemented as a bitmap, but since it's
     // not used in performance-critical code, this form is easier to inspect.
-    return c < 0xe000 ||
+    return c < 0xd800 ||
         c >= 0xf900 && c <= 0xfad9 ||
         c >= 0xfb50 && c <= 0xfbc1 ||
         c >= 0xfbd3 && c <= 0xfd3f ||

File: src/test/java/com/google/devtools/j2objc/translate/AutoboxerTest.java
Patch:
@@ -278,14 +278,15 @@ public void testFieldArrayInitializerUnboxed() throws IOException {
   public void testBoxedTypeLiteral() throws IOException {
     String source = "public class Test { Class c = int.class; }";
     String translation = translateSourceFile(source, "Test", "Test.m");
-    assertTranslation(translation, "c_ = [[JavaLangInteger TYPE] retain]");
+    assertTranslation(translation, "JreOperatorRetainedAssign(&c_, [JavaLangInteger TYPE]);");
   }
 
   public void testBoxedLhsOperatorAssignment() throws IOException {
     String source = "public class Test { Integer i = 1; void foo() { i *= 2; } }";
     String translation = translateSourceFile(source, "Test", "Test.m");
     assertTranslation(translation,
-        "i_ = [[JavaLangInteger valueOfWithInt:[((JavaLangInteger *) NIL_CHK(i_)) intValue] * 2]");
+        "JreOperatorRetainedAssign(&i_, " +
+        "[JavaLangInteger valueOfWithInt:[((JavaLangInteger *) NIL_CHK(i_)) intValue] * 2]);");
   }
 
   public void testBoxedEnumConstructorArgs() throws IOException {

File: src/test/java/com/google/devtools/j2objc/translate/InitializationNormalizerTest.java
Patch:
@@ -75,7 +75,7 @@ private TypeDeclaration translateClassBody(String testSource) {
    */
   public void testThisConstructorCallInlined() throws IOException {
     String source = "class Test {" +
-    	"boolean b1; boolean b2;" +
+        "boolean b1; boolean b2;" +
         "Test() { this(true); b2 = true; }" +
         "Test(boolean b) { b1 = b; }}";
     String translation = translateSourceFile(source, "Test", "Test.m");
@@ -97,8 +97,8 @@ public void testFieldArrayInitializer() throws IOException {
         "  }; }}";
     String translation = translateSourceFile(source, "Distance", "Distance.m");
     assertTranslation(translation,
-        "[IOSObjectArray arrayWithObjects:(id[]){ [[Distance_SimplexVertex alloc] " +
-        "initWithDistance:this$0_] } " +
+        "[IOSObjectArray arrayWithObjects:(id[]){ [[[Distance_SimplexVertex alloc] " +
+        "initWithDistance:this$0_] autorelease] } " +
         "count:1 type:[IOSClass classWithClass:[Distance_SimplexVertex class]]]");
   }
 

File: src/test/java/com/google/devtools/j2objc/translate/JavaToIOSMethodTranslatorTest.java
Patch:
@@ -40,7 +40,7 @@ public void testCopyCloneRenaming() throws IOException {
         "  try { Example e = (Example) super.clone(); e.i = i; return e; } " +
         "  catch (CloneNotSupportedException e) { return null; }}}",
         "Example", "Example.h");
-    assertTranslation(translation, "- (Example *)copy__;");
+    assertTranslation(translation, "- (Example *)copy__ OBJC_METHOD_FAMILY_NONE ;");
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone;");
     translation = getTranslatedFile("Example.m");
     assertTranslation(translation, "return (Example *) [self clone];");
@@ -206,7 +206,7 @@ public void testCloneMethodAddedToCloneable() throws IOException {
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone;");
     translation = getTranslatedFile("Example.m");
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone {");
-    assertTranslation(translation, "return [self clone];");
+    assertTranslation(translation, "return [[self clone] retain];");
   }
 
   public void testCloneRenamingWithSuperClone() throws IOException {
@@ -219,7 +219,7 @@ public void testCloneRenamingWithSuperClone() throws IOException {
         "    try { Inner inner = (Inner) super.clone(); inner.i = i; return inner; } " +
         "    catch (CloneNotSupportedException e) { return null; }}}}",
         "Example", "Example.h");
-    assertTranslation(translation, "- (Example *)copy__;");
+    assertTranslation(translation, "- (Example *)copy__ OBJC_METHOD_FAMILY_NONE ;");
     assertTranslation(translation, "- (id)copyWithZone:(NSZone *)zone;");
     translation = getTranslatedFile("Example.m");
     assertTranslation(translation, "return (Example *) [self clone];");

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/Collections.java
Patch:
@@ -3249,6 +3249,7 @@ public native Object[] toArray() /*-{
               IOSClass *type = [IOSClass classWithClass:[NSObject class]];
               IOSObjectArray *result =
                   [[IOSObjectArray alloc] initWithLength:[self size] type:type];
+              AUTORELEASE(result);
               return [self toArrayWithNSObjectArray:result];
             }-*/;
 

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/Collections.java
Patch:
@@ -1166,6 +1166,9 @@ public native <T> T[] toArray(T[] contents) /*-{
                   contents =
                       [[IOSObjectArray alloc] initWithLength:[self size]
                                                         type:[IOSClass classWithClass:[NSObject class]]];
+#if ! __has_feature(objc_arc)
+                  [contents autorelease];
+#endif
                 }
                 NSUInteger i = 0;
                 id<JavaUtilIterator> it = [self iterator];

File: jre_emul/Classes/java/lang/Thread.java
Patch:
@@ -578,6 +578,9 @@ private final native void join0(long millis, int pollInterval)
       }
       if ([thread isCancelled]) {
         JavaLangInterruptedException *npe = [[JavaLangInterruptedException alloc] init];
+#if !__has_feature(objc_arc)
+        [npe autorelease];
+#endif
         @throw (ARCBRIDGE JavaLangInterruptedException *) npe;
       }
     ]-*/;

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/io/FileOutputStream.java
Patch:
@@ -82,7 +82,7 @@ public FileOutputStream(File file, boolean append)
     
     private native long open(String path, boolean append) throws FileNotFoundException /*-{
       int flags = O_WRONLY | O_CREAT | (append ? O_APPEND : O_TRUNC);
-      return (long long) open([path UTF8String], flags);
+      return (long long) open([path UTF8String], flags, 0644);
     }-*/;
     
     /**

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/io/OutputStreamWriter.java
Patch:
@@ -170,6 +170,8 @@ private native void convert(char[] buf, int offset, int count) /*-{
 #if ! __has_feature(objc_arc)
         [e autorelease];
 #endif
+        [s release];
+        free(bytes);
         @throw e;
       }
       [s release];

File: src/main/java/com/google/devtools/j2objc/translate/InnerClassExtractor.java
Patch:
@@ -236,7 +236,7 @@ private class OuterReferenceFixer extends TypeTrackingVisitor {
 
     @Override
     public boolean visit(ClassInstanceCreation node) {
-      IMethodBinding binding = Types.getMethodBinding(node);
+      IMethodBinding binding = Types.getMethodBinding(node).getMethodDeclaration();
       ITypeBinding newType = Types.getTypeBinding(node);
       Expression outer = node.getExpression();
       ITypeBinding outerType = outer == null ? null : Types.getTypeBinding(outer);

File: src/main/java/com/google/devtools/j2objc/types/Types.java
Patch:
@@ -1071,7 +1071,9 @@ private static String getSignature(IMethodBinding binding) {
       appendParameterSignature(parameter.getErasure(), sb);
     }
     sb.append(')');
-    appendParameterSignature(binding.getReturnType().getErasure(), sb);
+    if (binding.getReturnType() != null) {
+      appendParameterSignature(binding.getReturnType().getErasure(), sb);
+    }
     return sb.toString();
   }
 

File: src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java
Patch:
@@ -315,7 +315,7 @@ protected void generate(EnumDeclaration node) {
 
       // Common-case: no extra fields and no constant anonymous classes.
       if (args.isEmpty() && isSimpleEnum) {
-        printf("WithNSString:@\"%s_%s\" withInt:%d];\n", typeName.replace("Enum", ""), name, i);
+        printf("WithNSString:@\"%s\" withInt:%d];\n", name, i);
       } else {
         String argString = StatementGenerator.generateArguments(Types.getMethodBinding(constant),
             args, fieldHiders, getBuilder().getCurrentLine());

File: src/test/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGeneratorTest.java
Patch:
@@ -223,7 +223,7 @@ public void testEnum() throws IOException {
     assertTranslation(translation, "@implementation ColorEnum");
     assertTranslation(translation, "return ColorEnum_RED;");
     assertTranslation(translation,
-        "ColorEnum_RED = [[ColorEnum alloc] initWithNSString:@\"Color_RED\" withInt:0];");
+        "ColorEnum_RED = [[ColorEnum alloc] initWithNSString:@\"RED\" withInt:0];");
     assertTranslation(translation,
         "ColorEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ " +
         "ColorEnum_RED, ColorEnum_WHITE, ColorEnum_BLUE, nil } " +

File: src/main/java/com/google/devtools/j2objc/J2ObjC.java
Patch:
@@ -733,6 +733,9 @@ public static void main(String[] args) {
     String[] files = null;
     try {
       files = Options.load(args);
+      if (nFiles == 0) {
+        Options.help(); // Exits, due to no files specified.
+      }
     } catch (IOException e) {
       error(e.getMessage());
       System.exit(1);

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/HashSet.java
Patch:
@@ -27,6 +27,7 @@ public class HashSet<E> extends AbstractSet<E> implements Set<E>, Cloneable,
         Serializable {
 
     private static final long serialVersionUID = -5024744406713321676L;
+    private final HashSet<E> dummyKey = (HashSet<E>) new Object();
 
     transient HashMap<E, HashSet<E>> backingMap;
 
@@ -89,7 +90,7 @@ public HashSet(Collection<? extends E> collection) {
      */
     @Override
     public boolean add(E object) {
-        return backingMap.put(object, this) == null;
+        return backingMap.put(object, dummyKey) == null;
     }
 
     /**

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/LinkedList.java
Patch:
@@ -18,6 +18,7 @@
 package java.util;
 
 import java.io.Serializable;
+import com.google.j2objc.annotations.Weak;
 
 /**
  * LinkedList is an implementation of List, backed by a linked list. All
@@ -38,7 +39,8 @@ public class LinkedList<E> extends AbstractSequentialList<E> implements
     private static final class Link<ET> {
         ET data;
 
-        Link<ET> previous, next;
+        @Weak Link<ET> previous;
+        Link<ET> next;
 
         Link(ET o, Link<ET> p, Link<ET> n) {
             data = o;

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/AbstractCollection.java
Patch:
@@ -344,7 +344,7 @@ public native Object[] toArray() /*-{
           [[IOSObjectArray alloc] initWithLength:[self size]
                                             type:[IOSClass classWithClass:[NSObject class]]];
 #if ! __has_feature(objc_arc)
-      [contents result];
+      [result autorelease];
 #endif
       return [self toArrayWithNSObjectArray:result];
     }-*/;

File: jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/AbstractCollection.java
Patch:
@@ -343,6 +343,9 @@ public native Object[] toArray() /*-{
       IOSObjectArray *result =
           [[IOSObjectArray alloc] initWithLength:[self size]
                                             type:[IOSClass classWithClass:[NSObject class]]];
+#if ! __has_feature(objc_arc)
+      [contents result];
+#endif
       return [self toArrayWithNSObjectArray:result];
     }-*/;
 

File: src/main/java/com/google/devtools/j2objc/gen/ObjectiveCHeaderGenerator.java
Patch:
@@ -142,7 +142,7 @@ public void generate(TypeDeclaration node) {
 
     ITypeBinding binding = Types.getTypeBinding(node);
     String pkg = binding.getPackage().getName();
-    if (NameTable.hasPrefix(pkg)) {
+    if (NameTable.hasPrefix(pkg) && binding.isTopLevel()) {
       String unprefixedName = NameTable.camelCaseQualifiedName(binding.getQualifiedName());
       if (binding.isInterface()) {
         // Protocols can't be used in typedefs.

File: src/test/java/com/google/devtools/j2objc/SmallTests.java
Patch:
@@ -41,6 +41,7 @@
 import com.google.devtools.j2objc.types.TypesTest;
 import com.google.devtools.j2objc.util.DeadCodeMapTest;
 import com.google.devtools.j2objc.util.ErrorReportingASTVisitorTest;
+import com.google.devtools.j2objc.util.NameTableTest;
 import com.google.devtools.j2objc.util.ProGuardUsageParserTest;
 import com.google.devtools.j2objc.util.UnicodeUtilsTest;
 
@@ -71,6 +72,7 @@ public class SmallTests {
     JavaToIOSMethodTranslatorTest.class,
     LineDirectivesTest.class,
     ModifiedTypeBindingTest.class,
+    NameTableTest.class,
     ObjectiveCHeaderGeneratorTest.class,
     ObjectiveCImplementationGeneratorTest.class,
     ObjectiveCSourceFileGeneratorTest.class,

