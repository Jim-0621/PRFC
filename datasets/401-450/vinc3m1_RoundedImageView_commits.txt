File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedDrawable.java
Patch:
@@ -38,6 +38,7 @@
 import android.widget.ImageView.ScaleType;
 import java.util.HashSet;
 import java.util.Set;
+import java.lang.Throwable;
 
 @SuppressWarnings("UnusedDeclaration")
 public class RoundedDrawable extends Drawable {
@@ -135,7 +136,7 @@ public static Bitmap drawableToBitmap(Drawable drawable) {
       Canvas canvas = new Canvas(bitmap);
       drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
       drawable.draw(canvas);
-    } catch (Exception e) {
+    } catch (Throwable e) {
       e.printStackTrace();
       Log.w(TAG, "Failed to create bitmap from drawable!");
       bitmap = null;

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedDrawable.java
Patch:
@@ -1,5 +1,5 @@
 /*
-* Copyright (C) 2015 Vincent Mi
+* Copyright (C) 2017 Vincent Mi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -61,8 +61,8 @@ public class RoundedDrawable extends Drawable {
   private Shader.TileMode mTileModeY = Shader.TileMode.CLAMP;
   private boolean mRebuildShader = true;
 
-  // [ topLeft, topRight, bottomLeft, bottomRight ]
   private float mCornerRadius = 0f;
+  // [ topLeft, topRight, bottomLeft, bottomRight ]
   private final boolean[] mCornersRounded = new boolean[] { true, true, true, true };
 
   private boolean mOval = false;

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedImageView.java
Patch:
@@ -74,7 +74,7 @@ public class RoundedImageView extends ImageView {
   private boolean mMutateBackground = false;
   private int mResource;
   private int mBackgroundResource;
-  private ScaleType mScaleType = ScaleType.FIT_CENTER;
+  private ScaleType mScaleType;
   private Shader.TileMode mTileModeX = DEFAULT_TILE_MODE;
   private Shader.TileMode mTileModeY = DEFAULT_TILE_MODE;
 

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedImageView.java
Patch:
@@ -74,7 +74,7 @@ public class RoundedImageView extends ImageView {
   private boolean mMutateBackground = false;
   private int mResource;
   private int mBackgroundResource;
-  private ScaleType mScaleType = ScaleType.FIT_CENTER;
+  private ScaleType mScaleType;
   private Shader.TileMode mTileModeX = DEFAULT_TILE_MODE;
   private Shader.TileMode mTileModeY = DEFAULT_TILE_MODE;
 

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedDrawable.java
Patch:
@@ -197,7 +197,8 @@ private void updateShaderMatrix() {
         }
 
         mShaderMatrix.setScale(scale, scale);
-        mShaderMatrix.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
+        mShaderMatrix.postTranslate((int) (dx + 0.5f) + mBorderWidth / 2,
+            (int) (dy + 0.5f) + mBorderWidth / 2);
         break;
 
       case CENTER_INSIDE:

File: example/src/main/java/com/makeramen/roundedimageview/example/ExampleActivity.java
Patch:
@@ -21,7 +21,6 @@
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
 import android.widget.Spinner;

File: example/src/main/java/com/makeramen/roundedimageview/example/RoundedFragment.java
Patch:
@@ -23,15 +23,13 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
-import android.util.TypedValue;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.ImageView.ScaleType;
 import android.widget.ListView;
 import android.widget.TextView;
-import com.makeramen.roundedimageview.RoundedDrawable;
 import com.makeramen.roundedimageview.RoundedImageView;
 
 public class RoundedFragment extends Fragment {

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedDrawable.java
Patch:
@@ -304,7 +304,9 @@ public void draw(@NonNull Canvas canvas) {
         }
       } else {
         canvas.drawRect(mDrawableRect, mBitmapPaint);
-        canvas.drawRect(mBorderRect, mBorderPaint);
+        if (mBorderWidth > 0) {
+          canvas.drawRect(mBorderRect, mBorderPaint);
+        }
       }
     }
   }

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedDrawable.java
Patch:
@@ -201,8 +201,7 @@ private void updateShaderMatrix() {
         }
 
         mShaderMatrix.setScale(scale, scale);
-        mShaderMatrix.postTranslate((int) (dx + 0.5f) + mBorderWidth,
-            (int) (dy + 0.5f) + mBorderWidth);
+        mShaderMatrix.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
         break;
 
       case CENTER_INSIDE:

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedImageView.java
Patch:
@@ -336,6 +336,7 @@ public void setCornerRadius(float radius) {
     cornerRadius = radius;
     updateDrawableAttrs();
     updateBackgroundDrawableAttrs(false);
+    invalidate();
   }
 
   public float getBorderWidth() {

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedImageView.java
Patch:
@@ -336,6 +336,7 @@ public void setCornerRadius(float radius) {
     cornerRadius = radius;
     updateDrawableAttrs();
     updateBackgroundDrawableAttrs(false);
+    invalidate();
   }
 
   public float getBorderWidth() {

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedDrawable.java
Patch:
@@ -110,8 +110,6 @@ public static Drawable fromDrawable(Drawable drawable) {
       Bitmap bm = drawableToBitmap(drawable);
       if (bm != null) {
         return new RoundedDrawable(bm);
-      } else {
-        Log.w(TAG, "Failed to create bitmap from drawable!");
       }
     }
     return drawable;
@@ -132,6 +130,7 @@ public static Bitmap drawableToBitmap(Drawable drawable) {
       drawable.draw(canvas);
     } catch (Exception e) {
       e.printStackTrace();
+      Log.w(TAG, "Failed to create bitmap from drawable!");
       bitmap = null;
     }
 

File: example/src/main/java/com/makeramen/roundedimageview/example/ColorFragment.java
Patch:
@@ -14,11 +14,11 @@
 * limitations under the License.
 */
 
-package com.makeramen.example;
+package com.makeramen.roundedimageview.example;
 
-import android.app.Fragment;
 import android.content.Context;
 import android.os.Bundle;
+import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;

File: example/src/main/java/com/makeramen/roundedimageview/example/PicassoFragment.java
Patch:
@@ -14,12 +14,12 @@
 * limitations under the License.
 */
 
-package com.makeramen.example;
+package com.makeramen.roundedimageview.example;
 
-import android.app.Fragment;
 import android.content.Context;
 import android.graphics.Color;
 import android.os.Bundle;
+import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -28,7 +28,7 @@
 import android.widget.ImageView.ScaleType;
 import android.widget.ListView;
 import android.widget.TextView;
-import com.makeramen.RoundedTransformationBuilder;
+import com.makeramen.roundedimageview.RoundedTransformationBuilder;
 import com.squareup.picasso.Picasso;
 import com.squareup.picasso.Transformation;
 

File: example/src/main/java/com/makeramen/roundedimageview/example/RoundedFragment.java
Patch:
@@ -14,22 +14,22 @@
 * limitations under the License.
 */
 
-package com.makeramen.example;
+package com.makeramen.roundedimageview.example;
 
-import android.app.Fragment;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Shader;
 import android.os.Bundle;
+import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.ImageView.ScaleType;
 import android.widget.ListView;
 import android.widget.TextView;
-import com.makeramen.RoundedImageView;
+import com.makeramen.roundedimageview.RoundedImageView;
 
 public class RoundedFragment extends Fragment {
 

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedDrawable.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package com.makeramen;
+package com.makeramen.roundedimageview;
 
 import android.content.res.ColorStateList;
 import android.graphics.Bitmap;

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedImageView.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package com.makeramen;
+package com.makeramen.roundedimageview;
 
 import android.content.Context;
 import android.content.res.ColorStateList;

File: roundedimageview/src/main/java/com/makeramen/roundedimageview/RoundedTransformationBuilder.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package com.makeramen;
+package com.makeramen.roundedimageview;
 
 import android.content.res.ColorStateList;
 import android.content.res.Resources;

File: roundedimageview/src/main/java/com/makeramen/RoundedDrawable.java
Patch:
@@ -105,8 +105,8 @@ public static Bitmap drawableToBitmap(Drawable drawable) {
     }
 
     Bitmap bitmap;
-    int width = Math.max(drawable.getIntrinsicWidth(), 1);
-    int height = Math.max(drawable.getIntrinsicHeight(), 1);
+    int width = Math.max(drawable.getIntrinsicWidth(), 2);
+    int height = Math.max(drawable.getIntrinsicHeight(), 2);
     try {
       bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);
       Canvas canvas = new Canvas(bitmap);

File: roundedimageview/src/main/java/com/makeramen/RoundedDrawable.java
Patch:
@@ -105,8 +105,8 @@ public static Bitmap drawableToBitmap(Drawable drawable) {
     }
 
     Bitmap bitmap;
-    int width = Math.max(drawable.getIntrinsicWidth(), 1);
-    int height = Math.max(drawable.getIntrinsicHeight(), 1);
+    int width = Math.max(drawable.getIntrinsicWidth(), 2);
+    int height = Math.max(drawable.getIntrinsicHeight(), 2);
     try {
       bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);
       Canvas canvas = new Canvas(bitmap);

File: roundedimageview/src/com/makeramen/RoundedDrawable.java
Patch:
@@ -262,8 +262,8 @@ public void draw(Canvas canvas) {
     } else {
       if (mBorderWidth > 0) {
         canvas.drawRoundRect(mBorderRect, mCornerRadius, mCornerRadius, mBorderPaint);
-        canvas.drawRoundRect(mDrawableRect, Math.max(mCornerRadius - mBorderWidth, 0),
-            Math.max(mCornerRadius - mBorderWidth, 0), mBitmapPaint);
+        canvas.drawRoundRect(mDrawableRect, Math.max(mCornerRadius - mBorderWidth/2 - 0.5f, 0),
+            Math.max(mCornerRadius - mBorderWidth/2 - 0.5f, 0), mBitmapPaint);
       } else {
         canvas.drawRoundRect(mDrawableRect, mCornerRadius, mCornerRadius, mBitmapPaint);
       }

File: roundedimageview/src/com/makeramen/RoundedDrawable.java
Patch:
@@ -28,7 +28,7 @@ public class RoundedDrawable extends Drawable {
     private boolean mOval = false;
     private float mBorderWidth = 0;
     private ColorStateList mBorderColor = ColorStateList.valueOf(DEFAULT_BORDER_COLOR);
-    private ScaleType mScaleType = ScaleType.FIT_XY;
+    private ScaleType mScaleType = ScaleType.FIT_CENTER;
 
     public RoundedDrawable(Bitmap bitmap) {
 
@@ -336,7 +336,7 @@ public ScaleType getScaleType() {
 
     public RoundedDrawable setScaleType(ScaleType scaleType) {
         if (scaleType == null) {
-            scaleType = ScaleType.FIT_XY;
+            scaleType = ScaleType.FIT_CENTER;
         }
         if (mScaleType != scaleType) {
             mScaleType = scaleType;

File: roundedimageview/src/com/makeramen/RoundedImageView.java
Patch:
@@ -55,6 +55,9 @@ public RoundedImageView(Context context, AttributeSet attrs, int defStyle) {
         int index = a.getInt(R.styleable.RoundedImageView_android_scaleType, -1);
         if (index >= 0) {
             setScaleType(sScaleTypeArray[index]);
+        } else {
+            // default scaletype to FIT_CENTER
+            setScaleType(ScaleType.FIT_CENTER);
         }
 
         mCornerRadius = a.getDimensionPixelSize(R.styleable.RoundedImageView_corner_radius, -1);

File: library/src/com/makeramen/rounded/RoundedDrawable.java
Patch:
@@ -116,7 +116,7 @@ private void setMatrix() {
             }
 
             mShaderMatrix.setScale(scale, scale);
-            mShaderMatrix.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
+            mShaderMatrix.postTranslate((int) (dx + 0.5f) + mBorderWidth, (int) (dy + 0.5f) + mBorderWidth);
 			break;
 		case CENTER_INSIDE:
 			Log.d(TAG, "CENTER_INSIDE");

File: library/src/com/makeramen/rounded/RoundedDrawable.java
Patch:
@@ -116,7 +116,7 @@ private void setMatrix() {
             }
 
             mShaderMatrix.setScale(scale, scale);
-            mShaderMatrix.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
+            mShaderMatrix.postTranslate((int) (dx + 0.5f) + mBorderWidth, (int) (dy + 0.5f) + mBorderWidth);
 			break;
 		case CENTER_INSIDE:
 			Log.d(TAG, "CENTER_INSIDE");

File: library/src/com/makeramen/rounded/RoundedImageView.java
Patch:
@@ -119,12 +119,12 @@ public ScaleType getScaleType() {
 	
 	@Override
 	public void setImageDrawable(Drawable drawable) {
-		if (mDrawable != null) {
+		if (drawable != null) {
 			mDrawable = RoundedDrawable.fromDrawable(drawable, mCornerRadius, mBorderWidth, mBorderColor);
 			((RoundedDrawable) mDrawable).setScaleType(mScaleType); 
-		 } else {
+		} else {
 			 mDrawable = null;
-		 }
+		}
 		super.setImageDrawable(mDrawable);
 	}
 	

