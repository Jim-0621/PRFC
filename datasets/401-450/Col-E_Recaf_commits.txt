File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/MappingProgressPane.java
Patch:
@@ -270,7 +270,7 @@ private void updateTree() {
 	@Nonnull
 	private Tree<String, ClassPathNode> workspaceToTree(@Nonnull Workspace workspace) {
 		Tree<String, ClassPathNode> tree = new SortedTreeImpl<>();
-		workspace.findClasses(classInfo -> true)
+		workspace.findClasses(false, classInfo -> true)
 				.forEach(classPath -> {
 					// Only match classes in the primary resource
 					WorkspaceResource resource = classPath.getValueOfType(WorkspaceResource.class);

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/suggest/CompletionPopup.java
Patch:
@@ -243,8 +243,8 @@ public void show() {
 				? lastCaretBounds.getMaxX()
 				: lastCaretBounds.getMinX() - popup.getWidth();
 		double anchorY = config.getPopupPosition().isAbove()
-				? lastCaretBounds.getMaxY()
-				: lastCaretBounds.getMinY() - popupSize;
+				? lastCaretBounds.getMinY() - popupSize
+				: lastCaretBounds.getMaxY();
 
 		// choose other position if the popup is off-screen
 		// if the popup is off-screen, flip the popup to the other side of the caret on that axis

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/jvm/DecompilerPaneConfig.java
Patch:
@@ -21,7 +21,7 @@
 @ApplicationScoped
 public class DecompilerPaneConfig extends BasicConfigContainer {
 	private final ObservableInteger timeoutSeconds = new ObservableInteger(60);
-	private final ObservableBoolean useMappingAcceleration = new ObservableBoolean(true);
+	private final ObservableBoolean useMappingAcceleration = new ObservableBoolean(false);
 	private final ObservableBoolean acknowledgedSaveWithErrors = new ObservableBoolean(DevDetection.isDevEnv());
 
 	@Inject

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/suggest/AssemblerTabCompleter.java
Patch:
@@ -147,7 +147,7 @@ private void recomputeLineContext() {
 				if (code.range().within(caret))
 					inCode = true;
 				break;
-			} else {
+			} else if (element != null) {
 				element = element.pick(caret);
 			}
 		}

File: recaf-ui/src/main/java/software/coley/recaf/services/cell/icon/BasicClassIconProviderFactory.java
Patch:
@@ -46,7 +46,8 @@ public IconProvider getAndroidClassInfoIconProvider(@Nonnull Workspace workspace
 		return classIconProvider(info);
 	}
 
-	private static IconProvider classIconProvider(ClassInfo info) {
+	@Nonnull
+	private static IconProvider classIconProvider(@Nonnull ClassInfo info) {
 		// Special class cases
 		if (info.hasEnumModifier()) return ENUM;
 		if (info.hasAnnotationModifier()) return ANNO;

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/suggest/CompletionPopupUpdater.java
Patch:
@@ -55,7 +55,7 @@ public void handle(KeyEvent event) {
 
 		// Any non-word character should remove the popup.
 		// Modifiers are also excluded so capitalizing letters won't hide the popup.
-		if (!code.isLetterKey() && !code.isDigitKey() && !code.isModifierKey() && code != PERIOD) {
+		if (!code.isLetterKey() && !code.isDigitKey() && !code.isModifierKey() && code != PERIOD && !tabCompleter.isSpecialCompletableKeyCode(code)) {
 			completionPopup.hide();
 			return;
 		}

File: recaf-core/src/main/java/software/coley/recaf/services/phantom/JPhantomGenerator.java
Patch:
@@ -95,7 +95,7 @@ public GeneratedPhantomWorkspaceResource createPhantomsForClasses(@Nonnull Works
 			throws PhantomGenerationException {
 		// Convert collection to map
 		Map<String, JvmClassInfo> classMap = classes.stream()
-				.collect(Collectors.toMap(Info::getName, Function.identity()));
+				.collect(Collectors.toMap(Info::getName, Function.identity(), (a, b) -> a));
 
 		// Generate phantoms for them and wrap into resource
 		try {

File: recaf-core/src/main/java/software/coley/recaf/util/analysis/value/ArrayValue.java
Patch:
@@ -28,7 +28,7 @@ public interface ArrayValue extends ObjectValue {
 	 * @param nullness
 	 * 		Array null state.
 	 *
-	 * @return Array value holding the array content.
+	 * @return Array value of the given type.
 	 */
 	@Nonnull
 	static ArrayValue of(@Nonnull Type type, @Nonnull Nullness nullness) {
@@ -54,7 +54,7 @@ static ArrayValue of(@Nonnull Type type, @Nonnull Nullness nullness) {
 	 * @param length
 	 * 		Array length.
 	 *
-	 * @return Array value holding the array content.
+	 * @return Array value of the given type/length.
 	 */
 	@Nonnull
 	static ArrayValue of(@Nonnull Type type, @Nonnull Nullness nullness, int length) {

File: recaf-core/src/main/java/software/coley/recaf/services/assembler/AbstractAssemblerPipeline.java
Patch:
@@ -47,9 +47,6 @@ public AbstractAssemblerPipeline(@Nonnull AssemblerPipelineGeneralConfig general
 	private void refreshContext() {
 		context = new PrintContext<>(generalConfig.getDisassemblyIndent().getValue());
 
-		// Enable aggressive variable name dropping to prevent use of bogus kotlin variable ranges.
-		context.setAggressivelyDropVars(true);
-
 		// Enable comments that outline where try-catch ranges begin/end.
 		if (pipelineConfig instanceof JvmAssemblerPipelineConfig jvmConfig && jvmConfig.emitTryRangeComments())
 			context.setDebugTryCatchRanges(true);

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/MappingGeneratorPane.java
Patch:
@@ -789,7 +789,7 @@ protected void fillConfigurator(@Nonnull BiConsumer<StringBinding, Node> sink) {
 			grid.addRow(2, new BoundLabel(Lang.getBinding("mapgen.filter.method-name")),
 					txtMethod, new BoundComboBox<>(methodPredicateId, stringPredicatesWithNull, textPredicateConverter));
 			grid.addRow(3, new BoundLabel(Lang.getBinding("mapgen.filter.variable-name")),
-					txtMethod, new BoundComboBox<>(variablePredicateId, stringPredicatesWithNull, textPredicateConverter));
+					txtVariable, new BoundComboBox<>(variablePredicateId, stringPredicatesWithNull, textPredicateConverter));
 			sink.accept(null, grid);
 		}
 	}

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/MappingGeneratorPane.java
Patch:
@@ -789,7 +789,7 @@ protected void fillConfigurator(@Nonnull BiConsumer<StringBinding, Node> sink) {
 			grid.addRow(2, new BoundLabel(Lang.getBinding("mapgen.filter.method-name")),
 					txtMethod, new BoundComboBox<>(methodPredicateId, stringPredicatesWithNull, textPredicateConverter));
 			grid.addRow(3, new BoundLabel(Lang.getBinding("mapgen.filter.variable-name")),
-					txtMethod, new BoundComboBox<>(variablePredicateId, stringPredicatesWithNull, textPredicateConverter));
+					txtVariable, new BoundComboBox<>(variablePredicateId, stringPredicatesWithNull, textPredicateConverter));
 			sink.accept(null, grid);
 		}
 	}

File: recaf-core/src/main/java/software/coley/recaf/info/BasicJvmClassInfo.java
Patch:
@@ -49,12 +49,14 @@ public int getVersion() {
 	public boolean equals(Object o) {
 		if (this == o) return true;
 		if (o == null) return false;
-		if (!super.equals(o)) return false;
 
 		if (o instanceof JvmClassInfo other) {
 			if (version != other.getVersion()) return false;
 			return Arrays.equals(bytecode, other.getBytecode());
+		} else if (!super.equals(o)) {
+			return false;
 		}
+
 		return false;
 	}
 

File: recaf-core/src/test/java/software/coley/recaf/services/mapping/aggregate/AggregateMappingManagerTest.java
Patch:
@@ -20,8 +20,9 @@ public class AggregateMappingManagerTest extends TestBase {
 
 	@BeforeEach
 	void setupPerTest() {
-		workspaceManager.setCurrent(EmptyWorkspace.get());
 		aggregateMappingManager = recaf.get(AggregateMappingManager.class);
+		assertNotNull(aggregateMappingManager.toString()); // Bogus call to initialize the aggregate mapping manager
+		workspaceManager.setCurrent(EmptyWorkspace.get());
 	}
 
 	@AfterEach

File: recaf-core/src/main/java/software/coley/recaf/services/mapping/format/SrgMappings.java
Patch:
@@ -191,7 +191,7 @@ public boolean doesSupportVariableTypeDifferentiation() {
 
 		@Nullable
 		@Override
-		public ClassMapping getClassMapping(String name) {
+		public ClassMapping getClassMapping(@Nonnull String name) {
 			ClassMapping classMapping = super.getClassMapping(name);
 			if (classMapping == null && !packageMappings.isEmpty()) {
 				for (Pair<String, String> packageMapping : packageMappings) {

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/MappingGeneratorPane.java
Patch:
@@ -355,7 +355,7 @@ public String fromString(String s) {
 	private Node createFilterDisplay(@Nonnull AggregateMappingManager aggregateMappingManager) {
 		// List to house current filters.
 		filters.setCellFactory(param -> new ConfiguredFilterCell());
-		filters.getItems().add(new ExcludeExistingMapped(aggregateMappingManager.getAggregatedMappings()));
+		filters.getItems().add(new ExcludeExistingMapped(Objects.requireNonNull(aggregateMappingManager.getAggregatedMappings())));
 		ReadOnlyObjectProperty<FilterWithConfigNode<?>> selectedItem = filters.getSelectionModel().selectedItemProperty();
 		BooleanBinding hasItemSelection = selectedItem.isNull();
 
@@ -389,7 +389,7 @@ private Node createFilterDisplay(@Nonnull AggregateMappingManager aggregateMappi
 		dropdownText.bind(Lang.getBinding("mapgen.filters.type"));
 		dropdown.getItems().addAll(
 				typeSetAction(nodeSupplier, dropdownText, "mapgen.filter.excludealreadymapped",
-						() -> new ExcludeExistingMapped(aggregateMappingManager.getAggregatedMappings())),
+						() -> new ExcludeExistingMapped(Objects.requireNonNull(aggregateMappingManager.getAggregatedMappings()))),
 				typeSetAction(nodeSupplier, dropdownText, "mapgen.filter.excludename", ExcludeName::new),
 				typeSetAction(nodeSupplier, dropdownText, "mapgen.filter.excludeclasses", ExcludeClasses::new),
 				typeSetAction(nodeSupplier, dropdownText, "mapgen.filter.excludemodifier", ExcludeModifiers::new),

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/AbstractDecompilePane.java
Patch:
@@ -144,6 +144,8 @@ public Collection<Navigable> getNavigableChildren() {
 	public void disable() {
 		setDisable(true);
 		setOnKeyPressed(null);
+		editor.close();
+		contextActionSupport.close();
 	}
 
 	@Override

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/AssemblerToolTabs.java
Patch:
@@ -10,6 +10,7 @@
 import me.darknet.assembler.ast.ASTElement;
 import me.darknet.assembler.compiler.ClassResult;
 import org.kordamp.ikonli.carbonicons.CarbonIcons;
+import software.coley.recaf.behavior.Closing;
 import software.coley.recaf.info.ClassInfo;
 import software.coley.recaf.path.PathNode;
 import software.coley.recaf.services.navigation.Navigable;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/SnippetsPane.java
Patch:
@@ -227,6 +227,7 @@ private void removeAttention() {
 	@Override
 	public void disable() {
 		snippetManager.removeSnippetListener(this);
+		editor.close();
 	}
 
 	@Nullable

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/binary/DecodingXmlPane.java
Patch:
@@ -70,6 +70,7 @@ public Collection<Navigable> getNavigableChildren() {
 	public void disable() {
 		setDisable(true);
 		setOnKeyPressed(null);
+		editor.close();
 	}
 
 	@Override

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/text/TextPane.java
Patch:
@@ -100,6 +100,7 @@ public Collection<Navigable> getNavigableChildren() {
 	public void disable() {
 		setDisable(true);
 		setOnKeyPressed(null);
+		editor.close();
 	}
 
 	@Override

File: recaf-core/src/main/java/software/coley/recaf/util/threading/ThreadPoolFactory.java
Patch:
@@ -145,7 +145,7 @@ public FactoryImpl(String name, boolean daemon) {
 		public Thread newThread(@Nonnull Runnable r) {
 			Thread thread = new Thread(r);
 			thread.setDaemon(daemon);
-			thread.setName(name + "-" + tid++);
+			thread.setName("Recaf-" + name + "-" + tid++);
 			return thread;
 		}
 	}

File: recaf-core/src/main/java/software/coley/recaf/util/threading/ThreadUtil.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class ThreadUtil {
 	private static final Logger logger = Logging.get(ThreadUtil.class);
-	private static final ScheduledExecutorService scheduledService = newScheduledThreadPool("Recaf misc");
+	private static final ScheduledExecutorService scheduledService = newScheduledThreadPool("misc");
 
 	/**
 	 * @param action

File: recaf-core/src/main/java/software/coley/recaf/services/compile/stub/ClassStubGenerator.java
Patch:
@@ -335,6 +335,8 @@ else if (method.hasPrivateModifier())
 	protected void appendInnerClasses(@Nonnull StringBuilder code) throws ExpressionCompileException {
 		for (InnerClassInfo innerClass : innerClasses) {
 			String innerClassName = innerClass.getInnerClassName();
+			if (!innerClassName.startsWith(className))
+				continue;
 			if (innerClassName.length() <= className.length())
 				continue;
 			ClassPathNode innerClassPath = workspace.findClass(innerClassName);

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/bundle/BasicBundle.java
Patch:
@@ -111,7 +111,9 @@ public Set<String> getRemovedKeys() {
 
 	@Override
 	public boolean hasHistory(@Nonnull String key) {
-		return history.get(key) != null;
+		// History implies there are past entries for the current value, hence more than one entry.
+		Stack<I> stack = history.get(key);
+		return stack != null && stack.size() > 1;
 	}
 
 	@Override

File: recaf-ui/src/main/java/software/coley/recaf/ui/dnd/WorkspaceLoadingDropListener.java
Patch:
@@ -48,7 +48,8 @@ public void onDragDrop(@Nonnull Region region, @Nonnull DragEvent event, @Nonnul
 
 		if (config.createOnDragDrop()) {
 			// Create new workspace from files
-			Path primary = files.get(0);
+			//  - The last path is actually the first file selected by the user when multiple files are selected
+			Path primary = files.getLast();
 			List<Path> supporting = files.size() > 1 ? files.subList(1, files.size()) : Collections.emptyList();
 			pathLoadingManager.asyncNewWorkspace(primary, supporting, err -> {
 				logger.error("Failed to create new workspace from dropped files", err);

File: recaf-core/src/main/java/software/coley/recaf/services/file/RecafDirectoriesConfig.java
Patch:
@@ -11,6 +11,7 @@
 import software.coley.recaf.config.ConfigContainer;
 import software.coley.recaf.config.ConfigGroups;
 import software.coley.recaf.launch.LaunchCommand;
+import software.coley.recaf.util.ExcludeFromJacocoGeneratedReport;
 import software.coley.recaf.util.IOUtil;
 import software.coley.recaf.util.PlatformType;
 
@@ -25,6 +26,7 @@
  * @author Matt Coley
  */
 @ApplicationScoped
+@ExcludeFromJacocoGeneratedReport(justification = "We do not access the config directories in tests (avoiding IO is preferred anyways)")
 public class RecafDirectoriesConfig extends BasicConfigContainer implements ConfigContainer {
 	private static final Logger logger = Logging.get(RecafDirectoriesConfig.class);
 	private final Path baseDirectory = createBaseDirectory();
@@ -48,9 +50,8 @@ public RecafDirectoriesConfig() {
 	 * 		Path to current log-file.
 	 */
 	public void initCurrentLogPath(@Nonnull Path currentLog) {
-		if (this.currentLog == null) {
+		if (this.currentLog == null)
 			this.currentLog = currentLog;
-		}
 	}
 
 	/**

File: recaf-core/src/test/java/software/coley/recaf/services/compile/JavacCompilerTest.java
Patch:
@@ -75,7 +75,7 @@ public static void main(String[] args) {
 
 		// Run compiler, it should fail with no passed workspace due to the unknown 'StringConsumer'
 		CompilerResult result = javac.compile(arguments, null, null);
-		assertEquals(1, result.getDiagnostics().size(), "Expected compilation failure");
+		assertFalse(result.getDiagnostics().isEmpty(), "Expected compilation failure");
 		assertFalse(result.getCompilations().containsKey("HelloWorld"), "Class should have failed compilation");
 
 		// First, create the class that was missing. We cannot use the existing StringConsumer because Javac will find

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/MappingGeneratorPane.java
Patch:
@@ -538,7 +538,7 @@ protected void fillConfigurator(@Nonnull BiConsumer<StringBinding, Node> sink) {
 			grid.addRow(2, new BoundLabel(Lang.getBinding("mapgen.filter.method-name")),
 					txtMethod, new BoundComboBox<>(methodPredicateId, stringPredicatesWithNull, textPredicateConverter));
 			grid.addRow(3, new BoundLabel(Lang.getBinding("mapgen.filter.variable-name")),
-					txtMethod, new BoundComboBox<>(variablePredicateId, stringPredicatesWithNull, textPredicateConverter));
+					txtVariable, new BoundComboBox<>(variablePredicateId, stringPredicatesWithNull, textPredicateConverter));
 			sink.accept(null, grid);
 		}
 	}

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/WorkspaceInformationPane.java
Patch:
@@ -107,7 +107,7 @@ public WorkspaceInformationPane(@Nonnull TextProviderService textService,
 
 		// When the summary is done, clear the "loading..." overlay.
 		CompletableFuture.allOf(summaryFutures.toArray(CompletableFuture[]::new))
-				.whenCompleteAsync((ignored, error) -> modal.hide(true), FxThreadUtil.executor());
+				.whenCompleteAsync((ignored, error) -> FxThreadUtil.delayedRun(100, () -> modal.hide(true)));
 	}
 
 	@Nonnull

File: recaf-core/src/test/java/software/coley/recaf/services/mapping/format/MappingImplementationTest.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Tests various {@link MappingFileFormat} implementation's ability to parse input texts.
  */
-public class MappingImplementationTests {
+public class MappingImplementationTest {
 	@Test
 	void testTinyV1() {
 		String mappingsText = """

File: recaf-core/src/test/java/software/coley/recaf/services/mapping/format/MappingIntermediateTest.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * Tests {@link MappingFileFormat} implementation support for importing from intermediate mappings.
  */
-public class MappingIntermediateTests extends TestBase {
+public class MappingIntermediateTest extends TestBase {
 	@Test
 	void testMapFromIntermediate() {
 		// Setup base mappings

File: recaf-core/src/main/java/software/coley/recaf/ExitDebugLoggingHook.java
Patch:
@@ -82,7 +82,9 @@ private static void run() {
 				try {
 					if (!visited.get() && frame.getDeclaringClass() == shutdown && frame.getMethodName().equals("exit")) {
 						Object[] locals = (Object[]) getLocals.invoke(frame);
-						handle(Integer.parseInt(String.valueOf(locals[0])));
+						String local0 = locals[0].toString().replaceAll("\\D+", "");
+						int exit = (int) Long.parseLong(local0); // Need to parse as long, cast to int
+						handle(exit);
 						visited.set(true);
 					}
 				} catch (Throwable t) {

File: recaf-ui/src/main/java/software/coley/recaf/ui/menubar/FileMenu.java
Patch:
@@ -262,6 +262,7 @@ private void openSummary() {
 		WorkspaceInformationPane informationPane = infoPaneProvider.get();
 		DockingRegion dockInfo = dockingManager.getPrimaryRegion();
 		DetachableTab infoTab = dockInfo.createTab(Lang.getBinding("workspace.info"), informationPane);
+		infoTab.getTabPane().getSelectionModel().select(infoTab);
 		infoTab.setGraphic(new FontIconView(CarbonIcons.INFORMATION));
 	}
 

File: recaf-core/src/main/java/software/coley/recaf/services/mapping/gen/naming/IncrementingNameGenerator.java
Patch:
@@ -66,7 +66,7 @@ public String mapMethod(@Nonnull ClassInfo owner, @Nonnull MethodMember method)
 		String name = nextMethodName();
 		String descriptor = method.getDescriptor();
 		while (owner.getDeclaredMethod(name, descriptor) != null)
-			name = nextFieldName();
+			name = nextMethodName();
 		return name;
 	}
 }

File: recaf-ui/src/main/java/software/coley/recaf/services/navigation/NavigationManager.java
Patch:
@@ -113,7 +113,7 @@ public NavigationManager(@Nonnull NavigationManagerConfig config,
 
 			// Remove the path reference to the old workspace.
 			forwarding.workspacePath = null;
-			path = null;
+			path = new DummyInitialNode();
 
 			// Force close any remaining tabs that hold navigable content.
 			for (DockingTab tab : dockingManager.getDockTabs()) {

File: recaf-core/src/main/java/software/coley/recaf/services/phantom/GeneratedPhantomWorkspaceResource.java
Patch:
@@ -4,7 +4,7 @@
 import software.coley.recaf.workspace.model.bundle.AndroidClassBundle;
 import software.coley.recaf.workspace.model.bundle.FileBundle;
 import software.coley.recaf.workspace.model.bundle.JvmClassBundle;
-import software.coley.recaf.workspace.model.bundle.VersionedClassBundle;
+import software.coley.recaf.workspace.model.bundle.VersionedJvmClassBundle;
 import software.coley.recaf.workspace.model.resource.BasicWorkspaceResource;
 import software.coley.recaf.workspace.model.resource.WorkspaceFileResource;
 import software.coley.recaf.workspace.model.resource.WorkspaceResource;
@@ -43,7 +43,7 @@ public GeneratedPhantomWorkspaceResource(@Nonnull WorkspaceResourceBuilder build
 	 */
 	public GeneratedPhantomWorkspaceResource(JvmClassBundle jvmClassBundle,
 											 FileBundle fileBundle,
-											 NavigableMap<Integer, VersionedClassBundle> versionedJvmClassBundles,
+											 NavigableMap<Integer, VersionedJvmClassBundle> versionedJvmClassBundles,
 											 Map<String, AndroidClassBundle> androidClassBundles,
 											 Map<String, WorkspaceFileResource> embeddedResources,
 											 WorkspaceResource containingResource) {

File: recaf-core/src/main/java/software/coley/recaf/services/workspace/io/WorkspaceExportOptions.java
Patch:
@@ -7,8 +7,7 @@
 import software.coley.recaf.util.ZipCreationUtils;
 import software.coley.recaf.workspace.model.Workspace;
 import software.coley.recaf.workspace.model.bundle.AndroidClassBundle;
-import software.coley.recaf.workspace.model.bundle.JvmClassBundle;
-import software.coley.recaf.workspace.model.bundle.VersionedClassBundle;
+import software.coley.recaf.workspace.model.bundle.VersionedJvmClassBundle;
 import software.coley.recaf.workspace.model.resource.WorkspaceFileResource;
 import software.coley.recaf.workspace.model.resource.WorkspaceResource;
 
@@ -194,7 +193,7 @@ private void mapInto(@Nonnull Map<String, byte[]> map, @Nonnull WorkspaceResourc
 			});
 
 			// Place versioned files into map
-			for (Map.Entry<Integer, VersionedClassBundle> entry : resource.getVersionedJvmClassBundles().entrySet()) {
+			for (Map.Entry<Integer, VersionedJvmClassBundle> entry : resource.getVersionedJvmClassBundles().entrySet()) {
 				String versionPath = JarFileInfo.MULTI_RELEASE_PREFIX + entry.getKey() + "/";
 				for (Map.Entry<String, JvmClassInfo> classEntry : entry.getValue().entrySet()) {
 					String key = versionPath + classEntry.getKey() + ".class";

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/EmptyWorkspace.java
Patch:
@@ -64,7 +64,7 @@ public JvmClassBundle getJvmClassBundle() {
 
 		@Nonnull
 		@Override
-		public NavigableMap<Integer, VersionedClassBundle> getVersionedJvmClassBundles() {
+		public NavigableMap<Integer, VersionedJvmClassBundle> getVersionedJvmClassBundles() {
 			return Collections.emptyNavigableMap();
 		}
 

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/bundle/BasicVersionedJvmClassBundle.java
Patch:
@@ -9,14 +9,14 @@
  *
  * @author Matt Coley
  */
-public class BasicVersionedClassBundle extends BasicJvmClassBundle implements VersionedClassBundle, BundleListener<JvmClassInfo> {
+public class BasicVersionedJvmClassBundle extends BasicJvmClassBundle implements VersionedJvmClassBundle, BundleListener<JvmClassInfo> {
 	private final int version;
 
 	/**
 	 * @param version
 	 * 		Associated version.
 	 */
-	public BasicVersionedClassBundle(int version) {
+	public BasicVersionedJvmClassBundle(int version) {
 		this.version = version;
 
 		// Register self as listener. We'll apply the versioned class property to items added to this bundle.

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/bundle/VersionedJvmClassBundle.java
Patch:
@@ -7,7 +7,7 @@
  *
  * @author Matt Coley
  */
-public interface VersionedClassBundle extends JvmClassBundle {
+public interface VersionedJvmClassBundle extends JvmClassBundle {
 	/**
 	 * @return The associated version of classes in this bundle. Uses standard version, so Java 8 is 8.
 	 */

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/resource/AndroidApiResource.java
Patch:
@@ -2,7 +2,6 @@
 
 import jakarta.annotation.Nonnull;
 import jakarta.annotation.Nullable;
-import org.objectweb.asm.ClassReader;
 import org.slf4j.Logger;
 import software.coley.lljzip.ZipIO;
 import software.coley.lljzip.format.model.LocalFileHeader;
@@ -77,7 +76,7 @@ public JvmClassBundle getJvmClassBundle() {
 
 	@Nonnull
 	@Override
-	public NavigableMap<Integer, VersionedClassBundle> getVersionedJvmClassBundles() {
+	public NavigableMap<Integer, VersionedJvmClassBundle> getVersionedJvmClassBundles() {
 		return Collections.emptyNavigableMap();
 	}
 

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/resource/BasicWorkspaceResource.java
Patch:
@@ -31,7 +31,7 @@ public class BasicWorkspaceResource extends BasicPropertyContainer implements Wo
 	private final List<ResourceAndroidClassListener> androidClassListeners = new CopyOnWriteArrayList<>();
 	private final List<ResourceFileListener> fileListeners = new CopyOnWriteArrayList<>();
 	private final JvmClassBundle jvmClassBundle;
-	private final NavigableMap<Integer, VersionedClassBundle> versionedJvmClassBundles;
+	private final NavigableMap<Integer, VersionedJvmClassBundle> versionedJvmClassBundles;
 	private final Map<String, AndroidClassBundle> androidClassBundles;
 	private final FileBundle fileBundle;
 	private final Map<String, WorkspaceFileResource> embeddedResources;
@@ -66,7 +66,7 @@ public BasicWorkspaceResource(@Nonnull WorkspaceResourceBuilder builder) {
 	 */
 	public BasicWorkspaceResource(JvmClassBundle jvmClassBundle,
 	                              FileBundle fileBundle,
-	                              NavigableMap<Integer, VersionedClassBundle> versionedJvmClassBundles,
+	                              NavigableMap<Integer, VersionedJvmClassBundle> versionedJvmClassBundles,
 	                              Map<String, AndroidClassBundle> androidClassBundles,
 	                              Map<String, WorkspaceFileResource> embeddedResources,
 	                              WorkspaceResource containingResource) {
@@ -224,7 +224,7 @@ public JvmClassBundle getJvmClassBundle() {
 
 	@Nonnull
 	@Override
-	public NavigableMap<Integer, VersionedClassBundle> getVersionedJvmClassBundles() {
+	public NavigableMap<Integer, VersionedJvmClassBundle> getVersionedJvmClassBundles() {
 		return versionedJvmClassBundles;
 	}
 

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/resource/RuntimeWorkspaceResource.java
Patch:
@@ -13,7 +13,7 @@
 import software.coley.recaf.workspace.model.bundle.BasicJvmClassBundle;
 import software.coley.recaf.workspace.model.bundle.FileBundle;
 import software.coley.recaf.workspace.model.bundle.JvmClassBundle;
-import software.coley.recaf.workspace.model.bundle.VersionedClassBundle;
+import software.coley.recaf.workspace.model.bundle.VersionedJvmClassBundle;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -125,7 +125,7 @@ public FileBundle getFileBundle() {
 
 	@Nonnull
 	@Override
-	public NavigableMap<Integer, VersionedClassBundle> getVersionedJvmClassBundles() {
+	public NavigableMap<Integer, VersionedJvmClassBundle> getVersionedJvmClassBundles() {
 		return Collections.emptyNavigableMap();
 	}
 

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/resource/WorkspaceResource.java
Patch:
@@ -43,7 +43,7 @@ public interface WorkspaceResource extends PropertyContainer, Closing {
 	 * @return Map of versions, to JVM class bundles.
 	 */
 	@Nonnull
-	NavigableMap<Integer, VersionedClassBundle> getVersionedJvmClassBundles();
+	NavigableMap<Integer, VersionedJvmClassBundle> getVersionedJvmClassBundles();
 
 	/**
 	 * Contains Android class bundles.
@@ -121,15 +121,15 @@ default Stream<JvmClassBundle> jvmClassBundleStreamRecursive() {
 	 * @return Stream of all versioned JVM class bundles in the resource.
 	 */
 	@Nonnull
-	default Stream<VersionedClassBundle> versionedJvmClassBundleStream() {
+	default Stream<VersionedJvmClassBundle> versionedJvmClassBundleStream() {
 		return getVersionedJvmClassBundles().values().stream();
 	}
 
 	/**
 	 * @return Stream of all versioned JVM class bundles in the resource, and in any embedded resources
 	 */
 	@Nonnull
-	default Stream<VersionedClassBundle> versionedJvmClassBundleStreamRecursive() {
+	default Stream<VersionedJvmClassBundle> versionedJvmClassBundleStreamRecursive() {
 		return concat(versionedJvmClassBundleStream(), getEmbeddedResources().values().stream()
 				.flatMap(WorkspaceResource::versionedJvmClassBundleStreamRecursive));
 	}

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/resource/WorkspaceResourceBuilder.java
Patch:
@@ -11,7 +11,7 @@
 
 public class WorkspaceResourceBuilder {
 	private JvmClassBundle jvmClassBundle = new BasicJvmClassBundle();
-	private NavigableMap<Integer, VersionedClassBundle> versionedJvmClassBundles = new TreeMap<>();
+	private NavigableMap<Integer, VersionedJvmClassBundle> versionedJvmClassBundles = new TreeMap<>();
 	private Map<String, AndroidClassBundle> androidClassBundles = Collections.emptyMap();
 	private FileBundle fileBundle = new BasicFileBundle();
 	private Map<String, WorkspaceFileResource> embeddedResources = Collections.emptyMap();
@@ -51,7 +51,7 @@ public WorkspaceResourceBuilder withJvmClassBundle(JvmClassBundle primaryJvmClas
 		return this;
 	}
 
-	public WorkspaceResourceBuilder withVersionedJvmClassBundles(NavigableMap<Integer, VersionedClassBundle> versionedJvmClassBundles) {
+	public WorkspaceResourceBuilder withVersionedJvmClassBundles(NavigableMap<Integer, VersionedJvmClassBundle> versionedJvmClassBundles) {
 		this.versionedJvmClassBundles = versionedJvmClassBundles;
 		return this;
 	}
@@ -90,7 +90,7 @@ public JvmClassBundle getJvmClassBundle() {
 		return jvmClassBundle;
 	}
 
-	public NavigableMap<Integer, VersionedClassBundle> getVersionedJvmClassBundles() {
+	public NavigableMap<Integer, VersionedJvmClassBundle> getVersionedJvmClassBundles() {
 		return versionedJvmClassBundles;
 	}
 

File: recaf-ui/src/main/java/software/coley/recaf/services/cell/text/TextProviderService.java
Patch:
@@ -498,7 +498,7 @@ public TextProvider getBundleTextProvider(@Nonnull Workspace workspace,
 					return dexName;
 			} else if (bundle instanceof AgentServerRemoteVmResource.RemoteJvmClassBundle remoteBundle) {
 				return formatConfig.filter(remoteBundle.getLoaderInfo().getName());
-			} else if (bundle instanceof VersionedClassBundle versionedClassBundle) {
+			} else if (bundle instanceof VersionedJvmClassBundle versionedClassBundle) {
 				return Lang.get("tree.classes") + " (Java " + versionedClassBundle.version() + ")";
 			}
 

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/linegraphics/LineContainer.java
Patch:
@@ -25,7 +25,6 @@ public class LineContainer extends StackPane {
 	LineContainer() {
 		box.setAlignment(Pos.CENTER_LEFT);
 		box.setPadding(PADDING);
-		box.setMouseTransparent(true);
 		getChildren().add(box);
 	}
 

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/vineflower/VineflowerDecompiler.java
Patch:
@@ -45,7 +45,7 @@ public DecompileResult decompileInternal(@Nonnull Workspace workspace, @Nonnull
 		try {
 			ClassSource source = new ClassSource(workspace, info);
 			fernflower.addSource(source);
-			fernflower.addLibrary(new LibrarySource(workspace));
+			fernflower.addLibrary(new LibrarySource(workspace, info));
 			fernflower.decompileContext();
 
 			String decompiled = source.getSink().getDecompiledOutput().get();

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/resource/AgentServerRemoteVmResource.java
Patch:
@@ -3,7 +3,6 @@
 import com.sun.tools.attach.VirtualMachine;
 import jakarta.annotation.Nonnull;
 import jakarta.annotation.Nullable;
-import org.objectweb.asm.ClassReader;
 import software.coley.instrument.ApiConstants;
 import software.coley.instrument.Client;
 import software.coley.instrument.data.ClassData;
@@ -86,7 +85,7 @@ public Map<Integer, JvmClassBundle> getJvmClassloaderBundles() {
 	@Nonnull
 	@Override
 	public Stream<JvmClassBundle> jvmClassBundleStream() {
-		return Stream.concat(super.jvmClassBundleStream(), remoteBundleMap.values().stream());
+		return Stream.concat(super.jvmClassBundleStream(), new ArrayList<>(remoteBundleMap.values()).stream());
 	}
 
 	@Override

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/RemoteVirtualMachinesPane.java
Patch:
@@ -187,7 +187,7 @@ public void onScanCompleted(@Nonnull Set<VirtualMachineDescriptor> added,
 				vmButtonsList.getChildren().remove(removedButton);
 
 				VmPane cell = vmCellMap.remove(descriptor);
-				cell.setDisable(true);
+				if (cell != null) cell.setDisable(true);
 			}
 
 			// Refresh current cell.

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/AssemblerPane.java
Patch:
@@ -367,6 +367,7 @@ private CompletableFuture<Result<List<ASTElement>>> parseAST() {
 					// The transform failed.
 					lastPartialAst = partialAst;
 					eachChild(AssemblerAstConsumer.class, c -> c.consumeAst(partialAst, AstPhase.CONCRETE_PARTIAL));
+					processErrors(errors, ProblemPhase.LINT);
 				});
 			}
 

File: recaf-core/src/main/java/software/coley/recaf/services/mapping/MappingListeners.java
Patch:
@@ -15,8 +15,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
- * Manages listeners for things like {@link MappingResults} application in an application-scoped, as opposed to
- * some of the other mapping services which are workspace-scoped.
+ * Manages listeners for things like {@link MappingResults} applying operations.
  *
  * @author Matt Coley
  */

File: recaf-core/src/main/java/software/coley/recaf/services/phantom/JPhantomGenerator.java
Patch:
@@ -22,8 +22,8 @@
 import software.coley.recaf.info.Info;
 import software.coley.recaf.info.JvmClassInfo;
 import software.coley.recaf.info.builder.JvmClassInfoBuilder;
-import software.coley.recaf.util.ReflectUtil;
 import software.coley.recaf.services.workspace.WorkspaceManager;
+import software.coley.recaf.util.ReflectUtil;
 import software.coley.recaf.workspace.model.Workspace;
 import software.coley.recaf.workspace.model.bundle.BasicJvmClassBundle;
 import software.coley.recaf.workspace.model.bundle.Bundle;
@@ -137,7 +137,7 @@ public static GeneratedPhantomWorkspaceResource wrap(@Nonnull Map<String, byte[]
 	 */
 	@Nonnull
 	public static Map<String, byte[]> generate(@Nonnull Workspace workspace,
-											   @Nonnull Map<String, JvmClassInfo> inputMap) throws IOException {
+	                                           @Nonnull Map<String, JvmClassInfo> inputMap) throws IOException {
 		Map<String, byte[]> out = new HashMap<>();
 
 		// Write the parameter passed classes to a temp jar

File: recaf-core/src/main/java/software/coley/recaf/workspace/model/bundle/BasicBundle.java
Patch:
@@ -116,7 +116,8 @@ public void decrementHistory(@Nonnull String key) {
 		I currentItem = get(key);
 		I priorItem;
 		if (size > 1) {
-			priorItem = itemHistory.pop();
+			itemHistory.pop(); // Pop current value off stack.
+			priorItem = itemHistory.peek(); // Yield prior value.
 		} else {
 			priorItem = itemHistory.peek();
 		}

File: recaf-ui/src/main/java/software/coley/recaf/ui/docking/DockingManager.java
Patch:
@@ -145,6 +145,7 @@ void onTabCreate(@Nonnull DockingRegion parent, @Nonnull DockingTab tab) {
 	 * 		Tab created.
 	 */
 	void onTabClose(@Nonnull DockingRegion parent, @Nonnull DockingTab tab) {
+		// TODO: In some cases the listeners need to be called on the FX thread
 		Unchecked.checkedForEach(tabClosureListeners, listener -> listener.onClose(parent, tab),
 				(listener, t) -> logger.error("Exception thrown when closing tab '{}'", tab.getText(), t));
 	}

File: recaf-ui/src/main/java/software/coley/recaf/ui/menubar/MappingMenu.java
Patch:
@@ -92,7 +92,7 @@ public MappingMenu(@Nonnull WindowManager windowManager,
 							results.apply();
 							logger.info("Applied mappings from {} - Updated {} classes", file.getName(), results.getPostMappingPaths().size());
 						} catch (Exception ex) {
-							logger.error("Failed to read mappings from {}", file.getName(), ex);
+							logger.error("Failed to read {} mappings from {}", formatName, file.getName(), ex);
 						}
 					});
 				}

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/linegraphics/LineContainer.java
Patch:
@@ -25,6 +25,7 @@ public class LineContainer extends StackPane {
 	LineContainer() {
 		box.setAlignment(Pos.CENTER_LEFT);
 		box.setPadding(PADDING);
+		box.setMouseTransparent(true);
 		getChildren().add(box);
 	}
 

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/linegraphics/RootLineGraphicFactory.java
Patch:
@@ -80,6 +80,7 @@ public Node apply(int paragraph) {
 		BorderPane wrapper = new BorderPane(lineContainer);
 		wrapper.getStyleClass().add("lineno");
 		wrapper.setCursor(Cursor.DEFAULT);
+		wrapper.setMouseTransparent(true);
 		return wrapper;
 	}
 

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/ControlFlowLines.java
Patch:
@@ -132,6 +132,8 @@ private void onCaretMove(Change<Integer> caretChange) {
 		// Find selected instruction (can be null)
 		Box<ASTInstruction> selected = new Box<>();
 		for (ASTElement element : astElements) {
+			if (element == null)
+				continue;
 			if (element.range().within(pos)) {
 				element.walk(ast -> {
 					if (ast instanceof ASTInstruction instruction) {

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/AssemblerPane.java
Patch:
@@ -367,6 +367,7 @@ private CompletableFuture<Result<List<ASTElement>>> parseAST() {
 					// The transform failed.
 					lastPartialAst = partialAst;
 					eachChild(AssemblerAstConsumer.class, c -> c.consumeAst(partialAst, AstPhase.CONCRETE_PARTIAL));
+					processErrors(errors, ProblemPhase.LINT);
 				});
 			}
 

File: recaf-core/src/main/java/software/coley/recaf/services/compile/CompilerDiagnostic.java
Patch:
@@ -16,7 +16,7 @@
  *
  * @author Matt Coley
  */
-public record CompilerDiagnostic(int line, int column, @Nonnull String message, @Nonnull Level level) {
+public record CompilerDiagnostic(int line, int column, int length, @Nonnull String message, @Nonnull Level level) {
 	/**
 	 * @param line
 	 * 		New line number.
@@ -25,7 +25,7 @@ public record CompilerDiagnostic(int line, int column, @Nonnull String message,
 	 */
 	@Nonnull
 	public CompilerDiagnostic withLine(int line) {
-		return new CompilerDiagnostic(line, column, message, level);
+		return new CompilerDiagnostic(line, column, length, message, level);
 	}
 
 	@Override

File: recaf-core/src/main/java/software/coley/recaf/services/compile/JavacCompiler.java
Patch:
@@ -180,6 +180,7 @@ public void report(@Nonnull Diagnostic<? extends JavaFileObject> diagnostic) {
 					diagnostics.add(new CompilerDiagnostic(
 							(int) diagnostic.getLineNumber(),
 							(int) diagnostic.getColumnNumber(),
+							(int) diagnostic.getEndPosition() - (int) diagnostic.getPosition(),
 							diagnostic.getMessage(Locale.getDefault()),
 							mapKind(diagnostic.getKind())
 					));

File: recaf-core/src/main/java/software/coley/recaf/services/script/JavacScriptEngine.java
Patch:
@@ -213,7 +213,8 @@ private GenerateResult generateStandardClass(@Nonnull String source) {
 			source = source.replace("\t" + originalName + "(", "\t" + modifiedName + "(");
 		} else {
 			return new GenerateResult(null, List.of(
-					new CompilerDiagnostic(-1, -1, "Could not determine name of class", CompilerDiagnostic.Level.ERROR)));
+					new CompilerDiagnostic(-1, -1, 0,
+							"Could not determine name of class", CompilerDiagnostic.Level.ERROR)));
 		}
 
 		// Compile the class

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/problem/Problem.java
Patch:
@@ -17,13 +17,12 @@ public record Problem(int line, int column, int length, ProblemLevel level, Prob
 	 */
 	@Nonnull
 	public static Problem fromDiagnostic(@Nonnull CompilerDiagnostic diagnostic) {
-		// TODO: refactor CompilerDiagnostic to also have a length field
 		ProblemLevel level = switch (diagnostic.level()) {
 			case WARNING -> ProblemLevel.WARN;
 			case INFO -> ProblemLevel.INFO;
 			default -> ProblemLevel.ERROR;
 		};
-		return new Problem(diagnostic.line(), diagnostic.column(), 1,
+		return new Problem(diagnostic.line(), diagnostic.column(), diagnostic.length(),
 				level, ProblemPhase.BUILD, diagnostic.message());
 	}
 

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/search/ClassReferenceSearchPane.java
Patch:
@@ -58,7 +58,7 @@ public ClassReferenceSearchPane(@Nonnull WorkspaceManager workspaceManager,
 		TextField textField = new TextField();
 		ComboBox<String> modeCombo = new BoundBiDiComboBox<>(typePredicateId, stringPredicates,
 				ToStringConverter.from(s -> Lang.get(StringPredicate.TRANSLATION_PREFIX + s)));
-		modeCombo.getSelectionModel().select(0);
+		modeCombo.getSelectionModel().select(StringPredicateProvider.KEY_CONTAINS);
 
 		GridPane input = new GridPane();
 		ColumnConstraints colTexts = new ColumnConstraints();

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/search/MemberReferenceSearchPane.java
Patch:
@@ -65,13 +65,13 @@ public MemberReferenceSearchPane(@Nonnull WorkspaceManager workspaceManager,
 		TextField textDesc = new TextField();
 		ComboBox<String> modeComboOwner = new BoundBiDiComboBox<>(ownerPredicateId, stringPredicates,
 				ToStringConverter.from(s -> Lang.get(StringPredicate.TRANSLATION_PREFIX + s)));
-		modeComboOwner.getSelectionModel().select(0);
+		modeComboOwner.getSelectionModel().select(StringPredicateProvider.KEY_CONTAINS);
 		ComboBox<String> modeComboName = new BoundBiDiComboBox<>(namePredicateId, stringPredicates,
 				ToStringConverter.from(s -> Lang.get(StringPredicate.TRANSLATION_PREFIX + s)));
-		modeComboName.getSelectionModel().select(0);
+		modeComboName.getSelectionModel().select(StringPredicateProvider.KEY_CONTAINS);
 		ComboBox<String> modeComboDesc = new BoundBiDiComboBox<>(descPredicateId, stringPredicates,
 				ToStringConverter.from(s -> Lang.get(StringPredicate.TRANSLATION_PREFIX + s)));
-		modeComboDesc.getSelectionModel().select(0);
+		modeComboDesc.getSelectionModel().select(StringPredicateProvider.KEY_CONTAINS);
 
 		GridPane input = new GridPane();
 		ColumnConstraints colTexts = new ColumnConstraints();

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/search/NumberSearchPane.java
Patch:
@@ -62,7 +62,7 @@ public NumberSearchPane(@Nonnull WorkspaceManager workspaceManager,
 		DynamicNumericTextField textField = new DynamicNumericTextField(numericValueProperty, numericTypeProperty);
 		ComboBox<String> modeCombo = new BoundBiDiComboBox<>(numericPredicateId, biPredicates,
 				ToStringConverter.from(s -> Lang.get(NumberPredicate.TRANSLATION_PREFIX + s)));
-		modeCombo.getSelectionModel().select(0);
+		modeCombo.getSelectionModel().select(NumberPredicateProvider.KEY_EQUAL);
 		isBlank = textField.textProperty().isEmpty();
 
 		GridPane input = new GridPane();

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/search/StringSearchPane.java
Patch:
@@ -58,7 +58,7 @@ public StringSearchPane(@Nonnull WorkspaceManager workspaceManager,
 		TextField textField = new TextField();
 		ComboBox<String> modeCombo = new BoundBiDiComboBox<>(stringPredicateId, stringPredicates,
 				ToStringConverter.from(s -> Lang.get(StringPredicate.TRANSLATION_PREFIX + s)));
-		modeCombo.getSelectionModel().select(0);
+		modeCombo.getSelectionModel().select(StringPredicateProvider.KEY_CONTAINS);
 
 		GridPane input = new GridPane();
 		ColumnConstraints colTexts = new ColumnConstraints();

File: recaf-core/src/main/java/software/coley/recaf/util/BlwUtil.java
Patch:
@@ -4,7 +4,7 @@
 import dev.xdark.blw.code.Instruction;
 import dev.xdark.blw.code.instruction.*;
 import jakarta.annotation.Nonnull;
-import me.darknet.assembler.helper.Names;
+import me.darknet.assembler.helper.Variables;
 import me.darknet.assembler.printer.InstructionPrinter;
 import me.darknet.assembler.printer.PrintContext;
 import org.objectweb.asm.tree.*;
@@ -55,7 +55,7 @@ public static Instruction convert(@Nonnull AbstractInsnNode insn) {
 	public static String toString(@Nonnull AbstractInsnNode insn) {
 		PrintContext<?> ctx = new PrintContext<>("");
 		InstructionPrinter printer = new InstructionPrinter(ctx.code(),
-				null, new Names(Collections.emptyMap(), Collections.emptyList()),
+				null, new Variables(Collections.emptyNavigableMap(), Collections.emptyList()),
 				Collections.emptyMap()
 		);
 

File: recaf-ui/src/main/java/software/coley/recaf/ui/window/SystemInformationWindow.java
Patch:
@@ -1,5 +1,6 @@
 package software.coley.recaf.ui.window;
 
+import jakarta.annotation.Nonnull;
 import jakarta.enterprise.context.Dependent;
 import jakarta.inject.Inject;
 import javafx.scene.control.ScrollPane;
@@ -17,7 +18,7 @@
 @Dependent
 public class SystemInformationWindow extends AbstractIdentifiableStage {
 	@Inject
-	public SystemInformationWindow(SystemInformationPane infoPane) {
+	public SystemInformationWindow(@Nonnull SystemInformationPane infoPane) {
 		super(WindowManager.WIN_INFO);
 
 		// Layout

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/JvmStackAnalysisPane.java
Patch:
@@ -59,15 +59,15 @@ public JvmStackAnalysisPane(@Nonnull CellConfigurationService cellConfigurationS
 		TableColumn<JvmVariableState, ClassType> columnType = new TableColumn<>(Lang.get("assembler.variables.type"));
 		TableColumn<JvmVariableState, ValueTableCell.ValueWrapper> columnValue = new TableColumn<>(Lang.get("assembler.variables.value"));
 		columnName.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().name));
-		columnType.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().value instanceof Value.NullValue ? null : param.getValue().type));
+		columnType.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().value instanceof Value.NullValue ? TypeTableCell.NULL_TYPE : param.getValue().type));
 		columnValue.setCellValueFactory(param -> new SimpleObjectProperty<>(new ValueTableCell.ValueWrapper(param.getValue().value, param.getValue().priorValue)));
 		columnType.setCellFactory(param -> new TypeTableCell<>(cellConfigurationService, formatConfig, workspace));
 		columnValue.setCellFactory(param -> new ValueTableCell<>());
 		varTable.getColumns().addAll(columnName, columnType, columnValue);
 
 		TableColumn<JvmStackState, ClassType> columnTypeStack = new TableColumn<>(Lang.get("assembler.analysis.type"));
 		TableColumn<JvmStackState, ValueTableCell.ValueWrapper> columnValueStack = new TableColumn<>(Lang.get("assembler.analysis.value"));
-		columnTypeStack.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().type));
+		columnTypeStack.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().value instanceof Value.NullValue ? TypeTableCell.NULL_TYPE : param.getValue().type));
 		columnValueStack.setCellValueFactory(param -> new SimpleObjectProperty<>(new ValueTableCell.ValueWrapper(param.getValue().value, param.getValue().priorValue)));
 		columnTypeStack.setCellFactory(param -> new TypeTableCell<>(cellConfigurationService, formatConfig, workspace));
 		columnValueStack.setCellFactory(param -> new ValueTableCell<>());

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/hex/cell/HexRow.java
Patch:
@@ -110,7 +110,7 @@ private void buildLayout() {
 					}
 				} else {
 					contentHexLabels.add(new Label("  "));
-					if (showAscii) contentAsciiLabels.add(new Label("  "));
+					if (showAscii) contentAsciiLabels.add(new Label(" "));
 				}
 			}
 			layout.getStyleClass().remove("header");

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/VariableData.java
Patch:
@@ -26,7 +26,7 @@ public record VariableData(@Nonnull String name, @Nonnull ClassType type, @Nonnu
 	 */
 	@Nonnull
 	public static VariableData adaptFrom(@Nonnull Local local, @Nonnull AstUsages usage) {
-		return new VariableData(local.name(), local.type(), usage);
+		return new VariableData(local.name(), local.safeType(), usage);
 	}
 
 	/**

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/TypeTableCell.java
Patch:
@@ -2,6 +2,7 @@
 
 import dev.xdark.blw.type.*;
 import jakarta.annotation.Nonnull;
+import jakarta.annotation.Nullable;
 import javafx.scene.Node;
 import javafx.scene.control.TableCell;
 import javafx.scene.input.MouseButton;
@@ -59,12 +60,12 @@ private void configureType(@Nonnull ClassType type) {
 	}
 
 	@Nonnull
-	private CellData getTypeData(@Nonnull ClassType type) {
+	private CellData getTypeData(@Nullable ClassType type) {
 		Node graphic;
 		String text;
 		ContextMenuProvider contextSupplier = null;
 		boolean disabled = false;
-		if (type == AnalysisUtils.NULL) {
+		if (type == null) {
 			graphic = Icons.getIconView(Icons.UNINITIALIZED);
 			text = "null";
 		} else if (type == Types.VOID || type == Types.BOX_VOID) {

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/tree/WorkspaceTree.java
Patch:
@@ -96,7 +96,7 @@ public void createWorkspaceRoot(@Nullable Workspace workspace) {
 	 * @param resource
 	 * 		Resource to add to the tree.
 	 */
-	private void createResourceSubTree(WorkspaceResource resource) {
+	private void createResourceSubTree(@Nonnull WorkspaceResource resource) {
 		ResourcePathNode resourcePath = rootPath.child(resource);
 		resource.classBundleStream().forEach(bundle -> insertClasses(resourcePath, bundle));
 		resource.fileBundleStream().forEach(bundle -> insertFiles(resourcePath, bundle));

File: recaf-ui/src/main/java/software/coley/recaf/services/cell/CellConfigurationService.java
Patch:
@@ -103,7 +103,7 @@ public void reset(@Nonnull Cell<?> cell) {
 		cell.setText(null);
 		cell.setGraphic(null);
 		cell.setContextMenu(null);
-		cell.setOnMousePressed(null);
+		cell.setOnMouseClicked(null);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/info/JvmClassInfo.java
Patch:
@@ -95,7 +95,7 @@ default NavigableSet<String> getReferencedClasses() {
 						String methodDesc = reader.readUTF8(offset, buffer);
 						if (methodDesc.isEmpty() || methodDesc.charAt(0) != '(')
 							continue;
-						addType(Type.getMethodType(methodDesc), classNames);
+						addMethodType(Type.getMethodType(methodDesc), classNames);
 					}
 				} catch (Throwable ignored) {
 					// Exists only to catch situations where obfuscators put unused junk pool entries
@@ -137,6 +137,8 @@ private static void addName(@Nonnull String className, @Nonnull Set<String> clas
 			return;
 		if (className.indexOf(0) == '[' || className.charAt(className.length() - 1) == ';')
 			addType(Type.getType(className), classNames);
+		else if (className.indexOf(0) == '(')
+			addMethodType(Type.getMethodType(className), classNames);
 		else
 			classNames.add(className);
 	}

File: recaf-core/src/main/java/software/coley/recaf/info/builder/JvmClassInfoBuilder.java
Patch:
@@ -351,6 +351,7 @@ public void visitAttribute(Attribute attribute) {
 
 				@Override
 				public void visitEnd() {
+					super.visitEnd();
 					methods.add(getMethodMember());
 				}
 			};

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/AbstractDecompilePane.java
Patch:
@@ -370,7 +370,7 @@ private DecompileProgressOverlay() {
 			}, FxThreadUtil.executor());
 		}
 
-		private class BytecodeTransition extends Transition {
+		private static class BytecodeTransition extends Transition {
 			private final Labeled labeled;
 			private byte[] bytecode;
 

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/fallback/FallbackDecompiler.java
Patch:
@@ -1,6 +1,5 @@
 package software.coley.recaf.services.decompile.fallback;
 
-import com.strobel.Procyon;
 import jakarta.annotation.Nonnull;
 import jakarta.enterprise.context.ApplicationScoped;
 import jakarta.inject.Inject;
@@ -19,6 +18,7 @@
 @ApplicationScoped
 public class FallbackDecompiler extends AbstractJvmDecompiler {
 	public static final String NAME = "Fallback";
+	private static final String VERSION = "1.0.0";
 	private final TextFormatConfig formatConfig;
 
 	/**
@@ -29,7 +29,7 @@ public class FallbackDecompiler extends AbstractJvmDecompiler {
 	 */
 	@Inject
 	public FallbackDecompiler(@Nonnull FallbackConfig config, @Nonnull TextFormatConfig formatConfig) {
-		super(NAME, Procyon.version(), config);
+		super(NAME, VERSION, config);
 		this.formatConfig = formatConfig;
 	}
 

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/fallback/print/ClassPrinter.java
Patch:
@@ -432,6 +432,8 @@ private void appendField(@Nonnull Printer out, @Nonnull FieldMember field) {
 	 */
 	private boolean isEnumConst(@Nonnull FieldMember field) {
 		String descriptor = field.getDescriptor();
+		if (descriptor.length() < 3) return false;
+
 		String type = descriptor.substring(1, descriptor.length() - 1);
 
 		// Must be same type as declaring class.

File: recaf-core/src/main/java/software/coley/recaf/services/inheritance/InheritanceVertex.java
Patch:
@@ -185,11 +185,13 @@ public boolean isLibraryMethod(String name, String desc) {
 		// Check against this definition
 		if (!isPrimary && hasMethod(name, desc))
 			return true;
+
 		// Check parents.
 		// If we extend a class with a library definition then it should be considered a library method.
 		for (InheritanceVertex parent : getParents())
 			if (parent.isLibraryMethod(name, desc))
 				return true;
+
 		// No library definition found, so its safe to rename.
 		return false;
 	}

File: recaf-core/src/main/java/software/coley/recaf/services/mapping/MappingListeners.java
Patch:
@@ -43,7 +43,7 @@ public MappingListeners(@Nonnull MappingListenersConfig config) {
 	 * @param listener
 	 * 		Listener to add.
 	 */
-	public void addMappingApplicationListener(@Nonnull MappingApplicationListener listener) {
+	public synchronized void addMappingApplicationListener(@Nonnull MappingApplicationListener listener) {
 		mappingApplicationListeners.add(listener);
 	}
 
@@ -54,7 +54,7 @@ public void addMappingApplicationListener(@Nonnull MappingApplicationListener li
 	 * @return {@code true} when item was removed.
 	 * {@code false} when item was not in the list to begin with.
 	 */
-	public boolean removeMappingApplicationListener(@Nonnull MappingApplicationListener listener) {
+	public synchronized boolean removeMappingApplicationListener(@Nonnull MappingApplicationListener listener) {
 		return mappingApplicationListeners.remove(listener);
 	}
 
@@ -64,7 +64,7 @@ public boolean removeMappingApplicationListener(@Nonnull MappingApplicationListe
 	 */
 	@Nullable
 	public MappingApplicationListener createBundledMappingApplicationListener() {
-		final List<MappingApplicationListener> listeners = mappingApplicationListeners;
+		final List<MappingApplicationListener> listeners = new ArrayList<>(mappingApplicationListeners);
 
 		// Simple edge cases.
 		if (listeners.isEmpty())

File: recaf-core/src/main/java/software/coley/recaf/analytics/logging/Logging.java
Patch:
@@ -50,15 +50,15 @@ public static DebuggingLogger get(Class<?> cls) {
 	 * @param consumer
 	 * 		New log message consumer.
 	 */
-	public static void addLogConsumer(LogConsumer<String> consumer) {
+	public static void addLogConsumer(@Nonnull LogConsumer<String> consumer) {
 		logConsumers.add(consumer);
 	}
 
 	/**
 	 * @param consumer
 	 * 		Log message consumer to remove.
 	 */
-	public static void removeLogConsumer(LogConsumer<String> consumer) {
+	public static void removeLogConsumer(@Nonnull LogConsumer<String> consumer) {
 		logConsumers.remove(consumer);
 	}
 

File: recaf-ui/src/main/java/software/coley/recaf/services/navigation/Actions.java
Patch:
@@ -1923,7 +1923,7 @@ private <T extends AbstractSearchPane> T openSearchPane(@Nonnull String titleId,
 			region = dockingManager.newRegion();
 			DockingTab tab = region.createTab(getBinding(titleId), content);
 			tab.setGraphic(new FontIconView(icon));
-			RecafScene scene = new RecafScene((region));
+			RecafScene scene = new RecafScene(region);
 			Stage window = windowFactory.createAnonymousStage(scene, getBinding("menu.search"), 800, 400);
 			window.show();
 			window.requestFocus();

File: recaf-ui/src/main/java/software/coley/recaf/services/window/WindowFactory.java
Patch:
@@ -8,7 +8,6 @@
 import javafx.stage.Stage;
 import software.coley.recaf.services.Service;
 import software.coley.recaf.ui.window.RecafStage;
-import software.coley.recaf.util.Icons;
 
 /**
  * Creates new windows.

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/Editor.java
Patch:
@@ -197,6 +197,7 @@ public CompletableFuture<Void> restyleAtPosition(int position, int length) {
 	 *
 	 * @return The {@link StackPane} present in the {@link #getCenter() center} of the editor.
 	 */
+	@Nonnull
 	public StackPane getPrimaryStack() {
 		return stackPane;
 	}
@@ -216,6 +217,7 @@ public void redrawParagraphGraphics() {
 	/**
 	 * @return Current style spans for the entire document.
 	 */
+	@Nonnull
 	public StyleSpans<Collection<String>> getStyleSpans() {
 		return codeArea.getStyleSpans(0, getTextLength());
 	}

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/vineflower/BaseSource.java
Patch:
@@ -6,6 +6,7 @@
 import software.coley.recaf.workspace.model.Workspace;
 
 import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.io.InputStream;
 
 /**
@@ -33,7 +34,7 @@ public String getName() {
 	public InputStream getInputStream(String resource) {
 		String name = resource.substring(0, resource.length() - IContextSource.CLASS_SUFFIX.length());
 		ClassPathNode node = workspace.findClass(name);
-		if (node == null) return InputStream.nullInputStream();
+		if (node == null) return null; // VF wants missing data to be null here, not an IOException or empty stream.
 		return new ByteArrayInputStream(node.getValue().asJvmClass().getBytecode());
 	}
 }

File: recaf-core/src/main/java/software/coley/recaf/util/visitors/IllegalSignatureRemovingVisitor.java
Patch:
@@ -52,10 +52,10 @@ public void visitLocalVariable(String name, String desc, String s, Label start,
 		};
 	}
 
-	private String map(String signature, boolean isOnClassOrMethod) {
+	private String map(String signature, boolean isTypeSignature) {
 		if (signature == null)
 			return null;
-		if (Types.isValidSignature(signature, isOnClassOrMethod))
+		if (Types.isValidSignature(signature, isTypeSignature))
 			return signature;
 		detected = true;
 		return null;

File: recaf-core/src/main/java/software/coley/recaf/info/annotation/AnnotationElement.java
Patch:
@@ -1,6 +1,7 @@
 package software.coley.recaf.info.annotation;
 
 import jakarta.annotation.Nonnull;
+import org.objectweb.asm.Type;
 
 import java.util.List;
 
@@ -17,7 +18,8 @@ public interface AnnotationElement {
 	String getElementName();
 
 	/**
-	 * @return Element value. Can be a primitive, {@link String}, a {@link AnnotationElement}, or a {@link List} of any of the prior values.
+	 * @return Element value. Can be a primitive, {@link String}, a {@link AnnotationInfo},
+	 * a {@link AnnotationEnumReference}, a {@link Type}, or a {@link List} of any of the prior values.
 	 */
 	@Nonnull
 	Object getElementValue();

File: recaf-core/src/main/java/software/coley/recaf/services/mapping/format/MappingFileFormat.java
Patch:
@@ -110,7 +110,7 @@ default String exportText(@Nonnull Mappings mappings) throws InvalidMappingExcep
 	@Nonnull
 	static IntermediateMappings parse(@Nonnull String mappingText, @Nonnull MappingTreeReader visitor) throws InvalidMappingException {
 		// Populate the mapping-io model
-		MemoryMappingTree tree = new MemoryMappingTree(true);
+		MemoryMappingTree tree = new MemoryMappingTree();
 		StringReader reader = new StringReader(mappingText);
 		try {
 			visitor.read(reader, tree);

File: recaf-ui/src/main/java/software/coley/recaf/workspace/PathExportingManager.java
Patch:
@@ -73,7 +73,7 @@ public void export(@Nonnull Workspace workspace) {
 		// Check if the user hasn't made any changes. Plenty of people have not understood that their changes weren't
 		// saved for one reason or another (the amount of people seeing a red flash thinking that is fine is crazy)
 		WorkspaceResource primaryResource = workspace.getPrimaryResource();
-		boolean noChangesFound = exportConfig.getWarnNoChanges().getValue() && primaryResource.bundleStream()
+		boolean noChangesFound = exportConfig.getWarnNoChanges().getValue() && primaryResource.bundleStreamRecursive()
 				.allMatch(b -> b.getDirtyKeys().isEmpty());
 		if (noChangesFound) {
 			Alert alert = new Alert(Alert.AlertType.CONFIRMATION, Lang.get("dialog.file.nochanges"), ButtonType.YES, ButtonType.NO);

File: recaf-core/src/main/java/software/coley/recaf/util/io/MemorySegmentDataSource.java
Patch:
@@ -53,6 +53,7 @@ public InputStream openStream() {
 		return new MemorySegmentInputStream(data);
 	}
 
+	// TODO: Replace this class with the one from LL-J-Zip when the next release is made
 	private static final class MemorySegmentInputStream extends InputStream {
 		private final MemorySegment data;
 		private long read;

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/AbstractJvmDecompiler.java
Patch:
@@ -39,7 +39,7 @@ public boolean addJvmBytecodeFilter(@Nonnull JvmBytecodeFilter filter) {
 
 	@Override
 	public boolean removeJvmBytecodeFilter(@Nonnull JvmBytecodeFilter filter) {
-		return bytecodeFilters.add(filter);
+		return bytecodeFilters.remove(filter);
 	}
 
 	@Nonnull

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/AbstractJvmDecompiler.java
Patch:
@@ -39,7 +39,7 @@ public boolean addJvmBytecodeFilter(@Nonnull JvmBytecodeFilter filter) {
 
 	@Override
 	public boolean removeJvmBytecodeFilter(@Nonnull JvmBytecodeFilter filter) {
-		return bytecodeFilters.add(filter);
+		return bytecodeFilters.remove(filter);
 	}
 
 	@Nonnull

File: recaf-ui/src/main/java/software/coley/recaf/Main.java
Patch:
@@ -11,7 +11,6 @@
 import software.coley.recaf.launch.LaunchArguments;
 import software.coley.recaf.launch.LaunchCommand;
 import software.coley.recaf.launch.LaunchHandler;
-import software.coley.recaf.plugin.Plugin;
 import software.coley.recaf.plugin.PluginContainer;
 import software.coley.recaf.services.file.RecafDirectoriesConfig;
 import software.coley.recaf.services.plugin.PluginManager;
@@ -181,7 +180,7 @@ private static void initPlugins() {
 		PluginManager pluginManager = recaf.get(PluginManager.class);
 
 		// Log the discovered plugins
-		Collection<PluginContainer<? extends Plugin>> plugins = pluginManager.getPlugins();
+		Collection<PluginContainer<?>> plugins = pluginManager.getPlugins();
 		if (plugins.isEmpty()) {
 			logger.info("Initialization: No plugins found");
 		} else {

File: recaf-ui/src/main/java/software/coley/recaf/services/cell/context/BasicFieldContextMenuProviderFactory.java
Patch:
@@ -101,7 +101,7 @@ public ContextMenuProvider getFieldContextMenuProvider(@Nonnull ContextSource so
 				pane.descPredicateIdProperty().setValue(StringPredicateProvider.KEY_EQUALS);
 				pane.ownerValueProperty().setValue(declaringClass.getName());
 				pane.nameValueProperty().setValue(field.getName());
-				pane.descPredicateIdProperty().setValue(field.getDescriptor());
+				pane.descValueProperty().setValue(field.getDescriptor());
 			});
 
 			// Documentation actions

File: recaf-ui/src/main/java/software/coley/recaf/services/cell/context/BasicMethodContextMenuProviderFactory.java
Patch:
@@ -104,7 +104,7 @@ public ContextMenuProvider getMethodContextMenuProvider(@Nonnull ContextSource s
 				pane.descPredicateIdProperty().setValue(StringPredicateProvider.KEY_EQUALS);
 				pane.ownerValueProperty().setValue(declaringClass.getName());
 				pane.nameValueProperty().setValue(method.getName());
-				pane.descPredicateIdProperty().setValue(method.getDescriptor());
+				pane.descValueProperty().setValue(method.getDescriptor());
 			});
 
 			// Documentation actions

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/procyon/ProcyonConfig.java
Patch:
@@ -63,6 +63,7 @@ public ProcyonConfig() {
 		addValue(new BasicConfigValue<>("textBlockLineMinimum", int.class, textBlockLineMinimum));
 		addValue(new BasicConfigValue<>("forcedCompilerTarget", CompilerTarget.class, forcedCompilerTarget));
 		addValue(new BasicConfigValue<>("bytecodeOutputOptions", BytecodeOutputOptions.class, bytecodeOutputOptions));
+		registerConfigValuesHashUpdates();
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/services/comment/CommentManager.java
Patch:
@@ -22,8 +22,8 @@
 import software.coley.recaf.path.ClassPathNode;
 import software.coley.recaf.services.Service;
 import software.coley.recaf.services.decompile.DecompilerManager;
-import software.coley.recaf.services.decompile.JvmBytecodeFilter;
-import software.coley.recaf.services.decompile.OutputTextFilter;
+import software.coley.recaf.services.decompile.filter.JvmBytecodeFilter;
+import software.coley.recaf.services.decompile.filter.OutputTextFilter;
 import software.coley.recaf.services.file.RecafDirectoriesConfig;
 import software.coley.recaf.services.json.GsonProvider;
 import software.coley.recaf.services.mapping.*;

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/AbstractDecompiler.java
Patch:
@@ -1,6 +1,7 @@
 package software.coley.recaf.services.decompile;
 
 import jakarta.annotation.Nonnull;
+import software.coley.recaf.services.decompile.filter.OutputTextFilter;
 
 import java.util.HashSet;
 import java.util.Set;

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/AbstractJvmDecompiler.java
Patch:
@@ -1,9 +1,10 @@
 package software.coley.recaf.services.decompile;
 
 import jakarta.annotation.Nonnull;
-import org.objectweb.asm.ClassReader;
 import software.coley.recaf.info.JvmClassInfo;
 import software.coley.recaf.info.properties.builtin.CachedDecompileProperty;
+import software.coley.recaf.services.decompile.filter.JvmBytecodeFilter;
+import software.coley.recaf.services.decompile.filter.OutputTextFilter;
 import software.coley.recaf.workspace.model.Workspace;
 
 import java.util.HashSet;

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/Decompiler.java
Patch:
@@ -2,6 +2,7 @@
 
 import jakarta.annotation.Nonnull;
 import software.coley.recaf.info.properties.builtin.CachedDecompileProperty;
+import software.coley.recaf.services.decompile.filter.OutputTextFilter;
 
 /**
  * Common decompiler operations.

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/DecompilerManager.java
Patch:
@@ -10,6 +10,8 @@
 import software.coley.recaf.info.AndroidClassInfo;
 import software.coley.recaf.info.JvmClassInfo;
 import software.coley.recaf.services.Service;
+import software.coley.recaf.services.decompile.filter.JvmBytecodeFilter;
+import software.coley.recaf.services.decompile.filter.OutputTextFilter;
 import software.coley.recaf.util.threading.ThreadPoolFactory;
 import software.coley.recaf.workspace.model.Workspace;
 

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/JvmDecompiler.java
Patch:
@@ -2,6 +2,7 @@
 
 import jakarta.annotation.Nonnull;
 import software.coley.recaf.info.JvmClassInfo;
+import software.coley.recaf.services.decompile.filter.JvmBytecodeFilter;
 import software.coley.recaf.workspace.model.Workspace;
 
 /**

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/cfr/SinkFactoryImpl.java
Patch:
@@ -40,9 +40,11 @@ public <T> Sink<T> getSink(SinkType sinkType, SinkClass sinkClass) {
 	}
 
 	private <T> void handleException(T value) {
-		logger.error("CFR Error: {}", value);
 		if (value instanceof Throwable) {
+			logger.error("CFR Error: {}", value);
 			exception = (Throwable) value;
+		} else {
+			logger.error("CFR encountered an error but provided no additional information");
 		}
 	}
 

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/filter/JvmBytecodeFilter.java
Patch:
@@ -1,7 +1,8 @@
-package software.coley.recaf.services.decompile;
+package software.coley.recaf.services.decompile.filter;
 
 import jakarta.annotation.Nonnull;
 import software.coley.recaf.info.JvmClassInfo;
+import software.coley.recaf.services.decompile.JvmDecompiler;
 import software.coley.recaf.workspace.model.Workspace;
 
 /**

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/filter/OutputTextFilter.java
Patch:
@@ -1,4 +1,4 @@
-package software.coley.recaf.services.decompile;
+package software.coley.recaf.services.decompile.filter;
 
 import jakarta.annotation.Nonnull;
 import software.coley.recaf.info.ClassInfo;

File: recaf-core/src/test/java/software/coley/recaf/services/decompile/DecompileManagerTest.java
Patch:
@@ -6,6 +6,8 @@
 import software.coley.recaf.info.ClassInfo;
 import software.coley.recaf.info.JvmClassInfo;
 import software.coley.recaf.services.decompile.cfr.CfrDecompiler;
+import software.coley.recaf.services.decompile.filter.JvmBytecodeFilter;
+import software.coley.recaf.services.decompile.filter.OutputTextFilter;
 import software.coley.recaf.services.decompile.procyon.ProcyonDecompiler;
 import software.coley.recaf.services.decompile.vineflower.VineflowerDecompiler;
 import software.coley.recaf.test.TestBase;

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/tree/TreeFiltering.java
Patch:
@@ -1,5 +1,6 @@
 package software.coley.recaf.ui.control.tree;
 
+import jakarta.annotation.Nonnull;
 import javafx.scene.control.TextField;
 import javafx.scene.control.TreeItem;
 import javafx.scene.control.TreeView;
@@ -24,7 +25,7 @@ public class TreeFiltering {
 	 * 		Assumed that tree contents are {@link FilterableTreeItem}.
 	 */
 	@SuppressWarnings({"unchecked", "rawtypes"})
-	public static void install(TextField filter, TreeView<?> tree) {
+	public static void install(@Nonnull TextField filter, @Nonnull TreeView<?> tree) {
 		NodeEvents.addKeyPressHandler(filter, e -> {
 			if (e.getCode() == KeyCode.ESCAPE) {
 				filter.clear();

File: recaf-ui/src/main/java/software/coley/recaf/ui/config/KeybindingConfig.java
Patch:
@@ -58,7 +58,7 @@ public KeybindingConfig(@Nonnull GsonProvider gsonProvider) {
 		addValue(new BasicMapConfigValue<>("bundle", BindingBundle.class, String.class, Binding.class, bundle));
 
 		// Register custom json adapter for the binding bundle type.
-		gsonProvider.addTypeAdapter(BindingBundle.class, (JsonDeserializer<BindingBundle>) (json, typeOfT, context) -> {
+		gsonProvider.addTypeDeserializer(BindingBundle.class, (json, typeOfT, context) -> {
 			Set<String> expected = new HashSet<>(bundle.keySet());
 			Map<String, JsonElement> map = json.getAsJsonObject().asMap();
 			List<Binding> bindings = new ArrayList<>(map.size());

File: recaf-ui/src/main/java/software/coley/recaf/services/window/WindowManager.java
Patch:
@@ -108,7 +108,7 @@ public void register(@Nonnull String id, @Nonnull Stage stage) {
 
 		// Register id --> stage
 		windowMappings.put(id, stage);
-		logger.debug("Register stage: {}", id);
+		logger.trace("Register stage: {}", id);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/services/inheritance/InheritanceGraph.java
Patch:
@@ -214,7 +214,7 @@ public InheritanceVertex getVertex(@Nonnull String name) {
 	@Nonnull
 	public Set<InheritanceVertex> getVertexFamily(@Nonnull String name, boolean includeObject) {
 		InheritanceVertex vertex = getVertex(name);
-		if (vertex == null)
+		if (vertex == null || vertex.isModule())
 			return Collections.emptySet();
 		return vertex.getFamily(includeObject);
 	}

File: recaf-core/src/main/java/software/coley/recaf/info/annotation/AnnotationInfo.java
Patch:
@@ -12,7 +12,7 @@
  *
  * @author Matt Coley
  */
-public interface AnnotationInfo {
+public interface AnnotationInfo extends Annotated {
 	/**
 	 * @param typeRef
 	 * 		Constant denoting where the annotation is applied.

File: recaf-core/src/main/java/software/coley/recaf/info/annotation/AnnotationElement.java
Patch:
@@ -2,6 +2,8 @@
 
 import jakarta.annotation.Nonnull;
 
+import java.util.List;
+
 /**
  * Outline of an annotation member.
  *
@@ -15,7 +17,7 @@ public interface AnnotationElement {
 	String getElementName();
 
 	/**
-	 * @return Element value.
+	 * @return Element value. Can be a primitive, {@link String}, a {@link AnnotationElement}, or a {@link List} of any of the prior values.
 	 */
 	@Nonnull
 	Object getElementValue();

File: recaf-core/src/main/java/software/coley/recaf/services/inheritance/InheritanceGraph.java
Patch:
@@ -289,8 +289,8 @@ private Function<String, InheritanceVertex> createVertexProvider() {
 				return STUB;
 
 			// Map class to vertex.
-			ResourcePathNode resourceParent = result.getParentOfType(WorkspaceResource.class);
-			boolean isPrimary = resourceParent != null && resourceParent.isPrimary();
+			ResourcePathNode resourcePath = result.getPathOfType(WorkspaceResource.class);
+			boolean isPrimary = resourcePath != null && resourcePath.isPrimary();
 			ClassInfo info = result.getValue();
 			return new InheritanceVertex(info, this::getVertex, this::getDirectChildren, isPrimary);
 		};

File: recaf-core/src/test/java/software/coley/recaf/services/search/SearchServiceTest.java
Patch:
@@ -141,9 +141,9 @@ void testMethodPath() {
 				if (result.getPath() instanceof InstructionPathNode instructionPath) {
 					assertEquals(BIPUSH, instructionPath.getValue().getOpcode());
 
-					ClassMemberPathNode parentOfType = instructionPath.getParentOfType(ClassMember.class);
-					assertNotNull(parentOfType);
-					ClassMember declaredMember = parentOfType.getValue();
+					ClassMemberPathNode memberPath = instructionPath.getPathOfType(ClassMember.class);
+					assertNotNull(memberPath);
+					ClassMember declaredMember = memberPath.getValue();
 					assertTrue(declaredMember.isMethod());
 					assertEquals("hashCode", declaredMember.getName());
 					assertEquals("()I", declaredMember.getDescriptor());

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/AssemblerPane.java
Patch:
@@ -221,7 +221,7 @@ public PathNode<?> getPath() {
 	@Nonnull
 	@Override
 	public ClassPathNode getClassPath() {
-		return Objects.requireNonNull(path.getParentOfType(ClassInfo.class), "Missing class parent path");
+		return Objects.requireNonNull(path.getPathOfType(ClassInfo.class), "Missing class parent path");
 	}
 
 	@Override

File: recaf-core/src/main/java/software/coley/recaf/path/PathNode.java
Patch:
@@ -52,7 +52,7 @@ public interface PathNode<V> extends Comparable<PathNode<?>> {
 	 */
 	@Nullable
 	@SuppressWarnings("unchecked")
-	default <T, I extends PathNode<T>> I getParentOfType(@Nonnull Class<T> type) {
+	default <T, I extends PathNode<? extends T>> I getParentOfType(@Nonnull Class<T> type) {
 		if (type.isAssignableFrom(getValueType()))
 			return (I) this;
 		PathNode<?> parent = getParent();

File: recaf-core/src/main/java/software/coley/recaf/path/AnnotationPathNode.java
Patch:
@@ -43,7 +43,7 @@ public AnnotationPathNode(@Nonnull AnnotationInfo annotation) {
 	 */
 	@SuppressWarnings("unchecked")
 	public AnnotationPathNode(@Nullable PathNode<?> parent, @Nonnull AnnotationInfo annotation) {
-		super(TYPE_ID, (PathNode<Object>) parent, AnnotationInfo.class, annotation);
+		super(TYPE_ID, (PathNode<Object>) parent, annotation);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/path/BundlePathNode.java
Patch:
@@ -43,7 +43,7 @@ public BundlePathNode(@Nonnull Bundle<?> bundle) {
 	 * @see ResourcePathNode#child(Bundle)
 	 */
 	public BundlePathNode(@Nullable ResourcePathNode parent, @Nonnull Bundle<?> bundle) {
-		super(TYPE_ID, parent, Bundle.class, bundle);
+		super(TYPE_ID, parent, bundle);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/path/CatchPathNode.java
Patch:
@@ -39,7 +39,7 @@ public CatchPathNode(@Nonnull String type) {
 	 * @see ClassMemberPathNode#childCatch(String)
 	 */
 	public CatchPathNode(@Nullable ClassMemberPathNode parent, @Nonnull String type) {
-		super(TYPE_ID, parent, String.class, type);
+		super(TYPE_ID, parent, type);
 	}
 
 	@Override

File: recaf-core/src/main/java/software/coley/recaf/path/ClassMemberPathNode.java
Patch:
@@ -44,7 +44,7 @@ public ClassMemberPathNode(@Nonnull ClassMember member) {
 	 * @see ClassPathNode#child(ClassMember)
 	 */
 	public ClassMemberPathNode(@Nullable ClassPathNode parent, @Nonnull ClassMember member) {
-		super(TYPE_ID, parent, ClassMember.class, member);
+		super(TYPE_ID, parent, member);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/path/ClassPathNode.java
Patch:
@@ -41,7 +41,7 @@ public ClassPathNode(@Nonnull ClassInfo info) {
 	 * @see DirectoryPathNode#child(ClassInfo)
 	 */
 	public ClassPathNode(@Nullable DirectoryPathNode parent, @Nonnull ClassInfo info) {
-		super(TYPE_ID, parent, ClassInfo.class, info);
+		super(TYPE_ID, parent, info);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/path/DirectoryPathNode.java
Patch:
@@ -41,7 +41,7 @@ public DirectoryPathNode(@Nonnull String directory) {
 	 * @see BundlePathNode#child(String)
 	 */
 	public DirectoryPathNode(@Nullable BundlePathNode parent, @Nonnull String directory) {
-		super(TYPE_ID, parent, String.class, directory);
+		super(TYPE_ID, parent, directory);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/path/FilePathNode.java
Patch:
@@ -38,7 +38,7 @@ public FilePathNode(@Nonnull FileInfo info) {
 	 * @see DirectoryPathNode#child(FileInfo)
 	 */
 	public FilePathNode(@Nullable DirectoryPathNode parent, @Nonnull FileInfo info) {
-		super(TYPE_ID, parent, FileInfo.class, info);
+		super(TYPE_ID, parent, info);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/path/InnerClassPathNode.java
Patch:
@@ -31,7 +31,7 @@ public class InnerClassPathNode extends AbstractPathNode<ClassInfo, InnerClassIn
 	 */
 	public InnerClassPathNode(@Nullable ClassPathNode parent,
 							  @Nonnull InnerClassInfo innerClass) {
-		super(TYPE_ID, parent, InnerClassInfo.class, innerClass);
+		super(TYPE_ID, parent, innerClass);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/path/InstructionPathNode.java
Patch:
@@ -49,7 +49,7 @@ public InstructionPathNode(@Nonnull AbstractInsnNode insn, int index) {
 	 * @see ClassMemberPathNode#childInsn(AbstractInsnNode,int)
 	 */
 	public InstructionPathNode(@Nullable ClassMemberPathNode parent, @Nonnull AbstractInsnNode insn, int index) {
-		super(TYPE_ID, parent, AbstractInsnNode.class, insn);
+		super(TYPE_ID, parent, insn);
 		this.index = index;
 	}
 

File: recaf-core/src/main/java/software/coley/recaf/path/LineNumberPathNode.java
Patch:
@@ -38,7 +38,7 @@ public LineNumberPathNode(int line) {
 	 * @see FilePathNode#child(int)
 	 */
 	public LineNumberPathNode(@Nullable FilePathNode parent, int line) {
-		super(TYPE_ID, parent, Integer.class, line);
+		super(TYPE_ID, parent, line);
 	}
 
 	@Override

File: recaf-core/src/main/java/software/coley/recaf/path/LocalVariablePathNode.java
Patch:
@@ -40,7 +40,7 @@ public LocalVariablePathNode(@Nonnull LocalVariable variable) {
 	 * @see ClassMemberPathNode#childVariable(LocalVariable)
 	 */
 	public LocalVariablePathNode(@Nullable ClassMemberPathNode parent, @Nonnull LocalVariable variable) {
-		super(TYPE_ID, parent, LocalVariable.class, variable);
+		super(TYPE_ID, parent, variable);
 	}
 
 	@Override

File: recaf-core/src/main/java/software/coley/recaf/path/ResourcePathNode.java
Patch:
@@ -41,7 +41,7 @@ public ResourcePathNode(@Nonnull WorkspaceResource resource) {
 	 * @see WorkspacePathNode#child(WorkspaceResource)
 	 */
 	public ResourcePathNode(@Nullable WorkspacePathNode parent, @Nonnull WorkspaceResource resource) {
-		super(TYPE_ID, parent, WorkspaceResource.class, resource);
+		super(TYPE_ID, parent, resource);
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/path/ThrowsPathNode.java
Patch:
@@ -39,7 +39,7 @@ public ThrowsPathNode(@Nonnull String type) {
 	 * @see ClassMemberPathNode#childThrows(String)
 	 */
 	public ThrowsPathNode(@Nullable ClassMemberPathNode parent, @Nonnull String type) {
-		super(TYPE_ID, parent, String.class, type);
+		super(TYPE_ID, parent, type);
 	}
 
 	@Override

File: recaf-core/src/main/java/software/coley/recaf/path/WorkspacePathNode.java
Patch:
@@ -25,7 +25,7 @@ public class WorkspacePathNode extends AbstractPathNode<Object, Workspace> {
 	 * 		Workspace value.
 	 */
 	public WorkspacePathNode(@Nonnull Workspace value) {
-		super(TYPE_ID, null, Workspace.class, value);
+		super(TYPE_ID, null, value);
 	}
 
 	/**

File: recaf-ui/src/main/java/software/coley/recaf/path/AssemblerPathNode.java
Patch:
@@ -26,7 +26,7 @@ public class AssemblerPathNode extends AbstractPathNode<Object, AssemblerPathDat
 	 */
 	@SuppressWarnings("unchecked")
 	public AssemblerPathNode(@Nonnull PathNode<?> parent, @Nonnull AssemblerPathData data) {
-		super(TYPE_ID, (PathNode<Object>) parent, AssemblerPathData.class, data);
+		super(TYPE_ID, (PathNode<Object>) parent, data);
 	}
 
 	@Nonnull

File: recaf-ui/src/main/java/software/coley/recaf/services/navigation/NavigationManager.java
Patch:
@@ -306,7 +306,7 @@ public void onRemoveFile(@Nonnull WorkspaceResource resource, @Nonnull FileBundl
 	 */
 	private static class DummyInitialNode extends AbstractPathNode<Object, Object> {
 		private DummyInitialNode() {
-			super("dummy", null, Object.class, new Object());
+			super("dummy", null, new Object());
 		}
 
 		@Nonnull

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/popup/AddMemberPopup.java
Patch:
@@ -142,8 +142,8 @@ public AddMemberPopup(@Nonnull Consumer<ClassMember> memberConsumer) {
 		layout.setAlignment(Pos.TOP_CENTER);
 		layout.setPadding(new Insets(10));
 		setMinWidth(500);
-		setMinHeight(200);
-		setScene(new RecafScene(layout, 500, 200));
+		setMinHeight(230);
+		setScene(new RecafScene(layout, 500, 230));
 	}
 
 	private void accept(@Nonnull Consumer<ClassMember> memberConsumer) {

File: recaf-core/src/main/java/software/coley/recaf/services/source/AstUtils.java
Patch:
@@ -6,6 +6,7 @@
 import org.openrewrite.java.tree.J;
 import org.openrewrite.java.tree.JavaType;
 import org.openrewrite.marker.Range;
+import software.coley.recaf.util.Types;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -67,6 +68,8 @@ private static String toInternal(@Nonnull JavaType type, boolean desc) {
 			return toInternal(variable.getType(), desc);
 		} else if (type instanceof JavaType.GenericTypeVariable typeVariable) {
 			List<JavaType> bounds = typeVariable.getBounds();
+			if (bounds.isEmpty())
+				return Types.OBJECT_TYPE.getDescriptor();
 			if (bounds.size() == 1)
 				return toInternal(bounds.get(0));
 		}

File: recaf-core/src/main/java/software/coley/recaf/services/mapping/format/TinyV1Mappings.java
Patch:
@@ -2,14 +2,11 @@
 
 import jakarta.annotation.Nonnull;
 import jakarta.enterprise.context.Dependent;
-import net.fabricmc.mappingio.MappingVisitor;
 import net.fabricmc.mappingio.format.tiny.Tiny1FileReader;
 import net.fabricmc.mappingio.format.tiny.Tiny1FileWriter;
 import software.coley.recaf.services.mapping.IntermediateMappings;
 import software.coley.recaf.services.mapping.Mappings;
 
-import java.io.IOException;
-import java.io.Reader;
 import java.util.List;
 
 /**

File: recaf-core/src/main/java/software/coley/recaf/services/script/JavacScriptEngine.java
Patch:
@@ -243,7 +243,7 @@ private GenerateResult generateScriptClass(@Nonnull String className, @Nonnull S
 
 			// Replace text with spaces to maintain script character offsets
 			String importMatch = script.substring(matcher.start(), matcher.end());
-			script = script.replace(importMatch, StringUtil.repeat(" ", importMatch.length()));
+			script = script.replace(importMatch, " ".repeat(importMatch.length()));
 		}
 
 		// Create code (just a basic class with a static 'run' method)

File: recaf-core/src/main/java/software/coley/recaf/workspace/io/BasicResourceImporter.java
Patch:
@@ -468,9 +468,8 @@ private void deduplicateClass(JvmClassInfo existingClass, JvmClassInfo currentCl
 			cmpCurrentName = cmpCurrentName.substring(i);
 		} else if (!commonPrefix.isEmpty()) {
 			// Class names should start at the common prefix minus the intersection of the class name
-			String intersection = StringUtil.getIntersection(commonPrefix, className);
-			cmpExistingName = intersection + cmpExistingName.substring(commonPrefix.length());
-			cmpCurrentName = intersection + cmpCurrentName.substring(commonPrefix.length());
+			cmpExistingName = commonPrefix + cmpExistingName.substring(commonPrefix.length());
+			cmpCurrentName = commonPrefix + cmpCurrentName.substring(commonPrefix.length());
 		}
 
 		// Best fit checking

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/Editor.java
Patch:
@@ -170,7 +170,7 @@ public CompletableFuture<Void> restyleAtPosition(int position, int length) {
 		if (syntaxHighlighter != null) {
 			return schedule(syntaxPool, () -> {
 				IntRange range = SyntaxUtil.getRangeForRestyle(getText(), getStyleSpans(),
-						syntaxHighlighter, new PlainTextChange(position, "", StringUtil.repeat(".", length)));
+						syntaxHighlighter, new PlainTextChange(position, "", ".".repeat(length)));
 				int start = range.start();
 				int end = range.end();
 				return new StyleResult(syntaxHighlighter.createStyleSpans(getText(), start, end), start);

File: recaf-core/src/main/java/software/coley/recaf/services/mapping/format/TinyV1Mappings.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.io.IOException;
 import java.io.Reader;
+import java.util.List;
 
 /**
  * Tiny-V1 mappings file implementation.
@@ -36,6 +37,6 @@ public IntermediateMappings parse(@Nonnull String mappingText) throws InvalidMap
 
 	@Override
 	public String exportText(@Nonnull Mappings mappings) throws InvalidMappingException {
-		return MappingFileFormat.export(mappings, Tiny1FileWriter::new);
+		return MappingFileFormat.export(mappings, "intermediary", List.of("named"), Tiny1FileWriter::new);
 	}
 }

File: recaf-core/src/main/java/software/coley/recaf/services/mapping/format/TinyV2Mappings.java
Patch:
@@ -11,6 +11,7 @@
 import software.coley.recaf.services.mapping.Mappings;
 
 import java.io.StringWriter;
+import java.util.List;
 import java.util.function.Function;
 
 /**
@@ -37,6 +38,6 @@ public IntermediateMappings parse(@Nonnull String mappingText) throws InvalidMap
 
 	@Override
 	public String exportText(@Nonnull Mappings mappings) throws InvalidMappingException {
-		return MappingFileFormat.export(mappings, writer -> new Tiny2FileWriter(writer, true));
+		return MappingFileFormat.export(mappings, "intermediary", List.of("named"), writer -> new Tiny2FileWriter(writer, true));
 	}
 }

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/ProblemOverlay.java
Patch:
@@ -34,6 +34,7 @@
 import software.coley.recaf.ui.control.richtext.problem.ProblemInvalidationListener;
 import software.coley.recaf.ui.control.richtext.problem.ProblemLevel;
 import software.coley.recaf.ui.control.richtext.problem.ProblemTracking;
+import software.coley.recaf.util.FxThreadUtil;
 import software.coley.recaf.util.PlatformType;
 
 import java.util.Collection;
@@ -272,6 +273,6 @@ public void uninstall(@Nonnull Editor editor) {
 	public void onProblemInvalidation() {
 		ProblemTracking tracking = editor.getProblemTracking();
 		if (tracking != null)
-			problemCount.set(tracking.getProblems().size());
+			FxThreadUtil.run(() -> problemCount.set(tracking.getProblems().size()));
 	}
 }

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/Editor.java
Patch:
@@ -392,8 +392,10 @@ public void setProblemTracking(@Nullable ProblemTracking problemTracking) {
 		ProblemTracking previousProblemTracking = this.problemTracking;
 		if (previousProblemTracking != null)
 			previousProblemTracking.uninstall(this);
-		if (problemOverlay != null)
+		if (problemOverlay != null) {
+			problemOverlay.uninstall(this);
 			problemOverlay = null;
+		}
 
 		// Set and install new instance.
 		this.problemTracking = problemTracking;

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/linegraphics/LineContainer.java
Patch:
@@ -1,5 +1,6 @@
 package software.coley.recaf.ui.control.richtext.linegraphics;
 
+import jakarta.annotation.Nonnull;
 import javafx.geometry.Insets;
 import javafx.geometry.Pos;
 import javafx.scene.Node;
@@ -32,7 +33,7 @@ public class LineContainer extends StackPane {
 	 * 		Child to add spanning horizontally in the container.
 	 * 		Appends to the left.
 	 */
-	public void addHorizontal(Node child) {
+	public void addHorizontal(@Nonnull Node child) {
 		box.getChildren().add(child);
 	}
 
@@ -41,7 +42,7 @@ public void addHorizontal(Node child) {
 	 * 		Child to add on top of the container.
 	 * 		This refers to Z-indexing, not north-south verticality.
 	 */
-	public void addTopLayer(Node child) {
+	public void addTopLayer(@Nonnull Node child) {
 		getChildren().add(child);
 	}
 }

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/linegraphics/LineNumberFactory.java
Patch:
@@ -43,6 +43,7 @@ public void apply(@Nonnull LineContainer container, int paragraph) {
 		container.addHorizontal(label);
 	}
 
+	@Nonnull
 	private static String format(int line, int digits) {
 		return String.format(StringUtil.fillLeft(digits, " ", String.valueOf(line)));
 	}

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/linegraphics/RootLineGraphicFactory.java
Patch:
@@ -45,7 +45,7 @@ public void addLineGraphicFactories(LineGraphicFactory... factories) {
 	 * @param factory
 	 * 		Graphic factory to add.
 	 */
-	public void addLineGraphicFactory(LineGraphicFactory factory) {
+	public void addLineGraphicFactory(@Nonnull LineGraphicFactory factory) {
 		factories.add(factory);
 		factory.install(editor);
 	}
@@ -56,7 +56,7 @@ public void addLineGraphicFactory(LineGraphicFactory factory) {
 	 *
 	 * @return {@code true} when removed. {@code false} when did not exist.
 	 */
-	public boolean removeLineGraphicFactory(LineGraphicFactory factory) {
+	public boolean removeLineGraphicFactory(@Nonnull LineGraphicFactory factory) {
 		if (factories.remove(factory)) {
 			factory.uninstall(editor);
 			return true;
@@ -79,7 +79,7 @@ public Node apply(int paragraph) {
 		// Wrap so the padding of the HBox expands the space of the 'lineno'.
 		BorderPane wrapper = new BorderPane(lineContainer);
 		wrapper.getStyleClass().add("lineno");
-		wrapper.setCursor(Cursor.HAND);
+		wrapper.setCursor(Cursor.DEFAULT);
 		return wrapper;
 	}
 

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/problem/ProblemTracking.java
Patch:
@@ -221,7 +221,7 @@ protected void onLinesRemoved(int startLine, int endLine) {
 					removeByLine(line);
 
 					// Don't add problem back if it's in the removed range
-					if (line > startLine + shift) {
+					if (line >= startLine + shift) {
 						logger.debugging(l -> l.trace("Move problem '{}' up {} lines", problem.getMessage(), shift));
 						add(problem.withLine(line - shift));
 					} else {

File: recaf-ui/src/main/java/software/coley/recaf/services/cell/builtin/BasicFieldContextMenuProviderFactory.java
Patch:
@@ -74,7 +74,7 @@ public ContextMenuProvider getFieldContextMenuProvider(@Nonnull ContextSource so
 				builder.item("menu.tab.copypath", COPY_LINK, () -> ClipboardUtil.copyString(declaringClass, field));
 				builder.item("menu.edit.assemble.field", EDIT, () -> Unchecked.runnable(() ->
 						actions.openAssembler(PathNodes.memberPath(workspace, resource, bundle, declaringClass, field))
-				));
+				).run());
 
 				if (declaringClass.isJvmClass()) {
 					JvmClassBundle jvmBundle = (JvmClassBundle) bundle;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/WorkspaceRootPane.java
Patch:
@@ -18,6 +18,7 @@
 import software.coley.recaf.workspace.WorkspaceManager;
 import software.coley.recaf.workspace.model.Workspace;
 
+import java.util.ArrayList;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -82,7 +83,7 @@ public WorkspaceRootPane(@Nonnull DockingManager dockingManager,
 			DockingRegion dockPrimary = lastPrimaryRegion.get();
 			if (dockPrimary != null) {
 				// Only close closable tabs.
-				for (DockingTab tab : dockPrimary.getDockTabs()) {
+				for (DockingTab tab : new ArrayList<>(dockPrimary.getDockTabs())) {
 					tab.close();
 				}
 			}

File: recaf-core/src/main/java/software/coley/recaf/util/visitors/IllegalAnnotationRemovingVisitor.java
Patch:
@@ -6,7 +6,7 @@
 import software.coley.recaf.util.Types;
 
 /**
- * A visitor that strips empty named annotations from classes.
+ * A visitor that strips illegally named annotations from classes.
  *
  * @author Matt Coley
  */

File: recaf-core/src/main/java/software/coley/recaf/services/assembler/JvmAssemblerPipeline.java
Patch:
@@ -143,8 +143,8 @@ public JvmClassInfo getClassInfo(@Nonnull JavaClassRepresentation representation
 	protected Result<ClassPrinter> classPrinter(@Nonnull ClassPathNode path) {
 		try {
 			return Result.ok(new JvmClassPrinter(new ByteArrayInputStream(path.getValue().asJvmClass().getBytecode())));
-		} catch (IOException e) {
-			return Result.exception(e);
+		} catch (Throwable t) {
+			return Result.exception(t);
 		}
 	}
 }

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/MappingGeneratorPane.java
Patch:
@@ -104,7 +104,9 @@ public MappingGeneratorPane(@Nonnull Workspace workspace,
 		Node filterGroup = createFilterDisplay(aggregateMappingManager);
 
 		// Create preview.
-		previewGroup = createPreviewDisplay(searchBarProvider);
+		BorderPane wrapper = new BorderPane();
+		previewGroup = wrapper;
+		FxThreadUtil.run(() -> wrapper.setCenter(createPreviewDisplay(searchBarProvider)));
 
 		// Layout and wrap up.
 		SplitPane horizontalWrapper = new SplitPane(filterGroup, previewGroup);

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/AssemblerPane.java
Patch:
@@ -141,7 +141,7 @@ private void lateInitForClass(@Nonnull ClassPathNode classPathNode) {
 				new IconView(Icons.getImage(Icons.FIELD_N_METHOD)),
 				fieldsAndMethodsPane
 		));
-		fieldsAndMethodsPane.onUpdatePath(path);
+		fieldsAndMethodsPane.onUpdatePath(classPathNode);
 
 		// Since the content displayed is for a whole class, and the tool tabs are scoped to a method, we need to
 		// update them when a method is selected. We do so by tracking the caret position for being within the
@@ -171,7 +171,7 @@ private void lateInitForClass(@Nonnull ClassPathNode classPathNode) {
 							ClassMemberPathNode memberPath = classPathNode.child(classMember);
 							eachChild(UpdatableNavigable.class, c -> c.onUpdatePath(memberPath));
 						} else {
-							eachChild(UpdatableNavigable.class, c -> c.onUpdatePath(path));
+							eachChild(UpdatableNavigable.class, c -> c.onUpdatePath(classPathNode));
 						}
 						eachChild(AssemblerBuildConsumer.class, c -> c.consumeClass(lastResult, lastAssembledClass));
 						return;

File: recaf-core/src/main/java/software/coley/recaf/info/builder/JvmClassInfoBuilder.java
Patch:
@@ -1,6 +1,7 @@
 package software.coley.recaf.info.builder;
 
 import jakarta.annotation.Nonnull;
+import jakarta.annotation.Nullable;
 import org.objectweb.asm.*;
 import software.coley.recaf.info.BasicInnerClassInfo;
 import software.coley.recaf.info.BasicJvmClassInfo;
@@ -24,6 +25,7 @@ public class JvmClassInfoBuilder extends AbstractClassInfoBuilder<JvmClassInfoBu
 	private byte[] bytecode;
 	private int version = JvmClassInfo.BASE_VERSION + 8; // Java 8
 	private boolean skipASMValidation;
+	@Nullable
 	private ClassBuilderAppender classVisitor;
 
 	/**
@@ -137,7 +139,7 @@ protected void verify() {
 			throw new IllegalStateException("Bytecode required");
 		if (version < JvmClassInfo.BASE_VERSION)
 			throw new IllegalStateException("Version cannot be lower than 44 (v1)");
-		if (!this.skipASMValidation && classVisitor.hasCustomAttributes()) {
+		if (!this.skipASMValidation && classVisitor != null && classVisitor.hasCustomAttributes()) {
 			throw new IllegalStateException("Unknown attributes found in class: " + this.getName() + "[" +
 				String.join(", ", classVisitor.getCustomAttributeNames()) + "]");
 		}

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/vineflower/VineflowerDecompiler.java
Patch:
@@ -20,7 +20,7 @@
 public class VineflowerDecompiler extends AbstractJvmDecompiler {
 	public static final String NAME = "Vineflower";
 	private final VineflowerConfig config;
-	private final IFernflowerLogger logger = new VineflowerLogger();
+	private final IFernflowerLogger logger;
 	private final IResultSaver dummySaver = new DummyResultSaver();
 
 	/**
@@ -34,6 +34,7 @@ public VineflowerDecompiler(@Nonnull VineflowerConfig config) {
 		// Change this version to be dynamic when / if the Vineflower authors make a function that returns the version...
 		super(NAME, "1.9.3", config);
 		this.config = config;
+		logger = new VineflowerLogger(config);
 	}
 
 	@Nonnull

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/JvmStackAnalysisPane.java
Patch:
@@ -179,7 +179,7 @@ private int getSelectedInsnIndexOfMethod(@Nonnull ASTMethod method) {
 		int paragraph = editor.getCodeArea().getCurrentParagraph();
 		int result = Collections.binarySearch(instructions, new ASTEmpty(new Token(
 				new Range(pos, pos + 1),
-				new Location(paragraph, 0, null),
+				new Location(paragraph, 0, 1, null),
 				TokenType.IDENTIFIER,
 				"."
 		)), (o1, o2) -> {

File: recaf-ui/src/main/java/software/coley/recaf/services/cell/builtin/BasicFieldContextMenuProviderFactory.java
Patch:
@@ -67,7 +67,7 @@ public ContextMenuProvider getFieldContextMenuProvider(@Nonnull ContextSource so
 						actions.gotoDeclaration(classPath)
 								.requestFocus(field);
 					} catch (IncompletePathException ex) {
-						logger.error("Cannot go to method due to incomplete path", ex);
+						logger.error("Cannot go to field due to incomplete path", ex);
 					}
 				});
 			} else {

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/JvmStackAnalysisPane.java
Patch:
@@ -50,6 +50,7 @@ public class JvmStackAnalysisPane extends AstBuildConsumerComponent {
 	private int lastInsnIndex;
 
 	@Inject
+	@SuppressWarnings("unchecked")
 	public JvmStackAnalysisPane(@Nonnull CellConfigurationService cellConfigurationService,
 								@Nonnull TextFormatConfig formatConfig,
 								@Nonnull Workspace workspace) {

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/JvmVariablesPane.java
Patch:
@@ -12,7 +12,6 @@
 import javafx.scene.control.TableCell;
 import javafx.scene.control.TableColumn;
 import javafx.scene.control.TableView;
-import javafx.util.Callback;
 import me.darknet.assembler.ast.ASTElement;
 import me.darknet.assembler.ast.primitive.ASTIdentifier;
 import me.darknet.assembler.ast.primitive.ASTInstruction;
@@ -50,6 +49,7 @@ public class JvmVariablesPane extends AstBuildConsumerComponent {
 	private final TableView<VariableData> table = new TableView<>();
 
 	@Inject
+	@SuppressWarnings("unchecked")
 	public JvmVariablesPane(@Nonnull CellConfigurationService cellConfigurationService,
 							@Nonnull TextFormatConfig formatConfig,
 							@Nonnull Workspace workspace) {

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/assembler/AssemblerPane.java
Patch:
@@ -332,7 +332,7 @@ private CompletableFuture<Void> assemble() {
 							String methodName = methodEntry.getKey().name();
 							AnalysisException failure = methodEntry.getValue().getAnalysisFailure();
 							if (failure != null) {
-								Animations.animateWarn(this, 1000);
+								FxThreadUtil.run(() -> Animations.animateWarn(this, 1000));
 								logger.warn("Method analysis on '{}' found potential problem: {}", methodName, failure.getMessage(), failure);
 							}
 						}

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/richtext/suggest/CompletionPopup.java
Patch:
@@ -85,7 +85,9 @@ public CompletionPopup(int cellSize, int maxItemsToShow, @Nonnull CompletionValu
 			// To prevent an infinite loop, we'll change the target value.
 			if (event.getTarget() == popup.getScene() && code != TAB && code != ENTER) {
 				listView.fireEvent(event.copyFor(popup, listView));
-				event.consume();
+
+				// Multi-key action like 'Control Z' fail if we consume the event.
+				if (!event.isControlDown()) event.consume();
 			}
 		});
 	}
@@ -106,7 +108,6 @@ public void install(@Nonnull CodeArea area, @Nonnull TabCompleter<T> completer)
 		completionPopupFocuser = new CompletionPopupFocuser(this);
 		completionPopupUpdater = new CompletionPopupUpdater<>(completer, this);
 
-
 		area.addEventFilter(KeyEvent.KEY_RELEASED, completionPopupUpdater);
 		area.addEventFilter(KeyEvent.KEY_TYPED, completionPopupFocuser);
 

File: recaf-core/src/main/java/software/coley/recaf/services/assembler/JvmAssemblerPipeline.java
Patch:
@@ -123,7 +123,7 @@ public String getCommonSuperclass(String type1, String type2) {
 
 	@Override
 	protected int getClassVersion(@Nonnull JvmClassInfo info) {
-		return info.getVersion();
+		return info.getVersion() - JavaVersion.VERSION_OFFSET;
 	}
 
 	@Nonnull

File: recaf-core/src/main/java/software/coley/recaf/util/ModulesIOUtil.java
Patch:
@@ -47,14 +47,17 @@ public static Stream<ByteSourceElement<Entry>> stream(Path modulesFilePath) thro
 			MethodHandle findLocation = lookup.findVirtual(imageReaderClass, "findLocation", MethodType.methodType(imageLocationClass, String.class))
 					.bindTo(reader);
 			return Arrays.stream(entries)
+					.filter(entryName -> entryName.indexOf('/', 1) > 1)
 					.map(entryName -> {
 						// Follows the pattern: /<module-name>/<file-name>
 						int firstSlash = entryName.indexOf('/', 1);
 						String moduleName = entryName.substring(1, firstSlash);
 						String fileName = entryName.substring(entryName.indexOf('/', 1) + 1);
+
 						// Get content source
 						Object imageLocation = Unchecked.bmap((t, u) -> t.invoke(u), findLocation, entryName);
 						ByteBuffer buffer = Unchecked.bmap((t, u) -> (ByteBuffer) t.invoke(u), getResourceBuffer, imageLocation);
+
 						// Wrap into element
 						return new ByteSourceElement<>(new Entry(moduleName, fileName), ByteSources.forBuffer(buffer));
 					}).onClose(() -> IOUtil.closeQuietly((AutoCloseable) reader));

File: recaf-core/src/main/java/software/coley/recaf/workspace/io/BasicResourceImporter.java
Patch:
@@ -514,10 +514,10 @@ private WorkspaceResource handleModules(WorkspaceResourceBuilder builder, Module
 		BasicJvmClassBundle classes = new BasicJvmClassBundle();
 		BasicFileBundle files = new BasicFileBundle();
 
-		// The file-info name should be an absolute path for any non-uri driven import.
+		// The file-info should have the absolute path set as a property.
 		// We have to use a path because unless we implement our own module reader, the internal API
 		// only provides reader access via a path item.
-		Path pathToModuleFile = Paths.get(moduleInfo.asFile().getName());
+		Path pathToModuleFile = InputFilePathProperty.get(moduleInfo);
 		ModulesIOUtil.stream(pathToModuleFile)
 				.forEach(entry -> {
 					// Follows the pattern: /<module-name>/<file-name>

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/tabs/FieldsAndMethodsPane.java
Patch:
@@ -306,8 +306,8 @@ public enum MemberType implements Translatable {
 		ALL(Icons.CLASS_N_FIELD_N_METHOD, "misc.all"),
 		FIELD(Icons.FIELD, "misc.member.field"),
 		METHOD(Icons.METHOD, "misc.member.method"),
-		FIELD_AND_METHOD(Icons.FIELD_N_METHOD, "misc.member.field_n_method"),
-		INNER_CLASS(Icons.CLASS, "misc.member.inner_class");
+		FIELD_AND_METHOD(Icons.FIELD_N_METHOD, "misc.member.field-n-method"),
+		INNER_CLASS(Icons.CLASS, "misc.member.inner-class");
 
 		final String icon;
 		final String key;

File: recaf-core/src/main/java/software/coley/recaf/services/phantom/JPhantomGenerator.java
Patch:
@@ -162,6 +162,8 @@ public static Map<String, byte[]> generate(@Nonnull Workspace workspace,
 					out.put(name, decorate(v));
 			});
 			logger.debug("Phantom analysis complete, generated {} classes", out.size());
+		} catch (Throwable t) {
+			logger.error("Phantom analysis encountered an exception.", t);
 		} finally {
 			// Cleanup
 			Phantoms.refresh();

File: recaf-ui/src/main/java/software/coley/recaf/workspace/PathLoadingManager.java
Patch:
@@ -60,7 +60,7 @@ public void removePreLoadListener(WorkspacePreLoadListener listener) {
 	 * 		Error handling for invalid input.
 	 */
 	public void asyncNewWorkspace(@Nonnull Path primaryPath, @Nonnull List<Path> supportingPaths,
-								  @Nonnull Consumer<IOException> errorHandling) {
+								  @Nonnull Consumer<Throwable> errorHandling) {
 		// Invoke listeners, new content is being loaded.
 		for (WorkspacePreLoadListener listener : preLoadListeners)
 			listener.onPreLoad(primaryPath, supportingPaths);
@@ -78,8 +78,8 @@ public void asyncNewWorkspace(@Nonnull Path primaryPath, @Nonnull List<Path> sup
 				// Wrap into workspace and assign it
 				Workspace workspace = new BasicWorkspace(primaryResource, supportingResources);
 				workspaceManager.setCurrent(workspace);
-			} catch (IOException ex) {
-				errorHandling.accept(ex);
+			} catch (Throwable t) {
+				errorHandling.accept(t);
 			}
 		});
 	}

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/tree/WorkspaceTreeNode.java
Patch:
@@ -209,7 +209,7 @@ public static WorkspaceTreeNode getOrInsertIntoTree(@Nonnull WorkspaceTreeNode n
 		PathNode<?> parent = path.getParent();
 		if (parent != null)
 			node = getOrInsertIntoTree(node, parent, sorted);
-		else if (path.idMatch(node.getValue())) {
+		else if (path.typeIdMatch(node.getValue())) {
 			// We are the root link in the path. This check ensures that as the root type we do not
 			// insert a new tree-node of the same value, to the children list of the root tree node.
 			return node;

File: recaf-ui/src/main/java/software/coley/recaf/services/info/summary/builtin/AntiDecompilationSummarizer.java
Patch:
@@ -212,7 +212,8 @@ public boolean summarize(@Nonnull Workspace workspace,
 		if (cycleCount > 0 ||
 				invalidSigCount > 0 ||
 				dupAnnoCount > 0 ||
-				longAnnoCount > 0) {
+				longAnnoCount > 0 ||
+				illegalNameCount > 0) {
 			ExecutorService service = ThreadPoolFactory.newSingleThreadExecutor("anti-decompile-patching");
 			Label title = new BoundLabel(Lang.getBinding("service.analysis.anti-decompile"));
 			title.getStyleClass().add(Styles.TEXT_BOLD);

File: recaf-api/src/main/java/software/coley/recaf/info/builder/JvmClassInfoBuilder.java
Patch:
@@ -114,7 +114,7 @@ protected ClassBuilderAppender() {
 		@Override
 		public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
 			super.visit(version, access, name, signature, superName, interfaces);
-			withVersion(version);
+			withVersion(version & 0xFF);
 			withAccess(access);
 			withName(name);
 			withSignature(signature);

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/BoundComboBox.java
Patch:
@@ -2,6 +2,7 @@
 
 import jakarta.annotation.Nonnull;
 import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.Property;
 import javafx.scene.control.ComboBox;
 import javafx.scene.control.SingleSelectionModel;
 import javafx.util.StringConverter;
@@ -25,7 +26,7 @@ public class BoundComboBox<T> extends ComboBox<T> implements Tooltipable {
 	 * @param converter
 	 * 		Value to string conversion.
 	 */
-	public BoundComboBox(@Nonnull ObjectProperty<T> value, @Nonnull List<T> values, @Nonnull StringConverter<T> converter) {
+	public BoundComboBox(@Nonnull Property<T> value, @Nonnull List<T> values, @Nonnull StringConverter<T> converter) {
 		getItems().addAll(values);
 		SingleSelectionModel<T> selectionModel = getSelectionModel();
 		selectionModel.select(value.getValue());

File: recaf-api/src/main/java/software/coley/recaf/services/mapping/gen/MappingGenerator.java
Patch:
@@ -158,7 +158,7 @@ private void generateFamilyMappings(@Nonnull MappingsAdapter mappings, @Nonnull
 				String methodDesc = method.getDescriptor();
 
 				// Skip if reserved method name.
-				if (methodName.charAt(0) == '<')
+				if (methodName.length() > 0 && methodName.charAt(0) == '<')
 					continue;
 
 				// Skip if filtered.

File: recaf-api/src/main/java/software/coley/recaf/services/attach/AttachManagerConfig.java
Patch:
@@ -28,8 +28,8 @@ public AttachManagerConfig(RecafDirectoriesConfig directories) {
 		super(ConfigGroups.SERVICE_DEBUG, AttachManager.SERVICE_ID + CONFIG_SUFFIX);
 		this.directories = directories;
 		// Add values
-		addValue(new BasicConfigValue<>("passive-scanning", Boolean.class, passiveScanning, true));
-		addValue(new BasicConfigValue<>("attach-jmx-bean-agent", Boolean.class, attachJmxAgent));
+		addValue(new BasicConfigValue<>("passive-scanning", boolean.class, passiveScanning, true));
+		addValue(new BasicConfigValue<>("attach-jmx-bean-agent", boolean.class, attachJmxAgent));
 	}
 
 	/**

File: recaf-api/src/main/java/software/coley/recaf/services/callgraph/CallGraphConfig.java
Patch:
@@ -21,7 +21,7 @@ public class CallGraphConfig extends BasicConfigContainer implements ServiceConf
 	public CallGraphConfig() {
 		super(ConfigGroups.SERVICE_ANALYSIS, CallGraph.SERVICE_ID + CONFIG_SUFFIX);
 		// Add values
-		addValue(new BasicConfigValue<>("active", Boolean.class, active));
+		addValue(new BasicConfigValue<>("active", boolean.class, active));
 	}
 
 	/**

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/cfr/CfrConfig.java
Patch:
@@ -188,8 +188,8 @@ public CfrConfig() {
 		addValue(new BasicConfigValue<>("removedeadconditionals", TrooleanOption.class, removedeadconditionals));
 		addValue(new BasicConfigValue<>("aggressivedoextension", TrooleanOption.class, aggressivedoextension));
 		addValue(new BasicConfigValue<>("aggressiveduff", TrooleanOption.class, aggressiveduff));
-		addValue(new BasicConfigValue<>("aggressivedocopy", Integer.class, aggressivedocopy));
-		addValue(new BasicConfigValue<>("aggressivesizethreshold", Integer.class, aggressivesizethreshold));
+		addValue(new BasicConfigValue<>("aggressivedocopy", int.class, aggressivedocopy));
+		addValue(new BasicConfigValue<>("aggressivesizethreshold", int.class, aggressivesizethreshold));
 		addValue(new BasicConfigValue<>("staticinitreturn", BooleanOption.class, staticinitreturn));
 		addValue(new BasicConfigValue<>("usenametable", BooleanOption.class, usenametable));
 		addValue(new BasicConfigValue<>("pullcodecase", BooleanOption.class, pullcodecase));

File: recaf-ui/src/main/java/software/coley/recaf/services/config/factories/BooleanComponentFactory.java
Patch:
@@ -11,15 +11,15 @@
 import software.coley.recaf.util.Lang;
 
 /**
- * Factory for general {@link Boolean} values.
+ * Factory for general {@code boolean} values.
  *
  * @author Matt Coley
  */
 @ApplicationScoped
 public class BooleanComponentFactory extends TypedConfigComponentFactory<Boolean> {
 	@Inject
 	public BooleanComponentFactory() {
-		super(true, Boolean.class);
+		super(true, boolean.class);
 	}
 
 	@Override

File: recaf-ui/src/main/java/software/coley/recaf/services/config/factories/IntegerComponentFactory.java
Patch:
@@ -15,7 +15,7 @@
 import software.coley.recaf.util.Effects;
 
 /**
- * Factory for general {@link Integer} values.
+ * Factory for general {@code int} values.
  *
  * @author pvpb0t
  */
@@ -24,7 +24,7 @@ public class IntegerComponentFactory extends TypedConfigComponentFactory<Integer
 
     @Inject
     protected IntegerComponentFactory() {
-        super(false, Integer.class);
+        super(false, int.class);
     }
 
     @Override

File: recaf-ui/src/main/java/software/coley/recaf/services/script/ScriptManagerConfig.java
Patch:
@@ -26,7 +26,7 @@ public class ScriptManagerConfig extends BasicConfigContainer implements Service
 	public ScriptManagerConfig(RecafDirectoriesConfig directories) {
 		super(ConfigGroups.SERVICE_PLUGIN, ScriptManager.SERVICE_ID + CONFIG_SUFFIX);
 		this.directories = directories;
-		addValue(new BasicConfigValue<>("file-watching", Boolean.class, fileWatching));
+		addValue(new BasicConfigValue<>("file-watching", boolean.class, fileWatching));
 	}
 
 	/**

File: recaf-ui/src/main/java/software/coley/recaf/ui/config/ExportConfig.java
Patch:
@@ -29,8 +29,8 @@ public ExportConfig() {
 		super(ConfigGroups.SERVICE_IO, "export" + CONFIG_SUFFIX);
 		// Add values
 		addValue(new BasicConfigValue<>("compression", WorkspaceExportOptions.CompressType.class, compression));
-		addValue(new BasicConfigValue<>("bundle-supporting-resources", Boolean.class, bundleSupportingResources));
-		addValue(new BasicConfigValue<>("create-zip-dir-entries", Boolean.class, createZipDirEntries));
+		addValue(new BasicConfigValue<>("bundle-supporting-resources", boolean.class, bundleSupportingResources));
+		addValue(new BasicConfigValue<>("create-zip-dir-entries", boolean.class, createZipDirEntries));
 	}
 
 	/**

File: recaf-ui/src/main/java/software/coley/recaf/ui/config/RecentFilesConfig.java
Patch:
@@ -42,7 +42,7 @@ public class RecentFilesConfig extends BasicConfigContainer {
 	public RecentFilesConfig() {
 		super(ConfigGroups.SERVICE_IO, ID + CONFIG_SUFFIX);
 		// Add values
-		addValue(new BasicConfigValue<>("max-recent-workspaces", Integer.class, maxRecentWorkspaces));
+		addValue(new BasicConfigValue<>("max-recent-workspaces", int.class, maxRecentWorkspaces));
 		addValue(new BasicCollectionConfigValue<>("recent-workspaces", List.class, WorkspaceModel.class, recentWorkspaces));
 		addValue(new BasicConfigValue<>("last-workspace-open-path", String.class, lastWorkspaceOpenDirectory));
 		addValue(new BasicConfigValue<>("last-workspace-export-path", String.class, lastWorkspaceExportDirectory));

File: recaf-ui/src/main/java/software/coley/recaf/ui/config/TextFormatConfig.java
Patch:
@@ -27,9 +27,9 @@ public class TextFormatConfig extends BasicConfigContainer {
 	public TextFormatConfig() {
 		super(ConfigGroups.SERVICE_UI, ID + CONFIG_SUFFIX);
 		// Add values
-		addValue(new BasicConfigValue<>("escape", Boolean.class, escape));
-		addValue(new BasicConfigValue<>("shorten", Boolean.class, shorten));
-		addValue(new BasicConfigValue<>("max-length", Integer.class, maxLength));
+		addValue(new BasicConfigValue<>("escape", boolean.class, escape));
+		addValue(new BasicConfigValue<>("shorten", boolean.class, shorten));
+		addValue(new BasicConfigValue<>("max-length", int.class, maxLength));
 	}
 
 	/**

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/AbstractDecompilePane.java
Patch:
@@ -264,7 +264,7 @@ private void decompile() {
 								String trace = StringUtil.traceToString(exception);
 								editor.setText("/*\nDecompile failed:\n" + trace + "\n*/");
 							} else
-								editor.setText("/*\nDecompile failed, but no trace was attached:\n*/");
+								editor.setText("/*\nDecompile failed, but no trace was attached.\n*/");
 						}
 					}
 

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/jvm/DecompilerPaneConfig.java
Patch:
@@ -28,9 +28,9 @@ public class DecompilerPaneConfig extends BasicConfigContainer {
 	@Inject
 	public DecompilerPaneConfig() {
 		super(ConfigGroups.SERVICE_UI, "decompile-pane" + CONFIG_SUFFIX);
-		addValue(new BasicConfigValue<>("timeout-seconds", Integer.class, timeoutSeconds));
-		addValue(new BasicConfigValue<>("mapping-acceleration", Boolean.class, useMappingAcceleration));
-		addValue(new BasicConfigValue<>("acknowledged-save-with-errors", Boolean.class, acknowledgedSaveWithErrors, true));
+		addValue(new BasicConfigValue<>("timeout-seconds", int.class, timeoutSeconds));
+		addValue(new BasicConfigValue<>("mapping-acceleration", boolean.class, useMappingAcceleration));
+		addValue(new BasicConfigValue<>("acknowledged-save-with-errors", boolean.class, acknowledgedSaveWithErrors, true));
 	}
 
 	/**

File: recaf-ui/src/main/java/software/coley/recaf/ui/control/tree/WorkspaceTreeNode.java
Patch:
@@ -39,10 +39,10 @@ public boolean removeNodeByPath(@Nonnull PathNode<?> path) {
 			root = parentNode;
 
 		// Get node by path.
-		WorkspaceTreeNode nodeByPath = root.getOrCreateNodeByPath(path);
+		WorkspaceTreeNode nodeByPath = root.getNodeByPath(path);
 
 		// Get that node's parent, remove the child.
-		if (nodeByPath.getParent() instanceof WorkspaceTreeNode parentNode) {
+		if (nodeByPath != null && nodeByPath.getParent() instanceof WorkspaceTreeNode parentNode) {
 			boolean removed = parentNode.removeSourceChild(nodeByPath);
 			while (parentNode.isLeaf() && parentNode.getParentNode() != null) {
 				WorkspaceTreeNode parentOfParent = parentNode.getParentNode();

File: recaf-core/src/main/java/software/coley/recaf/services/decompile/cfr/CfrConfig.java
Patch:
@@ -65,7 +65,7 @@ public class CfrConfig extends BasicConfigContainer implements DecompilerConfig
 	private final ObservableObject<BooleanOption> decodefinally = new ObservableObject<>(BooleanOption.DEFAULT);
 	private final ObservableObject<BooleanOption> tidymonitors = new ObservableObject<>(BooleanOption.DEFAULT);
 	private final ObservableObject<BooleanOption> commentmonitors = new ObservableObject<>(BooleanOption.DEFAULT);
-	private final ObservableObject<BooleanOption> lenient = new ObservableObject<>(BooleanOption.DEFAULT);
+	private final ObservableObject<BooleanOption> lenient = new ObservableObject<>(BooleanOption.TRUE);
 	private final ObservableObject<BooleanOption> comments = new ObservableObject<>(BooleanOption.FALSE);
 	private final ObservableObject<TrooleanOption> forcetopsort = new ObservableObject<>(TrooleanOption.DEFAULT);
 	private final ObservableObject<ClassFileVersion> forceclassfilever = new ObservableObject<>(null);

File: recaf-api/src/main/java/software/coley/recaf/workspace/BasicWorkspaceManager.java
Patch:
@@ -114,7 +114,7 @@ public void addWorkspaceCloseListener(WorkspaceCloseListener listener) {
 
 	@Override
 	public void removeWorkspaceCloseListener(WorkspaceCloseListener listener) {
-		closeListeners.add(listener);
+		closeListeners.remove(listener);
 	}
 
 	@Nonnull

File: recaf-ui/src/main/java/software/coley/recaf/ui/RecafTheme.java
Patch:
@@ -1,7 +1,7 @@
 package software.coley.recaf.ui;
 
 import atlantafx.base.theme.Theme;
-import org.jetbrains.annotations.Nullable;
+import jakarta.annotation.Nullable;
 
 /**
  * AtlantaFX Recaf theme.

File: recaf-api/src/main/java/software/coley/recaf/workspace/io/BasicResourceImporter.java
Patch:
@@ -128,9 +128,9 @@ private WorkspaceFileResource handleZip(WorkspaceResourceBuilder builder, ZipFil
 		Map<String, WorkspaceFileResource> embeddedResources = new HashMap<>();
 
 		// Read ZIP entries
+		boolean isAndroid = zipInfo.getName().toLowerCase().endsWith(".apk");
 		ZipArchive archive = config.getZipStrategy().getValue().mapping().apply(source.readAll());
 		archive.getLocalFiles().forEach(header -> {
-			boolean isAndroid = zipInfo.getName().toLowerCase().endsWith(".apk");
 			LocalFileHeaderSource headerSource = new LocalFileHeaderSource(header, isAndroid);
 			String entryName = header.getFileNameAsString();
 

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/AbstractContentPane.java
Patch:
@@ -112,6 +112,7 @@ public Collection<Navigable> getNavigableChildren() {
 
 	@Override
 	public void disable() {
+		children.forEach(Navigable::disable);
 		pathUpdateListeners.clear();
 		setDisable(true);
 	}

File: recaf-ui/src/main/java/software/coley/recaf/services/info/FileTypeAssociationServiceConfig.java
Patch:
@@ -1,4 +1,4 @@
-package software.coley.recaf.services.text;
+package software.coley.recaf.services.info;
 
 import jakarta.annotation.Nonnull;
 import jakarta.enterprise.context.ApplicationScoped;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/ScriptManagerPane.java
Patch:
@@ -32,7 +32,7 @@
 import software.coley.recaf.services.script.ScriptFile;
 import software.coley.recaf.services.script.ScriptManager;
 import software.coley.recaf.services.script.ScriptManagerConfig;
-import software.coley.recaf.services.text.FileTypeAssociationService;
+import software.coley.recaf.services.info.FileTypeAssociationService;
 import software.coley.recaf.services.window.WindowFactory;
 import software.coley.recaf.ui.config.KeybindingConfig;
 import software.coley.recaf.ui.control.ActionButton;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/AbstractDecompilePane.java
Patch:
@@ -38,7 +38,7 @@
 import software.coley.recaf.services.navigation.Navigable;
 import software.coley.recaf.services.navigation.UpdatableNavigable;
 import software.coley.recaf.services.source.AstMappingVisitor;
-import software.coley.recaf.services.text.FileTypeAssociationService;
+import software.coley.recaf.services.info.FileTypeAssociationService;
 import software.coley.recaf.ui.control.BoundLabel;
 import software.coley.recaf.ui.control.richtext.Editor;
 import software.coley.recaf.ui.control.richtext.bracket.BracketMatchGraphicFactory;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/android/AndroidDecompilerPane.java
Patch:
@@ -7,7 +7,7 @@
 import software.coley.recaf.services.decompile.DecompilerManager;
 import software.coley.recaf.services.navigation.Actions;
 import software.coley.recaf.services.source.AstResolveResult;
-import software.coley.recaf.services.text.FileTypeAssociationService;
+import software.coley.recaf.services.info.FileTypeAssociationService;
 import software.coley.recaf.ui.config.KeybindingConfig;
 import software.coley.recaf.ui.control.richtext.Editor;
 import software.coley.recaf.ui.control.richtext.search.SearchBar;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/binary/DecodingXmlPane.java
Patch:
@@ -13,7 +13,7 @@
 import software.coley.recaf.services.navigation.FileNavigable;
 import software.coley.recaf.services.navigation.Navigable;
 import software.coley.recaf.services.navigation.UpdatableNavigable;
-import software.coley.recaf.services.text.FileTypeAssociationService;
+import software.coley.recaf.services.info.FileTypeAssociationService;
 import software.coley.recaf.ui.control.richtext.Editor;
 import software.coley.recaf.ui.control.richtext.bracket.BracketMatchGraphicFactory;
 import software.coley.recaf.ui.control.richtext.bracket.SelectedBracketTracking;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/jvm/JvmDecompilerPane.java
Patch:
@@ -31,7 +31,7 @@
 import software.coley.recaf.services.phantom.PhantomGenerationException;
 import software.coley.recaf.services.phantom.PhantomGenerator;
 import software.coley.recaf.services.source.AstResolveResult;
-import software.coley.recaf.services.text.FileTypeAssociationService;
+import software.coley.recaf.services.info.FileTypeAssociationService;
 import software.coley.recaf.ui.config.KeybindingConfig;
 import software.coley.recaf.ui.control.BoundLabel;
 import software.coley.recaf.ui.control.FontIconView;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/text/TextPane.java
Patch:
@@ -11,7 +11,7 @@
 import software.coley.recaf.services.navigation.FileNavigable;
 import software.coley.recaf.services.navigation.Navigable;
 import software.coley.recaf.services.navigation.UpdatableNavigable;
-import software.coley.recaf.services.text.FileTypeAssociationService;
+import software.coley.recaf.services.info.FileTypeAssociationService;
 import software.coley.recaf.ui.config.KeybindingConfig;
 import software.coley.recaf.ui.control.richtext.Editor;
 import software.coley.recaf.ui.control.richtext.bracket.BracketMatchGraphicFactory;

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/MappingGeneratorPane.java
Patch:
@@ -32,6 +32,7 @@
 import software.coley.recaf.services.mapping.gen.NameGeneratorFilter;
 import software.coley.recaf.services.mapping.gen.filter.*;
 import software.coley.recaf.services.mapping.gen.generator.IncrementingNameGenerator;
+import software.coley.recaf.ui.LanguageStylesheets;
 import software.coley.recaf.ui.control.*;
 import software.coley.recaf.ui.control.richtext.Editor;
 import software.coley.recaf.ui.control.richtext.syntax.RegexLanguages;
@@ -119,7 +120,7 @@ private Node createPreviewDisplay() {
 		// Editor to preview the current mappings
 		Editor editor = new Editor();
 		editor.setText("# A preview of your mappings will appear here once generated");
-		editor.getStylesheets().add("/syntax/enigma.css");
+		editor.getStylesheets().add(LanguageStylesheets.getEnigmaStylesheet());
 		editor.setSyntaxHighlighter(new RegexSyntaxHighlighter(RegexLanguages.getLangEngimaMap()));
 		editor.getCodeArea().setEditable(false);
 		editor.disableProperty().bind(mappingsToApply.isNull());

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/android/AndroidDecompilerPane.java
Patch:
@@ -7,6 +7,7 @@
 import software.coley.recaf.services.decompile.DecompilerManager;
 import software.coley.recaf.services.navigation.Actions;
 import software.coley.recaf.services.source.AstResolveResult;
+import software.coley.recaf.services.text.FileTypeAssociationService;
 import software.coley.recaf.ui.config.KeybindingConfig;
 import software.coley.recaf.ui.control.richtext.Editor;
 import software.coley.recaf.ui.control.richtext.search.SearchBar;
@@ -28,9 +29,10 @@ public AndroidDecompilerPane(@Nonnull DecompilerPaneConfig config,
 								 @Nonnull SearchBar searchBar,
 								 @Nonnull ToolsContainerComponent toolsContainer,
 								 @Nonnull JavaContextActionSupport contextActionSupport,
+								 @Nonnull FileTypeAssociationService languageAssociation,
 								 @Nonnull DecompilerManager decompilerManager,
 								 @Nonnull Actions actions) {
-		super(config, searchBar, contextActionSupport, decompilerManager);
+		super(config, searchBar, contextActionSupport, languageAssociation, decompilerManager);
 
 		// Install tools container with configurator
 		new AndroidDecompilerPaneConfigurator(toolsContainer, config, decompiler, decompilerManager);

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/jvm/JvmDecompilerPane.java
Patch:
@@ -31,6 +31,7 @@
 import software.coley.recaf.services.phantom.PhantomGenerationException;
 import software.coley.recaf.services.phantom.PhantomGenerator;
 import software.coley.recaf.services.source.AstResolveResult;
+import software.coley.recaf.services.text.FileTypeAssociationService;
 import software.coley.recaf.ui.config.KeybindingConfig;
 import software.coley.recaf.ui.control.BoundLabel;
 import software.coley.recaf.ui.control.FontIconView;
@@ -85,12 +86,13 @@ public JvmDecompilerPane(@Nonnull DecompilerPaneConfig config,
 							 @Nonnull SearchBar searchBar,
 							 @Nonnull ToolsContainerComponent toolsContainer,
 							 @Nonnull JavaContextActionSupport contextActionSupport,
+							 @Nonnull FileTypeAssociationService languageAssociation,
 							 @Nonnull DecompilerManager decompilerManager,
 							 @Nonnull JavacCompiler javac,
 							 @Nonnull JavacCompilerConfig javacConfig,
 							 @Nonnull PhantomGenerator phantomGenerator,
 							 @Nonnull Actions actions) {
-		super(config, searchBar, contextActionSupport, decompilerManager);
+		super(config, searchBar, contextActionSupport, languageAssociation, decompilerManager);
 		this.phantomGenerator = phantomGenerator;
 		this.javacDebug = new ObservableBoolean(javacConfig.getDefaultEmitDebug().getValue());
 		this.javacTarget = new ObservableInteger(javacConfig.getDefaultTargetVersion().getValue());

File: recaf-ui/src/main/java/software/coley/recaf/ui/pane/editing/jvm/DecompilerPaneConfig.java
Patch:
@@ -60,6 +60,8 @@ public ObservableBoolean getUseMappingAcceleration() {
 
 	private static boolean isDevEnv() {
 		// Should only be true when building Recaf from source/build-system.
-		return System.getProperty("java.class.path").contains("recaf-ui" + File.separator + "build");
+		String path = System.getProperty("java.class.path");
+		return path.contains("recaf-ui" + File.separator + "build") ||
+				path.contains("recaf-ui" + File.separator + "out");
 	}
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/config/ConfigDecompiler.java
Patch:
@@ -25,6 +25,6 @@ public ConfigDecompiler(ConfigContainer instance, Field field) {
 		select(initialDecompilerName);
 
 		getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) ->
-				ReflectUtil.quietSet(instance, field, newValue));
+				ReflectUtil.quietSet(instance, field, newValue.getName()));
 	}
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/config/ConfigDecompiler.java
Patch:
@@ -25,6 +25,6 @@ public ConfigDecompiler(ConfigContainer instance, Field field) {
 		select(initialDecompilerName);
 
 		getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) ->
-				ReflectUtil.quietSet(instance, field, newValue));
+				ReflectUtil.quietSet(instance, field, newValue.getName()));
 	}
 }

File: recaf-ui/src/main/java/me/coley/recaf/util/JFXInjection.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class JFXInjection {
 	private static final String JFX_CLASSIFIER = createClassifier();
-	private static final String JFX_VERSION = "19";
+	private static final String JFX_VERSION = "19.0.2";
 	private static final List<String> JFX_DEPENDENCY_URLS = Arrays.asList(
 			jfxUrlPattern("media"),
 			jfxUrlPattern("controls"),

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/CodeExecutionUtils.java
Patch:
@@ -20,7 +20,7 @@ public static void validateStackType(Frame frame, Type targetType, int offset) {
 			actualType = objectValue.getType();
 		} else if (peek.isArray()) {
 			Value.ArrayValue arrayValue = (Value.ArrayValue) peek;
-			actualType = Types.array(arrayValue.getElementType(), arrayValue.getDimensions());
+			actualType = arrayValue.getArrayType();
 		} else if (peek.isNumeric()) {
 			Value.NumericValue numericValue = (Value.NumericValue) peek;
 			actualType = numericValue.getType();

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Frame.java
Patch:
@@ -49,7 +49,7 @@ public void initialize(String selfTypeName, MethodDefinition definition) {
 			} else {
 				Type type = Type.getType(parameter.getDesc());
 				if (type.getSort() == Type.ARRAY) {
-					v = new Value.ArrayValue(type.getDimensions(), type);
+					v = new Value.ArrayValue(type.getDimensions(), type.getElementType());
 				} else {
 					v = new Value.ObjectValue(type);
 				}
@@ -170,8 +170,8 @@ private static Value mergeValue(Value value, Value otherValue, InheritanceChecke
 				Value.ArrayValue array = (Value.ArrayValue) value;
 				Value.ArrayValue otherArray = (Value.ArrayValue) otherValue;
 				// Merge array types
-				Type arrayType = array.getElementType();
-				Type otherArrayType = otherArray.getElementType();
+				Type arrayType = array.getArrayType();
+				Type otherArrayType = otherArray.getArrayType();
 				if (Types.isPrimitive(arrayType)) {
 					Type widest = arrayType.getSort() > otherArrayType.getSort() ? arrayType : otherArrayType;
 					return new Value.ArrayValue(array.getDimensions(), widest);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/insn/CheckcastExecutor.java
Patch:
@@ -32,7 +32,7 @@ public void handle(Frame frame, AbstractInstruction instruction) throws Analysis
 		String typeStr = typeInstruction.getType();
 		Type type = typeStr.charAt(0) == '[' ? Type.getType(typeStr) : Type.getObjectType(typeStr);
 		if (type.getSort() == ARRAY) {
-			frame.push(new Value.ArrayValue(type.getDimensions(), type));
+			frame.push(new Value.ArrayValue(type.getDimensions(), type.getElementType()));
 		} else {
 			frame.push(new Value.ObjectValue(type));
 		}

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/BytecodeToAstTransformer.java
Patch:
@@ -346,7 +346,7 @@ private void visitMethod() {
 	 */
 	private void visitClass() {
 		Modifiers modifiers = new Modifiers();
-		for (AccessFlag flag : AccessFlag.getApplicableFlags(AccessFlag.Type.FIELD, classNode.access)) {
+		for (AccessFlag flag : AccessFlag.getApplicableFlags(AccessFlag.Type.CLASS, classNode.access)) {
 			modifiers.add(Modifier.byName(flag.getName()));
 		}
 		// Setup other attributes

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/AttributeContainer.java
Patch:
@@ -9,7 +9,7 @@
 
 public abstract class AttributeContainer extends BaseElement implements Annotatable, GenericTyped {
 
-	private List<Annotation> annotations = new ArrayList<>();
+	private final List<Annotation> annotations = new ArrayList<>();
 	private Signature signature;
 
 	@Override
@@ -18,7 +18,8 @@ public List<Annotation> getAnnotations() {
 	}
 
 	public void setAnnotations(List<Annotation> annotations) {
-		this.annotations = annotations;
+		this.annotations.clear();
+		this.annotations.addAll(annotations);
 	}
 
 	@Override

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/pipeline/AssemblerPipeline.java
Patch:
@@ -560,6 +560,7 @@ public boolean updateAst(boolean usePrefix) {
 		List<Group> parsed;
 		try {
 			parsed = new ArrayList<>(ctx.parse());
+			latestJasmGroups = parsed;
 			validateGroups(parsed);
 		} catch (AssemblerException ex) {
 			// Parser problems are fatal
@@ -571,7 +572,6 @@ public boolean updateAst(boolean usePrefix) {
 		}
 		if (Thread.interrupted())
 			return false;
-		latestJasmGroups = parsed;
 
 		parserCompletionListeners.forEach(l -> l.onCompleteParse(parsed));
 		// Transform to our AST

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/LdcInstruction.java
Patch:
@@ -16,6 +16,7 @@
  */
 public class LdcInstruction extends AbstractInstruction {
 	private final BaseArg arg;
+	private final Object value;
 
 	/**
 	 * @param opcode
@@ -26,6 +27,7 @@ public class LdcInstruction extends AbstractInstruction {
 	public LdcInstruction(int opcode, Object value) {
 		super(opcode);
 		this.arg = BaseArg.of(LdcArg::new, value);
+		this.value = value;
 	}
 
 	/**
@@ -44,7 +46,7 @@ public static LdcInstruction of(Object value) {
 	 * @return Constant value.
 	 */
 	public Object getValue() {
-		return arg.getValue();
+		return value;
 	}
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/IndyInstruction.java
Patch:
@@ -85,7 +85,7 @@ public String print(PrintContext context) {
 		sb.append(context.fmtIdentifier(name)).append(' ');
 		sb.append(context.fmtIdentifier(desc)).append(' ');
 		sb.append(context.fmtKeyword("handle ")).append(handle).append(' ');
-		sb.append(context.fmtKeyword("args ")).append(args).append(" ").append(context.fmtKeyword("end"));
+		sb.append(context.fmtKeyword("args ")).append(args).append(context.fmtKeyword("end"));
 		return sb.toString();
 	}
 

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/AnalysisTests.java
Patch:
@@ -8,7 +8,7 @@
 import me.coley.recaf.assemble.ast.arch.MethodDefinition;
 import me.coley.recaf.assemble.transformer.JasmToUnitTransformer;
 import me.coley.recaf.assemble.util.ReflectiveInheritanceChecker;
-import me.darknet.assembler.parser.AssemblerException;
+import me.darknet.assembler.exceptions.AssemblerException;
 import me.darknet.assembler.parser.Group;
 import me.darknet.assembler.parser.ParserContext;
 import org.junit.jupiter.api.Nested;

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/JasmUtils.java
Patch:
@@ -24,6 +24,7 @@ protected static Unit createSilentUnit(Keywords keywords, String code) {
 
 	protected static Unit createUnit(Keywords keywords, String code) throws Throwable {
 		ParserContext ctx = createParser(keywords, code);
+		ctx.setVerifyInstructions(false); // TODO: ENABLE AGAIN WHEN JASM FIXED FOR SIGNED INTEGER VERIFICATION
 		JasmToUnitTransformer transformer = new JasmToUnitTransformer(ctx.parse());
 		return transformer.generateUnit();
 	}

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/pipeline/AssemblerPipeline.java
Patch:
@@ -18,6 +18,7 @@
 import me.coley.recaf.util.logging.DebuggingLogger;
 import me.coley.recaf.util.logging.Logging;
 import me.darknet.assembler.parser.*;
+import me.darknet.assembler.exceptions.AssemblerException;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
 import org.objectweb.asm.tree.MethodNode;
@@ -292,8 +293,7 @@ public boolean isOutputOutdated() {
 		if (outputOutdated) return true;
 		if (isMethod() && lastMethod == null) return true;
 		if (isField() && lastField == null) return true;
-		if (isClass() && lastClass == null) return true;
-		return false;
+		return isClass() && lastClass == null;
 	}
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/IndyInstruction.java
Patch:
@@ -91,9 +91,7 @@ public String print(PrintContext context) {
 		sb.append(name).append(' ');
 		sb.append(EscapeUtil.escapeNonValid(desc)).append(' ');
 		sb.append(context.fmtKeyword("handle ")).append(handle).append(' ');
-		if(args.length() > 0) {
-			sb.append(context.fmtKeyword("args ")).append(args).append(" ").append(context.fmtKeyword("end"));
-		}
+		sb.append(context.fmtKeyword("args ")).append(args).append(" ").append(context.fmtKeyword("end"));
 		return sb.toString();
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/IndyInstruction.java
Patch:
@@ -91,9 +91,7 @@ public String print(PrintContext context) {
 		sb.append(name).append(' ');
 		sb.append(EscapeUtil.escapeNonValid(desc)).append(' ');
 		sb.append(context.fmtKeyword("handle ")).append(handle).append(' ');
-		if(args.length() > 0) {
-			sb.append(context.fmtKeyword("args ")).append(args).append(" ").append(context.fmtKeyword("end"));
-		}
+		sb.append(context.fmtKeyword("args ")).append(args).append(" ").append(context.fmtKeyword("end"));
 		return sb.toString();
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/Modifier.java
Patch:
@@ -74,7 +74,7 @@ public static Modifier byName(String text) {
 		nameMap.put("abstract", new Modifier("ABSTRACT", Opcodes.ACC_ABSTRACT));
 		nameMap.put("strictfp", new Modifier("STRICTFP", Opcodes.ACC_STRICT));
 		nameMap.put("synthetic", new Modifier("SYNTHETIC", Opcodes.ACC_SYNTHETIC));
-		nameMap.put("annotation", new Modifier("ANNOTATION", Opcodes.ACC_ANNOTATION));
+		nameMap.put("annotation-interface", new Modifier("ANNOTATION-INTERFACE", Opcodes.ACC_ANNOTATION));
 		nameMap.put("enum", new Modifier("ENUM", Opcodes.ACC_ENUM));
 		nameMap.put("module", new Modifier("MODULE", Opcodes.ACC_MODULE));
 		nameMap.put("mandated", new Modifier("MANDATED", Opcodes.ACC_MANDATED));

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/Modifiers.java
Patch:
@@ -38,7 +38,7 @@ public void add(Modifier modifier) {
 	@Override
 	public String print(PrintContext context) {
 		return modifiers.stream()
-				.map(m -> m.print(context))
+				.map(m -> m.print(context).toLowerCase())
 				.collect(Collectors.joining(" "));
 	}
 

File: recaf-utils/src/main/java/me/coley/recaf/util/AccessFlag.java
Patch:
@@ -30,7 +30,7 @@ public enum AccessFlag {
 	ACC_STRICT(Opcodes.ACC_STRICT, "strictfp", true, Type.METHOD),
 	ACC_SYNTHETIC(Opcodes.ACC_SYNTHETIC, "synthetic", false,
 			Type.CLASS, Type.INNER_CLASS, Type.METHOD, Type.FIELD, Type.PARAM),
-	ACC_ANNOTATION(Opcodes.ACC_ANNOTATION, "annotation", false, Type.CLASS, Type.INNER_CLASS),
+	ACC_ANNOTATION(Opcodes.ACC_ANNOTATION, "annotation-interface", false, Type.CLASS, Type.INNER_CLASS),
 	ACC_ENUM(Opcodes.ACC_ENUM, "enum", true, Type.CLASS, Type.INNER_CLASS, Type.FIELD),
 	ACC_MODULE(Opcodes.ACC_MODULE, "module", false, Type.CLASS),
 	ACC_MANDATED(Opcodes.ACC_MANDATED, "mandated", false, Type.PARAM);
@@ -599,8 +599,8 @@ public static boolean isMandated(int acc) {
 	 * Flag group.
 	 */
 	public enum Type {
-		CLASS("public abstract final strictfp"),
-		INNER_CLASS("public protected private abstract static final strictfp"),
+		CLASS("public abstract final strictfp interface annotation-interface enum module"),
+		INNER_CLASS("public protected private abstract static final strictfp interface annotation-interface enum module"),
 		METHOD("public protected private abstract static final synchronized native strictfp"),
 		FIELD("public protected private static final transient volatile"),
 		PARAM("final");

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/CodeExecutor.java
Patch:
@@ -298,7 +298,8 @@ public void initialize(String selfTypeName, MethodDefinition definition) {
 			if (op >= 0) {
 				InstructionExecutor insnExecutor = INSN_EXECUTORS.get(op);
 				if (insnExecutor == null)
-					throw new AnalysisException(instruction, "No instruction executor registered for instruction type");
+					throw new AnalysisException(instruction, "No instruction executor registered for instruction type: "
+							+ instruction.getOpcode());
 				insnExecutor.handle(frame, instruction);
 			}
 		}
@@ -331,6 +332,7 @@ public void initialize(String selfTypeName, MethodDefinition definition) {
 	static {
 		// Instructions are in order of opcode value (see Opcodes from ASM)
 		NopExecutor nopExecutor = new NopExecutor();
+		INSN_EXECUTORS.put(-1, nopExecutor); // catch-all
 		INSN_EXECUTORS.put(NOP, nopExecutor);
 		INSN_EXECUTORS.put(ACONST_NULL, new ConstPushExecutor(new Value.NullValue()));
 		INSN_EXECUTORS.put(ICONST_M1, new ConstPushExecutor(new Value.NumericValue(INT_TYPE, -1)));

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/ArgType.java
Patch:
@@ -10,7 +10,6 @@ public enum ArgType {
 	CHAR,
 	STRING,
 	BYTE,
-	CHAR,
 	SHORT,
 	BOOLEAN,
 	INTEGER,

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/BaseArg.java
Patch:
@@ -133,8 +133,6 @@ public String print(PrintContext context) {
 				return value + "L";
 			case FLOAT:
 				return value + "F";
-			case CHAR:
-				return "'" + value + "'";
 			case DOUBLE:
 			case SHORT:
 			case BYTE:

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/validation/ast/AstArrayValidator.java
Patch:
@@ -15,7 +15,7 @@
 public class AstArrayValidator implements AstValidationVisitor {
 	@Override
 	public void visit(AstValidator validator) {
-		if (validator.getUnit().isField())
+		if (!validator.getUnit().isMethod())
 			return;
 		Code code = validator.getUnit().getDefinitionAsMethod().getCode();
 		if (code == null)

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/validation/ast/AstDescriptorValidator.java
Patch:
@@ -21,8 +21,7 @@ public class AstDescriptorValidator implements AstValidationVisitor {
 	@Override
 	public void visit(AstValidator validator) {
 		Predicate<String> isValid = Types::isValidDesc;
-
-		if (validator.getUnit().isField())
+		if (!validator.getUnit().isMethod())
 			return;
 		Code code = validator.getUnit().getDefinitionAsMethod().getCode();
 		if (code == null)

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/validation/ast/AstIntInsnValidator.java
Patch:
@@ -18,7 +18,7 @@
 public class AstIntInsnValidator implements AstValidationVisitor, Opcodes {
 	@Override
 	public void visit(AstValidator validator) {
-		if (validator.getUnit().isField())
+		if (!validator.getUnit().isMethod())
 			return;
 		Code code = validator.getUnit().getDefinitionAsMethod().getCode();
 		if (code == null)

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/validation/ast/AstLabelValidator.java
Patch:
@@ -20,7 +20,7 @@
 public class AstLabelValidator implements AstValidationVisitor {
 	@Override
 	public void visit(AstValidator validator) {
-		if (validator.getUnit().isField())
+		if (!validator.getUnit().isMethod())
 			return;
 		Code code = validator.getUnit().getDefinitionAsMethod().getCode();
 		if (code == null)

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/validation/ast/AstVariableValidator.java
Patch:
@@ -93,9 +93,9 @@ private static int getDefaultSort(AstVarInfo info) throws IllegalAstException {
 	private static Map<String, AstVarInfo> fromUnit(AstValidator validator, Unit unit) throws AstException {
 		Map<String, AstVarInfo> variables = new HashMap<>();
 		// Skip for fields
-		if (unit.isField())
+		if (!unit.isMethod())
 			return variables;
-		MethodDefinition definition = (MethodDefinition) unit.getDefinition();
+		MethodDefinition definition = unit.getDefinitionAsMethod();
 		// Skip if no code-items
 		if (definition.getCode().isEmpty())
 			return variables;

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/FlowHighlighter.java
Patch:
@@ -67,7 +67,7 @@ public void addCaretPositionListener(ObservableValue<Integer> selectedCaretPosit
 			int col = assemblerArea.getCaretColumn();
 			Element elementOnLine = pipeline.getCodeElementAt(line, col);
 			Unit unit = pipeline.getUnit();
-			if (unit == null || unit.isCurrentField())
+			if (unit == null || !unit.isCurrentMethod())
 				return;
 			Code code = pipeline.getUnit().getCurrentMethod().getCode();
 			if (elementOnLine instanceof FlowControl) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/VariableHighlighter.java
Patch:
@@ -81,7 +81,7 @@ private void refreshParagraphs() {
 		}
 		// Redraw new matched lines
 		Unit unit = pipeline.getUnit();
-		if (unit == null || unit.isCurrentField())
+		if (unit == null || !unit.isCurrentMethod())
 			return;
 		for (AbstractInstruction instruction : unit.getCurrentMethod().getCode().getInstructions()) {
 			if (instruction instanceof VariableReference) {

File: recaf-ui/src/main/java/me/coley/recaf/scripting/ScriptEngine.java
Patch:
@@ -160,7 +160,6 @@ private static CompilerResult compile(String className, String code, List<Compil
 						(int) diagnostic.getLineNumber() - 1,
 						diagnostic.getMessage(Locale.US))
 		));
-		compiler.setLogging(false);
 		compiler.setDebug(options, JavacCompiler.createDebugValue(true, true, true));
 		return compiler.compile(className, code, options);
 	}

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/AttachPane.java
Patch:
@@ -283,7 +283,7 @@ private void connect(VirtualMachineDescriptor item) {
 				try {
 					port = SocketAvailability.findAvailable();
 					String agentAbsolutePath = getAgentJarPath().toAbsolutePath().toString();
-					virtualMachine.loadAgent(agentAbsolutePath, "debug;port=" + port);
+					virtualMachine.loadAgent(agentAbsolutePath, "port=" + port);
 				} catch (AgentLoadException ex) {
 					// The agent jar file is written in Java 8. But Recaf uses Java 11+.
 					// This is a problem on OUR side because Java 11+ handles agent interactions differently.

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/ArgType.java
Patch:
@@ -8,6 +8,8 @@
 public enum ArgType {
 	TYPE,
 	STRING,
+	BYTE,
+	CHAR,
 	SHORT,
 	BOOLEAN,
 	INTEGER,

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/AstValidationTests.java
Patch:
@@ -99,6 +99,7 @@ class ConstValues {
 		@ValueSource(strings = {
 				"field static final dummy I\n" + " 0",
 				"field static       dummy J\n" + " 9000000000L",
+				"field static       dummy C\n" + " 'A'",
 				"field static       dummy F\n" + " 10.5F",
 				"field static       dummy D\n" + " 10.5",
 				"field static       dummy Ljava/lang/String;\n" + " \"text\""

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/JasmToAstTransformer.java
Patch:
@@ -313,6 +313,7 @@ private static ArgType from(Group group) {
 				case "Infinity":
 				case "-Infinity":
 					return ArgType.DOUBLE;
+				case "NaNf":
 				case "Infinityf":
 				case "-Infinityf":
 					return ArgType.FLOAT;

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/JasmToAstTransformer.java
Patch:
@@ -276,6 +276,8 @@ public void visitEnd() throws AssemblerException {
 			} else if(activeMember instanceof MethodDefinition) {
 				currentClass.addMethod((MethodDefinition) activeMember);
 			}
+		} else {
+			this.unit = new Unit(activeMember);
 		}
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/bytecode/AssemblerArea.java
Patch:
@@ -209,7 +209,7 @@ public void disassemble() {
 				transformer = new BytecodeToAstTransformer(method);
 			}
 		} else {
-			// Disassemble
+			// Disassemble class object
 			cr.accept(node, ClassReader.SKIP_FRAMES);
 			transformer = new BytecodeToAstTransformer(node);
 		}

File: recaf-ui/src/main/java/me/coley/recaf/assemble/suggestions/type/InfoSuggestion.java
Patch:
@@ -23,7 +23,7 @@ public class InfoSuggestion extends StringMatchSuggestion {
 	 * @param matchedChars
 	 * 		Chars which match the search.
 	 */
-	public InfoSuggestion(String input, ItemInfo info, String text, @Nullable BitSet matchedChars) {
+	public InfoSuggestion(String input, @Nonnull ItemInfo info, String text, @Nullable BitSet matchedChars) {
 		super(input, info.getName(), matchedChars);
 		this.info = info;
 	}
@@ -35,7 +35,7 @@ public InfoSuggestion(String input, ItemInfo info, String text, @Nullable BitSet
 	 * @param text
 	 * 		Suggestion text.
 	 */
-	public InfoSuggestion(String input, ItemInfo info, String text) {
+	public InfoSuggestion(String input, @Nonnull ItemInfo info, String text) {
 		this(input, info, text, null);
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/HandleInfo.java
Patch:
@@ -89,6 +89,6 @@ public String getDesc() {
 
 	@Override
 	public String print(PrintContext context) {
-			return tag + " " + EscapeUtil.escapeSpace(owner + '.' + name) + ' ' + EscapeUtil.escapeSpace(desc);
+			return tag + " " + EscapeUtil.escapeNonValid(owner + '.' + name) + ' ' + EscapeUtil.escapeNonValid(desc);
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/VariableReference.java
Patch:
@@ -17,7 +17,7 @@ public interface VariableReference extends Element {
 	 * @return Whitespace escaped variable identifier.
 	 */
 	default String getEscapedVariableIdentifier() {
-		return EscapeUtil.escapeSpace(getVariableIdentifier());
+		return EscapeUtil.escapeNonValid(getVariableIdentifier());
 	}
 
 	/**
@@ -29,7 +29,7 @@ default String getEscapedVariableIdentifier() {
 	 * @return Whitespace escaped variable descriptor.
 	 */
 	default String getEscapedVariableDescriptor() {
-		return EscapeUtil.escapeSpace(getVariableDescriptor());
+		return EscapeUtil.escapeNonValid(getVariableDescriptor());
 	}
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/FieldDefinition.java
Patch:
@@ -32,7 +32,7 @@ public String print(PrintContext context) {
 		StringBuilder sb = new StringBuilder();
 		sb.append(super.buildDefString(context, context.fmtKeyword("field")));
 		// Make sure to escape the name
-		sb.append(EscapeUtil.escapeSpace(name)).append(' ').append(EscapeUtil.escape(type));
+		sb.append(EscapeUtil.escapeNonValid(name)).append(' ').append(EscapeUtil.escape(type));
 		// Print value if exists
 		if (getConstVal() != null) {
 			sb.append(" ").append(getConstVal().print(context));

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/TryCatch.java
Patch:
@@ -76,6 +76,6 @@ public String print(PrintContext context) {
 		if (type == null)
 			type = ANY_TYPE;
 		return String.format("%s %s %s %s %s", context.fmtKeyword("catch"),
-				EscapeUtil.escapeSpace(type), startLabel, endLabel, handlerLabel);
+				EscapeUtil.escapeNonValid(type), startLabel, endLabel, handlerLabel);
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/FieldInstruction.java
Patch:
@@ -59,8 +59,8 @@ public InstructionType getInsnType() {
 	@Override
 	public String print(PrintContext context) {
 		return getOpcode() + " " +
-				EscapeUtil.escapeSpace(getOwner()) + '.' +
-				EscapeUtil.escapeSpace(getName()) + ' ' +
-				EscapeUtil.escapeSpace(getDesc());
+				EscapeUtil.escapeNonValid(getOwner()) + '.' +
+				EscapeUtil.escapeNonValid(getName()) + ' ' +
+				EscapeUtil.escapeNonValid(getDesc());
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/IndyInstruction.java
Patch:
@@ -85,11 +85,11 @@ public String print(PrintContext context) {
 		if (name.isEmpty()) {
 			name = "empty"; // TODO: Is this how we should handle empty BSM name?
 		} else {
-			name = EscapeUtil.escapeSpace(name);
+			name = EscapeUtil.escapeNonValid(name);
 		}
 		sb.append(getOpcode()).append(' ');
 		sb.append(name).append(' ');
-		sb.append(EscapeUtil.escapeSpace(desc)).append(' ');
+		sb.append(EscapeUtil.escapeNonValid(desc)).append(' ');
 		sb.append(context.fmtKeyword("handle ")).append(handle).append(' ');
 		sb.append(context.fmtKeyword("args ")).append(args).append(" ").append(context.fmtKeyword("end"));
 		return sb.toString();

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/MultiArrayInstruction.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.assemble.ast.insn;
 
 import me.coley.recaf.assemble.ast.PrintContext;
+import me.coley.recaf.util.EscapeUtil;
 
 /**
  * Multi array instruction.
@@ -46,6 +47,6 @@ public InstructionType getInsnType() {
 
 	@Override
 	public String print(PrintContext context) {
-		return getOpcode() + " " + getDesc() + " " + getDimensions();
+		return getOpcode() + " " + EscapeUtil.escapeNonValid(getDesc()) + " " + getDimensions();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/TypeInstruction.java
Patch:
@@ -36,6 +36,6 @@ public InstructionType getInsnType() {
 
 	@Override
 	public String print(PrintContext context) {
-		return String.format("%s %s", getOpcode(), EscapeUtil.escapeSpace(getType()));
+		return String.format("%s %s", getOpcode(), EscapeUtil.escapeNonValid(getType()));
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/BasicClassPrintStrategy.java
Patch:
@@ -13,11 +13,9 @@
 import me.coley.recaf.decompile.fallback.model.MethodModel;
 import me.coley.recaf.util.AccessFlag;
 import me.coley.recaf.util.EscapeUtil;
-import me.coley.recaf.util.StringUtil;
 import org.objectweb.asm.Type;
 
 import java.util.Collection;
-import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.stream.Collectors;
@@ -67,7 +65,7 @@ public String print(ClassModel model) {
 	private void appendPackage(Printer out, ClassModel model) {
 		String className = model.getName();
 		if (className.contains("/")) {
-			String packageName = EscapeUtil.escapeSpace(className.substring(0, className.lastIndexOf('/')));
+			String packageName = EscapeUtil.escapeNonValid(className.substring(0, className.lastIndexOf('/')));
 			out.appendLine("package " + packageName.replace('/', '.') + ";");
 			out.newLine();
 		}

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/BasicFieldPrintStrategy.java
Patch:
@@ -41,7 +41,7 @@ protected void appendFlags(StringBuilder sb, FieldModel model) {
 
 	protected void appendTypeAndName(StringBuilder sb, FieldModel model) {
 		Type type = Type.getType(model.getDesc());
-		String typeName = EscapeUtil.escapeSpace(type.getClassName());
+		String typeName = EscapeUtil.escapeNonValid(type.getClassName());
 		if (typeName.contains("."))
 			typeName = typeName.substring(typeName.lastIndexOf(".") + 1);
 		sb.append(typeName).append(' ').append(PrintBase.filterName(model.getName()));

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/BasicMethodPrintStrategy.java
Patch:
@@ -210,7 +210,7 @@ protected void buildDeclarationFlags(StringBuilder sb, MethodModel model) {
 	 */
 	protected void buildDeclarationReturnType(StringBuilder sb, MethodModel model) {
 		Type methodType = Type.getMethodType(model.getDesc());
-		String returnTypeName = EscapeUtil.escapeSpace(methodType.getReturnType().getClassName());
+		String returnTypeName = EscapeUtil.escapeNonValid(methodType.getReturnType().getClassName());
 		if (returnTypeName.contains("."))
 			returnTypeName = returnTypeName.substring(returnTypeName.lastIndexOf(".") + 1);
 		sb.append(returnTypeName).append(' ');
@@ -256,7 +256,7 @@ protected void buildDeclarationArgs(StringBuilder sb, MethodModel model) {
 		for (int param = 0; param < argTypes.length; param++) {
 			// Get arg type text
 			Type argType = argTypes[param];
-			String argTypeName = EscapeUtil.escapeSpace(argType.getClassName());
+			String argTypeName = EscapeUtil.escapeNonValid(argType.getClassName());
 			if (argTypeName.contains("."))
 				argTypeName = argTypeName.substring(argTypeName.lastIndexOf(".") + 1);
 			boolean isLast = param == argTypes.length - 1;

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/PrintBase.java
Patch:
@@ -18,7 +18,7 @@ public interface PrintBase {
 	 * @return Filtered name.
 	 */
 	static String filterName(String name) {
-		return EscapeUtil.escapeSpace(name);
+		return EscapeUtil.escapeNonValid(name);
 	}
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/PannableImageView.java
Patch:
@@ -64,6 +64,7 @@ public PannableImageView(Image image) {
 		});
 		setOnScroll(e -> {
 			double zoomSpeed = 0.05;
+			if(e.getDeltaY() == 0) return; // sometimes happens, but since change is 0, we can ignore it
 			double zoomModifier = e.getDeltaY() > 0 ?
 					1.0 + zoomSpeed : 1.00 - zoomSpeed;
 			view.setScaleX(view.getScaleX() * zoomModifier);

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/AttachPane.java
Patch:
@@ -193,8 +193,7 @@ private String mapToMainClass(VirtualMachineDescriptor descriptor) {
 						}
 						// Read main class attribute from jar manifest
 						if (Files.isRegularFile(jarPath)) {
-							try {
-								JarFile jar = new JarFile(jarPath.toFile());
+							try (JarFile jar = new JarFile(jarPath.toFile())) {
 								source = jar.getManifest().getMainAttributes().getValue("Main-Class");
 							} catch (IOException ignored) {
 								// Can't read from jar, oh well

File: recaf-ui/src/main/java/me/coley/recaf/ui/CommonUX.java
Patch:
@@ -41,7 +41,7 @@ public static ClassTab openClass(CommonClassInfo info) {
 				Animations.animateNotice(tab.getContent(), 1000);
 		} else {
 			// Create the tab
-			String title = TextDisplayUtil.escapeShortenPath(info.getName());
+			String title = TextDisplayUtil.shortenEscapeLimit(info.getName());
 			tab = (ClassTab) RecafDockingManager.getInstance()
 					.createTab(CommonUX::anyRegion, CommonUX::byPopulatedClasses,
 							() -> new ClassTab(title, new ClassView(info)));
@@ -91,7 +91,7 @@ public static FileTab openFile(FileInfo info) {
 				Animations.animateNotice(tab.getContent(), 1000);
 		} else {
 			// Create the tab
-			String title = TextDisplayUtil.escapeShortenPath(info.getName());
+			String title = TextDisplayUtil.shortenEscapeLimit(info.getName());
 			tab = (FileTab) RecafDockingManager.getInstance()
 					.createTab(CommonUX::anyRegion, CommonUX::byPopulatedFiles,
 							() -> new FileTab(title, new FileView(info)));

File: recaf-ui/src/main/java/me/coley/recaf/ui/MappingUX.java
Patch:
@@ -85,7 +85,7 @@ public static void handleClassRemapping(List<ClassTab> openedClassTabs, Mappings
 				Workspace workspace = RecafUI.getController().getWorkspace();
 				CommonClassInfo newClassInfo = workspace.getResources().getClass(newName);
 				RecafDockingManager docking = RecafDockingManager.getInstance();
-				String title = TextDisplayUtil.escapeShortenPath(newName);
+				String title = TextDisplayUtil.shortenEscapeLimit(newName);
 				ClassTab newTab = (ClassTab) docking.createTab(() -> new ClassTab(title, oldView));
 				newTab.select();
 				oldView.refreshView();

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/ClassContextBuilder.java
Patch:
@@ -73,7 +73,7 @@ public ContextMenu build() {
 		if (icon == null) {
 			icon = Icons.getClassIcon(info);
 		}
-		menu.getItems().add(createHeader(TextDisplayUtil.escapeShortenPath(name), icon));
+		menu.getItems().add(createHeader(TextDisplayUtil.shortenEscapeLimit(name), icon));
 		if (!declaration)
 			menu.getItems().add(action("menu.goto.class", Icons.OPEN, this::openDefinition));
 		if (isPrimary()) {
@@ -162,7 +162,7 @@ public void copy() {
 
 	@Override
 	public void delete() {
-		String name = TextDisplayUtil.escapeShortenPath(info.getName());
+		String name = TextDisplayUtil.shortenEscapeLimit(info.getName());
 		Resource resource = getContainingResource();
 		if (resource != null) {
 			if (Configs.display().promptDeleteItem) {
@@ -249,7 +249,7 @@ public void search() {
 	}
 
 	private void openHierarchy() {
-		String title = "Hierarchy: " + TextDisplayUtil.escapeShortenPath(info.getName());
+		String title = "Hierarchy: " + TextDisplayUtil.shortenEscapeLimit(info.getName());
 		DockTab tab = RecafDockingManager.getInstance()
 				.createTab(() -> new ClassTab(title, new ClassHierarchyPane(info)));
 		tab.select();

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/DexClassContextBuilder.java
Patch:
@@ -52,7 +52,7 @@ public ContextMenu build() {
 		if (icon == null) {
 			icon = Icons.getClassIcon(info);
 		}
-		menu.getItems().add(createHeader(TextDisplayUtil.escapeShortenPath(name), icon));
+		menu.getItems().add(createHeader(TextDisplayUtil.shortenEscapeLimit(name), icon));
 		menu.getItems().add(action("menu.goto.class", Icons.OPEN, this::openDefinition));
 
 		// TODO: Android dex class context menu items

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/DirectoryContextBuilder.java
Patch:
@@ -46,7 +46,7 @@ public DirectoryContextBuilder setDirectoryName(String directoryName) {
 	public ContextMenu build() {
 		String name = directoryName;
 		ContextMenu menu = new ContextMenu();
-		menu.getItems().add(createHeader(TextDisplayUtil.escapeShortenPath(name), Icons.getIconView(Icons.FOLDER)));
+		menu.getItems().add(createHeader(TextDisplayUtil.shortenEscapeLimit(name), Icons.getIconView(Icons.FOLDER)));
 		if (isPrimary()) {
 			Menu refactor = menu("menu.refactor");
 			menu.getItems().add(action("menu.edit.copy", Icons.ACTION_COPY, this::copy));
@@ -100,7 +100,7 @@ private void delete() {
 		if (resource != null) {
 			if (Configs.display().promptDeleteItem) {
 				StringBinding title = Lang.getBinding("dialog.title.delete-directory");
-				StringBinding header = Lang.format("dialog.header.delete-directory", "\n" + TextDisplayUtil.escapeShortenPath(directoryName));
+				StringBinding header = Lang.format("dialog.header.delete-directory", "\n" + TextDisplayUtil.shortenEscapeLimit(directoryName));
 				ConfirmDialog deleteDialog = new ConfirmDialog(title, header, Icons.getImageView(Icons.ACTION_DELETE));
 				boolean canRemove = deleteDialog.showAndWait().orElse(false);
 				if (!canRemove) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/FieldContextBuilder.java
Patch:
@@ -147,8 +147,8 @@ public void copy() {
 
 	@Override
 	public void delete() {
-		String ownerName = TextDisplayUtil.escapeShortenPath(ownerInfo.getName());
-		String fieldName = TextDisplayUtil.escapeShortenPath(fieldInfo.getName());
+		String ownerName = TextDisplayUtil.shortenEscapeLimit(ownerInfo.getName());
+		String fieldName = TextDisplayUtil.shortenEscapeLimit(fieldInfo.getName());
 		Resource resource = getContainingResource();
 		if (resource != null) {
 			if (Configs.display().promptDeleteItem) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/FileContextBuilder.java
Patch:
@@ -69,7 +69,7 @@ public ContextMenu build() {
 		if (icon == null) {
 			icon = Icons.getFileIcon(info);
 		}
-		menu.getItems().add(createHeader(TextDisplayUtil.escapeShortenPath(name), icon));
+		menu.getItems().add(createHeader(TextDisplayUtil.shortenEscapeLimit(name), icon));
 		menu.getItems().add(action("menu.goto.file", Icons.OPEN, this::openFile));
 		if (isPrimary()) {
 			Menu refactor = menu("menu.refactor");
@@ -126,7 +126,7 @@ private void copy() {
 	}
 
 	private void delete() {
-		String name = TextDisplayUtil.escapeShortenPath(info.getName());
+		String name = TextDisplayUtil.shortenEscapeLimit(info.getName());
 		Resource resource = getContainingResource();
 		if (resource != null) {
 			if (Configs.display().promptDeleteItem) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/MethodContextBuilder.java
Patch:
@@ -169,8 +169,8 @@ public void copy() {
 
 	@Override
 	public void delete() {
-		String ownerName = TextDisplayUtil.escapeShortenPath(ownerInfo.getName());
-		String methodName = TextDisplayUtil.escapeShortenPath(methodInfo.getName());
+		String ownerName = TextDisplayUtil.shortenEscapeLimit(ownerInfo.getName());
+		String methodName = TextDisplayUtil.shortenEscapeLimit(methodInfo.getName());
 		Resource resource = getContainingResource();
 		if (resource != null) {
 			if (Configs.display().promptDeleteItem) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/PackageContextBuilder.java
Patch:
@@ -45,7 +45,7 @@ public PackageContextBuilder setPackageName(String packageName) {
 	public ContextMenu build() {
 		String name = packageName;
 		ContextMenu menu = new ContextMenu();
-		menu.getItems().add(createHeader(TextDisplayUtil.escapeShortenPath(name), Icons.getIconView(Icons.FOLDER_PACKAGE)));
+		menu.getItems().add(createHeader(TextDisplayUtil.shortenEscapeLimit(name), Icons.getIconView(Icons.FOLDER_PACKAGE)));
 		if (isPrimary()) {
 			Menu refactor = menu("menu.refactor");
 			refactor.getItems().add(action("menu.refactor.move", Icons.ACTION_MOVE, this::move));
@@ -73,7 +73,7 @@ public Resource findContainerResource() {
 	}
 
 	private void delete() {
-		String name = TextDisplayUtil.escapeShortenPath(packageName);
+		String name = TextDisplayUtil.shortenEscapeLimit(packageName);
 		Resource resource = getContainingResource();
 		if (resource != null) {
 			if (Configs.display().promptDeleteItem) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/NavigationBar.java
Patch:
@@ -164,7 +164,7 @@ public void update(CommonClassInfo classInfo, MemberInfo memberInfo) {
 		getChildren().clear();
 		for (int i = 0; i < elements.length; i++) {
 			boolean isLast = i == elements.length - 1;
-			String elementText = TextDisplayUtil.escapeShortenPath(elements[i]);
+			String elementText = TextDisplayUtil.shortenEscapeLimit(elements[i]);
 
 			// Last element will always be a class.
 			if (isLast) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/clazz/ClassInfoFormatter.java
Patch:
@@ -403,7 +403,7 @@ private static String describeCpEntry(ConstPool cp, ConstPoolEntry item) {
 	}
 
 	private static Node dim(Object value) {
-		String text = TextDisplayUtil.escapeShortenPath(Objects.toString(value));
+		String text = TextDisplayUtil.shortenEscapeLimit(Objects.toString(value));
 		Label label = new Label(text);
 		label.getStyleClass().add("monospace");
 		label.getStyleClass().add("faint");

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/WorkspaceCell.java
Patch:
@@ -83,7 +83,7 @@ protected void updateItem(BaseTreeValue value, boolean empty) {
 				// TODO: Unbinding the cells a big aggressively here, but this seems to work for now
 				textProperty().unbind();
 			} else {
-				setText(TextDisplayUtil.escapeShortenPath(value.getPathElementValue()));
+				setText(TextDisplayUtil.escapeLimit(value.getPathElementValue()));
 			}
 			// Populate based on associated info, or the item class
 			BaseTreeItem item = value.getItem();

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/impl/ClassTab.java
Patch:
@@ -25,7 +25,7 @@ public class ClassTab extends DockTab implements FontSizeChangeable {
 	 * 		Representation of the class.
 	 */
 	public ClassTab(String title, ClassRepresentation classRepresentation) {
-		super(TextDisplayUtil.escapeShortenPath(title), classRepresentation.getNodeRepresentation());
+		super(TextDisplayUtil.shortenEscapeLimit(title), classRepresentation.getNodeRepresentation());
 		this.classRepresentation = classRepresentation;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/impl/FileTab.java
Patch:
@@ -25,7 +25,7 @@ public class FileTab extends DockTab implements FontSizeChangeable {
 	 * 		Representation of the file.
 	 */
 	public FileTab(String title, FileRepresentation fileRepresentation) {
-		super(TextDisplayUtil.escapeShortenPath(title), fileRepresentation.getNodeRepresentation());
+		super(TextDisplayUtil.shortenEscapeLimit(title), fileRepresentation.getNodeRepresentation());
 		this.fileRepresentation = fileRepresentation;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DecompilePane.java
Patch:
@@ -262,7 +262,7 @@ public void onUpdate(CommonClassInfo newValue) {
 			if (Configs.decompiler().enableDecompilerTimeout) {
 				timeout = Configs.decompiler().decompileTimeout + 500;
 			}
-			String name = TextDisplayUtil.escapeShorten(newValue.getName());
+			String name = TextDisplayUtil.escapeLimit(newValue.getName());
 			log.debug("Queueing decompilation for {} with timeout {}ms", name, timeout);
 			// Create new threaded decompile
 			CompletableFuture<String> decompileFuture = CompletableFuture.supplyAsync(() -> {

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DiffViewPane.java
Patch:
@@ -99,7 +99,7 @@ protected void updateItem(ItemInfo item, boolean empty) {
 				} else {
 					CellFactory.update(CellOriginType.SEARCH_RESULTS, this, workspace.getResources().getPrimary(), item);
 					// Override with full name
-					setText(TextDisplayUtil.escapeShortenPath(item.getName()));
+					setText(TextDisplayUtil.shortenEscapeLimit(item.getName()));
 					setOnMousePressed(e -> {
 						SplitPane pane = (SplitPane) createDiffDisplay(item);
 						pane.getItems().forEach(paneItem -> {

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/HierarchyPane.java
Patch:
@@ -174,7 +174,7 @@ protected void updateItem(CommonClassInfo item, boolean empty) {
 					removeEventFilter(MouseEvent.MOUSE_PRESSED, onClickFilter);
 			} else {
 				setGraphic(Icons.getClassIcon(item));
-				setText(TextDisplayUtil.escapeShortenPath(item.getName()));
+				setText(TextDisplayUtil.shortenEscapeLimit(item.getName()));
 				// Menu based on info subtype
 				if (item instanceof ClassInfo) {
 					setContextMenu(ContextBuilder.forClass((ClassInfo) item).build());

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/AssemblerPane.java
Patch:
@@ -201,7 +201,7 @@ public void setTargetMember(MemberInfo targetMember) {
 		components.forEach(c -> c.setTargetMember(targetMember));
 		// Update tab display
 		tab.textProperty().unbind();
-		tab.setText(TextDisplayUtil.escapeShortenPath(targetMember.getName()));
+		tab.setText(TextDisplayUtil.shortenEscapeLimit(targetMember.getName()));
 		if (targetMember.isMethod()) {
 			// Setup bottom tabs with bytecode helper tools for methods.
 			if (bottomTabs.getTabs().isEmpty()) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/prompt/QuickNavPrompt.java
Patch:
@@ -128,10 +128,10 @@ protected void updateItem(ItemWrapper item, boolean empty) {
 							MemberInfo member = (MemberInfo) item.info;
 							String def = member.isMethod() ?
 									member.getName() + member.getDescriptor() : member.getName();
-							setText(TextDisplayUtil.escapeShortenPath(member.getOwner()) + " " +
-									TextDisplayUtil.escapeShorten(def));
+							setText(TextDisplayUtil.shortenEscapeLimit(member.getOwner()) + " " +
+									TextDisplayUtil.escapeLimit(def));
 						} else {
-							setText(TextDisplayUtil.escapeShortenPath(item.info.getName()));
+							setText(TextDisplayUtil.shortenEscapeLimit(item.info.getName()));
 						}
 
 					}

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Menus.java
Patch:
@@ -23,7 +23,7 @@ public class Menus {
 	 * @return Header menu item.
 	 */
 	public static MenuItem createHeader(String name, Node graphic) {
-		MenuItem header = new MenuItem(TextDisplayUtil.escapeShortenPath(name));
+		MenuItem header = new MenuItem(TextDisplayUtil.shortenEscapeLimit(name));
 		header.getStyleClass().add("context-menu-header");
 		header.setGraphic(graphic);
 		header.setDisable(true);

File: recaf-launcher/src/main/java/dev/xdark/recaf/Launcher.java
Patch:
@@ -261,6 +261,8 @@ private static void launch(Path jar, List<String> extraOptions) throws IOExcepti
 		} catch (ClassNotFoundException ignored) {
 			logger.error("JavaFX is not present on classpath");
 			logger.error("Downloading missing JavaFX dependencies");
+			// TODO: JavaFX versions are not tied to the VM version, so we should be looking for the
+			//       latest stable releases available on maven central
 			downloadDependencies(dependenciesDir,
 					attributes.getValue(String.format("JavaFX-Dependencies-%d", getVmVersion())).split(";"),
 					classpath);

File: recaf-core/src/main/java/me/coley/recaf/code/CommonClassInfo.java
Patch:
@@ -7,7 +7,7 @@
  *
  * @author Matt Coley
  */
-public interface CommonClassInfo extends ItemInfo {
+public interface CommonClassInfo extends AccessibleInfo, ItemInfo {
 	/**
 	 * @return Class's name.
 	 */

File: recaf-core/src/main/java/me/coley/recaf/code/MemberInfo.java
Patch:
@@ -7,7 +7,7 @@
  *
  * @author Matt Coley
  */
-public abstract class MemberInfo implements ItemInfo {
+public abstract class MemberInfo implements AccessibleInfo, ItemInfo {
 	private final String owner;
 	private final String name;
 	private final String descriptor;

File: recaf-core/src/main/java/me/coley/recaf/code/ClassInfo.java
Patch:
@@ -8,6 +8,7 @@
 import org.objectweb.asm.MethodVisitor;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
 import java.util.*;
 import java.util.stream.Collectors;
 
@@ -195,7 +196,7 @@ public MethodVisitor visitMethod(int access, String name, String descriptor, Str
 			}
 
 			@Override
-			public void visitInnerClass(String name, String outerName, String innerName, int access) {
+			public void visitInnerClass(String name, @Nullable String outerName, @Nullable String innerName, int access) {
 				innerClasses.add(new InnerClassInfo(className, name, outerName, innerName, access));
 			}
 		}, ClassReader.SKIP_CODE);

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/OutlineTree.java
Patch:
@@ -102,7 +102,7 @@ private <T extends ItemInfo> List<OutlineItem> getItems(
 				.filter(item ->
 						filter(
 								accessGetter.apply(item), caseSensitive,
-								item instanceof InnerClassInfo ? ((InnerClassInfo) item).getInnerName() : item.getName(),
+								item instanceof InnerClassInfo ? ((InnerClassInfo) item).getSimpleName() : item.getName(),
 								filterStr
 						)
 				)
@@ -208,7 +208,7 @@ protected void updateItem(ItemInfo item, boolean empty) {
 			} else if (item instanceof InnerClassInfo) {
 				InnerClassInfo innerClass = (InnerClassInfo) item;
 				textProperty().bind(Bindings.createStringBinding(() -> StringUtil.limit(
-								EscapeUtil.escape(innerClass.getInnerName()),
+								EscapeUtil.escape(innerClass.getSimpleName()),
 								"...",
 								Configs.display().maxTreeTextLength.get())
 						, Configs.display().maxTreeTextLength));

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Icons.java
Patch:
@@ -465,6 +465,8 @@ public static IconProvider getFileIconProvider(FileInfo file) {
 			String lower = name.toLowerCase();
 			if (lower.endsWith(".jar")) {
 				provider = createProvider(Icons.FILE_JAR);
+			} else if (lower.endsWith(".apk")) {
+				provider = createProvider(Icons.ANDROID);
 			} else {
 				provider = createProvider(Icons.FILE_ZIP);
 			}

File: recaf-utils/src/main/java/me/coley/recaf/util/logging/InterceptingLogger.java
Patch:
@@ -11,7 +11,7 @@
  *
  * @author Matt Coley
  */
-public abstract class InterceptingLogger implements Logger {
+public abstract class InterceptingLogger implements DebuggingLogger {
 	private final Logger backing;
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AstToMethodTransformer.java
Patch:
@@ -305,7 +305,7 @@ private InsnList createInstructions() throws MethodCompileException {
 					break;
 				case METHOD:
 					MethodInstruction method = (MethodInstruction) instruction;
-					addCode(list, instruction, new MethodInsnNode(op, method.getOwner(), method.getName(), method.getDesc()));
+					addCode(list, instruction, new MethodInsnNode(op, method.getOwner(), method.getName(), method.getDesc(), method.isItf()));
 					break;
 				case INDY: {
 					IndyInstruction indy = (IndyInstruction) instruction;

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/BytecodeToAstTransformer.java
Patch:
@@ -232,7 +232,7 @@ private void visitMethod() {
 					case AbstractInsnNode.METHOD_INSN:
 						MethodInsnNode methodInsn = (MethodInsnNode) insn;
 						code.addInstruction(new MethodInstruction(op, methodInsn.owner, methodInsn.name, methodInsn.desc,
-								op == Opcodes.INVOKEINTERFACE));
+								methodInsn.itf));
 						break;
 					case AbstractInsnNode.INVOKE_DYNAMIC_INSN:
 						InvokeDynamicInsnNode indyInsn = (InvokeDynamicInsnNode) insn;

File: recaf-ui/src/main/java/me/coley/recaf/config/container/DisplayConfig.java
Patch:
@@ -57,7 +57,7 @@ public class DisplayConfig implements ConfigContainer {
 	@IntBounds(min = 50, max = 500)
 	@Group("tree")
 	@ConfigID("maxtreetextlength")
-	public int maxTreeTextLength = 100;
+	public IntegerProperty maxTreeTextLength = new SimpleIntegerProperty(100);
 
 	/**
 	 * Show the file filter buttons in workspace tree. Disabling frees up some space.

File: recaf-ui/src/main/java/me/coley/recaf/util/TextDisplayUtil.java
Patch:
@@ -30,7 +30,7 @@ public static String escapeShorten(String string) {
 		if (string == null)
 			return null;
 		String text = EscapeUtil.escape(string);
-		int max = Math.min(text.length(), Configs.display().maxTreeTextLength);
+		int max = Math.min(text.length(), Configs.display().maxTreeTextLength.get());
 		text = StringUtil.limit(text, "...", max);
 		return text;
 	}
@@ -45,7 +45,7 @@ public static String escapeShortenPath(String string) {
 		if (string == null)
 			return null;
 		String text = escapePath(string);
-		int max = Math.min(text.length(), Configs.display().maxTreeTextLength);
+		int max = Math.min(text.length(), Configs.display().maxTreeTextLength.get());
 		text = StringUtil.limit(text, "...", max);
 		return text;
 	}

File: recaf-ui/src/main/java/me/coley/recaf/ui/ClassView.java
Patch:
@@ -19,7 +19,7 @@
 import me.coley.recaf.ui.control.hex.HexClassView;
 import me.coley.recaf.ui.pane.DecompilePane;
 import me.coley.recaf.ui.pane.HierarchyPane;
-import me.coley.recaf.ui.pane.outilne.OutlinePane;
+import me.coley.recaf.ui.pane.outline.OutlinePane;
 import me.coley.recaf.ui.pane.SmaliAssemblerPane;
 import me.coley.recaf.ui.util.Icons;
 import me.coley.recaf.ui.util.Lang;

File: recaf-ui/src/main/java/me/coley/recaf/ui/ClassView.java
Patch:
@@ -19,7 +19,7 @@
 import me.coley.recaf.ui.control.hex.HexClassView;
 import me.coley.recaf.ui.pane.DecompilePane;
 import me.coley.recaf.ui.pane.HierarchyPane;
-import me.coley.recaf.ui.pane.OutlinePane;
+import me.coley.recaf.ui.pane.outilne.OutlinePane;
 import me.coley.recaf.ui.pane.SmaliAssemblerPane;
 import me.coley.recaf.ui.util.Icons;
 import me.coley.recaf.ui.util.Lang;

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/NavigationBar.java
Patch:
@@ -261,7 +261,7 @@ public static NavigationBar getInstance() {
 	 *
 	 * @author yapht
 	 */
-	private static class NavigationSeparator extends Canvas {
+	public static class NavigationSeparator extends Canvas {
 		public NavigationSeparator() {
 			setWidth(5);
 			setHeight(15);

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Icons.java
Patch:
@@ -49,6 +49,7 @@ public class Icons {
 	// Member definitions
 	public static final String FIELD = "icons/member/field.png";
 	public static final String METHOD = "icons/member/method.png";
+	public static final String FIELD_N_METHOD = "icons/member/field_n_method.png";
 	public static final String METHOD_ABSTRACT = "icons/member/method_abstract.png";
 	// Access modifiers
 	public static final String ACCESS_PUBLIC = "icons/modifier/public.png";

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/TryCatch.java
Patch:
@@ -4,6 +4,7 @@
 import me.coley.recaf.assemble.ast.Code;
 import me.coley.recaf.assemble.ast.CodeEntry;
 import me.coley.recaf.assemble.ast.PrintContext;
+import me.coley.recaf.util.EscapeUtil;
 
 /**
  * An abstraction of a try-catch range of a given type using named labels.
@@ -74,6 +75,7 @@ public String print(PrintContext context) {
 		String type = exceptionType;
 		if (type == null)
 			type = ANY_TYPE;
-		return String.format("%s %s %s %s %s", context.fmtKeyword("catch"), type, startLabel, endLabel, handlerLabel);
+		return String.format("%s %s %s %s %s", context.fmtKeyword("catch"),
+				EscapeUtil.escapeSpace(type), startLabel, endLabel, handlerLabel);
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/JasmToAstTransformer.java
Patch:
@@ -92,7 +92,7 @@ public void visitCatch(CatchGroup catchGroup) throws AssemblerException {
 				catchGroup.getBegin().getLabel(),
 				catchGroup.getEnd().getLabel(),
 				catchGroup.getHandler().getLabel(),
-				catchGroup.getException().content()));
+				content(catchGroup.getException())));
 	}
 
 	@Override
@@ -102,7 +102,7 @@ public void visitVarInsn(int opcode, IdentifierGroup identifier) throws Assemble
 
 	@Override
 	public void visitDirectVarInsn(int opcode, int var) throws AssemblerException {
-
+		// not supported
 	}
 
 	@Override

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/DockingManager.java
Patch:
@@ -77,13 +77,13 @@ public DockTab createTab(RegionFilter filter, RegionPreference preference, DockT
 			regionResult = getDockingRegions().stream().filter(filter).min(preference);
 		// Check for no result
 		if (regionResult.isEmpty())
-			throw new IllegalStateException("Cannot spawn tab, no viable region to spawn in!");
+			throw new TabTargetException("Cannot spawn tab, no viable region to spawn in!");
 		DockingRegion region = regionResult.get();
 		return region.createTab(decorateFactory(region, factory));
 	}
 
 	/**
-	 * Called by {@link #createTab(RegionFilter, DockTabFactory)}.
+	 * Called by {@link #createTab(RegionFilter, RegionPreference, DockTabFactory)}.
 	 * Used by child types of {@link DockingManager} to modify properties of any created tabs.
 	 *
 	 * @param region

File: recaf-ui/src/main/java/me/coley/recaf/ui/CommonUX.java
Patch:
@@ -12,7 +12,7 @@
 import me.coley.recaf.ui.docking.impl.ClassTab;
 import me.coley.recaf.ui.docking.impl.FileTab;
 import me.coley.recaf.ui.util.Animations;
-import me.coley.recaf.util.StringUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.util.logging.Logging;
 import org.slf4j.Logger;
 
@@ -41,7 +41,7 @@ public static ClassTab openClass(CommonClassInfo info) {
 				Animations.animateNotice(tab.getContent(), 1000);
 		} else {
 			// Create the tab
-			String title = StringUtil.shortenPath(info.getName());
+			String title = TextDisplayUtil.escapeShortenPath(info.getName());
 			tab = (ClassTab) RecafDockingManager.getInstance()
 					.createTab(CommonUX::anyRegion, CommonUX::byPopulatedClasses,
 							() -> new ClassTab(title, new ClassView(info)));
@@ -91,7 +91,7 @@ public static FileTab openFile(FileInfo info) {
 				Animations.animateNotice(tab.getContent(), 1000);
 		} else {
 			// Create the tab
-			String title = StringUtil.shortenPath(info.getName());
+			String title = TextDisplayUtil.escapeShortenPath(info.getName());
 			tab = (FileTab) RecafDockingManager.getInstance()
 					.createTab(CommonUX::anyRegion, CommonUX::byPopulatedFiles,
 							() -> new FileTab(title, new FileView(info)));

File: recaf-ui/src/main/java/me/coley/recaf/ui/MappingUX.java
Patch:
@@ -10,7 +10,7 @@
 import me.coley.recaf.ui.docking.DockTab;
 import me.coley.recaf.ui.docking.RecafDockingManager;
 import me.coley.recaf.ui.docking.impl.ClassTab;
-import me.coley.recaf.util.StringUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.util.logging.Logging;
 import me.coley.recaf.util.threading.FxThreadUtil;
 import me.coley.recaf.workspace.Workspace;
@@ -85,7 +85,7 @@ public static void handleClassRemapping(List<ClassTab> openedClassTabs, Mappings
 				Workspace workspace = RecafUI.getController().getWorkspace();
 				CommonClassInfo newClassInfo = workspace.getResources().getClass(newName);
 				RecafDockingManager docking = RecafDockingManager.getInstance();
-				String title = StringUtil.shortenPath(newName);
+				String title = TextDisplayUtil.escapeShortenPath(newName);
 				ClassTab newTab = (ClassTab) docking.createTab(() -> new ClassTab(title, oldView));
 				newTab.select();
 				oldView.refreshView();

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/DexClassContextBuilder.java
Patch:
@@ -6,7 +6,7 @@
 import me.coley.recaf.code.DexClassInfo;
 import me.coley.recaf.ui.CommonUX;
 import me.coley.recaf.ui.util.Icons;
-import me.coley.recaf.util.StringUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.resource.Resource;
 
@@ -52,7 +52,7 @@ public ContextMenu build() {
 		if (icon == null) {
 			icon = Icons.getClassIcon(info);
 		}
-		menu.getItems().add(createHeader(StringUtil.shortenPath(name), icon));
+		menu.getItems().add(createHeader(TextDisplayUtil.escapeShortenPath(name), icon));
 		menu.getItems().add(action("menu.goto.class", Icons.OPEN, this::openDefinition));
 
 		// TODO: Android dex class context menu items

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/FieldContextBuilder.java
Patch:
@@ -18,7 +18,7 @@
 import me.coley.recaf.ui.util.Icons;
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.ui.window.GenericWindow;
-import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.util.visitor.MemberCopyingVisitor;
 import me.coley.recaf.util.visitor.MemberRemovingVisitor;
 import me.coley.recaf.workspace.resource.Resource;
@@ -147,8 +147,8 @@ public void copy() {
 
 	@Override
 	public void delete() {
-		String ownerName = EscapeUtil.escape(ownerInfo.getName());
-		String fieldName = EscapeUtil.escape(fieldInfo.getName());
+		String ownerName = TextDisplayUtil.escapeShortenPath(ownerInfo.getName());
+		String fieldName = TextDisplayUtil.escapeShortenPath(fieldInfo.getName());
 		Resource resource = getContainingResource();
 		if (resource != null) {
 			if (Configs.display().promptDeleteItem) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/NavigationBar.java
Patch:
@@ -31,7 +31,7 @@
 import me.coley.recaf.ui.docking.RecafDockingManager;
 import me.coley.recaf.ui.docking.impl.ClassTab;
 import me.coley.recaf.ui.util.Icons;
-import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.util.logging.Logging;
 import me.coley.recaf.workspace.Workspace;
 import org.slf4j.Logger;
@@ -164,7 +164,7 @@ public void update(CommonClassInfo classInfo, MemberInfo memberInfo) {
 		getChildren().clear();
 		for (int i = 0; i < elements.length; i++) {
 			boolean isLast = i == elements.length - 1;
-			String elementText = EscapeUtil.escapeSpace(elements[i]);
+			String elementText = TextDisplayUtil.escapeShortenPath(elements[i]);
 
 			// Last element will always be a class.
 			if (isLast) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/clazz/ClassInfoFormatter.java
Patch:
@@ -17,6 +17,7 @@
 import me.coley.recaf.ui.util.NodeUtil;
 import me.coley.recaf.util.AccessFlag;
 import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 
 import java.util.Objects;
 import java.util.stream.Collectors;
@@ -402,8 +403,7 @@ private static String describeCpEntry(ConstPool cp, ConstPoolEntry item) {
 	}
 
 	private static Node dim(Object value) {
-		// We want to prevent whitespace chars like '\n', but the standard space is something we want to keep.
-		String text = EscapeUtil.escapeSpace(Objects.toString(value)).replace("\\u0020", " ");
+		String text = TextDisplayUtil.escapeShortenPath(Objects.toString(value));
 		Label label = new Label(text);
 		label.getStyleClass().add("monospace");
 		label.getStyleClass().add("faint");

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/WorkspaceCell.java
Patch:
@@ -14,7 +14,7 @@
 import me.coley.recaf.ui.control.tree.item.FileItem;
 import me.coley.recaf.ui.control.tree.item.MethodItem;
 import me.coley.recaf.ui.util.CellFactory;
-import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.util.logging.Logging;
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.resource.Resource;
@@ -83,7 +83,7 @@ protected void updateItem(BaseTreeValue value, boolean empty) {
 				// TODO: Unbinding the cells a big aggressively here, but this seems to work for now
 				textProperty().unbind();
 			} else {
-				setText(EscapeUtil.escape(value.getPathElementValue()));
+				setText(TextDisplayUtil.escapeShortenPath(value.getPathElementValue()));
 			}
 			// Populate based on associated info, or the item class
 			BaseTreeItem item = value.getItem();

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/item/BaseTreeItem.java
Patch:
@@ -231,11 +231,8 @@ protected static BaseTreeItem addPath(BaseTreeItem item, String name,
 			parts.add(lastPart);
 		}
 		// Build directory structure
-		int maxLen = Configs.display().maxTreeTextLength;
 		while (!parts.isEmpty()) {
 			String part = parts.remove(0);
-			if (part.length() > maxLen)
-				part = part.substring(0, maxLen) + "...";
 			boolean isLeaf = parts.isEmpty();
 			BaseTreeItem child = isLeaf ?
 					item.getChildFile(part) :

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/impl/ClassTab.java
Patch:
@@ -5,7 +5,7 @@
 import me.coley.recaf.ui.behavior.ClassRepresentation;
 import me.coley.recaf.ui.behavior.FontSizeChangeable;
 import me.coley.recaf.ui.docking.DockTab;
-import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 
 import java.util.function.Consumer;
 
@@ -25,7 +25,7 @@ public class ClassTab extends DockTab implements FontSizeChangeable {
 	 * 		Representation of the class.
 	 */
 	public ClassTab(String title, ClassRepresentation classRepresentation) {
-		super(EscapeUtil.escape(title), classRepresentation.getNodeRepresentation());
+		super(TextDisplayUtil.escapeShortenPath(title), classRepresentation.getNodeRepresentation());
 		this.classRepresentation = classRepresentation;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/impl/FileTab.java
Patch:
@@ -5,7 +5,7 @@
 import me.coley.recaf.ui.behavior.FileRepresentation;
 import me.coley.recaf.ui.behavior.FontSizeChangeable;
 import me.coley.recaf.ui.docking.DockTab;
-import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 
 import java.util.function.Consumer;
 
@@ -25,7 +25,7 @@ public class FileTab extends DockTab implements FontSizeChangeable {
 	 * 		Representation of the file.
 	 */
 	public FileTab(String title, FileRepresentation fileRepresentation) {
-		super(EscapeUtil.escape(title), fileRepresentation.getNodeRepresentation());
+		super(TextDisplayUtil.escapeShortenPath(title), fileRepresentation.getNodeRepresentation());
 		this.fileRepresentation = fileRepresentation;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DiffViewPane.java
Patch:
@@ -40,8 +40,8 @@
 import me.coley.recaf.ui.util.CellFactory;
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.util.ByteHeaderUtil;
-import me.coley.recaf.util.EscapeUtil;
 import me.coley.recaf.util.StringUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.util.logging.Logging;
 import me.coley.recaf.util.threading.FxThreadUtil;
 import me.coley.recaf.util.threading.ThreadUtil;
@@ -103,7 +103,7 @@ protected void updateItem(ItemInfo item, boolean empty) {
 				} else {
 					CellFactory.update(CellOriginType.SEARCH_RESULTS, this, workspace.getResources().getPrimary(), item);
 					// Override with full name
-					setText(EscapeUtil.escape(item.getName()));
+					setText(TextDisplayUtil.escapeShortenPath(item.getName()));
 					setOnMousePressed(e -> {
 						SplitPane pane = (SplitPane) createDiffDisplay(item);
 						pane.getItems().forEach(paneItem -> {

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/HierarchyPane.java
Patch:
@@ -22,7 +22,7 @@
 import me.coley.recaf.ui.control.ActionButton;
 import me.coley.recaf.ui.util.Icons;
 import me.coley.recaf.ui.util.Lang;
-import me.coley.recaf.util.StringUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.util.Translatable;
 import me.coley.recaf.util.threading.FxThreadUtil;
 
@@ -174,7 +174,7 @@ protected void updateItem(CommonClassInfo item, boolean empty) {
 					removeEventFilter(MouseEvent.MOUSE_PRESSED, onClickFilter);
 			} else {
 				setGraphic(Icons.getClassIcon(item));
-				setText(StringUtil.shortenPath(item.getName()));
+				setText(TextDisplayUtil.escapeShortenPath(item.getName()));
 				// Menu based on info subtype
 				if (item instanceof ClassInfo) {
 					setContextMenu(ContextBuilder.forClass((ClassInfo) item).build());

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/AssemblerPane.java
Patch:
@@ -26,7 +26,7 @@
 import me.coley.recaf.ui.pane.DockingWrapperPane;
 import me.coley.recaf.ui.util.Icons;
 import me.coley.recaf.ui.util.Lang;
-import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 import me.coley.recaf.util.WorkspaceClassSupplier;
 import me.coley.recaf.util.WorkspaceInheritanceChecker;
 import org.fxmisc.flowless.VirtualizedScrollPane;
@@ -201,7 +201,7 @@ public void setTargetMember(MemberInfo targetMember) {
 		components.forEach(c -> c.setTargetMember(targetMember));
 		// Update tab display
 		tab.textProperty().unbind();
-		tab.setText(EscapeUtil.escape(targetMember.getName()));
+		tab.setText(TextDisplayUtil.escapeShortenPath(targetMember.getName()));
 		if (targetMember.isMethod()) {
 			// Setup bottom tabs with bytecode helper tools for methods.
 			if (bottomTabs.getTabs().isEmpty()) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Menus.java
Patch:
@@ -6,7 +6,7 @@
 import javafx.scene.control.SeparatorMenuItem;
 import me.coley.recaf.ui.control.menu.ActionMenu;
 import me.coley.recaf.ui.control.menu.ActionMenuItem;
-import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.TextDisplayUtil;
 
 /**
  * Menu utilities.
@@ -23,7 +23,7 @@ public class Menus {
 	 * @return Header menu item.
 	 */
 	public static MenuItem createHeader(String name, Node graphic) {
-		MenuItem header = new MenuItem(EscapeUtil.escape(name));
+		MenuItem header = new MenuItem(TextDisplayUtil.escapeShortenPath(name));
 		header.getStyleClass().add("context-menu-header");
 		header.setGraphic(graphic);
 		header.setDisable(true);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/MethodParameter.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.assemble.ast.arch;
 
 import me.coley.recaf.assemble.ast.*;
+import me.coley.recaf.util.EscapeUtil;
 
 /**
  * Part of a {@link MethodParameters}.
@@ -49,6 +50,6 @@ public String getName() {
 
 	@Override
 	public String print(PrintContext context) {
-		return desc + " " + name;
+		return getEscapedVariableDescriptor() + " " + getEscapedVariableIdentifier();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/VarInstruction.java
Patch:
@@ -4,6 +4,7 @@
 import me.coley.recaf.assemble.ast.Named;
 import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.VariableReference;
+import me.coley.recaf.util.EscapeUtil;
 import me.coley.recaf.util.Types;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
@@ -66,6 +67,6 @@ public String getName() {
 
 	@Override
 	public String print(PrintContext context) {
-		return getOpcode() + " " + getVariableIdentifier();
+		return getOpcode() + " " + getEscapedVariableIdentifier();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/validation/ast/AstVariableValidator.java
Patch:
@@ -121,12 +121,12 @@ private static Map<String, AstVarInfo> fromUnit(AstValidator validator, Unit uni
 			if (instruction instanceof VarInstruction) {
 				VarInstruction varInsn = (VarInstruction) instruction;
 				int opcode = instruction.getOpcodeVal();
-				varId = varInsn.getVariableIdentifier();
+				varId = varInsn.getEscapedVariableIdentifier();
 				varType = Types.fromVarOpcode(opcode);
 				usage = varInsn.getVariableOperation();
 			} else if (instruction instanceof IincInstruction) {
 				IincInstruction iinc = (IincInstruction) instruction;
-				varId = iinc.getVariableIdentifier();
+				varId = iinc.getEscapedVariableIdentifier();
 				varType = Type.INT_TYPE;
 				usage = iinc.getVariableOperation();
 			}

File: recaf-ui/src/main/java/me/coley/recaf/ui/dialog/SsvmCommonDialog.java
Patch:
@@ -397,7 +397,7 @@ protected void handle(BooleanProperty valid, String input, UncheckedConsumer<Str
 		}
 	}
 
-	protected Object encodeThrowable(Throwable t) {
+	protected String encodeThrowable(Throwable t) {
 		if (t instanceof VMException) {
 			return vmUtil.throwableToString(((VMException) t).getOop());
 		}

File: recaf-ui/src/main/java/me/coley/recaf/ui/dialog/SsvmInvokeCallDialog.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.ui.dialog;
 
+import dev.xdark.ssvm.execution.VMException;
 import dev.xdark.ssvm.value.TopValue;
 import dev.xdark.ssvm.value.Value;
 import javafx.scene.control.Button;
@@ -65,9 +66,9 @@ public SsvmInvokeCallDialog(CommonClassInfo owner, MethodInfo info, SsvmIntegrat
 						}
 						throwable = result.getException();
 						if (throwable != null) {
-							Throwable ssvmThrowable = vm.getVmUtil().unwrap(throwable);
+							String errorText = encodeThrowable(throwable);
 							FxThreadUtil.run(() -> {
-								output.setText(StringUtil.traceToString(ssvmThrowable));
+								output.setText(errorText);
 								output.setStyle("-fx-text-fill: red;");
 							});
 						} else {

File: recaf-core/src/main/java/me/coley/recaf/ssvm/SsvmIntegration.java
Patch:
@@ -149,8 +149,7 @@ public static CompletableFuture<VmRunResult> runMethod(IntegratedVirtualMachine
 			String methodName = method.getName();
 			String methodDesc = method.getDescriptor();
 			try {
-				if (vmClass.shouldBeInitialized())
-					vmClass.initialize();
+				vmClass.initialize();
 				ExecutionContext context;
 				if (AccessFlag.isStatic(access)) {
 					context = vm.getVmUtil().invokeStatic(vmClass, methodName, methodDesc, parameters);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/compiler/JavassistMethodTranslator.java
Patch:
@@ -292,7 +292,7 @@ private int getJumpOffset(int op, int pos, CodeIterator iterator) {
 		if (op == Opcode.GOTO_W)
 			return pos + iterator.s32bitAt(pos + 1);
 		else
-			return pos + iterator.u16bitAt(pos + 1);
+			return pos + iterator.s16bitAt(pos + 1);
 	}
 
 	/// ================== Below are stubs for children to implement ================== ///

File: recaf-ui/src/main/java/me/coley/recaf/ui/behavior/FontSizeChangeable.java
Patch:
@@ -19,10 +19,10 @@
  * Firstly the interface should be implemented on all levels of the chain,
  * from the highest - which invokes {@link #applyEventsForFontSizeChange(Consumer)}
  * after creation of a lower level (note: {@link me.coley.recaf.ui.docking.RecafDockingManager} is hooked upon tab creation,
- * so teh tab needs to also implement it if a pane of it needs this behaviour) -
+ * so the tab needs to also implement it if a pane of it needs this behaviour) -
  * to the lowest which calls {@code consumer.accept(this) } in {@link #applyEventsForFontSizeChange(Consumer)}
  * for hooking the scroll and key events. <p>
- * Secondly, {@link #bindFontSize(IntegerProperty)} should be passed down until t reaches the lowest level
+ * Secondly, {@link #bindFontSize(IntegerProperty)} should be passed down until it reaches the lowest level
  * where the font size is either bound to the style or a {@link javafx.beans.value.ChangeListener} is used for changing the style.
  * <p>
  * Note: {@link javafx.beans.value.WeakChangeListener} should be used when dealing with panes which are being thrown away after use.
@@ -38,7 +38,7 @@ public interface FontSizeChangeable {
 	 * if it's the highest level: {@code Configs.display().fontSize} can be passed down<br>
 	 * if it's a middle level: the underlying level should be invoked with this method and pass property down<br>
 	 * if it's the lowest level: the property should be bound to the style<br>
-	 * @param property - the font size property to bind to the style.
+	 * @param property the font size property to bind to the style.
 	 */
 	void bindFontSize(IntegerProperty property);
 

File: recaf-ui/src/main/java/me/coley/recaf/ExportUtil.java
Patch:
@@ -9,8 +9,8 @@
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.resource.Resource;
 import me.coley.recaf.workspace.resource.source.ApkContentSource;
-import me.coley.recaf.workspace.resource.source.ClassContentSource;
 import me.coley.recaf.workspace.resource.source.DirectoryContentSource;
+import me.coley.recaf.workspace.resource.source.SingleFileContentSource;
 import org.slf4j.Logger;
 
 import java.nio.file.Path;
@@ -56,7 +56,7 @@ public static void write(Path path, Workspace workspace) {
 		exporter.compress = config.compress;
 		Resource resource = workspace.getResources().getPrimary();
 		UncheckedRunnable exportProcess;
-		if (resource.getContentSource() instanceof ClassContentSource && !exporter.shadeLibs) {
+		if (resource.getContentSource() instanceof SingleFileContentSource && !exporter.shadeLibs) {
 			exportProcess = exporter::writeAsSingleFile;
 		} else if (resource.getContentSource() instanceof DirectoryContentSource) {
 			exportProcess = exporter::writeAsDirectory;

File: recaf-ui/src/main/java/me/coley/recaf/config/container/RecentWorkspacesConfig.java
Patch:
@@ -244,14 +244,14 @@ public static ResourceModel from(Resource resource) {
 			ContentSource source = resource.getContentSource();
 			SourceType type = source.getType();
 			switch (type) {
-				case CLASS:
 				case JAR:
 				case WAR:
 				case APK:
 				case ZIP:
 				case JMOD:
 				case MODULES:
 				case DIRECTORY:
+				case SINGLE_FILE:
 					FileContentSource fileSource = (FileContentSource) source;
 					return new ResourceModel(fileSource.getPath().toAbsolutePath().toString());
 				case MAVEN:

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/EnumComboBox.java
Patch:
@@ -33,8 +33,8 @@ public EnumComboBox(Class<E> type, E initial) {
 
 				@Override
 				protected void onInvalidating() {
-					super.onInvalidating();
-
+					// Hack to force refresh the translation bindings.
+					// Needs to be a new list, cannot be the same instance as before.
 					setItems(FXCollections.observableArrayList(type.getEnumConstants()));
 				}
 
@@ -45,7 +45,6 @@ protected StringConverter<E> computeValue() {
 						public String toString(E object) {
 							if (object == null)
 								return "";
-
 							return Lang.get(((Translatable) object).getTranslationKey());
 						}
 

File: recaf-ui/src/main/java/me/coley/recaf/Main.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args) {
 		RecafPluginManager.initialize();
 		// Read application parameters
 		InitializerParameters parameters = InitializerParameters.fromArgs(args);
-		new Recaf().initialize(parameters);
+		Recaf.initialize(parameters);
 		// run script from parameters if found
 		if (parameters.getScriptPath() != null) {
 			Path scriptPath = parameters.getScriptPath().toPath();

File: recaf-utils/src/main/java/me/coley/recaf/util/Unchecked.java
Patch:
@@ -14,7 +14,7 @@ public class Unchecked {
 	 * @param runnable
 	 * 		Runnable.
 	 */
-	public static void run(Runnable runnable) {
+	public static void run(UncheckedRunnable runnable) {
 		runnable.run();
 	}
 

File: recaf-utils/src/main/java/me/coley/recaf/util/threading/ThreadPoolFactory.java
Patch:
@@ -11,7 +11,7 @@
  * @author Matt Coley
  */
 public class ThreadPoolFactory {
-	private static final int MAX = Math.max(1, Runtime.getRuntime().availableProcessors() - 2);
+	private static final int MAX = Math.max(2, Runtime.getRuntime().availableProcessors() - 2);
 
 	/**
 	 * @param name

File: recaf-utils/src/main/java/me/coley/recaf/util/logging/Logging.java
Patch:
@@ -3,6 +3,8 @@
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
 import ch.qos.logback.core.FileAppender;
+import me.coley.recaf.util.Blackhole;
+import me.coley.recaf.util.ClasspathUtil;
 import me.coley.recaf.util.StringUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -149,5 +151,6 @@ public void intercept(Level level, String message, Throwable t) {
 
 	static {
 		addTestPhaseLogging();
+		Blackhole.consume(LoggingFilter.class);
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/DefaultContentSourceFactory.java
Patch:
@@ -96,7 +96,6 @@ private static ContentSource fromHeader(Path path) throws IOException {
 		String extension = path.getFileName().toString();
 		if (extension.indexOf('.') > 0)
 			extension = extension.substring(extension.lastIndexOf('.') + 1);
-		logger.warn("Unhandled file type (header={}/{}): {}", headerText, headerBytes, extension);
-		return null;
+		throw new IOException(String.format("Unhandled file type (header=%s/%s): %s", headerText, headerBytes, extension));
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/graph/InheritanceVertex.java
Patch:
@@ -224,10 +224,8 @@ public Set<InheritanceVertex> getFamily() {
 	}
 
 	private void visitFamily(Set<InheritanceVertex> vertices) {
-		if ("java/lang/Object".equals(getName()))
-			return;
 		vertices.add(this);
-		Stream.concat(parents(), children())
+		Stream.concat(parents(), "java/lang/Object".equals(getName()) ? Stream.empty() : children())
 				.filter(v -> !vertices.contains(v))
 				.forEach(v -> v.visitFamily(vertices));
 	}

File: recaf-core/src/test/java/me/coley/recaf/graph/InheritanceGraphTests.java
Patch:
@@ -33,7 +33,8 @@ void testFamily() throws IOException {
 		Set<String> expectedFamily = Sets.newHashSet(
 				"game/AbstractModel",
 				"game/SnakeModel",
-				"game/WorldModel"
+				"game/WorldModel",
+				"java/lang/Object"
 		);
 		for (String member : expectedFamily) {
 			Set<String> snakeModelFamily = graph.getVertex(member).getFamily().stream()

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/model/ClassModel.java
Patch:
@@ -105,6 +105,8 @@ public String getName() {
 	 * @return Parent class name.
 	 */
 	public String getSuperName() {
+		if (classFile.getSuperIndex() == 0)
+			return null;
 		return classFile.getSuperName();
 	}
 

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/source/ArchiveFileContentSource.java
Patch:
@@ -30,8 +30,8 @@ protected ArchiveFileContentSource(SourceType type, Path path) {
 
 	@Override
 	protected void consumeEach(ByteSourceConsumer<LocalFileHeader> entryHandler) throws IOException {
-		try (Stream<ByteSourceElement<LocalFileHeader>> s = stream()) {
-			s.forEach(ByteSources.consume(entryHandler));
+		try (Stream<ByteSourceElement<LocalFileHeader>> stream = stream()) {
+			stream.forEach(ByteSources.consume(entryHandler));
 		}
 	}
 

File: recaf-core/src/main/java/me/coley/recaf/search/result/Result.java
Patch:
@@ -36,6 +36,9 @@ public Location getLocation() {
 
 	@Override
 	public int compareTo(Result o) {
+		if (o == this) {
+			return 0;
+		}
 		return location.compareTo(o.location);
 	}
 

File: recaf-core/src/main/java/me/coley/recaf/ssvm/processing/DataTracking.java
Patch:
@@ -65,7 +65,6 @@ public static void installValuePushing(VirtualMachine vm) {
 		vmi.setProcessor(DCONST_0, (insn, ctx) -> pushDouble(ctx, insn, 0));
 		vmi.setProcessor(DCONST_1, (insn, ctx) -> pushDouble(ctx, insn, 1));
 		// LDC can hold a variety of types, some of which we support
-		InstructionProcessor<AbstractInsnNode> ldc = vmi.getProcessor(LDC);
 		vmi.setProcessor(LDC, (InstructionProcessor<LdcInsnNode>) (insn, ctx) -> {
 			Object cst = insn.cst;
 			ConstValue value;

File: recaf-core/src/main/java/me/coley/recaf/parse/jpimpl/RecafResolvedEnumDeclaration.java
Patch:
@@ -21,7 +21,7 @@ public List<ResolvedEnumConstantDeclaration> getEnumConstants() {
 		return classInfo.getFields().stream()
 				.filter(f -> AccessFlag.hasAll(f.getAccess(), AccessFlag.ACC_PUBLIC, AccessFlag.ACC_STATIC) &&
 						isDescriptorOfInternalType(f.getDescriptor(), classInfo.getName()))
-				.map(f -> new RecafResolvedEnumConstantDeclaration(typeSolver, classInfo, f))
+				.map(f -> new RecafResolvedEnumConstantDeclaration(this, f))
 				.collect(Collectors.toList());
 	}
 
@@ -35,8 +35,8 @@ private static boolean isDescriptorOfInternalType(String descriptor, String inte
 	}
 
 	private static class RecafResolvedEnumConstantDeclaration extends RecafResolvedFieldDeclaration implements ResolvedEnumConstantDeclaration {
-		public RecafResolvedEnumConstantDeclaration(WorkspaceTypeSolver typeSolver, CommonClassInfo declaring, FieldInfo fieldInfo) {
-			super(typeSolver, declaring, fieldInfo);
+		public RecafResolvedEnumConstantDeclaration(RecafResolvedTypeDeclaration declaringType, FieldInfo fieldInfo) {
+			super(declaringType, fieldInfo);
 		}
 	}
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/WorkspaceCell.java
Patch:
@@ -66,6 +66,7 @@ else if (item.isExpanded()) {
 	protected void updateItem(BaseTreeValue value, boolean empty) {
 		super.updateItem(value, empty);
 		// Initial reset (prevents recycled cells from propagating mouse actions)
+		setGraphic(null);
 		setContextMenu(null);
 		setOnMouseClicked(null);
 		// Populate based on active state

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/java/JavaArea.java
Patch:
@@ -146,7 +146,7 @@ private void internalSelect(MemberInfo memberInfo) {
 	}
 
 	private void doSelectMember(CompilationUnit ast, MemberInfo memberInfo) {
-		WorkspaceTypeSolver solver = RecafUI.getController().getServices().getTypeSolver();
+		WorkspaceTypeSolver solver = RecafUI.getController().getServices().getSymbolSolver().getTypeSolver();
 		if (memberInfo.isField()) {
 			ast.findFirst(FieldDeclaration.class, dec -> {
 				MemberInfo declaredInfo = (MemberInfo) resolvedValueToInfo(solver, dec.resolve());

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Analyzer.java
Patch:
@@ -1176,9 +1176,7 @@ public void fillBlocks(Analysis analysis, List<AbstractInstruction> instructions
 			} else {
 				// Instructions after return statements are the last sources of new blocks
 				int op = instruction.getOpcodeVal();
-				if (op >= Opcodes.IRETURN && op <= Opcodes.RETURN) {
-
-				}else {
+				if (op < Opcodes.IRETURN || op > Opcodes.RETURN) {
 					Block blockTarget = analysis.blockFloor(insnIndex + 1);
 					if(blockCurrent != blockTarget)
 						blockCurrent.addJumpEdge(blockTarget);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Block.java
Patch:
@@ -59,8 +59,6 @@ public void addHandlerEdge(Block handlerBlock) {
 		}
 	}
 
-
-
 	/**
 	 * @return All edges to and from this block.
 	 */

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/AnalysisTests.java
Patch:
@@ -127,8 +127,7 @@ public void testTryCatch() {
 					assertEquals(2, results.block(8).getInstructions().size()); // end block
 					// The try block should have an edge to the handler block
 					assertEquals(results.block(6), results.block(0).getEdges().get(0).getTo());
-					// End block is terminal and has no edges (aside from natural flow into it)
-					assertEquals(0, results.block(8).getEdges().size());
+					assertEquals(2, results.block(8).getEdges().size());
 				} catch (AstException ex) {
 					fail(ex);
 				}

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/SyntaxFlow.java
Patch:
@@ -27,14 +27,15 @@ public class SyntaxFlow extends TextFlow implements Styleable {
 	 */
 	public SyntaxFlow(Language language) {
 		styler = new LanguageStyler(language, this);
+		getStyleClass().add("code-area");
 	}
 
 	/**
 	 * @param code
 	 * 		Code to generate styled syntax flow of.
 	 */
-	public void setCode(String code) {
-		styler.styleCompleteDocument(code);
+	public CompletableFuture<Void> setCode(String code) {
+		return styler.styleCompleteDocument(code);
 	}
 
 	@Override

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/RecafDockingManager.java
Patch:
@@ -218,6 +218,7 @@ protected void init(DetachableTabPane tabPane) {
 						DockTab tab = (DockTab) tabPane.getTabs().get(selectedIndex);
 						if (tab.isClosable())
 							tab.close();
+						tabPane.requestFocus();
 					}
 				}
 			});

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Analysis.java
Patch:
@@ -48,7 +48,7 @@ public boolean isBlockStart(int insnIndex) {
 	 *
 	 * @return The first block that defined at or before the index.
 	 */
-	public Block blockFloot(int index) {
+	public Block blockFloor(int index) {
 		return blocks.floorEntry(index).getValue();
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Analyzer.java
Patch:
@@ -1122,7 +1122,7 @@ private void fillBlocks(Analysis analysis, List<AbstractInstruction> instruction
 			int handlerIndex = instructions.indexOf(handlerLabel);
 			Block handlerBlock = analysis.block(handlerIndex);
 			for (int i = startIndex; i < endIndex; i++) {
-				Block block = analysis.blockFloot(i);
+				Block block = analysis.blockFloor(i);
 				block.addHandlerEdge(handlerBlock);
 			}
 		}

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/BytecodeToAstTransformer.java
Patch:
@@ -342,7 +342,7 @@ private void visitClass() {
 		// Setup other attributes
 		ClassDefinition definition = new ClassDefinition(modifiers, classNode.name, classNode.superName, classNode.interfaces);
 		if (classNode.signature != null)
-			definition.setSignature(new Signature(fieldNode.signature));
+			definition.setSignature(new Signature(classNode.signature));
 		AnnotationHelper.visitAnnos(definition, true, classNode.visibleAnnotations);
 		AnnotationHelper.visitAnnos(definition, false, classNode.invisibleAnnotations);
 		// Create AST for all methods & fields

File: recaf-core/src/main/java/me/coley/recaf/mapping/RemapperImpl.java
Patch:
@@ -58,6 +58,7 @@ public String mapMethodName(String owner, String name, String descriptor) {
 	public String mapMethodDesc(String methodDescriptor) {
 		int lastTypeEndOffset = methodDescriptor.indexOf(';');
 		if (lastTypeEndOffset == -1) {
+			// No object typees to map
 			return methodDescriptor;
 		}
 		int lastTypeStartOffset = 0;
@@ -75,7 +76,7 @@ public String mapMethodDesc(String methodDescriptor) {
 			lastTypeStartOffset += type.length() + 2;
 			tail = lastTypeStartOffset;
 		} while ((lastTypeEndOffset = methodDescriptor.indexOf(';', lastTypeEndOffset + 1)) != -1);
-		// Append tail
+		// Append remaining characters (tail onwards)
 		builder.append(methodDescriptor, tail, methodDescriptor.length());
 		return builder.toString();
 	}

File: recaf-core/src/main/java/me/coley/recaf/mapping/impl/SrgMappings.java
Patch:
@@ -10,6 +10,8 @@
 import org.slf4j.Logger;
 
 /**
+ * The MCP SRG format.
+ *
  * @author Matt Coley
  */
 public class SrgMappings extends MappingsAdapter {

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/FieldContextBuilder.java
Patch:
@@ -131,7 +131,7 @@ public void copy() {
 					// Create the new class bytecode filtered through the renamer
 					ClassInfo javaOwner = (ClassInfo) ownerInfo;
 					ClassWriter cw = new ClassWriter(WRITE_FLAGS);
-					ClassReader cr = new ClassReader(javaOwner.getValue());
+					ClassReader cr = javaOwner.getClassReader();
 					cr.accept(new MemberCopyingVisitor(cw, fieldInfo, newName), READ_FLAGS);
 					resource.getClasses().put(ClassInfo.read(cw.toByteArray()));
 				} else if (ownerInfo instanceof DexClassInfo) {
@@ -163,7 +163,7 @@ public void delete() {
 			if (ownerInfo instanceof ClassInfo) {
 				ClassInfo javaOwner = (ClassInfo) ownerInfo;
 				ClassWriter cw = new ClassWriter(WRITE_FLAGS);
-				ClassReader cr = new ClassReader(javaOwner.getValue());
+				ClassReader cr = javaOwner.getClassReader();
 				MemberRemovingVisitor remover = new MemberRemovingVisitor(cw, fieldInfo);
 				cr.accept(remover, READ_FLAGS);
 				resource.getClasses().put(ClassInfo.read(cw.toByteArray()));

File: recaf-core/src/main/java/me/coley/recaf/mapping/RemapperImpl.java
Patch:
@@ -97,7 +97,9 @@ public String mapDesc(String descriptor) {
 		while (dimensions-- != 0) {
 			builder.append('[');
 		}
+		builder.append('L');
 		builder.append(map(descriptor.substring(bookkeep + 1, descriptor.length() - 1)));
+		builder.append(';');
 		return builder.toString();
 	}
 

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/DefinitionArchTests.java
Patch:
@@ -171,7 +171,7 @@ public void testAnno() {
 
 	@Test
 	public void testAnnoWithEnum() {
-		handle("annotation com/example/MyAnno v enum com/example/Example NAME end" + "\nmethod simple ()V\nend", unit -> {
+		handle("annotation com/example/MyAnno v annotation-enum com/example/Example NAME end" + "\nmethod simple ()V\nend", unit -> {
 			MethodDefinition method = unit.getMethod();
 			assertNotNull(method.getCode());
 			assertEquals(1, method.getAnnotations().size());

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Analyzer.java
Patch:
@@ -158,7 +158,7 @@ private boolean execute(Analysis analysis, List<AbstractInstruction> instruction
 			frame.copy(priorFrame);
 		}
 		if (MANUAL_DEBUG) {
-			logger.info("Executing {} : {}", pc, instruction.print());
+			logger.info("Executing {} : {}", pc, instruction.print(PrintContext.DEFAULT_CTX));
 			logger.info(" - Stack PRE: {}", frame.getStack());
 		}
 		currentlyVisiting = instruction;

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Value.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.assemble.analysis;
 
 import me.coley.recaf.assemble.ast.HandleInfo;
+import me.coley.recaf.assemble.ast.PrintContext;
 import org.objectweb.asm.Type;
 
 import java.util.Arrays;
@@ -467,7 +468,7 @@ public HandleInfo getInfo() {
 
 		@Override
 		public String toString() {
-			return info.print();
+			return info.print(PrintContext.DEFAULT_CTX);
 		}
 
 		@Override

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/BaseElement.java
Patch:
@@ -178,7 +178,6 @@ public Element getChildAt(int position) {
 
 	@Override
 	public String toString() {
-		return print();
+		return print(PrintContext.DEFAULT_CTX);
 	}
-
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/Code.java
Patch:
@@ -213,14 +213,14 @@ public Map<String, Label> getLabels() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		if (entries.isEmpty())
 			return "";
 		return entries.stream()
 				.map(e -> {
 					if (e instanceof Label)
-						return e.print();
-					return "\t" + e.print();
+						return e.print(context);
+					return "\t" + e.print(context);
 				}).collect(Collectors.joining("\n"));
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/HandleInfo.java
Patch:
@@ -88,7 +88,7 @@ public String getDesc() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 			return tag + " " + EscapeUtil.escapeSpace(owner + '.' + name) + ' ' + EscapeUtil.escapeSpace(desc);
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/Unit.java
Patch:
@@ -22,8 +22,8 @@ public Unit(AbstractDefinition definition) {
 	}
 
 	@Override
-	public String print() {
-		return definition.print();
+	public String print(PrintContext context) {
+		return definition.print(context);
 	}
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/ConstVal.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.assemble.ast.ArgType;
 import me.coley.recaf.assemble.ast.BaseElement;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.util.EscapeUtil;
 
 /**
@@ -78,7 +79,7 @@ public ArgType getValueType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		switch (getValueType()) {
 			case STRING:
 				// We escape whatever string value is here because it makes parsing much simpler.

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/MethodParameters.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.assemble.ast.BaseElement;
 import me.coley.recaf.assemble.ast.Descriptor;
 import me.coley.recaf.assemble.ast.Element;
+import me.coley.recaf.assemble.ast.PrintContext;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -42,11 +43,11 @@ public List<MethodParameter> getParameters() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		StringBuilder sb = new StringBuilder();
 		for (int i = 0; i < parameters.size(); i++) {
 			MethodParameter param = parameters.get(i);
-			sb.append(param.print());
+			sb.append(param.print(context));
 			if (i < parameters.size() - 1)
 				sb.append(", ");
 		}

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/Modifier.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.assemble.ast.Named;
 import me.coley.recaf.assemble.ast.BaseElement;
+import me.coley.recaf.assemble.ast.PrintContext;
 import org.objectweb.asm.Opcodes;
 
 import java.util.HashMap;
@@ -29,8 +30,8 @@ private Modifier(String name, int value) {
 	}
 
 	@Override
-	public String print() {
-		return name;
+	public String print(PrintContext context) {
+		return context.fmtKeyword(name);
 	}
 
 	@Override

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/Modifiers.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.assemble.ast.BaseElement;
 import me.coley.recaf.assemble.ast.Element;
+import me.coley.recaf.assemble.ast.PrintContext;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -35,9 +36,9 @@ public void add(Modifier modifier) {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return modifiers.stream()
-				.map(m -> '.' + m.getName())
+				.map(m -> m.print(context))
 				.collect(Collectors.joining(" "));
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/ThrownException.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.assemble.ast.BaseElement;
 import me.coley.recaf.assemble.ast.Code;
 import me.coley.recaf.assemble.ast.CodeEntry;
+import me.coley.recaf.assemble.ast.PrintContext;
 
 /**
  * Details a single type thrown by a {@link MethodDefinition}.
@@ -28,8 +29,8 @@ public String getExceptionType() {
 	}
 
 	@Override
-	public String print() {
-		return String.format("throws %s", exceptionType);
+	public String print(PrintContext context) {
+		return context.fmtKeyword("throws ") + exceptionType;
 	}
 
 	@Override

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/TryCatch.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.assemble.ast.BaseElement;
 import me.coley.recaf.assemble.ast.Code;
 import me.coley.recaf.assemble.ast.CodeEntry;
+import me.coley.recaf.assemble.ast.PrintContext;
 
 /**
  * An abstraction of a try-catch range of a given type using named labels.
@@ -69,10 +70,10 @@ public void insertInto(Code code) {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		String type = exceptionType;
 		if (type == null)
 			type = ANY_TYPE;
-		return String.format("catch %s %s %s %s", type, startLabel, endLabel, handlerLabel);
+		return String.format("%s %s %s %s %s", context.fmtKeyword("catch"), type, startLabel, endLabel, handlerLabel);
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/FieldInstruction.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.assemble.ast.insn;
 
+import me.coley.recaf.assemble.ast.PrintContext;
+
 /**
  * Field reference instruction.
  *
@@ -54,7 +56,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode() + " " + getOwner() + '.' + getName() + ' ' + getDesc();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/IincInstruction.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.assemble.ast.Descriptor;
 import me.coley.recaf.assemble.ast.Named;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.VariableReference;
 
 /**
@@ -65,7 +66,7 @@ public String getName() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode() + " " + getVariableIdentifier() + " " + getIncrement();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/Instruction.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.assemble.ast.insn;
 
+import me.coley.recaf.assemble.ast.PrintContext;
+
 /**
  * Instruction with no arguments.
  *
@@ -20,7 +22,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/IntInstruction.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.assemble.ast.insn;
 
+import me.coley.recaf.assemble.ast.PrintContext;
+
 /**
  * Integer instruction.
  *
@@ -32,7 +34,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode() + " " + getValue();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/JumpInstruction.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.assemble.IllegalAstException;
 import me.coley.recaf.assemble.ast.FlowControl;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.meta.Label;
 import org.objectweb.asm.Opcodes;
 
@@ -41,7 +42,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode() + ' ' + getLabel();
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/LineInstruction.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.assemble.ast.insn;
 
+import me.coley.recaf.assemble.ast.PrintContext;
+
 /**
  * Line number instruction.
  *
@@ -43,7 +45,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode() + ' ' + getLabel() + " " + getLineNo();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/MultiArrayInstruction.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.assemble.ast.insn;
 
+import me.coley.recaf.assemble.ast.PrintContext;
+
 /**
  * Multi array instruction.
  *
@@ -43,7 +45,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode() + " " + getDesc() + " " + getDimensions();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/NewArrayInstruction.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.assemble.ast.insn;
 
+import me.coley.recaf.assemble.ast.PrintContext;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -81,7 +83,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode() + " " + newArrayNames.get(getArrayTypeInt());
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/TypeInstruction.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.assemble.ast.insn;
 
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.util.EscapeUtil;
 
 /**
@@ -34,7 +35,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return String.format("%s %s", getOpcode(), EscapeUtil.escapeSpace(getType()));
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/VarInstruction.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.assemble.ast.Descriptor;
 import me.coley.recaf.assemble.ast.Named;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.VariableReference;
 import me.coley.recaf.util.Types;
 import org.objectweb.asm.Opcodes;
@@ -64,7 +65,7 @@ public String getName() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return getOpcode() + " " + getVariableIdentifier();
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/meta/Comment.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.assemble.ast.BaseElement;
 import me.coley.recaf.assemble.ast.Code;
 import me.coley.recaf.assemble.ast.CodeEntry;
+import me.coley.recaf.assemble.ast.PrintContext;
 
 /**
  * User documentation that exists within a body of some kind.
@@ -26,7 +27,7 @@ public void insertInto(Code code) {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		if (isMultiLine()) {
 			return "/*\n" + comment + "\n*/";
 		} else {

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/meta/Label.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.assemble.ast.Code;
 import me.coley.recaf.assemble.ast.Named;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.insn.AbstractInstruction;
 import me.coley.recaf.assemble.ast.insn.InstructionType;
 
@@ -34,7 +35,7 @@ public InstructionType getInsnType() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return name + ":";
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/meta/Signature.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.assemble.ast.BaseElement;
 import me.coley.recaf.assemble.ast.Code;
 import me.coley.recaf.assemble.ast.CodeEntry;
+import me.coley.recaf.assemble.ast.PrintContext;
 
 /**
  * Generic signature for members.
@@ -21,8 +22,8 @@ public Signature(String signature) {
 	}
 
 	@Override
-	public String print() {
-		return "signature " + getSignature() + "\n";
+	public String print(PrintContext context) {
+		return context.fmtKeyword("signature ") + getSignature() + "\n";
 	}
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/pipeline/AssemblerPipeline.java
Patch:
@@ -502,7 +502,7 @@ public Group getASTElementAt(int position, Group root) {
 	 * @return {@code true} if the {@link #getUnit() unit} has been updated.
 	 * {@code false} indicates the unit has not changed.
 	 */
-	public boolean updateAst() {
+	public boolean updateAst(boolean usePrefix) {
 		// Skip if no changes in the text have been made
 		if (!textDirty)
 			return false;
@@ -512,7 +512,7 @@ public boolean updateAst() {
 			return false;
 		// JASM tokenize
 		logger.trace("Assembler AST updating: [JASM tokenize]");
-		Parser parser = new Parser();
+		Parser parser = new Parser(new Keywords(usePrefix ? "." : null));
 		List<Token> tokens = parser.tokenize("<assembler>", code);
 		parserCompletionListeners.forEach(l -> l.onCompleteTokenize(tokens));
 		// JASM parse

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/DefinitionArchTests.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * Tests for definitions and other arch nodes.
  */
-public class DefinitionArchTests extends TestUtil {
+public class DefinitionArchTests extends JasmUtils {
 	@Test
 	public void testSimpleDefinition() {
 		handle("method simple ()V\nend", unit -> {
@@ -205,7 +205,7 @@ public void testAnnoWithList() {
 	}
 
 	private static void handle(String original, Consumer<Unit> handler) {
-		Unit unit = generateSilent(original);
+		Unit unit = createSilentUnit(DEFAULT_KEYWORDS, original);
 		assertNotNull(unit, "Parser did not find unit context with input: " + original);
 
 		handler.accept(unit);

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/FallbackDecompiler.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.cafedude.classfile.ClassFile;
 import me.coley.cafedude.io.ClassFileReader;
 import me.coley.recaf.BuildConfig;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.code.ClassInfo;
 import me.coley.recaf.decompile.DecompileOption;
 import me.coley.recaf.decompile.Decompiler;
@@ -37,7 +38,7 @@ protected String decompileImpl(Map<String, DecompileOption<?>> options, Workspac
 			// TODO: Resilience measures Handle funky unicode escapes
 			ClassFile classFile = new ClassFileReader().read(applyInterceptors(info.getValue()));
 			ClassModel model = new ClassModel(classFile);
-			return model.print();
+			return model.print(PrintContext.DEFAULT_CTX);
 		} catch (Throwable t) {
 			String message = StringUtil.traceToString(t);
 			return "// Could not parse class: " + info.getName() + "\n// " +

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/model/ClassModel.java
Patch:
@@ -7,6 +7,7 @@
 import me.coley.cafedude.classfile.annotation.Annotation;
 import me.coley.cafedude.classfile.attribute.AnnotationsAttribute;
 import me.coley.cafedude.classfile.constant.CpClass;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.Printable;
 import me.coley.recaf.decompile.fallback.print.*;
 import me.coley.recaf.util.AccessFlag;
@@ -149,7 +150,7 @@ public List<Annotation> getAnnotations() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return printStrategy.print(this);
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/model/FieldModel.java
Patch:
@@ -7,6 +7,7 @@
 import me.coley.cafedude.classfile.attribute.AnnotationsAttribute;
 import me.coley.cafedude.classfile.attribute.ConstantValueAttribute;
 import me.coley.cafedude.classfile.constant.*;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.Printable;
 import me.coley.recaf.decompile.fallback.print.BasicFieldPrintStrategy;
 import me.coley.recaf.decompile.fallback.print.EnumConstFieldPrintStrategy;
@@ -155,7 +156,7 @@ public Object getConstValue() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return printStrategy.print(owner, this);
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/model/MethodModel.java
Patch:
@@ -6,6 +6,7 @@
 import me.coley.cafedude.classfile.annotation.ElementValue;
 import me.coley.cafedude.classfile.attribute.*;
 import me.coley.cafedude.classfile.constant.CpClass;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.Printable;
 import me.coley.recaf.decompile.fallback.print.*;
 
@@ -163,7 +164,7 @@ public ElementValue getAnnotationDefaultValue() {
 	}
 
 	@Override
-	public String print() {
+	public String print(PrintContext context) {
 		return printStrategy.print(owner, this);
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/BasicClassPrintStrategy.java
Patch:
@@ -7,6 +7,7 @@
 import me.coley.cafedude.classfile.constant.CpClass;
 import me.coley.cafedude.classfile.constant.CpMethodType;
 import me.coley.cafedude.classfile.constant.CpNameType;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.decompile.fallback.model.ClassModel;
 import me.coley.recaf.decompile.fallback.model.FieldModel;
 import me.coley.recaf.decompile.fallback.model.MethodModel;
@@ -37,15 +38,15 @@ public String print(ClassModel model) {
 			Printer fieldPrinter = new Printer();
 			fieldPrinter.setIndent("    ");
 			for (FieldModel fieldModel : model.getFields())
-				fieldPrinter.appendMultiLine(fieldModel.print());
+				fieldPrinter.appendMultiLine(fieldModel.print(PrintContext.DEFAULT_CTX));
 			out.appendMultiLine(fieldPrinter.toString());
 		}
 		out.newLine();
 		if (model.getMethods().size() > 0) {
 			Printer methodPrinter = new Printer();
 			methodPrinter.setIndent("    ");
 			for (MethodModel methodModel : model.getMethods()) {
-				methodPrinter.appendMultiLine(methodModel.print());
+				methodPrinter.appendMultiLine(methodModel.print(PrintContext.DEFAULT_CTX));
 				methodPrinter.newLine();
 			}
 			out.appendMultiLine(methodPrinter.toString());

File: recaf-core/src/test/java/me/coley/recaf/ssvm/SsvmDeobfuscationTests.java
Patch:
@@ -9,6 +9,7 @@
 import dev.xdark.ssvm.util.VMHelper;
 import dev.xdark.ssvm.value.Value;
 import me.coley.recaf.TestUtils;
+import me.coley.recaf.assemble.ast.PrintContext;
 import me.coley.recaf.assemble.ast.Unit;
 import me.coley.recaf.assemble.transformer.BytecodeToAstTransformer;
 import me.coley.recaf.code.ClassInfo;
@@ -190,6 +191,6 @@ private String disassemble() {
 		BytecodeToAstTransformer transformer = new BytecodeToAstTransformer(method);
 		transformer.visit();
 		Unit unit = transformer.getUnit();
-		return unit.print();
+		return unit.print(PrintContext.DEFAULT_CTX);
 	}
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/bytecode/AssemblerArea.java
Patch:
@@ -132,7 +132,7 @@ public void cleanup() {
 	private void setupAstParseThread() {
 		astParseThread = ThreadUtil.scheduleAtFixedRate(() -> {
 			try {
-				if (pipeline.updateAst() && pipeline.validateAst()) {
+				if (pipeline.updateAst(config().usePrefix) && pipeline.validateAst()) {
 					logger.trace("AST updated and validated");
 					if (pipeline.isMethod() &&
 							pipeline.isOutputOutdated() &&
@@ -183,13 +183,13 @@ public void disassemble() {
 		}
 		transformer.visit();
 		Unit unit = transformer.getUnit();
-		String code = unit.print();
+		String code = unit.print(config().createContext());
 		// Update text
 		setText(code);
 		// Also attempt to recompile once the code is set.
 		// We do not want to update the class, this is to initialize the pipeline state without the user needing
 		// to manually trigger a save first.
-		pipeline.updateAst();
+		pipeline.updateAst(config().usePrefix);
 		if (pipeline.isMethod())
 			pipeline.generateMethod();
 		else

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/item/InsnItem.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.ui.control.tree.item;
 
 import me.coley.recaf.assemble.ast.insn.AbstractInstruction;
+import me.coley.recaf.config.Configs;
 
 /**
  * Item for representing method instructions in the workspace.
@@ -21,7 +22,7 @@ public InsnItem(AbstractInstruction instruction) {
 
 	@Override
 	protected BaseTreeValue createTreeValue() {
-		return new BaseTreeValue(this, instruction.print(), false) {
+		return new BaseTreeValue(this, instruction.print(Configs.assembler().createContext()), false) {
 			@Override
 			protected void validatePathElement(String pathElementValue) {
 				// no-op

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/ExpressionPlaygroundPane.java
Patch:
@@ -106,7 +106,7 @@ private void updateBytecodePreview(String source) {
 		try {
 			Code code = toAstTransformer.transform(new Expression(source));
 			if (code != null) {
-				String bytecode = code.print();
+				String bytecode = code.print(Configs.assembler().createContext());
 				preview.setText(bytecode);
 			} else {
 				preview.setText("// No code emitted");

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/CellFactory.java
Patch:
@@ -173,6 +173,7 @@ private interface CellUpdater<T> {
 		});
 		ITEM_MAP.put(ResultsRootItem.class, (type, cell, resource, item) -> {
 			ResultsRootItem i = (ResultsRootItem) item;
+			cell.setGraphic(null);
 			cell.setText(String.format("%s - %d results", i.getSearch().toString(), i.getResults().size()));
 		});
 		ITEM_MAP.put(DummyItem.class, (type, cell, resource, item) -> {

File: recaf-core/src/main/java/me/coley/recaf/search/query/ReferenceQuery.java
Patch:
@@ -134,9 +134,9 @@ public void visitMethodInsn(int opcode, String owner, String name, String desc,
 			}
 
 			@Override
-			public void visitInvokeDynamicInsn(String name, String descriptor, Handle bsmHandle,
+			public void visitInvokeDynamicInsn(String name, String desc, Handle bsmHandle,
 											   Object... bootstrapMethodArguments) {
-				super.visitInvokeDynamicInsn(name, descriptor, bsmHandle, bootstrapMethodArguments);
+				super.visitInvokeDynamicInsn(name, desc, bsmHandle, bootstrapMethodArguments);
 				Supplier<IndyInstruction> indySupplier = Suppliers.memoize(() ->
 						new IndyInstruction(Opcodes.INVOKEDYNAMIC, name, desc,
 								new HandleInfo(bsmHandle),

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/MethodDefinition.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.assemble.ast.arch;
 
 import me.coley.recaf.assemble.ast.Code;
+import me.coley.recaf.util.EscapeUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -41,7 +42,7 @@ public String print() {
 		for (ThrownException thrownException : thrownExceptions)
 			sb.append(thrownException.print()).append("\n");
 		sb.append(super.buildDefString("method"));
-		sb.append(name).append(' ');
+		sb.append(EscapeUtil.escape(name)).append(' ');
 		sb.append('(').append(params.print()).append(')');
 		sb.append(returnType);
 		sb.append('\n');

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/JasmToAstTransformer.java
Patch:
@@ -222,7 +222,7 @@ public MethodVisitor visitMethod(MethodDeclarationGroup dcl) throws AssemblerExc
 		this.code = new Code();
 		MethodDefinition method = new MethodDefinition(
 				fromAccessMods(dcl.accessMods),
-				dcl.name.content(),
+				content(dcl.name),
 				parameters,
 				dcl.returnType,
 				this.code);
@@ -436,6 +436,6 @@ private static <E extends BaseElement> E wrap(Group group, E element) {
 	}
 
 	private static String content(Group group) {
-		return EscapeUtil.unescapeUnicode(group.content());
+		return EscapeUtil.unescape(group.content());
 	}
 }

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/InstructionParseTests.java
Patch:
@@ -408,7 +408,7 @@ public void testNames() {
 			handle("aload 1", v -> assertEquals("1", v.getVariableIdentifier()));
 			handle("aload A", v -> assertEquals("A", v.getVariableIdentifier()));
 			handle("aload 雨", v -> assertEquals("雨", v.getVariableIdentifier()));
-			handle("aload \\\\u96E8", v -> assertEquals("\\\\u96E8", v.getVariableIdentifier()));
+			handle("aload \\\\u96E8", v -> assertEquals("\\u96E8", v.getVariableIdentifier()));
 		}
 
 		private void handle(String original, Consumer<VarInstruction> handler) {
@@ -427,7 +427,7 @@ public class Types {
 		public void testNames() {
 			handle("new A", type -> assertEquals("A", type.getType()));
 			handle("new 雨", type -> assertEquals("雨", type.getType()));
-			handle("new \\\\u96E8", type -> assertEquals("\\\\u96E8", type.getType()));
+			handle("new \\\\u96E8", type -> assertEquals("\\u96E8", type.getType()));
 		}
 
 		private void handle(String original, Consumer<TypeInstruction> handler) {

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/InstructionParseTests.java
Patch:
@@ -408,7 +408,7 @@ public void testNames() {
 			handle("aload 1", v -> assertEquals("1", v.getVariableIdentifier()));
 			handle("aload A", v -> assertEquals("A", v.getVariableIdentifier()));
 			handle("aload 雨", v -> assertEquals("雨", v.getVariableIdentifier()));
-			handle("aload \\\\u96E8", v -> assertEquals("\\\\u96E8", v.getVariableIdentifier()));
+			handle("aload \\\\u96E8", v -> assertEquals("\\u96E8", v.getVariableIdentifier()));
 		}
 
 		private void handle(String original, Consumer<VarInstruction> handler) {
@@ -427,7 +427,7 @@ public class Types {
 		public void testNames() {
 			handle("new A", type -> assertEquals("A", type.getType()));
 			handle("new 雨", type -> assertEquals("雨", type.getType()));
-			handle("new \\\\u96E8", type -> assertEquals("\\\\u96E8", type.getType()));
+			handle("new \\\\u96E8", type -> assertEquals("\\u96E8", type.getType()));
 		}
 
 		private void handle(String original, Consumer<TypeInstruction> handler) {

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/MethodDefinition.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.assemble.ast.arch;
 
 import me.coley.recaf.assemble.ast.Code;
+import me.coley.recaf.util.EscapeUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -41,7 +42,7 @@ public String print() {
 		for (ThrownException thrownException : thrownExceptions)
 			sb.append(thrownException.print()).append("\n");
 		sb.append(super.buildDefString("method"));
-		sb.append(name).append(' ');
+		sb.append(EscapeUtil.escape(name)).append(' ');
 		sb.append('(').append(params.print()).append(')');
 		sb.append(returnType);
 		sb.append('\n');

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/JasmToAstTransformer.java
Patch:
@@ -222,7 +222,7 @@ public MethodVisitor visitMethod(MethodDeclarationGroup dcl) throws AssemblerExc
 		this.code = new Code();
 		MethodDefinition method = new MethodDefinition(
 				fromAccessMods(dcl.accessMods),
-				dcl.name.content(),
+				content(dcl.name),
 				parameters,
 				dcl.returnType,
 				this.code);
@@ -436,6 +436,6 @@ private static <E extends BaseElement> E wrap(Group group, E element) {
 	}
 
 	private static String content(Group group) {
-		return EscapeUtil.unescapeUnicode(group.content());
+		return EscapeUtil.unescape(group.content());
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/decompile/cfr/CfrDecompiler.java
Patch:
@@ -42,6 +42,7 @@ protected String decompileImpl(Map<String, DecompileOption<?>> options, Workspac
 		if (source == null || source.getWorkspace() != workspace) {
 			source = new ClassSource(workspace, this);
 		}
+		source.setOverrideClass(classInfo);
 		String name = classInfo.getName();
 		SinkFactoryImpl sink = new SinkFactoryImpl();
 		CfrDriver driver = new CfrDriver.Builder()

File: recaf-plugin/src/main/java/dev/xdark/recaf/plugin/repository/CommonPluginRepository.java
Patch:
@@ -10,9 +10,9 @@
  * @author xtherk
  */
 public class CommonPluginRepository implements PluginRepository {
-	private static final List<PluginRepository> repositories = new ArrayList<>();
+	private final List<PluginRepository> repositories = new ArrayList<>();
 
-	static {
+	public CommonPluginRepository() {
 		repositories.add(new OfficialPluginRepository());
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/PluginManagerPane.java
Patch:
@@ -100,7 +100,7 @@ private void browsePlugins() {
 			try {
 				DesktopUtil.showDocument(Directories.getPluginDirectory().toUri());
 			} catch (IOException ex) {
-				logger.error("Failed to show scripts directory", ex);
+				logger.error("Failed to show plugins directory", ex);
 			}
 		}
 

File: recaf-core/src/main/java/me/coley/recaf/io/PathByteSource.java
Patch:
@@ -29,11 +29,11 @@ public byte[] readAll() throws IOException {
 
 	@Override
 	public byte[] peek(int count) throws IOException {
-		try (InputStream in = Files.newInputStream(path)) {
+		try (InputStream in = openStream()) {
 			byte[] buf = new byte[count];
 			int offset = 0;
 			int r;
-			while ((r = in.read(buf, offset, count)) != -1) {
+			while ((r = in.read(buf, offset, count)) > 0) {
 				offset += r;
 				count -= r;
 			}

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/JasmToAstTransformer.java
Patch:
@@ -405,6 +405,8 @@ private static Object convert(Group group) throws AssemblerException {
 			HandleGroup handle = (HandleGroup) group;
 			HandleInfo info = from(handle);
 			return info.toHandle();
+		} else if (group.type == Group.GroupType.STRING){
+			return group.content();
 		} else {
 			String content = group.content();
 			if (content.equals("true")) return true;

File: recaf-core/src/main/java/me/coley/recaf/ssvm/processing/PeepholeProcessors.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.function.BiFunction;
 import java.util.function.Function;
 import java.util.function.Predicate;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import static me.coley.recaf.ssvm.value.ConstNumericValue.*;
@@ -381,7 +382,7 @@ public static void installReturnValueFolding(VirtualMachine vm, Predicate<Execut
 				for (int i = argTypes.length - 1; i >= 0; i--) {
 					Type argType = argTypes[i];
 					Value value = stack.getAt(stackSize - 1 - argOffset);
-					paramsAreConst &= (value instanceof ConstValue);
+					paramsAreConst &= VmValueUtil.isConstant(value);
 					argumentValues.add(value);
 					argOffset += argType.getSize();
 				}

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/BasicFieldPrintStrategy.java
Patch:
@@ -33,6 +33,7 @@ protected void appendAnnotations(StringBuilder sb, FieldModel model) {
 
 	protected void appendFlags(StringBuilder sb, FieldModel model) {
 		Collection<AccessFlag> flags = AccessFlag.getApplicableFlags(AccessFlag.Type.FIELD, model.getAccess());
+		flags.remove(AccessFlag.ACC_ENUM); // we don't want to print 'enum' as a flag
 		flags = AccessFlag.sort(AccessFlag.Type.FIELD, flags);
 		if (!flags.isEmpty())
 			sb.append(AccessFlag.toString(flags)).append(' ');

File: recaf-plugin/src/test/java/dev/xdark/recaf/plugin/SimplePluginTests.java
Patch:
@@ -1,7 +1,7 @@
 package dev.xdark.recaf.plugin;
 
-import dev.xdark.recaf.TestUtils;
 import dev.xdark.recaf.plugin.java.ZipPluginLoader;
+import me.coley.recaf.TestUtils;
 import me.coley.recaf.io.ByteSources;
 import org.apache.commons.io.FileUtils;
 import org.junit.jupiter.api.Test;

File: recaf-ui/src/main/java/me/coley/recaf/ui/plugin/InstalledTab.java
Patch:
@@ -6,6 +6,7 @@
 import dev.xdark.recaf.plugin.RecafPlugin;
 import javafx.scene.control.Tab;
 import me.coley.recaf.ui.plugin.item.InstalledPluginItem;
+import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.util.logging.Logging;
 import org.slf4j.Logger;
 
@@ -17,11 +18,11 @@
  * @author xtherk
  */
 public class InstalledTab extends Tab {
-    private final Logger logger = Logging.get(this.getClass());
 
+    private static final Logger logger = Logging.get(InstalledTab.class);
 
     public InstalledTab() {
-        super("Installed");
+        super(Lang.get("menu.plugin.installed"));
     }
 
     /**

File: recaf-ui/src/main/java/me/coley/recaf/ui/plugin/MarketplaceTab.java
Patch:
@@ -4,6 +4,7 @@
 import me.coley.recaf.ui.plugin.item.MarketplacePluginItem;
 import me.coley.recaf.ui.plugin.repository.CommonPluginRepository;
 import me.coley.recaf.ui.plugin.repository.PluginRepository;
+import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.util.logging.Logging;
 import org.slf4j.Logger;
 
@@ -14,12 +15,12 @@
  */
 public class MarketplaceTab extends Tab {
 
-    private final Logger logger = Logging.get(this.getClass());
+    private static final Logger logger = Logging.get(MarketplaceTab.class);
 
     private static final PluginRepository REPOSITORY = new CommonPluginRepository();
 
     public MarketplaceTab() {
-        super("Marketplace");
+        super(Lang.get("menu.plugin.marketplace"));
     }
 
     private List<MarketplacePluginItem> createPluginItems() {

File: recaf-ui/src/test/java/dev/xdark/recaf/plugin/PluginTests.java
Patch:
@@ -1,7 +1,7 @@
 package dev.xdark.recaf.plugin;
 
 import dev.xdark.recaf.plugin.java.ZipPluginLoader;
-import dev.xdark.recaf.TestUtils;
+import me.coley.recaf.TestUtils;
 import me.coley.recaf.io.ByteSources;
 import me.coley.recaf.util.Directories;
 import org.apache.commons.io.FileUtils;

File: recaf-core/src/main/java/me/coley/recaf/mapping/MappingsManager.java
Patch:
@@ -35,9 +35,8 @@ public MappingsManager() {
 	 * 		The additional mappings that were added.
 	 */
 	public void updateAggregateMappings(Mappings newMappings) {
-		if (aggregatedMappings.update(newMappings)) {
-			aggregateListeners.forEach(listener -> listener.onAggregatedMappingsUpdated(getAggregatedMappings()));
-		}
+		aggregatedMappings.update(newMappings);
+		aggregateListeners.forEach(listener -> listener.onAggregatedMappingsUpdated(getAggregatedMappings()));
 	}
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/meta/Signature.java
Patch:
@@ -22,7 +22,7 @@ public Signature(String signature) {
 
 	@Override
 	public String print() {
-		return "SIGNATURE " + getSignature();
+		return "signature " + getSignature() + "\n";
 	}
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/config/container/AssemblerConfig.java
Patch:
@@ -17,6 +17,9 @@ public class AssemblerConfig implements ConfigContainer {
 	@Group("validation")
 	@ConfigID("bytecode")
 	public boolean bytecodeValidation = true;
+	@Group("debug")
+	@ConfigID("ast-debug")
+	public boolean astDebug = false;
 
 	@Override
 	public String iconPath() {

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/JasmToAstTransformer.java
Patch:
@@ -61,7 +61,7 @@ public void visit(Group group) throws AssemblerException {
 
 	@Override
 	public void visitLabel(LabelGroup label) throws AssemblerException {
-		code.addLabel(new Label(label.getLabel()));
+		code.addLabel(wrap(label, new Label(label.getLabel())));
 	}
 
 	@Override

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/StackAnalysisPane.java
Patch:
@@ -143,6 +143,7 @@ public Node getNodeRepresentation() {
 	 * 		Cell value.
 	 */
 	private static void populate(IndexedCell<Value> cell, Value item) {
+		String text = item == null ? null : item.toString();
 		if (item instanceof Value.EmptyPoppedValue || item instanceof Value.WideReservedValue) {
 			// Internal
 			cell.setGraphic(Icons.getIconView(Icons.INTERNAL));
@@ -160,12 +161,11 @@ private static void populate(IndexedCell<Value> cell, Value item) {
 			cell.setGraphic(createHandleGraphic((Value.HandleValue) item));
 		} else if (item != null) {
 			cell.setGraphic(null);
-			cell.setText(item.toString());
 		} else {
 			// TODO: This should not happen
 			cell.setGraphic(null);
-			cell.setText(null);
 		}
+		cell.setText(text);
 	}
 
 	private static Node createObjectGraphic(Value.ObjectValue item) {

File: recaf-plugin/src/main/java/dev/xdark/recaf/plugin/PluginManager.java
Patch:
@@ -38,7 +38,7 @@ public interface PluginManager {
 	/**
 	 * @return collection of plugins.
 	 */
-	Collection<? super Plugin> getPlugins();
+	<T extends Plugin> Collection<? super PluginContainer<T>> getPlugins();
 
 	/**
 	 * Registers new loader.

File: recaf-plugin/src/main/java/dev/xdark/recaf/plugin/SimplePluginManager.java
Patch:
@@ -39,7 +39,7 @@ public Collection<PluginLoader> getLoaders() {
 	}
 
 	@Override
-	public Collection<? super Plugin> getPlugins() {
+	public <T extends Plugin> Collection<? super PluginContainer<T>> getPlugins() {
 		return Collections.unmodifiableCollection(nameMap.values());
 	}
 

File: recaf-plugin/src/test/java/dev/xdark/recaf/plugin/SimplePluginTests.java
Patch:
@@ -35,7 +35,7 @@ public void testLoadPlugin() throws PluginLoadException {
     }
 
     /**
-     * compress TestSamplePlugin.zip
+     * compress TestSamplePlugin.jar
      */
     private void compressTestSamplePlugin(OutputStream out) {
         try (ZipOutputStream zos = new ZipOutputStream(out)) {

File: recaf-ui/src/main/java/me/coley/recaf/Main.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf;
 
+import dev.xdark.recaf.plugin.RecafPlugin;
 import me.coley.recaf.launch.InitializerParameters;
 import me.coley.recaf.scripting.ScriptEngine;
 import me.coley.recaf.scripting.ScriptResult;
@@ -28,6 +29,8 @@ public class Main {
 	 */
 	public static void main(String[] args) {
 		setupLogging();
+		// Initialization plugin
+		RecafPlugin.initialize();
 		InitializerParameters parameters = InitializerParameters.fromArgs(args);
 		new Recaf().initialize(parameters);
 		// run script from parameters if found

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/item/FilterableTreeItem.java
Patch:
@@ -123,6 +123,7 @@ public void addSortedChild(TreeItem<T> item) {
 	 * @param item
 	 * 		Child item to add.
 	 */
+	@SuppressWarnings("unchecked")
 	public void addAndSortChild(TreeItem<T> item) {
 		synchronized (sourceChildren) {
 			int index = Collections.binarySearch((List) getChildren(), item);

File: recaf-ui/src/main/java/me/coley/recaf/util/NodeEvents.java
Patch:
@@ -45,6 +45,7 @@ public static void addKeyPressHandler(Node node, EventHandler<? super KeyEvent>
 	 * @param <T>
 	 * 		Value type.
 	 */
+	@SuppressWarnings("unchecked")
 	public static <T> void dispatchAndRemoveIf(ObservableValue<T> value, RemovalChangeListener<? super T> listener) {
 		ChangeListener<? super T>[] handle = new ChangeListener[1];
 		handle[0] = (observable, oldValue, newValue) -> {

File: recaf-plugin/src/main/java/dev/xdark/recaf/plugin/PluginClassLoader.java
Patch:
@@ -85,7 +85,7 @@ public void close() throws IOException {
 	 * 		or if the loader is closed.
 	 */
 	public Class<?> lookupClass(String name) throws ClassNotFoundException {
-		return super.findClass(name);
+		return findClass(name);
 	}
 
 	static {

File: recaf-utils/src/main/java/me/coley/recaf/util/EscapeUtil.java
Patch:
@@ -183,6 +183,9 @@ private static int computeUnescapeStandard(String input, int cursor, StringBuild
 			case '\\':
 				builder.append("\\\\");
 				return 1;
+			case '"':
+				builder.append("\\\"");
+				return 1;
 			default:
 				return 0;
 		}

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Value.java
Patch:
@@ -148,6 +148,8 @@ public int getDimensions() {
 
 		@Override
 		public String toString() {
+			if (array == null)
+				return "null";
 			return "[" + Arrays.stream(getArray())
 					.map(Object::toString)
 					.collect(Collectors.joining(", ")) +

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/AstValidationTests.java
Patch:
@@ -142,7 +142,7 @@ private static void assertMatch(String original, int id) {
 	}
 
 	private static void handle(String original, boolean expectMessages, DelegatedMessageConsumer handler) {
-		Unit unit = generate(original);
+		Unit unit = generateSilent(original);
 		assertNotNull(unit, "Parser did not find unit context with input: " + original);
 
 		AstValidator validator = new AstValidator(unit);

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/DefinitionArchTests.java
Patch:
@@ -205,7 +205,7 @@ public void testAnnoWithList() {
 	}
 
 	private static void handle(String original, Consumer<Unit> handler) {
-		Unit unit = generate(original);
+		Unit unit = generateSilent(original);
 		assertNotNull(unit, "Parser did not find unit context with input: " + original);
 
 		handler.accept(unit);

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/ExpressionParseTests.java
Patch:
@@ -46,7 +46,7 @@ public void testMultiLine(String expression) {
 	}
 
 	private static void handle(String original, Consumer<MethodDefinition> handler) {
-		Unit unit = generate(original);
+		Unit unit = generateSilent(original);
 
 		assertNotNull(unit, "Parser did not find unit context with input: " + original);
 

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/InstructionParseTests.java
Patch:
@@ -573,7 +573,7 @@ private void handle(String original, Consumer<TableSwitchInstruction> handler) {
 
 	private static CodeEntry staticHandle(String code) {
 		String wrapped = "method somethind()V\n" + code + "\nend";
-		Unit unit = generate(wrapped);
+		Unit unit = generateSilent(wrapped);
 		assertNotNull(unit);
 		MethodDefinition method = unit.getMethod();
 		assertEquals(1, method.getCode().getEntries().size());

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/MethodParseTests.java
Patch:
@@ -69,7 +69,7 @@ private static Consumer<MethodNode> pass() {
 
 	private static void handle(String original, Consumer<MethodNode> handler) {
 		// JASM parse
-		Unit unit = generate(original);
+		Unit unit = generateSilent(original);
 
 		assertNotNull(unit, "Unit must not be null!");
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/Modifier.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.Map;
 
 /**
- * Represents a {@link java.lang.reflect.Modifier} of a {@link MemberDefinition}.
+ * Represents a {@link java.lang.reflect.Modifier} of a {@link Definition}.
  *
  * @author Matt Coley
  */

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/Attributes.java
Patch:
@@ -1,15 +1,15 @@
 package me.coley.recaf.assemble.transformer;
 
 import me.coley.recaf.assemble.ast.arch.Annotation;
-import me.coley.recaf.assemble.ast.arch.ConstVal;
+import me.coley.recaf.assemble.ast.arch.Definition;
 import me.coley.recaf.assemble.ast.arch.ThrownException;
 import me.coley.recaf.assemble.ast.meta.Signature;
 
 import java.util.ArrayList;
 import java.util.List;
 
 /**
- * Class to hold attributes about {@link me.coley.recaf.assemble.ast.arch.MemberDefinition}s that appear before
+ * Class to hold attributes about {@link Definition}s that appear before
  * the actual definition.
  */
 public class Attributes {

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/DefinitionArchTests.java
Patch:
@@ -18,7 +18,7 @@ public class DefinitionArchTests extends TestUtil {
 	@Test
 	public void testSimpleDefinition() {
 		handle("method simple()V\nend", unit -> {
-			MemberDefinition def = unit.getDefinition();
+			Definition def = unit.getDefinition();
 			assertEquals("simple", def.getName());
 			assertEquals("()V", def.getDesc());
 			assertEquals(0, def.getModifiers().value());

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/DebugPane.java
Patch:
@@ -32,12 +32,12 @@ public DebugPane(AssemblerArea pane, AssemblerPipeline pipeline) {
     }
 
     @Override
-    public void onCompleteTokenize(Collection<Token> tokens) {
+    public void onCompleteTokenize(List<Token> tokens) {
         listView.update(tokens);
     }
 
     @Override
-    public void onCompleteParse(Collection<Group> groups) {
+    public void onCompleteParse(List<Group> groups) {
         treeView.update(groups);
     }
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/bytecode/AssemblerArea.java
Patch:
@@ -408,15 +408,15 @@ public void onBytecodeValidationComplete(Object object, Validator<?> validator)
 	@Override
 	public void onParseFail(AssemblerException ex) {
 		int line = ex.getLocation().getLine();
-		String msg = ex.getMessage();
+		String msg = ex.describe();
 		ProblemInfo problem = new ProblemInfo(BYTECODE_PARSING, ProblemLevel.ERROR, line, msg);
 		problemTracking.addProblem(line, problem);
 	}
 
 	@Override
 	public void onParserTransformFail(AssemblerException ex) {
 		int line = ex.getLocation().getLine();
-		String msg = ex.getMessage();
+		String msg = ex.describe();
 		ProblemInfo problem = new ProblemInfo(BYTECODE_PARSING, ProblemLevel.ERROR, line, msg);
 		problemTracking.addProblem(line, problem);
 	}

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Analyzer.java
Patch:
@@ -39,7 +39,6 @@ public class Analyzer {
 	private final Map<Label, String> catchHandlerTypes = new HashMap<>();
 	private final String selfType;
 	private final Code code;
-
 	private final MethodDefinition method;
 	private ExpressionToAstTransformer expressionToAstTransformer;
 	private InheritanceChecker inheritanceChecker = ReflectiveInheritanceChecker.getInstance();
@@ -149,6 +148,7 @@ private void branch(Analysis analysis, List<AbstractInstruction> instructions, i
 
 	private boolean execute(Analysis analysis, List<AbstractInstruction> instructions,
 							int ctxPc, int pc, AbstractInstruction instruction) throws AstException {
+
 		Frame frame = analysis.frame(pc);
 		Frame oldFrameState = frame.copy();
 
@@ -378,7 +378,7 @@ else if (op == Opcodes.ATHROW)
 				case NEWARRAY: {
 					// Get array type
 					NewArrayInstruction newArrayInstruction = (NewArrayInstruction) instruction;
-					Type type = Type.getType(String.valueOf(newArrayInstruction.getArrayType()));
+					Type type = Type.getType(String.valueOf(newArrayInstruction.getArrayTypeChar()));
 					// Get array size, if possible
 					Value.ArrayValue arrayValue;
 					Value stackTop = frame.pop();

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AstToMethodTransformer.java
Patch:
@@ -40,7 +40,7 @@ public class AstToMethodTransformer {
 	// Configurable
 	private InheritanceChecker inheritanceChecker = ReflectiveInheritanceChecker.getInstance();
 	private boolean doLimitVarRange = true;
-	private boolean useAnalysis = true;
+	private boolean useAnalysis = false;
 	// Method building and other outputs
 	private InsnList instructions;
 	private Analysis analysis;

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/validation/ast/AstArrayValidator.java
Patch:
@@ -23,7 +23,7 @@ public void visit(AstValidator validator) {
 		for (AbstractInstruction instruction : code.getInstructions()) {
 			if (instruction instanceof NewArrayInstruction) {
 				NewArrayInstruction newArrayInstruction = (NewArrayInstruction) instruction;
-				char t = newArrayInstruction.getArrayType();
+				String t = newArrayInstruction.getArrayType();
 				try {
 					newArrayInstruction.getArrayTypeInt();
 				} catch (Exception ex) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/DebugPane.java
Patch:
@@ -20,7 +20,7 @@ public class DebugPane extends BorderPane implements ParserCompletionListener {
 
     public GroupTreeView treeView;
     public TokenList listView;
-    static AssemblerArea assemblerPane;
+    public AssemblerArea assemblerPane;
 
     public DebugPane(AssemblerArea pane, AssemblerPipeline pipeline) {
         super();

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AstToMethodTransformer.java
Patch:
@@ -408,6 +408,7 @@ private InsnList createInstructions() throws MethodCompileException {
 						if (value == null)
 							throw new MethodCompileException(instruction,
 									"No identifier mapping to label instance for '" + name + "'");
+						labels[i] = value;
 					}
 					String dfltName = table.getDefaultIdentifier();
 					LabelNode dflt = labelMap.get(dfltName);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/pipeline/AssemblerPipeline.java
Patch:
@@ -329,6 +329,7 @@ public boolean updateAst() {
 		logger.trace("Assembler AST updating: [JASM tokenize]");
 		Parser parser = new Parser();
 		List<Token> tokens = parser.tokenize("<assembler>", code);
+		parserCompletionListeners.forEach(listener -> listener.onCompleteTokenize(tokens));
 		// ANTLR parse
 		logger.trace("Assembler AST updating: [JASM parse]");
 		ParserContext ctx = new ParserContext(new LinkedList<>(tokens), parser); // convert to linked list to get a queue

File: recaf-ui/src/main/java/me/coley/recaf/ui/prompt/QuickNavPrompt.java
Patch:
@@ -51,7 +51,7 @@ private QuickNavPrompt() {
 	 * Can't name shadow "close" or "hide".
 	 */
 	private static void vanish() {
-		if (showing.compareAndSet(true, false)) {
+		if (showing.getAndSet(false)) {
 			instance().hide();
 		}
 	}
@@ -60,7 +60,7 @@ private static void vanish() {
 	 * Shows the prompt.
 	 */
 	public static void open() {
-		if (!showing.compareAndSet(false, true)) {
+		if (!showing.getAndSet(true)) {
 			instance().show();
 			nav.search.requestFocus();
 		}

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/SearchPane.java
Patch:
@@ -61,7 +61,7 @@ private SearchPane(ObservableValue<String> title, Node content) {
 	 * @return Empty text search panel.
 	 */
 	public static SearchPane createTextSearch() {
-		return createTextSearch(null);
+		return createTextSearch("");
 	}
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/HandleInfo.java
Patch:
@@ -89,9 +89,9 @@ public String getDesc() {
 	@Override
 	public String print() {
 		if (isMethod) {
-			return String.format("%s %s.%s%s", tag, owner, name, desc);
+			return tag + " " + owner + '.' + name + desc;
 		} else {
-			return String.format("%s %s.%s %s", tag, owner, name, desc);
+			return tag + " " + owner + '.' + name + ' ' + desc;
 		}
 	}
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/IconProvider.java
Patch:
@@ -13,5 +13,5 @@ public interface IconProvider {
 	/**
 	 * @return Provided icon.
 	 */
-	Node getIcon();
+	Node makeIcon();
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/window/MainMenu.java
Patch:
@@ -29,6 +29,7 @@
 import me.coley.recaf.ui.util.Icons;
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.util.logging.Logging;
+import me.coley.recaf.util.threading.FxThreadUtil;
 import me.coley.recaf.util.threading.ThreadUtil;
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.resource.Resource;
@@ -164,7 +165,7 @@ public void refreshRecent() {
 			menuRecent.getItems().add(new ClosableActionMenuItem(title, graphic, () -> {
 				try {
 					Workspace workspace = model.loadWorkspace();
-					RecafUI.getController().setWorkspace(workspace);
+					FxThreadUtil.run(() -> RecafUI.getController().setWorkspace(workspace));
 				} catch (Exception ex) {
 					Toolkit.getDefaultToolkit().beep();
 					Configs.recentWorkspaces().recentWorkspaces.remove(model);

File: recaf-core/src/main/java/me/coley/recaf/ssvm/processing/PeepholeProcessors.java
Patch:
@@ -832,7 +832,9 @@ private static InstructionProcessor<AbstractInsnNode> arraySet(ArraySetter sette
 			Value value = stack.pop();
 			Value indexValue = stack.pop();
 			int index = indexValue.asInt();
-			ArrayValue array = helper.checkNotNullArray(stack.pop());
+			Value top = stack.pop();
+			ArrayValue array = (top instanceof ObjectValue) ?
+					helper.checkNotNullArray((ObjectValue) top) : helper.checkArray(top);
 			helper.rangeCheck(array, index);
 			setter.set(array, index, value);
 			if (array instanceof TrackedArrayValue) {

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/BasicMethodPrintStrategy.java
Patch:
@@ -107,7 +107,7 @@ protected void appendBody(Printer out, MethodModel model) {
 		for (Instruction instruction : instructions) {
 			int rawOp = instruction.getOpcode();
 			int asmOp = OpcodeUtil.deindexVarOp(rawOp);
-			int asmType = OpcodeUtil.opcodeToType(asmOp);
+			int asmType = OpcodeUtil.opcodeHasType(asmOp) ? OpcodeUtil.opcodeToType(asmOp) : -1;
 			String name = OpcodeUtil.opcodeToName(asmOp);
 			if (asmOp != rawOp) {
 				int index = OpcodeUtil.indexFromVarOp(instruction.getOpcode());

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/StackAnalysisPane.java
Patch:
@@ -62,11 +62,13 @@ public StackAnalysisPane(AssemblerArea assemblerArea, AssemblerPipeline pipeline
 	private void onIndexChange(int paragraphIndex) {
 		if (pipeline == null || pipeline.getUnit() == null)
 			return;
+		Analysis analysis = pipeline.getLastAnalysis();
+		if (analysis == null)
+			return;
 		Unit unit = pipeline.getUnit();
 		Element element = unit.getCode().getChildOnLine(paragraphIndex + 1);
 		if (element instanceof AbstractInstruction) {
 			int insnIndex = unit.getCode().getInstructions().indexOf(element);
-			Analysis analysis = pipeline.getLastAnalysis();
 			if (insnIndex < analysis.getFrames().size()) {
 				Frame frame = analysis.frame(insnIndex);
 				variableView.update(frame);

File: recaf-core/src/main/java/me/coley/recaf/search/query/DeclarationQuery.java
Patch:
@@ -85,7 +85,7 @@ public void visitFile(FileInfo fileInfo) {
 		public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
 			MethodInfo methodInfo = currentClass.findMethod(name, desc);
 			if (methodInfo != null)
-				whenMatched(owner, name, desc,
+				whenMatched(currentClass.getName(), name, desc,
 						builder -> addMethod(builder, methodInfo.getName(), methodInfo.getDescriptor()));
 			return null;
 		}
@@ -94,7 +94,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si
 		public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {
 			FieldInfo fieldInfo = currentClass.findField(name, desc);
 			if (fieldInfo != null)
-				whenMatched(owner, name, desc,
+				whenMatched(currentClass.getName(), name, desc,
 						builder -> addField(builder, fieldInfo.getName(), fieldInfo.getDescriptor()));
 			return null;
 		}

File: recaf-core/src/main/java/me/coley/recaf/parse/ParseHitResult.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.github.javaparser.ast.Node;
 import com.github.javaparser.ast.body.FieldDeclaration;
+import com.github.javaparser.ast.body.InitializerDeclaration;
 import com.github.javaparser.ast.body.TypeDeclaration;
 import com.github.javaparser.ast.nodeTypes.NodeWithDeclaration;
 import me.coley.recaf.code.ClassInfo;
@@ -49,7 +50,7 @@ public Node getNode() {
 	public boolean isDeclaration() {
 		// Because of the way we handle JavaParser resolving this works fine for methods/classes...
 		// But for fields, we could just be matching a 'SimpleName'.
-		if (info instanceof MethodInfo && node instanceof NodeWithDeclaration)
+		if (info instanceof MethodInfo && (node instanceof NodeWithDeclaration || node instanceof InitializerDeclaration))
 			return true;
 		if (info instanceof ClassInfo && node instanceof TypeDeclaration)
 			return true;

File: recaf-ui/src/main/java/me/coley/recaf/scripting/ScriptEngine.java
Patch:
@@ -22,6 +22,8 @@ public class ScriptEngine {
 	private static final Logger logger = Logging.get(ScriptEngine.class);
 	private static final Interpreter interpreter = new Interpreter();
 	private static final String[] defaultImportedPackages = {
+			"java.io",
+			"java.nio.file",
 			"java.util",
 			"me.coley.recaf",
 			"me.coley.recaf.util",
@@ -51,7 +53,7 @@ public static ScriptResult execute(Reader reader) {
 		try {
 			return new ScriptResult(interpreter.eval(reader), null);
 		} catch (EvalError e) {
-			logger.error("Failed to evaluate BeanShell script: {}", e.getLocalizedMessage());
+			logger.error("Failed to evaluate BeanShell script", e);
 			return new ScriptResult(null, e);
 		}
 	}

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/ScriptManagerPane.java
Patch:
@@ -146,7 +146,7 @@ private void showScriptEditor(ScriptEditorPane pane) {
 	}
 
 	private void createNewScript() {
-		String metadataTemplate = "//==Metadata==\n" +
+		String metadataTemplate = "// ==Metadata==\n" +
 				"// @name New Script\n" +
 				"// @description Script Description\n" +
 				"// @version 1.0\n" +

File: recaf-ui/src/main/java/me/coley/recaf/ui/window/WindowBase.java
Patch:
@@ -138,6 +138,7 @@ public static void installStyle(List<String> stylesheets) {
 				"style/markdown.css",
 				"style/menu.css",
 				"style/navbar.css",
+				"style/progress.css",
 				"style/scroll.css",
 				"style/table.css",
 				"style/tabs.css",

File: recaf-ui/src/main/java/me/coley/recaf/config/container/KeybindConfig.java
Patch:
@@ -11,6 +11,7 @@
 import me.coley.recaf.ui.behavior.Undoable;
 import me.coley.recaf.ui.util.Animations;
 import me.coley.recaf.ui.util.Icons;
+import me.coley.recaf.util.NodeEvents;
 
 import static javafx.scene.input.KeyCode.*;
 import static me.coley.recaf.config.binds.Binding.newBind;
@@ -137,7 +138,7 @@ public boolean isEditingBind() {
 	 * 		Component to install editor keybinds into.
 	 */
 	public void installEditorKeys(Parent parent) {
-		parent.setOnKeyPressed(e -> {
+		NodeEvents.addKeyPressHandler(parent, e -> {
 			// Shouldn't happen, but just for sanity
 			if (isEditingBind())
 				return;

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/WorkspaceTree.java
Patch:
@@ -7,6 +7,7 @@
 import me.coley.recaf.RecafUI;
 import me.coley.recaf.ui.CommonUX;
 import me.coley.recaf.ui.control.tree.item.*;
+import me.coley.recaf.util.NodeEvents;
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.resource.Resources;
 
@@ -22,10 +23,10 @@ public class WorkspaceTree extends TreeView<BaseTreeValue> {
 	 */
 	public WorkspaceTree(CellOriginType treeType) {
 		setCellFactory(new WorkspaceCellFactory(treeType));
-		setOnKeyReleased(this::onKeyRelease);
+		NodeEvents.addKeyPressHandler(this, this::onKeyPressed);
 	}
 
-	private void onKeyRelease(KeyEvent e) {
+	private void onKeyPressed(KeyEvent e) {
 		TreeItem<?> item = getSelectionModel().getSelectedItem();
 		if (e.getCode() == KeyCode.ENTER) {
 			// Open selected

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/WorkspacePane.java
Patch:
@@ -6,6 +6,7 @@
 import me.coley.recaf.config.Configs;
 import me.coley.recaf.ui.control.WorkspaceFilterField;
 import me.coley.recaf.ui.control.tree.WorkspaceTreeWrapper;
+import me.coley.recaf.util.NodeEvents;
 import me.coley.recaf.workspace.Workspace;
 
 /**
@@ -32,7 +33,7 @@ private WorkspacePane() {
 		setCenter(tree);
 		setBottom(bottomWrapper);
 		// Any typing in the tree should be fed into the filter
-		tree.setOnKeyPressed(e -> {
+		NodeEvents.addKeyPressHandler(tree, e -> {
 			String text = e.getText();
 			if (text != null && !text.isEmpty()) {
 				filter.requestFocus();

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Analyzer.java
Patch:
@@ -1083,8 +1083,8 @@ private static void binaryOp(Frame frame, Type type, BiFunction<Number, Number,
 	}
 
 	private static void binaryOpWide(boolean rightIsWide, Frame frame, Type type, BiFunction<Number, Number, Number> function) {
-		Value value2 = rightIsWide ? frame.popWide() : frame.pop();
-		Value value1 = frame.popWide();
+		Value value1 = rightIsWide ? frame.popWide() : frame.pop();
+		Value value2 = frame.popWide();
 		evaluateMathOp(frame, type, function, (Value.NumericValue) value2, (Value.NumericValue) value1);
 	}
 

File: recaf-core/src/main/java/me/coley/recaf/parse/JavaParserRecovery.java
Patch:
@@ -19,7 +19,6 @@
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.List;
 import java.util.function.Function;
 
@@ -82,9 +81,9 @@ private static String filterCode(String code, Collection<Problem> problems) {
 		ListMultimap<Integer, LexicalError> lexerErrorMap = MultimapBuilder.ListMultimapBuilder
 				.treeKeys()
 				.arrayListValues().build();
-		for (Problem problem : new HashSet<>(problems)) {
+		for (Problem problem : problems) {
 			String message = problem.getMessage();
-			if (!problem.getLocation().isPresent() && message.contains("at line ")) {
+			if (problem.getLocation().isEmpty() && message.contains("at line ")) {
 				Matcher matcher = PATTERN_LOCATION.matcher(message);
 				if (matcher.find()) {
 					int line = Integer.parseInt(matcher.group(GROUP_LINE));

File: recaf-ui/src/main/java/me/coley/recaf/config/binds/BindingCreator.java
Patch:
@@ -5,6 +5,7 @@
 
 import java.util.Arrays;
 import java.util.Map;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**
@@ -19,7 +20,7 @@ public final class BindingCreator {
 	private BindingCreator(Binding defaultBinding, OSBinding... osBindings) {
 		this.defaultBinding = defaultBinding;
 		this.osBindings = Arrays.stream(PlatformType.values())
-				.collect(Collectors.toMap(os -> os, os -> defaultBinding));
+				.collect(Collectors.toMap(Function.identity(), os -> defaultBinding));
 		this.osBindings.putAll(
 				Arrays.stream(osBindings)
 						.collect(Collectors.toMap(

File: recaf-ui/src/main/java/me/coley/recaf/presentation/GuiPresentation.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.presentation;
 
+import javafx.application.Platform;
 import me.coley.recaf.Controller;
 import me.coley.recaf.RecafConstants;
 import me.coley.recaf.RecafUI;
@@ -49,14 +50,14 @@ public void initialize(Controller controller) {
 		CompileDependencyUpdater.install(controller);
 		DecompileInterception.install(controller);
 		// Open UI
-		JFXUtils.runSafe(() -> {
+		Platform.runLater(() -> {
 			try {
 				RecafUI.initialize(controller);
 				RecafUI.getWindows().getMainWindow().show();
 			} catch (Throwable ex) {
 				logger.error("Recaf crashed due to an unhandled error." +
 						"Please open a bug report: " + RecafConstants.URL_BUG_REPORT, ex);
-				JFXUtils.shutdownSafe();
+				Platform.exit();
 				System.exit(-1);
 			}
 		});

File: recaf-ui/src/main/java/me/coley/recaf/presentation/GuiWorkspacePresentation.java
Patch:
@@ -40,7 +40,7 @@ public GuiWorkspacePresentation(Controller controller) {
 
 	@Override
 	public boolean closeWorkspace(Workspace workspace) {
-		boolean doClose = false;
+		boolean doClose;
 		if (Configs.display().promptCloseWorkspace) {
 			doClose = WorkspaceClosePrompt.prompt(workspace);
 		} else {

File: recaf-ui/src/main/java/me/coley/recaf/ui/dialog/SsvmInvokeCallDialog.java
Patch:
@@ -44,7 +44,6 @@ public SsvmInvokeCallDialog(CommonClassInfo owner, MethodInfo info, SsvmIntegrat
 		Button runButton = new Button();
 		runButton.textProperty().bind(Lang.getBinding("dialog.vm.execute"));
 		runButton.setGraphic(Icons.getIconView(Icons.PLAY));
-		runButton.setDisable(!validInputs());
 		runButton.setOnMousePressed(e -> {
 			// Only create values when confirm button pressed
 			for (InputWrapper input : inputs) {
@@ -69,7 +68,7 @@ public SsvmInvokeCallDialog(CommonClassInfo owner, MethodInfo info, SsvmIntegrat
 							if (throwable instanceof TimeoutException) {
 								logger.error("Invoke future thread timed out");
 							} else {
-								logger.error("Invoke future thread encountered unhandled error", throwable);
+								logger.error("Invoke future thread encountered unhandled error:\n{}", encodeThrowable(throwable));
 							}
 							return;
 						}

File: recaf-ui/src/main/java/me/coley/recaf/ui/dialog/SsvmOptimizeDialog.java
Patch:
@@ -53,7 +53,6 @@ public SsvmOptimizeDialog(CommonClassInfo owner, MethodInfo info, SsvmIntegratio
 		Button runButton = new Button();
 		runButton.textProperty().bind(Lang.getBinding("dialog.vm.optimize"));
 		runButton.setGraphic(Icons.getIconView(Icons.PLAY));
-		runButton.setDisable(!validInputs());
 		runButton.setOnMousePressed(e -> {
 			// Only create values when confirm button pressed
 			for (InputWrapper input : inputs) {
@@ -79,11 +78,11 @@ public SsvmOptimizeDialog(CommonClassInfo owner, MethodInfo info, SsvmIntegratio
 					if (ex instanceof InterruptedException) {
 						logger.error("Invoke future thread interrupted", ex);
 					} else if (ex instanceof ExecutionException) {
-						logger.error("Invoke future thread encountered unhandled error", ex.getCause());
+						logger.error("Invoke future thread encountered unhandled error\n{}", encodeThrowable(ex.getCause()));
 					} else if (ex instanceof TimeoutException) {
 						logger.error("Invoke future thread timed out", ex);
 					} else {
-						logger.error("Invoke future thread encountered unhandled error", ex);
+						logger.error("Invoke future thread encountered unhandled error\n{}", encodeThrowable(ex));
 					}
 					return;
 				}

File: recaf-ui/src/main/java/me/coley/recaf/ui/dialog/WizardDialog.java
Patch:
@@ -24,7 +24,7 @@ private WizardDialog(Wizard wizard) {
 		getDialogPane().setMinWidth(MIN_WIDTH);
 		wizard.setOnCancel(() -> {
 			// the dummy button is needed
-			getDialogPane().getButtonTypes().addAll(ButtonType.CANCEL);
+			getDialogPane().getButtonTypes().add(ButtonType.CANCEL);
 			close();
 		});
 		init();

File: recaf-ui/src/main/java/me/coley/recaf/ui/dnd/DragAndDrop.java
Patch:
@@ -7,9 +7,9 @@
 import me.coley.recaf.util.logging.Logging;
 import org.slf4j.Logger;
 
+import java.io.File;
 import java.io.IOException;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -67,7 +67,7 @@ private static void onDragDropped(Region region, DragEvent event, FileDropListen
 		if (db.hasFiles()) {
 			try {
 				List<Path> paths = db.getFiles().stream()
-						.map(file -> Paths.get(file.getAbsolutePath()))
+						.map(File::toPath)
 						.collect(Collectors.toList());
 				listener.onDragDrop(region, event, paths);
 			} catch (IOException ex) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/InfoPane.java
Patch:
@@ -13,12 +13,12 @@
 import me.coley.recaf.ui.control.SubLabeled;
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.util.ClasspathUtil;
+import me.coley.recaf.util.DesktopUtil;
 import me.coley.recaf.util.Directories;
 import me.coley.recaf.util.logging.Logging;
 import org.slf4j.Logger;
 
 import javax.tools.ToolProvider;
-import java.awt.*;
 import java.nio.file.Path;
 import java.util.LinkedHashMap;
 import java.util.Map;
@@ -85,7 +85,7 @@ public InfoPane() {
 			clip.setContent(content);
 		}), new ActionButton(Lang.getBinding("help.opendir"), () -> {
 			try {
-				Desktop.getDesktop().open(baseDir.toFile());
+				DesktopUtil.showDocument(baseDir.toUri());
 			} catch (Exception ex) {
 				logger.error("Failed to open Recaf directory", ex);
 			}

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/ScriptEditorPane.java
Patch:
@@ -113,7 +113,7 @@ public File openFile() {
 
 		try {
 			Path path = file.toPath();
-			bshArea.setText(new String(Files.readAllBytes(path)));
+			bshArea.setText(Files.readString(path));
 			currentFile = file;
 		} catch (IOException e) {
 			logger.error("Failed to open script: {}", e.getLocalizedMessage());
@@ -185,7 +185,7 @@ public SaveResult save() {
 		}
 
 		try {
-			Files.write(currentFile.toPath(), bshArea.getText().getBytes());
+			Files.writeString(currentFile.toPath(), bshArea.getText());
 			logger.info("Saved script to {}", currentFile.getPath());
 			return SaveResult.SUCCESS;
 		} catch (IOException e) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/WorkspacePane.java
Patch:
@@ -33,7 +33,8 @@ private WorkspacePane() {
 		setBottom(bottomWrapper);
 		// Any typing in the tree should be fed into the filter
 		tree.setOnKeyPressed(e -> {
-			if (e.getText() != null && !e.getText().isEmpty()) {
+			String text = e.getText();
+			if (text != null && !text.isEmpty()) {
 				filter.requestFocus();
 			} else if (e.getCode() == KeyCode.ESCAPE) {
 				filter.clear();

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/SearchHelper.java
Patch:
@@ -34,7 +34,7 @@ public SearchHelper(BiFunction<Integer, Integer, SearchResult> rangeToResult) {
 	 */
 	public void setText(String newText) {
 		// Skip if the same
-		if (text != null && text.equals(newText))
+		if (newText.equals(text))
 			return;
 		// Set new text, invalidate prior results
 		text = newText;

File: recaf-ui/src/main/java/me/coley/recaf/ui/window/MainMenu.java
Patch:
@@ -2,6 +2,7 @@
 
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleListProperty;
 import javafx.geometry.Pos;
 import javafx.scene.Node;
 import javafx.scene.control.Menu;
@@ -77,6 +78,8 @@ private MainMenu() {
 		itemClose.disableProperty().bind(noWorkspace);
 		menuSearch.disableProperty().bind(noWorkspace);
 		menuMappings.disableProperty().bind(noWorkspace);
+		SimpleListProperty<MenuItem> recentItemsProperty = new SimpleListProperty<>(menuRecent.getItems());
+		menuRecent.disableProperty().bind(recentItemsProperty.emptyProperty());
 
 		MenuItem itemQuit = action("menu.file.quit", Icons.CLOSE, this::quit);
 		menuFile.getItems().add(itemAddToWorkspace);
@@ -267,7 +270,6 @@ private void openInfo() {
 	public void onNewWorkspace(Workspace oldWorkspace, Workspace newWorkspace) {
 		boolean isEmpty = newWorkspace == null;
 		noWorkspace.set(isEmpty);
-		menuRecent.setDisable(menuRecent.getItems().isEmpty());
 		if (!isEmpty) {
 			Configs.recentWorkspaces().addWorkspace(newWorkspace);
 		}

File: recaf-utils/src/main/java/me/coley/recaf/util/AccessFlag.java
Patch:
@@ -521,7 +521,7 @@ public enum Type {
 		}
 
 		private int index(AccessFlag flag) {
-			if (recommendOrder.isEmpty()) return 0; // not intialized yet
+			if (recommendOrder.isEmpty()) return 0; // not initialized yet
 			int idx = recommendOrder.indexOf(flag);
 			return idx == -1 ? Integer.MAX_VALUE : idx;
 		}

File: recaf-core/src/main/java/me/coley/recaf/ssvm/processing/FlowRevisitingProcessors.java
Patch:
@@ -479,6 +479,9 @@ public boolean restoreAndVisitNext(ExecutionContext ctx) {
 			Stack stack = ctx.getStack();
 			Value[] table = localsSnapshot.getTable();
 			for (int i = 0; i < node.maxLocals; i++) {
+				// Uninitialized values are null, this is intentional
+				if (table[i] == null)
+					continue;
 				locals.set(i, table[i]);
 			}
 			// Clear context's stack

File: recaf-core/src/main/java/me/coley/recaf/ssvm/processing/PeepholeProcessors.java
Patch:
@@ -121,6 +121,8 @@ public static void installArrays(VirtualMachine vm) {
 			ctx.getStack().push(new TrackedArrayValue(value));
 			return Result.CONTINUE;
 		});
+		// BASTORE/IASTORE/etc
+		//  - Use bitset of array size to track if the values at those indices are constant
 	}
 
 	/**
@@ -392,7 +394,7 @@ public static void installReturnValueFolding(VirtualMachine vm, Predicate<Execut
 							contributingInstructioncount += contributingInstructions.size();
 						}
 						instructions.set(insn, InstructionUtil.createPush(returnValue));
-						logger.trace("Folding {} instructions in {}.{}{}",
+						logger.debug("Folding {} instructions in {}.{}{}",
 								contributingInstructioncount,
 								ctx.getOwner().getInternalName(),
 								ctx.getMethod().getName(),

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/BytecodeToAstTransformer.java
Patch:
@@ -305,7 +305,9 @@ private void visitMethod() {
 				}
 			}
 			// Add ending label
-			labelNames.put(new LabelNode(), labelPrefix + StringUtil.generateName(ALPHABET, labelNames.size()));
+			LabelNode end = new LabelNode();
+			labelNames.put(end, labelPrefix + StringUtil.generateName(ALPHABET, labelNames.size()));
+			code.addLabel(new Label(labelNames.get(end)));
 		}
 		// Done
 		MethodDefinition definition = new MethodDefinition(modifiers, method.name, params, retType);

File: recaf-core/src/main/java/me/coley/recaf/ssvm/processing/FlowRevisitingProcessors.java
Patch:
@@ -582,6 +582,9 @@ public Snapshot(ExecutionContext ctx) {
 			// Copy local variable table
 			Value[] table = locals.getTable();
 			for (int i = 0; i < node.maxLocals; i++) {
+				// Uninitialized values are null, this is intentional
+				if (table[i] == null)
+					continue;
 				localsSnapshot.set(i, table[i]);
 			}
 			// Copy stack to snapshot via pushes

File: recaf-utils/src/main/java/me/coley/recaf/util/InstructionUtil.java
Patch:
@@ -181,7 +181,7 @@ else if (value instanceof String)
 	 */
 	public static AbstractInsnNode createNumberPush(Number value) {
 		if (value instanceof Long)
-			return createIntPush(value.intValue());
+			return createLongPush(value.longValue());
 		else if (value instanceof Float)
 			return createFloatPush(value.floatValue());
 		else if (value instanceof Double)

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/HexView.java
Patch:
@@ -392,7 +392,7 @@ public void centerOffset(int offset) {
 	 */
 	public void onUpdate(byte[] data) {
 		hex.setBacking(data);
-		cachedAscii = new String(data, StandardCharsets.UTF_8);
+		cachedAscii = hex.getPreviewAtOffset(0, data.length);
 		List<Integer> newOffsets = hex.computeOffsetsInRange();
 		rowOffsets.clear();
 		rowOffsets.addAll(newOffsets);

File: recaf-core/src/main/java/me/coley/recaf/ssvm/SsvmIntegration.java
Patch:
@@ -65,7 +65,8 @@ protected BootClassLoader createBootClassLoader() {
 			});
 		} catch (Exception ex) {
 			vm = null;
-			logger.error("Failed to initialize SSVM", ex);
+			initializeError = ex;
+			onPostInit();
 		}
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Icons.java
Patch:
@@ -77,6 +77,7 @@ public class Icons {
 	// Misc
 	public static final String COMPUTER = "icons/computer.png";
 	public static final String VM = "icons/vm.png";
+	public static final String LOGO = "icons/logo.png";
 	public static final String ANDROID = "icons/android.png";
 	public static final String OPEN = "icons/open.png";
 	public static final String WARNING = "icons/warning.png";

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/EnumComboBox.java
Patch:
@@ -13,7 +13,7 @@
  * @param <E>
  * 		Enumeration type.
  *
- * @author Matt
+ * @author Matt Coley
  */
 public class EnumComboBox<E extends Enum<?>> extends ComboBox<E> {
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/ConfigPane.java
Patch:
@@ -146,8 +146,6 @@ else if (o2.endsWith(preferredGroupSuffix))
 
 	private static Node getConfigComponent(ConfigContainer container, Field field, String idKey) {
 		Class<?> type = field.getType();
-		// WorkspaceAction
-		// Binding
 		if (boolean.class.equals(type) || Boolean.class.equals(type)) {
 			return new ConfigBoolean(container, field, Lang.getBinding(idKey));
 		} else if (ConfigRanged.hasBounds(field)) {

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/BytecodeToAstTransformer.java
Patch:
@@ -130,7 +130,7 @@ private void visitMethod() {
 		// If there are no labels, we must add some.
 		if (labelNames.isEmpty()) {
 			fallbackInitialLabel = new LabelNode();
-			labelNames.put(fallbackInitialLabel,  StringUtil.generateName(ALPHABET, 0));
+			labelNames.put(fallbackInitialLabel, labelPrefix + StringUtil.generateName(ALPHABET, 0));
 		}
 		// Setup modifiers
 		Modifiers modifiers = new Modifiers();
@@ -304,6 +304,8 @@ private void visitMethod() {
 						break;
 				}
 			}
+			// Add ending label
+			labelNames.put(new LabelNode(), labelPrefix + StringUtil.generateName(ALPHABET, labelNames.size()));
 		}
 		// Done
 		MethodDefinition definition = new MethodDefinition(modifiers, method.name, params, retType);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Frame.java
Patch:
@@ -83,7 +83,7 @@ public boolean merge(Frame otherFrame, Analyzer analyzer) throws FrameMergeExcep
 			int max = getStack().size();
 			int otherMax = otherFrame.getStack().size();
 			if (max != otherMax) {
-				throw new FrameMergeException("Unmatched stack size, " + max + " != " + otherMax);
+				throw new FrameMergeException("Unmatched stack size during AST frame merge, " + max + " != " + otherMax);
 			}
 			for (int i = 0; i < max; i++) {
 				Value value = getStack().get(i);

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/OutlinePane.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class OutlinePane extends BorderPane implements ClassRepresentation {
 	private static final SimpleBooleanProperty showTypes = new SimpleBooleanProperty();
-	private static final SimpleBooleanProperty showSynthetics = new SimpleBooleanProperty();
+	private static final SimpleBooleanProperty showSynthetics = new SimpleBooleanProperty(true);
 	private final OutlineTree tree = new OutlineTree();
 	private final ClassRepresentation parent;
 	private CommonClassInfo classInfo;

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/source/DirectoryContentSource.java
Patch:
@@ -6,6 +6,7 @@
 import me.coley.recaf.io.ByteSources;
 import me.coley.recaf.util.IOUtil;
 
+import java.io.File;
 import java.io.IOException;
 import java.nio.file.*;
 import java.nio.file.attribute.BasicFileAttributes;
@@ -62,6 +63,6 @@ protected boolean isClass(Path entry, byte[] content) throws IOException {
 	protected String getPathName(Path entry) {
 		String absolutePath = getPath().toAbsolutePath().toString();
 		String absoluteEntry = entry.toAbsolutePath().toString();
-		return absoluteEntry.substring(absolutePath.length() + 1);
+		return absoluteEntry.substring(absolutePath.length() + 1).replace(File.separatorChar, '/');
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/ssvm/util/VmValueUtil.java
Patch:
@@ -1,8 +1,6 @@
 package me.coley.recaf.ssvm.util;
 
 import dev.xdark.ssvm.value.*;
-import me.coley.recaf.ssvm.value.ConstValue;
-import me.coley.recaf.ssvm.value.TrackedArrayValue;
 import me.coley.recaf.util.InstructionUtil;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.AbstractInsnNode;

File: recaf-core/src/main/java/me/coley/recaf/ssvm/processing/PeepholeProcessors.java
Patch:
@@ -331,8 +331,8 @@ private static void installStackManipulationInstructionTracking(VirtualMachine v
 				Value v2 = stack.pop();
 				Value v3 = stack.pop();
 				Value c2 = cloneAndContribute(v2, insn);
-				stack.push(c1);
 				stack.push(c2);
+				stack.push(c1);
 				stack.push(v3);
 				stack.push(v2);
 				stack.push(v1);

File: recaf-core/src/main/java/me/coley/recaf/ssvm/debugger/Debugger.java
Patch:
@@ -1,7 +1,7 @@
 package me.coley.recaf.ssvm.debugger;
 
 import dev.xdark.ssvm.VirtualMachine;
-import me.coley.recaf.ssvm.asm.RecafOpcodes;
+import me.coley.cafedude.classfile.instruction.ReservedOpcodes;
 
 /**
  * Debugger implementation for SSVM.
@@ -23,7 +23,7 @@ private Debugger() {
 	 * 		VM instance.
 	 */
 	public static void enable(VirtualMachine vm) {
-		vm.getInterface().setProcessor(RecafOpcodes.BREAKPOINT, new BreakpointInstructionProcessor());
+		vm.getInterface().setProcessor(ReservedOpcodes.breakpoint, new BreakpointInstructionProcessor());
 	}
 
 	/**
@@ -34,6 +34,6 @@ public static void enable(VirtualMachine vm) {
 	 * 		VM instance.
 	 */
 	public static void disable(VirtualMachine vm) {
-		vm.getInterface().setProcessor(RecafOpcodes.BREAKPOINT, null);
+		vm.getInterface().setProcessor(ReservedOpcodes.breakpoint, null);
 	}
 }

File: recaf-core/src/main/java/me/coley/recaf/ssvm/debugger/DebuggerBreakpointNode.java
Patch:
@@ -1,8 +1,7 @@
 package me.coley.recaf.ssvm.debugger;
 
 import dev.xdark.ssvm.asm.DelegatingInsnNode;
-import dev.xdark.ssvm.asm.VMOpcodes;
-import me.coley.recaf.ssvm.asm.RecafOpcodes;
+import me.coley.cafedude.classfile.instruction.ReservedOpcodes;
 import org.objectweb.asm.tree.AbstractInsnNode;
 
 /**
@@ -23,7 +22,7 @@ public class DebuggerBreakpointNode<I extends AbstractInsnNode> extends Delegati
 	 * 		Breakpoint observer.
 	 */
 	public DebuggerBreakpointNode(I delegate, BreakpointObserver observer) {
-		super(delegate, RecafOpcodes.BREAKPOINT);
+		super(delegate, ReservedOpcodes.breakpoint);
 		this.observer = observer;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/ManifestArea.java
Patch:
@@ -29,7 +29,7 @@
  * @author Nowilltolife
  */
 public class ManifestArea extends SyntaxArea {
-	private static final Logger logger = Logging.get(SyntaxArea.class);
+	private static final Logger logger = Logging.get(ManifestArea.class);
 	private String mainClass = "";
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/DockTab.java
Patch:
@@ -4,6 +4,7 @@
 import javafx.event.Event;
 import javafx.scene.Node;
 import javafx.scene.control.Tab;
+import me.coley.recaf.util.threading.FxThreadUtil;
 
 /**
  * {@link Tab} extension to track additional information required for {@link DockingManager} operations.
@@ -57,7 +58,7 @@ public DockingRegion getParent() {
 	public void close() {
 		Event.fireEvent(this, new Event(Tab.CLOSED_EVENT));
 		if (getTabPane() != null)
-			getTabPane().getTabs().remove(this);
+			FxThreadUtil.run(() -> getTabPane().getTabs().remove(this));
 	}
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/ui/window/MainMenu.java
Patch:
@@ -29,6 +29,7 @@
 import me.coley.recaf.ui.util.Icons;
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.util.logging.Logging;
+import me.coley.recaf.util.threading.ThreadUtil;
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.resource.Resource;
 import org.objectweb.asm.ClassReader;
@@ -166,12 +167,12 @@ public void refreshRecent() {
 
 	private void addToWorkspace() {
 		List<Path> files = WorkspaceIOPrompts.promptWorkspaceFiles();
-		WorkspaceIOPrompts.handleFiles(files, WorkspaceActionType.ADD_TO_WORKSPACE);
+		ThreadUtil.run(() -> WorkspaceIOPrompts.handleFiles(files, WorkspaceActionType.ADD_TO_WORKSPACE));
 	}
 
 	private void openWorkspace() {
 		List<Path> files = WorkspaceIOPrompts.promptWorkspaceFiles();
-		WorkspaceIOPrompts.handleFiles(files, WorkspaceActionType.CREATE_NEW_WORKSPACE);
+		ThreadUtil.run(() -> WorkspaceIOPrompts.handleFiles(files, WorkspaceActionType.CREATE_NEW_WORKSPACE));
 	}
 
 	private void openMappings(MappingsTool mappingsTool) {

File: recaf-ui/src/main/java/me/coley/recaf/presentation/GuiWorkspacePresentation.java
Patch:
@@ -65,7 +65,7 @@ public boolean closeWorkspace(Workspace workspace) {
 					((Cleanable) content).cleanup();
 				// Remove the tab
 				if (content instanceof Representation)
-					tab.getTabPane().getTabs().remove(tab);
+					tab.close();
 			}
 
 			// Clear the navbar

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DockingWrapperPane.java
Patch:
@@ -36,7 +36,7 @@ private DockingWrapperPane(ObservableValue<String> title, Node content, int widt
 	/**
 	 * @return Initially created tab.
 	 */
-	public Tab getTab() {
+	public DockTab getTab() {
 		return tab;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/CollapsibleTabPane.java
Patch:
@@ -18,7 +18,7 @@
  */
 public class CollapsibleTabPane extends TabPane {
 	private static final double MIN_INIT_SIZE = 300;
-	private static final double TAB_SIZE = 34;
+	private static final double TAB_SIZE = 28;
 	private Parent lastClicked;
 	private double lastOpenSize = MIN_INIT_SIZE;
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DecompilePane.java
Patch:
@@ -55,8 +55,10 @@ public DecompilePane() {
 		ProblemTracking tracking = new ProblemTracking();
 		tracking.setIndicatorInitializer(new ProblemIndicatorInitializer(tracking));
 		this.javaArea = new JavaArea(tracking);
+		// Wrap content, create error display
 		Node node = new VirtualizedScrollPane<>(javaArea);
 		Node errorDisplay = new ErrorDisplay(javaArea, tracking);
+		// Layout
 		StackPane stack = new StackPane();
 		StackPane.setAlignment(errorDisplay, Configs.editor().errorIndicatorPos);
 		StackPane.setMargin(errorDisplay, new Insets(16, 25, 25, 53));

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Icons.java
Patch:
@@ -99,6 +99,7 @@ public class Icons {
 	public static final String SAVE = "icons/save.png";
 	public static final String EXPORT = "icons/export.png";
 	public static final String CLOSE = "icons/close.png";
+	public static final String SWAP = "icons/swap.png";
 	public static final String NUMBERS = "icons/numbers.png";
 	public static final String KEYBOARD = "icons/keyboard.png";
 	public static final String DOCUMENTATION = "icons/documentation.png";

File: recaf-ui/src/main/java/me/coley/recaf/ui/dnd/DragAndDrop.java
Patch:
@@ -47,8 +47,8 @@ public static void installFileSupport(Region region, FileDropListener listener)
 	private static void onDragOver(Region region, DragEvent event) {
 		if (event.getGestureSource() != region && event.getDragboard().hasFiles()) {
 			event.acceptTransferModes(TransferMode.COPY_OR_MOVE);
+			event.consume();
 		}
-		event.consume();
 	}
 
 	/**
@@ -77,9 +77,9 @@ private static void onDragDropped(Region region, DragEvent event, FileDropListen
 				logger.error("Failed drag-and-drop due to unhanded error", ex);
 				success = false;
 			}
+			event.consume();
 		}
 		event.setDropCompleted(success);
-		event.consume();
 	}
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/SyntaxArea.java
Patch:
@@ -188,7 +188,9 @@ public int getStop() {
 
 			@Override
 			public void select() {
+				int paragraph = offsetToPosition(getStart(), Bias.Backward).getMajor();
 				selectRange(getStart(), getStop());
+				showParagraphAtCenter(paragraph);
 			}
 		};
 	}

File: recaf-core/src/main/java/me/coley/recaf/parse/WorkspaceTypeSolver.java
Patch:
@@ -49,6 +49,7 @@ public WorkspaceTypeSolver(Workspace workspace) {
 		classPool.appendSystemPath();
 		// Listener will ensure cache does not de-sync with changes to library states, class updates, etc
 		workspace.addListener(this);
+		workspace.getResources().getPrimary().addClassListener(this);
 	}
 
 	@Override

File: recaf-core/src/main/java/me/coley/recaf/decompile/jadx/JadxDecompiler.java
Patch:
@@ -60,7 +60,7 @@ protected String decompileImpl(Map<String, DecompileOption<?>> options, Workspac
 		root.runPreDecompileStage();
 
 		// Find and return decompilation if found
-		ClassNode clazz = root.resolveClass(name);
+		ClassNode clazz = root.resolveClass(name.replace('/', '.'));
 		if (clazz != null) {
 			String decompiled = clazz.decompile().getCodeStr();
 			if (Strings.isNullOrEmpty(decompiled))

File: recaf-jdk/src/main/java/dev/xdark/recaf/jdk/launch/ProcessLaunchOptions.java
Patch:
@@ -46,15 +46,15 @@ public void setExecutable(Path jdkExecutable) {
 		this.jdkExecutable = jdkExecutable;
 	}
 
-	public Process start(ProcessBuilder builder) throws IOException {
+	public Process launch(ProcessBuilder builder) throws IOException {
 		List<String> command = new LinkedList<>();
 		command.add(jdkExecutable.toString());
 		command.addAll(processArgs);
 		command.addAll(programArgs);
 		return builder.command(command).start();
 	}
 
-	public Process start() throws IOException {
-		return start(new ProcessBuilder());
+	public Process launch() throws IOException {
+		return launch(new ProcessBuilder());
 	}
 }

File: recaf-jdk/src/main/java/dev/xdark/recaf/jdk/properties/JdkProperties.java
Patch:
@@ -1,7 +1,5 @@
 package dev.xdark.recaf.jdk.properties;
 
-import dev.xdark.recaf.jdk.resources.JdkPropertiesDump;
-
 import java.io.*;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;

File: recaf-jdk/src/main/java/dev/xdark/recaf/jdk/properties/JdkPropertiesDump.java
Patch:
@@ -1,4 +1,4 @@
-package dev.xdark.recaf.jdk.resources;
+package dev.xdark.recaf.jdk.properties;
 
 import dev.xdark.recaf.jdk.properties.JdkProperties;
 

File: recaf-jdk/src/main/java/dev/xdark/recaf/jdk/resources/JdkResources.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String[] args) {
 								try {
 									int read;
 									while ((read = resource.read(buf, 0, toTransfer)) != -1) {
-										// If we are still reading but finished block,
+										// If we consumed whole block but still have data left,
 										// send signal to the client.
 										if (toTransfer == 0) {
 											toTransfer = ToolConstant.TRANSFER_BUFFER;

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DockingWrapperPane.java
Patch:
@@ -23,7 +23,6 @@ private DockingWrapperPane(ObservableValue<String> title, Node content, int widt
 		//  - Add the intended content to this new tab-pane.
 		DockingRegion region = docking.createRegion();
 		tab = docking.createTabIn(region, () -> new DockTab(title, content));
-		region.getTabs().add(tab);
 		region.setCloseIfEmpty(true);
 		// Remove any actions from history when creating this tab-pane.
 		// We don't want new tabs to spawn in this new tab-pane.

File: recaf-core/src/main/java/me/coley/recaf/parse/JavaParserHelper.java
Patch:
@@ -4,6 +4,7 @@
 import com.github.javaparser.ast.CompilationUnit;
 import com.github.javaparser.ast.Node;
 import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
+import com.github.javaparser.ast.body.ConstructorDeclaration;
 import com.github.javaparser.ast.body.FieldDeclaration;
 import com.github.javaparser.ast.body.MethodDeclaration;
 import com.github.javaparser.symbolsolver.JavaSymbolSolver;
@@ -180,6 +181,7 @@ public Optional<ParseHitResult> declarationAt(CompilationUnit unit, int line, in
 				// Ensure node is a declaration of some kind (class/field/method)
 				if (node instanceof FieldDeclaration ||
 						node instanceof MethodDeclaration ||
+						node instanceof ConstructorDeclaration ||
 						node instanceof ClassOrInterfaceDeclaration) {
 					break;
 				}

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/RecafDockingManager.java
Patch:
@@ -66,7 +66,7 @@ private RecafDockingManager() {
 				classTabs.remove(path);
 			} else if (content instanceof FileView) {
 				String path = ((FileTab) tab).getFileRepresentation().getCurrentFileInfo().getName();
-				classTabs.remove(path);
+				fileTabs.remove(path);
 			} else {
 				miscTabs.remove(tab);
 			}

File: recaf-ui/src/main/java/me/coley/recaf/ui/MappingUX.java
Patch:
@@ -68,8 +68,8 @@ public static void handleClassRemapping(List<ClassTab> openedClassTabs, Mappings
 				RecafDockingManager docking = RecafDockingManager.getInstance();
 				String title = StringUtil.shortenPath(classMapping.getNewName());
 				DockTab newTab = docking.createTab(() -> new ClassTab(title, oldView));
-				if (tab.isSelected())
-					newTab.select();
+				newTab.select();
+				oldView.refreshView();
 				oldView.onUpdate(newClassInfo);
 				if (scrollSnapshot != null)
 					FxThreadUtil.delayedRun(100, scrollSnapshot::restore);

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/DockTab.java
Patch:
@@ -56,6 +56,8 @@ public DockingRegion getParent() {
 	 */
 	public void close() {
 		Event.fireEvent(this, new Event(Tab.CLOSED_EVENT));
+		if (getTabPane() != null)
+			getTabPane().getTabs().remove(this);
 	}
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/DockingManager.java
Patch:
@@ -335,6 +335,6 @@ void onRegionClose(DockingRegion region) {
 		if (DEBUG) logger.trace("Region closed: {}", region.getRegionId());
 		// Needed in case a window containing the region gets closed
 		for (DockTab tab : region.getDockTabs())
-			onTabClose(tab);
+			tab.close();
 	}
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/docking/RecafDockingManager.java
Patch:
@@ -198,8 +198,7 @@ protected void init(DetachableTabPane tabPane) {
 				if (Configs.keybinds().closeTab.match(e)) {
 					if (selectedIndex >= 0) {
 						DockTab tab = (DockTab) tabPane.getTabs().get(selectedIndex);
-						getManager().onTabClose(tab);
-						tabPane.getTabs().remove(selectedIndex);
+						tab.close();
 					}
 				}
 			});

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DecompilePane.java
Patch:
@@ -82,7 +82,8 @@ private Node createButtonBar() {
 		}
 		decompilerCombo.getSelectionModel().selectedItemProperty().addListener((observable, old, current) -> {
 			decompiler = manager.get(current);
-			onUpdate(lastClass);
+			if (lastClass != null)
+				onUpdate(lastClass);
 		});
 		Label decompilersLabel = new Label("Decompiler: ");
 		box.getChildren().add(decompilersLabel);

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/BasicMethodPrintStrategy.java
Patch:
@@ -201,7 +201,8 @@ protected void buildDeclarationArgs(StringBuilder sb, MethodModel model) {
 			String name = "p" + varIndex;
 			if (locals != null) {
 				LocalVariableTableAttribute.VarEntry local = getLocal(locals, varIndex);
-				name = model.getPool().getUtf(local.getNameIndex());
+				if (local != null)
+					name = model.getPool().getUtf(local.getNameIndex());
 			}
 			// Append to arg list
 			sb.append(argTypeName).append(' ').append(name);

File: recaf-core/src/main/java/me/coley/recaf/decompile/fallback/print/PrintUtils.java
Patch:
@@ -14,6 +14,7 @@
 import me.coley.cafedude.classfile.constant.CpFloat;
 import me.coley.cafedude.classfile.constant.CpInt;
 import me.coley.cafedude.classfile.constant.CpLong;
+import me.coley.recaf.util.EscapeUtil;
 import me.coley.recaf.util.StringUtil;
 import org.objectweb.asm.Type;
 
@@ -85,7 +86,7 @@ public static String elementToString(ConstPool pool, ElementValue elementValue)
 			case 's': // String
 			{
 				Utf8ElementValue utf8ElementValue = (Utf8ElementValue) elementValue;
-				return "\"" + pool.getUtf(utf8ElementValue.getUtfIndex()) + "\"";
+				return "\"" + EscapeUtil.escape(pool.getUtf(utf8ElementValue.getUtfIndex())) + "\"";
 			}
 			case 'Z': // boolean
 			case 'B': // byte

File: recaf-core/src/main/java/me/coley/recaf/parse/JavaParserResolving.java
Patch:
@@ -129,7 +129,7 @@ public static ItemInfo of(WorkspaceTypeSolver typeSolver, Node node) {
 	 * </ul>
 	 */
 	public static ItemInfo ofEdgeCases(WorkspaceTypeSolver typeSolver, Node node) {
-		if (!node.hasParentNode())
+		if (node == null || !node.hasParentNode())
 			return null;
 		Node parent = node.getParentNode().get();
 		if (parent instanceof ImportDeclaration) {

File: recaf-core/src/main/java/me/coley/recaf/code/CommonClassInfo.java
Patch:
@@ -48,7 +48,7 @@ public interface CommonClassInfo extends ItemInfo {
 	 */
 	default FieldInfo findField(String name, String descriptor) {
 		for (FieldInfo field : getFields()) {
-			if(descriptor.length() == 0) {
+			if(descriptor != null && descriptor.length() == 0) {
 				if(field.getName().equals(name))
 					return field;
 			}

File: recaf-core/src/main/java/me/coley/recaf/mapping/MappingUtils.java
Patch:
@@ -36,7 +36,7 @@ public class MappingUtils {
 	 */
 	public static Set<String> applyMappingsWithoutAggregation(int read, int write,
 															  Resource resource, Mappings mappings) {
-		ExecutorService service = ThreadPoolFactory.newCachedThreadPool("Recaf mapping");
+		ExecutorService service = ThreadPoolFactory.newFixedThreadPool("Recaf mapping");
 		Set<String> modifiedClasses = new HashSet<>();
 		for (ClassInfo classInfo : new ArrayList<>(resource.getClasses().values())) {
 			service.submit(() -> {

File: recaf-utils/src/main/java/me/coley/recaf/util/threading/ThreadPoolFactory.java
Patch:
@@ -47,7 +47,7 @@ public static ExecutorService newFixedThreadPool(String name, boolean daemon) {
 	 * @return {@link Executors#newFixedThreadPool(int)}.
 	 */
 	public static ExecutorService newFixedThreadPool(String name, int size, boolean daemon) {
-		return Executors.newFixedThreadPool(size, new FactoryImpl(name, daemon));
+		return Executors.newFixedThreadPool(Math.min(MAX, size), new FactoryImpl(name, daemon));
 	}
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/scripting/ScriptEngine.java
Patch:
@@ -39,7 +39,7 @@ public static boolean executeBsh(Path path) {
             return executeBsh(new String(Files.readAllBytes(path)));
         }
         catch (IOException e) {
-            logger.error("Failed to execute script at {}", path);
+            logger.error("Failed to read script: {}", path);
             return false;
         }
     }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/Unmatched.java
Patch:
@@ -17,7 +17,8 @@ public Unmatched(String raw) {
 	}
 
 	/**
-	 * @param text Text to append.
+	 * @param text
+	 * 		Text to append.
 	 */
 	public void append(String text) {
 		raw += text;

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/Unmatched.java
Patch:
@@ -17,7 +17,8 @@ public Unmatched(String raw) {
 	}
 
 	/**
-	 * @param text Text to append.
+	 * @param text
+	 * 		Text to append.
 	 */
 	public void append(String text) {
 		raw += text;

File: recaf-ui/src/main/java/me/coley/recaf/config/container/EditorConfig.java
Patch:
@@ -35,7 +35,6 @@ public class EditorConfig implements ConfigContainer {
 	 */
 	@Group("general")
 	@ConfigID("errorindicatorpos")
-	// TODO: Only let this show in the TOP positions in config window
 	public Pos errorIndicatorPos = Pos.TOP_RIGHT;
 
 	/**

File: recaf-core/src/main/java/me/coley/recaf/mapping/MappingsAdapter.java
Patch:
@@ -295,7 +295,7 @@ public void addField(String owner, String originalName, String desc, String rena
 	 * 		New name of the field.
 	 */
 	public void addField(String owner, String originalName, String renamedName) {
-		if (!doesSupportFieldTypeDifferentiation()) {
+		if (doesSupportFieldTypeDifferentiation()) {
 			mappings.put(getFieldKey(owner, originalName, null), renamedName);
 		} else {
 			throw new IllegalStateException("The current mapping implementation requires " +

File: recaf-core/src/main/java/me/coley/recaf/mapping/impl/SimpleMappings.java
Patch:
@@ -58,7 +58,7 @@ public void parse(String mappingText) {
 				String targetName = unescape(args[2]);
 				int dot = oldBaseName.lastIndexOf('.');
 				String oldClassName = oldBaseName.substring(0, dot);
-				String oldFieldName = oldClassName.substring(dot + 1);
+				String oldFieldName = oldBaseName.substring(dot + 1);
 				addField(oldClassName, oldFieldName, desc, targetName);
 			} else {
 				String newName = EscapeUtil.unescape(args[1]);

File: recaf-core/src/main/java/me/coley/recaf/mapping/impl/TinyV1Mappings.java
Patch:
@@ -22,7 +22,7 @@ public class TinyV1Mappings extends MappingsAdapter {
 	 * New tiny v1 instance.
 	 */
 	public TinyV1Mappings() {
-		super("Tiny V1", false, true);
+		super("Tiny V1", true, true);
 	}
 
 	@Override

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/ErrorDisplay.java
Patch:
@@ -67,7 +67,7 @@ private synchronized void refresh() {
 			ProblemLevel highestLevel = problems.stream()
 					.map(ProblemInfo::getLevel)
 					.reduce(ProblemLevel.INFO, (p1, p2) -> p1.ordinal() < p2.ordinal() ? p1 : p2);
-			Label baseLabel = new Label(problems.size() + " Problems");
+			Label baseLabel = new Label(problems.size() + (problems.size() == 1 ? " Problem" : " Problems"));
 			switch (highestLevel) {
 				case INFO:
 					baseLabel.setTextFill(Color.BLUE.brighter());

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/ErrorDisplay.java
Patch:
@@ -67,7 +67,7 @@ private synchronized void refresh() {
 			ProblemLevel highestLevel = problems.stream()
 					.map(ProblemInfo::getLevel)
 					.reduce(ProblemLevel.INFO, (p1, p2) -> p1.ordinal() < p2.ordinal() ? p1 : p2);
-			Label baseLabel = new Label(problems.size() + " Problems");
+			Label baseLabel = new Label(problems.size() + (problems.size() == 1 ? " Problem" : " Problems"));
 			switch (highestLevel) {
 				case INFO:
 					baseLabel.setTextFill(Color.BLUE.brighter());

File: recaf-core/src/main/java/me/coley/recaf/mapping/impl/TinyV1Mappings.java
Patch:
@@ -22,7 +22,7 @@ public class TinyV1Mappings extends MappingsAdapter {
 	 * New tiny v1 instance.
 	 */
 	public TinyV1Mappings() {
-		super("Tiny V1", false, true);
+		super("Tiny V1", true, true);
 	}
 
 	@Override

File: recaf-core/src/main/java/me/coley/recaf/mapping/MappingsAdapter.java
Patch:
@@ -295,7 +295,7 @@ public void addField(String owner, String originalName, String desc, String rena
 	 * 		New name of the field.
 	 */
 	public void addField(String owner, String originalName, String renamedName) {
-		if (!doesSupportFieldTypeDifferentiation()) {
+		if (doesSupportFieldTypeDifferentiation()) {
 			mappings.put(getFieldKey(owner, originalName, null), renamedName);
 		} else {
 			throw new IllegalStateException("The current mapping implementation requires " +

File: recaf-core/src/main/java/me/coley/recaf/mapping/impl/SimpleMappings.java
Patch:
@@ -58,7 +58,7 @@ public void parse(String mappingText) {
 				String targetName = unescape(args[2]);
 				int dot = oldBaseName.lastIndexOf('.');
 				String oldClassName = oldBaseName.substring(0, dot);
-				String oldFieldName = oldClassName.substring(dot + 1);
+				String oldFieldName = oldBaseName.substring(dot + 1);
 				addField(oldClassName, oldFieldName, desc, targetName);
 			} else {
 				String newName = EscapeUtil.unescape(args[1]);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/BytecodeToAstTransformer.java
Patch:
@@ -158,7 +158,7 @@ private void visitMethod() {
 		if (method.instructions != null) {
 			// First pass to populate what type (prims vs obj) variables are at different offsets in the method.
 			// This information is used to sanity check our variable name selection choice.
-			for (int pos = 0; pos < method.instructions.size() - 1; pos++) {
+			for (int pos = 0; pos < method.instructions.size(); pos++) {
 				AbstractInsnNode insn = method.instructions.get(pos);
 				if (insn.getType() == AbstractInsnNode.VAR_INSN) {
 					VarInsnNode varInsn = (VarInsnNode) insn;
@@ -168,7 +168,7 @@ private void visitMethod() {
 				}
 			}
 			// Second pass to do everything else.
-			for (int pos = 0; pos < method.instructions.size() - 1; pos++) {
+			for (int pos = 0; pos < method.instructions.size(); pos++) {
 				AbstractInsnNode insn = method.instructions.get(pos);
 				String op = OpcodeUtil.opcodeToName(insn.getOpcode());
 				switch (insn.getType()) {

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/bytecode/AssemblerArea.java
Patch:
@@ -404,6 +404,7 @@ public void onCompileFailure(Unit unit, MethodCompileException ex) {
 
 	@Override
 	public void onUpdate(CommonClassInfo newValue) {
+		pipeline.setType(newValue.getName());
 		if (newValue instanceof ClassInfo) {
 			classInfo = (ClassInfo) newValue;
 		}

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/util/ReflectiveInheritanceChecker.java
Patch:
@@ -34,7 +34,7 @@ public String getCommonType(String class1, String class2) {
 			Class<?> a = Class.forName(class1.replace('/', '.'), false, s);
 			Class<?> b = Class.forName(class2.replace('/', '.'), false, s);
 			return Type.getType(getCommon(a, b)).getInternalName();
-		} catch (Exception ex) {
+		} catch (Throwable t) {
 			return "java/lang/Object";
 		}
 	}

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/source/ArchiveFileContentSource.java
Patch:
@@ -201,6 +201,7 @@ private void readFromAlt(ZipFile zf, Predicate<ZipEntry> filter,
 		while (entries.hasMoreElements()) {
 			ZipEntry entry = entries.nextElement();
 			if (filter.test(entry)) {
+				baos.reset();
 				try (InputStream zis = zf.getInputStream(entry)) {
 					IOUtil.copy(zis, baos, buf);
 				}

File: recaf-ui/src/main/java/me/coley/recaf/config/container/DisplayConfig.java
Patch:
@@ -25,7 +25,7 @@ public class DisplayConfig implements ConfigContainer {
 	 */
 	@Group("base")
 	@ConfigID("language")
-	public String lang = Lang.getDefaultLanguage();
+	public String lang = Lang.getSystemLanguage();
 
 	/**
 	 * Maximum depth of a directory structure to display before it gets truncated.

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/IndicatorFactory.java
Patch:
@@ -55,12 +55,12 @@ public void clear() {
 	}
 
 	@Override
-	public Node apply(int lineNo) {
-		if (editor.isParagraphFolded(lineNo)) {
+	public Node apply(int paragraph) {
+		if (editor.isParagraphFolded(paragraph)) {
 			return null;
 		}
 		// Lines are addressed as how they visually appear (based on 1 being the beginning)
-		lineNo++;
+		int lineNo = paragraph + 1;
 		// Create the indicator shape
 		Polygon poly = new Polygon(SHAPE);
 		poly.getStyleClass().add("cursor-pointer");

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/SyntaxArea.java
Patch:
@@ -462,6 +462,7 @@ public void regenerateLineGraphic(int line) {
 	 *
 	 * @param lines
 	 * 		Lines to update.
+	 * 		Do note these are <i>lines</i> and not the internal 0-indexed <i>paragraphs</i>.
 	 */
 	public void regenerateLineGraphics(Collection<Integer> lines) {
 		Threads.runFx(() -> {

File: recaf-utils/src/main/java/me/coley/recaf/util/NumberUtil.java
Patch:
@@ -27,7 +27,9 @@ public static Number parse(String input) {
 		if (text.indexOf('.') > 0) {
 			value = parseDecimal(text);
 		} else {
-			if (text.endsWith("L"))
+			if (text.endsWith("L") && text.startsWith("0X"))
+				value = Long.parseLong(text.substring(2, text.indexOf("L")), 16);
+			else if (text.endsWith("L"))
 				value = Long.parseLong(text.substring(0, text.indexOf("L")));
 			else if (text.startsWith("0X"))
 				value = Integer.parseInt(text.substring(2), 16);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Frame.java
Patch:
@@ -105,7 +105,7 @@ private static Value mergeValue(Value value, Value otherValue, InheritanceChecke
 				String common = typeChecker.getCommonType(
 						type.getType().getInternalName(),
 						otherType.getType().getInternalName());
-				Type commonType = Type.getType(common);
+				Type commonType = Type.getObjectType(common);
 				// Update the local with the new type
 				return new Value.TypeValue(commonType);
 			} else {

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AstToMethodTransformer.java
Patch:
@@ -131,14 +131,14 @@ public MethodNode buildMethod() throws MethodCompileException {
 			LabelNode end;
 			if (fs instanceof CodeEntry) {
 				start = labelMap.get(code.getPrevLabel((CodeEntry) fs).getName());
-			} else if (fs instanceof MethodParameter) {
+			} else if (fs instanceof MethodParameter || fs instanceof MethodDefinition) {
 				start = labelMap.get(code.getFirstLabel().getName());
 			} else {
 				throw new MethodCompileException(fs, "Cannot resolve usage to start label!");
 			}
 			if (ls instanceof CodeEntry) {
 				end = labelMap.get(code.getPrevLabel((CodeEntry) ls).getName());
-			} else if (ls instanceof MethodParameter) {
+			} else if (ls instanceof MethodParameter || fs instanceof MethodDefinition) {
 				end = labelMap.get(code.getLastLabel().getName());
 			} else {
 				throw new MethodCompileException(ls, "Cannot resolve usage to end label!");

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AstToMethodTransformer.java
Patch:
@@ -119,7 +119,7 @@ public MethodNode buildMethod() throws MethodCompileException {
 		List<LocalVariableNode> variableList = new ArrayList<>();
 		for (VariableInfo varInfo : variables.inSortedOrder()) {
 			String varName = varInfo.getName();
-			String varDesc = varInfo.getLastUsedType().getDescriptor();
+			String varDesc = varInfo.getCommonType(inheritanceChecker).getDescriptor();
 			int index = varInfo.getIndex();
 			// TODO: Consider scoped re-usage of the same name.
 			//  - Can't really do that until analysis logic is implemented

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Analyzer.java
Patch:
@@ -759,7 +759,7 @@ else if (op == Opcodes.ATHROW)
 					// Replace top stack value with cast type. Otherwise, it's a ClassCastException.
 					TypeInstruction typeInstruction = (TypeInstruction) instruction;
 					frame.pop();
-					frame.push(new Value.ObjectValue(Type.getType(typeInstruction.getType())));
+					frame.push(new Value.ObjectValue(Type.getObjectType(typeInstruction.getType())));
 					break;
 				}
 				case INSTANCEOF: {

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/VariableReference.java
Patch:
@@ -5,7 +5,7 @@
  *
  * @author Matt Coley
  */
-public interface VariableReference {
+public interface VariableReference extends Element {
 	/**
 	 * @return Variable identifier.
 	 */

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/AnalysisTests.java
Patch:
@@ -260,7 +260,7 @@ public void testTypeMerge() {
 					"  nop\n";
 			handle(code, unit -> {
 				Analyzer analyzer = new Analyzer("Test", unit);
-				analyzer.setInheritanceChecker(new ReflectiveInheritanceChecker());
+				analyzer.setInheritanceChecker(ReflectiveInheritanceChecker.getInstance());
 				try {
 					Analysis results = analyzer.analyze();
 					// Assert variable is collection

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/compiler/JavassistCompiler.java
Patch:
@@ -84,7 +84,9 @@ public static JavassistCompilationResult compileExpression(CtClass declaring, Ct
 	private static void populateVariables(JavassistExpressionJavac compiler, Variables variables) {
 		JvstCodeGen gen = compiler.getGen();
 		SymbolTable symbolTable = compiler.getRootSTable();
-		for (VariableInfo variable : variables) {
+		// NOTE: Population order really matters here. In our case appearance order satisfies most cases.
+		// Since we track parameters first they will always take preference in edge cases with scoping.
+		for (VariableInfo variable : variables.inAppearanceOrder()) {
 			try {
 				String name = variable.getName();
 				String desc = variable.getLastUsedType().getDescriptor();

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Value.java
Patch:
@@ -322,7 +322,7 @@ public boolean isPrimitive() {
 
 		@Override
 		public String toString() {
-			return type.getInternalName() + ":" + number;
+			return type.getInternalName() + ":" + (number == null ? "?" : number);
 		}
 
 		@Override

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/analysis/Analyzer.java
Patch:
@@ -884,7 +884,7 @@ else if (op == Opcodes.ATHROW)
 		if (wasVisited && ctxPc >= 0) {
 			try {
 				boolean modified = frame.merge(oldFrameState, this);
-				continueExec &= modified;
+				continueExec |= modified;
 			} catch (FrameMergeException ex) {
 				throw new IllegalAstException(instruction, ex);
 			}

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/MethodParseTests.java
Patch:
@@ -40,7 +40,7 @@ public class MethodParseTests extends TestUtil {
 
 	@ParameterizedTest
 	@MethodSource("paths")
-	public void testFoo(Path file) {
+	public void test(Path file) {
 		handle(read(file), pass());
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/ExpressionToAsmTransformer.java
Patch:
@@ -9,6 +9,7 @@
 import me.coley.recaf.assemble.compiler.JavassistASMTranslator;
 import me.coley.recaf.assemble.compiler.JavassistCompilationResult;
 import me.coley.recaf.assemble.compiler.JavassistCompiler;
+import me.coley.recaf.util.AccessFlag;
 import org.objectweb.asm.tree.InsnList;
 import org.objectweb.asm.tree.TryCatchBlockNode;
 
@@ -89,9 +90,10 @@ public TransformResult transform(Expression expression) throws CannotCompileExce
 			declaring.addMethod((CtMethod) containerMethod);
 		}
 		// Compile with Javassist
+		boolean isStatic = AccessFlag.isStatic(definition.getModifiers().value());
 		JavassistCompilationResult result =
 				JavassistCompiler.compileExpression(declaring, containerMethod,
-						classSupplier, expression, variables);
+						classSupplier, expression, variables, isStatic);
 		// Translate to ASM
 		JavassistASMTranslator translator = new JavassistASMTranslator();
 		translator.visit(declaring, result.getBytecode().toCodeAttribute());

File: recaf-ui/src/main/java/me/coley/recaf/config/container/EditorConfig.java
Patch:
@@ -34,7 +34,8 @@ public class EditorConfig implements ConfigContainer {
 	 */
 	@Group("general")
 	@ConfigID("errorindicatorpos")
-	public Pos errorIndicatorPos = Pos.TOP_LEFT;
+	// TODO: Only let this show in the TOP positions in config window
+	public Pos errorIndicatorPos = Pos.TOP_RIGHT;
 
 	/**
 	 * Show bracket folds in {@link me.coley.recaf.ui.control.code.SyntaxArea}.

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/ErrorDisplay.java
Patch:
@@ -10,6 +10,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.VBox;
 import javafx.scene.paint.Color;
+import me.coley.recaf.config.Configs;
 import me.coley.recaf.ui.control.code.*;
 import me.coley.recaf.ui.util.Icons;
 import me.coley.recaf.util.Threads;
@@ -38,7 +39,7 @@ public ErrorDisplay(SyntaxArea area, ProblemTracking tracking) {
 		this.area = area;
 		setPickOnBounds(false);
 		tracking.addProblemListener(this);
-		setAlignment(Pos.TOP_LEFT);
+		setAlignment(Configs.editor().errorIndicatorPos);
 		setOnKeyPressed(e -> {
 			if (close != null && e.getCode() == KeyCode.ESCAPE) {
 				close.run();

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/bytecode/AssemblerArea.java
Patch:
@@ -308,7 +308,6 @@ private void onMenuRequested(ContextMenuEvent e) {
 			//     - ClassName
 			//     - MemberName
 			//     - Descriptor
-			// menu.getItems().add(action("menu.image.center", this::resetPosition));
 			Element element = null;
 			List<Element> children = lastUnit.getCode().getChildren();
 			double linePercent = line / (double) getParagraphs().size();

File: recaf-ui/src/main/java/me/coley/recaf/ui/behavior/WindowCloseListener.java
Patch:
@@ -8,7 +8,7 @@
  *
  * @author Matt Coley
  */
-public interface OnCloseListener {
+public interface WindowCloseListener {
 	/**
 	 * Invoked on the UI thread.
 	 *

File: recaf-ui/src/main/java/me/coley/recaf/ui/behavior/WindowShownListener.java
Patch:
@@ -8,7 +8,7 @@
  *
  * @author Matt Coley
  */
-public interface OnShownListener {
+public interface WindowShownListener {
 	/**
 	 * Invoked on the UI thread.
 	 *

File: recaf-ui/src/main/java/me/coley/recaf/ui/dialog/DialogBase.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class DialogBase<R> extends Dialog<R> {
 	protected void init() {
-		WindowBase.addStylesheets(getDialogPane().getStylesheets());
+		WindowBase.installStyle(getDialogPane().getStylesheets());
 		Stage stage = (Stage) getDialogPane().getScene().getWindow();
 		stage.getIcons().add(new Image(Icons.LOGO));
 		// We can discard the result if the type is a button (like cancel)

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/ConfigPane.java
Patch:
@@ -17,7 +17,7 @@
 import me.coley.recaf.config.Configs;
 import me.coley.recaf.config.Group;
 import me.coley.recaf.config.container.KeybindConfig;
-import me.coley.recaf.ui.behavior.OnShownListener;
+import me.coley.recaf.ui.behavior.WindowShownListener;
 import me.coley.recaf.ui.control.config.ConfigBinding;
 import me.coley.recaf.ui.control.config.ConfigBoolean;
 import me.coley.recaf.ui.control.config.ConfigRanged;
@@ -38,7 +38,7 @@
  *
  * @author Matt Coley
  */
-public class ConfigPane extends BorderPane implements OnShownListener {
+public class ConfigPane extends BorderPane implements WindowShownListener {
 	private static final Logger logger = Logging.get(ConfigPane.class);
 	private static final String TAB_TITLE_PADDING = "  ";
 	private static final int WIDTH = 200;

File: recaf-core/src/main/java/me/coley/recaf/parse/JavaParserResolving.java
Patch:
@@ -21,7 +21,6 @@
 import me.coley.recaf.util.StringUtil;
 import me.coley.recaf.util.logging.Logging;
 import me.coley.recaf.workspace.Workspace;
-import org.objectweb.asm.Type;
 import org.slf4j.Logger;
 
 import java.lang.reflect.Method;

File: recaf-plugin/src/main/java/dev/xdark/recaf/plugin/SimplePluginManager.java
Patch:
@@ -28,6 +28,7 @@ public PluginLoader getLoader(InputStream in) throws IOException {
 	}
 
 	@Override
+	@SuppressWarnings("unchecked")
 	public <T extends Plugin> PluginContainer<T> getPlugin(String name) {
 		return (PluginContainer<T>) nameMap.get(name.toLowerCase(Locale.ROOT));
 	}

File: recaf-ui/src/main/java/me/coley/recaf/ui/behavior/BasicClassRepresentation.java
Patch:
@@ -2,7 +2,6 @@
 
 import javafx.scene.Node;
 import me.coley.recaf.code.CommonClassInfo;
-import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.code.MemberInfo;
 
 import java.util.function.Consumer;

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/HexAccessor.java
Patch:
@@ -155,7 +155,8 @@ public String getPreviewAtOffset(int offset, int length) {
 	/**
 	 * Used to create the offsets shown on the left-most column of {@link HexView}.
 	 *
-	 * @return List of integers starting from 0, incrementing by {@link HexView#getHexColumns()} until the data length is reached.
+	 * @return List of integers starting from 0, incrementing by {@link HexView#getHexColumns()}
+	 * until the data length is reached.
 	 */
 	public List<Integer> computeOffsetsInRange() {
 		List<Integer> newOffsets = new ArrayList<>();

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/HexClassView.java
Patch:
@@ -13,8 +13,6 @@
 import me.coley.recaf.ui.control.hex.clazz.ClassOffsetMap;
 import me.coley.recaf.ui.control.hex.clazz.HexClassInfo;
 
-import java.util.List;
-
 /**
  * Extension of the hex viewer for class files.
  *

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/clazz/ClassOffsetMap.java
Patch:
@@ -4,8 +4,6 @@
 import me.coley.cafedude.Field;
 import me.coley.cafedude.Method;
 
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Map.Entry;
 import java.util.NavigableMap;
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/assembler/AssemblerPane.java
Patch:
@@ -1,8 +1,6 @@
 package me.coley.recaf.ui.pane.assembler;
 
-import com.panemu.tiwulfx.control.dock.DetachableTabPane;
 import javafx.geometry.Insets;
-import javafx.geometry.Pos;
 import javafx.scene.Node;
 import javafx.scene.control.Tab;
 import javafx.scene.layout.BorderPane;
@@ -24,8 +22,8 @@
 /**
  * Wrapper pane of all the assembler components.
  *
- * @see AssemblerArea Assembler text editor
  * @author Matt Coley
+ * @see AssemblerArea Assembler text editor
  */
 public class AssemblerPane extends BorderPane implements MemberEditor, Cleanable {
 	private final AssemblerArea assemblerArea;

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/table/TableDisplayMode.java
Patch:
@@ -3,6 +3,9 @@
 /**
  * Generic outline for table display modes.
  *
+ * @param <T>
+ * 		Generic value type.
+ *
  * @author Wolfie / win32kbase
  */
 public interface TableDisplayMode<T> {

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/NodeUtil.java
Patch:
@@ -30,6 +30,8 @@ public static void addStyleClass(Node node, String className) {
 	 * 		Node instance.
 	 * @param className
 	 * 		Class name to add.
+	 *
+	 * @return {@code true} when the class was removed from the node.
 	 */
 	public static boolean removeStyleClass(Node node, String className) {
 		boolean flag = false;

File: recaf-ui/src/main/java/me/coley/recaf/ui/context/FieldContextBuilder.java
Patch:
@@ -99,7 +99,7 @@ private void assemble() {
 				AssemblerPane assembler = new AssemblerPane();
 				assembler.setTargetMember(fieldInfo);
 				assembler.onUpdate(ownerInfo);
-				new GenericWindow(assembler, 400, 100).show();
+				new GenericWindow(assembler, 800, 300).show();
 			} else if (ownerInfo instanceof DexClassInfo) {
 				// TODO: Copy dex member
 				logger.warn("Android currently unsupported");

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/ErrorDisplay.java
Patch:
@@ -46,7 +46,7 @@ public ErrorDisplay(SyntaxArea area, ProblemTracking tracking) {
 		});
 	}
 
-	private void refresh() {
+	private synchronized void refresh() {
 		getChildren().clear();
 		if (!problems.isEmpty()) {
 			VBox wrapper = new VBox();

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AstToFieldTransformer.java
Patch:
@@ -52,7 +52,7 @@ public FieldNode get() {
 			}
 		}
 		FieldNode field = new FieldNode(access, name, descriptor, signature, value);
-		// TODO: Annotation support
+		AnnotationHelper.visitAnnos(field, code.getAnnotations());
 		return field;
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AstToMethodTransformer.java
Patch:
@@ -23,8 +23,8 @@ public class AstToMethodTransformer {
 	private final Map<String, LabelNode> labelMap = new HashMap<>();
 	private final Map<AbstractInsnNode, Element> insnToAstMap = new HashMap<>();
 	private final Variables variables = new Variables();
-	private final Unit unit;
 	private final String selfType;
+	private final Unit unit;
 	// For quick reference
 	private final MethodDefinition definition;
 	private final Code code;
@@ -98,7 +98,7 @@ public MethodNode get() throws MethodCompileException {
 				.collect(Collectors.toList()));
 		method.tryCatchBlocks.addAll(tryBlocks);
 		method.visitMaxs(stack, variables.getCurrentUsedCap());
-		// TODO: Annotation support
+		AnnotationHelper.visitAnnos(method, code.getAnnotations());
 		return method;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/presentation/GuiPresentation.java
Patch:
@@ -61,7 +61,7 @@ public void initialize(Controller controller) {
 		Thread.UncaughtExceptionHandler exceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
 		Thread.setDefaultUncaughtExceptionHandler((thread, exception) -> {
 			// TODO: When updating to newer RichTextFX, remove this (its been fixed)
-			if (exception.getMessage().contains("Visible paragraphs' last index is [-1]"))
+			if (exception.getMessage() != null && exception.getMessage().contains("Visible paragraphs' last index is [-1]"))
 				return;
 
 			logger.error("Uncaught exception on thread '" + thread.getName() + "'", exception);

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AntlrToAstTransformer.java
Patch:
@@ -180,10 +180,10 @@ public CodeEntry visitCodeEntry(BytecodeParser.CodeEntryContext ctx) {
 			return visitTryCatch(ctx.tryCatch());
 		} else if (ctx.throwEx() != null) {
 			return visitThrowEx(ctx.throwEx());
-		} else if (ctx.constVal() != null) {
-			return visitConstVal(ctx.constVal());
 		} else if (ctx.signature() != null) {
 			return visitSignature(ctx.signature());
+		} else if (ctx.constVal() != null) {
+			return wrap(ctx.constVal(), visitConstVal(ctx.constVal()));
 		} else if (ctx.comment() != null && ctx.comment().size() > 0) {
 			String comment = ctx.comment().stream().map(c -> {
 				String text = c.getText();

File: recaf-ui/src/main/java/me/coley/recaf/config/Configs.java
Patch:
@@ -11,11 +11,11 @@
  * @author Matt Coley
  */
 public class Configs {
-	private static final AssemblerConfig assembler = new AssemblerConfig();
 	private static final DisplayConfig display = new DisplayConfig();
 	private static final EditorConfig editor = new EditorConfig();
 	private static final KeybindConfig keybinds = new KeybindConfig();
 	private static final DialogConfig dialogs = new DialogConfig();
+	private static final AssemblerConfig assembler = new AssemblerConfig();
 	private static final CompilerConfig compiler = new CompilerConfig();
 	private static final DecompilerConfig decompiler = new DecompilerConfig();
 	private static final ExportConfig export = new ExportConfig();
@@ -26,11 +26,11 @@ public class Configs {
 	 */
 	public static Collection<ConfigContainer> containers() {
 		return Arrays.asList(
-				assembler,
 				display,
 				editor,
 				keybinds,
 				dialogs,
+				assembler,
 				compiler,
 				decompiler,
 				export,

File: recaf-ui/src/main/java/me/coley/recaf/ui/ClassView.java
Patch:
@@ -48,6 +48,7 @@ public ClassView(CommonClassInfo info) {
 		// Setup main view
 		mainView = createViewForClass(info);
 		mainViewWrapper.setCenter(mainView.getNodeRepresentation());
+
 		// Setup side tabs with class visualization tools
 		CollapsibleTabPane sideTabs = new CollapsibleTabPane();
 		sideTabs.setSide(Side.RIGHT);
@@ -61,6 +62,8 @@ public ClassView(CommonClassInfo info) {
 		SplitPane split = new SplitPane();
 		split.getItems().addAll(mainViewWrapper, sideTabs);
 		split.setDividerPositions(0.75);
+		split.getStyleClass().add("view-split-pane");
+
 		setCenter(split);
 		onUpdate(info);
 		Configs.keybinds().installEditorKeys(this);

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/ProblemLevel.java
Patch:
@@ -6,5 +6,7 @@
  * @author Matt Coley
  */
 public enum ProblemLevel {
-	ERROR, WARNING, INFO
+	ERROR,
+	WARNING,
+	INFO
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Icons.java
Patch:
@@ -78,6 +78,7 @@ public class Icons {
 	public static final String LOGO = "icons/logo.png";
 	public static final String ANDROID = "icons/android.png";
 	public static final String OPEN = "icons/open.png";
+	public static final String WARNING = "icons/warning.png";
 	public static final String ERROR = "icons/error.png";
 	public static final String COMPILE = "icons/compile.png";
 	public static final String DECOMPILE = "icons/decompile.png";

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/Code.java
Patch:
@@ -111,7 +111,7 @@ public void setSignature(Signature signature) {
 	 * 		Entry to add.
 	 */
 	private void addInternal(CodeEntry entry) {
-		entries.add(entry);
+		entries.add(child(entry));
 	}
 
 	/**

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/Unit.java
Patch:
@@ -18,8 +18,8 @@ public class Unit extends BaseElement {
 	 * 		Optional code value; typically {@code null} if the definition represents a field or an abstract method.
 	 */
 	public Unit(MemberDefinition definition, Code code) {
-		this.definition = definition;
-		this.code = code;
+		this.definition = child(definition);
+		this.code = child(code);
 	}
 
 	@Override

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/arch/ConstVal.java
Patch:
@@ -86,7 +86,7 @@ public void insertInto(Code code) {
 
 	@Override
 	public String print() {
-		String op = "CONST-VALUE";
+		String op = "VALUE";
 		switch (getValueType()) {
 			case STRING:
 				// We escape whatever string value is here because it makes parsing much simpler.

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/insn/IndyInstruction.java
Patch:
@@ -37,7 +37,7 @@ public IndyInstruction(String opcode, String name, String desc, HandleInfo bsmHa
 		super(opcode);
 		this.name = name;
 		this.desc = desc;
-		this.bsmHandle = bsmHandle;
+		this.bsmHandle = child(bsmHandle);
 		this.bsmArguments = bsmArguments;
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AntlrToAstTransformer.java
Patch:
@@ -95,7 +95,7 @@ public ConstVal visitConstVal(BytecodeParser.ConstValContext ctx) {
 			}
 		} else {
 			ParseTree child = ctx.getChild(1);
-			throw new ParserException(ctx, "Unknown CONST-VALUE argument type: " + child.getClass() + " - " + child.getText());
+			throw new ParserException(ctx, "Unknown VALUE argument type: " + child.getClass() + " - " + child.getText());
 		}
 	}
 

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/transformer/AstToMethodTransformer.java
Patch:
@@ -98,6 +98,7 @@ public MethodNode get() throws MethodCompileException {
 				.collect(Collectors.toList()));
 		method.tryCatchBlocks.addAll(tryBlocks);
 		method.visitMaxs(stack, variables.getCurrentUsedCap());
+		// TODO: Annotation support
 		return method;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/HexRow.java
Patch:
@@ -222,7 +222,7 @@ public void addHoverEffect(int localOffset, boolean header, boolean offsetLabel)
 		if (!Configs.editor().highlightCurrent && (header || offsetLabel))
 			return;
 
-		HexLabel label = (HexLabel) valuesGrid.getChildren().get(offset);
+		HexLabel label = (HexLabel) valuesGrid.getChildren().get(localOffset);
 		// Don't highlight rows or columns of empty labels
 		if (label.isEmpty())
 			return;

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/HexStringsInfo.java
Patch:
@@ -51,7 +51,9 @@ protected void updateItem(Info item, boolean empty) {
 					setGraphic(lblOffset);
 					setText(item.text);
 					// Make it so they're clickable
-					setOnMousePressed(e -> view.centerOffset(item.offset));
+					int start = item.offset;
+					int end = start + item.text.length() - 1;
+					setOnMousePressed(e -> view.selectRange(EditableHexLocation.ASCII, start, end));
 				}
 			}
 		});

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DecompilePane.java
Patch:
@@ -147,8 +147,7 @@ public CommonClassInfo getCurrentClassInfo() {
 	@Override
 	public void cleanup() {
 		javaArea.cleanup();
-		threadPool.clear();
-		threadPool.shutdownNow();
+		threadPool.clearAndShutdown();
 	}
 
 	@Override

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/SearchPane.java
Patch:
@@ -45,8 +45,8 @@ public class SearchPane extends BorderPane {
 	private final Tab tab;
 
 	private SearchPane(String title, Node content) {
-		DockingRootPane docking = docking();
 		tab = new DockingRootPane.KeyedTab(title, content);
+		DockingRootPane docking = docking();
 		DetachableTabPane tabPane = docking.createNewTabPane();
 		tabPane.getTabs().add(tab);
 		tabPane.setCloseIfEmpty(true);

File: recaf-utils/src/main/java/me/coley/recaf/util/RegexUtil.java
Patch:
@@ -44,7 +44,7 @@ public static boolean matches(String pattern, String input) {
 	 * @param regex pattern's regex
 	 * @return {@link Pattern}
 	 */
-	public static Pattern pattern(String regex) {
+	public synchronized static Pattern pattern(String regex) {
 		return PATTERNS.computeIfAbsent(regex, Pattern::new);
 	}
 }

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ParserException.java
Patch:
@@ -1,10 +1,10 @@
 package me.coley.recaf.assemble;
 
-import me.coley.recaf.assemble.ast.BytecodeAstGenerator;
+import me.coley.recaf.assemble.transformer.AntlrToAstTransformer;
 import org.antlr.v4.runtime.tree.ParseTree;
 
 /**
- * Describes a problem that occurred in {@link BytecodeAstGenerator}.
+ * Describes a problem that occurred in {@link AntlrToAstTransformer}.
  *
  * @author Matt Coley
  */

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/WorkspaceTreeWrapper.java
Patch:
@@ -71,7 +71,7 @@ public void addLoadingOverlay(List<Path> files) {
 			label.setGraphic(Icons.getPathIcon(path));
 			fileNameWrapper.getChildren().add(label);
 		}
-		centeredList.getChildren().add(new Label(String.format("Reading %d files:", files.size())));
+		centeredList.getChildren().add(new Label(String.format(files.size() > 1 ? "Reading %d files:" : "Reading %d file:", files.size())));
 		centeredList.getChildren().add(fileNameWrapper);
 		BorderPane pane = new BorderPane();
 		centeredList.getStyleClass().add("workspace-overlay");

File: recaf-assembler/src/main/java/me/coley/recaf/assemble/ast/BytecodeAstGenerator.java
Patch:
@@ -312,7 +312,7 @@ public AbstractInstruction visitInsnVar(BytecodeParser.InsnVarContext ctx) {
 	@Override
 	public AbstractInstruction visitInsnType(BytecodeParser.InsnTypeContext ctx) {
 		String opcode = ctx.getChild(0).getText();
-		String identifier = ctx.internalType().getText();
+		String identifier = ctx.type().getText();
 		return new TypeInstruction(opcode, identifier);
 	}
 

File: recaf-assembler/src/test/java/me/coley/recaf/assemble/DefinitionArchTests.java
Patch:
@@ -50,7 +50,7 @@ public void testDefinitionWithParams() {
 			"()Ljava/util/Set<TV;>;",
 			"()Ljava/util/Map<TT;TV;>;",
 			"(TT;)TV;",
-			"()V",
+			"(I[ITT;ITT;J[TT;)V",
 			"Ljava/util/Set<Ljava/util/Set<Ljava/util/Set<Ljava/util/Set<Ljava/util/Set<TV;>;>;>;>;>;",
 			"Ljava/util/Map<TT;TV;>;",
 	})

File: recaf-ui/src/main/java/me/coley/recaf/ui/ClassView.java
Patch:
@@ -183,7 +183,7 @@ public void setMode(ClassViewMode mode) {
 		}
 		// Trigger refresh
 		mainView = createViewForClass(info);
-		setCenter(mainView.getNodeRepresentation());
+		mainViewWrapper.setCenter(mainView.getNodeRepresentation());
 		onUpdate(info);
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/LanguageStyler.java
Patch:
@@ -147,6 +147,8 @@ private void styleAtWithRange(int start, int matcherRange) {
 		boolean modified = false;
 		try {
 			while (matcher.find()) {
+				if (Thread.interrupted())
+					return;
 				String styleClass = getClassFromGroup(matcher);
 				if (styleClass == null) {
 					logger.warn("Could not find matching class in language '{}' for match '{}'",

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/SyntaxArea.java
Patch:
@@ -90,6 +90,9 @@ public void dispose() {
 		if (!syntaxThreadService.isShutdown()) {
 			syntaxThreadService.shutdownNow();
 		}
+		if (!bracketThreadService.isShutdown()) {
+			bracketThreadService.shutdownNow();
+		}
 	}
 
 	@Override

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Icons.java
Patch:
@@ -103,6 +103,7 @@ public class Icons {
 	public static final String DOCUMENTATION = "icons/documentation.png";
 	public static final String GITHUB = "icons/github.png";
 	public static final String DISCORD = "icons/discord.png";
+	public static final String SMART = "icons/brain.png";
 
 	private static final Map<String, Image> IMAGE_CACHE = new ConcurrentHashMap<>();
 	private static final Map<String, Image> SCALED_IMAGE_CACHE = new ConcurrentHashMap<>();

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/pe/ExportTableDisplayMode.java
Patch:
@@ -22,7 +22,7 @@ public void apply(CachedImageExports cachedImageExports, SizedDataTypeTable tabl
             CachedExportEntry cachedExportEntry = cachedImageExports.getEntry(i);
             String name = cachedExportEntry.getName() == null ? "No name" : cachedExportEntry.getName();
             int ordinal = cachedExportEntry.getOrdinal();
-            String desc = cachedExportEntry.getName() == null ? "Exported by ordinal" : "Exported by name";
+            String desc = cachedExportEntry.getName() == null ? "Exported by ordinal" : "Exported by both";
             table.addWord(name, ordinal, desc);
         }
     }

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/pe/ExportTableDisplayMode.java
Patch:
@@ -22,8 +22,7 @@ public void apply(CachedImageExports cachedImageExports, SizedDataTypeTable tabl
             CachedExportEntry cachedExportEntry = cachedImageExports.getEntry(i);
             String name = cachedExportEntry.getName() == null ? "No name" : cachedExportEntry.getName();
             int ordinal = cachedExportEntry.getOrdinal();
-            String desc = cachedExportEntry.getName() == null ? "Exported by ordinal" : "Exported by name";
-            table.addWord(name, ordinal, desc);
+            table.addWord(name, ordinal, "Exported by both");
         }
     }
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/HexEditLabel.java
Patch:
@@ -40,7 +40,7 @@ public HexEditLabel(HexRow owner, int offset, String initialText) {
 		});
 		tf.focusedProperty().addListener((observable, oldValue, isFocused) -> {
 			if (!isFocused) {
-				cancel();
+				apply();
 			}
 		});
 		tf.setOnKeyReleased(e -> {

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/HexEditLabel.java
Patch:
@@ -45,7 +45,7 @@ public HexEditLabel(HexRow owner, int offset, String initialText) {
 		});
 		tf.setOnKeyReleased(e -> {
 			KeyCode code = e.getCode();
-			if (code.equals(KeyCode.ENTER) || code.equals(KeyCode.LEFT)) {
+			if (code.equals(KeyCode.ENTER)) {
 				apply();
 			} else if (code.equals(KeyCode.ESCAPE)) {
 				tf.setText(backup);

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/hex/HexEditLabel.java
Patch:
@@ -40,12 +40,12 @@ public HexEditLabel(HexRow owner, int offset, String initialText) {
 		});
 		tf.focusedProperty().addListener((observable, oldValue, isFocused) -> {
 			if (!isFocused) {
-				cancel();
+				apply();
 			}
 		});
 		tf.setOnKeyReleased(e -> {
 			KeyCode code = e.getCode();
-			if (code.equals(KeyCode.ENTER)) {
+			if (code.equals(KeyCode.ENTER) || code.equals(KeyCode.LEFT)) {
 				apply();
 			} else if (code.equals(KeyCode.ESCAPE)) {
 				tf.setText(backup);

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DecompilePane.java
Patch:
@@ -103,6 +103,7 @@ public void selectMember(MemberInfo memberInfo) {
 
 	@Override
 	public void onUpdate(CommonClassInfo newValue) {
+		lastClass = newValue;
 		javaArea.onUpdate(newValue);
 		if (newValue instanceof ClassInfo) {
 			if (ignoreNextDecompile) {
@@ -136,7 +137,6 @@ public void onUpdate(CommonClassInfo newValue) {
 						"//  - Switch display modes\n");
 			}
 		}
-		lastClass = newValue;
 	}
 
 	@Override

File: recaf-ui/src/main/java/me/coley/recaf/ui/prompt/QuickNavPrompt.java
Patch:
@@ -41,6 +41,7 @@ private QuickNavPrompt() {
 		setAlwaysOnTop(true);
 		setTitle(Lang.get("dialog.quicknav"));
 		setWidth(500);
+		setOnHiding(e -> showing.set(false));
 	}
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Icons.java
Patch:
@@ -78,6 +78,7 @@ public class Icons {
 	public static final String LOGO = "icons/logo.png";
 	public static final String ANDROID = "icons/android.png";
 	public static final String OPEN = "icons/open.png";
+	public static final String ERROR = "icons/error.png";
 	public static final String CODE = "icons/code.png";
 	public static final String SYNTHETIC = "icons/synthetic.png";
 	public static final String EYE = "icons/eye.png";

File: recaf-ui/src/main/java/me/coley/recaf/ui/pane/DecompilePane.java
Patch:
@@ -16,6 +16,7 @@
 import me.coley.recaf.ui.behavior.ClassRepresentation;
 import me.coley.recaf.ui.behavior.Cleanable;
 import me.coley.recaf.ui.behavior.SaveResult;
+import me.coley.recaf.ui.control.code.ProblemIndicatorInitializer;
 import me.coley.recaf.ui.control.code.ProblemTracking;
 import me.coley.recaf.ui.control.code.java.JavaArea;
 import me.coley.recaf.util.Threads;
@@ -44,6 +45,7 @@ public class DecompilePane extends BorderPane implements ClassRepresentation, Cl
 	 */
 	public DecompilePane() {
 		ProblemTracking tracking = new ProblemTracking();
+		tracking.setIndicatorInitializer(new ProblemIndicatorInitializer(tracking));
 		this.javaArea = new JavaArea(tracking);
 		Node node = new VirtualizedScrollPane<>(javaArea);
 		setCenter(node);

File: recaf-ui/src/main/java/me/coley/recaf/util/Threads.java
Patch:
@@ -30,6 +30,8 @@ public class Threads {
 	 * 		Runnable to start in UI thread.
 	 */
 	public static void runFx(Runnable action) {
+		// I know "Platform.isFxApplicationThread()" exists.
+		// That results in some wonky behavior in various use cases though.
 		Platform.runLater(wrap(action));
 	}
 

File: recaf-core/src/main/java/me/coley/recaf/ControllerListener.java
Patch:
@@ -14,7 +14,7 @@ public interface ControllerListener {
 	 * @param oldWorkspace
 	 * 		Prior workspace. May be {@code null}.
 	 * @param newWorkspace
-	 * 		New workspace.
+	 * 		New workspace. May be {@code null}.
 	 */
 	void onNewWorkspace(Workspace oldWorkspace, Workspace newWorkspace);
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/ScrollUtils.java
Patch:
@@ -50,7 +50,7 @@ public static void forceScroll(Virtualized virtualized, double targetY) {
 			//
 			// Case 1: We can't scroll to the target position because it is beyond the allowed bounds
 			if (virtualized.totalHeightEstimateProperty() != null && tries == maxTries
-					&& targetY >= virtualized.totalHeightEstimateProperty().getValue()) {
+					&& targetY >= virtualized.totalHeightEstimateProperty().getOrElse(0.0)) {
 				virtualized.scrollYBy(Integer.MAX_VALUE);
 			}
 		});

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/item/BaseTreeValue.java
Patch:
@@ -64,7 +64,7 @@ public String getFullPath() {
 	/**
 	 * @return Flag for it the element represents a directory.
 	 */
-	public boolean isDirectory() {
-		return isDirectory;
+	public ItemType getItemType() {
+		return isDirectory ? ItemType.DIRECTORY : ItemType.FILE;
 	}
 }

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/WorkspaceCell.java
Patch:
@@ -98,7 +98,7 @@ private void openItem(TreeItem<?> item) {
 			FileItem fi = (FileItem)item;
 			try {
 				RecafUI.getWindows().getMainWindow().getDockingRootPane()
-					.createTab(fi.getFileName(), new BorderPane(new PEExplorerPanel(fi)));
+					.createTab(fi.getFileName(), new PEExplorerPanel(fi));
 			}
 			catch (IOException e) {
 				logger.error(e.getMessage());

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/WorkspaceCell.java
Patch:
@@ -98,7 +98,7 @@ private void openItem(TreeItem<?> item) {
 			FileItem fi = (FileItem)item;
 			try {
 				RecafUI.getWindows().getMainWindow().getDockingRootPane()
-					.createTab(fi.getFileName(), new BorderPane(new PEExplorerPanel(fi)));
+					.createTab(fi.getFileName(), new PEExplorerPanel(fi));
 			}
 			catch (IOException e) {
 				logger.error(e.getMessage());

File: recaf-core/src/main/java/me/coley/recaf/code/MemberInfo.java
Patch:
@@ -76,18 +76,20 @@ public boolean equals(Object o) {
 		MemberInfo that = (MemberInfo) o;
 		return access == that.access &&
 				Objects.equals(owner, that.owner) &&
+				Objects.equals(getName(), that.getName()) &&
 				Objects.equals(descriptor, that.descriptor);
 	}
 
 	@Override
 	public int hashCode() {
-		return Objects.hash(owner, descriptor, access);
+		return Objects.hash(owner, getName(), descriptor, access);
 	}
 
 	@Override
 	public String toString() {
 		return "MemberInfo{" +
 				"owner='" + owner + '\'' +
+				", name='" + getName() + '\'' +
 				", descriptor='" + descriptor + '\'' +
 				", access=" + access +
 				'}';

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/source/DirectoryContentSource.java
Patch:
@@ -77,9 +77,7 @@ protected Predicate<Path> createDefaultFilter() {
 		// because thanks Oracle for the fastest
 		// IO implementation in NIO package.
 		return path -> {
-			FileSystem defaultFileSystem = FileSystems.getDefault();
-			if (path.getFileSystem() == defaultFileSystem) {
-				// Fallback to java.io package.
+			if (IOUtil.isOnDefaultFileSystem(path)) {
 				return path.toFile().isFile();
 			}
 			return Files.isRegularFile(path);

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/item/ResourceItem.java
Patch:
@@ -159,7 +159,7 @@ public void removeFile(String name) {
 
 	private void remove(BaseTreeItem root, String name) {
 		BaseTreeItem item = root;
-		BaseTreeItem parent = item;
+		BaseTreeItem parent = root;
 		List<String> parts = new ArrayList<>(Arrays.asList(name.split("/")));
 		while (!parts.isEmpty()) {
 			String part = parts.remove(0);
@@ -179,7 +179,7 @@ private void remove(BaseTreeItem root, String name) {
 			parent.removeChild(item);
 			item = parent;
 			parent = (BaseTreeItem) item.getParent();
-		} while (parent.isLeaf());
+		} while (item.isLeaf());
 	}
 
 	@Override

File: recaf-core/src/main/java/me/coley/recaf/util/CancelSignal.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Special type of {@link Error} that signals
- * that further execution must be stpooed.
+ * that further execution must be stopped.
  *
  * @author xDark
  */

File: recaf-core/src/main/java/me/coley/recaf/util/AccessFlag.java
Patch:
@@ -139,7 +139,7 @@ public static AccessFlag getFlag(String name) {
 	 */
 	public static int createAccess(AccessFlag... flags) {
 		int acc = 0;
-		for (AccessFlag flag : flags) flag.set(acc);
+		for (AccessFlag flag : flags) acc = flag.set(acc);
 		return acc;
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/presentation/GuiPresentation.java
Patch:
@@ -9,7 +9,6 @@
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.ui.util.JFXInjection;
 import me.coley.recaf.util.AccessPatcher;
-import me.coley.recaf.util.LoggerConsumerImpl;
 import me.coley.recaf.util.Threads;
 import me.coley.recaf.util.logging.Logging;
 import org.slf4j.Logger;
@@ -30,8 +29,6 @@ public void initialize(Controller controller) {
 		this.controller = controller;
 		// Patch JDK restrictions
 		AccessPatcher.patch();
-		// Setup logging
-		Logging.addLogConsumer(new LoggerConsumerImpl());
 		// Setup JavaFX
 		JFXInjection.ensureJavafxSupport();
 		JFXUtils.initializePlatform();

File: recaf-ui/src/main/java/me/coley/recaf/util/LoggerConsumerImpl.java
Patch:
@@ -5,6 +5,7 @@
 import org.slf4j.LoggerFactory;
 import org.slf4j.event.Level;
 
+// TODO (should we remove this?)
 /**
  * Logger consumer impl that will allow us to print to the configured {@code 'recaf'} logger.
  *

File: recaf-launcher/src/main/java/dev/xdark/recaf/cli/Arguments.java
Patch:
@@ -27,6 +27,8 @@ public class Arguments implements Callable<Void> {
 	/**
 	 * @param args
 	 * 		Program arguments.
+	 *
+	 * @return Instance.
 	 */
 	public static Arguments from(String[] args) {
 		Arguments parsed = new Arguments();

File: recaf-ui/src/main/java/me/coley/recaf/ui/panel/ClassHierarchyPanel.java
Patch:
@@ -24,7 +24,6 @@
 import me.coley.recaf.util.Threads;
 import me.coley.recaf.code.ClassInfo;
 import org.abego.treelayout.Configuration;
-import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 
 import java.util.Arrays;

File: recaf-ui/src/main/java/me/coley/recaf/ui/util/Icons.java
Patch:
@@ -11,7 +11,6 @@
 import me.coley.recaf.util.AccessFlag;
 import me.coley.recaf.workspace.resource.Resource;
 import me.coley.recaf.workspace.resource.source.*;
-import org.objectweb.asm.Opcodes;
 
 import java.nio.file.Files;
 import java.nio.file.Path;

File: recaf-core/src/main/java/me/coley/recaf/parse/JavaParserResolving.java
Patch:
@@ -154,7 +154,8 @@ public static ItemInfo symbolReferenceToInfo(WorkspaceTypeSolver typeSolver, Sym
 	 * @param resolved
 	 * 		Resolved JavaParser declaration.
 	 *
-	 * @return Either {@code null} if the passed {@link ResolvedDeclaration} is not supported, or one of the following:<ul>
+	 * @return Either {@code null} if the passed {@link ResolvedDeclaration} is not supported,
+	 * or one of the following:<ul>
 	 * <li>{@link me.coley.recaf.code.ClassInfo}</li>
 	 * <li>{@link me.coley.recaf.code.FieldInfo}</li>
 	 * <li>{@link me.coley.recaf.code.MethodInfo}</li>

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/code/BracketSupport.java
Patch:
@@ -40,7 +40,7 @@ private void highlightBracket(int caret) {
 		// Clear previously highlighted pair
 		clearBrackets();
 		// Only highlight if passed caret position is valid
-		if (caret < 0 || caret >= editor.getLength()) {
+		if (caret < 0 || caret > editor.getLength()) {
 			return;
 		}
 		// Ensure the position is that of a bracket character (handling adjacency)

File: recaf-core/src/main/java/me/coley/recaf/Controller.java
Patch:
@@ -1,5 +1,8 @@
 package me.coley.recaf;
 
+import me.coley.recaf.code.ClassInfo;
+import me.coley.recaf.code.DexClassInfo;
+import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.graph.InheritanceGraph;
 import me.coley.recaf.presentation.Presentation;
 import me.coley.recaf.workspace.Workspace;

File: recaf-core/src/main/java/me/coley/recaf/code/CommonClassInfo.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.workspace.resource;
+package me.coley.recaf.code;
 
 import java.util.List;
 
@@ -31,10 +31,10 @@ public interface CommonClassInfo {
 	/**
 	 * @return Class's declared fields.
 	 */
-	List<MemberInfo> getFields();
+	List<FieldInfo> getFields();
 
 	/**
 	 * @return Class's declared methods.
 	 */
-	List<MemberInfo> getMethods();
+	List<MethodInfo> getMethods();
 }

File: recaf-core/src/main/java/me/coley/recaf/code/FileInfo.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.workspace.resource;
+package me.coley.recaf.code;
 
 /**
  * File info for resource.

File: recaf-core/src/main/java/me/coley/recaf/code/ItemInfo.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.workspace.resource;
+package me.coley.recaf.code;
 
 /**
  * Base outline for a resource item.

File: recaf-core/src/main/java/me/coley/recaf/code/LiteralInfo.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.workspace.resource;
+package me.coley.recaf.code;
 
 /**
  * Literal item that contains an absolute value. This is opposed to an item info that contains data that cannot be

File: recaf-core/src/main/java/me/coley/recaf/decompile/DecompileResult.java
Patch:
@@ -1,7 +1,7 @@
 package me.coley.recaf.decompile;
 
 import me.coley.recaf.plugin.tools.ToolResult;
-import me.coley.recaf.workspace.resource.ClassInfo;
+import me.coley.recaf.code.ClassInfo;
 
 /**
  * Decompile result wrapper.

File: recaf-core/src/main/java/me/coley/recaf/decompile/Decompiler.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.coley.recaf.plugin.tools.Tool;
 import me.coley.recaf.workspace.Workspace;
-import me.coley.recaf.workspace.resource.ClassInfo;
+import me.coley.recaf.code.ClassInfo;
 
 import java.util.Map;
 

File: recaf-core/src/main/java/me/coley/recaf/presentation/EmptyPresentation.java
Patch:
@@ -1,6 +1,9 @@
 package me.coley.recaf.presentation;
 
 import me.coley.recaf.Controller;
+import me.coley.recaf.code.ClassInfo;
+import me.coley.recaf.code.DexClassInfo;
+import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.resource.*;
 

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/ClassMap.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.workspace.resource;
 
+import me.coley.recaf.code.ClassInfo;
+
 import java.util.HashMap;
 
 /**

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/DexClassMap.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.workspace.resource;
 
+import me.coley.recaf.code.DexClassInfo;
 import org.jf.dexlib2.Opcodes;
 import org.jf.dexlib2.iface.ClassDef;
 import org.jf.dexlib2.iface.DexFile;

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/FileMap.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.workspace.resource;
 
+import me.coley.recaf.code.FileInfo;
+
 import java.util.HashMap;
 
 /**

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/ResourceClassListener.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.workspace.resource;
 
+import me.coley.recaf.code.ClassInfo;
+
 /**
  * Listener for receiving class updates from a {@link Resource}.
  *

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/ResourceDexClassListener.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.workspace.resource;
 
+import me.coley.recaf.code.DexClassInfo;
+
 /**
  * Listener for receiving dex class updates from a {@link Resource}.
  *

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/ResourceFileListener.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.workspace.resource;
 
+import me.coley.recaf.code.FileInfo;
+
 /**
  * Listener for receiving file updates from a {@link Resource}.
  *

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/ResourceItemMap.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.workspace.resource;
 
+import me.coley.recaf.code.ItemInfo;
 import me.coley.recaf.util.logging.Logging;
 import org.slf4j.Logger;
 

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/source/ApkContentSource.java
Patch:
@@ -1,8 +1,8 @@
 package me.coley.recaf.workspace.resource.source;
 
-import me.coley.recaf.workspace.resource.DexClassInfo;
+import me.coley.recaf.code.DexClassInfo;
 import me.coley.recaf.workspace.resource.DexClassMap;
-import me.coley.recaf.workspace.resource.FileInfo;
+import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.workspace.resource.Resource;
 import org.jf.dexlib2.Opcodes;
 import org.jf.dexlib2.dexbacked.DexBackedClassDef;

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/source/ClassContentSource.java
Patch:
@@ -1,8 +1,8 @@
 package me.coley.recaf.workspace.resource.source;
 
 import me.coley.recaf.util.logging.Logging;
-import me.coley.recaf.workspace.resource.ClassInfo;
-import me.coley.recaf.workspace.resource.FileInfo;
+import me.coley.recaf.code.ClassInfo;
+import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.workspace.resource.Resource;
 import org.apache.commons.io.IOUtils;
 import org.slf4j.Logger;

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/source/ContainerContentSource.java
Patch:
@@ -1,8 +1,8 @@
 package me.coley.recaf.workspace.resource.source;
 
 import me.coley.recaf.util.logging.Logging;
-import me.coley.recaf.workspace.resource.ClassInfo;
-import me.coley.recaf.workspace.resource.FileInfo;
+import me.coley.recaf.code.ClassInfo;
+import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.workspace.resource.Resource;
 import org.slf4j.Logger;
 

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/source/ContentSourceListener.java
Patch:
@@ -1,8 +1,8 @@
 package me.coley.recaf.workspace.resource.source;
 
-import me.coley.recaf.workspace.resource.ClassInfo;
-import me.coley.recaf.workspace.resource.DexClassInfo;
-import me.coley.recaf.workspace.resource.FileInfo;
+import me.coley.recaf.code.ClassInfo;
+import me.coley.recaf.code.DexClassInfo;
+import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.workspace.resource.Resource;
 
 import java.nio.file.Path;

File: recaf-core/src/test/java/me/coley/recaf/compile/JavacTests.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.coley.recaf.TestUtils;
 import me.coley.recaf.compile.javac.JavacCompiler;
-import me.coley.recaf.workspace.resource.ClassInfo;
+import me.coley.recaf.code.ClassInfo;
 import org.junit.jupiter.api.Test;
 import org.objectweb.asm.Opcodes;
 

File: recaf-core/src/test/java/me/coley/recaf/workspace/resource/ResourceTests.java
Patch:
@@ -1,6 +1,9 @@
 package me.coley.recaf.workspace.resource;
 
 import me.coley.recaf.TestUtils;
+import me.coley.recaf.code.ClassInfo;
+import me.coley.recaf.code.DexClassInfo;
+import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.workspace.resource.source.*;
 import org.junit.jupiter.api.Test;
 

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/WorkspaceCell.java
Patch:
@@ -12,8 +12,8 @@
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.util.logging.Logging;
 import me.coley.recaf.workspace.Workspace;
-import me.coley.recaf.workspace.resource.ClassInfo;
-import me.coley.recaf.workspace.resource.DexClassInfo;
+import me.coley.recaf.code.ClassInfo;
+import me.coley.recaf.code.DexClassInfo;
 import org.slf4j.Logger;
 
 import java.util.HashMap;

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/tree/item/RootItem.java
Patch:
@@ -1,5 +1,8 @@
 package me.coley.recaf.ui.control.tree.item;
 
+import me.coley.recaf.code.ClassInfo;
+import me.coley.recaf.code.DexClassInfo;
+import me.coley.recaf.code.FileInfo;
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.WorkspaceListener;

File: recaf-ui/src/main/java/me/coley/recaf/ui/panel/WelcomePanel.java
Patch:
@@ -57,6 +57,8 @@ private void addChildren() {
 		getChildren().add(new DocumentationPane());
 		getChildren().add(new GithubPane());
 		getChildren().add(new DiscordPane());
+		// TODO: Add a panel like eclipse's step-by-step basic configuration
+		//  - configure common options like "what do you want to do when dropping a jar file into Recaf?"
 	}
 
 	/**

File: recaf-ui/src/main/java/me/coley/recaf/ui/panel/WorkspaceButtonsPanel.java
Patch:
@@ -12,6 +12,7 @@
  *
  * @author Matt Coley
  */
+// TODO: Tooltips on buttons
 public class WorkspaceButtonsPanel extends BorderPane {
 	private final Button btnHide;
 	private final Button btnCase;

File: recaf-ui/src/main/java/me/coley/recaf/ui/window/MainWindow.java
Patch:
@@ -40,9 +40,6 @@ protected Scene createScene() {
 		// Mark main content region for new tabs
 		DetachableTabPane contentWrapper = (DetachableTabPane) initialSplit.getItems().get(1);
 		dockingRootPane.setRecentTabPane(contentWrapper);
-		// TODO: Make it so the workspace panel does not scale when dropped into a new location
-		//SplitPane.setResizableWithParent(workspacePanel, Boolean.FALSE);
-		//SplitPane.setResizableWithParent(horizontal, Boolean.FALSE);
 		return new Scene(dockingRootPane);
 	}
 

File: recaf-ui/src/main/java/me/coley/recaf/presentation/GuiPresentation.java
Patch:
@@ -8,6 +8,7 @@
 import me.coley.recaf.ui.util.JFXUtils;
 import me.coley.recaf.ui.util.Lang;
 import me.coley.recaf.ui.util.JFXInjection;
+import me.coley.recaf.util.AccessPatcher;
 import me.coley.recaf.util.LoggerConsumerImpl;
 import me.coley.recaf.util.Threads;
 import me.coley.recaf.util.logging.Logging;
@@ -25,6 +26,8 @@ public class GuiPresentation implements Presentation {
 	@Override
 	public void initialize(Controller controller) {
 		this.controller = controller;
+		// Patch JDK restrictions
+		AccessPatcher.patch();
 		// Setup logging
 		Logging.addLogConsumer(new LoggerConsumerImpl());
 		// Setup JavaFX

File: recaf-ui/src/main/java/me/coley/recaf/ui/control/LoggingTextArea.java
Patch:
@@ -65,7 +65,9 @@ private void addLog(String loggerName, Level level, String messageContent) {
 	 */
 	private void scrollToBottom() {
 		codeArea.moveTo(codeArea.getText().length());
-		codeArea.scrollYToPixel(codeArea.getTotalHeightEstimate());
+		// Option may not be set initially
+		if (codeArea.totalHeightEstimateProperty().isPresent())
+			codeArea.scrollYToPixel(codeArea.getTotalHeightEstimate());
 	}
 
 	/**

File: recaf-core/src/main/java/me/coley/recaf/plugin/api/Plugin.java
Patch:
@@ -1,7 +1,7 @@
 package me.coley.recaf.plugin.api;
 
 /**
- * Base annotation.
+ * Base plugin interface, no default behavior.
  *
  * @author Matt Coley
  */

File: recaf-core/src/main/java/me/coley/recaf/android/cf/MutableMethod.java
Patch:
@@ -208,7 +208,7 @@ public static boolean isDirect(Method method) {
 	public static MutableMethodImplementation copyImpl(MethodImplementation implementation) {
 		if (implementation == null)
 			return null;
-		return new MutableMethodImplementation(implementation);
+		return new MutableMethodImplementationExt(implementation);
 	}
 
 	/**

File: recaf-core/src/main/java/me/coley/recaf/workspace/resource/DexClassInfo.java
Patch:
@@ -1,10 +1,9 @@
 package me.coley.recaf.workspace.resource;
 
-import me.coley.recaf.dex.MutableClassDef;
+import me.coley.recaf.android.cf.MutableClassDef;
 import org.jf.dexlib2.dexbacked.DexBackedClassDef;
 import org.jf.dexlib2.dexbacked.DexBackedMethod;
 import org.jf.dexlib2.iface.ClassDef;
-import org.jf.dexlib2.util.TypeUtils;
 import org.objectweb.asm.Type;
 
 import java.util.ArrayList;

File: recaf-core/src/main/java/me/coley/recaf/plugin/tools/Tool.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.plugin.tools;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
 
@@ -39,10 +40,10 @@ public String getVersion() {
 	}
 
 	/**
-	 * @return Map of default options used by the tool.
+	 * @return Copy of default options used by the tool.
 	 */
 	public Map<String, T> getDefaultOptions() {
-		return defaultOptions;
+		return new HashMap<>(defaultOptions);
 	}
 
 	/**

File: recaf-core/src/main/java/me/coley/recaf/decompile/DecompileResult.java
Patch:
@@ -45,7 +45,8 @@ private DecompileResult(Decompiler decompiler, ClassInfo classInfo, String decom
 	}
 
 	/**
-	 * Indicates if the result contains either a {@link #getDecompiledText() text output} or {@link #getException() error}.
+	 * Indicates if the result contains either a {@link #getDecompiledText() text output}
+	 * or {@link #getException() error}.
 	 *
 	 * @return {@code true} if {@link #getDecompiledText()}
 	 */

File: recaf-core/src/test/java/me/coley/recaf/workspace/resource/ResourceTests.java
Patch:
@@ -33,7 +33,7 @@ void testResourcesClassLookup() throws IOException {
 
 	@Test
 	void testResourcesFileLookup() throws IOException {
-		Resource primary = new Resource(new WarContentSource(sourcesDir.resolve("sample.war")));
+		Resource primary = new Resource(new WarContentSource(sourcesDir.resolve("Sample.war")));
 		primary.read();
 		// Validate the file exists
 		assertTrue(primary.getFiles().containsKey("hello.jsp"));

File: recaf-core/src/test/java/me/coley/recaf/workspace/resource/ResourceTests.java
Patch:
@@ -16,8 +16,8 @@
 public class ResourceTests extends TestUtils {
 	@Test
 	void testResourcesClassLookup() throws IOException {
-		Resource primary = new Resource(new JarContentSource(sourcesDir.resolve("sample.jar")));
-		Resource secondary = new Resource(new WarContentSource(sourcesDir.resolve("sample.war")));
+		Resource primary = new Resource(new JarContentSource(sourcesDir.resolve("Sample.jar")));
+		Resource secondary = new Resource(new WarContentSource(sourcesDir.resolve("Sample.war")));
 		primary.read();
 		secondary.read();
 		// Validate the classes exist

File: recaf-core/src/test/java/me/coley/recaf/TestUtils.java
Patch:
@@ -3,7 +3,6 @@
 import org.junit.jupiter.api.Assumptions;
 
 import java.net.HttpURLConnection;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.Path;

File: recaf-core/src/test/java/me/coley/recaf/workspace/resource/ResourceTests.java
Patch:
@@ -10,6 +10,9 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
+/**
+ * Tests for resource handling.
+ */
 public class ResourceTests extends TestUtils {
 	@Test
 	void testResourcesClassLookup() throws IOException {

File: recaf-core/src/test/java/me/coley/recaf/workspace/resource/source/ContentSourceTests.java
Patch:
@@ -8,6 +8,9 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
+/**
+ * Tests for content sources.
+ */
 public class ContentSourceTests extends TestUtils {
 	@Test
 	void testReadEmpty() {

File: recaf-launcher/src/main/java/dev/xdark/recaf/Launcher.java
Patch:
@@ -134,7 +134,7 @@ public static void main(String[] args) {
         logger.error("Unable to get Recaf version: ", ex);
       }
       if (version == null) {
-        logger.error("Version detected has failed");
+        logger.error("Version detection has failed");
         logger.error("Ensure that Recaf's jar file is not damaged, or");
         logger.error("open an issue if you think that it's an error: ");
         logger.error(ISSUES_URL);

File: recaf-launcher/src/main/java/dev/xdark/launcher/Asset.java
Patch:
@@ -22,7 +22,6 @@ public final class Asset {
 
   /**
    * Download URL.
-   * May be {@code null}.
    */
   @SerializedName("browser_download_url")
   private final String url;
@@ -39,7 +38,7 @@ public final class Asset {
   public Asset(String name, int size, String url) {
     this.name = Objects.requireNonNull(name, "name");
     this.size = size;
-    this.url = url;
+    this.url = Objects.requireNonNull(url, "url");
   }
 
   /**
@@ -58,7 +57,6 @@ public int getSize() {
 
   /**
    * @return asset's download URL.
-   * May be {@code null}.
    */
   public String getUrl() {
     return url;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -30,7 +30,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.16.6";
+	public static final String VERSION = "2.16.7";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf-documentation/";
 	public static final int ASM_VERSION = Opcodes.ASM9;
 	private static Controller currentController;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -30,7 +30,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.16.5";
+	public static final String VERSION = "2.16.6";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf-documentation/";
 	public static final int ASM_VERSION = Opcodes.ASM9;
 	private static Controller currentController;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -30,8 +30,8 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.16.4";
-	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
+	public static final String VERSION = "2.16.5";
+	public static final String DOC_URL = "https://col-e.github.io/Recaf-documentation/";
 	public static final int ASM_VERSION = Opcodes.ASM9;
 	private static Controller currentController;
 	private static Workspace currentWorkspace;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -30,7 +30,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.16.3";
+	public static final String VERSION = "2.16.4";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	public static final int ASM_VERSION = Opcodes.ASM9;
 	private static Controller currentController;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -30,7 +30,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.16.2";
+	public static final String VERSION = "2.16.3";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	public static final int ASM_VERSION = Opcodes.ASM9;
 	private static Controller currentController;

File: src/main/java/me/coley/recaf/compiler/JavacCompiler.java
Patch:
@@ -23,7 +23,7 @@
 public class JavacCompiler {
 	private List<String> pathItems;
 	private final Map<String, VirtualJavaFileObject> unitMap = new HashMap<>();
-	private final Options options = new Options();
+	private final JavacOptions options = new JavacOptions();
 	private DiagnosticListener<VirtualJavaFileObject> listener;
 
 	/**
@@ -137,7 +137,7 @@ public Map<String, byte[]> getUnits() {
 	/**
 	 * @return Compiler options.
 	 */
-	public Options options() {
+	public JavacOptions options() {
 		return options;
 	}
 

File: src/main/java/me/coley/recaf/compiler/JavassistASMTranslator.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.parse.bytecode;
+package me.coley.recaf.compiler;
 
 import javassist.CtBehavior;
 import me.coley.recaf.util.OpcodeUtil;

File: src/test/java/me/coley/recaf/CompilerTest.java
Patch:
@@ -70,7 +70,7 @@ public void testDebug() {
 		cDebug.options().lineNumbers = true;
 		cDebug.options().variables = true;
 		cDebug.options().sourceName = true;
-		cDebug.options().setTarget(TargetVersion.V8);
+		cDebug.options().setTarget(JavacTargetVersion.V8);
 		cDebug.setCompileListener(FAIL_ON_ERROR);
 		assertTrue(cDebug.compile());
 		JavacCompiler cNone = new JavacCompiler();

File: src/test/java/me/coley/recaf/ExpressionCompilerTest.java
Patch:
@@ -2,12 +2,11 @@
 
 import javassist.*;
 import javassist.bytecode.*;
-import me.coley.recaf.parse.bytecode.JavassistASMTranslator;
+import me.coley.recaf.compiler.JavassistASMTranslator;
 import me.coley.recaf.parse.bytecode.Disassembler;
-import me.coley.recaf.parse.bytecode.JavassistCompiler;
+import me.coley.recaf.compiler.JavassistCompiler;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
-import org.objectweb.asm.tree.*;
 
 import java.util.Collections;
 

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -30,7 +30,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.16.0";
+	public static final String VERSION = "2.16.1";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	public static final int ASM_VERSION = Opcodes.ASM9;
 	private static Controller currentController;

File: src/main/java/me/coley/recaf/parse/bytecode/MethodAssembler.java
Patch:
@@ -112,10 +112,11 @@ public MethodNode compile(ParseResult<RootAST> result) throws AssemblerException
 		if (config.verify)
 			lastVerifier = verify(node);
 		if (config.variables) {
- 			// Compute variable information
+			// Compute variable information
 			VariableGenerator variables = new VariableGenerator(variableNames, compilation, node);
 			variables.computeVariables(lastVerifier);
-			node.localVariables = variables.getVariables();
+			if (variables.getVariables() != null)
+				node.localVariables.addAll(variables.getVariables());
 		}
 		// Call complete to notify we are done
 		compilation.onCompletion();

File: src/test/java/me/coley/recaf/ExpressionCompilerTest.java
Patch:
@@ -66,7 +66,7 @@ private String disassembleMethod(CtClass owner, String src) throws CannotCompile
 	}
 
 	private String disassembleStatement(CtClass owner, CtBehavior method, String src) throws CannotCompileException, BadBytecode {
-		Bytecode compiled = JavassistCompiler.compileExpression(owner, method, src, Collections.emptyList());
+		Bytecode compiled = JavassistCompiler.compileExpression(owner, method, src, Collections.emptyList(), null).getBytecode();
 		return translate(owner, method, compiled.toCodeAttribute());
 	}
 

File: src/main/java/me/coley/recaf/parse/bytecode/VariableGenerator.java
Patch:
@@ -48,7 +48,7 @@ private int computeArgUsedIndices() {
 	 * Visit the method with verifier information.
 	 *
 	 * @param verifier
-	 * 		Verifier with analysis data.
+	 * 		Verifier with analysis data. May be {@code null}.
 	 */
 	void computeVariables(MethodVerifier verifier) throws AssemblerException {
 		// Compute the variable indices to their assigned types
@@ -90,7 +90,7 @@ void computeVariables(MethodVerifier verifier) throws AssemblerException {
 				//       See above note.
 				if (!names.isEmpty())
 					computeSimple(index, names.iterator().next());
-			} else {
+			} else if (verifier != null) {
 				computeScoped(index, verifier);
 			}
 		}

File: src/test/java/me/coley/recaf/ExpressionCompilerTest.java
Patch:
@@ -9,6 +9,8 @@
 import org.junit.jupiter.api.Test;
 import org.objectweb.asm.tree.*;
 
+import java.util.Collections;
+
 public class ExpressionCompilerTest extends Base {
 	private final ClassPool pool = ClassPool.getDefault();
 	private final JavassistASMTranslator translator = new JavassistASMTranslator();
@@ -64,7 +66,7 @@ private String disassembleMethod(CtClass owner, String src) throws CannotCompile
 	}
 
 	private String disassembleStatement(CtClass owner, CtBehavior method, String src) throws CannotCompileException, BadBytecode {
-		Bytecode compiled = JavassistCompiler.compileExpression(owner, method, src);
+		Bytecode compiled = JavassistCompiler.compileExpression(owner, method, src, Collections.emptyList());
 		return translate(owner, method, compiled.toCodeAttribute());
 	}
 

File: src/main/java/me/coley/recaf/ui/controls/SplitableTabPane.java
Patch:
@@ -153,7 +153,7 @@ protected Stage createTabStage(Tab tab) {
 		if (content == null)
 			throw new IllegalArgumentException("Cannot detach '" + tab.getText() + "' because content is null");
 		// Remove content from tab
-		getTabs().remove(tab);
+		closeTab(tab);
 		// Create stage
 		SplitableTabPane tabPaneCopy = newTabPane();
 		tabPaneCopy.getTabs().add(tab);

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeEditorPane.java
Patch:
@@ -73,8 +73,9 @@ public BytecodeEditorPane(GuiController controller, String className, String mem
 					MethodNode existingMethod = ClassUtil.getMethod(controller.getWorkspace()
 							.getClassReader(className), 0, memberName, memberDesc);
 					if (existingMethod != null && existingMethod.localVariables != null) {
-						// We call the disassembler's method here so that any changes the disassembler
+						// We call the disassembler's methods here so that any changes the disassembler
 						// makes to the local variables is what gets populated as default information
+						Disassembler.splitSameIndexedVariablesOfDiffNames(existingMethod);
 						Disassembler.splitSameNamedVariablesOfDiffTypes(existingMethod);
 						assembler.setDefaultVariables(existingMethod.localVariables);
 					}

File: src/main/java/me/coley/recaf/ui/controls/RenamingTextField.java
Patch:
@@ -205,7 +205,7 @@ public static RenamingTextField forMember(GuiController controller, String owner
 				// A child class may refer to a parent class member, using the child class as an owner.
 				// However, once a child class introduces a shadowing field name, we want to stop introducing
 				// children as owners for this mapping run.
-				map.put(owner + "." + name, popup.getText());
+				map.put(owner + "." + name + " " + desc, popup.getText());
 				Workspace workspace = controller.getWorkspace();
 				workspace.getHierarchyGraph()
 						.getAllDescendantsWithBreakCondition(owner,

File: src/main/java/me/coley/recaf/mapping/EnigmaMappings.java
Patch:
@@ -35,7 +35,7 @@ public class EnigmaMappings extends FileMappings {
 	}
 	
 	private static String removeNonePackage(String text){
-		return text.replaceAll("(^|(?<=L))none/, "");
+		return text.replaceAll("(^|(?<=L))none/", "");
 	}
 
 	@Override

File: src/main/java/me/coley/recaf/mapping/EnigmaMappings.java
Patch:
@@ -35,7 +35,7 @@ public class EnigmaMappings extends FileMappings {
 	}
 	
 	private static String removeNonePackage(String text){
-		return text.replaceAll("(^|(<?L))none/", "");
+		return text.replaceAll("(^|(?<=L))none/, "");
 	}
 
 	@Override

File: src/main/java/me/coley/recaf/mapping/EnigmaMappings.java
Patch:
@@ -35,7 +35,7 @@ public class EnigmaMappings extends FileMappings {
 	}
 	
 	private static String removeNonePackage(String text){
-		return text.replaceAll("(^|L)none/", "");
+		return text.replaceAll("(^|(<?L))none/", "");
 	}
 
 	@Override

File: src/main/java/me/coley/recaf/util/JavaParserUtil.java
Patch:
@@ -406,6 +406,8 @@ public static String getDescriptor(MethodDeclaration md) {
 			String pDesc = getDescriptor(pType);
 			if (pDesc == null)
 				return null;
+			if (param.isVarArgs())
+				pDesc = "[" + pDesc;
 			sbDesc.append(pDesc);
 		}
 		// Append the return type for the descriptor

File: src/main/java/me/coley/recaf/workspace/Workspace.java
Patch:
@@ -452,7 +452,7 @@ public void updateSourceConfig() {
 		TypeSolver solver = new WorkspaceTypeResolver(this);
 		config = new ParserConfiguration()
 				.setSymbolResolver(new JavaSymbolSolver(solver))
-				.setLanguageLevel(ParserConfiguration.LanguageLevel.JAVA_14);
+				.setLanguageLevel(ParserConfiguration.LanguageLevel.JAVA_16);
 	}
 
 	/**

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -30,7 +30,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.13.1";
+	public static final String VERSION = "2.13.2";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	public static final int ASM_VERSION = Opcodes.ASM9;
 	private static Controller currentController;

File: src/main/java/me/coley/recaf/parse/bytecode/MethodAssembler.java
Patch:
@@ -153,6 +153,8 @@ public void setDefaultVariables(Collection<LocalVariableNode> defaultVariables)
 	 * @return Analyzed frames. Will be {@code null} if analysis failed.
 	 */
 	public Frame<AbstractValue>[] getFrames() {
+		if (lastVerifier == null)
+			return null;
 		return lastVerifier.getFrames();
 	}
 

File: src/main/java/me/coley/recaf/plugin/PluginsManager.java
Patch:
@@ -148,7 +148,7 @@ public void setEntryLoader(EntryLoader entryLoader) {
 	public <T extends BasePlugin> Collection<T> ofType(Class<T> type) {
 		return plugins().values().stream()
 						.filter(plugin -> type.isAssignableFrom(plugin.getClass()))
-						.filter(plugin -> pluginStates.containsKey(plugin.getName()))
+						.filter(plugin -> pluginStates.getOrDefault(plugin.getName(), false))
 						.map(plugin -> (T) plugin)
 						.collect(Collectors.toList());
 	}

File: src/main/java/me/coley/recaf/parse/bytecode/MethodCompilation.java
Patch:
@@ -18,7 +18,6 @@
  * @author xxDark
  */
 public final class MethodCompilation {
-
     private final ParseResult<RootAST> ast;
     private final MethodDefinitionAST methodDefinition;
     private final MethodNode node;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -29,7 +29,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.12.0";
+	public static final String VERSION = "2.12.1";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	public static final int ASM_VERSION = Opcodes.ASM9;
 	private static Controller currentController;

File: src/main/java/me/coley/recaf/config/ConfDisplay.java
Patch:
@@ -58,7 +58,7 @@ public class ConfDisplay extends Config {
 	@Conf("display.maxrecent")
 	public long maxRecentFiles = 6;
 	/**
-	 * Use system menubar if it is possible.
+	 * Use system menubar on macOS.
 	 */
 	@Conf("display.usesystemmenubar")
 	public boolean useSystemMenubar;

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -48,7 +48,7 @@ public ConfigPane(GuiController controller, ConfDisplay config) {
 		editorOverrides.put("display.forceWordWrap", Toggle::new);
 		editorOverrides.put("display.suggest.classerrors", Toggle::new);
 		editorOverrides.put("display.maxrecent", v -> new NumberSlider<>(controller, v, 0, 20, 2));
-		editorOverrides.put("usesystemmenubar", Toggle::new);
+		editorOverrides.put("display.usesystemmenubar", Toggle::new); // macOS feature
 		setupConfigControls(config);
 	}
 

File: src/main/java/me/coley/recaf/command/impl/Initializer.java
Patch:
@@ -58,7 +58,7 @@ public void run() {
 		if(instrument)
 			InstrumentationResource.setup(controller);
 		else if (controller.config().backend().firstTime)
-			promptFirstTime();
+			if (script==null) promptFirstTime();
 	}
 
 	/**
@@ -119,4 +119,4 @@ private boolean isHeadless() {
 	public Controller getController() {
 		return controller;
 	}
-}
\ No newline at end of file
+}

File: src/main/java/me/coley/recaf/ui/controls/ColumnPane.java
Patch:
@@ -11,8 +11,8 @@
  * @author Matt
  */
 public class ColumnPane extends BorderPane {
-	private final GridPane grid = new GridPane();
-	private int row;
+	protected final GridPane grid = new GridPane();
+	protected int row;
 
 	/**
 	 * Setup grid.

File: src/main/java/me/coley/recaf/config/ConfBackend.java
Patch:
@@ -31,17 +31,17 @@ public class ConfBackend extends Config {
 	/**
 	 * Recent path used by the save-application dialog.
 	 */
-	@Conf("backend.recentsave")
+	@Conf("backend.recentsave.app")
 	public String recentSaveApp = CURRENT_DIR;
 	/**
 	 * Recent path used by the save-workspace dialog.
 	 */
-	@Conf("backend.recentsave")
+	@Conf("backend.recentsave.workspace")
 	public String recentSaveWorkspace = CURRENT_DIR;
 	/**
 	 * Recent path used by the save-map dialog.
 	 */
-	@Conf("backend.recentsave")
+	@Conf("backend.recentsave.map")
 	public String recentSaveMap = CURRENT_DIR;
 	/**
 	 * Check to determine if user should be told to read the documentation.

File: src/main/java/me/coley/recaf/graph/inheritance/HierarchyGraph.java
Patch:
@@ -284,7 +284,7 @@ public void refresh() {
 		descendents.clear();
 		for (ClassReader reader : getWorkspace().getPrimaryClassReaders()) {
 			String superName = reader.getSuperName();
-			if (!superName.equals("java/lang/Object"))
+			if (superName == null || !superName.equals("java/lang/Object"))
 				descendents.computeIfAbsent(superName, k -> new HashSet<>()).add(reader.getClassName());
 			for (String inter : reader.getInterfaces()) {
 				descendents.computeIfAbsent(inter, k -> new HashSet<>()).add(reader.getClassName());

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -73,8 +73,8 @@ else if(!args.contains("--instrument"))
 	 */
 	private static void init() {
 		if (!initialized) {
-			// TODO: Bypass JDK restrictions.
-			// VMUtil.patch();
+			// Bypass JDK restrictions.
+			VMUtil.patch();
 			// Patch in dependencies
 			SelfDependencyPatcher.patch();
 			// Fix title bar not displaying in GTK systems

File: src/main/java/me/coley/recaf/plugin/PluginFolderSource.java
Patch:
@@ -55,8 +55,7 @@ public Collection<Class<?>> load() throws PluginLoadException {
 		List<Class<?>> plugins = new ArrayList<>();
 		PluginClassLoader loader =
 				new PluginClassLoader(pluginJarUrls.values().toArray(new URL[0]));
-		// TODO: Fix, why does the "parent" field not exist?
-		// VMUtil.setParent(loader, Recaf.class.getClassLoader());
+		VMUtil.setParent(loader, Recaf.class.getClassLoader());
 		for(Path pluginPath : pluginJarUrls.keySet()) {
 			File path = pluginPath.toAbsolutePath().toFile();
 			String className = null;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -28,7 +28,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.9.1";
+	public static final String VERSION = "2.9.2";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	private static Controller currentController;
 	private static Workspace currentWorkspace;
@@ -73,8 +73,8 @@ else if(!args.contains("--instrument"))
 	 */
 	private static void init() {
 		if (!initialized) {
-			// Bypass JDK restrictions.
-			VMUtil.patch();
+			// TODO: Bypass JDK restrictions.
+			// VMUtil.patch();
 			// Patch in dependencies
 			SelfDependencyPatcher.patch();
 			// Fix title bar not displaying in GTK systems

File: src/main/java/me/coley/recaf/plugin/PluginFolderSource.java
Patch:
@@ -55,7 +55,8 @@ public Collection<Class<?>> load() throws PluginLoadException {
 		List<Class<?>> plugins = new ArrayList<>();
 		PluginClassLoader loader =
 				new PluginClassLoader(pluginJarUrls.values().toArray(new URL[0]));
-		VMUtil.setParent(loader, Recaf.class.getClassLoader());
+		// TODO: Fix, why does the "parent" field not exist?
+		// VMUtil.setParent(loader, Recaf.class.getClassLoader());
 		for(Path pluginPath : pluginJarUrls.keySet()) {
 			File path = pluginPath.toAbsolutePath().toFile();
 			String className = null;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -28,7 +28,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.9.0";
+	public static final String VERSION = "2.9.1";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	private static Controller currentController;
 	private static Workspace currentWorkspace;

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -8,6 +8,7 @@
 import me.coley.recaf.plugin.api.EntryLoaderProviderPlugin;
 import me.coley.recaf.util.Log;
 import me.coley.recaf.util.Natives;
+import me.coley.recaf.util.VMUtil;
 import me.coley.recaf.util.self.SelfDependencyPatcher;
 import me.coley.recaf.util.self.SelfUpdater;
 import me.coley.recaf.workspace.InstrumentationResource;
@@ -72,6 +73,8 @@ else if(!args.contains("--instrument"))
 	 */
 	private static void init() {
 		if (!initialized) {
+			// Bypass JDK restrictions.
+			VMUtil.patch();
 			// Patch in dependencies
 			SelfDependencyPatcher.patch();
 			// Fix title bar not displaying in GTK systems

File: src/main/java/me/coley/recaf/util/ClasspathUtil.java
Patch:
@@ -186,7 +186,7 @@ private static boolean checkBootstrapClassExists(Collection<String> names) {
 	}
 
 	private static Set<String> scanBootstrapClasses() throws Exception {
-		float vmVersion = VMUtil.getVmVersion();
+		int vmVersion = VMUtil.getVmVersion();
 		Set<String> classes = new LinkedHashSet<>(4096, 1F);
 		if (vmVersion < 9) {
 			Method method = ClassLoader.class.getDeclaredMethod("getBootstrapClassPath");

File: src/main/java/me/coley/recaf/util/self/SelfDependencyPatcher.java
Patch:
@@ -1,6 +1,5 @@
 package me.coley.recaf.util.self;
 
-import com.nqzero.permit.Permit;
 import me.coley.recaf.Recaf;
 import me.coley.recaf.util.ClasspathUtil;
 import me.coley.recaf.util.Log;
@@ -123,8 +122,6 @@ private static void loadFromCache() throws IOException, ReflectiveOperationExcep
 				Log.error(ex, "Failed to convert '%s' to URL", path.toFile().getAbsolutePath());
 			}
 		});
-		// Bypass the access system
-		Permit.godMode();
 		// Fetch UCP of application's ClassLoader
 		// - ((ClassLoaders.AppClassLoader) ClassLoaders.appClassLoader()).ucp
 		Class<?> clsClassLoaders = Class.forName("jdk.internal.loader.ClassLoaders");

File: src/main/java/me/coley/recaf/compiler/JavacCompiler.java
Patch:
@@ -45,7 +45,7 @@ public boolean compile() {
 		args.addAll(Arrays.asList("-classpath", getClassPathText()));
 		if (VMUtil.getVmVersion() >= 9) {
 			// For Java 9 and later, use release instead of the source/target pair
-			args.addAll(Arrays.asList("--release", this.options.getTarget().toString()));
+			args.addAll(Arrays.asList("--release", String.valueOf(this.options.getTarget().version())));
 		} else {
 			args.addAll(Arrays.asList("-source", this.options.getTarget().toString()));
 			args.addAll(Arrays.asList("-target", this.options.getTarget().toString()));

File: src/main/java/me/coley/recaf/mapping/Mappings.java
Patch:
@@ -182,7 +182,7 @@ private void accept(Map<String, byte[]> updated, ClassReader cr, int readFlags,
 				.ofType(ClassVisitorPlugin.class)) {
 			visitor = visitorPlugin.intercept(visitor);
 		}
-		ClassRemapper adapter = new ClassRemapper(visitor, mapper);
+		ClassRemapper adapter = new LenientClassRemapper(visitor, mapper);
 		if (clearDebugInfo)
 			readFlags |= ClassReader.SKIP_DEBUG;
 		cr.accept(adapter, readFlags);

File: src/main/java/me/coley/recaf/mapping/Mappings.java
Patch:
@@ -164,7 +164,7 @@ private void accept(Map<String, byte[]> updated, ClassReader cr) {
 			accept(updated, cr, ClassReader.SKIP_FRAMES, ClassWriter.COMPUTE_FRAMES);
 		} catch(IllegalArgumentException ex) {
 			// ASM throws: "JSR/RET are not supported with computeFrames option"
-			if (ex.getMessage().contains("JSR/RET")) {
+			if (ex.getMessage() != null && ex.getMessage().contains("JSR/RET")) {
 				accept(updated, cr, ClassReader.EXPAND_FRAMES, ClassWriter.COMPUTE_MAXS);
 			}
 		}

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -59,7 +59,7 @@ private static void agent(String args, Instrumentation inst) {
 		// Add instrument launch arg
 		if(args == null || args.trim().isEmpty())
 			args = "--instrument";
-		else if(args.contains("--instrument"))
+		else if(!args.contains("--instrument"))
 			args = args + ",--instrument";
 		// Set instance
 		// Start Recaf

File: src/main/java/me/coley/recaf/ui/controls/SearchPane.java
Patch:
@@ -7,6 +7,7 @@
 import me.coley.recaf.control.gui.GuiController;
 import me.coley.recaf.search.*;
 import me.coley.recaf.ui.controls.tree.*;
+import me.coley.recaf.util.LangUtil;
 import me.coley.recaf.util.Log;
 import me.coley.recaf.workspace.Workspace;
 
@@ -41,7 +42,7 @@ public SearchPane(GuiController controller, QueryType type) {
 		setDividerPositions(0.5);
 		tree.setCellFactory(e -> new JavaResourceCell());
 		ColumnPane params = new ColumnPane();
-		Button btn = new Button("Search");
+		Button btn = new Button(LangUtil.translate("ui.search"));
 		btn.getStyleClass().add("search-button");
 		switch(type) {
 			case MEMBER_DEFINITION:

File: src/main/java/me/coley/recaf/workspace/UrlResource.java
Patch:
@@ -53,7 +53,7 @@ private void verify() throws IOException {
 	}
 
 	/**
-	 * Analyze the URL to determine which backing JavaResource implmentation to use.
+	 * Analyze the URL to determine which backing JavaResource implementation to use.
 	 */
 	private void detectUrlKind() throws IOException {
 		String name = url.toString().toLowerCase();

File: src/main/java/me/coley/recaf/ui/controls/text/JavaEditorPane.java
Patch:
@@ -93,8 +93,11 @@ public Map<String, byte[]> save(String name) {
 		javac.options().sourceName = true;
 		TargetVersion classVersion = TargetVersion.fromClassMajor(version);
 		TargetVersion minSupportedVersion = TargetVersion.getMinJavacSupport();
+		TargetVersion maxSupportedVersion = TargetVersion.getMaxJavacSupport();
 		if (minSupportedVersion.ordinal() > classVersion.ordinal())
 			classVersion = minSupportedVersion;
+		if (maxSupportedVersion.ordinal() > classVersion.ordinal())
+			classVersion = maxSupportedVersion;
 		javac.options().setTarget(classVersion);
 		javac.setCompileListener(getErrorHandler());
 		if (javac.compile())

File: src/main/java/me/coley/recaf/parse/bytecode/ast/LineInsnAST.java
Patch:
@@ -54,7 +54,7 @@ public String print() {
 
 	@Override
 	public void compile(MethodCompilation compilation) throws AssemblerException {
-		compilation.addInstruction(new LineNumberNode(getLineNumber().getLine(),
+		compilation.addInstruction(new LineNumberNode(getLineNumber().getIntValue(),
 				compilation.getLabel(getLabel().getName())), this);
 	}
 }

File: src/main/java/me/coley/recaf/plugin/PluginFolderSource.java
Patch:
@@ -1,7 +1,7 @@
 package me.coley.recaf.plugin;
 
 import me.coley.recaf.Recaf;
-import me.coley.recaf.util.struct.VMUtil;
+import me.coley.recaf.util.VMUtil;
 import org.plugface.core.PluginSource;
 import org.plugface.core.internal.PluginClassLoader;
 

File: src/main/java/me/coley/recaf/ui/MainWindow.java
Patch:
@@ -19,7 +19,7 @@
 import me.coley.recaf.ui.controls.view.FileViewport;
 import me.coley.recaf.util.ThreadUtil;
 import me.coley.recaf.util.self.SelfUpdater;
-import me.coley.recaf.util.struct.VMUtil;
+import me.coley.recaf.util.VMUtil;
 import me.coley.recaf.workspace.JavaResource;
 import me.coley.recaf.workspace.Workspace;
 import org.plugface.core.annotations.Plugin;

File: src/main/java/me/coley/recaf/ui/controls/ExceptionAlert.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.ui.controls;
 
+import javafx.application.Platform;
 import javafx.scene.control.*;
 import javafx.scene.image.Image;
 import javafx.scene.layout.GridPane;
@@ -97,6 +98,6 @@ public static void show(Throwable t) {
 	 * 		Additional message to show.
 	 */
 	public static void show(Throwable t, String msg) {
-		new ExceptionAlert(t, msg).show();
+		Platform.runLater(() -> new ExceptionAlert(t, msg).show());
 	}
 }

File: src/main/java/me/coley/recaf/workspace/Workspace.java
Patch:
@@ -180,8 +180,8 @@ public void analyzePhantoms() {
 				phantoms.populatePhantoms(getPrimaryClasses());
 				Log.debug("Generated {} phantom classes in {} ms",
 						phantoms.getClasses().size(), (System.currentTimeMillis() - start));
-			} catch (Exception ex) {
-				Log.error(ex, "Failed to analyze phantom references for primary resource");
+			} catch (Throwable t) {
+				Log.error(t, "Failed to analyze phantom references for primary resource");
 			}
 		});
 	}

File: src/main/java/me/coley/recaf/ui/controls/view/FileViewport.java
Patch:
@@ -145,6 +145,7 @@ private void updateTextMode() {
 				new JavaEditorPane(controller, resource) :
 				new EditorPane<>(controller, lang, (a, b) -> null);
 		pane.setText(new String(last));
+		pane.scrollToTop();
 		pane.setWrapText(lang.doWrap());
 		pane.setEditable(resource.isPrimary());
 		pane.setOnKeyReleased(e -> current = pane.getText().getBytes());

File: src/main/java/me/coley/recaf/control/Controller.java
Patch:
@@ -8,6 +8,7 @@
 import me.coley.recaf.plugin.api.ExitPlugin;
 import me.coley.recaf.plugin.api.StartupPlugin;
 import me.coley.recaf.plugin.api.WorkspacePlugin;
+import me.coley.recaf.util.ThreadUtil;
 import me.coley.recaf.workspace.InstrumentationResource;
 import me.coley.recaf.workspace.Workspace;
 
@@ -194,6 +195,7 @@ public void exit() {
 				.ofType(ExitPlugin.class)
 				.forEach(plugin -> plugin.onExit(this));
 		config().save();
+		ThreadUtil.shutdown();
 		if (!InstrumentationResource.isActive()) {
 			System.exit(0);
 		}

File: src/main/java/me/coley/recaf/control/Controller.java
Patch:
@@ -189,8 +189,9 @@ protected <R, T extends Callable<R>> void register(Class<T> clazz) {
 	 */
 	public void exit() {
 		info("Shutting down");
+		config().save();
 		if (!InstrumentationResource.isActive()) {
-			System.exit(0); // TODO FIXME
+			System.exit(0);
 		}
 	}
 }

File: src/main/java/me/coley/recaf/plugin/PluginFolderSource.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.plugin;
 
 import me.coley.recaf.Recaf;
+import me.coley.recaf.util.struct.VMUtil;
 import org.plugface.core.PluginSource;
 import org.plugface.core.internal.PluginClassLoader;
 
@@ -36,7 +37,7 @@ public class PluginFolderSource implements PluginSource {
 	 * @throws IOException
 	 * 		When the plugin folder cannot be found or generated.
 	 */
-	public PluginFolderSource() throws IOException {
+	public 	PluginFolderSource() throws IOException {
 		Path pluginsDir = getPluginDir();
 		// Ensure directory exists
 		if(!Files.isDirectory(pluginsDir))
@@ -54,6 +55,7 @@ public Collection<Class<?>> load() throws PluginLoadException {
 		List<Class<?>> plugins = new ArrayList<>();
 		PluginClassLoader loader =
 				new PluginClassLoader(pluginJarUrls.values().toArray(new URL[0]));
+		VMUtil.setParent(loader, Recaf.class.getClassLoader());
 		for(Path pluginPath : pluginJarUrls.keySet()) {
 			File path = pluginPath.toAbsolutePath().toFile();
 			String className = null;

File: src/main/java/me/coley/recaf/ui/controls/AttachPane.java
Patch:
@@ -126,7 +126,7 @@ private void attach(VMInfo vm) {
 			} catch(Exception ex) {
 				Log.error(ex, "Failed to detach from VM '{}'", vm.getPid());
 			}
-			Platform.exit();
+			controller.exit();
 		};
 		Consumer<Throwable> onError = (ex) -> {
 			ExceptionAlert.show(ex, "Recaf failed to connect to the target VM: " +  vm.getPid());

File: src/main/java/me/coley/recaf/ui/controls/UpdatePane.java
Patch:
@@ -1,6 +1,5 @@
 package me.coley.recaf.ui.controls;
 
-import javafx.application.Platform;
 import javafx.geometry.Insets;
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
@@ -118,7 +117,7 @@ private Button getButton() {
 	private void update() {
 		try {
 			SelfUpdater.updateRecaf();
-			Platform.exit();
+			controller.exit();
 		} catch(IOException ex) {
 			Log.error(ex, "Failed to start update process");
 			ExceptionAlert.show(ex, "Recaf failed to start the update process");

File: src/main/java/me/coley/recaf/plugin/PluginFolderSource.java
Patch:
@@ -57,8 +57,7 @@ public Collection<Class<?>> load() throws PluginLoadException {
 		for(Path pluginPath : pluginJarUrls.keySet()) {
 			File path = pluginPath.toAbsolutePath().toFile();
 			String className = null;
-			try {
-				JarFile jar = new JarFile(path);
+			try (JarFile jar = new JarFile(path)) {
 				for(Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements(); ) {
 					JarEntry entry = entries.nextElement();
 					if(entry.isDirectory())

File: src/main/java/me/coley/recaf/parse/bytecode/parser/MethodDefinitionParser.java
Patch:
@@ -37,7 +37,7 @@ public MethodDefinitionAST visit(int lineNo, String line) throws ASTParseExcepti
 			MethodDefinitionAST def = new MethodDefinitionAST(lineNo, start, nameAST, descAST);
 			def.addChild(nameAST);
 			// Parse access modifiers
-			String modifiersSection = trim.substring(DEFINE_LEN, trim.indexOf(name));
+			String modifiersSection = trim.substring(DEFINE_LEN, nameStart);
 			while(!modifiersSection.trim().isEmpty()) {
 				// Get current modifier
 				start = line.indexOf(modifiersSection);

File: src/main/java/me/coley/recaf/ui/controls/FontSlider.java
Patch:
@@ -53,6 +53,7 @@ public static void update(GuiController controller) {
 		try {
 			double size = controller.config().display().fontSize;
 			String css = ".root { -fx-font-size: " + size + "px; }\n" +
+					".lineno { -fx-font-size: " + size + "px; }\n" +
 					".h1 { -fx-font-size: " + (size + 5) + "px; }\n" +
 					".h2 { -fx-font-size: " + (size + 3) + "px; }";
 			FileUtils.write(fontCssFile, css, StandardCharsets.UTF_8);

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -33,7 +33,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.4.2";
+	public static final String VERSION = "2.4.3";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	private static Controller currentController;
 	private static Workspace currentWorkspace;

File: src/main/java/me/coley/recaf/mapping/MappingImpl.java
Patch:
@@ -62,7 +62,7 @@ public Mappings create(Path path, Workspace workspace) throws IOException {
 				mappings = new TinyV1Mappings(path, workspace);
 				break;
 			case TINY2:
-				mappings = new TinyV2Mappings(path, workspace);
+				mappings = new TinyV2Mappings(path, workspace, TinyV2Mappings.TinyV2SubType.OBF_TO_CLEAN);
 				break;
 			case JADX:
 				mappings = new JadxMappings(path, workspace);

File: src/main/java/me/coley/recaf/plugin/api/InternalPlugin.java
Patch:
@@ -1,9 +1,11 @@
 package me.coley.recaf.plugin.api;
 
+import me.coley.recaf.util.InternalElement;
+
 /**
  * Internal plugin base for Recaf.
  *
  * @author xxDark
  */
 @InternalApi
-public interface InternalPlugin extends BasePlugin { }
+public interface InternalPlugin extends BasePlugin, InternalElement { }

File: src/main/java/me/coley/recaf/plugin/PluginsManager.java
Patch:
@@ -87,7 +87,7 @@ public Map<String, BasePlugin> plugins() {
 	 * @return Collection of visible plugin instances.
 	 */
 	public Map<String, BasePlugin> visiblePlugins() {
-		return plugins.entrySet()
+		return plugins().entrySet()
 				.stream()
 				.filter(e -> !(e.getValue() instanceof InternalPlugin))
 				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

File: src/main/java/me/coley/recaf/ui/controls/PluginManagerPane.java
Patch:
@@ -39,7 +39,7 @@ private void setup() {
 		list.getSelectionModel().selectedItemProperty().addListener((ob, o, n) -> {
 			view.setCenter(createPluginView(n == null ? o : n));
 		});
-		list.setItems(FXCollections.observableArrayList(PluginsManager.getInstance().plugins().values()));
+		list.setItems(FXCollections.observableArrayList(PluginsManager.getInstance().visiblePlugins().values()));
 		view.getStyleClass().add("plugin-view");
 		SplitPane split = new SplitPane(list, view);
 		SplitPane.setResizableWithParent(list, Boolean.FALSE);

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeLocalHelper.java
Patch:
@@ -53,7 +53,7 @@ public void updateItem(LabelNode item, boolean empty) {
 				if (item == null) {
 					setText(null);
 				} else if (assembler != null) {
-					LabelAST ast = assembler.getLabelToAst().get(item);
+					LabelAST ast = assembler.getCompilation().getLabelAst(item);
 					setText(ast == null ? "?" : ast.getName().print());
 				} else {
 					setText("?");

File: src/main/java/me/coley/recaf/util/JavaParserUtil.java
Patch:
@@ -484,7 +484,7 @@ private static String typeToDesc(Type type) {
 			try {
 				key = toInternal(((ClassOrInterfaceType) type).resolve().getTypeDeclaration().get());
 			} catch(UnsolvedSymbolException ex) {
-				Log.warn("Failed to resolve type '{}'", ex.getName());
+				Log.warn("JavaParser failed to resolve type '{}'", ex.getName());
 			} catch(UnsupportedOperationException ex) {
 				// Ok, so it may be "unsupported" however it may not technically be unresolvable.
 				// For instance, generic types like "<T>" are "unsupported" but do get resolved

File: src/main/java/me/coley/recaf/ui/controls/tree/JavaResourceTree.java
Patch:
@@ -121,7 +121,7 @@ private void onKey(KeyEvent e) {
 			return;
 		}
 		// Focus text search when typing in tree
-		else if (!e.getText().isEmpty()) {
+		else if (!e.getText().trim().isEmpty()) {
 			search.setText(e.getText());
 			search.requestFocus();
 		}

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -100,6 +100,8 @@ void visit(RootAST root) throws AssemblerException {
 			// Ensure "next" accounts for any taken indices
 			fitNext();
 		}
+		// Call again in case there were no prior matches for raw-index matches
+		fitNext();
 		// Pass 2: Add data for named variables
 		for(VariableReference ast : root.search(VariableReference.class)) {
 			String name = ast.getVariableName().getName();

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -82,6 +82,7 @@ public ConfigPane(GuiController controller, ConfDecompile config) {
 	public ConfigPane(GuiController controller, ConfAssembler config) {
 		editorOverrides.put("assembler.verify", Toggle::new);
 		editorOverrides.put("assembler.variables", Toggle::new);
+		editorOverrides.put("assembler.stripdebug", Toggle::new);
 		setupConfigControls(config);
 	}
 

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeEditorPane.java
Patch:
@@ -145,7 +145,7 @@ public boolean disassemble() {
 		}
 		if (isMethod) {
 			int flags = ClassReader.SKIP_FRAMES;
-			if (controller.config().decompile().stripDebug)
+			if (controller.config().assembler().stripDebug)
 				flags |= ClassReader.SKIP_DEBUG;
 			MethodNode method = ClassUtil.getMethod(cr, flags, memberName, memberDesc);
 			if(method == null) {

File: src/main/java/me/coley/recaf/util/IllegalBytecodePatcherUtil.java
Patch:
@@ -50,7 +50,7 @@ else if (str.contains("binscure") || str.contains("binclub") || str.contains("ja
 				//  - Some code for this already exists in the discord group but its outdated...
 				Log.info("Unknown protection on class file");
 			}
-			return value;
+			return new ClassFileWriter().write(cf);
 		} catch (Throwable t) {
 			// Fallback, yield original value
 			Log.error(t, "Failed to patch class");

File: src/main/java/me/coley/recaf/util/IllegalBytecodePatcherUtil.java
Patch:
@@ -36,6 +36,9 @@ public static byte[] fix(Map<String, byte[]> classes, Map<String, byte[]> invali
 			// Patch oak classes (pre-java)
 			//  - CafeDude does this by default
 			if (cf.getVersionMajor() < 45 ||(cf.getVersionMajor() == 45 && cf.getVersionMinor() <= 2)) {
+				// Bump version into range where class file format uses full length values
+				cf.setVersionMajor(45);
+				cf.setVersionMinor(3);
 				return new ClassFileWriter().write(cf);
 			}
 			// TODO: A good automated system to detect the problem would be handy

File: src/main/java/me/coley/recaf/workspace/EntryLoader.java
Patch:
@@ -81,7 +81,6 @@ private boolean handleAddClass(String entryName, byte[] value) {
 			// Make sure the class interception doesn't break the class
 			if (!ClassUtil.isValidClass(value)) {
 				warn("Invalid class '{}' due to modifications by plugin '{}'\nAdding as a file instead.", entryName);
-				invalidClasses.put(entryName, value);
 				onFile(entryName, value);
 				return false;
 			}

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -33,7 +33,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.3.4";
+	public static final String VERSION = "2.3.5";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	private static Controller currentController;
 	private static Workspace currentWorkspace;

File: src/main/java/me/coley/recaf/mapping/TinyV2Mappings.java
Patch:
@@ -45,7 +45,7 @@ protected Map<String, String> parse(String text) {
 			if (lineStr.startsWith("tiny\t"))
 				continue;
 			String lineStrTrim = lineStr.trim();
-			int strIndent = lineStr.indexOf(lineStrTrim) + 1;
+			int strIndent = lineStr.indexOf(lineStrTrim);
 			String[] args = lineStrTrim.split("\t");
 			String type = args[0];
 			try {

File: src/main/java/me/coley/recaf/workspace/EntryLoader.java
Patch:
@@ -179,10 +179,10 @@ public void finishClasses() {
 			}
 			// Check if class is valid
 			if (ClassUtil.isValidClass(value)) {
-				debug(" - Illegal class patching success!");
+				debug("Illegal class patching success!");
 				handleAddClass(entryName, value);
 			} else {
-				warn(" - Invalid class \"{}\" - Cannot be parsed with ASM reader\nAdding as a file instead.", entryName);
+				warn("Invalid class \"{}\" - Cannot be parsed with ASM reader\nAdding as a file instead.", entryName);
 				onFile(entryName, value);
 			}
 		}

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -33,7 +33,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.3.0";
+	public static final String VERSION = "2.3.1";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	private static Controller currentController;
 	private static Workspace currentWorkspace;

File: src/main/java/me/coley/recaf/ui/controls/view/ClassViewport.java
Patch:
@@ -92,9 +92,9 @@ public void updateView() {
 				} else {
 					pane = new JavaEditorPane(controller, resource, initialText);
 					pane.setWrapText(false);
-					pane.setEditable(pane.canCompile() && resource.isPrimary());
 					setCenter(pane);
 				}
+				pane.setEditable(pane.canCompile() && resource.isPrimary());
 				// Actions
 				Supplier<String> supplier = () -> {
 					// SUPPLIER: Fetch decompiled code

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -256,9 +256,7 @@ private void findRanges(RootAST root) throws AssemblerException {
 						.filter(e -> e.getValue().equals(index))
 						.map(Map.Entry::getKey)
 						.findFirst();
-				if (!x.isPresent())
-					throw new AssemblerException("Failed to find index->name map for: " + index);
-				String name = x.get();
+				String name = x.orElseGet(index::toString);
 				nameToStart.put(name, labels.get(0).getName().getName());
 				nameToEnd.put(name, labels.get(labels.size() - 1).getName().getName());
 			}

File: src/main/java/me/coley/recaf/ui/controls/popup/DragPopup.java
Patch:
@@ -91,7 +91,9 @@ public void show(Node parent) {
 				pop.setX(x - pop.getWidth() / 2);
 				pop.setY(y - pop.getHeight() / 2);
 			});
-			pop.show(parent, 0, 0);
+			// Show only if parent component still exists (by checking its ownership)
+			if (parent.getScene() != null && parent.getScene().getWindow() != null)
+				pop.show(parent, 0, 0);
 		});
 	}
 

File: src/main/java/me/coley/recaf/ui/controls/text/EditorPane.java
Patch:
@@ -10,7 +10,6 @@
 import javafx.scene.paint.Color;
 import javafx.scene.shape.Polygon;
 import me.coley.recaf.control.gui.GuiController;
-import me.coley.recaf.ui.controls.CodeAreaExt;
 import me.coley.recaf.ui.controls.SearchBar;
 import me.coley.recaf.ui.controls.text.model.*;
 import me.coley.recaf.util.ThreadUtil;
@@ -34,7 +33,7 @@
  */
 public class EditorPane<E extends ErrorHandling, C extends ContextHandling> extends BorderPane {
 	protected final GuiController controller;
-	protected final CodeArea codeArea = new CodeAreaExt();
+	protected final CodeArea codeArea = new CodeArea();
 	protected final C contextHandler;
 	protected final BorderPane bottomContent = new BorderPane();
 	protected final ErrorList errorList = new ErrorList(this);

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeLocalHelper.java
Patch:
@@ -135,6 +135,8 @@ private void gotoAst(AST ast) {
 	public void setMethodAssembler(MethodAssembler assembler) {
 		this.assembler = assembler;
 		getItems().clear();
+		if (assembler.getLastCompile() == null)
+			return;
 		if (assembler.getLastCompile().localVariables != null)
 			getItems().addAll(assembler.getLastCompile().localVariables);
 	}

File: src/main/java/me/coley/recaf/workspace/Workspace.java
Patch:
@@ -378,7 +378,9 @@ public ParserConfiguration getSourceParseConfig() {
 	 */
 	public void updateSourceConfig() {
 		TypeSolver solver = new WorkspaceTypeResolver(this);
-		config = new ParserConfiguration().setSymbolResolver(new JavaSymbolSolver(solver));
+		config = new ParserConfiguration()
+				.setSymbolResolver(new JavaSymbolSolver(solver))
+				.setLanguageLevel(ParserConfiguration.LanguageLevel.JAVA_14);
 	}
 
 	/**

File: src/main/java/me/coley/recaf/mapping/SimpleMappings.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static me.coley.recaf.util.StringUtil.*;
-
+import static me.coley.recaf.util.StringUtil.splitNewline;
+import static me.coley.recaf.util.EscapeUtil.*;
 
 /**
  * Simple mappings file implementation where the old/new names are split by a space.

File: src/main/java/me/coley/recaf/parse/bytecode/Disassembler.java
Patch:
@@ -287,7 +287,7 @@ private void visitLdcInsn(StringBuilder line, LdcInsnNode insn) {
 		line.append(' ');
 		if(insn.cst instanceof String) {
 			String str = insn.cst.toString();
-			str = str.replace("\n", "\\n").replace("\r", "\\r").replace("\t", "\\t");
+			str = EscapeUtil.escapeCommon(str);
 			line.append('"').append(str).append('"');
 		} else if (insn.cst instanceof Long)
 			line.append(insn.cst).append('L');
@@ -370,7 +370,7 @@ else if (arg instanceof Type)
 			else if (arg instanceof Handle)
 				visitHandle(line, (Handle) arg, false);
 			else if (arg instanceof String)
-				line.append("\"" + StringUtil.escape((String)arg) +"\"");
+				line.append("\"" + EscapeUtil.escape((String)arg) +"\"");
 			if(i < insn.bsmArgs.length - 1)
 				line.append(", ");
 		}

File: src/main/java/me/coley/recaf/parse/bytecode/ast/DefaultValueAST.java
Patch:
@@ -1,6 +1,5 @@
 package me.coley.recaf.parse.bytecode.ast;
 
-import me.coley.recaf.util.EscapeUtil;
 import org.objectweb.asm.Type;
 
 /**
@@ -43,7 +42,7 @@ public String print() {
 	public Object toValue() {
 		Object value = null;
 		if(content instanceof StringAST)
-			value = EscapeUtil.unescape(((StringAST) content).getValue());
+			value = ((StringAST) content).getUnescapedValue();
 		else if(content instanceof NumberAST)
 			value = ((NumberAST) content).getValue();
 		else if(content instanceof DescAST)

File: src/main/java/me/coley/recaf/parse/bytecode/parser/StringParser.java
Patch:
@@ -3,7 +3,6 @@
 import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.StringAST;
-import me.coley.recaf.util.StringUtil;
 
 /**
  * {@link StringAST} parser.
@@ -14,7 +13,7 @@ public class StringParser extends AbstractParser<StringAST> {
 	@Override
 	public StringAST visit(int lineNo, String line) throws ASTParseException {
 		try {
-			String trim = StringUtil.unescape(line.trim());
+			String trim = line.trim();
 			if(!(trim.charAt(0) == '"' && trim.charAt(trim.length() - 1) == '"'))
 				throw new ASTParseException(lineNo, "Invalid string: " + trim);
 			int start = line.indexOf(trim);

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeStackHelper.java
Patch:
@@ -11,9 +11,9 @@
 import me.coley.recaf.parse.bytecode.MethodAnalyzer;
 import me.coley.recaf.parse.bytecode.MethodAssembler;
 import me.coley.recaf.ui.controls.IconView;
+import me.coley.recaf.util.EscapeUtil;
 import me.coley.recaf.util.InsnUtil;
 import me.coley.recaf.util.Log;
-import me.coley.recaf.util.StringUtil;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.analysis.Frame;
@@ -174,12 +174,12 @@ protected void updateItem(Integer item, boolean empty) {
 					} else {
 						setGraphic(new IconView(value.isPrimitive() ? "icons/primitive.png" : "icons/object.png"));
 						Type type = value.getType();
-						String simpleTypeName = StringUtil.escape(type.getClassName());
+						String simpleTypeName = EscapeUtil.escape(type.getClassName());
 						if (simpleTypeName.contains("."))
 							simpleTypeName = simpleTypeName.substring(simpleTypeName.lastIndexOf('.') + 1);
 						sb.append(simpleTypeName);
 						if (value.isValueResolved())
-							sb.append(": ").append(StringUtil.escape(value.getValue().toString()));
+							sb.append(": ").append(EscapeUtil.escape(value.getValue().toString()));
 					}
 					setText(sb.toString());
 				}catch(Throwable t) {

File: src/main/java/me/coley/recaf/util/self/UpdateTaskStarter.java
Patch:
@@ -88,7 +88,7 @@ public static void main(String[] args) throws Throwable {
 			new ProcessBuilder(procArgs).start();
 		}
 		*/
-		ClassWriter cw = new ClassWriter(0);
+		ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
 		cw.visit(50, ACC_PUBLIC + ACC_SUPER, CLASS_NAME, null, "java/lang/Object", null);
 		// Constructor
 		MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);

File: src/main/java/me/coley/recaf/config/ConfigManager.java
Patch:
@@ -122,7 +122,7 @@ private void load() {
 				if(Files.exists(path))
 					c.load(path);
 			} catch(Throwable t) {
-				error(t, "Failed to load config: {}" + path);
+				error(t, "Failed to load config: {}", path);
 			}
 		}
 	}
@@ -135,7 +135,7 @@ private void save() {
 			try {
 				c.save(path);
 			} catch(IOException ex) {
-				error(ex, "Failed to save config: {}" + path);
+				error(ex, "Failed to save config: {}", path);
 			}
 		}
 	}

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -33,7 +33,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.0.2";
+	public static final String VERSION = "2.0.3";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	private static Controller currentController;
 	private static Workspace currentWorkspace;

File: src/main/java/me/coley/recaf/control/Controller.java
Patch:
@@ -66,7 +66,7 @@ public final Workspace getWorkspace() {
 	/**
 	 * @return Config manager.
 	 */
-	public ConfigManager config(){
+	public ConfigManager config() {
 		return configs;
 	}
 

File: src/main/java/me/coley/recaf/plugin/PluginFolderSource.java
Patch:
@@ -66,7 +66,7 @@ public Collection<Class<?>> load() throws PluginLoadException {
 					// Add classes
 					if (entry.getName().endsWith(".class")) {
 						className = toName(entry);
-						plugins.add(Class.forName(className, true, loader));
+						plugins.add(Class.forName(className, false, loader));
 						classToPlugin.put(className, pluginPath);
 					}
 					// Check for plugin icon

File: src/main/java/me/coley/recaf/ui/controls/AttachPane.java
Patch:
@@ -126,7 +126,7 @@ private void attach(VMInfo vm) {
 			} catch(Exception ex) {
 				Log.error(ex, "Failed to detach from VM '{}'", vm.getPid());
 			}
-			controller.exit();
+			Platform.exit();
 		};
 		Consumer<Throwable> onError = (ex) -> {
 			ExceptionAlert.show(ex, "Recaf failed to connect to the target VM: " +  vm.getPid());

File: src/main/java/me/coley/recaf/ui/controls/UpdatePane.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.ui.controls;
 
+import javafx.application.Platform;
 import javafx.geometry.Insets;
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
@@ -117,7 +118,7 @@ private Button getButton() {
 	private void update() {
 		try {
 			SelfUpdater.updateRecaf();
-			controller.exit();
+			Platform.exit();
 		} catch(IOException ex) {
 			Log.error(ex, "Failed to start update process");
 			ExceptionAlert.show(ex, "Recaf failed to start the update process");

File: src/main/java/me/coley/recaf/plugin/PluginFolderSource.java
Patch:
@@ -56,7 +56,6 @@ public Collection<Class<?>> load() throws PluginLoadException {
 				new PluginClassLoader(pluginJarUrls.values().toArray(new URL[0]));
 		for(Path pluginPath : pluginJarUrls.keySet()) {
 			File path = pluginPath.toAbsolutePath().toFile();
-			System.err.println(path.getAbsolutePath());
 			String className = null;
 			try {
 				JarFile jar = new JarFile(path);

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -8,7 +8,6 @@
 import me.coley.recaf.plugin.api.EntryLoaderProviderPlugin;
 import me.coley.recaf.util.Log;
 import me.coley.recaf.util.Natives;
-import me.coley.recaf.util.UiUtil;
 import me.coley.recaf.util.self.SelfDependencyPatcher;
 import me.coley.recaf.util.self.SelfReferenceUtil;
 import me.coley.recaf.util.self.SelfUpdater;

File: src/main/java/me/coley/recaf/ui/controls/AttachPane.java
Patch:
@@ -126,7 +126,7 @@ private void attach(VMInfo vm) {
 			} catch(Exception ex) {
 				Log.error(ex, "Failed to detach from VM '{}'", vm.getPid());
 			}
-			controller.exit();
+			Platform.exit();
 		};
 		Consumer<Throwable> onError = (ex) -> {
 			ExceptionAlert.show(ex, "Recaf failed to connect to the target VM: " +  vm.getPid());

File: src/main/java/me/coley/recaf/ui/controls/UpdatePane.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.ui.controls;
 
+import javafx.application.Platform;
 import javafx.geometry.Insets;
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
@@ -117,7 +118,7 @@ private Button getButton() {
 	private void update() {
 		try {
 			SelfUpdater.updateRecaf();
-			controller.exit();
+			Platform.exit();
 		} catch(IOException ex) {
 			Log.error(ex, "Failed to start update process");
 			ExceptionAlert.show(ex, "Recaf failed to start the update process");

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -34,7 +34,7 @@
  * @author Matt
  */
 public class Recaf {
-	public static final String VERSION = "2.0.0";
+	public static final String VERSION = "2.0.1";
 	public static final String DOC_URL = "https://col-e.github.io/Recaf/documentation.html";
 	private static Controller currentController;
 	private static Workspace currentWorkspace;

File: src/main/java/me/coley/recaf/config/ConfigManager.java
Patch:
@@ -114,6 +114,7 @@ public ConfBackend backend() {
 	// ============================================================== //
 
 	private void load() {
+		trace("Loading configuration");
 		for (Configurable c : getConfigs()) {
 			Path path = c instanceof Config ?
 					resolveConfigPath((Config) c) : resolvePluginConfigPath((ConfigurablePlugin) c);
@@ -127,6 +128,7 @@ private void load() {
 	}
 
 	private void save() {
+		trace("Saving configuration");
 		for (Configurable c : getConfigs()) {
 			Path path = c instanceof Config ?
 					resolveConfigPath((Config) c) : resolvePluginConfigPath((ConfigurablePlugin) c);

File: src/main/java/me/coley/recaf/control/Controller.java
Patch:
@@ -1,6 +1,5 @@
 package me.coley.recaf.control;
 
-import javafx.application.Platform;
 import me.coley.recaf.Recaf;
 import me.coley.recaf.command.impl.*;
 import me.coley.recaf.config.ConfigManager;
@@ -19,7 +18,7 @@
 import java.util.concurrent.Callable;
 import java.util.function.Supplier;
 
-import static me.coley.recaf.util.Log.error;
+import static me.coley.recaf.util.Log.*;
 
 /**
  * Base controller to work off of/invoke commands on.
@@ -189,7 +188,7 @@ protected <R, T extends Callable<R>> void register(Class<T> clazz) {
 	 * Close Recaf.
 	 */
 	public void exit() {
-		Platform.exit();
+		info("Shutting down");
 		if (!InstrumentationResource.isActive()) {
 			System.exit(0); // TODO FIXME
 		}

File: src/main/java/me/coley/recaf/util/ThreadUtil.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
+import static me.coley.recaf.util.Log.*;
+
 /**
  * Threading utils.
  *
@@ -177,6 +179,7 @@ private static int threadCount() {
 
 	static {
 		Runtime.getRuntime().addShutdownHook(new Thread(() -> {
+			trace("Shutting down thread executors");
 			service.shutdownNow();
 			scheduledService.shutdownNow();
 		}));

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -404,6 +404,9 @@ public void saveAgent() {
 	 * Save the current workspace to a file.
 	 */
 	private void saveWorkspace() {
+		if (controller.getWorkspace() == null) {
+			return;
+		}
 		fcSaveWorkspace.setInitialDirectory(config().getRecentSaveWorkspaceDir());
 		File file = fcSaveWorkspace.showSaveDialog(null);
 		if (file != null) {

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -139,14 +139,14 @@ public MainMenu(GuiController controller) {
 		fcLoadApp.setTitle(translate("ui.fileprompt.open"));
 		fcLoadApp.getExtensionFilters().add(filter);
 		fcLoadApp.setSelectedExtensionFilter(filter);
+		fcSaveApp.setTitle(translate("ui.fileprompt.export"));
+		fcSaveApp.getExtensionFilters().add(filter);
+		fcSaveApp.setSelectedExtensionFilter(filter);
 		filter = new ExtensionFilter(translate("ui.fileprompt.open.extensions"),
 				"*.txt", "*.map", "*.mapping", "*.enigma", "*.pro", "*.srg", "*.tiny", "*.tinyv2");
 		fcLoadMap.setTitle(translate("ui.fileprompt.open"));
 		fcLoadMap.getExtensionFilters().add(filter);
 		fcLoadMap.setSelectedExtensionFilter(filter);
-		fcSaveApp.setTitle(translate("ui.fileprompt.export"));
-		fcSaveApp.getExtensionFilters().add(filter);
-		fcSaveApp.setSelectedExtensionFilter(filter);
 		filter = new ExtensionFilter(translate("ui.fileprompt.open.extensions"), "*.json");
 		fcSaveWorkspace.setTitle(translate("ui.fileprompt.export"));
 		fcSaveWorkspace.getExtensionFilters().add(filter);

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -252,6 +252,9 @@ private void addLibrary() {
 	 * Save the current application to a file.
 	 */
 	public void saveApplication() {
+		if (controller.getWorkspace() == null) {
+			return;
+		}
 		fcSaveApp.setInitialDirectory(config().getRecentSaveAppDir());
 		File file = fcSaveApp.showSaveDialog(null);
 		if (file != null) {

File: src/main/java/me/coley/recaf/util/ClassUtil.java
Patch:
@@ -283,6 +283,8 @@ public static boolean isClass(byte[] data) {
 	 * @param to method to copy to.
 	 */
 	public static void copyMethodMetadata(MethodNode from, MethodNode to) {
+		to.visibleAnnotableParameterCount = from.visibleAnnotableParameterCount;
+		to.invisibleAnnotableParameterCount = from.invisibleAnnotableParameterCount;
 		to.invisibleAnnotations = from.invisibleAnnotations;
 		to.visibleAnnotations = from.visibleAnnotations;
 		to.invisibleParameterAnnotations = from.invisibleParameterAnnotations;

File: src/main/java/me/coley/recaf/ui/MainWindow.java
Patch:
@@ -215,7 +215,7 @@ public void clear() {
 	 */
 	public void clearTabViewports() {
 		if (tabs != null)
-			tabs.clearViewports();
+			ThreadUtil.checkJfxAndEnqueue(() -> tabs.clearViewports());
 	}
 
 	/**

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeStackHelper.java
Patch:
@@ -103,7 +103,7 @@ private void update() {
 		if (insnIndex >= frames.length)
 			return;
 		// Update lists
-		currentFrame = assembler.getFrames()[insnIndex];
+		currentFrame = frames[insnIndex];
 		Platform.runLater(() -> {
 			locals.getItems().clear();
 			stack.getItems().clear();

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -143,6 +143,7 @@ private void setupConfigControls(Configurable config) {
 
 	static {
 		// Populate default editors
+		DEFAULT_EDITORS.put(boolean.class, Toggle::new);
 		DEFAULT_EDITORS.put(Boolean.class, Toggle::new);
 		DEFAULT_EDITORS.put(Enum.class, EnumComboBox::new);
 		DEFAULT_EDITORS.put(ConfKeybinding.Binding.class, KeybindField::new);

File: src/main/java/me/coley/recaf/control/gui/GuiController.java
Patch:
@@ -124,7 +124,7 @@ protected Boolean call() throws Exception {
 	public void setWorkspace(Workspace workspace) {
 		super.setWorkspace(workspace);
 		MainWindow mainWindow = windows().getMainWindow();
-		mainWindow.setTitle("Recaf | " + workspace.getPrimary().getName());
+		mainWindow.setTitle("Recaf | " + workspace.getPrimary().getShortName());
 	}
 
 	/**

File: src/main/java/me/coley/recaf/ui/ContextBuilder.java
Patch:
@@ -518,7 +518,7 @@ public ContextMenu ofRoot(JavaResource resource) {
 				File file = loader.showOpenDialog(null);
 				if (file != null) {
 					try {
-						resource.setClassDocs(file);
+						resource.setClassDocs(file.toPath());
 					} catch(IOException ex) {
 						Log.error(ex, "Failed to set resource documentation");
 					}
@@ -528,7 +528,7 @@ public ContextMenu ofRoot(JavaResource resource) {
 				File file = loader.showOpenDialog(null);
 				if (file != null) {
 					try {
-						resource.setClassSources(file);
+						resource.setClassSources(file.toPath());
 					} catch(IOException ex) {
 						Log.error(ex, "Failed to set resource sources");
 					}

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -2,8 +2,6 @@
 
 import javafx.scene.Node;
 import javafx.scene.control.*;
-import javafx.scene.control.Menu;
-import javafx.scene.control.MenuBar;
 import javafx.stage.FileChooser;
 import javafx.stage.FileChooser.ExtensionFilter;
 import javafx.stage.Stage;
@@ -220,7 +218,7 @@ private void addLibrary() {
 		if (files != null) {
 			for (File file : files) {
 				try {
-					JavaResource resource = FileSystemResource.of(file);
+					JavaResource resource = FileSystemResource.of(file.toPath());
 					controller.getWorkspace().getLibraries().add(resource);
 					controller.windows().getMainWindow().getNavigator().refresh();
 				} catch(Exception ex) {

File: src/test/java/me/coley/recaf/CompilerTest.java
Patch:
@@ -14,7 +14,7 @@
  *
  * @author Matt
  */
-public class CompilerTests {
+public class CompilerTest {
 	private final static DiagnosticListener<VirtualJavaFileObject> FAIL_ON_ERROR = message -> {
 		assertNotSame(message.getKind(), Diagnostic.Kind.ERROR);
 	};

File: src/test/java/me/coley/recaf/DebugTest.java
Patch:
@@ -12,6 +12,7 @@
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Path;
 import java.util.*;
 import java.util.concurrent.CopyOnWriteArrayList;
 
@@ -35,10 +36,10 @@ public void setup() {
 		try {
 			// The debugger resource is simply backed by another resource since the JDI doesn't
 			// allow direct class lookups like instrumentation does.
-			File file = getClasspathFile("calc.jar");
+			Path file = getClasspathFile("calc.jar");
 			JavaResource backing = new JarResource(file);
 			// Specify main, classpath, suspend-on-launch
-			vm = VMWrap.launching("Start", "-cp \"" + file.getAbsolutePath() + "\"", true);
+			vm = VMWrap.launching("Start", "-cp \"" + file.toAbsolutePath() + "\"", true);
 			resource = vm.toResource(backing);
 			resource.getVm().setup(out = new OutWrapper());
 		} catch(Exception ex) {

File: src/test/java/me/coley/recaf/FlowGraphTest.java
Patch:
@@ -11,6 +11,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Path;
 import java.util.List;
 import java.util.Set;
 
@@ -26,7 +27,7 @@ public class FlowGraphTest extends Base {
 
 	@BeforeEach
 	public void setup() throws IOException {
-		File file = getClasspathFile("calls.jar");
+		Path file = getClasspathFile("calls.jar");
 		Workspace workspace = new Workspace(new JarResource(file));
 		graph = workspace.getFlowGraph();
 	}

File: src/test/java/me/coley/recaf/HierarchyGraphTest.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Path;
 import java.util.*;
 import java.util.stream.Collectors;
 
@@ -25,7 +26,7 @@ public class HierarchyGraphTest extends Base {
 
 	@BeforeEach
 	public void setup() throws IOException {
-		File file = getClasspathFile("inherit.jar");
+		Path file = getClasspathFile("inherit.jar");
 		Workspace workspace = new Workspace(new JarResource(file));
 		graph = workspace.getHierarchyGraph();
 	}

File: src/main/java/me/coley/recaf/command/completion/ArchiveFileCompletions.java
Patch:
@@ -11,6 +11,6 @@ public class ArchiveFileCompletions extends FileCompletions {
 	 * Picocli completion for archives.
 	 */
 	public ArchiveFileCompletions() {
-		super(fileNamePattern(".+\\.(zip|jar)"));
+		super(pathNamePattern(".+\\.(zip|jar)"));
 	}
 }

File: src/main/java/me/coley/recaf/command/completion/JavaFileCompletions.java
Patch:
@@ -11,6 +11,6 @@ public class JavaFileCompletions extends FileCompletions {
 	 * Picocli completion for java program files.
 	 */
 	public JavaFileCompletions() {
-		super(fileNamePattern(".+\\.(class|jar)"));
+		super(pathNamePattern(".+\\.(class|jar)"));
 	}
 }

File: src/main/java/me/coley/recaf/command/completion/WorkspaceFileCompletions.java
Patch:
@@ -10,6 +10,6 @@ public class WorkspaceFileCompletions extends FileCompletions {
 	 * Picocli completion for supported workspace files.
 	 */
 	public WorkspaceFileCompletions() {
-		super(fileNamePattern(".+\\.(class|jar|json)"));
+		super(pathNamePattern(".+\\.(class|jar|json)"));
 	}
 }

File: src/main/java/me/coley/recaf/command/impl/Initializer.java
Patch:
@@ -9,7 +9,7 @@
 import picocli.CommandLine.Command;
 import picocli.CommandLine.Option;
 
-import java.io.File;
+import java.nio.file.Path;
 
 /**
  * Command line initializer for Recaf, invoked from the main method.
@@ -25,9 +25,9 @@
 public class Initializer implements Runnable {
 	@Option(names = {"--input" }, description = "The input file to load. " +
 			"Supported types are: class, jar, json")
-	public File input;
+	public Path input;
 	@Option(names = {"--script" }, description = "Script file to load for cli usage")
-	public File script;
+	public Path script;
 	@Option(names = { "--cli" }, description = "Run Recaf via CLI")
 	public boolean cli;
 	@Option(names = { "--instrument" }, description = "Indicates Recaf has been invoked as an agent")

File: src/main/java/me/coley/recaf/command/impl/WorkspaceInfo.java
Patch:
@@ -44,7 +44,7 @@ private void append(StringBuilder sb, JavaResource resource) {
 			case JAR:
 			case WAR:
 			case DIRECTORY:
-				sb.append(((FileSystemResource)resource).getFile());
+				sb.append(((FileSystemResource)resource).getPath().normalize());
 				break;
 			case MAVEN:
 				sb.append(((MavenResource)resource).getCoords());

File: src/main/java/me/coley/recaf/plugin/PluginFolderSource.java
Patch:
@@ -40,7 +40,7 @@ public PluginFolderSource() throws IOException {
 		Path pluginsDir = getPluginDir();
 		// Ensure directory exists
 		if(!Files.isDirectory(pluginsDir))
-			pluginsDir.toFile().mkdirs();
+			Files.createDirectories(pluginsDir);
 		// Populate plugin map
 		for(Path filePath : Files.newDirectoryStream(pluginsDir)) {
 			if(filePath.getFileName().toString().endsWith(".jar")) {

File: src/main/java/me/coley/recaf/ui/controls/WorkspaceNavigator.java
Patch:
@@ -7,6 +7,7 @@
 import javafx.scene.layout.BorderPane;
 import me.coley.recaf.control.gui.GuiController;
 import me.coley.recaf.ui.controls.tree.*;
+import me.coley.recaf.util.IOUtil;
 import me.coley.recaf.util.LangUtil;
 import me.coley.recaf.workspace.*;
 
@@ -104,7 +105,7 @@ private void onDragDrop(DragEvent e) {
 		// Load drag-drop files
 		if(e.getDragboard().hasFiles()) {
 			File file = e.getDragboard().getFiles().get(0);
-			controller.loadWorkspace(file, null);
+			controller.loadWorkspace(IOUtil.toPath(file), null);
 		}
 	}
 

File: src/main/java/me/coley/recaf/ui/controls/text/JavaEditorPane.java
Patch:
@@ -150,7 +150,7 @@ private List<String> getClassPath() throws IOException {
 	private void add(List<String> path, JavaResource resource) {
 		if (resource instanceof FileSystemResource) {
 			FileSystemResource fsr = (FileSystemResource) resource;
-			path.add(fsr.getFile().getAbsolutePath());
+			path.add(IOUtil.toString(fsr.getPath()));
 		} else if (resource instanceof DeferringResource) {
 			JavaResource deferred = ((DeferringResource) resource).getBacking();
 			add(path, deferred);

File: src/main/java/me/coley/recaf/util/ClassUtil.java
Patch:
@@ -332,6 +332,8 @@ public static byte[] stripDebugForDecompile(byte[] code) {
 	 * @return {@code true} when the class can be read by ASM.
 	 */
 	public static boolean isValidClass(byte[] value) {
+		if (!isClass(value))
+			return false;
 		try {
 			getNode(new ClassReader(value), SKIP_FRAMES);
 			return true;

File: src/main/java/me/coley/recaf/util/ClasspathUtil.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.util;
 
+import me.coley.recaf.util.struct.VMUtil;
+
 import java.io.*;
 
 import java.lang.module.ModuleFinder;
@@ -157,7 +159,7 @@ private static boolean checkBootstrapClassExists(Collection<String> names) {
 	}
 
 	private static Set<String> scanBootstrapClasses() throws Exception {
-		float vmVersion = Float.parseFloat(System.getProperty("java.class.version")) - 44;
+		float vmVersion = VMUtil.getVmVersion();
 		Set<String> classes = new LinkedHashSet<>(4096, 1F);
 		if (vmVersion < 9) {
 			Method method = ClassLoader.class.getDeclaredMethod("getBootstrapClassPath");

File: src/main/java/me/coley/recaf/util/self/SelfUpdater.java
Patch:
@@ -14,6 +14,7 @@
 import java.io.IOException;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Path;
 import java.time.Instant;
 import java.time.format.DateTimeParseException;
 
@@ -169,9 +170,9 @@ private static void updateCheckDate() {
 	 */
 	private static void ensureControllerIsSet() throws IOException {
 		if (controller == null)
-			controller = new HeadlessController(null, null);
+			controller = new HeadlessController((Path) null, null);
 		if (!controller.setup())
-			throw new IOException("Error initializing ConfigManager");
+			throw new IOException("Error initializing Controller");
 	}
 
 	/**

File: src/main/java/me/coley/recaf/util/self/UpdateTaskStarter.java
Patch:
@@ -8,8 +8,8 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
-import java.util.ArrayList;
 import java.util.Collections;
+import java.util.LinkedList;
 import java.util.List;
 
 /**
@@ -53,7 +53,7 @@ public void start() throws IOException {
 		Path updaterPath = Recaf.getDirectory().resolve(CLASS_NAME +".class");
 		Files.write(updaterPath, dump(), StandardOpenOption.CREATE);
 		// Execute
-		List<String> procArgs = new ArrayList<>();
+		List<String> procArgs = new LinkedList<>();
 		procArgs.add(System.getProperty("java.home") + File.separator + "bin" + File.separator + "java");
 		procArgs.add("-cp");
 		procArgs.add(Recaf.getDirectory().toString());

File: src/main/java/me/coley/recaf/workspace/EntryLoader.java
Patch:
@@ -98,7 +98,7 @@ public boolean onClass(String entryName, byte[] value) {
 	 */
 	public boolean onFile(String entryName, byte[] value) {
 		for (LoadInterceptorPlugin interceptor : PluginsManager.getInstance().ofType(LoadInterceptorPlugin.class)) {
-			value = interceptor.interceptClass(entryName, value);
+			value = interceptor.interceptFile(entryName, value);
 		}
 		files.put(entryName, value);
 		return true;

File: src/test/java/me/coley/recaf/util/TestUtils.java
Patch:
@@ -8,6 +8,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Field;
+import java.nio.file.Path;
 
 import static org.junit.jupiter.api.Assertions.fail;
 
@@ -28,7 +29,7 @@ public class TestUtils {
 	 */
 	public static Controller setupController(JavaResource resource) throws IOException {
 		// Set up the controller
-		Controller controller = new HeadlessController(null, null);
+		Controller controller = new HeadlessController((Path) null, null);
 		controller.setWorkspace(new Workspace(resource));
 		controller.config().initialize();
 		return controller;

File: src/main/java/me/coley/recaf/util/JavaParserUtil.java
Patch:
@@ -539,6 +539,9 @@ private static String primTypeToDesc(String type, int arrayLevel) {
 			case "boolean":
 				desc = "Z";
 				break;
+			case "char":
+				desc = "C";
+				break;
 			case "int":
 				desc = "I";
 				break;

File: src/main/java/me/coley/recaf/command/impl/WorkspaceInfo.java
Patch:
@@ -44,7 +44,7 @@ private void append(StringBuilder sb, JavaResource resource) {
 			case JAR:
 			case WAR:
 			case DIRECTORY:
-				sb.append(((FileSystemResource)resource).getFile());
+				sb.append(((FileSystemResource)resource).getPath().normalize());
 				break;
 			case MAVEN:
 				sb.append(((MavenResource)resource).getCoords());

File: src/main/java/me/coley/recaf/control/Controller.java
Patch:
@@ -7,6 +7,7 @@
 import me.coley.recaf.plugin.PluginsManager;
 import me.coley.recaf.plugin.api.CommandPlugin;
 import me.coley.recaf.plugin.api.StartupPlugin;
+import me.coley.recaf.util.IOUtil;
 import me.coley.recaf.workspace.InstrumentationResource;
 import me.coley.recaf.workspace.Workspace;
 
@@ -50,7 +51,7 @@ public Controller(Path workspace) {
 	 * 		Use {@link Controller#Controller(Path)} instead.
 	 */
 	public Controller(File workspace) {
-		this(workspace.toPath());
+		this(IOUtil.toPath(workspace));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/control/gui/GuiController.java
Patch:
@@ -6,6 +6,7 @@
 import me.coley.recaf.plugin.PluginKeybinds;
 import me.coley.recaf.ui.MainWindow;
 import me.coley.recaf.ui.controls.ExceptionAlert;
+import me.coley.recaf.util.IOUtil;
 import me.coley.recaf.util.ThreadUtil;
 import me.coley.recaf.workspace.Workspace;
 
@@ -41,7 +42,7 @@ public GuiController(Path workspace) {
 	 * 		Use {@link GuiController#GuiController(Path)} instead.
 	 */
 	public GuiController(File workspace) {
-		this(workspace.toPath());
+		this(IOUtil.toPath(workspace));
 	}
 
 	@Override
@@ -101,7 +102,7 @@ public void loadWorkspace(Path path, Consumer<Boolean> action) {
 	 * 		Use {@link GuiController#loadWorkspace(Path, Consumer)} instead.
 	 */
 	public void loadWorkspace(File file, Consumer<Boolean> action) {
-		loadWorkspace(file.toPath(), action);
+		loadWorkspace(IOUtil.toPath(file), action);
 	}
 
 	/**

File: src/main/java/me/coley/recaf/control/headless/HeadlessController.java
Patch:
@@ -7,6 +7,7 @@
 import me.coley.recaf.parse.bytecode.parser.NumericParser;
 import me.coley.recaf.search.SearchCollector;
 import me.coley.recaf.search.SearchResult;
+import me.coley.recaf.util.IOUtil;
 import me.coley.recaf.util.Log;
 import me.coley.recaf.util.RegexUtil;
 import picocli.CommandLine;
@@ -58,7 +59,7 @@ public HeadlessController(Path workspace, Path script) {
 	 * 		Use {@link HeadlessController#HeadlessController(Path, Path)} instead.
 	 */
 	public HeadlessController(File workspace, File script) {
-		this(workspace.toPath(), script.toPath());
+		this(IOUtil.toPath(workspace), IOUtil.toPath(script));
 	}
 
 	@Override

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -16,6 +16,7 @@
 import me.coley.recaf.search.QueryType;
 import me.coley.recaf.ui.controls.*;
 import me.coley.recaf.util.ClasspathUtil;
+import me.coley.recaf.util.IOUtil;
 import me.coley.recaf.util.Log;
 import me.coley.recaf.util.self.SelfUpdater;
 import me.coley.recaf.workspace.*;
@@ -206,7 +207,7 @@ private void load() {
 		fcLoad.setInitialDirectory(config().getRecentLoadDir());
 		File file = fcLoad.showOpenDialog(null);
 		if(file != null) {
-			controller.loadWorkspace(file.toPath(), null);
+			controller.loadWorkspace(IOUtil.toPath(file), null);
 		}
 	}
 

File: src/main/java/me/coley/recaf/ui/controls/WorkspaceNavigator.java
Patch:
@@ -7,6 +7,7 @@
 import javafx.scene.layout.BorderPane;
 import me.coley.recaf.control.gui.GuiController;
 import me.coley.recaf.ui.controls.tree.*;
+import me.coley.recaf.util.IOUtil;
 import me.coley.recaf.util.LangUtil;
 import me.coley.recaf.workspace.*;
 
@@ -104,7 +105,7 @@ private void onDragDrop(DragEvent e) {
 		// Load drag-drop files
 		if(e.getDragboard().hasFiles()) {
 			File file = e.getDragboard().getFiles().get(0);
-			controller.loadWorkspace(file.toPath(), null);
+			controller.loadWorkspace(IOUtil.toPath(file), null);
 		}
 	}
 

File: src/main/java/me/coley/recaf/ui/controls/text/JavaEditorPane.java
Patch:
@@ -150,7 +150,7 @@ private List<String> getClassPath() throws IOException {
 	private void add(List<String> path, JavaResource resource) {
 		if (resource instanceof FileSystemResource) {
 			FileSystemResource fsr = (FileSystemResource) resource;
-			path.add(fsr.getFile().getAbsolutePath());
+			path.add(IOUtil.toString(fsr.getPath()));
 		} else if (resource instanceof DeferringResource) {
 			JavaResource deferred = ((DeferringResource) resource).getBacking();
 			add(path, deferred);

File: src/main/java/me/coley/recaf/util/ShortcutUtil.java
Patch:
@@ -63,7 +63,7 @@ public static boolean isPotentialValidLink(final Path path) {
 	 * 		Use {@link ShortcutUtil#isPotentialValidLink(Path)} instead.
 	 */
 	public static boolean isPotentialValidLink(final File file) {
-		return isPotentialValidLink(file.toPath());
+		return isPotentialValidLink(IOUtil.toPath(file));
 	}
 
 	/**
@@ -93,7 +93,7 @@ public ShortcutUtil(final Path path) throws IOException, ParseException {
 	 * 		Use {@link ShortcutUtil#ShortcutUtil(Path)} instead.
 	 */
 	public ShortcutUtil(final File file) throws IOException, ParseException {
-		this(file.toPath());
+		this(IOUtil.toPath(file));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/workspace/ArchiveResource.java
Patch:
@@ -1,5 +1,7 @@
 package me.coley.recaf.workspace;
 
+import me.coley.recaf.util.IOUtil;
+
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Path;
@@ -40,6 +42,6 @@ public ArchiveResource(ResourceKind kind, Path path) throws IOException {
 	 */
 	@Deprecated
 	public ArchiveResource(ResourceKind kind, File file) throws IOException {
-		this(kind, file.toPath());
+		this(kind, IOUtil.toPath(file));
 	}
 }

File: src/main/java/me/coley/recaf/workspace/FileSystemResource.java
Patch:
@@ -47,7 +47,7 @@ public FileSystemResource(ResourceKind kind, Path path) throws IOException {
 	 */
 	@Deprecated
 	public FileSystemResource(ResourceKind kind, File file) throws IOException {
-		this(kind, file.toPath());
+		this(kind, IOUtil.toPath(file));
 	}
 
 
@@ -64,7 +64,6 @@ public FileSystemResource(ResourceKind kind, File file) throws IOException {
 	 * @throws UnsupportedOperationException
 	 * 		When the file extension is not supported.
 	 */
-	@Deprecated
 	public static FileSystemResource of(Path path) throws IOException {
 		if (Files.isDirectory(path))
 			return new DirectoryResource(path);
@@ -97,7 +96,7 @@ public static FileSystemResource of(Path path) throws IOException {
 	 */
 	@Deprecated
 	public static FileSystemResource of(File file) throws IOException {
-		return of(file.toPath());
+		return of(IOUtil.toPath(file));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/workspace/JarResource.java
Patch:
@@ -40,7 +40,7 @@ public JarResource(Path path) throws IOException {
 	 */
 	@Deprecated
 	public JarResource(File file) throws IOException {
-		this(file.toPath());
+		this(IOUtil.toPath(file));
 	}
 
 	@Override
@@ -49,7 +49,7 @@ protected Map<String, byte[]> loadClasses() throws IOException {
 		ByteArrayOutputStream out = new ByteArrayOutputStream();
 		byte[] buffer = new byte[8192];
 		EntryLoader loader = getEntryLoader();
-		try (ZipFile zipFile = new ZipFile(getFile())) {
+		try (ZipFile zipFile = new ZipFile(getPath().toFile())) {
 			Enumeration<? extends ZipEntry> entries = zipFile.entries();
 			while(entries.hasMoreElements()) {
 				// verify entries are classes and valid files
@@ -77,7 +77,7 @@ protected Map<String, byte[]> loadFiles() throws IOException {
 		ByteArrayOutputStream out = new ByteArrayOutputStream();
 		byte[] buffer = new byte[8192];
 		EntryLoader loader = getEntryLoader();
-		try (ZipFile zipFile = new ZipFile(getFile())) {
+		try (ZipFile zipFile = new ZipFile(getPath().toFile())) {
 			Enumeration<? extends ZipEntry> entries = zipFile.entries();
 			while(entries.hasMoreElements()) {
 				// verify entries are not classes and are valid files

File: src/main/java/me/coley/recaf/workspace/JavaResource.java
Patch:
@@ -6,6 +6,7 @@
 import me.coley.recaf.parse.javadoc.Javadocs;
 import me.coley.recaf.parse.source.SourceCode;
 import me.coley.recaf.parse.source.SourceCodeException;
+import me.coley.recaf.util.IOUtil;
 import me.coley.recaf.util.struct.ListeningMap;
 import org.apache.commons.io.IOUtils;
 
@@ -430,7 +431,7 @@ public boolean setClassSources(Path path) throws  IOException {
 	 * 		Use {@link JavaResource#setClassSources(Path)} instead.
 	 */
 	public boolean setClassSources(File file) throws  IOException {
-		return setClassSources(file.toPath());
+		return setClassSources(IOUtil.toPath(file));
 	}
 
 	/**
@@ -469,7 +470,7 @@ public boolean setClassDocs(Path path) throws  IOException {
 	 * 		Use {@link JavaResource#setClassDocs(Path)} instead.
 	 */
 	public boolean setClassDocs(File file) throws  IOException {
-		return setClassDocs(file.toPath());
+		return setClassDocs(IOUtil.toPath(file));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/workspace/WarResource.java
Patch:
@@ -42,7 +42,7 @@ public WarResource(Path path) throws IOException {
 	 * 		Use {@link WarResource#WarResource(Path)} instead.
 	 */
 	public WarResource(File file) throws IOException {
-		this(file.toPath());
+		this(IOUtil.toPath(file));
 	}
 
 	@Override
@@ -51,7 +51,7 @@ protected Map<String, byte[]> loadClasses() throws IOException {
 		ByteArrayOutputStream out = new ByteArrayOutputStream();
 		byte[] buffer = new byte[8192];
 		EntryLoader loader = getEntryLoader();
-		try (ZipFile zipFile = new ZipFile(getFile())) {
+		try (ZipFile zipFile = new ZipFile(getPath().toFile())) {
 			Enumeration<? extends ZipEntry> entries = zipFile.entries();
 			while(entries.hasMoreElements()) {
 				// verify entries are classes and valid files
@@ -82,7 +82,7 @@ protected Map<String, byte[]> loadFiles() throws IOException {
 		ByteArrayOutputStream out = new ByteArrayOutputStream();
 		byte[] buffer = new byte[8192];
 		EntryLoader loader = getEntryLoader();
-		try (ZipFile zipFile = new ZipFile(getFile())) {
+		try (ZipFile zipFile = new ZipFile(getPath().toFile())) {
 			Enumeration<? extends ZipEntry> entries = zipFile.entries();
 			while(entries.hasMoreElements()) {
 				// verify entries are not classes and are valid files

File: src/test/java/me/coley/recaf/ResourceInputTest.java
Patch:
@@ -40,7 +40,7 @@ public void testJarResourcesDoNotContainClasses() {
 			File file = getClasspathFile("calc.jar");
 			JavaResource resource = new JarResource(file);
 			for (String name : resource.getFiles().keySet())
-				assertTrue(!name.endsWith(".class"));
+				assertFalse(name.endsWith(".class"));
 		} catch(IOException ex) {
 			fail(ex);
 		}

File: src/main/java/me/coley/recaf/command/impl/LoadWorkspace.java
Patch:
@@ -7,7 +7,6 @@
 import me.coley.recaf.workspace.*;
 import picocli.CommandLine;
 
-import java.io.File;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;

File: src/main/java/me/coley/recaf/workspace/ClassResource.java
Patch:
@@ -66,7 +66,8 @@ protected Map<String, byte[]> loadFiles() {
 	protected Map<String, SourceCode> loadSources(Path path) throws IOException {
 		if (IOUtil.getExtension(path).equals("java")) {
 			try {
-				SourceCode code = new SourceCode(this, String.join("", Files.readAllLines(path, StandardCharsets.UTF_8)));
+				SourceCode code = new SourceCode(this, String.join("", Files.readAllLines(path,
+						StandardCharsets.UTF_8)));
 				code.analyze();
 				return Collections.singletonMap(code.getInternalName(), code);
 			} catch(IOException ex) {

File: src/main/java/me/coley/recaf/workspace/InstrumentationResource.java
Patch:
@@ -24,7 +24,9 @@
  * @author Matt
  */
 public class InstrumentationResource extends JavaResource {
-	private static final ResourceLocation LOCATION = LiteralResourceLocation.ofKind(ResourceKind.INSTRUMENTATION,"Instrumentation");
+	private static final ResourceLocation LOCATION = LiteralResourceLocation.ofKind(
+			ResourceKind.INSTRUMENTATION,
+			"Instrumentation");
 	public static Instrumentation instrumentation;
 	private static InstrumentationResource instance;
 

File: src/test/java/me/coley/recaf/util/TestUtils.java
Patch:
@@ -8,6 +8,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Field;
+import java.nio.file.Path;
 
 import static org.junit.jupiter.api.Assertions.fail;
 
@@ -28,7 +29,7 @@ public class TestUtils {
 	 */
 	public static Controller setupController(JavaResource resource) throws IOException {
 		// Set up the controller
-		Controller controller = new HeadlessController(null, null);
+		Controller controller = new HeadlessController((Path) null, null);
 		controller.setWorkspace(new Workspace(resource));
 		controller.config().initialize();
 		return controller;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/InvokeDynamicParser.java
Patch:
@@ -62,7 +62,7 @@ public InvokeDynamicAST visit(int lineNo, String line) throws ASTParseException
 			// we'll fix that whenever it happens
 			List<AST> args = new ArrayList<>();
 			if (!argsS.isEmpty()) {
-				String[] argsSplit = argsS.split(",\\s*");
+				String[] argsSplit = argsS.split(",\\s*(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)");
 				for(String arg : argsSplit) {
 					AST ast = parseArg(lineNo, arg);
 					if(ast == null)

File: src/main/java/me/coley/recaf/ui/controls/ExceptionAlert.java
Patch:
@@ -75,7 +75,7 @@ private ExceptionAlert(Throwable t, String msg) {
 		getDialogPane().setExpanded(true);
 		// Set icon
 		Stage stage = (Stage) getDialogPane().getScene().getWindow();
-		stage.getIcons().add(new Image(resource("icons/log/errr.png")));
+		stage.getIcons().add(new Image(resource("icons/error.png")));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/search/SearchClassVisitor.java
Patch:
@@ -72,7 +72,7 @@ public FieldVisitor visitField(int access, String name, String descriptor, Strin
 		collector.queries(MemberDefinitionQuery.class)
 				.forEach(q -> {
 					q.match(access, context.getName(), name, descriptor);
-					collector.addMatched(context, q);
+					collector.addMatched(fieldContext, q);
 				});
 		return new SearchFieldVisitor(collector, fieldContext);
 	}
@@ -83,7 +83,7 @@ public MethodVisitor visitMethod(int access, String name, String descriptor, Str
 		collector.queries(MemberDefinitionQuery.class)
 				.forEach(q -> {
 					q.match(access, context.getName(), name, descriptor);
-					collector.addMatched(context, q);
+					collector.addMatched(methodContext, q);
 				});
 		return new SearchMethodVisitor(collector, methodContext);
 	}

File: src/main/java/me/coley/recaf/ui/controls/ExceptionAlert.java
Patch:
@@ -75,7 +75,7 @@ private ExceptionAlert(Throwable t, String msg) {
 		getDialogPane().setExpanded(true);
 		// Set icon
 		Stage stage = (Stage) getDialogPane().getScene().getWindow();
-		stage.getIcons().add(new Image(resource("icons/log/errr.png")));
+		stage.getIcons().add(new Image(resource("icons/error.png")));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/ui/controls/ExceptionAlert.java
Patch:
@@ -75,7 +75,7 @@ private ExceptionAlert(Throwable t, String msg) {
 		getDialogPane().setExpanded(true);
 		// Set icon
 		Stage stage = (Stage) getDialogPane().getScene().getWindow();
-		stage.getIcons().add(new Image(resource("icons/log/errr.png")));
+		stage.getIcons().add(new Image(resource("icons/error.png")));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeErrorHandling.java
Patch:
@@ -1,8 +1,8 @@
 package me.coley.recaf.ui.controls.text;
 
-import com.github.javaparser.utils.Log;
 import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.exception.AssemblerException;
+import me.coley.recaf.util.Log;
 import me.coley.recaf.util.struct.*;
 
 import java.util.*;

File: src/main/java/me/coley/recaf/workspace/InstrumentationResource.java
Patch:
@@ -34,6 +34,8 @@ public class InstrumentationResource extends JavaResource {
 	 */
 	private InstrumentationResource() throws IllegalStateException, IOException {
 		super(ResourceKind.INSTRUMENTATION);
+		// Instrumentation is ALWAYS primary
+		setPrimary(true);
 		if(instrumentation == null)
 			throw new IllegalStateException("Instrumentation has not been initialized!");
 		if (instance != null)

File: src/main/java/me/coley/recaf/workspace/EntryLoader.java
Patch:
@@ -132,7 +132,9 @@ public boolean isFileValidClassName(String name) {
 	 * @return If the entry indicates the content is a valid file.
 	 */
 	public boolean isValidFileEntry(ZipEntry entry) {
-		if (entry.isDirectory())
+		// If the entry is a directory, then skip it....
+		// Unless its a "fake" directory because archive manipulation by obfuscation
+		if (entry.isDirectory() && !isValidClassEntry(entry))
 			return false;
 		String name = entry.getName();
 		// name / directory escaping

File: src/main/java/me/coley/recaf/ui/controls/text/EditorPane.java
Patch:
@@ -86,7 +86,7 @@ private void setupCodeArea(Language language) {
 		codeArea.richChanges()
 				.filter(ch -> !ch.isPlainTextIdentity())
 				.filter(ch -> !ch.getInserted().equals(ch.getRemoved()))
-				.subscribe(change -> ThreadUtil.runJfx(() -> {
+				.subscribe(change -> ThreadUtil.runSupplyConsumer(() -> {
 					if(onCodeChange != null)
 						onCodeChange.accept(codeArea.getText());
 					return styler.computeStyle(codeArea.getText());

File: src/main/java/me/coley/recaf/ui/controls/view/ClassViewport.java
Patch:
@@ -156,7 +156,7 @@ public void updateView() {
 					});
 				};
 				// Run actions
-				ThreadUtil.runJfx(supplier, timeout, timeoutAction, consumer, handler);
+				ThreadUtil.runSupplyConsumer(supplier, timeout, timeoutAction, consumer, handler);
 				break;
 			}
 			case TABLE: {

File: src/main/java/me/coley/recaf/parse/bytecode/Disassembler.java
Patch:
@@ -349,7 +349,6 @@ private void visitIndyInsn(StringBuilder line, InvokeDynamicInsnNode insn) {
 		line.append(" args[");
 		for(int i = 0; i < insn.bsmArgs.length; i++) {
 			Object arg = insn.bsmArgs[i];
-			// int
 			if (arg instanceof Integer)
 				line.append(arg);
 			else if (arg instanceof Float)
@@ -362,6 +361,8 @@ else if (arg instanceof Type)
 				line.append(arg);
 			else if (arg instanceof Handle)
 				visitHandle(line, (Handle) arg, false);
+			else if (arg instanceof String)
+				line.append("\"" + StringUtil.escape((String)arg) +"\"");
 			if(i < insn.bsmArgs.length - 1)
 				line.append(", ");
 		}

File: src/main/java/me/coley/recaf/parse/bytecode/ast/LdcInsnAST.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.Variables;
 import me.coley.recaf.util.EscapeUtil;
+import me.coley.recaf.util.StringUtil;
 import org.objectweb.asm.tree.*;
 import org.objectweb.asm.Type;
 
@@ -40,7 +41,7 @@ public AST getContent() {
 
 	@Override
 	public String print() {
-		return getOpcode().print() + " " + content.print();
+		return getOpcode().print() + " " + StringUtil.escape(content.print());
 	}
 
 	@Override

File: src/main/java/me/coley/recaf/parse/bytecode/parser/DescParser.java
Patch:
@@ -37,7 +37,7 @@ public DescAST visit(int lineNo, String line) throws ASTParseException {
 			int start = line.indexOf(trim);
 			return new DescAST(lineNo, getOffset() + start, trim);
 		} catch(Exception ex) {
-			throw new ASTParseException(ex, lineNo, "Bad format for descriptor");
+			throw new ASTParseException(ex, lineNo, "Bad format for descriptor: " + ex.getMessage());
 		}
 	}
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/StringParser.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.StringAST;
+import me.coley.recaf.util.StringUtil;
 
 /**
  * {@link StringAST} parser.
@@ -13,7 +14,7 @@ public class StringParser extends AbstractParser<StringAST> {
 	@Override
 	public StringAST visit(int lineNo, String line) throws ASTParseException {
 		try {
-			String trim = line.trim();
+			String trim = StringUtil.unescape(line.trim());
 			if(!(trim.charAt(0) == '"' && trim.charAt(trim.length() - 1) == '"'))
 				throw new ASTParseException(lineNo, "Invalid string: " + trim);
 			int start = line.indexOf(trim);

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -6,6 +6,7 @@
 import me.coley.recaf.plugin.PluginsManager;
 import me.coley.recaf.plugin.api.EntryLoaderProviderPlugin;
 import me.coley.recaf.util.Log;
+import me.coley.recaf.util.UiUtil;
 import me.coley.recaf.util.self.SelfDependencyPatcher;
 import me.coley.recaf.util.self.SelfUpdater;
 import me.coley.recaf.workspace.InstrumentationResource;
@@ -107,7 +108,7 @@ private static void init() {
 				System.setProperty("recaf.home", getDirectory().normalize().toString());
 			SelfDependencyPatcher.patch();
 			// Initialize JavaFX, we do this here so plugins that utilize JFX don't crash Recaf
-			new javafx.embed.swing.JFXPanel();
+			UiUtil.setupJfx();
 			// Fix title bar not displaying in GTK systems
 			System.setProperty("jdk.gtk.version", "2");
 			// Show version & start

File: src/main/java/me/coley/recaf/util/self/SelfDependencyPatcher.java
Patch:
@@ -29,7 +29,6 @@ public class SelfDependencyPatcher {
 	private static final Path DEPENDENCIES_DIR_PATH = Recaf.getDirectory("dependencies");
 	private static final String[] DEPENDENCIES = new String[] {
 		"https://repo1.maven.org/maven2/org/openjfx/javafx-media/11.0.2/javafx-media-11.0.2-%s.jar",
-		"https://repo1.maven.org/maven2/org/openjfx/javafx-swing/11.0.2/javafx-swing-11.0.2-%s.jar",
 		"https://repo1.maven.org/maven2/org/openjfx/javafx-controls/11.0.2/javafx-controls-11.0.2-%s.jar",
 		"https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/11.0.2/javafx-graphics-11.0.2-%s.jar",
 		"https://repo1.maven.org/maven2/org/openjfx/javafx-base/11.0.2/javafx-base-11.0.2-%s.jar"

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -195,6 +195,8 @@ List<LocalVariableNode> getVariables(Map<String, LabelNode> labels) {
 		//  - This seems to be correct...
 		for(Map.Entry<String, Integer> entry : nameToIndex.entrySet()) {
 			String name = entry.getKey();
+			if (name.matches("\\d+"))
+				continue;
 			int index = entry.getValue();
 			if (index == 0 && nameToIndex.containsKey("this"))
 				name = "this";

File: src/main/java/me/coley/recaf/command/impl/LoadWorkspace.java
Patch:
@@ -91,6 +91,7 @@ public Workspace call() throws Exception {
 		// Initial load classes & files
 		if (!lazy) {
 			status = LangUtil.translate("ui.load.loading");
+			resource.setPrimary(true);
 			resource.getClasses();
 			resource.getFiles();
 		}

File: src/main/java/me/coley/recaf/parse/bytecode/MethodAssembler.java
Patch:
@@ -133,7 +133,7 @@ else if(ast instanceof Instruction)
 	 *
 	 * @return Analyzed frames of the method.
 	 *
-	 * @throws AssemblerException
+	 * @throws VerifierException
 	 * 		Wrapped verification exception.
 	 */
 	private Frame<AbstractValue>[] verify(MethodNode generated) throws VerifierException {

File: src/main/java/me/coley/recaf/util/self/SelfDependencyPatcher.java
Patch:
@@ -41,7 +41,7 @@ public class SelfDependencyPatcher {
 	public static void patch() {
 		// Do nothing if JavaFX is detected
 		try {
-			if (ClasspathUtil.classExists("javafx.application.Platform"))
+			if (ClasspathUtil.classExists("javafx.embed.swing.JFXPanel"))
 				return;
 		} catch(UnsupportedClassVersionError error) {
 			// Loading the JavaFX class was unsupported.

File: src/main/java/me/coley/recaf/util/Log.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.HashSet;
 import java.util.Set;
 import java.util.function.Consumer;
+import java.util.regex.Matcher;
 
 /**
  * Proxy to intercept tinylog logging.
@@ -116,7 +117,7 @@ private static String compile(String msg, Object[] args) {
 		while(msg.contains("{}")) {
 			Object arg = args[c];
 			String argStr = arg == null ? "null" : arg.toString();
-			msg = msg.replaceFirst("\\{}", argStr);
+			msg = msg.replaceFirst("\\{}", Matcher.quoteReplacement(argStr));
 			c++;
 		}
 		return msg;

File: src/test/java/me/coley/recaf/HistoryTest.java
Patch:
@@ -21,6 +21,7 @@ public class HistoryTest extends Base {
 	public void setup() {
 		try {
 			resource = new JarResource(getClasspathFile("calc.jar"));
+			resource.setPrimary(true);
 			resource.getClasses();
 			resource.getFiles();
 		} catch(IOException ex) {

File: src/main/java/me/coley/recaf/ui/controls/AttachPane.java
Patch:
@@ -150,8 +150,9 @@ private void copy(VMInfo vm) {
 		String path = vm.getProperties().get("java.class.path");
 		String javaHome = vm.getProperties().get("java.home");
 		String localDir = vm.getProperties().get("user.dir");
+		String separator = vm.getProperties().get("path.separator");
 		if(path != null && !path.isEmpty()) {
-			String[] items = path.split(";");
+			String[] items = path.split(separator);
 			for(String item : items) {
 				Path filePath = Paths.get(item);
 				boolean isAbsolute = filePath.isAbsolute();

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -106,6 +106,8 @@ private static void init() {
 			if (System.getProperty("recaf.home") == null)
 				System.setProperty("recaf.home", getDirectory().normalize().toString());
 			SelfDependencyPatcher.patch();
+			// Initialize JavaFX, we do this here so plugins that utilize JFX don't crash Recaf
+			new javafx.embed.swing.JFXPanel();
 			// Fix title bar not displaying in GTK systems
 			System.setProperty("jdk.gtk.version", "2");
 			// Show version & start

File: src/main/java/me/coley/recaf/util/self/SelfDependencyPatcher.java
Patch:
@@ -29,6 +29,7 @@ public class SelfDependencyPatcher {
 	private static final Path DEPENDENCIES_DIR_PATH = Recaf.getDirectory("dependencies");
 	private static final String[] DEPENDENCIES = new String[] {
 		"https://repo1.maven.org/maven2/org/openjfx/javafx-media/11.0.2/javafx-media-11.0.2-%s.jar",
+		"https://repo1.maven.org/maven2/org/openjfx/javafx-swing/11.0.2/javafx-swing-11.0.2-%s.jar",
 		"https://repo1.maven.org/maven2/org/openjfx/javafx-controls/11.0.2/javafx-controls-11.0.2-%s.jar",
 		"https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/11.0.2/javafx-graphics-11.0.2-%s.jar",
 		"https://repo1.maven.org/maven2/org/openjfx/javafx-base/11.0.2/javafx-base-11.0.2-%s.jar"

File: src/main/java/me/coley/recaf/parse/bytecode/Disassembler.java
Patch:
@@ -303,7 +303,7 @@ private void visitIincInsn(StringBuilder line, IincInsnNode insn) {
 	}
 
 	private void visitTableSwitchInsn(StringBuilder line, TableSwitchInsnNode insn) {
-		line.append(" range[").append(insn.min).append('-').append(insn.max).append(']');
+		line.append(" range[").append(insn.min).append(':').append(insn.max).append(']');
 		line.append(" labels[");
 		for(int i = 0; i < insn.labels.size(); i++) {
 			String name = name(insn.labels.get(i));

File: src/main/java/me/coley/recaf/parse/bytecode/ast/TableSwitchInsnAST.java
Patch:
@@ -82,7 +82,7 @@ public String print() {
 				.map(NameAST::print)
 				.collect(Collectors.joining(", "));
 		return getOpcode().print() +
-				" range[" + rangeMin.print() +"-" + rangeMax.print() + "]" +
+				" range[" + rangeMin.print() +":" + rangeMax.print() + "]" +
 				" offsets[" + lbls + "]" +
 				" default[" + dfltLabel.print() + "]";
 	}

File: src/main/java/me/coley/recaf/parse/bytecode/parser/TableSwitchInsnParser.java
Patch:
@@ -30,10 +30,10 @@ public TableSwitchInsnAST visit(int lineNo, String line) throws ASTParseExceptio
 				throw new ASTParseException(lineNo, "Not enough paramters");
 			// min & max
 			String minMaxS = data[0];
-			if (!minMaxS.contains("-"))
-				throw new ASTParseException(lineNo, "Bad range format, expected <MIN>-<MAX>");
+			if (!minMaxS.contains(":"))
+				throw new ASTParseException(lineNo, "Bad range format, expected <MIN>:<MAX>");
 			int minMaxStart = line.indexOf(minMaxS);
-			String[] minMaxS2 = minMaxS.split("-");
+			String[] minMaxS2 = minMaxS.split(":");
 			IntParser intParser = new IntParser();
 			intParser.setOffset(minMaxStart);
 			NumberAST min = intParser.visit(lineNo, minMaxS2[0]);

File: src/main/java/me/coley/recaf/parse/bytecode/RValue.java
Patch:
@@ -15,7 +15,7 @@
 public class RValue implements Value {
 	public static final RValue UNINITIALIZED = new RValue(null, null);
 	public static final RValue RETURNADDRESS_VALUE = new RValue(Type.VOID_TYPE, null);
-	public static final RValue NULL = new RValue(Type.getObjectType("java/lang/Object"), null);
+	public static final RValue NULL = new RValue(TypeUtil.OBJECT_TYPE, null);
 	private static final List<Integer> sortOrdering = new ArrayList<>();
 	private final Type type;
 	private final Object value;

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -145,7 +145,7 @@ void visitWithFrames(Frame<RValue>[] frames, Map<String, LabelNode> labels) thro
 					//  - The problem here is this logic assumes no index re-use...
 					//  - This should throw an exception later, but for now
 					//    we just pretend the variable is an object (since everything is)
-					lastElementType = Type.getObjectType("java/lang/Object");
+					lastElementType = TypeUtil.OBJECT_TYPE;
 					break;
 					//throw new VerifierException("Stored multiple array sizes in same variable slot: " + index);
 				}

File: src/main/java/me/coley/recaf/parse/bytecode/parser/TryCatchParser.java
Patch:
@@ -38,6 +38,7 @@ public TryCatchAST visit(int lineNo, String line) throws ASTParseException {
 			String typeS = RegexUtil.getFirstToken("(?<=\\().+(?=\\))", trim);
 			if (typeS == null)
 				throw new ASTParseException(lineNo, "Missing type in CATCH(<type>)");
+			typeS = typeS.trim();
 			TypeAST type = null;
 			if (typeS.equals("*")) {
 				TypeParser typeParser = new TypeParser();

File: src/main/java/me/coley/recaf/parse/bytecode/RValue.java
Patch:
@@ -3,7 +3,6 @@
 import me.coley.recaf.Recaf;
 import me.coley.recaf.util.TypeUtil;
 import org.objectweb.asm.Type;
-import org.objectweb.asm.tree.analysis.AnalyzerException;
 import org.objectweb.asm.tree.analysis.Value;
 
 import java.util.*;

File: src/main/java/me/coley/recaf/parse/bytecode/ast/JumpInsnAST.java
Patch:
@@ -1,7 +1,6 @@
 package me.coley.recaf.parse.bytecode.ast;
 
 import me.coley.recaf.parse.bytecode.Variables;
-import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import org.objectweb.asm.tree.*;
 

File: src/main/java/me/coley/recaf/workspace/ClassResource.java
Patch:
@@ -2,11 +2,8 @@
 
 import me.coley.recaf.parse.source.SourceCode;
 import me.coley.recaf.parse.source.SourceCodeException;
-import me.coley.recaf.plugin.PluginsManager;
-import me.coley.recaf.plugin.api.LoadInterceptorPlugin;
 import me.coley.recaf.util.IOUtil;
 import org.apache.commons.io.FileUtils;
-import org.objectweb.asm.ClassReader;
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;

File: src/main/java/me/coley/recaf/parse/bytecode/Disassembler.java
Patch:
@@ -288,6 +288,8 @@ else if (insn.cst instanceof Double) {
 		}
 		else if (insn.cst instanceof Float)
 			line.append(insn.cst).append('F');
+		else if (insn.cst instanceof Handle)
+			visitHandle(line, (Handle) insn.cst, false);
 		else
 			line.append(insn.cst);
 	}

File: src/main/java/me/coley/recaf/parse/bytecode/RAnalyzer.java
Patch:
@@ -29,7 +29,7 @@ public RAnalyzer(RInterpreter interpreter) {
 	@Override
 	public Frame<RValue>[] analyze(String owner, MethodNode method) throws AnalyzerException {
 		Frame<RValue>[] values = super.analyze(owner, method);
-		// If the interp
+		// If the interpeter has problems, check if they've been resolved by checking frames
 		if (interpreter.hasReportedProblems()) {
 			// Check if the error logged no longer applies given the stack analysis results (due to flow control most likely)
 			for(Map.Entry<AbstractInsnNode, AnalyzerException> e : new HashSet<>(interpreter.getProblemInsns().entrySet())) {

File: src/main/java/me/coley/recaf/parse/bytecode/Verifier.java
Patch:
@@ -38,7 +38,7 @@ Frame<RValue>[] verify(MethodNode method) throws VerifierException {
 		} catch(Exception ex) {
 			// IndexOutOfBoundsException: When local variables are messed up
 			// Exception: ?
-			throw new VerifierException(ex, "Verifier crashed", -1);
+			throw new VerifierException(ex, "Verifier crashed: (" + ex.getClass().getSimpleName() + ") " + ex.getMessage(), -1);
 		}
 	}
 }

File: src/main/java/me/coley/recaf/control/headless/JLineEditor.java
Patch:
@@ -4,6 +4,7 @@
 import me.coley.recaf.command.impl.Disassemble;
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.RootAST;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import me.coley.recaf.util.ClassUtil;
 import me.coley.recaf.workspace.Workspace;
 import org.apache.commons.io.FileUtils;

File: src/main/java/me/coley/recaf/parse/bytecode/AbstractParser.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.parse.bytecode;
 
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/FieldAssembler.java
Patch:
@@ -1,6 +1,8 @@
 package me.coley.recaf.parse.bytecode;
 
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import org.objectweb.asm.tree.FieldNode;
 
 /**

File: src/main/java/me/coley/recaf/parse/bytecode/MethodAssembler.java
Patch:
@@ -2,6 +2,9 @@
 
 import me.coley.recaf.config.ConfAssembler;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
+import me.coley.recaf.parse.bytecode.exception.VerifierException;
 import me.coley.recaf.util.AccessFlag;
 import org.objectweb.asm.tree.*;
 import org.objectweb.asm.tree.analysis.Frame;

File: src/main/java/me/coley/recaf/parse/bytecode/Parse.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.parse.bytecode;
 
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.parser.*;
 import me.coley.recaf.util.OpcodeUtil;
 import org.objectweb.asm.tree.AbstractInsnNode;

File: src/main/java/me/coley/recaf/parse/bytecode/ParseResult.java
Patch:
@@ -1,6 +1,7 @@
 package me.coley.recaf.parse.bytecode;
 
 import me.coley.recaf.parse.bytecode.ast.AST;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.List;
 

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.Recaf;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import me.coley.recaf.util.TypeUtil;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.*;

File: src/main/java/me/coley/recaf/parse/bytecode/Verifier.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.parse.bytecode;
 
+import me.coley.recaf.parse.bytecode.exception.VerifierException;
 import org.objectweb.asm.tree.MethodNode;
 import org.objectweb.asm.tree.analysis.*;
 
@@ -21,6 +22,7 @@ class Verifier extends RAnalyzer {
 	 * 		Declaring type of method to be analyzed.
 	 */
 	Verifier(MethodAssembler assembler, String currentType) {
+		super(new RInterpreter());
 		this.currentType = currentType;
 		this.assembler = assembler;
 	}

File: src/main/java/me/coley/recaf/parse/bytecode/ast/IincInsnAST.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.ast;
 
-import me.coley.recaf.parse.bytecode.AssemblerException;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import me.coley.recaf.parse.bytecode.Variables;
 import org.objectweb.asm.tree.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/ast/InsnAST.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.ast;
 
-import me.coley.recaf.parse.bytecode.AssemblerException;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import me.coley.recaf.parse.bytecode.Variables;
 import org.objectweb.asm.tree.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/ast/Instruction.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.ast;
 
-import me.coley.recaf.parse.bytecode.AssemblerException;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import me.coley.recaf.parse.bytecode.Variables;
 import me.coley.recaf.util.OpcodeUtil;
 import org.objectweb.asm.tree.AbstractInsnNode;

File: src/main/java/me/coley/recaf/parse/bytecode/ast/VarInsnAST.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.ast;
 
-import me.coley.recaf.parse.bytecode.AssemblerException;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import me.coley.recaf.parse.bytecode.Variables;
 import org.objectweb.asm.tree.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/ast/VariableReference.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.ast;
 
-import me.coley.recaf.parse.bytecode.AssemblerException;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import me.coley.recaf.parse.bytecode.Variables;
 
 /**

File: src/main/java/me/coley/recaf/parse/bytecode/exception/ASTParseException.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.parse.bytecode;
+package me.coley.recaf.parse.bytecode.exception;
 
 import me.coley.recaf.util.struct.LineException;
 

File: src/main/java/me/coley/recaf/parse/bytecode/exception/AssemblerException.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.parse.bytecode;
+package me.coley.recaf.parse.bytecode.exception;
 
 import me.coley.recaf.util.struct.LineException;
 

File: src/main/java/me/coley/recaf/parse/bytecode/exception/VerifierException.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.parse.bytecode;
+package me.coley.recaf.parse.bytecode.exception;
 
 import java.util.Objects;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/AliasDeclarationParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/ArgParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/CommentParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.CommentAST;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/DefaultValueParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ParseResult;
 import me.coley.recaf.parse.bytecode.ast.AST;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/DescParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.AutoCompleteUtil;
 import org.objectweb.asm.Type;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/DoubleParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.NumberAST;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/FieldDefinitionParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ParseResult;
 import me.coley.recaf.parse.bytecode.ast.DefinitionModifierAST;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/FieldInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.AutoCompleteUtil;
 
 import java.util.Collections;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/FloatParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.NumberAST;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/HandleParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.AutoCompleteUtil;
 import org.objectweb.asm.Handle;
 import org.objectweb.asm.Opcodes;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/IincInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/InsnParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/IntInsnParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/IntParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/InvokeDynamicParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.RegexUtil;
 
 import java.util.*;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/JumpInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/LabelParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.*;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/LdcInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/LineInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/LongParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.NumberAST;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/LookupSwitchInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.RegexUtil;
 
 import java.util.*;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/MethodDefinitionParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/MethodInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.AutoCompleteUtil;
 
 import java.util.Collections;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/ModifierParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.*;
 import java.util.stream.Collectors;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/MultiArrayParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/NameParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/NumericParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 /**
  * {@link NumberAST} parser.

File: src/main/java/me/coley/recaf/parse/bytecode/parser/OpcodeParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.OpcodeUtil;
 
 import java.util.*;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/SignatureParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ParseResult;
 import me.coley.recaf.parse.bytecode.ast.RootAST;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/StringParser.java
Patch:
@@ -1,6 +1,6 @@
 package me.coley.recaf.parse.bytecode.parser;
 
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ast.StringAST;
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/TableSwitchInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.RegexUtil;
 
 import java.util.*;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/TagParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.OpcodeUtil;
 
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/ThrowsParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/TryCatchParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.RegexUtil;
 
 import java.util.Collections;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/TypeInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/TypeParser.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.RootAST;
 import me.coley.recaf.parse.bytecode.ast.TypeAST;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.util.AutoCompleteUtil;
 
 import java.util.Collections;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/VarInsnParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeErrorHandling.java
Patch:
@@ -1,8 +1,8 @@
 package me.coley.recaf.ui.controls.text;
 
 import com.github.javaparser.utils.Log;
-import me.coley.recaf.parse.bytecode.ASTParseException;
-import me.coley.recaf.parse.bytecode.AssemblerException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.AssemblerException;
 import me.coley.recaf.util.struct.*;
 
 import java.util.*;

File: src/test/java/me/coley/recaf/AssemblyAstTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.Parse;
 import me.coley.recaf.parse.bytecode.ParseResult;
-import me.coley.recaf.parse.bytecode.ASTParseException;
+import me.coley.recaf.parse.bytecode.exception.ASTParseException;
 import me.coley.recaf.parse.bytecode.ast.*;
 import me.coley.recaf.util.RegexUtil;
 import org.junit.jupiter.api.Nested;

File: src/main/java/me/coley/recaf/command/impl/Assemble.java
Patch:
@@ -59,7 +59,7 @@ public Result call() throws Exception {
 		String desc = methodDef.substring(descStart);
 		MethodNode method = null;
 		int methodIndex = -1;
-		for (int i = 0; i< node.methods.size(); i++) {
+		for (int i = 0; i < node.methods.size(); i++) {
 			MethodNode mn = node.methods.get(i);
 			if(mn.name.equals(name) && mn.desc.equals(desc)) {
 				method = mn;
@@ -84,7 +84,7 @@ public Result call() throws Exception {
 		ClassUtil.copyMethodMetadata(old, generated);
 		node.methods.set(methodIndex, generated);
 		// Return wrapper
-		return new Result(node, method);
+		return new Result(node, generated);
 	}
 
 	/**
@@ -107,7 +107,7 @@ public ClassNode getOwner() {
 		}
 
 		/**
-		 * @return The method that's been disassembled.
+		 * @return The assembled method.
 		 */
 		public MethodNode getMethod() {
 			return method;

File: src/main/java/me/coley/recaf/parse/bytecode/AssemblerException.java
Patch:
@@ -4,6 +4,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Objects;
 
 /**
  * Exception for invalid assembler input.
@@ -41,7 +42,7 @@ public AssemblerException(String message, int line) {
 	 * 		Line number relevant to the error.
 	 */
 	public AssemblerException(Throwable t, String message, int line) {
-		super(message, t);
+		super(Objects.requireNonNull(message), t);
 		this.line = line;
 	}
 

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -275,12 +275,12 @@ private void findRanges(RootAST root) throws AssemblerException {
 			if(start == null)
 				throw new AssemblerException("Failed to find start label for variable: " + name, line);
 			// Find end - first label after the last time this variable is referenced
-			AST end = (AST) ast;
-			AST marker = end;
+			LabelAST end = null;
+			AST marker = (AST) ast;
 			do {
 				marker = marker.getNext();
 				if(marker instanceof LabelAST)
-					end = marker;
+					end = (LabelAST) marker;
 				else if(marker instanceof VariableReference) {
 					// Nullify the "end" since the variable has been referenced again.
 					// The next label will be the end.

File: src/test/java/me/coley/recaf/AssemblyCasesTest.java
Patch:
@@ -71,7 +71,7 @@ public void testPutStatic() {
 					"LDC Ljava/lang/System;\n" +
 					"LDC \"/logo.png\"\n" +
 					"INVOKEVIRTUAL java/lang/Class.getResource(Ljava/lang/String;)Ljava/net/URL;\n" +
-					"INVOKESTATIC javax/imageio/ImageIO.read(Ljava/net/URL;)Ljava/awt/Image/BufferedImage;\n" +
+					"INVOKESTATIC javax/imageio/ImageIO.read(Ljava/net/URL;)Ljava/awt/image/BufferedImage;\n" +
 					"PUTSTATIC Test.logo Ljava/awt/image/BufferedImage;\n" +
 					"RETURN";
 			verifyPass(Parse.parse(s));

File: src/main/java/me/coley/recaf/parse/bytecode/RInterpreter.java
Patch:
@@ -194,7 +194,7 @@ public RValue unaryOperation(AbstractInsnNode insn, RValue value) throws Analyze
 			case I2S:
 				if (value.getValue() == null)
 					return RValue.of(Type.INT_TYPE);
-				return RValue.of((int) value.getValue());
+				return RValue.of(((Number) value.getValue()).intValue());
 			case FNEG:
 				if (value.getValue() == null)
 					return RValue.of(Type.FLOAT_TYPE);
@@ -214,7 +214,7 @@ public RValue unaryOperation(AbstractInsnNode insn, RValue value) throws Analyze
 			case D2L:
 				if (value.getValue() == null)
 					return RValue.of(Type.LONG_TYPE);
-				return RValue.of((long) value.getValue());
+				return RValue.of(((Number) value.getValue()).longValue());
 			case DNEG:
 				if (value.getValue() == null)
 					return RValue.of(Type.DOUBLE_TYPE);
@@ -224,7 +224,7 @@ public RValue unaryOperation(AbstractInsnNode insn, RValue value) throws Analyze
 			case F2D:
 				if (value.getValue() == null)
 					return RValue.of(Type.DOUBLE_TYPE);
-				return RValue.of((double) value.getValue());
+				RValue.of(((Number) value.getValue()).doubleValue());
 			case IFEQ:
 			case IFNE:
 			case IFLT:

File: src/main/java/me/coley/recaf/workspace/EntryLoader.java
Patch:
@@ -19,9 +19,6 @@ public class EntryLoader {
 	private final Map<String, byte[]> files = new HashMap<>();
 	private final Set<String> invalidClasses = new HashSet<>();
 
-	// Deny construction
-	private EntryLoader() {}
-
 	/**
 	 * @return New archive entry loader instance.
 	 */

File: src/main/java/me/coley/recaf/parse/bytecode/Disassembler.java
Patch:
@@ -485,6 +485,8 @@ else if (ain.getType() == VAR_INSN)
 	}
 
 	private static void splitSameNamedVariables(MethodNode node) {
+		if (node.localVariables == null)
+			return;
 		Map<Integer, LocalVariableNode> indexToVar = new HashMap<>();
 		Map<Integer, String> indexToName = new HashMap<>();
 		Map<String, Integer> nameToIndex = new HashMap<>();
@@ -524,7 +526,7 @@ private static void splitSameNamedVariables(MethodNode node) {
 		}
 		// Logging
 		if (changed) {
-			Log.warn("Automatically updated confusing variable names in method: " + node.name + node.desc);
+			Log.warn("Replacing confusing variable names in disassembly: " + node.name + node.desc);
 		}
 	}
 

File: src/main/java/me/coley/recaf/search/SearchMethodVisitor.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.parse.bytecode.Disassembler;
 import me.coley.recaf.util.AccessFlag;
 import me.coley.recaf.util.InsnUtil;
+import me.coley.recaf.util.Log;
 import org.objectweb.asm.*;
 import org.objectweb.asm.tree.*;
 
@@ -297,7 +298,7 @@ public void visitEnd() {
 				});
 			} catch(Exception ex) {
 				String owner = context.getParent().getName();
-				throw new IllegalStateException("Failed to disassemble method: " + owner + "." + name + desc);
+				Log.error(ex, "Failed to disassemble method: " + owner + "." + name + desc);
 			}
 		}
 	}

File: src/main/java/me/coley/recaf/config/Configurable.java
Patch:
@@ -169,7 +169,7 @@ default void loadType(FieldWrapper field, Class<?> type, JsonValue value) {
 		if (type.equals(ConfKeybinding.Binding.class)) {
 			List<String> list = new ArrayList<>();
 			JsonArray array = value.asArray();
-			String name = field.name();
+			String name = field.key();
 			array.forEach(v -> {
 				if(v.isString())
 					list.add(v.asString());

File: src/main/java/me/coley/recaf/control/gui/GuiController.java
Patch:
@@ -3,6 +3,7 @@
 import javafx.concurrent.Task;
 import me.coley.recaf.command.impl.LoadWorkspace;
 import me.coley.recaf.control.Controller;
+import me.coley.recaf.plugin.PluginKeybinds;
 import me.coley.recaf.ui.MainWindow;
 import me.coley.recaf.ui.controls.ExceptionAlert;
 
@@ -31,6 +32,7 @@ public GuiController(File workspace) {
 	@Override
 	public void run() {
 		super.run();
+		PluginKeybinds.getInstance().setup();
 		windows.setMainWindow(MainWindow.get(this));
 	}
 

File: src/main/java/me/coley/recaf/plugin/PluginKeybinds.java
Patch:
@@ -33,9 +33,9 @@ public class PluginKeybinds {
 	private PluginKeybinds() {}
 
 	/**
-	 * Called by {@link PluginsManager#load()}.
+	 * Setup keybind collections.
 	 */
-	void setup() {
+	public void setup() {
 		if (keybindProviders.isEmpty()) {
 			Collection<KeybindProviderPlugin> keybindProviders = PluginsManager.getInstance()
 					.ofType(KeybindProviderPlugin.class);

File: src/main/java/me/coley/recaf/plugin/PluginsManager.java
Patch:
@@ -70,8 +70,6 @@ public void load() throws Exception {
 				Log.error("Class '{}' does not extend plugin!", instance.getClass().getName());
 			}
 		}
-		// Register keybinds
-		PluginKeybinds.getInstance().setup();
 		// Done
 		if (!plugins.isEmpty())
 			Log.info("Loaded {} plugins", plugins.size());

File: src/main/java/me/coley/recaf/plugin/api/ConfigurablePlugin.java
Patch:
@@ -27,5 +27,5 @@ public interface ConfigurablePlugin extends BasePlugin, Configurable {
 	 * @param editors
 	 * 		Existing map to populate.
 	 */
-	void addFieldEditors(Map<String, Function<FieldWrapper, Node>> editors);
+	default void addFieldEditors(Map<String, Function<FieldWrapper, Node>> editors) {}
 }

File: src/main/java/me/coley/recaf/config/ConfBackend.java
Patch:
@@ -48,7 +48,7 @@ public List<String> getRecentFiles() {
 	}
 
 	@Override
-	protected void onLoad() {
+	public void onLoad() {
 		// Remove duplicates
 		Set<String> temp = new LinkedHashSet<>(recentFiles);
 		recentFiles.clear();

File: src/main/java/me/coley/recaf/config/ConfDisplay.java
Patch:
@@ -48,13 +48,12 @@ public class ConfDisplay extends Config {
 	@Conf("display.suggest.classerrors")
 	public boolean suggestClassWithErrors = true;
 
-
 	ConfDisplay() {
 		super("display");
 	}
 
 	@Override
-	protected void onLoad() {
+	public void onLoad() {
 		LangUtil.load(language);
 	}
 }

File: src/main/java/me/coley/recaf/control/Controller.java
Patch:
@@ -6,7 +6,7 @@
 import me.coley.recaf.config.ConfigManager;
 import me.coley.recaf.plugin.PluginsManager;
 import me.coley.recaf.plugin.api.CommandPlugin;
-import me.coley.recaf.plugin.api.Startup;
+import me.coley.recaf.plugin.api.StartupPlugin;
 import me.coley.recaf.workspace.Workspace;
 
 import java.io.File;
@@ -70,7 +70,7 @@ public void run() {
 			error(ex, "Error loading workspace from file: " + initialWorkspace);
 		}
 		// Call startup plugins
-		PluginsManager.getInstance().ofType(Startup.class).forEach(plugin -> plugin.onStart(this));
+		PluginsManager.getInstance().ofType(StartupPlugin.class).forEach(plugin -> plugin.onStart(this));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/plugin/api/BasePlugin.java
Patch:
@@ -5,7 +5,7 @@
  *
  * @author Matt
  */
-public interface PluginBase {
+public interface BasePlugin {
 	/**
 	 * @return Plugin name.
 	 */

File: src/main/java/me/coley/recaf/plugin/api/CommandPlugin.java
Patch:
@@ -11,4 +11,4 @@
  *
  * @author Matt
  */
-public interface CommandPlugin extends PluginBase, Callable<Void> {}
+public interface CommandPlugin extends BasePlugin, Callable<Void> {}

File: src/main/java/me/coley/recaf/plugin/api/ContextMenuInjectorPlugin.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @author Matt
  */
-public interface ContextMenuInjector extends PluginBase {
+public interface ContextMenuInjectorPlugin extends BasePlugin {
 	/**
 	 * Intercept context-menus for classes.
 	 *

File: src/main/java/me/coley/recaf/plugin/api/EntryLoaderProviderPlugin.java
Patch:
@@ -7,7 +7,7 @@
  *
  * @author Matt
  */
-public interface EntryLoaderProvider extends PluginBase {
+public interface EntryLoaderProviderPlugin extends BasePlugin {
 	/**
 	 * @return Created loader.
 	 */

File: src/main/java/me/coley/recaf/plugin/api/ExportInterceptorPlugin.java
Patch:
@@ -5,7 +5,7 @@
  *
  * @author Matt
  */
-public interface ExportInterceptor extends PluginBase {
+public interface ExportInterceptorPlugin extends BasePlugin {
 	/**
 	 * Intercept the given item. May be a class or file.
 	 *

File: src/main/java/me/coley/recaf/plugin/api/LoadInterceptorPlugin.java
Patch:
@@ -5,7 +5,7 @@
  *
  * @author Matt
  */
-public interface LoadInterceptor extends PluginBase {
+public interface LoadInterceptorPlugin extends BasePlugin {
 	/**
 	 * Intercept the given class.
 	 *

File: src/main/java/me/coley/recaf/plugin/api/MenuProviderPlugin.java
Patch:
@@ -7,7 +7,7 @@
  *
  * @author Matt
  */
-public interface PluginMenuProvider extends PluginBase {
+public interface MenuProviderPlugin extends BasePlugin {
 	/**
 	 * Create a menu/menu-item for the plugin.
 	 *

File: src/main/java/me/coley/recaf/plugin/api/StartupPlugin.java
Patch:
@@ -7,7 +7,7 @@
  *
  * @author Matt
  */
-public interface Startup extends PluginBase {
+public interface StartupPlugin extends BasePlugin {
 	/**
 	 * Called before the controller is started, but after the controller is configured.
 	 *

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -12,7 +12,7 @@
 import me.coley.recaf.config.ConfBackend;
 import me.coley.recaf.control.gui.GuiController;
 import me.coley.recaf.plugin.PluginsManager;
-import me.coley.recaf.plugin.api.PluginMenuProvider;
+import me.coley.recaf.plugin.api.MenuProviderPlugin;
 import me.coley.recaf.search.QueryType;
 import me.coley.recaf.ui.controls.*;
 import me.coley.recaf.util.ClasspathUtil;
@@ -105,9 +105,9 @@ public MainMenu(GuiController controller) {
 					.add(new ActionMenuItem(translate("ui.menubar.plugins.manage"), this::openPluginManager));
 		mPlugins.getItems()
 				.add(new ActionMenuItem(translate("ui.menubar.plugins.opendir"), this::openPluginDirectory));
-		if (!PluginsManager.getInstance().ofType(PluginMenuProvider.class).isEmpty()) {
+		if (!PluginsManager.getInstance().ofType(MenuProviderPlugin.class).isEmpty()) {
 			mPlugins.getItems().add(new SeparatorMenuItem());
-			PluginsManager.getInstance().ofType(PluginMenuProvider.class).forEach(plugin -> {
+			PluginsManager.getInstance().ofType(MenuProviderPlugin.class).forEach(plugin -> {
 				mPlugins.getItems().add(plugin.createMenu());
 			});
 		}

File: src/main/java/me/coley/recaf/ui/controls/KeybindField.java
Patch:
@@ -26,7 +26,7 @@ public KeybindField(FieldWrapper field) {
 		this.target = field.get();
 		if (target == null)
 			throw new IllegalStateException("KeybindField's target binding must not be null!");
-		this.name = field.name();
+		this.name = field.isTranslatable() ? field.name() : field.key();
 		getStyleClass().add("key-field");
 		setText(target.toString());
 		setPromptText(LangUtil.translate("binding.inputprompt.initial"));

File: src/main/java/me/coley/recaf/util/self/SelfDependencyPatcher.java
Patch:
@@ -123,7 +123,7 @@ private static void loadFromCache() throws IOException, ReflectiveOperationExcep
 	 * Display a message detailing why self-patching cannot continue.
 	 */
 	private static void showIncompatibleVersion() {
-		String message = "Recaf cannot self-patch below Java 11. " +
+		String message = "Recaf cannot self-patch below Java 11 on this JVM. " +
 				"Please run using JDK 11 or higher or use a JDK that bundles JavaFX.\n" +
 				" - Your JDK does not bundle JavaFX\n" +
 				" - Downloadable JFX bundles only come with 11 support or higher.";

File: src/main/java/me/coley/recaf/workspace/ClassResource.java
Patch:
@@ -3,7 +3,7 @@
 import me.coley.recaf.parse.source.SourceCode;
 import me.coley.recaf.parse.source.SourceCodeException;
 import me.coley.recaf.plugin.PluginsManager;
-import me.coley.recaf.plugin.api.LoadInterceptor;
+import me.coley.recaf.plugin.api.LoadInterceptorPlugin;
 import me.coley.recaf.util.IOUtil;
 import org.apache.commons.io.FileUtils;
 import org.objectweb.asm.ClassReader;
@@ -37,7 +37,7 @@ protected Map<String, byte[]> loadClasses() throws IOException {
 			// read & minimally parse for the name
 			byte[] in = IOUtil.toByteArray(stream);
 			String name = new ClassReader(in).getClassName();
-			for (LoadInterceptor interceptor : PluginsManager.getInstance().ofType(LoadInterceptor.class)) {
+			for (LoadInterceptorPlugin interceptor : PluginsManager.getInstance().ofType(LoadInterceptorPlugin.class)) {
 				in = interceptor.interceptClass(name, in);
 				name = new ClassReader(in).getClassName();
 			}

File: src/main/java/me/coley/recaf/workspace/EntryLoader.java
Patch:
@@ -1,7 +1,7 @@
 package me.coley.recaf.workspace;
 
 import me.coley.recaf.plugin.PluginsManager;
-import me.coley.recaf.plugin.api.LoadInterceptor;
+import me.coley.recaf.plugin.api.LoadInterceptorPlugin;
 import org.objectweb.asm.ClassReader;
 
 import java.util.*;
@@ -46,7 +46,7 @@ public static EntryLoader create() {
 	public boolean onClass(String entryName, byte[] value) {
 		try {
 			String name = new ClassReader(value).getClassName();
-			for (LoadInterceptor interceptor : PluginsManager.getInstance().ofType(LoadInterceptor.class)) {
+			for (LoadInterceptorPlugin interceptor : PluginsManager.getInstance().ofType(LoadInterceptorPlugin.class)) {
 				value = interceptor.interceptClass(name, value);
 				name = new ClassReader(value).getClassName();
 			}
@@ -72,7 +72,7 @@ public boolean onClass(String entryName, byte[] value) {
 	 * @return Addition was a success.
 	 */
 	public boolean onFile(String entryName, byte[] value) {
-		for (LoadInterceptor interceptor : PluginsManager.getInstance().ofType(LoadInterceptor.class)) {
+		for (LoadInterceptorPlugin interceptor : PluginsManager.getInstance().ofType(LoadInterceptorPlugin.class)) {
 			value = interceptor.interceptClass(entryName, value);
 		}
 		files.put(entryName, value);

File: src/main/java/me/coley/recaf/ui/controls/text/JavaPane.java
Patch:
@@ -96,7 +96,7 @@ public Map<String, byte[]> save(String name) {
 		if (javac.compile())
 			return javac.getUnits();
 		else
-			throw new IllegalStateException("Failed compile");
+			throw new IllegalStateException("Failed compile due to compilation errors");
 	}
 
 	@Override

File: src/main/java/me/coley/recaf/ui/controls/view/ClassViewport.java
Patch:
@@ -203,7 +203,7 @@ public void save() {
 				Log.warn("Recompiling not supported. Please run Recaf with a JDK.", path);
 				return;
 			} catch(Exception ex) {
-				Log.error("Failed recompiling code for '{}'", path);
+				Log.error(ex, "Failed recompiling code for '{}'", path);
 				return;
 			}
 		} else if (getCenter() instanceof ClassNodePane) {

File: src/main/java/me/coley/recaf/util/StringUtil.java
Patch:
@@ -1,7 +1,5 @@
 package me.coley.recaf.util;
 
-import me.coley.recaf.ui.controls.view.ClassViewport;
-
 import java.util.Arrays;
 
 /**

File: src/main/java/me/coley/recaf/plugin/api/PluginBase.java
Patch:
@@ -19,7 +19,7 @@ default String getName() {
 	}
 
 	/**
-	 * @return Plugin name.
+	 * @return Plugin version.
 	 */
 	String getVersion();
 

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -57,8 +57,8 @@ public static void main(String[] args) {
 			Collection<EntryLoaderProvider> loaders = manager.ofType(EntryLoaderProvider.class);
 			if (!loaders.isEmpty())
 				manager.setEntryLoader(loaders.iterator().next().create());
-		} catch(Exception ex) {
-			Log.error(ex, "An error occurred loading the plugins.");
+		} catch(Throwable t) {
+			Log.error(t, "An error occurred loading the plugins.");
 		}
 		// Start the initializer's controller, starting Recaf
 		initializer.startController();

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -99,7 +99,7 @@ public MainMenu(GuiController controller) {
 					.add(new ActionMenuItem(translate("ui.menubar.plugins.manage"), this::openPluginManager));
 		mPlugins.getItems()
 				.add(new ActionMenuItem(translate("ui.menubar.plugins.opendir"), this::openPluginDirectory));
-		if (PluginsManager.getInstance().hasPlugins()) {
+		if (!PluginsManager.getInstance().ofType(PluginMenuProvider.class).isEmpty()) {
 			mPlugins.getItems().add(new SeparatorMenuItem());
 			PluginsManager.getInstance().ofType(PluginMenuProvider.class).forEach(plugin -> {
 				mPlugins.getItems().add(plugin.createMenu());
@@ -283,7 +283,7 @@ private void showInformation() {
 	private void openPluginManager() {
 		Stage stage = controller.windows().getPluginsWindow();
 		if(stage == null) {
-			stage = controller.windows().window(translate("ui.menubar.plugins"), new PluginManagerPane());
+			stage = controller.windows().window(translate("ui.menubar.plugins"), new PluginManagerPane(), 600, 233);
 			controller.windows().setPluginsWindow(stage);
 		}
 		stage.show();

File: src/main/java/me/coley/recaf/workspace/JavaResource.java
Patch:
@@ -13,6 +13,7 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.zip.*;
 
 import static me.coley.recaf.util.Log.*;
@@ -214,7 +215,7 @@ private void addFileSave(String name, byte[] value) {
 	public ListeningMap<String, byte[]> getClasses() {
 		if(cachedClasses == null) {
 			try {
-				cachedClasses = new ListeningMap<>(loadClasses());
+				cachedClasses = new ListeningMap<>(new ConcurrentHashMap<>(loadClasses()));
 				cachedClasses.getPutListeners().add((name, code) -> dirtyClasses.add(name));
 				cachedClasses.getRemoveListeners().add(dirtyClasses::remove);
 				// Create initial save state
@@ -240,7 +241,7 @@ public ListeningMap<String, byte[]> getClasses() {
 	public ListeningMap<String, byte[]> getFiles() {
 		if(cachedFiles == null) {
 			try {
-				cachedFiles = new ListeningMap<>(loadFiles());
+				cachedFiles = new ListeningMap<>(new ConcurrentHashMap<>(loadFiles()));
 				cachedFiles.getPutListeners().add((name, code) -> dirtyFiles.add(name));
 				cachedFiles.getRemoveListeners().add(dirtyFiles::remove);
 				// Create initial save state

File: src/main/java/me/coley/recaf/decompile/cfr/CfrDecompiler.java
Patch:
@@ -52,7 +52,7 @@ protected Map<String, String> generateDefaultOptions() {
 	@Override
 	public String decompile(String name) {
 		Workspace workspace = getController().getWorkspace();
-		ClassSource source = new ClassSource(workspace);
+		ClassSource source = new ClassSource(getController());
 		SinkFactoryImpl sink = new SinkFactoryImpl();
 		CfrDriver driver = new CfrDriver.Builder()
 				.withClassFileSource(source)

File: src/main/java/me/coley/recaf/decompile/procyon/ProcyonDecompiler.java
Patch:
@@ -60,9 +60,8 @@ protected Map<String, Boolean> generateDefaultOptions() {
 
     @Override
     public String decompile(String name) {
-        Workspace workspace = getController().getWorkspace();
         ITypeLoader loader = new ComposedTypeLoader(Arrays.asList(
-                new RecafTypeLoader(workspace), new InputTypeLoader()
+                new RecafTypeLoader(getController()), new InputTypeLoader()
         ));
         Map<String, Boolean> options = getOptions();
         DecompilerSettings settings = new DecompilerSettings();

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -63,6 +63,7 @@ public ConfigPane(GuiController controller, ConfDecompile config) {
 		// TODO: When the decompiler is changed, switch options are displayed
 		editorOverrides.put("decompile.decompiler", EnumComboBox::new);
 		editorOverrides.put("decompile.showsynthetics", Toggle::new);
+		editorOverrides.put("decompile.stripdebug", Toggle::new);
 		editorOverrides.put("decompile.timeout", (w) -> new NumberSlider<>(controller, w, 1_000, 20_000, 1_000));
 		hideUnsupported = true;
 		setupConfigControls(config);

File: src/main/java/me/coley/recaf/command/impl/Export.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.jar.JarOutputStream;
 import java.util.stream.Collectors;
 
+import static me.coley.recaf.util.CollectionUtil.copySet;
 import static me.coley.recaf.util.Log.*;
 
 /**
@@ -141,7 +142,7 @@ public static void writeArchive(File output, Map<String, byte[]> content) throws
 
 	private void put(Map<String, byte[]> content, JavaResource res) {
 		content.putAll(res.getFiles());
-		for(Map.Entry<String, byte[]> e : res.getClasses().entrySet()) {
+		for(Map.Entry<String, byte[]> e : copySet(res.getClasses().entrySet())) {
 			String name = e.getKey() + ".class";
 			// War files have a required prefix
 			if(res instanceof WarResource)

File: src/main/java/me/coley/recaf/decompile/fernflower/StructContextDecorator.java
Patch:
@@ -10,6 +10,8 @@
 import java.lang.reflect.Field;
 import java.util.Map;
 
+import static me.coley.recaf.util.CollectionUtil.*;
+
 /**
  * Decorator for StructContext to support Recaf workspaces.
  *
@@ -54,7 +56,7 @@ public void addWorkspace(Workspace workspace) throws IOException,
 
 	private void addResource(JavaResource resource, LazyLoader loader) throws IOException {
 		// Iterate resource class entries
-		for(Map.Entry<String, byte[]> entry: resource.getClasses().entrySet()) {
+		for(Map.Entry<String, byte[]> entry : copySet(resource.getClasses().entrySet())) {
 			String name = entry.getKey();
 			byte[] code = entry.getValue();
 			// register class in the map and lazy-loader.

File: src/main/java/me/coley/recaf/ui/controls/text/JavaDocWindow.java
Patch:
@@ -167,7 +167,7 @@ public static JavaDocWindow ofMethod(DocMethod method) {
 				lblParamDesc.getStyleClass().add("faint");
 				lblParamDesc.setWrapText(true);
 				subs.getChildren().add(lblParamDef);
-				if (!method.getDescription().trim().isEmpty())
+				if (!parameter.getDescription().trim().isEmpty())
 					subs.getChildren().add(lblParamDesc);
 			}
 			box.getChildren().add(subs);

File: src/main/java/me/coley/recaf/parse/javadoc/DocMethod.java
Patch:
@@ -30,6 +30,8 @@ public DocMethod(List<String> modifiers, String name, String description,
 					 String returnDescription, String returnType,
 					 List<DocParameter> parameters) {
 		super(modifiers, name, description);
+		if (returnDescription == null || returnDescription.trim().isEmpty())
+			returnDescription = "n/a";
 		this.returnType = returnType;
 		this.returnDescription = returnDescription;
 		this.parameters = parameters;

File: src/main/java/me/coley/recaf/ui/controls/popup/DragPopup.java
Patch:
@@ -27,6 +27,7 @@ public DragPopup(ScrollPane content, Control handle) {
 		this((Node) content, handle);
 		content.getStyleClass().add("scroll-antiblur-hack");
 		content.getStyleClass().add("drag-popup-scroll");
+		content.getStyleClass().add("drag-popup");
 		content.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
 		content.setFitToWidth(true);
 	}

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -84,10 +84,12 @@ else if(args.contains("--instrument"))
 
 	private static void init() {
 		if (!initialized) {
+			if (System.getProperty("recaf.home") == null) {
+				System.setProperty("recaf.home", getDirectory().normalize().toString());
+			}
 			SelfPatcher.patch();
 			// Fix title bar not displaying in GTK systems
 			System.setProperty("jdk.gtk.version", "2");
-			System.setProperty("recaf.home", getDirectory().normalize().toString());
 			// Show version & start
 			info("Recaf-{}", VERSION);
 			initialized = true;

File: src/main/java/me/coley/recaf/config/ConfigManager.java
Patch:
@@ -100,8 +100,8 @@ private void load() {
 			try {
 				if(Files.exists(path))
 					c.load(path);
-			} catch(IOException ex) {
-				error(ex, "Failed to load config: {}" + path);
+			} catch(Throwable t) {
+				error(t, "Failed to load config: {}" + path);
 			}
 		}
 	}

File: src/main/java/me/coley/recaf/command/impl/Remap.java
Patch:
@@ -53,9 +53,8 @@ public Void call() throws Exception {
 		mapped.forEach((old, value) -> {
 			ClassReader reader = new ClassReader(value);
 			String rename = reader.getClassName();
-			sb.append("\n - ").append(old);
 			if (!old.equals(rename))
-				sb.append(" => ").append(rename);
+				sb.append("\n - ").append(old).append(" => ").append(rename);
 		});
 		info(sb.toString());
 		return null;

File: src/main/java/me/coley/recaf/mapping/EnigmaMappings.java
Patch:
@@ -11,7 +11,7 @@
 import static me.coley.recaf.util.Log.*;
 
 /**
- * Enigma mappings file implmentation.
+ * Enigma mappings file implementation.
  *
  * @author Matt
  */

File: src/main/java/me/coley/recaf/mapping/ProguardMappings.java
Patch:
@@ -9,9 +9,10 @@
 import java.util.Map;
 
 /**
- * Proguard mappings file implmentation. <br>
+ * Proguard mappings file implementation. <br>
  * Unlike the other mapping formats the intent of this mapper is to <i>undo</i> Proguard mappings,
- * not applying them.
+ * not applying them. This is because unlike the other mapping types, the proguard mappings go from
+ * clean names to obfuscated names. Not obfuscated to clean.
  *
  * @author Matt
  */

File: src/main/java/me/coley/recaf/mapping/SimpleMappings.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Map;
 
 /**
- * Simple mappings file implmentation where the old/new names are split by a space. The format of
+ * Simple mappings file implementation where the old/new names are split by a space. The format of
  * the mappings matches the format outlined by
  * {@link org.objectweb.asm.commons.SimpleRemapper#SimpleRemapper(Map)}.
  *

File: src/main/java/me/coley/recaf/mapping/SimpleRecordingRemapper.java
Patch:
@@ -45,7 +45,7 @@ public SimpleRecordingRemapper(Map<String, String> mapping, boolean checkFieldHi
 	 * update it within Recaf, so we record if any changes were made. If no changes are made we
 	 * can disregard the remapped output.
 	 *
-	 * @return {@code} true if the class has been modified in the remapping process.
+	 * @return {@code true} if the class has been modified in the remapping process.
 	 */
 	public boolean isDirty() {
 		return dirty;

File: src/main/java/me/coley/recaf/command/impl/Assemble.java
Patch:
@@ -76,7 +76,7 @@ public Result call() throws Exception {
 			throw new IllegalStateException("Could not read from '" + input + "'");
 		}
 		ParseResult<RootAST> result = Parse.parse(code);
-		MethodAssembler assembler = new MethodAssembler(className);
+		MethodAssembler assembler = new MethodAssembler(className, getController().config().assembler());
 		MethodNode generated = assembler.compile(result);
 		// Replace method
 		MethodNode old = node.methods.get(methodIndex);

File: src/main/java/me/coley/recaf/control/headless/JLineEditor.java
Patch:
@@ -78,7 +78,7 @@ public void open(Disassemble.Result wrapper) {
 			// Assemble modified code
 			String code = FileUtils.readFileToString(tmp, UTF_8);
 			ParseResult<RootAST> result = Parse.parse(code);
-			MethodAssembler assembler = new MethodAssembler(cn.name);
+			MethodAssembler assembler = new MethodAssembler(cn.name, Recaf.getController().config().assembler());
 			MethodNode generated = assembler.compile(result);
 			// Replace method
 			int index = cn.methods.indexOf(mn);

File: src/main/java/me/coley/recaf/ui/controls/ConfigTabs.java
Patch:
@@ -20,7 +20,8 @@ public ConfigTabs(GuiController controller) {
 		Tab tabDisplay = new Tab(translate("display"), new ConfigPane(controller, controller.config().display()));
 		Tab tabBinding = new Tab(translate("binding"), new ConfigPane(controller, controller.config().keys()));
 		Tab tabDecompile = new Tab(translate("decompile"), new ConfigPane(controller, controller.config().decompile()));
-		getTabs().addAll(tabDisplay, tabBinding, tabDecompile);
+		Tab tabAssembler = new Tab(translate("assembler"), new ConfigPane(controller, controller.config().assembler()));
+		getTabs().addAll(tabDisplay, tabBinding, tabDecompile, tabAssembler);
 		setTabClosingPolicy(TabClosingPolicy.UNAVAILABLE);
 	}
 }

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodePane.java
Patch:
@@ -54,7 +54,7 @@ public BytecodePane(GuiController controller, String className, String memberNam
 				contextHandler.setAST(result.getRoot());
 			lastParse = result;
 			if(isMethod) {
-				MethodAssembler assembler = new MethodAssembler(className);
+				MethodAssembler assembler = new MethodAssembler(className, controller.config().assembler());
 				// Recompile & verify code
 				currentMethod = assembler.compile(result);
 				currentMethod.name = memberName;

File: src/main/java/me/coley/recaf/ui/controls/node/ClassNodePane.java
Patch:
@@ -143,6 +143,8 @@ protected void updateItem(FieldNode item, boolean empty) {
 							.view((ClassViewport) ClassNodePane.this.getParent())
 							.declaration(true)
 							.ofField(node.name, item.name, item.desc));
+				else
+					setContextMenu(null);
 			}
 		});
 		getTabs().add(tabFields = new Tab(translate("ui.edit.tab.fields"), fields));

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeErrorHandling.java
Patch:
@@ -85,7 +85,7 @@ private void markProblem(LineException ex) {
 		if (index < 0)
 			return;
 		int len = codeArea.getParagraph(index).length();
-		int literalStart =  codeArea.getParagraphSelection(index).getStart();
+		int literalStart =  codeArea.position(index, 0).toOffset();
 		markProblem(index, 0, len, literalStart, ex.getMessage());
 	}
 }

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -2,7 +2,6 @@
 
 import me.coley.recaf.Recaf;
 import me.coley.recaf.parse.bytecode.ast.*;
-import me.coley.recaf.util.Log;
 import me.coley.recaf.util.TypeUtil;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.*;

File: src/main/java/me/coley/recaf/ui/controls/view/ClassViewport.java
Patch:
@@ -140,12 +140,12 @@ public void updateView() {
 			case TABLE: {
 				// TODO: like how Recaf was in 1.X
 				ClassNodePane pane = null;
+				ClassReader cr = controller.getWorkspace().getClassReader(path);
+				ClassNode node = ClassUtil.getNode(cr, ClassReader.SKIP_FRAMES);
 				if(getCenter() instanceof ClassNodePane) {
 					pane = (ClassNodePane) getCenter();
-					pane.refresh();
+					pane.refresh(node);
 				} else {
-					ClassReader cr = controller.getWorkspace().getClassReader(path);
-					ClassNode node = ClassUtil.getNode(cr, ClassReader.SKIP_FRAMES);
 					pane = new ClassNodePane(controller, node);
 					setCenter(pane);
 				}

File: src/main/java/me/coley/recaf/control/gui/GuiController.java
Patch:
@@ -59,6 +59,8 @@ public void loadWorkspace(File file, Consumer<Boolean> action) {
 			// Update recently loaded
 			config().backend().onLoad(file);
 			main.getMenubar().updateRecent();
+			// Updated cached primary jar to support recompile
+			getWorkspace().writePrimaryJarToTemp();
 		});
 		loadTask.setOnFailed(e -> {
 			// Load failure

File: src/main/java/me/coley/recaf/graph/inheritance/HierarchyGraph.java
Patch:
@@ -184,7 +184,8 @@ public String getCommon(String first, String second) {
 					queue.add(parent);
 			}
 		} while(!queue.isEmpty());
-		return null;
+		// Fallback option
+		return "java/lang/Object";
 	}
 
 	/**

File: src/main/java/me/coley/recaf/parse/bytecode/AssemblerException.java
Patch:
@@ -33,15 +33,15 @@ public AssemblerException(String message, int line) {
 	}
 
 	/**
-	 * @param ex
+	 * @param t
 	 * 		Cause exception.
 	 * @param message
 	 * 		Reason for assembler error.
 	 * @param line
 	 * 		Line number relevant to the error.
 	 */
-	public AssemblerException(Exception ex, String message, int line) {
-		super(message, ex);
+	public AssemblerException(Throwable t, String message, int line) {
+		super(message, t);
 		this.line = line;
 	}
 

File: src/main/java/me/coley/recaf/ui/controls/view/ClassViewport.java
Patch:
@@ -142,7 +142,7 @@ public void updateView() {
 				ClassNodePane pane = null;
 				if(getCenter() instanceof ClassNodePane) {
 					pane = (ClassNodePane) getCenter();
-					pane.setup();
+					pane.refresh();
 				} else {
 					ClassReader cr = controller.getWorkspace().getClassReader(path);
 					ClassNode node = ClassUtil.getNode(cr, ClassReader.SKIP_FRAMES);

File: src/main/java/me/coley/recaf/parse/bytecode/ast/InvokeDynamicAST.java
Patch:
@@ -98,6 +98,8 @@ public AbstractInsnNode compile(Map<String, LabelNode> labels, Variables variabl
 				convertedArgs[i] = ((HandleAST) arg).compile();
 			} else if(arg instanceof TypeAST) {
 				convertedArgs[i] = Type.getType(((TypeAST) arg).getType());
+			} else if(arg instanceof DescAST) {
+				convertedArgs[i] = Type.getType(((DescAST) arg).getDesc());
 			}
 		}
 		return new InvokeDynamicInsnNode(getName().getName(), getDesc().getDesc(),

File: src/main/java/me/coley/recaf/config/ConfDecompile.java
Patch:
@@ -27,7 +27,7 @@ public class ConfDecompile extends Config {
 	 * Time to wait before aborting the decompile process.
 	 */
 	@Conf("decompile.timeout")
-	public long timeout = 5000;
+	public long timeout = 9000;
 
 	// ============================ CFR OPTIONS ============================ //
 

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -63,7 +63,7 @@ public ConfigPane(GuiController controller, ConfDecompile config) {
 		// TODO: When the decompiler is changed, switch options are displayed
 		editorOverrides.put("decompile.decompiler", EnumComboBox::new);
 		editorOverrides.put("decompile.showsynthetics", Toggle::new);
-		editorOverrides.put("decompile.timeout", (w) -> new NumberSlider<>(controller, w, 1_000, 10_000, 1_000));
+		editorOverrides.put("decompile.timeout", (w) -> new NumberSlider<>(controller, w, 1_000, 20_000, 1_000));
 		hideUnsupported = true;
 		setupConfigControls(config);
 	}

File: src/main/java/me/coley/recaf/config/ConfBackend.java
Patch:
@@ -70,7 +70,7 @@ public void onLoad(File file) {
 		recentFiles.add(0, path);
 		// Prune list if it hits max size
 		if(recentFiles.size() > maxRecentFiles)
-			recentFiles.remove(0);
+			recentFiles.remove(recentFiles.size() - 1);
  	}
 
 	/**

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -31,6 +31,7 @@ public ConfigPane(GuiController controller, ConfDisplay config) {
 		editorOverrides.put("display.appstyle", v -> new StyleCombo(controller, v));
 		editorOverrides.put("display.classmode", EnumComboBox::new);
 		editorOverrides.put("display.filemode", EnumComboBox::new);
+		editorOverrides.put("display.suggest.classerrors", Toggle::new);
 		setupConfigControls(config);
 	}
 

File: src/main/java/me/coley/recaf/ui/controls/view/ClassViewport.java
Patch:
@@ -66,7 +66,7 @@ public void updateView() {
 				DecompileImpl decompiler = controller.config().decompile().decompiler;
 				JavaPane finalPane = pane;
 				long timeout = controller.config().decompile().timeout;
-				boolean showSuggestions = controller.config().backend().suggestClassWithErrors;
+				boolean showSuggestions = controller.config().display().suggestClassWithErrors;
 				pane.setText("// Decompiling class: " + path + "\n" +
 						"// - Decompiler: " + decompiler.name() + "\n");
 				// Actions

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -62,6 +62,7 @@ public ConfigPane(GuiController controller, ConfDecompile config) {
 		// TODO: When the decompiler is changed, switch options are displayed
 		editorOverrides.put("decompile.decompiler", EnumComboBox::new);
 		editorOverrides.put("decompile.showsynthetics", Toggle::new);
+		editorOverrides.put("decompile.timeout", (w) -> new NumberSlider<>(controller, w, 1_000, 10_000, 1_000));
 		hideUnsupported = true;
 		setupConfigControls(config);
 	}

File: src/main/java/me/coley/recaf/ui/controls/FontSlider.java
Patch:
@@ -25,14 +25,14 @@ public class FontSlider extends Slider {
 	 * @param wrapper Font size field wrapper.
 	 */
 	public FontSlider(GuiController controller, FieldWrapper wrapper) {
-		setValue(Objects.requireNonNull(wrapper.get()));
 		setMin(10);
 		setMax(16);
 		setMajorTickUnit(1);
 		setMinorTickCount(0);
 		setShowTickMarks(true);
 		setShowTickLabels(true);
 		setSnapToTicks(true);
+		setValue(Objects.requireNonNull(wrapper.get()));
 		// On release, set the font field value and update the UI
 		valueProperty().addListener(((observable, oldValue, newValue) -> {
 			double oldValue2 = Math.round(oldValue.doubleValue());

File: src/main/java/me/coley/recaf/ui/ContextBuilder.java
Patch:
@@ -319,7 +319,7 @@ public ContextMenu ofFile(String name) {
 		if (isWorkspaceTree() && controller.getWorkspace().getPrimary().getFiles().containsKey(name)) {
 			MenuItem remove = new ActionMenuItem(LangUtil.translate("misc.remove"), () -> {
 				YesNoWindow.prompt(LangUtil.translate("misc.confirm.message"), () -> {
-					controller.getWorkspace().getPrimary().getClasses().remove(name);
+					controller.getWorkspace().getPrimary().getFiles().remove(name);
 					controller.windows().getMainWindow().getTabs().closeTab(name);
 				}, null).show(treeView);
 			});

File: src/main/java/me/coley/recaf/ui/controls/text/TextPane.java
Patch:
@@ -187,7 +187,7 @@ protected void setErrorHandler(E errHandler) {
 		this.errHandler.bind(errorList);
 	}
 
-	protected E getErrorHandler() {
+	public E getErrorHandler() {
 		return errHandler;
 	}
 

File: src/main/java/me/coley/recaf/parse/bytecode/RValue.java
Patch:
@@ -301,7 +301,7 @@ public RValue ref(Type type) {
 		if (type != null && type.equals(Type.VOID_TYPE))
 			return null;
 		// Take on the type of the other
-		if (type.getSort() >= Type.ARRAY)
+		if (type != null && type.getSort() >= Type.ARRAY)
 			return ofVirtual(type);
 		return of(type);
 	}

File: src/main/java/me/coley/recaf/workspace/Workspace.java
Patch:
@@ -130,7 +130,7 @@ public void onPrimaryDefinitionChanges(Set<String> classes) {
 	/**
 	 * Updated after calls to {@link #onPrimaryDefinitionChanges(Set)}.
 	 *
-	 * @returnThe set of class names that have been updated as a result of the definition changes.
+	 * @return The set of class names that have been updated as a result of the definition changes.
 	 */
 	public Set<String> getDefinitionUpdatedClasses() {
 		return definitionUpdatedClasses;

File: src/main/java/me/coley/recaf/search/SearchMethodVisitor.java
Patch:
@@ -157,7 +157,9 @@ public void visitTypeInsn(int opcode, String type) {
 		super.visitTypeInsn(opcode, type);
 		collector.queries(ClassReferenceQuery.class)
 				.forEach(q -> {
-					String types = Type.getObjectType(type).getInternalName();
+					Type typee = type.contains(";") ? Type.getType(type) : Type.getObjectType(type);
+					String types = typee.getSort() == Type.ARRAY ?
+							typee.getElementType().getInternalName() : typee.getInternalName();
 					q.match(collector.getAccess(types, ACC_NOT_FOUND), types);
 					collector.addMatched(context.withInsn(last(), lastPos()), q);
 				});

File: src/main/java/me/coley/recaf/ui/controls/ResourceSelectionCell.java
Patch:
@@ -32,7 +32,7 @@ public void updateItem(JavaResource item, boolean empty) {
 				// Add icon for resource types
 				g.getChildren().add(new IconView(UiUtil.getResourceIcon(item)));
 				// Indicate which resource is the primary resource
-				if(item == controller.getWorkspace().getPrimary()) {
+				if(controller.getWorkspace() != null && item == controller.getWorkspace().getPrimary()) {
 					Label lbl = new Label(" [Primary]");
 					lbl.getStyleClass().add("bold");
 					g.getChildren().add(lbl);

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -40,12 +40,13 @@ public ConfigPane(GuiController controller, ConfDisplay config) {
 	 * 		Keybind config.
 	 */
 	public ConfigPane(GuiController controller, ConfKeybinding config) {
-		editorOverrides.put("binding.close", KeybindField::new);
 		editorOverrides.put("binding.saveapp", KeybindField::new);
 		editorOverrides.put("binding.save", KeybindField::new);
 		editorOverrides.put("binding.find", KeybindField::new);
 		editorOverrides.put("binding.undo", KeybindField::new);
 		editorOverrides.put("binding.gotodef", KeybindField::new);
+		editorOverrides.put("binding.close.window", KeybindField::new);
+		editorOverrides.put("binding.close.tab", KeybindField::new);
 		setupConfigControls(config);
 	}
 

File: src/main/java/me/coley/recaf/config/Config.java
Patch:
@@ -71,7 +71,6 @@ else if(type.equals(Resource.class)) {
 						List<Object> list = new ArrayList<>();
 						JsonArray array = value.asArray();
 						// We're gonna assume our lists just hold strings
-						// TODO: Proper generic list loading
 						array.forEach(v -> {
 							if(v.isString())
 								list.add(v.asString());

File: src/main/java/me/coley/recaf/decompile/cfr/CfrDecompiler.java
Patch:
@@ -84,7 +84,6 @@ private String clean(String decompilation, String name) {
 			}
 			decompilation = decompilation.replace(startTextCopy, startText);
 		}
-		// TODO: More cleaning here, like fixing odd handling of inner classes
 		return decompilation;
 	}
 

File: src/main/java/me/coley/recaf/parse/bytecode/parser/SignatureParser.java
Patch:
@@ -3,11 +3,9 @@
 import me.coley.recaf.parse.bytecode.ASTParseException;
 import me.coley.recaf.parse.bytecode.AbstractParser;
 import me.coley.recaf.parse.bytecode.ParseResult;
-import me.coley.recaf.parse.bytecode.ast.DescAST;
 import me.coley.recaf.parse.bytecode.ast.RootAST;
 import me.coley.recaf.parse.bytecode.ast.SignatureAST;
 import me.coley.recaf.util.AutoCompleteUtil;
-import org.objectweb.asm.Type;
 
 import java.util.Collections;
 import java.util.List;

File: src/main/java/me/coley/recaf/ui/controls/tree/JavaResourceTree.java
Patch:
@@ -86,13 +86,12 @@ private void onClick(MouseEvent e) {
 		// Right click
 		if(e.getButton() == MouseButton.SECONDARY) {
 			// TODO: Context menu items
+			//  (Update context menu builder so source can be used to determine additional options)
 			//  - Remove item
-			//  - Copy item (to location of given name, prompted)
 			//  - Specifics for classes
-			//    - Search for references to the class
 			//    - ?
 			//  - Specifics for files
-			//    - ?
+			//    - Copy item (to location of given name, prompted)
 		}
 		// Double click
 		else if(e.getClickCount() == 2) {

File: src/main/java/me/coley/recaf/ui/controls/view/ClassViewport.java
Patch:
@@ -82,6 +82,7 @@ public void updateView() {
 				ClassNodePane pane = null;
 				if(getCenter() instanceof ClassNodePane) {
 					pane = (ClassNodePane) getCenter();
+					pane.setup();
 				} else {
 					ClassReader cr = controller.getWorkspace().getClassReader(path);
 					ClassNode node = ClassUtil.getNode(cr, ClassReader.SKIP_FRAMES);

File: src/main/java/me/coley/recaf/command/impl/Search.java
Patch:
@@ -128,7 +128,6 @@ public static class ClassUsage extends ControllerCommand implements Callable<Sea
 		@Override
 		public SearchCollector call() throws Exception {
 			return SearchBuilder.in(getWorkspace())
-					.skipDebug()
 					.query(new ClassReferenceQuery(name))
 					.build();
 		}

File: src/main/java/me/coley/recaf/search/MemberReferenceQuery.java
Patch:
@@ -26,7 +26,7 @@ public class MemberReferenceQuery extends Query {
 	 */
 	public MemberReferenceQuery(String owner, String name, String desc, StringMatchMode
 			stringMode) {
-		super(QueryType.REFERENCE, stringMode);
+		super(QueryType.MEMBER_REFERENCE, stringMode);
 		if(owner == null && name == null && desc == null) {
 			throw new IllegalArgumentException("At least one query parameter must be non-null!");
 		}

File: src/main/java/me/coley/recaf/ui/controls/tree/InsnItem.java
Patch:
@@ -25,7 +25,7 @@ public InsnItem(JavaResource resource, AbstractInsnNode insn) {
 	}
 
 	/**
-	 * @return Contained class name.
+	 * @return Instruction value.
 	 */
 	public AbstractInsnNode getInsn() {
 		return insn;

File: src/main/java/me/coley/recaf/search/SearchCollector.java
Patch:
@@ -28,7 +28,7 @@
  * @author Matt
  */
 public class SearchCollector {
-	public static final int ACC_NOT_FOUND = -1;
+	public static final int ACC_NOT_FOUND = 0;
 	private final ListMultimap<Query, SearchResult> results = MultimapBuilder
 			.linkedHashKeys(2).arrayListValues().build();
 	private final Map<Query, List<SearchResult>> resultMapView = Multimaps.asMap(results);

File: src/main/java/me/coley/recaf/search/Context.java
Patch:
@@ -304,7 +304,6 @@ public boolean contains(Context<?> other) {
 
 		@Override
 		public String toString() {
-			// TODO: Insns with labels don't get names because "visitPre" isn't used... Fix?
 			return parent.toString() + " " + pos + ":" + Disassembler.insn(insn);
 		}
 	}

File: src/main/java/me/coley/recaf/ui/controls/ConfigPane.java
Patch:
@@ -43,6 +43,7 @@ public ConfigPane(GuiController controller, ConfKeybinding config) {
 		editorOverrides.put("binding.close", KeybindField::new);
 		editorOverrides.put("binding.saveapp", KeybindField::new);
 		editorOverrides.put("binding.save", KeybindField::new);
+		editorOverrides.put("binding.find", KeybindField::new);
 		editorOverrides.put("binding.undo", KeybindField::new);
 		editorOverrides.put("binding.gotodef", KeybindField::new);
 		setupConfigControls(config);

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeContextHandling.java
Patch:
@@ -5,7 +5,7 @@
 import org.fxmisc.richtext.model.TwoDimensional;
 
 /**
- * Context menu handler for {#link BytecodePane}.
+ * Context menu handler for {@link BytecodePane}.
  *
  * @author Matt
  */

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodePane.java
Patch:
@@ -16,7 +16,7 @@
  *
  * @author Matt
  */
-public class BytecodePane extends TextPane<AssemblerException, BytecodeErrorHandling, BytecodeContextHandling> {
+public class BytecodePane extends TextPane<BytecodeErrorHandling, BytecodeContextHandling> {
 	public static final int HOVER_ERR_TIME = 50;
 	private final BytecodeSuggestHandler suggestHandler = new BytecodeSuggestHandler(this);
 	private final String className;
@@ -42,7 +42,7 @@ public BytecodePane(GuiController controller, String className, String methodNam
 		this.className = className;
 		this.methodName = methodName;
 		this.methodDesc = methodDesc;
-		setOnCodeChange(text -> getErrorHandler().onCodeChange(text, () -> {
+		setOnCodeChange(text -> getErrorHandler().onCodeChange(() -> {
 			// Reset current cache
 			current = null;
 			// Setup assembler

File: src/main/java/me/coley/recaf/ui/controls/text/JavaContextHandling.java
Patch:
@@ -23,7 +23,7 @@
 import static me.coley.recaf.util.JavaParserUtil.*;
 
 /**
- * Context menu handler for {#link JavaPane}.
+ * Context menu handler for {@link JavaPane}.
  *
  * @author Matt
  */

File: src/main/java/me/coley/recaf/ui/controls/text/JavaPane.java
Patch:
@@ -6,7 +6,6 @@
 import me.coley.recaf.compiler.TargetVersion;
 import me.coley.recaf.control.gui.GuiController;
 import me.coley.recaf.parse.source.SourceCode;
-import me.coley.recaf.parse.source.SourceCodeException;
 import me.coley.recaf.ui.controls.text.model.Languages;
 import me.coley.recaf.util.*;
 import me.coley.recaf.workspace.*;
@@ -19,7 +18,7 @@
  *
  * @author Matt
  */
-public class JavaPane extends TextPane<SourceCodeException, JavaErrorHandling, JavaContextHandling> {
+public class JavaPane extends TextPane<JavaErrorHandling, JavaContextHandling> {
 	public static final int HOVER_ERR_TIME = 50;
 	public static final int HOVER_DOC_TIME = 700;
 	private final JavaResource resource;
@@ -36,7 +35,7 @@ public JavaPane(GuiController controller, JavaResource resource) {
 		super(controller, Languages.find("java"), JavaContextHandling::new);
 		this.resource = resource;
 		setErrorHandler(new JavaErrorHandling(this));
-		setOnCodeChange(text -> getErrorHandler().onCodeChange(text, () -> {
+		setOnCodeChange(text -> getErrorHandler().onCodeChange(() -> {
 			code = new SourceCode(resource, getText());
 			code.analyze(controller.getWorkspace());
 			docHandler = new JavaDocHandling(this, controller, code);

File: src/main/java/me/coley/recaf/ui/controls/text/TextPane.java
Patch:
@@ -23,16 +23,14 @@
 /**
  * Text editor panel.
  *
- * @param <T>
- * 		Type of throwable error for error handling.
  * @param <E>
  * 		Error handler type.
  * @param <C>
  *     	Context handler type.
  *
  * @author Matt
  */
-public class TextPane<T extends Throwable, E extends ErrorHandling<T>, C extends ContextHandling> extends BorderPane {
+public class TextPane<E extends ErrorHandling, C extends ContextHandling> extends BorderPane {
 	protected final GuiController controller;
 	protected final CodeArea codeArea = new CodeAreaExt();
 	protected final C contextHandler;

File: src/main/java/me/coley/recaf/util/DelayableAction.java
Patch:
@@ -10,7 +10,6 @@ public class DelayableAction extends Thread {
 	private final long threshold;
 	private final Runnable action;
 	private long lastEdit;
-	private boolean done;
 
 	/**
 	 * @param threshold
@@ -40,7 +39,6 @@ public void run() {
 		}
 		// Run action
 		action.run();
-		done = true;
 	}
 
 	/**
@@ -57,6 +55,6 @@ public void resetDelay() {
 	 * @return {@code true} if the action has been executed.
 	 */
 	public boolean isDone() {
-		return done;
+		return getState() == State.TERMINATED;
 	}
 }
\ No newline at end of file

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -10,6 +10,7 @@
 import me.coley.recaf.control.gui.GuiController;
 import me.coley.recaf.search.QueryType;
 import me.coley.recaf.ui.controls.*;
+import me.coley.recaf.util.ClasspathUtil;
 import me.coley.recaf.workspace.*;
 import org.apache.commons.io.FileUtils;
 
@@ -85,7 +86,7 @@ public MainMenu(GuiController controller) {
 		mHelp.setDisable(true);
 		//
 		getMenus().addAll(mFile, mConfig, mSearch, mHistory);
-		if (!InstrumentationResource.isActive())
+		if (!InstrumentationResource.isActive() && ClasspathUtil.classExists("com.sun.tools.attach.VirtualMachine"))
 			getMenus().add(mAttach);
 		getMenus().addAll(mPlugins, mHelp);
 		// Setup file-choosers

File: src/main/java/me/coley/recaf/parse/bytecode/Assembler.java
Patch:
@@ -103,7 +103,7 @@ else if(ast instanceof Instruction)
 		// Use the saved data to fill in missing variable types.
 		if (!noVerify) {
 			frames = verify(node);
-			variables.fillMissingTypes(frames);
+			variables.visitWithFrames(frames, labels);
 		}
 		node.localVariables = variables.getVariables(labels);
 		return node;

File: src/main/java/me/coley/recaf/parse/bytecode/Disassembler.java
Patch:
@@ -88,7 +88,7 @@ private void visit(MethodNode value) {
 				new NameAST(0, 0, value.name),
 				new DescAST(0, 0, Type.getMethodType(value.desc).getReturnType().getDescriptor()));
 		for (AccessFlag flag : AccessFlag.values())
-			if ((value.access & flag.getMask()) == flag.getMask())
+			if (flag.getTypes().contains(AccessFlag.Type.METHOD) && (value.access & flag.getMask()) == flag.getMask())
 				def.getModifiers().add(new DefinitionModifierAST(0, 0, flag.getName()));
 		Type[] argTypes = Type.getMethodType(value.desc).getArgumentTypes();
 		int paramVar = AccessFlag.isStatic(value.access) ? 0 : 1;

File: src/main/java/me/coley/recaf/parse/bytecode/parser/DoubleParser.java
Patch:
@@ -14,8 +14,10 @@ public class DoubleParser extends AbstractParser<NumberAST> {
 	public NumberAST visit(int lineNo, String line) throws ASTParseException {
 		try {
 			String trim = line.trim();
+			// Check standard numbers, then exponential form form if that fails
 			if(!trim.matches("-?[.\\d]+[Dd]?"))
-				throw new ASTParseException(lineNo, "Invalid double: " + trim);
+				if (!trim.matches("-?[\\d.]+(?:[eE]-?\\d+)?[dD]?"))
+					throw new ASTParseException(lineNo, "Invalid double: " + trim);
 			int start = line.indexOf(trim);
 			return new NumberAST(lineNo, getOffset() + start, Double.valueOf(trim));
 		} catch(Exception ex) {

File: src/main/java/me/coley/recaf/parse/bytecode/parser/FloatParser.java
Patch:
@@ -15,7 +15,8 @@ public NumberAST visit(int lineNo, String line) throws ASTParseException {
 		try {
 			String trim = line.trim();
 			if(!trim.matches("-?[.\\d]+[Ff]?"))
-				throw new ASTParseException(lineNo, "Invalid float: " + trim);
+				if (!trim.matches("-?[\\d.]+(?:[eE]-?\\d+)?[Ff]?"))
+					throw new ASTParseException(lineNo, "Invalid float: " + trim);
 			int start = line.indexOf(trim);
 			return new NumberAST(lineNo, getOffset() + start, Float.valueOf(trim));
 		} catch(Exception ex) {

File: src/main/java/me/coley/recaf/parse/bytecode/parser/InvokeDynamicParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.*;
+import me.coley.recaf.util.RegexUtil;
 
 import java.util.*;
 
@@ -40,7 +41,7 @@ public InvokeDynamicAST visit(int lineNo, String line) throws ASTParseException
 			DescAST desc = descParser.visit(lineNo, trim[2]);
 			// handle & args
 			// - Split space between handle and args
-			trim = line.substring(line.indexOf('[')).split("(?<=\\])\\s+(?=.*\\[)");
+			trim = line.substring(RegexUtil.indexOf("(?:(?<=\\s)handle|handle|\\s)\\[\\s*H_", line)).split("(?<=\\])\\s+(?=.*\\[)");
 			// handle
 			String handleS = trim[0];
 			if (!handleS.matches(BRACKET_WRAPPING))

File: src/main/java/me/coley/recaf/parse/bytecode/parser/LongParser.java
Patch:
@@ -15,11 +15,11 @@ public NumberAST visit(int lineNo, String line) throws ASTParseException {
 		try {
 			String trim = line.trim();
 			if(!trim.matches("-?\\d+[LlJj]?"))
-				throw new ASTParseException(lineNo, "Invalid long: " + trim);
+				if (!trim.matches("-?[\\d.]+(?:[eE]-?\\d+)?[LlJj]?"))
+					throw new ASTParseException(lineNo, "Invalid long: " + trim);
 			char last = trim.charAt(trim.length() - 1);
-			if (!(last > '0' && last < '9')) {
+			if (!(last > '0' && last < '9'))
 				trim = trim.substring(0, trim.length() - 1);
-			}
 			int start = line.indexOf(trim);
 			return new NumberAST(lineNo, getOffset() + start, Long.valueOf(trim));
 		} catch(Exception ex) {

File: src/main/java/me/coley/recaf/parse/bytecode/parser/StringParser.java
Patch:
@@ -14,7 +14,7 @@ public class StringParser extends AbstractParser<StringAST> {
 	public StringAST visit(int lineNo, String line) throws ASTParseException {
 		try {
 			String trim = line.trim();
-			if(!trim.matches("\".*\""))
+			if(!(trim.charAt(0) == '"' && trim.charAt(trim.length() - 1) == '"'))
 				throw new ASTParseException(lineNo, "Invalid string: " + trim);
 			int start = line.indexOf(trim);
 			return new StringAST(lineNo, getOffset() + start, trim.substring(1, trim.length() - 1));

File: src/main/java/me/coley/recaf/parse/bytecode/Disassembler.java
Patch:
@@ -341,9 +341,9 @@ public static String insn(AbstractInsnNode insn) {
 	 * @return {@code null} if no variable with the index exists. Otherwise, the variable's name.
 	 */
 	private String varInsnToName(AbstractInsnNode insn) {
+		int varIndex = ((insn instanceof VarInsnNode) ?
+				((VarInsnNode) insn).var : ((IincInsnNode) insn).var);
 		if (method != null && method.localVariables != null) {
-			int varIndex = ((insn instanceof VarInsnNode) ?
-					((VarInsnNode) insn).var : ((IincInsnNode) insn).var);
 			int insnPos = InsnUtil.index(insn);
 			List<LocalVariableNode> list =  method.localVariables.stream()
 					.filter(v -> varIndex == v.index)
@@ -356,7 +356,7 @@ private String varInsnToName(AbstractInsnNode insn) {
 					.findFirst()
 					.orElse(String.valueOf(varIndex));
 		}
-		return null;
+		return String.valueOf(varIndex);
 	}
 
 	private String firstVarByIndex(int index) {

File: src/main/java/me/coley/recaf/ui/controls/SearchPane.java
Patch:
@@ -188,7 +188,6 @@ private SearchCollector buildValueSearch(Workspace workspace) {
 
 	private SearchCollector buildInsnSearch(Workspace workspace) {
 		return SearchBuilder.in(workspace)
-				.skipDebug()
 				.skipPackages(input("ui.search.skippackages"))
 				.query(new InsnTextQuery(input("ui.search.insn.lines"), input("ui.search.matchmode"))).build();
 	}

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -69,7 +69,7 @@ private static void agent(String args, Instrumentation inst) {
 		// Log that we are an agent
 		info("Starting as agent...");
 		// Add instrument launch arg
-		if(args == null)
+		if(args == null || args.trim().isEmpty())
 			args = "--instrument";
 		else if(args.contains("--instrument"))
 			args = args + ",--instrument";

File: src/main/java/me/coley/recaf/command/impl/Initializer.java
Patch:
@@ -7,7 +7,6 @@
 import me.coley.recaf.workspace.InstrumentationResource;
 import picocli.CommandLine;
 
-import java.awt.GraphicsEnvironment;
 import java.io.File;
 
 /**
@@ -36,7 +35,7 @@ public class Initializer implements Runnable {
 
 	@Override
 	public void run() {
-		boolean headless = cli || script != null || GraphicsEnvironment.isHeadless();
+		boolean headless = cli || script != null;
 		Controller controller;
 		if (headless)
 			controller = new HeadlessController(input, script);

File: src/main/java/me/coley/recaf/ui/MainWindow.java
Patch:
@@ -46,6 +46,7 @@ public void start(Stage stage) throws Exception {
 		// Set instances
 		window = this;
 		this.stage = stage;
+		this.stage.setOnCloseRequest(e -> controller.exit());
 		setup();
 		stage.show();
 	}

File: src/main/java/me/coley/recaf/util/JavaParserUtil.java
Patch:
@@ -213,7 +213,7 @@ public static String toInternal(ResolvedTypeDeclaration type) {
 					type.isEnum() ? type.asEnum().getName() :
 							type.asInterface().getName();
 			String full = type.asReferenceType().getQualifiedName().replace('.', '/');
-			String prefix = packagee.isEmpty() ? "" : packagee.replace('.', '/') + "/";
+			String prefix = (packagee == null || packagee.isEmpty()) ? "" : packagee.replace('.', '/') + "/";
 			// Test if normal class
 			if (full.equals(prefix + simple))
 				return full;

File: src/main/java/me/coley/recaf/util/UiUtil.java
Patch:
@@ -45,7 +45,9 @@ else if(Arrays.asList("jar", "war").contains(ext))
 	 * @return Icon path based on the type of resource.
 	 */
 	public static String getResourceIcon(JavaResource resource) {
-		if(resource instanceof ArchiveResource)
+		if(resource instanceof DirectoryResource)
+			return "icons/folder-source.png";
+		else if(resource instanceof ArchiveResource)
 			return "icons/jar.png";
 		else if(resource instanceof ClassResource)
 			return "icons/binary.png";

File: src/main/java/me/coley/recaf/workspace/Workspace.java
Patch:
@@ -22,7 +22,7 @@
  * @author Matt
  */
 public class Workspace {
-	private static final ClasspathResource CP = ClasspathResource.get();
+	private static final LazyClasspathResource CP = LazyClasspathResource.get();
 	private final JavaResource primary;
 	private final List<JavaResource> libraries;
 	private HierarchyGraph hierarchyGraph;

File: src/test/java/me/coley/recaf/AssemblyCasesTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.RootAST;
-import me.coley.recaf.workspace.ClasspathResource;
+import me.coley.recaf.workspace.LazyClasspathResource;
 import me.coley.recaf.workspace.Workspace;
 import org.junit.jupiter.api.*;
 import org.objectweb.asm.tree.*;
@@ -21,7 +21,7 @@ public class AssemblyCasesTest {
 	@BeforeAll
 	public static void setup() {
 		// Set dummy workspace so type analysis works
-		Recaf.setCurrentWorkspace(new Workspace(ClasspathResource.get()));
+		Recaf.setCurrentWorkspace(new Workspace(LazyClasspathResource.get()));
 	}
 
 	@Nested

File: src/main/java/me/coley/recaf/ui/controls/text/TextPane.java
Patch:
@@ -96,7 +96,7 @@ private void setupSearch() {
 	}
 
 	private void setupErrors() {
-		errorList.setCellFactory(e -> new ErrorCell());
+		errorList.setCellFactory(e -> new ErrorCell(codeArea));
 		errorList.getStyleClass().add("error-list");
 	}
 

File: src/main/java/me/coley/recaf/parse/bytecode/Assembler.java
Patch:
@@ -87,6 +87,8 @@ public MethodNode compile(ParseResult<RootAST> result) throws AssemblerException
 			AbstractInsnNode insn;
 			if(ast instanceof LabelAST)
 				insn = labels.get(((LabelAST) ast).getName().getName());
+			else if(ast instanceof AliasAST)
+				continue;
 			else if(ast instanceof Instruction)
 				insn = ((Instruction) ast).compile(labels, variables);
 			else

File: src/test/java/me/coley/recaf/DebugTest.java
Patch:
@@ -21,6 +21,8 @@
  *
  * @author Matt
  */
+@Disabled
+// TODO: These tests are flaky and can fail intermittently
 public class DebugTest extends Base {
 	private static final long FAIL_TIMEOUT_SECONDS = 4;
 	private DebuggerResource resource;

File: src/test/java/me/coley/recaf/DebugTest.java
Patch:
@@ -22,7 +22,7 @@
  * @author Matt
  */
 public class DebugTest extends Base {
-	private static final long FAIL_TIMEOUT_SECONDS = 2;
+	private static final long FAIL_TIMEOUT_SECONDS = 4;
 	private DebuggerResource resource;
 	private OutWrapper out;
 	private VMWrap vm;

File: src/main/java/me/coley/recaf/parse/bytecode/Assembler.java
Patch:
@@ -44,6 +44,7 @@ public MethodNode compile(ParseResult<RootAST> result) throws AssemblerException
 		if(!result.isSuccess()) {
 			ASTParseException cause = result.getProblems().get(0);
 			AssemblerException ex  = new AssemblerException(cause, "AST must not contain errors", cause.getLine());
+			ex.addSubExceptions(result.getProblems());
 			throw ex;
 		}
 		RootAST root = result.getRoot();

File: src/main/java/me/coley/recaf/ui/controls/text/JavaContextHandling.java
Patch:
@@ -169,8 +169,9 @@ private void handleFieldType(String owner, String name, String desc, boolean dec
 	}
 
 	private void handleMethodType(String owner, String name, String desc, boolean declaration) {
-		codeArea.setContextMenu(ContextMenus.ofMethod(controller, (JavaPane) codeArea.getParent().getParent(),
-				owner, name, desc, declaration));
+		codeArea.setContextMenu(ContextMenus.ofMethod(controller, (JavaPane)
+						codeArea.getParent().getParent().getParent().getParent(),
+						owner, name, desc, declaration));
 	}
 
 	// ===================================== //

File: src/main/java/me/coley/recaf/ui/controls/text/JavaErrorHandling.java
Patch:
@@ -45,6 +45,7 @@ public void report(Diagnostic<? extends VirtualJavaFileObject> diagnostic) {
 		int to = column + wordLength;
 		String msg = diagnostic.getMessage(Locale.ENGLISH);
 		getProblems().add(new Pair<>(line, msg));
+		setProblems(getProblems());
 		// Mark problem, 0-indexing the column
 		markProblem(line, column - 1, to - 1, literalStart, msg);
 		refreshProblemGraphics();
@@ -67,7 +68,7 @@ public void onCodeChange(String unused, Errorable<SourceCodeException> errorable
 					// Handle displaying errors
 					updateProblems(ex.getResult().getProblems());
 					for(Problem problem : ex.getResult().getProblems())
-						problem.getLocation().flatMap(TokenRange::toRange).ifPresent(r -> addProblem(problem, r));
+						problem.getLocation().flatMap(TokenRange::toRange).ifPresent(r -> markProblem(problem, r));
 				}
 				Platform.runLater(this::refreshProblemGraphics);
 			});
@@ -108,7 +109,7 @@ private void updateProblems(List<Problem> problems) {
 	 * @param range
 	 * 		Range of problem.
 	 */
-	private void addProblem(Problem problem, Range range) {
+	private void markProblem(Problem problem, Range range) {
 		// Convert the JavaParser range to location data
 		// - 0-index the line number
 		int line = range.begin.line - 1;

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -120,8 +120,10 @@ void fillMissingTypes(Frame<RValue>[] frames) throws AssemblerException {
 				if(value != null && value.getType() != null)
 					types.add(value.getType());
 			}
-			// Collect common type among useses
 			Iterator<Type> it = types.iterator();
+			// If we don't have type information, abort for this index
+			if (!it.hasNext())
+				continue;
 			Type last = it.next();
 			int arrayLevel = TypeUtil.getArrayDepth(last);
 			last = TypeUtil.getElementType(last);

File: src/main/java/me/coley/recaf/ui/controls/text/model/LanguageStyler.java
Patch:
@@ -47,9 +47,8 @@ public StyleSpans<Collection<String>> computeStyle(String text) {
 				lastKwEnd = matcher.end();
 			}
 		} catch(NullPointerException npe) {
-			// TODO: Figure out why this is non-deterministic
-			//  - open xml, then java and java fails
-			//  - open java, then xml, then java works
+			// There was once some odd behavior in 'matcher.find()' which caused NPE...
+			// This seems to have been fixed, but we will check for regressions
 			Log.error(npe, "Error occurred when computing styles:");
 		}
 		spansBuilder.add(Collections.emptyList(), text.length() - lastKwEnd);

File: src/main/java/me/coley/recaf/parse/bytecode/ast/LdcInsnAST.java
Patch:
@@ -49,8 +49,8 @@ public AbstractInsnNode compile(Map<String, LabelNode> labels, Variables variabl
 			value = ((StringAST) content).getValue();
 		else if(content instanceof NumberAST)
 			value = ((NumberAST) content).getValue();
-		else if(content instanceof TypeAST)
-			value = Type.getType(((TypeAST) content).getType());
+		else if(content instanceof DescAST)
+			value = Type.getType(((DescAST) content).getDesc());
 		else if(content instanceof HandleAST)
 			value = ((HandleAST) content).compile();
 		return new LdcInsnNode(value);

File: src/main/java/me/coley/recaf/parse/bytecode/parser/LdcInsnParser.java
Patch:
@@ -31,9 +31,9 @@ public LdcInsnAST visit(int lineNo, String line) throws ASTParseException {
 				StringParser parser = new StringParser();
 				parser.setOffset(ti + space + 1);
 				ast = parser.visit(lineNo, content);
-			} else if(content.contains("/")) {
+			} else if(content.contains("[") || content.contains(";")) {
 				// Type
-				TypeParser parser = new TypeParser();
+				DescParser parser = new DescParser();
 				parser.setOffset(ti + space + 1);
 				ast = parser.visit(lineNo, content);
 			} else if(content.endsWith("F") || content.endsWith("f")) {

File: src/test/java/me/coley/recaf/AssemblyAstTest.java
Patch:
@@ -193,11 +193,11 @@ public void testLineInsn() {
 
 		@Test
 		public void testMultiANewArrayInsn() {
-			String text = "MULTIANEWARRAY java/lang/String 2";
+			String text = "MULTIANEWARRAY [[java/lang/String; 2";
 			MultiArrayInsnAST arrayAST = single(text);
 			assertEquals(text, arrayAST.print());
 			assertEquals("MULTIANEWARRAY", arrayAST.getOpcode().print());
-			assertEquals("java/lang/String", arrayAST.getType().getType());
+			assertEquals("[[java/lang/String;", arrayAST.getDesc().getDesc());
 			assertEquals(2, arrayAST.getDimensions().getIntValue());
 		}
 

File: src/main/java/me/coley/recaf/ui/ContextMenus.java
Patch:
@@ -181,7 +181,7 @@ public static ContextMenu ofMethod(GuiController controller, JavaPane pane, Stri
 		if(resource.isPrimary()) {
 			// TODO: Add edit options
 			MenuItem edit = new ActionMenuItem(LangUtil.translate("ui.edit.method.editasm"), () -> {
-				BytecodeViewport view = new BytecodeViewport(controller, pane, resource, owner, name, desc, access);
+				BytecodeViewport view = new BytecodeViewport(controller, pane, resource, owner, name, desc);
 				view.updateView();
 				controller.windows().window(name + desc, view, 600, 600).show();
 			});

File: src/main/java/me/coley/recaf/ui/controls/text/ErrorHandling.java
Patch:
@@ -19,7 +19,6 @@
  * @param <T> Type of error.
  */
 public abstract class ErrorHandling<T extends Throwable> {
-	protected final TextPane textPane;
 	protected final CodeArea codeArea;
 	protected DelayableAction updateThread;
 	protected List<Pair<Integer, String>> problems = Collections.emptyList();
@@ -29,7 +28,6 @@ public abstract class ErrorHandling<T extends Throwable> {
 	 * 		Pane to handle errors for.
 	 */
 	public ErrorHandling(TextPane textPane) {
-		this.textPane = textPane;
 		this.codeArea = textPane.codeArea;
 	}
 

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -348,6 +348,8 @@ public int getMax() {
 
 	private void setNext(int next) {
 		this.next = next;
+		if (next > maxIndex)
+			maxIndex = next;
 	}
 
 	/**

File: src/main/java/me/coley/recaf/control/gui/GuiController.java
Patch:
@@ -111,6 +111,7 @@ protected Boolean call() throws Exception {
 					}).start();
 					// Start the load process
 					setWorkspace(loader.call());
+					windows.getMainWindow().clearTabViewports();
 					configs.backend().recentFiles.add(file.getAbsolutePath());
 					return true;
 				} catch(Exception ex) {

File: src/main/java/me/coley/recaf/parse/bytecode/parser/LookupSwitchInsnParser.java
Patch:
@@ -24,7 +24,7 @@ public LookupSwitchInsnAST visit(int lineNo, String line) throws ASTParseExcepti
 			opParser.setOffset(start);
 			OpcodeAST op = opParser.visit(lineNo, opS);
 			// Collect parameters
-			String[] data = RegexUtil.matches(line, "(?<=\\[).*?(?=\\])");
+			String[] data = RegexUtil.allMatches(line, "(?<=\\[).*?(?=\\])");
 			if (data.length < 2)
 				throw new ASTParseException(lineNo, "Not enough paramters");
 			// mapping

File: src/main/java/me/coley/recaf/parse/bytecode/parser/TableSwitchInsnParser.java
Patch:
@@ -24,7 +24,7 @@ public TableSwitchInsnAST visit(int lineNo, String line) throws ASTParseExceptio
 			opParser.setOffset(start);
 			OpcodeAST op = opParser.visit(lineNo, opS);
 			// Collect parameters
-			String[] data = RegexUtil.matches(line, "(?<=\\[).*?(?=\\])");
+			String[] data = RegexUtil.allMatches(line, "(?<=\\[).*?(?=\\])");
 			if (data.length < 3)
 				throw new ASTParseException(lineNo, "Not enough paramters");
 			// min & max

File: src/main/java/me/coley/recaf/util/IOUtil.java
Patch:
@@ -83,7 +83,8 @@ public static byte[] toByteArray(InputStream in, ByteArrayOutputStream out, byte
 	 * @return array of bytes
 	 * @throws IOException if any I/O error occurs
 	 */
-	public static byte[] toByteArray(InputStream in, ByteArrayOutputStream out, int length, int max) throws IOException {
+	public static byte[] toByteArray(InputStream in, ByteArrayOutputStream out, int length, int max)
+			throws IOException {
 		return toByteArray(in, out, new byte[length], max);
 	}
 
@@ -145,6 +146,7 @@ public static byte[] toByteArray(InputStream in) throws IOException {
 	 * No limits.
 	 *
 	 * @param in an input stream
+	 * @param buffer data buffer
 	 * @return array of bytes
 	 * @throws IOException if any I/O error occurs
 	 */

File: src/main/java/me/coley/recaf/ui/controls/ViewportTabs.java
Patch:
@@ -58,8 +58,6 @@ public ViewportTabs(GuiController controller) {
 	 * @return Viewport of the class.
 	 */
 	public ClassViewport openClass(JavaResource resource, String name) {
-		System.out.println(resource);
-		System.out.println(nameToTab.containsKey(name));
 		if(nameToTab.containsKey(name))
 			return getClassViewport(name);
 		ClassViewport view = new ClassViewport(controller, resource, name);

File: src/main/java/me/coley/recaf/control/gui/GuiController.java
Patch:
@@ -111,6 +111,7 @@ protected Boolean call() throws Exception {
 					}).start();
 					// Start the load process
 					setWorkspace(loader.call());
+					windows.getMainWindow().clearTabViewports();
 					configs.backend().recentFiles.add(file.getAbsolutePath());
 					return true;
 				} catch(Exception ex) {

File: src/main/java/me/coley/recaf/util/AccessFlag.java
Patch:
@@ -32,7 +32,8 @@ public enum AccessFlag {
 	ACC_INTERFACE(Opcodes.ACC_INTERFACE, "interface", true, Type.CLASS, Type.INNER_CLASS),
 	ACC_ABSTRACT(Opcodes.ACC_ABSTRACT, "abstract", true, Type.CLASS, Type.INNER_CLASS, Type.METHOD),
 	ACC_STRICT(Opcodes.ACC_STRICT, "strictfp", true, Type.METHOD),
-	ACC_SYNTHETIC(Opcodes.ACC_SYNTHETIC, "synthetic", false, Type.CLASS, Type.INNER_CLASS, Type.METHOD, Type.FIELD, Type.PARAM),
+	ACC_SYNTHETIC(Opcodes.ACC_SYNTHETIC, "synthetic", false,
+			Type.CLASS, Type.INNER_CLASS, Type.METHOD, Type.FIELD, Type.PARAM),
 	ACC_ANNOTATION(Opcodes.ACC_ANNOTATION, "annotation", false, Type.CLASS, Type.INNER_CLASS),
 	ACC_ENUM(Opcodes.ACC_ENUM, "enum", true, Type.CLASS, Type.INNER_CLASS, Type.FIELD),
 	ACC_MODULE(Opcodes.ACC_MODULE, "module", false, Type.CLASS),

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodeErrorHandling.java
Patch:
@@ -31,6 +31,7 @@ public void onCodeChange(String unused, Errorable<AssemblerException> errorable)
 		// Check if new update thread needs to be spawned
 		if(updateThread == null || updateThread.isDone())
 			updateThread = new DelayableAction(700, () -> {
+				Platform.runLater(this::clearProblemLines);
 				try {
 					// Attempt to parse
 					errorable.run();
@@ -56,7 +57,6 @@ public void onCodeChange(String unused, Errorable<AssemblerException> errorable)
 	 * 		Assembler problem.
 	 */
 	private void updateProblems(AssemblerException ex) {
-		Platform.runLater(this::clearProblemLines);
 		// Convert problem to <Line:Message> format
 		if(ex == null)
 			this.problems = Collections.emptyList();

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -179,7 +179,6 @@ private void addLibrary() {
 					case "class":
 						resource = new ClassResource(file);
 						break;
-					case "zip":
 					case "jar":
 						resource = new JarResource(file);
 						break;

File: src/main/java/me/coley/recaf/ui/ContextMenus.java
Patch:
@@ -101,6 +101,8 @@ public static ContextMenu ofField(GuiController controller, JavaPane pane, Strin
 				return null;
 			}
 		FieldNode node = ClassUtil.getField(reader, SKIP, name, desc);
+		if(node == null)
+			return null;
 		int access = node.access;
 		// Create header
 		MenuItem header = new MenuItem(name);

File: src/main/java/me/coley/recaf/decompile/procyon/ProcyonDecompiler.java
Patch:
@@ -69,9 +69,7 @@ public String decompile(Workspace workspace, String name) {
         settings.setJavaFormattingOptions(JavaFormattingOptions.createDefault());
         MetadataSystem system = new MetadataSystem(loader);
         system.setEagerMethodLoadingEnabled((Boolean) options.get("eager-methods-loading"));
-        System.out.println(name);
         TypeReference ref = system.lookupType(name);
-        System.out.println(ref);
         DecompilationOptions decompilationOptions = new DecompilationOptions();
         decompilationOptions.setSettings(settings);
         decompilationOptions.setFullDecompilation(true);

File: src/main/java/me/coley/recaf/parse/assembly/impl/MultiANewArray.java
Patch:
@@ -38,10 +38,10 @@ public String generate(MethodNode method, MultiANewArrayInsnNode insn) {
 	@Override
 	public RegexToken createToken() {
 		return RegexToken
-				.create("TYPE", new UniMatcher<>("[$\\w\\/]+", (s -> s)),
+				.create("TYPE", new UniMatcher<>("[$\\w\\/\\[]+", (s -> s)),
 						((tok, part) -> AutoComplete.internalName(part)))
 				.append("DIMENSION", new UniMatcher<>("(?!= )[\\d]+", (s->Integer.parseInt(s))),
 						((tok, part) -> Collections.emptyList()))
 				.root();
 	}
-}
\ No newline at end of file
+}

File: src/main/java/me/coley/recaf/parse/assembly/impl/MultiANewArray.java
Patch:
@@ -38,10 +38,10 @@ public String generate(MethodNode method, MultiANewArrayInsnNode insn) {
 	@Override
 	public RegexToken createToken() {
 		return RegexToken
-				.create("TYPE", new UniMatcher<>("[$\\w\\/]+", (s -> s)),
+				.create("TYPE", new UniMatcher<>("[$\\w\\/\\[]+", (s -> s)),
 						((tok, part) -> AutoComplete.internalName(part)))
 				.append("DIMENSION", new UniMatcher<>("(?!= )[\\d]+", (s->Integer.parseInt(s))),
 						((tok, part) -> Collections.emptyList()))
 				.root();
 	}
-}
\ No newline at end of file
+}

File: src/main/java/me/coley/recaf/ui/MainWindow.java
Patch:
@@ -166,7 +166,6 @@ public static MainWindow get(GuiController controller) {
 				ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class)
 						.setLoggerLevel("javafx.css", "OFF");
 			});
-			Runtime.getRuntime().addShutdownHook(new Thread(Platform::exit));
 		}
 		return window;
 	}

File: src/main/java/me/coley/recaf/parse/bytecode/Variables.java
Patch:
@@ -124,10 +124,12 @@ void fillMissingTypes(Frame<RValue>[] frames) throws AssemblerException {
 			Iterator<Type> it = types.iterator();
 			Type last = it.next();
 			int arrayLevel = TypeUtil.getArrayDepth(last);
+			last = TypeUtil.getElementType(last);
 			while (it.hasNext()) {
 				Type type1 = it.next();
 				if (arrayLevel != TypeUtil.getArrayDepth(type1))
 					throw new VerifierException("Stored multiple array sizes in same variable slot: " + index);
+				type1 = TypeUtil.getElementType(last);
 				if (last.equals(type1))
 					continue;
 				if(Recaf.getCurrentWorkspace() != null)

File: src/main/java/me/coley/recaf/control/headless/JLineEditor.java
Patch:
@@ -79,7 +79,6 @@ public void open(Disassemble.Result wrapper) {
 			ParseResult<RootAST> result = Parse.parse(code);
 			Assembler assembler = new Assembler(cn.name);
 			MethodNode generated = assembler.compile(result);
-			assembler.verify(generated);
 			// Replace method
 			int index = cn.methods.indexOf(mn);
 			if(index >= 0) {

File: src/main/java/me/coley/recaf/parse/bytecode/RValue.java
Patch:
@@ -400,6 +400,8 @@ private static boolean isParent(Type parent, Type child) {
 		else if(parent.getSort() == Type.OBJECT && child.getSort() == Type.OBJECT) {
 			if(parent.equals(child))
 				return true;
+			if (Recaf.getCurrentWorkspace() == null)
+				return false;
 			return Recaf.getCurrentWorkspace().getHierarchyGraph()
 					.getAllParents(child.getInternalName())
 					.anyMatch(n -> n != null && n.equals(parent.getInternalName()));

File: src/main/java/me/coley/recaf/parse/bytecode/Verifier.java
Patch:
@@ -25,18 +25,18 @@ class Verifier extends RAnalyzer {
 		this.assembler = assembler;
 	}
 
-	Frame<RValue>[] verify(MethodNode method) throws AssemblerException {
+	Frame<RValue>[] verify(MethodNode method) throws VerifierException {
 		try {
 			return analyze(currentType, method);
 		} catch(AnalyzerException ex) {
 			// Thrown on verify failure.
 			int line = assembler.getLine(ex.node);
-			throw new AssemblerException(ex,
+			throw new VerifierException(ex,
 					"Verification failed on line: " + line + "\n" + ex.getMessage(), line);
 		} catch(Exception ex) {
 			// IndexOutOfBoundsException: When local variables are messed up
 			// Exception: ?
-			throw new AssemblerException(ex, "Verifier crashed", -1);
+			throw new VerifierException(ex, "Verifier crashed", -1);
 		}
 	}
 }

File: src/main/java/me/coley/recaf/ui/controls/text/BytecodePane.java
Patch:
@@ -57,7 +57,6 @@ public BytecodePane(GuiController controller, JavaResource resource, String clas
 			Assembler assembler = new Assembler(className);
 			// Recompile & verify code
 			MethodNode generated = assembler.compile(result);
-			assembler.verify(generated);
 			// Store result
 			current = generated;
 			current.name = methodName;

File: src/main/java/me/coley/recaf/command/impl/Export.java
Patch:
@@ -42,7 +42,7 @@ public Void call() throws Exception {
 		ResourceKind kind = primary.getKind();
 		if (kind == ResourceKind.URL)
 			kind = ((DeferringResource)primary).getBacking().getKind();
-		boolean exportClass = (!shadeLibs && workspace.getLibraries().size() > 0) && kind == ResourceKind.CLASS;
+		boolean exportClass = !(shadeLibs && !workspace.getLibraries().isEmpty()) && kind == ResourceKind.CLASS;
 		// Class export
 		if (exportClass) {
 			byte[] clazz = primary.getClasses().values().iterator().next();

File: src/main/java/me/coley/recaf/ui/controls/text/JavaContextHandling.java
Patch:
@@ -4,6 +4,7 @@
 import com.github.javaparser.ast.body.*;
 import com.github.javaparser.ast.expr.Expression;
 import com.github.javaparser.resolution.Resolvable;
+import com.github.javaparser.resolution.UnsolvedSymbolException;
 import com.github.javaparser.resolution.declarations.*;
 import com.github.javaparser.resolution.types.ResolvedReferenceType;
 import javafx.scene.input.MouseButton;
@@ -74,7 +75,7 @@ public JavaContextHandling(JavaPane pane, GuiController controller, SourceCode c
 				Object resolved = null;
 				try {
 					resolved = r.resolve();
-				} catch(Exception ex) {
+				} catch(UnsolvedSymbolException ex) {
 					return;
 				}
 				if (resolved instanceof ResolvedReferenceType) {

File: src/main/java/me/coley/recaf/ui/controls/text/JavaPane.java
Patch:
@@ -97,11 +97,11 @@ public Map<String, byte[]> save(String name) {
 	 */
 	public void selectMember(String name, String desc) {
 		// Delay until analysis has run
-		while (code == null || (code.getUnit() == null && !errHandler.hasErrors()))
+		while(code == null || (code.getUnit() == null && !errHandler.hasErrors()))
 			try {
 				Thread.sleep(50);
-			}catch( InterruptedException ex) {}
-
+			} catch(InterruptedException ex) { /* ignored */ }
+		// Select member if unit analysis was a success
 		if (code != null && code.getUnit() != null) {
 			// Jump to range if found
 			Optional<Range> range = JavaParserUtil.getMemberRange(code.getUnit(), name, desc);

File: src/main/java/me/coley/recaf/config/ConfDecompile.java
Patch:
@@ -1,9 +1,6 @@
 package me.coley.recaf.config;
 
 import me.coley.recaf.decompile.DecompileImpl;
-import me.coley.recaf.ui.controls.view.ClassViewport;
-import me.coley.recaf.ui.controls.view.FileViewport;
-import me.coley.recaf.util.LangUtil;
 
 /**
  * Decompile configuration.

File: src/main/java/me/coley/recaf/parse/source/WorkspaceTypeResolver.java
Patch:
@@ -51,7 +51,9 @@ public SymbolReference<ResolvedReferenceTypeDeclaration> tryToSolveType(String n
 			if(workspace.hasClass(internal)) {
 				InputStream is = new ByteArrayInputStream(workspace.getRawClass(internal));
 				ResolvedReferenceTypeDeclaration dec = toTypeDeclaration(classPool.makeClass(is), getRoot());
-				return SymbolReference.solved(dec);
+				SymbolReference<ResolvedReferenceTypeDeclaration> solved = SymbolReference.solved(dec);
+				if (solved.isSolved())
+					return solved;
 			}
 		} catch(IOException ex) {
 			throw new IllegalStateException("Failed to resolve type: " + name, ex);

File: src/main/java/me/coley/recaf/ui/controls/view/ClassViewport.java
Patch:
@@ -1,7 +1,6 @@
 package me.coley.recaf.ui.controls.view;
 
 import me.coley.recaf.control.gui.GuiController;
-import me.coley.recaf.decompile.DecompileImpl;
 import me.coley.recaf.ui.controls.HexEditor;
 import me.coley.recaf.ui.controls.text.JavaPane;
 import me.coley.recaf.util.Log;

File: src/main/java/me/coley/recaf/decompile/DecompileImpl.java
Patch:
@@ -12,7 +12,7 @@
  */
 public enum DecompileImpl {
 	CFR(CfrDecompiler::new),
-	FF(FernFlowerDecompiler::new);
+	FERNFLOWER(FernFlowerDecompiler::new);
 
 	private final Supplier<Decompiler> supplier;
 

File: src/main/java/me/coley/recaf/decompile/fernflower/FernFlowerAccessor.java
Patch:
@@ -53,6 +53,9 @@ public FernFlowerAccessor(IBytecodeProvider provider, IResultSaver saver, Map<St
 	 * 		Thrown if a class cannot be read.
 	 * @throws ReflectiveOperationException
 	 * 		Thrown if the parent loader could not be fetched.
+	 * @throws IndexOutOfBoundsException
+	 * 		Thrown if FernFlower can't read the class.
+	 * 		<i>(IE: It fails on newer Java class files)</i>
 	 */
 	public void addWorkspace(Workspace workspace) throws IOException, ReflectiveOperationException {
 		structContext.addWorkspace(workspace);

File: src/main/java/me/coley/recaf/decompile/fernflower/StructContextDecorator.java
Patch:
@@ -39,6 +39,9 @@ public StructContextDecorator(IResultSaver saver, IDecompiledData data, LazyLoad
 	 * 		Thrown if a class cannot be read.
 	 * @throws ReflectiveOperationException
 	 * 		Thrown if the parent loader could not be fetched.
+	 * @throws IndexOutOfBoundsException
+	 * 		Thrown if FernFlower can't read the class.
+	 * 		<i>(IE: It fails on newer Java class files)</i>
 	 */
 	public void addWorkspace(Workspace workspace) throws IOException,
 			ReflectiveOperationException {

File: src/main/java/me/coley/recaf/ui/controls/ConfigTabs.java
Patch:
@@ -19,7 +19,8 @@ public class ConfigTabs extends TabPane {
 	public ConfigTabs(GuiController controller) {
 		Tab tabDisplay = new Tab(translate("display"), new ConfigPane(controller, controller.config().display()));
 		Tab tabBinding = new Tab(translate("binding"), new ConfigPane(controller, controller.config().keys()));
-		getTabs().addAll(tabDisplay, tabBinding);
+		Tab tabDecompile = new Tab(translate("decompile"), new ConfigPane(controller, controller.config().decompile()));
+		getTabs().addAll(tabDisplay, tabBinding, tabDecompile);
 		setTabClosingPolicy(TabClosingPolicy.UNAVAILABLE);
 	}
 }

File: src/main/java/me/coley/recaf/config/ConfDisplay.java
Patch:
@@ -19,12 +19,12 @@ public class ConfDisplay extends Config {
 	 * Stylesheet group to use for application styling.
 	 */
 	@Conf("display.appstyle")
-	public String appStyle = "default";
+	public String appStyle = "dark";
 	/**
 	 * Theme for decompiler/text view.
 	 */
 	@Conf("display.textstyle")
-	public String textStyle = "default";
+	public String textStyle = "dark";
 	/**
 	 * Display mode for classes.
 	 */

File: src/main/java/me/coley/recaf/ui/controls/text/JavaPane.java
Patch:
@@ -20,6 +20,8 @@
  * @author Matt
  */
 public class JavaPane extends TextPane {
+	public static final int HOVER_ERR_TIME = 50;
+	public static final int HOVER_DOC_TIME = 700;
 	private final JavaErrorHandling errHandler = new JavaErrorHandling(this);
 	private final JavaResource resource;
 	private SourceCode code;
@@ -34,7 +36,6 @@ public class JavaPane extends TextPane {
 	public JavaPane(GuiController controller, JavaResource resource) {
 		super(controller, Languages.find("java"));
 		this.resource = resource;
-		codeArea.setMouseOverTextDelay(Duration.ofMillis(200));
 		setOnCodeChange(text -> errHandler.onCodeChange(text, () -> {
 			code = new SourceCode(resource, getText());
 			code.analyze(controller.getWorkspace());

File: src/main/java/me/coley/recaf/search/InsnResult.java
Patch:
@@ -50,6 +50,7 @@ public boolean equals(Object other) {
 	}
 
 	@Override
+	@SuppressWarnings("unchecked")
 	public int compareTo(SearchResult other) {
 		int ret = super.compareTo(other);
 		if (ret == 0) {

File: src/main/java/me/coley/recaf/ui/MainMenu.java
Patch:
@@ -10,7 +10,7 @@
 import me.coley.recaf.control.gui.GuiController;
 import me.coley.recaf.search.QueryType;
 import me.coley.recaf.ui.controls.*;
-import me.coley.recaf.ui.controls.search.SearchPane;
+import me.coley.recaf.ui.controls.SearchPane;
 import me.coley.recaf.workspace.WorkspaceIO;
 import org.apache.commons.io.FileUtils;
 

File: src/main/java/me/coley/recaf/search/ClassReferenceQuery.java
Patch:
@@ -17,7 +17,7 @@ public class ClassReferenceQuery extends Query {
 	 * 		Class name pattern.
 	 */
 	public ClassReferenceQuery(String name) {
-		super(QueryType.USAGE, StringMatchMode.EQUALS);
+		super(QueryType.REFERENCE, StringMatchMode.EQUALS);
 		this.name = name;
 	}
 

File: src/main/java/me/coley/recaf/search/MemberReferenceQuery.java
Patch:
@@ -26,7 +26,7 @@ public class MemberReferenceQuery extends Query {
 	 */
 	public MemberReferenceQuery(String owner, String name, String desc, StringMatchMode
 			stringMode) {
-		super(QueryType.USAGE, stringMode);
+		super(QueryType.REFERENCE, stringMode);
 		if(owner == null && name == null && desc == null) {
 			throw new IllegalArgumentException("At least one query parameter must be non-null!");
 		}

File: src/main/java/me/coley/recaf/search/QueryType.java
Patch:
@@ -21,7 +21,7 @@ public enum QueryType {
 	/**
 	 * Match an instruction if it references a given definition.
 	 */
-	USAGE,
+	REFERENCE,
 	/**
 	 * Match an instruction / field-constant if it's string value matches a given pattern.
 	 */

File: src/main/java/me/coley/recaf/ui/controls/tree/ResourceTree.java
Patch:
@@ -168,7 +168,7 @@ private void openItem(TreeItem item) {
 	 * @param item
 	 * 		Item to recursively open.
 	 */
-	private static void recurseOpen(TreeItem item) {
+	public static void recurseOpen(TreeItem item) {
 		item.setExpanded(true);
 		if(item.getChildren().size() == 1)
 			recurseOpen((TreeItem) item.getChildren().get(0));

File: src/main/java/me/coley/recaf/ui/controls/tree/SearchRootItem.java
Patch:
@@ -67,6 +67,9 @@ private void addResult(SearchResult result) {
 					String text = ((ValueResult) result).getValue().toString();
 					item.addChild(text, new MiscItem(resource(), text), true);
 				}
+			} else if(result instanceof InsnResult) {
+				String text = String.join("\n", ((InsnResult) result).getLines());
+				item.addChild(text, new MiscItem(resource(), text), true);
 			}
 		}
 		else if(ctx instanceof Context.InsnContext)

File: src/main/java/me/coley/recaf/ui/controls/HexEditor.java
Patch:
@@ -66,11 +66,13 @@ public HexEditor(byte[] array) {
 		offsetColumn.setCellFactory(col -> {
 			TableCell<Integer, String> cell = columnCellFactory.call(col);
 			cell.getStyleClass().add("hex-offset-cell");
+			cell.getStyleClass().add("hex-cell");
 			return cell;
 		});
 		textColumn.setCellFactory(col -> {
 			TableCell<Integer, String> cell = columnCellFactory.call(col);
 			cell.getStyleClass().add("hex-text-cell");
+			cell.getStyleClass().add("hex-cell");
 			return cell;
 		});
 		for(int columnIndex = 0; columnIndex < COLS_PER_LINE; columnIndex++) {

File: src/main/java/me/coley/recaf/control/Controller.java
Patch:
@@ -49,8 +49,6 @@ public final Workspace getWorkspace() {
 	public void run() {
 		try {
 			loadInitialWorkspace();
-			if (getWorkspace() != null)
-				info("Loaded workspace from: {}", initialWorkspace);
 		} catch(Exception ex) {
 			error(ex, "Error loading workspace from file: " + initialWorkspace);
 		}

File: src/main/java/me/coley/recaf/search/SearchCollector.java
Patch:
@@ -25,7 +25,7 @@
  * TODO with Search API:
  *  - Method inheritance (child of given)
  *  - Strings in odd places (dynamic instruction arguments)
- *  - Not internal to the API, but supply a way to handle "\uXXXX" (unicode search)
+ *  - Not internal to the API, but supply a way to handle "\\uXXXX" (unicode search)
  *  - Smart optimization, skip certain visitor-api calls if we know our queries won't need to look there
  */
 public class SearchCollector {

File: src/main/java/me/coley/recaf/workspace/DebuggerResource.java
Patch:
@@ -3,7 +3,7 @@
 import me.coley.recaf.debug.VMWrap;
 
 /**
- * Importable debuger resource.
+ * Importable debugger resource.
  *
  * @author Matt
  */

File: src/test/java/me/coley/recaf/ResourceInputTest.java
Patch:
@@ -96,7 +96,7 @@ public void testJdi() {
 			// allow direct class lookups like instrumentation does.
 			File file = getClasspathFile("calc.jar");
 			JavaResource backing = new JarResource(file);
-			DebuggerResource resource = VMWrap.launching("Start", "-cp \"" + file.getAbsolutePath() + "\"").toResource(backing);
+			DebuggerResource resource = VMWrap.launching("Start", "-cp \"" + file.getAbsolutePath() + "\"", true).toResource(backing);
 			//
 			assertEquals(CLASSES_IN_CALC_JAR, backing.getClasses().size());
 			assertEquals(backing.getClasses().size(), resource.getClasses().size());

File: src/main/java/me/coley/recaf/command/impl/Initializer.java
Patch:
@@ -1,8 +1,8 @@
 package me.coley.recaf.command.impl;
 
 import me.coley.recaf.Recaf;
-import me.coley.recaf.control.*;
-import me.coley.recaf.control.gui.Controller;
+import me.coley.recaf.control.Controller;
+import me.coley.recaf.control.gui.GuiController;
 import me.coley.recaf.control.headless.HeadlessController;
 import picocli.CommandLine;
 

File: src/main/java/me/coley/recaf/control/Controller.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.control.gui;
+package me.coley.recaf.control;
 
 import me.coley.recaf.Recaf;
 import me.coley.recaf.command.impl.*;

File: src/main/java/me/coley/recaf/control/gui/GuiController.java
Patch:
@@ -1,6 +1,6 @@
-package me.coley.recaf.control;
+package me.coley.recaf.control.gui;
 
-import me.coley.recaf.control.gui.Controller;
+import me.coley.recaf.control.Controller;
 
 import java.io.File;
 

File: src/main/java/me/coley/recaf/control/headless/HeadlessController.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.coley.recaf.command.MetaCommand;
 import me.coley.recaf.command.impl.*;
-import me.coley.recaf.control.gui.Controller;
+import me.coley.recaf.control.Controller;
 import me.coley.recaf.parse.assembly.parsers.NumericParser;
 import me.coley.recaf.search.SearchCollector;
 import me.coley.recaf.search.SearchResult;

File: src/main/java/me/coley/recaf/workspace/DeferringResource.java
Patch:
@@ -28,7 +28,8 @@ public DeferringResource(ResourceKind kind) {
 	}
 
 	/**
-	 * @param backing Resource to defer to.
+	 * @param backing
+	 * 		Resource to defer to.
 	 */
 	public void setBacking(JavaResource backing) {
 		this.backing = backing;

File: src/main/java/me/coley/recaf/parse/assembly/parsers/NameParser.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class NameParser extends Parser {
 	private static final String FIELD_NAME_PATTERN = "[\\w\\$]+(?=\\s|$)";
-	private static final String METHOD_NAME_PATTERN = "[\\w\\$]+(?=\\(|$)";
+	private static final String METHOD_NAME_PATTERN = "[<>\\w\\$]+(?=\\(|$)";
 	private final VarType type;
 
 	/**

File: src/main/java/me/coley/recaf/parse/assembly/visitors/LdcVisitor.java
Patch:
@@ -20,8 +20,8 @@ public class LdcVisitor extends InstructionVisitor {
 	public LdcVisitor(AssemblyVisitor asm) {
 		super(asm);
 		addSection(new MultiParser("value",
-				new NumericParser("value"),
 				new StringParser(),
+				new NumericParser("value"),
 				new DescriptorParser("value", DescriptorParser.DescType.FIELD)));
 	}
 

File: src/main/java/me/coley/recaf/command/completion/WorkspaceNameCompletions.java
Patch:
@@ -10,7 +10,7 @@
  *
  * @author Matt
  */
-public abstract class WorkspaceNameCompletions implements Iterable<String> {
+public class WorkspaceNameCompletions implements Iterable<String> {
 	@Override
 	public Iterator<String> iterator() {
 		Workspace workspace = Recaf.getCurrentWorkspace();

File: src/main/java/me/coley/recaf/command/HeadlessController.java
Patch:
@@ -93,6 +93,7 @@ public void run() {
 	 * 		Line of input.
 	 */
 	private void handle(String in) {
+		Logger.debug("$ " + in);
 		// Fetch command class
 		int argsOffset = 1;
 		// Split by

File: src/main/java/me/coley/recaf/command/impl/Search.java
Patch:
@@ -215,6 +215,7 @@ public static class Disass extends WorkspaceCommand implements Callable<SearchCo
 		public SearchCollector call() throws Exception {
 			// Skip debug is used here so that variable names don't interfere with searching.
 			// Using pure indices instead like "ALOAD 4" instead of "ALOAD varName"
+			// ... Although it will still always o "ALOAD this" where possible
 			return SearchBuilder.in(workspace)
 					.skipDebug()
 					.query(new InsnTextQuery(Arrays.asList(text.split(":")), mode))

File: src/main/java/me/coley/recaf/search/SearchMethodVisitor.java
Patch:
@@ -29,6 +29,9 @@ public class SearchMethodVisitor extends MethodNode {
 	 */
 	public SearchMethodVisitor(SearchCollector collector, Context.MemberContext context) {
 		super(Opcodes.ASM7);
+		this.access = context.getAccess();
+		this.name = context.getName();
+		this.desc = context.getDesc();
 		this.collector = collector;
 		this.context = context;
 	}

File: src/main/java/me/coley/recaf/command/HeadlessController.java
Patch:
@@ -129,8 +129,9 @@ private void handle(String in) {
 				((MetaCommand) command).setContext(cmd);
 			// Give help command access to all other commands
 			if (command instanceof Help)
-				for (Class<?> subCommKey : lookup.values())
-					cmd.addSubcommand(new CommandLine(get(subCommKey)));
+				for (Map.Entry<String, Class<?>> subCommEntry : lookup.entrySet())
+					if (!subCommEntry.getKey().contains(" "))
+						cmd.addSubcommand(new CommandLine(get(subCommEntry.getValue())));
 			// Invoke the command
 			cmd.setExecutionResult(command.call());
 			// Handle result

File: src/main/java/me/coley/recaf/command/Controller.java
Patch:
@@ -79,6 +79,7 @@ public <R, T extends Callable<R>> T get(Class<?> key) {
 	protected void setup() {
 		register(LoadWorkspace.class);
 		register(Quit.class);
+		register(WorkspaceInfo.class);
 	}
 
 	/**

File: src/main/java/me/coley/recaf/workspace/JarResource.java
Patch:
@@ -58,6 +58,8 @@ protected Map<String, byte[]> loadResources() throws IOException {
 			Enumeration<? extends ZipEntry> entries = zipFile.entries();
 			while(entries.hasMoreElements()) {
 				ZipEntry entry = entries.nextElement();
+				if(isValidClass(entry))
+					continue;
 				if(!isValidResource(entry))
 					continue;
 				String name = entry.getName();

File: src/main/java/me/coley/recaf/workspace/JarResource.java
Patch:
@@ -43,7 +43,7 @@ protected Map<String, byte[]> loadClasses() throws IOException {
 					String name = new ClassReader(in).getClassName();
 					classes.put(name, in);
 				} catch(ArrayIndexOutOfBoundsException | IllegalArgumentException ex) {
-					Logger.error("Invalid class in \"{}\" - \"{}\"", getFile().getName(), entry.getName());
+					Logger.warn("Invalid class in \"{}\" - \"{}\"", getFile().getName(), entry.getName());
 				}
 			}
 		}

File: src/main/java/me/coley/recaf/parse/assembly/visitors/AssemblyVisitor.java
Patch:
@@ -19,7 +19,7 @@
  * @author Matt
  */
 public class AssemblyVisitor implements Visitor<String> {
-	private static final Map<Integer, Function<AssemblyVisitor, Visitor>> visitors =
+	private static final Map<Integer, Function<AssemblyVisitor, Visitor<String>>> visitors =
 			new HashMap<>();
 	private int line;
 	private MethodNode method;
@@ -194,7 +194,7 @@ public List<String> suggest(String lineStr) throws LineParseException {
 	 * 		When the line does not have any identifier that links to an existing visitor
 	 * 		implementation.
 	 */
-	private Visitor getVisitor(String text) throws LineParseException {
+	private Visitor<String> getVisitor(String text) throws LineParseException {
 		return getVisitor(line, text);
 	}
 
@@ -210,7 +210,7 @@ private Visitor getVisitor(String text) throws LineParseException {
 	 * 		When the line does not have any identifier that links to an existing visitor
 	 * 		implementation.
 	 */
-	public Visitor getVisitor(int line, String text) throws LineParseException {
+	public Visitor<String> getVisitor(int line, String text) throws LineParseException {
 		String word = RegexUtil.getFirstWord(text);
 		if(word != null) {
 			String token = word.toUpperCase();

File: src/main/java/me/coley/recaf/parse/assembly/visitors/VarVisitor.java
Patch:
@@ -34,7 +34,7 @@ public void visit(String text) throws LineParseException {
 		List<Object> args = parse(text);
 		int opcode = (int) args.get(0);
 		String name = (String) args.get(1);
-		if (!asm.getVariables().names().contains(name))
+		if (!name.matches("\\d+") && !asm.getVariables().names().contains(name))
 			throw new LineParseException(text, "No variable by the given name: " + name);
 		int index = asm.getVariables().getIndex(name);
 		asm.appendInsn(new VarInsnNode(opcode, index));

File: src/main/java/me/coley/recaf/parse/assembly/parsers/MultiParser.java
Patch:
@@ -17,6 +17,8 @@ public class MultiParser extends Parser {
 	/**
 	 * @param id
 	 * 		Parser identifier.
+	 * @param subparsers
+	 * 		Parsers to defer to.
 	 */
 	public MultiParser(String id, Parser... subparsers) {
 		super(id);

File: src/main/java/me/coley/recaf/parse/assembly/visitors/LdcVisitor.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.List;
 
 /**
- * Integer type instruction parser.
+ * Constant type instruction parser.
  *
  * @author Matt
  */
@@ -36,6 +36,7 @@ public void visit(String text) throws LineParseException {
 			// - Strings wrapped in "
 			// - Otherwise should be a type
 			if (text.contains("\"")) {
+				// Escape common sequences
 				valueStr = valueStr.replace("\\r", "\r");
 				valueStr = valueStr.replace("\\n", "\n");
 				valueStr = valueStr.replace("\\t", "\t");

File: src/main/java/me/coley/recaf/parse/assembly/parsers/InternalNameParser.java
Patch:
@@ -16,7 +16,7 @@ public class InternalNameParser extends Parser {
 	private static final String NAME_PATTERN = "[\\$\\w+\\/]+";
 
 	/**
-	 * Construct an internal name.
+	 * Construct an internal name parser.
 	 *
 	 * @param id Parser identifier.
 	 */

File: src/main/java/me/coley/recaf/parse/assembly/visitors/AssemblyVisitor.java
Patch:
@@ -5,7 +5,6 @@
 import me.coley.recaf.parse.assembly.parsers.OpParser;
 import me.coley.recaf.util.*;
 import org.objectweb.asm.tree.*;
-import org.pmw.tinylog.Logger;
 
 import java.util.*;
 import java.util.function.Function;
@@ -23,6 +22,7 @@ public class AssemblyVisitor implements Visitor {
 			new HashMap<>();
 	private int line;
 	private InsnList insnList;
+	// Labels
 	// Locals
 	// Try-catch ranges
 	// Aliases
@@ -144,6 +144,8 @@ public Visitor getVisitor(int line, String text) throws LineParseException {
 
 	static {
 		visitors.put(INSN, InsnVisitor::new);
+		visitors.put(INT_INSN, IntVisitor::new);
+		visitors.put(TYPE_INSN, TypeVisitor::new);
 		visitors.put(FIELD_INSN, FieldVisitor::new);
 		visitors.put(METHOD_INSN, MethodVisitor::new);
 	}

File: src/main/java/me/coley/recaf/parse/source/SourceCode.java
Patch:
@@ -136,7 +136,7 @@ public String getPackage() {
 		if (packageName != null)
 			return packageName;
 		// fetch package
-		return unit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(DEFAULT_PACKAGE);
+		return packageName = unit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(DEFAULT_PACKAGE);
 	}
 
 	/**

File: src/main/java/me/coley/recaf/decompile/fernflower/FernFlowerAccessor.java
Patch:
@@ -90,15 +90,14 @@ public String getClassEntryName(StructClass cl, String entryName) {
 
 	@Override
 	public String getClassContent(StructClass cl) {
+		TextBuffer buffer = new TextBuffer(ClassesProcessor.AVERAGE_CLASS_SIZE);
 		try {
-			TextBuffer buffer = new TextBuffer(ClassesProcessor.AVERAGE_CLASS_SIZE);
 			buffer.append(DecompilerContext.getProperty(IFernflowerPreferences.BANNER).toString());
 			classProcessor.writeClass(cl, buffer);
-			return buffer.toString();
 		} catch(Throwable t) {
 			DecompilerContext.getLogger().writeMessage("Class " + cl.qualifiedName +
 					" couldn't be fully decompiled.", t);
-			return null;
 		}
+		return buffer.toString();
 	}
 }
\ No newline at end of file

File: src/main/java/me/coley/recaf/workspace/SourceCode.java
Patch:
@@ -73,7 +73,7 @@ public List<String> getImports() {
 							if (!name.contains("/"))
 								return false;
 							String tmpPackageName = name.substring(0, name.lastIndexOf("/"));
-							return tmpPackageName.startsWith(packageName);
+							return tmpPackageName.equals(packageName);
 						});
 			}
 			// Single class import

File: src/main/java/me/coley/recaf/workspace/MavenResource.java
Patch:
@@ -71,6 +71,7 @@ public String getVersion() {
 	private void findArtifact() throws IllegalArgumentException {
 		// TODO: Also check local maven directory
 		// TODO: Not here, but allow auto-resolving ALL dependencies not just the specified one
+		// TODO: Also attach sources/javadoc if possible
 		MavenUtil.verifyArtifactOnCentral(groupId, artifactId, version);
 		try {
 			URL url = MavenUtil.getArtifactUrl(groupId, artifactId, version);

File: src/main/java/me/coley/recaf/decompile/Decompiler.java
Patch:
@@ -2,16 +2,16 @@
 
 import me.coley.recaf.workspace.Workspace;
 
-import java.util.Map;
+import java.util.*;
 
 /**
  * Decompiler base.
  *
  * @author Matt.
  */
 public abstract class Decompiler<OptionType> {
-	private final Map<String, OptionType> defaultOptions = generateDefaultOptions();
-	private Map<String, OptionType> options = defaultOptions;
+	private final Map<String, OptionType> defaultOptions = Collections.unmodifiableMap(generateDefaultOptions());
+	private Map<String, OptionType> options = new HashMap<>(defaultOptions);
 
 	/**
 	 * @return Map of the current options.

File: src/main/java/me/coley/recaf/graph/Search.java
Patch:
@@ -25,5 +25,5 @@ public interface Search<T> {
 	 * @return Result summarizing how the vertices are related. If there is no relation returns
 	 * {@code null}.
 	 */
-	SearchResult find(Vertex<T> vertex, Vertex<T> target);
+	SearchResult<T> find(Vertex<T> vertex, Vertex<T> target);
 }

File: src/test/java/me/coley/recaf/GraphTest.java
Patch:
@@ -77,7 +77,7 @@ public void testUndirectedPathSearch() {
 		IVert v4 = undirectedGraph.getVertex(4);
 		// Use DFS to find the path between v1 and v4
 		Search<Integer> search = new DepthFirstSearch<>();
-		SearchResult result = search.find(v1, v4);
+		SearchResult<Integer> result = search.find(v1, v4);
 		assertNotNull(result);
 		// Path must follow one of the given paths
 		String[] paths = new String[]{"2 1 3 4", "2 5 3 4"};
@@ -94,15 +94,15 @@ public void testDirectedPathSearch() {
 			IVert vOther = directedGraph.getVertex(i);
 			// Use DFS to find the path between v1 and vOther
 			Search<Integer> search = new DepthFirstSearch<>();
-			SearchResult result = search.find(v1, vOther);
+			SearchResult<Integer> result = search.find(v1, vOther);
 			assertNotNull(result);
 		}
 		IVert v5 = directedGraph.getVertex(5);
 		for(int i = 1; i < 4; i++) {
 			IVert vOther = directedGraph.getVertex(i);
 			// Use DFS to ensure no path exists between v5 and vOther
 			Search<Integer> search = new DepthFirstSearch<>();
-			SearchResult result = search.find(v5, vOther);
+			SearchResult<Integer> result = search.find(v5, vOther);
 			assertNull(result);
 		}
 	}

File: src/main/java/me/coley/recaf/graph/impl/ClassVertex.java
Patch:
@@ -63,8 +63,8 @@ public Set<Edge<ClassReader>> getEdges() {
 		Stream<String> parents = graph.getParents(getData().getClassName());
 		Stream<String> children = graph.getDescendants(getData().getClassName());
 		// Get values of parents/children
-		Stream<ClassReader> parentValues = getNodesFromNames(parents);
-		Stream<ClassReader> childrenValues = getNodesFromNames(children);
+		Stream<ClassReader> parentValues = getReadersFromNames(parents);
+		Stream<ClassReader> childrenValues = getReadersFromNames(children);
 		// Get edges of parents/children
 		Stream<Edge<ClassReader>> parentEdges = parentValues.map(node -> {
 			ClassVertex other = graph.getRoot(node.getClassName());
@@ -90,7 +90,7 @@ public Set<Edge<ClassReader>> getEdges() {
 	 * @return Mapped stream where names are replaced with instances.
 	 * If a name has no instance mapping, it is discarded.
 	 */
-	private Stream<ClassReader> getNodesFromNames(Stream<String> names) {
+	private Stream<ClassReader> getReadersFromNames(Stream<String> names) {
 		return names.map(name -> {
 			// Try loading from workspace
 			ClassReader reader = graph.getWorkspace().getClassReader(name);

File: src/main/java/me/coley/recaf/Recaf.java
Patch:
@@ -2,14 +2,13 @@
 
 import me.coley.event.Bus;
 import me.coley.recaf.ui.FxWindow;
-import me.coley.recaf.util.Dependencies;
-import me.coley.recaf.util.LaunchParams;
+import me.coley.recaf.util.*;
 
 public class Recaf {
 	/**
 	 * Recaf version.
 	 */
-	public static final String VERSION = "1.15.6";
+	public static final String VERSION = "1.15.7";
 	/**
 	 * Initial launch arguments.
 	 */

File: src/main/java/me/coley/recaf/util/JavaFX.java
Patch:
@@ -13,6 +13,7 @@
 import javafx.scene.input.KeyEvent;
 import javafx.stage.Stage;
 import me.coley.recaf.config.impl.ConfDisplay;
+import me.coley.recaf.config.impl.ConfKeybinds;
 
 /**
  * JavaFX utilities.
@@ -87,6 +88,7 @@ public static Stage stage(Scene scene, String title, boolean top) {
 					stage.close();
 				}
 			});
+			ConfKeybinds.instance().registerStage(stage);
 		}
 		return stage;
 	}

File: src/main/java/me/coley/recaf/util/LaunchParams.java
Patch:
@@ -13,7 +13,7 @@ public class LaunchParams implements Runnable {
 	public File initialFile;
 	@Option(names = { "-c", "--class" }, description = "Initial class to open.")
 	public String initialClass;
-	@Option(names = { "-s", "--skip" }, description = "Classes in the input to ignore.", arity = "1..*")
+	@Option(names = { "-s", "--skip" }, description = "Classes in the input to ignore.", arity = "0..*")
 	public List<String> skipped = new ArrayList<>();
 
 	@Override

File: src/main/java/me/coley/recaf/bytecode/analysis/Verify.java
Patch:
@@ -137,7 +137,7 @@ public VerifyResults(Exception ex, String content) {
 		}
 
 		public VerifyResults(Exception ex) {
-			this(ex, ex.toString());
+			this(ex, ex == null ? "" : ex.toString());
 		}
 
 		public void showWindow() {

File: src/test/java/me/coley/recaf/HierarchyTest.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.net.URLDecoder;
 import java.util.*;
 import java.util.stream.Collectors;
 
@@ -23,7 +24,7 @@ public class HierarchyTest {
 	@BeforeEach
 	public void setup() throws IOException {
 		ClassLoader classLoader = HierarchyTest.class.getClassLoader();
-		File file = new File(classLoader.getResource("inherit.jar").getFile());
+		File file = new File(URLDecoder.decode(classLoader.getResource("inherit.jar").getFile(), "UTF-8"));
 		Input input = new Input(file);
 		graph = input.getHierarchy();
 	}

File: src/test/java/me/coley/recaf/InputTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.net.URLDecoder;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.junit.jupiter.api.Assertions.*;
@@ -25,7 +26,7 @@ public class InputTest {
 	@BeforeEach
 	public void setup() throws IOException {
 		ClassLoader classLoader = InputTest.class.getClassLoader();
-		File file = new File(classLoader.getResource("inherit.jar").getFile());
+		File file = new File(URLDecoder.decode(classLoader.getResource("inherit.jar").getFile(), "UTF-8"));
 		input = new Input(file);
 	}
 

File: src/main/java/me/coley/recaf/parse/assembly/impl/Ldc.java
Patch:
@@ -26,7 +26,7 @@ public class Ldc extends AbstractAssembler<LdcInsnNode> {
 			new UniMatcher<>("^-?\\d+\\.\\d*[dD]*$|^-?\\d+[dD]$", (s -> Double.parseDouble(s))),
 			new UniMatcher<>("^[-\\d]+(?=[lLjJ]$)", (s ->  Long.parseLong(s))),
 			new UniMatcher<>("^L.+;$", (s -> Type.getType(s))),
-			new UniMatcher<>("(?!^\").+(?=\"$)", (s -> StringEscapeUtils.unescapeJava(s)))};
+			new UniMatcher<>("(?!^\").*(?=\"$)", (s -> StringEscapeUtils.unescapeJava(s)))};
 
 	public Ldc(int opcode) {super(opcode);}
 

File: src/main/java/me/coley/recaf/parse/assembly/impl/LookupSwitch.java
Patch:
@@ -27,7 +27,7 @@ public class LookupSwitch extends AbstractAssembler<LookupSwitchInsnNode> {
 	 * Matcher for the switch.
 	 */
 	private final static GroupMatcher matcher =
-			new GroupMatcher("^(mapping|map)?\\[({MAPPING}(\\d=\\w[,\\s]*)+)+\\]\\s(default|dflt)" +
+			new GroupMatcher("^(mapping|map)?\\[({MAPPING}(\\d+=\\w+[,\\s]*)+)+\\]\\s(default|dflt)" +
 					"?\\[({DEFAULT}.+)\\]",
 					new HashMap<String, Function<String, Object>>() {{
 						put("MAPPING", (s -> s));

File: src/test/java/me/coley/recaf/AssemblerTest.java
Patch:
@@ -100,9 +100,6 @@ public void draw(int x, int y, double blur, Color color) {
 		assertEquals("Lexample/Color;", lColor.desc);
 		// "pixel" should be 6 because it is the next open space after 5
 		// Method-locals should start indexing just after the highest parameter value.
-		asm.getMethod().localVariables.forEach(lv -> {
-			System.out.println(lv.index + ":" + lv.name + ":" + lv.desc);
-		});
 		LocalVariableNode lPixel = InsnUtil.getLocal(asm.getMethod(), 6);
 		assertNotNull(lPixel);
 		assertEquals("pixel", lPixel.name);
@@ -123,8 +120,10 @@ public void testDebugLabelsReplaced() {
 		};
 		assertTrue(asm.parseInstructions(lines));
 		JumpInsnNode jin = (JumpInsnNode) asm.getMethod().instructions.get(1);
+		LabelNode lbl = (LabelNode) asm.getMethod().instructions.get(3);
 		// Named labels should be replaced
 		assertFalse(jin.label instanceof NamedLabelNode);
+		assertFalse(lbl instanceof NamedLabelNode);
 	}
 
 	@Test

File: src/main/java/me/coley/recaf/util/Classpath.java
Patch:
@@ -93,7 +93,8 @@ public static Optional<Class<?>> getSystemClassIfExists(String className) {
 	 * Internal utility to check if bootstrap classes exist in a list of class names.
 	 */
 	private static boolean checkBootstrapClassExists(Collection<String> names) {
-		return names.contains(Object.class.getName());
+		String name = Object.class.getName();
+		return names.contains(name) || names.contains(name.replace('.', '/'));
 	}
 
 	/**

File: src/main/java/me/coley/recaf/ui/component/InsnCell.java
Patch:
@@ -225,7 +225,7 @@ private void showInsnInserter(AbstractInsnNode node) {
 	}
 
 	private void showInsnInserterAssembler(AbstractInsnNode node) {
-		FxAssembler fx = FxAssembler.insns(list.getMethod(), m -> {
+		FxAssembler fx = FxAssembler.insns(list.getClassNode(), list.getMethod(), m -> {
 			Threads.runFx(() -> {
 				Collection<AbstractInsnNode> created = Arrays.asList(m.instructions.toArray());
 				int index = list.getItems().indexOf(node);

File: src/main/java/me/coley/recaf/ui/component/MethodTable.java
Patch:
@@ -170,7 +170,7 @@ protected void updateItem(Type[] types, boolean empty) {
 			MethodNode sel = getSelectionModel().getSelectedItem();
 			if(!AccessFlag.isAbstract(sel.access)) {
 				try {
-					FxAssembler fx = FxAssembler.method(sel, m -> {
+					FxAssembler fx = FxAssembler.method(owner, sel, m -> {
 						methods.set(i, m);
 						getItems().set(i, m);
 						Bus.post(new ClassDirtyEvent(owner));

File: src/main/java/me/coley/recaf/bytecode/insn/NamedVarRefInsn.java
Patch:
@@ -140,12 +140,14 @@ static int clean(MethodNode method,InsnList insns, boolean updateLocals) {
 			insns.insert(start);
 			insns.add(end);
 		}
+		Set<Integer> used = new HashSet<>();
 		for(NamedVarRefInsn nvri : replaceSet) {
 			AbstractInsnNode index = (AbstractInsnNode) nvri;
 			Var v = varMap.get(nvri.getVarName());
 			insns.set(index, nvri.clone(v));
-			if(updateLocals) {
+			if(updateLocals && !used.contains(v.index)) {
 				updateLocal(method, v, start, end);
+				used.add(v.index);
 			}
 		}
 		return nextIndex;

File: src/main/java/me/coley/recaf/parse/source/RegionMapper.java
Patch:
@@ -119,7 +119,7 @@ private void populateLookups() {
 			String pack = optPack.get().getNameAsString().replace('.', '/');
 			input.getClasses().values().forEach(dec -> {
 				String name = dec.name;
-				int pIndex = name.lastIndexOf('.');
+				int pIndex = name.lastIndexOf('/');
 				// The iterated class is in the default package.
 				// The analyzed class is not.
 				// Skip this iterated class.

File: src/main/java/me/coley/recaf/parse/assembly/impl/Type.java
Patch:
@@ -36,7 +36,7 @@ public String generate(MethodNode method, TypeInsnNode insn) {
 	@Override
 	public RegexToken createToken() {
 		return RegexToken
-				.create("TYPE", new UniMatcher<>("^[$\\w\\/]+$", (s -> s)),
+				.create("TYPE", new UniMatcher<>("^[\\[;$\\w\\/]+$", (s -> s)),
 						((tok, part) -> AutoComplete.internalName(part)));
 	}
 

File: src/test/java/me/coley/recaf/AutoCompleteTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.EnabledIf;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.CsvSource;
 import org.junit.jupiter.params.provider.ValueSource;
@@ -23,6 +24,7 @@
  *
  * @author Andy Li
  */
+@EnabledIf("Java.type('me.coley.recaf.util.Classpath').isBootstrapClassesFound()")
 public class AutoCompleteTest {
 	@BeforeAll
 	public static void initClasspath() {

File: src/main/java/me/coley/recaf/util/Updater.java
Patch:
@@ -125,7 +125,7 @@ private static void generatePatched(File patched) throws IOException, URISyntaxE
 			err("Failed auto-patch", "Could not update self, as was not running as a jar-file.");
 			return;
 		}
-		String selfURL = self.getFile().toURI().toURL().toString();
+		String selfURL = self.getFile().toURI().toURL().toString().replace("%", "%%");
 		String[] dependencies = new String[] {
 				selfURL,
 				"http://central.maven.org/maven2/org/controlsfx/controlsfx/11.0.0/controlsfx-11.0.0.jar",

File: src/test/java/me/coley/recaf/FormatFactoryTest.java
Patch:
@@ -100,7 +100,7 @@ public void testLookupSwitch() {
 	@Test
 	public void testLdcInsns() {
 		individual(new LdcInsnNode("String"), "LDC \"String\"");
-		individual(new LdcInsnNode("String\nSplit"), "LDC \"String\nSplit\"");
+		individual(new LdcInsnNode("String\nSplit"), "LDC \"String\\nSplit\"");
 		individual(new LdcInsnNode(100L), "LDC 100");
 		individual(new LdcInsnNode(100D), "LDC 100.0");
 		individual(new LdcInsnNode(100F), "LDC 100.0");

File: src/main/java/me/coley/recaf/parse/assembly/impl/Ldc.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.parse.assembly.impl;
 
+import com.github.javaparser.utils.StringEscapeUtils;
 import me.coley.recaf.bytecode.OpcodeUtil;
 import me.coley.recaf.parse.assembly.AbstractAssembler;
 import me.coley.recaf.parse.assembly.util.UniMatcher;
@@ -25,7 +26,7 @@ public class Ldc extends AbstractAssembler<LdcInsnNode> {
 			new UniMatcher<>("^-?\\d+\\.\\d*[dD]*$|^-?\\d+[dD]$", (s -> Double.parseDouble(s))),
 			new UniMatcher<>("^[-\\d]+(?=[lLjJ]$)", (s ->  Long.parseLong(s))),
 			new UniMatcher<>("^L.+;$", (s -> Type.getType(s))),
-			new UniMatcher<>("(?!^\").+(?=\"$)", (s -> s))};
+			new UniMatcher<>("(?!^\").+(?=\"$)", (s -> StringEscapeUtils.unescapeJava(s)))};
 
 	public Ldc(int opcode) {super(opcode);}
 
@@ -42,7 +43,7 @@ public String generate(MethodNode method, LdcInsnNode insn) {
 		Object value = insn.cst;
 		String s = value.toString();
 		if(value instanceof String) {
-			s = "\"" + s + "\"";
+			s = "\"" + StringEscapeUtils.escapeJava(s) + "\"";
 		} else if(value instanceof Float) {
 			s += "f";
 		} else if(value instanceof Double) {

File: src/main/java/me/coley/recaf/parse/assembly/impl/Ldc.java
Patch:
@@ -3,6 +3,7 @@
 import me.coley.recaf.bytecode.OpcodeUtil;
 import me.coley.recaf.parse.assembly.AbstractAssembler;
 import me.coley.recaf.parse.assembly.util.UniMatcher;
+import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.LdcInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 
@@ -23,6 +24,7 @@ public class Ldc extends AbstractAssembler<LdcInsnNode> {
 			new UniMatcher<>("^[-\\d]+$", (s ->  Integer.parseInt(s))),
 			new UniMatcher<>("^-?\\d+\\.\\d*[dD]*$|^-?\\d+[dD]$", (s -> Double.parseDouble(s))),
 			new UniMatcher<>("^[-\\d]+(?=[lLjJ]$)", (s ->  Long.parseLong(s))),
+			new UniMatcher<>("^L.+;$", (s -> Type.getType(s))),
 			new UniMatcher<>("(?!^\").+(?=\"$)", (s -> s))};
 
 	public Ldc(int opcode) {super(opcode);}

File: src/main/java/me/coley/recaf/ui/FxAssembler.java
Patch:
@@ -182,7 +182,7 @@ protected void setupCodePane() {
 			// Hide popup and then update auto-completion.
 			// This may re-show it if there are suggestions.
 			popAuto.hide();
-			Threads.run(() -> updateAutoComplete());
+			Threads.runFx(() -> updateAutoComplete());
 		});
 		code.setOnKeyTyped(e -> {
 			// Ensure directional / input keys are sent to the popup.

File: src/main/java/me/coley/recaf/bytecode/analysis/ClassVertex.java
Patch:
@@ -42,8 +42,7 @@ public boolean equals(Object other) {
 			return true;
 		if(other instanceof ClassVertex) {
 			ClassVertex otherVertex = (ClassVertex) other;
-			// TODO: Will ClassNode#equals work in all cases?
-			if(getData().equals(otherVertex.getData()))
+			if(getData().name.equals(otherVertex.getData().name))
 				return true;
 		}
 		return false;

File: src/main/java/me/coley/recaf/parse/assembly/impl/MultiANewArray.java
Patch:
@@ -40,7 +40,7 @@ public RegexToken createToken() {
 		return RegexToken
 				.create("TYPE", new UniMatcher<>("[$\\w\\/]+", (s -> s)),
 						((tok, part) -> AutoComplete.internalName(part)))
-				.append("DIMENSION", new UniMatcher<>("(?!= )[\\d]+", (s->s)),
+				.append("DIMENSION", new UniMatcher<>("(?!= )[\\d]+", (s->Integer.parseInt(s))),
 						((tok, part) -> Collections.emptyList()))
 				.root();
 	}

File: src/main/java/me/coley/recaf/ui/FormatFactory.java
Patch:
@@ -238,7 +238,8 @@ public static InsnHBox insnNode(AbstractInsnNode ain, MethodNode method) {
 			String type = ain.getClass().getSimpleName();
 			String meth = method == null ? "<ISOLATED>" : method.name + method.desc;
 			int index = InsnUtil.index(ain, method);
-			Logging.error("Invalid opcode: " + type + "@" + meth + "@" + index, true);
+			Logging.error("Invalid instruction: " + type + "@" + meth + "@" + index, true);
+			Logging.error(e, false);
 		}
 		return t;
 	}
@@ -503,7 +504,7 @@ private static void addInsn(InsnHBox text, AbstractInsnNode ain, MethodNode meth
 			addNote(text, " mapping[" + lbls + "]");
 			if (lsin.dflt != null) {
 				String offset = InsnUtil.labelName(lsin.dflt);
-				addNote(text,  " default[" + offset + "]");
+				addNote(text,  " default:" + offset);
 			}
 			break;
 		}

File: src/me/coley/recaf/bytecode/insn/NamedVarRefInsn.java
Patch:
@@ -162,7 +162,6 @@ static void updateLocal(MethodNode method, Var v, LabelNode start, LabelNode end
 		String name = v.key;
 		String desc = null;
 		switch(v.ain.getOpcode()) {
-			default:
 			case IINC:
 			case ILOAD:
 			case ISTORE:
@@ -182,6 +181,7 @@ static void updateLocal(MethodNode method, Var v, LabelNode start, LabelNode end
 				break;
 			case ALOAD:
 			case ASTORE:
+			default:
 				desc = "Ljava/lang/Object;";
 				break;
 		}

File: src/me/coley/recaf/parse/assembly/impl/MultiANewArray.java
Patch:
@@ -41,7 +41,7 @@ public String generate(MethodNode method, MultiANewArrayInsnNode insn) {
 	@Override
 	public RegexToken createToken() {
 		return RegexToken
-				.create("TYPE", new UniMatcher<>("[\\w\\/]+", (s -> s)),
+				.create("TYPE", new UniMatcher<>("[$\\w\\/]+", (s -> s)),
 						((tok, part) -> AutoComplete.internalName(part)))
 				.append("DIMENSION", new UniMatcher<>("(?!= )[\\d]+", (s->s)),
 						((tok, part) -> Collections.emptyList()))

File: src/me/coley/recaf/parse/assembly/impl/Field.java
Patch:
@@ -45,7 +45,7 @@ public RegexToken createToken() {
 						((tok, part) -> AutoComplete.internalName(part)))
 				.append("NAME", new UniMatcher<>("(?!=\\.)([$\\w]+)(?= )", (s->s)),
 						((tok, part) -> AutoComplete.field(tok, part)))
-				.append("DESC", new UniMatcher<>("(\\[*I$|\\[*J$|\\[*F$|\\[*D$|\\[*B$|\\[*C$|\\[*S$|V$|\\[*L[\\/$\\w]+;$)", (s->s)),
+				.append("DESC", new UniMatcher<>("(\\[*I$|\\[*J$|\\[*F$|\\[*D$|\\[*B$|\\[*C$|\\[*S$|\\[*Z$|V$|\\[*L[\\/$\\w]+;$)", (s->s)),
 						((tok, part) -> AutoComplete.descriptorName(part)))
 				.root();
 	}

File: src/me/coley/recaf/parse/assembly/impl/Field.java
Patch:
@@ -45,7 +45,7 @@ public RegexToken createToken() {
 						((tok, part) -> AutoComplete.internalName(part)))
 				.append("NAME", new UniMatcher<>("(?!=\\.)([$\\w]+)(?= )", (s->s)),
 						((tok, part) -> AutoComplete.field(tok, part)))
-				.append("DESC", new UniMatcher<>("(I$|J$|F$|D$|B$|C$|S$|V$|L[\\/$\\w]+;$)", (s->s)),
+				.append("DESC", new UniMatcher<>("(\\[*I$|\\[*J$|\\[*F$|\\[*D$|\\[*B$|\\[*C$|\\[*S$|V$|\\[*L[\\/$\\w]+;$)", (s->s)),
 						((tok, part) -> AutoComplete.descriptorName(part)))
 				.root();
 	}

File: src/me/coley/recaf/parse/assembly/impl/Method.java
Patch:
@@ -46,7 +46,7 @@ public RegexToken createToken() {
 						((tok, part) -> AutoComplete.internalName(part)))
 				.append("NAME", new UniMatcher<>("(?!=\\.)([<>$\\w]+)(?=\\()", (s->s)),
 						((tok, part) -> AutoComplete.method(tok, part)))
-				.append("DESC", new UniMatcher<>("([();\\/$\\w]+)", (s->s)),
+				.append("DESC", new UniMatcher<>("([\\[();\\/$\\w]+)", (s->s)),
 						((tok, part) -> Collections.emptyList()))
 				.root();
 	}

File: src/me/coley/recaf/bytecode/insn/NamedVarRefInsn.java
Patch:
@@ -99,10 +99,11 @@ static int clean(MethodNode method,InsnList insns, boolean updateLocals) {
 				Matcher m = new Pattern("p({INDEX}\\d+)\\w*").matcher(key);
 				m.find();
 				int index = Integer.parseInt(m.group("INDEX"));
+				// remove "pN" of name
+				v.key = v.key.substring(1 + String.valueOf(index).length());
 				if(index > highest) {
 					highest = index;
 				}
-				Type[] params = type.getArgumentTypes();
 				if (index - 1 >= argSize) {
 					throw new AssemblyResolveError(v.ain,
 							String.format("Specified parameter does not exist, " +
@@ -192,7 +193,7 @@ static void updateLocal(MethodNode method, Var v, LabelNode start, LabelNode end
 	 * Wrapper for variable.
 	 */
 	class Var {
-		final String key;
+		String key;
 		final boolean isWide;
 		final AbstractInsnNode ain;
 		int index = -1;

File: src/me/coley/recaf/parse/assembly/util/GroupMatcher.java
Patch:
@@ -23,7 +23,7 @@ public GroupMatcher(String patternStr, Map<String, Function<String, Object>> par
 	}
 
 	public <T> T get(String group) {
-		String value = m.group(group);
+		String value = getMatcher().group(group);
 		return (T) parsers.get(group).apply(value);
 	}
 }

File: src/me/coley/recaf/parse/assembly/util/UniMatcher.java
Patch:
@@ -18,6 +18,6 @@ public UniMatcher(String patternStr, Function<String, T> parser) {
 	}
 
 	public T get() {
-		return parser.apply(m.group(0));
+		return parser.apply(getMatcher().group(0));
 	}
 }

File: src/me/coley/recaf/parse/assembly/Assembly.java
Patch:
@@ -18,7 +18,8 @@
 // - implied localvar nodes
 
 /**
- * Java bytecode assembly utility. Generated ASM MethodNodes from a given method declaration and code <i>(represented as text)</i>
+ * Java bytecode assembly utility. Generated ASM MethodNodes from a given method declaration and
+ * code <i>(represented as text)</i>.
  *
  * @author Matt
  */

File: src/me/coley/recaf/parse/assembly/impl/Method.java
Patch:
@@ -21,7 +21,7 @@ public class Method extends AbstractAssembler {
 	 * Matcher for the method.
 	 */
 	private final static GroupMatcher matcher =
-			new GroupMatcher("({OWNER}[$\\w\\/]+(?=\\.))\\.({NAME}[$\\w]+(?=\\())({DESC}[();\\/$\\w]+)",
+			new GroupMatcher("({OWNER}[$\\w\\/]+(?=\\.))\\.({NAME}[<>$\\w]+(?=\\())({DESC}[();\\/$\\w]+)",
 					new HashMap<String, Function<String, Object>>() {{
 						put("OWNER", (s -> s));
 						put("NAME", (s -> s));

File: src/me/coley/recaf/ui/FxCode.java
Patch:
@@ -52,6 +52,7 @@ protected FxCode(String initialText) {
 		// Default size, but it will be auto-scaled on the JavaFX thread
 		wrapper.setCenter(pane);
 		setScene(JavaFX.scene(wrapper, ScreenUtil.prefWidth(), ScreenUtil.prefHeight()));
+		wrapper.getStyleClass().add("fxcode");
 		//
 		setupTitle();
 		setupAutoSize();

File: src/me/coley/recaf/parse/assembly/impl/Field.java
Patch:
@@ -38,6 +38,6 @@ public AbstractInsnNode parse(String text) {
 			String desc = matcher.get("DESC");
 			return new FieldInsnNode(opcode, owner, name, desc);
 		}
-		return fail(text);
+		return fail(text, "Expected: <HOST>.<NAME> <DESC>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Iinc.java
Patch:
@@ -42,6 +42,6 @@ public AbstractInsnNode parse(String text) {
 			}
 			return new IincInsnNode(index, increment);
 		}
-		return null;
+		return fail(text, "Expected: <VARIABLE> <OPERATION> <VALUE>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Int.java
Patch:
@@ -26,6 +26,6 @@ public class Int extends Assembler {
 	public AbstractInsnNode parse(String text) {
 		if (matcher.run(text))
 			return new IntInsnNode(opcode, matcher.get());
-		return fail(text);
+		return fail(text, "Expected: <VALUE>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Jump.java
Patch:
@@ -27,6 +27,6 @@ public AbstractInsnNode parse(String text) {
 		if(matcher.run(text)) {
 			return new LabeledJumpInsnNode(opcode, matcher.get());
 		}
-		return fail(text);
+		return fail(text, "Expected: <LABEL_TITLE>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Label.java
Patch:
@@ -25,6 +25,6 @@ public AbstractInsnNode parse(String text) {
 		if(matcher.run(text)) {
 			return new NamedLabelNode(matcher.get());
 		}
-		return fail(text);
+		return fail(text, "Expected: <LABEL_TITLE>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Ldc.java
Patch:
@@ -32,6 +32,6 @@ public AbstractInsnNode parse(String text) {
 		for (UniMatcher matcher : matchers)
 			if (matcher.run(text))
 				return new LdcInsnNode(matcher.get());
-		return fail(text);
+		return fail(text, "Expected: <VALUE>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Line.java
Patch:
@@ -34,6 +34,6 @@ public AbstractInsnNode parse(String text) {
 			String lblName = matcher.get("LABEL");
 			return new LineNumberNodeExt(lineno, null, lblName);
 		}
-		return fail(text);
+		return fail(text, "Expected: <LINE_NO> <LABEL_TITLE>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/LookupSwitch.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * LookupSwitch assembler
  * <pre>
- *     [&lt;MAPPING&gt;...] dflt[&lt;OFFSET/LABEL&gt;]
+ *     mapping[&lt;MAPPING&gt;...] default[&lt;OFFSET/LABEL&gt;]
  * Examples:
  *     mapping[0=A, 1=B, 2=C] default[D]
  *     map[0=A, 1=B, 2=C] dflt[D]
@@ -53,6 +53,6 @@ public AbstractInsnNode parse(String text) {
 			}
 			return new LabeledLookupSwitchInsnNode(dflt, labels, keys);
 		}
-		return fail(text);
+		return fail(text, "Expected: mapping[<MAPPING>...] default[<OFFSET/LABEL>]");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Method.java
Patch:
@@ -38,6 +38,6 @@ public AbstractInsnNode parse(String text) {
 			String desc = matcher.get("DESC");
 			return new MethodInsnNode(opcode, owner, name, desc);
 		}
-		return fail(text);
+		return fail(text, "Expected: <HOST>.<NAME><DESC>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/MultiANewArray.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * MultiANewArray assembler
  * <pre>
- *     &lt;TYPE&gt;&lt;LEVEL&gt;
+ *     &lt;TYPE&gt; &lt;LEVEL&gt;
  * </pre>
  *
  * @author Matt
@@ -36,6 +36,6 @@ public AbstractInsnNode parse(String text) {
 			int dimensions = matcher.get("DIMENSION");
 			return new MultiANewArrayInsnNode(type, dimensions);
 		}
-		return fail(text);
+		return fail(text, "Expected: <TYPE> <LEVEL>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/TableSwitch.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * TableSwitch assembler
  * <pre>
- *     range[&lt;RANGE&gt;] offsets[&lt;OFFSET/LABEL&gt;...] dflt[&lt;OFFSET/LABEL&gt;]
+ *     range[&lt;RANGE&gt;] offsets[&lt;OFFSET/LABEL&gt;...] default[&lt;OFFSET/LABEL&gt;]
  * Examples:
  *     range[0-2] offsets[A, B, C] default[D]
  *     range[0-2] off[A, B, C] dflt[D]
@@ -53,6 +53,6 @@ public AbstractInsnNode parse(String text) {
 				fail(text, "Range difference size does not match number of given offsets");
 			return new LabeledTableSwitchInsnNode(min, max, dflt, offsetsSplit);
 		}
-		return fail(text);
+		return fail(text, "Expected: range[<RANGE>] offsets[<OFFSET/LABEL>...] default[<OFFSET/LABEL>]");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Type.java
Patch:
@@ -26,6 +26,6 @@ public class Type extends Assembler {
 	public AbstractInsnNode parse(String text) {
 		if(matcher.run(text))
 			return new TypeInsnNode(opcode, matcher.get());
-		return fail(text);
+		return fail(text, "Expected: <TYPE>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/parse/assembly/impl/Var.java
Patch:
@@ -19,14 +19,14 @@ public class Var extends Assembler {
 	 * Matcher for the variable posiiton.
 	 */
 	private final static UniMatcher<Integer> matcher =
-			new UniMatcher<>("\\d+", (s -> Integer.parseInt(s)));
+			new UniMatcher<>("^\\d+$", (s -> Integer.parseInt(s)));
 
 	public Var(int opcode) {super(opcode);}
 
 	@Override
 	public AbstractInsnNode parse(String text) {
 		if (matcher.run(text))
 			return new VarInsnNode(opcode, matcher.get());
-		return fail(text);
+		return fail(text, "Expected: <INDEX>");
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/bytecode/insn/LabeledJumpInsnNode.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.bytecode.insn;
 
+import me.coley.recaf.parse.assembly.LabelLinkageException;
 import org.objectweb.asm.tree.*;
 
 import java.util.Map;
@@ -42,7 +43,7 @@ public AbstractInsnNode clone(final Map<LabelNode, LabelNode> labels) {
 	public void setupLabel(Map<String, LabelNode> labels) {
 		LabelNode lbl = labels.get(labelId);
 		if (lbl == null)
-			throw new IllegalStateException("Label identifier has no mapped value: " + labelId);
+			throw new LabelLinkageException(this, "Label identifier has no mapped value: " + labelId);
 		label = lbl;
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/bytecode/insn/LabeledLookupSwitchInsnNode.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.bytecode.insn;
 
+import me.coley.recaf.parse.assembly.LabelLinkageException;
 import org.objectweb.asm.tree.*;
 
 import java.util.Map;
@@ -66,13 +67,13 @@ private LabelNode[] getUpdatedLabels(Map<LabelNode, LabelNode> labelMapping) {
 	public void setupLabels(Map<String, LabelNode> labels) {
 		dflt = labels.get(dfltLabelId);
 		if(dflt == null)
-			throw new IllegalStateException("Label identifier has no mapped value: " +
+			throw new LabelLinkageException(this, "Label identifier has no mapped value: " +
 					dfltLabelId);
 		this.labels.clear();
 		for(String id : labelsIdentifiers) {
 			LabelNode lbl = labels.get(id);
 			if(lbl == null)
-				throw new IllegalStateException("Label identifier has no mapped value: " + id);
+				throw new LabelLinkageException(this, "Label identifier has no mapped value: " + id);
 			this.labels.add(lbl);
 		}
 	}

File: src/me/coley/recaf/bytecode/insn/LabeledTableSwitchInsnNode.java
Patch:
@@ -1,5 +1,6 @@
 package me.coley.recaf.bytecode.insn;
 
+import me.coley.recaf.parse.assembly.LabelLinkageException;
 import org.objectweb.asm.tree.*;
 
 import java.util.Map;
@@ -65,12 +66,12 @@ private LabelNode[] getUpdatedLabels(Map<LabelNode, LabelNode> labelMapping) {
 	public void setupLabels(Map<String, LabelNode> labels) {
 		dflt = labels.get(dfltLabelId);
 		if(dflt == null)
-			throw new IllegalStateException("Label identifier has no mapped value: " + dfltLabelId);
+			throw new LabelLinkageException(this, "Label identifier has no mapped value: " + dfltLabelId);
 		this.labels.clear();
 		for(String id : labelIds) {
 			LabelNode lbl = labels.get(id);
 			if (lbl == null)
-				throw new IllegalStateException("Label identifier has no mapped value: " + id);
+				throw new LabelLinkageException(this, "Label identifier has no mapped value: " + id);
 			this.labels.add(lbl);
 		}
 	}

File: src/me/coley/recaf/bytecode/insn/LineNumberNodeExt.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.Map;
 
+import me.coley.recaf.parse.assembly.LabelLinkageException;
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.LabelNode;
 import org.objectweb.asm.tree.LineNumberNode;
@@ -43,7 +44,7 @@ public AbstractInsnNode clone(final Map<LabelNode, LabelNode> labels) {
 	public void setupLabel(Map<String, LabelNode> labels) {
 		LabelNode lbl = labels.get(labelId);
 		if (lbl == null)
-			throw new IllegalStateException("Label identifier has no mapped value: " + labelId);
+			throw new LabelLinkageException(this, "Label identifier has no mapped value: " + labelId);
 		start = lbl;
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/ui/component/editor/InsnListEditor.java
Patch:
@@ -564,7 +564,7 @@ private void pasteInstructions(){
 			if (!Clipboard.isRecentType(List.class)) return;
 			// Clone because ASM nodes are linked lists...
 			// - Can't have those shared refs across multiple methods
-			List<AbstractInsnNode> clone = ConfBlocks.createClone(Clipboard.getRecent());
+			List<AbstractInsnNode> clone = ConfBlocks.clone(method.instructions, Clipboard.getRecent());
 			if (clone == null) return;
 			// Insert into list
 			int index = getSelectionModel().getSelectedIndex();

File: src/me/coley/recaf/bytecode/Asm.java
Patch:
@@ -107,7 +107,7 @@ public static int index(AbstractInsnNode ain) {
 	 * 
 	 * @param list
 	 *            Complete list of opcodes.
-	 * @param insn
+	 * @param insns
 	 *            Sublist to be moved.
 	 */
 	public static void shiftUp(InsnList list, List<AbstractInsnNode> insns) {
@@ -129,7 +129,7 @@ public static void shiftUp(InsnList list, List<AbstractInsnNode> insns) {
 	 * 
 	 * @param list
 	 *            Complete list of opcodes.
-	 * @param insn
+	 * @param insns
 	 *            Sublist to be moved.
 	 */
 	public static void shiftDown(InsnList list, List<AbstractInsnNode> insns) {

File: src/me/coley/recaf/ui/FxCode.java
Patch:
@@ -54,7 +54,7 @@ protected void setupCodePane(String initialText) {
 		code.setEditable(false);
 		code.richChanges()
 				.filter(ch -> !ch.getInserted().equals(ch.getRemoved()))
-				.filter(ch -> ch.getPosition() != 0)
+				.filter(ch -> ch.getPosition() != 0 || ch.getNetLength() >= code.getLength() - 1)
 				.subscribe(change -> {
 			code.setStyleSpans(0, computeStyle(code.getText()));
 			onCodeChange(code.getText());
@@ -68,8 +68,6 @@ protected void setupCodePane(String initialText) {
 		code.selectRange(0, 0);
 		code.moveTo(0);
 		code.scrollToPixel(0, 0);
-		// Setup initial styles
-		code.setStyleSpans(0, computeStyle(code.getText()));
 	}
 
 	/**

File: src/me/coley/recaf/ui/FxCode.java
Patch:
@@ -68,6 +68,8 @@ protected void setupCodePane(String initialText) {
 		code.selectRange(0, 0);
 		code.moveTo(0);
 		code.scrollToPixel(0, 0);
+		// Setup initial styles
+		code.setStyleSpans(0, computeStyle(code.getText()));
 	}
 
 	/**

File: src/me/coley/recaf/parse/RegionMapper.java
Patch:
@@ -582,6 +582,9 @@ private static String primTypeToDesc(Type type) {
 		case "int":
 			desc = "I";
 			break;
+		case "char":
+			desc = "C";
+			break;
 		case "long":
 			desc = "J";
 			break;

File: src/me/coley/recaf/ui/component/BlockPane.java
Patch:
@@ -138,7 +138,7 @@ protected void updateItem(AbstractInsnNode node, boolean empty) {
 		private void load(String text, InsertMode mode, InsnListEditor editor, AbstractInsnNode location) {
 			Block block = ConfBlocks.instance().getClone(text);
 			if (block == null) {
-				Logging.error("Failed to load block by name '" + block + "'");
+				Logging.error("Failed to load block by name '" + text + "'");
 				return;
 			}
 			Threads.runFx(() -> {

File: src/me/coley/recaf/config/impl/ConfKeybinds.java
Patch:
@@ -44,7 +44,6 @@ public class ConfKeybinds extends Config {
 	 */
 	@Conf(category = "keybinds", key = "paste")
 	public String paste = "V";
-
 	/**
 	 * Open search for instruction window, or code-area.
 	 */

File: src/me/coley/recaf/bytecode/analysis/Hierarchy.java
Patch:
@@ -217,13 +217,14 @@ private void setupVertices(Map<String, ClassNode> nodes) {
 	private void setupEdges() {
 		for (CVert vert : classes.values()) {
 			// Get superclass vertex
-			CVert other = classes.get(vert.data.superName);
+			String superName = vert.data.superName;
+			CVert other = superName == null ? null : classes.get(superName);
 			if (other != null) {
 				vert.parents.add(other);
 				other.children.add(vert);
 			} else {
 				// Could not find superclass, note that for later.
-				vert.externalParents.add(vert.data.superName);
+				vert.externalParents.add(superName);
 			}
 			// Iterate interfaces, get interface vertex and do the same
 			for (String inter : vert.data.interfaces) {

File: src/me/coley/recaf/util/SelfReference.java
Patch:
@@ -58,8 +58,8 @@ public List<String> getStyles() {
 		// Map the stylesheets to distinct theme names.
 		// Each theme may have multiple files.
 		files = files.stream()
-				.filter(f -> f.startsWith("common-") && f.endsWith(".css"))
-				.map(f -> f.substring(f.indexOf("-") + 1, f.length() - 4))
+				.filter(f -> f.startsWith("common-"))
+				.map(f -> f.substring(f.indexOf("-") + 1))
 				.distinct()
 				.collect(Collectors.toList());
 		//@formatter:on

File: src/me/coley/recaf/bytecode/analysis/Hierarchy.java
Patch:
@@ -67,7 +67,7 @@ private Hierarchy() {
 		// If the option is not enabled, this feature is disabled until a
 		// restart occurs.
 		// Also, do not initalize this when loading as an agent.
-		if (ConfASM.instance().useLinkedMethodRenaming() && Agent.isActive()) {
+		if (ConfASM.instance().useLinkedMethodRenaming() && !Agent.isActive()) {
 			Bus.subscribe(this);
 		}
 	}

File: src/me/coley/recaf/bytecode/search/ResultTree.java
Patch:
@@ -48,9 +48,11 @@ public void updateItem(Result item, boolean empty) {
 					Node retTypeNode = typeBox.getChildren().remove(typeBox.getChildren().size() - 1);
 					box.getChildren().add(Icons.getMember(item.getMn().access, true));
 					box.getChildren().add(retTypeNode);
+					box.getChildren().add(FormatFactory.raw(" "));
 					box.getChildren().add(FormatFactory.name(item.getMn().name));
 					box.getChildren().add(typeBox);
 					setGraphic(box);
+					setText(null);
 				} else if (item.getType() == ResultType.OPCODE) {
 					setGraphic(FormatFactory.opcode(item.getAin(), item.getMn()));
 					setText(null);

File: src/me/coley/recaf/InitListener.java
Patch:
@@ -40,7 +40,7 @@ private void onInit(UiInitEvent event) {
 			File file = params.initialFile;
 			if (file != null && file.exists()) {
 				NewInputEvent.call(file);
-				Threads.runFx(() -> {
+				Threads.runLaterFx(10, () -> {
 					Input in = Input.get();
 					String clazz = params.initialClass;
 					if (clazz != null && in.classes.contains(clazz)) {

File: src/me/coley/recaf/ui/component/ReflectiveOpcodeSheet.java
Patch:
@@ -180,7 +180,8 @@ public Node getEditor() {
 					}
 				}
 				combo.valueProperty().addListener((obv, old, cur) -> {
-					item.setValue(OpcodeUtil.nameToOpcode(cur));
+					if (cur != null)
+						item.setValue(OpcodeUtil.nameToOpcode(cur));
 				});
 				return combo;
 			}

File: src/me/coley/recaf/ui/component/constructor/TypeAnnotationNodeConstructor.java
Patch:
@@ -26,6 +26,7 @@ public TypeAnnotationNodeConstructor() {
 		annoType.setTooltip(new Tooltip(Lang.get("ui.bean.class.annotations.type.tooltip")));
 		// annoDesc.setOnAction((e) -> add(annoDesc, annoType, comboRef, view));
 		// annoType.setOnAction((e) -> add(annoDesc, annoType, comboRef, view));
+		getChildren().addAll(comboRef, annoDesc, annoType);
 	}
 
 	@Override

File: src/me/coley/recaf/config/impl/ConfASM.java
Patch:
@@ -25,7 +25,7 @@ public class ConfASM extends Config {
 	 * ASM4 program and using ASM5 will have ASM throw an exception.
 	 */
 	@Conf(category = "asm", key = "version")
-	private ASMVersion version = ASMVersion.V6;
+	private ASMVersion version = ASMVersion.V7;
 	/**
 	 * Flag for ASM output, compute maximum stack/local sizes for methods.
 	 */

File: src/me/coley/recaf/ui/FormatFactory.java
Patch:
@@ -140,7 +140,7 @@ private static void annotation(TextHBox t, AnnotationNode item) {
 					addRaw(t, "=");
 				}
 				if (value instanceof String) {
-					addString(t, value.toString());
+					addString(t, "\"" + value.toString() + "\"");
 				} else if (value instanceof Type) {
 					Type type = (Type) value;
 					if (TypeUtil.isInternal(type)) {

File: src/me/coley/recaf/ui/component/ReflectiveOpcodeSheet.java
Patch:
@@ -42,6 +42,7 @@ public ReflectiveOpcodeSheet(InsnListEditor list, AbstractInsnNode insn) {
 		// Do not call super, we need to set the list before we setup items
 		this.list = list;
 		add0Hook();
+		addCssHook();
 		refresh(insn);
 		setSearchBoxVisible(false);
 		setModeSwitcherVisible(false);

File: src/me/coley/recaf/bytecode/search/Search.java
Patch:
@@ -106,7 +106,7 @@ public static List<Result> search(Parameter... params) {
 							case AbstractInsnNode.TYPE_INSN:
 								TypeInsnNode tin = (TypeInsnNode) ain;
 								// check against type (in code, new Type) inits
-								if (param.singleArg() && param.validType(tin.desc)) {
+								if (param.validType(tin.desc)) {
 									results.add(Result.opcode(cn, mn, ain));
 								}
 								break;
@@ -130,7 +130,7 @@ public static List<Result> search(Parameter... params) {
 								// check ldc opcode's value is of type string.
 								// check if string matched parameter arg.
 								LdcInsnNode ldc = (LdcInsnNode) ain;
-								if (ldc.cst instanceof String && param.check(0, ldc.cst.toString())) {
+								if (ldc.cst instanceof String && param.check(0, ldc.cst.toString(), false)) {
 									results.add(Result.opcode(cn, mn, ldc));
 								}
 							}

File: src/me/coley/recaf/ui/component/FileTreeItem.java
Patch:
@@ -54,7 +54,7 @@ public void addFile(Input input, String part, String name) {
 		addOrdered(fti);
 	}
 
-	public  void addOrdered(FileTreeItem fti) {
+	public void addOrdered(FileTreeItem fti) {
 		try {
 			int sizeD = dirs.size();
 			int sizeF = files.size();

File: src/me/coley/recaf/ui/component/editor/InsnProxyListEditor.java
Patch:
@@ -20,9 +20,7 @@ public Node getEditor() {
 		ReflectiveMethodNodeItem refItem = (ReflectiveMethodNodeItem) item;
 		InsnList list = (InsnList) item.getValue();
 		return new ActionButton(Lang.get("misc.edit"), () -> {
-			if (list.size() > 0) {
-				Bus.post(new InsnOpenEvent(refItem.getNode(), refItem.getMethodNode(), list.getFirst()));
-			}
+			Bus.post(new InsnOpenEvent(refItem.getNode(), refItem.getMethodNode(), list.getFirst()));
 		});
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/ui/component/ReflectiveOpcodeItem.java
Patch:
@@ -31,7 +31,7 @@ public ReflectiveOpcodeItem(InsnListEditor editor, AbstractInsnNode owner, Field
 	protected Class<?> getEditorType() {
 		// check if proper type exists
 		if (getType().equals(LabelNode.class)) {
-			return LabelEditor.class;
+			return LabelEditor.Opcode.class;
 		} else if (getType().equals(Handle.class)) {
 			return HandleEditor.class;
 		} else if (getType().equals(Object[].class)) {

File: src/me/coley/recaf/Input.java
Patch:
@@ -674,6 +674,7 @@ private Map<String, byte[]> readContents(Instrumentation instrumentation) throws
 	 * the transformer in this method.
 	 */
 	public void registerLoadListener() {
+		if (instrumentation == null) return;
 		// register transformer so new classes can be added on the fly
 		instrumentation.addTransformer((loader, className, classBeingRedefined, protectionDomain, classfileBuffer) -> {
 			// skip invalid entries

File: src/me/coley/recaf/config/impl/ConfDisplay.java
Patch:
@@ -6,6 +6,7 @@
 import me.coley.logging.Level;
 import me.coley.recaf.config.Conf;
 import me.coley.recaf.config.Config;
+import me.coley.recaf.util.Lang;
 
 /**
  * Options for user-interface.
@@ -37,7 +38,7 @@ public class ConfDisplay extends Config {
 	 * UI language.
 	 */
 	@Conf(category = "display", key = "language")
-	public String language = "en";
+	public String language = Lang.DEFAULT_LANGUAGE;
 	/**
 	 * Stylesheet group to use. 
 	 */

File: src/me/coley/recaf/util/Lang.java
Patch:
@@ -15,6 +15,7 @@
  * @author Matt
  */
 public class Lang {
+	public static final String DEFAULT_LANGUAGE = "en";
 	private static final Map<String, String> map = new HashMap<>();
 	private final static boolean DEBUG = true;
 
@@ -48,9 +49,7 @@ public static void load(String lang) {
 			// FxWindow.logging.fine("Loading language from: " + file, 1);
 			String jsStr = Streams.toString(Lang.class.getResourceAsStream(file));
 			JsonObject json = Json.parse(jsStr).asObject();
-			json.forEach(v -> {
-				map.put(v.getName(), v.getValue().asString());
-			});
+			json.forEach(v -> map.put(v.getName(), v.getValue().asString()));
 		} catch (Exception e) {
 			throw new RuntimeException(e);
 		}
@@ -69,6 +68,7 @@ public static void load(String key, String value) {
 	}
 
 	static {
+		load(DEFAULT_LANGUAGE);
 		load(ConfDisplay.instance().language);
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/config/impl/ConfDisplay.java
Patch:
@@ -6,6 +6,7 @@
 import me.coley.logging.Level;
 import me.coley.recaf.config.Conf;
 import me.coley.recaf.config.Config;
+import me.coley.recaf.util.Lang;
 
 /**
  * Options for user-interface.
@@ -37,7 +38,7 @@ public class ConfDisplay extends Config {
 	 * UI language.
 	 */
 	@Conf(category = "display", key = "language")
-	public String language = "en";
+	public String language = Lang.DEFAULT_LANGUAGE;
 	/**
 	 * Stylesheet group to use. 
 	 */

File: src/me/coley/recaf/util/Lang.java
Patch:
@@ -15,6 +15,7 @@
  * @author Matt
  */
 public class Lang {
+	public static final String DEFAULT_LANGUAGE = "en";
 	private static final Map<String, String> map = new HashMap<>();
 	private final static boolean DEBUG = true;
 
@@ -48,9 +49,7 @@ public static void load(String lang) {
 			// FxWindow.logging.fine("Loading language from: " + file, 1);
 			String jsStr = Streams.toString(Lang.class.getResourceAsStream(file));
 			JsonObject json = Json.parse(jsStr).asObject();
-			json.forEach(v -> {
-				map.put(v.getName(), v.getValue().asString());
-			});
+			json.forEach(v -> map.put(v.getName(), v.getValue().asString()));
 		} catch (Exception e) {
 			throw new RuntimeException(e);
 		}
@@ -69,6 +68,7 @@ public static void load(String key, String value) {
 	}
 
 	static {
+		load(DEFAULT_LANGUAGE);
 		load(ConfDisplay.instance().language);
 	}
 }
\ No newline at end of file

File: src/me/coley/recaf/ui/FormatFactory.java
Patch:
@@ -125,7 +125,7 @@ public static TextHBox annotation(AnnotationNode item) {
 		int max = item.values == null ? 0 : item.values.size();
 		if (max > 0) {
 			addRaw(t, "(");
-			for (int i = 0, n = max; i < n; i += 2) {
+			for (int i = 0; i < max; i += 2) {
 				String name = (String) item.values.get(i);
 				Object value = item.values.get(i + 1);
 				addName(t, name);
@@ -148,7 +148,7 @@ public static TextHBox annotation(AnnotationNode item) {
 					Logging.warn("Unknown annotation data: @" + i + " type: " + value.getClass());
 					addRaw(t, value.toString());
 				}
-				if (i + 1 < max) {
+				if (i + 2 < max) {
 					addRaw(t, ", ");
 				}
 			}

File: src/me/coley/recaf/ui/FormatFactory.java
Patch:
@@ -125,7 +125,7 @@ public static TextHBox annotation(AnnotationNode item) {
 		int max = item.values == null ? 0 : item.values.size();
 		if (max > 0) {
 			addRaw(t, "(");
-			for (int i = 0, n = max; i < n; i += 2) {
+			for (int i = 0; i < max; i += 2) {
 				String name = (String) item.values.get(i);
 				Object value = item.values.get(i + 1);
 				addName(t, name);
@@ -148,7 +148,7 @@ public static TextHBox annotation(AnnotationNode item) {
 					Logging.warn("Unknown annotation data: @" + i + " type: " + value.getClass());
 					addRaw(t, value.toString());
 				}
-				if (i + 1 < max) {
+				if (i + 2 < max) {
 					addRaw(t, ", ");
 				}
 			}

File: src/me/coley/recaf/config/impl/ConfDisplay.java
Patch:
@@ -27,7 +27,7 @@ public class ConfDisplay extends Config {
 	 * Editor windows become topmost.
 	 */
 	@Conf(category = "display", key = "topmost")
-	public boolean topmost = true;
+	public boolean topmost;
 	/**
 	 * Editor windows become topmost.
 	 */

File: src/me/coley/recaf/ui/component/DecompileItem.java
Patch:
@@ -53,8 +53,8 @@ public class DecompileItem implements Item {
 	private static final String CONST_VAL_PATTERN = "(\\b([\\d._]*[\\d])\\b)+|(true|false|null)";
 	private static final String CONST_PATTERN = CONST_HEX_PATTERN + "|" + CONST_VAL_PATTERN;
 	private static final String COMMENT_SINGLE_PATTERN = "//[^\n]*";
-	private static final String COMMENT_MULTI_SINGLE_PATTERN = "/[*](.|\\R)+?\\*/";
-	private static final String COMMENT_MULTI_JAVADOC_PATTERN = "/[*]{2}(.|\\R)+?\\*/";
+	private static final String COMMENT_MULTI_SINGLE_PATTERN = "/[*](.|\n|\r)+?\\*/";
+	private static final String COMMENT_MULTI_JAVADOC_PATTERN = "/[*]{2}(.|\n|\r)+?\\*/";
 	private static final String ANNOTATION_PATTERN = "\\B(@[\\w]+)\\b";
 	private static final Pattern PATTERN = new Pattern(
 			"({COMMENTDOC}" + COMMENT_MULTI_JAVADOC_PATTERN + ")" +

File: src/me/coley/recaf/util/Threads.java
Patch:
@@ -53,7 +53,7 @@ public void run() {
 	}
 
 	public static void runFx(Runnable r) {
-		runLaterFx(0, r);
+		Platform.runLater(r);
 	}
 
 	public static void runLaterFx(int delay, Runnable r) {

File: src/me/coley/recaf/config/impl/ConfASM.java
Patch:
@@ -76,13 +76,13 @@ public class ConfASM extends Config {
 	 * renamed when updating a method's name.
 	 */
 	@Conf(category = "asm", key = "edit.linkedmethods")
-	private boolean linkedMethodReplace;
+	private boolean linkedMethodReplace = true;
 	/**
 	 * Used to disallow renaming of locked methods' names. <i>(Required
 	 * {@link #useLinkedMethodRenaming() linked method renaming} to be used.
 	 */
 	@Conf(category = "asm", key = "edit.locklibmethods")
-	private boolean lockLibraryMethods;
+	private boolean lockLibraryMethods = true;
 	/**
 	 * Option for alerting users that edits have produced invalid bytecode
 	 * during editing.

File: src/me/coley/recaf/ui/FxWindow.java
Patch:
@@ -777,7 +777,8 @@ public void updateItem(String item, boolean empty) {
 						setText(null);
 						setGraphic(null);
 					} else {
-						boolean cont = input.getClasses().containsKey(item);
+						FileTreeItem t = (FileTreeItem) getTreeItem();
+						boolean cont = !t.isDir && input.getClasses().containsKey(item);
 						Node fxImage = cont ? Icons.getClass(input.getClass(item).access) : new ImageView(Icons.CL_PACKAGE);
 						setGraphic(fxImage);
 						String name = cont ? trim(item) : item;

File: src/me/coley/recaf/ui/component/DecompileItem.java
Patch:
@@ -185,7 +185,7 @@ protected void setupCode(String initialText) {
 
 		@Override
 		protected String createTitle() {
-			return Lang.get("ui.bean.class.decompile.name") + ":" + postfix;
+			return Lang.get("ui.bean.class.decompile.name") + ": " + postfix;
 		}
 
 		@Override

File: src/me/coley/recaf/ui/component/ReflectiveOpcodeSheet.java
Patch:
@@ -32,6 +32,7 @@ public class ReflectiveOpcodeSheet extends ReflectivePropertySheet {
 	public ReflectiveOpcodeSheet(InsnListEditor list, AbstractInsnNode insn) {
 		// Do not call super, we need to set the list before we setup items
 		this.list = list;
+		add0Hook();
 		refresh(insn);
 		setSearchBoxVisible(false);
 		setModeSwitcherVisible(false);

File: src/me/coley/recaf/ui/component/ReflectiveOpcodeItem.java
Patch:
@@ -94,7 +94,7 @@ public Class<?> getType() {
 	}
 
 	@Override
-	public void setValue(Object value) {		
+	public void setValue(Object value) {
 		if (checkCaller() && !value.equals(getValue())) {
 			super.setValue(value);
 			Bus.post(new ClassDirtyEvent(getNode()));
@@ -518,7 +518,7 @@ protected void set(Object instance, Field field, Type converted) {
 					private boolean match(Type t, Type original) {
 						// Pretty sure as long as the kind of type matches
 						// (non-methods can be grouped together) it'll be fine.
-						return original.getSort() == Type.METHOD && original.getSort() ==  t.getSort();
+						return original.getSort() == Type.METHOD && original.getSort() == t.getSort();
 					}
 
 				};

File: src/me/coley/recaf/config/impl/ConfDisplay.java
Patch:
@@ -48,7 +48,6 @@ public class ConfDisplay extends Config {
 	 */
 	@Conf(category = "display", key = "loglevel")
 	public Level loglevel = Level.INFO;
-
 	/**
 	 * Show button bar in main window. Disable and relaunch for more vertical
 	 * space.

File: src/me/coley/recaf/ui/FormatFactory.java
Patch:
@@ -12,7 +12,6 @@
 import javafx.scene.Node;
 import javafx.scene.control.Label;
 import javafx.scene.layout.VBox;
-import javafx.scene.text.Font;
 import me.coley.recaf.Logging;
 import me.coley.recaf.bytecode.Asm;
 import me.coley.recaf.bytecode.OpcodeUtil;
@@ -534,9 +533,8 @@ private static void style(Node text, String clazz) {
 	 * @return Label of string.
 	 */
 	private static Label text(String value) {
-		Font font = Font.font("Consolas", 12);
 		Label text = new Label(value);
-		text.setFont(font);
+		text.getStyleClass().add("code-fmt");
 		return text;
 	}
 

File: src/me/coley/recaf/config/impl/ConfASM.java
Patch:
@@ -25,7 +25,7 @@ public class ConfASM extends Config {
 	 * ASM4 program and using ASM5 will have ASM throw an exception.
 	 */
 	@Conf(category = "asm", key = "version")
-	private ASMVersion version = ASMVersion.V5;
+	private ASMVersion version = ASMVersion.V6;
 	/**
 	 * Flag for ASM output, compute maximum stack/local sizes for methods.
 	 */

File: src/me/coley/recaf/ui/component/StackWatcher.java
Patch:
@@ -62,6 +62,7 @@ protected void updateItem(Node box, boolean empty) {
 				}
 			}
 		});
+		colInterp.setMinWidth(300);
 		stack.getColumns().addAll(colInterp);
 		// create scene
 		Scene scene = JavaFX.scene(stack, 400, 300);

File: src/me/coley/recaf/ui/component/StackWatcher.java
Patch:
@@ -14,7 +14,6 @@
 import javafx.scene.control.TableCell;
 import javafx.scene.control.TableColumn;
 import javafx.scene.control.TableView;
-import javafx.scene.layout.BorderPane;
 import javafx.stage.Stage;
 import me.coley.recaf.ui.FormatFactory;
 import me.coley.recaf.ui.component.InsnListEditor.OpcodeList;

File: src/me/coley/recaf/ui/FormatFactory.java
Patch:
@@ -14,6 +14,7 @@
 import javafx.scene.layout.VBox;
 import javafx.scene.text.Font;
 import me.coley.recaf.Logging;
+import me.coley.recaf.bytecode.Asm;
 import me.coley.recaf.bytecode.OpcodeUtil;
 import me.coley.recaf.bytecode.TypeUtil;
 import me.coley.recaf.config.impl.ConfDisplay;
@@ -370,7 +371,7 @@ private static void addOpcode(OpcodeHBox text, AbstractInsnNode ain, MethodNode
 			VarInsnNode vin = (VarInsnNode) ain;
 			addValue(text, String.valueOf(vin.var));
 			if (method != null && method.localVariables != null && vin.var < method.localVariables.size()) {
-				LocalVariableNode lvn = method.localVariables.get(vin.var);
+				LocalVariableNode lvn = Asm.getLocal(method, vin.var);
 				addRaw(text, " (");
 				addName(text, lvn.name);
 				addRaw(text, ":");

File: src/me/coley/recaf/Logging.java
Patch:
@@ -189,6 +189,7 @@ public static void error(Exception exception, boolean display, boolean terminate
 		String message = getErrorMessage(exception);
 		Logging.error(message);
 		if (display) {
+			try {
 			//@formatter:off
 			Threads.runLaterFx(0, () -> {
 				Notifications.create()
@@ -198,6 +199,7 @@ public static void error(Exception exception, boolean display, boolean terminate
 		        .showError();
 			});
 			//@formatter:on
+			} catch (Exception e) {}
 		}
 		if (terminate) {
 			System.exit(0);

File: src/me/coley/recaf/Input.java
Patch:
@@ -36,7 +36,6 @@
 import com.google.common.jimfs.Configuration;
 import com.google.common.jimfs.Jimfs;
 
-import javafx.application.Platform;
 import me.coley.event.Bus;
 import me.coley.event.Listener;
 import me.coley.recaf.bytecode.Asm;
@@ -241,7 +240,7 @@ public String mapMethodName(final String owner, final String name, final String
 						// the same hierarchy (Overrides / supers)
 						// The block below only updates the singular method.
 						if (Hierarchy.linked(method, owner, name, descriptor)) {
-							hierUpdate.addRename(updated, name, mNameNew, descriptor);
+							hierUpdate.addRename(updated.name, name, mNameNew, descriptor);
 							return rename(owner, name, descriptor);
 						}
 					} else if (owner.equals(mOwner) && name.equals(mName) && descriptor.equals(event.getMethod().desc)) {

File: src/me/coley/recaf/Recaf.java
Patch:
@@ -17,7 +17,7 @@
 import picocli.CommandLine;
 
 public class Recaf {
-	public static final String VERSION = "1.3.0";
+	public static final String VERSION = "1.3.1";
 	public static String[] launchArgs;
 
 	public static void main(String[] args) {

File: src/me/coley/recaf/util/Threads.java
Patch:
@@ -13,7 +13,6 @@ public class Threads {
 
 	public static ExecutorService pool() {
 		return Executors.newFixedThreadPool(conf.maxThreads);
-		//return Executors.newFixedThreadPool(1);
 	}
 
 	public static void waitForCompletion(ExecutorService pool) {

File: src/me/coley/recaf/ui/FxConfig.java
Patch:
@@ -8,6 +8,7 @@
 import me.coley.recaf.config.impl.ConfCFR;
 import me.coley.recaf.config.impl.ConfDisplay;
 import me.coley.recaf.config.impl.ConfKeybinds;
+import me.coley.recaf.config.impl.ConfOther;
 import me.coley.recaf.config.impl.ConfUpdate;
 import me.coley.recaf.ui.component.ReflectivePropertySheet;
 import me.coley.recaf.util.Icons;
@@ -36,7 +37,8 @@ private FxConfig() {
 				ConfKeybinds.instance(), 
 				ConfASM.instance(), 
 				ConfCFR.instance(),
-				ConfUpdate.instance());
+				ConfUpdate.instance(),
+				ConfOther.instance());
 		propertySheet.setMode(PropertySheet.Mode.CATEGORY);
 		VBox.setVgrow(propertySheet, Priority.ALWAYS);
 		setScene(JavaFX.scene(propertySheet, 600, 500));

File: src/me/coley/recaf/ui/component/ReflectiveMethodNodeItem.java
Patch:
@@ -156,9 +156,10 @@ public Node getEditor() {
 		private void rename(ClassNode owner, MethodNode method, TextField txtName) {
 			String text = txtName.getText();
 			if (!txtName.isDisabled() && !text.equals(method.name)) {
-				Bus.post(new MethodRenameEvent(owner, method, method.name, text));
 				// use disable property to prevent-double send
 				txtName.setDisable(true);
+				// send update
+				Bus.post(new MethodRenameEvent(owner, method, method.name, text));
 			}
 		}
 	}

File: src/me/coley/recaf/ui/component/BlockPane.java
Patch:
@@ -48,7 +48,7 @@ protected void updateItem(AbstractInsnNode node, boolean empty) {
 			// add menu buttons to save / name collection
 			HBox menu = new HBox();
 			TextField name = new TextField();
-			ActionButton btn = new ActionButton(Lang.get("ui.menubar.save"), () -> save(name.getText(), opcodes));
+			ActionButton btn = new ActionButton(Lang.get("misc.save"), () -> save(name.getText(), opcodes));
 			menu.getChildren().add(name);
 			menu.getChildren().add(btn);
 			setBottom(menu);
@@ -121,7 +121,7 @@ protected void updateItem(AbstractInsnNode node, boolean empty) {
 			HBox menu = new HBox();
 			ComboBox<InsertMode> comboLocation = new ComboBox<>(JavaFX.observableList(InsertMode.values()));
 			comboLocation.setValue(InsertMode.AFTER);
-			ActionButton btn = new ActionButton(Lang.get("ui.menubar.load"), () -> load(txtName.getText(), comboLocation.getValue(),
+			ActionButton btn = new ActionButton(Lang.get("misc.load"), () -> load(txtName.getText(), comboLocation.getValue(),
 					editor, ain));
 			menu.getChildren().add(txtName);
 			menu.getChildren().add(btn);

File: src/me/coley/recaf/Recaf.java
Patch:
@@ -32,13 +32,13 @@ private void onInit(UiInitEvent event) {
 			LaunchParams params = new LaunchParams();
 			CommandLine.call(params, System.out, args);
 			if (params.agent) {
-				Bus.post(new NewInputEvent(Agent.inst));
+				NewInputEvent.call(Agent.inst);
 				return;
 			}
 			// load file & class if specified
 			File file = params.initialFile;
 			if (file != null && file.exists()) {
-				Bus.post(new NewInputEvent(file));
+				NewInputEvent.call(file);
 				//
 				Input in = Input.get();
 				String clazz = params.initialClass;

File: src/me/coley/recaf/Updater.java
Patch:
@@ -48,7 +48,7 @@ public static void init(String[] args) {
 			// compare versions
 			String latestVersion = updateJson.getString("tag_name", "1.0.0");
 			if (isOutdated(selfVersion, latestVersion)) {
-				Logging.info("update.outdated");
+				Logging.info(Lang.get("update.outdated"));
 				JsonArray assets = updateJson.get("assets").asArray();
 				for (JsonValue assetValue : assets.values()) {
 					JsonObject assetObj = assetValue.asObject();

File: src/me/coley/recaf/Input.java
Patch:
@@ -173,7 +173,6 @@ public String map(String internalName) {
 			}
 		}
 		// update inner classes
-		Set<String> inners = new HashSet<>();
 		for (InnerClassNode innerNode :  event.getNode().innerClasses) {
 			String inner = innerNode.name;
 			// ASM gives inner-classes a constant of themselves, copied from their parent.

File: src/me/coley/recaf/config/impl/ConfCFR.java
Patch:
@@ -140,7 +140,7 @@ public Map<String, String> toStringMap() {
 		Map<String, String> options = new HashMap<>();
 		for (Field f : Reflect.fields(ConfCFR.class)) {
 			try {
-				String name = "-" + f.getName().toLowerCase();
+				String name = f.getName().toLowerCase();
 				String text = String.valueOf(f.get(this));
 				options.put(name, text);
 			} catch (Exception e) {

File: src/me/coley/recaf/ui/component/InsnListEditor.java
Patch:
@@ -364,7 +364,6 @@ private void updateReferenced(AbstractInsnNode ain, List<Node> list) {
 				cell.getStyleClass().remove("op-jumpdest-fail");
 				cell.getStyleClass().remove("op-jumpdest-reverse");
 				cell.getStyleClass().remove("op-varmatch");
-
 			});
 			if (ain == null) {
 				return;
@@ -473,7 +472,7 @@ private void updateReferenced(AbstractInsnNode ain, List<Node> list) {
 		 */
 		private void mark(AbstractInsnNode ain, List<Node> list, String clazz) {
 			int index = getItems().indexOf(ain);
-			if (index >= 0 && list.size() > index) {
+			if (index >= 0 && index < list.size()) {
 				// this automatically refreshes the node too, so the style
 				// should be instantly applied
 				list.get(index).getStyleClass().add(clazz);

File: src/me/coley/recaf/bytecode/OpcodeUtil.java
Patch:
@@ -788,7 +788,7 @@ public static int getSize(AbstractInsnNode ain, MethodNode method) {
 		if (ain == null) {
 			return -1;
 		}
-		int size = index(ain, method);
+		int size = index(ain);
 		while (ain.getNext() != null) {
 			ain = ain.getNext();
 			size++;

File: src/me/coley/recaf/event/ResourceUpdateEvent.java
Patch:
@@ -3,7 +3,7 @@
 import me.coley.event.Event;
 
 /**
- * Event for when a class is updated.
+ * Event for when a resource is updated.
  * 
  * @author Matt
  */

File: src/me/coley/recaf/ui/FormatFactory.java
Patch:
@@ -336,6 +336,7 @@ private static void addOpcode(HBox text, AbstractInsnNode ain, MethodNode method
 			MultiANewArrayInsnNode manain = (MultiANewArrayInsnNode) ain;
 			addType(text, Type.getType(manain.desc));
 			addNote(text, " x" + manain.dims);
+			break;
 		}
 		case AbstractInsnNode.INVOKE_DYNAMIC_INSN: {
 			InvokeDynamicInsnNode insnIndy = (InvokeDynamicInsnNode) ain;

File: src/me/coley/recaf/ui/FxSearch.java
Patch:
@@ -93,14 +93,14 @@ public SearchItem(Object owner, Field field, String categoryKey, String translat
 
 					@SuppressWarnings("unchecked")
 					@Override
-					protected <T> Class<? extends CustomEditor<T>> getEditorType() {
+					protected Class<?> getEditorType() {
 						Field f = getField();
 						if (f.getName().equals("ignored")) {
 							// interfaces
-							return (Class<? extends CustomEditor<T>>) IgnoreList.class;
+							return IgnoreList.class;
 						} else if (f.getName().equals("opcodes")) {
 							// interfaces
-							return (Class<? extends CustomEditor<T>>) OpcodeList.class;
+							return OpcodeList.class;
 						}
 						return super.getEditorType();
 					}

File: src/me/coley/recaf/ui/component/AccessButton.java
Patch:
@@ -12,6 +12,7 @@
 import javafx.scene.control.Button;
 import javafx.scene.control.CheckBox;
 import javafx.util.Callback;
+import me.coley.recaf.Logging;
 import me.coley.recaf.bytecode.Access;
 import me.coley.recaf.util.Icons;
 import me.coley.recaf.util.Lang;
@@ -96,6 +97,8 @@ protected void updateItem(Integer flags, boolean empty) {
 			modifiers = Access.PARAM_MODIFIERS_ARRAY;
 			break;
 		default:
+			Logging.error("Unknown context for access?");
+			modifiers = new int[] {};
 			break;
 		}
 		for (int mod : modifiers) {

File: src/me/coley/recaf/ui/component/ReflectiveFieldNodeItem.java
Patch:
@@ -32,17 +32,17 @@ public ReflectiveFieldNodeItem(ClassNode fieldOwner, FieldNode owner, Field fiel
 
 	@SuppressWarnings("unchecked")
 	@Override
-	protected <T> Class<? extends CustomEditor<T>> getEditorType() {
+	protected Class<?> getEditorType() {
 		// check if proper type exists
 		ParameterizedType type = getGenericType();
 		if (type == null || type.getRawType() == null) {
 			// custom editor for access / version
 			if (getField().getName().equals("access")) {
-				return (Class<? extends CustomEditor<T>>) AccessEditor.class;
+				return AccessEditor.class;
 			}
 			String desc = ((FieldNode) getOwner()).desc;
 			if (getField().getName().equals("value") && Misc.getType(desc) != null) {
-				return (Class<? extends CustomEditor<T>>) ValueEditor.class;
+				return ValueEditor.class;
 			}
 			return null;
 		}

File: src/me/coley/recaf/ui/component/ReflectivePropertySheet.java
Patch:
@@ -135,14 +135,14 @@ public Optional<ObservableValue<? extends Object>> getObservableValue() {
 		/**
 		 * @return Type of editor for the represented value of this item.
 		 */
-		protected <T> Class<? extends CustomEditor<T>> getEditorType() {
+		protected Class<?> getEditorType() {
 			return null;
 		}
 
 		@Override
 		public final Optional<Class<? extends PropertyEditor<?>>> getPropertyEditorClass() {
 			// Check if there is a custom editor for this item.
-			Class<? extends PropertyEditor<?>> type = getEditorType();
+			Class<? extends PropertyEditor<?>> type = (Class<? extends CustomEditor<?>>) getEditorType();
 			if (type == null) {
 				// call default implmentation in Item.
 				return Item.super.getPropertyEditorClass();

File: src/me/coley/recaf/event/RequestExportEvent.java
Patch:
@@ -9,10 +9,10 @@
  * 
  * @author Matt
  */
-public class ExportRequestEvent extends Event {
+public class RequestExportEvent extends Event {
 	private final File file;
 
-	public ExportRequestEvent(File file) {
+	public RequestExportEvent(File file) {
 		this.file = file;
 	}
 

File: src/me/coley/recaf/ui/FileChoosers.java
Patch:
@@ -28,7 +28,7 @@ public static void export() {
 		File file = export.showSaveDialog(null);
 		if (file != null) {
 			try {
-				Bus.INSTANCE.post(new ExportRequestEvent(file));
+				Bus.INSTANCE.post(new RequestExportEvent(file));
 			} catch (Exception e) {
 				Logging.error(e);
 			}

File: src/me/coley/recaf/ui/FxWindow.java
Patch:
@@ -445,7 +445,6 @@ public int compare(Type[] o1, Type[] o2) {
 					}));
 					setContextMenu(ctxBase);
 					ctx.getItems().add(new ActionMenuItem(Lang.get("ui.bean.method.instructions.name"), () -> {
-						methods.add(new MethodNode(0, "temp", "()V", null, null));
 						MethodNode mn = getSelectionModel().getSelectedItem();
 						Bus.INSTANCE.post(new InsnOpenEvent(owner, mn, null));
 					}));

File: src/me/coley/recaf/bytecode/OpcodeUtil.java
Patch:
@@ -843,7 +843,7 @@ public static void link(InsnList instructions, AbstractInsnNode insnStart, Abstr
 			prev.setAccessible(true);
 			if (first) {
 				// Update head
-				Field listStart = InsnList.class.getDeclaredField("first");
+				Field listStart = Reflect.getField(InsnList.class, "firstInsn", "first");
 				listStart.setAccessible(true);
 				listStart.set(instructions, insnEnd.getNext());
 				// Remove link to previous sections

File: src/me/coley/recaf/ui/FxWindow.java
Patch:
@@ -734,8 +734,8 @@ private class FileTreeItem extends TreeItem<String> implements Comparable<String
 			// Split in case of cases like:
 			// a/a/a.class
 			// a/a/a/a.class
-			private final Map<String, FileTreeItem> dirs = new LinkedHashMap<>();
-			private final Map<String, FileTreeItem> files = new LinkedHashMap<>();
+			private final Map<String, FileTreeItem> dirs = new TreeMap<>();
+			private final Map<String, FileTreeItem> files = new TreeMap<>();
 			private final Supplier<ClassNode> file;
 			private final boolean isDir;
 

File: src/me/coley/recaf/ui/SwingUI.java
Patch:
@@ -52,7 +52,7 @@ public SwingUI() {
 			@Override
 			public void windowClosing(WindowEvent e) {
 				if (Recaf.INSTANCE.configs.ui.confirmDeletions) {
-					int dialogResult = JOptionPane.showConfirmDialog(null, Lang.get("misc.warn.exit"), "Warning",
+					int dialogResult = JOptionPane.showConfirmDialog(null, Lang.get("misc.warn.exit"), Lang.get("misc.warn.title"),
 							JOptionPane.YES_NO_OPTION);
 					if (dialogResult == JOptionPane.YES_OPTION) {
 						frame.dispose();

File: src/me/coley/recaf/ui/component/JVMMenu.java
Patch:
@@ -9,6 +9,7 @@
 import com.sun.tools.attach.VirtualMachineDescriptor;
 
 import me.coley.recaf.agent.Attach;
+import me.coley.recaf.ui.Lang;
 import me.coley.recaf.ui.component.action.ActionMenuItem;
 
 /**
@@ -20,7 +21,7 @@
 @SuppressWarnings("serial")
 public class JVMMenu extends JMenu {
 	public JVMMenu() {
-		super("JVM-s");
+		super(Lang.get("navbar.agent.list"));
 		addMouseListener(new MouseAdapter() {
 			@Override
 			public void mouseEntered(MouseEvent e) {

File: src/me/coley/recaf/ui/SwingUI.java
Patch:
@@ -52,7 +52,7 @@ public SwingUI() {
 			@Override
 			public void windowClosing(WindowEvent e) {
 				if (Recaf.INSTANCE.configs.ui.confirmDeletions) {
-					int dialogResult = JOptionPane.showConfirmDialog(null, Lang.get("misc.warn.exit"), "Warning",
+					int dialogResult = JOptionPane.showConfirmDialog(null, Lang.get("misc.warn.exit"), Lang.get("misc.warn.title"),
 							JOptionPane.YES_NO_OPTION);
 					if (dialogResult == JOptionPane.YES_OPTION) {
 						frame.dispose();

File: src/me/coley/recaf/ui/component/JVMMenu.java
Patch:
@@ -9,6 +9,7 @@
 import com.sun.tools.attach.VirtualMachineDescriptor;
 
 import me.coley.recaf.agent.Attach;
+import me.coley.recaf.ui.Lang;
 import me.coley.recaf.ui.component.action.ActionMenuItem;
 
 /**
@@ -20,7 +21,7 @@
 @SuppressWarnings("serial")
 public class JVMMenu extends JMenu {
 	public JVMMenu() {
-		super("JVM-s");
+		super(Lang.get("navbar.agent.list"));
 		addMouseListener(new MouseAdapter() {
 			@Override
 			public void mouseEntered(MouseEvent e) {

File: src/me/coley/recaf/ui/component/internalframe/DefinitionBox.java
Patch:
@@ -60,7 +60,7 @@ public DefinitionBox(FieldNode fn, JList<?> list) {
 		}));
 		if (fn.desc.length() == 1 || fn.desc.equals("Ljava/lang/String;")) {
 			String value = fn.value == null ? "" : fn.value.toString();
-			add(c, new JLabel("DefaultValue:"), new ActionTextField(value, n -> {
+			add(c, new JLabel(Lang.get("window.define.value")), new ActionTextField(value, n -> {
 				switch (Type.getType(fn.desc).getDescriptor()) {
 				case "B":
 				case "C":

File: src/me/coley/recaf/ui/component/panel/ClassDisplayPanel.java
Patch:
@@ -221,7 +221,7 @@ public OpcodeListBox openOpcodes(MethodNode method) {
 	public BasicFrame openVariables(MethodNode method) {
 		BasicFrame box = null;
 		try {
-			addWindow(box = new BasicFrame(Lang.get("window.method.variables") + method.name));
+			addWindow(box = new BasicFrame(Lang.get("window.member.variables") + method.name));
 			box.add(new JScrollPane(VariableTable.create(null, method)));
 			box.setVisible(true);
 		} catch (Exception e) {

File: src/me/coley/recaf/ui/component/panel/DecompilePanel.java
Patch:
@@ -101,15 +101,14 @@ private void recompile() {
 				srcText = addExtra(srcText);
 				name = srcText.substring(2, srcText.indexOf(";"));
 			}
-			Class<?> clazz = null;
 			try {
-				clazz = compiler.compile(name, srcText);
+				compiler.compile(name, srcText);
 			} catch (NullPointerException e) {
 				Recaf.INSTANCE.logging.error("Could not recompile, user attempted recompile from JRE process (not JDK).");
 				Recaf.INSTANCE.logging.error(new RuntimeException(Lang.get("window.compile.failjdk")));
 				return;
 			}
-			DynamicClassLoader loader = ((DynamicClassLoader) clazz.getClassLoader());
+			DynamicClassLoader loader = Reflect.get(compiler, "classLoader");
 			Map<String, CompiledCode> code = Reflect.get(loader, "customCompiledCode");
 			if (code == null) {
 				Recaf.INSTANCE.logging.error("Could not recompile, could not fetch compiled code.");
@@ -137,6 +136,7 @@ private void recompile() {
 			Recaf.INSTANCE.logging.error(e);
 		}
 	}
+
 	
 	/**
 	 * Really ugly hack for adding constructor to the extended class. Bypasses

File: src/me/coley/recaf/util/Streams.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Comparator;
 import java.util.List;
@@ -40,7 +40,7 @@ public static byte[] from(InputStream is) throws IOException {
 	}
 	
     public static String toString(final InputStream input) throws IOException {
-        return new String(from(input), Charset.defaultCharset());
+        return new String(from(input), StandardCharsets.UTF_8);
     }
 
 	/**

File: src/me/coley/recaf/util/Streams.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Comparator;
 import java.util.List;
@@ -40,7 +40,7 @@ public static byte[] from(InputStream is) throws IOException {
 	}
 	
     public static String toString(final InputStream input) throws IOException {
-        return new String(from(input), Charset.defaultCharset());
+        return new String(from(input), StandardCharsets.UTF_8);
     }
 
 	/**

File: src/me/coley/recaf/config/impl/ConfUI.java
Patch:
@@ -129,7 +129,6 @@ protected Object parse(Class<?> type, JsonValue value) {
 		if (List.class.isAssignableFrom(type)) {
 			List<String> list = new ArrayList<>();
 			value.asArray().forEach(v -> list.add(v.asString()));
-			System.out.println(Arrays.toString(list.toArray(new String[0])));
 			return list;
 		} else {
 			throw new RuntimeException();

File: src/me/coley/recaf/asm/opcode/LabeledLookupSwitchInsnNode.java
Patch:
@@ -19,7 +19,7 @@ public class LabeledLookupSwitchInsnNode extends LookupSwitchInsnNode {
 	private final String[] labelsIdentifiers;
 
 	public LabeledLookupSwitchInsnNode(String labelIdentifier, String[] labelsIdentifiers, int[] keys) {
-		this(labelIdentifier, null, labelsIdentifiers, null, null);
+		this(labelIdentifier, null, labelsIdentifiers, keys, null);
 	}
 
 	public LabeledLookupSwitchInsnNode(String labelIdentifier, LabelNode dflt, String[] labelsIdentifiers, int[] keys,

File: src/me/coley/recaf/asm/tracker/TrackingClassNode.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class TrackingClassNode extends ClassNode {
 	public TrackingClassNode() {
-		super(Opcodes.ASM6);
+		super(Opcodes.ASM5);
 	}
 
 	@Override

File: src/me/coley/recaf/asm/tracker/TrackingMethodNode.java
Patch:
@@ -15,7 +15,7 @@ public class TrackingMethodNode extends MethodNode {
 
 	public TrackingMethodNode(TrackingClassNode clazz, int access, String name, String desc, String signature,
 			String[] exceptions) {
-		super(Opcodes.ASM6, access, name, desc, signature, exceptions);
+		super(Opcodes.ASM5, access, name, desc, signature, exceptions);
 		this.clazz = clazz;
 		this.instructions = new TrackingInsnList(this);
 	}

File: src/me/coley/recaf/config/impl/ConfAgent.java
Patch:
@@ -7,7 +7,7 @@ public class ConfAgent extends Config {
 	 * Automatically update the tree UI when more classes are loaded.
 	 */
 	public boolean autoRefresh = true;
-	
+
 	public ConfAgent() {
 		super("rcagent");
 	}

File: src/me/coley/recaf/ui/SwingUI.java
Patch:
@@ -129,7 +129,6 @@ private void setupMenu() {
 							Marker.mark(title);
 						}
 					}
-
 				}));
 				mnAgent.add(new ActionMenuItem(Lang.get("navbar.agent.apply"), () -> {
 					Agent.apply();

File: src/me/coley/recaf/ui/component/panel/UiOptionsPanel.java
Patch:
@@ -31,8 +31,9 @@ public UiOptionsPanel() {
 		p1.setLayout(new GridLayout(0, 2));
 		p1.add(new ActionCheckBox("Show jump hints", options.opcodeShowJumpHelp,b -> options.opcodeShowJumpHelp = b));
 		p1.add(new ActionCheckBox("Simplify type descriptors", options.opcodeSimplifyDescriptors,b -> options.opcodeSimplifyDescriptors = b));
-		p1.add(new ActionCheckBox("Advanced Variable Table", options.showVariableSignatureInTable,b -> options.showVariableSignatureInTable = b));
+		p1.add(new ActionCheckBox("Advanced variable table", options.showVariableSignatureInTable,b -> options.showVariableSignatureInTable = b));
 		p1.add(new ActionCheckBox("Confirm deletions", options.confirmDeletions,b -> options.confirmDeletions = b));
+		p1.add(new ActionCheckBox("Show empty member windows", options.showEmptyMemberWindows,b -> options.showEmptyMemberWindows = b));
 		JPanel p2 = new JPanel();
 		p2.setBorder(BorderFactory.createTitledBorder("Look and feel"));
 		p2.setLayout(new GridLayout(0, 2));

File: src/me/coley/recaf/ui/component/action/ActionTextField.java
Patch:
@@ -8,7 +8,7 @@
 import me.coley.recaf.ui.FontUtil;
 
 /**
- * Button with associated runnable action called when the text is updated.
+ * Text field with associated runnable action called when the text is updated.
  * 
  * @author Matt
  */

File: src/me/coley/recaf/config/BlocksConfig.java
Patch:
@@ -299,7 +299,7 @@ private static AbstractInsnNode parse(JsonObject o) {
 			return new TypeInsnNode(opcode, get(o, "desc"));
 		}
 		case AbstractInsnNode.LINE: {
-			return new LineNumberNode(getI(o, "line"), new LabelNode());
+			return new LineNumberNodeExt(getI(o, "line"), new LabelNode());
 		}
 		case AbstractInsnNode.LABEL: {
 			return new NamedLabelNode(get(o, "id"));

File: src/me/coley/recaf/ui/component/list/OpcodeCellRenderer.java
Patch:
@@ -228,7 +228,7 @@ public String getOpcodeText(OpcodeList list, AbstractInsnNode ain) {
 			break;
 		case AbstractInsnNode.LABEL:
 			if (options.opcodeSimplifyDescriptors) {
-				s = s.replace("F_NEW", "");
+				s = s.replace("F_NEW", "").replace("LABEL", "");
 			} else {
 				s += " ";
 			}

File: src/me/coley/recaf/ui/component/internalframe/BlockInsertBox.java
Patch:
@@ -61,8 +61,6 @@ public void itemStateChanged(ItemEvent evt) {
 			for (int i = 0; i < block.size(); i++) {
 				AbstractInsnNode clone = block.get(i).clone(Collections.emptyMap());
 				insertList.add(clone);
-				int x = block.size() - 1 - i;
-				System.out.println(i + " in " + blockKey + " - " + x + "/" + block.size() + " ---> " + start);
 				model.insertElementAt(clone, start);
 				start++;
 			}

File: src/me/coley/recaf/ui/component/internalframe/OpcodeCreationBox.java
Patch:
@@ -62,6 +62,8 @@ public void itemStateChanged(ItemEvent evt) {
 				cl.show(content, item);
 			}
 		});
+		// Initial value
+		currentType = comboCard.getItemAt(0);
 		content.setLayout(new CardLayout());
 		// Creating cards per opcode-type.
 		for (Entry<String, Integer> entry : nameToType.entrySet()) {

File: src/me/coley/recaf/util/Misc.java
Patch:
@@ -238,6 +238,7 @@ public static void moveUp(InsnList list, List<AbstractInsnNode> insns) {
 		}
 		list.insertBefore(prev, x);
 	}
+	
 
 	/**
 	 * Moves the insns down one in the list.

File: src/me/coley/recaf/ui/component/LabeledComponentGroup.java
Patch:
@@ -19,9 +19,9 @@ public LabeledComponentGroup(LabeledComponent... components) {
 		c.anchor = GridBagConstraints.WEST;
 		c.weightx = 1.0;
 		c.weighty = 1.0;
+		c.gridy = 1;
 		for (LabeledComponent comp : components) {
 			add(comp);
-			c.gridy += 1;
 		}
 	}
 
@@ -37,9 +37,10 @@ public Component add(Component comp) throws RuntimeException {
 			c.gridwidth = 1;
 			super.add(lc.getLabel(), c);
 			c.fill = GridBagConstraints.HORIZONTAL;
-			c.gridx = 0;
+			c.gridx = 1;
 			c.gridwidth = 1;
 			super.add(lc.getComponent(), c);
+			c.gridy += 1;
 			return comp;
 		} else throw new RuntimeException("Non-LabeledComponent are not supported!!");
 	}

File: src/me/coley/recaf/ui/component/list/OpcodeMouseListener.java
Patch:
@@ -48,7 +48,7 @@ public OpcodeMouseListener(MethodNode method, ClassDisplayPanel display, OpcodeL
 	public void mouseReleased(MouseEvent e) {
 		int button = e.getButton();
 
-		if (list.getSelectedIndices().length == 1) {
+		if (list.getSelectedIndices().length <= 1) {
 			// If not left-click, enforce selection at the given location
 			if (button != MouseEvent.BUTTON1) {
 				int index = list.locationToIndex(e.getPoint());

File: src/me/coley/recaf/ui/component/panel/TagTypeSwitchPanel.java
Patch:
@@ -5,8 +5,8 @@
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.function.Function;
 
 import javax.swing.JList;
@@ -58,7 +58,7 @@ public TagTypeSwitchPanel(JList<AbstractInsnNode> list, Handle handle) {
 		add(scroll, BorderLayout.CENTER);
 	}
 
-	private void populate(Set<String> tags, Function<String, Integer> getter) {
+	private void populate(List<String> tags, Function<String, Integer> getter) {
 		// Set layout based on number of options
 		// Add options
 		for (String op : tags) {

File: src/me/coley/recaf/ui/component/internalframe/TryCatchBox.java
Patch:
@@ -31,9 +31,10 @@ public TryCatchBox(MethodNode mn) {
 		setBackground(bg);
 		setLayout(new BorderLayout());
 		add(scroll, BorderLayout.CENTER);
+
 		update(mn);
 		int k = 162;
-		int s = Math.min(k * 2, k * mn.tryCatchBlocks.size());
+		int s = Math.min(k * 2, k * (mn.tryCatchBlocks.size() + 1));
 		scroll.setPreferredSize(new Dimension(350, s));
 		setVisible(true);
 	}

File: src/me/coley/recaf/asm/NonReflectionWriter.java
Patch:
@@ -62,7 +62,7 @@ protected String getCommonSuperClass(String type1, String type2) {
 	 * @return
 	 */
 	private boolean isAssignableFrom(ClassNode parent, ClassNode child) {
-		while (child.superName != null) {
+		while (child != null && child.superName != null) {
 			if (parent.name.equals(child.name) || child.interfaces.contains(parent.name)) {
 				return true;
 			}

File: src/me/coley/recaf/asm/NonReflectionWriter.java
Patch:
@@ -45,9 +45,9 @@ protected String getCommonSuperClass(String type1, String type2) {
 				node1 = loadNode(type2);
 				node2 = loadNode(type1);
 			} else if (isAssignableFrom(node1, node2)) {
-				return type1;
+				return node1.name;
 			} else if (isAssignableFrom(node2, node1)) {
-				return type2;
+				return node2.name;
 			}
 		} while (!isAssignableFrom(node1, node2));
 		return DEFAULT_PARENT;

File: src/me/coley/recaf/util/StreamUtil.java
Patch:
@@ -17,7 +17,7 @@ public class StreamUtil {
 	 *
 	 * @param is
 	 *            InputStream to read from.
-	 * @return byt earray representation of the input stream.
+	 * @return byte array representation of the input stream.
 	 * @throws IOException
 	 *             Thrown if the given input stream cannot be read from.
 	 */

File: src/me/coley/recaf/ui/component/internalframe/MemberDefinitionBox.java
Patch:
@@ -4,7 +4,6 @@
 import java.awt.Dimension;
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
-import java.awt.GridLayout;
 
 import javax.swing.BorderFactory;
 import javax.swing.BoxLayout;

File: src/me/coley/recaf/Recaf.java
Patch:
@@ -43,7 +43,8 @@ public enum Recaf {
 	 */
 	public final Colors colors;
 	/**
-	 * The utility instance handling a variety of ASM duties <i>(Bytecode loading, parsing, exporting)</i>.
+	 * The utility instance handling a variety of ASM duties <i>(Bytecode
+	 * loading, parsing, exporting)</i>.
 	 */
 	public final AsmUtil asm;
 

File: src/me/coley/recaf/cfr/CFRResourceLookup.java
Patch:
@@ -40,7 +40,7 @@ public byte[] get(String path) {
 				}
 			}
 		} catch (Exception e) {
-			program.window.displayError(e);
+			program.gui.displayError(e);
 		}
 		return bytes;
 	}

File: src/me/coley/recaf/ui/FilePrompt.java
Patch:
@@ -5,7 +5,7 @@
 import javax.swing.JFileChooser;
 import javax.swing.filechooser.FileNameExtensionFilter;
 
-public class FileChoosers {
+public class FilePrompt {
 	private JFileChooser fileChooser;
 
 	/**

File: src/me/coley/recaf/ui/Gui.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.List;
 
 public class Gui {
-	private final Recaf recaf = Recaf.getInstance();
+	private final Recaf recaf = Recaf.INSTANCE;
 	private JFrame frame;
 	private JarFileTree treeFiles;
 	private TabbedPanel tabbedContent;
@@ -63,7 +63,7 @@ private void initialize() {
 		mntmOpenJar.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent e) {
-				JFileChooser chooser = recaf.fileChoosers.getFileChooser();
+				JFileChooser chooser = recaf.filePrompts.getFileChooser();
 				int val = chooser.showOpenDialog(null);
 				if (val == JFileChooser.APPROVE_OPTION) {
 					try {
@@ -81,7 +81,7 @@ public void actionPerformed(ActionEvent e) {
 		mntmSaveJar.addActionListener(new ActionListener() {
 			@Override
 			public void actionPerformed(ActionEvent e) {
-				JFileChooser chooser = recaf.fileChoosers.createFileSaver();
+				JFileChooser chooser = recaf.filePrompts.createFileSaver();
 				int val = chooser.showOpenDialog(null);
 				if (val == JFileChooser.APPROVE_OPTION) {
 					try {

File: src/me/coley/recaf/ui/component/list/MemberNodeClickListener.java
Patch:
@@ -35,7 +35,7 @@
  * @author Matt
  */
 public class MemberNodeClickListener extends MouseAdapter {
-	private final Recaf recaf = Recaf.getInstance();
+	private final Recaf recaf = Recaf.INSTANCE;
 	private final ClassDisplayPanel display;
 	private final JList<?> list;
 	private final ClassNode node;

File: src/me/coley/recaf/ui/component/list/OpcodeList.java
Patch:
@@ -17,7 +17,7 @@
 @SuppressWarnings("serial")
 public class OpcodeList extends JList<AbstractInsnNode> {
 
-	private final Recaf recaf = Recaf.getInstance();
+	private final Recaf recaf = Recaf.INSTANCE;
 	private static final Color colEntryBG = new Color(200, 200, 200);
 	private static final Color colListBG = new Color(166, 166, 166);
 	/**

File: src/me/coley/recaf/ui/component/panel/AsmFlagsPanel.java
Patch:
@@ -21,7 +21,7 @@
  */
 @SuppressWarnings("serial")
 public class AsmFlagsPanel extends JPanel {
-	private final Options options = Recaf.getInstance().options;
+	private final Options options = Recaf.INSTANCE.options;
 	private ActionCheckBox inE, inD, inF, inC, outF, outM;
 
 	public AsmFlagsPanel() {

File: src/me/coley/recaf/ui/component/panel/ClassDisplayPanel.java
Patch:
@@ -27,8 +27,8 @@
 
 @SuppressWarnings("serial")
 public class ClassDisplayPanel extends JPanel {
-	private final Recaf recaf = Recaf.getInstance();
-	private final Gui gui = recaf.window;
+	private final Recaf recaf = Recaf.INSTANCE;
+	private final Gui gui = recaf.gui;
 	private final JDesktopPane desktopPane = new JDesktopPane();
 	private final ClassNode node;
 

File: src/me/coley/recaf/ui/component/panel/SearchPanel.java
Patch:
@@ -38,7 +38,7 @@ public class SearchPanel extends JPanel {
 	public static final int S_FIELD = 10;
 	public static final int S_METHOD = 20;
 	public static final int S_CLASS_NAME = 30, S_CLASS_REF = 31;
-	private final Recaf recaf = Recaf.getInstance();
+	private final Recaf recaf = Recaf.INSTANCE;
 	private final JTree tree = new JTree(new String[] {});
 
 	public SearchPanel(int type) {

File: src/me/coley/recaf/ui/component/panel/TagTypeSwitchPanel.java
Patch:
@@ -6,6 +6,7 @@
 import java.awt.event.ActionListener;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Set;
 import java.util.function.Function;
 
 import javax.swing.JList;
@@ -57,7 +58,7 @@ public TagTypeSwitchPanel(JList<AbstractInsnNode> list, Handle handle) {
 		add(scroll, BorderLayout.CENTER);
 	}
 
-	private void populate(String[] tags, Function<String, Integer> getter) {
+	private void populate(Set<String> tags, Function<String, Integer> getter) {
 		// Set layout based on number of options
 		// Add options
 		for (String op : tags) {

File: src/me/coley/recaf/ui/component/table/VariableTable.java
Patch:
@@ -23,7 +23,7 @@
 @SuppressWarnings("serial")
 public class VariableTable extends JTable {
 	private static final int INDEX = 0, NAME = 1, DESC = 2, SIGNATURE = 3;
-	private static final Options options = Recaf.getInstance().options;
+	private static final Options options = Recaf.INSTANCE.options;
 
 	/**
 	 * Construct a local variable table from the given method.

File: src/me/coley/recaf/ui/component/tree/JarFileTree.java
Patch:
@@ -24,7 +24,7 @@
  */
 @SuppressWarnings("serial")
 public class JarFileTree extends JPanel {
-	private final Recaf recaf = Recaf.getInstance();
+	private final Recaf recaf = Recaf.INSTANCE;
 	private final JTree tree = new JTree(new String[] { "Open a jar" });
 	private final JScrollPane scrollTree = new JScrollPane(tree);
 

File: src/me/coley/recaf/ui/component/tree/JavaTreeListener.java
Patch:
@@ -18,7 +18,7 @@
  * @author Matt
  */
 public class JavaTreeListener implements TreeSelectionListener, MouseListener, TreeExpansionListener {
-	private final Recaf recaf = Recaf.getInstance();
+	private final Recaf recaf = Recaf.INSTANCE;
 	private ASMTreeNode lastSelected;
 	private JTree tree;
 
@@ -52,9 +52,9 @@ public void mousePressed(MouseEvent e) {
 		}
 		// Update selection, open if double clicked.
 		Object selection = tree.getLastSelectedPathComponent();
-		if (selection instanceof ASMTreeNode) {
+		if (selection != null && selection instanceof ASMTreeNode) {
 			ASMTreeNode node = (ASMTreeNode) selection;
-			if (node != null && node == lastSelected && node.getNode() != null) {
+			if (node == lastSelected && node.getNode() != null) {
 				recaf.selectClass(node.getNode());
 			}
 			lastSelected = node;

File: src/me/coley/recaf/asm/PluginClassReader.java
Patch:
@@ -6,9 +6,9 @@
 import org.objectweb.asm.ClassReader;
 
 /**
- * TODO: Plugin system, allow users to run scripts on input <i>(Ex: Onload ->
+ * TODO: Plugin system, allow users to run scripts on input <i>(Ex: Onload &gt;-
  * run decrypt strings plugin)</i>.
- * 
+ *
  * @author Matt
  */
 public class PluginClassReader extends ClassReader {

File: src/me/coley/recaf/ui/FontUtil.java
Patch:
@@ -33,9 +33,9 @@ public class FontUtil {
 	/**
 	 * Create a bounding box for the visual representation of the given text.
 	 * 
-	 * @param text
-	 * @param font
-	 * @return
+	 * @param text The text.
+	 * @param font The font in which to render the text.
+	 * @return The bounding box.
 	 */
 	public static Rectangle2D getStringBounds(String text, Font font) {
 		return font.getStringBounds(text, frc);

File: src/me/coley/recaf/ui/component/panel/DecompilePanel.java
Patch:
@@ -58,7 +58,7 @@ public DecompilePanel(ClassNode cn, MethodNode mn) {
 	 * Returns a title for the containing parent to access (Groupbox /
 	 * InternalWindow).
 	 * 
-	 * @return
+	 * @return The title.
 	 */
 	public String getTitle() {
 		String s = "CFR: " + classNode.name;

File: src/me/coley/recaf/ui/component/panel/OpcodeTypeSwitchPanel.java
Patch:
@@ -166,9 +166,8 @@ private void setLayout(int size) {
 	}
 
 	/**
-	 * Get the number of radio buttons.
-	 * 
-	 * @return
+	 * @return the number of radio buttons.
+
 	 */
 	public int getOptionCount() {
 		return compToOpcode.keySet().size();

File: src/me/coley/recaf/ui/component/panel/TagTypeSwitchPanel.java
Patch:
@@ -83,9 +83,8 @@ private void setValue(int value) {
 	}
 
 	/**
-	 * Get the number of radio buttons.
-	 * 
-	 * @return
+	 * @return The number of radio buttons.
+
 	 */
 	public int getOptionCount() {
 		return compToTag.keySet().size();

File: src/me/coley/recaf/asm/AsmUtil.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.jar.JarEntry;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 

File: src/me/coley/recaf/asm/OpcodeUtil.java
Patch:
@@ -4,8 +4,7 @@
 import java.util.Map;
 
 import org.objectweb.asm.Opcodes;
-
-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;
+import org.objectweb.asm.tree.AbstractInsnNode;
 
 public class OpcodeUtil implements Opcodes {
 	private static Map<Integer, String> opcodeToName = new HashMap<>();

File: src/me/coley/recaf/ui/component/internalframe/TryCatchBox.java
Patch:
@@ -27,7 +27,7 @@ public class TryCatchBox extends BasicFrame {
 	private final JScrollPane scroll = new JScrollPane();
 
 	public TryCatchBox(MethodNode mn) {
-		super("Exceptions: " + mn.name);
+		super("Try-Catches: " + mn.name);
 		setBackground(bg);
 		setLayout(new BorderLayout());
 		add(scroll, BorderLayout.CENTER);

File: src/me/coley/recaf/ui/component/list/OpcodeCellRenderer.java
Patch:
@@ -66,7 +66,7 @@ public String getOpcodeText(OpcodeList list, AbstractInsnNode ain) {
 			if (insnVar.var < method.localVariables.size()) {
 				LocalVariableNode var = method.localVariables.get(insnVar.var);
 				String varStr = var.name;
-				s += color(colBlueDark, italic(" (" + varStr + ")"));
+				s += color(colBlueDark, italic(" (" + varStr + ") - " + getTypeStr(Type.getType(var.desc),options)));
 			} else if (insnVar.var == 0 && !Access.isStatic(method.access)) {
 				// If the local variable doesn't have a name, we can assume at
 				// index = 0 that it is 'this'.

File: src/me/coley/recaf/ui/component/action/ActionTextField.java
Patch:
@@ -19,7 +19,7 @@ public ActionTextField(String content, Consumer<String> textAction) {
 		addKeyListener(new KeyListener() {
 			@Override
 			public void keyTyped(KeyEvent e) {
-				textAction.accept(getText());
+				textAction.accept(getText() + e.getKeyChar());
 			}
 
 			@Override

File: src/me/coley/recaf/ui/component/list/MemberNodeClickListener.java
Patch:
@@ -82,7 +82,7 @@ private void createContextMenu(Object value, int x, int y) {
 			if (!Access.isAbstract(mn.access)) {
 				popup.add(new ActionMenuItem("Edit Opcodes", () -> openOpcodes(mn)));
 			}
-			if (mn.exceptions != null && !mn.exceptions.isEmpty()) {
+			if (mn.exceptions != null) {
 				popup.add(new ActionMenuItem("Edit Exceptions", () -> openExceptions(mn)));
 			}if (mn.tryCatchBlocks != null && !mn.tryCatchBlocks.isEmpty()) {
 				popup.add(new ActionMenuItem("Edit Try-Catch Blocks", () -> openTryCatchBlocks(mn)));

File: src/me/coley/recaf/Options.java
Patch:
@@ -63,7 +63,6 @@ public void load() {
 				if (value == null) {
 					continue;
 				}
-				System.out.print(field.get(this) + " -> ");
 				field.setAccessible(true);
 				if (value.isBoolean()) {
 					field.set(this, value.asBoolean());
@@ -72,9 +71,9 @@ public void load() {
 				}else if (value.isString()) {
 					field.set(this, value.asString());
 				}
-				System.out.println(field.get(this));
 			}
 		} catch (Exception e) {
+			// TODO: Propper logging
 			e.printStackTrace();
 		}
 	}

File: src/me/coley/recaf/ui/component/panel/AsmFlagsPanel.java
Patch:
@@ -61,6 +61,6 @@ private void update() {
 			out |= ClassWriter.COMPUTE_MAXS;
 		}
 		Program.getInstance().options.classFlagsInput = in;
-		Program.getInstance().options.classFlagsInput = out;
+		Program.getInstance().options.classFlagsOutput = out;
 	}
 }

File: src/me/coley/recaf/ui/component/internalframe/BasicFrame.java
Patch:
@@ -14,7 +14,7 @@ public BasicFrame() {
 	
 	public BasicFrame(String title) {
 		super(title);
-		setMaximumSize(new Dimension(300, 300));
+		setMaximumSize(new Dimension(400, 400));
 		setResizable(true);
 		setIconifiable(true);
 		setClosable(true);
@@ -23,7 +23,6 @@ public BasicFrame(String title) {
 	@Override
 	public void setVisible(boolean visible) {
 		super.setVisible(visible);
-
 		pack();
 		setSize(getWidth() + padding, getHeight() + padding);
 	}

File: src/me/coley/recaf/ui/component/internalframe/OpcodeListBox.java
Patch:
@@ -13,13 +13,14 @@
 @SuppressWarnings("serial")
 public class OpcodeListBox extends BasicFrame {
 	private static final Color bg = new Color(166, 166, 166);
+
 	public OpcodeListBox(ClassDisplayPanel display, MethodNode mn) throws Exception {
 		super("Opcodes: " + mn.name);
-		setMaximumSize(new Dimension(1000, 1000));
 		setBackground(bg);
 		setLayout(new BorderLayout());
+		setMaximumSize(new Dimension(900, 900));
 		// Opcodes list
-		add(new JScrollPane(new OpcodeList(display,mn)), BorderLayout.CENTER);
+		add(new JScrollPane(new OpcodeList(display, mn)), BorderLayout.CENTER);
 		setVisible(true);
 	}
 }

File: src/me/coley/recaf/ui/component/tree/JarFileTree.java
Patch:
@@ -32,6 +32,7 @@ public JarFileTree() {
 		try {
 			tree.setCellRenderer(new JavaTreeRenderer());
 			JavaTreeListener listener = new JavaTreeListener();
+			tree.addTreeExpansionListener(listener);
 			tree.addTreeSelectionListener(listener);
 			tree.addMouseListener(listener);
 		} catch (Exception e) {

File: src/me/coley/recaf/asm/JarData.java
Patch:
@@ -28,7 +28,7 @@ public void save(File jar) throws IOException {
 		try (JarOutputStream output = new JarOutputStream(new FileOutputStream(jar))) {
 			// write classes
 			for (String name : classes.keySet()) {
-				ClassWriter cw = new NonReflectionWriter(callback, classes);
+				ClassWriter cw = new NonReflectionWriter(callback);
 				classes.get(name).accept(cw);
 				output.putNextEntry(new JarEntry(name.replace(".", "/") + ".class"));
 				output.write(cw.toByteArray());

File: src/me/coley/recaf/asm/NonReflectionWriter.java
Patch:
@@ -14,13 +14,13 @@
  */
 public class NonReflectionWriter extends ClassWriter {
 	private static final String DEFAULT_PARENT = "java/lang/Object";
-	private final Map<String, ClassNode> nodes;
 	private final Program callback;
+	private final Map<String, ClassNode> nodes;
 
-	public NonReflectionWriter(Program callback, Map<String, ClassNode> nodes) {
+	public NonReflectionWriter(Program callback) {
 		super(callback.options.classFlagsOutput);
 		this.callback = callback;
-		this.nodes = nodes;
+		this.nodes = callback.jarData.classes;
 	}
 
 	@Override

File: src/me/coley/recaf/ui/component/ClassDisplayPanel.java
Patch:
@@ -106,6 +106,7 @@ private JInternalFrame setupMethodsFrame() {
 		frameMethods.setBounds(445, 11, 180, 120);
 		frameMethods.setVisible(true);
 		frameMethods.setLayout(new BorderLayout());
+		
 		JList<MethodNode> methods = new JList<>();
 		methods.setCellRenderer(new MemberNodeRenderer(callback.options));
 		methods.addMouseListener(new MemberNodeClickListener(callback, this, node, methods));
@@ -115,6 +116,8 @@ private JInternalFrame setupMethodsFrame() {
 		}
 		methods.setModel(model);
 		frameMethods.add(new JScrollPane(methods), BorderLayout.CENTER);
+		// TODO: Switch to table
+		//frameMethods.add(new JScrollPane(MemberTable.create(node.methods)), BorderLayout.CENTER);
 		frameMethods.pack();
 		return frameMethods;
 	}

File: src/me/coley/recaf/ui/component/list/MemberNodeRenderer.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.awt.Color;
 import java.awt.Component;
+import java.awt.Dimension;
+
 import javax.swing.BorderFactory;
 import javax.swing.BoxLayout;
 import javax.swing.Icon;
@@ -102,6 +104,7 @@ private void addAccess(JPanel content, int access, boolean method, boolean selec
 
 	private void add(JPanel content, boolean selected, Icon icon) {
 		JLabel lbl = new JLabel(icon);
+		lbl.setPreferredSize(new Dimension(18,16));
 		formatComponent(lbl, selected);
 		content.add(lbl);
 	}

File: src/me/coley/recaf/ui/component/table/VariableTable.java
Patch:
@@ -1,4 +1,4 @@
-package me.coley.recaf.ui.component;
+package me.coley.recaf.ui.component.table;
 
 import java.awt.Dimension;
 

File: src/me/coley/recaf/ui/component/VariableTable.java
Patch:
@@ -39,7 +39,7 @@ public static VariableTable create(MethodNode method) {
 				maxIndexSize = sIndex;
 			}
 			// If possible, add data from local variable table.
-			if (method.localVariables != null) {
+			if (method.localVariables != null && i < method.localVariables.size()) {
 				LocalVariableNode variable = method.localVariables.get(i);
 				data[i][1] = variable.name;
 				data[i][2] = variable.desc;

File: src/me/coley/recaf/ui/component/AccessPanel.java
Patch:
@@ -24,8 +24,8 @@ public class AccessPanel extends JPanel {
 	public final static String TITLE_FIELD = "Field Access";
 	public final static String TITLE_METHOD = "Method Access";
 	public final static String TITLE_PARAMETER = "Parameter Access";
-	private final Consumer<Integer> action;
 	private final Map<JCheckBox, Integer> compToAccess = new HashMap<>();
+	private final Consumer<Integer> action;
 	private final String title;
 
 	public AccessPanel(ClassNode clazz) throws Exception {

File: src/me/coley/recaf/ui/component/list/OpcodeMouseListener.java
Patch:
@@ -14,6 +14,7 @@
 import me.coley.recaf.Program;
 import me.coley.recaf.asm.OpcodeUtil;
 import me.coley.recaf.ui.component.ClassDisplayPanel;
+import me.coley.recaf.ui.component.InsnOpcodeSelector;
 import me.coley.recaf.ui.component.LabeledComponent;
 import me.coley.recaf.ui.component.ReleaseListener;
 import me.coley.recaf.ui.component.VariableTable;
@@ -140,6 +141,7 @@ public void actionPerformed(ActionEvent e) {
 					})));
 					break;
 				}
+				frame.add(new InsnOpcodeSelector(list,ain));
 				display.addWindow(frame);
 				frame.setVisible(true);
 

File: src/me/coley/recaf/ui/component/ClassDisplayPanel.java
Patch:
@@ -69,7 +69,7 @@ private JInternalFrame setupClassFrame() {
 			})),
 			new LabeledComponent("Access:", new ActionButton("Edit Access",() -> {
 				try {					
-					addWindow(new AccessBox(AccessBox.TITLE_CLASS, node.access, acc -> node.access = acc));
+					addWindow(new AccessBox(node));
 				} catch (Exception e) {
 					exception(e);
 				}

File: src/me/coley/recaf/ui/component/list/OpcodeCellRenderer.java
Patch:
@@ -135,7 +135,7 @@ public String getOpcodeText(AbstractInsnNode ain) {
 				case IFNONNULL: z = "($ != null -> offset)";break;
 				}
 				//@formatter:on
-				s += " " + italic(color(colGray, z));
+				s += " " + italic(color(colGray, escape(z)));
 			}
 			break;
 		case AbstractInsnNode.LDC_INSN:

File: src/me/coley/recaf/ui/component/list/OpcodeList.java
Patch:
@@ -16,14 +16,15 @@
 @SuppressWarnings("serial")
 public class OpcodeList extends JList<AbstractInsnNode> {
 	private static final Color colEntryBG =  new Color(200,200,200);
+	private static final Color colListBG =  new Color(166,166,166);
 
 	/**
 	 * Map of background-color overrides to be drawn by the cell renderer.
 	 */
 	private Map<AbstractInsnNode, Color> colorMap = new HashMap<>();
 
 	public OpcodeList(Program callback, MethodNode mn) {
-		setBackground(colEntryBG);
+		setBackground(colListBG);
 		setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
 		DefaultListModel<AbstractInsnNode> model = new DefaultListModel<>();
 		for (AbstractInsnNode ain : mn.instructions.toArray()) {

