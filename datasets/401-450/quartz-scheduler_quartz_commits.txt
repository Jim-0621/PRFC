File: quartz/src/main/java/org/quartz/impl/triggers/DailyTimeIntervalTriggerImpl.java
Patch:
@@ -389,7 +389,7 @@ public int getRepeatInterval() {
      *              if repeatInterval is &lt; 1
      */
     public void setRepeatInterval( int repeatInterval) {
-        if (repeatInterval < 0) {
+        if (repeatInterval < 1) {
             throw new IllegalArgumentException(
                     "Repeat interval must be >= 1");
         }

File: quartz/src/main/java/org/quartz/impl/triggers/DailyTimeIntervalTriggerImpl.java
Patch:
@@ -389,7 +389,7 @@ public int getRepeatInterval() {
      *              if repeatInterval is &lt; 1
      */
     public void setRepeatInterval( int repeatInterval) {
-        if (repeatInterval < 0) {
+        if (repeatInterval < 1) {
             throw new IllegalArgumentException(
                     "Repeat interval must be >= 1");
         }

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -663,7 +663,7 @@ public void initialize(ClassLoadHelper loadHelper,
             }
             
             if (getUseDBLocks()) {
-                if(getDriverDelegateClass() != null && getDriverDelegateClass().equals(MSSQLDelegate.class.getName())) {
+                if(getDriverDelegateClass() != null && getDriverDelegateClass().contains(MSSQLDelegate.class.getSimpleName())) {
                     if(getSelectWithLockSQL() == null) {
                         String msSqlDflt = "SELECT * FROM {0}LOCKS WITH (UPDLOCK,ROWLOCK) WHERE " + COL_SCHEDULER_NAME + " = {1} AND LOCK_NAME = ?";
                         getLog().info("Detected usage of MSSQLDelegate class - defaulting 'selectWithLockSQL' to '{}'.", msSqlDflt);

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -663,7 +663,7 @@ public void initialize(ClassLoadHelper loadHelper,
             }
             
             if (getUseDBLocks()) {
-                if(getDriverDelegateClass() != null && getDriverDelegateClass().equals(MSSQLDelegate.class.getName())) {
+                if(getDriverDelegateClass() != null && getDriverDelegateClass().contains("MSSQLDelegate")) {
                     if(getSelectWithLockSQL() == null) {
                         String msSqlDflt = "SELECT * FROM {0}LOCKS WITH (UPDLOCK,ROWLOCK) WHERE " + COL_SCHEDULER_NAME + " = {1} AND LOCK_NAME = ?";
                         getLog().info("Detected usage of MSSQLDelegate class - defaulting 'selectWithLockSQL' to '{}'.", msSqlDflt);

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -663,7 +663,7 @@ public void initialize(ClassLoadHelper loadHelper,
             }
             
             if (getUseDBLocks()) {
-                if(getDriverDelegateClass() != null && getDriverDelegateClass().equals(MSSQLDelegate.class.getName())) {
+                if(getDriverDelegateClass() != null && getDriverDelegateClass().contains("MSSQLDelegate")) {
                     if(getSelectWithLockSQL() == null) {
                         String msSqlDflt = "SELECT * FROM {0}LOCKS WITH (UPDLOCK,ROWLOCK) WHERE " + COL_SCHEDULER_NAME + " = {1} AND LOCK_NAME = ?";
                         getLog().info("Detected usage of MSSQLDelegate class - defaulting 'selectWithLockSQL' to '{}'.", msSqlDflt);

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -3173,9 +3173,9 @@ protected DriverDelegate getDelegate() throws NoSuchDelegateException {
                     }
 
                     delegate = delegateClass.newInstance();
-                    
+
                     delegate.initialize(getLog(), tablePrefix, instanceName, instanceId, getClassLoadHelper(), canUseProperties(), getDriverDelegateInitString());
-                    
+
                 } catch (InstantiationException | IllegalAccessException e) {
                     throw new NoSuchDelegateException("Couldn't create delegate: "
                             + e.getMessage(), e);

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -158,7 +158,7 @@ public void initialize(Logger logger, String tablePrefix, String schedName, Stri
                 for(String trigDelClassName: trigDelegates) {
                     try {
                         Class<?> trigDelClass = classLoadHelper.loadClass(trigDelClassName);
-                        addTriggerPersistenceDelegate((TriggerPersistenceDelegate) trigDelClass.newInstance());
+                        addTriggerPersistenceDelegate((TriggerPersistenceDelegate) trigDelClass.getDeclaredConstructor().newInstance());
                     } catch (Exception e) {
                         throw new NoSuchDelegateException("Error instantiating TriggerPersistenceDelegate of type: " + trigDelClassName, e);
                     } 

File: quartz/src/main/java/org/quartz/utils/PropertiesParser.java
Patch:
@@ -258,15 +258,15 @@ public int[] getIntArrayProperty(String name, int[] def)
         try {
             while (stok.hasMoreTokens()) {
                 try {
-                    ints.add(new Integer(stok.nextToken().trim()));
+                    ints.add(Integer.valueOf(stok.nextToken().trim()));
                 } catch (NumberFormatException nfe) {
                     throw new NumberFormatException(" '" + vals + "'");
                 }
             }
                         
             int[] outInts = new int[ints.size()];
             for (int i = 0; i < ints.size(); i++) {
-                outInts[i] = (Integer) ints.get(i);
+                outInts[i] = ints.get(i);
             }
             return outInts;
         } catch (Exception e) {

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -158,7 +158,7 @@ public void initialize(Logger logger, String tablePrefix, String schedName, Stri
                 for(String trigDelClassName: trigDelegates) {
                     try {
                         Class<?> trigDelClass = classLoadHelper.loadClass(trigDelClassName);
-                        addTriggerPersistenceDelegate((TriggerPersistenceDelegate) trigDelClass.newInstance());
+                        addTriggerPersistenceDelegate((TriggerPersistenceDelegate) trigDelClass.getDeclaredConstructor().newInstance());
                     } catch (Exception e) {
                         throw new NoSuchDelegateException("Error instantiating TriggerPersistenceDelegate of type: " + trigDelClassName, e);
                     } 

File: quartz/src/main/java/org/quartz/utils/PropertiesParser.java
Patch:
@@ -258,15 +258,15 @@ public int[] getIntArrayProperty(String name, int[] def)
         try {
             while (stok.hasMoreTokens()) {
                 try {
-                    ints.add(new Integer(stok.nextToken().trim()));
+                    ints.add(Integer.valueOf(stok.nextToken().trim()));
                 } catch (NumberFormatException nfe) {
                     throw new NumberFormatException(" '" + vals + "'");
                 }
             }
                         
             int[] outInts = new int[ints.size()];
             for (int i = 0; i < ints.size(); i++) {
-                outInts[i] = (Integer) ints.get(i);
+                outInts[i] = ints.get(i);
             }
             return outInts;
         } catch (Exception e) {

File: quartz/src/main/java/org/quartz/core/JobRunShell.java
Patch:
@@ -299,7 +299,7 @@ private boolean notifyListenersBeginning(JobExecutionContext jobExCtx) throws Ve
                             + jobExCtx.getTrigger().getKey() + " job= "
                             + jobExCtx.getJobDetail().getKey(), se);
 
-            vetoed = true;
+            return false;
         }
 
         if(vetoed) {

File: quartz/src/main/java/org/quartz/core/JobRunShell.java
Patch:
@@ -209,8 +209,7 @@ public void run() {
                 } catch (Throwable e) {
                     endTime = System.currentTimeMillis();
                     getLog().error("Job {} threw an unhandled Exception: ", jobDetail.getKey(), e);
-                    SchedulerException se = new SchedulerException(
-                            "Job threw an unhandled exception.", e);
+                    SchedulerException se = new SchedulerException(jec, "Job threw an unhandled exception.", e);
                     qs.notifySchedulerListenersError("Job "
                             + jec.getJobDetail().getKey()
                             + " threw an exception.", se);
@@ -300,7 +299,7 @@ private boolean notifyListenersBeginning(JobExecutionContext jobExCtx) throws Ve
                             + jobExCtx.getTrigger().getKey() + " job= "
                             + jobExCtx.getJobDetail().getKey(), se);
 
-            return false;
+            vetoed = true;
         }
 
         if(vetoed) {

File: quartz/src/test/java/org/quartz/xml/XMLSchedulingDataProcessorTest.java
Patch:
@@ -376,7 +376,7 @@ public void testXmlParserConfiguration() throws Exception {
 
 			fail("Expected parser configuration to block DOCTYPE. The following was injected into the job description field: " + description);
 		} catch (SAXParseException e) {
-			assertTrue(e.getMessage().contains("DOCTYPE is disallowed"));
+			assertTrue(e.getMessage().toLowerCase().contains("doctype"));
 		} finally {
 			if (scheduler != null)
 				scheduler.shutdown();

File: quartz/src/test/java/org/quartz/xml/XMLSchedulingDataProcessorTest.java
Patch:
@@ -376,7 +376,7 @@ public void testXmlParserConfiguration() throws Exception {
 
 			fail("Expected parser configuration to block DOCTYPE. The following was injected into the job description field: " + description);
 		} catch (SAXParseException e) {
-			assertTrue(e.getMessage().contains("DOCTYPE is disallowed"));
+			assertTrue(e.getMessage().toLowerCase().contains("doctype"));
 		} finally {
 			if (scheduler != null)
 				scheduler.shutdown();

File: quartz/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -694,7 +694,7 @@ public void shutdown(boolean waitForJobsToComplete) {
                         ((InterruptableJob)job.getJobInstance()).interrupt();
                     } catch (Throwable e) {
                         // do nothing, this was just a courtesy effort
-                        getLog().warn("Encountered error when interrupting job {} during shutdown: {}", job.getJobDetail().getKey(), e);
+                        getLog().warn("Encountered error when interrupting job {} during shutdown: {}", job.getJobDetail().getKey(), e.getMessage(), e);
                     }
             }
         }

File: quartz/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -694,7 +694,7 @@ public void shutdown(boolean waitForJobsToComplete) {
                         ((InterruptableJob)job.getJobInstance()).interrupt();
                     } catch (Throwable e) {
                         // do nothing, this was just a courtesy effort
-                        getLog().warn("Encountered error when interrupting job {} during shutdown: {}", job.getJobDetail().getKey(), e);
+                        getLog().warn("Encountered error when interrupting job {} during shutdown: {}", job.getJobDetail().getKey(), e.getMessage(), e);
                     }
             }
         }

File: quartz/src/main/java/org/quartz/spi/JobFactory.java
Patch:
@@ -30,7 +30,7 @@
  * <p>
  * This interface may be of use to those wishing to have their application
  * produce <code>Job</code> instances via some special mechanism, such as to
- * give the opertunity for dependency injection.
+ * give the opportunity for dependency injection.
  * </p>
  * 
  * @see org.quartz.Scheduler#setJobFactory(JobFactory)

File: quartz/src/main/java/org/quartz/plugins/xml/FileScanJob.java
Patch:
@@ -19,7 +19,6 @@
 package org.quartz.plugins.xml;
 
 import org.quartz.*;
-import org.quartz.jobs.FileScanListener;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -99,7 +98,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
                     FILE_SCAN_LISTENER_NAME + "' not found in merged JobDataMap");
         }
 
-        org.quartz.jobs.FileScanListener listener = (FileScanListener)schedCtx.get(listenerName);
+        FileScanListener listener = (FileScanListener)schedCtx.get(listenerName);
         
         if(listener == null) {
             throw new JobExecutionException("FileScanListener named '" + 

File: quartz/src/main/java/org/quartz/plugins/xml/FileScanJob.java
Patch:
@@ -19,7 +19,6 @@
 package org.quartz.plugins.xml;
 
 import org.quartz.*;
-import org.quartz.jobs.FileScanListener;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -99,7 +98,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
                     FILE_SCAN_LISTENER_NAME + "' not found in merged JobDataMap");
         }
 
-        org.quartz.jobs.FileScanListener listener = (FileScanListener)schedCtx.get(listenerName);
+        FileScanListener listener = (FileScanListener)schedCtx.get(listenerName);
         
         if(listener == null) {
             throw new JobExecutionException("FileScanListener named '" + 

File: quartz/src/main/java/org/quartz/Matcher.java
Patch:
@@ -33,7 +33,7 @@ public interface Matcher<T extends Key<?>> extends Serializable {
 
     boolean isMatch(T key);
  
-    public int hashCode();
+    int hashCode();
 
-    public boolean equals(Object obj);
+    boolean equals(Object obj);
 }

File: quartz/src/main/java/org/quartz/impl/triggers/CoreTrigger.java
Patch:
@@ -25,6 +25,6 @@
  */
 public interface CoreTrigger extends Trigger {
 
-    public boolean hasAdditionalProperties();
+    boolean hasAdditionalProperties();
     
 }

File: quartz/src/main/java/org/quartz/spi/JobStore.java
Patch:
@@ -150,7 +150,7 @@ void storeJobAndTrigger(JobDetail newJob, OperableTrigger newTrigger)
     void storeJob(JobDetail newJob, boolean replaceExisting) 
         throws ObjectAlreadyExistsException, JobPersistenceException;
 
-    public void storeJobsAndTriggers(Map<JobDetail, Set<? extends Trigger>> triggersAndJobs, boolean replace)
+    void storeJobsAndTriggers(Map<JobDetail, Set<? extends Trigger>> triggersAndJobs, boolean replace)
         throws ObjectAlreadyExistsException, JobPersistenceException;
 
     /**
@@ -170,7 +170,7 @@ public void storeJobsAndTriggers(Map<JobDetail, Set<? extends Trigger>> triggers
     boolean removeJob(JobKey jobKey) 
         throws JobPersistenceException;
     
-    public boolean removeJobs(List<JobKey> jobKeys) 
+    boolean removeJobs(List<JobKey> jobKeys)
         throws JobPersistenceException;
     
     /**
@@ -221,7 +221,7 @@ void storeTrigger(OperableTrigger newTrigger, boolean replaceExisting)
      */
     boolean removeTrigger(TriggerKey triggerKey) throws JobPersistenceException;
 
-    public boolean removeTriggers(List<TriggerKey> triggerKeys)
+    boolean removeTriggers(List<TriggerKey> triggerKeys)
         throws JobPersistenceException;
 
     /**

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -3542,7 +3542,7 @@ protected void clusterRecover(Connection conn, List<SchedulerStateRecord> failed
                                         "recover_"
                                                 + rec.getSchedulerInstanceId()
                                                 + "_"
-                                                + String.valueOf(recoverIds++),
+                                                + recoverIds++,
                                         Scheduler.DEFAULT_RECOVERY_GROUP,
                                         new Date(ftRec.getScheduleTimestamp()));
                                 rcvryTrig.setJobName(jKey.getName());

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -485,7 +485,7 @@ public List<OperableTrigger> selectTriggersForRecoveringJobs(Connection conn)
                 int priority = rs.getInt(COL_PRIORITY);
                 @SuppressWarnings("deprecation")
                 SimpleTriggerImpl rcvryTrig = new SimpleTriggerImpl("recover_"
-                        + instanceId + "_" + String.valueOf(dumId++),
+                        + instanceId + "_" + dumId++,
                         Scheduler.DEFAULT_RECOVERY_GROUP, new Date(scheduledTime));
                 rcvryTrig.setJobName(jobName);
                 rcvryTrig.setJobGroup(jobGroup);

File: quartz/src/main/java/org/quartz/simpl/RAMJobStore.java
Patch:
@@ -892,7 +892,7 @@ public Set<JobKey> getJobKeys(GroupMatcher<JobKey> matcher) {
             }
         }
 
-        return outList == null ? java.util.Collections.<JobKey>emptySet() : outList;
+        return outList == null ? java.util.Collections.emptySet() : outList;
     }
 
     /**
@@ -956,7 +956,7 @@ public Set<TriggerKey> getTriggerKeys(GroupMatcher<TriggerKey> matcher) {
             }
         }
 
-        return outList == null ? Collections.<TriggerKey>emptySet() : outList;
+        return outList == null ? Collections.emptySet() : outList;
     }
 
     /**

File: quartz/src/main/java/org/quartz/TriggerBuilder.java
Patch:
@@ -86,7 +86,7 @@ private TriggerBuilder() {
      * @return the new TriggerBuilder
      */
     public static TriggerBuilder<Trigger> newTrigger() {
-        return new TriggerBuilder<Trigger>();
+        return new TriggerBuilder<>();
     }
     
     /**

File: quartz/src/main/java/org/quartz/TriggerUtils.java
Patch:
@@ -75,7 +75,7 @@ private TriggerUtils() {
      */
     public static List<Date> computeFireTimes(OperableTrigger trigger, org.quartz.Calendar cal,
             int numTimes) {
-        LinkedList<Date> lst = new LinkedList<Date>();
+        LinkedList<Date> lst = new LinkedList<>();
 
         OperableTrigger t = (OperableTrigger) trigger.clone();
 
@@ -169,7 +169,7 @@ public static Date computeEndTimeToAllowParticularNumberOfFirings(OperableTrigge
      */
     public static List<Date> computeFireTimesBetween(OperableTrigger trigger,
             org.quartz.Calendar cal, Date from, Date to) {
-        LinkedList<Date> lst = new LinkedList<Date>();
+        LinkedList<Date> lst = new LinkedList<>();
 
         OperableTrigger t = (OperableTrigger) trigger.clone();
 

File: quartz/src/main/java/org/quartz/core/QuartzSchedulerResources.java
Patch:
@@ -74,7 +74,7 @@ public class QuartzSchedulerResources {
 
     private JobRunShellFactory jobRunShellFactory;
 
-    private final List<SchedulerPlugin> schedulerPlugins = new ArrayList<SchedulerPlugin>(10);
+    private final List<SchedulerPlugin> schedulerPlugins = new ArrayList<>(10);
     
     private boolean makeSchedulerThreadDaemon = false;
 

File: quartz/src/main/java/org/quartz/core/QuartzSchedulerThread.java
Patch:
@@ -354,7 +354,7 @@ public void run() {
                             continue;
 
                         // set triggers to 'executing'
-                        List<TriggerFiredResult> bundles = new ArrayList<TriggerFiredResult>();
+                        List<TriggerFiredResult> bundles = new ArrayList<>();
 
                         boolean goAhead = true;
                         synchronized(sigLock) {

File: quartz/src/main/java/org/quartz/core/jmx/JobDataMapSupport.java
Patch:
@@ -79,7 +79,7 @@ public static CompositeData toCompositeData(String key, String value) {
      */
     public static TabularData toTabularData(JobDataMap jobDataMap) {
         TabularData tData = new TabularDataSupport(TABULAR_TYPE);
-        ArrayList<CompositeData> list = new ArrayList<CompositeData>();
+        ArrayList<CompositeData> list = new ArrayList<>();
         Iterator<String> iter = jobDataMap.keySet().iterator();
         while (iter.hasNext()) {
             String key = iter.next();

File: quartz/src/main/java/org/quartz/core/jmx/JobDetailSupport.java
Patch:
@@ -130,7 +130,7 @@ public static CompositeData toCompositeData(JobDetail jobDetail) {
     public static TabularData toTabularData(JobDetail[] jobDetails) {
         TabularData tData = new TabularDataSupport(TABULAR_TYPE);
         if (jobDetails != null) {
-            ArrayList<CompositeData> list = new ArrayList<CompositeData>();
+            ArrayList<CompositeData> list = new ArrayList<>();
             for (JobDetail jobDetail : jobDetails) {
                 list.add(toCompositeData(jobDetail));
             }

File: quartz/src/main/java/org/quartz/core/jmx/JobExecutionContextSupport.java
Patch:
@@ -89,7 +89,7 @@ public static CompositeData toCompositeData(JobExecutionContext jec)
     public static TabularData toTabularData(
             final List<JobExecutionContext> executingJobs)
             throws SchedulerException {
-        List<CompositeData> list = new ArrayList<CompositeData>();
+        List<CompositeData> list = new ArrayList<>();
         for (JobExecutionContext executingJob : executingJobs) {
             list.add(toCompositeData(executingJob));
         }

File: quartz/src/main/java/org/quartz/core/jmx/TriggerSupport.java
Patch:
@@ -100,7 +100,7 @@ public static CompositeData toCompositeData(Trigger trigger) {
     public static TabularData toTabularData(List<? extends Trigger> triggers) {
         TabularData tData = new TabularDataSupport(TABULAR_TYPE);
         if (triggers != null) {
-            ArrayList<CompositeData> list = new ArrayList<CompositeData>();
+            ArrayList<CompositeData> list = new ArrayList<>();
             for (Trigger trigger : triggers) {
                 list.add(toCompositeData(trigger));
             }
@@ -110,7 +110,7 @@ public static TabularData toTabularData(List<? extends Trigger> triggers) {
     }
     
     public static List<CompositeData> toCompositeList(List<? extends Trigger> triggers) {
-        List<CompositeData> result = new ArrayList<CompositeData>();
+        List<CompositeData> result = new ArrayList<>();
         for(Trigger trigger : triggers) {
             CompositeData cData = TriggerSupport.toCompositeData(trigger);
             if(cData != null) {

File: quartz/src/main/java/org/quartz/impl/JobExecutionContextImpl.java
Patch:
@@ -74,7 +74,7 @@ public class JobExecutionContextImpl implements java.io.Serializable, JobExecuti
     
     private Object result;
     
-    private final HashMap<Object, Object> data = new HashMap<Object, Object>();
+    private final HashMap<Object, Object> data = new HashMap<>();
 
     /*
      * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

File: quartz/src/main/java/org/quartz/impl/RemoteMBeanScheduler.java
Patch:
@@ -718,7 +718,7 @@ public Set<JobKey> getJobKeys(GroupMatcher<JobKey> matcher) throws SchedulerExce
                     new Object[] { matcher.getCompareToValue() },
                     new String[] { String.class.getName() });
 
-            return new HashSet<JobKey>(keys);
+            return new HashSet<>(keys);
         } else {
             throw new SchedulerException("Only equals matcher are supported for looking up JobKeys");
         }

File: quartz/src/main/java/org/quartz/impl/SchedulerRepository.java
Patch:
@@ -56,7 +56,7 @@ public class SchedulerRepository {
      */
 
     private SchedulerRepository() {
-        schedulers = new HashMap<String, Scheduler>();
+        schedulers = new HashMap<>();
     }
 
     /*

File: quartz/src/main/java/org/quartz/impl/calendar/AnnualCalendar.java
Patch:
@@ -43,7 +43,7 @@ public class AnnualCalendar extends BaseCalendar implements Calendar,
 
     static final long serialVersionUID = 7346867105876610961L;
 
-    private ArrayList<java.util.Calendar> excludeDays = new ArrayList<java.util.Calendar>();
+    private ArrayList<java.util.Calendar> excludeDays = new ArrayList<>();
 
     // true, if excludeDays is sorted
     private boolean dataSorted = false;
@@ -66,7 +66,7 @@ public AnnualCalendar(Calendar baseCalendar, TimeZone timeZone) {
     @Override
     public Object clone() {
         AnnualCalendar clone = (AnnualCalendar) super.clone();
-        clone.excludeDays = new ArrayList<java.util.Calendar>(excludeDays);
+        clone.excludeDays = new ArrayList<>(excludeDays);
         return clone;
     }
 
@@ -135,7 +135,7 @@ public boolean isDayExcluded(java.util.Calendar day) {
      */
     public void setDaysExcluded(ArrayList<java.util.Calendar> days) {
         if (days == null) {
-            excludeDays = new ArrayList<java.util.Calendar>();
+            excludeDays = new ArrayList<>();
         } else {
             excludeDays = days;
         }

File: quartz/src/main/java/org/quartz/impl/calendar/DailyCalendar.java
Patch:
@@ -653,7 +653,7 @@ public String toString() {
      * Helper method to split the given string by the given delimiter.
      */
     private String[] split(String string, String delim) {
-        ArrayList<String> result = new ArrayList<String>();
+        ArrayList<String> result = new ArrayList<>();
         
         StringTokenizer stringTokenizer = new StringTokenizer(string, delim);
         while (stringTokenizer.hasMoreTokens()) {

File: quartz/src/main/java/org/quartz/impl/calendar/HolidayCalendar.java
Patch:
@@ -47,7 +47,7 @@ public class HolidayCalendar extends BaseCalendar implements Calendar,
     static final long serialVersionUID = -7590908752291814693L;
     
     // A sorted set to store the holidays
-    private TreeSet<Date> dates = new TreeSet<Date>();
+    private TreeSet<Date> dates = new TreeSet<>();
 
     public HolidayCalendar() {
     }
@@ -67,7 +67,7 @@ public HolidayCalendar(Calendar baseCalendar, TimeZone timeZone) {
     @Override
     public Object clone() {
         HolidayCalendar clone = (HolidayCalendar) super.clone();
-        clone.dates = new TreeSet<Date>(dates);
+        clone.dates = new TreeSet<>(dates);
         return clone;
     }
     

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/DBSemaphore.java
Patch:
@@ -41,7 +41,7 @@ public abstract class DBSemaphore implements Semaphore, Constants,
      * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      */
 
-    final ThreadLocal<HashSet<String>> lockOwners = new ThreadLocal<HashSet<String>>();
+    final ThreadLocal<HashSet<String>> lockOwners = new ThreadLocal<>();
 
     private String sql;
     private String insertSql;
@@ -83,7 +83,7 @@ protected Logger getLog() {
     private HashSet<String> getThreadLocks() {
         HashSet<String> threadLocks = lockOwners.get();
         if (threadLocks == null) {
-            threadLocks = new HashSet<String>();
+            threadLocks = new HashSet<>();
             lockOwners.set(threadLocks);
         }
         return threadLocks;

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/DailyTimeIntervalTriggerPersistenceDelegate.java
Patch:
@@ -114,7 +114,7 @@ protected TriggerPropertyBundle getTriggerPropertyBundle(SimplePropertiesTrigger
                 .withRepeatCount(repeatCount);
                 
         if (daysOfWeekStr != null) {
-            Set<Integer> daysOfWeek = new HashSet<Integer>();
+            Set<Integer> daysOfWeek = new HashSet<>();
             String[] nums = daysOfWeekStr.split(",");
             if (nums.length > 0) {
                 for (String num : nums) {

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/JTANonClusteredSemaphore.java
Patch:
@@ -73,9 +73,9 @@ public class JTANonClusteredSemaphore implements Semaphore {
 
     public static final String DEFAULT_TRANSACTION_MANAGER_LOCATION = "java:TransactionManager";
 
-    final ThreadLocal<HashSet<String>> lockOwners = new ThreadLocal<HashSet<String>>();
+    final ThreadLocal<HashSet<String>> lockOwners = new ThreadLocal<>();
 
-    final HashSet<String> locks = new HashSet<String>();
+    final HashSet<String> locks = new HashSet<>();
 
     private final Logger log = LoggerFactory.getLogger(getClass());
 
@@ -101,7 +101,7 @@ public void setTransactionManagerJNDIName(String transactionManagerJNDIName) {
     private HashSet<String> getThreadLocks() {
         HashSet<String> threadLocks = lockOwners.get();
         if (threadLocks == null) {
-            threadLocks = new HashSet<String>();
+            threadLocks = new HashSet<>();
             lockOwners.set(threadLocks);
         }
         return threadLocks;

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/SimpleSemaphore.java
Patch:
@@ -41,9 +41,9 @@ public class SimpleSemaphore implements Semaphore {
      * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      */
 
-    final ThreadLocal<HashSet<String>> lockOwners = new ThreadLocal<HashSet<String>>();
+    final ThreadLocal<HashSet<String>> lockOwners = new ThreadLocal<>();
 
-    final HashSet<String> locks = new HashSet<String>();
+    final HashSet<String> locks = new HashSet<>();
 
     private final Logger log = LoggerFactory.getLogger(getClass());
 
@@ -62,7 +62,7 @@ protected Logger getLog() {
     private HashSet<String> getThreadLocks() {
         HashSet<String> threadLocks = lockOwners.get();
         if (threadLocks == null) {
-            threadLocks = new HashSet<String>();
+            threadLocks = new HashSet<>();
             lockOwners.set(threadLocks);
         }
         return threadLocks;

File: quartz/src/main/java/org/quartz/impl/matchers/AndMatcher.java
Patch:
@@ -44,7 +44,7 @@ protected AndMatcher(Matcher<T> leftOperand, Matcher<T> rightOperand) {
      * Create an AndMatcher that depends upon the result of both of the given matchers.
      */
     public static <U extends Key<?>> AndMatcher<U> and(Matcher<U> leftOperand, Matcher<U> rightOperand) {
-        return new AndMatcher<U>(leftOperand, rightOperand);
+        return new AndMatcher<>(leftOperand, rightOperand);
     }
 
     public boolean isMatch(T key) {

File: quartz/src/main/java/org/quartz/impl/matchers/EverythingMatcher.java
Patch:
@@ -38,14 +38,14 @@ protected EverythingMatcher() {
      * Create an EverythingMatcher that matches all jobs.
      */
     public static EverythingMatcher<JobKey> allJobs() {
-        return new EverythingMatcher<JobKey>();
+        return new EverythingMatcher<>();
     }
 
     /**
      * Create an EverythingMatcher that matches all triggers.
      */
     public static EverythingMatcher<TriggerKey> allTriggers() {
-        return new EverythingMatcher<TriggerKey>();
+        return new EverythingMatcher<>();
     }
     
     public boolean isMatch(T key) {

File: quartz/src/main/java/org/quartz/impl/matchers/KeyMatcher.java
Patch:
@@ -39,7 +39,7 @@ protected KeyMatcher(T compareTo) {
      * Create a KeyMatcher that matches Keys that equal the given key. 
      */
     public static <U extends Key<?>> KeyMatcher<U> keyEquals(U compareTo) {
-        return new KeyMatcher<U>(compareTo);
+        return new KeyMatcher<>(compareTo);
     }
 
     public boolean isMatch(T key) {

File: quartz/src/main/java/org/quartz/impl/matchers/NotMatcher.java
Patch:
@@ -42,7 +42,7 @@ protected NotMatcher(Matcher<T> operand) {
      * Create a NotMatcher that reverses the result of the given matcher.
      */
     public static <U extends Key<?>> NotMatcher<U> not(Matcher<U> operand) {
-        return new NotMatcher<U>(operand);
+        return new NotMatcher<>(operand);
     }
 
     public boolean isMatch(T key) {

File: quartz/src/main/java/org/quartz/impl/matchers/OrMatcher.java
Patch:
@@ -44,7 +44,7 @@ protected OrMatcher(Matcher<T> leftOperand, Matcher<T> rightOperand) {
      * Create an OrMatcher that depends upon the result of at least one of the given matchers.
      */
     public static <U extends Key<?>> OrMatcher<U> or(Matcher<U> leftOperand, Matcher<U> rightOperand) {
-        return new OrMatcher<U>(leftOperand, rightOperand);
+        return new OrMatcher<>(leftOperand, rightOperand);
     }
 
     public boolean isMatch(T key) {

File: quartz/src/main/java/org/quartz/listeners/BroadcastJobListener.java
Patch:
@@ -57,7 +57,7 @@ public BroadcastJobListener(String name) {
             throw new IllegalArgumentException("Listener name cannot be null!");
         }
         this.name = name;
-        listeners = new LinkedList<JobListener>();
+        listeners = new LinkedList<>();
     }
 
     /**

File: quartz/src/main/java/org/quartz/listeners/BroadcastSchedulerListener.java
Patch:
@@ -29,7 +29,7 @@ public class BroadcastSchedulerListener implements SchedulerListener {
     private final List<SchedulerListener> listeners;
 
     public BroadcastSchedulerListener() {
-        listeners = new LinkedList<SchedulerListener>();
+        listeners = new LinkedList<>();
     }
 
     /**

File: quartz/src/main/java/org/quartz/listeners/BroadcastTriggerListener.java
Patch:
@@ -57,7 +57,7 @@ public BroadcastTriggerListener(String name) {
             throw new IllegalArgumentException("Listener name cannot be null!");
         }
         this.name = name;
-        listeners = new LinkedList<TriggerListener>();
+        listeners = new LinkedList<>();
     }
 
     /**

File: quartz/src/main/java/org/quartz/listeners/JobChainingJobListener.java
Patch:
@@ -58,7 +58,7 @@ public JobChainingJobListener(String name) {
             throw new IllegalArgumentException("Listener name cannot be null!");
         }
         this.name = name;
-        chainLinks = new HashMap<JobKey, JobKey>();
+        chainLinks = new HashMap<>();
     }
 
     public String getName() {

File: quartz/src/main/java/org/quartz/plugins/xml/XMLSchedulingDataProcessorPlugin.java
Patch:
@@ -91,15 +91,15 @@ public class XMLSchedulingDataProcessorPlugin
     private String fileNames = XMLSchedulingDataProcessor.QUARTZ_XML_DEFAULT_FILE_NAME;
 
     // Populated by initialization
-    private final Map<String, JobFile> jobFiles = new LinkedHashMap<String, JobFile>();
+    private final Map<String, JobFile> jobFiles = new LinkedHashMap<>();
 
     private long scanInterval = 0; 
     
     boolean started = false;
     
     protected ClassLoadHelper classLoadHelper = null;
 
-    private final Set<String> jobTriggerNameSet = new HashSet<String>();
+    private final Set<String> jobTriggerNameSet = new HashSet<>();
     
     /*
      * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

File: quartz/src/main/java/org/quartz/simpl/CascadingClassLoadHelper.java
Patch:
@@ -78,7 +78,7 @@ public class CascadingClassLoadHelper implements ClassLoadHelper {
      * thread, which is the thread that is initializing Quartz.
      */
     public void initialize() {
-        loadHelpers = new LinkedList<ClassLoadHelper>();
+        loadHelpers = new LinkedList<>();
 
         loadHelpers.add(new LoadingLoaderClassLoadHelper());
         loadHelpers.add(new SimpleClassLoadHelper());

File: quartz/src/main/java/org/quartz/simpl/SimpleThreadPool.java
Patch:
@@ -75,8 +75,8 @@ public class SimpleThreadPool implements ThreadPool {
     private final Object nextRunnableLock = new Object();
 
     private List<WorkerThread> workers;
-    private final LinkedList<WorkerThread> availWorkers = new LinkedList<WorkerThread>();
-    private final LinkedList<WorkerThread> busyWorkers = new LinkedList<WorkerThread>();
+    private final LinkedList<WorkerThread> availWorkers = new LinkedList<>();
+    private final LinkedList<WorkerThread> busyWorkers = new LinkedList<>();
 
     private String threadNamePrefix;
 
@@ -281,7 +281,7 @@ public void initialize() throws SchedulerConfigException {
     }
 
     protected List<WorkerThread> createWorkerThreads(int createCount) {
-        workers = new LinkedList<WorkerThread>();
+        workers = new LinkedList<>();
         for (int i = 1; i<= createCount; ++i) {
             String threadPrefix = getThreadNamePrefix();
             if (threadPrefix == null) {

File: quartz/src/main/java/org/quartz/utils/CircularLossyQueue.java
Patch:
@@ -45,7 +45,7 @@ public class CircularLossyQueue<T> {
     public CircularLossyQueue(int size) {
         this.circularArray = new AtomicReference[size];
         for (int i = 0; i < size; i++) {
-            this.circularArray[i] = new AtomicReference<T>();
+            this.circularArray[i] = new AtomicReference<>();
         }
         this.maxSize = size;
     }

File: quartz/src/main/java/org/quartz/utils/ClassUtils.java
Patch:
@@ -55,7 +55,7 @@ public static <T extends Annotation> T getAnnotation(Class<?> clazz, Class<T> aC
         }
 
         //Check interfaces (breadth first)
-        Queue<Class<?>> q = new LinkedList<Class<?>>();
+        Queue<Class<?>> q = new LinkedList<>();
         q.add(clazz);
         while (!q.isEmpty()) {
             Class<?> c = q.remove();

File: quartz/src/main/java/org/quartz/utils/DBConnectionManager.java
Patch:
@@ -58,7 +58,7 @@ public class DBConnectionManager {
 
     private static final DBConnectionManager instance = new DBConnectionManager();
 
-    private final HashMap<String, ConnectionProvider> providers = new HashMap<String, ConnectionProvider>();
+    private final HashMap<String, ConnectionProvider> providers = new HashMap<>();
 
     /*
      * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

File: quartz/src/main/java/org/quartz/utils/PropertiesParser.java
Patch:
@@ -103,7 +103,7 @@ public String[] getStringArrayProperty(String name, String[] def) {
         }
 
         StringTokenizer stok = new StringTokenizer(vals, ",");
-        ArrayList<String> strs = new ArrayList<String>();
+        ArrayList<String> strs = new ArrayList<>();
         try {
             while (stok.hasMoreTokens()) {
                 strs.add(stok.nextToken().trim());
@@ -254,7 +254,7 @@ public int[] getIntArrayProperty(String name, int[] def)
         }
 
         StringTokenizer stok = new StringTokenizer(vals, ",");
-        ArrayList<Integer> ints = new ArrayList<Integer>();
+        ArrayList<Integer> ints = new ArrayList<>();
         try {
             while (stok.hasMoreTokens()) {
                 try {
@@ -330,7 +330,7 @@ public short getShortProperty(String name, short def)
 
     public String[] getPropertyGroups(String prefix) {
         Enumeration<?> keys = props.propertyNames();
-        HashSet<String> groups = new HashSet<String>(10);
+        HashSet<String> groups = new HashSet<>(10);
 
         if (!prefix.endsWith(".")) {
             prefix += ".";

File: quartz/src/main/java/org/quartz/utils/counter/CounterManagerImpl.java
Patch:
@@ -34,7 +34,7 @@ public class CounterManagerImpl implements CounterManager {
 
     private final Timer timer;
     private boolean shutdown;
-    private final List<Counter> counters = new ArrayList<Counter>();
+    private final List<Counter> counters = new ArrayList<>();
 
     /**
      * Constructor that accepts a timer that will be used for scheduling sampled

File: quartz/src/main/java/org/quartz/utils/counter/sampled/SampledCounterImpl.java
Patch:
@@ -55,7 +55,7 @@ public SampledCounterImpl(SampledCounterConfig config) {
         super(config.getInitialValue());
 
         this.intervalMillis = config.getIntervalSecs() * MILLIS_PER_SEC;
-        this.history = new CircularLossyQueue<TimeStampedCounterValue>(config.getHistorySize());
+        this.history = new CircularLossyQueue<>(config.getHistorySize());
         this.resetOnSample = config.isResetOnSample();
 
         this.samplerTask = new TimerTask() {

File: quartz/src/main/java/org/quartz/xml/ValidationException.java
Patch:
@@ -40,7 +40,7 @@ public class ValidationException extends Exception {
      * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      */
 
-    private Collection<Exception> validationExceptions = new ArrayList<Exception>();
+    private Collection<Exception> validationExceptions = new ArrayList<>();
 
     /*
      * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

File: quartz/src/main/java/org/quartz/CronExpression.java
Patch:
@@ -895,7 +895,7 @@ public String getExpressionSummary() {
         buf.append(lastDayOfWeek);
         buf.append("\n");
         buf.append("NthDayOfWeek: ");
-        buf.append(nthdayOfWeek);
+        buf.append(nthDayOfWeek);
         buf.append("\n");
         buf.append("years: ");
         buf.append(getExpressionSetSummary(years));

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/SimplePropertiesTriggerPersistenceDelegateSupport.java
Patch:
@@ -160,8 +160,8 @@ public TriggerPropertyBundle loadExtendedTriggerProperties(Connection conn, Trig
                 properties.setString3(rs.getString(COL_STR_PROP_3));
                 properties.setInt1(rs.getInt(COL_INT_PROP_1));
                 properties.setInt2(rs.getInt(COL_INT_PROP_2));
-                properties.setLong1(rs.getInt(COL_LONG_PROP_1));
-                properties.setLong2(rs.getInt(COL_LONG_PROP_2));
+                properties.setLong1(rs.getLong(COL_LONG_PROP_1));
+                properties.setLong2(rs.getLong(COL_LONG_PROP_2));
                 properties.setDecimal1(rs.getBigDecimal(COL_DEC_PROP_1));
                 properties.setDecimal2(rs.getBigDecimal(COL_DEC_PROP_2));
                 properties.setBoolean1(rs.getBoolean(COL_BOOL_PROP_1));

File: quartz/src/main/java/org/quartz/impl/jdbcjobstore/SimplePropertiesTriggerPersistenceDelegateSupport.java
Patch:
@@ -160,8 +160,8 @@ public TriggerPropertyBundle loadExtendedTriggerProperties(Connection conn, Trig
                 properties.setString3(rs.getString(COL_STR_PROP_3));
                 properties.setInt1(rs.getInt(COL_INT_PROP_1));
                 properties.setInt2(rs.getInt(COL_INT_PROP_2));
-                properties.setLong1(rs.getInt(COL_LONG_PROP_1));
-                properties.setLong2(rs.getInt(COL_LONG_PROP_2));
+                properties.setLong1(rs.getLong(COL_LONG_PROP_1));
+                properties.setLong2(rs.getLong(COL_LONG_PROP_2));
                 properties.setDecimal1(rs.getBigDecimal(COL_DEC_PROP_1));
                 properties.setDecimal2(rs.getBigDecimal(COL_DEC_PROP_2));
                 properties.setBoolean1(rs.getBoolean(COL_BOOL_PROP_1));

File: quartz/src/main/java/org/quartz/simpl/SimpleThreadPool.java
Patch:
@@ -176,8 +176,8 @@ public int getThreadPriority() {
         return prio;
     }
 
-    public void setThreadNamePrefix(String prfx) {
-        this.threadNamePrefix = prfx;
+    public void setThreadNamePrefix(String prefix) {
+        this.threadNamePrefix = prefix;
     }
 
     public String getThreadNamePrefix() {

File: quartz/src/main/java/org/quartz/core/JobRunShell.java
Patch:
@@ -213,7 +213,7 @@ public void run() {
                             " threw an unhandled Exception: ", e);
                     SchedulerException se = new SchedulerException(
                             "Job threw an unhandled exception.", e);
-                    qs.notifySchedulerListenersError("Job ("
+                    qs.notifySchedulerListenersError("Job "
                             + jec.getJobDetail().getKey()
                             + " threw an exception.", se);
                     jobExEx = new JobExecutionException(se, false);

File: quartz/src/main/java/org/quartz/core/JobRunShell.java
Patch:
@@ -212,7 +212,7 @@ public void run() {
                             " threw an unhandled Exception: ", e);
                     SchedulerException se = new SchedulerException(
                             "Job threw an unhandled exception.", e);
-                    qs.notifySchedulerListenersError("Job ("
+                    qs.notifySchedulerListenersError("Job "
                             + jec.getJobDetail().getKey()
                             + " threw an exception.", se);
                     jobExEx = new JobExecutionException(se, false);

File: quartz-jboss/src/main/java/org/quartz/ee/jmx/jboss/QuartzService.java
Patch:
@@ -42,7 +42,7 @@
  *  
  * <p> 
  * Sample MBean deployment descriptor: 
- * <a href="doc-files/quartz-service.xml" type="text/plain">quartz-service.xml</a>
+ * <a href="doc-files/quartz-service.xml">quartz-service.xml</a>
  * </p>
  * 
  * <p> 

File: quartz-jboss/src/main/java/org/quartz/ee/jmx/jboss/QuartzServiceMBean.java
Patch:
@@ -26,7 +26,7 @@
  *  
  * <p> 
  * Sample MBean deployment descriptor: 
- * <a href="doc-files/quartz-service.xml" type="text/plain">quartz-service.xml</a>
+ * <a href="doc-files/quartz-service.xml">quartz-service.xml</a>
  * </p>
  * 
  * <p> 

File: quartz-plugins/src/main/java/org/quartz/plugins/interrupt/JobInterruptMonitorPlugin.java
Patch:
@@ -37,7 +37,7 @@
  * configured max time) and tells the scheduler to "try" interrupting it if
  * enabled.
  * 
- * @see org.quartz.Scheduler#interrupt()
+ * @see org.quartz.Scheduler#interrupt(JobKey)
  * 
  * @author Rama Chavali
  */

File: quartz-plugins/src/main/java/org/quartz/plugins/management/ShutdownHookPlugin.java
Patch:
@@ -20,6 +20,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.quartz.Scheduler;
+import org.quartz.SchedulerConfigException;
 import org.quartz.SchedulerException;
 import org.quartz.spi.ClassLoadHelper;
 import org.quartz.spi.SchedulerPlugin;

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/collections/ToolkitDSHolder.java
Patch:
@@ -41,9 +41,9 @@
 
 /**
  * How JOBS mappings will look? <br>
- * JobKey(name, groupname) -> JobWrapper <br>
- * groupName -> List<String> <br>
- * List -> allGroupNames<br>
+ * JobKey(name, groupname) -&gt; JobWrapper <br>
+ * groupName -&gt; List&lt;String&lt; <br>
+ * List -&gt; allGroupNames<br>
  */
 public class ToolkitDSHolder {
   private static final String                                                       JOBS_MAP_PREFIX                     = "_tc_quartz_jobs";

File: quartz-plugins/src/main/java/org/quartz/plugins/history/LoggingJobHistoryPlugin.java
Patch:
@@ -32,8 +32,7 @@
 import java.text.MessageFormat;
 
 /**
- * Logs a history of all job executions (and execution vetos) via the 
- * Jakarta Commons-Logging framework.
+ * Logs a history of all job executions (and execution vetos) via the slf4j.
  * 
  * <p>
  * The logged message is customizable by setting one of the following message

File: quartz-plugins/src/main/java/org/quartz/plugins/history/LoggingTriggerHistoryPlugin.java
Patch:
@@ -32,8 +32,7 @@
 import org.quartz.spi.SchedulerPlugin;
 
 /**
- * Logs a history of all trigger firings via the Jakarta Commons-Logging
- * framework.
+ * Logs a history of all trigger firings via slf4j.
  * 
  * <p>
  * The logged message is customizable by setting one of the following message

File: quartz-core/src/main/java/org/quartz/SimpleScheduleBuilder.java
Patch:
@@ -357,7 +357,7 @@ public SimpleScheduleBuilder repeatForever() {
      * If the Trigger misfires, use the 
      * {@link Trigger#MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY} instruction.
      * 
-     * @return the updated CronScheduleBuilder
+     * @return the updated SimpleScheduleBuilder
      * @see Trigger#MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY
      */
     public SimpleScheduleBuilder withMisfireHandlingInstructionIgnoreMisfires() {

File: quartz-jobs/src/main/java/org/quartz/jobs/NativeJob.java
Patch:
@@ -34,7 +34,7 @@
  * 
  * <pre>
  *             JobDetail job = new JobDetail("dumbJob", null, org.quartz.jobs.NativeJob.class);
- *             job.getJobDataMap().put(org.quartz.jobs.NativeJob.PROP_COMMAND, "echo \"hi\" >> foobar.txt");
+ *             job.getJobDataMap().put(org.quartz.jobs.NativeJob.PROP_COMMAND, "echo \"hi\" &gt;&gt; foobar.txt");
  *             Trigger trigger = TriggerUtils.makeSecondlyTrigger(5);
  *             trigger.setName("dumbTrigger");
  *             sched.scheduleJob(job, trigger);

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/ejb/EJBInvokerJob.java
Patch:
@@ -40,7 +40,6 @@
  * A <code>Job</code> that invokes a method on an EJB.
  * </p>
  * 
- * <p>
  * Expects the properties corresponding to the following keys to be in the
  * <code>JobDataMap</code> when it executes:
  * <ul>
@@ -54,7 +53,7 @@
  * pass to the method (optional, if left out, the types will be derived by 
  * calling getClass() on each of the arguments).</li>
  * </ul>
- * <br/>
+ * <br>
  * The following keys can also be used at need:
  * <ul>
  * <li><code>INITIAL_CONTEXT_FACTORY</code> - the context factory used to 
@@ -63,7 +62,6 @@
  * for specifying configuration information for the service provider to use.
  * </li>
  * </ul>
- * </p>
  * 
  * <p>
  * The result of the EJB method invocation will be available to 

File: quartz-core/src/main/java/org/quartz/core/QuartzSchedulerThread.java
Patch:
@@ -181,7 +181,7 @@ void halt(boolean wait) {
                     try {
                         join();
                         break;
-                    } catch (InterruptedException _) {
+                    } catch (InterruptedException e) {
                         interrupted = true;
                     }
                 }

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/UpdateLockRowSemaphore.java
Patch:
@@ -95,7 +95,7 @@ protected void executeSQL(Connection conn, final String lockName, final String e
                 }
                 try {
                     Thread.sleep(1000L);
-                } catch (InterruptedException _) {
+                } catch (InterruptedException ie) {
                     Thread.currentThread().interrupt();
                 }
             }

File: quartz-core/src/main/java/org/quartz/simpl/SimpleThreadPool.java
Patch:
@@ -353,7 +353,7 @@ public void shutdown(boolean waitForJobsToComplete) {
                     while(handoffPending) {
                         try {
                             nextRunnableLock.wait(100);
-                        } catch(InterruptedException _) {
+                        } catch(InterruptedException e) {
                             interrupted = true;
                         }
                     }
@@ -369,7 +369,7 @@ public void shutdown(boolean waitForJobsToComplete) {
                             // note: with waiting infinite time the
                             // application may appear to 'hang'.
                             nextRunnableLock.wait(2000);
-                        } catch (InterruptedException _) {
+                        } catch (InterruptedException e) {
                             interrupted = true;
                         }
                     }
@@ -380,7 +380,7 @@ public void shutdown(boolean waitForJobsToComplete) {
                         try {
                             wt.join();
                             workerThreads.remove();
-                        } catch (InterruptedException _) {
+                        } catch (InterruptedException e) {
                             interrupted = true;
                         }
                     }

File: quartz-core/src/main/java/org/quartz/xml/XMLSchedulingDataProcessor.java
Patch:
@@ -202,7 +202,7 @@ public String getNamespaceURI(String prefix)
               return XMLConstants.NULL_NS_URI;
           }
         
-          public Iterator<?> getPrefixes(String namespaceURI)
+          public Iterator<String> getPrefixes(String namespaceURI)
           {
               // This method isn't necessary for XPath processing.
               throw new UnsupportedOperationException();

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DriverDelegate.java
Patch:
@@ -937,7 +937,7 @@ Key<?> selectTriggerForFireTime(Connection conn, long fireTime)
      * @param noLaterThan
      *          highest value of <code>getNextFireTime()</code> of the triggers (exclusive)
      * @param noEarlierThan 
-     *          highest value of <code>getNextFireTime()</code> of the triggers (inclusive)
+     *          lowest value of <code>getNextFireTime()</code> of the triggers (inclusive)
      *          
      * @return A (never null, possibly empty) list of the identifiers (Key objects) of the next triggers to be fired.
      * 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DriverDelegate.java
Patch:
@@ -937,7 +937,7 @@ Key<?> selectTriggerForFireTime(Connection conn, long fireTime)
      * @param noLaterThan
      *          highest value of <code>getNextFireTime()</code> of the triggers (exclusive)
      * @param noEarlierThan 
-     *          highest value of <code>getNextFireTime()</code> of the triggers (inclusive)
+     *          lowest value of <code>getNextFireTime()</code> of the triggers (inclusive)
      *          
      * @return A (never null, possibly empty) list of the identifiers (Key objects) of the next triggers to be fired.
      * 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCConstants.java
Patch:
@@ -512,7 +512,7 @@ public interface StdJDBCConstants extends Constants {
         + TABLE_PREFIX_SUBST + TABLE_TRIGGERS + " WHERE "
         + COL_SCHEDULER_NAME + " = " + SCHED_NAME_SUBST
         + " AND " + COL_TRIGGER_STATE + " = ? AND " + COL_NEXT_FIRE_TIME + " <= ? " 
-        + "AND (" + COL_MISFIRE_INSTRUCTION + " = -1 OR (" +COL_MISFIRE_INSTRUCTION+ " != -1 AND "+ COL_NEXT_FIRE_TIME + " >= ?)) "
+        + "AND (" + COL_MISFIRE_INSTRUCTION + " = -1 OR (" +COL_MISFIRE_INSTRUCTION+ " <> -1 AND "+ COL_NEXT_FIRE_TIME + " >= ?)) "
         + "ORDER BY "+ COL_NEXT_FIRE_TIME + " ASC, " + COL_PRIORITY + " DESC";
     
     

File: quartz-core/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -226,7 +226,7 @@ public QuartzScheduler(QuartzSchedulerResources resources, long idleWaitTime, @D
 
         signaler = new SchedulerSignalerImpl(this, this.schedThread);
         
-        getLog().info("Quartz Scheduler v." + getVersion() + " created.");
+        getLog().info("Quartz Scheduler v" + getVersion() + " created.");
     }
 
     public void initialize() throws SchedulerException {

File: quartz-core/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -226,7 +226,7 @@ public QuartzScheduler(QuartzSchedulerResources resources, long idleWaitTime, @D
 
         signaler = new SchedulerSignalerImpl(this, this.schedThread);
         
-        getLog().info("Quartz Scheduler v." + getVersion() + " created.");
+        getLog().info("Quartz Scheduler v" + getVersion() + " created.");
     }
 
     public void initialize() throws SchedulerException {

File: quartz-core/src/main/java/org/quartz/CronExpression.java
Patch:
@@ -293,7 +293,7 @@ public CronExpression(CronExpression expression) {
         try {
             buildExpression(cronExpression);
         } catch (ParseException ex) {
-            throw new AssertionError();
+            throw new AssertionError("Could not parse expression!", ex);
         }
         if (expression.getTimeZone() != null) {
             setTimeZone((TimeZone) expression.getTimeZone().clone());

File: quartz-core/src/main/java/org/quartz/Trigger.java
Patch:
@@ -98,7 +98,7 @@ public enum CompletedExecutionInstruction { NOOP, RE_EXECUTE_JOB, SET_TRIGGER_CO
      * 
      * <p>
      * In order to see if this instruction fits your needs, you should look at
-     * the documentation for the <code>getSmartMisfirePolicy()</code> method
+     * the documentation for the <code>updateAfterMisfire()</code> method
      * on the particular <code>Trigger</code> implementation you are using.
      * </p>
      */

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -2612,7 +2612,7 @@ public List<TriggerKey> selectTriggerToAcquire(Connection conn, long noLaterThan
             ps.setBigDecimal(3, new BigDecimal(String.valueOf(noEarlierThan)));
             rs = ps.executeQuery();
             
-            while (rs.next() && nextTriggers.size() <= maxCount) {
+            while (rs.next() && nextTriggers.size() < maxCount) {
                 nextTriggers.add(triggerKey(
                         rs.getString(COL_TRIGGER_NAME),
                         rs.getString(COL_TRIGGER_GROUP)));

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -2612,7 +2612,7 @@ public List<TriggerKey> selectTriggerToAcquire(Connection conn, long noLaterThan
             ps.setBigDecimal(3, new BigDecimal(String.valueOf(noEarlierThan)));
             rs = ps.executeQuery();
             
-            while (rs.next() && nextTriggers.size() <= maxCount) {
+            while (rs.next() && nextTriggers.size() < maxCount) {
                 nextTriggers.add(triggerKey(
                         rs.getString(COL_TRIGGER_NAME),
                         rs.getString(COL_TRIGGER_GROUP)));

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -2569,7 +2569,7 @@ public List<TriggerKey> selectTriggerToAcquire(Connection conn, long noLaterThan
             ps.setBigDecimal(3, new BigDecimal(String.valueOf(noEarlierThan)));
             rs = ps.executeQuery();
             
-            while (rs.next() && nextTriggers.size() <= maxCount) {
+            while (rs.next() && nextTriggers.size() < maxCount) {
                 nextTriggers.add(triggerKey(
                         rs.getString(COL_TRIGGER_NAME),
                         rs.getString(COL_TRIGGER_GROUP)));

File: quartz-core/src/main/java/org/quartz/Trigger.java
Patch:
@@ -99,7 +99,7 @@ public enum CompletedExecutionInstruction { NOOP, RE_EXECUTE_JOB, SET_TRIGGER_CO
      *
      * <p>
      * In order to see if this instruction fits your needs, you should look at
-     * the documentation for the <code>getSmartMisfirePolicy()</code> method
+     * the documentation for the <code>updateAfterMisfire()</code> method
      * on the particular <code>Trigger</code> implementation you are using.
      * </p>
      */

File: quartz-core/src/main/java/org/quartz/impl/JobExecutionContextImpl.java
Patch:
@@ -144,8 +144,8 @@ public boolean isRecovering() {
 
     public TriggerKey getRecoveringTriggerKey() {
         if (isRecovering()) {
-            return new TriggerKey(jobDataMap.getString(Scheduler.FAILED_JOB_ORIGINAL_TRIGGER_GROUP),
-                                  jobDataMap.getString(Scheduler.FAILED_JOB_ORIGINAL_TRIGGER_NAME));
+            return new TriggerKey(jobDataMap.getString(Scheduler.FAILED_JOB_ORIGINAL_TRIGGER_NAME),
+                                  jobDataMap.getString(Scheduler.FAILED_JOB_ORIGINAL_TRIGGER_GROUP));
         } else {
             throw new IllegalStateException("Not a recovering job");
         }

File: quartz-core/src/main/java/org/quartz/JobBuilder.java
Patch:
@@ -239,8 +239,7 @@ public JobBuilder requestRecovery(boolean jobShouldRecover) {
      * @see JobDetail#isDurable()
      */
     public JobBuilder storeDurably() {
-        this.durability = true;
-        return this;
+        return storeDurably(true);
     }
     
     /**

File: system-tests/src/test/java/org/terracotta/quartz/tests/ManyTriggerClient.java
Patch:
@@ -71,7 +71,7 @@ protected void test(Scheduler sched) throws Throwable {
     } else {
       barrier.await();
 
-      JobDetail jobDetail = newJob(MyJob.class).withIdentity("testJob").storeDurably(true).build();
+      JobDetail jobDetail = newJob(MyJob.class).withIdentity("testJob").storeDurably().build();
 
       sched.addJob(jobDetail, false);
 

File: quartz-core/src/main/java/org/quartz/CronScheduleBuilder.java
Patch:
@@ -92,7 +92,7 @@ public MutableTrigger build() {
 
     /**
      * Create a CronScheduleBuilder with the given cron-expression string -
-     * which is presumed to b e valid cron expression (and hence only a
+     * which is presumed to be a valid cron expression (and hence only a
      * RuntimeException will be thrown if it is not).
      * 
      * @param cronExpression

File: quartz-core/src/main/java/org/quartz/CronScheduleBuilder.java
Patch:
@@ -92,7 +92,7 @@ public MutableTrigger build() {
 
     /**
      * Create a CronScheduleBuilder with the given cron-expression string -
-     * which is presumed to b e valid cron expression (and hence only a
+     * which is presumed to be a valid cron expression (and hence only a
      * RuntimeException will be thrown if it is not).
      * 
      * @param cronExpression

File: quartz-core/src/main/java/org/quartz/ee/servlet/QuartzInitializerListener.java
Patch:
@@ -160,7 +160,7 @@ public void contextInitialized(ServletContextEvent sce) {
                 performShutdown = Boolean.valueOf(shutdownPref).booleanValue();
             }
             String shutdownWaitPref = servletContext.getInitParameter("quartz:wait-on-shutdown");
-            if (shutdownPref != null) {
+            if (shutdownWaitPref != null) {
                 waitOnShutdown = Boolean.valueOf(shutdownWaitPref).booleanValue();
             }
 

File: quartz-core/src/main/java/org/quartz/ee/servlet/QuartzInitializerListener.java
Patch:
@@ -160,7 +160,7 @@ public void contextInitialized(ServletContextEvent sce) {
                 performShutdown = Boolean.valueOf(shutdownPref).booleanValue();
             }
             String shutdownWaitPref = servletContext.getInitParameter("quartz:wait-on-shutdown");
-            if (shutdownPref != null) {
+            if (shutdownWaitPref != null) {
                 waitOnShutdown = Boolean.valueOf(shutdownWaitPref).booleanValue();
             }
 

File: quartz-core/src/main/java/org/quartz/utils/C3p0PoolingConnectionProvider.java
Patch:
@@ -75,7 +75,7 @@ public class C3p0PoolingConnectionProvider implements PoolingConnectionProvider
     public static final String DB_VALIDATE_ON_CHECKOUT = "validateOnCheckout";
 
     /** Discard connections after they have been idle this many seconds.  0 disables the feature. Default is 0.*/
-    private static final String DB_DISCARD_IDLE_CONNECTIONS_SECONDS = "maxIdleTime";
+    public static final String DB_DISCARD_IDLE_CONNECTIONS_SECONDS = "maxIdleTime";
 
     /** Default maximum number of database connections in the pool. */
     public static final int DEFAULT_DB_MAX_CACHED_STATEMENTS_PER_CONNECTION = 120;

File: quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java
Patch:
@@ -1402,7 +1402,7 @@ private void populateProviderWithExtraProps(PoolingConnectionProvider cp, Proper
         copyProps.remove(PoolingConnectionProvider.DB_MAX_CONNECTIONS);
         copyProps.remove(PoolingConnectionProvider.DB_VALIDATION_QUERY);
         copyProps.remove(C3p0PoolingConnectionProvider.DB_VALIDATE_ON_CHECKOUT);
-        props.remove(PoolingConnectionProvider.POOLING_PROVIDER);
+        copyProps.remove(PoolingConnectionProvider.POOLING_PROVIDER);
         setBeanProps(cp.getDataSource(), copyProps);
     }
 

File: quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java
Patch:
@@ -46,6 +46,7 @@
 import org.quartz.utils.ConnectionProvider;
 import org.quartz.utils.DBConnectionManager;
 import org.quartz.utils.JNDIConnectionProvider;
+import org.quartz.utils.C3p0PoolingConnectionProvider;
 import org.quartz.utils.PoolingConnectionProvider;
 import org.quartz.utils.PropertiesParser;
 import org.slf4j.Logger;
@@ -63,7 +64,6 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.security.AccessControlException;
-import java.sql.SQLException;
 import java.util.Collection;
 import java.util.Locale;
 import java.util.Properties;
@@ -1401,6 +1401,7 @@ private void populateProviderWithExtraProps(PoolingConnectionProvider cp, Proper
         copyProps.remove(PoolingConnectionProvider.DB_PASSWORD);
         copyProps.remove(PoolingConnectionProvider.DB_MAX_CONNECTIONS);
         copyProps.remove(PoolingConnectionProvider.DB_VALIDATION_QUERY);
+        copyProps.remove(C3p0PoolingConnectionProvider.DB_VALIDATE_ON_CHECKOUT);
         props.remove(PoolingConnectionProvider.POOLING_PROVIDER);
         setBeanProps(cp.getDataSource(), copyProps);
     }

File: quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java
Patch:
@@ -46,6 +46,7 @@
 import org.quartz.utils.ConnectionProvider;
 import org.quartz.utils.DBConnectionManager;
 import org.quartz.utils.JNDIConnectionProvider;
+import org.quartz.utils.C3p0PoolingConnectionProvider;
 import org.quartz.utils.PoolingConnectionProvider;
 import org.quartz.utils.PropertiesParser;
 import org.slf4j.Logger;
@@ -63,7 +64,6 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.security.AccessControlException;
-import java.sql.SQLException;
 import java.util.Collection;
 import java.util.Locale;
 import java.util.Properties;
@@ -1401,6 +1401,7 @@ private void populateProviderWithExtraProps(PoolingConnectionProvider cp, Proper
         copyProps.remove(PoolingConnectionProvider.DB_PASSWORD);
         copyProps.remove(PoolingConnectionProvider.DB_MAX_CONNECTIONS);
         copyProps.remove(PoolingConnectionProvider.DB_VALIDATION_QUERY);
+        copyProps.remove(C3p0PoolingConnectionProvider.DB_VALIDATE_ON_CHECKOUT);
         props.remove(PoolingConnectionProvider.POOLING_PROVIDER);
         setBeanProps(cp.getDataSource(), copyProps);
     }

File: quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java
Patch:
@@ -46,6 +46,7 @@
 import org.quartz.utils.ConnectionProvider;
 import org.quartz.utils.DBConnectionManager;
 import org.quartz.utils.JNDIConnectionProvider;
+import org.quartz.utils.C3p0PoolingConnectionProvider;
 import org.quartz.utils.PoolingConnectionProvider;
 import org.quartz.utils.PropertiesParser;
 import org.slf4j.Logger;
@@ -63,7 +64,6 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.security.AccessControlException;
-import java.sql.SQLException;
 import java.util.Collection;
 import java.util.Locale;
 import java.util.Properties;
@@ -1401,6 +1401,7 @@ private void populateProviderWithExtraProps(PoolingConnectionProvider cp, Proper
         copyProps.remove(PoolingConnectionProvider.DB_PASSWORD);
         copyProps.remove(PoolingConnectionProvider.DB_MAX_CONNECTIONS);
         copyProps.remove(PoolingConnectionProvider.DB_VALIDATION_QUERY);
+        copyProps.remove(C3p0PoolingConnectionProvider.DB_VALIDATE_ON_CHECKOUT);
         props.remove(PoolingConnectionProvider.POOLING_PROVIDER);
         setBeanProps(cp.getDataSource(), copyProps);
     }

File: quartz-core/src/main/java/org/quartz/CronScheduleBuilder.java
Patch:
@@ -92,7 +92,7 @@ public MutableTrigger build() {
 
     /**
      * Create a CronScheduleBuilder with the given cron-expression string -
-     * which is presumed to b e valid cron expression (and hence only a
+     * which is presumed to be a valid cron expression (and hence only a
      * RuntimeException will be thrown if it is not).
      * 
      * @param cronExpression

File: quartz-core/src/main/java/org/quartz/impl/DirectSchedulerFactory.java
Patch:
@@ -172,7 +172,6 @@ public void createVolatileScheduler(int maxThreads)
         throws SchedulerException {
         SimpleThreadPool threadPool = new SimpleThreadPool(maxThreads,
                 Thread.NORM_PRIORITY);
-        threadPool.initialize();
         JobStore jobStore = new RAMJobStore();
         this.createScheduler(threadPool, jobStore);
     }
@@ -464,7 +463,7 @@ public void createScheduler(String schedulerName,
 
         // Fire everything up
         // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
+        threadPool.setInstanceName(schedulerName);
         threadPool.initialize();
         
         QuartzSchedulerResources qrs = new QuartzSchedulerResources();

File: quartz-core/src/test/java/org/quartz/impl/SchedulerDetailsSetterTest.java
Patch:
@@ -32,7 +32,7 @@ public void testSetter() throws SchedulerException, IOException {
         directFactory.createScheduler(new MyThreadPool(), new MyJobStore());
 
         assertEquals(5, instanceIdCalls.get());
-        assertEquals(5, instanceNameCalls.get());
+        assertEquals(6, instanceNameCalls.get());
     }
 
     public void testMissingSetterMethods() throws SchedulerException  {

File: quartz-core/src/main/java/org/quartz/impl/DirectSchedulerFactory.java
Patch:
@@ -172,7 +172,6 @@ public void createVolatileScheduler(int maxThreads)
         throws SchedulerException {
         SimpleThreadPool threadPool = new SimpleThreadPool(maxThreads,
                 Thread.NORM_PRIORITY);
-        threadPool.initialize();
         JobStore jobStore = new RAMJobStore();
         this.createScheduler(threadPool, jobStore);
     }
@@ -464,7 +463,7 @@ public void createScheduler(String schedulerName,
 
         // Fire everything up
         // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
+        threadPool.setInstanceName(schedulerName);
         threadPool.initialize();
         
         QuartzSchedulerResources qrs = new QuartzSchedulerResources();

File: quartz-core/src/test/java/org/quartz/impl/SchedulerDetailsSetterTest.java
Patch:
@@ -32,7 +32,7 @@ public void testSetter() throws SchedulerException, IOException {
         directFactory.createScheduler(new MyThreadPool(), new MyJobStore());
 
         assertEquals(5, instanceIdCalls.get());
-        assertEquals(5, instanceNameCalls.get());
+        assertEquals(6, instanceNameCalls.get());
     }
 
     public void testMissingSetterMethods() throws SchedulerException  {

File: quartz-core/src/main/java/org/quartz/impl/DirectSchedulerFactory.java
Patch:
@@ -172,7 +172,6 @@ public void createVolatileScheduler(int maxThreads)
         throws SchedulerException {
         SimpleThreadPool threadPool = new SimpleThreadPool(maxThreads,
                 Thread.NORM_PRIORITY);
-        threadPool.initialize();
         JobStore jobStore = new RAMJobStore();
         this.createScheduler(threadPool, jobStore);
     }
@@ -464,7 +463,7 @@ public void createScheduler(String schedulerName,
 
         // Fire everything up
         // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
+        threadPool.setInstanceName(schedulerName);
         threadPool.initialize();
         
         QuartzSchedulerResources qrs = new QuartzSchedulerResources();

File: quartz-core/src/test/java/org/quartz/impl/SchedulerDetailsSetterTest.java
Patch:
@@ -47,7 +47,7 @@ public void testSetter() throws SchedulerException, IOException {
         directFactory.createScheduler(new MyThreadPool(), new MyJobStore());
 
         assertEquals(5, instanceIdCalls.get());
-        assertEquals(5, instanceNameCalls.get());
+        assertEquals(6, instanceNameCalls.get());
     }
 
     public void testMissingSetterMethods() throws SchedulerException  {

File: quartz-core/src/main/java/org/quartz/impl/DirectSchedulerFactory.java
Patch:
@@ -172,7 +172,6 @@ public void createVolatileScheduler(int maxThreads)
         throws SchedulerException {
         SimpleThreadPool threadPool = new SimpleThreadPool(maxThreads,
                 Thread.NORM_PRIORITY);
-        threadPool.initialize();
         JobStore jobStore = new RAMJobStore();
         this.createScheduler(threadPool, jobStore);
     }
@@ -464,7 +463,7 @@ public void createScheduler(String schedulerName,
 
         // Fire everything up
         // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
+        threadPool.setInstanceName(schedulerName);
         threadPool.initialize();
         
         QuartzSchedulerResources qrs = new QuartzSchedulerResources();

File: quartz-core/src/test/java/org/quartz/impl/SchedulerDetailsSetterTest.java
Patch:
@@ -47,7 +47,7 @@ public void testSetter() throws SchedulerException, IOException {
         directFactory.createScheduler(new MyThreadPool(), new MyJobStore());
 
         assertEquals(5, instanceIdCalls.get());
-        assertEquals(5, instanceNameCalls.get());
+        assertEquals(6, instanceNameCalls.get());
     }
 
     public void testMissingSetterMethods() throws SchedulerException  {

File: quartz-core/src/main/java/org/quartz/Calendar.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/InterruptableJob.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/Job.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/JobDataMap.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/JobExecutionException.java
Patch:
@@ -1,6 +1,5 @@
-
-/* 
- * Copyright 2001-2009 Terracotta, Inc. 
+/*
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/JobListener.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/JobPersistenceException.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/ObjectAlreadyExistsException.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/Scheduler.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/SchedulerConfigException.java
Patch:
@@ -1,6 +1,5 @@
-
-/* 
- * Copyright 2001-2009 Terracotta, Inc. 
+/*
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/SchedulerContext.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/SchedulerException.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/SchedulerFactory.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/SchedulerListener.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/SchedulerMetaData.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/StatefulJob.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/Trigger.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/TriggerListener.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/TriggerUtils.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/UnableToInterruptJobException.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/core/JobRunShell.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/core/JobRunShellFactory.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/core/QuartzSchedulerResources.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/core/QuartzSchedulerThread.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/core/RemotableQuartzScheduler.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/core/SchedulerSignalerImpl.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/ee/jta/JTAAnnotationAwareJobRunShellFactory.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/ee/jta/JTAJobRunShell.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/ee/jta/JTAJobRunShellFactory.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/ee/jta/UserTransactionHelper.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/ee/servlet/QuartzInitializerListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2010 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/ee/servlet/QuartzInitializerServlet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/helpers/VersionPrinter.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/DirectSchedulerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/impl/JobDetailImpl.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/JobExecutionContextImpl.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/QuartzServer.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/RemoteMBeanScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/RemoteScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/SchedulerRepository.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/StdJobRunShellFactory.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/StdScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/impl/calendar/AnnualCalendar.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/calendar/BaseCalendar.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/impl/calendar/HolidayCalendar.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/calendar/MonthlyCalendar.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/impl/calendar/WeeklyCalendar.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/AttributeRestoringConnectionInvocationHandler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/CUBRIDDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/CacheDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2012 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DB2v6Delegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DB2v7Delegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DB2v8Delegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DBSemaphore.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DriverDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/FiredTriggerRecord.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/HSQLDBDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/InvalidConfigurationException.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JTANonClusteredSemaphore.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreCMT.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreTX.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/LockException.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/MSSQLDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/NoSuchDelegateException.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/PointbaseDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/PostgreSQLDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/SchedulerStateRecord.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/SimpleSemaphore.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCConstants.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdRowLockSemaphore.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/SybaseDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2010 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/TablePrefixAware.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/TriggerStatus.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/UpdateLockRowSemaphore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/Util.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/triggers/AbstractTrigger.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/triggers/CalendarIntervalTriggerImpl.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/triggers/CronTriggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/triggers/DailyTimeIntervalTriggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/impl/triggers/SimpleTriggerImpl.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/listeners/BroadcastJobListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/listeners/BroadcastTriggerListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/listeners/JobChainingJobListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/listeners/JobListenerSupport.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/listeners/SchedulerListenerSupport.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/listeners/TriggerListenerSupport.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/CascadingClassLoadHelper.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/HostnameInstanceIdGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/InitThreadContextClassLoadHelper.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/LoadingLoaderClassLoadHelper.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/PropertySettingJobFactory.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/RAMJobStore.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/SimpleClassLoadHelper.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/SimpleInstanceIdGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/SimpleJobFactory.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/SimpleThreadPool.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/SimpleTimeBroker.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/ThreadContextClassLoadHelper.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/simpl/ZeroSizeThreadPool.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/spi/ClassLoadHelper.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/spi/InstanceIdGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/spi/JobFactory.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/spi/JobStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/spi/SchedulerPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/spi/SchedulerSignaler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/spi/ThreadPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/spi/TimeBroker.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/spi/TriggerFiredBundle.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/utils/C3p0PoolingConnectionProvider.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -230,4 +230,4 @@ public void shutdown() throws SQLException {
     public void initialize() throws SQLException {
         // do nothing, already initialized during constructor call
     }
-}
\ No newline at end of file
+}

File: quartz-core/src/main/java/org/quartz/utils/CircularLossyQueue.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/ConnectionProvider.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/utils/DBConnectionManager.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/utils/DirtyFlagMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/main/java/org/quartz/utils/HikariCpPoolingConnectionProvider.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -187,4 +187,4 @@ public void shutdown() throws SQLException {
     public void initialize() throws SQLException {
         // do nothing, already initialized during constructor call
     }
-}
\ No newline at end of file
+}

File: quartz-core/src/main/java/org/quartz/utils/JNDIConnectionProvider.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/utils/Key.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/utils/PoolingConnectionProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy
@@ -70,4 +70,4 @@ public interface PoolingConnectionProvider extends ConnectionProvider {
 
     DataSource getDataSource();
 
-}
\ No newline at end of file
+}

File: quartz-core/src/main/java/org/quartz/utils/PropertiesParser.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/utils/StringKeyDirtyFlagMap.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/utils/counter/Counter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/CounterConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/CounterImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/CounterManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/CounterManagerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/sampled/SampledCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/sampled/SampledCounterConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/sampled/SampledCounterImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/sampled/SampledRateCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/sampled/SampledRateCounterConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/sampled/SampledRateCounterImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/utils/counter/sampled/TimeStampedCounterValue.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *  Copyright 2003-2009 Terracotta, Inc.
+ *  All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/xml/ValidationException.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/main/java/org/quartz/xml/XMLSchedulingDataProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2010 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/AbstractJobStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/AbstractSchedulerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/AnnualCalendarTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/CalendarIntervalTriggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/CronExpressionTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/CronScheduleBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/CronTriggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2007-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/DailyTimeIntervalScheduleBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/DateBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/DisallowConcurrentExecutionJobTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2011 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/InterruptableJobTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/JobBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/JobDataMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/JobDetailTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/MonthlyCalendarTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/PriorityTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/Qtz205SchedulerListenerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/Quartz601Test.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2007-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/SerializationTestSupport.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/SimpleTriggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/TriggerBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/TriggerComparatorTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2007-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/VersionTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2007-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/core/ListenerManagerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/core/QTZ385Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz-core/src/test/java/org/quartz/core/RecoverJobsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz-core/src/test/java/org/quartz/impl/DirectSchedulerFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/impl/calendar/DailyCalendarTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegateTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/impl/jdbcjobstore/UpdateLockRowSemaphoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz-core/src/test/java/org/quartz/impl/matchers/GroupMatcherTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/impl/triggers/DailyTimeIntervalTriggerImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/integrations/tests/HelloJob.java
Patch:
@@ -1,7 +1,7 @@
 package org.quartz.integrations.tests;
 
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/integrations/tests/QTZ336_MissSchedulingChangeSignalTest.java
Patch:
@@ -1,6 +1,5 @@
-
-/* 
- * Copyright 2001-2012 Terracotta, Inc. 
+/*
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/integrations/tests/QuartzDatabaseCronTriggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2013 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/integrations/tests/QuartzDatabaseTestSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2013 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/integrations/tests/QuartzMemoryCronTriggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2013 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/integrations/tests/QuartzMemoryTestSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2013 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-core/src/test/java/org/quartz/integrations/tests/TrackingJob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz-core/src/test/java/org/quartz/simpl/PropertySettingJobFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/simpl/RAMJobStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/simpl/SystemPropertyInstanceIdGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/utils/C3p0PoolingConnectionProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy
@@ -106,4 +106,4 @@ protected Properties createSchedulerProperties() {
 
         return properties;
     }
-}
\ No newline at end of file
+}

File: quartz-core/src/test/java/org/quartz/utils/DirtyFlagMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-core/src/test/java/org/quartz/utils/HikariCpPoolingConnectionProviderTest.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-jboss/src/main/java/org/quartz/ee/jmx/jboss/JBoss4RMIRemoteMBeanScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jboss/src/main/java/org/quartz/ee/jmx/jboss/QuartzService.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jboss/src/main/java/org/quartz/ee/jmx/jboss/QuartzServiceMBean.java
Patch:
@@ -1,6 +1,6 @@
 
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/DirectoryScanJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/DirectoryScanListener.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/FileScanJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/FileScanListener.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/NativeJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/NoOpJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/ejb/EJBInvokerJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/jms/JmsHelper.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/jms/JmsJobException.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/jms/JmsMessageFactory.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/jms/SendDestinationMessageJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2004-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/jms/SendQueueMessageJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/jms/SendTopicMessageJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2004-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/jmx/JMXInvokerJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-jobs/src/main/java/org/quartz/jobs/ee/mail/SendMailJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-oracle/src/main/java/org/quartz/impl/jdbcjobstore/oracle/OracleDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-plugins/src/main/java/org/quartz/plugins/SchedulerPluginWithUserTransactionSupport.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-plugins/src/main/java/org/quartz/plugins/history/LoggingJobHistoryPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-plugins/src/main/java/org/quartz/plugins/history/LoggingTriggerHistoryPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-plugins/src/main/java/org/quartz/plugins/interrupt/JobInterruptMonitorPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-plugins/src/main/java/org/quartz/plugins/management/ShutdownHookPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-plugins/src/main/java/org/quartz/plugins/xml/XMLSchedulingDataProcessorPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2010 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-plugins/src/test/java/org/quartz/integrations/tests/AutoInterruptableJobTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2009 Terracotta, Inc.
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy

File: quartz-plugins/src/test/java/org/quartz/integrations/tests/HelloJob.java
Patch:
@@ -1,7 +1,7 @@
 package org.quartz.integrations.tests;
 
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-weblogic/src/main/java/org/quartz/impl/jdbcjobstore/WebLogicDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-weblogic/src/main/java/org/quartz/impl/jdbcjobstore/oracle/weblogic/WebLogicOracleDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz-weblogic/src/main/java/org/quartz/utils/weblogic/WeblogicConnectionProvider.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/AnnualCalendarSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CalendarIntervalTriggerImplSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CronCalendarSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CronTriggerImplSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/DailyCalendarSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/DailyTimeIntervalTriggerImplSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/FiredTriggerSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/HolidayCalendarSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/JobDetailImplSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/JobWrapperSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/MonthlyCalendarSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/SimpleTriggerImplSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/SimplisticTimeZone.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/TimeTriggerSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/TriggerWrapperSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/Utilities.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/WeeklyCalendarSerializationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Terracotta, Inc..
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: quartz-core/src/main/java/org/quartz/core/RemotableQuartzScheduler.java
Patch:
@@ -148,6 +148,8 @@ public interface RemotableQuartzScheduler extends Remote {
 
     TriggerState getTriggerState(TriggerKey triggerKey) throws SchedulerException, RemoteException;
 
+    void resetTriggerFromErrorState(TriggerKey triggerKey) throws SchedulerException, RemoteException;
+
     void addCalendar(String calName, Calendar calendar, boolean replace, boolean updateTriggers) throws SchedulerException, RemoteException;
 
     boolean deleteCalendar(String calName) throws SchedulerException, RemoteException;

File: quartz-core/src/main/java/org/quartz/core/RemotableQuartzScheduler.java
Patch:
@@ -148,6 +148,8 @@ public interface RemotableQuartzScheduler extends Remote {
 
     TriggerState getTriggerState(TriggerKey triggerKey) throws SchedulerException, RemoteException;
 
+    void resetTriggerFromErrorState(TriggerKey triggerKey) throws SchedulerException, RemoteException;
+
     void addCalendar(String calName, Calendar calendar, boolean replace, boolean updateTriggers) throws SchedulerException, RemoteException;
 
     boolean deleteCalendar(String calName) throws SchedulerException, RemoteException;

File: quartz-core/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -563,7 +563,7 @@ public void run() {
                 catch(InterruptedException ignore) {}
                 try { start(); }
                 catch(SchedulerException se) {
-                    getLog().error("Unable to start secheduler after startup delay.", se);
+                    getLog().error("Unable to start scheduler after startup delay.", se);
                 }
             }
         });

File: quartz-core/src/main/java/org/quartz/JobKey.java
Patch:
@@ -23,7 +23,7 @@
  * Uniquely identifies a {@link JobDetail}.
  * 
  * <p>Keys are composed of both a name and group, and the name must be unique
- * within the group.  If only a group is specified then the default group
+ * within the group.  If only a name is specified then the default group
  * name will be used.</p> 
  *
  * <p>Quartz provides a builder-style API for constructing scheduling-related

File: quartz-core/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -563,7 +563,7 @@ public void run() {
                 catch(InterruptedException ignore) {}
                 try { start(); }
                 catch(SchedulerException se) {
-                    getLog().error("Unable to start secheduler after startup delay.", se);
+                    getLog().error("Unable to start scheduler after startup delay.", se);
                 }
             }
         });

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -1035,7 +1035,7 @@ private void doUpdateOfMisfiredTrigger(Connection conn, OperableTrigger trig, bo
             schedSignaler.notifySchedulerListenersFinalized(trig);
         } else {
             storeTrigger(conn, trig, null, true, newStateIfNotComplete,
-                    forceState, false);
+                    forceState, recovering);
         }
     }
 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -1035,7 +1035,7 @@ private void doUpdateOfMisfiredTrigger(Connection conn, OperableTrigger trig, bo
             schedSignaler.notifySchedulerListenersFinalized(trig);
         } else {
             storeTrigger(conn, trig, null, true, newStateIfNotComplete,
-                    forceState, false);
+                    forceState, recovering);
         }
     }
 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -1035,7 +1035,7 @@ private void doUpdateOfMisfiredTrigger(Connection conn, OperableTrigger trig, bo
             schedSignaler.notifySchedulerListenersFinalized(trig);
         } else {
             storeTrigger(conn, trig, null, true, newStateIfNotComplete,
-                    forceState, false);
+                    forceState, recovering);
         }
     }
 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -1035,7 +1035,7 @@ private void doUpdateOfMisfiredTrigger(Connection conn, OperableTrigger trig, bo
             schedSignaler.notifySchedulerListenersFinalized(trig);
         } else {
             storeTrigger(conn, trig, null, true, newStateIfNotComplete,
-                    forceState, false);
+                    forceState, recovering);
         }
     }
 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreCMT.java
Patch:
@@ -245,7 +245,7 @@ protected Object executeInLock(
             return txCallback.execute(conn);
         } finally {
             try {
-                releaseLock(LOCK_TRIGGER_ACCESS, transOwner);
+                releaseLock(lockName, transOwner);
             } finally {
                 cleanupConnection(conn);
             }

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreCMT.java
Patch:
@@ -245,7 +245,7 @@ protected Object executeInLock(
             return txCallback.execute(conn);
         } finally {
             try {
-                releaseLock(LOCK_TRIGGER_ACCESS, transOwner);
+                releaseLock(lockName, transOwner);
             } finally {
                 cleanupConnection(conn);
             }

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -1160,7 +1160,7 @@ public int updateTrigger(Connection conn, OperableTrigger trigger, String state,
         // save some clock cycles by unnecessarily writing job data blob ...
         boolean updateJobData = trigger.getJobDataMap().isDirty();
         ByteArrayOutputStream baos = null;
-        if(updateJobData && trigger.getJobDataMap().size() > 0) {
+        if(updateJobData) {
             baos = serializeJobData(trigger.getJobDataMap());
         }
                 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -1160,7 +1160,7 @@ public int updateTrigger(Connection conn, OperableTrigger trigger, String state,
         // save some clock cycles by unnecessarily writing job data blob ...
         boolean updateJobData = trigger.getJobDataMap().isDirty();
         ByteArrayOutputStream baos = null;
-        if(updateJobData && trigger.getJobDataMap().size() > 0) {
+        if(updateJobData) {
             baos = serializeJobData(trigger.getJobDataMap());
         }
                 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -1158,7 +1158,7 @@ public int updateTrigger(Connection conn, OperableTrigger trigger, String state,
             JobDetail jobDetail) throws SQLException, IOException {
 
         // save some clock cycles by unnecessarily writing job data blob ...
-        boolean updateJobData = trigger.getJobDataMap().isDirty() && (trigger.getJobDataMap().size() > 0);
+        boolean updateJobData = trigger.getJobDataMap().isDirty();
         ByteArrayOutputStream baos = null;
         if(updateJobData) {
             baos = serializeJobData(trigger.getJobDataMap());

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/StdJDBCDelegate.java
Patch:
@@ -1158,9 +1158,9 @@ public int updateTrigger(Connection conn, OperableTrigger trigger, String state,
             JobDetail jobDetail) throws SQLException, IOException {
 
         // save some clock cycles by unnecessarily writing job data blob ...
-        boolean updateJobData = trigger.getJobDataMap().isDirty();
+        boolean updateJobData = trigger.getJobDataMap().isDirty() && (trigger.getJobDataMap().size() > 0);
         ByteArrayOutputStream baos = null;
-        if(updateJobData && trigger.getJobDataMap().size() > 0) {
+        if(updateJobData) {
             baos = serializeJobData(trigger.getJobDataMap());
         }
                 

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CalendarIntervalTriggerImplSerializationTest.java
Patch:
@@ -79,7 +79,7 @@ public void testConstructed() throws IOException, ClassNotFoundException {
     cti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY);
     cti.setPriority(5);
     
-    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
@@ -96,7 +96,7 @@ public void testFired() throws IOException, ClassNotFoundException {
 
     cti.triggered(null);
     
-    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17", "JDK18"));
     
   }
 }

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CronTriggerImplSerializationTest.java
Patch:
@@ -79,7 +79,7 @@ public void testConstructed() throws IOException, ClassNotFoundException, ParseE
     cti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY);
     cti.setPriority(5);
     
-    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
@@ -93,7 +93,7 @@ public void testFired() throws IOException, ClassNotFoundException, ParseExcepti
 
     cti.triggered(null);
     
-    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CronTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CronTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17", "JDK18"));
     
   }
   

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/DailyTimeIntervalTriggerImplSerializationTest.java
Patch:
@@ -71,7 +71,7 @@ public void testConstructed() throws IOException, ClassNotFoundException {
     dti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY);
     dti.setPriority(5);
     
-    validateSerializedForm(dti, COMPARATOR, expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(dti, COMPARATOR, expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
@@ -85,6 +85,6 @@ public void testFired() throws IOException, ClassNotFoundException {
 
     dti.triggered(null);
     
-    validateSerializedForm(dti, COMPARATOR, expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17_1", "JDK17_2"));
+    validateSerializedForm(dti, COMPARATOR, expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17_1", "JDK17_2", "JDK18"));
   }
 }

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/JobDataMapSerializationTest.java
Patch:
@@ -33,14 +33,14 @@ public int compare(JobDataMap o1, JobDataMap o2) {
   @Test
   public void testEmptyMap() throws IOException, ClassNotFoundException {
     JobDataMap jdm = new JobDataMap();
-    validateSerializedForm(jdm, COMPARATOR, expand("serializedforms/JobDataMapSerializationTest.testEmptyMap.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(jdm, COMPARATOR, expand("serializedforms/JobDataMapSerializationTest.testEmptyMap.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
   public void testEmptyAllowTransientsMap() throws IOException, ClassNotFoundException {
     JobDataMap jdm = new JobDataMap();
     jdm.setAllowsTransientData(true);
-    validateSerializedForm(jdm, COMPARATOR, expand("serializedforms/JobDataMapSerializationTest.testEmptyAllowTransientsMap.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(jdm, COMPARATOR, expand("serializedforms/JobDataMapSerializationTest.testEmptyAllowTransientsMap.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/SimpleTriggerImplSerializationTest.java
Patch:
@@ -65,7 +65,7 @@ public void testConstructed() throws IOException, ClassNotFoundException {
     sti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY);
     sti.setPriority(5);
     
-    validateSerializedForm(sti, COMPARATOR, expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(sti, COMPARATOR, expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
@@ -79,7 +79,7 @@ public void testFired() throws IOException, ClassNotFoundException {
 
     sti.triggered(null);
     
-    validateSerializedForm(sti, COMPARATOR, expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(sti, COMPARATOR, expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17", "JDK18"));
     
   }
 }

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CalendarIntervalTriggerImplSerializationTest.java
Patch:
@@ -79,7 +79,7 @@ public void testConstructed() throws IOException, ClassNotFoundException {
     cti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY);
     cti.setPriority(5);
     
-    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
@@ -96,7 +96,7 @@ public void testFired() throws IOException, ClassNotFoundException {
 
     cti.triggered(null);
     
-    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17", "JDK18"));
     
   }
 }

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CronTriggerImplSerializationTest.java
Patch:
@@ -79,7 +79,7 @@ public void testConstructed() throws IOException, ClassNotFoundException, ParseE
     cti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY);
     cti.setPriority(5);
     
-    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
@@ -93,7 +93,7 @@ public void testFired() throws IOException, ClassNotFoundException, ParseExcepti
 
     cti.triggered(null);
     
-    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CronTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(cti, COMPARATOR, expand("serializedforms/CronTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17", "JDK18"));
     
   }
   

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/DailyTimeIntervalTriggerImplSerializationTest.java
Patch:
@@ -71,7 +71,7 @@ public void testConstructed() throws IOException, ClassNotFoundException {
     dti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY);
     dti.setPriority(5);
     
-    validateSerializedForm(dti, COMPARATOR, expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(dti, COMPARATOR, expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
@@ -85,6 +85,6 @@ public void testFired() throws IOException, ClassNotFoundException {
 
     dti.triggered(null);
     
-    validateSerializedForm(dti, COMPARATOR, expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17_1", "JDK17_2"));
+    validateSerializedForm(dti, COMPARATOR, expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17_1", "JDK17_2", "JDK18"));
   }
 }

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/JobDataMapSerializationTest.java
Patch:
@@ -33,14 +33,14 @@ public int compare(JobDataMap o1, JobDataMap o2) {
   @Test
   public void testEmptyMap() throws IOException, ClassNotFoundException {
     JobDataMap jdm = new JobDataMap();
-    validateSerializedForm(jdm, COMPARATOR, expand("serializedforms/JobDataMapSerializationTest.testEmptyMap.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(jdm, COMPARATOR, expand("serializedforms/JobDataMapSerializationTest.testEmptyMap.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
   public void testEmptyAllowTransientsMap() throws IOException, ClassNotFoundException {
     JobDataMap jdm = new JobDataMap();
     jdm.setAllowsTransientData(true);
-    validateSerializedForm(jdm, COMPARATOR, expand("serializedforms/JobDataMapSerializationTest.testEmptyAllowTransientsMap.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(jdm, COMPARATOR, expand("serializedforms/JobDataMapSerializationTest.testEmptyAllowTransientsMap.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/SimpleTriggerImplSerializationTest.java
Patch:
@@ -65,7 +65,7 @@ public void testConstructed() throws IOException, ClassNotFoundException {
     sti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY);
     sti.setPriority(5);
     
-    validateSerializedForm(sti, COMPARATOR, expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(sti, COMPARATOR, expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser", "JDK16", "JDK17", "JDK18"));
   }
   
   @Test
@@ -79,7 +79,7 @@ public void testFired() throws IOException, ClassNotFoundException {
 
     sti.triggered(null);
     
-    validateSerializedForm(sti, COMPARATOR, expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17"));
+    validateSerializedForm(sti, COMPARATOR, expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser", "JDK16", "JDK17", "JDK18"));
     
   }
 }

File: quartz-core/src/main/java/org/quartz/simpl/RAMJobStore.java
Patch:
@@ -988,7 +988,7 @@ protected ArrayList<TriggerWrapper> getTriggerWrappersForJob(JobKey jobKey) {
         synchronized (lock) {
             List<TriggerWrapper> jobList = triggersByJob.get(jobKey);
             if(jobList != null) {
-                for(TriggerWrapper trigger : jobList) {{
+                for(TriggerWrapper trigger : jobList) {
                     trigList.add(trigger);
                 }
             }

File: quartz-core/src/main/java/org/quartz/utils/PoolingConnectionProvider.java
Patch:
@@ -96,7 +96,7 @@ public class PoolingConnectionProvider implements ConnectionProvider {
     public static final String DB_VALIDATE_ON_CHECKOUT = "validateOnCheckout";
     
     /** Discard connections after they have been idle this many seconds.  0 disables the feature. Default is 0.*/ 
-    private static final String DB_DISCARD_IDLE_CONNECTIONS_SECONDS = "discardIdleConnectionsSeconds"; 
+    public static final String DB_DISCARD_IDLE_CONNECTIONS_SECONDS = "discardIdleConnectionsSeconds";
 
     /** Default maximum number of database connections in the pool. */
     public static final int DEFAULT_DB_MAX_CONNECTIONS = 10;

File: quartz-core/src/test/java/org/quartz/utils/PoolingConnectionProviderTest.java
Patch:
@@ -100,6 +100,7 @@ protected Properties createSchedulerProperties() {
         properties.put("org.quartz.dataSource.myDS.acquireIncrement","5");
         properties.put("org.quartz.dataSource.myDS.acquireRetryAttempts","3");
         properties.put("org.quartz.dataSource.myDS.acquireRetryDelay","3000");
+        properties.put("org.quartz.dataSource.myDS.discardIdleConnectionsSeconds","60");
 
         return properties;
     }

File: system-tests/src/test/java/org/terracotta/quartz/tests/ShutdownClient.java
Patch:
@@ -223,7 +223,8 @@ private static void removeKnownThreads(Collection<ThreadInfo> dump) {
                                                new ThreadIgnore("Poller SunPKCS11", "sun.security.pkcs11."),
                                                new ThreadIgnore("(Attach Listener)"),
                                                new ThreadIgnore("JFR request timer"),
-                                               new ThreadIgnore("JMAPI event thread"));
+                                               new ThreadIgnore("JMAPI event thread"),
+                                               new ThreadIgnore("AWT-AppKit"));
 
     for (Iterator<ThreadInfo> it = dump.iterator(); it.hasNext();) {
       ThreadInfo threadInfo = it.next();

File: quartz-core/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -329,8 +329,8 @@ public static String getVersionMajor() {
     }
     
     private boolean shouldRunUpdateCheck() {
-        if(resources.isRunUpdateCheck() && !Boolean.getBoolean(StdSchedulerFactory.PROP_SCHED_ENABLE_UPDATE_CHECK) &&
-                Boolean.getBoolean("org.terracotta.quartz.enableUpdateCheck")) {
+        if(resources.isRunUpdateCheck() && !Boolean.getBoolean(StdSchedulerFactory.PROP_SCHED_SKIP_UPDATE_CHECK) &&
+                !Boolean.getBoolean("org.terracotta.quartz.skipUpdateCheck")) {
             return true;
         }
         return false;

File: quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java
Patch:
@@ -121,7 +121,7 @@ public class StdSchedulerFactory implements SchedulerFactory {
 
     public static final String PROP_SCHED_THREAD_NAME = "org.quartz.scheduler.threadName";
 
-    public static final String PROP_SCHED_ENABLE_UPDATE_CHECK = "org.quartz.scheduler.enableUpdateCheck";
+    public static final String PROP_SCHED_SKIP_UPDATE_CHECK = "org.quartz.scheduler.skipUpdateCheck";
 
     public static final String PROP_SCHED_BATCH_TIME_WINDOW = "org.quartz.scheduler.batchTriggerAcquisitionFireAheadTimeWindow";
 
@@ -659,7 +659,7 @@ else if (schedInstId.equals(SYSTEM_PROPERTY_AS_INSTANCE_ID)) {
         boolean threadsInheritInitalizersClassLoader =
             cfg.getBooleanProperty(PROP_SCHED_SCHEDULER_THREADS_INHERIT_CONTEXT_CLASS_LOADER_OF_INITIALIZING_THREAD);
 
-        boolean enableUpdateCheck = cfg.getBooleanProperty(PROP_SCHED_ENABLE_UPDATE_CHECK, false);
+        boolean skipUpdateCheck = cfg.getBooleanProperty(PROP_SCHED_SKIP_UPDATE_CHECK, true);
         long batchTimeWindow = cfg.getLongProperty(PROP_SCHED_BATCH_TIME_WINDOW, 0L);
         int maxBatchSize = cfg.getIntProperty(PROP_SCHED_MAX_BATCH_SIZE, 1);
 
@@ -1240,7 +1240,7 @@ else if (schedInstId.equals(SYSTEM_PROPERTY_AS_INSTANCE_ID)) {
             rsrcs.setJobRunShellFactory(jrsf);
             rsrcs.setMakeSchedulerThreadDaemon(makeSchedulerThreadDaemon);
             rsrcs.setThreadsInheritInitializersClassLoadContext(threadsInheritInitalizersClassLoader);
-            rsrcs.setRunUpdateCheck(enableUpdateCheck);
+            rsrcs.setRunUpdateCheck(!skipUpdateCheck);
             rsrcs.setBatchTimeWindow(batchTimeWindow);
             rsrcs.setMaxBatchSize(maxBatchSize);
             rsrcs.setInterruptJobsOnShutdown(interruptJobsOnShutdown);

File: quartz-core/src/test/java/org/quartz/integrations/tests/QTZ179_TriggerLostAfterDbRestart_Test.java
Patch:
@@ -69,7 +69,7 @@ public static void initialize() throws Exception {
         
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
+        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: quartz-core/src/test/java/org/quartz/integrations/tests/QTZ283_IgnoreMisfirePolicyJdbcStore_Test.java
Patch:
@@ -66,7 +66,7 @@ public static void initialize() throws Exception {
         
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
+        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: quartz-core/src/test/java/org/quartz/integrations/tests/QTZ336_MissSchedulingChangeSignalTest.java
Patch:
@@ -61,7 +61,7 @@ public void simpleScheduleAlwaysFiredUnder20s() throws Exception {
         } finally {
             propertiesIs.close();
         }
-        properties.setProperty("org.quartz.scheduler.enableUpdateCheck", "false");
+        properties.setProperty("org.quartz.scheduler.skipUpdateCheck", "true");
         // Use a custom RAMJobStore to produce context switches leading to the race condition
         properties.setProperty("org.quartz.jobStore.class", SlowRAMJobStore.class.getName());
         SchedulerFactory sf = new StdSchedulerFactory(properties);

File: quartz-core/src/test/java/org/quartz/integrations/tests/QuartzDatabaseTestSupport.java
Patch:
@@ -85,7 +85,7 @@ protected Properties createSchedulerProperties() {
         Properties properties = new Properties();
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
+        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: quartz-core/src/test/java/org/quartz/integrations/tests/QuartzMemoryTestSupport.java
Patch:
@@ -54,7 +54,7 @@ protected Properties createSchedulerProperties() {
         Properties properties = new Properties();
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
+        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: quartz-core/src/test/java/org/quartz/utils/PoolingConnectionProviderTest.java
Patch:
@@ -74,7 +74,7 @@ protected Properties createSchedulerProperties() {
         Properties properties = new Properties();
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
+        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/PlainTerracottaJobStore.java
Patch:
@@ -390,7 +390,7 @@ protected T createNewJobStoreInstance(String schedulerName, final boolean useSyn
   }
 
   private void scheduleUpdateCheck() {
-    if (!Boolean.getBoolean("org.terracotta.quartz.enableUpdateCheck")) {
+    if (!Boolean.getBoolean("org.terracotta.quartz.skipUpdateCheck")) {
       updateCheckTimer = new Timer("Update Checker", true);
       updateCheckTimer.scheduleAtFixedRate(new UpdateChecker(), 100, WEEKLY);
     }

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/UpdateChecker.java
Patch:
@@ -60,7 +60,7 @@ public void run() {
    */
   public void checkForUpdate() {
     try {
-      if (!Boolean.getBoolean("org.terracotta.quartz.enableUpdateCheck")) {
+      if (!Boolean.getBoolean("org.terracotta.quartz.skipUpdateCheck")) {
         doCheck();
       }
     } catch (Throwable t) {

File: quartz-core/src/main/java/org/quartz/core/QuartzScheduler.java
Patch:
@@ -330,7 +330,7 @@ public static String getVersionMajor() {
     
     private boolean shouldRunUpdateCheck() {
         if(resources.isRunUpdateCheck() && !Boolean.getBoolean(StdSchedulerFactory.PROP_SCHED_SKIP_UPDATE_CHECK) &&
-                !Boolean.getBoolean("org.terracotta.quartz.skipUpdateCheck")) {
+                Boolean.getBoolean("org.terracotta.quartz.enableUpdateCheck")) {
             return true;
         }
         return false;

File: quartz-core/src/main/java/org/quartz/core/QuartzSchedulerResources.java
Patch:
@@ -89,7 +89,7 @@ public class QuartzSchedulerResources {
 
     private ThreadExecutor threadExecutor;
 
-    private boolean runUpdateCheck = true;
+    private boolean runUpdateCheck = false;
 
     private long batchTimeWindow = 0;
 

File: quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java
Patch:
@@ -121,7 +121,7 @@ public class StdSchedulerFactory implements SchedulerFactory {
 
     public static final String PROP_SCHED_THREAD_NAME = "org.quartz.scheduler.threadName";
 
-    public static final String PROP_SCHED_SKIP_UPDATE_CHECK = "org.quartz.scheduler.skipUpdateCheck";
+    public static final String PROP_SCHED_ENABLE_UPDATE_CHECK = "org.quartz.scheduler.enableUpdateCheck";
 
     public static final String PROP_SCHED_BATCH_TIME_WINDOW = "org.quartz.scheduler.batchTriggerAcquisitionFireAheadTimeWindow";
 
@@ -659,7 +659,7 @@ else if (schedInstId.equals(SYSTEM_PROPERTY_AS_INSTANCE_ID)) {
         boolean threadsInheritInitalizersClassLoader =
             cfg.getBooleanProperty(PROP_SCHED_SCHEDULER_THREADS_INHERIT_CONTEXT_CLASS_LOADER_OF_INITIALIZING_THREAD);
 
-        boolean skipUpdateCheck = cfg.getBooleanProperty(PROP_SCHED_SKIP_UPDATE_CHECK, false);
+        boolean enableUpdateCheck = cfg.getBooleanProperty(PROP_SCHED_ENABLE_UPDATE_CHECK, false);
         long batchTimeWindow = cfg.getLongProperty(PROP_SCHED_BATCH_TIME_WINDOW, 0L);
         int maxBatchSize = cfg.getIntProperty(PROP_SCHED_MAX_BATCH_SIZE, 1);
 
@@ -1240,7 +1240,7 @@ else if (schedInstId.equals(SYSTEM_PROPERTY_AS_INSTANCE_ID)) {
             rsrcs.setJobRunShellFactory(jrsf);
             rsrcs.setMakeSchedulerThreadDaemon(makeSchedulerThreadDaemon);
             rsrcs.setThreadsInheritInitializersClassLoadContext(threadsInheritInitalizersClassLoader);
-            rsrcs.setRunUpdateCheck(!skipUpdateCheck);
+            rsrcs.setRunUpdateCheck(enableUpdateCheck);
             rsrcs.setBatchTimeWindow(batchTimeWindow);
             rsrcs.setMaxBatchSize(maxBatchSize);
             rsrcs.setInterruptJobsOnShutdown(interruptJobsOnShutdown);

File: quartz-core/src/test/java/org/quartz/integrations/tests/QTZ179_TriggerLostAfterDbRestart_Test.java
Patch:
@@ -69,7 +69,7 @@ public static void initialize() throws Exception {
         
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
+        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: quartz-core/src/test/java/org/quartz/integrations/tests/QTZ283_IgnoreMisfirePolicyJdbcStore_Test.java
Patch:
@@ -66,7 +66,7 @@ public static void initialize() throws Exception {
         
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
+        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: quartz-core/src/test/java/org/quartz/integrations/tests/QTZ336_MissSchedulingChangeSignalTest.java
Patch:
@@ -61,7 +61,7 @@ public void simpleScheduleAlwaysFiredUnder20s() throws Exception {
         } finally {
             propertiesIs.close();
         }
-        properties.setProperty("org.quartz.scheduler.skipUpdateCheck", "true");
+        properties.setProperty("org.quartz.scheduler.enableUpdateCheck", "false");
         // Use a custom RAMJobStore to produce context switches leading to the race condition
         properties.setProperty("org.quartz.jobStore.class", SlowRAMJobStore.class.getName());
         SchedulerFactory sf = new StdSchedulerFactory(properties);

File: quartz-core/src/test/java/org/quartz/integrations/tests/QuartzDatabaseTestSupport.java
Patch:
@@ -85,7 +85,7 @@ protected Properties createSchedulerProperties() {
         Properties properties = new Properties();
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
+        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: quartz-core/src/test/java/org/quartz/integrations/tests/QuartzMemoryTestSupport.java
Patch:
@@ -54,7 +54,7 @@ protected Properties createSchedulerProperties() {
         Properties properties = new Properties();
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
+        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: quartz-core/src/test/java/org/quartz/utils/PoolingConnectionProviderTest.java
Patch:
@@ -74,7 +74,7 @@ protected Properties createSchedulerProperties() {
         Properties properties = new Properties();
         properties.put("org.quartz.scheduler.instanceName","TestScheduler");
         properties.put("org.quartz.scheduler.instanceId","AUTO");
-        properties.put("org.quartz.scheduler.skipUpdateCheck","true");
+        properties.put("org.quartz.scheduler.enableUpdateCheck","false");
         properties.put("org.quartz.threadPool.class","org.quartz.simpl.SimpleThreadPool");
         properties.put("org.quartz.threadPool.threadCount","12");
         properties.put("org.quartz.threadPool.threadPriority","5");

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/PlainTerracottaJobStore.java
Patch:
@@ -393,7 +393,7 @@ protected T createNewJobStoreInstance(String schedulerName, final boolean useSyn
   }
 
   private void scheduleUpdateCheck() {
-    if (!Boolean.getBoolean("org.terracotta.quartz.skipUpdateCheck")) {
+    if (!Boolean.getBoolean("org.terracotta.quartz.enableUpdateCheck")) {
       updateCheckTimer = new Timer("Update Checker", true);
       updateCheckTimer.scheduleAtFixedRate(new UpdateChecker(), 100, WEEKLY);
     }

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/UpdateChecker.java
Patch:
@@ -60,7 +60,7 @@ public void run() {
    */
   public void checkForUpdate() {
     try {
-      if (!Boolean.getBoolean("org.terracotta.quartz.skipUpdateCheck")) {
+      if (!Boolean.getBoolean("org.terracotta.quartz.enableUpdateCheck")) {
         doCheck();
       }
     } catch (Throwable t) {

File: quartz-core/src/main/java/org/quartz/impl/JobDetailImpl.java
Patch:
@@ -429,7 +429,8 @@ public boolean equals(Object obj) {
 
     @Override
     public int hashCode() {
-        return getKey().hashCode();
+    	JobKey key = getKey();
+        return key == null ? 0 : getKey().hashCode();
     }
     
     @Override

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/AnnualCalendarSerializationTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.impl.calendar.AnnualCalendar;
 import org.quartz.impl.calendar.HolidayCalendar;
@@ -36,6 +37,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class AnnualCalendarSerializationTest {
   
   private static final Comparator<AnnualCalendar> COMPARATOR = new Comparator<AnnualCalendar>() {

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CalendarIntervalTriggerImplSerializationTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Date;
 import java.util.TimeZone;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.JobDataMap;
 import org.quartz.TimeOfDay;
@@ -35,6 +36,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class CalendarIntervalTriggerImplSerializationTest {
   private static final Comparator<CalendarIntervalTriggerImpl> COMPARATOR = new Comparator<CalendarIntervalTriggerImpl>() {
     @Override

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CronCalendarSerializationTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.text.ParseException;
 import java.util.Comparator;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.impl.calendar.CronCalendar;
 import org.quartz.impl.calendar.HolidayCalendar;
@@ -32,6 +33,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class CronCalendarSerializationTest {
   
   private static final Comparator<CronCalendar> COMPARATOR = new Comparator<CronCalendar>() {

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CronExpressionSerializationTest.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.Comparator;
 import java.util.TimeZone;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.CronExpression;
 
@@ -23,6 +24,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class CronExpressionSerializationTest {
 
   private static final Comparator<CronExpression> COMPARATOR = new Comparator<CronExpression>() {

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/CronTriggerImplSerializationTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Date;
 import java.util.TimeZone;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.JobDataMap;
 import org.quartz.impl.triggers.CronTriggerImpl;
@@ -34,6 +35,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class CronTriggerImplSerializationTest {
   /*
     private CronExpression cronEx = null;

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/DailyCalendarSerializationTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Comparator;
 import java.util.TimeZone;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.impl.calendar.DailyCalendar;
 import org.quartz.impl.calendar.HolidayCalendar;
@@ -31,6 +32,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class DailyCalendarSerializationTest {
   
   private static final Comparator<DailyCalendar> COMPARATOR = new Comparator<DailyCalendar>() {

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/HolidayCalendarSerializationTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Comparator;
 import java.util.Date;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.impl.calendar.HolidayCalendar;
 import org.quartz.impl.calendar.WeeklyCalendar;
@@ -34,6 +35,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class HolidayCalendarSerializationTest {
   
   private static final Comparator<HolidayCalendar> COMPARATOR = new Comparator<HolidayCalendar>() {

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/MonthlyCalendarSerializationTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Arrays;
 import java.util.Comparator;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.impl.calendar.HolidayCalendar;
 import org.quartz.impl.calendar.MonthlyCalendar;
@@ -32,6 +33,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class MonthlyCalendarSerializationTest {
   
   private static final Comparator<MonthlyCalendar> COMPARATOR = new Comparator<MonthlyCalendar>() {

File: quartz/src/test/java/org/terracotta/quartz/upgradability/serialization/WeeklyCalendarSerializationTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Arrays;
 import java.util.Comparator;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.quartz.impl.calendar.HolidayCalendar;
 import org.quartz.impl.calendar.WeeklyCalendar;
@@ -32,6 +33,7 @@
  *
  * @author cdennis
  */
+@Ignore
 public class WeeklyCalendarSerializationTest {
   
   private static final Comparator<WeeklyCalendar> COMPARATOR = new Comparator<WeeklyCalendar>() {

File: quartz-core/src/main/java/org/quartz/CronExpression.java
Patch:
@@ -78,7 +78,7 @@
  * <tr>
  * <td align="left"><code>Month</code></td>
  * <td align="left">&nbsp;</th>
- * <td align="left"><code>1-12 or JAN-DEC</code></td>
+ * <td align="left"><code>0-11 or JAN-DEC</code></td>
  * <td align="left">&nbsp;</th>
  * <td align="left"><code>, - * /</code></td>
  * </tr>
@@ -119,7 +119,7 @@
  * the value to start with. Essentially, for each field in the expression, there
  * is a set of numbers that can be turned on or off. For seconds and minutes, 
  * the numbers range from 0 to 59. For hours 0 to 23, for days of the month 0 to
- * 31, and for months 1 to 12. The &quot;/&quot; character simply helps you turn
+ * 31, and for months 0 to 11 (JAN to DEC). The &quot;/&quot; character simply helps you turn
  * on every &quot;nth&quot; value in the given set. Thus &quot;7/6&quot; in the
  * month field only turns on month &quot;7&quot;, it does NOT mean every 6th 
  * month, please note that subtlety.  

File: quartz-core/src/main/java/org/quartz/utils/PoolingConnectionProvider.java
Patch:
@@ -239,7 +239,7 @@ private void initialize(
      * subclass's constructor.
      * </p>
      */
-    protected ComboPooledDataSource getDataSource() {
+    public ComboPooledDataSource getDataSource() {
         return datasource;
     }
 

File: quartz-core/src/main/java/org/quartz/CronScheduleBuilder.java
Patch:
@@ -109,7 +109,7 @@ public static CronScheduleBuilder cronSchedule(String cronExpression) {
             // all methods of construction ensure the expression is valid by
             // this point...
             throw new RuntimeException("CronExpression '" + cronExpression
-                    + "' is invalid,.", e);
+                    + "' is invalid.", e);
         }
     }
 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java
Patch:
@@ -1436,7 +1436,7 @@ protected boolean removeTrigger(Connection conn, TriggerKey key)
         try {
             // this must be called before we delete the trigger, obviously
             JobDetail job = getDelegate().selectJobForTrigger(conn,
-                    getClassLoadHelper(), key);
+                    getClassLoadHelper(), key, false);
 
             removedTrigger = 
                 deleteTriggerAndChildren(conn, key);

File: quartz-core/src/main/java/org/quartz/CronExpression.java
Patch:
@@ -478,7 +478,7 @@ protected void buildExpression(String expression) throws ParseException {
                     throw new ParseException("Support for specifying 'L' with other days of the week is not implemented", -1);
                 }
                 if(exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#', expr.indexOf('#') +1) != -1) {
-                    throw new ParseException("Support for specifying multiple \"nth\" days is not imlemented.", -1);
+                    throw new ParseException("Support for specifying multiple \"nth\" days is not implemented.", -1);
                 }
                 
                 StringTokenizer vTok = new StringTokenizer(expr, ",");

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/wrappers/TriggerFacade.java
Patch:
@@ -121,8 +121,7 @@ public List<TriggerWrapper> getTriggerWrappersForJob(JobKey key) {
 
     for (TriggerKey triggerKey : triggersByFQN.keySet()) {
       TriggerWrapper tw = triggersByFQN.get(triggerKey);
-      //XXX DEV-9869 temp hack
-      if (tw != null && tw.getJobKey().equals(key)) {
+      if (tw.getJobKey().equals(key)) {
         trigList.add(tw);
       }
     }

File: quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java
Patch:
@@ -1282,7 +1282,6 @@ else if (schedInstId.equals(SYSTEM_PROPERTY_AS_INSTANCE_ID)) {
 
             rsrcs.setThreadPool(tp);
             if(tp instanceof SimpleThreadPool) {
-                ((SimpleThreadPool)tp).setThreadNamePrefix(schedName + "_Worker");
                 if(threadsInheritInitalizersClassLoader)
                     ((SimpleThreadPool)tp).setThreadsInheritContextClassLoaderOfInitializingThread(threadsInheritInitalizersClassLoader);
             }

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/DefaultClusteredJobStore.java
Patch:
@@ -1116,7 +1116,8 @@ public List<OperableTrigger> getTriggersForJob(final JobKey jobKey) throws JobPe
     try {
       for (TriggerKey triggerKey : triggerFacade.allTriggerKeys()) {
         TriggerWrapper tw = triggerFacade.get(triggerKey);
-        if (tw.getJobKey().equals(jobKey)) {
+        //XXX This null check is a temporary hack to get around DEV-9869
+        if (tw != null && tw.getJobKey().equals(jobKey)) {
           trigList.add(tw.getTriggerClone());
         }
       }

File: quartz-core/src/main/java/org/quartz/simpl/RAMJobStore.java
Patch:
@@ -1568,7 +1568,8 @@ public void triggeredJobComplete(OperableTrigger trigger,
                         newData = (JobDataMap)newData.clone();
                         newData.clearDirtyFlag();
                     }
-                    ((JobDetailImpl)jd).setJobDataMap(newData);
+                    jd = jd.getJobBuilder().setJobData(newData).build();
+                    jw.jobDetail = jd;
                 }
                 if (jd.isConcurrentExectionDisallowed()) {
                     blockedJobs.remove(jd.getKey());

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/wrappers/JobWrapper.java
Patch:
@@ -20,12 +20,11 @@
 import org.quartz.JobDataMap;
 import org.quartz.JobDetail;
 import org.quartz.JobKey;
-import org.quartz.impl.JobDetailImpl;
 
 import java.io.Serializable;
 
 public class JobWrapper implements Serializable {
-  protected final JobDetail jobDetail;
+  protected JobDetail jobDetail;
 
   protected JobWrapper(JobDetail jobDetail) {
     this.jobDetail = jobDetail;
@@ -76,7 +75,7 @@ public JobDetail getJobDetailClone() {
   }
 
   public void setJobDataMap(JobDataMap newData, JobFacade jobFacade) {
-    ((JobDetailImpl) jobDetail).setJobDataMap(newData);
+    jobDetail = jobDetail.getJobBuilder().setJobData(newData).build();
     jobFacade.put(jobDetail.getKey(), this);
   }
 

File: system-tests/src/test/java/org/terracotta/quartz/tests/ExpressShutdownTest.java
Patch:
@@ -22,7 +22,7 @@
 public class ExpressShutdownTest extends AbstractStandaloneTest {
 
   public ExpressShutdownTest(TestConfig testConfig) {
-    super(testConfig, ShutdownClient1.class, ShutdownClient2.class);
+    super(testConfig, ShutdownClient.class);
 
     // JDK 1.5 perm gen collection is not reliable enough
     if (Vm.isJRockit() || Vm.isHotSpot() && Vm.isJDK15()) {

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/wrappers/JobFacade.java
Patch:
@@ -19,12 +19,12 @@
 
 import org.quartz.JobKey;
 import org.terracotta.quartz.collections.ToolkitDSHolder;
-import org.terracotta.toolkit.cache.ToolkitCache;
+import org.terracotta.toolkit.store.ToolkitStore;
 
 import java.util.Set;
 
 public class JobFacade {
-  private final ToolkitCache<JobKey, JobWrapper> jobsByFQN;
+  private final ToolkitStore<JobKey, JobWrapper> jobsByFQN;
   private final Set<String>                      allJobsGroupNames;
   private final Set<String>                      pausedJobGroups;
   private final Set<JobKey>                      blockedJobs;

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/wrappers/TriggerFacade.java
Patch:
@@ -20,18 +20,18 @@
 import org.quartz.JobKey;
 import org.quartz.TriggerKey;
 import org.terracotta.quartz.collections.ToolkitDSHolder;
-import org.terracotta.toolkit.cache.ToolkitCache;
+import org.terracotta.toolkit.store.ToolkitStore;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 
 public class TriggerFacade {
-  private final ToolkitCache<TriggerKey, TriggerWrapper> triggersByFQN;
+  private final ToolkitStore<TriggerKey, TriggerWrapper> triggersByFQN;
   private final Set<String>                              allTriggersGroupNames;
   private final Set<String>                              pausedTriggerGroupNames;
-  private final ToolkitCache<String, FiredTrigger>       firedTriggers;
+  private final ToolkitStore<String, FiredTrigger>       firedTriggers;
 
   public TriggerFacade(ToolkitDSHolder toolkitDSHolder) {
     this.triggersByFQN = toolkitDSHolder.getOrCreateTriggersMap();

File: quartz-core/src/main/java/org/quartz/impl/triggers/CalendarIntervalTriggerImpl.java
Patch:
@@ -65,7 +65,6 @@
  * @see Trigger
  * @see CronTrigger
  * @see SimpleTrigger
- * @see NthIncludedDayTrigger
  * @see TriggerUtils
  * 
  * @since 1.7
@@ -561,7 +560,7 @@ public void triggered(org.quartz.Calendar calendar) {
 
     /**
      * 
-     * @see org.quartz.Trigger#updateWithNewCalendar(org.quartz.Calendar, long)
+     * @see org.quartz.spi.OperableTrigger#updateWithNewCalendar(org.quartz.Calendar, long)
      */
     @Override
     public void updateWithNewCalendar(org.quartz.Calendar calendar,

File: quartz-core/src/test/java/org/quartz/CalendarIntervalTriggerTest.java
Patch:
@@ -276,6 +276,7 @@ public void testDaylightSavingsTransitions() {
         dailyTrigger.setStartTime(startCalendar.getTime());
         dailyTrigger.setRepeatIntervalUnit(DateBuilder.IntervalUnit.DAY);
         dailyTrigger.setRepeatInterval(1); // every day
+        dailyTrigger.setTimeZone(TimeZone.getTimeZone("EST"));
         
         targetCalendar = Calendar.getInstance();
         targetCalendar.setTimeZone(TimeZone.getTimeZone("CET"));
@@ -356,7 +357,8 @@ public void testDaylightSavingsTransitions() {
         dailyTrigger.setStartTime(startCalendar.getTime());
         dailyTrigger.setRepeatIntervalUnit(DateBuilder.IntervalUnit.DAY);
         dailyTrigger.setRepeatInterval(1); // every day
-        
+        dailyTrigger.setTimeZone(TimeZone.getTimeZone("EST"));
+
         targetCalendar = Calendar.getInstance();
         targetCalendar.setTimeZone(TimeZone.getTimeZone("CEST"));
         targetCalendar.setTime(startCalendar.getTime());

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/DefaultClusteredJobStore.java
Patch:
@@ -42,13 +42,13 @@
 import org.terracotta.quartz.wrappers.TriggerWrapper.TriggerState;
 import org.terracotta.quartz.wrappers.WrapperFactory;
 import org.terracotta.toolkit.Toolkit;
+import org.terracotta.toolkit.cache.ToolkitCache;
 import org.terracotta.toolkit.cluster.ClusterEvent;
 import org.terracotta.toolkit.cluster.ClusterInfo;
 import org.terracotta.toolkit.cluster.ClusterNode;
 import org.terracotta.toolkit.concurrent.locks.ToolkitLock;
 import org.terracotta.toolkit.internal.ToolkitInternal;
 import org.terracotta.toolkit.internal.concurrent.locks.ToolkitLockTypeInternal;
-import org.terracotta.toolkit.store.ToolkitStore;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -77,7 +77,7 @@ class DefaultClusteredJobStore implements ClusteredJobStore {
   private final TriggerFacade                                   triggerFacade;
   private final TimeTriggerSet                                  timeTriggers;
 
-  private final ToolkitStore<String, Calendar>                  calendarsByName;
+  private final ToolkitCache<String, Calendar>                  calendarsByName;
   private long                                                  misfireThreshold                        = 60000L;
 
   private final ToolkitLockTypeInternal                         lockType;

File: terracotta/bootstrap/src/main/java/org/terracotta/quartz/collections/ToolkitDSHolder.java
Patch:
@@ -24,12 +24,12 @@
 import org.terracotta.quartz.wrappers.JobWrapper;
 import org.terracotta.quartz.wrappers.TriggerWrapper;
 import org.terracotta.toolkit.Toolkit;
+import org.terracotta.toolkit.builder.ToolkitCacheConfigBuilder;
 import org.terracotta.toolkit.cache.ToolkitCache;
-import org.terracotta.toolkit.cache.ToolkitCacheConfigBuilder;
 import org.terracotta.toolkit.concurrent.locks.ToolkitLock;
 import org.terracotta.toolkit.internal.ToolkitInternal;
 import org.terracotta.toolkit.internal.concurrent.locks.ToolkitLockTypeInternal;
-import org.terracotta.toolkit.store.ToolkitStoreConfigFields.Consistency;
+import org.terracotta.toolkit.store.ToolkitConfigFields.Consistency;
 
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;

File: quartz-core/src/main/java/org/quartz/JobBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/* 
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
+/*
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-  
+
 package org.quartz;
 
 import org.quartz.impl.JobDetailImpl;

File: quartz-core/src/main/java/org/quartz/Matcher.java
Patch:
@@ -1,5 +1,5 @@
-/* 
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
+/*
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-  
+
 package org.quartz;
 
 import java.io.Serializable;

File: quartz-core/src/main/java/org/quartz/ScheduleBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/* 
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
+/*
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-  
+
 package org.quartz;
 
 import org.quartz.spi.MutableTrigger;

File: quartz-core/src/main/java/org/quartz/SimpleScheduleBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/* 
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
+/*
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-  
+
 package org.quartz;
 
 import org.quartz.impl.triggers.SimpleTriggerImpl;

File: quartz-core/src/main/java/org/quartz/TriggerBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/* 
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
+/*
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-  
+
 package org.quartz;
 
 import java.util.Date;

File: quartz-core/src/main/java/org/quartz/impl/StdJobRunShellFactory.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
+ * Copyright 2001-2009 Terracotta, Inc. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
- 
+
 package org.quartz.impl;
 
 import org.quartz.Scheduler;

File: quartz-stubs/src/main/java/oracle/sql/BLOB.java
Patch:
@@ -79,11 +79,11 @@ public InputStream getBinaryStream(long pos, long length) throws SQLException {
     return null;
   }
 
-  public void putBytes(int i, byte[] data) {
+  public void putBytes(long pos, byte[] data) throws SQLException {
     //
   }
 
-  public void trim(int length) {
+  public void trim(long length) throws SQLException {
     //
   }
 

File: quartz-plugins/src/main/java/org/quartz/plugins/xml/XMLSchedulingDataProcessorPlugin.java
Patch:
@@ -51,7 +51,7 @@
  * This plugin loads XML file(s) to add jobs and schedule them with triggers as the scheduler is initialized, and can
  * optionally periodically scan the file for changes.
  * <p>
- * The XML schema definition can be found here: http://www.quartz-scheduler.org/xml/job_scheduling_data_1_8.xsd
+ * The XML schema definition can be found here: http://www.quartz-scheduler.org/xml/job_scheduling_data_2_0.xsd
  * </p>
  * <p>
  * The periodically scanning of files for changes is not currently supported in a clustered environment.

File: quartz-core/src/main/java/org/quartz/simpl/PropertySettingJobFactory.java
Patch:
@@ -197,13 +197,13 @@ protected void setBeanProps(Object obj, JobDataMap data) throws SchedulerExcepti
                     "The setter on Job class " + obj.getClass().getName() + 
                     " for property '" + name + 
                     "' expects a " + paramType + 
-                    " but was given " + o.getClass().getName(), nfe);
+                    " but was given " + o == null ? null : o.getClass().getName(), nfe);
             } catch (IllegalArgumentException e) {
                 handleError(
                     "The setter on Job class " + obj.getClass().getName() + 
                     " for property '" + name + 
                     "' expects a " + paramType + 
-                    " but was given " + o.getClass().getName(), e);
+                    " but was given " + o == null ? null : o.getClass().getName(), e);
             } catch (IllegalAccessException e) {
                 handleError(
                     "The setter on Job class " + obj.getClass().getName() + 

File: quartz-core/src/test/java/org/quartz/utils/DirtyFlagMapTest.java
Patch:
@@ -69,7 +69,7 @@ public void testEntrySetRemove() {
         assertFalse(dirtyFlagMap.isDirty());
         dirtyFlagMap.put("a", "Y");
         dirtyFlagMap.clearDirtyFlag();
-        entrySet.remove("b");
+        dirtyFlagMap.remove("b");
         assertFalse(dirtyFlagMap.isDirty());
         entrySet.remove(entrySet.iterator().next());
         assertTrue(dirtyFlagMap.isDirty());

File: quartz-core/src/main/java/org/quartz/utils/FindbugsSuppressWarnings.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-package org.quartz.util;
+package org.quartz.utils;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: distribution/examples/src/main/java/org/quartz/examples/example1/HelloJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example1;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example10/SimpleJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example10;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example12/RemoteClientExample.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example12;
 
 import static org.quartz.CronScheduleBuilder.cronSchedule;

File: distribution/examples/src/main/java/org/quartz/examples/example12/SimpleJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example12;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example14/TriggerEchoJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2006-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-package org.quartz.examples.example14;
+ package org.quartz.examples.example14;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: distribution/examples/src/main/java/org/quartz/examples/example15/SimpleRecoveryStatefulJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example15;
 
 import org.quartz.DisallowConcurrentExecution;

File: distribution/examples/src/main/java/org/quartz/examples/example2/SimpleJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example2;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example3/SimpleJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example3;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example4/ColorJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example4;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example7/DumbInterruptableJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example7;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example8/SimpleJob.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example8;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example9/SimpleJob1.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example9;
 
 import java.util.Date;

File: distribution/examples/src/main/java/org/quartz/examples/example9/SimpleJob2.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2005 - 2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.examples.example9;
 
 import java.util.Date;

File: quartz-core/src/main/java/org/quartz/CalendarIntervalScheduleBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import java.util.TimeZone;

File: quartz-core/src/main/java/org/quartz/CronScheduleBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import java.text.ParseException;

File: quartz-core/src/main/java/org/quartz/JobBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import org.quartz.impl.JobDetailImpl;

File: quartz-core/src/main/java/org/quartz/JobKey.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import org.quartz.utils.Key;

File: quartz-core/src/main/java/org/quartz/Matcher.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import java.io.Serializable;

File: quartz-core/src/main/java/org/quartz/ScheduleBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import org.quartz.spi.MutableTrigger;

File: quartz-core/src/main/java/org/quartz/SimpleScheduleBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import org.quartz.impl.triggers.SimpleTriggerImpl;

File: quartz-core/src/main/java/org/quartz/TimeOfDay.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-package org.quartz;
+  package org.quartz;
 
 import java.io.Serializable;
 import java.util.Calendar;

File: quartz-core/src/main/java/org/quartz/TriggerBuilder.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import java.util.Date;

File: quartz-core/src/main/java/org/quartz/TriggerKey.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz;
 
 import org.quartz.utils.Key;

File: quartz-core/src/main/java/org/quartz/impl/RemoteMBeanScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-package org.quartz.impl;
+  package org.quartz.impl;
 
 import java.util.Date;
 import java.util.List;

File: quartz-core/src/main/java/org/quartz/impl/RemoteScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl;
 
 import java.rmi.RemoteException;

File: quartz-core/src/main/java/org/quartz/impl/StdJobRunShellFactory.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+ 
 package org.quartz.impl;
 
 import org.quartz.Scheduler;

File: quartz-core/src/main/java/org/quartz/impl/StdScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl;
 
 import java.util.Date;

File: quartz-core/src/main/java/org/quartz/impl/calendar/HolidayCalendar.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl.calendar;
 
 import java.io.Serializable;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/AttributeRestoringConnectionInvocationHandler.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -12,8 +12,9 @@
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
  * License for the specific language governing permissions and limitations 
  * under the License.
+ * 
  */
-package org.quartz.impl.jdbcjobstore;
+  package org.quartz.impl.jdbcjobstore;
 
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.InvocationTargetException;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/CloudscapeDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl.jdbcjobstore;
 
 import java.io.ByteArrayInputStream;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl.jdbcjobstore;
 
 /**

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DB2v6Delegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl.jdbcjobstore;
 
 import java.sql.Connection;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DB2v7Delegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl.jdbcjobstore;
 
 import java.io.ByteArrayOutputStream;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DB2v8Delegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-package org.quartz.impl.jdbcjobstore;
+  package org.quartz.impl.jdbcjobstore;
 
 import java.sql.PreparedStatement;
 import java.sql.SQLException;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DBSemaphore.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-package org.quartz.impl.jdbcjobstore;
+  package org.quartz.impl.jdbcjobstore;
 
 import java.sql.Connection;
 import java.util.HashSet;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DailyTimeIntervalTriggerPersistenceDelegate.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
+/* 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-package org.quartz.impl.jdbcjobstore;
+  package org.quartz.impl.jdbcjobstore;
 
 import java.util.HashSet;
 import java.util.Iterator;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/DriverDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl.jdbcjobstore;
 
 import java.io.IOException;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/FiredTriggerRecord.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl.jdbcjobstore;
 
 import org.quartz.JobKey;

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/HSQLDBDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 
 package org.quartz.impl.jdbcjobstore;
 

File: quartz-core/src/main/java/org/quartz/impl/jdbcjobstore/InvalidConfigurationException.java
Patch:
@@ -1,5 +1,5 @@
 /* 
- * Copyright 2001-2009 Terracotta, Inc. 
+ * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved. 
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
  * use this file except in compliance with the License. You may obtain a copy 
@@ -14,7 +14,7 @@
  * under the License.
  * 
  */
-
+  
 package org.quartz.impl.jdbcjobstore;
 
 /**

