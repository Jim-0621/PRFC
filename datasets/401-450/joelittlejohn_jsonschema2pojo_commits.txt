File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/BuilderRule.java
Patch:
@@ -110,7 +110,7 @@ public JDefinedClass apply(String nodeName, JsonNode node, JsonNode parent, JDef
       generateNoArgsBuilderConstructors(instanceClass, builderClass, concreteBuilderClass);
     }
 
-    JMethod builderMethod = instanceClass.method(JMod.PUBLIC + JMod.STATIC, builderClass, "builder");
+    JMethod builderMethod = instanceClass.method(JMod.PUBLIC + JMod.STATIC, builderClass.narrow(instanceClass.wildcard()), "builder");
     JBlock builderBody = builderMethod.body();
     builderBody._return(JExpr._new(concreteBuilderClass));
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -290,7 +290,7 @@ private JMethod addLegacyBuilder(JDefinedClass c, JFieldVar field, String jsonPr
     private JMethod addInnerBuilderMethod(JDefinedClass c, JFieldVar field, String jsonPropertyName, JsonNode node)    {
         JDefinedClass builderClass = ruleFactory.getReflectionHelper().getBaseBuilderClass(c);
 
-        JMethod builderMethod = builderClass.method(JMod.PUBLIC, builderClass, getBuilderName(jsonPropertyName, node));
+        JMethod builderMethod = builderClass.method(JMod.PUBLIC, builderClass.narrow(builderClass.typeParams()), getBuilderName(jsonPropertyName, node));
 
         JVar param = builderMethod.param(field.type(), field.name());
         JBlock body = builderMethod.body();

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -115,7 +115,6 @@ public JType apply(String nodeName, JsonNode node, JsonNode parent, JClassContai
         try {
             _enum = createEnum(node, nodeName, container);
         } catch (ClassAlreadyExistsException e) {
-            ruleFactory.getLogger().error("Could not create enum.", e);
             return e.getExistingClass();
         }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/JsonPointerUtils.java
Patch:
@@ -29,6 +29,7 @@ public class JsonPointerUtils {
         put("/", "~1");
         put("#", "~2");
         put(".", "~3");
+        put("?", "~4");
     }};
 
     public static String encodeReferenceToken(final String s) {

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/PropertiesIT.java
Patch:
@@ -212,5 +212,6 @@ public void propertyNamesWithSpecialCharacters() throws NoSuchMethodException, C
         assertNotNull(generatedType.getDeclaredMethod("getFooBar"));
         assertNotNull(generatedType.getDeclaredMethod("get$RfcNumber"));
         assertNotNull(generatedType.getDeclaredMethod("getOrgHispDhisCommonFileTypeValueOptions"));
+        assertNotNull(generatedType.getDeclaredMethod("getGood"));
     }
 }

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/DescriptionEnumIT.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.thoughtworks.qdox.JavaDocBuilder;
+import com.thoughtworks.qdox.JavaProjectBuilder;
 import com.thoughtworks.qdox.model.JavaClass;
 
 /*
@@ -46,7 +46,7 @@ public static void generateClasses() throws IOException {
         schemaRule.generateAndCompile("/schema/description/descriptionEnum.json", "com.example");
         File generatedJavaFile = schemaRule.generated("com/example/DescriptionEnum.java");
 
-        JavaDocBuilder javaDocBuilder = new JavaDocBuilder();
+        JavaProjectBuilder javaDocBuilder = new JavaProjectBuilder();
         javaDocBuilder.addSource(generatedJavaFile);
 
         classWithDescription = javaDocBuilder.getClassByName("com.example.DescriptionEnum");

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/TitleEnumIT.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.thoughtworks.qdox.JavaDocBuilder;
+import com.thoughtworks.qdox.JavaProjectBuilder;
 import com.thoughtworks.qdox.model.JavaClass;
 
 /*
@@ -45,7 +45,7 @@ public static void generateClasses() throws IOException {
         classSchemaRule.generateAndCompile("/schema/title/titleEnum.json", "com.example");
         File generatedJavaFile = classSchemaRule.generated("com/example/TitleEnum.java");
 
-        JavaDocBuilder javaDocBuilder = new JavaDocBuilder();
+        JavaProjectBuilder javaDocBuilder = new JavaProjectBuilder();
         javaDocBuilder.addSource(generatedJavaFile);
 
         classWithTitle = javaDocBuilder.getClassByName("com.example.TitleEnum");

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Jsonschema2Pojo.java
Patch:
@@ -60,7 +60,7 @@ public static void generate(GenerationConfig config, RuleLogger logger) throws I
         ruleFactory.setAnnotator(annotator);
         ruleFactory.setGenerationConfig(config);
         ruleFactory.setLogger(logger);
-        ruleFactory.setSchemaStore(new SchemaStore(createContentResolver(config)));
+        ruleFactory.setSchemaStore(new SchemaStore(createContentResolver(config), logger));
 
         SchemaMapper mapper = new SchemaMapper(ruleFactory, createSchemaGenerator(config));
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/RuleFactory.java
Patch:
@@ -20,6 +20,7 @@
 import org.jsonschema2pojo.DefaultGenerationConfig;
 import org.jsonschema2pojo.GenerationConfig;
 import org.jsonschema2pojo.Jackson2Annotator;
+import org.jsonschema2pojo.NoopRuleLogger;
 import org.jsonschema2pojo.RuleLogger;
 import org.jsonschema2pojo.SchemaStore;
 import org.jsonschema2pojo.util.NameHelper;
@@ -66,6 +67,7 @@ public RuleFactory(GenerationConfig generationConfig, Annotator annotator, Schem
         this.schemaStore = schemaStore;
         this.nameHelper = new NameHelper(generationConfig);
         this.reflectionHelper = new ReflectionHelper(this);
+        this.logger = new NoopRuleLogger();
     }
 
     /**

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -80,8 +80,6 @@ public SchemaMapper() {
      * @param schemaUrl
      *            location of the schema to be used as input
      * @return The top-most type generated from the given file
-     * @throws IOException
-     *             if the schema content cannot be read
      */
     public JType generate(JCodeModel codeModel, String className, String packageName, URL schemaUrl) {
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/GsonIT.java
Patch:
@@ -53,6 +53,8 @@ public void annotationStyleGsonProducesGsonAnnotations() throws ClassNotFoundExc
 
         assertThat(schemaRule.getGenerateDir(), not(containsText("org.codehaus.jackson")));
         assertThat(schemaRule.getGenerateDir(), not(containsText("com.fasterxml.jackson")));
+        assertThat(schemaRule.getGenerateDir(), not(containsText("jakarta.json.bind.annotation")));
+        assertThat(schemaRule.getGenerateDir(), not(containsText("javax.json.bind.annotation")));
         assertThat(schemaRule.getGenerateDir(), containsText("com.google.gson"));
         assertThat(schemaRule.getGenerateDir(), containsText("@SerializedName"));
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/Moshi1IT.java
Patch:
@@ -62,6 +62,8 @@ public void annotationStyleMoshi1ProducesMoshi1Annotations() throws ClassNotFoun
                         "sourceType", "json"))
                 .loadClass("com.example.Torrent");
 
+        assertThat(schemaRule.getGenerateDir(), not(containsText("jakarta.json.bind.annotation")));
+        assertThat(schemaRule.getGenerateDir(), not(containsText("javax.json.bind.annotation")));
         assertThat(schemaRule.getGenerateDir(), not(containsText("org.codehaus.jackson")));
         assertThat(schemaRule.getGenerateDir(), not(containsText("com.fasterxml.jackson")));
         assertThat(schemaRule.getGenerateDir(), not(containsText("com.google.gson")));

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -470,7 +470,7 @@ protected String makeUnique(final String name, Collection<String> existingNames)
         boolean found = false;
 
         for (String existingName : existingNames) {
-            if (name.equalsIgnoreCase(existingName)) {
+            if (name.equals(existingName)) {
                 found = true;
                 break;
             }

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -470,7 +470,7 @@ protected String makeUnique(final String name, Collection<String> existingNames)
         boolean found = false;
 
         for (String existingName : existingNames) {
-            if (name.equalsIgnoreCase(existingName)) {
+            if (name.equals(existingName)) {
                 found = true;
                 break;
             }

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -71,8 +71,9 @@ public static Inflector.Builder createDefaultBuilder()
             .plural("specimen", "specimens");
 
         builder.singular("s$", "")
-            .singular("(n)ews$", "$1ews")
-            .singular("([ti])a$", "$1um")
+             .singular("(n)ews$", "$1ews")
+            .singular("ia$", "ium")
+            .singular("ata$", "atum")
             .singular("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$", "$1$2sis")
             .singular("(^analy)ses$", "$1sis")
             .singular("([^f])ves$", "$1fe")

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/util/InflectorTest.java
Patch:
@@ -65,6 +65,8 @@ public void testSingularize() {
         assertThat(Inflector.getInstance().singularize("WidgetList"), is("Widget"));
 
         assertThat(Inflector.getInstance().singularize("slaves"), is("slave"));
+        assertThat(Inflector.getInstance().singularize("data"), is("datum"));
+        assertThat(Inflector.getInstance().singularize("media"), is("medium"));
     }
 
     @Test

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/json/JsonTypesIT.java
Patch:
@@ -17,6 +17,7 @@
 package org.jsonschema2pojo.integration.json;
 
 import static java.util.Arrays.*;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
 import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.junit.Assert.*;
@@ -58,9 +59,11 @@ public void simpleTypesInExampleAreMappedToCorrectJavaTypes() throws Exception {
 
         assertThat((String) generatedType.getMethod("getA").invoke(deserialisedValue), is("abc"));
         assertThat((Integer) generatedType.getMethod("getB").invoke(deserialisedValue), is(123));
+        assertThat(generatedType.getMethod("getB").getReturnType().getName(), is("java.lang.Integer"));
         assertThat((Double) generatedType.getMethod("getC").invoke(deserialisedValue), is(12999999999999999999999.99d));
         assertThat((Boolean) generatedType.getMethod("getD").invoke(deserialisedValue), is(true));
         assertThat(generatedType.getMethod("getE").invoke(deserialisedValue), is(nullValue()));
+        assertThat(generatedType.getMethod("getF").invoke(deserialisedValue), is(21474836470L));
 
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -96,7 +96,7 @@ public JType apply(String nodeName, JsonNode node, JsonNode parent, JType baseTy
 
         Class<?> type = getType(node.asText());
         if (type != null) {
-            JType jtype = baseType.owner().ref(type);
+            JType jtype = baseType.owner()._ref(type);
             if (ruleFactory.getGenerationConfig().isUsePrimitives()) {
                 jtype = jtype.unboxify();
             }

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ExcludedFromEqualsAndHashCodeIT.java
Patch:
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 
-
 package org.jsonschema2pojo.integration;
 
 import org.jsonschema2pojo.integration.util.Jsonschema2PojoRule;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/AdditionalPropertiesRule.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Spliterator;
 import java.util.Spliterators;
 import java.util.stream.StreamSupport;
-import org.apache.commons.collections15.CollectionUtils;
+
 import org.jsonschema2pojo.Schema;
 
 import com.fasterxml.jackson.databind.JsonNode;
@@ -213,7 +213,7 @@ private JMethod addInnerBuilder(JDefinedClass jclass, JType propertyType, JField
     }
 
     private String getBuilderClassName(JDefinedClass c) {
-        return ruleFactory.getNameHelper().getBuilderClassName(c);
+        return ruleFactory.getNameHelper().getBaseBuilderClassName(c);
     }
 
 }

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -262,7 +262,7 @@ private JMethod addLegacyBuilder(JDefinedClass c, JFieldVar field, String jsonPr
   }
 
   private JMethod addInnerBuilderMethod(JDefinedClass c, JFieldVar field, String jsonPropertyName, JsonNode node)    {
-    JDefinedClass builderClass = ruleFactory.getReflectionHelper().getBuilderClass(c);
+    JDefinedClass builderClass = ruleFactory.getReflectionHelper().getBaseBuilderClass(c);
 
     JMethod builderMethod = builderClass.method(JMod.PUBLIC, builderClass, getBuilderName(jsonPropertyName, node));
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/AdditionalPropertiesRule.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Spliterator;
 import java.util.Spliterators;
 import java.util.stream.StreamSupport;
-import org.apache.commons.collections15.CollectionUtils;
+
 import org.jsonschema2pojo.Schema;
 
 import com.fasterxml.jackson.databind.JsonNode;
@@ -213,7 +213,7 @@ private JMethod addInnerBuilder(JDefinedClass jclass, JType propertyType, JField
     }
 
     private String getBuilderClassName(JDefinedClass c) {
-        return ruleFactory.getNameHelper().getBuilderClassName(c);
+        return ruleFactory.getNameHelper().getBaseBuilderClassName(c);
     }
 
 }

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -262,7 +262,7 @@ private JMethod addLegacyBuilder(JDefinedClass c, JFieldVar field, String jsonPr
   }
 
   private JMethod addInnerBuilderMethod(JDefinedClass c, JFieldVar field, String jsonPropertyName, JsonNode node)    {
-    JDefinedClass builderClass = ruleFactory.getReflectionHelper().getBuilderClass(c);
+    JDefinedClass builderClass = ruleFactory.getReflectionHelper().getBaseBuilderClass(c);
 
     JMethod builderMethod = builderClass.method(JMod.PUBLIC, builderClass, getBuilderName(jsonPropertyName, node));
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/SchemaStoreTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.Test;
 import com.sun.codemodel.JDefinedClass;
 import com.sun.codemodel.JType;
+import org.mockito.internal.matchers.Same;
 
 public class SchemaStoreTest {
 
@@ -81,6 +82,7 @@ public void createWithRelativeSegmentsInPath() throws URISyntaxException {
 
         //Both schema objects should have the same Id value since their URI's point to the same resource
         assertThat(schemaWithoutRelativeSegment.getId(), is(schemaWithRelativeSegment.getId()));
+        assertThat(schemaWithoutRelativeSegment, sameInstance(schemaWithRelativeSegment));
     }
 
     @Test

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/SchemaStoreTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.Test;
 import com.sun.codemodel.JDefinedClass;
 import com.sun.codemodel.JType;
+import org.mockito.internal.matchers.Same;
 
 public class SchemaStoreTest {
 
@@ -81,6 +82,7 @@ public void createWithRelativeSegmentsInPath() throws URISyntaxException {
 
         //Both schema objects should have the same Id value since their URI's point to the same resource
         assertThat(schemaWithoutRelativeSegment.getId(), is(schemaWithRelativeSegment.getId()));
+        assertThat(schemaWithoutRelativeSegment, sameInstance(schemaWithRelativeSegment));
     }
 
     @Test

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaStore.java
Patch:
@@ -55,7 +55,7 @@ public synchronized Schema create(URI id, String refFragmentPathDelimiters) {
 
         if (!schemas.containsKey(id)) {
 
-            URI baseId = removeFragment(id);
+            URI baseId = removeFragment(id).normalize();
             JsonNode baseContent = contentResolver.resolve(baseId);
             Schema baseSchema = new Schema(baseId, baseContent, null);
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaStore.java
Patch:
@@ -55,7 +55,7 @@ public synchronized Schema create(URI id, String refFragmentPathDelimiters) {
 
         if (!schemas.containsKey(id)) {
 
-            URI baseId = removeFragment(id);
+            URI baseId = removeFragment(id).normalize();
             JsonNode baseContent = contentResolver.resolve(baseId);
             Schema baseSchema = new Schema(baseId, baseContent, null);
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -99,7 +99,8 @@ public static Inflector.Builder createDefaultBuilder()
             .singular("men$", "man")
             .singular("(.+)list$", "$1")
             .singular("specimen", "specimen")
-            .singular("status$", "status");
+            .singular("status$", "status")
+            .singular("(slave)s$", "$1");
 
         builder.irregular("curve", "curves")
             .irregular("leaf", "leaves")

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/util/InflectorTest.java
Patch:
@@ -64,6 +64,7 @@ public void testSingularize() {
         assertThat(Inflector.getInstance().singularize("LineItemTaxes"), is("LineItemTax"));
         assertThat(Inflector.getInstance().singularize("WidgetList"), is("Widget"));
 
+        assertThat(Inflector.getInstance().singularize("slaves"), is("slave"));
     }
 
     @Test

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -99,7 +99,8 @@ public static Inflector.Builder createDefaultBuilder()
             .singular("men$", "man")
             .singular("(.+)list$", "$1")
             .singular("specimen", "specimen")
-            .singular("status$", "status");
+            .singular("status$", "status")
+            .singular("(slave)s$", "$1");
 
         builder.irregular("curve", "curves")
             .irregular("leaf", "leaves")

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/util/InflectorTest.java
Patch:
@@ -64,6 +64,7 @@ public void testSingularize() {
         assertThat(Inflector.getInstance().singularize("LineItemTaxes"), is("LineItemTax"));
         assertThat(Inflector.getInstance().singularize("WidgetList"), is("Widget"));
 
+        assertThat(Inflector.getInstance().singularize("slaves"), is("slave"));
     }
 
     @Test

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.UUID;
 import java.util.regex.Pattern;
 
+import org.apache.commons.lang3.ClassUtils;
 import org.joda.time.DateTime;
 import org.joda.time.LocalDate;
 import org.joda.time.LocalTime;
@@ -165,7 +166,7 @@ private static Class<?> getTimeType(GenerationConfig config) {
     private static Class<?> tryLoadType(String typeName, String format) {
         if (!isEmpty(typeName)) {
             try {
-                Class<?> type = Thread.currentThread().getContextClassLoader().loadClass(typeName);
+                Class<?> type = ClassUtils.getClass(Thread.currentThread().getContextClassLoader(), typeName);
                 return type;
             }
             catch (ClassNotFoundException e) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/DefaultGenerationConfig.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.File;
 import java.io.FileFilter;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Map;
@@ -193,7 +194,7 @@ public SourceType getSourceType() {
      */
     @Override
     public String getOutputEncoding() {
-        return "UTF-8";
+        return StandardCharsets.UTF_8.toString();
     }
 
     /**

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/ScalaSingleStreamCodeWriter.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.FilterOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 
 public class ScalaSingleStreamCodeWriter extends SingleStreamCodeWriter {
 
@@ -42,11 +43,11 @@ public OutputStream openBinary(final JPackage pkg, String fileName) {
             public void close() throws IOException {
                 super.close();
 
-                final String javaSource = new String(javaSourceStream.toByteArray(), "utf-8");
+                final String javaSource = new String(javaSourceStream.toByteArray(), StandardCharsets.UTF_8);
                 final String scalaSource = Converter.instance210().convert(javaSource, new ConversionSettings(false));
 
                 OutputStream parentStream = ScalaSingleStreamCodeWriter.super.openBinary(pkg, scalaFileName);
-                parentStream.write(scalaSource.getBytes("utf-8"));
+                parentStream.write(scalaSource.getBytes(StandardCharsets.UTF_8));
             }
         };
     }

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/ScalaZipCodeWriter.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.FilterOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 
 import com.mysema.scalagen.ConversionSettings;
 import com.mysema.scalagen.Converter;
@@ -43,11 +44,11 @@ public OutputStream openBinary(final JPackage pkg, String fileName) {
             public void close() throws IOException {
                 super.close();
 
-                final String javaSource = new String(javaSourceStream.toByteArray(), "utf-8");
+                final String javaSource = new String(javaSourceStream.toByteArray(), StandardCharsets.UTF_8);
                 final String scalaSource = Converter.instance210().convert(javaSource, new ConversionSettings(false));
 
                 OutputStream parentStream = ScalaZipCodeWriter.super.openBinary(pkg, scalaFileName);
-                parentStream.write(scalaSource.getBytes("utf-8"));
+                parentStream.write(scalaSource.getBytes(StandardCharsets.UTF_8));
             }
         };
     }

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.mockito.Mockito.*;
 
 import org.jsonschema2pojo.Annotator;
+import org.jsonschema2pojo.RuleLogger;
 import org.jsonschema2pojo.Schema;
 import org.jsonschema2pojo.util.NameHelper;
 import org.junit.Before;
@@ -44,12 +45,14 @@ public class EnumRuleTest {
     private Annotator annotator = mock(Annotator.class);
     private RuleFactory ruleFactory = mock(RuleFactory.class);
     private TypeRule typeRule = mock(TypeRule.class);
+    private RuleLogger logger = mock(RuleLogger.class);
 
     private EnumRule rule = new EnumRule(ruleFactory);
 
     @Before
     public void wireUpConfig() {
         when(ruleFactory.getNameHelper()).thenReturn(nameHelper);
+        when(ruleFactory.getLogger()).thenReturn(logger);
         when(ruleFactory.getAnnotator()).thenReturn(annotator);
         when(ruleFactory.getTypeRule()).thenReturn(typeRule);
     }

File: jsonschema2pojo-maven-plugin/src/test/java/org/jsonschema2pojo/maven/MatchPatternsFileFilterTest.java
Patch:
@@ -159,7 +159,7 @@ public void shouldExcludeSvnDirectoriesWithDefaultExcludes() throws IOException
 
         File[] files = basedir.listFiles(fileFilter);
 
-        assertThat("the files in .svn directory were execluded.", asList(files), not(hasItems(file(".svn"))));
+        assertThat("the files in .svn directory were excluded.", asList(files), not(hasItems(file(".svn"))));
     }
 
     @Test
@@ -172,7 +172,7 @@ public void shouldExcludeFilesInSvnDirectoriesWithDefaultExcludes() throws IOExc
 
         File[] files = new File(basedir, ".svn").listFiles(fileFilter);
 
-        assertThat("the files in .svn directory were execluded.", asList(files), not(hasItems(file("svn-file.json"))));
+        assertThat("the files in .svn directory were excluded.", asList(files), not(hasItems(file("svn-file.json"))));
     }
 
     @Test
@@ -185,7 +185,7 @@ public void shouldExcludeNestedFilesInSvnDirectoriesWithDefaultExcludes() throws
 
         File[] files = new File(basedir, ".svn/sub").listFiles(fileFilter);
 
-        assertThat("the files in .svn directory were execluded.", asList(files), not(hasItems(file("sub-svn-file.json"))));
+        assertThat("the files in .svn directory were excluded.", asList(files), not(hasItems(file("sub-svn-file.json"))));
     }
     
     private File file(String relativePath) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.UUID;
 import java.util.regex.Pattern;
 
+import org.apache.commons.lang3.ClassUtils;
 import org.joda.time.DateTime;
 import org.joda.time.LocalDate;
 import org.joda.time.LocalTime;
@@ -165,7 +166,7 @@ private static Class<?> getTimeType(GenerationConfig config) {
     private static Class<?> tryLoadType(String typeName, String format) {
         if (!isEmpty(typeName)) {
             try {
-                Class<?> type = Thread.currentThread().getContextClassLoader().loadClass(typeName);
+                Class<?> type = ClassUtils.getClass(Thread.currentThread().getContextClassLoader(), typeName);
                 return type;
             }
             catch (ClassNotFoundException e) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/ScalaFileCodeWriter.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.commons.io.FileUtils;
 
 import com.mysema.scalagen.ConversionSettings;
-import com.mysema.scalagene.Converter;
+import com.mysema.scalagen.Converter;
 import com.sun.codemodel.JPackage;
 
 public class ScalaFileCodeWriter extends com.sun.codemodel.writer.FileCodeWriter {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -111,6 +111,8 @@ public JDefinedClass apply(String nodeName, JsonNode node, JsonNode parent, JDef
 
         ruleFactory.getMinLengthMaxLengthRule().apply(nodeName, node, parent, field, schema);
 
+        ruleFactory.getDigitsRule().apply(nodeName, node, parent, field, schema);
+
         if (isObject(node) || isArray(node)) {
             ruleFactory.getValidRule().apply(nodeName, node, parent, field, schema);
         }

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/RuleFactoryImplTest.java
Patch:
@@ -68,6 +68,8 @@ public void factoryMethodsCreateRules() {
         
         assertThat(ruleFactory.getValidRule(), notNullValue());
 
+        assertThat(ruleFactory.getDigitsRule(), notNullValue());
+
     }
 
     @Test

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -122,9 +122,9 @@ private boolean hasEnumerated(Schema schema, String arrayFieldName, String nodeN
         return false;
     }
 
-    private boolean hasFlag(JsonNode node, String flatName) {
-        if (node.has(flatName)) {
-            final JsonNode requiredNode = node.get(flatName);
+    private boolean hasFlag(JsonNode node, String fieldName) {
+        if (node.has(fieldName)) {
+            final JsonNode requiredNode = node.get(fieldName);
             return requiredNode.asBoolean();
         }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ConstructorRule.java
Patch:
@@ -167,7 +167,7 @@ private void generateFieldsBuilderConstructor(JDefinedClass builderClass, JDefin
     // The constructor invocation will also need all the parameters passed through
     JInvocation instanceConstructorInvocation = JExpr._new(instanceClass);
     for(JVar param : instanceConstructor.params()) {
-      instanceConstructorInvocation.arg(param.name());
+      instanceConstructorInvocation.arg(param);
     }
 
     // Only initialize the instance if the object being constructed is actually this class

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/FormatRuleJodaTest.java
Patch:
@@ -43,7 +43,7 @@
 public class FormatRuleJodaTest {
 
     private GenerationConfig config = mock(GenerationConfig.class);
-    private FormatRule rule = new FormatRule(new RuleFactory(config, new NoopAnnotator(), new SchemaStore()));
+    private FormatRule rule;
 
     private final String formatValue;
     private final Class<?> expectedType;
@@ -66,6 +66,7 @@ public void setupConfig() {
         when(config.isUseJodaLocalTimes()).thenReturn(true);
         when(config.isUseJodaLocalDates()).thenReturn(true);
         when(config.isUseJodaDates()).thenReturn(true);
+        rule = new FormatRule(new RuleFactory(config, new NoopAnnotator(), new SchemaStore()));
     }
 
     @Test

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/FormatRulePrimitivesTest.java
Patch:
@@ -72,7 +72,7 @@ public FormatRulePrimitivesTest(Class<?> primitive, Class<?> wrapper) {
     }
 
     @Test
-    public void applyGeneratesTypeFromFormatValue() {
+    public void usePrimitivesWithCustomTypeMapping() {
         JType result = rule.apply("fooBar", TextNode.valueOf("test"), null, new JCodeModel().ref(Object.class), null);
 
         Class<?> expected = primitive != null ? primitive : wrapper;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -96,7 +96,7 @@ public JType apply(String nodeName, JsonNode node, JsonNode parent, JType baseTy
         Class<?> type = getType(node.asText());
         if (type != null) {
             JType jtype = baseType.owner().ref(type);
-            if (ruleFactory.getGenerationConfig().isUsePrimitives() && Number.class.isAssignableFrom(type)) {
+            if (ruleFactory.getGenerationConfig().isUsePrimitives()) {
                 jtype = jtype.unboxify();
             }
             return jtype;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -89,7 +89,7 @@ public JType generate(JCodeModel codeModel, String className, String packageName
 
         ObjectNode schemaNode = readSchema(schemaUrl);
 
-        return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage, new Schema(null, schemaNode, schemaNode));
+        return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage, new Schema(null, schemaNode, null));
 
     }
 
@@ -118,7 +118,7 @@ public JType generate(JCodeModel codeModel, String className, String packageName
         JsonNode schemaNode = objectMapper().readTree(json);
 
         return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage,
-                new Schema(schemaLocation, schemaNode, schemaNode));
+                new Schema(schemaLocation, schemaNode, null));
     }
 
     public JType generate(JCodeModel codeModel, String className, String packageName, String json) throws IOException {
@@ -133,7 +133,7 @@ public JType generate(JCodeModel codeModel, String className, String packageName
             schemaNode = objectMapper().readTree(json);
         }
 
-        return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage, new Schema(null, schemaNode, schemaNode));
+        return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage, new Schema(null, schemaNode, null));
     }
 
     private ObjectMapper objectMapper() {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -76,6 +76,8 @@ public JType apply(String nodeName, JsonNode schemaNode, JsonNode parent, JClass
             return apply(nameFromRef != null ? nameFromRef : nodeName, schemaNode, parent, generatableType, schema);
         }
 
+        schema = schema.deriveChildSchema(schemaNode);
+
         JType javaType;
         if (schemaNode.has("enum")) {
             javaType = ruleFactory.getEnumRule().apply(nodeName, schemaNode, parent, generatableType, schema);

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/RequiredArrayRuleTest.java
Patch:
@@ -54,7 +54,7 @@ public void shouldUpdateJavaDoc() throws JClassAlreadyExistsException {
         ObjectMapper mapper = new ObjectMapper();
         ArrayNode requiredNode = mapper.createArrayNode().add("fooBar");
 
-        rule.apply("Class", requiredNode, null, jclass, new Schema(null, requiredNode, requiredNode));
+        rule.apply("Class", requiredNode, null, jclass, new Schema(null, requiredNode, null));
 
         JDocComment fooBarJavaDoc = jclass.fields().get("fooBar").javadoc();
         JDocComment fooJavaDoc = jclass.fields().get("foo").javadoc();
@@ -79,7 +79,7 @@ public void shouldUpdateAnnotations() throws JClassAlreadyExistsException {
         ObjectMapper mapper = new ObjectMapper();
         ArrayNode requiredNode = mapper.createArrayNode().add("foo_bar");
 
-        rule.apply("Class", requiredNode, null, jclass, new Schema(null, requiredNode, requiredNode));
+        rule.apply("Class", requiredNode, null, jclass, new Schema(null, requiredNode, null));
 
         Collection<JAnnotationUse> fooBarAnnotations = jclass.fields().get("fooBar").annotations();
         Collection<JAnnotationUse> fooAnnotations = jclass.fields().get("foo").annotations();

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/SchemaRuleTest.java
Patch:
@@ -88,6 +88,7 @@ public void enumAsRootIsGeneratedCorrectly() throws JClassAlreadyExistsException
 
         Schema schema = mock(Schema.class);
         when(schema.getContent()).thenReturn(schemaContent);
+        when(schema.deriveChildSchema(any())).thenReturn(schema);
         schema.setJavaTypeIfEmpty(jclass);
 
         EnumRule enumRule = mock(EnumRule.class);

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/FragmentRefIT.java
Patch:
@@ -72,7 +72,7 @@ public void selfRefWithoutParentFile() throws IOException {
         JsonNode schema = new ObjectMapper().readTree("{\"type\":\"object\", \"properties\":{\"a\":{\"$ref\":\"#/b\"}}, \"b\":\"string\"}");
         
         JPackage p = codeModel._package("com.example");
-        new RuleFactory().getSchemaRule().apply("Example", schema, null, p, new Schema(null, schema, schema));
+        new RuleFactory().getSchemaRule().apply("Example", schema, null, p, new Schema(null, schema, null));
     }
     
     @Test
@@ -101,7 +101,7 @@ public void refToInnerFragmentThatHasRefToOuterFragmentWithoutParentFile() throw
               "}");
         
         JPackage p = codeModel._package("com.example");
-        new RuleFactory().getSchemaRule().apply("Example", schema, null, p, new Schema(null, schema, schema));
+        new RuleFactory().getSchemaRule().apply("Example", schema, null, p, new Schema(null, schema, null));
     }
 
 }

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/FormatRuleJodaTest.java
Patch:
@@ -43,7 +43,7 @@
 public class FormatRuleJodaTest {
 
     private GenerationConfig config = mock(GenerationConfig.class);
-    private FormatRule rule = new FormatRule(new RuleFactory(config, new NoopAnnotator(), new SchemaStore()));
+    private FormatRule rule;
 
     private final String formatValue;
     private final Class<?> expectedType;
@@ -66,6 +66,7 @@ public void setupConfig() {
         when(config.isUseJodaLocalTimes()).thenReturn(true);
         when(config.isUseJodaLocalDates()).thenReturn(true);
         when(config.isUseJodaDates()).thenReturn(true);
+        rule = new FormatRule(new RuleFactory(config, new NoopAnnotator(), new SchemaStore()));
     }
 
     @Test

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -89,7 +89,7 @@ public JType generate(JCodeModel codeModel, String className, String packageName
 
         ObjectNode schemaNode = readSchema(schemaUrl);
 
-        return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage, new Schema(null, schemaNode, schemaNode));
+        return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage, new Schema(null, schemaNode, null));
 
     }
 
@@ -118,7 +118,7 @@ public JType generate(JCodeModel codeModel, String className, String packageName
         JsonNode schemaNode = objectMapper().readTree(json);
 
         return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage,
-                new Schema(schemaLocation, schemaNode, schemaNode));
+                new Schema(schemaLocation, schemaNode, null));
     }
 
     public JType generate(JCodeModel codeModel, String className, String packageName, String json) throws IOException {
@@ -133,7 +133,7 @@ public JType generate(JCodeModel codeModel, String className, String packageName
             schemaNode = objectMapper().readTree(json);
         }
 
-        return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage, new Schema(null, schemaNode, schemaNode));
+        return ruleFactory.getSchemaRule().apply(className, schemaNode, null, jpackage, new Schema(null, schemaNode, null));
     }
 
     private ObjectMapper objectMapper() {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -76,6 +76,8 @@ public JType apply(String nodeName, JsonNode schemaNode, JsonNode parent, JClass
             return apply(nameFromRef != null ? nameFromRef : nodeName, schemaNode, parent, generatableType, schema);
         }
 
+        schema = schema.derive(schemaNode);
+
         JType javaType;
         if (schemaNode.has("enum")) {
             javaType = ruleFactory.getEnumRule().apply(nodeName, schemaNode, parent, generatableType, schema);

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/RequiredArrayRuleTest.java
Patch:
@@ -54,7 +54,7 @@ public void shouldUpdateJavaDoc() throws JClassAlreadyExistsException {
         ObjectMapper mapper = new ObjectMapper();
         ArrayNode requiredNode = mapper.createArrayNode().add("fooBar");
 
-        rule.apply("Class", requiredNode, null, jclass, new Schema(null, requiredNode, requiredNode));
+        rule.apply("Class", requiredNode, null, jclass, new Schema(null, requiredNode, null));
 
         JDocComment fooBarJavaDoc = jclass.fields().get("fooBar").javadoc();
         JDocComment fooJavaDoc = jclass.fields().get("foo").javadoc();
@@ -79,7 +79,7 @@ public void shouldUpdateAnnotations() throws JClassAlreadyExistsException {
         ObjectMapper mapper = new ObjectMapper();
         ArrayNode requiredNode = mapper.createArrayNode().add("foo_bar");
 
-        rule.apply("Class", requiredNode, null, jclass, new Schema(null, requiredNode, requiredNode));
+        rule.apply("Class", requiredNode, null, jclass, new Schema(null, requiredNode, null));
 
         Collection<JAnnotationUse> fooBarAnnotations = jclass.fields().get("fooBar").annotations();
         Collection<JAnnotationUse> fooAnnotations = jclass.fields().get("foo").annotations();

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/SchemaRuleTest.java
Patch:
@@ -88,6 +88,7 @@ public void enumAsRootIsGeneratedCorrectly() throws JClassAlreadyExistsException
 
         Schema schema = mock(Schema.class);
         when(schema.getContent()).thenReturn(schemaContent);
+        when(schema.derive(any())).thenReturn(schema);
         schema.setJavaTypeIfEmpty(jclass);
 
         EnumRule enumRule = mock(EnumRule.class);

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/FragmentRefIT.java
Patch:
@@ -72,7 +72,7 @@ public void selfRefWithoutParentFile() throws IOException {
         JsonNode schema = new ObjectMapper().readTree("{\"type\":\"object\", \"properties\":{\"a\":{\"$ref\":\"#/b\"}}, \"b\":\"string\"}");
         
         JPackage p = codeModel._package("com.example");
-        new RuleFactory().getSchemaRule().apply("Example", schema, null, p, new Schema(null, schema, schema));
+        new RuleFactory().getSchemaRule().apply("Example", schema, null, p, new Schema(null, schema, null));
     }
     
     @Test
@@ -101,7 +101,7 @@ public void refToInnerFragmentThatHasRefToOuterFragmentWithoutParentFile() throw
               "}");
         
         JPackage p = codeModel._package("com.example");
-        new RuleFactory().getSchemaRule().apply("Example", schema, null, p, new Schema(null, schema, schema));
+        new RuleFactory().getSchemaRule().apply("Example", schema, null, p, new Schema(null, schema, null));
     }
 
 }

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -262,7 +262,7 @@ private void addEnumConstants(JsonNode node, JDefinedClass _enum, JsonNode custo
     }
 
     private String getEnumName(String nodeName, JsonNode node, JClassContainer container) {
-        String fieldName = ruleFactory.getNameHelper().getFieldName(nodeName, node);
+        String fieldName = ruleFactory.getNameHelper().getClassName(nodeName, node);
         String className = ruleFactory.getNameHelper().replaceIllegalCharacters(capitalize(fieldName));
         String normalizedName = ruleFactory.getNameHelper().normalizeName(className);
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -739,7 +739,7 @@ private void addInterfaces(JDefinedClass jclass, JsonNode javaInterfaces) {
     private String getClassName(String nodeName, JsonNode node, JPackage _package) {
         String prefix = ruleFactory.getGenerationConfig().getClassNamePrefix();
         String suffix = ruleFactory.getGenerationConfig().getClassNameSuffix();
-        String fieldName = ruleFactory.getNameHelper().getFieldName(nodeName, node);
+        String fieldName = ruleFactory.getNameHelper().getClassName(nodeName, node);
         String capitalizedFieldName = capitalize(fieldName);
         String fullFieldName = createFullFieldName(capitalizedFieldName, prefix, suffix);
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -58,7 +58,7 @@ public void wireUpConfig() {
     public void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName() {
 
         Answer<String> firstArgAnswer = new FirstArgAnswer<>();
-        when(nameHelper.getFieldName(anyString(), Matchers.any(JsonNode.class))).thenAnswer(firstArgAnswer);
+        when(nameHelper.getClassName(anyString(), Matchers.any(JsonNode.class))).thenAnswer(firstArgAnswer);
         when(nameHelper.replaceIllegalCharacters(anyString())).thenAnswer(firstArgAnswer);
         when(nameHelper.normalizeName(anyString())).thenAnswer(firstArgAnswer);
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -58,7 +58,7 @@ public void wireUpConfig() {
     public void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName() {
 
         Answer<String> firstArgAnswer = new FirstArgAnswer<>();
-        when(nameHelper.getFieldName(anyString(), Matchers.any(JsonNode.class))).thenAnswer(firstArgAnswer);
+        when(nameHelper.getClassName(anyString(), Matchers.any(JsonNode.class))).thenAnswer(firstArgAnswer);
         when(nameHelper.replaceIllegalCharacters(anyString())).thenAnswer(firstArgAnswer);
         when(nameHelper.normalizeName(anyString())).thenAnswer(firstArgAnswer);
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/DefaultGenerationConfig.java
Patch:
@@ -117,11 +117,11 @@ public String[] getToStringExcludes() {
     }
 
     /**
-     * @return {@link TypeNameStrategy#FILE_AND_PROPERTY_NAME}
+     * @return {@code false}
      */
     @Override
-    public TypeNameStrategy getTypeNameStrategy() {
-        return TypeNameStrategy.FILE_AND_PROPERTY_NAME;
+    public boolean isUseTitleAsClassname() {
+        return false;
     }
 
     /**

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/GenerationConfig.java
Patch:
@@ -171,10 +171,9 @@ public interface GenerationConfig {
     AnnotationStyle getAnnotationStyle();
 
     /**
-     * Gets the strategy used for generating type names.
-     * @see TypeNameStrategy
+     * When {@code true} the title is used as class name.
      */
-    TypeNameStrategy getTypeNameStrategy();
+    boolean isUseTitleAsClassname();
 
     /**
      * Gets the 'inclusionLevel' option for Jackson1 and Jackson2 serializers.

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -262,7 +262,7 @@ private void addEnumConstants(JsonNode node, JDefinedClass _enum, JsonNode custo
     }
 
     private String getEnumName(String nodeName, JsonNode node, JClassContainer container) {
-        String fieldName = ruleFactory.getNameHelper().getFieldName(nodeName, node);
+        String fieldName = ruleFactory.getNameHelper().getClassName(nodeName, node);
         String className = ruleFactory.getNameHelper().replaceIllegalCharacters(capitalize(fieldName));
         String normalizedName = ruleFactory.getNameHelper().normalizeName(className);
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -739,7 +739,7 @@ private void addInterfaces(JDefinedClass jclass, JsonNode javaInterfaces) {
     private String getClassName(String nodeName, JsonNode node, JPackage _package) {
         String prefix = ruleFactory.getGenerationConfig().getClassNamePrefix();
         String suffix = ruleFactory.getGenerationConfig().getClassNameSuffix();
-        String fieldName = ruleFactory.getNameHelper().getFieldName(nodeName, node);
+        String fieldName = ruleFactory.getNameHelper().getClassName(nodeName, node);
         String capitalizedFieldName = capitalize(fieldName);
         String fullFieldName = createFullFieldName(capitalizedFieldName, prefix, suffix);
 

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -66,7 +66,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * Target directory for generated Java source files.
      *
      * @parameter property="jsonschema2pojo.outputDirectory"
-     *            default-value="${project.build.directory}/java-gen"
+     *            default-value="${project.build.directory}/generated-sources/jsonschema2pojo"
      * @since 0.1.0
      */
     private File outputDirectory;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/GsonAnnotator.java
Patch:
@@ -50,7 +50,7 @@ public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyN
     }
 
     @Override
-    public void enumConstant(JEnumConstant constant, String value) {
+    public void enumConstant(JDefinedClass _enum, JEnumConstant constant, String value) {
         constant.annotate(SerializedName.class).param("value", value);
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/AdditionalPropertiesRule.java
Patch:
@@ -141,7 +141,7 @@ private JFieldVar addAdditionalPropertiesField(JDefinedClass jclass, JType prope
     private void addSetter(JDefinedClass jclass, JType propertyType, JFieldVar field) {
         JMethod setter = jclass.method(JMod.PUBLIC, void.class, "setAdditionalProperty");
 
-        ruleFactory.getAnnotator().anySetter(setter);
+        ruleFactory.getAnnotator().anySetter(setter, jclass);
 
         JVar nameParam = setter.param(String.class, "name");
         JVar valueParam = setter.param(propertyType, "value");
@@ -154,7 +154,7 @@ private void addSetter(JDefinedClass jclass, JType propertyType, JFieldVar field
     private JMethod addGetter(JDefinedClass jclass, JFieldVar field) {
         JMethod getter = jclass.method(JMod.PUBLIC, field.type(), "getAdditionalProperties");
 
-        ruleFactory.getAnnotator().anyGetter(getter);
+        ruleFactory.getAnnotator().anyGetter(getter, jclass);
 
         getter.body()._return(JExpr._this().ref(field));
         return getter;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -187,7 +187,7 @@ private void addFactoryMethod(JDefinedClass _enum, JType backingType) {
         _if._then()._throw(illegalArgumentException);
         _if._else()._return(constant);
 
-        ruleFactory.getAnnotator().enumCreatorMethod(fromValue);
+        ruleFactory.getAnnotator().enumCreatorMethod(_enum, fromValue);
     }
 
     private JFieldVar addQuickLookupMap(JDefinedClass _enum, JType backingType) {
@@ -237,7 +237,7 @@ private void addValueMethod(JDefinedClass _enum, JFieldVar valueField) {
         JBlock body = fromValue.body();
         body._return(JExpr._this().ref(valueField));
 
-        ruleFactory.getAnnotator().enumValueMethod(fromValue);
+        ruleFactory.getAnnotator().enumValueMethod(_enum, fromValue);
     }
 
     private boolean isString(JType type){
@@ -256,7 +256,7 @@ private void addEnumConstants(JsonNode node, JDefinedClass _enum, JsonNode custo
 
                 JEnumConstant constant = _enum.enumConstant(constantName);
                 constant.arg(DefaultRule.getDefaultValue(type, value));
-                ruleFactory.getAnnotator().enumConstant(constant, value.asText());
+                ruleFactory.getAnnotator().enumConstant(_enum, constant, value.asText());
             }
         }
     }

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/Moshi1IT.java
Patch:
@@ -66,7 +66,7 @@ public void annotationStyleMoshi1ProducesMoshi1Annotations() throws ClassNotFoun
         assertThat(schemaRule.getGenerateDir(), not(containsText("com.google.gson")));
         assertThat(schemaRule.getGenerateDir(), not(containsText("@SerializedName")));
         assertThat(schemaRule.getGenerateDir(), containsText("com.squareup.moshi"));
-        assertThat(schemaRule.getGenerateDir(), containsText("@Json"));
+        assertThat(schemaRule.getGenerateDir(), containsText("@com.squareup.moshi.Json"));
 
         Method getter = generatedType.getMethod("getBuild");
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/ContentResolver.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.MalformedURLException;
 import java.net.URI;
 import java.util.HashSet;
 import java.util.Set;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/ScalaSingleStreamCodeWriter.java
Patch:
@@ -33,7 +33,7 @@ public ScalaSingleStreamCodeWriter(OutputStream os) {
     }
 
     @Override
-    public OutputStream openBinary(final JPackage pkg, String fileName) throws IOException {
+    public OutputStream openBinary(final JPackage pkg, String fileName) {
         final ByteArrayOutputStream javaSourceStream = new ByteArrayOutputStream();
 
         final String scalaFileName = fileName.replaceAll("\\.java$", ".scala");

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/ScalaZipCodeWriter.java
Patch:
@@ -33,7 +33,7 @@ public ScalaZipCodeWriter(OutputStream target) {
     }
 
     @Override
-    public OutputStream openBinary(final JPackage pkg, String fileName) throws IOException {
+    public OutputStream openBinary(final JPackage pkg, String fileName) {
         final ByteArrayOutputStream javaSourceStream = new ByteArrayOutputStream();
 
         final String scalaFileName = fileName.replaceAll("\\.java$", ".scala");

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -83,7 +83,7 @@ public SchemaMapper() {
      * @throws IOException
      *             if the schema content cannot be read
      */
-    public JType generate(JCodeModel codeModel, String className, String packageName, URL schemaUrl) throws IOException {
+    public JType generate(JCodeModel codeModel, String className, String packageName, URL schemaUrl) {
 
         JPackage jpackage = codeModel._package(packageName);
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/ContentResolverNetworkTest.java
Patch:
@@ -43,12 +43,12 @@ public class ContentResolverNetworkTest {
     );
 
     @Before
-    public void before() throws Exception {
+    public void before() {
         server.start();
     }
 
     @After
-    public void after() throws Exception {
+    public void after() {
         server.stop();
     }
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/SchemaMapperTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
-import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
 
 import java.io.IOException;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
-import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
 
 import org.jsonschema2pojo.Annotator;
@@ -87,7 +86,7 @@ public void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName() {
     private static class FirstArgAnswer<T> implements Answer<T> {
         @SuppressWarnings("unchecked")
         @Override
-        public T answer(InvocationOnMock invocation) throws Throwable {
+        public T answer(InvocationOnMock invocation) {
             Object[] args = invocation.getArguments();
             //noinspection unchecked
             return (T) args[0];

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/SchemaRuleTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
-import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
 
 import java.net.URI;
@@ -78,7 +77,7 @@ public void refsToOtherSchemasAreLoaded() throws URISyntaxException, JClassAlrea
     }
 
     @Test
-    public void enumAsRootIsGeneratedCorrectly() throws URISyntaxException, JClassAlreadyExistsException {
+    public void enumAsRootIsGeneratedCorrectly() throws JClassAlreadyExistsException {
 
         ObjectNode schemaContent = new ObjectMapper().createObjectNode();
         ObjectNode enumNode = schemaContent.objectNode();

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
-import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
 
 import java.math.BigDecimal;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ArrayIT.java
Patch:
@@ -165,7 +165,7 @@ public void arrayItemTypeIsSingularFormOfPropertyNameWhenNameEndsInIES() throws
      *      76</a>
      */
     @Test
-    public void propertiesThatReferenceAnArraySchemaAlwaysHaveCorrectCollectionType() throws NoSuchMethodException, ClassNotFoundException {
+    public void propertiesThatReferenceAnArraySchemaAlwaysHaveCorrectCollectionType() throws NoSuchMethodException {
 
         Method array1GetterMethod = classWithArrayProperties.getMethod("getRefToArray1");
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/CompilerWarningIT.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.jsonschema2pojo.integration;
 
-import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ConstructorsIT.java
Patch:
@@ -102,7 +102,7 @@ public Constructor<?> getArgsConstructor(Class<?> clazz) throws NoSuchMethodExce
         }
 
         @Test
-        public void testNoConstructorWithoutProperties() throws Exception {
+        public void testNoConstructorWithoutProperties() {
             assertHasOnlyDefaultConstructor(typeWithoutProperties);
         }
     }
@@ -182,7 +182,7 @@ public void testConstructorAssignsFields() throws Exception {
         }
 
         @Test
-        public void testNoConstructorWithoutRequiredParams() throws Exception {
+        public void testNoConstructorWithoutRequiredParams() {
             assertHasOnlyDefaultConstructor(typeWithoutRequired);
         }
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/CustomDateTimeFormatIT.java
Patch:
@@ -41,7 +41,7 @@ public class CustomDateTimeFormatIT {
     private static Class<?> classWithCustomPatterns;
 
     @BeforeClass
-    public static void generateClasses() throws ClassNotFoundException, IOException {
+    public static void generateClasses() throws ClassNotFoundException {
 
         classSchemaRule.generate("/schema/format/customDateTimeFormat.json", "com.example.config_true", config(
                 "dateType", "java.util.Date",

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/DefaultIT.java
Patch:
@@ -250,7 +250,7 @@ public void numberEnumPropertyHasCorrectDefaultValue() throws Exception {
     }
 
     @Test
-    public void complexPropertyHasCorrectDefaultValue() throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
+    public void complexPropertyHasCorrectDefaultValue() throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
 
         Object instance = classWithDefaults.newInstance();
 
@@ -261,7 +261,7 @@ public void complexPropertyHasCorrectDefaultValue() throws NoSuchMethodException
     }
 
     @Test
-    public void simplePropertyCanHaveNullDefaultValue() throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
+    public void simplePropertyCanHaveNullDefaultValue() throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
 
         Object instance = classWithDefaults.newInstance();
 
@@ -272,7 +272,7 @@ public void simplePropertyCanHaveNullDefaultValue() throws NoSuchMethodException
     }
     
     @Test
-    public void arrayPropertyCanHaveNullDefaultValue() throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
+    public void arrayPropertyCanHaveNullDefaultValue() throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
 
         Object instance = classWithDefaults.newInstance();
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ExcludedFromEqualsAndHashCodeIT.java
Patch:
@@ -37,7 +37,7 @@ public class ExcludedFromEqualsAndHashCodeIT {
     private static Class<?> clazz;
 
     @BeforeClass
-    public static void generateAndCompileEnum() throws ClassNotFoundException, IllegalAccessException, InstantiationException {
+    public static void generateAndCompileEnum() throws ClassNotFoundException {
 
         ClassLoader resultsClassLoader = classSchemaRule.generateAndCompile("/schema/excludedFromEqualsAndHashCode/excludedFromEqualsAndHashCode.json", "com.example");
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ExtendsIT.java
Patch:
@@ -93,7 +93,7 @@ public void extendsEquals() throws Exception {
         new PropertyDescriptor("parent", generatedType).getWriteMethod().invoke(instance2, "not-equal");
         new PropertyDescriptor("child", generatedType).getWriteMethod().invoke(instance2, "2");
 
-        assertFalse(instance.equals(instance2));
+        assertNotEquals(instance, instance2);
     }
 
     @Test

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/FormatIT.java
Patch:
@@ -85,7 +85,7 @@ public FormatIT(String propertyName, Class<?> expectedType, Object jsonValue, Ob
     }
 
     @BeforeClass
-    public static void generateClasses() throws ClassNotFoundException, IOException {
+    public static void generateClasses() throws ClassNotFoundException {
 
         ClassLoader resultsClassLoader = classSchemaRule.generateAndCompile("/schema/format/formattedProperties.json", "com.example");
 
@@ -94,7 +94,7 @@ public static void generateClasses() throws ClassNotFoundException, IOException
     }
 
     @Test
-    public void formatValueProducesExpectedType() throws NoSuchMethodException, IntrospectionException {
+    public void formatValueProducesExpectedType() throws IntrospectionException {
 
         Method getter = new PropertyDescriptor(propertyName, classWithFormattedProperties).getReadMethod();
 
@@ -103,7 +103,7 @@ public void formatValueProducesExpectedType() throws NoSuchMethodException, Intr
     }
 
     @Test
-    public void valueCanBeSerializedAndDeserialized() throws NoSuchMethodException, IOException, IntrospectionException, IllegalAccessException, InvocationTargetException {
+    public void valueCanBeSerializedAndDeserialized() throws IOException, IntrospectionException, IllegalAccessException, InvocationTargetException {
 
         ObjectMapper objectMapper = new ObjectMapper();
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/MediaIT.java
Patch:
@@ -283,7 +283,7 @@ public QuotedPrintableSerializer() {
         }
 
         @Override
-        public void serialize(byte[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {
+        public void serialize(byte[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
             jgen.writeString(new String(codec.encode(value), "UTF-8"));
         }
 
@@ -300,7 +300,7 @@ public QuotedPrintableDeserializer() {
         }
 
         @Override
-        public byte[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
+        public byte[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
             try {
                 return codec.decode(jp.getText().getBytes("UTF-8"));
             } catch (DecoderException e) {

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/PropertiesIT.java
Patch:
@@ -84,7 +84,7 @@ public void propertiesAreSerializedInCorrectOrder() throws ClassNotFoundExceptio
 
     @Test
     @SuppressWarnings("rawtypes")
-    public void usePrimitivesArgumentCausesPrimitiveTypes() throws ClassNotFoundException, IntrospectionException, InstantiationException, IllegalAccessException, InvocationTargetException {
+    public void usePrimitivesArgumentCausesPrimitiveTypes() throws ClassNotFoundException, IntrospectionException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/primitiveProperties.json", "com.example", config("usePrimitives", true));
 
@@ -119,7 +119,7 @@ public void wordDelimitersCausesCamelCase() throws ClassNotFoundException, Intro
     }
 
     @Test
-    public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+    public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFoundException, IOException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/propertiesThatAreJavaKeywords.json", "com.example");
 
@@ -137,7 +137,7 @@ public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFou
     }
 
     @Test
-    public void propertyCalledClassCanBeSerialized() throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+    public void propertyCalledClassCanBeSerialized() throws ClassNotFoundException, IOException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/propertyCalledClass.json", "com.example");
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/RegressionIT.java
Patch:
@@ -35,7 +35,7 @@ public class RegressionIT {
 
     @Test
     @SuppressWarnings("rawtypes")
-    public void pathWithSpacesInTheNameDoesNotFail() throws ClassNotFoundException, MalformedURLException {
+    public void pathWithSpacesInTheNameDoesNotFail() throws ClassNotFoundException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/regression/spaces in path.json", "com.example", Collections.<String, Object> emptyMap());
 
@@ -56,7 +56,7 @@ public void underscoresInPropertyNamesRemainIntact() throws ClassNotFoundExcepti
 
     @Test
     @SuppressWarnings("rawtypes")
-    public void filesWithExtensionPrefixesAreNotTruncated() throws ClassNotFoundException, NoSuchMethodException, SecurityException {
+    public void filesWithExtensionPrefixesAreNotTruncated() throws ClassNotFoundException, SecurityException {
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/regression/foo.baz.json", "com.example", Collections.<String, Object> emptyMap());
 
         Class generatedType = resultsClassLoader.loadClass("com.example.FooBaz");
@@ -65,7 +65,7 @@ public void filesWithExtensionPrefixesAreNotTruncated() throws ClassNotFoundExce
 
     @Test
     @SuppressWarnings("rawtypes")
-    public void extendsChoosesCorrectSupertypeWhenTypeIsAlreadyGenerated() throws ClassNotFoundException, NoSuchMethodException, SecurityException, MalformedURLException {
+    public void extendsChoosesCorrectSupertypeWhenTypeIsAlreadyGenerated() throws ClassNotFoundException, SecurityException, MalformedURLException {
         URL filteredSchemaUrl = new File("src/test/resources/schema/regression/extends").toURI().toURL();
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile(filteredSchemaUrl, "com.example", Collections.<String, Object> emptyMap());

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/TypeIT.java
Patch:
@@ -84,7 +84,7 @@ public void numberTypeProducesDouble() throws NoSuchMethodException {
     }
 
     @Test
-    public void arrayTypeProducesCollection() throws NoSuchMethodException, ClassNotFoundException {
+    public void arrayTypeProducesCollection() throws NoSuchMethodException {
 
         Method getterMethod = classWithManyTypes.getMethod("getArrayProperty");
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ant/Jsonschema2PojoTaskIT.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.net.URISyntaxException;
+import java.util.Collections;
 import java.util.List;
 
 import org.apache.commons.io.FileUtils;
@@ -59,11 +60,11 @@ public void antTaskExecutesSuccessfullyWithValidSchemas() throws URISyntaxExcept
      * result, we need to compile with the same custom classpath.
      */
     private List<File> buildCustomClasspath() {
-        return asList(new File("target/custom-libs/de.flapdoodle.embedmongo-1.18.jar"));
+        return Collections.singletonList(new File("target/custom-libs/de.flapdoodle.embedmongo-1.18.jar"));
     }
 
     @Test
-    public void antTaskDocumentationIncludesAllProperties() throws IntrospectionException, IOException {
+    public void antTaskDocumentationIncludesAllProperties() throws IOException {
 
         String documentation = FileUtils.readFileToString(new File("../jsonschema2pojo-ant/src/site/Jsonschema2PojoTask.html"));
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/CommonsLangRemovalIT.java
Patch:
@@ -17,7 +17,6 @@
 package org.jsonschema2pojo.integration.config;
 
 import static org.hamcrest.Matchers.not;
-import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.config;
 import static org.jsonschema2pojo.integration.util.FileSearchMatcher.*;
 import static org.junit.Assert.assertThat;
 
@@ -32,7 +31,7 @@ public class CommonsLangRemovalIT {
     @Rule public Jsonschema2PojoRule schemaRule = new Jsonschema2PojoRule();
 
     @Test
-    public void hashCodeAndEqualsDontUseCommonsLang() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
+    public void hashCodeAndEqualsDontUseCommonsLang() throws SecurityException {
 
         File generatedOutputDirectory = schemaRule.generate("/schema/properties/primitiveProperties.json", "com.example");
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/GsonIT.java
Patch:
@@ -43,7 +43,7 @@ public class GsonIT {
 
     @Test
     @SuppressWarnings({ "rawtypes", "unchecked" })
-    public void annotationStyleGsonProducesGsonAnnotations() throws ClassNotFoundException, SecurityException, NoSuchMethodException, NoSuchFieldException {
+    public void annotationStyleGsonProducesGsonAnnotations() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
 
         Class generatedType = schemaRule.generateAndCompile("/json/examples/torrent.json", "com.example",
                 config("annotationStyle", "gson",
@@ -64,7 +64,7 @@ public void annotationStyleGsonProducesGsonAnnotations() throws ClassNotFoundExc
     }
 
     @Test
-    public void annotationStyleGsonMakesTypesThatWorkWithGson() throws ClassNotFoundException, SecurityException, NoSuchMethodException, NoSuchFieldException, IOException {
+    public void annotationStyleGsonMakesTypesThatWorkWithGson() throws ClassNotFoundException, SecurityException, IOException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/json/examples/", "com.example",
                 config("annotationStyle", "gson",

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeAccessorsIT.java
Patch:
@@ -48,7 +48,7 @@ public void beansIncludeGettersAndSettersByDefault() throws ClassNotFoundExcepti
     }
 
     @Test
-    public void beansOmitGettersAndSettersWhenAccessorsAreDisabled() throws ClassNotFoundException, SecurityException, NoSuchMethodException, NoSuchFieldException {
+    public void beansOmitGettersAndSettersWhenAccessorsAreDisabled() throws ClassNotFoundException, SecurityException, NoSuchFieldException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/primitiveProperties.json", "com.example", config("includeAccessors", false, "includeGetters", false, "includeSetters", false));
 
@@ -71,7 +71,7 @@ public void beansOmitGettersAndSettersWhenAccessorsAreDisabled() throws ClassNot
     }
 
     @Test
-    public void beansWithoutAccessorsRoundTripJsonCorrectly() throws ClassNotFoundException, SecurityException, NoSuchMethodException, NoSuchFieldException, InstantiationException, IllegalAccessException, IOException {
+    public void beansWithoutAccessorsRoundTripJsonCorrectly() throws ClassNotFoundException, SecurityException, NoSuchFieldException, InstantiationException, IllegalAccessException, IOException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/primitiveProperties.json", "com.example", config("includeAccessors", false, "includeGetters", false, "includeSetters", false));
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeHashCodeAndEqualsIT.java
Patch:
@@ -37,7 +37,7 @@ public class IncludeHashCodeAndEqualsIT {
     private static ClassLoader resultsClassLoader;
 
     @BeforeClass
-    public static void generateAndCompileClass() throws ClassNotFoundException {
+    public static void generateAndCompileClass() {
         resultsClassLoader = classSchemaRule.generateAndCompile("/schema/hashCodeAndEquals/types.json", "com.example", config("includeAdditionalProperties", false));
     }
 
@@ -55,7 +55,7 @@ public void beansIncludeHashCodeAndEqualsByDefault() throws ClassNotFoundExcepti
     }
 
     @Test
-    public void beansOmitHashCodeAndEqualsWhenConfigIsSet() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
+    public void beansOmitHashCodeAndEqualsWhenConfigIsSet() throws ClassNotFoundException, SecurityException {
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/primitiveProperties.json", "com.example", config("includeHashcodeAndEquals", false));
 
         Class generatedType = resultsClassLoader.loadClass("com.example.PrimitiveProperties");

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeJsr305AnnotationsIT.java
Patch:
@@ -38,14 +38,14 @@ public class IncludeJsr305AnnotationsIT {
     public Jsonschema2PojoRule schemaRule = new Jsonschema2PojoRule();
 
     @Test
-    public void jsrAnnotationsAreNotIncludedByDefault() throws ClassNotFoundException {
+    public void jsrAnnotationsAreNotIncludedByDefault() {
         File outputDirectory = schemaRule.generate("/schema/jsr303/all.json", "com.example");
 
         assertThat(outputDirectory, not(containsText("javax.validation")));
     }
 
     @Test
-    public void jsrAnnotationsAreNotIncludedWhenSwitchedOff() throws ClassNotFoundException {
+    public void jsrAnnotationsAreNotIncludedWhenSwitchedOff() {
         File outputDirectory = schemaRule.generate("/schema/jsr303/all.json", "com.example",
                 config("includeJsr305Annotations", false));
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeToStringIT.java
Patch:
@@ -42,7 +42,7 @@ public void beansIncludeToStringByDefault() throws ClassNotFoundException, Secur
 
     @Test
     @SuppressWarnings({ "unchecked", "rawtypes" })
-    public void beansOmitToStringWhenConfigIsSet() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
+    public void beansOmitToStringWhenConfigIsSet() throws ClassNotFoundException, SecurityException {
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/primitiveProperties.json", "com.example", config("includeToString", false));
 
         Class generatedType = resultsClassLoader.loadClass("com.example.PrimitiveProperties");

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/InitializeCollectionsIT.java
Patch:
@@ -64,7 +64,7 @@ public InitializeCollectionsIT(String label, Map<String, Object> config, String
     }
 
     @Test
-    public void correctResult() throws ClassNotFoundException, IntrospectionException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException {
+    public void correctResult() throws ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/initializeCollectionProperties.json", "com.example", config);
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/Moshi1IT.java
Patch:
@@ -53,7 +53,7 @@ public void setUp() {
 
     @Test
     @SuppressWarnings({"rawtypes", "unchecked"})
-    public void annotationStyleMoshi1ProducesMoshi1Annotations() throws ClassNotFoundException, SecurityException, NoSuchMethodException, NoSuchFieldException {
+    public void annotationStyleMoshi1ProducesMoshi1Annotations() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
 
         Class generatedType = schemaRule.generateAndCompile("/json/examples/torrent.json", "com.example",
                 config("annotationStyle", "moshi1",
@@ -76,7 +76,7 @@ public void annotationStyleMoshi1ProducesMoshi1Annotations() throws ClassNotFoun
     }
 
     @Test
-    public void annotationStyleMoshi1MakesTypesThatWorkWithMoshi1() throws ClassNotFoundException, SecurityException, NoSuchMethodException, NoSuchFieldException, IOException {
+    public void annotationStyleMoshi1MakesTypesThatWorkWithMoshi1() throws ClassNotFoundException, SecurityException, IOException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/json/examples/", "com.example",
                 config("annotationStyle", "moshi1",

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/RefFragmentPathDelimitersIT.java
Patch:
@@ -27,7 +27,7 @@ public class RefFragmentPathDelimitersIT {
     @Rule public Jsonschema2PojoRule schemaRule = new Jsonschema2PojoRule();
 
     @Test
-    public void refFragmentPathDelimitersUsedInAPropertyIsReadSuccessfully() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
+    public void refFragmentPathDelimitersUsedInAPropertyIsReadSuccessfully() throws ClassNotFoundException, SecurityException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/nonStandardRef.json", "com.example",
                 config("refFragmentPathDelimiters", "#/"));

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/FragmentRefIT.java
Patch:
@@ -76,7 +76,7 @@ public void selfRefWithoutParentFile() throws IOException {
     }
     
     @Test
-    public void refToInnerFragmentThatHasRefToOuterFragmentWithoutParentFile() throws IOException, ClassNotFoundException {
+    public void refToInnerFragmentThatHasRefToOuterFragmentWithoutParentFile() throws IOException {
         JCodeModel codeModel = new JCodeModel();
         JsonNode schema = new ObjectMapper().readTree("{\n" + 
               "    \"type\": \"object\",\n" + 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/Jsonschema2PojoRule.java
Patch:
@@ -223,7 +223,7 @@ static File rootDirectory() {
         return new File("target" + File.separator + "jsonschema2pojo");
     }
 
-    static File classNameDir(File baseDir, String className) throws IOException {
+    static File classNameDir(File baseDir, String className) {
         return new File(baseDir, classNameToPath(className));
     }
 
@@ -275,7 +275,7 @@ static String safeDirName(String label) {
 
     static String classNameToPath(String className) {
         return className
-                .replaceAll("\\A(?:.*\\.)?([^\\.]*)\\Z", "$1")
+                .replaceAll("\\A(?:.*\\.)?([^.]*)\\Z", "$1")
                 .replaceAll("\\$", Pattern.quote(File.separator));
     }
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/yaml/YamlPropertiesIT.java
Patch:
@@ -61,7 +61,7 @@ public void propertiesWithNullValuesAreOmittedWhenSerialized() throws ClassNotFo
 
     @Test
     @SuppressWarnings("rawtypes")
-    public void usePrimitivesArgumentCausesPrimitiveTypes() throws ClassNotFoundException, IntrospectionException, InstantiationException, IllegalAccessException, InvocationTargetException {
+    public void usePrimitivesArgumentCausesPrimitiveTypes() throws ClassNotFoundException, IntrospectionException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/yaml/properties/primitiveProperties.yaml", "com.example", config("usePrimitives", true, "sourceType", "yamlschema"));
 
@@ -96,7 +96,7 @@ public void wordDelimitersCausesCamelCase() throws ClassNotFoundException, Intro
     }
 
     @Test
-    public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+    public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFoundException, IOException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/yaml/properties/propertiesThatAreJavaKeywords.yaml", "com.example", config("sourceType", "yamlschema"));
 
@@ -114,7 +114,7 @@ public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFou
     }
 
     @Test
-    public void propertyCalledClassCanBeSerialized() throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+    public void propertyCalledClassCanBeSerialized() throws ClassNotFoundException, IOException {
 
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/yaml/properties/propertyCalledClass.yaml", "com.example", config("sourceType", "yamlschema"));
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/yaml/YamlTypeIT.java
Patch:
@@ -81,7 +81,7 @@ public void numberTypeProducesDouble() throws NoSuchMethodException {
     }
 
     @Test
-    public void arrayTypeProducesCollection() throws NoSuchMethodException, ClassNotFoundException {
+    public void arrayTypeProducesCollection() throws NoSuchMethodException {
 
         Method getterMethod = classWithManyTypes.getMethod("getArrayProperty");
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.jsonschema2pojo.rules;
 
-import android.os.Parcelable;
-
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.sun.codemodel.ClassType;
@@ -161,7 +159,7 @@ public JType apply(String nodeName, JsonNode node, JPackage _package, Schema sch
     }
 
     private void addParcelSupport(JDefinedClass jclass) {
-        jclass._implements(Parcelable.class);
+        jclass._implements(jclass.owner().directClass("android.os.Parcelable"));
 
         parcelableHelper.addWriteToParcel(jclass);
         parcelableHelper.addDescribeContents(jclass);

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeAccessorsPropertiesIT.java
Patch:
@@ -19,7 +19,6 @@
 import static org.hamcrest.Matchers.*;
 import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.config;
 import static org.junit.Assert.*;
-import static org.fest.util.Lists.newArrayList;
 
 import java.lang.reflect.Member;
 import java.lang.reflect.Modifier;
@@ -168,11 +167,11 @@ protected boolean matchesSafely(T[] items, Description mismatchDescription) {
     }
 
     private static <M extends Member> Matcher<M> methodWhitelist() {
-        return nameMatches(isIn(newArrayList("setAdditionalProperty", "getAdditionalProperties")));
+        return nameMatches(isIn(Arrays.asList("setAdditionalProperty", "getAdditionalProperties")));
     }
 
     private static <M extends Member> Matcher<M> fieldWhitelist() {
-        return nameMatches(isIn(newArrayList("additionalProperties")));
+        return nameMatches(isIn(Arrays.asList("additionalProperties")));
     }
 
     private static <M extends Member> Matcher<M> fieldGetterOrSetter() {

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/ParcelableIT.java
Patch:
@@ -36,7 +36,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest=Config.NONE)
+@Config(manifest=Config.NONE, sdk=23)
 public class ParcelableIT {
 
     @Rule public Jsonschema2PojoRule schemaRule = new Jsonschema2PojoRule();

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/SchemaRuleTest.java
Patch:
@@ -69,7 +69,7 @@ public void refsToOtherSchemasAreLoaded() throws URISyntaxException, JClassAlrea
 
         rule.apply(NODE_NAME, schemaWithRef, jclass, null);
 
-        verify(mockTypeRule).apply(eq(NODE_NAME), captureJsonNode.capture(), eq(jclass.getPackage()), captureSchema.capture());
+        verify(mockTypeRule).apply(eq("address"), captureJsonNode.capture(), eq(jclass.getPackage()), captureSchema.capture());
 
         assertThat(captureSchema.getValue().getId(), is(equalTo(schemaUri)));
         assertThat(captureSchema.getValue().getContent(), is(equalTo(captureJsonNode.getValue())));

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/RegressionIT.java
Patch:
@@ -17,7 +17,7 @@
 package org.jsonschema2pojo.integration;
 
 import static org.hamcrest.Matchers.*;
-import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.config;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.junit.Assert.*;
 
 import java.io.File;
@@ -30,6 +30,7 @@
 import org.junit.Test;
 
 public class RegressionIT {
+    
     @Rule public Jsonschema2PojoRule schemaRule = new Jsonschema2PojoRule();
 
     @Test

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeJsr303AnnotationsIT.java
Patch:
@@ -270,7 +270,7 @@ public void jsr303ValidAnnotationIsAddedForArrayWithRef() throws ClassNotFoundEx
                 config("includeJsr303Annotations", true));
 
         Class validArrayType = resultsClassLoader.loadClass("com.example.ValidArray");
-        Class refarrayType = resultsClassLoader.loadClass("com.example.Refarray");
+        Class refarrayType = resultsClassLoader.loadClass("com.example.Product");
 
         List<Object> objectArrayList = new ArrayList<Object>();
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/RefFragmentPathDelimitersIT.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.jsonschema2pojo.integration.config;
 
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+
 import org.jsonschema2pojo.integration.util.Jsonschema2PojoRule;
 import org.junit.Rule;
 import org.junit.Test;
 
-import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.config;
-
 public class RefFragmentPathDelimitersIT {
 
     @Rule public Jsonschema2PojoRule schemaRule = new Jsonschema2PojoRule();
@@ -32,6 +32,6 @@ public void refFragmentPathDelimitersUsedInAPropertyIsReadSuccessfully() throws
         ClassLoader resultsClassLoader = schemaRule.generateAndCompile("/schema/properties/nonStandardRef.json", "com.example",
                 config("refFragmentPathDelimiters", "#/"));
 
-        resultsClassLoader.loadClass("com.example.Foo");
+        resultsClassLoader.loadClass("com.example.NonStandardRef");
     }
 }

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/SelfRefIT.java
Patch:
@@ -63,11 +63,11 @@ public void selfEmbeddedRefUsedInAPropertyIsReadSuccessfully() throws NoSuchMeth
 
         Class<?> aClass = selfRefsClass.getMethod("getEmbeddedInSelf").getReturnType();
 
-        assertThat(aClass.getName(), is("com.example.EmbeddedInSelf"));
+        assertThat(aClass.getName(), is("com.example.Embedded"));
 
         Class<?> embedded2Class = aClass.getMethod("getEmbeddedProp").getReturnType();
 
-        assertThat(embedded2Class.getName(), is("com.example.EmbeddedProp"));
+        assertThat(embedded2Class.getName(), is("com.example.Embedded2"));
 
         Class<?> otherEmbeddedClass = embedded2Class.getMethod("getEmbeddedProp2").getReturnType();
 

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -512,8 +512,8 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
     private String classNameSuffix = "";
 
     /**
-     * The file extenations that should be considered as file name extensions,
-     * and therefore ignored, when creating Java class names.
+     * The strings (no preceeding dot) that should be considered as file name
+     * extensions, and therefore ignored, when creating Java class names.
      *
      * @parameter expression="${jsonschema2pojo.fileExtensions}"
      *            default-value=""

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/TypeUtil.java
Patch:
@@ -41,7 +41,7 @@ public static JClass resolveType(JClassContainer _package, String typeDefinition
 
             return buildClass(_package, c, 0);
         } catch (ParseException e) {
-            throw new GenerationException(e);
+            throw new GenerationException("Couldn't parse type: " + typeDefinition, e);
         }
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/TypeUtil.java
Patch:
@@ -41,7 +41,7 @@ public static JClass resolveType(JClassContainer _package, String typeDefinition
 
             return buildClass(_package, c, 0);
         } catch (ParseException e) {
-            throw new GenerationException(e);
+            throw new GenerationException("Couldn't parse type: " + typeDefinition, e);
         }
     }
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/CustomDateTimeFormatIT.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.io.IOException;
 import java.util.Date;
+import java.util.Locale;
 
 import org.jsonschema2pojo.integration.util.Jsonschema2PojoRule;
 import org.junit.BeforeClass;
@@ -222,7 +223,7 @@ public void testCustomTimePattern() throws ReflectiveOperationException, Securit
         final Object instance = classWhenFormatDatesTrue.newInstance();
         classWhenFormatDatesTrue.getMethod("setCustomFormatCustomTime", Date.class).invoke(instance, new Date(999999999999L));
 
-        final String json = new ObjectMapper().writeValueAsString(instance);
+        final String json = new ObjectMapper().setLocale(Locale.ENGLISH).writeValueAsString(instance);
 
         assertThat(json, is("{\"customFormatCustomTime\":\"1:46 AM\"}"));
     }

File: jsonschema2pojo-scalagen/src/test/scala/com/mysema/examples/SuperConstructors.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.examples;
 
-public class SuperConstructors extends SuperClass {
+public class SuperConstructors extends SuperConstructorsSuperClass {
     
     public SuperConstructors() {
         this("first", "last");
@@ -12,8 +12,8 @@ public SuperConstructors(String first, String last) {
 
 }
 
-class SuperClass {
+class SuperConstructorsSuperClass {
     
-    public SuperClass(String first) {
+    public SuperConstructorsSuperClass(String first) {
     }
 }

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/CustomDateTimeFormatIT.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.io.IOException;
 import java.util.Date;
+import java.util.Locale;
 
 import org.jsonschema2pojo.integration.util.Jsonschema2PojoRule;
 import org.junit.BeforeClass;
@@ -222,7 +223,7 @@ public void testCustomTimePattern() throws ReflectiveOperationException, Securit
         final Object instance = classWhenFormatDatesTrue.newInstance();
         classWhenFormatDatesTrue.getMethod("setCustomFormatCustomTime", Date.class).invoke(instance, new Date(999999999999L));
 
-        final String json = new ObjectMapper().writeValueAsString(instance);
+        final String json = new ObjectMapper().setLocale(Locale.ENGLISH).writeValueAsString(instance);
 
         assertThat(json, is("{\"customFormatCustomTime\":\"1:46 AM\"}"));
     }

File: jsonschema2pojo-scalagen/src/test/scala/com/mysema/examples/SuperConstructors.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.examples;
 
-public class SuperConstructors extends SuperClass {
+public class SuperConstructors extends SuperConstructorsSuperClass {
     
     public SuperConstructors() {
         this("first", "last");
@@ -12,8 +12,8 @@ public SuperConstructors(String first, String last) {
 
 }
 
-class SuperClass {
+class SuperConstructorsSuperClass {
     
-    public SuperClass(String first) {
+    public SuperConstructorsSuperClass(String first) {
     }
 }

File: jsonschema2pojo-ant/src/main/java/org/jsonschema2pojo/ant/Jsonschema2PojoTask.java
Patch:
@@ -526,6 +526,8 @@ public void setIncludeJsr305Annotations(boolean includeJsr305Annotations) {
      *            <ul>
      *            <li><code>jsonschema</code></li>
      *            <li><code>json</code></li>
+     *            <li><code>yamlschema</code></li>
+     *            <li><code>yaml</code></li>
      *            </ul>
      */
     public void setSourceType(SourceType sourceType) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -88,6 +88,7 @@ public static Inflector.Builder createDefaultBuilder()
             .singular("(o)es$", "$1")
             .singular("(shoe)s$", "$1")
             .singular("(cris|ax|test)es$", "$1is")
+            .singular("(tax)es$", "$1")
             .singular("([octop|vir])i$", "$1us")
             .singular("(alias|status)es$", "$1")
             .singular("^(ox)en", "$1")

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/util/InflectorTest.java
Patch:
@@ -61,6 +61,7 @@ public void testSingularize() {
         assertThat(Inflector.getInstance().singularize("s"), is("s"));
         assertThat(Inflector.getInstance().singularize("status"), is("status"));
         assertThat(Inflector.getInstance().singularize("statuses"), is("status"));
+        assertThat(Inflector.getInstance().singularize("LineItemTaxes"), is("LineItemTax"));
 
         assertThat(Inflector.getInstance().pluralize("mattress"), is("mattresses"));
         assertThat(Inflector.getInstance().pluralize("address"), is("addresses"));

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -97,10 +97,12 @@ private ObjectNode readSchema(URL schemaUrl) {
 
         switch (ruleFactory.getGenerationConfig().getSourceType()) {
             case JSONSCHEMA:
+            case YAMLSCHEMA:
                 ObjectNode schemaNode = NODE_FACTORY.objectNode();
                 schemaNode.put("$ref", schemaUrl.toString());
                 return schemaNode;
             case JSON:
+            case YAML:
                 return schemaGenerator.schemaFromExample(schemaUrl);
             default:
                 throw new IllegalArgumentException("Unrecognised source type: " + ruleFactory.getGenerationConfig().getSourceType());

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/json/JsonTypesIT.java
Patch:
@@ -193,7 +193,7 @@ public void arrayItemsAreNotRecursivelyMerged() throws Exception {
         assertEquals(Integer.class, genType.getMethod("getScalar").getReturnType());
 
         thrown.expect(InvalidFormatException.class);
-        thrown.expectMessage("Can not construct instance of java.lang.Integer from String value (\"what\")");
+        thrown.expectMessage(startsWith("Cannot deserialize value of type `java.lang.Integer` from String \"what\": not a valid Integer value"));
         OBJECT_MAPPER.readValue(this.getClass().getResourceAsStream("/json/simplePropertiesInArrayItem.json"), Array.newInstance(genType, 0).getClass());
     }
 

File: jsonschema2pojo-scalagen/src/main/scala/PlaceHolder.java
Patch:
@@ -0,0 +1,2 @@
+//hack to generate package javadoc
+public class PlaceHolder {}
\ No newline at end of file

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -158,6 +158,9 @@ private void addParcelSupport(JDefinedClass jclass) {
         parcelableHelper.addWriteToParcel(jclass);
         parcelableHelper.addDescribeContents(jclass);
         parcelableHelper.addCreator(jclass);
+        parcelableHelper.addConstructorFromParcel(jclass);
+        // Add empty constructor
+        jclass.constructor(JMod.PUBLIC);
     }
 
     /**

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -594,7 +594,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      *
      * @parameter expression="${jsonschema2pojo.formatTimes}"
      *            default-value="false"
-     * @since 0.4.33
+     * @since 0.4.36
      */
     private boolean formatTimes = false;
 
@@ -622,7 +622,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * Requires support from your JSON binding library.
      *
      * @parameter expression "${jsonschema2pojo.customTimePattern}"
-     * @since 0.4.33
+     * @since 0.4.36
      */
     private String customTimePattern;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -43,6 +43,7 @@
 public class FormatRule implements Rule<JType, JType> {
 
     public static String ISO_8601_DATE_FORMAT = "yyyy-MM-dd";
+    public static String ISO_8601_TIME_FORMAT = "HH:mm:ss.SSS";
     public static String ISO_8601_DATETIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX";
 
     private final RuleFactory ruleFactory;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -144,6 +144,8 @@ private void formatAnnotation(JFieldVar field, JsonNode node) {
             ruleFactory.getAnnotator().dateTimeField(field, node);
         } else if ("date".equalsIgnoreCase(format)) {
             ruleFactory.getAnnotator().dateField(field, node);
+        } else if ("time".equalsIgnoreCase(format)) {
+            ruleFactory.getAnnotator().timeField(field, node);
         }
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -158,6 +158,9 @@ private void addParcelSupport(JDefinedClass jclass) {
         parcelableHelper.addWriteToParcel(jclass);
         parcelableHelper.addDescribeContents(jclass);
         parcelableHelper.addCreator(jclass);
+        parcelableHelper.addConstructorFromParcel(jclass);
+        // Add empty constructor
+        jclass.constructor(JMod.PUBLIC);
     }
 
     /**

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/RequiredArrayRule.java
Patch:
@@ -57,6 +57,9 @@ public JDefinedClass apply(String nodeName, JsonNode node, JDefinedClass jclass,
 
         for (Iterator<JsonNode> iterator = node.elements(); iterator.hasNext(); ) {
             String requiredArrayItem = iterator.next().asText();
+            if (requiredArrayItem.isEmpty()) {
+                continue;
+            }
 
             JsonNode propertyNode = null;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Jackson2Annotator.java
Patch:
@@ -47,7 +47,7 @@
  */
 public class Jackson2Annotator extends AbstractAnnotator {
 
-    private static String ISO_8601_DATETIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS";
+    private static String ISO_8601_DATETIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX";
     private static String ISO_8601_DATE_FORMAT = "yyyy-MM-dd";
 
     private JsonInclude.Include inclusionLevel = JsonInclude.Include.NON_NULL;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -19,14 +19,14 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.*;
-import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.*;
 
 import org.jsonschema2pojo.Annotator;
 import org.jsonschema2pojo.Schema;
 import org.jsonschema2pojo.util.NameHelper;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.Matchers;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -59,7 +59,7 @@ public void wireUpConfig() {
     public void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName() {
 
         Answer<String> firstArgAnswer = new FirstArgAnswer<String>();
-        when(nameHelper.getFieldName(anyString(), any(JsonNode.class))).thenAnswer(firstArgAnswer);
+        when(nameHelper.getFieldName(anyString(), Matchers.any(JsonNode.class))).thenAnswer(firstArgAnswer);
         when(nameHelper.replaceIllegalCharacters(anyString())).thenAnswer(firstArgAnswer);
         when(nameHelper.normalizeName(anyString())).thenAnswer(firstArgAnswer);
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -19,14 +19,14 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.*;
-import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.*;
 
 import org.jsonschema2pojo.Annotator;
 import org.jsonschema2pojo.Schema;
 import org.jsonschema2pojo.util.NameHelper;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.Matchers;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -59,7 +59,7 @@ public void wireUpConfig() {
     public void applyGeneratesUniqueEnumNamesForMultipleEnumNodesWithSameName() {
 
         Answer<String> firstArgAnswer = new FirstArgAnswer<String>();
-        when(nameHelper.getFieldName(anyString(), any(JsonNode.class))).thenAnswer(firstArgAnswer);
+        when(nameHelper.getFieldName(anyString(), Matchers.any(JsonNode.class))).thenAnswer(firstArgAnswer);
         when(nameHelper.replaceIllegalCharacters(anyString())).thenAnswer(firstArgAnswer);
         when(nameHelper.normalizeName(anyString())).thenAnswer(firstArgAnswer);
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/FragmentResolver.java
Patch:
@@ -26,9 +26,9 @@
 
 public class FragmentResolver {
 
-    public JsonNode resolve(JsonNode tree, String path) {
+    public JsonNode resolve(JsonNode tree, String path, String refFragmentPathDelimiters) {
 
-        return resolve(tree, new ArrayList<String>(asList(split(path, "#/."))));
+        return resolve(tree, new ArrayList<String>(asList(split(path, refFragmentPathDelimiters))));
 
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -328,7 +328,7 @@ private Schema getSuperSchema(JsonNode node, Schema schema, boolean followRefs)
                 path = "#" + schema.getId().getFragment() + "/extends";
             }
 
-            Schema superSchema = ruleFactory.getSchemaStore().create(schema, path);
+            Schema superSchema = ruleFactory.getSchemaStore().create(schema, path, ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());
 
             if (followRefs) {
                 superSchema = resolveSchemaRefsRecursive(superSchema);
@@ -342,7 +342,7 @@ private Schema getSuperSchema(JsonNode node, Schema schema, boolean followRefs)
     private Schema resolveSchemaRefsRecursive(Schema schema) {
         JsonNode schemaNode = schema.getContent();
         if (schemaNode.has("$ref")) {
-            schema = ruleFactory.getSchemaStore().create(schema, schemaNode.get("$ref").asText());
+            schema = ruleFactory.getSchemaStore().create(schema, schemaNode.get("$ref").asText(), ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());
             return resolveSchemaRefsRecursive(schema);
         }
         return schema;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -147,7 +147,7 @@ private void formatAnnotation(JFieldVar field, JsonNode node) {
 
     private JsonNode resolveRefs(JsonNode node, Schema parent) {
         if (node.has("$ref")) {
-            Schema refSchema = ruleFactory.getSchemaStore().create(parent, node.get("$ref").asText());
+            Schema refSchema = ruleFactory.getSchemaStore().create(parent, node.get("$ref").asText(), ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());
             JsonNode refNode = refSchema.getContent();
             return resolveRefs(refNode, parent);
         } else {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -56,7 +56,7 @@ protected SchemaRule(RuleFactory ruleFactory) {
     public JType apply(String nodeName, JsonNode schemaNode, JClassContainer generatableType, Schema schema) {
 
         if (schemaNode.has("$ref")) {
-            schema = ruleFactory.getSchemaStore().create(schema, schemaNode.get("$ref").asText());
+            schema = ruleFactory.getSchemaStore().create(schema, schemaNode.get("$ref").asText(), ruleFactory.getGenerationConfig().getRefFragmentPathDelimiters());
             schemaNode = schema.getContent();
 
             if (schema.isGenerated()) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -167,7 +167,7 @@ private void addParcelSupport(JDefinedClass jclass) {
      * @param node
      * @return
      */
-    private LinkedHashSet<String> getConstructorProperties(JsonNode node, Schema schema, boolean onlyRequired) {
+    private LinkedHashSet<String> getConstructorProperties(JsonNode node, boolean onlyRequired) {
 
         if (!node.has("properties")) {
             return new LinkedHashSet<String>();
@@ -222,7 +222,7 @@ private LinkedHashSet<String> getSuperTypeConstructorPropertiesRecursive(JsonNod
 
         JsonNode superSchemaNode = superTypeSchema.getContent();
 
-        LinkedHashSet<String> rtn = getConstructorProperties(superSchemaNode, superTypeSchema, onlyRequired);
+        LinkedHashSet<String> rtn = getConstructorProperties(superSchemaNode, onlyRequired);
         rtn.addAll(getSuperTypeConstructorPropertiesRecursive(superSchemaNode, superTypeSchema, onlyRequired));
 
         return rtn;
@@ -400,7 +400,7 @@ private void addHashCode(JDefinedClass jclass) {
 
     private void addConstructors(JDefinedClass jclass, JsonNode node, Schema schema, boolean onlyRequired) {
 
-        LinkedHashSet<String> classProperties = getConstructorProperties(node, schema, onlyRequired);
+        LinkedHashSet<String> classProperties = getConstructorProperties(node, onlyRequired);
         LinkedHashSet<String> combinedSuperProperties = getSuperTypeConstructorPropertiesRecursive(node, schema, onlyRequired);
 
         // no properties to put in the constructor => default constructor is good enough.

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/RuleFactory.java
Patch:
@@ -363,7 +363,7 @@ public NameHelper getNameHelper() {
      * @return a schema rule that can handle the "media" declaration.
      */
     public Rule<JType, JType> getMediaRule() {
-        return new MediaRule(this);
+        return new MediaRule();
     }
 
     /**

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -101,7 +101,7 @@ public JType apply(String nodeName, JsonNode node, JClassContainer jClassContain
             type = jClassContainer.owner().ref(String.class);
         } else if (propertyTypeName.equals("number")) {
 
-            type = getNumberType(jClassContainer.owner(), node, ruleFactory.getGenerationConfig());
+            type = getNumberType(jClassContainer.owner(), ruleFactory.getGenerationConfig());
         } else if (propertyTypeName.equals("integer")) {
 
             type = getIntegerType(jClassContainer.owner(), node, ruleFactory.getGenerationConfig());
@@ -170,7 +170,7 @@ private JType getIntegerType(JCodeModel owner, JsonNode node, GenerationConfig c
     /**
      * Returns the JType for a number field. Handles type lookup and unboxing.
      */
-    private JType getNumberType(JCodeModel owner, JsonNode node, GenerationConfig config) {
+    private JType getNumberType(JCodeModel owner, GenerationConfig config) {
 
         if (config.isUseBigDecimals()) {
             return unboxIfNecessary(owner.ref(BigDecimal.class), config);

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -588,6 +588,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      */
     @Override
     @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = { "NP_UNWRITTEN_FIELD", "UWF_UNWRITTEN_FIELD" }, justification = "Private fields set by Maven.")
+    @SuppressWarnings("PMD.UselessParentheses")
     public void execute() throws MojoExecutionException {
 
         addProjectDependenciesToClasspath();

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/SchemaRuleTest.java
Patch:
@@ -24,14 +24,14 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 
+import org.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.SchemaStore;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import org.jsonschema2pojo.Schema;
-import org.jsonschema2pojo.SchemaStore;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;
@@ -78,7 +78,7 @@ public void enumAsRootIsGeneratedCorrectly() throws URISyntaxException, JClassAl
         ObjectNode schemaContent = new ObjectMapper().createObjectNode();
         ObjectNode enumNode = schemaContent.objectNode();
         enumNode.put("type", "string");
-        schemaContent.put("enum", enumNode);
+        schemaContent.set("enum", enumNode);
 
         JDefinedClass jclass = new JCodeModel()._class(TARGET_CLASS_NAME);
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -134,7 +134,7 @@ private Class<?> getDateTimeType() {
         String type=ruleFactory.getGenerationConfig().getDateTimeType();
         if (!isEmpty(type)){
             try {
-                Class<?> clazz=Class.forName(type);
+                Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(type);
                 return clazz;
             }
             catch (ClassNotFoundException e) {
@@ -148,7 +148,7 @@ private Class<?> getDateOnlyType() {
         String type=ruleFactory.getGenerationConfig().getDateType();
         if (!isEmpty(type)){
             try {
-                Class<?> clazz=Class.forName(type);
+                Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(type);
                 return clazz;
             }
             catch (ClassNotFoundException e) {
@@ -162,7 +162,7 @@ private Class<?> getTimeOnlyType() {
         String type=ruleFactory.getGenerationConfig().getTimeType();
         if (!isEmpty(type)){
             try {
-                Class<?> clazz=Class.forName(type);
+                Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(type);
                 return clazz;
             }
             catch (ClassNotFoundException e) {

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -150,8 +150,8 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = { "-fe", "--file-extensions" }, description = "The extensions that should be considered as standard filename extensions when creating java class names.")
     private String fileExtensions = "";
 
-    @Parameter(names = { "-D", "--disable-additional-properties" }, description = "Disable additional properties support on generated types, regardless of the input schema(s)")
-    private boolean disableAdditionalProperties = false;
+    @Parameter(names = { "-D", "--enable-additional-properties" }, description = "Enable additional properties support on generated types, regardless of the input schema(s)")
+    private boolean isIncludeAdditionalProperties = false;
 
     @Parameter(names = { "-da", "--disable-accessors" }, description = "Whether to omit getter/setter methods and create public fields instead.")
     private boolean disableAccessors = false;
@@ -358,7 +358,7 @@ public boolean isConstructorsRequiredPropertiesOnly() {
 
     @Override
     public boolean isIncludeAdditionalProperties() {
-        return disableAdditionalProperties;
+        return isIncludeAdditionalProperties;
     }
 
     @Override

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Jackson2Annotator.java
Patch:
@@ -77,7 +77,7 @@ public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyN
         }
 
         if (propertyNode.has("description")) {
-            field.annotate(JsonPropertyDescription.class).param("value", propertyNode.asText());
+            field.annotate(JsonPropertyDescription.class).param("value", propertyNode.get("description").asText());
         }
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Jackson2Annotator.java
Patch:
@@ -77,7 +77,7 @@ public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyN
         }
 
         if (propertyNode.has("description")) {
-            field.annotate(JsonPropertyDescription.class).param("value", propertyNode.asText());
+            field.annotate(JsonPropertyDescription.class).param("value", propertyNode.get("description").asText());
         }
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -59,12 +59,12 @@ protected TypeRule(RuleFactory ruleFactory) {
      * <ul>
      * <li>"type":"any" =&gt; {@link java.lang.Object}
      * <li>"type":"array" =&gt; Either {@link java.util.Set} or
+     * {@link java.util.List}, see {@link ArrayRule}
      * <li>"type":"boolean" =&gt; <code>boolean</code>
      * <li>"type":"integer" =&gt; <code>int</code>
      * <li>"type":"null" =&gt; {@link java.lang.Object}
      * <li>"type":"number" =&gt; <code>double</code>
      * <li>"type":"object" =&gt; Generated type (see {@link ObjectRule})
-     * {@link java.util.List}, see {@link ArrayRule}
      * <li>"type":"string" =&gt; {@link java.lang.String} (or alternative based
      * on presence of "format", see {@link FormatRule})
      * </ul>

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ant/Jsonschema2PojoTaskIT.java
Patch:
@@ -43,7 +43,7 @@ public class Jsonschema2PojoTaskIT {
     @Test
     public void antTaskExecutesSuccessfullyWithValidSchemas() throws URISyntaxException, ClassNotFoundException {
 
-       invokeAntBuild("/ant/build.xml");
+        invokeAntBuild("/ant/build.xml");
 
         ClassLoader resultsClassLoader = schemaRule.compile(buildCustomClasspath());
 

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -179,7 +179,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      *
      * @parameter expression="${jsonschema2pojo.useBigDecimals}"
      *            default-value="false"
-     * @since TODO
+     * @since 0.4.22
      */
     private boolean useBigDecimals = false;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/DefaultGenerationConfig.java
Patch:
@@ -283,11 +283,11 @@ public String getTargetVersion() {
     }
 
     /**
-     * @return <code>true</code>
+     * @return <code>false</code>
      */
     @Override
     public boolean isIncludeDynamicAccessors() {
-        return true;
+        return false;
     }
 
     @Override

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/GenerationConfig.java
Patch:
@@ -274,14 +274,14 @@ public interface GenerationConfig {
     /**
      * Gets the 'getClassNamePrefix' configuration option.
      *
-     * @return Whether to initialize collections with empty instance or null.
+     * @return Whether to add a prefix to generated classes.
      */
     String getClassNamePrefix();
 
     /**
      * Gets the 'getClassNameSuffix' configuration option.
      *
-     * @return Whether to initialize collections with empty instance or null.
+     * @return Whether to add a suffix to generated classes.
      */
     String getClassNameSuffix();
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/GenerationConfig.java
Patch:
@@ -274,14 +274,14 @@ public interface GenerationConfig {
     /**
      * Gets the 'getClassNamePrefix' configuration option.
      *
-     * @return Whether to initialize collections with empty instance or null.
+     * @return Whether to add a prefix to generated classes.
      */
     String getClassNamePrefix();
 
     /**
      * Gets the 'getClassNameSuffix' configuration option.
      *
-     * @return Whether to initialize collections with empty instance or null.
+     * @return Whether to add a suffix to generated classes.
      */
     String getClassNameSuffix();
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/AnnotationStyle.java
Patch:
@@ -55,7 +55,7 @@ public enum AnnotationStyle {
     /**
      * Moshi 1.x
      *
-     * @see <
+     * @see <a
      *      href="https://github.com/square/moshi">https://github.com/square/moshi</a>
      */
     MOSHI1,

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -115,7 +115,7 @@ private JExpression getDefaultValue(JType fieldType, JsonNode node) {
             return JExpr.lit(Double.parseDouble(node.asText()));
 
         } else if (fieldType.fullName().equals(BigDecimal.class.getName())) {
-            return JExpr.lit(Double.parseDouble(node.asText()));
+            return JExpr._new(fieldType).arg(JExpr.lit(node.asText()));
 
         } else if (fieldType.fullName().equals(boolean.class.getName())) {
             return JExpr.lit(Boolean.parseBoolean(node.asText()));

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -115,7 +115,7 @@ private JExpression getDefaultValue(JType fieldType, JsonNode node) {
             return JExpr.lit(Double.parseDouble(node.asText()));
 
         } else if (fieldType.fullName().equals(BigDecimal.class.getName())) {
-            return JExpr.lit(Double.parseDouble(node.asText()));
+            return JExpr._new(fieldType).arg(JExpr.lit(node.asText()));
 
         } else if (fieldType.fullName().equals(boolean.class.getName())) {
             return JExpr.lit(Boolean.parseBoolean(node.asText()));

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/AnnotationStyle.java
Patch:
@@ -55,7 +55,7 @@ public enum AnnotationStyle {
     /**
      * Moshi 1.x
      *
-     * @see <
+     * @see <a
      *      href="https://github.com/square/moshi">https://github.com/square/moshi</a>
      */
     MOSHI1,

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -121,9 +121,7 @@ public JType apply(String nodeName, JsonNode node, JPackage _package, Schema sch
             ruleFactory.getDescriptionRule().apply(nodeName, node.get("description"), jclass, schema);
         }
 
-        if (node.has("properties")) {
-            ruleFactory.getPropertiesRule().apply(nodeName, node.get("properties"), jclass, schema);
-        }
+        ruleFactory.getPropertiesRule().apply(nodeName, node.get("properties"), jclass, schema);
 
         if (ruleFactory.getGenerationConfig().isIncludeToString()) {
             addToString(jclass);

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -121,9 +121,7 @@ public JType apply(String nodeName, JsonNode node, JPackage _package, Schema sch
             ruleFactory.getDescriptionRule().apply(nodeName, node.get("description"), jclass, schema);
         }
 
-        if (node.has("properties")) {
-            ruleFactory.getPropertiesRule().apply(nodeName, node.get("properties"), jclass, schema);
-        }
+        ruleFactory.getPropertiesRule().apply(nodeName, node.get("properties"), jclass, schema);
 
         if (ruleFactory.getGenerationConfig().isIncludeToString()) {
             addToString(jclass);

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/AbstractAnnotator.java
Patch:
@@ -23,8 +23,8 @@
 import com.sun.codemodel.JMethod;
 
 /**
- * A default implemenation of the Annotator interface that makes it easier to
- * plug in different Annotator implemenations.
+ * A default implementation of the Annotator interface that makes it easier to
+ * plug in different Annotator implementations.
  */
 public abstract class AbstractAnnotator implements Annotator {
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/AbstractAnnotator.java
Patch:
@@ -23,8 +23,8 @@
 import com.sun.codemodel.JMethod;
 
 /**
- * A default implemenation of the Annotator interface that makes it easier to
- * plug in different Annotator implemenations.
+ * A default implementation of the Annotator interface that makes it easier to
+ * plug in different Annotator implementations.
  */
 public abstract class AbstractAnnotator implements Annotator {
 

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -144,8 +144,8 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = { "-tv", "--target-version" }, description = "The target version for generated source files.")
     private String targetVersion = "1.6";
     
-    @Parameter(names = { "-dda", "--disable-dynamic-accessors" }, description = "Disable dynamic getter, setter, and builder support on generated types.")
-    private boolean disableDynamicAccessors = false;
+    @Parameter(names = { "-ida", "--include-dynamic-accessors" }, description = "Include dynamic getter, setter, and builder support on generated types.")
+    private boolean includeDynamicAccessors = false;
 
     private static final int EXIT_OKAY = 0;
     private static final int EXIT_ERROR = 1;
@@ -343,7 +343,7 @@ public String getTargetVersion() {
 
     @Override
     public boolean isIncludeDynamicAccessors() {
-        return !disableDynamicAccessors;
+        return includeDynamicAccessors;
     }
 
     @Override

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/Jsonschema2PojoRule.java
Patch:
@@ -241,7 +241,7 @@ static String safeDirName(String label) {
     static String classNameToPath(String className) {
         return className
                 .replaceAll("\\A(?:.*\\.)?([^\\.]*)\\Z", "$1")
-                .replaceAll("\\$", File.separator);
+                .replaceAll("\\$", Pattern.quote(File.separator));
     }
 
 }

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/Jsonschema2PojoRule.java
Patch:
@@ -241,7 +241,7 @@ static String safeDirName(String label) {
     static String classNameToPath(String className) {
         return className
                 .replaceAll("\\A(?:.*\\.)?([^\\.]*)\\Z", "$1")
-                .replaceAll("\\$", File.separator);
+                .replaceAll("\\$", Pattern.quote(File.separator));
     }
 
 }

File: jsonschema2pojo-cli/src/test/java/org/jsonschema2pojo/cli/ArgumentsTest.java
Patch:
@@ -55,7 +55,7 @@ public void parseRecognisesValidArguments() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().next().getFile(), is("/home/source"));
+        assertThat(args.getSource().next().getFile(), endsWith("/home/source"));
         assertThat(args.getTargetDirectory(), is(theFile("/home/target")));
         assertThat(args.getTargetPackage(), is("mypackage"));
         assertThat(args.isGenerateBuilders(), is(true));
@@ -72,7 +72,7 @@ public void parseRecognisesShorthandArguments() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().next().getFile(), is("/home/source"));
+        assertThat(args.getSource().next().getFile(), endsWith("/home/source"));
         assertThat(args.getTargetDirectory(), is(theFile("/home/target")));
         assertThat(args.getTargetPackage(), is("mypackage"));
         assertThat(args.isGenerateBuilders(), is(true));
@@ -98,7 +98,7 @@ public void allOptionalArgsCanBeOmittedAndDefaultsPrevail() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().next().getFile(), is("/home/source"));
+        assertThat(args.getSource().next().getFile(), endsWith("/home/source"));
         assertThat(args.getTargetDirectory(), is(theFile("/home/target")));
         assertThat(args.getTargetPackage(), is(nullValue()));
         assertThat(args.isGenerateBuilders(), is(false));

File: jsonschema2pojo-cli/src/test/java/org/jsonschema2pojo/cli/ArgumentsTest.java
Patch:
@@ -58,7 +58,7 @@ public void parseRecognisesValidArguments() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().next().getFile(), is("/home/source"));
+        assertThat(args.getSource().next().getFile(), endsWith("/home/source"));
         assertThat(args.getTargetDirectory(), is(theFile("/home/target")));
         assertThat(args.getTargetPackage(), is("mypackage"));
         assertThat(args.isGenerateBuilders(), is(true));
@@ -74,7 +74,7 @@ public void parseRecognisesShorthandArguments() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().next().getFile(), is("/home/source"));
+        assertThat(args.getSource().next().getFile(), endsWith("/home/source"));
         assertThat(args.getTargetDirectory(), is(theFile("/home/target")));
         assertThat(args.getTargetPackage(), is("mypackage"));
         assertThat(args.isGenerateBuilders(), is(true));
@@ -99,7 +99,7 @@ public void allOptionalArgsCanBeOmittedAndDefaultsPrevail() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().next().getFile(), is("/home/source"));
+        assertThat(args.getSource().next().getFile(), endsWith("/home/source"));
         assertThat(args.getTargetDirectory(), is(theFile("/home/target")));
         assertThat(args.getTargetPackage(), is(nullValue()));
         assertThat(args.isGenerateBuilders(), is(false));

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/Jsonschema2PojoRule.java
Patch:
@@ -241,7 +241,7 @@ static String safeDirName(String label) {
     static String classNameToPath(String className) {
         return className
                 .replaceAll("\\A(?:.*\\.)?([^\\.]*)\\Z", "$1")
-                .replaceAll("\\$", File.separator);
+                .replaceAll("\\$", Pattern.quote(File.separator));
     }
 
 }

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -144,8 +144,8 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = { "-tv", "--target-version" }, description = "The target version for generated source files.")
     private String targetVersion = "1.6";
     
-    @Parameter(names = { "-dda", "--disable-dynamic-accessors" }, description = "Disable dynamic getter, setter, and builder support on generated types.")
-    private boolean disableDynamicAccessors = false;
+    @Parameter(names = { "-ida", "--include-dynamic-accessors" }, description = "Include dynamic getter, setter, and builder support on generated types.")
+    private boolean includeDynamicAccessors = false;
 
     private static final int EXIT_OKAY = 0;
     private static final int EXIT_ERROR = 1;
@@ -343,7 +343,7 @@ public String getTargetVersion() {
 
     @Override
     public boolean isIncludeDynamicAccessors() {
-        return !disableDynamicAccessors;
+        return includeDynamicAccessors;
     }
 
     @Override

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -144,8 +144,8 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = { "-tv", "--target-version" }, description = "The target version for generated source files.")
     private String targetVersion = "1.6";
     
-    @Parameter(names = { "-dda", "--disable-dynamic-accessors" }, description = "Disable dynamic getter, setter, and builder support on generated types.")
-    private boolean disableDynamicAccessors = false;
+    @Parameter(names = { "-ida", "--include-dynamic-accessors" }, description = "Include dynamic getter, setter, and builder support on generated types.")
+    private boolean includeDynamicAccessors = false;
 
     private static final int EXIT_OKAY = 0;
     private static final int EXIT_ERROR = 1;
@@ -343,7 +343,7 @@ public String getTargetVersion() {
 
     @Override
     public boolean isIncludeDynamicAccessors() {
-        return !disableDynamicAccessors;
+        return includeDynamicAccessors;
     }
 
     @Override

File: jsonschema2pojo-ant/src/main/java/org/jsonschema2pojo/ant/Jsonschema2PojoTask.java
Patch:
@@ -123,7 +123,7 @@ public class Jsonschema2PojoTask extends Task implements GenerationConfig {
     
     private String targetVersion = "1.6";
 
-    private boolean includeDynamicAccessors = true;
+    private boolean includeDynamicAccessors = false;
 
     private String dateTimeType = null;
 

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -452,10 +452,10 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * Whether to include dynamic getters, setters, and builders or to omit these methods.
      *
      * @parameter expression="${jsonschema2pojo.includeDynamicAccessors}"
-     *            default-value="true"
+     *            default-value="false"
      * @since 0.4.17
      */
-    private boolean includeDynamicAccessors = true;
+    private boolean includeDynamicAccessors = false;
 
     /**
      * The project being built.

File: jsonschema2pojo-ant/src/main/java/org/jsonschema2pojo/ant/Jsonschema2PojoTask.java
Patch:
@@ -123,7 +123,7 @@ public class Jsonschema2PojoTask extends Task implements GenerationConfig {
     
     private String targetVersion = "1.6";
 
-    private boolean includeDynamicAccessors = true;
+    private boolean includeDynamicAccessors = false;
 
     private String dateTimeType = null;
 

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -452,10 +452,10 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * Whether to include dynamic getters, setters, and builders or to omit these methods.
      *
      * @parameter expression="${jsonschema2pojo.includeDynamicAccessors}"
-     *            default-value="true"
+     *            default-value="false"
      * @since 0.4.17
      */
-    private boolean includeDynamicAccessors = true;
+    private boolean includeDynamicAccessors = false;
 
     /**
      * The project being built.

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -99,7 +99,9 @@ public static Inflector.Builder createDefaultBuilder()
             .singular("(ess)$", "$1");
 
         builder.singular("men$", "man")
-            .plural("man$", "men");
+            .plural("man$", "men")
+            .singular("specimen", "specimen")
+            .plural("specimen", "specimens");
 
         builder.irregular("curve", "curves")
             .irregular("leaf", "leaves")

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -119,7 +119,7 @@ public class Arguments implements GenerationConfig {
 
     @Parameter(names = { "-dt", "--date-class" }, description = "Specify date class")
     private String dateType = null;
-    
+
     @Parameter(names = { "-c3", "--commons-lang3" }, description = "Whether to use commons-lang 3.x imports instead of commons-lang 2.x imports when adding equals, hashCode and toString methods.")
     private boolean useCommonsLang3 = false;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/DefaultGenerationConfig.java
Patch:
@@ -271,7 +271,7 @@ public String getTargetVersion() {
     public boolean isIncludeDynamicAccessors() {
         return true;
     }
-    
+
     @Override
     public String getDateTimeType() {
         return null;
@@ -285,5 +285,5 @@ public String getDateType() {
     @Override
     public String getTimeType() {
         return null;
-    }    
+    }
 }

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -332,7 +332,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * @since 0.4.9
      */
     private boolean useJodaLocalTimes = false;
-    
+
     private String dateTimeType = null;
     private String timeType = null;
     private String dateType = null;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -63,7 +63,7 @@ public static Inflector.Builder createDefaultBuilder()
             .plural("([ti])um$", "$1a")
             .plural("sis$", "ses")
             .plural("(?:([^f])fe|([lr])f)$", "$1$2ves")
-            .plural("(hive)$", "$1s")
+            .plural("(database|hive)$", "$1s")
             .plural("([^aeiouy]|qu)y$", "$1ies")
             .plural("([^aeiouy]|qu)ies$", "$1y")
             .plural("(x|ch|ss|sh)$", "$1es")
@@ -78,7 +78,7 @@ public static Inflector.Builder createDefaultBuilder()
             .singular("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$", "$1$2sis")
             .singular("(^analy)ses$", "$1sis")
             .singular("([^f])ves$", "$1fe")
-            .singular("(hive)s$", "$1")
+            .singular("(database|hive)s$", "$1")
             .singular("(tive)s$", "$1")
             .singular("([lr])ves$", "$1f")
             .singular("([^aeiouy]|qu)ies$", "$1y")

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -63,7 +63,7 @@ public static Inflector.Builder createDefaultBuilder()
             .plural("([ti])um$", "$1a")
             .plural("sis$", "ses")
             .plural("(?:([^f])fe|([lr])f)$", "$1$2ves")
-            .plural("(hive)$", "$1s")
+            .plural("(database|hive)$", "$1s")
             .plural("([^aeiouy]|qu)y$", "$1ies")
             .plural("([^aeiouy]|qu)ies$", "$1y")
             .plural("(x|ch|ss|sh)$", "$1es")
@@ -78,7 +78,7 @@ public static Inflector.Builder createDefaultBuilder()
             .singular("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$", "$1$2sis")
             .singular("(^analy)ses$", "$1sis")
             .singular("([^f])ves$", "$1fe")
-            .singular("(hive)s$", "$1")
+            .singular("(database|hive)s$", "$1")
             .singular("(tive)s$", "$1")
             .singular("([lr])ves$", "$1f")
             .singular("([^aeiouy]|qu)ies$", "$1y")

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaStore.java
Patch:
@@ -87,7 +87,7 @@ public Schema create(Schema parent, String path) {
         URI id = (parent == null || parent.getId() == null) ? URI.create(path) : parent.getId().resolve(path);
 
         if (selfReferenceWithoutParentFile(parent, path)) {
-            schemas.put(id, new Schema(id, fragmentResolver.resolve(parent.getParentContent(), path), parent.getContent()));
+            schemas.put(id, new Schema(id, fragmentResolver.resolve(parent.getParentContent(), path), parent.getParentContent()));
             return schemas.get(id);
         }
         

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -148,7 +148,9 @@ private JType unboxIfNecessary(JType type, GenerationConfig config) {
      */
     private JType getIntegerType(JCodeModel owner, JsonNode node, GenerationConfig config) {
 
-        if (config.isUseLongIntegers()) {
+        if (config.isUseLongIntegers() ||
+                (node.has("minimum") && node.get("minimum").isLong()) ||
+                (node.has("maximum") && node.get("maximum").isLong())) {
             return unboxIfNecessary(owner.ref(Long.class), config);
         } else {
             return unboxIfNecessary(owner.ref(Integer.class), config);

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -148,7 +148,9 @@ private JType unboxIfNecessary(JType type, GenerationConfig config) {
      */
     private JType getIntegerType(JCodeModel owner, JsonNode node, GenerationConfig config) {
 
-        if (config.isUseLongIntegers()) {
+        if (config.isUseLongIntegers() ||
+                (node.has("minimum") && node.get("minimum").isLong()) ||
+                (node.has("maximum") && node.get("maximum").isLong())) {
             return unboxIfNecessary(owner.ref(Long.class), config);
         } else {
             return unboxIfNecessary(owner.ref(Integer.class), config);

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/DefaultGenerationConfig.java
Patch:
@@ -227,6 +227,6 @@ public boolean isConstructorsRequiredPropertiesOnly() {
 
     @Override
     public boolean isIncludeAdditionalProperties() {
-        return false;
+        return true;
     }
 }
\ No newline at end of file

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -19,6 +19,7 @@
 import static java.util.Arrays.*;
 import static org.apache.commons.lang3.StringUtils.*;
 import static org.jsonschema2pojo.rules.PrimitiveTypes.*;
+import static org.jsonschema2pojo.util.TypeUtil.*;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -272,7 +273,7 @@ protected String getConstantName(String nodeName, String customName) {
 
     private void addInterfaces(JDefinedClass jclass, JsonNode javaInterfaces) {
         for (JsonNode i : javaInterfaces) {
-            jclass._implements(jclass.owner().ref(i.asText()));
+            jclass._implements(resolveType(jclass._package(), i.asText()));
         }
     }
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/RequiredArrayRuleTest.java
Patch:
@@ -69,7 +69,7 @@ public void shouldUpdateAnnotations() throws JClassAlreadyExistsException {
         jclass.field(JMod.PRIVATE, jclass.owner().ref(String.class), "foo");
 
         ObjectMapper mapper = new ObjectMapper();
-        ArrayNode requiredNode = mapper.createArrayNode().add("fooBar");
+        ArrayNode requiredNode = mapper.createArrayNode().add("foo_bar");
 
         rule.apply("Class", requiredNode, jclass, null);
 
@@ -84,6 +84,7 @@ public void shouldUpdateAnnotations() throws JClassAlreadyExistsException {
     
     private void setupRuleFactoryToIncludeJsr303() {
         GenerationConfig config = mock(GenerationConfig.class);
+        when(config.getPropertyWordDelimiters()).thenReturn(new char[] { '-', ' ', '_' });
         RuleFactory ruleFactory = new RuleFactory();
         ruleFactory.setGenerationConfig(config);
         rule = new RequiredArrayRule(ruleFactory);

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/RequiredArrayRuleTest.java
Patch:
@@ -69,7 +69,7 @@ public void shouldUpdateAnnotations() throws JClassAlreadyExistsException {
         jclass.field(JMod.PRIVATE, jclass.owner().ref(String.class), "foo");
 
         ObjectMapper mapper = new ObjectMapper();
-        ArrayNode requiredNode = mapper.createArrayNode().add("fooBar");
+        ArrayNode requiredNode = mapper.createArrayNode().add("foo_bar");
 
         rule.apply("Class", requiredNode, jclass, null);
 
@@ -84,6 +84,7 @@ public void shouldUpdateAnnotations() throws JClassAlreadyExistsException {
     
     private void setupRuleFactoryToIncludeJsr303() {
         GenerationConfig config = mock(GenerationConfig.class);
+        when(config.getPropertyWordDelimiters()).thenReturn(new char[] { '-', ' ', '_' });
         RuleFactory ruleFactory = new RuleFactory();
         ruleFactory.setGenerationConfig(config);
         rule = new RequiredArrayRule(ruleFactory);

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -29,6 +29,9 @@
 public class TestableJsonschema2PojoMojo extends Jsonschema2PojoMojo {
 
     public TestableJsonschema2PojoMojo configure(Map<String, Object> configValues) {
+        
+        // this could be done with reflection, if the plugin used real annotations.
+        setPrivateField("sourcePaths", new String[]{});
 
         for (Entry<String, Object> value : configValues.entrySet()) {
             setPrivateField(value.getKey(), value.getValue());

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -127,10 +127,10 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = { "-N", "--null-collections" }, description = "Initialize Set and List fields to null instead of an empty collection.")
     private boolean nullCollections = false;
 
-    @Parameter(names = { "-y", "--class-prefix" }, description = "Initialize Set and List fields to null instead of an empty collection.")
+    @Parameter(names = { "-y", "--class-prefix" }, description = "Prefix for generated class.")
     private String classNamePrefix = "";
     
-    @Parameter(names = { "-x", "--class-suffix" }, description = "Initialize Set and List fields to null instead of an empty collection.")
+    @Parameter(names = { "-x", "--class-suffix" }, description = "Suffix for generated class.")
     private String classNameSuffix = "";
 
     private static final int EXIT_OKAY = 0;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -229,7 +229,7 @@ private String makeUnique(String className, JClassContainer container) {
     }
 
 
-    private String getConstantName(String nodeName) {
+    protected String getConstantName(String nodeName) {
         List<String> enumNameGroups = new ArrayList<String>(asList(splitByCharacterTypeCamelCase(nodeName)));
 
         String enumName = "";

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -127,10 +127,10 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = { "-N", "--null-collections" }, description = "Initialize Set and List fields to null instead of an empty collection.")
     private boolean nullCollections = false;
 
-    @Parameter(names = { "-y", "--class-prefix" }, description = "Initialize Set and List fields to null instead of an empty collection.")
+    @Parameter(names = { "-y", "--class-prefix" }, description = "Prefix for generated class.")
     private String classNamePrefix = "";
     
-    @Parameter(names = { "-x", "--class-suffix" }, description = "Initialize Set and List fields to null instead of an empty collection.")
+    @Parameter(names = { "-x", "--class-suffix" }, description = "Suffix for generated class.")
     private String classNameSuffix = "";
 
     private static final int EXIT_OKAY = 0;

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -127,10 +127,10 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = { "-N", "--null-collections" }, description = "Initialize Set and List fields to null instead of an empty collection.")
     private boolean nullCollections = false;
 
-    @Parameter(names = { "-y", "--class-prefix" }, description = "Initialize Set and List fields to null instead of an empty collection.")
+    @Parameter(names = { "-y", "--class-prefix" }, description = "Prefix for generated class.")
     private String classNamePrefix = "";
     
-    @Parameter(names = { "-x", "--class-suffix" }, description = "Initialize Set and List fields to null instead of an empty collection.")
+    @Parameter(names = { "-x", "--class-suffix" }, description = "Suffix for generated class.")
     private String classNameSuffix = "";
 
     private static final int EXIT_OKAY = 0;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -369,7 +369,8 @@ private void addEquals(JDefinedClass jclass) {
         JInvocation equalsBuilderInvocation = JExpr._new(equalsBuilderClass);
 
         if (!jclass._extends().name().equals("Object")) {
-            equalsBuilderInvocation = equalsBuilderInvocation.invoke("appendSuper").arg(JExpr.TRUE);
+            equalsBuilderInvocation = equalsBuilderInvocation.invoke("appendSuper")
+                    .arg(JExpr._super().invoke("equals").arg(otherObject));
         }
         
         for (JFieldVar fieldVar : fields.values()) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -89,7 +89,8 @@ public JFieldVar apply(String nodeName, JsonNode node, JFieldVar field, Schema c
 
         } else if (fieldType.startsWith(Set.class.getName())) {
             field.init(getDefaultSet(field.type(), node));
-
+        } else if (fieldType.startsWith(String.class.getName()) && node != null ) {
+            field.init(getDefaultValue(field.type(), node));
         } else if (defaultPresent) {
             field.init(getDefaultValue(field.type(), node));
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -89,7 +89,8 @@ public JFieldVar apply(String nodeName, JsonNode node, JFieldVar field, Schema c
 
         } else if (fieldType.startsWith(Set.class.getName())) {
             field.init(getDefaultSet(field.type(), node));
-
+        } else if (fieldType.startsWith(String.class.getName()) && node != null ) {
+            field.init(getDefaultValue(field.type(), node));
         } else if (defaultPresent) {
             field.init(getDefaultValue(field.type(), node));
 

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -63,7 +63,6 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = {"-r", "--constructors-required-only"}, description = "Generate constructors with only required fields")
     private boolean constructorsRequiredPropertiesOnly = false;
 
-
     @Parameter(names = { "-P", "--use-primitives" }, description = "Use primitives instead of wrapper types for bean properties")
     private boolean usePrimitives = false;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -205,7 +205,7 @@ private JExpression getDefaultSet(JType fieldType, JsonNode node) {
 
         JInvocation newSetImpl = JExpr._new(setImplClass);
 
-        if (node instanceof ArrayNode) {
+        if (node instanceof ArrayNode && node.size() > 0) {
             JInvocation invokeAsList = fieldType.owner().ref(Arrays.class).staticInvoke("asList");
             for (JsonNode defaultValue : node) {
                 invokeAsList.arg(getDefaultValue(setGenericType, defaultValue));

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -205,7 +205,7 @@ private JExpression getDefaultSet(JType fieldType, JsonNode node) {
 
         JInvocation newSetImpl = JExpr._new(setImplClass);
 
-        if (node instanceof ArrayNode) {
+        if (node instanceof ArrayNode && node.size() > 0) {
             JInvocation invokeAsList = fieldType.owner().ref(Arrays.class).staticInvoke("asList");
             for (JsonNode defaultValue : node) {
                 invokeAsList.arg(getDefaultValue(setGenericType, defaultValue));

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -16,9 +16,10 @@
 
 package org.jsonschema2pojo.rules;
 
-import com.fasterxml.jackson.databind.JsonNode;
 import org.jsonschema2pojo.GenerationConfig;
 import org.jsonschema2pojo.Schema;
+
+import com.fasterxml.jackson.databind.JsonNode;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JType;
@@ -91,7 +92,7 @@ public JType apply(String nodeName, JsonNode node, JClassContainer jClassContain
         } else if (propertyTypeName.equals("boolean")) {
 
             type = unboxIfNecessary(jClassContainer.owner().ref(Boolean.class), ruleFactory.getGenerationConfig());
-        } else if (propertyTypeName.equals("object")) {
+        } else if (propertyTypeName.equals("object") || (node.has("properties") && node.path("properties").size() > 0)) {
 
             type = ruleFactory.getObjectRule().apply(nodeName, node, jClassContainer.getPackage(), schema);
         } else if (propertyTypeName.equals("array")) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -104,6 +104,8 @@ public JType apply(String nodeName, JsonNode node, JClassContainer jClassContain
 
         if (node.has("format")) {
             type = ruleFactory.getFormatRule().apply(nodeName, node.get("format"), type, schema);
+        } else if(propertyTypeName.equals("string") && node.has("media")) {
+            type = ruleFactory.getMediaRule().apply(nodeName, node.get("media"), type, schema);
         }
 
         return type;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Annotator.java
Patch:
@@ -44,7 +44,7 @@ public interface Annotator {
      * 
      * @param clazz
      *            a generated pojo class, that is serialized to JSON
-     * @param schemaNode
+     * @param schema
      *            the object schema associated with this clazz
      */
     void propertyInclusion(JDefinedClass clazz, JsonNode schema);

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/AnnotatorFactory.java
Patch:
@@ -29,6 +29,7 @@ public class AnnotatorFactory {
      * @param style
      *            the annotation style that dictates what kind of annotations
      *            are required.
+     * @return an annotator matching to given style
      */
     public Annotator getAnnotator(AnnotationStyle style) {
 
@@ -53,6 +54,7 @@ public Annotator getAnnotator(AnnotationStyle style) {
      * 
      * @param clazz
      *            A class implementing {@link Annotator}.
+     * @return an instance of the given annotator type
      */
     public Annotator getAnnotator(Class<? extends Annotator> clazz) {
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -73,6 +73,7 @@ public SchemaMapper() {
      *            the target package that should be used for generated types
      * @param schemaUrl
      *            location of the schema to be used as input
+     * @return The top-most type generated from the given file
      * @throws IOException
      *             if the schema content cannot be read
      */

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/ProjectClasspath.java
Patch:
@@ -38,6 +38,8 @@ public class ProjectClasspath {
      * Provides a class loader that can be used to load classes from this
      * project classpath.
      * 
+     * @param project
+     *            the maven project currently being built
      * @param parent
      *            a classloader which should be used as the parent of the newly
      *            created classloader.

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Schema.java
Patch:
@@ -58,7 +58,7 @@ public JsonNode getContent() {
     }
 
     public boolean isGenerated() {
-        return (javaType != null);
+        return javaType != null;
     }
 
 }

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaStore.java
Patch:
@@ -74,6 +74,7 @@ private URI removeFragment(URI id) {
      *            schema's id)
      * @return a schema object containing the contents of the given path
      */
+    @SuppressWarnings("PMD.UselessParentheses")
     public Schema create(Schema parent, String path) {
 
         if (path.equals("#")) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -19,8 +19,9 @@
 import static javax.lang.model.SourceVersion.*;
 import static org.apache.commons.lang3.StringUtils.*;
 
-import com.fasterxml.jackson.databind.JsonNode;
 import org.jsonschema2pojo.Schema;
+
+import com.fasterxml.jackson.databind.JsonNode;
 import com.sun.codemodel.JBlock;
 import com.sun.codemodel.JDefinedClass;
 import com.sun.codemodel.JExpr;
@@ -207,7 +208,7 @@ private String getBuilderName(String propertyName) {
     }
 
     private String getGetterName(String propertyName, JType type) {
-        String prefix = (type.equals(type.owner()._ref(boolean.class))) ? "is" : "get";
+        String prefix = type.equals(type.owner()._ref(boolean.class)) ? "is" : "get";
         propertyName = ruleFactory.getNameHelper().replaceIllegalCharacters(propertyName);
         String getterName = prefix + capitalize(ruleFactory.getNameHelper().capitalizeTrailingWords(propertyName));
 

File: jsonschema2pojo-ant/src/main/java/org/jsonschema2pojo/ant/Jsonschema2PojoTask.java
Patch:
@@ -491,7 +491,7 @@ public Path createClasspath() {
     }
 
     public void setClasspath(Path classpath) {
-        if (classpath == null) {
+        if (this.classpath == null) {
             this.classpath = classpath;
         } else {
             this.classpath.append(classpath);

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -128,6 +128,7 @@ private static void removeOldOutput(File targetDirectory) {
         }
     }
 
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE")
     private static void delete(File f) {
         if (f.isDirectory()) {
             for (File child : f.listFiles()) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -24,6 +24,7 @@
 import org.jsonschema2pojo.rules.RuleFactory;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JPackage;
+import com.sun.codemodel.JType;
 
 /**
  * Generates Java types from a JSON schema. Can accept a factory which will be
@@ -75,13 +76,13 @@ public SchemaMapper() {
      * @throws IOException
      *             if the schema content cannot be read
      */
-    public void generate(JCodeModel codeModel, String className, String packageName, URL schemaUrl) throws IOException {
+    public JType generate(JCodeModel codeModel, String className, String packageName, URL schemaUrl) throws IOException {
 
         JPackage jpackage = codeModel._package(packageName);
 
         ObjectNode schemaNode = readSchema(schemaUrl);
 
-        ruleFactory.getSchemaRule().apply(className, schemaNode, jpackage, new Schema(null, schemaNode));
+        return ruleFactory.getSchemaRule().apply(className, schemaNode, jpackage, new Schema(null, schemaNode));
 
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -92,8 +92,10 @@ private void initialize() {
         singular("(matr)ices$", "$1ix");
         singular("(quiz)zes$", "$1");
 
+        singular("men$", "man");
+        plural("man$", "men");
+
         irregular("person", "people");
-        irregular("man", "men");
         irregular("child", "children");
         irregular("sex", "sexes");
         irregular("move", "moves");

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -127,6 +127,9 @@ private JExpression getDefaultValue(JType fieldType, JsonNode node) {
         } else if (fieldType.fullName().equals(long.class.getName())) {
             return JExpr.lit(Long.parseLong(node.asText()));
 
+        } else if (fieldType.fullName().equals(float.class.getName())) {
+            return JExpr.lit(Float.parseFloat(node.asText()));
+
         } else if (fieldType instanceof JDefinedClass && ((JDefinedClass) fieldType).getClassType().equals(ClassType.ENUM)) {
 
             return getDefaultEnum(fieldType, node);

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -78,6 +78,7 @@ public void arrayWithNonUniqueItemsProducesList() {
 
         Schema schema = mock(Schema.class);
         when(schema.getId()).thenReturn(URI.create("http://example/nonUniqueArray"));
+        when(config.isUseDoubleNumbers()).thenReturn(true);
 
         JClass propertyType = rule.apply("fooBars", propertyNode, jpackage, schema);
 
@@ -103,6 +104,7 @@ public void arrayOfPrimitivesProducesCollectionOfWrapperTypes() {
         Schema schema = mock(Schema.class);
         when(schema.getId()).thenReturn(URI.create("http://example/nonUniqueArray"));
         when(config.isUsePrimitives()).thenReturn(true);
+        when(config.isUseDoubleNumbers()).thenReturn(true);
 
         JClass propertyType = rule.apply("fooBars", propertyNode, jpackage, schema);
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -118,6 +118,8 @@ public void applyGeneratesNumber() {
         ObjectNode objectNode = new ObjectMapper().createObjectNode();
         objectNode.put("type", "number");
 
+        when(config.isUseDoubleNumbers()).thenReturn(true);
+
         JType result = rule.apply("fooBar", objectNode, jpackage, null);
 
         assertThat(result.fullName(), is(Double.class.getName()));
@@ -132,6 +134,7 @@ public void applyGeneratesNumberPrimitive() {
         objectNode.put("type", "number");
 
         when(config.isUsePrimitives()).thenReturn(true);
+        when(config.isUseDoubleNumbers()).thenReturn(true);
 
         JType result = rule.apply("fooBar", objectNode, jpackage, null);
 

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -35,9 +35,9 @@
 import org.jsonschema2pojo.SchemaStore;
 import org.jsonschema2pojo.exception.GenerationException;
 import org.jsonschema2pojo.rules.RuleFactory;
+
 import com.sun.codemodel.CodeWriter;
 import com.sun.codemodel.JCodeModel;
-import com.sun.codemodel.writer.FileCodeWriter;
 
 /**
  * Main class, providing a command line interface for jsonschema2pojo.

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -218,8 +218,8 @@ private void addGeneratedAnnotation(JDefinedClass jclass) {
     }
 
     private String getEnumName(String nodeName) {
-        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(capitalize(nodeName));
-        return ruleFactory.getNameHelper().normalizeName(className);
+        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(nodeName);
+        return ruleFactory.getNameHelper().normalizeName(className, true);
     }
 
     private String getConstantName(String nodeName) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -238,8 +238,8 @@ private void addInterfaces(JDefinedClass jclass, JsonNode javaInterfaces) {
     }
 
     private String getClassName(String nodeName, JPackage _package) {
-        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(capitalize(nodeName));
-        String normalizedName = ruleFactory.getNameHelper().normalizeName(className);
+        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(nodeName);
+        String normalizedName = ruleFactory.getNameHelper().normalizeName(className, true);
         return makeUnique(normalizedName, _package);
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -177,7 +177,7 @@ private JMethod addBuilder(JDefinedClass c, JFieldVar field) {
 
     private String getPropertyName(String nodeName) {
         nodeName = ruleFactory.getNameHelper().replaceIllegalCharacters(nodeName);
-        nodeName = ruleFactory.getNameHelper().normalizeName(nodeName);
+        nodeName = ruleFactory.getNameHelper().normalizeName(nodeName, false);
 
         if (isKeyword(nodeName)) {
             nodeName = "_" + nodeName;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -218,8 +218,8 @@ private void addGeneratedAnnotation(JDefinedClass jclass) {
     }
 
     private String getEnumName(String nodeName) {
-        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(capitalize(nodeName));
-        return ruleFactory.getNameHelper().normalizeName(className);
+        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(nodeName);
+        return ruleFactory.getNameHelper().normalizeName(className, true);
     }
 
     private String getConstantName(String nodeName) {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -238,8 +238,8 @@ private void addInterfaces(JDefinedClass jclass, JsonNode javaInterfaces) {
     }
 
     private String getClassName(String nodeName, JPackage _package) {
-        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(capitalize(nodeName));
-        String normalizedName = ruleFactory.getNameHelper().normalizeName(className);
+        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(nodeName);
+        String normalizedName = ruleFactory.getNameHelper().normalizeName(className, true);
         return makeUnique(normalizedName, _package);
     }
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -177,7 +177,7 @@ private JMethod addBuilder(JDefinedClass c, JFieldVar field) {
 
     private String getPropertyName(String nodeName) {
         nodeName = ruleFactory.getNameHelper().replaceIllegalCharacters(nodeName);
-        nodeName = ruleFactory.getNameHelper().normalizeName(nodeName);
+        nodeName = ruleFactory.getNameHelper().normalizeName(nodeName, false);
 
         if (isKeyword(nodeName)) {
             nodeName = "_" + nodeName;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/json/RealJsonExamplesIT.java
Patch:
@@ -16,8 +16,8 @@
 
 package org.jsonschema2pojo.integration.json;
 
-import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.junit.Assert.*;
 
 import java.util.List;
@@ -34,7 +34,8 @@ public class RealJsonExamplesIT {
     public void getUserDataProducesValidTypes() throws Exception {
 
         ClassLoader resultsClassLoader = generateAndCompile("/json/examples/GetUserData.json", "com.example",
-                config("sourceType", "json"));
+                config("sourceType", "json",
+                        "useLongIntegers", true));
 
         Class<?> userDataType = resultsClassLoader.loadClass("com.example.GetUserData");
 

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -196,7 +196,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      *            default-value="jackson2"
      * @since 0.3.1
      */
-    private String annotationStyle = "jackson";
+    private String annotationStyle = "jackson2";
 
     /**
      * A fully qualified class name, referring to a custom annotator class that

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -196,7 +196,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      *            default-value="jackson2"
      * @since 0.3.1
      */
-    private String annotationStyle = "jackson";
+    private String annotationStyle = "jackson2";
 
     /**
      * A fully qualified class name, referring to a custom annotator class that

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/RuleFactory.java
Patch:
@@ -21,6 +21,7 @@
 import org.jsonschema2pojo.GenerationConfig;
 import org.jsonschema2pojo.Jackson2Annotator;
 import org.jsonschema2pojo.SchemaStore;
+
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JDefinedClass;
@@ -201,7 +202,7 @@ public Rule<JClassContainer, JType> getSchemaRule() {
      * @return a schema rule that can handle the "default" declaration.
      */
     public Rule<JFieldVar, JFieldVar> getDefaultRule() {
-        return new DefaultRule();
+        return new DefaultRule(this);
     }
 
     /**

File: jsonschema2pojo-ant/src/main/java/org/jsonschema2pojo/ant/Jsonschema2PojoTask.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.types.Path;
 import org.apache.tools.ant.types.Reference;
-
 import org.jsonschema2pojo.AnnotationStyle;
 import org.jsonschema2pojo.Annotator;
 import org.jsonschema2pojo.GenerationConfig;
@@ -67,7 +66,7 @@ public class Jsonschema2PojoTask extends Task implements GenerationConfig {
 
     private boolean skip;
 
-    private char[] propertyWordDelimiters = new char[] {};
+    private char[] propertyWordDelimiters = new char[] { '-', ' ', '_' };
 
     private boolean useLongIntegers;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/DefaultGenerationConfig.java
Patch:
@@ -69,7 +69,7 @@ public String getTargetPackage() {
      */
     @Override
     public char[] getPropertyWordDelimiters() {
-        return new char[] {};
+        return new char[] { '-', ' ', '_' };
     }
 
     /**

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/RegressionIT.java
Patch:
@@ -16,8 +16,8 @@
 
 package org.jsonschema2pojo.integration;
 
-import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.junit.Assert.*;
 
 import java.io.File;
@@ -37,7 +37,7 @@ public void pathWithSpacesInTheNameDoesNotFail() throws ClassNotFoundException,
         File sourcesDirectory = generate(file.toURI().toURL(), "com.example", new HashMap<String, Object>());
         ClassLoader resultsClassLoader = compile(sourcesDirectory);
 
-        Class generatedType = resultsClassLoader.loadClass("com.example.Spaces_in_path");
+        Class generatedType = resultsClassLoader.loadClass("com.example.SpacesInPath");
         assertThat(generatedType, is(notNullValue()));
 
     }

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/AbsoluteRefIT.java
Patch:
@@ -16,8 +16,8 @@
 
 package org.jsonschema2pojo.integration.ref;
 
-import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.junit.Assert.*;
 
 import java.io.File;
@@ -41,7 +41,7 @@ public void absoluteRefIsReadSuccessfully() throws ClassNotFoundException, NoSuc
         Class<?> addressClass = absoluteRefClass.getMethod("getAddress").getReturnType();
 
         assertThat(addressClass.getName(), is("com.example.Address"));
-        assertThat(addressClass.getMethods(), hasItemInArray(hasProperty("name", equalTo("getPostal_code"))));
+        assertThat(addressClass.getMethods(), hasItemInArray(hasProperty("name", equalTo("getPostalCode"))));
 
     }
 

File: jsonschema2pojo-ant/src/main/java/org/jsonschema2pojo/ant/package-info.java
Patch:
@@ -18,4 +18,4 @@
  * Provides the classes specifically associated with the Ant task for 
  * jsonschema2pojo 
  */
-package com.googlecode.jsonschema2pojo.ant;
\ No newline at end of file
+package org.jsonschema2pojo.ant;
\ No newline at end of file

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/ClassConverter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.cli;
+package org.jsonschema2pojo.cli;
 
 import static org.apache.commons.lang.StringUtils.*;
 

File: jsonschema2pojo-cli/src/main/java/org/jsonschema2pojo/cli/package-info.java
Patch:
@@ -18,4 +18,4 @@
  * Provides the classes specifically associated with the command line interface
  * for jsonschema2pojo
  */
-package com.googlecode.jsonschema2pojo.cli;
+package org.jsonschema2pojo.cli;

File: jsonschema2pojo-cli/src/test/java/org/jsonschema2pojo/cli/ArgumentsTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.cli;
+package org.jsonschema2pojo.cli;
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;

File: jsonschema2pojo-cli/src/test/java/org/jsonschema2pojo/cli/ClassConverterTest.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.cli;
+package org.jsonschema2pojo.cli;
 
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
 import org.junit.Test;
 
 import com.beust.jcommander.ParameterException;
-import com.googlecode.jsonschema2pojo.Annotator;
+import org.jsonschema2pojo.Annotator;
 
 public class ClassConverterTest {
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/AbstractAnnotator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/AnnotationStyle.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 /**
  * The style of annotations to be used on generated java types (to allow them to

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Annotator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/AnnotatorFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 /**
  * Factory object for creating {@link Annotator}s for all the supported

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/CompositeAnnotator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/ContentResolver.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import static java.util.Arrays.*;
 import static org.apache.commons.lang.StringUtils.*;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/DefaultGenerationConfig.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import java.io.File;
 import java.util.Iterator;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/FragmentResolver.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import static java.util.Arrays.*;
 import static org.apache.commons.lang.StringUtils.*;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/GenerationConfig.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import java.io.File;
 import java.util.Iterator;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/GsonAnnotator.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * 
  */
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.google.gson.annotations.Expose;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Jackson1Annotator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import java.util.Iterator;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Jackson2Annotator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import java.util.Iterator;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/NoopAnnotator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 
 /**

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/Schema.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import java.net.URI;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaGenerator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import java.io.IOException;
 import java.net.URL;
@@ -32,7 +32,7 @@
 import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
 import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
 import com.fasterxml.jackson.databind.ser.std.NullSerializer;
-import com.googlecode.jsonschema2pojo.exception.GenerationException;
+import org.jsonschema2pojo.exception.GenerationException;
 
 public class SchemaGenerator {
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import java.io.IOException;
 import java.net.URL;
 
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.googlecode.jsonschema2pojo.rules.RuleFactory;
+import org.jsonschema2pojo.rules.RuleFactory;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JPackage;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SchemaStore.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import static org.apache.commons.lang.StringUtils.stripEnd;
 import static org.apache.commons.lang.StringUtils.substringAfter;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/SourceType.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 /**
  * The type of input/source documents given to jsonschema2pojo.

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/exception/ClassAlreadyExistsException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.exception;
+package org.jsonschema2pojo.exception;
 
 import com.sun.codemodel.JType;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/exception/GenerationException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.exception;
+package org.jsonschema2pojo.exception;
 
 /**
  * Represents an unexpected error during Java code generation.

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/exception/package-info.java
Patch:
@@ -18,4 +18,4 @@
  * Provides exception types, thrown during schema parsing or code generation
  * when errors occur
  */
-package com.googlecode.jsonschema2pojo.exception;
+package org.jsonschema2pojo.exception;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/AdditionalPropertiesRule.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import java.util.HashMap;
 import java.util.Map;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JDefinedClass;
 import com.sun.codemodel.JExpr;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ArrayRule.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import java.util.List;
 import java.util.Set;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
-import com.googlecode.jsonschema2pojo.util.Inflector;
+import org.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.util.Inflector;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JPackage;
 import com.sun.codemodel.JType;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import static org.apache.commons.lang.StringUtils.*;
 
@@ -29,7 +29,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.util.StdDateFormat;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.ClassType;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/DescriptionRule.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import java.net.URI;
 import java.util.Date;
 import java.util.regex.Pattern;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.GenerationConfig;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.GenerationConfig;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JType;
 
 /**

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/MinItemsMaxItemsRule.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import javax.validation.constraints.Size;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JAnnotationUse;
 import com.sun.codemodel.JFieldVar;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/MinLengthMaxLengthRule.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import javax.validation.constraints.Size;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JAnnotationUse;
 import com.sun.codemodel.JFieldVar;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/MinimumMaximumRule.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import javax.validation.constraints.DecimalMax;
 import javax.validation.constraints.DecimalMin;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JAnnotationUse;
 import com.sun.codemodel.JFieldVar;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/NameHelper.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import static java.lang.Character.*;
 import static org.apache.commons.lang.StringUtils.*;
 
 import org.apache.commons.lang.WordUtils;
 
-import com.googlecode.jsonschema2pojo.GenerationConfig;
+import org.jsonschema2pojo.GenerationConfig;
 
 public class NameHelper {
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PatternRule.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import javax.validation.constraints.Pattern;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JAnnotationUse;
 import com.sun.codemodel.JFieldVar;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PrimitiveTypes.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
-import com.googlecode.jsonschema2pojo.exception.GenerationException;
+import org.jsonschema2pojo.exception.GenerationException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JPrimitiveType;
 import com.sun.codemodel.JType;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertiesRule.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import java.util.Iterator;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDefinedClass;
 
 /**

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import static javax.lang.model.SourceVersion.*;
 import static org.apache.commons.lang.StringUtils.*;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JBlock;
 import com.sun.codemodel.JDefinedClass;
 import com.sun.codemodel.JExpr;
@@ -53,7 +53,7 @@ protected PropertyRule(RuleFactory ruleFactory) {
      * <p>
      * If this rule's schema mapper is configured to include builder methods
      * (see
-     * {@link com.googlecode.jsonschema2pojo.GenerationConfig#isGenerateBuilders()}
+     * {@link org.jsonschema2pojo.GenerationConfig#isGenerateBuilders()}
      * ), then a builder method of the form <code>withFoo(Foo foo);</code> is
      * also added.
      * 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/RequiredRule.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import javax.validation.constraints.NotNull;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
 import com.sun.codemodel.JFieldVar;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/Rule.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 
 /**
  * Represents a JSON Schema rule (production from JSON Schema). Can be executed

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JType;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TitleRule.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
 

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.GenerationConfig;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.GenerationConfig;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JType;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/ValidRule.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import javax.validation.Valid;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JFieldVar;
 
 public class ValidRule implements Rule<JFieldVar, JFieldVar> {

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/rules/package-info.java
Patch:
@@ -18,4 +18,4 @@
  * Provides the schema rules which can be 'applied' to perform the code
  * generation steps associated with JSON schema nodes
  */
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;

File: jsonschema2pojo-core/src/main/java/org/jsonschema2pojo/util/Inflector.java
Patch:
@@ -17,7 +17,7 @@
  * and licensed with express permission from the author Chu Yeow Cheah.
  */
 
-package com.googlecode.jsonschema2pojo.util;
+package org.jsonschema2pojo.util;
 
 import java.util.ArrayList;
 import java.util.List;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/AnnotatorFactoryTest.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
-import static com.googlecode.jsonschema2pojo.AnnotationStyle.*;
+import static org.jsonschema2pojo.AnnotationStyle.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/ContentResolverTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/FragmentResolverTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/SchemaMapperTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
@@ -31,8 +31,8 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.googlecode.jsonschema2pojo.rules.RuleFactory;
-import com.googlecode.jsonschema2pojo.rules.SchemaRule;
+import org.jsonschema2pojo.rules.RuleFactory;
+import org.jsonschema2pojo.rules.SchemaRule;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JPackage;
 

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/SchemaStoreTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo;
+package org.jsonschema2pojo;
 
 import static org.apache.commons.lang.StringUtils.*;
 import static org.hamcrest.Matchers.*;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/example/Example.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.example;
+package org.jsonschema2pojo.example;
 
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
 
-import com.googlecode.jsonschema2pojo.SchemaMapper;
+import org.jsonschema2pojo.SchemaMapper;
 import com.sun.codemodel.JCodeModel;
 
 public class Example {

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/DescriptionRuleTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/RequiredRuleTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/SchemaRuleTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
@@ -30,8 +30,8 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.googlecode.jsonschema2pojo.Schema;
-import com.googlecode.jsonschema2pojo.SchemaStore;
+import org.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.SchemaStore;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/TitleRuleTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;

File: jsonschema2pojo-core/src/test/java/org/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.rules;
+package org.jsonschema2pojo.rules;
 
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
@@ -28,8 +28,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.node.TextNode;
-import com.googlecode.jsonschema2pojo.GenerationConfig;
-import com.googlecode.jsonschema2pojo.Schema;
+import org.jsonschema2pojo.GenerationConfig;
+import org.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/AdditionalPropertiesIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ArrayIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/DefaultIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/DescriptionIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/EnumIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static java.lang.reflect.Modifier.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ExtendsIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/FormatIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static java.util.Arrays.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/PropertiesIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/RegressionIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/RequiredIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/TitleIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/TypeIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration;
+package org.jsonschema2pojo.integration;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ant/Jsonschema2PojoTaskIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.ant;
+package org.jsonschema2pojo.integration.ant;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static java.util.Arrays.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
@@ -33,7 +33,7 @@
 import org.apache.tools.ant.ProjectHelper;
 import org.junit.Test;
 
-import com.googlecode.jsonschema2pojo.ant.Jsonschema2PojoTask;
+import org.jsonschema2pojo.ant.Jsonschema2PojoTask;
 
 public class Jsonschema2PojoTaskIT {
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/CustomAnnotatorIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.config;
+package org.jsonschema2pojo.integration.config;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
@@ -29,7 +29,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.databind.JsonNode;
-import com.googlecode.jsonschema2pojo.Annotator;
+import org.jsonschema2pojo.Annotator;
 import com.sun.codemodel.JDefinedClass;
 import com.sun.codemodel.JFieldVar;
 import com.sun.codemodel.JMethod;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeHashCodeAndEqualsIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.config;
+package org.jsonschema2pojo.integration.config;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.junit.Assert.*;
 
 import org.junit.Test;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeJsr303AnnotationsIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.config;
+package org.jsonschema2pojo.integration.config;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static java.util.Arrays.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
@@ -34,7 +34,7 @@
 import org.hamcrest.Matcher;
 import org.junit.Test;
 
-import com.googlecode.jsonschema2pojo.integration.util.FileSearchMatcher;
+import org.jsonschema2pojo.integration.util.FileSearchMatcher;
 
 @SuppressWarnings("rawtypes")
 public class IncludeJsr303AnnotationsIT {

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/IncludeToStringIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.config;
+package org.jsonschema2pojo.integration.config;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.junit.Assert.*;
 
 import org.junit.Test;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/OutputEncodingIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.config;
+package org.jsonschema2pojo.integration.config;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/config/RemoveOldOutputIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.config;
+package org.jsonschema2pojo.integration.config;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 
 import java.io.File;
 import java.net.URL;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/generation/GsonIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.generation;
+package org.jsonschema2pojo.integration.generation;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 
 import java.util.Arrays;
 import java.util.Collection;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/json/JsonTypesIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.json;
+package org.jsonschema2pojo.integration.json;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static java.util.Arrays.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/json/RealJsonExamplesIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.json;
+package org.jsonschema2pojo.integration.json;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/AbsoluteRefIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.ref;
+package org.jsonschema2pojo.integration.ref;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/ClasspathRefIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.ref;
+package org.jsonschema2pojo.integration.ref;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/CyclicalRefIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.ref;
+package org.jsonschema2pojo.integration.ref;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/FragmentRefIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.ref;
+package org.jsonschema2pojo.integration.ref;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/HttpRefIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.ref;
+package org.jsonschema2pojo.integration.ref;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/RelativeRefIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.ref;
+package org.jsonschema2pojo.integration.ref;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/ref/SelfRefIT.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.ref;
+package org.jsonschema2pojo.integration.ref;
 
-import static com.googlecode.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
+import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/CodeGenerationHelper.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.util;
+package org.jsonschema2pojo.integration.util;
 
 import static org.apache.commons.io.FileUtils.*;
 import static org.apache.commons.lang.StringUtils.*;
@@ -38,8 +38,7 @@
 import org.apache.maven.artifact.DependencyResolutionRequiredException;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.project.MavenProject;
-
-import com.googlecode.jsonschema2pojo.maven.Jsonschema2PojoMojo;
+import org.jsonschema2pojo.maven.Jsonschema2PojoMojo;
 
 public class CodeGenerationHelper {
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/Compiler.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.util;
+package org.jsonschema2pojo.integration.util;
 
 import static java.util.Arrays.*;
 import static org.apache.commons.io.FileUtils.*;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/FileSearchMatcher.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.util;
+package org.jsonschema2pojo.integration.util;
 
 import java.io.File;
 import java.io.IOException;

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/JsonAssert.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.util;
+package org.jsonschema2pojo.integration.util;
 
 import static org.junit.Assert.*;
 

File: jsonschema2pojo-integration-tests/src/test/java/org/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.integration.util;
+package org.jsonschema2pojo.integration.util;
 
 import java.lang.reflect.Field;
 import java.util.Map;
 import java.util.Map.Entry;
 
-import com.googlecode.jsonschema2pojo.maven.Jsonschema2PojoMojo;
+import org.jsonschema2pojo.maven.Jsonschema2PojoMojo;
 
 /**
  * A plugin mojo that allows the private property values usually only set by

File: jsonschema2pojo-integration-tests/src/test/resources/integration/output/GsonIT/fstabentry/org/jsonschema2pojo/integration/generation/gsonit/FstabEntry.java
Patch:
@@ -1,5 +1,5 @@
 
-package com.googlecode.jsonschema2pojo.integration.generation.gsonit;
+package org.jsonschema2pojo.integration.generation.gsonit;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -13,7 +13,7 @@
  * schema for an fstab entry
  * 
  */
-@Generated("com.googlecode.jsonschema2pojo")
+@Generated("org.jsonschema2pojo")
 public class FstabEntry {
 
     private Storage storage;
@@ -64,7 +64,7 @@ public void setAdditionalProperties(String name, Object value) {
         this.additionalProperties.put(name, value);
     }
 
-    @Generated("com.googlecode.jsonschema2pojo")
+    @Generated("org.jsonschema2pojo")
     public static enum FsType {
 
         EXT_3("ext3"),

File: jsonschema2pojo-integration-tests/src/test/resources/integration/output/GsonIT/fstabentry/org/jsonschema2pojo/integration/generation/gsonit/Storage.java
Patch:
@@ -1,11 +1,11 @@
 
-package com.googlecode.jsonschema2pojo.integration.generation.gsonit;
+package org.jsonschema2pojo.integration.generation.gsonit;
 
 import java.util.HashMap;
 import java.util.Map;
 import javax.annotation.Generated;
 
-@Generated("com.googlecode.jsonschema2pojo")
+@Generated("org.jsonschema2pojo")
 public class Storage {
 
     private Map<String, Object> additionalProperties = new HashMap<String, Object>();

File: jsonschema2pojo-integration-tests/src/test/resources/integration/output/GsonIT/person/org/jsonschema2pojo/integration/generation/gsonit/Person.java
Patch:
@@ -1,5 +1,5 @@
 
-package com.googlecode.jsonschema2pojo.integration.generation.gsonit;
+package org.jsonschema2pojo.integration.generation.gsonit;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -12,7 +12,7 @@
  * 
  * 
  */
-@Generated("com.googlecode.jsonschema2pojo")
+@Generated("org.jsonschema2pojo")
 public class Person {
 
     private String firstName;

File: jsonschema2pojo-integration-tests/src/test/resources/integration/output/GsonIT/productset/org/jsonschema2pojo/integration/generation/gsonit/Dimensions.java
Patch:
@@ -1,11 +1,11 @@
 
-package com.googlecode.jsonschema2pojo.integration.generation.gsonit;
+package org.jsonschema2pojo.integration.generation.gsonit;
 
 import java.util.HashMap;
 import java.util.Map;
 import javax.annotation.Generated;
 
-@Generated("com.googlecode.jsonschema2pojo")
+@Generated("org.jsonschema2pojo")
 public class Dimensions {
 
     private Double length;

File: jsonschema2pojo-integration-tests/src/test/resources/integration/output/GsonIT/productset/org/jsonschema2pojo/integration/generation/gsonit/ProductSet.java
Patch:
@@ -1,5 +1,5 @@
 
-package com.googlecode.jsonschema2pojo.integration.generation.gsonit;
+package org.jsonschema2pojo.integration.generation.gsonit;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -15,7 +15,7 @@
  * 
  * 
  */
-@Generated("com.googlecode.jsonschema2pojo")
+@Generated("org.jsonschema2pojo")
 public class ProductSet {
 
     /**

File: jsonschema2pojo-integration-tests/src/test/resources/integration/output/GsonIT/productset/org/jsonschema2pojo/integration/generation/gsonit/WarehouseLocation.java
Patch:
@@ -1,5 +1,5 @@
 
-package com.googlecode.jsonschema2pojo.integration.generation.gsonit;
+package org.jsonschema2pojo.integration.generation.gsonit;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -10,7 +10,7 @@
  * A geographical coordinate
  * 
  */
-@Generated("com.googlecode.jsonschema2pojo")
+@Generated("org.jsonschema2pojo")
 public class WarehouseLocation {
 
     private Double latitude;

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/ProjectClasspath.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.googlecode.jsonschema2pojo.maven;
+package org.jsonschema2pojo.maven;
 
 import java.io.File;
 import java.net.MalformedURLException;

File: jsonschema2pojo-maven-plugin/src/main/java/org/jsonschema2pojo/maven/package-info.java
Patch:
@@ -18,4 +18,4 @@
  * Provides the classes specifically associated with the Maven plugin for 
  * jsonschema2pojo 
  */
-package com.googlecode.jsonschema2pojo.maven;
\ No newline at end of file
+package org.jsonschema2pojo.maven;
\ No newline at end of file

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/JsonAssert.java
Patch:
@@ -27,7 +27,7 @@
 public class JsonAssert {
 
     public static void assertEqualsJsonIgnoreAdditions(String expectedJson, String actualJson) throws JSONException {
-        assertEqualsJson(expectedJson, actualJson, JSONCompareMode.LENIENT);
+        assertEqualsJson(expectedJson, actualJson, JSONCompareMode.NON_EXTENSIBLE);
 
     }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/GsonAnnotator.java
Patch:
@@ -20,6 +20,7 @@
 package com.googlecode.jsonschema2pojo;
 
 import com.fasterxml.jackson.databind.JsonNode;
+import com.google.gson.annotations.Expose;
 import com.google.gson.annotations.SerializedName;
 import com.sun.codemodel.JDefinedClass;
 import com.sun.codemodel.JFieldVar;
@@ -45,6 +46,8 @@ public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyN
         if (fieldDiffersFromPropertyName) {
             field.annotate(SerializedName.class).param("value", propertyName);
         }
+
+        field.annotate(Expose.class);
     }
 
 }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/AnnotationStyle.java
Patch:
@@ -51,9 +51,9 @@ public enum AnnotationStyle {
      * Gson 2.2.4
      */
     GSON,
-    
+
     /**
      * No-op style, adds no annotations at all.
      */
-    NONE, 
+    NONE,
 }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/AnnotatorFactory.java
Patch:
@@ -39,7 +39,7 @@ public Annotator getAnnotator(AnnotationStyle style) {
             case JACKSON1:
                 return new Jackson1Annotator();
             case GSON:
-        	return new GsonAnnotator();
+                return new GsonAnnotator();
             case NONE:
                 return new NoopAnnotator();
             default:

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/AnnotatorFactory.java
Patch:
@@ -38,6 +38,8 @@ public Annotator getAnnotator(AnnotationStyle style) {
                 return new Jackson2Annotator();
             case JACKSON1:
                 return new Jackson1Annotator();
+            case GSON:
+        	return new GsonAnnotator();
             case NONE:
                 return new NoopAnnotator();
             default:

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/GenerationConfig.java
Patch:
@@ -119,6 +119,9 @@ public interface GenerationConfig {
      *         href="https://github.com/FasterXML/jackson-annotations">Jackson
      *         2.x</a> library)</li>
      *         <li>
+     *         <code>gson</code> (apply annotations from the <a
+     *         href="https://code.google.com/p/google-gson/">gson</a> library)</li>
+     *         <li>
      *         <code>none</code> (apply no annotations at all)</li>
      *         </ul>
      * @see AnnotatorFactory

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/exception/ClassAlreadyExistsException.java
Patch:
@@ -25,6 +25,8 @@
  */
 public class ClassAlreadyExistsException extends Exception {
 
+    private static final long serialVersionUID = 7694477714975772317L;
+    
     private final JType existingClass;
 
     /**

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/exception/GenerationException.java
Patch:
@@ -21,6 +21,8 @@
  */
 public class GenerationException extends RuntimeException {
 
+    private static final long serialVersionUID = -2105441912033842653L;
+
     public GenerationException(String message, Throwable cause) {
         super(message, cause);
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/util/Inflector.java
Patch:
@@ -151,7 +151,7 @@ public String tableize(String className) {
         return pluralize(underscore(className));
     }
     
-    public String tableize(Class klass) {
+    public String tableize(Class<?> klass) {
         // Strip away package name - we only want the 'base' class name.
         String className = klass.getName().replace(klass.getPackage().getName()+".", "");
         return tableize(className);

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/AnnotatorFactoryTest.java
Patch:
@@ -35,6 +35,7 @@ public void canCreateCorrectAnnotatorFromAnnotationStyle() {
         assertThat(factory.getAnnotator(JACKSON1), is(instanceOf(Jackson1Annotator.class)));
         assertThat(factory.getAnnotator(JACKSON), is(instanceOf(Jackson2Annotator.class)));
         assertThat(factory.getAnnotator(JACKSON2), is(instanceOf(Jackson2Annotator.class)));
+        assertThat(factory.getAnnotator(GSON), is(instanceOf(GsonAnnotator.class)));
         assertThat(factory.getAnnotator(NONE), is(instanceOf(NoopAnnotator.class)));
 
     }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/CodeGenerationHelper.java
Patch:
@@ -55,7 +55,7 @@ public static File generate(URL schema, String targetPackage) {
 
     public static File generate(String schema, String targetPackage, Map<String, Object> configValues) {
         URL schemaUrl = CodeGenerationHelper.class.getResource(schema);
-        assertThat("Unable to read schema resource from the classpath", schemaUrl, is(notNullValue()));
+        assertThat("Unable to read schema resource from the classpath: " + schema, schemaUrl, is(notNullValue()));
 
         return generate(schemaUrl, targetPackage, configValues);
     }
@@ -83,7 +83,8 @@ public static File generate(final URL schema, final String targetPackage, final
     public static void generate(final URL schema, final String targetPackage, final Map<String, Object> configValues, final File outputDirectory) {
 
         try {
-            Jsonschema2PojoMojo pluginMojo = new TestableJsonschema2PojoMojo().configure(new HashMap<String, Object>() {
+            @SuppressWarnings("serial")
+	    Jsonschema2PojoMojo pluginMojo = new TestableJsonschema2PojoMojo().configure(new HashMap<String, Object>() {
                 {
                     put("sourceDirectory", new File(schema.toURI()));
                     put("outputDirectory", outputDirectory);

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -187,6 +187,9 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * <code>jackson1</code> (apply annotations from the <a
      * href="http://jackson.codehaus.org/">Jackson 1.x</a> library)</li>
      * <li>
+     * <code>gson</code> (apply annotations from the <a
+     * href="https://code.google.com/p/google-gson/">gson</a> library)</li>
+     * <li>
      * <code>none</code> (apply no annotations at all)</li>
      * </ul>
      * 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/AnnotatorFactory.java
Patch:
@@ -38,6 +38,8 @@ public Annotator getAnnotator(AnnotationStyle style) {
                 return new Jackson2Annotator();
             case JACKSON1:
                 return new Jackson1Annotator();
+            case GSON:
+        	return new GsonAnnotator();
             case NONE:
                 return new NoopAnnotator();
             default:

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/GenerationConfig.java
Patch:
@@ -119,6 +119,9 @@ public interface GenerationConfig {
      *         href="https://github.com/FasterXML/jackson-annotations">Jackson
      *         2.x</a> library)</li>
      *         <li>
+     *         <code>gson</code> (apply annotations from the <a
+     *         href="https://code.google.com/p/google-gson/">gson</a> library)</li>
+     *         <li>
      *         <code>none</code> (apply no annotations at all)</li>
      *         </ul>
      * @see AnnotatorFactory

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/AnnotatorFactoryTest.java
Patch:
@@ -35,6 +35,7 @@ public void canCreateCorrectAnnotatorFromAnnotationStyle() {
         assertThat(factory.getAnnotator(JACKSON1), is(instanceOf(Jackson1Annotator.class)));
         assertThat(factory.getAnnotator(JACKSON), is(instanceOf(Jackson2Annotator.class)));
         assertThat(factory.getAnnotator(JACKSON2), is(instanceOf(Jackson2Annotator.class)));
+        assertThat(factory.getAnnotator(GSON), is(instanceOf(GsonAnnotator.class)));
         assertThat(factory.getAnnotator(NONE), is(instanceOf(NoopAnnotator.class)));
 
     }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/CodeGenerationHelper.java
Patch:
@@ -55,7 +55,7 @@ public static File generate(URL schema, String targetPackage) {
 
     public static File generate(String schema, String targetPackage, Map<String, Object> configValues) {
         URL schemaUrl = CodeGenerationHelper.class.getResource(schema);
-        assertThat("Unable to read schema resource from the classpath", schemaUrl, is(notNullValue()));
+        assertThat("Unable to read schema resource from the classpath: " + schema, schemaUrl, is(notNullValue()));
 
         return generate(schemaUrl, targetPackage, configValues);
     }

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -187,6 +187,9 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * <code>jackson1</code> (apply annotations from the <a
      * href="http://jackson.codehaus.org/">Jackson 1.x</a> library)</li>
      * <li>
+     * <code>gson</code> (apply annotations from the <a
+     * href="https://code.google.com/p/google-gson/">gson</a> library)</li>
+     * <li>
      * <code>none</code> (apply no annotations at all)</li>
      * </ul>
      * 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -68,7 +68,7 @@ public JType apply(String nodeName, JsonNode schemaNode, JClassContainer generat
 
         JType javaType;
         if (schemaNode.has("enum")) {
-            javaType = ruleFactory.getEnumRule().apply(nodeName, schemaNode.get("enum"), generatableType, schema);
+            javaType = ruleFactory.getEnumRule().apply(nodeName, schemaNode, generatableType, schema);
         } else {
             javaType = ruleFactory.getTypeRule().apply(nodeName, schemaNode, generatableType.getPackage(), schema);
         }

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/SchemaRuleTest.java
Patch:
@@ -37,10 +37,10 @@
 import com.sun.codemodel.JDefinedClass;
 import com.sun.codemodel.JType;
 
-public class JsonSchemaRuleTest {
+public class SchemaRuleTest {
 
     private static final String NODE_NAME = "nodeName";
-    private static final String TARGET_CLASS_NAME = JsonSchemaRuleTest.class.getName() + ".DummyClass";
+    private static final String TARGET_CLASS_NAME = SchemaRuleTest.class.getName() + ".DummyClass";
 
     private RuleFactory mockRuleFactory = mock(RuleFactory.class);
     private SchemaRule rule = new SchemaRule(mockRuleFactory);
@@ -93,7 +93,7 @@ public void enumAsRootIsGeneratedCorrectly() throws URISyntaxException, JClassAl
 
         rule.apply(NODE_NAME, schemaContent, jclass, schema);
 
-        verify(enumRule).apply(NODE_NAME, enumNode, jclass, schema);
+        verify(enumRule).apply(NODE_NAME, schemaContent, jclass, schema);
         verify(schema, atLeastOnce()).setJavaTypeIfEmpty(jclass);
 
     }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/EnumIT.java
Patch:
@@ -118,7 +118,7 @@ public void enumAtRootCreatesATopLevelType() throws ClassNotFoundException, NoSu
 
         ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/enumAsRoot.json", "com.example");
 
-        Class<Enum> rootEnumClass = (Class<Enum>) resultsClassLoader.loadClass("com.example.EnumAsRoot");
+        Class<Enum> rootEnumClass = (Class<Enum>) resultsClassLoader.loadClass("com.example.enums.EnumAsRoot");
 
         assertThat(rootEnumClass.isEnum(), is(true));
         assertThat(isPublic(rootEnumClass.getModifiers()), is(true));

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/exception/ClassAlreadyExistsException.java
Patch:
@@ -25,6 +25,8 @@
  */
 public class ClassAlreadyExistsException extends Exception {
 
+    private static final long serialVersionUID = 7694477714975772317L;
+    
     private final JType existingClass;
 
     /**

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/exception/GenerationException.java
Patch:
@@ -21,6 +21,8 @@
  */
 public class GenerationException extends RuntimeException {
 
+    private static final long serialVersionUID = -2105441912033842653L;
+
     public GenerationException(String message, Throwable cause) {
         super(message, cause);
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/util/Inflector.java
Patch:
@@ -151,7 +151,7 @@ public String tableize(String className) {
         return pluralize(underscore(className));
     }
     
-    public String tableize(Class klass) {
+    public String tableize(Class<?> klass) {
         // Strip away package name - we only want the 'base' class name.
         String className = klass.getName().replace(klass.getPackage().getName()+".", "");
         return tableize(className);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/CodeGenerationHelper.java
Patch:
@@ -76,7 +76,8 @@ public static File generate(final URL schema, final String targetPackage, final
         final File outputDirectory = createTemporaryOutputFolder();
 
         try {
-            Jsonschema2PojoMojo pluginMojo = new TestableJsonschema2PojoMojo().configure(new HashMap<String, Object>() {
+            @SuppressWarnings("serial")
+	    Jsonschema2PojoMojo pluginMojo = new TestableJsonschema2PojoMojo().configure(new HashMap<String, Object>() {
                 {
                     put("sourceDirectory", new File(schema.toURI()));
                     put("outputDirectory", outputDirectory);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ant/Jsonschema2PojoTaskIT.java
Patch:
@@ -47,7 +47,6 @@ public void antTaskExecutesSuccessfullyWithValidSchemas() throws URISyntaxExcept
         Class<?> generatedClass = resultsClassLoader.loadClass("com.example.WordDelimit");
 
         assertThat(generatedClass, is(notNullValue()));
-
     }
 
     /**
@@ -57,7 +56,7 @@ public void antTaskExecutesSuccessfullyWithValidSchemas() throws URISyntaxExcept
      * result, we need to compile with the same custom classpath.
      */
     private List<String> buildCustomClasspath() {
-        return asList(new File("target/custom-libs/clojure-1.5.1.jar").getAbsolutePath());
+        return asList(new File("target/custom-libs/de.flapdoodle.embedmongo-1.18.jar").getAbsolutePath());
     }
 
     @Test

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaMapperTest.java
Patch:
@@ -29,9 +29,10 @@
 import org.mockito.Mockito;
 
 import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.googlecode.jsonschema2pojo.rules.SchemaRule;
 import com.googlecode.jsonschema2pojo.rules.RuleFactory;
+import com.googlecode.jsonschema2pojo.rules.SchemaRule;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JPackage;
 
@@ -65,7 +66,7 @@ public void generateCreatesSchemaFromExampleJsonWhenInJsonMode() throws IOExcept
 
         URL schemaContent = this.getClass().getResource("/schema/address.json");
 
-        ObjectNode schemaNode = mock(ObjectNode.class);
+        ObjectNode schemaNode = JsonNodeFactory.instance.objectNode();
 
         final SchemaRule mockSchemaRule = mock(SchemaRule.class);
 

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -104,7 +104,7 @@ public static void generate(GenerationConfig config) throws FileNotFoundExceptio
         }
 
         if (config.getTargetDirectory().exists() || config.getTargetDirectory().mkdirs()) {
-            codeModel.build(config.getTargetDirectory());
+            codeModel.build(config.getTargetDirectory(), new NullPrintStream());
         } else {
             throw new GenerationException("Could not create or access target directory " + config.getTargetDirectory().getAbsolutePath());
         }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/Compiler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.integration.util;
 
+import static java.util.Arrays.*;
 import static org.apache.commons.io.FileUtils.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
@@ -35,15 +36,15 @@
  */
 public class Compiler {
 
-    public void compile(File directory) {
+    public void compile(File directory, String classpath) {
 
         JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();
         StandardJavaFileManager fileManager = javaCompiler.getStandardFileManager(null, null, null);
 
         Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(findAllSourceFiles(directory));
 
         if (compilationUnits.iterator().hasNext()) {
-            Boolean success = javaCompiler.getTask(null, fileManager, null, null, null, compilationUnits).call();
+            Boolean success = javaCompiler.getTask(null, fileManager, null, asList("-classpath", classpath), null, compilationUnits).call();
             assertThat("Compilation was not successful, check stdout for errors", success, is(true));
         }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Jackson1Annotator.java
Patch:
@@ -49,12 +49,12 @@ public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {
     }
 
     @Override
-    public void propertyInclusion(JDefinedClass clazz) {
+    public void propertyInclusion(JDefinedClass clazz, JsonNode schema) {
         clazz.annotate(JsonSerialize.class).param("include", JsonSerialize.Inclusion.NON_NULL);
     }
 
     @Override
-    public void propertyField(JFieldVar field, String propertyName) {
+    public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyName, JsonNode propertyNode) {
         field.annotate(JsonProperty.class).param("value", propertyName);
     }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Jackson2Annotator.java
Patch:
@@ -49,12 +49,12 @@ public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {
     }
 
     @Override
-    public void propertyInclusion(JDefinedClass clazz) {
+    public void propertyInclusion(JDefinedClass clazz, JsonNode schema) {
         clazz.annotate(JsonInclude.class).param("value", JsonInclude.Include.NON_NULL);
     }
 
     @Override
-    public void propertyField(JFieldVar field, String propertyName) {
+    public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyName, JsonNode propertyNode) {
         field.annotate(JsonProperty.class).param("value", propertyName);
     }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/NoopAnnotator.java
Patch:
@@ -32,11 +32,11 @@ public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {
     }
 
     @Override
-    public void propertyInclusion(JDefinedClass clazz) {
+    public void propertyInclusion(JDefinedClass clazz, JsonNode schema) {
     }
 
     @Override
-    public void propertyField(JFieldVar field, String propertyName) {
+    public void propertyField(JFieldVar field, JDefinedClass clazz, String propertyName, JsonNode propertyNode) {
     }
 
     @Override

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -165,7 +165,7 @@ private JDefinedClass createClass(String nodeName, JsonNode node, JPackage _pack
             throw new ClassAlreadyExistsException(e.getExistingClass());
         }
 
-        ruleFactory.getAnnotator().propertyInclusion(newType);
+        ruleFactory.getAnnotator().propertyInclusion(newType, node);
 
         return newType;
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -74,7 +74,7 @@ public JDefinedClass apply(String nodeName, JsonNode node, JDefinedClass jclass,
 
         JFieldVar field = jclass.field(JMod.PRIVATE, propertyType, propertyName);
 
-        ruleFactory.getAnnotator().propertyField(field, nodeName);
+        ruleFactory.getAnnotator().propertyField(field, jclass, nodeName, node);
 
         JMethod getter = addGetter(jclass, field, nodeName);
         JMethod setter = addSetter(jclass, field, nodeName);

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/ContentResolver.java
Patch:
@@ -18,6 +18,7 @@
 
 import static java.util.Arrays.*;
 import static org.apache.commons.lang.StringUtils.*;
+import com.fasterxml.jackson.databind.DeserializationFeature;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -36,7 +37,8 @@
 public class ContentResolver {
 
     private static final Set<String> CLASSPATH_SCHEMES = new HashSet<String>(asList("classpath", "resource", "java"));
-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()
+        .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);
 
     /**
      * Resolve a given URI to read its contents and parse the result as JSON.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaGenerator.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Iterator;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.JsonSerializer;
@@ -35,7 +36,8 @@
 
 public class SchemaGenerator {
 
-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()
+        .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);
 
     public ObjectNode schemaFromExample(URL example) {
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaGenerator.java
Patch:
@@ -16,9 +16,7 @@
 
 package com.googlecode.jsonschema2pojo;
 
-import java.io.File;
 import java.io.IOException;
-import java.net.URI;
 import java.net.URL;
 import java.util.Iterator;
 
@@ -42,7 +40,7 @@ public class SchemaGenerator {
     public ObjectNode schemaFromExample(URL example) {
 
         try {
-            JsonNode content = OBJECT_MAPPER.readTree(new File(URI.create(example.toString())));
+            JsonNode content = OBJECT_MAPPER.readTree(example);
             return schemaFromExample(content);
         } catch (IOException e) {
             throw new GenerationException("Could not process JSON in source file", e);

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -53,7 +53,6 @@
 public class EnumRule implements SchemaRule<JClassContainer, JDefinedClass> {
 
     private static final String VALUE_FIELD_NAME = "value";
-    private static final String ILLEGAL_CHARACTER_REGEX = "[^0-9a-zA-Z]";
 
     private final RuleFactory ruleFactory;
 
@@ -173,7 +172,7 @@ private void addGeneratedAnnotation(JDefinedClass jclass) {
     }
 
     private String getEnumName(String nodeName) {
-        String className = capitalize(nodeName).replaceAll(ILLEGAL_CHARACTER_REGEX, "_");
+        String className = ruleFactory.getNameHelper().replaceIllegalCharacters(capitalize(nodeName));
         return ruleFactory.getNameHelper().normalizeName(className);
     }
 
@@ -182,7 +181,7 @@ private String getConstantName(String nodeName) {
 
         String enumName = "";
         for (Iterator<String> iter = enumNameGroups.iterator(); iter.hasNext();) {
-            if (containsOnly(iter.next().replaceAll(ILLEGAL_CHARACTER_REGEX, "_"), "_")) {
+            if (containsOnly(ruleFactory.getNameHelper().replaceIllegalCharacters(iter.next()), "_")) {
                 iter.remove();
             }
         }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -173,7 +173,8 @@ private void addGeneratedAnnotation(JDefinedClass jclass) {
     }
 
     private String getEnumName(String nodeName) {
-        return capitalize(nodeName).replaceAll(ILLEGAL_CHARACTER_REGEX, "_");
+        String className = capitalize(nodeName).replaceAll(ILLEGAL_CHARACTER_REGEX, "_");
+        return ruleFactory.getNameHelper().normalizeName(className);
     }
 
     private String getConstantName(String nodeName) {

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -173,7 +173,8 @@ private void addGeneratedAnnotation(JDefinedClass jclass) {
     }
 
     private String getEnumName(String nodeName) {
-        return capitalize(nodeName).replaceAll(ILLEGAL_CHARACTER_REGEX, "_");
+        String className = capitalize(nodeName).replaceAll(ILLEGAL_CHARACTER_REGEX, "_");
+        return ruleFactory.getNameHelper().normalizeName(className);
     }
 
     private String getConstantName(String nodeName) {

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/PropertiesIT.java
Patch:
@@ -118,7 +118,8 @@ public void wordDelimitersCausesCamelCase() throws ClassNotFoundException, Intro
     @Test
     public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/properties/propertiesThatAreJavaKeywords.json", "com.example");
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/properties/propertiesThatAreJavaKeywords.json", "com.example",
+                config("propertyWordDelimiters", "-_"));
 
         Class<?> generatedType = resultsClassLoader.loadClass("com.example.PropertiesThatAreJavaKeywords");
 
@@ -132,5 +133,4 @@ public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFou
         assertThat(valueAsJsonNode.path("abstract").asText(), is("d"));
 
     }
-
 }

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -29,6 +29,7 @@
 import com.googlecode.jsonschema2pojo.Annotator;
 import com.googlecode.jsonschema2pojo.AnnotatorFactory;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
+import com.googlecode.jsonschema2pojo.SchemaGenerator;
 import com.googlecode.jsonschema2pojo.SchemaMapper;
 import com.googlecode.jsonschema2pojo.SchemaStore;
 import com.googlecode.jsonschema2pojo.exception.GenerationException;
@@ -78,7 +79,7 @@ public static void main(String[] args) throws FileNotFoundException, IOException
     public static void generate(GenerationConfig config) throws FileNotFoundException, IOException {
 
         Annotator annotator = new AnnotatorFactory().getAnnotator(config.getAnnotationStyle());
-        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, annotator, new SchemaStore()));
+        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, annotator, new SchemaStore()), new SchemaGenerator());
 
         JCodeModel codeModel = new JCodeModel();
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaStore.java
Patch:
@@ -91,7 +91,7 @@ public Schema create(Schema parent, String path) {
 
         path = stripEnd(path, "#?&/");
 
-        URI id = (parent == null) ? URI.create(path) : parent.getId().resolve(path);
+        URI id = (parent == null || parent.getId() == null) ? URI.create(path) : parent.getId().resolve(path);
 
         return create(id);
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/FragmentResolverTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
-public class FragmentResolverImplTest {
+public class FragmentResolverTest {
 
     private FragmentResolver resolver = new FragmentResolver();
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ant/Jsonschema2PojoTaskIT.java
Patch:
@@ -36,7 +36,7 @@
 public class Jsonschema2PojoTaskIT {
 
     @Test
-    public void antTaskExecutesSuccessfullyWithValidSchema() throws URISyntaxException, ClassNotFoundException {
+    public void antTaskExecutesSuccessfullyWithValidSchemas() throws URISyntaxException, ClassNotFoundException {
 
         File outputDirectory = invokeAntBuild("/ant/build.xml");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/PropertiesIT.java
Patch:
@@ -122,13 +122,14 @@ public void propertyNamesThatAreJavaKeywordsCanBeSerialized() throws ClassNotFou
 
         Class<?> generatedType = resultsClassLoader.loadClass("com.example.PropertiesThatAreJavaKeywords");
 
-        String valuesAsJsonString = "{\"public\":\"a\",\"void\":\"b\",\"enum\":\"c\"}";
+        String valuesAsJsonString = "{\"public\":\"a\",\"void\":\"b\",\"enum\":\"c\",\"abstract\":\"d\"}";
         Object valuesAsObject = mapper.readValue(valuesAsJsonString, generatedType);
         JsonNode valueAsJsonNode = mapper.valueToTree(valuesAsObject);
 
         assertThat(valueAsJsonNode.path("public").asText(), is("a"));
         assertThat(valueAsJsonNode.path("void").asText(), is("b"));
         assertThat(valueAsJsonNode.path("enum").asText(), is("c"));
+        assertThat(valueAsJsonNode.path("abstract").asText(), is("d"));
 
     }
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ant/Jsonschema2PojoTaskIT.java
Patch:
@@ -36,7 +36,7 @@
 public class Jsonschema2PojoTaskIT {
 
     @Test
-    public void antTaskExecutesSuccessfullyWithValidSchema() throws URISyntaxException, ClassNotFoundException {
+    public void antTaskExecutesSuccessfullyWithValidSchemas() throws URISyntaxException, ClassNotFoundException {
 
         File outputDirectory = invokeAntBuild("/ant/build.xml");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/json/JsonTypesIT.java
Patch:
@@ -29,7 +29,7 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-public class ByExampleJsonIT {
+public class JsonTypesIT {
 
     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
 

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -29,6 +29,7 @@
 import com.googlecode.jsonschema2pojo.Annotator;
 import com.googlecode.jsonschema2pojo.AnnotatorFactory;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
+import com.googlecode.jsonschema2pojo.SchemaGenerator;
 import com.googlecode.jsonschema2pojo.SchemaMapper;
 import com.googlecode.jsonschema2pojo.SchemaStore;
 import com.googlecode.jsonschema2pojo.exception.GenerationException;
@@ -78,7 +79,7 @@ public static void main(String[] args) throws FileNotFoundException, IOException
     public static void generate(GenerationConfig config) throws FileNotFoundException, IOException {
 
         Annotator annotator = new AnnotatorFactory().getAnnotator(config.getAnnotationStyle());
-        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, annotator, new SchemaStore()));
+        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, annotator, new SchemaStore()), new SchemaGenerator());
 
         JCodeModel codeModel = new JCodeModel();
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaStore.java
Patch:
@@ -91,7 +91,7 @@ public Schema create(Schema parent, String path) {
 
         path = stripEnd(path, "#?&/");
 
-        URI id = (parent == null) ? URI.create(path) : parent.getId().resolve(path);
+        URI id = (parent == null || parent.getId() == null) ? URI.create(path) : parent.getId().resolve(path);
 
         return create(id);
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/FragmentResolverTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
-public class FragmentResolverImplTest {
+public class FragmentResolverTest {
 
     private FragmentResolver resolver = new FragmentResolver();
 

File: jsonschema2pojo-ant/src/main/java/com/googlecode/jsonschema2pojo/ant/Jsonschema2PojoTask.java
Patch:
@@ -202,8 +202,7 @@ public void setSkip(boolean skip) {
      *            creating Java Bean property names.
      */
     public void setPropertyWordDelimiters(String propertyWordDelimiters) {
-        this.propertyWordDelimiters = defaultString(propertyWordDelimiters)
-                .toCharArray();
+        this.propertyWordDelimiters = defaultString(propertyWordDelimiters).toCharArray();
     }
 
     /**
@@ -278,7 +277,7 @@ public String getTargetPackage() {
 
     @Override
     public char[] getPropertyWordDelimiters() {
-        return propertyWordDelimiters;
+        return propertyWordDelimiters.clone();
     }
 
     /**

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Jackson1Annotator.java
Patch:
@@ -50,8 +50,8 @@ public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {
     }
 
     @Override
-    public void propertyInclusion(JDefinedClass _class) {
-        _class.annotate(JsonSerialize.class).param("include", JsonSerialize.Inclusion.NON_NULL);
+    public void propertyInclusion(JDefinedClass clazz) {
+        clazz.annotate(JsonSerialize.class).param("include", JsonSerialize.Inclusion.NON_NULL);
     }
 
     @Override

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Jackson2Annotator.java
Patch:
@@ -50,8 +50,8 @@ public void propertyOrder(JDefinedClass clazz, JsonNode propertiesNode) {
     }
 
     @Override
-    public void propertyInclusion(JDefinedClass _class) {
-        _class.annotate(JsonSerialize.class).param("include", JsonSerialize.Inclusion.NON_NULL);
+    public void propertyInclusion(JDefinedClass clazz) {
+        clazz.annotate(JsonSerialize.class).param("include", JsonSerialize.Inclusion.NON_NULL);
     }
 
     @Override

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -30,6 +30,7 @@
 import com.googlecode.jsonschema2pojo.AnnotatorFactory;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.SchemaMapper;
+import com.googlecode.jsonschema2pojo.SchemaStore;
 import com.googlecode.jsonschema2pojo.exception.GenerationException;
 import com.googlecode.jsonschema2pojo.rules.RuleFactory;
 import com.sun.codemodel.JCodeModel;
@@ -77,7 +78,7 @@ public static void main(String[] args) throws FileNotFoundException, IOException
     public static void generate(GenerationConfig config) throws FileNotFoundException, IOException {
 
         Annotator annotator = new AnnotatorFactory().getAnnotator(config.getAnnotationStyle());
-        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, annotator));
+        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, annotator, new SchemaStore()));
 
         JCodeModel codeModel = new JCodeModel();
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/JsonSchemaRule.java
Patch:
@@ -56,13 +56,13 @@ protected JsonSchemaRule(RuleFactory ruleFactory) {
     public JType apply(String nodeName, JsonNode schemaNode, JClassContainer generatableType, Schema schema) {
 
         if (schemaNode.has("$ref")) {
-            schema = Schema.create(schema, schemaNode.get("$ref").asText());
+            schema = ruleFactory.getSchemaStore().create(schema, schemaNode.get("$ref").asText());
             schemaNode = schema.getContent();
 
             if (schema.isGenerated()) {
                 return schema.getJavaType();
             }
-            
+
             return apply(nodeName, schemaNode, generatableType, schema);
         }
 
@@ -73,7 +73,7 @@ public JType apply(String nodeName, JsonNode schemaNode, JClassContainer generat
             javaType = ruleFactory.getTypeRule().apply(nodeName, schemaNode, generatableType.getPackage(), schema);
         }
         schema.setJavaTypeIfEmpty(javaType);
-        
+
         return javaType;
     }
 }

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/FragmentResolverImplTest.java
Patch:
@@ -27,7 +27,7 @@
 
 public class FragmentResolverImplTest {
 
-    private FragmentResolverImpl resolver = new FragmentResolverImpl();
+    private FragmentResolver resolver = new FragmentResolver();
 
     @Test
     public void hashResolvesToRoot() {

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -34,14 +34,15 @@
 import com.fasterxml.jackson.databind.node.TextNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.NoopAnnotator;
+import com.googlecode.jsonschema2pojo.SchemaStore;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JType;
 
 @RunWith(Parameterized.class)
 public class FormatRuleTest {
 
     private GenerationConfig config = mock(GenerationConfig.class);
-    private FormatRule rule = new FormatRule(new RuleFactory(config, new NoopAnnotator()));
+    private FormatRule rule = new FormatRule(new RuleFactory(config, new NoopAnnotator(), new SchemaStore()));
 
     private final String formatValue;
     private final Class<?> expectedType;

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -41,6 +41,7 @@
  * @goal generate
  * @phase generate-sources
  * @requiresDependencyResolution compile
+ * @threadSafe
  * @see <a
  *      href="http://maven.apache.org/developers/mojo-api-specification.html">Mojo
  *      API Specification</a>

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -65,7 +65,7 @@ public class Arguments implements GenerationConfig {
     @Parameter(names = { "-S", "--omit-tostring" }, description = "Omit the toString method in the generated Java types")
     private boolean omitToString = false;
 
-    @Parameter(names = { "-a", "--annotation-style" }, description = "The style of annotations to use in the generated Java types.")
+    @Parameter(names = { "-a", "--annotation-style" })
     private AnnotationStyle annotationStyle = AnnotationStyle.JACKSON;
 
     @Parameter(names = { "-303", "--jsr303-annotations" }, description = "Add JSR-303 annotations to generated Java types.")

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -77,7 +77,7 @@ public void applyGeneratesDate() {
 
         JType mockDateType = mock(JType.class);
         FormatRule mockFormatRule = mock(FormatRule.class);
-        when(mockFormatRule.apply(eq("fooBar"), eq(formatNode), isA(JType.class), isNull(Schema.class))).thenReturn(mockDateType);
+        when(mockFormatRule.apply(eq("fooBar"), eq(formatNode), org.mockito.Mockito.isA(JType.class), isNull(Schema.class))).thenReturn(mockDateType);
         when(ruleFactory.getFormatRule()).thenReturn(mockFormatRule);
 
         JType result = rule.apply("fooBar", objectNode, jpackage, null);

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Schema.java
Patch:
@@ -71,8 +71,7 @@ public static synchronized Schema create(URI id) {
 
                 schemas.put(id, new Schema(id, content));
             } catch (IOException e) {
-                String msg = "Error with schema: " + id;
-                throw new GenerationException(msg, e);
+                throw new GenerationException("Error with schema: " + id, e);
             }
         }
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RequiredRuleTest.java
Patch:
@@ -32,7 +32,7 @@ public class RequiredRuleTest {
 
     private static final String TARGET_CLASS_NAME = ArrayRuleTest.class.getName() + ".DummyClass";
 
-    private RequiredRule rule = new RequiredRule();
+    private RequiredRule rule = new RequiredRule(new RuleFactory());
 
     @Test
     public void applyAddsTextWhenRequired() throws JClassAlreadyExistsException {

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/config/IncludeHashCodeAndEqualsIT.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.googlecode.jsonschema2pojo.Schema;
 
+@SuppressWarnings({ "unchecked", "rawtypes" })
 public class IncludeHashCodeAndEqualsIT {
 
     @Before
@@ -32,7 +33,6 @@ public void clearSchemaCache() {
     }
 
     @Test
-    @SuppressWarnings({ "unchecked", "rawtypes" })
     public void beansIncludeHashCodeAndEqualsByDefault() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
 
         ClassLoader resultsClassLoader = generateAndCompile("/schema/properties/primitiveProperties.json", "com.example");
@@ -46,7 +46,6 @@ public void beansIncludeHashCodeAndEqualsByDefault() throws ClassNotFoundExcepti
     }
 
     @Test
-    @SuppressWarnings({ "unchecked", "rawtypes" })
     public void beansOmitHashCodeAndEqualsWhenConfigIsSet() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
         ClassLoader resultsClassLoader = generateAndCompile("/schema/properties/primitiveProperties.json", "com.example", config("includeHashcodeAndEquals", false));
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RequiredRuleTest.java
Patch:
@@ -32,7 +32,7 @@ public class RequiredRuleTest {
 
     private static final String TARGET_CLASS_NAME = ArrayRuleTest.class.getName() + ".DummyClass";
 
-    private RequiredRule rule = new RequiredRule();
+    private RequiredRule rule = new RequiredRule(new RuleFactory());
 
     @Test
     public void applyAddsTextWhenRequired() throws JClassAlreadyExistsException {

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/config/IncludeJsr303AnnotationsIT.java
Patch:
@@ -35,7 +35,7 @@
 
 import com.googlecode.jsonschema2pojo.Schema;
 
-@SuppressWarnings({ "unchecked", "rawtypes" })
+@SuppressWarnings("rawtypes")
 public class IncludeJsr303AnnotationsIT {
 
     private static Validator validator = Validation.buildDefaultValidatorFactory().getValidator();;
@@ -79,11 +79,11 @@ public void jsr303DecimalMaxValidationIsAddedForSchemaRuleMaximum() throws Class
 
         Class generatedType = resultsClassLoader.loadClass("com.example.Maximum");
 
-        Object validInstance = createInstanceWithPropertyValue(generatedType, "maximum", 10.0d);
+        Object validInstance = createInstanceWithPropertyValue(generatedType, "maximum", 8.9d);
 
         assertNumberOfConstraintViolationsOn(validInstance, is(0));
 
-        Object invalidInstance = createInstanceWithPropertyValue(generatedType, "maximum", 8.9d);
+        Object invalidInstance = createInstanceWithPropertyValue(generatedType, "maximum", 10.9d);
 
         assertNumberOfConstraintViolationsOn(invalidInstance, is(1));
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Schema.java
Patch:
@@ -71,8 +71,7 @@ public static synchronized Schema create(URI id) {
 
                 schemas.put(id, new Schema(id, content));
             } catch (IOException e) {
-                String msg = "Error with schema: " + id;
-                throw new GenerationException(msg, e);
+                throw new GenerationException("Error with schema: " + id, e);
             }
         }
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/config/IncludeHashCodeAndEqualsIT.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.googlecode.jsonschema2pojo.Schema;
 
+@SuppressWarnings({ "unchecked", "rawtypes" })
 public class IncludeHashCodeAndEqualsIT {
 
     @Before
@@ -32,7 +33,6 @@ public void clearSchemaCache() {
     }
 
     @Test
-    @SuppressWarnings({ "unchecked", "rawtypes" })
     public void beansIncludeHashCodeAndEqualsByDefault() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
 
         ClassLoader resultsClassLoader = generateAndCompile("/schema/properties/primitiveProperties.json", "com.example");
@@ -46,7 +46,6 @@ public void beansIncludeHashCodeAndEqualsByDefault() throws ClassNotFoundExcepti
     }
 
     @Test
-    @SuppressWarnings({ "unchecked", "rawtypes" })
     public void beansOmitHashCodeAndEqualsWhenConfigIsSet() throws ClassNotFoundException, SecurityException, NoSuchMethodException {
         ClassLoader resultsClassLoader = generateAndCompile("/schema/properties/primitiveProperties.json", "com.example", config("includeHashcodeAndEquals", false));
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactory.java
Patch:
@@ -19,7 +19,7 @@
 import com.googlecode.jsonschema2pojo.Annotator;
 import com.googlecode.jsonschema2pojo.DefaultGenerationConfig;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
-import com.googlecode.jsonschema2pojo.JacksonAnnotator;
+import com.googlecode.jsonschema2pojo.Jackson2Annotator;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JDefinedClass;
@@ -56,7 +56,7 @@ public RuleFactory(GenerationConfig generationConfig, Annotator annotator) {
      * @see DefaultGenerationConfig
      */
     public RuleFactory() {
-        this(new DefaultGenerationConfig(), new JacksonAnnotator());
+        this(new DefaultGenerationConfig(), new Jackson2Annotator());
     }
 
     /**

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactory.java
Patch:
@@ -19,7 +19,7 @@
 import com.googlecode.jsonschema2pojo.Annotator;
 import com.googlecode.jsonschema2pojo.DefaultGenerationConfig;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
-import com.googlecode.jsonschema2pojo.JacksonAnnotator;
+import com.googlecode.jsonschema2pojo.Jackson2Annotator;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JDefinedClass;
@@ -56,7 +56,7 @@ public RuleFactory(GenerationConfig generationConfig, Annotator annotator) {
      * @see DefaultGenerationConfig
      */
     public RuleFactory() {
-        this(new DefaultGenerationConfig(), new JacksonAnnotator());
+        this(new DefaultGenerationConfig(), new Jackson2Annotator());
     }
 
     /**

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -64,7 +64,7 @@ public SchemaMapper() {
      *            the name of the parent class the represented by this schema
      * @param packageName
      *            the target package that should be used for generated types
-     * @param schema
+     * @param schemaUrl
      *            location of the schema to be used as input
      * @throws IOException
      *             if the schema content cannot be read

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/AdditionalPropertiesRule.java
Patch:
@@ -54,9 +54,9 @@ protected AdditionalPropertiesRule(RuleFactory ruleFactory) {
      * <p>
      * If the additionalProperties node is <code>null</code> (not specified in
      * the schema) or empty, then a new bean property named
-     * "additionalProperties", of type {@link Map<String,Object>} is added to
-     * the generated type (with appropriate accessors). The accessors are
-     * annotated to allow unrecognised (additional) properties found in JSON
+     * "additionalProperties", of type {@link Map}{@literal <String,Object>} is
+     * added to the generated type (with appropriate accessors). The accessors
+     * are annotated to allow unrecognised (additional) properties found in JSON
      * data to be marshalled/unmarshalled from/to this map.
      * <p>
      * If the additionalProperties node is present and specifies a schema, then

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/PrimitiveTypes.java
Patch:
@@ -53,7 +53,7 @@ public static boolean isPrimitive(String name, JCodeModel owner) {
      *            the name of a primitive Java type
      * @param owner
      *            the current code model for type generation
-     * @return
+     * @return a type reference created by the given owner
      */
     public static JPrimitiveType primitiveType(String name, JCodeModel owner) {
         try {

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaMapperImplTest.java
Patch:
@@ -30,7 +30,6 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.rules.JsonSchemaRule;
 import com.googlecode.jsonschema2pojo.rules.RuleFactory;
-import com.googlecode.jsonschema2pojo.rules.RuleFactory;
 import com.googlecode.jsonschema2pojo.rules.SchemaRule;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JCodeModel;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -30,6 +30,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
+import com.googlecode.jsonschema2pojo.NoopAnnotator;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JCodeModel;
@@ -38,7 +39,7 @@
 public class ArrayRuleTest {
 
     private final GenerationConfig config = mock(GenerationConfig.class);
-    private final ArrayRule rule = new ArrayRule(new RuleFactory(config));
+    private final ArrayRule rule = new ArrayRule(new RuleFactory(config, new NoopAnnotator()));
 
     @Before
     public void clearSchemaCache() {

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImplTest.java
Patch:
@@ -16,13 +16,14 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import static org.mockito.Mockito.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
 
 import org.junit.Test;
 
 import com.googlecode.jsonschema2pojo.GenerationConfig;
+import com.googlecode.jsonschema2pojo.NoopAnnotator;
 
 public class RuleFactoryImplTest {
 
@@ -64,7 +65,7 @@ public void generationConfigIsReturned() {
 
         GenerationConfig mockGenerationConfig = mock(GenerationConfig.class);
 
-        RuleFactory ruleFactory = new RuleFactory(mockGenerationConfig);
+        RuleFactory ruleFactory = new RuleFactory(mockGenerationConfig, new NoopAnnotator());
 
         assertThat(ruleFactory.getGenerationConfig(), is(sameInstance(mockGenerationConfig)));
 

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -28,9 +28,9 @@
 
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.SchemaMapper;
-import com.googlecode.jsonschema2pojo.SchemaMapperImpl;
+import com.googlecode.jsonschema2pojo.SchemaMapper;
 import com.googlecode.jsonschema2pojo.exception.GenerationException;
-import com.googlecode.jsonschema2pojo.rules.RuleFactoryImpl;
+import com.googlecode.jsonschema2pojo.rules.RuleFactory;
 import com.sun.codemodel.JCodeModel;
 
 /**
@@ -75,7 +75,7 @@ public static void main(String[] args) throws FileNotFoundException, IOException
      */
     public static void generate(GenerationConfig config) throws FileNotFoundException, IOException {
 
-        SchemaMapper mapper = new SchemaMapperImpl(new RuleFactoryImpl(config));
+        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config));
 
         JCodeModel codeModel = new JCodeModel();
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaMapperImplTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.rules.JsonSchemaRule;
 import com.googlecode.jsonschema2pojo.rules.RuleFactory;
-import com.googlecode.jsonschema2pojo.rules.RuleFactoryImpl;
+import com.googlecode.jsonschema2pojo.rules.RuleFactory;
 import com.googlecode.jsonschema2pojo.rules.SchemaRule;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JCodeModel;
@@ -44,7 +44,7 @@ public void generateReadsSchemaAsObject() throws IOException {
 
         final JsonSchemaRule mockSchemaRule = mock(JsonSchemaRule.class);
 
-        final RuleFactory ruleFactory = new RuleFactoryImpl() {
+        final RuleFactory ruleFactory = new RuleFactory() {
             @Override
             public SchemaRule<JClassContainer, JType> getSchemaRule() {
                 return mockSchemaRule;
@@ -53,7 +53,7 @@ public SchemaRule<JClassContainer, JType> getSchemaRule() {
 
         URL schemaContent = this.getClass().getResource("/schema/address.json");
 
-        new SchemaMapperImpl(ruleFactory).generate(new JCodeModel(), "Address", "com.example.package", schemaContent);
+        new SchemaMapper(ruleFactory).generate(new JCodeModel(), "Address", "com.example.package", schemaContent);
 
         ArgumentCaptor<JPackage> capturePackage = ArgumentCaptor.forClass(JPackage.class);
         ArgumentCaptor<JsonNode> captureNode = ArgumentCaptor.forClass(JsonNode.class);

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/example/Example.java
Patch:
@@ -20,7 +20,7 @@
 import java.io.IOException;
 import java.net.URL;
 
-import com.googlecode.jsonschema2pojo.SchemaMapperImpl;
+import com.googlecode.jsonschema2pojo.SchemaMapper;
 import com.sun.codemodel.JCodeModel;
 
 public class Example {
@@ -33,7 +33,7 @@ public static void main(String[] args) throws IOException {
         
         URL source = new URL("file:///path/to/my/schema.json");
         
-        new SchemaMapperImpl().generate(codeModel, "ClassName", "com.example", source);
+        new SchemaMapper().generate(codeModel, "ClassName", "com.example", source);
         
         codeModel.build(new File("output"));
         

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/AdditionalPropertiesRuleTest.java
Patch:
@@ -38,7 +38,7 @@ public class AdditionalPropertiesRuleTest {
 
     private static final String TARGET_CLASS_NAME = AdditionalPropertiesRuleTest.class.getName() + ".DummyClass";
 
-    private AdditionalPropertiesRule rule = new AdditionalPropertiesRule(new RuleFactoryImpl());
+    private AdditionalPropertiesRule rule = new AdditionalPropertiesRule(new RuleFactory());
 
     private static final String EXPECTED_RESULT_NO_ADDITIONAL_PROPS = "public class DummyClass {\n\n\n}\n";
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -38,7 +38,7 @@
 public class ArrayRuleTest {
 
     private final GenerationConfig config = mock(GenerationConfig.class);
-    private final ArrayRule rule = new ArrayRule(new RuleFactoryImpl(config));
+    private final ArrayRule rule = new ArrayRule(new RuleFactory(config));
 
     @Before
     public void clearSchemaCache() {

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -40,7 +40,7 @@
 public class FormatRuleTest {
 
     private GenerationConfig config = mock(GenerationConfig.class);
-    private FormatRule rule = new FormatRule(new RuleFactoryImpl(config));
+    private FormatRule rule = new FormatRule(new RuleFactory(config));
 
     private final String formatValue;
     private final Class<?> expectedType;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImplTest.java
Patch:
@@ -29,7 +29,7 @@ public class RuleFactoryImplTest {
     @Test
     public void factoryMethodsCreateRules() {
 
-        RuleFactory ruleFactory = new RuleFactoryImpl();
+        RuleFactory ruleFactory = new RuleFactory();
 
         assertThat(ruleFactory.getAdditionalPropertiesRule(), notNullValue());
 
@@ -64,7 +64,7 @@ public void generationConfigIsReturned() {
 
         GenerationConfig mockGenerationConfig = mock(GenerationConfig.class);
 
-        RuleFactoryImpl ruleFactory = new RuleFactoryImpl(mockGenerationConfig);
+        RuleFactory ruleFactory = new RuleFactory(mockGenerationConfig);
 
         assertThat(ruleFactory.getGenerationConfig(), is(sameInstance(mockGenerationConfig)));
 

File: jsonschema2pojo-ant/src/main/java/com/googlecode/jsonschema2pojo/ant/Jsonschema2PojoTask.java
Patch:
@@ -135,8 +135,8 @@ public void setUsePrimitives(boolean usePrimitives) {
      * Sets the 'useLongIntegers' property of this class
      * 
      * @param useLongIntegers
-     *            Whether to use the java type {@link long} (or
-     *            {@link java.lang.Long}) instead of {@link int} (or
+     *            Whether to use the java type <code>long</code> (or
+     *            {@link java.lang.Long}) instead of <code>int</code> (or
      *            {@link java.lang.Integer}) when representing the JSON Schema
      *            type 'integer'.
      */

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -36,8 +36,8 @@ public interface SchemaMapper {
      *            the name of the parent class the represented by this schema
      * @param packageName
      *            the target package that should be used for generated types
-     * @param schemaContent
-     *            the schema document content
+     * @param schema
+     *            location of the schema to be used as input
      * @throws IOException
      *             if the schema content cannot be read
      */

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -68,7 +68,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements
      * refer to a single file or a directory of files.
      * 
      * @parameter expression="${jsonschema2pojo.sourcePaths}"
-     * @since 0.3.1-SNAPSHOT
+     * @since 0.3.1
      */
     private File[] sourcePaths;
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -151,7 +151,7 @@ private JExpression getDefaultList(JType fieldType, JsonNode node) {
 
         JInvocation newListImpl = JExpr._new(listImplClass);
 
-        if (node instanceof ArrayNode) {
+        if (node instanceof ArrayNode && node.size() > 0) {
             JInvocation invokeAsList = fieldType.owner().ref(Arrays.class).staticInvoke("asList");
             for (JsonNode defaultValue : node) {
                 invokeAsList.arg(getDefaultValue(listGenericType, defaultValue));

File: jsonschema2pojo-ant/src/main/java/com/googlecode/jsonschema2pojo/ant/Jsonschema2PojoTask.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright � 2010-2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -109,7 +109,9 @@ public JType apply(String nodeName, JsonNode node, JPackage _package, Schema sch
             ruleFactory.getPropertiesRule().apply(nodeName, node.get("properties"), jclass, schema);
         }
 
-        addToString(jclass);
+        if (ruleFactory.getGenerationConfig().isIncludeToString()) {
+            addToString(jclass);
+        }
 
         if (ruleFactory.getGenerationConfig().isIncludeHashcodeAndEquals()) {
             addHashCode(jclass);

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/AdditionalPropertiesRuleTest.java
Patch:
@@ -38,7 +38,7 @@ public class AdditionalPropertiesRuleTest {
 
     private static final String TARGET_CLASS_NAME = AdditionalPropertiesRuleTest.class.getName() + ".DummyClass";
 
-    private AdditionalPropertiesRule rule = new AdditionalPropertiesRule(new RuleFactoryImpl(null));
+    private AdditionalPropertiesRule rule = new AdditionalPropertiesRule(new RuleFactoryImpl());
 
     private static final String EXPECTED_RESULT_NO_ADDITIONAL_PROPS = "public class DummyClass {\n\n\n}\n";
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import static org.mockito.Mockito.*;
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
+import static org.mockito.Mockito.*;
 
 import java.net.URI;
 import java.util.List;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImplTest.java
Patch:
@@ -29,7 +29,7 @@ public class RuleFactoryImplTest {
     @Test
     public void factoryMethodsCreateRules() {
 
-        RuleFactory ruleFactory = new RuleFactoryImpl(null);
+        RuleFactory ruleFactory = new RuleFactoryImpl();
 
         assertThat(ruleFactory.getAdditionalPropertiesRule(), notNullValue());
 

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.jsonschema2pojo.cli;
 
 import java.io.File;
+import java.util.Iterator;
 
 import com.beust.jcommander.JCommander;
 import com.beust.jcommander.Parameter;
@@ -89,8 +90,8 @@ public Arguments parse(String[] args) {
     }
 
     @Override
-    public File getSource() {
-        return source;
+    public Iterator<File> getSource() {
+        return new SingleFileIterator(source);
     }
 
     @Override

File: jsonschema2pojo-cli/src/test/java/com/googlecode/jsonschema2pojo/cli/ArgumentsTest.java
Patch:
@@ -56,7 +56,7 @@ public void parseRecognisesValidArguments() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().getAbsolutePath(), is("/home/source"));
+        assertThat(args.getSource().next().getAbsolutePath(), is("/home/source"));
         assertThat(args.getTargetDirectory().getAbsolutePath(), is("/home/target"));
         assertThat(args.getTargetPackage(), is("mypackage"));
         assertThat(args.isGenerateBuilders(), is(true));
@@ -70,7 +70,7 @@ public void parseRecognisesShorthandArguments() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().getAbsolutePath(), is("/home/source"));
+        assertThat(args.getSource().next().getAbsolutePath(), is("/home/source"));
         assertThat(args.getTargetDirectory().getAbsolutePath(), is("/home/target"));
         assertThat(args.getTargetPackage(), is("mypackage"));
         assertThat(args.isGenerateBuilders(), is(true));
@@ -94,7 +94,7 @@ public void packageIsOptional() {
         });
 
         assertThat(args.didExit(), is(false));
-        assertThat(args.getSource().getAbsolutePath(), is("/home/source"));
+        assertThat(args.getSource().next().getAbsolutePath(), is("/home/source"));
         assertThat(args.getTargetDirectory().getAbsolutePath(), is("/home/target"));
         assertThat(args.getTargetPackage(), is(nullValue()));
         assertThat(args.isGenerateBuilders(), is(false));

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/DefaultGenerationConfig.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.jsonschema2pojo;
 
 import java.io.File;
+import java.util.Iterator;
 
 /**
  * A generation config that returns default values for all behavioural options.
@@ -43,7 +44,7 @@ public boolean isUsePrimitives() {
      * Unsupported since no default source is possible.
      */
     @Override
-    public File getSource() {
+    public Iterator<File> getSource() {
         throw new UnsupportedOperationException("No default source available");
     }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/GenerationConfig.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.jsonschema2pojo;
 
 import java.io.File;
+import java.util.Iterator;
 
 /**
  * Defines the configuration options for Java type generation, including source
@@ -49,9 +50,9 @@ public interface GenerationConfig {
 	/**
 	 * Gets the 'source' configuration option.
 	 * 
-	 * @return The source file or directory from which JSON Schema will be read
+	 * @return The source file(s) or directory(ies) from which JSON Schema will be read.
 	 */
-	File getSource();
+	Iterator<File> getSource();
 
 	/**
 	 * Gets the 'targetDirectory' configuration option.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Schema.java
Patch:
@@ -70,7 +70,8 @@ public static synchronized Schema create(URI id) {
 
                 schemas.put(id, new Schema(id, content));
             } catch (IOException e) {
-                throw new GenerationException(e);
+                String msg = "Error with schema: " + id;
+                throw new GenerationException(msg, e);
             }
         }
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/FragmentRefIT.java
Patch:
@@ -34,7 +34,7 @@ public static void generateAndCompileEnum() throws ClassNotFoundException {
 
         Schema.clearCache();
 
-        ClassLoader fragmentRefsClassLoader = generateAndCompile("/schema/ref/fragmentRefs.json", "com.example", true, false, false);
+        ClassLoader fragmentRefsClassLoader = generateAndCompile("/schema/ref/fragmentRefs.json", "com.example");
 
         fragmentRefsClass = fragmentRefsClassLoader.loadClass("com.example.FragmentRefs");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/RelativeRefIT.java
Patch:
@@ -37,7 +37,7 @@ public static void generateAndCompileEnum() throws ClassNotFoundException {
 
         Schema.clearCache();
 
-        ClassLoader relativeRefsClassLoader = generateAndCompile("/schema/ref/refsToA.json", "com.example", true, false, false);
+        ClassLoader relativeRefsClassLoader = generateAndCompile("/schema/ref/refsToA.json", "com.example");
 
         relativeRefsClass = relativeRefsClassLoader.loadClass("com.example.RefsToA");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/SelfRefIT.java
Patch:
@@ -33,7 +33,7 @@ public class SelfRefIT {
     @BeforeClass
     public static void generateAndCompileEnum() throws ClassNotFoundException {
 
-        ClassLoader selfRefsClassLoader = generateAndCompile("/schema/ref/selfRefs.json", "com.example", true, false, false);
+        ClassLoader selfRefsClassLoader = generateAndCompile("/schema/ref/selfRefs.json", "com.example");
 
         selfRefsClass = selfRefsClassLoader.loadClass("com.example.SelfRefs");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ArrayIT.java
Patch:
@@ -36,7 +36,7 @@ public class ArrayIT {
     @BeforeClass
     public static void generateAndCompileClass() throws ClassNotFoundException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/array/typeWithArrayProperties.json", "com.example", true, false, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/array/typeWithArrayProperties.json", "com.example");
 
         classWithArrayProperties = resultsClassLoader.loadClass("com.example.TypeWithArrayProperties");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DefaultIT.java
Patch:
@@ -37,7 +37,7 @@ public class DefaultIT {
     @BeforeClass
     public static void generateAndCompileClass() throws ClassNotFoundException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/default/default.json", "com.example", true, false, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/default/default.json", "com.example");
 
         classWithDefaults = resultsClassLoader.loadClass("com.example.Default");
 
@@ -121,7 +121,7 @@ public void utcmillisecPropertyHasCorrectDefaultValue() throws NoSuchMethodExcep
     }
 
     @Test
-    @SuppressWarnings({"unchecked", "rawtypes"})
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public void enumPropertyHasCorrectDefaultValue() throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
 
         Object instance = classWithDefaults.newInstance();

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DescriptionIT.java
Patch:
@@ -39,7 +39,7 @@ public class DescriptionIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/description/description.json", "com.example", true, false, false);
+        File outputDirectory = generate("/schema/description/description.json", "com.example");
         File generatedJavaFile = new File(outputDirectory, "com/example/Description.java");
 
         compile(outputDirectory);
@@ -82,7 +82,7 @@ public void descriptionAppearsInGetterJavadoc() throws IOException {
     @Test
     public void descriptionAppearsInSetterJavadoc() throws IOException {
 
-        JavaMethod javaMethod = classWithDescription.getMethodBySignature("setDescription", new Type[] {new Type("java.lang.String")});
+        JavaMethod javaMethod = classWithDescription.getMethodBySignature("setDescription", new Type[] { new Type("java.lang.String") });
         String javaDocComment = javaMethod.getComment();
 
         assertThat(javaDocComment, containsString("A description for this property"));

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/FormatIT.java
Patch:
@@ -83,7 +83,7 @@ public FormatIT(String propertyName, Class<?> expectedType, Object jsonValue, Ob
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/format/formattedProperties.json", "com.example", false, false, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/format/formattedProperties.json", "com.example");
 
         classWithFormattedProperties = resultsClassLoader.loadClass("com.example.FormattedProperties");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/RequiredIT.java
Patch:
@@ -39,7 +39,7 @@ public class RequiredIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/required/required.json", "com.example", true, false, false);
+        File outputDirectory = generate("/schema/required/required.json", "com.example");
         File generatedJavaFile = new File(outputDirectory, "com/example/Required.java");
 
         compile(outputDirectory);
@@ -73,7 +73,7 @@ public void requiredAppearsInGetterJavadoc() throws IOException {
     @Test
     public void requiredAppearsInSetterJavadoc() throws IOException {
 
-        JavaMethod javaMethod = classWithRequired.getMethodBySignature("setRequiredProperty", new Type[] {new Type("java.lang.String")});
+        JavaMethod javaMethod = classWithRequired.getMethodBySignature("setRequiredProperty", new Type[] { new Type("java.lang.String") });
         String javaDocComment = javaMethod.getComment();
 
         assertThat(javaDocComment, containsString("(Required)"));

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/TitleIT.java
Patch:
@@ -39,7 +39,7 @@ public class TitleIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/title/title.json", "com.example", true, false, false);
+        File outputDirectory = generate("/schema/title/title.json", "com.example");
         File generatedJavaFile = new File(outputDirectory, "com/example/Title.java");
 
         compile(outputDirectory);
@@ -82,7 +82,7 @@ public void descriptionAppearsInGetterJavadoc() throws IOException {
     @Test
     public void descriptionAppearsInSetterJavadoc() throws IOException {
 
-        JavaMethod javaMethod = classWithTitle.getMethodBySignature("setTitle", new Type[] {new Type("java.lang.String")});
+        JavaMethod javaMethod = classWithTitle.getMethodBySignature("setTitle", new Type[] { new Type("java.lang.String") });
         String javaDocComment = javaMethod.getComment();
 
         assertThat(javaDocComment, containsString("A title for this property"));

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/AbsoluteRefIT.java
Patch:
@@ -35,7 +35,7 @@ public void absoluteRefIsReadSuccessfully() throws ClassNotFoundException, NoSuc
 
         File schemaWithAbsoluteRef = createSchemaWithAbsoluteRef();
 
-        File generatedOutputDirectory = generate(schemaWithAbsoluteRef.toURI().toURL(), "com.example", false, false, false);
+        File generatedOutputDirectory = generate(schemaWithAbsoluteRef.toURI().toURL(), "com.example");
         Class<?> absoluteRefClass = compile(generatedOutputDirectory).loadClass("com.example.AbsoluteRef");
 
         Class<?> addressClass = absoluteRefClass.getMethod("getAddress").getReturnType();

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/CyclicalRefIT.java
Patch:
@@ -25,10 +25,10 @@
 public class CyclicalRefIT {
 
     @Test
-    @SuppressWarnings({"rawtypes", "unchecked"})
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     public void cyclicalRefsAreReadSuccessfully() throws ClassNotFoundException, NoSuchMethodException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/ref/subdirectory1/refToSubdirectory2.json", "com.example", false, false, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/ref/subdirectory1/refToSubdirectory2.json", "com.example");
 
         Class class1 = resultsClassLoader.loadClass("com.example.RefToSubdirectory2");
         Class class2 = resultsClassLoader.loadClass("com.example.RefToSubdirectory1");

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/AdditionalPropertiesRuleTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import static org.easymock.EasyMock.*;
+import static org.mockito.Mockito.*;
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
@@ -120,7 +120,7 @@ public void applyWithAdditionalPropertiesStringSchema() throws JClassAlreadyExis
         ObjectNode node = new ObjectMapper().createObjectNode();
         node.put("type", "string");
 
-        JDefinedClass result = rule.apply("node", node, jclass, createMock(Schema.class));
+        JDefinedClass result = rule.apply("node", node, jclass, mock(Schema.class));
 
         StringWriter output = new StringWriter();
         result.declare(new JFormatter(output));
@@ -135,7 +135,7 @@ public void applyWithAdditionalPropertiesObjectSchema() throws JClassAlreadyExis
         ObjectNode node = new ObjectMapper().createObjectNode();
         node.put("type", "object");
 
-        JDefinedClass result = rule.apply("node", node, jclass, createMock(Schema.class));
+        JDefinedClass result = rule.apply("node", node, jclass, mock(Schema.class));
 
         StringWriter output = new StringWriter();
         result.declare(new JFormatter(output));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.googlecode.jsonschema2pojo.rules;
 
 import static java.util.Arrays.*;
-import static org.easymock.EasyMock.*;
+import static org.mockito.Mockito.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
@@ -39,7 +39,7 @@
 @RunWith(Parameterized.class)
 public class FormatRuleTest {
 
-    private GenerationConfig config = createMock(GenerationConfig.class);
+    private GenerationConfig config = mock(GenerationConfig.class);
     private FormatRule rule = new FormatRule(new RuleFactoryImpl(config));
 
     private final String formatValue;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImplTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import static org.easymock.EasyMock.*;
+import static org.mockito.Mockito.*;
 import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
@@ -62,7 +62,7 @@ public void factoryMethodsCreateRules() {
     @Test
     public void generationConfigIsReturned() {
 
-        GenerationConfig mockGenerationConfig = createMock(GenerationConfig.class);
+        GenerationConfig mockGenerationConfig = mock(GenerationConfig.class);
 
         RuleFactoryImpl ruleFactory = new RuleFactoryImpl(mockGenerationConfig);
 

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -48,7 +48,7 @@ public class Arguments implements GenerationConfig {
     private boolean usePrimitives = false;
 
     @Parameter(names = {"-d", "--word-delimiters"}, description = "The characters that should be considered as word delimiters when creating Java Bean property names from JSON property names")
-    private char[] propertyWordDelimiters;
+    private String propertyWordDelimiters;
     
     @Parameter(names = {"-l", "--long-integers"}, description = "Use long (or Long) instead of int (or Integer) when the JSON Schema type 'integer' is encountered")
     private boolean useLongIntegers = false;
@@ -115,7 +115,7 @@ public boolean isUsePrimitives() {
 
     @Override
     public char[] getPropertyWordDelimiters() {
-        return propertyWordDelimiters;
+        return propertyWordDelimiters.toCharArray();
     }
     
     @Override

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -126,7 +126,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements
 	 *            default-value=""
 	 * @since 0.2.2
 	 */
-	private String propertyWordDelimiters;
+	private String propertyWordDelimiters = "";
 
 	/**
 	 * Whether to use the java type <code>long</code> (or

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/FragmentResolver.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.googlecode.jsonschema2pojo;
 
-import org.codehaus.jackson.JsonNode;
+import com.fasterxml.jackson.databind.JsonNode;
 
 /**
  * Resolves fragments of a schema.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/FragmentResolverImpl.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.codehaus.jackson.JsonNode;
+import com.fasterxml.jackson.databind.JsonNode;
 
 public class FragmentResolverImpl implements FragmentResolver {
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Schema.java
Patch:
@@ -23,9 +23,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
-
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.googlecode.jsonschema2pojo.exception.GenerationException;
 import com.sun.codemodel.JType;
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapperImpl.java
Patch:
@@ -19,9 +19,8 @@
 import java.io.IOException;
 import java.net.URL;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
-
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.googlecode.jsonschema2pojo.rules.RuleFactory;
 import com.googlecode.jsonschema2pojo.rules.RuleFactoryImpl;
 import com.sun.codemodel.JCodeModel;

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ArrayRule.java
Patch:
@@ -21,8 +21,7 @@
 import java.util.List;
 import java.util.Set;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JPackage;
@@ -76,7 +75,7 @@ protected ArrayRule(RuleFactory ruleFactory) {
     @Override
     public JClass apply(String nodeName, JsonNode node, JPackage jpackage, Schema schema) {
 
-        boolean uniqueItems = node.has("uniqueItems") && node.get("uniqueItems").getBooleanValue();
+        boolean uniqueItems = node.has("uniqueItems") && node.get("uniqueItems").asBoolean();
         
         JType itemType;
         if (node.has("items")) {

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/DescriptionRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
@@ -52,7 +51,7 @@ protected DescriptionRule() {
     public JDocComment apply(String nodeName, JsonNode node, JDocCommentable generatableType, Schema schema) {
         JDocComment javadoc = generatableType.javadoc();
 
-        javadoc.append(node.getTextValue());
+        javadoc.append(node.asText());
 
         return javadoc;
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/JsonSchemaRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JType;
@@ -57,7 +56,7 @@ protected JsonSchemaRule(RuleFactory ruleFactory) {
     public JType apply(String nodeName, JsonNode schemaNode, JClassContainer generatableType, Schema schema) {
 
         if (schemaNode.has("$ref")) {
-            schema = Schema.create(schema, schemaNode.get("$ref").getTextValue());
+            schema = Schema.create(schema, schemaNode.get("$ref").asText());
             schemaNode = schema.getContent();
 
             if (schema.isGenerated()) {

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.commons.lang.builder.ToStringBuilder;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.googlecode.jsonschema2pojo.SchemaMapper;
 import com.googlecode.jsonschema2pojo.exception.ClassAlreadyExistsException;
@@ -143,7 +143,7 @@ private JDefinedClass createClass(String nodeName, JsonNode node, JPackage _pack
 
         try {
             if (node.has("javaType")) {
-                String fqn = node.get("javaType").getTextValue();
+                String fqn = node.get("javaType").asText();
 
                 if (isPrimitive(fqn, _package.owner())) {
                     throw new ClassAlreadyExistsException(primitiveType(fqn, _package.owner()));

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -19,9 +19,9 @@
 import static org.apache.commons.lang.StringUtils.*;
 
 import org.apache.commons.lang.WordUtils;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.annotate.JsonProperty;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JAnnotatable;
 import com.sun.codemodel.JAnnotationUse;

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RequiredRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
@@ -60,7 +59,7 @@ protected RequiredRule() {
     public JDocComment apply(String nodeName, JsonNode node, JDocCommentable generatableType, Schema schema) {
         JDocComment javadoc = generatableType.javadoc();
 
-        if (node.getBooleanValue()) {
+        if (node.asBoolean()) {
             javadoc.append(REQUIRED_COMMENT_TEXT);
         }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 
 /**

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TitleRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
@@ -56,7 +55,7 @@ protected TitleRule() {
     public JDocComment apply(String nodeName, JsonNode node, JDocCommentable generatableType, Schema schema) {
         JDocComment javadoc = generatableType.javadoc();
 
-        javadoc.add(0, node.getTextValue() + "\n<p>\n");
+        javadoc.add(0, node.asText() + "\n<p>\n");
 
         return javadoc;
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClassContainer;
@@ -74,7 +73,7 @@ protected TypeRule(RuleFactory ruleFactory) {
     @Override
     public JType apply(String nodeName, JsonNode node, JClassContainer jClassContainer, Schema schema) {
 
-        String propertyTypeName = node.has("type") ? node.get("type").getTextValue() : DEFAULT_TYPE_NAME;
+        String propertyTypeName = node.has("type") ? node.get("type").asText() : DEFAULT_TYPE_NAME;
 
         JType type;
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaMapperImplTest.java
Patch:
@@ -23,10 +23,10 @@
 import java.io.IOException;
 import java.net.URL;
 
-import org.codehaus.jackson.JsonNode;
 import org.easymock.Capture;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.rules.JsonSchemaRule;
 import com.googlecode.jsonschema2pojo.rules.RuleFactory;
 import com.googlecode.jsonschema2pojo.rules.RuleFactoryImpl;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaTest.java
Patch:
@@ -46,7 +46,7 @@ public void createWithAbsolutePath() throws URISyntaxException {
         assertThat(schema, is(notNullValue()));
         assertThat(schema.getId(), is(equalTo(schemaUri)));
         assertThat(schema.getContent().has("description"), is(true));
-        assertThat(schema.getContent().get("description").getTextValue(), is(equalTo("An Address following the convention of http://microformats.org/wiki/hcard")));
+        assertThat(schema.getContent().get("description").asText(), is(equalTo("An Address following the convention of http://microformats.org/wiki/hcard")));
 
     }
 
@@ -91,7 +91,7 @@ public void createWithFragmentResolution() throws URISyntaxException {
         assertThat(innerSchema, is(notNullValue()));
         assertThat(innerSchema.getId(), is(equalTo(URI.create(expectedUri))));
         assertThat(innerSchema.getContent().has("type"), is(true));
-        assertThat(innerSchema.getContent().get("type").getTextValue(), is("string"));
+        assertThat(innerSchema.getContent().get("type").asText(), is("string"));
 
     }
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -24,11 +24,11 @@
 import java.util.List;
 import java.util.Set;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.junit.Before;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/DescriptionRuleTest.java
Patch:
@@ -19,10 +19,10 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.TextNode;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -26,12 +26,12 @@
 import java.util.Date;
 import java.util.regex.Pattern;
 
-import org.codehaus.jackson.node.TextNode;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JType;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/PropertiesRuleTest.java
Patch:
@@ -20,10 +20,10 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RequiredRuleTest.java
Patch:
@@ -19,10 +19,10 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.BooleanNode;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.BooleanNode;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TitleRuleTest.java
Patch:
@@ -19,10 +19,10 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.TextNode;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -20,12 +20,12 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
-import org.codehaus.jackson.node.TextNode;
 import org.junit.Before;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/PropertiesIT.java
Patch:
@@ -25,11 +25,11 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.googlecode.jsonschema2pojo.Schema;
 
 public class PropertiesIT {

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/FragmentResolver.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.googlecode.jsonschema2pojo;
 
-import org.codehaus.jackson.JsonNode;
+import com.fasterxml.jackson.databind.JsonNode;
 
 /**
  * Resolves fragments of a schema.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/FragmentResolverImpl.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.codehaus.jackson.JsonNode;
+import com.fasterxml.jackson.databind.JsonNode;
 
 public class FragmentResolverImpl implements FragmentResolver {
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Schema.java
Patch:
@@ -23,9 +23,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
-
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.googlecode.jsonschema2pojo.exception.GenerationException;
 import com.sun.codemodel.JType;
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapperImpl.java
Patch:
@@ -19,9 +19,8 @@
 import java.io.IOException;
 import java.net.URL;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
-
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.googlecode.jsonschema2pojo.rules.RuleFactory;
 import com.googlecode.jsonschema2pojo.rules.RuleFactoryImpl;
 import com.sun.codemodel.JCodeModel;

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ArrayRule.java
Patch:
@@ -21,8 +21,7 @@
 import java.util.List;
 import java.util.Set;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JPackage;
@@ -76,7 +75,7 @@ protected ArrayRule(RuleFactory ruleFactory) {
     @Override
     public JClass apply(String nodeName, JsonNode node, JPackage jpackage, Schema schema) {
 
-        boolean uniqueItems = node.has("uniqueItems") && node.get("uniqueItems").getBooleanValue();
+        boolean uniqueItems = node.has("uniqueItems") && node.get("uniqueItems").asBoolean();
         
         JType itemType;
         if (node.has("items")) {

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/DescriptionRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
@@ -52,7 +51,7 @@ protected DescriptionRule() {
     public JDocComment apply(String nodeName, JsonNode node, JDocCommentable generatableType, Schema schema) {
         JDocComment javadoc = generatableType.javadoc();
 
-        javadoc.append(node.getTextValue());
+        javadoc.append(node.asText());
 
         return javadoc;
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/JsonSchemaRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JType;
@@ -57,7 +56,7 @@ protected JsonSchemaRule(RuleFactory ruleFactory) {
     public JType apply(String nodeName, JsonNode schemaNode, JClassContainer generatableType, Schema schema) {
 
         if (schemaNode.has("$ref")) {
-            schema = Schema.create(schema, schemaNode.get("$ref").getTextValue());
+            schema = Schema.create(schema, schemaNode.get("$ref").asText());
             schemaNode = schema.getContent();
 
             if (schema.isGenerated()) {

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.apache.commons.lang.builder.ToStringBuilder;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.googlecode.jsonschema2pojo.SchemaMapper;
 import com.googlecode.jsonschema2pojo.exception.ClassAlreadyExistsException;
@@ -143,7 +143,7 @@ private JDefinedClass createClass(String nodeName, JsonNode node, JPackage _pack
 
         try {
             if (node.has("javaType")) {
-                String fqn = node.get("javaType").getTextValue();
+                String fqn = node.get("javaType").asText();
 
                 if (isPrimitive(fqn, _package.owner())) {
                     throw new ClassAlreadyExistsException(primitiveType(fqn, _package.owner()));

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -19,9 +19,9 @@
 import static org.apache.commons.lang.StringUtils.*;
 
 import org.apache.commons.lang.WordUtils;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.annotate.JsonProperty;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JAnnotatable;
 import com.sun.codemodel.JAnnotationUse;

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RequiredRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
@@ -60,7 +59,7 @@ protected RequiredRule() {
     public JDocComment apply(String nodeName, JsonNode node, JDocCommentable generatableType, Schema schema) {
         JDocComment javadoc = generatableType.javadoc();
 
-        if (node.getBooleanValue()) {
+        if (node.asBoolean()) {
             javadoc.append(REQUIRED_COMMENT_TEXT);
         }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 
 /**

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TitleRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JDocComment;
 import com.sun.codemodel.JDocCommentable;
@@ -56,7 +55,7 @@ protected TitleRule() {
     public JDocComment apply(String nodeName, JsonNode node, JDocCommentable generatableType, Schema schema) {
         JDocComment javadoc = generatableType.javadoc();
 
-        javadoc.add(0, node.getTextValue() + "\n<p>\n");
+        javadoc.add(0, node.asText() + "\n<p>\n");
 
         return javadoc;
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.googlecode.jsonschema2pojo.rules;
 
-import org.codehaus.jackson.JsonNode;
-
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClassContainer;
@@ -74,7 +73,7 @@ protected TypeRule(RuleFactory ruleFactory) {
     @Override
     public JType apply(String nodeName, JsonNode node, JClassContainer jClassContainer, Schema schema) {
 
-        String propertyTypeName = node.has("type") ? node.get("type").getTextValue() : DEFAULT_TYPE_NAME;
+        String propertyTypeName = node.has("type") ? node.get("type").asText() : DEFAULT_TYPE_NAME;
 
         JType type;
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaMapperImplTest.java
Patch:
@@ -23,10 +23,10 @@
 import java.io.IOException;
 import java.net.URL;
 
-import org.codehaus.jackson.JsonNode;
 import org.easymock.Capture;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import com.googlecode.jsonschema2pojo.rules.JsonSchemaRule;
 import com.googlecode.jsonschema2pojo.rules.RuleFactory;
 import com.googlecode.jsonschema2pojo.rules.RuleFactoryImpl;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaTest.java
Patch:
@@ -46,7 +46,7 @@ public void createWithAbsolutePath() throws URISyntaxException {
         assertThat(schema, is(notNullValue()));
         assertThat(schema.getId(), is(equalTo(schemaUri)));
         assertThat(schema.getContent().has("description"), is(true));
-        assertThat(schema.getContent().get("description").getTextValue(), is(equalTo("An Address following the convention of http://microformats.org/wiki/hcard")));
+        assertThat(schema.getContent().get("description").asText(), is(equalTo("An Address following the convention of http://microformats.org/wiki/hcard")));
 
     }
 
@@ -91,7 +91,7 @@ public void createWithFragmentResolution() throws URISyntaxException {
         assertThat(innerSchema, is(notNullValue()));
         assertThat(innerSchema.getId(), is(equalTo(URI.create(expectedUri))));
         assertThat(innerSchema.getContent().has("type"), is(true));
-        assertThat(innerSchema.getContent().get("type").getTextValue(), is("string"));
+        assertThat(innerSchema.getContent().get("type").asText(), is("string"));
 
     }
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -24,11 +24,11 @@
 import java.util.List;
 import java.util.Set;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.junit.Before;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/DescriptionRuleTest.java
Patch:
@@ -19,10 +19,10 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.TextNode;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -26,12 +26,12 @@
 import java.util.Date;
 import java.util.regex.Pattern;
 
-import org.codehaus.jackson.node.TextNode;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JType;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/PropertiesRuleTest.java
Patch:
@@ -20,10 +20,10 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RequiredRuleTest.java
Patch:
@@ -19,10 +19,10 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.BooleanNode;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.BooleanNode;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TitleRuleTest.java
Patch:
@@ -19,10 +19,10 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.TextNode;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JCodeModel;
 import com.sun.codemodel.JDefinedClass;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -20,12 +20,12 @@
 import static org.hamcrest.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
-import org.codehaus.jackson.node.TextNode;
 import org.junit.Before;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.fasterxml.jackson.databind.node.TextNode;
 import com.googlecode.jsonschema2pojo.GenerationConfig;
 import com.googlecode.jsonschema2pojo.Schema;
 import com.sun.codemodel.JClass;

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/PropertiesIT.java
Patch:
@@ -25,11 +25,11 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.googlecode.jsonschema2pojo.Schema;
 
 public class PropertiesIT {

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -59,6 +59,8 @@ public void arrayWithUniqueItemsProducesSet() {
         propertyNode.put("uniqueItems", true);
         propertyNode.put("items", itemsNode);
 
+        replay(config);
+
         JClass propertyType = rule.apply("fooBars", propertyNode, jpackage, createMock(Schema.class));
 
         assertThat(propertyType, notNullValue());

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ArrayIT.java
Patch:
@@ -36,7 +36,7 @@ public class ArrayIT {
     @BeforeClass
     public static void generateAndCompileClass() throws ClassNotFoundException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/array/typeWithArrayProperties.json", "com.example", true, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/array/typeWithArrayProperties.json", "com.example", true, false, false);
 
         classWithArrayProperties = resultsClassLoader.loadClass("com.example.TypeWithArrayProperties");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DefaultIT.java
Patch:
@@ -37,7 +37,7 @@ public class DefaultIT {
     @BeforeClass
     public static void generateAndCompileClass() throws ClassNotFoundException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/default/default.json", "com.example", true, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/default/default.json", "com.example", true, false, false);
 
         classWithDefaults = resultsClassLoader.loadClass("com.example.Default");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DescriptionIT.java
Patch:
@@ -39,7 +39,7 @@ public class DescriptionIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/description/description.json", "com.example", true, false);
+        File outputDirectory = generate("/schema/description/description.json", "com.example", true, false, false);
         File generatedJavaFile = new File(outputDirectory, "com/example/Description.java");
 
         compile(outputDirectory);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/EnumIT.java
Patch:
@@ -44,7 +44,7 @@ public class EnumIT {
     @SuppressWarnings({"unchecked", "rawtypes"})
     public static void generateAndCompileEnum() throws ClassNotFoundException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/typeWithEnumProperty.json", "com.example", true, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/typeWithEnumProperty.json", "com.example", true, false, false);
 
         parentClass = resultsClassLoader.loadClass("com.example.TypeWithEnumProperty");
         enumClass = (Class<Enum>) resultsClassLoader.loadClass("com.example.TypeWithEnumProperty$EnumProperty");
@@ -115,7 +115,7 @@ public void enumDeserializationMethodRejectsInvalidValues() throws NoSuchMethodE
     @SuppressWarnings({"rawtypes", "unchecked"})
     public void enumAtRootCreatesATopLevelType() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/enumAsRoot.json", "com.example", true, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/enumAsRoot.json", "com.example", true, false, false);
 
         Class<Enum> rootEnumClass = (Class<Enum>) resultsClassLoader.loadClass("com.example.EnumAsRoot");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/FormatIT.java
Patch:
@@ -82,7 +82,7 @@ public FormatIT(String propertyName, Class<?> expectedType, Object jsonValue, Ob
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/format/formattedProperties.json", "com.example", false, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/format/formattedProperties.json", "com.example", false, false, false);
 
         classWithFormattedProperties = resultsClassLoader.loadClass("com.example.FormattedProperties");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/RequiredIT.java
Patch:
@@ -39,7 +39,7 @@ public class RequiredIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/required/required.json", "com.example", true, false);
+        File outputDirectory = generate("/schema/required/required.json", "com.example", true, false, false);
         File generatedJavaFile = new File(outputDirectory, "com/example/Required.java");
 
         compile(outputDirectory);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/TitleIT.java
Patch:
@@ -39,7 +39,7 @@ public class TitleIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/title/title.json", "com.example", true, false);
+        File outputDirectory = generate("/schema/title/title.json", "com.example", true, false, false);
         File generatedJavaFile = new File(outputDirectory, "com/example/Title.java");
 
         compile(outputDirectory);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/AbsoluteRefIT.java
Patch:
@@ -35,7 +35,7 @@ public void absoluteRefIsReadSuccessfully() throws ClassNotFoundException, NoSuc
 
         File schemaWithAbsoluteRef = createSchemaWithAbsoluteRef();
 
-        File generatedOutputDirectory = generate(schemaWithAbsoluteRef.toURI().toURL(), "com.example", false, false);
+        File generatedOutputDirectory = generate(schemaWithAbsoluteRef.toURI().toURL(), "com.example", false, false, false);
         Class<?> absoluteRefClass = compile(generatedOutputDirectory).loadClass("com.example.AbsoluteRef");
 
         Class<?> addressClass = absoluteRefClass.getMethod("getAddress").getReturnType();

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/CyclicalRefIT.java
Patch:
@@ -28,7 +28,7 @@ public class CyclicalRefIT {
     @SuppressWarnings({"rawtypes", "unchecked"})
     public void cyclicalRefsAreReadSuccessfully() throws ClassNotFoundException, NoSuchMethodException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/ref/subdirectory1/refToSubdirectory2.json", "com.example", false, false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/ref/subdirectory1/refToSubdirectory2.json", "com.example", false, false, false);
 
         Class class1 = resultsClassLoader.loadClass("com.example.RefToSubdirectory2");
         Class class2 = resultsClassLoader.loadClass("com.example.RefToSubdirectory1");

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/FragmentRefIT.java
Patch:
@@ -34,7 +34,7 @@ public static void generateAndCompileEnum() throws ClassNotFoundException {
 
         Schema.clearCache();
 
-        ClassLoader fragmentRefsClassLoader = generateAndCompile("/schema/ref/fragmentRefs.json", "com.example", true, false);
+        ClassLoader fragmentRefsClassLoader = generateAndCompile("/schema/ref/fragmentRefs.json", "com.example", true, false, false);
 
         fragmentRefsClass = fragmentRefsClassLoader.loadClass("com.example.FragmentRefs");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/RelativeRefIT.java
Patch:
@@ -37,7 +37,7 @@ public static void generateAndCompileEnum() throws ClassNotFoundException {
 
         Schema.clearCache();
 
-        ClassLoader relativeRefsClassLoader = generateAndCompile("/schema/ref/refsToA.json", "com.example", true, false);
+        ClassLoader relativeRefsClassLoader = generateAndCompile("/schema/ref/refsToA.json", "com.example", true, false, false);
 
         relativeRefsClass = relativeRefsClassLoader.loadClass("com.example.RefsToA");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/SelfRefIT.java
Patch:
@@ -33,7 +33,7 @@ public class SelfRefIT {
     @BeforeClass
     public static void generateAndCompileEnum() throws ClassNotFoundException {
 
-        ClassLoader selfRefsClassLoader = generateAndCompile("/schema/ref/selfRefs.json", "com.example", true, false);
+        ClassLoader selfRefsClassLoader = generateAndCompile("/schema/ref/selfRefs.json", "com.example", true, false, false);
 
         selfRefsClass = selfRefsClassLoader.loadClass("com.example.SelfRefs");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -29,14 +29,15 @@
  */
 public class TestableJsonschema2PojoMojo extends Jsonschema2PojoMojo {
 
-    public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDirectory, String targetPackage, boolean generateBuilders, boolean usePrimitives, char[] wordDelimiters, MavenProject project) {
+    public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDirectory, String targetPackage, boolean generateBuilders, boolean usePrimitives, boolean useLongIntegers, char[] wordDelimiters, MavenProject project) {
 
         setPrivateField("sourceDirectory", sourceDirectory);
         setPrivateField("outputDirectory", outputDirectory);
         setPrivateField("project", project);
         setPrivateField("targetPackage", targetPackage);
         setPrivateField("generateBuilders", generateBuilders);
         setPrivateField("usePrimitives", usePrimitives);
+        setPrivateField("useLongIntegers", useLongIntegers);
         setPrivateField("propertyWordDelimiters", new String(wordDelimiters));
         
         return this;

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapperImpl.java
Patch:
@@ -28,8 +28,8 @@
 import com.sun.codemodel.JPackage;
 
 /**
- * Default implementation of the {@link SchemaMapper} interface, accepting a map
- * of behavioural properties that may influence code generation.
+ * Default implementation of the {@link SchemaMapper} interface, accepting a
+ * factory which will be used to create type generation rules for this mapper.
  */
 public class SchemaMapperImpl implements SchemaMapper {
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -21,8 +21,9 @@
 import com.googlecode.jsonschema2pojo.Schema;
 
 /**
- * Type used to represent a JSON schema rule and can be executed or 'applied' to
- * perform the code generation steps associated with that schema rule.
+ * Represents a JSON Schema rule (production from JSON Schema). Can be executed
+ * or 'applied' to perform the code generation steps associated with that schema
+ * rule.
  * 
  * @param <T>
  *            The type of source code item on which this rule can operate

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -171,8 +171,7 @@ private void addProjectDependenciesToClasspath() {
 
             ClassLoader oldClassLoader = Thread.currentThread()
             .getContextClassLoader();
-            ClassLoader newClassLoader = new ProjectClasspath().getClassLoader(
-                    project, oldClassLoader, getLog());
+            ClassLoader newClassLoader = new ProjectClasspath().getClassLoader(project, oldClassLoader, getLog());
             Thread.currentThread().setContextClassLoader(newClassLoader);
 
         } catch (DependencyResolutionRequiredException e) {

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Provides the classes specifically associated with the maven plugin for 
+ * Provides the classes specifically associated with the Maven plugin for 
  * jsonschema2pojo 
  */
 package com.googlecode.jsonschema2pojo.maven;
\ No newline at end of file

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ant/Jsonschema2PojoTaskIT.java
Patch:
@@ -36,7 +36,7 @@ public void antTaskExecutesSuccessfullyWithValidSchema() throws URISyntaxExcepti
         
         ClassLoader resultsClassLoader = compile(outputDirectory);
         
-        Class<?> generatedClass = resultsClassLoader.loadClass("com.example.PrimitiveProperties");
+        Class<?> generatedClass = resultsClassLoader.loadClass("com.example.WordDelimit");
         
         assertThat(generatedClass, is(notNullValue()));
     }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -37,7 +37,7 @@ public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDi
         setPrivateField("targetPackage", targetPackage);
         setPrivateField("generateBuilders", generateBuilders);
         setPrivateField("usePrimitives", usePrimitives);
-        setPrivateField("propertyWordDelimiters", wordDelimiters);
+        setPrivateField("propertyWordDelimiters", new String(wordDelimiters));
         
         return this;
     }

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -121,10 +121,10 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * JSON properties will be considered to contain a single word when creating
      * Java Bean property names.
      * 
-     * @param expression=${jsonschema2pojo.propertyWordDelimiters} default-value=""
+     * @parameter expression=${jsonschema2pojo.propertyWordDelimiters} default-value=""
      * @since 0.2.2
      */
-    private char[] propertyWordDelimiters;
+    private String propertyWordDelimiters;
     
     /**
      * The project being built.
@@ -210,7 +210,7 @@ public String getTargetPackage() {
     
     @Override
     public char[] getPropertyWordDelimiters() {
-        return propertyWordDelimiters;
+        return propertyWordDelimiters.toCharArray();
     }
 
 }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -37,7 +37,7 @@ public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDi
         setPrivateField("targetPackage", targetPackage);
         setPrivateField("generateBuilders", generateBuilders);
         setPrivateField("usePrimitives", usePrimitives);
-        setPrivateField("propertyWordDelimiters", wordDelimiters);
+        setPrivateField("propertyWordDelimiters", new String(wordDelimiters));
         
         return this;
     }

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -121,10 +121,10 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
      * JSON properties will be considered to contain a single word when creating
      * Java Bean property names.
      * 
-     * @param expression=${jsonschema2pojo.propertyWordDelimiters} default-value=""
+     * @parameter expression=${jsonschema2pojo.propertyWordDelimiters} default-value=""
      * @since 0.2.2
      */
-    private char[] propertyWordDelimiters;
+    private String propertyWordDelimiters;
     
     /**
      * The project being built.
@@ -210,7 +210,7 @@ public String getTargetPackage() {
     
     @Override
     public char[] getPropertyWordDelimiters() {
-        return propertyWordDelimiters;
+        return propertyWordDelimiters.toCharArray();
     }
 
 }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ant/Jsonschema2PojoTaskIT.java
Patch:
@@ -36,7 +36,7 @@ public void antTaskExecutesSuccessfullyWithValidSchema() throws URISyntaxExcepti
         
         ClassLoader resultsClassLoader = compile(outputDirectory);
         
-        Class<?> generatedClass = resultsClassLoader.loadClass("com.example.PrimitiveProperties");
+        Class<?> generatedClass = resultsClassLoader.loadClass("com.example.WordDelimit");
         
         assertThat(generatedClass, is(notNullValue()));
     }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -29,15 +29,16 @@
  */
 public class TestableJsonschema2PojoMojo extends Jsonschema2PojoMojo {
 
-    public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDirectory, String targetPackage, boolean generateBuilders, boolean usePrimitives, MavenProject project) {
+    public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDirectory, String targetPackage, boolean generateBuilders, boolean usePrimitives, char[] wordDelimiters, MavenProject project) {
 
         setPrivateField("sourceDirectory", sourceDirectory);
         setPrivateField("outputDirectory", outputDirectory);
         setPrivateField("project", project);
         setPrivateField("targetPackage", targetPackage);
         setPrivateField("generateBuilders", generateBuilders);
         setPrivateField("usePrimitives", usePrimitives);
-
+        setPrivateField("propertyWordDelimiters", wordDelimiters);
+        
         return this;
     }
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -29,15 +29,16 @@
  */
 public class TestableJsonschema2PojoMojo extends Jsonschema2PojoMojo {
 
-    public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDirectory, String targetPackage, boolean generateBuilders, boolean usePrimitives, MavenProject project) {
+    public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDirectory, String targetPackage, boolean generateBuilders, boolean usePrimitives, char[] wordDelimiters, MavenProject project) {
 
         setPrivateField("sourceDirectory", sourceDirectory);
         setPrivateField("outputDirectory", outputDirectory);
         setPrivateField("project", project);
         setPrivateField("targetPackage", targetPackage);
         setPrivateField("generateBuilders", generateBuilders);
         setPrivateField("usePrimitives", usePrimitives);
-
+        setPrivateField("propertyWordDelimiters", wordDelimiters);
+        
         return this;
     }
 

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -85,7 +85,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
     private boolean generateBuilders;
 
     /**
-     * Whether to use primitives (<code>long</code>, <code>double</code> ,
+     * Whether to use primitives (<code>long</code>, <code>double</code>,
      * <code>boolean</code>) instead of wrapper types where possible when
      * generating bean properties (has the side-effect of making those
      * properties non-null).

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -85,7 +85,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo implements GenerationConfi
     private boolean generateBuilders;
 
     /**
-     * Whether to use primitives (<code>long</code>, <code>double</code> ,
+     * Whether to use primitives (<code>long</code>, <code>double</code>,
      * <code>boolean</code>) instead of wrapper types where possible when
      * generating bean properties (has the side-effect of making those
      * properties non-null).

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/CodeGenerationHelper.java
Patch:
@@ -144,7 +144,7 @@ public static ClassLoader generateAndCompile(String schema, String targetPackage
 
     }
 
-    private static File createTemporaryOutputFolder() {
+    public static File createTemporaryOutputFolder() {
 
         String tempDirectoryName = System.getProperty("java.io.tmpdir");
         String outputDirectoryName = tempDirectoryName + File.separator + UUID.randomUUID().toString();

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/CodeGenerationHelper.java
Patch:
@@ -144,7 +144,7 @@ public static ClassLoader generateAndCompile(String schema, String targetPackage
 
     }
 
-    private static File createTemporaryOutputFolder() {
+    public static File createTemporaryOutputFolder() {
 
         String tempDirectoryName = System.getProperty("java.io.tmpdir");
         String outputDirectoryName = tempDirectoryName + File.separator + UUID.randomUUID().toString();

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImplTest.java
Patch:
@@ -45,8 +45,6 @@ public void factoryMethodsCreateRules() {
 
         assertThat(ruleFactory.getObjectRule(), notNullValue());
 
-        assertThat(ruleFactory.getOptionalRule(), notNullValue());
-
         assertThat(ruleFactory.getPropertiesRule(), notNullValue());
 
         assertThat(ruleFactory.getPropertyRule(), notNullValue());

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImpl.java
Patch:
@@ -59,7 +59,7 @@ public SchemaRule<JClassContainer, JDefinedClass> getEnumRule() {
 
     @Override
     public SchemaRule<JType, JType> getFormatRule() {
-        return new FormatRule();
+        return new FormatRule(this);
     }
 
     @Override

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ArrayIT.java
Patch:
@@ -36,7 +36,7 @@ public class ArrayIT {
     @BeforeClass
     public static void generateAndCompileClass() throws ClassNotFoundException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/array/typeWithArrayProperties.json", "com.example", true);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/array/typeWithArrayProperties.json", "com.example", true, false);
 
         classWithArrayProperties = resultsClassLoader.loadClass("com.example.TypeWithArrayProperties");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DefaultIT.java
Patch:
@@ -37,7 +37,7 @@ public class DefaultIT {
     @BeforeClass
     public static void generateAndCompileClass() throws ClassNotFoundException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/default/default.json", "com.example", true);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/default/default.json", "com.example", true, false);
 
         classWithDefaults = resultsClassLoader.loadClass("com.example.Default");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DescriptionIT.java
Patch:
@@ -39,7 +39,7 @@ public class DescriptionIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/description/description.json", "com.example", true);
+        File outputDirectory = generate("/schema/description/description.json", "com.example", true, false);
         File generatedJavaFile = new File(outputDirectory, "com/example/Description.java");
 
         compile(outputDirectory);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/EnumIT.java
Patch:
@@ -44,7 +44,7 @@ public class EnumIT {
     @SuppressWarnings({"unchecked", "rawtypes"})
     public static void generateAndCompileEnum() throws ClassNotFoundException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/typeWithEnumProperty.json", "com.example", true);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/typeWithEnumProperty.json", "com.example", true, false);
 
         parentClass = resultsClassLoader.loadClass("com.example.TypeWithEnumProperty");
         enumClass = (Class<Enum>) resultsClassLoader.loadClass("com.example.TypeWithEnumProperty$EnumProperty");
@@ -115,7 +115,7 @@ public void enumDeserializationMethodRejectsInvalidValues() throws NoSuchMethodE
     @SuppressWarnings({"rawtypes", "unchecked"})
     public void enumAtRootCreatesATopLevelType() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/enumAsRoot.json", "com.example", true);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/enum/enumAsRoot.json", "com.example", true, false);
 
         Class<Enum> rootEnumClass = (Class<Enum>) resultsClassLoader.loadClass("com.example.EnumAsRoot");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/FormatIT.java
Patch:
@@ -82,7 +82,7 @@ public FormatIT(String propertyName, Class<?> expectedType, Object jsonValue, Ob
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/format/formattedProperties.json", "com.example", false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/format/formattedProperties.json", "com.example", false, false);
 
         classWithFormattedProperties = resultsClassLoader.loadClass("com.example.FormattedProperties");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/OptionalIT.java
Patch:
@@ -39,7 +39,7 @@ public class OptionalIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/optional/optional.json", "com.example", true);
+        File outputDirectory = generate("/schema/optional/optional.json", "com.example", true, false);
         File generatedJavaFile = new File(outputDirectory, "com/example/Optional.java");
 
         compile(outputDirectory);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/RequiredIT.java
Patch:
@@ -39,7 +39,7 @@ public class RequiredIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/required/required.json", "com.example", true);
+        File outputDirectory = generate("/schema/required/required.json", "com.example", true, false);
         File generatedJavaFile = new File(outputDirectory, "com/example/Required.java");
 
         compile(outputDirectory);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/TitleIT.java
Patch:
@@ -39,7 +39,7 @@ public class TitleIT {
     @BeforeClass
     public static void generateClasses() throws ClassNotFoundException, IOException {
 
-        File outputDirectory = generate("/schema/title/title.json", "com.example", true);
+        File outputDirectory = generate("/schema/title/title.json", "com.example", true, false);
         File generatedJavaFile = new File(outputDirectory, "com/example/Title.java");
 
         compile(outputDirectory);

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/TypeIT.java
Patch:
@@ -35,7 +35,7 @@ public class TypeIT {
     @BeforeClass
     public static void generateAndCompileClass() throws ClassNotFoundException {
 
-        generatedTypesDirectory = generate("/schema/type/types.json", "com.example", true);
+        generatedTypesDirectory = generate("/schema/type/types.json", "com.example", true, false);
         classWithManyTypes = compile(generatedTypesDirectory).loadClass("com.example.Types");
 
     }

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/AbsoluteRefIT.java
Patch:
@@ -35,7 +35,7 @@ public void absoluteRefIsReadSuccessfully() throws ClassNotFoundException, NoSuc
 
         File schemaWithAbsoluteRef = createSchemaWithAbsoluteRef();
 
-        File generatedOutputDirectory = generate(schemaWithAbsoluteRef.toURI().toURL(), "com.example", false);
+        File generatedOutputDirectory = generate(schemaWithAbsoluteRef.toURI().toURL(), "com.example", false, false);
         Class<?> absoluteRefClass = compile(generatedOutputDirectory).loadClass("com.example.AbsoluteRef");
 
         Class<?> addressClass = absoluteRefClass.getMethod("getAddress").getReturnType();

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/CyclicalRefIT.java
Patch:
@@ -28,7 +28,7 @@ public class CyclicalRefIT {
     @SuppressWarnings({"rawtypes", "unchecked"})
     public void cyclicalRefsAreReadSuccessfully() throws ClassNotFoundException, NoSuchMethodException {
 
-        ClassLoader resultsClassLoader = generateAndCompile("/schema/ref/subdirectory1/refToSubdirectory2.json", "com.example", false);
+        ClassLoader resultsClassLoader = generateAndCompile("/schema/ref/subdirectory1/refToSubdirectory2.json", "com.example", false, false);
 
         Class class1 = resultsClassLoader.loadClass("com.example.RefToSubdirectory2");
         Class class2 = resultsClassLoader.loadClass("com.example.RefToSubdirectory1");

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/FragmentRefIT.java
Patch:
@@ -34,7 +34,7 @@ public static void generateAndCompileEnum() throws ClassNotFoundException {
 
         Schema.clearCache();
 
-        ClassLoader fragmentRefsClassLoader = generateAndCompile("/schema/ref/fragmentRefs.json", "com.example", true);
+        ClassLoader fragmentRefsClassLoader = generateAndCompile("/schema/ref/fragmentRefs.json", "com.example", true, false);
 
         fragmentRefsClass = fragmentRefsClassLoader.loadClass("com.example.FragmentRefs");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/RelativeRefIT.java
Patch:
@@ -37,7 +37,7 @@ public static void generateAndCompileEnum() throws ClassNotFoundException {
 
         Schema.clearCache();
 
-        ClassLoader relativeRefsClassLoader = generateAndCompile("/schema/ref/refsToA.json", "com.example", true);
+        ClassLoader relativeRefsClassLoader = generateAndCompile("/schema/ref/refsToA.json", "com.example", true, false);
 
         relativeRefsClass = relativeRefsClassLoader.loadClass("com.example.RefsToA");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/SelfRefIT.java
Patch:
@@ -33,7 +33,7 @@ public class SelfRefIT {
     @BeforeClass
     public static void generateAndCompileEnum() throws ClassNotFoundException {
 
-        ClassLoader selfRefsClassLoader = generateAndCompile("/schema/ref/selfRefs.json", "com.example", true);
+        ClassLoader selfRefsClassLoader = generateAndCompile("/schema/ref/selfRefs.json", "com.example", true, false);
 
         selfRefsClass = selfRefsClassLoader.loadClass("com.example.SelfRefs");
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -29,13 +29,14 @@
  */
 public class TestableJsonschema2PojoMojo extends Jsonschema2PojoMojo {
 
-    public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDirectory, String targetPackage, boolean generateBuilders, MavenProject project) {
+    public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDirectory, String targetPackage, boolean generateBuilders, boolean usePrimitives, MavenProject project) {
 
         setPrivateField("sourceDirectory", sourceDirectory);
         setPrivateField("outputDirectory", outputDirectory);
         setPrivateField("project", project);
         setPrivateField("targetPackage", targetPackage);
         setPrivateField("generateBuilders", generateBuilders);
+        setPrivateField("usePrimitives", usePrimitives);
 
         return this;
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -80,7 +80,7 @@ public JType apply(String nodeName, JsonNode node, JType baseType, Schema schema
             return baseType.owner().ref(String.class);
 
         } else if (node.getTextValue().equals("utc-millisec")) {
-            return baseType.owner().LONG;
+            return baseType.owner().ref(Long.class);
 
         } else if (node.getTextValue().equals("regex")) {
             return baseType.owner().ref(Pattern.class);

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -48,7 +48,7 @@ public static Collection<Object[]> data() {
                 {"date-time", Date.class},
                 {"date", String.class},
                 {"time", String.class},
-                {"utc-millisec", long.class},
+                {"utc-millisec", Long.class},
                 {"regex", Pattern.class},
                 {"color", String.class},
                 {"style", String.class},

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -90,7 +90,7 @@ public void applyGeneratesInteger() {
 
         JType result = rule.apply("fooBar", objectNode, jpackage, null);
 
-        assertThat(result.fullName(), is(int.class.getName()));
+        assertThat(result.fullName(), is(Integer.class.getName()));
     }
 
     @Test
@@ -103,7 +103,7 @@ public void applyGeneratesNumber() {
 
         JType result = rule.apply("fooBar", objectNode, jpackage, null);
 
-        assertThat(result.fullName(), is(double.class.getName()));
+        assertThat(result.fullName(), is(Double.class.getName()));
     }
 
     @Test
@@ -116,7 +116,7 @@ public void applyGeneratesBoolean() {
 
         JType result = rule.apply("fooBar", objectNode, jpackage, null);
 
-        assertThat(result.fullName(), is(boolean.class.getName()));
+        assertThat(result.fullName(), is(Boolean.class.getName()));
     }
 
     @Test

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DefaultIT.java
Patch:
@@ -81,7 +81,7 @@ public void booleanPropertyHasCorrectDefaultValue() throws NoSuchMethodException
 
         Object instance = classWithDefaults.newInstance();
 
-        Method getter = classWithDefaults.getMethod("isBooleanWithDefault");
+        Method getter = classWithDefaults.getMethod("getBooleanWithDefault");
 
         assertThat((Boolean) getter.invoke(instance), is(equalTo(true)));
 

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/FormatIT.java
Patch:
@@ -53,9 +53,9 @@ public static List<Object[]> data() {
                 { "stringAsDateTime", Date.class, "54321", new Date(54321L) },
                 { "stringAsTime", String.class, "12:30", "12:30" },
                 { "stringAsDate", String.class, "1950-10-10", "1950-10-10" },
-                { "numberAsUtcMillisec", long.class, 555, 555L },
-                { "stringAsUtcMillisec", long.class, "999", 999L },
-                { "customFormattedNumber", double.class, "6.512", 6.512d },
+                { "numberAsUtcMillisec", Long.class, 555, 555L },
+                { "stringAsUtcMillisec", Long.class, "999", 999L },
+                { "customFormattedNumber", Double.class, "6.512", 6.512d },
                 { "stringAsRegex", Pattern.class, "^.*[0-9]+.*$", Pattern.compile("^.*[0-9]+.*$") },
                 { "stringAsHostname", String.class, "somehost", "somehost" },
                 { "stringAsIpAddress", String.class, "192.168.1.666", "192.168.1.666" },

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/package-info.java
Patch:
@@ -16,6 +16,6 @@
 
 /**
  * Provides the classes specifically associated with the command line interface
- * for jsonschema2pojo 
+ * for jsonschema2pojo
  */
-package com.googlecode.jsonschema2pojo.cli;
\ No newline at end of file
+package com.googlecode.jsonschema2pojo.cli;

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/exception/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Provides exception types, thrown during schema parsing or code generation 
+ * Provides exception types, thrown during schema parsing or code generation
  * when errors occur
  */
-package com.googlecode.jsonschema2pojo.exception;
\ No newline at end of file
+package com.googlecode.jsonschema2pojo.exception;

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/AdditionalPropertiesRule.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * Applies the "additionalProperties" JSON schema rule.
- * 
+ *
  * @see <a
  *      href="http://tools.ietf.org/html/draft-zyp-json-schema-02#section-5.5">http://tools.ietf.org/html/draft-zyp-json-schema-02#section-5.5</a>
  */

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -81,8 +81,7 @@ public JDefinedClass apply(String nodeName, JsonNode node, JDefinedClass jclass,
         JMethod getter = addGetter(jclass, field, nodeName);
         JMethod setter = addSetter(jclass, field, nodeName);
 
-        boolean shouldAddBuilders = Boolean.parseBoolean(ruleFactory.getBehaviourProperty(RuleFactory.GENERATE_BUILDERS_PROPERTY));
-
+        boolean shouldAddBuilders = ruleFactory.getGenerationConfig().isGenerateBuilders();
         if (shouldAddBuilders) {
             addBuilder(jclass, field);
         }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -19,7 +19,6 @@
 import org.codehaus.jackson.JsonNode;
 
 import com.googlecode.jsonschema2pojo.Schema;
-import com.googlecode.jsonschema2pojo.exception.GenerationException;
 import com.sun.codemodel.JClassContainer;
 import com.sun.codemodel.JType;
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Provides the schema rules which can be 'applied' to perform the code 
+ * Provides the schema rules which can be 'applied' to perform the code
  * generation steps associated with JSON schema nodes
  */
-package com.googlecode.jsonschema2pojo.rules;
\ No newline at end of file
+package com.googlecode.jsonschema2pojo.rules;

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/AdditionalPropertiesRuleTest.java
Patch:
@@ -82,7 +82,7 @@ public class AdditionalPropertiesRuleTest {
                     "    }\n\n" +
                     "}\n";
 
-    @Before 
+    @Before
     public void clearSchemaCache() {
         Schema.clearCache();
     }

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -38,7 +38,7 @@ public class ArrayRuleTest {
 
     private final ArrayRule rule = new ArrayRule(new RuleFactoryImpl(null));
 
-    @Before 
+    @Before
     public void clearSchemaCache() {
         Schema.clearCache();
     }

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -124,7 +124,7 @@ public class EnumRuleTest {
 
     private EnumRule rule = new EnumRule();
 
-    @Before 
+    @Before
     public void clearSchemaCache() {
         Schema.clearCache();
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImpl.java
Patch:
@@ -36,7 +36,9 @@ public class RuleFactoryImpl implements RuleFactory {
      * Create a new rule factory with the given behaviour properties
      * 
      * @param behaviourProperties
-     *            A map defining the behavioural properties of this context.
+     *            A map defining the behavioural properties for type generation.
+     *            These properties will influence the java code generated by
+     *            rules created by this factory.
      */
     public RuleFactoryImpl(Map<String, String> behaviourProperties) {
         if (behaviourProperties == null) {

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -73,7 +73,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo {
      * @parameter expression="${jsonschema2pojo.targetPackage}"
      * @since 0.1.0
      */
-    private String targetPackage;
+    private String targetPackage = "";
 
     /**
      * Whether to generate builder-style methods of the form
@@ -111,7 +111,7 @@ public class Jsonschema2PojoMojo extends AbstractMojo {
      * the command line interface.
      */
     @Override
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = { "NP_UNWRITTEN_FIELD", "UWF_UNWRITTEN_FIELD" }, justification = "Private fields set by Maven.")
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = {"NP_UNWRITTEN_FIELD", "UWF_UNWRITTEN_FIELD"}, justification = "Private fields set by Maven.")
     public void execute() throws MojoExecutionException {
 
         if (addCompileSourceRoot) {

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * A plugin mojo that allows the private property values usually only set by
- * maven to be set programatically.
+ * Maven to be set programatically.
  */
 public class TestableJsonschema2PojoMojo extends Jsonschema2PojoMojo {
     
@@ -35,7 +35,7 @@ public TestableJsonschema2PojoMojo configure(File sourceDirectory, File outputDi
         setPrivateField("outputDirectory", outputDirectory);
         setPrivateField("project", project);
         setPrivateField("targetPackage", targetPackage);
-        setPrivateField("generateBuilders", String.valueOf(generateBuilders));
+        setPrivateField("generateBuilders", generateBuilders);
         
         return this;
     }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -41,15 +41,15 @@ protected FormatRule() {
      * <p>
      * This rule maps format values to Java types:
      * <ul>
-     * <li>"format":"date-time" => {@link Date}
+     * <li>"format":"date-time" => {@link java.util.Date}
      * <li>"format":"date" => {@link String}
      * <li>"format":"time" => {@link String}
      * <li>"format":"utc-millisec" => <code>long</code>
-     * <li>"format":"regex" => {@link String}
+     * <li>"format":"regex" => {@link java.util.regex.Pattern}
      * <li>"format":"color" => {@link String}
      * <li>"format":"style" => {@link String}
      * <li>"format":"phone" => {@link String}
-     * <li>"format":"uri" => {@link String}
+     * <li>"format":"uri" => {@link java.net.URI}
      * <li>"format":"email" => {@link String}
      * <li>"format":"ip-address" => {@link String}
      * <li>"format":"ipv6" => {@link String}

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactory.java
Patch:
@@ -92,7 +92,7 @@ public interface RuleFactory {
      * 
      * @return a schema rule that can handle the "object" declaration.
      */
-    SchemaRule<JPackage, JDefinedClass> getObjectRule();
+    SchemaRule<JPackage, JType> getObjectRule();
 
     /**
      * Provides a rule instance that should be applied when an "optional"

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImpl.java
Patch:
@@ -67,7 +67,7 @@ public SchemaRule<JType, JType> getFormatRule() {
     }
 
     @Override
-    public SchemaRule<JPackage, JDefinedClass> getObjectRule() {
+    public SchemaRule<JPackage, JType> getObjectRule() {
         return new ObjectRule(this);
     }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -24,10 +24,10 @@
 import com.sun.codemodel.JType;
 
 /**
- * Applies the schema rules that represent a property definition.
+ * Applies the "type" schema rule.
  * 
  * @see <a
- *      href="http://tools.ietf.org/html/draft-zyp-json-schema-02#section-5.1">http://tools.ietf.org/html/draft-zyp-json-schema-02#section-5.1</a>
+ *      href="http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1">http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1</a>
  */
 public class TypeRule implements SchemaRule<JClassContainer, JType> {
 
@@ -70,7 +70,7 @@ protected TypeRule(RuleFactory ruleFactory) {
      * @return the Java type which, after reading the details of the given
      *         schema node, most appropriately matches the "type" specified
      * @throws GenerationException
-     *             if the type value found is not recognised.
+     *             if the type valuegeneratableType found is not recognised.
      */
     @Override
     public JType apply(String nodeName, JsonNode node, JClassContainer jClassContainer, Schema schema) {

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-cli/src/test/java/com/googlecode/jsonschema2pojo/cli/ArgumentsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/FragmentResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/FragmentResolverImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/Schema.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapperImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/exception/GenerationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/exception/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/AdditionalPropertiesRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ArrayRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/DefaultRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/DescriptionRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/JsonSchemaRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/OptionalRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/PropertiesRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RequiredRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/SchemaRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TitleRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/FragmentResolverImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaMapperImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/AdditionalPropertiesRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ArrayRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/DescriptionRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/JsonSchemaRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/ObjectRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/OptionalRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/PropertiesRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/PropertyRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RequiredRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TitleRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ArrayIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DefaultIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/DescriptionIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/EnumIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/OptionalIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/RequiredIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/TitleIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/TypeIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/AbsoluteRefIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/CyclicalRefIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/FragmentRefIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/RelativeRefIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/ref/SelfRefIT.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/CodeGenerationHelper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/Compiler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/TestableJsonschema2PojoMojo.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2011 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2010-2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/FormatRule.java
Patch:
@@ -63,8 +63,6 @@ protected FormatRule() {
      *            the type which which is being formatted e.g. for
      *            <code>{ "type" : "string", "format" : "uri" }</code> the
      *            baseType would be java.lang.String
-     * @throws IllegalArgumentException
-     *             when the format value is not recognised
      * @return the Java type that is appropriate for the format value
      */
     @Override

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/PropertyRule.java
Patch:
@@ -106,6 +106,8 @@ public JDefinedClass apply(String nodeName, JsonNode node, JDefinedClass jclass,
             ruleFactory.getOptionalRule().apply(nodeName, node.get("optional"), setter, schema);
         }
 
+        ruleFactory.getDefaultRule().apply(nodeName, node.get("default"), field, schema);
+
         return jclass;
     }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactory.java
Patch:
@@ -83,7 +83,7 @@ public interface RuleFactory {
      * 
      * @return a schema rule that can handle the "format" declaration.
      */
-    SchemaRule<JPackage, JType> getFormatRule();
+    SchemaRule<JType, JType> getFormatRule();
 
     /**
      * Provides a rule instance that should be applied when an "object"

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/RuleFactoryImpl.java
Patch:
@@ -61,7 +61,7 @@ public SchemaRule<JClassContainer, JDefinedClass> getEnumRule() {
     }
 
     @Override
-    public SchemaRule<JPackage, JType> getFormatRule() {
+    public SchemaRule<JType, JType> getFormatRule() {
         return new FormatRule();
     }
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TypeRuleTest.java
Patch:
@@ -70,7 +70,7 @@ public void applyGeneratesDate() {
 
         JType mockDateType = createMock(JType.class);
         FormatRule mockFormatRule = createMock(FormatRule.class);
-        expect(mockFormatRule.apply("fooBar", formatNode, jpackage, null)).andReturn(mockDateType);
+        expect(mockFormatRule.apply(eq("fooBar"), eq(formatNode), isA(JType.class), isNull(Schema.class))).andReturn(mockDateType);
         expect(ruleFactory.getFormatRule()).andReturn(mockFormatRule);
 
         replay(mockFormatRule, ruleFactory);

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/TypeRule.java
Patch:
@@ -72,6 +72,7 @@ protected TypeRule(RuleFactory ruleFactory) {
      */
     @Override
     public JType apply(String nodeName, JsonNode node, JClassContainer jClassContainer, Schema schema) {
+
         String propertyTypeName = node.get("type").getTextValue();
 
         if (propertyTypeName.equals("string")) {

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -29,7 +29,6 @@
 
 import com.googlecode.jsonschema2pojo.Schema;
 import com.googlecode.jsonschema2pojo.SchemaMapper;
-import com.googlecode.jsonschema2pojo.exception.GenerationException;
 import com.sun.codemodel.JAnnotationUse;
 import com.sun.codemodel.JBlock;
 import com.sun.codemodel.JClassAlreadyExistsException;
@@ -81,7 +80,7 @@ public JDefinedClass apply(String nodeName, JsonNode node, JPackage _package, Sc
                 jclass = _package._class(getClassName(nodeName));
             }
         } catch (JClassAlreadyExistsException e) {
-            throw new GenerationException(e);
+            return e.getExistingClass();
         }
 
         schema.setJavaTypeIfEmpty(jclass);

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/EnumRule.java
Patch:
@@ -91,6 +91,8 @@ protected EnumRule() {
     public JDefinedClass apply(String nodeName, JsonNode node, JClassContainer container, Schema schema) {
         
         JDefinedClass _enum = createEnum(nodeName, container);
+        schema.setJavaTypeIfEmpty(_enum);
+        
         addGeneratedAnnotation(_enum);
         
         JFieldVar valueField = addValueField(_enum);

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -84,6 +84,7 @@ public JDefinedClass apply(String nodeName, JsonNode node, JPackage _package, Sc
             throw new GenerationException(e);
         }
 
+        schema.setJavaTypeIfEmpty(jclass);
         addGeneratedAnnotation(jclass);
         addSerializable(jclass);
 

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/DescriptionRuleTest.java
Patch:
@@ -42,7 +42,7 @@ public void applyAddsDescriptionToJavadoc() throws JClassAlreadyExistsException
         ObjectMapper mapper = new ObjectMapper();
         TextNode descriptionNode = mapper.createObjectNode().textNode("some description");
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(1));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -62,7 +62,7 @@ public FormatRuleTest(String formatValue, String expectedTypeName) {
     public void applyGeneratesTypeFromFormatValue() {
         TextNode formatNode = TextNode.valueOf(formatValue);
 
-        JType result = rule.apply("fooBar", formatNode, new JCodeModel()._package("com.example"));
+        JType result = rule.apply("fooBar", formatNode, new JCodeModel()._package("com.example"), null);
 
         assertThat(result.fullName(), equalTo(expectedTypeName));
     }

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/OptionalRuleTest.java
Patch:
@@ -42,7 +42,7 @@ public void applyAddsTextWhenOptional() throws JClassAlreadyExistsException {
         ObjectMapper mapper = new ObjectMapper();
         BooleanNode descriptionNode = mapper.createObjectNode().booleanNode(true);
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(1));
@@ -58,7 +58,7 @@ public void applySkipsTextWhenNotOptional() throws JClassAlreadyExistsException
         ObjectMapper mapper = new ObjectMapper();
         BooleanNode descriptionNode = mapper.createObjectNode().booleanNode(false);
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(0));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RequiredRuleTest.java
Patch:
@@ -42,7 +42,7 @@ public void applyAddsTextWhenRequired() throws JClassAlreadyExistsException {
         ObjectMapper mapper = new ObjectMapper();
         BooleanNode descriptionNode = mapper.createObjectNode().booleanNode(true);
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(1));
@@ -58,7 +58,7 @@ public void applySkipsTextWhenNotRequired() throws JClassAlreadyExistsException
         ObjectMapper mapper = new ObjectMapper();
         BooleanNode descriptionNode = mapper.createObjectNode().booleanNode(false);
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(0));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TitleRuleTest.java
Patch:
@@ -42,7 +42,7 @@ public void applyAddsDescriptionToJavadoc() throws JClassAlreadyExistsException
         ObjectMapper mapper = new ObjectMapper();
         TextNode titleNode = mapper.createObjectNode().textNode("some title");
 
-        JDocComment result = rule.apply("fooBar", titleNode, jclass);
+        JDocComment result = rule.apply("fooBar", titleNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(1));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/SchemaTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class SchemaTest {
@@ -71,7 +70,6 @@ public void createWithSelfRef() throws URISyntaxException {
     }
 
     @Test
-    @Ignore("Not yet supported")
     public void createWithFragmentResolution() throws URISyntaxException {
 
         URI addressSchemaUri = getClass().getResource("/schema/address.json").toURI();

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/DescriptionRuleTest.java
Patch:
@@ -42,7 +42,7 @@ public void applyAddsDescriptionToJavadoc() throws JClassAlreadyExistsException
         ObjectMapper mapper = new ObjectMapper();
         TextNode descriptionNode = mapper.createObjectNode().textNode("some description");
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(1));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/FormatRuleTest.java
Patch:
@@ -62,7 +62,7 @@ public FormatRuleTest(String formatValue, String expectedTypeName) {
     public void applyGeneratesTypeFromFormatValue() {
         TextNode formatNode = TextNode.valueOf(formatValue);
 
-        JType result = rule.apply("fooBar", formatNode, new JCodeModel()._package("com.example"));
+        JType result = rule.apply("fooBar", formatNode, new JCodeModel()._package("com.example"), null);
 
         assertThat(result.fullName(), equalTo(expectedTypeName));
     }

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/OptionalRuleTest.java
Patch:
@@ -42,7 +42,7 @@ public void applyAddsTextWhenOptional() throws JClassAlreadyExistsException {
         ObjectMapper mapper = new ObjectMapper();
         BooleanNode descriptionNode = mapper.createObjectNode().booleanNode(true);
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(1));
@@ -58,7 +58,7 @@ public void applySkipsTextWhenNotOptional() throws JClassAlreadyExistsException
         ObjectMapper mapper = new ObjectMapper();
         BooleanNode descriptionNode = mapper.createObjectNode().booleanNode(false);
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(0));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/RequiredRuleTest.java
Patch:
@@ -42,7 +42,7 @@ public void applyAddsTextWhenRequired() throws JClassAlreadyExistsException {
         ObjectMapper mapper = new ObjectMapper();
         BooleanNode descriptionNode = mapper.createObjectNode().booleanNode(true);
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(1));
@@ -58,7 +58,7 @@ public void applySkipsTextWhenNotRequired() throws JClassAlreadyExistsException
         ObjectMapper mapper = new ObjectMapper();
         BooleanNode descriptionNode = mapper.createObjectNode().booleanNode(false);
 
-        JDocComment result = rule.apply("fooBar", descriptionNode, jclass);
+        JDocComment result = rule.apply("fooBar", descriptionNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(0));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/TitleRuleTest.java
Patch:
@@ -42,7 +42,7 @@ public void applyAddsDescriptionToJavadoc() throws JClassAlreadyExistsException
         ObjectMapper mapper = new ObjectMapper();
         TextNode titleNode = mapper.createObjectNode().textNode("some title");
 
-        JDocComment result = rule.apply("fooBar", titleNode, jclass);
+        JDocComment result = rule.apply("fooBar", titleNode, jclass, null);
 
         assertThat(result, sameInstance(jclass.javadoc()));
         assertThat(result.size(), is(1));

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/EnumRuleTest.java
Patch:
@@ -37,6 +37,7 @@ public class EnumRuleTest {
 
     private static final String EXPECTED_TEXT_RESULT =
             "public class DummyClass {\n\n\n" +
+                    "    @javax.annotation.Generated(\"com.googlecode.jsonschema2pojo\")\n" +
                     "    public static enum NewEnum {\n\n" +
                     "        VALUE_ONE(\"valueOne\"),\n" +
                     "        VALUE_TWO(\"valueTwo\"),\n" +
@@ -64,6 +65,7 @@ public class EnumRuleTest {
 
     private static final String EXPECTED_TEXT_WITH_SPACES_RESULT =
             "public class DummyClass {\n\n\n" +
+                    "    @javax.annotation.Generated(\"com.googlecode.jsonschema2pojo\")\n" +
                     "    public static enum NewEnum {\n\n" +
                     "        VALUE_ONE(\"value one\"),\n" +
                     "        VALUE_TWO(\"value two\"),\n" +
@@ -91,6 +93,7 @@ public class EnumRuleTest {
 
     private static final String EXPECTED_NUMBER_RESULT =
             "public class DummyClass {\n\n\n" +
+                    "    @javax.annotation.Generated(\"com.googlecode.jsonschema2pojo\")\n" +
                     "    public static enum NewEnum {\n\n" +
                     "        _100(\"100\"),\n" +
                     "        _200(\"200\"),\n" +

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/PropertyRuleTest.java
Patch:
@@ -144,6 +144,7 @@ public class PropertyRuleTest {
                     "    public void setFooBar(com.googlecode.jsonschema2pojo.rules.PropertyRuleTest.DummyClass.FooBar fooBar) {\n" +
                     "        this.fooBar = fooBar;\n" +
                     "    }\n\n" +
+                    "    @javax.annotation.Generated(\"com.googlecode.jsonschema2pojo\")\n" +
                     "    public static enum FooBar {\n\n" +
                     "        AB_C(\"ab c\");\n" +
                     "        private final java.lang.String value;\n\n" +

File: jsonschema2pojo-integration-tests/src/test/java/com/googlecode/jsonschema2pojo/integration/util/Compiler.java
Patch:
@@ -70,7 +70,9 @@ private String[] findAllSourceFiles(File outputDirectory) {
         
         return javaSourceFileNames.toArray(new String[javaSourceFileNames.size()]);
     }
-    
+
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="NP_ALWAYS_NULL", 
+            justification="Findbugs bug: false positive when using System.out, http://old.nabble.com/-FB-Discuss--Problems-with-false(-)positive-on-System.out.println-td30586499.html")
     private void debugOutput(File file) {
         if (StringUtils.equals(System.getProperty(PRINT_SOURCE_PROPERTY), "true")) {
             try {

File: jsonschema2pojo-core/src/test/java/com/googlecode/jsonschema2pojo/rules/PropertyRuleTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright © 2010 Nokia
+ * Copyright © 2011 Nokia
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -144,7 +144,7 @@ public class PropertyRuleTest {
                     "    public void setFooBar(com.googlecode.jsonschema2pojo.rules.PropertyRuleTest.DummyClass.FooBar fooBar) {\n" +
                     "        this.fooBar = fooBar;\n" +
                     "    }\n\n" +
-                    "    public enum FooBar {\n\n" +
+                    "    public static enum FooBar {\n\n" +
                     "        AB_C(\"ab c\");\n" +
                     "        private final java.lang.String value;\n\n" +
                     "        private FooBar(java.lang.String value) {\n" +

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapperImpl.java
Patch:
@@ -66,8 +66,8 @@ public SchemaMapperImpl(Map<String, String> behaviourProperties) {
     public void generate(JCodeModel codeModel, String className, String packageName, InputStream schemaContent) throws IOException {
         JsonNode schemaNode = readSchema(schemaContent);
 
-        if (schemaNode.get("id") != null) {
-            className = schemaNode.get("id").getTextValue();
+        if (schemaNode.get("javaType") != null) {
+            className = schemaNode.get("javaType").getTextValue();
         }
 
         JPackage jpackage = codeModel._package(packageName);

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ObjectRule.java
Patch:
@@ -59,8 +59,8 @@ public JDefinedClass apply(String nodeName, JsonNode node, JPackage _package) {
 
         JDefinedClass jclass;
         try {
-            if (node.get("id") != null) {
-                jclass = _package.owner()._class(node.get("id").getTextValue());
+            if (node.get("javaType") != null) {
+                jclass = _package.owner()._class(node.get("javaType").getTextValue());
             } else {
                 jclass = _package._class(getClassName(nodeName));
             }

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/rules/ArrayRule.java
Patch:
@@ -25,7 +25,7 @@
 
 import com.googlecode.jsonschema2pojo.SchemaMapper;
 import com.sun.codemodel.JClass;
-import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JPackage;
 import com.sun.codemodel.JType;
 
 /**
@@ -34,7 +34,7 @@
  * @see <a
  *      href="http://tools.ietf.org/html/draft-zyp-json-schema-02#section-5.13">http://tools.ietf.org/html/draft-zyp-json-schema-02#section-5.13</a>
  */
-public class ArrayRule implements SchemaRule<JDefinedClass, JClass> {
+public class ArrayRule implements SchemaRule<JPackage, JClass> {
 
     private final SchemaMapper mapper;
 
@@ -43,7 +43,7 @@ public ArrayRule(SchemaMapper mapper) {
     }
 
     @Override
-    public JClass apply(String nodeName, JsonNode node, JDefinedClass generatableType) {
+    public JClass apply(String nodeName, JsonNode node, JPackage generatableType) {
 
         boolean uniqueItems = (node.get("uniqueItems") != null) && node.get("uniqueItems").getBooleanValue();
 

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Arguments.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.PosixParser;
 
+@SuppressWarnings("static-access")
 public class Arguments {
 
     private static final int EXIT_OKAY = 0;
@@ -39,7 +40,6 @@ public class Arguments {
         options.addOption(OptionBuilder.hasArg().isRequired(false).withDescription("A java package used for generated types").withLongOpt("package").withArgName("package name").create("p"));
         options.addOption(OptionBuilder.hasArg().isRequired().withDescription("The target directory into which generated types will be written").withLongOpt("target").withArgName("directory").create("t"));
         options.addOption(OptionBuilder.hasArg().isRequired().withDescription("The source file or directory from which JSON Schema will be read").withLongOpt("source").create("s"));
-
         options.addOption(OptionBuilder.hasArg(false).isRequired(false).withDescription("Generate builder-style methods as well as setters").withLongOpt("generate-builders").create("b"));
     }
 

File: jsonschema2pojo-core/src/main/java/com/googlecode/jsonschema2pojo/SchemaMapper.java
Patch:
@@ -72,6 +72,8 @@ public interface SchemaMapper {
 
     SchemaRule<JDefinedClass, JType> getTypeRule();
 
+    SchemaRule<JDefinedClass, JDefinedClass> getAdditionalPropertiesRule();
+
     /**
      * Gets from a key-value pair which defines some aspect of this
      * SchemaMapper's behaviour.

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -79,8 +79,6 @@ public void execute() throws MojoExecutionException {
 
         project.addCompileSourceRoot(outputDirectory.getPath());
 
-        System.out.println(">>>>>" + generateBuilders);
-
         Map<String, String> behaviourProperties = new HashMap<String, String>();
         behaviourProperties.put(SchemaMapper.GENERATE_BUILDERS_PROPERTY, generateBuilders);
 

File: jsonschema2pojo-cli/src/main/java/com/googlecode/jsonschema2pojo/cli/Jsonschema2Pojo.java
Patch:
@@ -27,7 +27,7 @@
 import com.googlecode.jsonschema2pojo.SchemaMapperImpl;
 import com.sun.codemodel.JCodeModel;
 
-public class Generate {
+public class Jsonschema2Pojo {
 
     public static void main(String[] args) throws FileNotFoundException, IOException {
 

File: jsonschema2pojo-maven-plugin/src/main/java/com/googlecode/jsonschema2pojo/maven/Jsonschema2PojoMojo.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.project.MavenProject;
 
-import com.googlecode.jsonschema2pojo.cli.Generate;
+import com.googlecode.jsonschema2pojo.cli.Jsonschema2Pojo;
 
 /**
  * @goal generate
@@ -69,7 +69,7 @@ public void execute() throws MojoExecutionException {
         project.addCompileSourceRoot(outputDirectory.getPath());
 
         try {
-            Generate.generate(sourceDirectory, targetPackage, outputDirectory);
+            Jsonschema2Pojo.generate(sourceDirectory, targetPackage, outputDirectory);
         } catch (IOException e) {
             throw new MojoExecutionException("Error generating classes from JSON Schema file(s) " + sourceDirectory.getPath(), e);
         }

